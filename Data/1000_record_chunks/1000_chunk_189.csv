record_number,buggy_code,fixed_code,code_similarity
188001,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  NullTransactionFactory ntf=new NullTransactionFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  StatelessDB db=new StatelessDB(dbMailbox);
  db.setParent(factory);
  db.initialCapacity=10000;
  DurableTransactionLogger durableTransactionLogger=db.getDurableTransactionLogger();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  durableTransactionLogger.fileChannel=FileChannel.open(path,StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  TransactionLoggerDriver transactionLoggerDriver=new TransactionLoggerDriver(mailboxFactory.createAsyncMailbox());
  transactionLoggerDriver.setParent(transactionAggregator);
  transactionLoggerDriver.setInitialBufferCapacity(10000);
  transactionLoggerDriver.win=3;
  transactionLoggerDriver.batch=1;
  transactionLoggerDriver.count=1;
  Go.req.send(future,transactionLoggerDriver);
  long t0=System.currentTimeMillis();
  Go.req.send(future,transactionLoggerDriver);
  long t1=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + (transactionLoggerDriver.batch * transactionLoggerDriver.count));
  durableTransactionLogger.fileChannel.close();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  NullTransactionFactory ntf=new NullTransactionFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  StatelessDB db=new StatelessDB(dbMailbox);
  db.setParent(factory);
  db.initialCapacity=10000;
  DurableTransactionLogger durableTransactionLogger=db.getDurableTransactionLogger();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  durableTransactionLogger.fileChannel=FileChannel.open(path,StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  durableTransactionLogger.currentPosition=0L;
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  TransactionLoggerDriver transactionLoggerDriver=new TransactionLoggerDriver(mailboxFactory.createAsyncMailbox());
  transactionLoggerDriver.setParent(transactionAggregator);
  transactionLoggerDriver.setInitialBufferCapacity(10000);
  transactionLoggerDriver.win=3;
  transactionLoggerDriver.batch=1;
  transactionLoggerDriver.count=1;
  Go.req.send(future,transactionLoggerDriver);
  long t0=System.currentTimeMillis();
  Go.req.send(future,transactionLoggerDriver);
  long t1=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + (transactionLoggerDriver.batch * transactionLoggerDriver.count));
  durableTransactionLogger.fileChannel.close();
  mailboxFactory.close();
}",0.986621121548534
188002,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader(10000);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  logReader.currentPosition=0;
  long rem=ReadLog.req.send(future,logReader);
  System.out.println(""String_Node_Str"" + rem);
  Finish.req.send(future,logReader);
  logReader.fileChannel.close();
  int total=db.getCounter();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  factory.defineActorType(""String_Node_Str"",GetCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader(10000);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  logReader.currentPosition=0;
  long rem=ReadLog.req.send(future,logReader);
  System.out.println(""String_Node_Str"" + rem);
  Finish.req.send(future,logReader);
  logReader.fileChannel.close();
  int total=db.getCounter();
  assertEquals(6,total);
  mailboxFactory.close();
}",0.9525179856115108
188003,"@Override protected void eval(RP rp) throws Exception {
  System.out.println(""String_Node_Str"");
  IncrementCounter.req.send(this,getParent(),rp);
}","@Override protected void eval(RP rp) throws Exception {
  IncrementCounter.req.send(this,getParent(),rp);
}",0.8392156862745098
188004,"private void nextSend() throws Exception {
  if (responsePending || pendingRequest == null)   return;
  responsePending=true;
  ProcessBlock req=pendingRequest;
  pendingRequest=null;
  if (_rp != null) {
    _rp.processResponse(null);
    _rp=null;
  }
  req.send(this,next,new RP<Object>(){
    @Override public void processResponse(    Object response) throws Exception {
      responsePending=false;
      nextSend();
    }
  }
);
}","private void nextSend() throws Exception {
  if (responsePending || pendingRequest == null)   return;
  responsePending=true;
  ProcessBlock req=pendingRequest;
  pendingRequest=null;
  if (_rp != null) {
    _rp.processResponse(null);
    _rp=null;
  }
  if (req.block instanceof FBlock) {
    Finish.req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        nextSend();
      }
    }
);
  }
 else {
    req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        nextSend();
      }
    }
);
  }
}",0.7642418930762489
188005,"/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    pendingRequest=(ProcessBlock)request;
    _rp=rp;
    nextSend();
    return;
  }
  if (reqClass == Finish.class) {
    Finish.req.send(this,next,rp);
    return;
  }
  throw new UnsupportedOperationException(reqClass.getName());
}","/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    pendingRequest=(ProcessBlock)request;
    _rp=rp;
    nextSend();
    return;
  }
  if (reqClass == Finish.class) {
    pendingRequest=FBlock.process;
    _rp=rp;
    nextSend();
    return;
  }
  throw new UnsupportedOperationException(reqClass.getName());
}",0.9420062695924764
188006,"private void nextSend() throws Exception {
  if (responsePending || pendingRequest == null)   return;
  responsePending=true;
  ProcessBlock req=pendingRequest;
  pendingRequest=null;
  if (_rp != null) {
    _rp.processResponse(null);
    _rp=null;
  }
  if (req.block instanceof FBlock) {
    Finish.req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        nextSend();
      }
    }
);
  }
 else {
    req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        nextSend();
      }
    }
);
  }
}","private void nextSend() throws Exception {
  if (responsePending || pendingRequest == null)   return;
  responsePending=true;
  ProcessBlock req=pendingRequest;
  pendingRequest=null;
  if (req.block instanceof FBlock) {
    final RP rp=_rp;
    _rp=null;
    Finish.req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        rp.processResponse(null);
        nextSend();
      }
    }
);
  }
 else {
    _rp.processResponse(null);
    _rp=null;
    req.send(this,next,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        responsePending=false;
        nextSend();
      }
    }
);
  }
}",0.8734525447042641
188007,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader(1000000);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  try {
    logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    mailboxFactory.close();
    return;
  }
  logReader.currentPosition=0;
  long t0=System.currentTimeMillis();
  long rem=ReadLog.req.send(future,logReader);
  long t1=System.currentTimeMillis();
  Finish.req.send(future,logReader);
  Finish.req.send(future,logReader);
  Finish.req.send(future,logReader);
  Finish.req.send(future,logReader);
  System.out.println(""String_Node_Str"" + rem);
  logReader.fileChannel.close();
  int transactions=db.getCounter();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + transactions);
  System.out.println(""String_Node_Str"" + (1000L * transactions / (t1 - t0)));
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader(1000000);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  try {
    logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    mailboxFactory.close();
    return;
  }
  logReader.currentPosition=0;
  long t0=System.currentTimeMillis();
  long rem=ReadLog.req.send(future,logReader);
  long t1=System.currentTimeMillis();
  Finish.req.send(future,logReader);
  System.out.println(""String_Node_Str"" + rem);
  logReader.fileChannel.close();
  int transactions=db.getCounter();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + transactions);
  System.out.println(""String_Node_Str"" + (1000L * transactions / (t1 - t0)));
  mailboxFactory.close();
}",0.9616580310880828
188008,"/** 
 * Returns the transaction log reader.
 * @return The LogReader
 */
public LogReader getLogReader() throws Exception {
  if (logReader != null)   return logReader;
  Actor parent=getParent();
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TransactionProcessor transactionProcessor=new TransactionProcessor(getMailbox());
  transactionProcessor.setParent(this);
  Deserializer deserializer=new Deserializer(getMailboxFactory().createAsyncMailbox());
  deserializer.setParent(this);
  deserializer.setNext(transactionProcessor);
  LogReader logReader=new LogReader(getMailboxFactory().createAsyncMailbox());
  logReader.setParent(parent);
  logReader.setNext(deserializer);
  return logReader;
}","/** 
 * Returns the transaction log reader.
 * @return The LogReader
 */
public LogReader getLogReader() throws Exception {
  if (logReader != null)   return logReader;
  Actor parent=getParent();
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TransactionProcessor transactionProcessor=new TransactionProcessor(getMailbox());
  transactionProcessor.setParent(this);
  transactionProcessor.generateCheckpoints=false;
  Deserializer deserializer=new Deserializer(getMailboxFactory().createAsyncMailbox());
  deserializer.setParent(this);
  deserializer.setNext(transactionProcessor);
  LogReader logReader=newLogReader(getMailboxFactory().createAsyncMailbox());
  logReader.setParent(parent);
  logReader.setNext(deserializer);
  return logReader;
}",0.9665134602757716
188009,"private void eval(final TransactionEval req,final RP rp) throws Exception {
  while (true) {
    if (ndx == size()) {
      rp.processResponse(null);
      return;
    }
    Transaction transaction=(Transaction)iGet(ndx);
    ndx+=1;
    sync=false;
    async=true;
    req.send(this,transaction,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        if (!async)         sync=true;
 else         eval(req,rp);
      }
    }
);
    if (!sync) {
      async=true;
      return;
    }
  }
}","private void eval(final TransactionEval req,final RP rp) throws Exception {
  while (true) {
    if (ndx == size()) {
      rp.processResponse(null);
      return;
    }
    Transaction transaction=(Transaction)iGet(ndx);
    ndx+=1;
    sync=false;
    async=false;
    req.send(this,transaction,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        if (!async)         sync=true;
 else         eval(req,rp);
      }
    }
);
    if (!sync) {
      async=true;
      return;
    }
  }
}",0.9935720844811754
188010,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  NullTransactionFactory ntf=new NullTransactionFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  StatelessDB db=new StatelessDB(dbMailbox);
  db.setParent(factory);
  TransactionProcessor transactionProcessor=new TransactionProcessor(dbMailbox);
  transactionProcessor.setParent(db);
  JFile jFile=new JFile(mailboxFactory.createAsyncMailbox());
  jFile.setParent(transactionProcessor);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  jFile.fileChannel=FileChannel.open(path,StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  TransactionLogger transactionLogger=new TransactionLogger(mailboxFactory.createAsyncMailbox());
  transactionLogger.setParent(jFile);
  long t0=System.currentTimeMillis();
  int i=0;
  while (i < 99) {
    (new ProcessTransaction(ntf)).sendEvent(transactionLogger);
    i+=1;
  }
  (new ProcessTransaction(ntf)).send(future,transactionLogger);
  long t1=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  jFile.fileChannel.close();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  NullTransactionFactory ntf=new NullTransactionFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  StatelessDB db=new StatelessDB(dbMailbox);
  db.setParent(factory);
  TransactionProcessor transactionProcessor=new TransactionProcessor(dbMailbox);
  transactionProcessor.setParent(db);
  JFile jFile=new JFile(mailboxFactory.createAsyncMailbox());
  jFile.setParent(transactionProcessor);
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  jFile.fileChannel=FileChannel.open(path,StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  TransactionLogger transactionLogger=new TransactionLogger(mailboxFactory.createAsyncMailbox());
  transactionLogger.setParent(jFile);
  long t0=System.currentTimeMillis();
  int i=0;
  while (i < 999999) {
    (new ProcessTransaction(ntf)).sendEvent(transactionLogger);
    i+=1;
  }
  (new ProcessTransaction(ntf)).send(future,transactionLogger);
  long t1=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t1 - t0));
  jFile.fileChannel.close();
  mailboxFactory.close();
}",0.9986639946559788
188011,"private void processTransaction(String actorType,ActorFactory actorFactory,byte[] bytes,final RP rp) throws Exception {
  makeRootJid();
  transactionListJid.iAdd(-1);
  TransactionActorJid transactionActorJid=(TransactionActorJid)transactionListJid.iGet(-1);
  if (actorType != null) {
    if (bytes == null) {
      transactionActorJid.setValue(actorType);
    }
 else {
      transactionActorJid.setJidBytes(actorType,bytes);
    }
  }
 else {
    if (bytes == null) {
      transactionActorJid.setValue(actorFactory);
    }
 else {
      transactionActorJid.setJidBytes(actorFactory,bytes);
    }
  }
  if (!rp.isEvent()) {
    TransactionResult.req.send(this,transactionActorJid.getValue(),rp);
  }
  if (!writePending && getMailbox().isEmpty()) {
    writeBlock();
  }
}","private void processTransaction(String actorType,ActorFactory actorFactory,byte[] bytes,final RP rp) throws Exception {
  makeRootJid();
  transactionListJid.iAdd(-1);
  TransactionActorJid transactionActorJid=(TransactionActorJid)transactionListJid.iGet(-1);
  if (actorType != null) {
    if (bytes == null) {
      transactionActorJid.setValue(actorType);
    }
 else {
      transactionActorJid.setJidBytes(actorType,bytes);
    }
  }
 else {
    if (bytes == null) {
      transactionActorJid.setValue(actorFactory);
    }
 else {
      transactionActorJid.setJidBytes(actorFactory,bytes);
    }
  }
  if (!rp.isEvent()) {
    TransactionResult.req.send(this,transactionActorJid.getValue(),rp);
  }
  if (!writePending) {
    writeBlock();
  }
}",0.982961992136304
188012,"private void processBlock(Block block) throws Exception {
}","private void processBlock(Block block,RP rp) throws Exception {
  rp.processResponse(null);
}",0.7763157894736842
188013,"/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  if (request.getClass() == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    processBlock(req.block);
    rp.processResponse(null);
  }
  throw new UnsupportedOperationException(request.getClass().getName());
}","/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  if (request.getClass() == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    processBlock(req.block,rp);
    return;
  }
  throw new UnsupportedOperationException(request.getClass().getName());
}",0.9710550887021476
188014,"/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  if (request.getClass() == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    processBlock(req.block);
  }
  throw new UnsupportedOperationException(request.getClass().getName());
}","/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  if (request.getClass() == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    processBlock(req.block);
    rp.processResponse(null);
  }
  throw new UnsupportedOperationException(request.getClass().getName());
}",0.9715909090909092
188015,"@Override protected void processRequest(Object request,RP rp) throws Exception {
  rp.processResponse(null);
}","@Override protected void processRequest(Object request,RP rp) throws Exception {
  if (request.getClass() == Eval.class) {
    rp.processResponse(null);
    return;
  }
  super.processRequest(request,rp);
}",0.6962025316455697
188016,"@Override public Customer createCustomer(Customer customer){
  customer.setId(nextId());
  return customer;
}","@Override public Customer createCustomer(Customer customer){
  findAllCustomers();
  customer.setId(nextId());
  return customer;
}",0.9083333333333332
188017,"public void renameFolder(DefaultMutableTreeNode treenode,MyFolder parent){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  name.setText(parent.toString());
  JPanel p=getPropPanel(name,null);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION && (!name.getText().equals(""String_Node_Str""))) {
    parent.getNode().setNodeValue(name.getText());
    ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
    writeXML();
    uploadFile();
  }
}","public void renameFolder(DefaultMutableTreeNode treenode,MyFolder parent){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  name.setText(parent.toString());
  JPanel p=getPropPanel(name,null);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION) {
    if (name.getText().equals(""String_Node_Str"")) {
      CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
      return;
    }
    for (int i=0; i < treenode.getParent().getChildCount(); i++) {
      Object node=((DefaultMutableTreeNode)treenode.getParent().getChildAt(i)).getUserObject();
      if (node.getClass() == MyFolder.class && node != parent) {
        if (((MyFolder)node).toString().equals(name.getText())) {
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
    }
    parent.getNode().setNodeValue(name.getText());
    ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
    writeXML();
    uploadFile();
  }
}",0.7413566739606127
188018,"public void appendFolder(DefaultMutableTreeNode treenode,MyFolder parent){
  String resp=CustomDialog.showInputDialog(JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",""String_Node_Str"");
  if (resp != null && !resp.equals(""String_Node_Str"")) {
    Element rootElement=doc.createElement(""String_Node_Str"");
    parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    Element fname=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(fname);
    Node node=doc.createTextNode(resp);
    fname.appendChild(node);
    MyFolder folder=new MyFolder(node);
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(folder,true);
    ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,treenode,treenode.getChildCount());
    writeXML();
    uploadFile();
  }
}","public void appendFolder(DefaultMutableTreeNode treenode,MyFolder parent){
  String resp=CustomDialog.showInputDialog(JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",""String_Node_Str"");
  if (resp != null) {
    if (resp.equals(""String_Node_Str"")) {
      CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
      return;
    }
    for (int i=0; i < treenode.getChildCount(); i++) {
      Object node=((DefaultMutableTreeNode)treenode.getChildAt(i)).getUserObject();
      if (node.getClass() == MyFolder.class) {
        if (((MyFolder)node).toString().equals(resp)) {
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
    }
    Element rootElement=doc.createElement(""String_Node_Str"");
    parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    Element fname=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(fname);
    Node node=doc.createTextNode(resp);
    fname.appendChild(node);
    MyFolder folder=new MyFolder(node);
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(folder,true);
    ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,treenode,treenode.getChildCount());
    writeXML();
    uploadFile();
  }
}",0.5173530772790375
188019,"public void parseFolder(Node node,DefaultMutableTreeNode parent){
  try {
    Node n=((Element)node).getElementsByTagName(""String_Node_Str"").item(0);
    MyFolder fname=new MyFolder(n.getFirstChild());
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(fname,true);
    parent.add(temp);
    XPathExpression expr1=xpath.compile(""String_Node_Str"");
    NodeList nodes=(NodeList)expr1.evaluate(node,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      MyParam param=new MyParam();
      n=((Element)nodes.item(i)).getElementsByTagName(""String_Node_Str"").item(0);
      param.setName(n.getFirstChild());
      n=((Element)nodes.item(i)).getElementsByTagName(""String_Node_Str"").item(0);
      param.setValue(n.getFirstChild());
      temp.add(new DefaultMutableTreeNode(param,true));
    }
    expr1=xpath.compile(""String_Node_Str"");
    nodes=(NodeList)expr1.evaluate(node,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      parseFolder(nodes.item(i),temp);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void parseFolder(Node node,DefaultMutableTreeNode parent){
  try {
    Node n=((Element)node).getElementsByTagName(""String_Node_Str"").item(0);
    MyFolder fname=new MyFolder(n.getFirstChild());
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(fname,true);
    parent.add(temp);
    XPathExpression expr1=xpath.compile(""String_Node_Str"");
    NodeList nodes=(NodeList)expr1.evaluate(node,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      MyParam param=new MyParam();
      n=((Element)nodes.item(i)).getElementsByTagName(""String_Node_Str"").item(0);
      param.setName(n.getFirstChild());
      n=((Element)nodes.item(i)).getElementsByTagName(""String_Node_Str"").item(0);
      if (n.getChildNodes().getLength() == 0) {
        Node tn=doc.createTextNode(""String_Node_Str"");
        ((Element)nodes.item(i)).getElementsByTagName(""String_Node_Str"").item(0).appendChild(tn);
        param.setValue(tn);
      }
 else {
        param.setValue(n.getFirstChild());
      }
      temp.add(new DefaultMutableTreeNode(param,true));
    }
    expr1=xpath.compile(""String_Node_Str"");
    nodes=(NodeList)expr1.evaluate(node,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      parseFolder(nodes.item(i),temp);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8713280926768722
188020,"public void appendParam(DefaultMutableTreeNode treenode,MyFolder parent){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  JTextField value=new JTextField();
  JPanel p=getPropPanel(name,value);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION && (!(name.getText() + value.getText()).equals(""String_Node_Str""))) {
    MyParam param=new MyParam();
    Element rootElement=doc.createElement(""String_Node_Str"");
    parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    Node refs=null;
    try {
      refs=parent.getNode().getParentNode().getParentNode().getFirstChild().getNextSibling().getNextSibling().getNextSibling();
    }
 catch (    Exception e) {
      refs=null;
    }
    if (refs == null) {
      parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    }
 else {
      parent.getNode().getParentNode().getParentNode().insertBefore(rootElement,refs);
    }
    Element tname=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tname);
    Node node=doc.createTextNode(name.getText());
    param.setName(node);
    tname.appendChild(node);
    Element tvalue=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tvalue);
    node=doc.createTextNode(value.getText());
    param.setValue(node);
    tvalue.appendChild(node);
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(param,true);
    ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,treenode,0);
    writeXML();
    uploadFile();
  }
}","public void appendParam(DefaultMutableTreeNode treenode,MyFolder parent){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  JTextField value=new JTextField();
  JPanel p=getPropPanel(name,value);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION) {
    if (name.getText().equals(""String_Node_Str"")) {
      CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
      return;
    }
    for (int i=0; i < treenode.getChildCount(); i++) {
      Object node=((DefaultMutableTreeNode)treenode.getChildAt(i)).getUserObject();
      if (node.getClass() == MyParam.class) {
        if (((MyParam)node).getName().getNodeValue().equals(name.getText())) {
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
    }
    MyParam param=new MyParam();
    Element rootElement=doc.createElement(""String_Node_Str"");
    parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    Node refs=null;
    try {
      refs=parent.getNode().getParentNode().getParentNode().getFirstChild().getNextSibling().getNextSibling().getNextSibling();
    }
 catch (    Exception e) {
      refs=null;
    }
    if (refs == null) {
      parent.getNode().getParentNode().getParentNode().appendChild(rootElement);
    }
 else {
      parent.getNode().getParentNode().getParentNode().insertBefore(rootElement,refs);
    }
    Element tname=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tname);
    Node node=doc.createTextNode(name.getText());
    param.setName(node);
    tname.appendChild(node);
    Element tvalue=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tvalue);
    node=doc.createTextNode(value.getText());
    param.setValue(node);
    tvalue.appendChild(node);
    DefaultMutableTreeNode temp=new DefaultMutableTreeNode(param,true);
    ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,treenode,0);
    writeXML();
    uploadFile();
  }
}",0.8499421965317919
188021,"public void addFolder(){
  String resp=CustomDialog.showInputDialog(JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",""String_Node_Str"");
  if (resp != null && !resp.equals(""String_Node_Str"")) {
    try {
      Element rootElement=doc.createElement(""String_Node_Str"");
      doc.getFirstChild().appendChild(rootElement);
      Element fname=doc.createElement(""String_Node_Str"");
      rootElement.appendChild(fname);
      Node node=doc.createTextNode(resp);
      fname.appendChild(node);
      MyFolder folder=new MyFolder(node);
      DefaultMutableTreeNode temp=new DefaultMutableTreeNode(folder,true);
      ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,root,root.getChildCount());
      if (root.getChildCount() == 1) {
        ((DefaultTreeModel)tree.getModel()).reload();
      }
      writeXML();
      uploadFile();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void addFolder(){
  String resp=CustomDialog.showInputDialog(JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",""String_Node_Str"");
  if (resp != null) {
    if (resp.equals(""String_Node_Str"")) {
      CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
      return;
    }
    for (int i=0; i < root.getChildCount(); i++) {
      Object node=((DefaultMutableTreeNode)root.getChildAt(i)).getUserObject();
      if (node.getClass() == MyFolder.class) {
        if (((MyFolder)node).toString().equals(resp)) {
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
    }
    try {
      Element rootElement=doc.createElement(""String_Node_Str"");
      doc.getFirstChild().appendChild(rootElement);
      Element fname=doc.createElement(""String_Node_Str"");
      rootElement.appendChild(fname);
      Node node=doc.createTextNode(resp);
      fname.appendChild(node);
      MyFolder folder=new MyFolder(node);
      DefaultMutableTreeNode temp=new DefaultMutableTreeNode(folder,true);
      ((DefaultTreeModel)tree.getModel()).insertNodeInto(temp,root,root.getChildCount());
      if (root.getChildCount() == 1) {
        ((DefaultTreeModel)tree.getModel()).reload();
      }
      writeXML();
      uploadFile();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.5393352965923432
188022,"public void changeParam(DefaultMutableTreeNode treenode,MyParam node){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  name.setText(node.getName().getNodeValue());
  JTextField value=new JTextField();
  value.setText(node.getValue().getNodeValue());
  JPanel p=getPropPanel(name,value);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION && (!(name.getText() + value.getText()).equals(""String_Node_Str""))) {
    node.getName().setNodeValue(name.getText());
    node.getValue().setNodeValue(value.getText());
    ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
    writeXML();
    uploadFile();
  }
}","public void changeParam(DefaultMutableTreeNode treenode,MyParam node){
  final JTextField name=new JTextField();
  name.addAncestorListener(new AncestorListener(){
    @Override public void ancestorRemoved(    AncestorEvent arg0){
    }
    @Override public void ancestorMoved(    AncestorEvent arg0){
    }
    @Override public void ancestorAdded(    AncestorEvent arg0){
      name.requestFocusInWindow();
    }
  }
);
  try {
    name.setText(node.getName().getNodeValue());
  }
 catch (  Exception e) {
  }
  JTextField value=new JTextField();
  try {
    value.setText(node.getValue().getNodeValue());
  }
 catch (  Exception e) {
  }
  JPanel p=getPropPanel(name,value);
  int r=(Integer)CustomDialog.showDialog(p,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,panel,""String_Node_Str"",null);
  if (r == JOptionPane.OK_OPTION) {
    if (name.getText().equals(""String_Node_Str"")) {
      CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
      return;
    }
    for (int i=0; i < treenode.getParent().getChildCount(); i++) {
      Object ob=((DefaultMutableTreeNode)treenode.getParent().getChildAt(i)).getUserObject();
      if (ob.getClass() == MyParam.class && ob != node) {
        if (((MyParam)ob).getName().getNodeValue().equals(name.getText())) {
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,main,""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
    }
    node.getName().setNodeValue(name.getText());
    node.getValue().setNodeValue(value.getText());
    ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
    writeXML();
    uploadFile();
  }
}",0.7400223797090638
188023,"public void handleClick(MouseEvent ev){
  if (ev.getButton() == 1) {
    if (Repository.getSuiteNr() == 0)     return;
    if (keypress == 0) {
      deselectAll();
      getClickedItem(ev.getX(),ev.getY());
      if (selected.size() > 0) {
        selectItem(selected);
        if (getItem(selected,false).getType() == 2) {
          Item temp=getItem(selected,false);
          int userDefNr=temp.getUserDefNr();
          boolean root=false;
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          if (temp.getPos().size() == 1) {
            root=true;
            if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
              System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
              if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
              }
            }
            try {
              for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                if (temp.getUserDefNr() == i)                 break;
                Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1]);
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
        }
        if (getItem(selected,false).getType() == 1) {
          Item temp=getItem(selected,false);
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          Repository.window.mainpanel.p1.suitaDetails.setTCDetails();
        }
        if (getItem(selected,false).getCheckRectangle().intersects(new Rectangle(ev.getX() - 1,ev.getY() - 1,2,2))) {
          getItem(selected,false).setCheck(!getItem(selected,false).getCheck());
        }
 else         if (getItem(selected,false).getSubItemsNr() > 0 && ev.getClickCount() == 2 && getItem(selected,false).getType() != 1) {
          if (getItem(selected,false).getType() == 2 && !itemIsExpanded(getItem(selected,false))) {
            if (!onlyOptionals)             getItem(selected,false).setVisibleTC();
 else {
              Item parent=getItem(selected,false);
              for (              Item i : parent.getSubItems()) {
                if (i.isOptional()) {
                  i.setSubItemVisible(true);
                  i.setSubItemVisible(true);
                  i.setVisible(false);
                }
              }
            }
          }
 else           getItem(selected,false).setVisible(!itemIsExpanded(getItem(selected,false)));
        }
        updateLocations(getItem(selected,false));
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
      }
      repaint();
    }
 else     if (keypress == 2) {
      getClickedItem(ev.getX(),ev.getY());
      if (selected.size() > 0) {
        int[] theone=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone[i]=selected.get(i).intValue();
        }
        Item theone1=getItem(selected,false);
        theone1.select(!theone1.isSelected());
        if (theone1.isSelected())         selectedcollection.add(theone);
 else {
          for (int m=0; m < selectedcollection.size(); m++) {
            if (Arrays.equals(selectedcollection.get(m),theone)) {
              selectedcollection.remove(m);
              break;
            }
          }
        }
        if (selectedcollection.size() == 0) {
          Repository.window.mainpanel.p1.remove.setEnabled(false);
        }
        repaint();
      }
    }
 else {
      if (selected.size() > 0) {
        deselectAll();
        int[] theone1=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone1[i]=selected.get(i).intValue();
        }
        getClickedItem(ev.getX(),ev.getY());
        int[] theone2=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone2[i]=selected.get(i).intValue();
        }
        if (theone1.length == theone2.length) {
          if (theone1.length > 1) {
            int[] temp1, temp2;
            temp1=Arrays.copyOfRange(theone1,0,theone1.length - 1);
            temp2=Arrays.copyOfRange(theone2,0,theone2.length - 1);
            if (Arrays.equals(temp1,temp2)) {
              int[] first, second;
              if (theone2[theone2.length - 1] >= theone1[theone1.length - 1]) {
                first=theone2;
                second=theone1;
              }
 else {
                first=theone1;
                second=theone2;
              }
              ArrayList<Integer> temp11=new ArrayList<Integer>();
              for (int i=0; i < temp1.length; i++)               temp11.add(new Integer(temp1[i]));
              Item parent=getItem(temp11,false);
              for (int i=second[second.length - 1]; i < first[first.length - 1] + 1; i++) {
                parent.getSubItem(i).select(true);
                int[] temporary=new int[parent.getSubItem(i).getPos().size()];
                for (int m=0; m < temporary.length; m++) {
                  temporary[m]=parent.getSubItem(i).getPos().get(m).intValue();
                }
                selectedcollection.add(temporary);
              }
            }
          }
 else {
            int first, second;
            if (theone1[0] >= theone2[0]) {
              first=theone1[0];
              second=theone2[0];
            }
 else {
              second=theone1[0];
              first=theone2[0];
            }
            for (int m=second; m < first + 1; m++) {
              Repository.getSuita(m).select(true);
              selectedcollection.add(new int[]{m});
            }
          }
        }
        repaint();
      }
    }
  }
  if (ev.getButton() == 3) {
    getClickedItem(ev.getX(),ev.getY());
    if ((selected.size() == 0)) {
      if (Repository.getSuiteNr() > 0) {
        deselectAll();
        repaint();
      }
      noSelectionPopUp(ev);
    }
 else {
      if (!getItem(selected,false).isSelected()) {
        deselectAll();
        selectItem(selected);
        repaint();
        Item temp=getItem(selected,false);
        if (temp.getType() == 0)         propertyPopUp(ev,getItem(selected,false));
 else         if (temp.getType() == 1) {
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          Repository.window.mainpanel.p1.suitaDetails.setTCDetails();
          tcPopUp(ev,getItem(selected,false));
        }
 else {
          boolean root=false;
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          if (temp.getPos().size() == 1) {
            root=true;
            int userDefNr=temp.getUserDefNr();
            if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
              System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
              if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
              }
            }
            try {
              for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                if (temp.getUserDefNr() == i)                 break;
                Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1]);
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
          suitaPopUp(ev,temp);
        }
      }
 else {
        if (selectedcollection.size() == 1) {
          if (getItem(selected,false).getType() == 0)           propertyPopUp(ev,getItem(selected,false));
 else           if (getItem(selected,false).getType() == 1)           tcPopUp(ev,getItem(selected,false));
 else {
            System.out.println(""String_Node_Str"");
            Item temp=getItem(selected,false);
            boolean root=false;
            Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
            if (temp.getPos().size() == 1) {
              root=true;
              int userDefNr=temp.getUserDefNr();
              if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
                System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
                if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                  temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
                }
              }
              try {
                for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                  if (temp.getUserDefNr() == i)                   break;
                  Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1]);
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
            Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
            suitaPopUp(ev,getItem(selected,false));
          }
        }
 else {
          multipleSelectionPopUp(ev);
        }
      }
    }
  }
  if (selectedcollection.size() > 0)   Repository.window.mainpanel.p1.remove.setEnabled(true);
}","public void handleClick(MouseEvent ev){
  if (ev.getButton() == 1) {
    if (Repository.getSuiteNr() == 0)     return;
    if (keypress == 0) {
      deselectAll();
      getClickedItem(ev.getX(),ev.getY());
      if (selected.size() > 0) {
        selectItem(selected);
        if (getItem(selected,false).getType() == 2) {
          Item temp=getItem(selected,false);
          int userDefNr=temp.getUserDefNr();
          boolean root=false;
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          if (temp.getPos().size() == 1) {
            root=true;
            if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
              System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
              if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
              }
            }
            try {
              for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                if (temp.getUserDefNr() == i)                 break;
                Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1],true);
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
        }
        if (getItem(selected,false).getType() == 1) {
          Item temp=getItem(selected,false);
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          Repository.window.mainpanel.p1.suitaDetails.setTCDetails();
        }
        if (getItem(selected,false).getCheckRectangle().intersects(new Rectangle(ev.getX() - 1,ev.getY() - 1,2,2))) {
          getItem(selected,false).setCheck(!getItem(selected,false).getCheck());
        }
 else         if (getItem(selected,false).getSubItemsNr() > 0 && ev.getClickCount() == 2 && getItem(selected,false).getType() != 1) {
          if (getItem(selected,false).getType() == 2 && !itemIsExpanded(getItem(selected,false))) {
            if (!onlyOptionals)             getItem(selected,false).setVisibleTC();
 else {
              Item parent=getItem(selected,false);
              for (              Item i : parent.getSubItems()) {
                if (i.isOptional()) {
                  i.setSubItemVisible(true);
                  i.setSubItemVisible(true);
                  i.setVisible(false);
                }
              }
            }
          }
 else           getItem(selected,false).setVisible(!itemIsExpanded(getItem(selected,false)));
        }
        updateLocations(getItem(selected,false));
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
      }
      repaint();
    }
 else     if (keypress == 2) {
      getClickedItem(ev.getX(),ev.getY());
      if (selected.size() > 0) {
        int[] theone=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone[i]=selected.get(i).intValue();
        }
        Item theone1=getItem(selected,false);
        theone1.select(!theone1.isSelected());
        if (theone1.isSelected())         selectedcollection.add(theone);
 else {
          for (int m=0; m < selectedcollection.size(); m++) {
            if (Arrays.equals(selectedcollection.get(m),theone)) {
              selectedcollection.remove(m);
              break;
            }
          }
        }
        if (selectedcollection.size() == 0) {
          Repository.window.mainpanel.p1.remove.setEnabled(false);
        }
        repaint();
      }
    }
 else {
      if (selected.size() > 0) {
        deselectAll();
        int[] theone1=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone1[i]=selected.get(i).intValue();
        }
        getClickedItem(ev.getX(),ev.getY());
        int[] theone2=new int[selected.size()];
        for (int i=0; i < selected.size(); i++) {
          theone2[i]=selected.get(i).intValue();
        }
        if (theone1.length == theone2.length) {
          if (theone1.length > 1) {
            int[] temp1, temp2;
            temp1=Arrays.copyOfRange(theone1,0,theone1.length - 1);
            temp2=Arrays.copyOfRange(theone2,0,theone2.length - 1);
            if (Arrays.equals(temp1,temp2)) {
              int[] first, second;
              if (theone2[theone2.length - 1] >= theone1[theone1.length - 1]) {
                first=theone2;
                second=theone1;
              }
 else {
                first=theone1;
                second=theone2;
              }
              ArrayList<Integer> temp11=new ArrayList<Integer>();
              for (int i=0; i < temp1.length; i++)               temp11.add(new Integer(temp1[i]));
              Item parent=getItem(temp11,false);
              for (int i=second[second.length - 1]; i < first[first.length - 1] + 1; i++) {
                parent.getSubItem(i).select(true);
                int[] temporary=new int[parent.getSubItem(i).getPos().size()];
                for (int m=0; m < temporary.length; m++) {
                  temporary[m]=parent.getSubItem(i).getPos().get(m).intValue();
                }
                selectedcollection.add(temporary);
              }
            }
          }
 else {
            int first, second;
            if (theone1[0] >= theone2[0]) {
              first=theone1[0];
              second=theone2[0];
            }
 else {
              second=theone1[0];
              first=theone2[0];
            }
            for (int m=second; m < first + 1; m++) {
              Repository.getSuita(m).select(true);
              selectedcollection.add(new int[]{m});
            }
          }
        }
        repaint();
      }
    }
  }
  if (ev.getButton() == 3) {
    getClickedItem(ev.getX(),ev.getY());
    if ((selected.size() == 0)) {
      if (Repository.getSuiteNr() > 0) {
        deselectAll();
        repaint();
      }
      noSelectionPopUp(ev);
    }
 else {
      if (!getItem(selected,false).isSelected()) {
        deselectAll();
        selectItem(selected);
        repaint();
        Item temp=getItem(selected,false);
        if (temp.getType() == 0)         propertyPopUp(ev,getItem(selected,false));
 else         if (temp.getType() == 1) {
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          Repository.window.mainpanel.p1.suitaDetails.setTCDetails();
          tcPopUp(ev,getItem(selected,false));
        }
 else {
          boolean root=false;
          Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
          if (temp.getPos().size() == 1) {
            root=true;
            int userDefNr=temp.getUserDefNr();
            if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
              System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
              if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
              }
            }
            try {
              for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                if (temp.getUserDefNr() == i)                 break;
                Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1],true);
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
          suitaPopUp(ev,temp);
        }
      }
 else {
        if (selectedcollection.size() == 1) {
          if (getItem(selected,false).getType() == 0)           propertyPopUp(ev,getItem(selected,false));
 else           if (getItem(selected,false).getType() == 1)           tcPopUp(ev,getItem(selected,false));
 else {
            System.out.println(""String_Node_Str"");
            Item temp=getItem(selected,false);
            boolean root=false;
            Repository.window.mainpanel.p1.suitaDetails.setParent(temp);
            if (temp.getPos().size() == 1) {
              root=true;
              int userDefNr=temp.getUserDefNr();
              if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
                System.out.println(""String_Node_Str"" + temp.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
                if (Repository.window.mainpanel.p1.suitaDetails.getDefsNr() < userDefNr) {
                  temp.getUserDefs().subList(Repository.window.mainpanel.p1.suitaDetails.getDefsNr(),userDefNr).clear();
                }
              }
              try {
                for (int i=0; i < Repository.window.mainpanel.p1.suitaDetails.getDefsNr(); i++) {
                  if (temp.getUserDefNr() == i)                   break;
                  Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(temp.getUserDef(i)[1],true);
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
            Repository.window.mainpanel.p1.suitaDetails.setSuiteDetails(root);
            suitaPopUp(ev,getItem(selected,false));
          }
        }
 else {
          multipleSelectionPopUp(ev);
        }
      }
    }
  }
  if (selectedcollection.size() > 0)   Repository.window.mainpanel.p1.remove.setEnabled(true);
}",0.9992449030958972
188024,"public void keyDownPressed(){
  ArrayList<Integer> temp=new ArrayList<Integer>();
  int last=selectedcollection.size() - 1;
  if (last < 0)   return;
  for (int j=0; j < selectedcollection.get(last).length; j++) {
    temp.add(new Integer(selectedcollection.get(last)[j]));
  }
  Item next=nextItem(getItem(temp,false));
  if (next != null && keypress != 2) {
    if (keypress != 1) {
      deselectAll();
      selectItem(next.getPos());
      if (next.getType() == 2 && next.getPos().size() == 1) {
        int userDefNr=next.getUserDefNr();
        Repository.window.mainpanel.p1.suitaDetails.setParent(next);
        if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
          System.out.println(""String_Node_Str"" + next.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
        }
        try {
          for (int i=0; i < userDefNr; i++) {
            Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(next.getUserDef(i)[1]);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
        Repository.window.mainpanel.p1.suitaDetails.clearDefs();
        Repository.window.mainpanel.p1.suitaDetails.setParent(null);
      }
    }
 else {
      if (!clearedSelection) {
        deselectAll();
        clearedSelection=true;
        selectItem(getItem(temp,false).getPos());
      }
      if (next.isSelected()) {
        int[] itemselected=selectedcollection.get(selectedcollection.size() - 1);
        Item theone=Repository.getSuita(itemselected[0]);
        for (int j=1; j < itemselected.length; j++) {
          theone=theone.getSubItem(itemselected[j]);
        }
        theone.select(false);
        selectedcollection.remove(selectedcollection.size() - 1);
      }
 else       selectItem(next.getPos());
    }
    Repository.window.mainpanel.p1.remove.setEnabled(true);
    repaint();
  }
}","public void keyDownPressed(){
  ArrayList<Integer> temp=new ArrayList<Integer>();
  int last=selectedcollection.size() - 1;
  if (last < 0)   return;
  for (int j=0; j < selectedcollection.get(last).length; j++) {
    temp.add(new Integer(selectedcollection.get(last)[j]));
  }
  Item next=nextItem(getItem(temp,false));
  if (next != null && keypress != 2) {
    if (keypress != 1) {
      deselectAll();
      selectItem(next.getPos());
      if (next.getType() == 2 && next.getPos().size() == 1) {
        int userDefNr=next.getUserDefNr();
        Repository.window.mainpanel.p1.suitaDetails.setParent(next);
        if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
          System.out.println(""String_Node_Str"" + next.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
        }
        try {
          for (int i=0; i < userDefNr; i++) {
            Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(next.getUserDef(i)[1],true);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
        Repository.window.mainpanel.p1.suitaDetails.clearDefs();
        Repository.window.mainpanel.p1.suitaDetails.setParent(null);
      }
    }
 else {
      if (!clearedSelection) {
        deselectAll();
        clearedSelection=true;
        selectItem(getItem(temp,false).getPos());
      }
      if (next.isSelected()) {
        int[] itemselected=selectedcollection.get(selectedcollection.size() - 1);
        Item theone=Repository.getSuita(itemselected[0]);
        for (int j=1; j < itemselected.length; j++) {
          theone=theone.getSubItem(itemselected[j]);
        }
        theone.select(false);
        selectedcollection.remove(selectedcollection.size() - 1);
      }
 else       selectItem(next.getPos());
    }
    Repository.window.mainpanel.p1.remove.setEnabled(true);
    repaint();
  }
}",0.998791978738826
188025,"public AddSuiteFrame(final JComponent mainwindow,final Item suita,final int pos){
  addWindowFocusListener(new WindowFocusListener(){
    public void windowLostFocus(    WindowEvent ev){
      toFront();
    }
    public void windowGainedFocus(    WindowEvent ev){
    }
  }
);
  setAlwaysOnTop(true);
  setLayout(null);
  setResizable(false);
  setBounds(400,300,200,170);
  JLabel name=new JLabel(""String_Node_Str"");
  name.setBounds(5,5,80,20);
  name.setFont(new Font(""String_Node_Str"",Font.PLAIN,14));
  JLabel EPId=new JLabel(""String_Node_Str"");
  EPId.setBounds(5,30,80,20);
  EPId.setFont(new Font(""String_Node_Str"",Font.PLAIN,14));
  namefield=new JTextField(30);
  namefield.setBounds(90,2,100,25);
  StringBuilder b=new StringBuilder();
  Node parentnode=Repository.window.mainpanel.p4.getTB().getParentNode();
  HashMap children=parentnode.getChildren();
  if (children != null && children.size() != 0) {
    Set keys=children.keySet();
    Iterator iter=keys.iterator();
    while (iter.hasNext()) {
      String n=iter.next().toString();
      String tempname=parentnode.getChild(n).getName();
      b.append(tempname);
      b.append(""String_Node_Str"");
    }
  }
  String result=b.toString();
  String[] vecresult=result.split(""String_Node_Str"");
  epidfield=new JList<String>(vecresult);
  try {
    epidfield.setSelectedIndex(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  add(name);
  add(namefield);
  add(EPId);
  JScrollPane sc=new JScrollPane(epidfield);
  sc.setBounds(90,30,100,90);
  add(sc);
  Grafic.this.setCanRequestFocus(false);
  setVisible(true);
  ok=new JButton(""String_Node_Str"");
  ok.setBounds(130,120,60,20);
  ok.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      okAction(suita,pos);
    }
  }
);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      Grafic.this.setCanRequestFocus(true);
      (SwingUtilities.getWindowAncestor(ok)).dispose();
    }
  }
);
  Action actionListener=new AbstractAction(){
    public void actionPerformed(    ActionEvent actionEvent){
      JButton source=(JButton)actionEvent.getSource();
      okAction(suita,pos);
    }
  }
;
  InputMap keyMap=new ComponentInputMap(ok);
  keyMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  ActionMap actionMap=new ActionMapUIResource();
  actionMap.put(""String_Node_Str"",actionListener);
  SwingUtilities.replaceUIActionMap(ok,actionMap);
  SwingUtilities.replaceUIInputMap(ok,JComponent.WHEN_IN_FOCUSED_WINDOW,keyMap);
  add(ok);
  namefield.requestFocus();
}","public AddSuiteFrame(final JComponent mainwindow,final Item suita,final int pos){
  addWindowFocusListener(new WindowFocusListener(){
    public void windowLostFocus(    WindowEvent ev){
      toFront();
    }
    public void windowGainedFocus(    WindowEvent ev){
    }
  }
);
  System.out.println(""String_Node_Str"");
  setAlwaysOnTop(true);
  setLayout(null);
  setResizable(false);
  setBounds(400,300,200,170);
  JLabel name=new JLabel(""String_Node_Str"");
  name.setBounds(5,5,80,20);
  name.setFont(new Font(""String_Node_Str"",Font.PLAIN,14));
  JLabel EPId=new JLabel(""String_Node_Str"");
  EPId.setBounds(5,30,80,20);
  EPId.setFont(new Font(""String_Node_Str"",Font.PLAIN,14));
  namefield=new JTextField(30);
  namefield.setBounds(90,2,100,25);
  StringBuilder b=new StringBuilder();
  Node parentnode=Repository.window.mainpanel.p4.getTB().getParentNode();
  try {
    parentnode.getChildren();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
  HashMap children=parentnode.getChildren();
  if (children != null && children.size() != 0) {
    Set keys=children.keySet();
    Iterator iter=keys.iterator();
    while (iter.hasNext()) {
      String n=iter.next().toString();
      String tempname=parentnode.getChild(n).getName();
      b.append(tempname);
      b.append(""String_Node_Str"");
    }
  }
  String result=b.toString();
  String[] vecresult=result.split(""String_Node_Str"");
  epidfield=new JList<String>(vecresult);
  try {
    epidfield.setSelectedIndex(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  add(name);
  add(namefield);
  add(EPId);
  JScrollPane sc=new JScrollPane(epidfield);
  sc.setBounds(90,30,100,90);
  add(sc);
  Grafic.this.setCanRequestFocus(false);
  setVisible(true);
  ok=new JButton(""String_Node_Str"");
  ok.setBounds(130,120,60,20);
  ok.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      okAction(suita,pos);
    }
  }
);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      Grafic.this.setCanRequestFocus(true);
      (SwingUtilities.getWindowAncestor(ok)).dispose();
    }
  }
);
  Action actionListener=new AbstractAction(){
    public void actionPerformed(    ActionEvent actionEvent){
      JButton source=(JButton)actionEvent.getSource();
      okAction(suita,pos);
    }
  }
;
  InputMap keyMap=new ComponentInputMap(ok);
  keyMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  ActionMap actionMap=new ActionMapUIResource();
  actionMap.put(""String_Node_Str"",actionListener);
  SwingUtilities.replaceUIActionMap(ok,actionMap);
  SwingUtilities.replaceUIInputMap(ok,JComponent.WHEN_IN_FOCUSED_WINDOW,keyMap);
  add(ok);
  namefield.requestFocus();
}",0.9665800222799852
188026,"public void keyUpPressed(){
  ArrayList<Integer> temp=new ArrayList<Integer>();
  int last=selectedcollection.size() - 1;
  if (last < 0)   return;
  for (int j=0; j < selectedcollection.get(last).length; j++) {
    temp.add(new Integer(selectedcollection.get(last)[j]));
  }
  Item next=previousItem(getItem(temp,false));
  if (next != null && keypress != 2) {
    if (keypress != 1) {
      deselectAll();
      selectItem(next.getPos());
      if (next.getType() == 2 && next.getPos().size() == 1) {
        int userDefNr=next.getUserDefNr();
        Repository.window.mainpanel.p1.suitaDetails.setParent(next);
        if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
          System.out.println(""String_Node_Str"" + next.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
        }
        try {
          for (int i=0; i < userDefNr; i++) {
            Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(next.getUserDef(i)[1]);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
        Repository.window.mainpanel.p1.suitaDetails.clearDefs();
        Repository.window.mainpanel.p1.suitaDetails.setParent(null);
      }
    }
 else {
      if (!clearedSelection) {
        deselectAll();
        clearedSelection=true;
        selectItem(getItem(temp,false).getPos());
      }
      if (next.isSelected()) {
        int[] itemselected=selectedcollection.get(selectedcollection.size() - 1);
        Item theone=Repository.getSuita(itemselected[0]);
        for (int j=1; j < itemselected.length; j++) {
          theone=theone.getSubItem(itemselected[j]);
        }
        theone.select(false);
        selectedcollection.remove(selectedcollection.size() - 1);
      }
 else       selectItem(next.getPos());
    }
    Repository.window.mainpanel.p1.remove.setEnabled(true);
    repaint();
  }
}","public void keyUpPressed(){
  ArrayList<Integer> temp=new ArrayList<Integer>();
  int last=selectedcollection.size() - 1;
  if (last < 0)   return;
  for (int j=0; j < selectedcollection.get(last).length; j++) {
    temp.add(new Integer(selectedcollection.get(last)[j]));
  }
  Item next=previousItem(getItem(temp,false));
  if (next != null && keypress != 2) {
    if (keypress != 1) {
      deselectAll();
      selectItem(next.getPos());
      if (next.getType() == 2 && next.getPos().size() == 1) {
        int userDefNr=next.getUserDefNr();
        Repository.window.mainpanel.p1.suitaDetails.setParent(next);
        if (userDefNr != Repository.window.mainpanel.p1.suitaDetails.getDefsNr()) {
          System.out.println(""String_Node_Str"" + next.getName() + ""String_Node_Str""+ userDefNr+ ""String_Node_Str""+ Repository.window.mainpanel.p1.suitaDetails.getDefsNr()+ ""String_Node_Str"");
        }
        try {
          for (int i=0; i < userDefNr; i++) {
            Repository.window.mainpanel.p1.suitaDetails.getDefPanel(i).setDescription(next.getUserDef(i)[1],true);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Repository.window.mainpanel.p1.suitaDetails.setGlobalDetails();
        Repository.window.mainpanel.p1.suitaDetails.clearDefs();
        Repository.window.mainpanel.p1.suitaDetails.setParent(null);
      }
    }
 else {
      if (!clearedSelection) {
        deselectAll();
        clearedSelection=true;
        selectItem(getItem(temp,false).getPos());
      }
      if (next.isSelected()) {
        int[] itemselected=selectedcollection.get(selectedcollection.size() - 1);
        Item theone=Repository.getSuita(itemselected[0]);
        for (int j=1; j < itemselected.length; j++) {
          theone=theone.getSubItem(itemselected[j]);
        }
        theone.select(false);
        selectedcollection.remove(selectedcollection.size() - 1);
      }
 else       selectItem(next.getPos());
    }
    Repository.window.mainpanel.p1.remove.setEnabled(true);
    repaint();
  }
}",0.9987931450639632
188027,"public String toString(){
  return name.getNodeValue() + ""String_Node_Str"" + value.getNodeValue();
}","public String toString(){
  String n=""String_Node_Str"";
  String v=""String_Node_Str"";
  try {
    n=name.getNodeValue();
  }
 catch (  Exception e) {
  }
  try {
    v=value.getNodeValue();
  }
 catch (  Exception e) {
  }
  return n + ""String_Node_Str"" + v;
}",0.3944444444444444
188028,"private void init(){
  JLabel name=new JLabel(""String_Node_Str"");
  JLabel id=new JLabel(""String_Node_Str"");
  JLabel ep=new JLabel(""String_Node_Str"");
  JLabel path=new JLabel(""String_Node_Str"");
  tep=new JList();
  tname=new JTextField();
  tep.setEnabled(false);
  tname.setEnabled(false);
  tid=new JTextField();
  tid.setEditable(false);
  tpath=new JTextField();
  tpath.setEditable(false);
  JPanel jPanel1=new JPanel();
  JScrollPane jScrollPane2=new JScrollPane();
  JScrollPane epscroll=new JScrollPane(tep);
  proppanel=new JPanel();
  add=new JButton(""String_Node_Str"");
  add.setEnabled(false);
  setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
  jPanel1.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  jScrollPane2.setBorder(null);
  jScrollPane2.setPreferredSize(new Dimension(350,150));
  proppanel.setPreferredSize(new Dimension(280,150));
  proppanel.setLayout(null);
  proppanel.add(add);
  add.setBounds(310,5,90,23);
  jScrollPane2.setViewportView(proppanel);
  GroupLayout jPanel1Layout=new GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jScrollPane2,GroupLayout.PREFERRED_SIZE,0,Short.MAX_VALUE));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jScrollPane2,GroupLayout.Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));
  GroupLayout optpanLayout=new GroupLayout(this);
  this.setLayout(optpanLayout);
  optpanLayout.setHorizontalGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addContainerGap().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(ep).addComponent(name).addComponent(id).addComponent(path)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.TRAILING,false).addComponent(epscroll,GroupLayout.Alignment.LEADING,GroupLayout.DEFAULT_SIZE,151,Short.MAX_VALUE).addComponent(tid,GroupLayout.Alignment.LEADING,GroupLayout.DEFAULT_SIZE,151,Short.MAX_VALUE).addComponent(tname,GroupLayout.Alignment.LEADING).addComponent(tpath)).addGap(0,105,Short.MAX_VALUE)).addComponent(jPanel1,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  optpanLayout.setVerticalGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addContainerGap().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(ep).addComponent(epscroll,80,80,80)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(name).addComponent(tname,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(id).addComponent(tid,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(path).addComponent(tpath,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGap(18,18,18).addComponent(jPanel1,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  tname.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent ev){
      try {
        if (parent.getName().equals(tname.getText()))         return;
        if (!checkExistingName(parent,tname.getText())) {
          String query=client.execute(""String_Node_Str"",new Object[]{parent.getID(),tname.getText()}).toString();
          if (query.equals(""String_Node_Str"")) {
            updatePaths(treenode,parent);
            parent.setName(tname.getText());
            tpath.setText(parent.getPath().getPath());
            ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
            Repository.window.mainpanel.p1.suitaDetails.setComboTBs();
          }
 else {
            System.out.println(""String_Node_Str"" + query);
            CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",query);
          }
        }
 else {
          tname.setText(parent.getName());
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  add.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String resp=CustomDialog.showInputDialog(JOptionPane.QUESTION_MESSAGE,JOptionPane.OK_CANCEL_OPTION,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
      if (resp != null && !resp.equals(""String_Node_Str"")) {
        try {
          if (parent.getPropery(resp) == null) {
            String name=parent.getName();
            String path=parent.getParent().getID();
            String query=""String_Node_Str"" + resp + ""String_Node_Str"";
            query=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
            if (query.equals(""String_Node_Str"")) {
              parent.addProperty(resp,""String_Node_Str"");
              updateProperties();
            }
          }
 else {
            CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  populateEPs();
}","private void init(){
  JLabel name=new JLabel(""String_Node_Str"");
  JLabel id=new JLabel(""String_Node_Str"");
  JLabel ep=new JLabel(""String_Node_Str"");
  JLabel path=new JLabel(""String_Node_Str"");
  tep=new JList();
  tname=new JTextField();
  tep.setEnabled(false);
  tname.setEnabled(false);
  tid=new JTextField();
  tid.setEditable(false);
  tpath=new JTextField();
  tpath.setEditable(false);
  JPanel jPanel1=new JPanel();
  JScrollPane jScrollPane2=new JScrollPane();
  JScrollPane epscroll=new JScrollPane(tep);
  proppanel=new JPanel();
  add=new JButton(""String_Node_Str"");
  add.setEnabled(false);
  setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
  jPanel1.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  jScrollPane2.setBorder(null);
  jScrollPane2.setPreferredSize(new Dimension(350,150));
  proppanel.setPreferredSize(new Dimension(280,150));
  proppanel.setLayout(null);
  proppanel.add(add);
  add.setBounds(310,5,90,23);
  jScrollPane2.setViewportView(proppanel);
  GroupLayout jPanel1Layout=new GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jScrollPane2,GroupLayout.PREFERRED_SIZE,0,Short.MAX_VALUE));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jScrollPane2,GroupLayout.Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));
  GroupLayout optpanLayout=new GroupLayout(this);
  this.setLayout(optpanLayout);
  optpanLayout.setHorizontalGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addContainerGap().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(ep).addComponent(name).addComponent(id).addComponent(path)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.TRAILING,false).addComponent(epscroll,GroupLayout.Alignment.LEADING,GroupLayout.DEFAULT_SIZE,151,Short.MAX_VALUE).addComponent(tid,GroupLayout.Alignment.LEADING,GroupLayout.DEFAULT_SIZE,151,Short.MAX_VALUE).addComponent(tname,GroupLayout.Alignment.LEADING).addComponent(tpath)).addGap(0,105,Short.MAX_VALUE)).addComponent(jPanel1,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  optpanLayout.setVerticalGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(optpanLayout.createSequentialGroup().addContainerGap().addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(ep).addComponent(epscroll,80,80,80)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(name).addComponent(tname,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(id).addComponent(tid,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(optpanLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(path).addComponent(tpath,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGap(18,18,18).addComponent(jPanel1,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  tname.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent ev){
      if (tname.getText().equals(""String_Node_Str"") && parent != null) {
        CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
        tname.setText(parent.getName());
        tname.requestFocusInWindow();
        tname.requestFocus();
      }
    }
  }
);
  tname.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent ev){
      try {
        if (tname.getText().equals(""String_Node_Str""))         return;
        if (parent.getName().equals(tname.getText()))         return;
        if (!checkExistingName(parent,tname.getText())) {
          String query=client.execute(""String_Node_Str"",new Object[]{parent.getID(),tname.getText()}).toString();
          if (query.equals(""String_Node_Str"")) {
            updatePaths(treenode,parent);
            parent.setName(tname.getText());
            tpath.setText(parent.getPath().getPath());
            ((DefaultTreeModel)tree.getModel()).nodeChanged(treenode);
            Repository.window.mainpanel.p1.suitaDetails.setComboTBs();
          }
 else {
            System.out.println(""String_Node_Str"" + query);
            CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",query);
          }
        }
 else {
          tname.setText(parent.getName());
          CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  add.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String resp=CustomDialog.showInputDialog(JOptionPane.QUESTION_MESSAGE,JOptionPane.OK_CANCEL_OPTION,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
      if (resp != null && !resp.equals(""String_Node_Str"")) {
        try {
          if (parent.getPropery(resp) == null) {
            String name=parent.getName();
            String path=parent.getParent().getID();
            String query=""String_Node_Str"" + resp + ""String_Node_Str"";
            query=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
            if (query.equals(""String_Node_Str"")) {
              parent.addProperty(resp,""String_Node_Str"");
              updateProperties();
            }
          }
 else {
            CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  populateEPs();
}",0.8444408584799097
188029,"public void actionPerformed(ActionEvent ev){
  try {
    String s=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getText()}).toString();
    if (s.equals(""String_Node_Str"")) {
      parent.getProperties().remove(jTextField1.getText());
      updateProperties();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void actionPerformed(ActionEvent ev){
  try {
    if (jTextField1.getText().equals(""String_Node_Str""))     return;
    String s=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getText()}).toString();
    if (s.equals(""String_Node_Str"")) {
      parent.getProperties().remove(jTextField1.getText());
      updateProperties();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9157509157509156
188030,"public void updateProperties(){
  proppanel.removeAll();
  if (parent != null) {
    int size=parent.getProperties().size();
    Object[] keys=parent.getProperties().keySet().toArray();
    Object[] values=parent.getProperties().values().toArray();
    for (int i=0; i < size; i++) {
      final JLabel jLabel1=new JLabel(""String_Node_Str"");
      final MyTextField jTextField1=new MyTextField(keys[i].toString());
      JLabel jLabel2=new JLabel(""String_Node_Str"");
      final JTextField jTextField2=new JTextField();
      proppanel.add(jLabel1);
      jLabel1.setBounds(5,i * 30 + 5,210,14);
      proppanel.add(jTextField1);
      jTextField1.setBounds(50,i * 30 + 5,95,20);
      jTextField1.addKeyListener(new KeyAdapter(){
        public void keyReleased(        KeyEvent ev){
          try {
            if (jTextField1.getText().equals(jTextField1.getOldValue()))             return;
            if (parent.getPropery(jTextField1.getText()) == null) {
              String resp=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getOldValue(),jTextField1.getText()}).toString();
              if (resp.equals(""String_Node_Str"")) {
                parent.addProperty(jTextField1.getText(),parent.getProperties().remove(jTextField1.getOldValue()).toString());
                jTextField1.setOldValue(jTextField1.getText());
              }
 else {
                jTextField1.setText(jTextField1.getOldValue());
              }
            }
 else {
              jTextField1.setText(jTextField1.getOldValue());
              CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      proppanel.add(jLabel2);
      jLabel2.setBounds(160,i * 30 + 5,45,14);
      proppanel.add(jTextField2);
      jTextField2.setBounds(205,i * 30 + 2,100,20);
      jTextField2.setText(values[i].toString());
      jTextField2.addKeyListener(new KeyAdapter(){
        public void keyReleased(        KeyEvent ev){
          String key=jTextField1.getText();
          String value=jTextField2.getText();
          parent.addProperty(key,value);
          String path=parent.getParent().getID();
          String name=parent.getName();
          String query=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      JButton remove=new JButton(""String_Node_Str"");
      remove.setBounds(310,i * 30 + 2,90,20);
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ev){
          try {
            String s=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getText()}).toString();
            if (s.equals(""String_Node_Str"")) {
              parent.getProperties().remove(jTextField1.getText());
              updateProperties();
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      proppanel.add(jLabel1);
      proppanel.add(jLabel2);
      proppanel.add(jTextField2);
      proppanel.add(remove);
    }
    add.setBounds(310,(size * 30) + 2,90,23);
    proppanel.add(add);
    proppanel.setPreferredSize(new Dimension(280,(size * 30) + 30));
  }
  proppanel.repaint();
}","public void updateProperties(){
  proppanel.removeAll();
  if (parent != null) {
    int size=parent.getProperties().size();
    Object[] keys=parent.getProperties().keySet().toArray();
    Object[] values=parent.getProperties().values().toArray();
    for (int i=0; i < size; i++) {
      final JLabel jLabel1=new JLabel(""String_Node_Str"");
      final MyTextField jTextField1=new MyTextField(keys[i].toString());
      JLabel jLabel2=new JLabel(""String_Node_Str"");
      final JTextField jTextField2=new JTextField();
      proppanel.add(jLabel1);
      jLabel1.setBounds(5,i * 30 + 5,210,14);
      proppanel.add(jTextField1);
      jTextField1.setBounds(50,i * 30 + 5,95,20);
      jTextField1.addFocusListener(new FocusAdapter(){
        public void focusLost(        FocusEvent ev){
          if (jTextField1.getText().equals(""String_Node_Str"")) {
            CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
            jTextField1.setText(jTextField1.getOldValue());
            jTextField1.requestFocusInWindow();
            jTextField1.requestFocus();
          }
        }
      }
);
      jTextField1.addKeyListener(new KeyAdapter(){
        public void keyReleased(        KeyEvent ev){
          try {
            if (jTextField1.getText().equals(""String_Node_Str""))             return;
            if (jTextField1.getText().equals(jTextField1.getOldValue()))             return;
            if (parent.getPropery(jTextField1.getText()) == null) {
              String resp=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getOldValue(),jTextField1.getText()}).toString();
              if (resp.equals(""String_Node_Str"")) {
                parent.addProperty(jTextField1.getText(),parent.getProperties().remove(jTextField1.getOldValue()).toString());
                jTextField1.setOldValue(jTextField1.getText());
              }
 else {
                jTextField1.setText(jTextField1.getOldValue());
              }
            }
 else {
              jTextField1.setText(jTextField1.getOldValue());
              CustomDialog.showInfo(JOptionPane.WARNING_MESSAGE,NodePanel.this,""String_Node_Str"",""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      proppanel.add(jLabel2);
      jLabel2.setBounds(160,i * 30 + 5,45,14);
      proppanel.add(jTextField2);
      jTextField2.setBounds(205,i * 30 + 2,100,20);
      jTextField2.setText(values[i].toString());
      jTextField2.addKeyListener(new KeyAdapter(){
        public void keyReleased(        KeyEvent ev){
          String key=jTextField1.getText();
          String value=jTextField2.getText();
          String path=parent.getParent().getID();
          String name=parent.getName();
          String query=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
            if (resp.equals(""String_Node_Str"")) {
              parent.addProperty(key,value);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      JButton remove=new JButton(""String_Node_Str"");
      remove.setBounds(310,i * 30 + 2,90,20);
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ev){
          try {
            if (jTextField1.getText().equals(""String_Node_Str""))             return;
            String s=client.execute(""String_Node_Str"",new Object[]{parent.getID() + ""String_Node_Str"" + jTextField1.getText()}).toString();
            if (s.equals(""String_Node_Str"")) {
              parent.getProperties().remove(jTextField1.getText());
              updateProperties();
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      proppanel.add(jLabel1);
      proppanel.add(jLabel2);
      proppanel.add(jTextField2);
      proppanel.add(remove);
    }
    add.setBounds(310,(size * 30) + 2,90,23);
    proppanel.add(add);
    proppanel.setPreferredSize(new Dimension(280,(size * 30) + 30));
  }
  proppanel.repaint();
}",0.6485598787266296
188031,"public void keyReleased(KeyEvent ev){
  String key=jTextField1.getText();
  String value=jTextField2.getText();
  parent.addProperty(key,value);
  String path=parent.getParent().getID();
  String name=parent.getName();
  String query=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
  try {
    String resp=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void keyReleased(KeyEvent ev){
  String key=jTextField1.getText();
  String value=jTextField2.getText();
  String path=parent.getParent().getID();
  String name=parent.getName();
  String query=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
  try {
    String resp=client.execute(""String_Node_Str"",new Object[]{name,path,query}).toString();
    if (resp.equals(""String_Node_Str"")) {
      parent.addProperty(key,value);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8795918367346939
188032,"public void initializeMainPanel(){
  try {
    bstart=new JButton(""String_Node_Str"");
    breset=new JButton(""String_Node_Str"");
    JPanel panel1=new JPanel();
    panel1.setLayout(null);
    panel1.setMaximumSize(new Dimension(1000,750));
    panel1.setMinimumSize(new Dimension(1000,750));
    panel1.setPreferredSize(new Dimension(1000,750));
    InputStream in=getClass().getResourceAsStream(""String_Node_Str"");
    Image im=ImageIO.read(in);
    button0=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button1=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button2=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    button3=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button5=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    ImageIcon save=new ImageIcon(im);
    breset.setBounds(543,610,120,30);
    panel1.add(breset);
    breset.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        try {
          String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
          ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
          index=""String_Node_Str"";
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    bstart=new JButton(""String_Node_Str"");
    bstart.setBounds(373,610,120,30);
    panel1.add(bstart);
    bstart.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (start == 1) {
          bstart.setText(""String_Node_Str"");
          start=0;
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
            System.out.println(""String_Node_Str"" + resp);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
 else {
          bstart.setText(""String_Node_Str"");
          start=1;
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
            System.out.println(""String_Node_Str"" + resp);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
      }
    }
);
    jTable1=new JTable();
    jTable1.getTableHeader().setReorderingAllowed(false);
    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
      @Override public void valueChanged(      ListSelectionEvent arg0){
        if (!arg0.getValueIsAdjusting()) {
          if (jTable1.getSelectedRow() == -1) {
            content.setText(""String_Node_Str"");
            return;
          }
          String pac=null;
          try {
            String id=jTable1.getValueAt(jTable1.getSelectedRow(),7).toString();
            pac=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str"" + id}).toString();
            JsonElement el=new JsonParser().parse(pac);
            JsonObject jobject=el.getAsJsonObject();
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            String json=gson.toJson(jobject);
            content.setText(json);
          }
 catch (          Exception e) {
            System.out.println(""String_Node_Str"" + pac.toString());
            e.printStackTrace();
          }
        }
      }
    }
);
    JScrollPane pane=new JScrollPane(jTable1);
    pane.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
    pane.setBounds(50,45,937,300);
    jTable1.setModel(new DefaultTableModel(new Object[][]{},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}){
      private static final long serialVersionUID=1L;
      public boolean isCellEditable(      int row,      int col){
        return false;
      }
    }
);
    TableRowSorter sorter=new TableRowSorter(jTable1.getModel());
    jTable1.setRowSorter(sorter);
    TableColumn c=jTable1.getColumnModel().getColumn(7);
    c.setMinWidth(0);
    c.setMaxWidth(0);
    c.setWidth(0);
    c.setPreferredWidth(0);
    panel1.add(pane);
    content=new JTextArea();
    content.setEditable(false);
    JScrollPane sc=new JScrollPane(content);
    sc.setBounds(50,350,937,250);
    panel1.add(sc);
    JLabel filter=new JLabel(""String_Node_Str"");
    filter.setBounds(50,10,40,25);
    panel1.add(filter);
    final JTextField search=new JTextField();
    search.setBounds(85,10,150,25);
    search.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent ev){
        if (ev.getKeyCode() == KeyEvent.VK_ENTER) {
          filter(search.getText());
        }
      }
    }
);
    panel1.add(search);
    filter=new JLabel(""String_Node_Str"");
    filter.setBounds(240,10,40,25);
    panel1.add(filter);
    final JTextField search2=new JTextField();
    search2.setBounds(275,10,150,25);
    search2.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent ev){
        if (ev.getKeyCode() == KeyEvent.VK_ENTER) {
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str"" + search2.getText()}).toString();
            System.out.println(resp);
            ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
            index=""String_Node_Str"";
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    try {
      HashMap<String,String> filters=(HashMap<String,String>)client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""});
      Iterator<Entry<String,String>> iter=filters.entrySet().iterator();
      StringBuilder sb=new StringBuilder();
      Entry<String,String> en;
      while (iter.hasNext()) {
        en=iter.next();
        sb.append(en.getKey());
        sb.append(""String_Node_Str"");
        sb.append(en.getValue());
        sb.append(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"" + sb.toString());
      search2.setText(sb.toString());
    }
 catch (    XmlRpcException e) {
      e.printStackTrace();
    }
    panel1.add(search2);
    pro=new JCheckBox(""String_Node_Str"");
    pro.setSelected(true);
    pro.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (pro.isSelected()) {
          jTable1.addColumn(columns[0]);
          jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[0]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[0]);
        }
      }
    }
);
    pro.setBounds(425,10,75,25);
    panel1.add(pro);
    srcip=new JCheckBox(""String_Node_Str"");
    srcip.setSelected(true);
    srcip.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcip.isSelected()) {
          int index=findColumn(""String_Node_Str"");
          if (index == -1) {
            jTable1.addColumn(columns[1]);
            jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
          }
 else {
            jTable1.addColumn(columns[1]);
            jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[1]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[1]);
        }
      }
    }
);
    srcip.setBounds(500,10,65,25);
    panel1.add(srcip);
    srcmac=new JCheckBox(""String_Node_Str"");
    srcmac.setSelected(true);
    srcmac.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcmac.isSelected()) {
          jTable1.addColumn(columns[2]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
          }
 else           if (findColumn(""String_Node_Str"") != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
          }
 else {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[2]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[2]);
        }
      }
    }
);
    srcmac.setBounds(565,10,80,25);
    panel1.add(srcmac);
    srcport=new JCheckBox(""String_Node_Str"");
    srcport.setSelected(true);
    srcport.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcport.isSelected()) {
          jTable1.addColumn(columns[3]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
          }
 else {
            index=findColumn(""String_Node_Str"");
            if (index != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
            }
 else             if (findColumn(""String_Node_Str"") != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
            }
 else {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
            }
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[3]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[3]);
        }
      }
    }
);
    srcport.setBounds(645,10,80,25);
    panel1.add(srcport);
    dstip=new JCheckBox(""String_Node_Str"");
    dstip.setSelected(true);
    dstip.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstip.isSelected()) {
          jTable1.addColumn(columns[4]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
          }
 else {
            index=findColumn(""String_Node_Str"");
            if (index != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
            }
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[4]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[4]);
        }
      }
    }
);
    dstip.setBounds(725,10,65,25);
    panel1.add(dstip);
    dstmac=new JCheckBox(""String_Node_Str"");
    dstmac.setSelected(true);
    dstmac.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstmac.isSelected()) {
          jTable1.addColumn(columns[5]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[5]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[5]);
        }
      }
    }
);
    dstmac.setBounds(790,10,75,25);
    panel1.add(dstmac);
    dstport=new JCheckBox(""String_Node_Str"");
    dstport.setSelected(true);
    dstport.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstport.isSelected()) {
          jTable1.addColumn(columns[6]);
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[6]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[6]);
        }
      }
    }
);
    dstport.setBounds(865,10,80,25);
    panel1.add(dstport);
    JButton bsave=new JButton(save);
    bsave.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        saveFile();
      }
    }
);
    bsave.setBounds(950,5,35,35);
    panel1.add(bsave);
    p.add(panel1);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void initializeMainPanel(){
  try {
    bstart=new JButton(""String_Node_Str"");
    breset=new JButton(""String_Node_Str"");
    JPanel panel1=new JPanel();
    panel1.setLayout(null);
    panel1.setMaximumSize(new Dimension(1000,750));
    panel1.setMinimumSize(new Dimension(1000,750));
    panel1.setPreferredSize(new Dimension(1000,750));
    InputStream in=getClass().getResourceAsStream(""String_Node_Str"");
    Image im=ImageIO.read(in);
    button0=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button1=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button2=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    button3=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    final ImageIcon button5=new ImageIcon(im);
    in=getClass().getResourceAsStream(""String_Node_Str"");
    im=ImageIO.read(in);
    ImageIcon save=new ImageIcon(im);
    breset.setBounds(543,610,120,30);
    panel1.add(breset);
    breset.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        try {
          String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
          ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
          index=""String_Node_Str"";
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    bstart=new JButton(""String_Node_Str"");
    bstart.setBounds(373,610,120,30);
    panel1.add(bstart);
    bstart.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (start == 1) {
          bstart.setText(""String_Node_Str"");
          start=0;
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
            System.out.println(""String_Node_Str"" + resp);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
 else {
          bstart.setText(""String_Node_Str"");
          start=1;
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""}).toString();
            System.out.println(""String_Node_Str"" + resp);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
      }
    }
);
    jTable1=new JTable();
    jTable1.getTableHeader().setReorderingAllowed(false);
    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
      @Override public void valueChanged(      ListSelectionEvent arg0){
        if (!arg0.getValueIsAdjusting()) {
          if (jTable1.getSelectedRow() == -1) {
            content.setText(""String_Node_Str"");
            return;
          }
          String pac=null;
          try {
            String id=jTable1.getValueAt(jTable1.getSelectedRow(),7).toString();
            pac=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str"" + id}).toString();
            JsonElement el=new JsonParser().parse(pac);
            JsonObject jobject=el.getAsJsonObject();
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            String json=gson.toJson(jobject);
            content.setText(json);
          }
 catch (          Exception e) {
            System.out.println(""String_Node_Str"" + pac.toString());
            e.printStackTrace();
          }
        }
      }
    }
);
    JScrollPane pane=new JScrollPane(jTable1);
    pane.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
    pane.setBounds(50,45,937,300);
    jTable1.setModel(new DefaultTableModel(new Object[][]{},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}){
      private static final long serialVersionUID=1L;
      public boolean isCellEditable(      int row,      int col){
        return false;
      }
    }
);
    TableRowSorter sorter=new TableRowSorter(jTable1.getModel());
    jTable1.setRowSorter(sorter);
    TableColumn c=jTable1.getColumnModel().getColumn(7);
    c.setMinWidth(0);
    c.setMaxWidth(0);
    c.setWidth(0);
    c.setPreferredWidth(0);
    panel1.add(pane);
    content=new JTextArea();
    content.setEditable(false);
    JScrollPane sc=new JScrollPane(content);
    sc.setBounds(50,350,937,250);
    panel1.add(sc);
    JLabel filter=new JLabel(""String_Node_Str"");
    filter.setBounds(50,10,40,25);
    panel1.add(filter);
    final JTextField search=new JTextField();
    search.setBounds(85,10,150,25);
    search.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent ev){
        if (ev.getKeyCode() == KeyEvent.VK_ENTER) {
          filter(search.getText());
        }
      }
    }
);
    panel1.add(search);
    filter=new JLabel(""String_Node_Str"");
    filter.setBounds(240,10,40,25);
    panel1.add(filter);
    final JTextField search2=new JTextField();
    search2.setBounds(275,10,150,25);
    search2.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent ev){
        if (ev.getKeyCode() == KeyEvent.VK_ENTER) {
          try {
            String resp=client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str"" + search2.getText()}).toString();
            System.out.println(resp);
            ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
            index=""String_Node_Str"";
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    try {
      HashMap<String,String> filters=(HashMap<String,String>)client.execute(""String_Node_Str"",new Object[]{variables.get(""String_Node_Str""),getName(),""String_Node_Str""});
      Iterator<Entry<String,String>> iter=filters.entrySet().iterator();
      StringBuilder sb=new StringBuilder();
      Entry<String,String> en;
      while (iter.hasNext()) {
        en=iter.next();
        sb.append(en.getKey());
        sb.append(""String_Node_Str"");
        sb.append(en.getValue());
        sb.append(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"" + sb.toString());
      search2.setText(sb.toString());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    panel1.add(search2);
    pro=new JCheckBox(""String_Node_Str"");
    pro.setSelected(true);
    pro.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (pro.isSelected()) {
          jTable1.addColumn(columns[0]);
          jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[0]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[0]);
        }
      }
    }
);
    pro.setBounds(425,10,75,25);
    panel1.add(pro);
    srcip=new JCheckBox(""String_Node_Str"");
    srcip.setSelected(true);
    srcip.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcip.isSelected()) {
          int index=findColumn(""String_Node_Str"");
          if (index == -1) {
            jTable1.addColumn(columns[1]);
            jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
          }
 else {
            jTable1.addColumn(columns[1]);
            jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[1]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[1]);
        }
      }
    }
);
    srcip.setBounds(500,10,65,25);
    panel1.add(srcip);
    srcmac=new JCheckBox(""String_Node_Str"");
    srcmac.setSelected(true);
    srcmac.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcmac.isSelected()) {
          jTable1.addColumn(columns[2]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
          }
 else           if (findColumn(""String_Node_Str"") != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
          }
 else {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[2]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[2]);
        }
      }
    }
);
    srcmac.setBounds(565,10,80,25);
    panel1.add(srcmac);
    srcport=new JCheckBox(""String_Node_Str"");
    srcport.setSelected(true);
    srcport.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (srcport.isSelected()) {
          jTable1.addColumn(columns[3]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
          }
 else {
            index=findColumn(""String_Node_Str"");
            if (index != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,index + 1);
            }
 else             if (findColumn(""String_Node_Str"") != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,1);
            }
 else {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,0);
            }
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[3]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[3]);
        }
      }
    }
);
    srcport.setBounds(645,10,80,25);
    panel1.add(srcport);
    dstip=new JCheckBox(""String_Node_Str"");
    dstip.setSelected(true);
    dstip.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstip.isSelected()) {
          jTable1.addColumn(columns[4]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
          }
 else {
            index=findColumn(""String_Node_Str"");
            if (index != -1) {
              jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
            }
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[4]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[4]);
        }
      }
    }
);
    dstip.setBounds(725,10,65,25);
    panel1.add(dstip);
    dstmac=new JCheckBox(""String_Node_Str"");
    dstmac.setSelected(true);
    dstmac.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstmac.isSelected()) {
          jTable1.addColumn(columns[5]);
          int index=findColumn(""String_Node_Str"");
          if (index != -1) {
            jTable1.moveColumn(jTable1.getColumnCount() - 1,index);
          }
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[5]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[5]);
        }
      }
    }
);
    dstmac.setBounds(790,10,75,25);
    panel1.add(dstmac);
    dstport=new JCheckBox(""String_Node_Str"");
    dstport.setSelected(true);
    dstport.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        if (dstport.isSelected()) {
          jTable1.addColumn(columns[6]);
        }
 else {
          int index=findColumn(""String_Node_Str"");
          columns[6]=jTable1.getColumnModel().getColumn(index);
          jTable1.removeColumn(columns[6]);
        }
      }
    }
);
    dstport.setBounds(865,10,80,25);
    panel1.add(dstport);
    JButton bsave=new JButton(save);
    bsave.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent arg0){
        saveFile();
      }
    }
);
    bsave.setBounds(950,5,35,35);
    panel1.add(bsave);
    p.add(panel1);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9997626018833584
188033,"public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    MainPanel main=Repository.window.mainpanel;
    try {
      main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}","public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    MainPanel main=Repository.window.mainpanel;
    try {
      main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}",0.971859986273164
188034,"public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    MainPanel main=Repository.window.mainpanel;
    try {
      main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}","public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    MainPanel main=Repository.window.mainpanel;
    try {
      main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}",0.971859986273164
188035,"public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    MainPanel main=Repository.window.mainpanel;
    try {
      main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}","public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    MainPanel main=Repository.window.mainpanel;
    if (((TwisterPluginInterface)plugins.get(filename)).getContent() != null) {
      try {
        main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
        e.printStackTrace();
      }
    }
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}",0.9507422402159244
188036,"public void actionPerformed(ActionEvent ev){
  DatabaseFrame frame=new DatabaseFrame(reference);
  frame.executeQuery();
  frame.setLocation((int)database.getLocationOnScreen().getX() - 100,(int)database.getLocationOnScreen().getY());
  frame.setVisible(true);
}","public void actionPerformed(ActionEvent ev){
  String script=userDefinition.getText();
  if (script != null && !script.equals(""String_Node_Str"")) {
    try {
      String result=Repository.getRPCClient().execute(""String_Node_Str"",new Object[]{script}) + ""String_Node_Str"";
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.198019801980198
188037,"public DefPanel(String descriptions,String button,String id,int width,final int index,SuitaDetails container){
  this.descriptions=descriptions;
  this.id=id;
  reference=this;
  this.container=container;
  this.index=index;
  setBackground(new Color(255,255,255));
  setBorder(BorderFactory.createEmptyBorder(2,20,2,20));
  setMaximumSize(new Dimension(32767,30));
  setMinimumSize(new Dimension(100,30));
  setPreferredSize(new Dimension(300,30));
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  description=new JLabel(descriptions);
  description.setPreferredSize(new Dimension(width,20));
  description.setMinimumSize(new Dimension(width,20));
  description.setMaximumSize(new Dimension(width,20));
  add(description);
  filedsGap=new JPanel();
  filedsGap.setBackground(new Color(255,255,255));
  filedsGap.setMaximumSize(new Dimension(20,20));
  filedsGap.setMinimumSize(new Dimension(20,20));
  filedsGap.setPreferredSize(new Dimension(20,20));
  GroupLayout filedsGapLayout=new GroupLayout(filedsGap);
  filedsGap.setLayout(filedsGapLayout);
  filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  add(filedsGap);
  userDefinition=new JTextField();
  userDefinition.setText(""String_Node_Str"");
  userDefinition.setMaximumSize(new Dimension(300,100));
  userDefinition.setMinimumSize(new Dimension(50,20));
  userDefinition.setPreferredSize(new Dimension(100,20));
  add(userDefinition);
  userDefinition.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent ev){
      if (parent != null) {
        setParentField(userDefinition.getText(),false);
      }
    }
  }
);
  filedsGap=new JPanel();
  filedsGap.setBackground(new Color(255,255,255));
  filedsGap.setMaximumSize(new Dimension(20,20));
  filedsGap.setMinimumSize(new Dimension(20,20));
  filedsGap.setPreferredSize(new Dimension(20,20));
  filedsGapLayout=new GroupLayout(filedsGap);
  filedsGap.setLayout(filedsGapLayout);
  filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  add(filedsGap);
  filedsGap=new JPanel();
  filedsGap.setBackground(new Color(255,255,255));
  filedsGap.setMaximumSize(new Dimension(20,20));
  filedsGap.setMinimumSize(new Dimension(20,20));
  filedsGap.setPreferredSize(new Dimension(20,20));
  filedsGapLayout=new GroupLayout(filedsGap);
  filedsGap.setLayout(filedsGapLayout);
  filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  add(filedsGap);
  if (button.equals(""String_Node_Str"")) {
    final JButton database=new JButton(""String_Node_Str"");
    database.setMaximumSize(new Dimension(100,20));
    database.setMinimumSize(new Dimension(50,20));
    database.setPreferredSize(new Dimension(80,20));
    add(database);
    database.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ev){
        DatabaseFrame frame=new DatabaseFrame(reference);
        frame.executeQuery();
        frame.setLocation((int)database.getLocationOnScreen().getX() - 100,(int)database.getLocationOnScreen().getY());
        frame.setVisible(true);
      }
    }
);
  }
 else   if (button.equals(""String_Node_Str"")) {
    JPanel database=new JPanel();
    database.setBackground(Color.WHITE);
    database.setMaximumSize(new Dimension(100,20));
    database.setMinimumSize(new Dimension(50,20));
    database.setPreferredSize(new Dimension(80,20));
    add(database);
  }
}","public DefPanel(String descriptions,String button,String id,int width,final int index,SuitaDetails container){
  this.descriptions=descriptions;
  this.id=id;
  reference=this;
  this.container=container;
  this.index=index;
  setBackground(new Color(255,255,255));
  setBorder(BorderFactory.createEmptyBorder(2,20,2,20));
  setMaximumSize(new Dimension(32767,30));
  setMinimumSize(new Dimension(100,30));
  setPreferredSize(new Dimension(300,30));
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  description=new JLabel(descriptions);
  description.setPreferredSize(new Dimension(width,20));
  description.setMinimumSize(new Dimension(width,20));
  description.setMaximumSize(new Dimension(width,20));
  add(description);
  filedsGap=new JPanel();
  filedsGap.setBackground(new Color(255,255,255));
  filedsGap.setMaximumSize(new Dimension(20,20));
  filedsGap.setMinimumSize(new Dimension(20,20));
  filedsGap.setPreferredSize(new Dimension(20,20));
  GroupLayout filedsGapLayout=new GroupLayout(filedsGap);
  filedsGap.setLayout(filedsGapLayout);
  filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  add(filedsGap);
  userDefinition=new JTextField();
  userDefinition.setText(""String_Node_Str"");
  userDefinition.setMaximumSize(new Dimension(300,100));
  userDefinition.setMinimumSize(new Dimension(50,20));
  userDefinition.setPreferredSize(new Dimension(100,20));
  add(userDefinition);
  userDefinition.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent ev){
      if (parent != null) {
        setParentField(userDefinition.getText(),false);
      }
    }
  }
);
  filedsGap=new JPanel();
  filedsGap.setBackground(new Color(255,255,255));
  filedsGap.setMaximumSize(new Dimension(20,20));
  filedsGap.setMinimumSize(new Dimension(20,20));
  filedsGap.setPreferredSize(new Dimension(20,20));
  filedsGapLayout=new GroupLayout(filedsGap);
  filedsGap.setLayout(filedsGapLayout);
  filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
  add(filedsGap);
  if (button.equals(""String_Node_Str"")) {
    final JButton database=new JButton(""String_Node_Str"");
    database.setMaximumSize(new Dimension(100,20));
    database.setMinimumSize(new Dimension(50,20));
    database.setPreferredSize(new Dimension(80,20));
    add(database);
    database.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ev){
        DatabaseFrame frame=new DatabaseFrame(reference);
        frame.executeQuery();
        frame.setLocation((int)database.getLocationOnScreen().getX() - 100,(int)database.getLocationOnScreen().getY());
        frame.setVisible(true);
      }
    }
);
  }
 else   if (button.equals(""String_Node_Str"")) {
    JButton script=new JButton(""String_Node_Str"");
    script.setMaximumSize(new Dimension(100,20));
    script.setMinimumSize(new Dimension(50,20));
    script.setPreferredSize(new Dimension(80,20));
    add(script);
    script.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ev){
        VFSJFileChooser fileChooser=Repository.window.mainpanel.p4.getConfig().getChooser();
        try {
          RETURN_TYPE answer=fileChooser.showOpenDialog(DefPanel.this);
          if (answer == RETURN_TYPE.APPROVE) {
            FileObject aFileObject=fileChooser.getSelectedFile();
            String safeName=VFSUtils.getFriendlyName(aFileObject.toString());
            safeName=safeName.substring(safeName.indexOf(Repository.host) + Repository.host.length());
            String[] check=safeName.split(""String_Node_Str"");
            if (check[check.length - 1].equals(check[check.length - 2])) {
              StringBuffer buffer=new StringBuffer();
              for (int i=0; i < check.length - 1; i++) {
                buffer.append(check[i] + ""String_Node_Str"");
              }
              safeName=buffer.toString();
            }
            userDefinition.setText(safeName);
            if (parent != null) {
              setParentField(userDefinition.getText(),false);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    filedsGap=new JPanel();
    filedsGap.setBackground(new Color(255,255,255));
    filedsGap.setMaximumSize(new Dimension(10,10));
    filedsGap.setMinimumSize(new Dimension(10,10));
    filedsGap.setPreferredSize(new Dimension(10,10));
    filedsGapLayout=new GroupLayout(filedsGap);
    filedsGap.setLayout(filedsGapLayout);
    filedsGapLayout.setHorizontalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
    filedsGapLayout.setVerticalGroup(filedsGapLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0,20,Short.MAX_VALUE));
    filedsGap.setLayout(filedsGapLayout);
    add(filedsGap);
    JButton value=new JButton(""String_Node_Str"");
    value.setMaximumSize(new Dimension(100,20));
    value.setMinimumSize(new Dimension(50,20));
    value.setPreferredSize(new Dimension(80,20));
    add(value);
    value.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ev){
        String script=userDefinition.getText();
        if (script != null && !script.equals(""String_Node_Str"")) {
          try {
            String result=Repository.getRPCClient().execute(""String_Node_Str"",new Object[]{script}) + ""String_Node_Str"";
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
);
  }
 else   if (button.equals(""String_Node_Str"")) {
    JPanel database=new JPanel();
    database.setBackground(Color.WHITE);
    database.setMaximumSize(new Dimension(100,20));
    database.setMinimumSize(new Dimension(50,20));
    database.setPreferredSize(new Dimension(80,20));
    add(database);
  }
}",0.6602551521099117
188038,"public void addRemovePlugin(MyButton addremove,String filename){
}","public void addRemovePlugin(MyButton addremove,String filename){
  File pluginfile=new File(Repository.PLUGINSDIRECTORY + Repository.getBar() + filename);
  if (addremove.getText().equals(""String_Node_Str"")) {
    GridBagLayout layout=(GridBagLayout)localtable.getLayout();
    GridBagConstraints constraints=layout.getConstraints(addremove);
    GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
    localtable.remove(addremove);
    localtable.remove(addremove.getMyLabel());
    remotetable2.add(addremove,constraints);
    remotetable2.add(addremove.getMyLabel(),constraints1);
    MainPanel main=Repository.window.mainpanel;
    if (((TwisterPluginInterface)plugins.get(filename)).getContent() != null) {
      try {
        main.remove(((TwisterPluginInterface)plugins.get(filename)).getContent());
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
        e.printStackTrace();
      }
    }
    try {
      ((TwisterPluginInterface)plugins.get(filename)).terminate();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + filename);
      e.printStackTrace();
    }
    main.revalidate();
    main.repaint();
    localtable.revalidate();
    localtable.repaint();
    remotetable2.revalidate();
    remotetable2.repaint();
    Repository.removePlugin(filename);
    plugins.remove(filename);
    addremove.setText(""String_Node_Str"");
    plugintable.removeAll();
    Iterator iterator=plugins.keySet().iterator();
    String name;
    String description;
    while (iterator.hasNext()) {
      name=iterator.next().toString();
      TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
      description=plugin.getDescription();
      addPlugin(name,description,plugin);
    }
    plugintable.revalidate();
    plugintable.repaint();
  }
 else {
    if (copyPlugin(filename)) {
      addremove.setText(""String_Node_Str"");
      GridBagLayout layout=(GridBagLayout)remotetable2.getLayout();
      GridBagConstraints constraints=layout.getConstraints(addremove);
      GridBagConstraints constraints1=layout.getConstraints(addremove.getMyLabel());
      remotetable2.remove(addremove);
      remotetable2.remove(addremove.getMyLabel());
      localtable.add(addremove,constraints);
      localtable.add(addremove.getMyLabel(),constraints1);
      localtable.revalidate();
      localtable.repaint();
      remotetable2.revalidate();
      remotetable2.repaint();
      plugintable.removeAll();
      Repository.addPlugin(filename);
      PluginsLoader.setClassPath();
      getPlugins();
      Iterator iterator=plugins.keySet().iterator();
      String name;
      String description;
      while (iterator.hasNext()) {
        name=iterator.next().toString();
        TwisterPluginInterface plugin=(TwisterPluginInterface)plugins.get(name);
        description=plugin.getDescription();
        addPlugin(name,description,plugin);
      }
    }
  }
}",0.0428571428571428
188039,"/** 
 * Helper method to trigger a widget refresh.
 * @param context The application context.
 */
public static void refreshAppWidgets(Context context){
  AppWidgetManager widgetManager=AppWidgetManager.getInstance(context);
  ComponentName widgetComponent=new ComponentName(context,RichPushWidgetProvider.class);
  int[] widgetIds=widgetManager.getAppWidgetIds(widgetComponent);
  if (Build.VERSION.SDK_INT >= 11) {
    widgetManager.notifyAppWidgetViewDataChanged(widgetIds,R.id.message_list);
  }
 else {
    Intent update=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE).putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS,widgetIds);
    context.sendBroadcast(update);
  }
}","/** 
 * Helper method to trigger a widget refresh.
 * @param context The application context.
 */
@SuppressLint(""String_Node_Str"") public static void refreshAppWidgets(Context context){
  AppWidgetManager widgetManager=AppWidgetManager.getInstance(context);
  ComponentName widgetComponent=new ComponentName(context,RichPushWidgetProvider.class);
  int[] widgetIds=widgetManager.getAppWidgetIds(widgetComponent);
  if (Build.VERSION.SDK_INT >= 11) {
    widgetManager.notifyAppWidgetViewDataChanged(widgetIds,R.id.message_list);
  }
 else {
    Intent update=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE).putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS,widgetIds);
    context.sendBroadcast(update);
  }
}",0.9762076423936552
188040,"/** 
 * Creates the widget layout. <p/> The small layout that only shows the unread count will be created on Gingerbread (10) or older devices, or devices running Jelly Bean (16) who configured the widget with a height smaller than   {@link #LARGE_LAYOUT_MIN_HEIGHT}. For all other devices, the large layout with a list view of message center messages will be created.
 * @param context Application context
 * @param appWidgetManager The app
 * @param appWidgetId Id of the widget
 * @return RemoteViews for the layout
 */
private RemoteViews createLayout(Context context,AppWidgetManager appWidgetManager,int appWidgetId){
  if (Build.VERSION.SDK_INT >= 16) {
    Bundle options=appWidgetManager.getAppWidgetOptions(appWidgetId);
    if (options.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT) >= LARGE_LAYOUT_MIN_HEIGHT) {
      return createLargeLayout(context,appWidgetId);
    }
    return createSmallLayout(context);
  }
  if (Build.VERSION.SDK_INT >= 11) {
    return createLargeLayout(context,appWidgetId);
  }
  return createSmallLayout(context);
}","/** 
 * Creates the widget layout. <p/> The small layout that only shows the unread count will be created on Gingerbread (10) or older devices, or devices running Jelly Bean (16) who configured the widget with a height smaller than   {@link #LARGE_LAYOUT_MIN_HEIGHT}. For all other devices, the large layout with a list view of message center messages will be created.
 * @param context Application context
 * @param appWidgetManager The app
 * @param appWidgetId Id of the widget
 * @return RemoteViews for the layout
 */
@SuppressLint(""String_Node_Str"") private RemoteViews createLayout(Context context,AppWidgetManager appWidgetManager,int appWidgetId){
  if (Build.VERSION.SDK_INT >= 16) {
    Bundle options=appWidgetManager.getAppWidgetOptions(appWidgetId);
    if (options.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT) >= LARGE_LAYOUT_MIN_HEIGHT) {
      return createLargeLayout(context,appWidgetId);
    }
    return createSmallLayout(context);
  }
  if (Build.VERSION.SDK_INT >= 11) {
    return createLargeLayout(context,appWidgetId);
  }
  return createSmallLayout(context);
}",0.9847009735744088
188041,"/** 
 * Creates a large layout for the app widget <p/> This layout is only supported in SDK >= 11 (Honeycomb)
 * @param context Application context
 * @param appWidgetId id of the widget
 * @return RemoteViews for the large layout
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) private RemoteViews createLargeLayout(Context context,int appWidgetId){
  RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intent=new Intent(context,RichPushWidgetService.class).putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  remoteViews.setRemoteAdapter(appWidgetId,R.id.message_list,intent);
  remoteViews.setEmptyView(R.id.message_list,R.id.empty_view);
  remoteViews.setPendingIntentTemplate(R.id.message_list,createMessageTemplateIntent(context,appWidgetId));
  remoteViews.setOnClickPendingIntent(R.id.widget_header,createMainActivityPendingIntent(context));
  return remoteViews;
}","/** 
 * Creates a large layout for the app widget <p/> This layout is only supported in SDK >= 11 (Honeycomb)
 * @param context Application context
 * @param appWidgetId id of the widget
 * @return RemoteViews for the large layout
 */
@SuppressLint(""String_Node_Str"") private RemoteViews createLargeLayout(Context context,int appWidgetId){
  RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intent=new Intent(context,RichPushWidgetService.class).putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);
  remoteViews.setRemoteAdapter(appWidgetId,R.id.message_list,intent);
  remoteViews.setEmptyView(R.id.message_list,R.id.empty_view);
  remoteViews.setPendingIntentTemplate(R.id.message_list,createMessageTemplateIntent(context,appWidgetId));
  remoteViews.setOnClickPendingIntent(R.id.widget_header,createMainActivityPendingIntent(context));
  return remoteViews;
}",0.9669734704926908
188042,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  AirshipConfigOptions options=UAirship.shared().getAirshipConfigOptions();
  this.addPreferencesFromResource(R.xml.push_preferences);
  this.addPreferencesFromResource(R.xml.location_preferences);
  this.addPreferencesFromResource(R.xml.advanced_preferences);
  preferenceAdapter=new UAPreferenceAdapter(getPreferenceScreen());
  if (Build.VERSION.SDK_INT >= 11) {
    ActionBar actionBar=getActionBar();
    if (actionBar != null) {
      actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    }
  }
}","@Override @TargetApi(Build.VERSION_CODES.HONEYCOMB) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  AirshipConfigOptions options=UAirship.shared().getAirshipConfigOptions();
  this.addPreferencesFromResource(R.xml.push_preferences);
  this.addPreferencesFromResource(R.xml.location_preferences);
  this.addPreferencesFromResource(R.xml.advanced_preferences);
  preferenceAdapter=new UAPreferenceAdapter(getPreferenceScreen());
  if (Build.VERSION.SDK_INT >= 11) {
    ActionBar actionBar=getActionBar();
    if (actionBar != null) {
      actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    }
  }
}",0.9682299546142208
188043,"@Override protected void onStart(){
  super.onStart();
  PlayServicesUtils.handleAnyPlayServicesError(this);
  UAirship.shared().getAnalytics().activityStarted(this);
}","@Override protected void onStart(){
  super.onStart();
  if (PlayServicesUtils.isGooglePlayStoreAvailable()) {
    PlayServicesUtils.handleAnyPlayServicesError(this);
  }
  UAirship.shared().getAnalytics().activityStarted(this);
}",0.8442211055276382
188044,"/** 
 * Find and open the app
 * @param appName The name of the app to open
 * @param packageName The package name of the app to open
 * @return <code>true</code> if app was opened, otherwise <code>false</code>
 * @throws UiObjectNotFoundException
 */
public static boolean openApp(String appName,String packageName) throws UiObjectNotFoundException {
  UiDevice device=UiDevice.getInstance();
  try {
    device.wakeUp();
  }
 catch (  RemoteException e1) {
    e1.printStackTrace();
  }
  device.pressHome();
  device.pressHome();
  device.pressHome();
  UiObject okDismissHelpOverlayButton=new UiObject(new UiSelector().text(""String_Node_Str""));
  if (okDismissHelpOverlayButton.exists()) {
    okDismissHelpOverlayButton.click();
  }
  UiObject allAppsButton=new UiObject(new UiSelector().description(""String_Node_Str""));
  allAppsButton.clickAndWaitForNewWindow();
  UiObject appsTab=new UiObject(new UiSelector().text(""String_Node_Str""));
  appsTab.click();
  UiObject okDismissHelpOverlayButton=new UiObject(new UiSelector().text(""String_Node_Str""));
  if (okDismissHelpOverlayButton.exists()) {
    okDismissHelpOverlayButton.click();
  }
  UiScrollable appViews=new UiScrollable(new UiSelector().scrollable(true));
  appViews.setAsHorizontalList();
  UiObject settingsApp=appViews.getChildByText(new UiSelector().className(android.widget.TextView.class.getName()),appName);
  settingsApp.clickAndWaitForNewWindow();
  UiObject pushSampleValidation=new UiObject(new UiSelector().packageName(packageName));
  return pushSampleValidation.exists();
}","/** 
 * Find and open the app
 * @param appName The name of the app to open
 * @param packageName The package name of the app to open
 * @return <code>true</code> if app was opened, otherwise <code>false</code>
 * @throws UiObjectNotFoundException
 */
public static boolean openApp(String appName,String packageName) throws UiObjectNotFoundException {
  UiDevice device=UiDevice.getInstance();
  try {
    device.wakeUp();
  }
 catch (  RemoteException e1) {
    e1.printStackTrace();
  }
  device.pressHome();
  device.pressHome();
  device.pressHome();
  UiObject okDismissHelpOverlayButton=new UiObject(new UiSelector().text(""String_Node_Str""));
  if (okDismissHelpOverlayButton.exists()) {
    okDismissHelpOverlayButton.click();
  }
  UiObject allAppsButton=new UiObject(new UiSelector().description(""String_Node_Str""));
  allAppsButton.clickAndWaitForNewWindow();
  UiObject appsTab=new UiObject(new UiSelector().text(""String_Node_Str""));
  appsTab.click();
  okDismissHelpOverlayButton=new UiObject(new UiSelector().text(""String_Node_Str""));
  if (okDismissHelpOverlayButton.exists()) {
    okDismissHelpOverlayButton.click();
  }
  UiScrollable appViews=new UiScrollable(new UiSelector().scrollable(true));
  appViews.setAsHorizontalList();
  UiObject settingsApp=appViews.getChildByText(new UiSelector().className(android.widget.TextView.class.getName()),appName);
  settingsApp.clickAndWaitForNewWindow();
  UiObject pushSampleValidation=new UiObject(new UiSelector().packageName(packageName));
  return pushSampleValidation.exists();
}",0.9970977104159948
188045,"@Override protected void onStop(){
  super.onStop();
  InboxNotificationBuilder builder=(InboxNotificationBuilder)PushManager.shared().getNotificationBuilder();
  builder.updateInboxNotification();
  UAirship.shared().getAnalytics().activityStopped(this);
}","@Override protected void onStop(){
  super.onStop();
  UAirship.shared().getAnalytics().activityStopped(this);
}",0.6070460704607046
188046,"private void configureActionBar(){
  ActionBar actionBar=this.getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayUseLogoEnabled(true);
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  this.navAdapter=new ArrayAdapter<String>(this,R.layout.sherlock_spinner_dropdown_item,RichPushApplication.navList);
  actionBar.setListNavigationCallbacks(this.navAdapter,this);
  actionBar.setSelectedNavigationItem(this.navAdapter.getPosition(RichPushApplication.INBOX_ACTIVITY));
}","private void configureActionBar(){
  ActionBar actionBar=this.getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayUseLogoEnabled(true);
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  this.navAdapter=new ArrayAdapter<String>(this,R.layout.sherlock_spinner_dropdown_item,RichPushApplication.navList);
  actionBar.setListNavigationCallbacks(this.navAdapter,this);
}",0.8984375
188047,"@Override protected void onResume(){
  super.onResume();
  RichPushManager.shared().addListener(this);
  RichPushManager.shared().getRichPushUser().getInbox().addListener(this);
  showPendingMessageId();
  startActionModeIfNecessary();
}","@Override protected void onResume(){
  super.onResume();
  setNavigationToInboxActivity();
  RichPushManager.shared().addListener(this);
  RichPushManager.shared().getRichPushUser().getInbox().addListener(this);
  showPendingMessageId();
  startActionModeIfNecessary();
}",0.9330708661417324
188048,"@Override protected void onNewIntent(Intent intent){
  this.setPendingMessageIdFromIntent(intent);
  this.showPendingMessageId();
}","@Override protected void onNewIntent(Intent intent){
  this.setPendingMessageIdFromIntent(intent);
}",0.8658008658008658
188049,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.main);
  this.configureActionBar();
  this.user=RichPushManager.shared().getRichPushUser();
  String messageId=this.getIntent().getStringExtra(RichPushApplication.MESSAGE_ID_RECEIVED_KEY);
  if (savedInstanceState == null && !UAStringUtil.isEmpty(messageId)) {
    showRichPushMessage(messageId);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.main);
  this.configureActionBar();
  this.user=RichPushManager.shared().getRichPushUser();
  if (savedInstanceState == null) {
    pendingMessageId=getIntent().getStringExtra(RichPushApplication.MESSAGE_ID_RECEIVED_KEY);
  }
}",0.7686472819216182
188050,"private void configureActionBar(){
  ActionBar actionBar=this.getSupportActionBar();
  actionBar.setDisplayUseLogoEnabled(true);
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  this.navAdapter=new ArrayAdapter<String>(this,R.layout.sherlock_spinner_dropdown_item,RichPushApplication.navList);
  actionBar.setListNavigationCallbacks(this.navAdapter,this);
  actionBar.setSelectedNavigationItem(this.navAdapter.getPosition(""String_Node_Str""));
}","private void configureActionBar(){
  ActionBar actionBar=this.getSupportActionBar();
  actionBar.setDisplayUseLogoEnabled(true);
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  this.navAdapter=new ArrayAdapter<String>(this,R.layout.sherlock_spinner_dropdown_item,RichPushApplication.navList);
  actionBar.setListNavigationCallbacks(this.navAdapter,this);
}",0.906148867313916
188051,"@Override protected void onNewIntent(Intent intent){
  String messageId=intent.getStringExtra(RichPushApplication.MESSAGE_ID_RECEIVED_KEY);
  if (!UAStringUtil.isEmpty(messageId)) {
    showRichPushMessage(messageId);
  }
}","@Override protected void onNewIntent(Intent intent){
  pendingMessageId=intent.getStringExtra(RichPushApplication.MESSAGE_ID_RECEIVED_KEY);
}",0.7472527472527473
188052,"@Override protected void onStop(){
  super.onStart();
  UAirship.shared().getAnalytics().activityStopped(this);
}","@Override protected void onStop(){
  super.onStop();
  UAirship.shared().getAnalytics().activityStopped(this);
}",0.9777777777777776
188053,"private void showMessage(String messageId){
  if (messagePager != null) {
    this.messagePager.setCurrentItem(RichPushMessageUtils.getMessagePosition(messageId,messages));
  }
 else {
    Intent intent=new Intent(this,MessageActivity.class);
    intent.putExtra(MessageActivity.EXTRA_MESSAGE_ID_KEY,messageId);
    this.startActivity(intent);
  }
}","private void showMessage(String messageId){
  if (richPushInbox.getMessage(messageId) == null) {
    return;
  }
  if (messagePager != null) {
    this.messagePager.setCurrentItem(RichPushMessageUtils.getMessagePosition(messageId,messages));
  }
 else {
    Intent intent=new Intent(this,MessageActivity.class);
    intent.putExtra(MessageActivity.EXTRA_MESSAGE_ID_KEY,messageId);
    this.startActivity(intent);
  }
}",0.910039113428944
188054,"/** 
 * Sets the internal UAirship preferences
 * @param preferenceType UAPreference.PreferenceType type of preference to set
 * @param value Object Value of the preference
 */
private void setInternalPreference(UAPreference.PreferenceType preferenceType,Object value){
  Date[] quietTimes=null;
switch (preferenceType) {
case LOCATION_BACKGROUND_ENABLE:
    if ((Boolean)value) {
      UALocationManager.enableBackgroundLocation();
    }
 else {
      UALocationManager.disableBackgroundLocation();
    }
  break;
case LOCATION_ENABLE:
if ((Boolean)value) {
  UALocationManager.enableForegroundLocation();
}
 else {
  UALocationManager.disableForegroundLocation();
}
break;
case LOCATION_FOREGROUND_ENABLE:
if ((Boolean)value) {
UALocationManager.enableForegroundLocation();
}
 else {
UALocationManager.disableForegroundLocation();
}
break;
case PUSH_ENABLE:
if ((Boolean)value) {
PushManager.enablePush();
}
 else {
PushManager.disablePush();
}
break;
case QUIET_TIME_ENABLE:
pushPrefs.setQuietTimeEnabled((Boolean)value);
break;
case SOUND_ENABLE:
pushPrefs.setSoundEnabled((Boolean)value);
break;
case VIBRATE_ENABLE:
pushPrefs.setVibrateEnabled((Boolean)value);
break;
case QUIET_TIME_END:
quietTimes=pushPrefs.getQuietTimeInterval();
Date start=quietTimes != null ? quietTimes[0] : new Date();
pushPrefs.setQuietTimeInterval(start,new Date((Long)value));
break;
case QUIET_TIME_START:
quietTimes=pushPrefs.getQuietTimeInterval();
Date end=quietTimes != null ? quietTimes[1] : new Date();
pushPrefs.setQuietTimeInterval(new Date((Long)value),end);
break;
}
}","/** 
 * Sets the internal UAirship preferences
 * @param preferenceType UAPreference.PreferenceType type of preference to set
 * @param value Object Value of the preference
 */
private void setInternalPreference(UAPreference.PreferenceType preferenceType,Object value){
  Date[] quietTimes=null;
switch (preferenceType) {
case LOCATION_BACKGROUND_ENABLE:
    if ((Boolean)value) {
      UALocationManager.enableBackgroundLocation();
    }
 else {
      UALocationManager.disableBackgroundLocation();
    }
  break;
case LOCATION_ENABLE:
if ((Boolean)value) {
  UALocationManager.enableLocation();
}
 else {
  UALocationManager.disableLocation();
}
break;
case LOCATION_FOREGROUND_ENABLE:
if ((Boolean)value) {
UALocationManager.enableForegroundLocation();
}
 else {
UALocationManager.disableForegroundLocation();
}
break;
case PUSH_ENABLE:
if ((Boolean)value) {
PushManager.enablePush();
}
 else {
PushManager.disablePush();
}
break;
case QUIET_TIME_ENABLE:
pushPrefs.setQuietTimeEnabled((Boolean)value);
break;
case SOUND_ENABLE:
pushPrefs.setSoundEnabled((Boolean)value);
break;
case VIBRATE_ENABLE:
pushPrefs.setVibrateEnabled((Boolean)value);
break;
case QUIET_TIME_END:
quietTimes=pushPrefs.getQuietTimeInterval();
Date start=quietTimes != null ? quietTimes[0] : new Date();
pushPrefs.setQuietTimeInterval(start,new Date((Long)value));
break;
case QUIET_TIME_START:
quietTimes=pushPrefs.getQuietTimeInterval();
Date end=quietTimes != null ? quietTimes[1] : new Date();
pushPrefs.setQuietTimeInterval(new Date((Long)value),end);
break;
}
}",0.9632968448164844
188055,"/** 
 * Gets the internal UAirship preferences
 * @return Object value of the internal preference
 */
private Object getInternalPreference(UAPreference.PreferenceType preferenceType){
  Date[] quietTimes=null;
  Object value=null;
switch (preferenceType) {
case LOCATION_BACKGROUND_ENABLE:
    value=locPrefs.isLocationEnabled();
  break;
case LOCATION_ENABLE:
value=locPrefs.isLocationEnabled();
break;
case LOCATION_FOREGROUND_ENABLE:
value=locPrefs.isLocationEnabled();
break;
case PUSH_ENABLE:
value=pushPrefs.isPushEnabled();
break;
case QUIET_TIME_ENABLE:
value=pushPrefs.isQuietTimeEnabled();
break;
case QUIET_TIME_END:
quietTimes=pushPrefs.getQuietTimeInterval();
value=quietTimes != null ? quietTimes[1].getTime() : null;
break;
case QUIET_TIME_START:
quietTimes=pushPrefs.getQuietTimeInterval();
value=quietTimes != null ? quietTimes[0].getTime() : null;
break;
case SOUND_ENABLE:
value=pushPrefs.isVibrateEnabled();
break;
case VIBRATE_ENABLE:
value=pushPrefs.isVibrateEnabled();
break;
}
return value;
}","/** 
 * Gets the internal UAirship preferences
 * @return Object value of the internal preference
 */
private Object getInternalPreference(UAPreference.PreferenceType preferenceType){
  Date[] quietTimes=null;
  Object value=null;
switch (preferenceType) {
case LOCATION_BACKGROUND_ENABLE:
    value=locPrefs.isBackgroundLocationEnabled();
  break;
case LOCATION_ENABLE:
value=locPrefs.isLocationEnabled();
break;
case LOCATION_FOREGROUND_ENABLE:
value=locPrefs.isForegroundLocationEnabled();
break;
case PUSH_ENABLE:
value=pushPrefs.isPushEnabled();
break;
case QUIET_TIME_ENABLE:
value=pushPrefs.isQuietTimeEnabled();
break;
case QUIET_TIME_END:
quietTimes=pushPrefs.getQuietTimeInterval();
value=quietTimes != null ? quietTimes[1].getTime() : null;
break;
case QUIET_TIME_START:
quietTimes=pushPrefs.getQuietTimeInterval();
value=quietTimes != null ? quietTimes[0].getTime() : null;
break;
case SOUND_ENABLE:
value=pushPrefs.isSoundEnabled();
break;
case VIBRATE_ENABLE:
value=pushPrefs.isVibrateEnabled();
break;
}
return value;
}",0.984390243902439
188056,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('1','i').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_SEARCH,0,R.string.menu_search).setShortcut('2','s').setIcon(android.R.drawable.ic_menu_search);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('3','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  if (debug)   Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('1','i').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_SEARCH,0,R.string.menu_search).setShortcut('2','s').setIcon(android.R.drawable.ic_menu_search);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('3','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.menu_update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  if (debug)   Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}",0.9977866312527668
188057,"private void sync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult,Syncer syncer,RateLimiter limiter,String cookie,String modhash){
  Cursor c=null;
  try {
    c=syncer.query(provider,account.name);
    int count=c.getCount();
    if (count == 0) {
      return;
    }
    if (limiter.rateLimit > 0) {
      syncResult.stats.numSkippedEntries+=count;
      return;
    }
    Syncer.Ops ops=new Syncer.Ops(syncer.getEstimatedOpCount(count));
    for (; c.moveToNext(); count--) {
      try {
        Result result=syncer.sync(getContext(),c,cookie,modhash);
        if (BuildConfig.DEBUG) {
          result.logAnyErrors(TAG,syncer.getTag());
          if (result.hasErrors()) {
            Log.i(TAG,syncer.getTag() + ""String_Node_Str"" + syncer.getSyncFailures(c));
          }
        }
        if (result.hasRateLimitError()) {
          limiter.updateLimit(result,count > 0);
          syncResult.stats.numSkippedEntries+=count;
          break;
        }
        if (!result.hasErrors() || syncer.getSyncFailures(c) >= MAX_FAILURES) {
          syncer.addRemoveAction(account.name,c,ops);
          syncResult.stats.numEntries++;
        }
 else {
          syncer.addSyncFailure(account.name,c,ops);
          limiter.needExtraSync=true;
          syncResult.stats.numSkippedEntries++;
        }
      }
 catch (      IOException e) {
        Log.e(TAG,e.getMessage(),e);
        syncResult.stats.numIoExceptions++;
      }
    }
    if (!ops.isEmpty()) {
      ContentProviderResult[] results=provider.applyBatch(ops);
      syncResult.stats.numDeletes+=ops.deletes;
      syncResult.stats.numUpdates+=ops.updates;
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
catch (  OperationApplicationException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
}","private void sync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult,Syncer syncer,RateLimiter limiter,String cookie,String modhash){
  Cursor c=null;
  try {
    c=syncer.query(provider,account.name);
    int count=c.getCount();
    if (count == 0) {
      return;
    }
    if (limiter.rateLimit > 0) {
      syncResult.stats.numSkippedEntries+=count;
      return;
    }
    Ops ops=new Ops(syncer.getEstimatedOpCount(count));
    for (; c.moveToNext(); count--) {
      try {
        Result result=syncer.sync(getContext(),c,cookie,modhash);
        if (BuildConfig.DEBUG) {
          result.logAnyErrors(TAG,syncer.getTag());
          if (result.hasErrors()) {
            Log.i(TAG,syncer.getTag() + ""String_Node_Str"" + syncer.getSyncFailures(c));
          }
        }
        if (result.hasRateLimitError()) {
          limiter.updateLimit(result,count > 0);
          syncResult.stats.numSkippedEntries+=count;
          break;
        }
        if (!result.hasErrors() || syncer.getSyncFailures(c) >= MAX_FAILURES) {
          syncer.addRemoveAction(account.name,c,ops);
          syncResult.stats.numEntries++;
        }
 else {
          syncer.addSyncFailure(account.name,c,ops);
          limiter.needExtraSync=true;
          syncResult.stats.numSkippedEntries++;
        }
      }
 catch (      IOException e) {
        Log.e(TAG,e.getMessage(),e);
        syncResult.stats.numIoExceptions++;
      }
    }
    if (!ops.isEmpty()) {
      ContentProviderResult[] results=provider.applyBatch(ops);
      syncResult.stats.numDeletes+=ops.deletes;
      syncResult.stats.numUpdates+=ops.updates;
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
catch (  OperationApplicationException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
}",0.9964194373401536
188058,"@Override protected void onPostExecute(Bundle result){
  String error=result.getString(AccountManager.KEY_ERROR_MESSAGE);
  if (error != null) {
    MessageDialogFragment.showMessage(getFragmentManager(),error);
  }
 else   if (listener != null) {
    listener.onAccountAdded(result);
  }
  hideProgress();
}","@Override protected void onPostExecute(Bundle result){
  task=null;
  String error=result.getString(AccountManager.KEY_ERROR_MESSAGE);
  if (error != null) {
    MessageDialogFragment.showMessage(getFragmentManager(),error);
    hideProgress();
  }
 else   if (listener != null) {
    listener.onAccountAdded(result);
  }
}",0.919175911251981
188059,"@Override public void onSubredditDiscovery(String subreddit){
  NavigationFragment navFrag=getNavigationFragment();
  if (navFrag != null && navFrag.isRandom()) {
    navFrag.setSubreddit(subreddit);
  }
 else {
    ControlFragment controlFrag=getControlFragment();
    if (controlFrag != null && controlFrag.isRandom()) {
      controlFrag=controlFrag.withSubreddit(subreddit);
      FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
      ft.add(controlFrag,TAG_CONTROL_FRAGMENT);
      ft.commitAllowingStateLoss();
      refreshActionBar(controlFrag);
    }
  }
}","@Override public void onSubredditDiscovery(String subreddit){
  NavigationFragment navFrag=getNavigationFragment();
  if (navFrag != null && navFrag.isRandom()) {
    navFrag.onSubredditDiscovery(subreddit);
  }
  ControlFragment controlFrag=getControlFragment();
  if (controlFrag != null && controlFrag.isRandom()) {
    controlFrag=controlFrag.withSubreddit(subreddit);
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,TAG_CONTROL_FRAGMENT);
    ft.commitAllowingStateLoss();
    refreshActionBar(controlFrag);
  }
}",0.9636678200692042
188060,"@Override public void onSubredditDiscovery(String subreddit){
  NavigationFragment navFrag=getNavigationFragment();
  if (navFrag != null && navFrag.isRandom()) {
    navFrag.onSubredditDiscovery(subreddit);
  }
  ControlFragment controlFrag=getControlFragment();
  if (controlFrag != null && controlFrag.isRandom()) {
    controlFrag=controlFrag.withSubreddit(subreddit);
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,TAG_CONTROL_FRAGMENT);
    ft.commitAllowingStateLoss();
    refreshActionBar(controlFrag);
  }
}","@Override public void onSubredditDiscovery(String subreddit){
  NavigationFragment navFrag=getNavigationFragment();
  if (navFrag != null && navFrag.isRandom()) {
    navFrag.setSubreddit(subreddit);
  }
 else {
    ControlFragment controlFrag=getControlFragment();
    if (controlFrag != null && controlFrag.isRandom()) {
      controlFrag=controlFrag.withSubreddit(subreddit);
      FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
      ft.add(controlFrag,TAG_CONTROL_FRAGMENT);
      ft.commitAllowingStateLoss();
      refreshActionBar(controlFrag);
    }
  }
}",0.9636678200692042
188061,"private <F extends Fragment & RightFragment>void setRightFragment(int containerId,ControlFragment controlFrag,F rightFrag,boolean force,boolean removeLeft){
  if (force || !Objects.fragmentEquals(rightFrag,getRightFragment())) {
    safePopBackStackImmediate();
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,TAG_CONTROL_FRAGMENT);
    if (removeLeft) {
      removeFragment(ft,TAG_LEFT_FRAGMENT);
    }
    ft.replace(containerId,rightFrag,TAG_RIGHT_FRAGMENT);
    removeFragment(ft,TAG_THING_FRAGMENT);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
    refreshActionBar(controlFrag);
    refreshViews(controlFrag.getThingBundle());
  }
}","private <F extends Fragment & RightFragment>void setRightFragment(int containerId,ControlFragment controlFrag,F rightFrag,boolean force){
  setRightFragmentRemoveLeft(containerId,controlFrag,rightFrag,force,false);
}",0.2908366533864542
188062,"private <F extends Fragment & RightFragment>void setCenterFragment(int containerId,ControlFragment controlFrag,F centerFrag,boolean force){
  setRightFragment(containerId,controlFrag,centerFrag,true);
}","private <F extends Fragment & RightFragment>void setCenterFragment(int containerId,ControlFragment controlFrag,F centerFrag,boolean force){
  setRightFragmentRemoveLeft(containerId,controlFrag,centerFrag,force,true);
}",0.961904761904762
188063,"private void selectTab(Tab tab){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + tab.getText() + ""String_Node_Str""+ tabListenerDisabled);
  }
  if (!tabListenerDisabled) {
    if (tab == tabInSubreddit) {
      refreshThingList(getSubreddit(),getQuery());
    }
 else     if (tab == tabPosts) {
      refreshThingList(null,getQuery());
    }
 else     if (tab == tabSubreddits) {
      refreshSubredditList(getQuery());
    }
  }
}","private void selectTab(Tab tab){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + tab.getText() + ""String_Node_Str""+ tabListenerDisabled);
  }
  if (!tabListenerDisabled) {
    selectedTabIndex=tab.getPosition();
    if (tab == tabPostsInSubreddit) {
      refreshThingList(getSubreddit());
    }
 else     if (tab == tabPosts) {
      refreshThingList(null);
    }
 else     if (tab == tabSubreddits) {
      refreshSubredditList();
    }
  }
}",0.8879023307436182
188064,"private void refreshSubredditList(String query){
  setSearchSubredditsFragments(accountName,query,FilterAdapter.SUBREDDIT_HOT);
}","private void refreshSubredditList(){
  setSearchSubredditsFragments(accountName,getQuery(),FilterAdapter.SUBREDDIT_HOT);
}",0.9243027888446216
188065,"private void refreshThingList(String subreddit,String query){
  setSearchThingsFragments(accountName,subreddit,query,FilterAdapter.SUBREDDIT_HOT);
}","private void refreshThingList(String subreddit){
  setSearchThingsFragments(accountName,subreddit,getQuery(),FilterAdapter.SUBREDDIT_HOT);
}",0.9305555555555556
188066,"@Override protected boolean hasLeftFragment(){
  return bar.getSelectedTab() == tabSubreddits;
}","@Override protected boolean hasLeftFragment(){
  return selectedTabIndex == subredditsTabIndex;
}",0.8497409326424871
188067,"private void setupTabs(){
  if (Subreddits.hasSidebar(getSubreddit())) {
    tabInSubreddit=addTab(MenuHelper.getSubredditTitle(this,getSubreddit()));
  }
  tabPosts=addTab(getString(R.string.tab_posts));
  tabSubreddits=addTab(getString(R.string.tab_subreddits));
  tabListenerDisabled=savedSelectedTabIndex != 0;
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  tabListenerDisabled=false;
  if (savedSelectedTabIndex != 0) {
    bar.setSelectedNavigationItem(savedSelectedTabIndex);
  }
}","private void setupTabs(){
  if (Subreddits.hasSidebar(getSubreddit())) {
    tabPostsInSubreddit=addTab(MenuHelper.getSubredditTitle(this,getSubreddit()));
  }
  tabPosts=addTab(getString(R.string.tab_posts));
  tabSubreddits=addTab(getString(R.string.tab_subreddits));
  tabListenerDisabled=selectedTabIndex != 0;
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  tabListenerDisabled=false;
  if (selectedTabIndex != 0) {
    bar.setSelectedNavigationItem(selectedTabIndex);
  }
}",0.8646464646464647
188068,"@Override protected void setupActionBar(Bundle savedInstanceState){
  bar.setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    savedSelectedTabIndex=savedInstanceState.getInt(STATE_SELECTED_TAB_INDEX);
  }
  getSupportLoaderManager().initLoader(0,null,this);
}","@Override protected void setupActionBar(Bundle savedInstanceState){
  bar.setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    selectedTabIndex=savedInstanceState.getInt(STATE_SELECTED_TAB_INDEX);
  }
  subredditsTabIndex=Subreddits.hasSidebar(getSubreddit()) ? 2 : 1;
  getSupportLoaderManager().initLoader(0,null,this);
}",0.8828250401284109
188069,"private void selectTab(Tab tab){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + tab.getText() + ""String_Node_Str""+ tabListenerDisabled);
  }
  if (!tabListenerDisabled) {
    if (tab == tabDescription) {
      setSidebarFragments(accountName,getSubredditName());
    }
 else     if (tab == tabRelated) {
      setRelatedSubredditsFragments(accountName,getSubredditName());
    }
  }
}","private void selectTab(Tab tab){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + tab.getText() + ""String_Node_Str""+ tabListenerDisabled);
  }
  if (!tabListenerDisabled) {
    selectedTabIndex=tab.getPosition();
    if (tab == tabDescription) {
      refreshSidebarFragments();
    }
 else     if (tab == tabRelated) {
      refreshRelatedSubredditFragments();
    }
  }
}",0.648786717752235
188070,"@Override protected boolean hasLeftFragment(){
  return bar.getSelectedTab() == tabRelated;
}","@Override protected boolean hasLeftFragment(){
  return selectedTabIndex == TAB_RELATED;
}",0.8087431693989071
188071,"private void setupTabs(){
  tabDescription=addTab(getString(R.string.tab_description));
  tabRelated=addTab(getString(R.string.tab_related));
  tabListenerDisabled=savedSelectedTabIndex != 0;
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  tabListenerDisabled=false;
  if (savedSelectedTabIndex != 0) {
    bar.setSelectedNavigationItem(savedSelectedTabIndex);
  }
}","private void setupTabs(){
  tabDescription=addTab(getString(R.string.tab_description));
  tabRelated=addTab(getString(R.string.tab_related));
  tabListenerDisabled=selectedTabIndex != 0;
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  tabListenerDisabled=false;
  if (selectedTabIndex != 0) {
    bar.setSelectedNavigationItem(selectedTabIndex);
  }
}",0.8254397834912043
188072,"@Override protected void setupActionBar(Bundle savedInstanceState){
  bar.setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    savedSelectedTabIndex=savedInstanceState.getInt(STATE_SELECTED_TAB_INDEX);
  }
  getSupportLoaderManager().initLoader(0,null,this);
}","@Override protected void setupActionBar(Bundle savedInstanceState){
  bar.setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    selectedTabIndex=savedInstanceState.getInt(STATE_SELECTED_TAB_INDEX);
  }
  getSupportLoaderManager().initLoader(0,null,this);
}",0.990990990990991
188073,"private void setRightFragment(int containerId,ControlFragment controlFrag,ThingListFragment<?> rightFrag){
  if (isSinglePane) {
    setRightFragmentSinglePane(containerId,controlFrag,rightFrag,false);
  }
 else {
    setRightFragmentMultiPane(containerId,controlFrag,rightFrag,false);
  }
}","private <F extends Fragment & ComparableFragment>void setRightFragment(int containerId,ControlFragment controlFrag,F frag){
  if (isSinglePane) {
    setRightFragmentSinglePane(containerId,controlFrag,frag,false);
  }
 else {
    setRightFragmentMultiPane(containerId,controlFrag,frag,false);
  }
}",0.6960950764006791
188074,"private void setRightFragmentSinglePane(int containerId,ControlFragment controlFrag,ThingListFragment<?> rightFrag,boolean removeLeft){
  ThingListFragment<?> current=getThingListFragment();
  if (!Arguments.areEqual(current,rightFrag)) {
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,CONTROL_FRAGMENT_TAG);
    if (removeLeft) {
      removeFragment(ft,LEFT_FRAGMENT_TAG);
    }
    ft.replace(containerId,rightFrag,RIGHT_FRAGMENT_TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
  }
  refreshActionBar(controlFrag);
}","private <F extends Fragment & ComparableFragment>void setRightFragmentSinglePane(int containerId,ControlFragment controlFrag,F frag,boolean removeLeft){
  if (!Objects.fragmentEquals(frag,getRightComparableFragment())) {
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,CONTROL_FRAGMENT_TAG);
    if (removeLeft) {
      removeFragment(ft,LEFT_FRAGMENT_TAG);
    }
    ft.replace(containerId,frag,RIGHT_FRAGMENT_TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
  }
  refreshActionBar(controlFrag);
}",0.7978803936411809
188075,"private void setLeftFragment(int containerId,Fragment frag){
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  removeFragment(ft,CONTROL_FRAGMENT_TAG);
  ft.replace(containerId,frag,LEFT_FRAGMENT_TAG);
  removeFragment(ft,RIGHT_FRAGMENT_TAG);
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
  ft.commitAllowingStateLoss();
}","private <F extends Fragment & ComparableFragment>void setLeftFragment(int containerId,F frag){
  if (!Objects.fragmentEquals(frag,getLeftComparableFragment())) {
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    removeFragment(ft,CONTROL_FRAGMENT_TAG);
    ft.replace(containerId,frag,LEFT_FRAGMENT_TAG);
    removeFragment(ft,RIGHT_FRAGMENT_TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
  }
}",0.8598930481283422
188076,"private void setRightFragmentMultiPane(int containerId,ControlFragment controlFrag,ThingListFragment<?> rightFrag,boolean removeLeft){
  ThingListFragment<?> current=getThingListFragment();
  if (!Arguments.areEqual(current,rightFrag)) {
    safePopBackStackImmediate();
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,CONTROL_FRAGMENT_TAG);
    if (removeLeft) {
      removeFragment(ft,LEFT_FRAGMENT_TAG);
    }
    ft.replace(containerId,rightFrag,RIGHT_FRAGMENT_TAG);
    removeFragment(ft,ThingFragment.TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
  }
  refreshActionBar(controlFrag);
  refreshThingBodyWidthMeasurement();
  refreshViews(null);
}","private <F extends Fragment & ComparableFragment>void setRightFragmentMultiPane(int containerId,ControlFragment controlFrag,F frag,boolean removeLeft){
  if (!Objects.fragmentEquals(frag,getRightComparableFragment())) {
    safePopBackStackImmediate();
    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
    ft.add(controlFrag,CONTROL_FRAGMENT_TAG);
    if (removeLeft) {
      removeFragment(ft,LEFT_FRAGMENT_TAG);
    }
    ft.replace(containerId,frag,RIGHT_FRAGMENT_TAG);
    removeFragment(ft,ThingFragment.TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN | FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    ft.commitAllowingStateLoss();
  }
  refreshActionBar(controlFrag);
  refreshThingBodyWidthMeasurement();
  refreshViews(null);
}",0.8319697923222152
188077,"private void bindMessageThingView(View view,Context context,Cursor cursor){
  final String author=cursor.getString(MessageThingLoader.INDEX_AUTHOR);
  final String body=cursor.getString(MessageThingLoader.INDEX_BODY);
  final long createdUtc=cursor.getLong(MessageThingLoader.INDEX_CREATED_UTC);
  final String destination=cursor.getString(MessageThingLoader.INDEX_DESTINATION);
  final String domain=null;
  final int downs=0;
  final boolean expanded=true;
  final int kind=cursor.getInt(MessageThingLoader.INDEX_KIND);
  final int likes=0;
  final boolean isNew=isNew(cursor.getPosition());
  final int nesting=0;
  final int numComments=0;
  final boolean over18=false;
  final int score=0;
  final String subject=cursor.getString(MessageThingLoader.INDEX_SUBJECT);
  final String subreddit=cursor.getString(MessageThingLoader.INDEX_SUBREDDIT);
  final String thingId=cursor.getString(MessageThingLoader.INDEX_THING_ID);
  final String title=null;
  final int ups=0;
  final boolean drawVotingArrows=false;
  final boolean showThumbnail=false;
  final boolean showStatusPoints=false;
  ThingView tv=(ThingView)view;
  tv.setBody(body,isNew,formatter);
  tv.setData(accountName,author,createdUtc,destination,domain,downs,expanded,kind,likes,subject,nesting,nowTimeMs,numComments,over18,null,score,subreddit,thingBodyWidth,thingId,title,ups,drawVotingArrows,showThumbnail,showStatusPoints);
  tv.setChosen(singleChoice && Objects.equals(selectedThingId,thingId));
  setThingDetails(tv,kind);
}","private void bindMessageThingView(View view,Context context,Cursor cursor){
  final String author=cursor.getString(MessageThingLoader.INDEX_AUTHOR);
  final String body=cursor.getString(MessageThingLoader.INDEX_BODY);
  final long createdUtc=cursor.getLong(MessageThingLoader.INDEX_CREATED_UTC);
  final String destination=cursor.getString(MessageThingLoader.INDEX_DESTINATION);
  final String domain=null;
  final int downs=0;
  final boolean expanded=true;
  final int kind=cursor.getInt(MessageThingLoader.INDEX_KIND);
  final int likes=0;
  final boolean isNew=isNew(cursor.getPosition());
  final int nesting=0;
  final int numComments=0;
  final boolean over18=false;
  final String parentSubreddit=null;
  final int score=0;
  final String subject=cursor.getString(MessageThingLoader.INDEX_SUBJECT);
  final String subreddit=cursor.getString(MessageThingLoader.INDEX_SUBREDDIT);
  final String thingId=cursor.getString(MessageThingLoader.INDEX_THING_ID);
  final String title=null;
  final int ups=0;
  final boolean drawVotingArrows=false;
  final boolean showThumbnail=false;
  final boolean showStatusPoints=false;
  ThingView tv=(ThingView)view;
  tv.setBody(body,isNew,formatter);
  tv.setData(accountName,author,createdUtc,destination,domain,downs,expanded,kind,likes,subject,nesting,nowTimeMs,numComments,over18,parentSubreddit,score,subreddit,thingBodyWidth,thingId,title,ups,drawVotingArrows,showThumbnail,showStatusPoints);
  tv.setChosen(singleChoice && Objects.equals(selectedThingId,thingId));
  setThingDetails(tv,kind);
}",0.9815668202764976
188078,"private Bundle insertComment(String accountName,Bundle extras){
  String body=getBodyExtra(extras);
  String parentThingId=getParentThingIdExtra(extras);
  String thingId=getThingIdExtra(extras);
  SQLiteDatabase db=helper.getWritableDatabase();
  SQLiteStatement updateNumComments=db.compileStatement(UPDATE_NUM_COMMENTS_STATEMENT);
  SQLiteStatement updateNumComments2=db.compileStatement(UPDATE_NUM_COMMENTS_STATEMENT_2);
  SQLiteStatement updateSequence=db.compileStatement(UPDATE_SEQUENCE_STATEMENT);
  db.beginTransaction();
  try {
    ContentValues values=new ContentValues(7);
    values.put(CommentActions.COLUMN_ACCOUNT,accountName);
    values.put(CommentActions.COLUMN_ACTION,CommentActions.ACTION_INSERT);
    values.put(CommentActions.COLUMN_PARENT_THING_ID,parentThingId);
    values.put(CommentActions.COLUMN_TEXT,body);
    values.put(CommentActions.COLUMN_THING_ID,thingId);
    long actionId=db.insert(CommentActions.TABLE_NAME,null,values);
    if (actionId == -1) {
      return null;
    }
    Cursor cursor=db.query(Sessions.TABLE_NAME,SESSION_ID_PROJECTION,Sessions.SELECT_BY_TYPE_AND_TAG,Array.of(Sessions.TYPE_COMMENTS,parentThingId),null,null,null);
    try {
      while (cursor.moveToNext()) {
        long sessionId=cursor.getLong(SESSION_INDEX_ID);
        long parentId=-1;
        int position=-1;
        int nesting=-1;
        int sequence=-1;
        Cursor c=db.query(Comments.TABLE_NAME,INSERT_COMMENT_PROJECTION,Comments.SELECT_BY_SESSION_ID,Array.of(sessionId),null,null,Comments.SORT_BY_SEQUENCE_AND_ID);
        try {
          while (c.moveToNext()) {
            if (c.getPosition() == 0) {
              parentId=c.getLong(INSERT_COMMENT_ID_INDEX);
            }
            String targetThingId=c.getString(INSERT_COMMENT_THING_INDEX);
            if (targetThingId.equals(parentThingId)) {
              position=c.getPosition();
              break;
            }
          }
          if (parentId == -1 || position == -1) {
            continue;
          }
          CursorCommentList cl=new CursorCommentList(c,INSERT_COMMENT_ID_INDEX,INSERT_COMMENT_NESTING_INDEX,INSERT_COMMENT_SEQUENCE_INDEX);
          nesting=CommentLogic.getInsertNesting(cl,position);
          sequence=CommentLogic.getInsertSequence(cl,position);
        }
  finally {
          c.close();
        }
        updateNumComments.bindLong(1,parentId);
        updateNumComments.executeUpdateDelete();
        updateNumComments2.bindString(1,accountName);
        updateNumComments2.bindString(2,parentThingId);
        updateSequence.bindLong(1,sessionId);
        updateSequence.bindLong(2,sequence);
        updateSequence.executeUpdateDelete();
        values.clear();
        values.put(Comments.COLUMN_ACCOUNT,accountName);
        values.put(Comments.COLUMN_AUTHOR,accountName);
        values.put(Comments.COLUMN_BODY,body);
        values.put(Comments.COLUMN_COMMENT_ACTION_ID,actionId);
        values.put(Comments.COLUMN_KIND,Kinds.KIND_COMMENT);
        values.put(Comments.COLUMN_NESTING,nesting);
        values.put(Comments.COLUMN_SEQUENCE,sequence);
        values.put(Comments.COLUMN_SESSION_ID,sessionId);
        long commentId=db.insert(Comments.TABLE_NAME,null,values);
        if (commentId == -1) {
          return null;
        }
      }
    }
  finally {
      cursor.close();
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  ContentResolver cr=getContext().getContentResolver();
  cr.notifyChange(COMMENT_ACTIONS_URI,null,SYNC);
  cr.notifyChange(COMMENTS_URI,null,NO_SYNC);
  cr.notifyChange(THINGS_URI,null,NO_SYNC);
  return Bundle.EMPTY;
}","private Bundle insertComment(String accountName,Bundle extras){
  String body=getBodyExtra(extras);
  String parentThingId=getParentThingIdExtra(extras);
  String thingId=getThingIdExtra(extras);
  SQLiteDatabase db=helper.getWritableDatabase();
  SQLiteStatement updateNumComments=db.compileStatement(UPDATE_NUM_COMMENTS_STATEMENT);
  SQLiteStatement updateNumComments2=db.compileStatement(UPDATE_NUM_COMMENTS_STATEMENT_2);
  SQLiteStatement updateSequence=db.compileStatement(UPDATE_SEQUENCE_STATEMENT);
  db.beginTransaction();
  try {
    ContentValues values=new ContentValues(7);
    values.put(CommentActions.COLUMN_ACCOUNT,accountName);
    values.put(CommentActions.COLUMN_ACTION,CommentActions.ACTION_INSERT);
    values.put(CommentActions.COLUMN_PARENT_THING_ID,parentThingId);
    values.put(CommentActions.COLUMN_TEXT,body);
    values.put(CommentActions.COLUMN_THING_ID,thingId);
    long actionId=db.insert(CommentActions.TABLE_NAME,null,values);
    if (actionId == -1) {
      return null;
    }
    Cursor cursor=db.query(Sessions.TABLE_NAME,SESSION_ID_PROJECTION,Sessions.SELECT_BY_TYPE_AND_TAG,Array.of(Sessions.TYPE_COMMENTS,parentThingId),null,null,null);
    try {
      while (cursor.moveToNext()) {
        long sessionId=cursor.getLong(SESSION_INDEX_ID);
        long headerDbId=-1;
        int position=-1;
        int nesting=-1;
        int sequence=-1;
        Cursor c=db.query(Comments.TABLE_NAME,INSERT_COMMENT_PROJECTION,Comments.SELECT_BY_SESSION_ID,Array.of(sessionId),null,null,Comments.SORT_BY_SEQUENCE_AND_ID);
        try {
          while (c.moveToNext()) {
            if (c.getPosition() == 0) {
              headerDbId=c.getLong(INSERT_COMMENT_INDEX_ID);
            }
            String rowThingId=c.getString(INSERT_COMMENT_INDEX_THING);
            if (thingId.equals(rowThingId)) {
              position=c.getPosition();
              break;
            }
          }
          if (headerDbId == -1 || position == -1) {
            continue;
          }
          CursorCommentList cl=new CursorCommentList(c,INSERT_COMMENT_INDEX_ID,INSERT_COMMENT_INDEX_NESTING,INSERT_COMMENT_INDEX_SEQUENCE);
          nesting=CommentLogic.getInsertNesting(cl,position);
          sequence=CommentLogic.getInsertSequence(cl,position);
        }
  finally {
          c.close();
        }
        updateNumComments.bindLong(1,headerDbId);
        updateNumComments.executeUpdateDelete();
        updateNumComments2.bindString(1,accountName);
        updateNumComments2.bindString(2,parentThingId);
        updateNumComments2.executeUpdateDelete();
        updateSequence.bindLong(1,sessionId);
        updateSequence.bindLong(2,sequence);
        updateSequence.executeUpdateDelete();
        values.clear();
        values.put(Comments.COLUMN_ACCOUNT,accountName);
        values.put(Comments.COLUMN_AUTHOR,accountName);
        values.put(Comments.COLUMN_BODY,body);
        values.put(Comments.COLUMN_COMMENT_ACTION_ID,actionId);
        values.put(Comments.COLUMN_KIND,Kinds.KIND_COMMENT);
        values.put(Comments.COLUMN_NESTING,nesting);
        values.put(Comments.COLUMN_SEQUENCE,sequence);
        values.put(Comments.COLUMN_SESSION_ID,sessionId);
        long commentId=db.insert(Comments.TABLE_NAME,null,values);
        if (commentId == -1) {
          return null;
        }
      }
    }
  finally {
      cursor.close();
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  ContentResolver cr=getContext().getContentResolver();
  cr.notifyChange(COMMENT_ACTIONS_URI,null,SYNC);
  cr.notifyChange(COMMENTS_URI,null,NO_SYNC);
  cr.notifyChange(THINGS_URI,null,NO_SYNC);
  return Bundle.EMPTY;
}",0.8216630196936543
188079,"private void refreshCheckedItems(){
  ControlFragment cf=getControlFragment();
  SubredditListFragment<?,?> sf=getSubredditListFragment();
  if (sf != null) {
    sf.setSelectedSubreddit(cf.isRandom() ? Subreddits.NAME_RANDOM : cf.getSubreddit());
  }
  ThingListFragment<?> tf=getThingListFragment();
  if (tf != null) {
    ThingBundle thingBundle=cf.getThingBundle();
    if (thingBundle != null) {
      tf.setSelectedThing(thingBundle.getThingId(),thingBundle.getLinkId());
    }
  }
}","private void refreshCheckedItems(){
  ControlFragment cf=getControlFragment();
  SubredditListFragment<?,?> sf=getSubredditListFragment();
  if (sf != null) {
    sf.setSelectedSubreddit(cf.isRandom() ? Subreddits.NAME_RANDOM : cf.getSubreddit());
  }
  ThingListFragment<?> tf=getThingListFragment();
  if (tf != null) {
    ThingBundle thingBundle=cf.getThingBundle();
    if (thingBundle != null) {
      tf.setSelectedThing(thingBundle.getThingId(),thingBundle.getLinkId());
    }
 else {
      tf.setSelectedThing(null,null);
    }
  }
}",0.9496124031007752
188080,"@Override public void swapCursor(Cursor cursor){
  setMoreId(null);
  adapter.swapCursor(cursor);
  if (cursor != null && cursor.getExtras() != null) {
    Bundle extras=cursor.getExtras();
    setSessionId(extras.getLong(ThingProvider.EXTRA_SESSION_ID));
  }
}","@Override public boolean swapCursor(Cursor cursor){
  if (adapter.getCursor() != cursor) {
    setMoreId(null);
    adapter.swapCursor(cursor);
    if (cursor != null && cursor.getExtras() != null) {
      Bundle extras=cursor.getExtras();
      setSessionId(extras.getLong(ThingProvider.EXTRA_SESSION_ID));
    }
    return true;
  }
  return false;
}",0.6688417618270799
188081,"@Override public void swapCursor(Cursor cursor){
  adapter.swapCursor(cursor);
}","@Override public boolean swapCursor(Cursor cursor){
  if (adapter.getOriginalCursor() != cursor) {
    adapter.swapCursor(cursor);
    return true;
  }
  return false;
}",0.6184738955823293
188082,"@Override public void swapCursor(Cursor cursor){
  setMoreId(null);
  adapter.swapCursor(cursor);
  if (cursor != null && cursor.getExtras() != null) {
    Bundle extras=cursor.getExtras();
    setSessionId(extras.getLong(ThingProvider.EXTRA_SESSION_ID));
  }
}","@Override public boolean swapCursor(Cursor cursor){
  if (adapter.getCursor() != cursor) {
    setMoreId(null);
    adapter.swapCursor(cursor);
    if (cursor != null && cursor.getExtras() != null) {
      Bundle extras=cursor.getExtras();
      setSessionId(extras.getLong(ThingProvider.EXTRA_SESSION_ID));
    }
    return true;
  }
  return false;
}",0.6688417618270799
188083,void swapCursor(Cursor cursor);,boolean swapCursor(Cursor cursor);,0.8615384615384616
188084,"public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  super.onLoadFinished(loader,cursor);
  controller.swapCursor(cursor);
  setEmptyText(getEmptyText(cursor == null));
  setListShown(true);
  if (actionMode != null) {
    actionMode.invalidate();
  }
  if (listener != null) {
    if (cursor == null) {
      listener.onInitialSubredditSelected(null,true);
    }
 else     if (cursor.getCount() == 0) {
      listener.onInitialSubredditSelected(null,false);
    }
 else {
      listener.onInitialSubredditSelected(getSubreddit(0),false);
    }
  }
}","public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (controller.swapCursor(cursor)) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    super.onLoadFinished(loader,cursor);
    setEmptyText(getEmptyText(cursor == null));
    setListShown(true);
    if (actionMode != null) {
      actionMode.invalidate();
    }
    if (listener != null) {
      if (cursor == null) {
        listener.onInitialSubredditSelected(null,true);
      }
 else       if (cursor.getCount() == 0) {
        listener.onInitialSubredditSelected(null,false);
      }
 else {
        listener.onInitialSubredditSelected(getSubreddit(0),false);
      }
    }
  }
}",0.765511684125705
188085,"@Override public void swapCursor(Cursor cursor){
  adapter.swapCursor(cursor);
}","@Override public boolean swapCursor(Cursor cursor){
  if (adapter.getCursor() != cursor) {
    adapter.swapCursor(cursor);
    return true;
  }
  return false;
}",0.6390041493775933
188086,void swapCursor(Cursor cursor);,boolean swapCursor(Cursor cursor);,0.8615384615384616
188087,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  super.onLoadFinished(loader,cursor);
  scrollLoading=false;
  controller.swapCursor(cursor);
  setEmptyText(getString(cursor != null ? R.string.empty_list : R.string.error));
  setListShown(true);
  getActivity().invalidateOptionsMenu();
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (controller.swapCursor(cursor)) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    super.onLoadFinished(loader,cursor);
    scrollLoading=false;
    setEmptyText(getString(cursor != null ? R.string.empty_list : R.string.error));
    setListShown(true);
    getActivity().invalidateOptionsMenu();
  }
}",0.7883817427385892
188088,"public AccountSubredditListAdapter(Context context,boolean showPresets,boolean addFilter,boolean singleChoice){
  super(context,singleChoice);
  this.showPresets=showPresets;
  if (addFilter) {
    showPresets=false;
    final Context appContext=context.getApplicationContext();
    setFilterQueryProvider(new FilterQueryProvider(){
      public Cursor runQuery(      CharSequence constraint){
        return getFilterCursor(appContext,constraint);
      }
    }
);
  }
}","public AccountSubredditListAdapter(Context context,boolean showPresets,boolean addFilter,boolean singleChoice){
  super(context,singleChoice);
  this.showPresets=showPresets;
  if (addFilter) {
    final Context appContext=context.getApplicationContext();
    setFilterQueryProvider(new FilterQueryProvider(){
      public Cursor runQuery(      CharSequence constraint){
        return getFilterCursor(appContext,constraint);
      }
    }
);
  }
}",0.9749727965179544
188089,"@Override public Cursor swapCursor(Cursor newCursor){
  if (showPresets) {
    newCursor=new MergeCursor(new Cursor[]{PRESETS_CURSOR,newCursor});
  }
  return super.swapCursor(newCursor);
}","@Override public Cursor swapCursor(Cursor newCursor){
  originalCursor=newCursor;
  if (showPresets) {
    newCursor=new MergeCursor(new Cursor[]{PRESETS_CURSOR,newCursor});
  }
  return super.swapCursor(newCursor);
}",0.9310344827586208
188090,"@Override public Cursor loadInBackground(){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  Bundle result=ThingProvider.getCommentsSession(getContext(),accountName,thingId,linkId,-1);
  long sessionId=result.getLong(ThingProvider.EXTRA_SESSION_ID);
  setUri(ThingProvider.COMMENTS_URI);
  setProjection(PROJECTION);
  setSelection(Comments.SELECT_VISIBLE_BY_SESSION_ID);
  setSelectionArgs(Array.of(sessionId));
  setSortOrder(Comments.SORT_BY_SEQUENCE_AND_ID);
  return new CursorExtrasWrapper(super.loadInBackground(),result);
}","@Override public Cursor loadInBackground(){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  Bundle result=ThingProvider.getCommentsSession(getContext(),accountName,thingId,linkId,-1);
  long sessionId=result.getLong(ThingProvider.EXTRA_SESSION_ID);
  setSelectionArgs(Array.of(sessionId));
  return new CursorExtrasWrapper(super.loadInBackground(),result);
}",0.8142548596112311
188091,"public CommentLoader(Context context,String accountName,String thingId,String linkId){
  super(context);
  this.accountName=accountName;
  this.thingId=thingId;
  this.linkId=linkId;
}","public CommentLoader(Context context,String accountName,String thingId,String linkId){
  super(context);
  this.accountName=accountName;
  this.thingId=thingId;
  this.linkId=linkId;
  setUri(ThingProvider.getCommentsUri(true));
  setProjection(PROJECTION);
  setSelection(Comments.SELECT_VISIBLE_BY_SESSION_ID);
  setSortOrder(Comments.SORT_BY_SEQUENCE_AND_ID);
}",0.6715328467153284
188092,"public SubredditThingLoader(Context context,String accountName,String subreddit,int filter,String more){
  super(context);
  this.accountName=accountName;
  this.subreddit=subreddit;
  this.filter=filter;
  this.more=more;
  setUri(ThingProvider.THINGS_URI);
  setProjection(PROJECTION);
  setSelection(HideActions.SELECT_UNHIDDEN_BY_SESSION_ID);
}","public SubredditThingLoader(Context context,String accountName,String subreddit,int filter,String more){
  super(context);
  this.accountName=accountName;
  this.subreddit=subreddit;
  this.filter=filter;
  this.more=more;
  setUri(ThingProvider.getSubredditUri(true));
  setProjection(PROJECTION);
  setSelection(HideActions.SELECT_UNHIDDEN_BY_SESSION_ID);
}",0.958981612446959
188093,"public void setThumbnail(Context context,ThingView v,String url){
  if (!TextUtils.isEmpty(url)) {
    Bitmap b=BITMAP_CACHE.get(url);
    v.setThumbnailBitmap(b);
    if (b == null) {
      LoadThumbnailTask task=(LoadThumbnailTask)v.getTag();
      if (task == null || !url.equals(task.url)) {
        if (task != null) {
          task.cancel(true);
        }
        task=new LoadThumbnailTask(v,url);
        v.setTag(task);
        task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
    }
  }
 else {
    LoadThumbnailTask task=(LoadThumbnailTask)v.getTag();
    if (task != null) {
      task.cancel(true);
      v.setTag(null);
    }
    v.setThumbnailBitmap(null);
  }
}","public void setThumbnail(Context context,ThingView v,String url){
  if (!TextUtils.isEmpty(url)) {
    Bitmap b=BITMAP_CACHE.get(url);
    v.setThumbnailBitmap(b);
    if (b != null) {
      clearLoadThumbnailTask(v);
    }
 else {
      LoadThumbnailTask task=(LoadThumbnailTask)v.getTag();
      if (task == null || !url.equals(task.url)) {
        if (task != null) {
          task.cancel(true);
        }
        task=new LoadThumbnailTask(v,url);
        v.setTag(task);
        task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
      ;
    }
  }
 else {
    v.setThumbnailBitmap(null);
    clearLoadThumbnailTask(v);
  }
}",0.8074906367041198
188094,"private boolean insertThing(String actionAccountName,String replyId,String body){
  int size=values.size();
  for (int i=0; i < size; i++) {
    ContentValues v=values.get(i);
    String id=v.getAsString(Things.COLUMN_THING_ID);
    if (TextUtils.isEmpty(id)) {
      continue;
    }
    if (id.equals(replyId)) {
      ContentValues p=new ContentValues(8);
      p.put(Things.COLUMN_ACCOUNT,actionAccountName);
      p.put(Things.COLUMN_AUTHOR,actionAccountName);
      p.put(Things.COLUMN_BODY,body);
      p.put(Things.COLUMN_KIND,Kinds.KIND_COMMENT);
      p.put(Things.COLUMN_NESTING,CommentLogic.getInsertNesting(this,i));
      p.put(Things.COLUMN_SEQUENCE,CommentLogic.getInsertSequence(this,i));
      values.add(CommentLogic.getInsertPosition(this,i),p);
      size++;
      return true;
    }
  }
  return false;
}","private boolean insertThing(long actionId,String actionAccountName,String body,String actionThingId){
  int size=values.size();
  for (int i=0; i < size; i++) {
    ContentValues v=values.get(i);
    String id=v.getAsString(Things.COLUMN_THING_ID);
    if (TextUtils.isEmpty(id)) {
      continue;
    }
    if (id.equals(actionThingId)) {
      ContentValues p=new ContentValues(7 + 1);
      p.put(Things.COLUMN_ACCOUNT,actionAccountName);
      p.put(Things.COLUMN_AUTHOR,actionAccountName);
      p.put(Things.COLUMN_BODY,body);
      p.put(Things.COLUMN_COMMENT_ACTION_ID,actionId);
      p.put(Things.COLUMN_KIND,Kinds.KIND_COMMENT);
      p.put(Things.COLUMN_NESTING,CommentLogic.getInsertNesting(this,i));
      p.put(Things.COLUMN_SEQUENCE,CommentLogic.getInsertSequence(this,i));
      values.add(CommentLogic.getInsertPosition(this,i),p);
      size++;
      return true;
    }
  }
  return false;
}",0.9325648414985592
188095,"private void mergeActions(){
  int delta=0;
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  Cursor c=db.query(CommentActions.TABLE_NAME,PROJECTION,CommentActions.SELECT_BY_ACCOUNT_AND_PARENT_THING_ID,Array.of(accountName,thingId),null,null,CommentActions.SORT_BY_ID);
  try {
    while (c.moveToNext()) {
      String actionAccountName=c.getString(INDEX_ACCOUNT_NAME);
      int action=c.getInt(INDEX_ACTION);
      String id=c.getString(INDEX_THING_ID);
      String text=c.getString(INDEX_TEXT);
switch (action) {
case CommentActions.ACTION_INSERT:
        if (insertThing(actionAccountName,id,text)) {
          delta++;
        }
      break;
case CommentActions.ACTION_DELETE:
    if (deleteThing(id)) {
      delta--;
    }
  break;
default :
throw new IllegalStateException();
}
}
}
  finally {
c.close();
}
if (!values.isEmpty()) {
Integer numComments=(Integer)values.get(0).get(Things.COLUMN_NUM_COMMENTS);
values.get(0).put(Things.COLUMN_NUM_COMMENTS,numComments.intValue() + delta);
}
}","private void mergeActions(){
  int delta=0;
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  Cursor c=db.query(CommentActions.TABLE_NAME,PROJECTION,CommentActions.SELECT_BY_ACCOUNT_AND_PARENT_THING_ID,Array.of(accountName,thingId),null,null,CommentActions.SORT_BY_ID);
  try {
    while (c.moveToNext()) {
      long actionId=c.getLong(INDEX_ID);
      String actionAccountName=c.getString(INDEX_ACCOUNT_NAME);
      int action=c.getInt(INDEX_ACTION);
      String text=c.getString(INDEX_TEXT);
      String actionThingId=c.getString(INDEX_THING_ID);
switch (action) {
case CommentActions.ACTION_INSERT:
        if (insertThing(actionId,actionAccountName,text,actionThingId)) {
          delta++;
        }
      break;
case CommentActions.ACTION_DELETE:
    if (deleteThing(actionThingId)) {
      delta--;
    }
  break;
default :
throw new IllegalStateException();
}
}
}
  finally {
c.close();
}
if (!values.isEmpty()) {
Integer numComments=(Integer)values.get(0).get(Things.COLUMN_NUM_COMMENTS);
values.get(0).put(Things.COLUMN_NUM_COMMENTS,numComments.intValue() + delta);
}
}",0.7965533748204883
188096,"private void setDetailsText(String domain,int downs,int ups){
  Resources r=getResources();
  longDetailsText.clear();
  longDetailsText.append(r.getQuantityString(R.plurals.votes_up,ups,ups)).append(""String_Node_Str"");
  longDetailsText.append(r.getQuantityString(R.plurals.votes_down,downs,downs)).append(""String_Node_Str"");
  if (!TextUtils.isEmpty(domain)) {
    longDetailsText.append(domain);
    shortDetailsText=domain;
  }
 else {
    shortDetailsText=""String_Node_Str"";
  }
}","private void setDetailsText(boolean showPoints,String domain,int downs,int ups){
  Resources r=getResources();
  if (showPoints) {
    longDetailsText.clear();
    longDetailsText.append(r.getQuantityString(R.plurals.votes_up,ups,ups)).append(""String_Node_Str"");
    longDetailsText.append(r.getQuantityString(R.plurals.votes_down,downs,downs)).append(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(domain)) {
    longDetailsText.append(domain);
    shortDetailsText=domain;
  }
 else {
    shortDetailsText=""String_Node_Str"";
  }
}",0.9519136408243376
188097,"public void setData(String accountName,String author,String body,long createdUtc,String domain,int downs,int kind,int likes,String linkTitle,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.kind=kind;
  this.likes=likes;
  this.linkTitle=linkTitle;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  drawVotingArrows=AccountUtils.isAccount(accountName);
  drawScore=drawVotingArrows && kind == Things.KIND_LINK;
  if (drawScore) {
    if (scoreBounds == null) {
      scoreBounds=new Rect();
    }
    scoreText=VotingArrows.getScoreText(score);
  }
  setStatusText(author,createdUtc,kind,nowTimeMs,numComments,over18,parentSubreddit,score,subreddit,drawVotingArrows);
  setDetailsText(domain,downs,ups);
  if (!TextUtils.isEmpty(body)) {
    bodyText=FORMATTER.formatSpans(getContext(),body);
    if (bodyBounds == null) {
      bodyBounds=new RectF();
    }
  }
 else {
    bodyText=null;
  }
  requestLayout();
}","public void setData(String accountName,String author,String body,long createdUtc,String domain,int downs,int kind,int likes,String linkTitle,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.kind=kind;
  this.likes=likes;
  this.linkTitle=linkTitle;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  drawVotingArrows=AccountUtils.isAccount(accountName) && kind != Things.KIND_MESSAGE;
  drawScore=drawVotingArrows && kind == Things.KIND_LINK;
  if (drawScore) {
    if (scoreBounds == null) {
      scoreBounds=new Rect();
    }
    scoreText=VotingArrows.getScoreText(score);
  }
  boolean showSubreddit=!TextUtils.isEmpty(subreddit) && !subreddit.equalsIgnoreCase(parentSubreddit);
  boolean showPoints=!drawVotingArrows && kind != Things.KIND_MESSAGE;
  boolean showNumComments=kind == Things.KIND_LINK;
  setStatusText(over18,showSubreddit,showPoints,showNumComments,author,createdUtc,nowTimeMs,numComments,score,subreddit);
  setDetailsText(showPoints,domain,downs,ups);
  if (!TextUtils.isEmpty(body)) {
    bodyText=FORMATTER.formatSpans(getContext(),body);
    if (bodyBounds == null) {
      bodyBounds=new RectF();
    }
  }
 else {
    bodyText=null;
  }
  requestLayout();
}",0.8225871045254305
188098,"private void setStatusText(String author,long createdUtc,int kind,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,boolean votable){
  Context c=getContext();
  Resources r=getResources();
  statusText.clear();
  statusText.clearSpans();
  if (over18) {
    String nsfw=c.getString(R.string.nsfw);
    statusText.append(nsfw).append(""String_Node_Str"");
    statusText.setSpan(new ForegroundColorSpan(Color.RED),0,nsfw.length(),0);
  }
  if (!subreddit.equalsIgnoreCase(parentSubreddit)) {
    statusText.append(subreddit).append(""String_Node_Str"");
  }
  statusText.append(author).append(""String_Node_Str"");
  if (!votable) {
    statusText.append(r.getQuantityString(R.plurals.points,score,score)).append(""String_Node_Str"");
  }
  statusText.append(RelativeTime.format(c,nowTimeMs,createdUtc)).append(""String_Node_Str"");
  if (kind == Things.KIND_LINK) {
    statusText.append(r.getQuantityString(R.plurals.comments,numComments,numComments));
  }
}","private void setStatusText(boolean showNsfw,boolean showSubreddit,boolean showPoints,boolean showNumComments,String author,long createdUtc,long nowTimeMs,int numComments,int score,String subreddit){
  Context c=getContext();
  Resources r=getResources();
  statusText.clear();
  statusText.clearSpans();
  if (showNsfw) {
    String nsfw=c.getString(R.string.nsfw);
    statusText.append(nsfw).append(""String_Node_Str"");
    statusText.setSpan(new ForegroundColorSpan(Color.RED),0,nsfw.length(),0);
  }
  if (showSubreddit) {
    statusText.append(subreddit).append(""String_Node_Str"");
  }
  statusText.append(author).append(""String_Node_Str"");
  if (showPoints) {
    statusText.append(r.getQuantityString(R.plurals.points,score,score)).append(""String_Node_Str"");
  }
  statusText.append(RelativeTime.format(c,nowTimeMs,createdUtc)).append(""String_Node_Str"");
  if (showNumComments) {
    statusText.append(r.getQuantityString(R.plurals.comments,numComments,numComments));
  }
}",0.8455696202531645
188099,"private void setDetailsText(boolean showPoints,String domain,int downs,int ups){
  Resources r=getResources();
  if (showPoints) {
    longDetailsText.clear();
    longDetailsText.append(r.getQuantityString(R.plurals.votes_up,ups,ups)).append(""String_Node_Str"");
    longDetailsText.append(r.getQuantityString(R.plurals.votes_down,downs,downs)).append(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(domain)) {
    longDetailsText.append(domain);
    shortDetailsText=domain;
  }
 else {
    shortDetailsText=""String_Node_Str"";
  }
}","private void setDetailsText(boolean showUpsDowns,String domain,int downs,int ups){
  Resources r=getResources();
  longDetailsText.clear();
  if (showUpsDowns) {
    longDetailsText.append(r.getQuantityString(R.plurals.votes_up,ups,ups)).append(""String_Node_Str"");
    longDetailsText.append(r.getQuantityString(R.plurals.votes_down,downs,downs)).append(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(domain)) {
    longDetailsText.append(domain);
    shortDetailsText=domain;
  }
 else {
    shortDetailsText=""String_Node_Str"";
  }
}",0.9252336448598132
188100,"public void setData(String accountName,String author,String body,long createdUtc,String domain,int downs,int kind,int likes,String linkTitle,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.kind=kind;
  this.likes=likes;
  this.linkTitle=linkTitle;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  drawVotingArrows=AccountUtils.isAccount(accountName) && kind != Things.KIND_MESSAGE;
  drawScore=drawVotingArrows && kind == Things.KIND_LINK;
  if (drawScore) {
    if (scoreBounds == null) {
      scoreBounds=new Rect();
    }
    scoreText=VotingArrows.getScoreText(score);
  }
  boolean showSubreddit=!TextUtils.isEmpty(subreddit) && !subreddit.equalsIgnoreCase(parentSubreddit);
  boolean showPoints=!drawVotingArrows && kind != Things.KIND_MESSAGE;
  boolean showNumComments=kind == Things.KIND_LINK;
  setStatusText(over18,showSubreddit,showPoints,showNumComments,author,createdUtc,nowTimeMs,numComments,score,subreddit);
  setDetailsText(showPoints,domain,downs,ups);
  if (!TextUtils.isEmpty(body)) {
    bodyText=FORMATTER.formatSpans(getContext(),body);
    if (bodyBounds == null) {
      bodyBounds=new RectF();
    }
  }
 else {
    bodyText=null;
  }
  requestLayout();
}","public void setData(String accountName,String author,String body,long createdUtc,String domain,int downs,int kind,int likes,String linkTitle,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.kind=kind;
  this.likes=likes;
  this.linkTitle=linkTitle;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  drawVotingArrows=AccountUtils.isAccount(accountName) && kind != Things.KIND_MESSAGE;
  drawScore=drawVotingArrows && kind == Things.KIND_LINK;
  if (drawScore) {
    if (scoreBounds == null) {
      scoreBounds=new Rect();
    }
    scoreText=VotingArrows.getScoreText(score);
  }
  boolean showSubreddit=!TextUtils.isEmpty(subreddit) && !subreddit.equalsIgnoreCase(parentSubreddit);
  boolean showPoints=!drawVotingArrows && kind != Things.KIND_MESSAGE;
  boolean showNumComments=kind == Things.KIND_LINK;
  setStatusText(over18,showSubreddit,showPoints,showNumComments,author,createdUtc,nowTimeMs,numComments,score,subreddit);
  boolean showUpsDowns=kind == Things.KIND_LINK;
  setDetailsText(showUpsDowns,domain,downs,ups);
  if (!TextUtils.isEmpty(body)) {
    bodyText=FORMATTER.formatSpans(getContext(),body);
    if (bodyBounds == null) {
      bodyBounds=new RectF();
    }
  }
 else {
    bodyText=null;
  }
  requestLayout();
}",0.976232706633558
188101,"private void insertThing(String replyId,String body){
  int size=values.size();
  for (int i=0; i < size; i++) {
    ContentValues v=values.get(i);
    String id=v.getAsString(Comments.COLUMN_THING_ID);
    if (TextUtils.isEmpty(id)) {
      continue;
    }
    if (id.equals(replyId)) {
      ContentValues p=new ContentValues(8);
      p.put(Comments.COLUMN_ACCOUNT,accountName);
      p.put(Comments.COLUMN_AUTHOR,accountName);
      p.put(Comments.COLUMN_BODY,body);
      p.put(Comments.COLUMN_KIND,Comments.KIND_COMMENT);
      p.put(Comments.COLUMN_NESTING,CommentLogic.getInsertNesting(this,i));
      p.put(Comments.COLUMN_SEQUENCE,CommentLogic.getInsertSequence(this,i));
      p.put(Comments.COLUMN_SESSION_ID,sessionId);
      p.put(Comments.COLUMN_SESSION_TIMESTAMP,sessionTimestamp);
      values.add(CommentLogic.getInsertPosition(this,i),p);
      size++;
      break;
    }
  }
}","private void insertThing(String actionAccountName,String replyId,String body){
  int size=values.size();
  for (int i=0; i < size; i++) {
    ContentValues v=values.get(i);
    String id=v.getAsString(Comments.COLUMN_THING_ID);
    if (TextUtils.isEmpty(id)) {
      continue;
    }
    if (id.equals(replyId)) {
      ContentValues p=new ContentValues(8);
      p.put(Comments.COLUMN_ACCOUNT,actionAccountName);
      p.put(Comments.COLUMN_AUTHOR,actionAccountName);
      p.put(Comments.COLUMN_BODY,body);
      p.put(Comments.COLUMN_KIND,Comments.KIND_COMMENT);
      p.put(Comments.COLUMN_NESTING,CommentLogic.getInsertNesting(this,i));
      p.put(Comments.COLUMN_SEQUENCE,CommentLogic.getInsertSequence(this,i));
      p.put(Comments.COLUMN_SESSION_ID,sessionId);
      p.put(Comments.COLUMN_SESSION_TIMESTAMP,sessionTimestamp);
      values.add(CommentLogic.getInsertPosition(this,i),p);
      size++;
      break;
    }
  }
}",0.9797703663203936
188102,"private void mergeActions(){
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  Cursor c=db.query(CommentActions.TABLE_NAME,PROJECTION,CommentActions.SELECT_BY_ACCOUNT_AND_PARENT_THING_ID,Array.of(accountName,thingId),null,null,CommentActions.SORT_BY_ID);
  try {
    while (c.moveToNext()) {
      int action=c.getInt(INDEX_ACTION);
      String id=c.getString(INDEX_THING_ID);
      String text=c.getString(INDEX_TEXT);
switch (action) {
case CommentActions.ACTION_INSERT:
        insertThing(id,text);
      break;
case CommentActions.ACTION_DELETE:
    deleteThing(id);
  break;
default :
throw new IllegalStateException();
}
}
}
  finally {
c.close();
}
}","private void mergeActions(){
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  Cursor c=db.query(CommentActions.TABLE_NAME,PROJECTION,CommentActions.SELECT_BY_PARENT_THING_ID,Array.of(thingId),null,null,CommentActions.SORT_BY_ID);
  try {
    while (c.moveToNext()) {
      String actionAccountName=c.getString(INDEX_ACCOUNT_NAME);
      int action=c.getInt(INDEX_ACTION);
      String id=c.getString(INDEX_THING_ID);
      String text=c.getString(INDEX_TEXT);
switch (action) {
case CommentActions.ACTION_INSERT:
        insertThing(actionAccountName,id,text);
      break;
case CommentActions.ACTION_DELETE:
    deleteThing(id);
  break;
default :
throw new IllegalStateException();
}
}
}
  finally {
c.close();
}
}",0.2658959537572254
188103,"@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  try {
    AccountManager manager=AccountManager.get(getContext());
    String cookie=manager.blockingGetAuthToken(account,AccountAuthenticator.AUTH_TOKEN_COOKIE,true);
    String modhash=manager.blockingGetAuthToken(account,AccountAuthenticator.AUTH_TOKEN_MODHASH,true);
    Cursor c=provider.query(CommentProvider.ACTIONS_URI,PROJECTION,CommentActions.SELECT_BY_ACCOUNT,Array.of(account.name),CommentActions.SORT_BY_ID);
    int count=c.getCount();
    long id=-1;
    int action=-1;
    String thingId=null;
    String text=null;
    if (c.moveToNext()) {
      id=c.getLong(INDEX_ID);
      action=c.getInt(INDEX_ACTION);
      thingId=c.getString(INDEX_THING_ID);
      text=c.getString(INDEX_TEXT);
    }
    c.close();
    if (id != -1) {
      try {
        Result result=null;
        if (action == CommentActions.ACTION_INSERT) {
          result=RedditApi.comment(thingId,text,cookie,modhash);
        }
 else         if (action == CommentActions.ACTION_DELETE) {
          result=RedditApi.delete(thingId,cookie,modhash);
        }
        if (BuildConfig.DEBUG) {
          result.logErrors(TAG);
        }
        if (!result.shouldRetry()) {
          syncResult.stats.numDeletes+=provider.delete(CommentProvider.ACTIONS_URI,CommentProvider.ID_SELECTION,Array.of(id));
          count--;
        }
        syncResult.stats.numSkippedEntries+=count;
        long rateLimit=RATE_LIMIT_SECONDS;
        if (result.rateLimit > 0) {
          rateLimit=Math.round(result.rateLimit);
        }
        syncResult.delayUntil=System.currentTimeMillis() / 1000 + rateLimit;
        if (BuildConfig.DEBUG) {
          Log.d(TAG,""String_Node_Str"" + rateLimit + ""String_Node_Str""+ syncResult.delayUntil);
        }
        if (count > 0) {
          if (BuildConfig.DEBUG) {
            Log.d(TAG,""String_Node_Str"" + rateLimit);
          }
          ContentResolver.addPeriodicSync(account,authority,Bundle.EMPTY,rateLimit);
        }
 else {
          if (BuildConfig.DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          ContentResolver.removePeriodicSync(account,authority,Bundle.EMPTY);
        }
      }
 catch (      IOException e) {
        Log.e(TAG,e.getMessage(),e);
        syncResult.stats.numIoExceptions++;
      }
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numAuthExceptions++;
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numAuthExceptions++;
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numIoExceptions++;
  }
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + account.name + ""String_Node_Str""+ syncResult);
  }
}","@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  try {
    AccountManager manager=AccountManager.get(getContext());
    String cookie=manager.blockingGetAuthToken(account,AccountAuthenticator.AUTH_TOKEN_COOKIE,true);
    String modhash=manager.blockingGetAuthToken(account,AccountAuthenticator.AUTH_TOKEN_MODHASH,true);
    Cursor c=provider.query(CommentProvider.ACTIONS_URI,PROJECTION,CommentActions.SELECT_BY_ACCOUNT,Array.of(account.name),CommentActions.SORT_BY_ID);
    int count=c.getCount();
    long id=-1;
    int action=-1;
    String thingId=null;
    String text=null;
    if (c.moveToNext()) {
      id=c.getLong(INDEX_ID);
      action=c.getInt(INDEX_ACTION);
      thingId=c.getString(INDEX_THING_ID);
      text=c.getString(INDEX_TEXT);
    }
    c.close();
    if (id != -1) {
      try {
        Result result=null;
        if (action == CommentActions.ACTION_INSERT) {
          result=RedditApi.comment(thingId,text,cookie,modhash);
        }
 else         if (action == CommentActions.ACTION_DELETE) {
          result=RedditApi.delete(thingId,cookie,modhash);
        }
        if (BuildConfig.DEBUG) {
          result.logAnyErrors(TAG);
        }
        if (!result.shouldRetry()) {
          syncResult.stats.numDeletes+=provider.delete(CommentProvider.ACTIONS_URI,CommentProvider.ID_SELECTION,Array.of(id));
          count--;
        }
        syncResult.stats.numSkippedEntries+=count;
        long rateLimit=RATE_LIMIT_SECONDS;
        if (result.rateLimit > 0) {
          rateLimit=Math.round(result.rateLimit);
        }
        syncResult.delayUntil=System.currentTimeMillis() / 1000 + rateLimit;
        if (BuildConfig.DEBUG) {
          Log.d(TAG,""String_Node_Str"" + rateLimit + ""String_Node_Str""+ syncResult.delayUntil);
        }
        if (count > 0) {
          if (BuildConfig.DEBUG) {
            Log.d(TAG,""String_Node_Str"" + rateLimit);
          }
          ContentResolver.addPeriodicSync(account,authority,Bundle.EMPTY,rateLimit);
        }
 else {
          if (BuildConfig.DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          ContentResolver.removePeriodicSync(account,authority,Bundle.EMPTY);
        }
      }
 catch (      IOException e) {
        Log.e(TAG,e.getMessage(),e);
        syncResult.stats.numIoExceptions++;
      }
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.databaseError=true;
  }
catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numAuthExceptions++;
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numAuthExceptions++;
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
    syncResult.stats.numIoExceptions++;
  }
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + account.name + ""String_Node_Str""+ syncResult);
  }
}",0.9994928148774302
188104,"private void handleFetch(Uri uri,SQLiteDatabase db){
  try {
    long sessionTimestamp=System.currentTimeMillis();
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT);
    String sessionId=uri.getQueryParameter(PARAM_SESSION_ID);
    String query=uri.getQueryParameter(PARAM_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    SubredditSearchListing listing=SubredditSearchListing.get(context,accountName,sessionId,sessionTimestamp,query,cookie);
    long cleaned;
    db.beginTransaction();
    try {
      cleaned=db.delete(SubredditSearches.TABLE_NAME,SubredditSearches.SELECT_BEFORE_TIMESTAMP,Array.of(sessionTimestamp));
      InsertHelper insertHelper=new InsertHelper(db,SubredditSearches.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","private void handleFetch(Uri uri,SQLiteDatabase db){
  try {
    long sessionTimestamp=getSessionTimestamp();
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT);
    String sessionId=uri.getQueryParameter(PARAM_SESSION_ID);
    String query=uri.getQueryParameter(PARAM_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    SubredditSearchListing listing=SubredditSearchListing.get(context,accountName,sessionId,sessionTimestamp,query,cookie);
    long cleaned;
    db.beginTransaction();
    try {
      cleaned=db.delete(SubredditSearches.TABLE_NAME,SubredditSearches.SELECT_BEFORE_TIMESTAMP,Array.of(sessionTimestamp));
      InsertHelper insertHelper=new InsertHelper(db,SubredditSearches.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.9834424335772044
188105,"public static CommentListing get(Context context,SQLiteOpenHelper dbHelper,String accountName,String sessionId,String thingId,String cookie) throws IOException {
  long t1=System.currentTimeMillis();
  URL url=Urls.commentsUrl(thingId);
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  long t2=System.currentTimeMillis();
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    CommentListing listing=new CommentListing(context,dbHelper,accountName,sessionId,t1,thingId);
    listing.parseListingArray(reader);
    if (BuildConfig.DEBUG) {
      long t3=System.currentTimeMillis();
      listing.networkTimeMs=t2 - t1;
      listing.parseTimeMs=t3 - t2;
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}","public static CommentListing get(Context context,SQLiteOpenHelper dbHelper,String accountName,String sessionId,long sessionTimestamp,String thingId,String cookie) throws IOException {
  long t1=System.currentTimeMillis();
  URL url=Urls.commentsUrl(thingId);
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  long t2=System.currentTimeMillis();
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    CommentListing listing=new CommentListing(context,dbHelper,accountName,sessionId,sessionTimestamp,thingId);
    listing.parseListingArray(reader);
    if (BuildConfig.DEBUG) {
      long t3=System.currentTimeMillis();
      listing.networkTimeMs=t2 - t1;
      listing.parseTimeMs=t3 - t2;
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}",0.976958525345622
188106,"private void sync(Uri uri,String sessionId){
  Cursor c=null;
  try {
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT_NAME);
    String thingId=uri.getQueryParameter(PARAM_THING_ID);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    CommentListing listing=CommentListing.get(context,helper,accountName,sessionId,thingId,cookie);
    long cleaned;
    long t1=System.currentTimeMillis();
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(Comments.TABLE_NAME,Comments.SELECTION_BEFORE_TIMESTAMP,Array.of(getCreationTimeCutoff()));
      InsertHelper insertHelper=new InsertHelper(db,Comments.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      long t2=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + listing.networkTimeMs + ""String_Node_Str""+ listing.parseTimeMs+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
}","private void sync(Uri uri,String sessionId){
  try {
    long timestampCutoff=getSessionTimestampCutoff();
    long sessionTimestamp=System.currentTimeMillis();
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT_NAME);
    String thingId=uri.getQueryParameter(PARAM_THING_ID);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    CommentListing listing=CommentListing.get(context,helper,accountName,sessionId,sessionTimestamp,thingId,cookie);
    long cleaned;
    long t1=System.currentTimeMillis();
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(Comments.TABLE_NAME,Comments.SELECTION_BEFORE_TIMESTAMP,Array.of(timestampCutoff));
      InsertHelper insertHelper=new InsertHelper(db,Comments.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      long t2=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + listing.networkTimeMs + ""String_Node_Str""+ listing.parseTimeMs+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.892235609103079
188107,"public static SubredditSearchListing get(Context context,String accountName,String sessionId,String query,String cookie) throws IOException {
  long t1=System.currentTimeMillis();
  URL url=Urls.subredditSearchUrl(query,null);
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    SubredditSearchListing listing=new SubredditSearchListing(accountName,sessionId,t1);
    listing.parseListingObject(reader);
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + url + ""String_Node_Str""+ listing.values.size());
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}","public static SubredditSearchListing get(Context context,String accountName,String sessionId,long sessionTimestamp,String query,String cookie) throws IOException {
  URL url=Urls.subredditSearchUrl(query,null);
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    SubredditSearchListing listing=new SubredditSearchListing(accountName,sessionId,sessionTimestamp);
    listing.parseListingObject(reader);
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + url + ""String_Node_Str""+ listing.values.size());
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}",0.9489528795811518
188108,"private void sync(Uri uri){
  try {
    String accountName=uri.getQueryParameter(SYNC_ACCOUNT);
    String sessionId=uri.getQueryParameter(SYNC_SESSION_ID);
    String query=uri.getQueryParameter(SYNC_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    SubredditSearchListing listing=SubredditSearchListing.get(context,accountName,sessionId,query,cookie);
    long cleaned;
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(SubredditSearches.TABLE_NAME,SubredditSearches.SELECTION_BEFORE_TIMESTAMP,Array.of(getCreationTimeCutoff()));
      InsertHelper insertHelper=new InsertHelper(db,SubredditSearches.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","private void sync(Uri uri){
  try {
    long timestampCutoff=getSessionTimestampCutoff();
    long sessionTimestamp=System.currentTimeMillis();
    String accountName=uri.getQueryParameter(SYNC_ACCOUNT);
    String sessionId=uri.getQueryParameter(SYNC_SESSION_ID);
    String query=uri.getQueryParameter(SYNC_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    SubredditSearchListing listing=SubredditSearchListing.get(context,accountName,sessionId,sessionTimestamp,query,cookie);
    long cleaned;
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(SubredditSearches.TABLE_NAME,SubredditSearches.SELECTION_BEFORE_TIMESTAMP,Array.of(timestampCutoff));
      InsertHelper insertHelper=new InsertHelper(db,SubredditSearches.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + cleaned);
    }
  }
 catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.9080633006782216
188109,"public static ThingListing get(Context context,String accountName,String sessionId,String subredditName,int filter,String more,String query,String cookie) throws IOException {
  long t1=System.currentTimeMillis();
  URL url;
  if (!TextUtils.isEmpty(query)) {
    url=Urls.searchUrl(query,more);
  }
 else {
    url=Urls.subredditUrl(subredditName,filter,more);
  }
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  long t2=System.currentTimeMillis();
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    ThingListing listing=new ThingListing(context,accountName,sessionId,t1);
    listing.parseListingObject(reader);
    if (BuildConfig.DEBUG) {
      long t3=System.currentTimeMillis();
      listing.networkTimeMs=t2 - t1;
      listing.parseTimeMs=t3 - t2;
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}","public static ThingListing get(Context context,String accountName,String sessionId,long sessionTimestamp,String subredditName,int filter,String more,String query,String cookie) throws IOException {
  long t1=System.currentTimeMillis();
  URL url;
  if (!TextUtils.isEmpty(query)) {
    url=Urls.searchUrl(query,more);
  }
 else {
    url=Urls.subredditUrl(subredditName,filter,more);
  }
  HttpURLConnection conn=RedditApi.connect(url,cookie,false);
  InputStream input=new BufferedInputStream(conn.getInputStream());
  long t2=System.currentTimeMillis();
  try {
    JsonReader reader=new JsonReader(new InputStreamReader(input));
    ThingListing listing=new ThingListing(context,accountName,sessionId,sessionTimestamp);
    listing.parseListingObject(reader);
    if (BuildConfig.DEBUG) {
      long t3=System.currentTimeMillis();
      listing.networkTimeMs=t2 - t1;
      listing.parseTimeMs=t3 - t2;
    }
    return listing;
  }
  finally {
    input.close();
    conn.disconnect();
  }
}",0.9795291709314228
188110,"private void sync(Uri uri){
  try {
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT);
    String sessionId=uri.getQueryParameter(PARAM_SESSION_ID);
    String subredditName=uri.getQueryParameter(PARAM_SUBREDDIT);
    int filter=Integer.parseInt(uri.getQueryParameter(PARAM_FILTER));
    String more=uri.getQueryParameter(PARAM_MORE);
    String query=uri.getQueryParameter(PARAM_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    ThingListing listing=ThingListing.get(context,accountName,sessionId,subredditName,filter,more,query,cookie);
    long cleaned;
    long t1=System.currentTimeMillis();
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(Things.TABLE_NAME,Things.SELECTION_BEFORE_TIMESTAMP,Array.of(getCreationTimeCutoff()));
      db.delete(Things.TABLE_NAME,Things.SELECTION_BY_SESSION_ID_AND_MORE,Array.of(sessionId));
      InsertHelper insertHelper=new InsertHelper(db,Things.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      long t2=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + listing.networkTimeMs + ""String_Node_Str""+ listing.parseTimeMs+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ cleaned);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  OperationCanceledException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","private void sync(Uri uri){
  try {
    long timestampCutoff=getSessionTimestampCutoff();
    long sessionTimestamp=System.currentTimeMillis();
    String accountName=uri.getQueryParameter(PARAM_ACCOUNT);
    String sessionId=uri.getQueryParameter(PARAM_SESSION_ID);
    String subredditName=uri.getQueryParameter(PARAM_SUBREDDIT);
    int filter=Integer.parseInt(uri.getQueryParameter(PARAM_FILTER));
    String more=uri.getQueryParameter(PARAM_MORE);
    String query=uri.getQueryParameter(PARAM_QUERY);
    Context context=getContext();
    String cookie=AccountUtils.getCookie(context,accountName);
    ThingListing listing=ThingListing.get(context,accountName,sessionId,sessionTimestamp,subredditName,filter,more,query,cookie);
    long cleaned;
    long t1=System.currentTimeMillis();
    SQLiteDatabase db=helper.getWritableDatabase();
    db.beginTransaction();
    try {
      cleaned=db.delete(Things.TABLE_NAME,Things.SELECTION_BEFORE_TIMESTAMP,Array.of(timestampCutoff));
      db.delete(Things.TABLE_NAME,Things.SELECTION_BY_SESSION_ID_AND_MORE,Array.of(sessionId));
      InsertHelper insertHelper=new InsertHelper(db,Things.TABLE_NAME);
      int count=listing.values.size();
      for (int i=0; i < count; i++) {
        insertHelper.insert(listing.values.get(i));
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    if (BuildConfig.DEBUG) {
      long t2=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + listing.networkTimeMs + ""String_Node_Str""+ listing.parseTimeMs+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ cleaned);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  OperationCanceledException e) {
    Log.e(TAG,e.getMessage(),e);
  }
catch (  AuthenticatorException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.9314606741573034
188111,"@Override public void bindView(View view,Context context,Cursor cursor){
  String author=cursor.getString(INDEX_AUTHOR);
  String body=cursor.getString(INDEX_BODY);
  long createdUtc=cursor.getLong(INDEX_CREATED_UTC);
  int downs=cursor.getInt(INDEX_DOWNS);
  int kind=cursor.getInt(INDEX_KIND);
  int nesting=cursor.getInt(INDEX_NESTING);
  int numComments=cursor.getInt(INDEX_NUM_COMMENTS);
  String title=cursor.getString(INDEX_TITLE);
  String thingId=cursor.getString(INDEX_THING_ID);
  int ups=cursor.getInt(INDEX_UPS);
  int likes=cursor.getInt(INDEX_LIKES);
  int vote=cursor.getInt(INDEX_VOTE);
  if (likes != vote) {
    likes=vote;
  }
  CommentView cv=(CommentView)view;
  cv.setOnVoteListener(listener);
  cv.setData(author,body,createdUtc,downs,kind,likes,nesting,nowTimeMs,numComments,title,thingId,ups);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  String author=cursor.getString(INDEX_AUTHOR);
  String body=cursor.getString(INDEX_BODY);
  long createdUtc=cursor.getLong(INDEX_CREATED_UTC);
  int downs=cursor.getInt(INDEX_DOWNS);
  int kind=cursor.getInt(INDEX_KIND);
  int nesting=cursor.getInt(INDEX_NESTING);
  int numComments=cursor.getInt(INDEX_NUM_COMMENTS);
  String title=cursor.getString(INDEX_TITLE);
  String thingId=cursor.getString(INDEX_THING_ID);
  int ups=cursor.getInt(INDEX_UPS);
  int score=ups - downs;
  int likes=cursor.getInt(INDEX_LIKES);
  if (!cursor.isNull(INDEX_VOTE)) {
    likes=cursor.getInt(INDEX_VOTE);
    score=Math.max(0,score + likes);
  }
  CommentView cv=(CommentView)view;
  cv.setOnVoteListener(listener);
  cv.setData(author,body,createdUtc,kind,likes,nesting,nowTimeMs,numComments,score,title,thingId);
}",0.6945754716981132
188112,"public void setData(String author,String body,long createdUtc,int downs,int kind,int likes,int nesting,long nowTimeMs,int numComments,String title,String thingId,int ups){
  this.likes=likes;
  this.nesting=nesting;
  this.title=title;
  this.thingId=thingId;
  this.scoreText=VotingArrows.getScoreText(ups - downs + likes);
  this.bodyText=FORMATTER.formatSpans(getContext(),body);
  this.statusText=getStatus(getContext(),author,createdUtc,kind,nowTimeMs,numComments);
  requestLayout();
}","public void setData(String author,String body,long createdUtc,int kind,int likes,int nesting,long nowTimeMs,int numComments,int score,String title,String thingId){
  this.likes=likes;
  this.nesting=nesting;
  this.title=title;
  this.thingId=thingId;
  this.scoreText=VotingArrows.getScoreText(score);
  this.bodyText=FORMATTER.formatSpans(getContext(),body);
  this.statusText=getStatus(getContext(),author,createdUtc,kind,nowTimeMs,numComments);
  requestLayout();
}",0.5104166666666666
188113,"@Override public void bindView(View view,Context context,Cursor cursor){
  if (view instanceof ThingView) {
    String author=cursor.getString(INDEX_AUTHOR);
    long createdUtc=cursor.getLong(INDEX_CREATED_UTC);
    String domain=cursor.getString(INDEX_DOMAIN);
    int downs=cursor.getInt(INDEX_DOWNS);
    int numComments=cursor.getInt(INDEX_NUM_COMMENTS);
    boolean over18=cursor.getInt(INDEX_OVER_18) == 1;
    int score=cursor.getInt(INDEX_SCORE);
    String subreddit=cursor.getString(INDEX_SUBREDDIT);
    String thingId=cursor.getString(INDEX_THING_ID);
    String thumbnailUrl=cursor.getString(INDEX_THUMBNAIL_URL);
    String title=cursor.getString(INDEX_TITLE);
    int ups=cursor.getInt(INDEX_UPS);
    int likes=cursor.getInt(INDEX_LIKES);
    int vote=cursor.getInt(INDEX_VOTE);
    if (likes != vote) {
      likes=vote;
    }
    ThingView tv=(ThingView)view;
    tv.setData(author,createdUtc,domain,downs,likes,nowTimeMs,numComments,over18,parentSubreddit,score,subreddit,thingBodyWidth,thingId,thumbnailUrl,title,ups);
    tv.setChosen(singleChoice && Objects.equals(selectedThingId,thingId));
    tv.setOnVoteListener(listener);
    thumbnailLoader.setThumbnail(context,tv,thumbnailUrl);
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  if (view instanceof ThingView) {
    String author=cursor.getString(INDEX_AUTHOR);
    long createdUtc=cursor.getLong(INDEX_CREATED_UTC);
    String domain=cursor.getString(INDEX_DOMAIN);
    int downs=cursor.getInt(INDEX_DOWNS);
    int numComments=cursor.getInt(INDEX_NUM_COMMENTS);
    boolean over18=cursor.getInt(INDEX_OVER_18) == 1;
    int score=cursor.getInt(INDEX_SCORE);
    String subreddit=cursor.getString(INDEX_SUBREDDIT);
    String thingId=cursor.getString(INDEX_THING_ID);
    String thumbnailUrl=cursor.getString(INDEX_THUMBNAIL_URL);
    String title=cursor.getString(INDEX_TITLE);
    int ups=cursor.getInt(INDEX_UPS);
    int likes=cursor.getInt(INDEX_LIKES);
    if (!cursor.isNull(INDEX_VOTE)) {
      likes=cursor.getInt(INDEX_VOTE);
      score=Math.max(0,score + likes);
    }
    ThingView tv=(ThingView)view;
    tv.setData(author,createdUtc,domain,downs,likes,nowTimeMs,numComments,over18,parentSubreddit,score,subreddit,thingBodyWidth,thingId,thumbnailUrl,title,ups);
    tv.setChosen(singleChoice && Objects.equals(selectedThingId,thingId));
    tv.setOnVoteListener(listener);
    thumbnailLoader.setThumbnail(context,tv,thumbnailUrl);
  }
}",0.9435647584246852
188114,"public void setData(String author,long createdUtc,String domain,int downs,int likes,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.likes=likes;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  this.scoreText=VotingArrows.getScoreText(score + likes);
  this.statusText=getStatusText(getContext(),author,createdUtc,nowTimeMs,numComments,over18,parentSubreddit,subreddit);
  this.longDetailsText=getContext().getString(R.string.thing_details,ups,downs,domain);
  this.shortDetailsText=domain;
  requestLayout();
}","public void setData(String author,long createdUtc,String domain,int downs,int likes,long nowTimeMs,int numComments,boolean over18,String parentSubreddit,int score,String subreddit,int thingBodyWidth,String thingId,String thumbnailUrl,String title,int ups){
  this.likes=likes;
  this.thingBodyWidth=thingBodyWidth;
  this.thingId=thingId;
  this.thumbnailUrl=thumbnailUrl;
  this.title=title;
  this.scoreText=VotingArrows.getScoreText(score);
  this.statusText=getStatusText(getContext(),author,createdUtc,nowTimeMs,numComments,over18,parentSubreddit,subreddit);
  this.longDetailsText=getContext().getString(R.string.thing_details,ups,downs,domain);
  this.shortDetailsText=domain;
  requestLayout();
}",0.9943502824858758
188115,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    accountName=getArguments().getString(ARG_ACCOUNT_NAME);
    selectedSubreddit=getArguments().getString(ARG_SELECTED_SUBREDDIT);
    if (!TextUtils.isEmpty(query)) {
      sessionId=query + ""String_Node_Str"" + System.currentTimeMillis();
    }
  }
 else {
    accountName=savedInstanceState.getString(STATE_ACCOUNT_NAME);
    selectedSubreddit=savedInstanceState.getString(STATE_SELECTED_SUBREDDIT);
    sessionId=savedInstanceState.getString(STATE_SESSION_ID);
  }
  query=getArguments().getString(ARG_QUERY);
  sync=savedInstanceState == null;
  int flags=getArguments().getInt(ARG_FLAGS);
  singleChoice=Flag.isEnabled(flags,FLAG_SINGLE_CHOICE);
  adapter=new SubredditAdapter(getActivity(),query,singleChoice);
  adapter.setSelectedSubreddit(selectedSubreddit);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  query=getArguments().getString(ARG_QUERY);
  sync=savedInstanceState == null;
  if (savedInstanceState == null) {
    accountName=getArguments().getString(ARG_ACCOUNT_NAME);
    selectedSubreddit=getArguments().getString(ARG_SELECTED_SUBREDDIT);
    if (!TextUtils.isEmpty(query)) {
      sessionId=query + ""String_Node_Str"" + System.currentTimeMillis();
    }
  }
 else {
    accountName=savedInstanceState.getString(STATE_ACCOUNT_NAME);
    selectedSubreddit=savedInstanceState.getString(STATE_SELECTED_SUBREDDIT);
    sessionId=savedInstanceState.getString(STATE_SESSION_ID);
  }
  int flags=getArguments().getInt(ARG_FLAGS);
  singleChoice=Flag.isEnabled(flags,FLAG_SINGLE_CHOICE);
  adapter=new SubredditAdapter(getActivity(),query,singleChoice);
  adapter.setSelectedSubreddit(selectedSubreddit);
}",0.91140642303433
188116,"public void loadIfPossible(){
  if (accountName != null && (subreddit != null || query != null)) {
    getLoaderManager().initLoader(0,null,this);
  }
}","public void loadIfPossible(){
  if (accountName != null && sessionId != null && (subreddit != null || query != null)) {
    getLoaderManager().initLoader(0,null,this);
  }
}",0.9353846153846154
188117,"public void setSubreddit(String subreddit){
  this.subreddit=subreddit;
}","public void setSubreddit(String subreddit){
  if (!Objects.equalsIgnoreCase(this.subreddit,subreddit)) {
    this.subreddit=subreddit;
    this.sessionId=createSessionId();
  }
}",0.5816733067729084
188118,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    accountName=getArguments().getString(ARG_ACCOUNT_NAME);
    subreddit=getArguments().getString(ARG_SUBREDDIT);
    if (!TextUtils.isEmpty(query)) {
      sessionId=query + ""String_Node_Str"" + System.currentTimeMillis();
    }
 else {
      sessionId=subreddit + ""String_Node_Str"" + System.currentTimeMillis();
    }
  }
 else {
    accountName=savedInstanceState.getString(STATE_ACCOUNT_NAME);
    subreddit=savedInstanceState.getString(STATE_SUBREDDIT);
    selectedThingId=savedInstanceState.getString(STATE_SELECTED_THING_ID);
    sessionId=savedInstanceState.getString(STATE_SESSION_ID);
  }
  filter=getArguments().getInt(ARG_FILTER);
  query=getArguments().getString(ARG_QUERY);
  sync=savedInstanceState == null;
  int flags=getArguments().getInt(ARG_FLAGS);
  boolean singleChoice=Flag.isEnabled(flags,FLAG_SINGLE_CHOICE);
  adapter=new ThingAdapter(getActivity(),subreddit,this,singleChoice);
  adapter.setSelectedThing(selectedThingId);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  filter=getArguments().getInt(ARG_FILTER);
  query=getArguments().getString(ARG_QUERY);
  sync=savedInstanceState == null;
  if (savedInstanceState == null) {
    accountName=getArguments().getString(ARG_ACCOUNT_NAME);
    subreddit=getArguments().getString(ARG_SUBREDDIT);
    sessionId=createSessionId();
  }
 else {
    accountName=savedInstanceState.getString(STATE_ACCOUNT_NAME);
    subreddit=savedInstanceState.getString(STATE_SUBREDDIT);
    selectedThingId=savedInstanceState.getString(STATE_SELECTED_THING_ID);
    sessionId=savedInstanceState.getString(STATE_SESSION_ID);
  }
  int flags=getArguments().getInt(ARG_FLAGS);
  boolean singleChoice=Flag.isEnabled(flags,FLAG_SINGLE_CHOICE);
  adapter=new ThingAdapter(getActivity(),subreddit,this,singleChoice);
  adapter.setSelectedThing(selectedThingId);
  setHasOptionsMenu(true);
}",0.7680311890838206
188119,"public static Uri createUri(String accountName,String sessionId,String subredditName,int filter,String more,String query,boolean sync){
  Uri.Builder b=ThingProvider.CONTENT_URI.buildUpon().appendQueryParameter(ThingProvider.PARAM_ACCOUNT,accountName).appendQueryParameter(ThingProvider.PARAM_SESSION_ID,sessionId).appendQueryParameter(ThingProvider.PARAM_SUBREDDIT,subredditName).appendQueryParameter(ThingProvider.PARAM_FILTER,Integer.toString(filter)).appendQueryParameter(ThingProvider.PARAM_QUERY,query).appendQueryParameter(ThingProvider.PARAM_SYNC,Boolean.toString(sync));
  if (!TextUtils.isEmpty(more)) {
    b.appendQueryParameter(ThingProvider.PARAM_MORE,more);
  }
  return b.build();
}","public static Uri createUri(String accountName,String sessionId,String subredditName,int filter,String more,String query,boolean sync){
  Uri.Builder b=ThingProvider.CONTENT_URI.buildUpon().appendQueryParameter(ThingProvider.PARAM_SYNC,Boolean.toString(sync)).appendQueryParameter(ThingProvider.PARAM_ACCOUNT,accountName).appendQueryParameter(ThingProvider.PARAM_SESSION_ID,sessionId).appendQueryParameter(ThingProvider.PARAM_SUBREDDIT,subredditName).appendQueryParameter(ThingProvider.PARAM_FILTER,Integer.toString(filter));
  if (!TextUtils.isEmpty(query)) {
    b.appendQueryParameter(ThingProvider.PARAM_QUERY,query);
  }
  if (!TextUtils.isEmpty(more)) {
    b.appendQueryParameter(ThingProvider.PARAM_MORE,more);
  }
  return b.build();
}",0.871012482662968
188120,"public String getMoreThingId(){
  Cursor c=getCursor();
  if (c != null && c.moveToLast()) {
    initColumnIndices(c);
    return c.getString(INDEX_THING_ID);
  }
  return null;
}","public String getMoreThingId(){
  Cursor c=getCursor();
  if (c != null && c.moveToLast()) {
    initColumnIndices(c);
    if (c.getInt(INDEX_KIND) == Things.KIND_MORE) {
      return c.getString(INDEX_THING_ID);
    }
  }
  return null;
}",0.7081339712918661
188121,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int measuredWidth=0;
  int measuredHeight=0;
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
switch (widthMode) {
case MeasureSpec.AT_MOST:
case MeasureSpec.EXACTLY:
    measuredWidth=widthSize;
  break;
case MeasureSpec.UNSPECIFIED:
measuredWidth=getSuggestedMinimumWidth();
break;
}
scoreText=VotingArrows.getScoreText(score + likes);
VotingArrows.measureScoreText(scoreText,scoreBounds);
int titleWidth;
int detailsWidth;
CharSequence detailsText;
if (thingBodyWidth > 0) {
titleWidth=Math.min(measuredWidth,thingBodyWidth) - PADDING * 2;
int remainingWidth=measuredWidth - thingBodyWidth - PADDING * 2;
if (remainingWidth > MAX_DETAILS_WIDTH) {
detailsWidth=MAX_DETAILS_WIDTH;
detailsText=""String_Node_Str"";
}
 else if (remainingWidth > MIN_DETAILS_WIDTH) {
detailsWidth=MIN_DETAILS_WIDTH;
detailsText=domain;
}
 else {
detailsWidth=0;
detailsText=""String_Node_Str"";
}
}
 else {
titleWidth=measuredWidth - PADDING * 2;
detailsWidth=0;
detailsText=""String_Node_Str"";
}
int width=VotingArrows.getWidth();
if (!TextUtils.isEmpty(thumbnailUrl)) {
width+=PADDING + Thumbnail.getWidth();
}
width+=PADDING;
titleWidth-=width;
int statusWidth=measuredWidth - PADDING * 2;
statusWidth-=width;
if (detailsWidth > 0) {
statusWidth-=detailsWidth + PADDING;
titleWidth-=width;
}
titleWidth=Math.max(0,titleWidth);
statusWidth=Math.max(0,statusWidth);
detailsWidth=Math.max(0,detailsWidth);
titleLayout=makeTitleLayout(titleWidth);
statusLayout=makeLayout(TEXT_STATUS,makeStatusText(),statusWidth,Alignment.ALIGN_NORMAL);
if (detailsWidth > 0) {
detailsLayout=makeLayout(TEXT_STATUS,detailsText,detailsWidth,Alignment.ALIGN_OPPOSITE);
}
 else {
detailsLayout=null;
}
int leftHeight=VotingArrows.getHeight();
rightHeight=titleLayout.getHeight() + ELEMENT_PADDING + statusLayout.getHeight();
minHeight=PADDING + Math.max(leftHeight,rightHeight) + PADDING;
int heightMode=MeasureSpec.getMode(heightMeasureSpec);
int heightSize=MeasureSpec.getSize(heightMeasureSpec);
switch (heightMode) {
case MeasureSpec.AT_MOST:
case MeasureSpec.EXACTLY:
measuredHeight=heightSize;
break;
case MeasureSpec.UNSPECIFIED:
measuredHeight=minHeight;
break;
}
setMeasuredDimension(measuredWidth,measuredHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int measuredWidth=0;
  int measuredHeight=0;
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
switch (widthMode) {
case MeasureSpec.AT_MOST:
case MeasureSpec.EXACTLY:
    measuredWidth=widthSize;
  break;
case MeasureSpec.UNSPECIFIED:
measuredWidth=getSuggestedMinimumWidth();
break;
}
scoreText=VotingArrows.getScoreText(score + likes);
VotingArrows.measureScoreText(scoreText,scoreBounds);
int titleWidth;
int detailsWidth;
CharSequence detailsText;
if (thingBodyWidth > 0) {
titleWidth=Math.min(measuredWidth,thingBodyWidth) - PADDING * 2;
int remainingWidth=measuredWidth - thingBodyWidth - PADDING * 2;
if (remainingWidth > MAX_DETAILS_WIDTH) {
detailsWidth=MAX_DETAILS_WIDTH;
detailsText=""String_Node_Str"";
}
 else if (remainingWidth > MIN_DETAILS_WIDTH) {
detailsWidth=MIN_DETAILS_WIDTH;
detailsText=domain;
}
 else {
detailsWidth=0;
detailsText=""String_Node_Str"";
}
}
 else {
titleWidth=measuredWidth - PADDING * 2;
detailsWidth=0;
detailsText=""String_Node_Str"";
}
int width=VotingArrows.getWidth() + PADDING;
if (!TextUtils.isEmpty(thumbnailUrl)) {
width+=PADDING + Thumbnail.getWidth();
}
titleWidth-=width;
int statusWidth=measuredWidth - PADDING * 2;
statusWidth-=width;
if (detailsWidth > 0) {
statusWidth-=detailsWidth + PADDING;
}
titleWidth=Math.max(0,titleWidth);
statusWidth=Math.max(0,statusWidth);
detailsWidth=Math.max(0,detailsWidth);
titleLayout=makeTitleLayout(titleWidth);
statusLayout=makeLayout(TEXT_STATUS,makeStatusText(),statusWidth,Alignment.ALIGN_NORMAL);
if (detailsWidth > 0) {
detailsLayout=makeLayout(TEXT_STATUS,detailsText,detailsWidth,Alignment.ALIGN_OPPOSITE);
}
 else {
detailsLayout=null;
}
int leftHeight=VotingArrows.getHeight();
rightHeight=titleLayout.getHeight() + ELEMENT_PADDING + statusLayout.getHeight();
minHeight=PADDING + Math.max(leftHeight,rightHeight) + PADDING;
int heightMode=MeasureSpec.getMode(heightMeasureSpec);
int heightSize=MeasureSpec.getSize(heightMeasureSpec);
switch (heightMode) {
case MeasureSpec.AT_MOST:
case MeasureSpec.EXACTLY:
measuredHeight=heightSize;
break;
case MeasureSpec.UNSPECIFIED:
measuredHeight=minHeight;
break;
}
setMeasuredDimension(measuredWidth,measuredHeight);
}",0.9682024659312136
188122,"@Override protected void onDraw(Canvas c){
  boolean hasThumb=!TextUtils.isEmpty(thumbnailUrl);
  c.translate(PADDING,PADDING);
  VotingArrows.draw(c,bitmap,hasThumb,scoreText,scoreBounds,likes);
  c.translate(VotingArrows.getWidth() + PADDING,0);
  if (hasThumb) {
    Thumbnail.draw(c,bitmap);
    c.translate(Thumbnail.getWidth() + PADDING,0);
  }
  int tdy=(minHeight - rightHeight) / 2;
  c.translate(0,-PADDING + tdy);
  titleLayout.draw(c);
  int sdy=titleLayout.getHeight() + ELEMENT_PADDING;
  c.translate(0,sdy);
  statusLayout.draw(c);
  c.translate(0,-sdy - tdy);
  if (detailsLayout != null) {
    int dx=c.getWidth() - PADDING - detailsLayout.getWidth();
    int dy=(c.getHeight() - detailsLayout.getHeight()) / 2;
    c.translate(dx,dy);
    detailsLayout.draw(c);
    c.translate(-dx,-dy);
  }
}","@Override protected void onDraw(Canvas c){
  if (detailsLayout != null) {
    int dx=c.getWidth() - PADDING - detailsLayout.getWidth();
    int dy=(c.getHeight() - detailsLayout.getHeight()) / 2;
    c.translate(dx,dy);
    detailsLayout.draw(c);
    c.translate(-dx,-dy);
  }
  boolean hasThumb=!TextUtils.isEmpty(thumbnailUrl);
  c.translate(PADDING,PADDING);
  VotingArrows.draw(c,bitmap,hasThumb,scoreText,scoreBounds,likes);
  c.translate(VotingArrows.getWidth() + PADDING,0);
  if (hasThumb) {
    Thumbnail.draw(c,bitmap);
    c.translate(Thumbnail.getWidth() + PADDING,0);
  }
  int tdy=(minHeight - rightHeight) / 2;
  c.translate(0,-PADDING + tdy);
  titleLayout.draw(c);
  int sdy=titleLayout.getHeight() + ELEMENT_PADDING;
  c.translate(0,sdy);
  statusLayout.draw(c);
  c.translate(0,-sdy - tdy);
}",0.7114673242909988
188123,"protected void selectThingMultiPane(Thing thing,int thingPosition){
  getFragmentManager().popBackStack();
  ControlFragment cf=getControlFragment();
  cf=ControlFragment.newInstance(cf.getSubreddit(),thing,thingPosition,0);
  ThingMenuFragment tf=ThingMenuFragment.newInstance(thing);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.add(cf,ControlFragment.TAG);
  ft.add(tf,ThingMenuFragment.TAG);
  ft.addToBackStack(null);
  ft.commit();
  ThingPagerAdapter adapter=new ThingPagerAdapter(getFragmentManager(),thing);
  thingPager.setAdapter(adapter);
}","protected void selectThingMultiPane(Thing thing,int thingPosition){
  getFragmentManager().popBackStack();
  ControlFragment cf=getControlFragment();
  cf=ControlFragment.newInstance(cf.getSubreddit(),thing,thingPosition,0);
  ThingMenuFragment tf=ThingMenuFragment.newInstance(thing);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.add(cf,ControlFragment.TAG);
  ft.add(tf,ThingMenuFragment.TAG);
  ft.addToBackStack(null);
  ft.commit();
  refreshThingPager(thing);
}",0.896358543417367
188124,"public void onBackStackChanged(){
  boolean hasThing=getThingMenuFragment() != null;
  bar.setDisplayHomeAsUpEnabled(hasThing);
  thingPager.setVisibility(hasThing ? View.VISIBLE : View.GONE);
  ControlFragment cf=getControlFragment();
  ThingListFragment tlf=getThingListFragment();
  tlf.setSelectedThing(cf.getThing(),cf.getThingPosition());
}","public void onBackStackChanged(){
  refresh();
}",0.2182741116751269
188125,"public void onLoadFinished(Loader<AccountResult> loader,AccountResult result){
  if (Debug.DEBUG_LOADERS) {
    Log.d(TAG,""String_Node_Str"" + result.selectedAccount);
  }
  adapter.setAccountNames(result.accountNames);
  bar.setSelectedNavigationItem(result.selectedAccount);
}","public void onLoadFinished(Loader<AccountResult> loader,AccountResult result){
  adapter.setAccountNames(result.accountNames);
  prefs=result.prefs;
  int index=AccountLoader.getLastAccountIndex(prefs,result.accountNames);
  bar.setSelectedNavigationItem(index);
}",0.3142329020332717
188126,"public void onLoaderReset(Loader<AccountResult> loader){
  if (Debug.DEBUG_LOADERS) {
    Log.d(TAG,""String_Node_Str"" + loader.getId() + ""String_Node_Str"");
  }
  adapter.setAccountNames(null);
}","public void onLoaderReset(Loader<AccountResult> loader){
  adapter.setAccountNames(null);
}",0.6363636363636364
188127,"public boolean onNavigationItemSelected(int itemPosition,long itemId){
  if (Debug.DEBUG_ACTIVITY) {
    Log.d(TAG,""String_Node_Str"" + itemPosition + ""String_Node_Str"");
  }
  String accountName=adapter.getItem(itemPosition);
  AccountLoader.setLastAccount(this,accountName);
  SubredditListFragment slf=SubredditListFragment.newInstance(null,accountName,0);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.single_container,slf,SubredditListFragment.TAG);
  ft.commit();
  return true;
}","public boolean onNavigationItemSelected(int itemPosition,long itemId){
  if (Debug.DEBUG_ACTIVITY) {
    Log.d(TAG,""String_Node_Str"" + itemPosition);
  }
  String accountName=adapter.getItem(itemPosition);
  AccountLoader.setLastAccount(prefs,accountName);
  SubredditListFragment slf=SubredditListFragment.newInstance(null,accountName,0);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.single_container,slf,SubredditListFragment.TAG);
  ft.commit();
  return true;
}",0.928919182083739
188128,"@Override public AccountResult loadInBackground(){
  if (Debug.DEBUG_LOADERS) {
    Log.d(TAG,""String_Node_Str"" + getId());
  }
  Context context=getContext();
  Account[] accounts=manager.getAccountsByType(AccountAuthenticator.getAccountType(context));
  Arrays.sort(accounts,ACCOUNT_COMPARATOR);
  String[] accountNames=new String[accounts.length + 1];
  accountNames[0]=Subreddits.ACCOUNT_NONE;
  for (int i=0; i < accounts.length; i++) {
    accountNames[i + 1]=accounts[i].name;
  }
  int selectedAccount=0;
  String lastAccount=prefs.getString(PREF_LAST_ACCOUNT,null);
  Log.d(TAG,""String_Node_Str"" + lastAccount);
  for (int i=0; i < accountNames.length; i++) {
    if (accountNames[i].equals(lastAccount)) {
      selectedAccount=i;
      break;
    }
  }
  return new AccountResult(accountNames,selectedAccount);
}","@Override public AccountResult loadInBackground(){
  if (Debug.DEBUG_LOADERS) {
    Log.d(TAG,""String_Node_Str"" + getId());
  }
  Context context=getContext();
  Account[] accounts=manager.getAccountsByType(AccountAuthenticator.getAccountType(context));
  Arrays.sort(accounts,ACCOUNT_COMPARATOR);
  String[] accountNames=new String[accounts.length + 1];
  accountNames[0]=Subreddits.ACCOUNT_NONE;
  for (int i=0; i < accounts.length; i++) {
    accountNames[i + 1]=accounts[i].name;
  }
  prefs.getString(PREF_LAST_ACCOUNT,null);
  return new AccountResult(accountNames,prefs);
}",0.7640769779044904
188129,"private AccountResult(String[] accountNames,int selectedAccount){
  this.accountNames=accountNames;
  this.selectedAccount=selectedAccount;
}","private AccountResult(String[] accountNames,SharedPreferences prefs){
  this.accountNames=accountNames;
  this.prefs=prefs;
}",0.7293233082706767
188130,"public static void setLastAccount(Context context,String name){
  SharedPreferences prefs=context.getSharedPreferences(PREFS,0);
  Editor editor=prefs.edit();
  editor.putString(AccountLoader.PREF_LAST_ACCOUNT,name);
  editor.apply();
}","public static void setLastAccount(SharedPreferences prefs,String accountName){
  Editor editor=prefs.edit();
  editor.putString(AccountLoader.PREF_LAST_ACCOUNT,accountName);
  editor.apply();
}",0.7972027972027972
188131,"private static void deleteSubreddit(ArrayList<Subreddit> subreddits,String name){
  int count=subreddits.size();
  for (int i=0; i < count; i++) {
    String subreddit=subreddits.get(i).name;
    if (name.equalsIgnoreCase(subreddit)) {
      subreddits.remove(i);
      return;
    }
  }
}","private static boolean deleteSubreddit(ArrayList<Subreddit> subreddits,String name){
  int count=subreddits.size();
  for (int i=0; i < count; i++) {
    String subreddit=subreddits.get(i).name;
    if (name.equalsIgnoreCase(subreddit)) {
      subreddits.remove(i);
      return true;
    }
  }
  return false;
}",0.946843853820598
188132,"static Cursor query(SQLiteDatabase db,long accountId){
  String[] credentials=getCredentials(db,accountId);
  ArrayList<Subreddit> subreddits=null;
  try {
    subreddits=NetApi.query(credentials[INDEX_COOKIE]);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return null;
  }
  Cursor c=db.query(AccountSubreddits.TABLE_NAME,ACCOUNT_SUBREDDITS_PROJECTION,AccountSubreddits.ACCOUNT_ID_SELECTION,new String[]{Long.toString(accountId)},null,null,null);
  while (c.moveToNext()) {
    String name=c.getString(INDEX_NAME);
switch (c.getInt(INDEX_TYPE)) {
case AccountSubreddits.TYPE_INSERT:
      insertSubreddit(subreddits,name);
    break;
case AccountSubreddits.TYPE_DELETE:
  deleteSubreddit(subreddits,name);
break;
default :
throw new IllegalStateException();
}
}
c.close();
return new SubredditCursor(subreddits);
}","static Cursor query(Uri uri,SQLiteDatabase db){
  List<String> segments=uri.getPathSegments();
  long accountId=Long.parseLong(segments.get(1));
  String[] credentials=Credentials.getCredentials(db,accountId);
  ArrayList<Subreddit> subreddits=null;
  try {
    subreddits=NetApi.query(credentials[0]);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return null;
  }
  Cursor c=db.query(SyncTasks.TABLE_NAME,SYNC_TASKS_PROJECTION,SELECTION,new String[]{Long.toString(accountId)},null,null,SORT);
  boolean modified=false;
  while (c.moveToNext()) {
    String name=c.getString(INDEX_NAME);
switch (c.getInt(INDEX_TYPE)) {
case SyncTasks.TYPE_INSERT:
      modified|=insertSubreddit(subreddits,name);
    break;
case SyncTasks.TYPE_DELETE:
  deleteSubreddit(subreddits,name);
break;
default :
throw new IllegalStateException();
}
}
c.close();
if (modified) {
Collections.sort(subreddits);
}
return new SubredditCursor(subreddits);
}",0.765033407572383
188133,"private static void queueSubscription(Context context,SQLiteDatabase db,long accountId,String subreddit,boolean subscribe){
  String[] credentials=getCredentials(db,accountId);
  Intent intent=new Intent(context,SyncService.class);
  intent.putExtra(SyncService.EXTRA_COOKIE,credentials[INDEX_COOKIE]);
  intent.putExtra(SyncService.EXTRA_MODHASH,credentials[INDEX_MODHASH]);
  intent.putExtra(SyncService.EXTRA_SUBREDDIT,subreddit);
  intent.putExtra(SyncService.EXTRA_SUBSCRIBE,subscribe);
  context.startService(intent);
}","private static void queueSubscription(Context context,long accountId,String subreddit,boolean subscribe){
  ContentValues values=new ContentValues(3);
  values.put(SyncTasks.COLUMN_ACCOUNT_ID,accountId);
  values.put(SyncTasks.COLUMN_NAME,subreddit);
  values.put(SyncTasks.COLUMN_TYPE,subscribe ? SyncTasks.TYPE_INSERT : SyncTasks.TYPE_DELETE);
  ContentResolver cr=context.getContentResolver();
  Uri taskUri=cr.insert(SyncTasks.CONTENT_URI,values);
  Intent intent=new Intent(context,SyncService.class);
  intent.setData(taskUri);
  context.startService(intent);
}",0.2765567765567766
188134,"static int insert(Context context,SQLiteDatabase db,long accountId,String subreddit){
  ContentValues values=new ContentValues(4);
  values.put(AccountSubreddits.COLUMN_ACCOUNT_ID,accountId);
  values.put(AccountSubreddits.COLUMN_NAME,subreddit);
  values.put(AccountSubreddits.COLUMN_TYPE,AccountSubreddits.TYPE_INSERT);
  values.put(AccountSubreddits.COLUMN_CREATION_TIME,System.currentTimeMillis());
  db.insert(AccountSubreddits.TABLE_NAME,null,values);
  queueSubscription(context,db,accountId,subreddit,true);
  return 0;
}","static int insert(Context context,long accountId,String subreddit){
  queueSubscription(context,accountId,subreddit,true);
  return 0;
}",0.4090225563909774
188135,"private static void insertSubreddit(ArrayList<Subreddit> subreddits,String name){
  int count=subreddits.size();
  for (int i=0; i < count; i++) {
    String subreddit=subreddits.get(i).name;
    if (name.equalsIgnoreCase(subreddit)) {
      return;
    }
  }
  subreddits.add(Subreddit.newInstance(name));
}","private static boolean insertSubreddit(ArrayList<Subreddit> subreddits,String name){
  int count=subreddits.size();
  for (int i=0; i < count; i++) {
    String subreddit=subreddits.get(i).name;
    if (name.equalsIgnoreCase(subreddit)) {
      return false;
    }
  }
  subreddits.add(Subreddit.newInstance(name));
  return true;
}",0.95
188136,"static int delete(Context context,SQLiteDatabase db,long accountId,String subreddit){
  ContentValues values=new ContentValues(4);
  values.put(AccountSubreddits.COLUMN_ACCOUNT_ID,accountId);
  values.put(AccountSubreddits.COLUMN_NAME,subreddit);
  values.put(AccountSubreddits.COLUMN_TYPE,AccountSubreddits.TYPE_DELETE);
  values.put(AccountSubreddits.COLUMN_CREATION_TIME,System.currentTimeMillis());
  db.insert(AccountSubreddits.TABLE_NAME,null,values);
  queueSubscription(context,db,accountId,subreddit,false);
  return 1;
}","static int delete(Context context,long accountId,String subreddit){
  queueSubscription(context,accountId,subreddit,false);
  return 1;
}",0.4107946026986507
188137,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.thing_list);
  bar=getActionBar();
  bar.setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_HOME_AS_UP);
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  subreddit=getIntent().getParcelableExtra(EXTRA_SUBREDDIT);
  int flags=getIntent().getIntExtra(EXTRA_FLAGS,0);
  insertHome=Flag.isEnabled(flags,FLAG_INSERT_HOME);
  if (Flag.isEnabled(flags,FLAG_SHOW_ADD_ACTION)) {
    tlfFlags|=ThingListFragment.FLAG_SHOW_ADD_ACTION;
  }
  navigationListenerDisabled=true;
  FilterAdapter adapter=new FilterAdapter(this);
  adapter.setTitle(subreddit.getTitle(this));
  bar.setListNavigationCallbacks(adapter,this);
  if (savedInstanceState != null) {
    bar.setSelectedNavigationItem(savedInstanceState.getInt(STATE_FILTER));
  }
  navigationListenerDisabled=false;
  if (savedInstanceState == null) {
    updateFragments(FilterAdapter.FILTER_HOT,true);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.thing_list);
  bar=getActionBar();
  bar.setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_HOME_AS_UP);
  bar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  subreddit=getIntent().getParcelableExtra(EXTRA_SUBREDDIT);
  int flags=getIntent().getIntExtra(EXTRA_FLAGS,0);
  insertHome=Flag.isEnabled(flags,FLAG_INSERT_HOME);
  if (Flag.isEnabled(flags,FLAG_SHOW_ADD_ACTION)) {
    tlfFlags|=ThingListFragment.FLAG_SHOW_ADD_ACTION;
  }
  FilterAdapter adapter=new FilterAdapter(this);
  adapter.setTitle(subreddit.getTitle(this));
  bar.setListNavigationCallbacks(adapter,this);
  if (savedInstanceState != null) {
    restoringState=true;
    bar.setSelectedNavigationItem(savedInstanceState.getInt(STATE_FILTER));
  }
}",0.8992497320471597
188138,"public boolean onNavigationItemSelected(int itemPosition,long itemId){
  if (navigationListenerDisabled) {
    return true;
  }
  updateFragments((int)itemId,false);
  return true;
}","public boolean onNavigationItemSelected(int itemPosition,long itemId){
  if (restoringState) {
    restoringState=false;
    return true;
  }
  replaceFragments((int)itemId,false);
  return true;
}",0.8337730870712401
188139,"private void updateThingPager(Thing thing){
  if (thing != null) {
    FragmentManager fm=getFragmentManager();
    ThingPagerAdapter adapter=new ThingPagerAdapter(fm,thing);
    thingPager.setAdapter(adapter);
    thingPager.setCurrentItem(0);
  }
 else {
    thingPager.setAdapter(null);
  }
}","private void updateThingPager(Thing thing){
  if (thing != null) {
    FragmentManager fm=getFragmentManager();
    ThingPagerAdapter adapter=new ThingPagerAdapter(fm,thing);
    thingPager.setAdapter(adapter);
  }
 else {
    thingPager.setAdapter(null);
  }
}",0.8561151079136691
188140,"private static int findOpeningParen(CharSequence s,char c,int start){
  boolean spaceFound=false;
  int len=s.length();
  for (int i=start; i < len; i++) {
    char ch=s.charAt(i);
    if (ch == c) {
      return i;
    }
 else     if (ch == ' ') {
      if (spaceFound) {
        break;
      }
      spaceFound=true;
    }
 else {
      break;
    }
  }
  return -1;
}","private static int findOpeningParen(CharSequence s,char c,int start){
  boolean spaceFound=false;
  int len=s.length();
  for (int i=start; i < len; i++) {
    char ch=s.charAt(i);
    if (ch == c) {
      return i;
    }
 else     if (ch == ' ' || ch == '\n') {
      if (spaceFound) {
        break;
      }
      spaceFound=true;
    }
 else {
      break;
    }
  }
  return -1;
}",0.9814323607427056
188141,"public void testFormat_nestedBrackets(){
  CharSequence cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,6,""String_Node_Str"");
}","public void testFormat_nestedBrackets(){
  CharSequence cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,6,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  assertUrlSpan(cs,4,7,""String_Node_Str"");
}",0.6833333333333333
188142,"public void testFormat(){
  CharSequence cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
}","public void testFormat(){
  CharSequence cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
  cs=assertNamedLinksFormat(""String_Node_Str"",""String_Node_Str"");
  assertUrlSpan(cs,0,3,""String_Node_Str"");
}",0.8706998813760379
188143,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_subreddits);
  manager=getFragmentManager();
  manager.addOnBackStackChangedListener(this);
  bar=getActionBar();
  bar.setDisplayHomeAsUpEnabled(true);
  bar.setDisplayShowTitleEnabled(false);
  bar.setDisplayShowCustomEnabled(true);
  bar.setCustomView(R.layout.subreddits_search);
  sv=(SearchView)bar.getCustomView();
  sv.setOnQueryTextListener(this);
  singleContainer=findViewById(R.id.single_container);
  if (savedInstanceState == null) {
    String q=getIntent().getStringExtra(EXTRA_QUERY);
    if (q != null && !q.trim().isEmpty()) {
      sv.setQuery(q.trim(),true);
      sv.setFocusable(false);
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_subreddits);
  manager=getFragmentManager();
  manager.addOnBackStackChangedListener(this);
  bar=getActionBar();
  bar.setDisplayHomeAsUpEnabled(true);
  bar.setDisplayShowTitleEnabled(false);
  bar.setDisplayShowCustomEnabled(true);
  bar.setCustomView(R.layout.subreddits_search);
  sv=(SearchView)bar.getCustomView();
  sv.setOnQueryTextListener(this);
  sv.setFocusable(false);
  singleContainer=findViewById(R.id.single_container);
  if (savedInstanceState == null) {
    String q=getIntent().getStringExtra(EXTRA_QUERY);
    if (q != null && !q.trim().isEmpty()) {
      sv.setQuery(q.trim(),true);
    }
  }
}",0.9626168224299064
188144,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  adapter=new SubredditInfoAdapter(getActivity().getLayoutInflater(),getArguments().getBoolean(ARG_SINGLE_CHOICE));
  adapter.setChosenPosition(savedInstanceState != null ? savedInstanceState.getInt(STATE_CHOSEN) : 0);
  setListAdapter(adapter);
  setEmptyText(getString(R.string.empty));
  setListShown(false);
  getLoaderManager().initLoader(0,null,this);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  adapter.setChosenPosition(savedInstanceState != null ? savedInstanceState.getInt(STATE_CHOSEN) : 0);
  setListAdapter(adapter);
  setEmptyText(getString(R.string.empty));
  setListShown(false);
  getLoaderManager().initLoader(0,null,this);
}",0.8605769230769231
188145,"private static void formatNamedLinks(SpannableStringBuilder b,Matcher m){
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String name=m.group(1);
    String url=m.group(2);
    b.replace(s,e,name);
    deleted+=4 + url.length();
    if (url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
 else     if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
    URLSpan span=new URLSpan(url);
    b.setSpan(span,s,s + name.length(),0);
  }
}","private static void formatNamedLinks(SpannableStringBuilder b,Matcher m){
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String name=m.group(1);
    String spacing=m.group(2);
    String url=m.group(3);
    b.replace(s,e,name);
    deleted+=4 + spacing.length() + url.length();
    if (url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
 else     if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
    URLSpan span=new URLSpan(url);
    b.setSpan(span,s,s + name.length(),0);
  }
}",0.9537953795379538
188146,"private boolean isVisible(String tag){
  Fragment f=manager.findFragmentByTag(tag);
  return f != null && f.isVisible();
}","private boolean isVisible(String tag){
  Fragment f=manager.findFragmentByTag(tag);
  return f != null && f.isAdded();
}",0.9586776859504132
188147,"public static SpannableStringBuilder format(CharSequence text){
  SpannableStringBuilder builder=new SpannableStringBuilder(text);
  Matcher m=BOLD_PATTERN.matcher(text);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String value=m.group(1);
    builder.replace(s,e,value);
    deleted+=4;
    StyleSpan span=new StyleSpan(Typeface.BOLD);
    builder.setSpan(span,s,s + value.length(),0);
  }
  m.usePattern(STRIKE_THROUGH_PATTERN);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String value=m.group(1);
    builder.replace(s,e,value);
    deleted+=4;
    StrikethroughSpan span=new StrikethroughSpan();
    builder.setSpan(span,s,s + value.length(),0);
  }
  m.usePattern(ESCAPED_PATTERN);
  m.reset(builder);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String value=m.group(1);
    if (""String_Node_Str"".equals(value)) {
      builder.replace(s,e,""String_Node_Str"");
      deleted+=4;
    }
 else     if (""String_Node_Str"".equals(value)) {
      builder.replace(s,e,""String_Node_Str"");
      deleted+=3;
    }
 else     if (""String_Node_Str"".equals(value)) {
      builder.replace(s,e,""String_Node_Str"");
      deleted+=3;
    }
  }
  m.usePattern(NAMED_LINK_PATTERN);
  m.reset(builder);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String name=m.group(1);
    String url=m.group(2);
    builder.replace(s,e,name);
    deleted+=4 + url.length();
    if (url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
 else     if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
    URLSpan span=new URLSpan(url);
    builder.setSpan(span,s,s + name.length(),0);
  }
  m.usePattern(RAW_LINK_PATTERN);
  m.reset(builder);
  while (m.find()) {
    URLSpan span=new URLSpan(m.group());
    builder.setSpan(span,m.start(),m.end(),0);
  }
  return builder;
}","public static SpannableStringBuilder format(CharSequence text){
  SpannableStringBuilder b=new SpannableStringBuilder(text);
  Matcher m=BOLD_PATTERN.matcher(text);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String value=m.group(1);
    b.replace(s,e,value);
    deleted+=4;
    StyleSpan span=new StyleSpan(Typeface.BOLD);
    b.setSpan(span,s,s + value.length(),0);
  }
  m.usePattern(STRIKE_THROUGH_PATTERN);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String value=m.group(1);
    b.replace(s,e,value);
    deleted+=4;
    StrikethroughSpan span=new StrikethroughSpan();
    b.setSpan(span,s,s + value.length(),0);
  }
  m.usePattern(ESCAPED_PATTERN);
  m.reset(b);
  unescape(b,m);
  m.usePattern(NAMED_LINK_PATTERN);
  m.reset(b);
  for (int deleted=0; m.find(); ) {
    int s=m.start() - deleted;
    int e=m.end() - deleted;
    String name=m.group(1);
    String url=m.group(2);
    b.replace(s,e,name);
    deleted+=4 + url.length();
    if (url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
 else     if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
    URLSpan span=new URLSpan(url);
    b.setSpan(span,s,s + name.length(),0);
  }
  m.usePattern(RAW_LINK_PATTERN);
  m.reset(b);
  while (m.find()) {
    URLSpan span=new URLSpan(m.group());
    b.setSpan(span,m.start(),m.end(),0);
  }
  return b;
}",0.8406363382640245
188148,"@Override public void onTitle(JsonReader reader,int index) throws IOException {
  things.get(index).title=reader.nextString();
}","@Override public void onTitle(JsonReader reader,int index) throws IOException {
  things.get(index).title=Formatter.formatTitle(reader.nextString()).toString();
}",0.8827586206896552
188149,"@Override public void bindAll(Map<ParameterDescription,Object> bindings,Request req,Response resp){
  Map<String,Object> requestData=req.getAllData();
  Map<String,Object> normalisedKeys=RequestHeaderBinder.normaliseKeysToJavaVarNames(requestData);
  Map<String,List<String>> datamap=createListMap(normalisedKeys);
  parameterBinderRegistry.bind(bindings,datamap,null);
  for (  Map.Entry<ParameterDescription,Object> binding : bindings.entrySet()) {
    ParameterDescription key=binding.getKey();
    String name=key.name();
    Object value=normalisedKeys.get(name);
    if (binding.getValue() == null && value != null) {
      if (key.isA(value.getClass())) {
        bindings.put(key,value);
      }
    }
  }
}","@Override public void bindAll(Map<ParameterDescription,Object> bindings,Request req,Response resp){
  Map<String,Object> requestData=req.getAllData();
  Map<String,Object> normalisedKeys=RequestHeaderBinder.normaliseKeysToJavaVarNames(requestData);
  Map<String,List<String>> datamap=createListMap(normalisedKeys);
  parameterBinderRegistry.bind(bindings,datamap,null);
  for (  Map.Entry<ParameterDescription,Object> binding : bindings.entrySet()) {
    ParameterDescription key=binding.getKey();
    String name=key.name();
    Object value=requestData.get(name);
    if (value == null) {
      value=normalisedKeys.get(name);
    }
    if (binding.getValue() == null && value != null) {
      if (key.isA(value.getClass())) {
        bindings.put(key,value);
      }
    }
  }
}",0.9558823529411764
188150,"protected void addViewResolvers(ViewResolverRegistry viewResolverRegistry,UpdatableInjectionContext injectionContext,GlobalModel globalModel){
  Router router=injectionContext.get(Router.class);
  ViewNegotiatorRegistry viewNegotiatorRegistry=injectionContext.get(ViewNegotiatorRegistry.class);
  HttpStatusExceptionViewResolver statusViewResolver=injectionContext.get(HttpStatusExceptionViewResolver.class);
  ExceptionViewResolver exceptionViewResolver=injectionContext.get(ExceptionViewResolver.class);
  NegotiatingViewResolver negotiatingViewResolver=new NegotiatingViewResolver(viewResolverRegistry,viewNegotiatorRegistry);
  injectionContext.inject(negotiatingViewResolver).as(NegotiatingViewResolver.class);
  GsonBuilder gsonBuilder=injectionContext.get(GsonBuilder.class);
  viewNegotiatorRegistry.setDefaultNegotiator(new JsonNegotiator());
  viewNegotiatorRegistry.addNegotiator(MimeTypes.MIME_APPLICATION_JSON,new JsonNegotiator());
  viewNegotiatorRegistry.addNegotiator(MimeTypes.MIME_APPLICATION_JAVASCRIPT,new JsonpNegotiator());
  viewResolverRegistry.addResolver(Throwable.class,exceptionViewResolver);
  viewResolverRegistry.addResolver(HttpStatusException.class,statusViewResolver);
  viewResolverRegistry.addResolver(RouteNotFoundException.class,new RouteNotFoundViewResolver());
  viewResolverRegistry.addResolver(RouteRedirectView.class,new RouteRedirectViewResolver(router));
  viewResolverRegistry.addResolver(RedirectView.class,new RedirectViewResolver());
  viewResolverRegistry.addResolver(JsonView.class,new JsonViewResolver(gsonBuilder));
  viewResolverRegistry.addResolver(JsonpView.class,new JsonpViewResolver(gsonBuilder));
  viewResolverRegistry.addResolver(FileView.class,new FileViewResolver());
  viewResolverRegistry.addResolver(StringView.class,new StringViewResolver());
  viewResolverRegistry.addResolver(NegotiatingView.class,negotiatingViewResolver);
}","protected void addViewResolvers(ViewResolverRegistry viewResolverRegistry,UpdatableInjectionContext injectionContext,GlobalModel globalModel){
  Router router=injectionContext.get(Router.class);
  ViewNegotiatorRegistry viewNegotiatorRegistry=injectionContext.get(ViewNegotiatorRegistry.class);
  HttpStatusExceptionViewResolver statusViewResolver=injectionContext.get(HttpStatusExceptionViewResolver.class);
  ExceptionViewResolver exceptionViewResolver=injectionContext.get(ExceptionViewResolver.class);
  NegotiatingViewResolver negotiatingViewResolver=new NegotiatingViewResolver(viewResolverRegistry,viewNegotiatorRegistry);
  injectionContext.inject(negotiatingViewResolver).as(NegotiatingViewResolver.class);
  GsonBuilder gsonBuilder=injectionContext.get(GsonBuilder.class);
  viewNegotiatorRegistry.setDefaultNegotiator(new JsonNegotiator());
  viewNegotiatorRegistry.addNegotiator(MimeTypes.MIME_APPLICATION_JSON,new JsonNegotiator());
  viewNegotiatorRegistry.addNegotiator(MimeTypes.MIME_APPLICATION_JAVASCRIPT,new JsonpNegotiator());
  viewResolverRegistry.addResolver(Throwable.class,exceptionViewResolver);
  viewResolverRegistry.addResolver(HttpStatusException.class,statusViewResolver);
  viewResolverRegistry.addResolver(RouteNotFoundException.class,new RouteNotFoundViewResolver(statusViewResolver));
  viewResolverRegistry.addResolver(RouteRedirectView.class,new RouteRedirectViewResolver(router));
  viewResolverRegistry.addResolver(RedirectView.class,new RedirectViewResolver());
  viewResolverRegistry.addResolver(JsonView.class,new JsonViewResolver(gsonBuilder));
  viewResolverRegistry.addResolver(JsonpView.class,new JsonpViewResolver(gsonBuilder));
  viewResolverRegistry.addResolver(FileView.class,new FileViewResolver());
  viewResolverRegistry.addResolver(StringView.class,new StringViewResolver());
  viewResolverRegistry.addResolver(NegotiatingView.class,negotiatingViewResolver);
}",0.9952755905511812
188151,"private void addRecipients(Map<String,String> to,Message message,RecipientType recipientType) throws MessagingException {
  if (Expressive.isNotEmpty(to)) {
    for (    Entry<String,String> recipient : to.entrySet()) {
      message.setRecipient(recipientType,emailAddress(recipient));
    }
  }
}","private void addRecipients(Map<String,String> to,Message message,RecipientType recipientType) throws MessagingException {
  if (Expressive.isNotEmpty(to)) {
    List<Address> addresses=new ArrayList<>();
    for (    Entry<String,String> recipient : to.entrySet()) {
      addresses.add(emailAddress(recipient));
    }
    message.addRecipients(recipientType,addresses.toArray(new Address[0]));
  }
}",0.7564469914040115
188152,"public MailBuilder cc(Map<String,String> cc);","/** 
 * Add the given map of email address to names to the 'cc' recipients of the email
 * @param emailAddress
 * @return
 */
public MailBuilder cc(Map<String,String> cc);",0.4166666666666667
188153,"public MailBuilder bcc(Map<String,String> bcc);","/** 
 * Add the given map of email address to names to the 'bcc' recipients of the email
 * @param emailAddress
 * @return
 */
public MailBuilder bcc(Map<String,String> bcc);",0.4253393665158371
188154,public MailBuilder subject(String subject);,"/** 
 * Specify the subject of the email
 * @param subject
 * @return
 */
public MailBuilder subject(String subject);",0.5375
188155,"public MailBuilder replyTo(String email,String name);","/** 
 * Set the email address and name of the 'reply to' address of the email
 * @param emailAddress
 * @param name
 * @return
 */
public MailBuilder replyTo(String email,String name);",0.4472573839662447
188156,"public MailBuilder from(String emailAddress,String name);","/** 
 * Set the email address and name of the sender of the email
 * @param emailAddress
 * @param name
 * @return
 */
public MailBuilder from(String emailAddress,String name);",0.4892703862660944
188157,"public MailBuilder to(Map<String,String> to);","/** 
 * Add the given map of email address to names to the 'to' recipients of the email
 * @param emailAddress
 * @return
 */
public MailBuilder to(Map<String,String> to);",0.4166666666666667
188158,public <T>MailBuilder body(T view) throws MailException ;,"/** 
 * Set the body of the email. The given view can be any object for which a   {@link ViewResolver} has been registered in the {@link ViewResolverRegistry}.
 * @param view
 * @return
 * @throws MailException
 */
public <T>MailBuilder body(T view) throws MailException ;",0.3465045592705167
188159,public void send() throws MailException ;,"/** 
 * Send the email using the current state of the builder
 * @throws MailException
 */
public void send() throws MailException ;",0.4739884393063583
188160,public MailBuilder mail() throws MailException ;,"/** 
 * Start building an email using a new   {@link MailBuilder}
 * @return
 * @throws MailException
 */
public MailBuilder mail() throws MailException ;",0.4752475247524752
188161,public void send(MailBuilder mailBuilder) throws MailException ;,"/** 
 * Takes a   {@link MailBuilder} earlier provided from {@link #mail()} and sends the email configured in it.
 * @param mailBuilder
 * @throws MailException
 */
public void send(MailBuilder mailBuilder) throws MailException ;",0.1706484641638225
188162,"@Override public StringBuffer getRequestURL(){
  return new StringBuffer(path);
}","@Override public StringBuffer getRequestURL(){
  String url=this.url.toString();
  int index=url.indexOf('?');
  if (index != -1) {
    url=url.substring(0,index);
  }
  return new StringBuffer(url);
}",0.5460992907801419
188163,"@Override public int read() throws IOException {
  return sis.read();
}","@Override public int read() throws IOException {
  return inputStream.read();
}",0.92
188164,"@SuppressWarnings(""String_Node_Str"") @Override public ServletInputStream getInputStream() throws IOException {
  final StringInputStream sis=new StringInputStream(content,Mode.ALL);
  return new ServletInputStream(){
    @Override public int read() throws IOException {
      return sis.read();
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") @Override public ServletInputStream getInputStream() throws IOException {
  String body=(content == null) ? ""String_Node_Str"" : content;
  final ByteArrayInputStream inputStream=new ByteArrayInputStream(body.getBytes(this.getCharacterEncoding()));
  return new ServletInputStream(){
    @Override public int read() throws IOException {
      return inputStream.read();
    }
  }
;
}",0.6905089408528198
188165,"public MockHttpServletRequest url(String url){
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(url);
  if (!matcher.matches()) {
    path=url;
  }
 else {
    this.protocol=matcher.group(2);
    this.path=matcher.group(4) + matcher.group(6);
    this.queryString=matcher.group(7);
  }
  return this;
}","public MockHttpServletRequest url(String url){
  try {
    if (url.startsWith(""String_Node_Str"")) {
      url=String.format(""String_Node_Str"",protocol,host,url);
    }
    this.url=new URL(url);
    this.protocol=this.url.getProtocol();
    this.host=this.url.getHost();
    this.path=this.url.getPath();
    this.queryString=this.url.getQuery();
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(url + ""String_Node_Str"",e);
  }
  return this;
}",0.1955445544554455
188166,"protected void addRoutes(Routes routes,UpdatableInjectionContext injectionContext,String routesFile){
  try {
    String routesSource=Streams.getResourceAsString(routesFile);
    Logger.info(""String_Node_Str"",routesFile);
    Map<Route,Action> routeMap=routes.parseJsonRoutes(routesSource);
    routes.addRoutes(routeMap);
  }
 catch (  ActionException e) {
    throw e;
  }
catch (  BaseException e) {
    Logger.info(""String_Node_Str"",routesFile);
  }
}","protected void addRoutes(Routes routes,UpdatableInjectionContext injectionContext,String routesFile){
  String routesSource=null;
  try {
    routesSource=Streams.getResourceAsString(routesFile);
  }
 catch (  BaseException e) {
    Logger.info(""String_Node_Str"",routesFile);
  }
  if (routesSource != null) {
    Logger.info(""String_Node_Str"",routesFile);
    Map<Route,Action> routeMap=routes.parseJsonRoutes(routesSource);
    routes.addRoutes(routeMap);
  }
}",0.6993464052287581
188167,"public Map<Route,Action> parseJsonRoutes(String source){
  try {
    Map<Route,Action> routes=new LinkedHashMap<Route,Action>();
    JsonProperties properties=new JsonProperties(source);
    for (    String route : properties.getKeys()) {
      if (properties.is(route,String.class)) {
        String actionName=properties.getString(route);
        Action action=createAction(actionName);
        routes.put(new Route(RouteType.GET,route,null),action);
      }
 else       if (properties.is(route,Map.class)) {
        Map<String,String> map=properties.getMap(route);
        for (        Map.Entry<String,String> routeEntry : map.entrySet()) {
          RouteType routeType=RouteType.from(routeEntry.getKey());
          if (routeType == null) {
            throw new RouteNotFoundException(""String_Node_Str"",routeEntry.getKey());
          }
          String actionName=routeEntry.getValue();
          Action action=createAction(actionName);
          routes.put(new Route(routeType,route,null),action);
        }
      }
    }
    return routes;
  }
 catch (  Exception e) {
    throw new RouteNotFoundException(e,""String_Node_Str"",e.getMessage());
  }
}","public Map<Route,Action> parseJsonRoutes(String source){
  Map<Route,Action> routes=new LinkedHashMap<Route,Action>();
  JsonProperties properties=new JsonProperties(source);
  for (  String route : properties.getKeys()) {
    if (properties.is(route,String.class)) {
      String actionName=properties.getString(route);
      Action action=createAction(actionName);
      routes.put(new Route(RouteType.GET,route,null),action);
    }
 else     if (properties.is(route,Map.class)) {
      Map<String,String> map=properties.getMap(route);
      for (      Map.Entry<String,String> routeEntry : map.entrySet()) {
        RouteType routeType=RouteType.from(routeEntry.getKey());
        if (routeType == null) {
          throw new RouteException(""String_Node_Str"",routeEntry.getKey());
        }
        String actionName=routeEntry.getValue();
        Action action=createAction(actionName);
        routes.put(new Route(routeType,route,null),action);
      }
    }
  }
  return routes;
}",0.9062937062937064
188168,"public String listRoutes(){
  List<String> allRoutes=new LinkedList<String>();
  for (  Map<String,Route> routeEntries : routes.values()) {
    allRoutes.addAll(routeEntries.keySet());
  }
  allRoutes=list(allRoutes);
  Collections.sort(allRoutes);
  StringBuilder sb=new StringBuilder();
  for (  String route : allRoutes) {
    for (    RouteType routeType : RouteType.all()) {
      Map<String,Route> routesForType=routes.get(routeType);
      if (routesForType.containsKey(route)) {
        sb.append(String.format(routeDisplayFormat,routesForType.get(route)));
      }
    }
  }
  return sb.toString();
}","public String listRoutes(){
  Set<String> allRoutes=new HashSet<String>();
  for (  Map<String,Route> routeEntries : routes.values()) {
    allRoutes.addAll(routeEntries.keySet());
  }
  List<String> allRouteNames=list(allRoutes);
  Collections.sort(allRouteNames);
  StringBuilder sb=new StringBuilder();
  for (  String route : allRouteNames) {
    for (    RouteType routeType : RouteType.all()) {
      Map<String,Route> routesForType=routes.get(routeType);
      if (routesForType.containsKey(route)) {
        sb.append(String.format(routeDisplayFormat,routesForType.get(route)));
      }
    }
  }
  return sb.toString();
}",0.9523809523809524
188169,"@SuppressWarnings(""String_Node_Str"") private StringOutputStream createOutputStream(){
  sos=new StringOutputStream(characterEncoding){
    @Override public void flush() throws IOException {
      committed=true;
      super.flush();
    }
    @Override public void close(){
    }
  }
;
  return sos;
}","@SuppressWarnings(""String_Node_Str"") private StringOutputStream createOutputStream(){
  contentTypeOnWrite=contentType;
  sos=new StringOutputStream(characterEncoding){
    @Override public void flush() throws IOException {
      committed=true;
      super.flush();
    }
    @Override public void close(){
    }
  }
;
  return sos;
}",0.9465408805031448
188170,"@Override public String getContentType(){
  return contentType;
}","/** 
 * @deprecated Use #getContentTypeOnWrite() to get the content type at the time data the output stream is created.
 */
@Override public String getContentType(){
  return contentType;
}",0.5118110236220472
188171,"@Override public void resolve(HttpServletRequest req,HttpServletResponse resp,JsonView viewResult){
  Object output=viewResult.getOutput();
  try {
    Gson create=gsonBuilder.create();
    String json=create.toJson(output);
    resp.getWriter().write(json);
    resp.setContentType(MimeTypes.MIME_APPLICATION_JSON);
    resp.setContentLength(json.getBytes().length);
    resp.setStatus(HttpServletResponse.SC_OK);
  }
 catch (  Exception e) {
    throw new ViewResolutionException(e,""String_Node_Str"",output.toString(),e.getMessage());
  }
}","@Override public void resolve(HttpServletRequest req,HttpServletResponse resp,JsonView viewResult){
  Object output=viewResult.getOutput();
  try {
    Gson create=gsonBuilder.create();
    String json=create.toJson(output);
    resp.setContentType(MimeTypes.MIME_APPLICATION_JSON);
    resp.setContentLength(json.getBytes().length);
    resp.setStatus(HttpServletResponse.SC_OK);
    resp.getWriter().write(json);
  }
 catch (  Exception e) {
    throw new ViewResolutionException(e,""String_Node_Str"",output.toString(),e.getMessage());
  }
}",0.9372693726937268
188172,"/** 
 * Finds a random shard for the given counter and increments it by the specified amount. This method grows the number of shards as needed. Shard count is doubled when the number of concurrent accesses is equal to the number of shards.
 * @param counterType
 * @param association
 * @param by
 * @return
 */
protected long incrementCount(String counterType,String association,long by){
  String memcacheKey=memcacheKey(counterType,association);
  String concurrentIncrementKey=memcacheKey + ""String_Node_Str"";
  long numShards=shardCount(counterType,association);
  try {
    long currentAccesses=memcacheService.increment(concurrentIncrementKey,1,0L);
    if (currentAccesses > numShards) {
      numShards=addShardsToShardedCounter(numShards,counterType,association);
    }
    long shardNum=generator.nextInt((int)numShards);
    String counterKind=kindName(counterType);
    String name=association == null ? Long.toString(shardNum) : String.format(""String_Node_Str"",association,shardNum);
    Key shardKey=createKey(counterKind,name);
    incrementCounter(shardKey,association,by,by);
    memcacheService.increment(memcacheKey,by);
    return getCount(counterType,association);
  }
  finally {
    memcacheService.increment(concurrentIncrementKey,-1,0L);
  }
}","/** 
 * Finds a random shard for the given counter and increments it by the specified amount. This method grows the number of shards as needed. Shard count is doubled when the number of concurrent accesses is equal to the number of shards.
 * @param counterType
 * @param association
 * @param by
 * @return
 */
protected long incrementCount(String counterType,String association,long by){
  String memcacheKey=memcacheKey(counterType,association);
  String concurrentIncrementKey=memcacheKey + ""String_Node_Str"";
  long numShards=shardCount(counterType,association);
  try {
    long currentAccesses=memcacheService.increment(concurrentIncrementKey,1,0L);
    if (currentAccesses > numShards) {
      numShards=addShardsToShardedCounter(numShards,counterType,association);
    }
    long shardNum=generator.nextInt((int)numShards + 1);
    String counterKind=kindName(counterType);
    String name=association == null ? Long.toString(shardNum) : String.format(""String_Node_Str"",association,shardNum);
    Key shardKey=createKey(counterKind,name);
    incrementCounter(shardKey,association,by,by);
    memcacheService.increment(memcacheKey,by);
    return getCount(counterType,association);
  }
  finally {
    memcacheService.increment(concurrentIncrementKey,-1,0L);
  }
}",0.998426435877262
188173,"public Object bind(ParameterBinderSet binders,ParameterDescription parameterDescription,HttpPostDataMap pathMap){
  Map<String,String[]> stringMap=pathMap.toStringMap(parameterDescription.name());
  if (!stringMap.isEmpty()) {
    try {
      Object bean=parameterDescription.classType().newInstance();
      BeanTool.load(bean,stringMap);
      return bean;
    }
 catch (    Exception e) {
      throw new BindException(e,""String_Node_Str"",parameterDescription.classType(),e.getMessage());
    }
  }
  return null;
}","public Object bind(ParameterBinderSet binders,ParameterDescription parameterDescription,HttpPostDataMap pathMap){
  Map<String,Object> stringMap=pathMap.toStringMap(parameterDescription.name());
  if (!stringMap.isEmpty()) {
    try {
      Object bean=parameterDescription.classType().newInstance();
      BeanTool.load(bean,stringMap);
      return bean;
    }
 catch (    Exception e) {
      throw new BindException(e,""String_Node_Str"",parameterDescription.classType(),e.getMessage());
    }
  }
  return null;
}",0.986460348162476
188174,"public void initializeFrom(ILaunchConfiguration config){
  projectText.setText(getAttributeFromConfig(config,ATTR_PROJECT_NAME,""String_Node_Str""));
  String testClass=getAttributeFromConfig(config,ATTR_MAIN_TYPE_NAME,""String_Node_Str"");
  String containerId=getAttributeFromConfig(config,ATTR_TEST_CONTAINER,""String_Node_Str"");
  testClassText.setText(testClass);
  if (testClass.length() == 0 && containerId.length() > 0) {
    testClassText.setText(""String_Node_Str"");
    IJavaElement containerElement=JavaCore.create(containerId);
    testDirText.setText(new JavaElementLabelProvider().getText(containerElement));
    testClassRadioButton.setSelection(false);
    testDirectoryRadioButton.setSelection(true);
  }
 else {
    testClassText.setText(testClass);
    testDirText.setText(""String_Node_Str"");
    testClassRadioButton.setSelection(true);
    testDirectoryRadioButton.setSelection(false);
  }
  testModeChanged();
}","public void initializeFrom(ILaunchConfiguration config){
  projectText.setText(getAttributeFromConfig(config,ATTR_PROJECT_NAME,""String_Node_Str""));
  String testClass=getAttributeFromConfig(config,ATTR_MAIN_TYPE_NAME,""String_Node_Str"");
  containerId=getAttributeFromConfig(config,ATTR_TEST_CONTAINER,""String_Node_Str"");
  testClassText.setText(testClass);
  if (testClass.length() == 0 && containerId.length() > 0) {
    testClassText.setText(""String_Node_Str"");
    IJavaElement containerElement=JavaCore.create(containerId);
    testDirText.setText(new JavaElementLabelProvider().getText(containerElement));
    testClassRadioButton.setSelection(false);
    testDirectoryRadioButton.setSelection(true);
  }
 else {
    testClassText.setText(testClass);
    testDirText.setText(""String_Node_Str"");
    testClassRadioButton.setSelection(true);
    testDirectoryRadioButton.setSelection(false);
  }
  testModeChanged();
}",0.9962141698215252
188175,"public void performApply(ILaunchConfigurationWorkingCopy workingCopy){
  workingCopy.setAttribute(ATTR_PROJECT_NAME,projectText.getText().trim());
  if (testClassRadioButton.getSelection()) {
    workingCopy.setAttribute(ATTR_MAIN_TYPE_NAME,testClassText.getText().trim());
    workingCopy.setAttribute(ATTR_TEST_CONTAINER,""String_Node_Str"");
  }
 else {
    workingCopy.setAttribute(ATTR_MAIN_TYPE_NAME,""String_Node_Str"");
    workingCopy.setAttribute(ATTR_TEST_CONTAINER,testDirText.getText().trim());
  }
  try {
    PitMigrationDelegate.mapResources(workingCopy);
  }
 catch (  CoreException ce) {
    setErrorMessage(ce.getStatus().getMessage());
  }
}","public void performApply(ILaunchConfigurationWorkingCopy workingCopy){
  workingCopy.setAttribute(ATTR_PROJECT_NAME,projectText.getText().trim());
  if (testClassRadioButton.getSelection()) {
    workingCopy.setAttribute(ATTR_MAIN_TYPE_NAME,testClassText.getText().trim());
    workingCopy.setAttribute(ATTR_TEST_CONTAINER,""String_Node_Str"");
  }
 else {
    workingCopy.setAttribute(ATTR_MAIN_TYPE_NAME,""String_Node_Str"");
    workingCopy.setAttribute(ATTR_TEST_CONTAINER,containerId);
  }
  try {
    PitMigrationDelegate.mapResources(workingCopy);
  }
 catch (  CoreException ce) {
    setErrorMessage(ce.getStatus().getMessage());
  }
}",0.7478797224363917
188176,"private List<File> getSourceDirsForProject(IJavaProject javaProject) throws CoreException {
  Builder<File> sourceDirBuilder=ImmutableSet.builder();
  URI location=getProjectLocation(javaProject.getProject());
  IPackageFragmentRoot[] packageRoots=javaProject.getPackageFragmentRoots();
  File workspaceRoot=new File(location).getParentFile();
  for (  IPackageFragmentRoot packageRoot : packageRoots) {
    if (!packageRoot.isArchive()) {
      sourceDirBuilder.add(new File(workspaceRoot,packageRoot.getPath().toString()));
    }
  }
  return ImmutableList.copyOf(sourceDirBuilder.build());
}","private List<File> getSourceDirsForProject(IJavaProject javaProject) throws CoreException {
  Builder<File> sourceDirBuilder=ImmutableSet.builder();
  URI location=getProjectLocation(javaProject.getProject());
  IPackageFragmentRoot[] packageRoots=javaProject.getPackageFragmentRoots();
  File projectRoot=new File(location);
  for (  IPackageFragmentRoot packageRoot : packageRoots) {
    if (!packageRoot.isArchive()) {
      File packagePath=removeProjectFromPackagePath(javaProject,packageRoot.getPath());
      sourceDirBuilder.add(new File(projectRoot,packagePath.toString()));
    }
  }
  return ImmutableList.copyOf(sourceDirBuilder.build());
}",0.6243980738362761
188177,"@Override public void createPartControl(Composite parent){
  try {
    browser=new Browser(parent,SWT.NONE);
  }
 catch (  SWTError e) {
    MessageBox messageBox=new MessageBox(parent.getShell(),SWT.ICON_ERROR | SWT.OK);
    messageBox.setMessage(""String_Node_Str"");
    messageBox.setText(""String_Node_Str"");
    messageBox.open();
  }
}","@Override public void createPartControl(Composite parent){
  try {
    browser=new Browser(parent,SWT.NONE);
  }
 catch (  SWTError e) {
    MessageBox messageBox=new MessageBox(parent.getShell(),SWT.ICON_ERROR | SWT.OK);
    messageBox.setMessage(""String_Node_Str"");
    messageBox.setText(""String_Node_Str"");
    messageBox.open();
    System.exit(-1);
  }
}",0.9699570815450644
188178,"@Override public void createPartControl(Composite parent){
  try {
    browser=new Browser(parent,SWT.NONE);
  }
 catch (  SWTError e) {
    MessageBox messageBox=new MessageBox(parent.getShell(),SWT.ICON_ERROR | SWT.OK);
    messageBox.setMessage(""String_Node_Str"");
    messageBox.setText(""String_Node_Str"");
    messageBox.open();
    System.exit(-1);
  }
}","@Override public void createPartControl(Composite parent){
  try {
    browser=new Browser(parent,SWT.NONE);
  }
 catch (  SWTError e) {
    MessageBox messageBox=new MessageBox(parent.getShell(),SWT.ICON_ERROR | SWT.OK);
    messageBox.setMessage(""String_Node_Str"");
    messageBox.setText(""String_Node_Str"");
    messageBox.open();
  }
}",0.9699570815450644
188179,"private File findResultFile(File reportDir){
  for (  File file : reportDir.listFiles()) {
    if (file.isDirectory()) {
      File result=findResultFile(file);
      if (null != result) {
        return result;
      }
    }
    if (""String_Node_Str"".equals(file.getName())) {
      return file;
    }
  }
  return null;
}","private File findResultFile(File reportDir){
  for (  File file : reportDir.listFiles()) {
    if (!file.isDirectory()) {
      if (""String_Node_Str"".equals(file.getName())) {
        return file;
      }
    }
  }
  for (  File file : reportDir.listFiles()) {
    if (file.isDirectory()) {
      File result=findResultFile(file);
      if (null != result) {
        return result;
      }
    }
  }
  return null;
}",0.5412719891745602
188180,"@Override public String getProgramArguments(ILaunchConfiguration launchConfig) throws CoreException {
  List<String> classPath=ImmutableList.copyOf(getClassesForProject(launchConfig.getAttribute(PIT_PROJECT,""String_Node_Str"")));
  List<File> sourceDirs=ImmutableList.copyOf(getSourceDirsForProject(launchConfig.getAttribute(PIT_PROJECT,""String_Node_Str"")));
  PITOptions options=new PITOptionsBuilder().withClassUnderTest(launchConfig.getAttribute(PIT_TEST_CLASS,""String_Node_Str"")).withClassesToMutate(classPath).withSourceDirectory(sourceDirs.get(0)).build();
  return new StringBuilder(super.getProgramArguments(launchConfig)).append(options.toCLIArgs()).toString();
}","@Override public String getProgramArguments(ILaunchConfiguration launchConfig) throws CoreException {
  List<String> classPath=ImmutableList.copyOf(getClassesForProject(launchConfig.getAttribute(PIT_PROJECT,""String_Node_Str"")));
  List<File> sourceDirs=ImmutableList.copyOf(getSourceDirsForProject(launchConfig.getAttribute(PIT_PROJECT,""String_Node_Str"")));
  PITOptions options=new PITOptionsBuilder().withClassUnderTest(launchConfig.getAttribute(PIT_TEST_CLASS,""String_Node_Str"")).withClassesToMutate(classPath).withSourceDirectory(sourceDirs.get(0)).build();
  return new StringBuilder(super.getProgramArguments(launchConfig)).append(options.toCLIArgsAsString()).toString();
}",0.994074074074074
188181,"private void clearDown(File directory){
  if (null != directory) {
    for (    File file : directory.listFiles()) {
      if (file.isDirectory()) {
        clearDown(directory);
      }
      file.delete();
    }
  }
}","private void clearDown(File directory){
  if (null != directory) {
    for (    File file : directory.listFiles()) {
      if (file.isDirectory()) {
        clearDown(file);
      }
      file.delete();
    }
  }
}",0.9699769053117784
188182,"@Override public void onSelectionChange(SelectionChangeEvent event){
  ListSelectionState<T> selectionState=list.getListSelectionState();
  if (selectionState != null) {
    save(selectionState);
    HistoryUtils.resolve(selectionState.getSelected());
  }
}","@Override public void onSelectionChange(SelectionChangeEvent event){
  ListSelectionState<T> selectionState=list.getListSelectionState();
  if (selectionState != null) {
    save(selectionState);
    list.getSelectionModel().clear();
    HistoryUtils.resolve(selectionState.getSelected());
  }
}",0.9311594202898552
188183,"public static <T extends IsIndexed>void bindBrowseOpener(final AsyncTableCell<T,?> list){
  list.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      ListSelectionState<T> selectionState=list.getListSelectionState();
      if (selectionState != null) {
        save(selectionState);
        HistoryUtils.resolve(selectionState.getSelected());
      }
    }
  }
);
}","public static <T extends IsIndexed>void bindBrowseOpener(final AsyncTableCell<T,?> list){
  list.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      ListSelectionState<T> selectionState=list.getListSelectionState();
      if (selectionState != null) {
        save(selectionState);
        list.getSelectionModel().clear();
        HistoryUtils.resolve(selectionState.getSelected());
      }
    }
  }
);
}",0.9559748427672956
188184,"private void createJobsSearchResultPanel(){
  jobsSearchResultPanel=new JobList(jobsListId,filterJobs,messages.searchResults(),true);
  ListSelectionUtils.bindBrowseOpener(jobsSearchResultPanel);
  jobsSearchResultPanel.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Job job=jobsSearchResultPanel.getSelectionModel().getSelectedObject();
      if (job != null) {
        HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
      }
    }
  }
);
  jobsSearchResultPanel.autoUpdate(10000);
}","private void createJobsSearchResultPanel(){
  jobsSearchResultPanel=new JobList(jobsListId,filterJobs,messages.searchResults(),true);
  ListSelectionUtils.bindBrowseOpener(jobsSearchResultPanel);
  jobsSearchResultPanel.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Job job=jobsSearchResultPanel.getSelectionModel().getSelectedObject();
      if (job != null) {
        jobsSearchResultPanel.getSelectionModel().clear();
        HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
      }
    }
  }
);
  jobsSearchResultPanel.autoUpdate(10000);
}",0.9537979639780736
188185,"@Override public void onSelectionChange(SelectionChangeEvent event){
  Job job=jobsSearchResultPanel.getSelectionModel().getSelectedObject();
  if (job != null) {
    HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
  }
}","@Override public void onSelectionChange(SelectionChangeEvent event){
  Job job=jobsSearchResultPanel.getSelectionModel().getSelectedObject();
  if (job != null) {
    jobsSearchResultPanel.getSelectionModel().clear();
    HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
  }
}",0.8919449901768173
188186,"@NotNull @Override public Iterator iterator(){
  return groups.iterator();
}","@Override public Iterator<ActionsGroup<T>> iterator(){
  return groups.iterator();
}",0.8375
188187,"private ReturnWithExceptions<Void,ModelObserver> preservationEventPermissionsUpdated(PreservationMetadata pm,Permissions permissions,AIPState state){
  Map<String,Object> updateFields=new HashMap<>();
  updateFields.putAll(SolrUtils.getPermissionsAsPreCalculatedFields(permissions));
  updateFields.put(RodaConstants.INDEX_STATE,SolrUtils.formatEnum(state));
  updateFields.put(RodaConstants.PRESERVATION_EVENT_AIP_ID,pm.getAipId());
  return SolrUtils.update(index,IndexedPreservationEvent.class,IdUtils.getPreservationId(pm),updateFields,this);
}","private ReturnWithExceptions<Void,ModelObserver> preservationEventPermissionsUpdated(PreservationMetadata pm,Permissions permissions,AIPState state){
  Map<String,Object> updateFields=new HashMap<>();
  updateFields.putAll(SolrUtils.getPermissionsAsPreCalculatedFields(permissions));
  updateFields.put(RodaConstants.INDEX_STATE,SolrUtils.formatEnum(state));
  updateFields.put(RodaConstants.PRESERVATION_EVENT_AIP_ID,pm.getAipId());
  updateFields.put(RodaConstants.PRESERVATION_EVENT_ID,pm.getId());
  return SolrUtils.update(index,IndexedPreservationEvent.class,IdUtils.getPreservationId(pm),updateFields,this);
}",0.9415807560137456
188188,"private void showIngestSourceObjects(final SelectedItems<?> selected){
  if (selected != null) {
    selectedList.clear();
    selectedListPanel.setVisible(true);
    if (ClientSelectedItemsUtils.isEmpty(selected) && isJobInFinalState()) {
      Label noSourceLabel=new Label(messages.noItemsToDisplay());
      selectedListPanel.add(noSourceLabel);
    }
 else     if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList<?>)selected).getIds();
      Label filterLabel=new Label(SearchPreFilterUtils.getFilterParameterHTML(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,ids)).asString());
      selectedList.add(filterLabel);
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter<?>)selected).getFilter();
      Label filterLabel=new Label(SearchPreFilterUtils.getFilterHTML(filter,selected.getSelectedClass()).asString());
      selectedList.add(filterLabel);
    }
 else {
      selectedListPanel.setVisible(false);
    }
  }
}","private void showIngestSourceObjects(final SelectedItems<?> selected){
  if (selected != null) {
    selectedList.clear();
    selectedListPanel.setVisible(true);
    if (ClientSelectedItemsUtils.isEmpty(selected) && isJobInFinalState()) {
      Label noSourceLabel=new Label(messages.noItemsToDisplay());
      selectedListPanel.add(noSourceLabel);
    }
 else     if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList<?>)selected).getIds();
      HTML filterHTML=new HTML(SearchPreFilterUtils.getFilterParameterHTML(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,ids)));
      selectedList.add(filterHTML);
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter<?>)selected).getFilter();
      HTML filterHTML=new HTML(SearchPreFilterUtils.getFilterHTML(filter,selected.getSelectedClass()));
      selectedList.add(filterHTML);
    }
 else     if (selected instanceof SelectedItemsAll) {
      Label filterLabel=new Label(messages.allOfAObject(selected.getSelectedClass()));
      filterLabel.addStyleName(""String_Node_Str"");
      selectedList.add(filterLabel);
    }
 else {
      selectedListPanel.setVisible(false);
    }
  }
}",0.7855550601872492
188189,"private void showActionSourceObjects(final SelectedItems<?> selected){
  if (selected != null) {
    selectedList.clear();
    if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList<?>)selected).getIds();
      if (ids.isEmpty()) {
        Label noSourceLabel=new Label(messages.noItemsToDisplay());
        selectedListPanel.add(noSourceLabel);
      }
 else {
        Label filterLabel=new Label(SearchPreFilterUtils.getFilterParameterHTML(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,ids)).asString());
        selectedList.add(filterLabel);
      }
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter<?>)selected).getFilter();
      HTML filterHTML=new HTML(SearchPreFilterUtils.getFilterHTML(filter,selected.getSelectedClass()));
      selectedList.add(filterHTML);
    }
 else     if (selected instanceof SelectedItemsAll || selected instanceof SelectedItemsNone) {
      Label objectLabel=new Label();
      objectLabel.addStyleName(""String_Node_Str"");
      if (StringUtils.isBlank(selected.getSelectedClass())) {
        objectLabel.setText(messages.noItemsToDisplay());
      }
 else       if (AIP.class.getName().equals(selected.getSelectedClass()) || IndexedAIP.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allIntellectualEntities());
      }
 else       if (Representation.class.getName().equals(selected.getSelectedClass()) || IndexedRepresentation.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allRepresentations());
      }
 else       if (File.class.getName().equals(selected.getSelectedClass()) || IndexedFile.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allFiles());
      }
 else {
        objectLabel.setText(messages.allOfAObject(selected.getSelectedClass()));
      }
      selectedList.add(objectLabel);
    }
 else {
      selectedListPanel.setVisible(false);
    }
  }
}","private void showActionSourceObjects(final SelectedItems<?> selected){
  if (selected != null) {
    selectedList.clear();
    if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList<?>)selected).getIds();
      if (ids.isEmpty()) {
        Label noSourceLabel=new Label(messages.noItemsToDisplay());
        selectedListPanel.add(noSourceLabel);
      }
 else {
        HTML filterHTML=new HTML(SearchPreFilterUtils.getFilterParameterHTML(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,ids)));
        selectedList.add(filterHTML);
      }
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter<?>)selected).getFilter();
      HTML filterHTML=new HTML(SearchPreFilterUtils.getFilterHTML(filter,selected.getSelectedClass()));
      selectedList.add(filterHTML);
    }
 else     if (selected instanceof SelectedItemsAll || selected instanceof SelectedItemsNone) {
      Label objectLabel=new Label();
      objectLabel.addStyleName(""String_Node_Str"");
      if (StringUtils.isBlank(selected.getSelectedClass())) {
        objectLabel.setText(messages.noItemsToDisplay());
      }
 else       if (AIP.class.getName().equals(selected.getSelectedClass()) || IndexedAIP.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allIntellectualEntities());
      }
 else       if (Representation.class.getName().equals(selected.getSelectedClass()) || IndexedRepresentation.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allRepresentations());
      }
 else       if (File.class.getName().equals(selected.getSelectedClass()) || IndexedFile.class.getName().equals(selected.getSelectedClass())) {
        objectLabel.setText(messages.allFiles());
      }
 else {
        objectLabel.setText(messages.allOfAObject(selected.getSelectedClass()));
      }
      selectedList.add(objectLabel);
    }
 else {
      selectedListPanel.setVisible(false);
    }
  }
}",0.984927106498641
188190,"private void updateFormOrXML(){
  if (selectedBundle != null && selectedBundle.getValues() != null) {
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(selectedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(selectedBundle);
      }
    }
  }
 else {
    formOrXML.clear();
    if (selectedBundle != null)     metadataXML.setText(selectedBundle.getTemplate());
 else     metadataXML.setText(""String_Node_Str"");
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
  }
}","private void updateFormOrXML(){
  if (selectedBundle != null && selectedBundle.getValues() != null && !selectedBundle.getValues().isEmpty()) {
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(selectedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(selectedBundle);
      }
    }
  }
 else {
    formOrXML.clear();
    if (selectedBundle != null) {
      metadataXML.setText(selectedBundle.getTemplate());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
  }
}",0.9723446893787576
188191,"public void setInXML(boolean inXML){
  this.inXML=inXML;
  if (inXML) {
    showXmlIconXML.setVisible(false);
    showXmlIconForm.setVisible(true);
  }
 else {
    showXmlIconXML.setVisible(true);
    showXmlIconForm.setVisible(false);
  }
}","public void setInXML(boolean inXML){
  this.inXML=inXML;
  showXmlIconXML.setVisible(!inXML);
  showXmlIconForm.setVisible(inXML);
}",0.6702412868632708
188192,"private boolean hasModifiedForm(){
  HashMap<String,MetadataValue> formMap=new HashMap<>();
  for (  MetadataValue mv : supportedBundle.getValues()) {
    formMap.put(mv.getId(),mv);
  }
  HashMap<String,MetadataValue> bundleMap=new HashMap<>();
  for (  MetadataValue mv : bundle.getValues()) {
    bundleMap.put(mv.getId(),mv);
  }
  for (  Entry<String,MetadataValue> entry : formMap.entrySet()) {
    String key=entry.getKey();
    MetadataValue mvForm=entry.getValue();
    String formValue=mvForm != null ? mvForm.get(""String_Node_Str"") : ""String_Node_Str"";
    MetadataValue mvBundle=bundleMap.get(key);
    String bundleValue=mvBundle != null ? bundleMap.get(key).get(""String_Node_Str"") : ""String_Node_Str"";
    if ((formValue != null && !formValue.equals(bundleValue)) || (formValue == null && bundleValue != null))     return true;
  }
  return false;
}","private boolean hasModifiedForm(){
  HashMap<String,MetadataValue> formMap=new HashMap<>();
  for (  MetadataValue mv : supportedBundle.getValues()) {
    formMap.put(mv.getId(),mv);
  }
  HashMap<String,MetadataValue> bundleMap=new HashMap<>();
  for (  MetadataValue mv : bundle.getValues()) {
    bundleMap.put(mv.getId(),mv);
  }
  for (  Entry<String,MetadataValue> entry : formMap.entrySet()) {
    String key=entry.getKey();
    MetadataValue mvForm=entry.getValue();
    String formValue=mvForm != null ? mvForm.get(""String_Node_Str"") : ""String_Node_Str"";
    MetadataValue mvBundle=bundleMap.get(key);
    String bundleValue=mvBundle != null ? bundleMap.get(key).get(""String_Node_Str"") : ""String_Node_Str"";
    if ((formValue != null && !formValue.equals(bundleValue)) || (formValue == null && bundleValue != null)) {
      return true;
    }
  }
  return false;
}",0.9585253456221198
188193,"@Override public void resolve(List<String> historyTokens,final AsyncCallback<Widget> callback){
  if (historyTokens.size() == 2 || historyTokens.size() == 3) {
    final String aipId=historyTokens.get(0);
    final String representationId=historyTokens.size() == 3 ? historyTokens.get(1) : null;
    final String descriptiveMetadataId=new HTML(historyTokens.get(historyTokens.size() - 1)).getText();
    BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,descriptiveMetadataId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
      @Override public void onFailure(      Throwable caught){
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      DescriptiveMetadataEditBundle bundle){
        EditDescriptiveMetadata edit=new EditDescriptiveMetadata(aipId,representationId,bundle);
        callback.onSuccess(edit);
      }
    }
);
  }
 else {
    HistoryUtils.newHistory(BrowseAIP.RESOLVER);
    callback.onSuccess(null);
  }
}","@Override public void resolve(List<String> historyTokens,final AsyncCallback<Widget> callback){
  if (historyTokens.size() == 2 || historyTokens.size() == 3) {
    final String aipId=historyTokens.get(0);
    final String representationId=historyTokens.size() == 3 ? historyTokens.get(1) : null;
    final String descriptiveMetadataId=new HTML(historyTokens.get(historyTokens.size() - 1)).getText();
    BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,descriptiveMetadataId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
      @Override public void onFailure(      Throwable caught){
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      DescriptiveMetadataEditBundle bundle){
        callback.onSuccess(new EditDescriptiveMetadata(aipId,representationId,bundle));
      }
    }
);
  }
 else {
    HistoryUtils.newHistory(BrowseAIP.RESOLVER);
    callback.onSuccess(null);
  }
}",0.956858943286476
188194,"@Override public void onChange(ChangeEvent changeEvent){
  String typeString=null;
  String version=null;
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      Set<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new TreeSet<>();
        for (        MetadataValue mv : bundle.getValues())         newValues.add(mv.copy());
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}","@Override public void onChange(ChangeEvent changeEvent){
  setInXML(false);
  String typeString=null;
  String version=null;
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      Set<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new TreeSet<>();
        for (        MetadataValue mv : bundle.getValues()) {
          newValues.add(mv.copy());
        }
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}",0.9768115942028984
188195,"private void updateFormOrXML(){
  if (bundle != null && bundle.getValues() != null && !bundle.getValues().isEmpty()) {
    if (!bundle.isSimilar()) {
      formSimilarDanger.setVisible(true);
    }
 else {
      formSimilarDanger.setVisible(false);
    }
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
      }
    }
  }
 else {
    inXML=true;
    formSimilarDanger.setVisible(false);
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getXml());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
    metadataTextFromForm=null;
  }
}","private void updateFormOrXML(){
  if (bundle != null && bundle.getValues() != null && !bundle.getValues().isEmpty()) {
    if (!bundle.isSimilar()) {
      formSimilarDanger.setVisible(true);
    }
 else {
      formSimilarDanger.setVisible(false);
    }
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
      }
    }
  }
 else {
    setInXML(true);
    formSimilarDanger.setVisible(false);
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getXml());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
    metadataTextFromForm=null;
  }
}",0.9945242984257358
188196,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  Set<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new TreeSet<>();
    for (    MetadataValue mv : bundle.getValues()) {
      newValues.add(mv.copy());
    }
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  metadataXML.setTitle(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null;
      String version=null;
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          Set<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new TreeSet<>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.copy());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  Set<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new TreeSet<>();
    for (    MetadataValue mv : bundle.getValues()) {
      newValues.add(mv.copy());
    }
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  metadataXML.setTitle(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      setInXML(false);
      String typeString=null;
      String version=null;
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          Set<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new TreeSet<>();
            for (            MetadataValue mv : bundle.getValues()) {
              newValues.add(mv.copy());
            }
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9927022096087572
188197,"public void setInXML(boolean inXML){
  this.inXML=inXML;
  if (inXML) {
    showXmlIconXML.setVisible(false);
    showXmlIconForm.setVisible(true);
  }
 else {
    showXmlIconXML.setVisible(true);
    showXmlIconForm.setVisible(false);
  }
}","public void setInXML(boolean inXML){
  this.inXML=inXML;
  showXmlIconXML.setVisible(!inXML);
  showXmlIconForm.setVisible(inXML);
}",0.6702412868632708
188198,"private void setPermissions(final String name,final Set<String> directRoles,final Set<String> allRoles){
  permissionsPanel.init(new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean result){
      Set<String> indirectRoles=new HashSet<>(allRoles);
      indirectRoles.removeAll(directRoles);
      permissionsPanel.checkPermissions(directRoles,name.equals(RodaConstants.ADMINISTRATORS));
      permissionsPanel.checkPermissions(indirectRoles,true);
      WCAGUtilities.getInstance().makeAccessible(permissionsSelectPanel.getElement());
    }
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
      HistoryUtils.newHistory(MemberManagement.RESOLVER);
    }
  }
);
}","private void setPermissions(final String name,final Set<String> directRoles,final Set<String> allRoles){
  permissionsPanel.init(new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean result){
      Set<String> indirectRoles=new HashSet<>(allRoles);
      indirectRoles.removeAll(directRoles);
      permissionsPanel.checkPermissions(directRoles,RodaConstants.ADMINISTRATORS.equals(name));
      permissionsPanel.checkPermissions(indirectRoles,true);
      WCAGUtilities.getInstance().makeAccessible(permissionsSelectPanel.getElement());
    }
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
      HistoryUtils.newHistory(MemberManagement.RESOLVER);
    }
  }
);
}",0.984126984126984
188199,"@Override public void onSuccess(Boolean result){
  Set<String> indirectRoles=new HashSet<>(allRoles);
  indirectRoles.removeAll(directRoles);
  permissionsPanel.checkPermissions(directRoles,name.equals(RodaConstants.ADMINISTRATORS));
  permissionsPanel.checkPermissions(indirectRoles,true);
  WCAGUtilities.getInstance().makeAccessible(permissionsSelectPanel.getElement());
}","@Override public void onSuccess(Boolean result){
  Set<String> indirectRoles=new HashSet<>(allRoles);
  indirectRoles.removeAll(directRoles);
  permissionsPanel.checkPermissions(directRoles,RodaConstants.ADMINISTRATORS.equals(name));
  permissionsPanel.checkPermissions(indirectRoles,true);
  WCAGUtilities.getInstance().makeAccessible(permissionsSelectPanel.getElement());
}",0.968
188200,"@Override public void onClick(ClickEvent event){
  JavascriptUtils.scrollToTop();
}","@Override public void onClick(ClickEvent event){
  if (!relation.getObjectType().equals(RelationObjectType.WEB)) {
    JavascriptUtils.scrollToTop();
  }
}",0.6974789915966386
188201,"private Widget createRelationViewer(RepresentationInformationRelation relation){
  Widget widgetToAdd=null;
  String title=StringUtils.isNotBlank(relation.getTitle()) ? relation.getTitle() : relation.getLink();
  if (relation.getObjectType().equals(RelationObjectType.TEXT)) {
    widgetToAdd=new Label(title);
  }
 else {
    Anchor anchor=null;
    if (relation.getObjectType().equals(RelationObjectType.AIP)) {
      anchor=new Anchor(title,HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryBrowse(relation.getLink())));
    }
 else     if (relation.getObjectType().equals(RelationObjectType.REPRESENTATION_INFORMATION)) {
      List<String> history=new ArrayList<>();
      history.addAll(ShowRepresentationInformation.RESOLVER.getHistoryPath());
      history.add(relation.getLink());
      anchor=new Anchor(title,HistoryUtils.createHistoryHashLink(history));
    }
 else     if (relation.getObjectType().equals(RelationObjectType.WEB)) {
      anchor=new Anchor(title,relation.getLink());
    }
    if (anchor != null) {
      anchor.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          JavascriptUtils.scrollToTop();
        }
      }
);
      widgetToAdd=anchor;
    }
  }
  return widgetToAdd;
}","private Widget createRelationViewer(RepresentationInformationRelation relation){
  Widget widgetToAdd=null;
  String title=StringUtils.isNotBlank(relation.getTitle()) ? relation.getTitle() : relation.getLink();
  if (relation.getObjectType().equals(RelationObjectType.TEXT)) {
    widgetToAdd=new Label(title);
  }
 else {
    Anchor anchor=null;
    if (relation.getObjectType().equals(RelationObjectType.AIP)) {
      anchor=new Anchor(title,HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryBrowse(relation.getLink())));
    }
 else     if (relation.getObjectType().equals(RelationObjectType.REPRESENTATION_INFORMATION)) {
      List<String> history=new ArrayList<>();
      history.addAll(ShowRepresentationInformation.RESOLVER.getHistoryPath());
      history.add(relation.getLink());
      anchor=new Anchor(title,HistoryUtils.createHistoryHashLink(history));
    }
 else     if (relation.getObjectType().equals(RelationObjectType.WEB)) {
      anchor=new Anchor(title,relation.getLink());
      anchor.getElement().setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (anchor != null) {
      anchor.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          if (!relation.getObjectType().equals(RelationObjectType.WEB)) {
            JavascriptUtils.scrollToTop();
          }
        }
      }
);
      widgetToAdd=anchor;
    }
  }
  return widgetToAdd;
}",0.9390469154045068
188202,"public static SolrInputDocument riskToSolrDocument(Risk risk,int incidences){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.INDEX_UUID,risk.getId());
  doc.addField(RodaConstants.RISK_ID,risk.getId());
  doc.addField(RodaConstants.RISK_NAME,risk.getName());
  doc.addField(RodaConstants.RISK_DESCRIPTION,risk.getDescription());
  doc.addField(RodaConstants.RISK_IDENTIFIED_ON,risk.getIdentifiedOn());
  doc.addField(RodaConstants.RISK_IDENTIFIED_BY,risk.getIdentifiedBy());
  doc.addField(RodaConstants.RISK_CATEGORY,risk.getCategory());
  doc.addField(RodaConstants.RISK_NOTES,risk.getNotes());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY,risk.getPreMitigationProbability());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_IMPACT,risk.getPreMitigationImpact());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY,risk.getPreMitigationSeverity());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL,risk.getPreMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_NOTES,risk.getPreMitigationNotes());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_PROBABILITY,risk.getPostMitigationProbability());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_IMPACT,risk.getPostMitigationImpact());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_SEVERITY,risk.getPostMitigationSeverity());
  if (risk.getPostMitigationSeverityLevel() != null) {
    doc.addField(RodaConstants.RISK_POST_MITIGATION_SEVERITY_LEVEL,risk.getPostMitigationSeverityLevel().toString());
  }
  doc.addField(RodaConstants.RISK_CURRENT_SEVERITY_LEVEL,risk.getCurrentSeverityLevel());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_NOTES,risk.getPostMitigationNotes());
  doc.addField(RodaConstants.RISK_MITIGATION_STRATEGY,risk.getMitigationStrategy());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER_TYPE,risk.getMitigationOwnerType());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER,risk.getMitigationOwner());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE,risk.getMitigationRelatedEventIdentifierType());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE,risk.getMitigationRelatedEventIdentifierValue());
  doc.addField(RodaConstants.RISK_CREATED_ON,risk.getCreatedOn());
  doc.addField(RodaConstants.RISK_CREATED_BY,risk.getCreatedBy());
  doc.addField(RodaConstants.RISK_UPDATED_ON,risk.getUpdatedOn());
  doc.addField(RodaConstants.RISK_UPDATED_BY,risk.getUpdatedBy());
  if (risk instanceof IndexedRisk) {
    doc.addField(RodaConstants.RISK_INCIDENCES_COUNT,((IndexedRisk)risk).getIncidencesCount());
    doc.addField(RodaConstants.RISK_UNMITIGATED_INCIDENCES_COUNT,((IndexedRisk)risk).getUnmitigatedIncidencesCount());
  }
 else {
    doc.addField(RodaConstants.RISK_INCIDENCES_COUNT,incidences);
    doc.addField(RodaConstants.RISK_UNMITIGATED_INCIDENCES_COUNT,incidences);
  }
  return doc;
}","public static SolrInputDocument riskToSolrDocument(Risk risk,int incidences){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.INDEX_UUID,risk.getId());
  doc.addField(RodaConstants.RISK_ID,risk.getId());
  doc.addField(RodaConstants.RISK_NAME,risk.getName());
  doc.addField(RodaConstants.RISK_DESCRIPTION,risk.getDescription());
  doc.addField(RodaConstants.RISK_IDENTIFIED_ON,risk.getIdentifiedOn());
  doc.addField(RodaConstants.RISK_IDENTIFIED_BY,risk.getIdentifiedBy());
  doc.addField(RodaConstants.RISK_CATEGORY,risk.getCategory());
  doc.addField(RodaConstants.RISK_NOTES,risk.getNotes());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY,risk.getPreMitigationProbability());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_IMPACT,risk.getPreMitigationImpact());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY,risk.getPreMitigationSeverity());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL,risk.getPreMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_NOTES,risk.getPreMitigationNotes());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_PROBABILITY,risk.getPostMitigationProbability());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_IMPACT,risk.getPostMitigationImpact());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_SEVERITY,risk.getPostMitigationSeverity());
  if (risk.getPostMitigationSeverityLevel() != null) {
    doc.addField(RodaConstants.RISK_POST_MITIGATION_SEVERITY_LEVEL,risk.getPostMitigationSeverityLevel().toString());
  }
  doc.addField(RodaConstants.RISK_CURRENT_SEVERITY_LEVEL,risk.getCurrentSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_POST_MITIGATION_NOTES,risk.getPostMitigationNotes());
  doc.addField(RodaConstants.RISK_MITIGATION_STRATEGY,risk.getMitigationStrategy());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER_TYPE,risk.getMitigationOwnerType());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER,risk.getMitigationOwner());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE,risk.getMitigationRelatedEventIdentifierType());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE,risk.getMitigationRelatedEventIdentifierValue());
  doc.addField(RodaConstants.RISK_CREATED_ON,risk.getCreatedOn());
  doc.addField(RodaConstants.RISK_CREATED_BY,risk.getCreatedBy());
  doc.addField(RodaConstants.RISK_UPDATED_ON,risk.getUpdatedOn());
  doc.addField(RodaConstants.RISK_UPDATED_BY,risk.getUpdatedBy());
  if (risk instanceof IndexedRisk) {
    doc.addField(RodaConstants.RISK_INCIDENCES_COUNT,((IndexedRisk)risk).getIncidencesCount());
    doc.addField(RodaConstants.RISK_UNMITIGATED_INCIDENCES_COUNT,((IndexedRisk)risk).getUnmitigatedIncidencesCount());
  }
 else {
    doc.addField(RodaConstants.RISK_INCIDENCES_COUNT,incidences);
    doc.addField(RodaConstants.RISK_UNMITIGATED_INCIDENCES_COUNT,incidences);
  }
  return doc;
}",0.99813401187447
188203,"public static SolrInputDocument aipToSolrInputDocument(AIP aip,List<String> ancestors,ModelService model,boolean safemode) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.INDEX_UUID,aip.getId());
  doc.addField(RodaConstants.AIP_ID,aip.getId());
  doc.addField(RodaConstants.AIP_PARENT_ID,aip.getParentId());
  doc.addField(RodaConstants.STATE,aip.getState().toString());
  doc.addField(RodaConstants.AIP_TYPE,aip.getType());
  doc.addField(RodaConstants.AIP_CREATED_ON,aip.getCreatedOn());
  doc.addField(RodaConstants.AIP_CREATED_BY,aip.getCreatedBy());
  doc.addField(RodaConstants.AIP_UPDATED_ON,aip.getUpdatedOn());
  doc.addField(RodaConstants.AIP_UPDATED_BY,aip.getUpdatedBy());
  doc.addField(RodaConstants.INGEST_SIP_IDS,aip.getIngestSIPIds());
  doc.addField(RodaConstants.INGEST_JOB_ID,aip.getIngestJobId());
  doc.addField(RodaConstants.INGEST_UPDATE_JOB_IDS,aip.getIngestUpdateJobIds());
  ArrayList<String> allJobIds=new ArrayList<>(aip.getIngestUpdateJobIds());
  allJobIds.add(aip.getIngestJobId());
  doc.addField(RodaConstants.ALL_INGEST_JOB_IDS,allJobIds);
  doc.addField(RodaConstants.AIP_ANCESTORS,ancestors);
  List<String> descriptiveMetadataIds=aip.getDescriptiveMetadata().stream().map(dm -> dm.getId()).collect(Collectors.toList());
  doc.addField(RodaConstants.AIP_DESCRIPTIVE_METADATA_ID,descriptiveMetadataIds);
  List<String> representationIds=aip.getRepresentations().stream().map(r -> r.getId()).collect(Collectors.toList());
  doc.addField(RodaConstants.AIP_REPRESENTATION_ID,representationIds);
  doc.addField(RodaConstants.AIP_HAS_REPRESENTATIONS,!representationIds.isEmpty());
  setPermissions(aip.getPermissions(),doc);
  doc.addField(RodaConstants.AIP_GHOST,aip.getGhost() != null ? aip.getGhost() : false);
  if (!safemode) {
    indexDescriptiveMetadataFields(model,aip.getId(),null,aip.getDescriptiveMetadata(),doc);
  }
  StorageService storage=model.getStorage();
  Long numberOfSubmissionFiles;
  try {
    Directory submissionDirectory=model.getSubmissionDirectory(aip.getId());
    numberOfSubmissionFiles=storage.countResourcesUnderDirectory(submissionDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfSubmissionFiles=0L;
  }
  Long numberOfDocumentationFiles;
  try {
    Directory documentationDirectory=model.getDocumentationDirectory(aip.getId());
    numberOfDocumentationFiles=storage.countResourcesUnderDirectory(documentationDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfDocumentationFiles=0L;
  }
  Long numberOfSchemaFiles;
  try {
    Directory schemasDirectory=model.getSchemasDirectory(aip.getId());
    numberOfSchemaFiles=storage.countResourcesUnderDirectory(schemasDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfSchemaFiles=0L;
  }
  doc.addField(RodaConstants.AIP_NUMBER_OF_SUBMISSION_FILES,numberOfSubmissionFiles);
  doc.addField(RodaConstants.AIP_NUMBER_OF_DOCUMENTATION_FILES,numberOfDocumentationFiles);
  doc.addField(RodaConstants.AIP_NUMBER_OF_SCHEMA_FILES,numberOfSchemaFiles);
  return doc;
}","public static SolrInputDocument aipToSolrInputDocument(AIP aip,List<String> ancestors,ModelService model,boolean safemode) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.INDEX_UUID,aip.getId());
  doc.addField(RodaConstants.AIP_ID,aip.getId());
  doc.addField(RodaConstants.AIP_PARENT_ID,aip.getParentId());
  doc.addField(RodaConstants.STATE,aip.getState().toString());
  doc.addField(RodaConstants.AIP_TYPE,aip.getType());
  doc.addField(RodaConstants.AIP_CREATED_ON,aip.getCreatedOn());
  doc.addField(RodaConstants.AIP_CREATED_BY,aip.getCreatedBy());
  doc.addField(RodaConstants.AIP_UPDATED_ON,aip.getUpdatedOn());
  doc.addField(RodaConstants.AIP_UPDATED_BY,aip.getUpdatedBy());
  doc.addField(RodaConstants.INGEST_SIP_IDS,aip.getIngestSIPIds());
  doc.addField(RodaConstants.INGEST_JOB_ID,aip.getIngestJobId());
  doc.addField(RodaConstants.INGEST_UPDATE_JOB_IDS,aip.getIngestUpdateJobIds());
  doc.addField(RodaConstants.AIP_ANCESTORS,ancestors);
  List<String> descriptiveMetadataIds=aip.getDescriptiveMetadata().stream().map(dm -> dm.getId()).collect(Collectors.toList());
  doc.addField(RodaConstants.AIP_DESCRIPTIVE_METADATA_ID,descriptiveMetadataIds);
  List<String> representationIds=aip.getRepresentations().stream().map(r -> r.getId()).collect(Collectors.toList());
  doc.addField(RodaConstants.AIP_REPRESENTATION_ID,representationIds);
  doc.addField(RodaConstants.AIP_HAS_REPRESENTATIONS,!representationIds.isEmpty());
  setPermissions(aip.getPermissions(),doc);
  doc.addField(RodaConstants.AIP_GHOST,aip.getGhost() != null ? aip.getGhost() : false);
  if (!safemode) {
    indexDescriptiveMetadataFields(model,aip.getId(),null,aip.getDescriptiveMetadata(),doc);
  }
  StorageService storage=model.getStorage();
  Long numberOfSubmissionFiles;
  try {
    Directory submissionDirectory=model.getSubmissionDirectory(aip.getId());
    numberOfSubmissionFiles=storage.countResourcesUnderDirectory(submissionDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfSubmissionFiles=0L;
  }
  Long numberOfDocumentationFiles;
  try {
    Directory documentationDirectory=model.getDocumentationDirectory(aip.getId());
    numberOfDocumentationFiles=storage.countResourcesUnderDirectory(documentationDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfDocumentationFiles=0L;
  }
  Long numberOfSchemaFiles;
  try {
    Directory schemasDirectory=model.getSchemasDirectory(aip.getId());
    numberOfSchemaFiles=storage.countResourcesUnderDirectory(schemasDirectory.getStoragePath(),true);
  }
 catch (  NotFoundException e) {
    numberOfSchemaFiles=0L;
  }
  doc.addField(RodaConstants.AIP_NUMBER_OF_SUBMISSION_FILES,numberOfSubmissionFiles);
  doc.addField(RodaConstants.AIP_NUMBER_OF_DOCUMENTATION_FILES,numberOfDocumentationFiles);
  doc.addField(RodaConstants.AIP_NUMBER_OF_SCHEMA_FILES,numberOfSchemaFiles);
  return doc;
}",0.9719146204461564
188204,"public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  gettingFilterResults=true;
  createPanel.setVisible(false);
  resultsPanel.setVisible(false);
  if (historyTokens.size() == 2) {
    Filter filter=createFilterAndSubtitleFromHistoryTokens(historyTokens);
    String[] parts=RepresentationInformationUtils.breakFilterIntoParts(historyTokens.get(1));
    createPanelTitle.setHTML(messages.representationInformationNoAssociations(parts[0],parts[1],parts[2]));
    resultsPanelTitle.setHTML(messages.representationInformationAssociatedWith(parts[0],parts[1],parts[2]));
    description.setHTML(messages.representationInformationAssociatedWithDescription(parts[0],parts[1],parts[2]));
    addWithAssociationDialogTitle=messages.representationInformationAssociateWith(parts[0],parts[1],parts[2]);
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    HistoryUtils.newHistory(RESOLVER);
    callback.onSuccess(null);
  }
}","public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  gettingFilterResults=true;
  createPanel.setVisible(false);
  resultsPanel.setVisible(false);
  if (historyTokens.size() == 2) {
    Filter filter=createFilterFromHistoryTokens(historyTokens);
    String[] parts=RepresentationInformationUtils.breakFilterIntoParts(historyTokens.get(1));
    createPanelTitle.setHTML(messages.representationInformationNoAssociations(parts[0],parts[1],parts[2]));
    resultsPanelTitle.setHTML(messages.representationInformationAssociatedWith(parts[0],parts[1],parts[2]));
    description.setHTML(messages.representationInformationAssociatedWithDescription(parts[0],parts[1],parts[2]));
    addWithAssociationDialogTitle=messages.representationInformationAssociateWith(parts[0],parts[1],parts[2]);
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    HistoryUtils.newHistory(RESOLVER);
    callback.onSuccess(null);
  }
}",0.9948670088660756
188205,"public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  if (historyTokens.isEmpty()) {
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    String basePage=historyTokens.remove(0);
    if (ShowRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      ShowRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (CreateRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      CreateRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (EditRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      EditRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (RepresentationInformationAssociations.RESOLVER.getHistoryToken().equals(basePage)) {
      RepresentationInformationAssociations.RESOLVER.resolve(historyTokens,callback);
    }
 else {
      HistoryUtils.newHistory(RESOLVER);
      callback.onSuccess(null);
    }
  }
}","public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  if (historyTokens.isEmpty()) {
    filter.setParameters(new ArrayList<>());
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    String basePage=historyTokens.remove(0);
    if (ShowRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      ShowRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (CreateRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      CreateRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (EditRepresentationInformation.RESOLVER.getHistoryToken().equals(basePage)) {
      EditRepresentationInformation.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (RepresentationInformationAssociations.RESOLVER.getHistoryToken().equals(basePage)) {
      RepresentationInformationAssociations.RESOLVER.resolve(historyTokens,callback);
    }
 else     if (Search.RESOLVER.getHistoryToken().equals(basePage)) {
      setFilterFromHistoryTokens(historyTokens);
      searchPanel.setDefaultFilter(filter,true);
      representationInformationList.setFilter(filter);
      searchPanel.clearSearchInputBox();
      callback.onSuccess(this);
    }
 else {
      HistoryUtils.newHistory(RESOLVER);
      callback.onSuccess(null);
    }
  }
}",0.820493358633776
188206,"public void initElements(){
  HTMLPanel itemIconHtmlPanel=new HTMLPanel(""String_Node_Str"");
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationInformationIcon.setWidget(itemIconHtmlPanel);
  representationInformationTitle.setText(ri.getName());
  representationInformationTitle.removeStyleName(""String_Node_Str"");
  representationInformationIcon.getParent().removeStyleName(""String_Node_Str"");
  representationInformationId.setText(messages.representationInformationIdentifier() + ""String_Node_Str"" + ri.getId());
  if (ri.getCreatedOn() != null && StringUtils.isNotBlank(ri.getCreatedBy())) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(ri.getCreatedOn()),ri.getCreatedBy()));
  }
  if (ri.getUpdatedOn() != null && StringUtils.isNotBlank(ri.getUpdatedBy())) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(ri.getUpdatedOn()),ri.getUpdatedBy()));
  }
  representationInformationDescriptionValue.setHTML(ri.getDescription());
  representationInformationDescriptionKey.setVisible(StringUtils.isNotBlank(ri.getDescription()));
  representationInformationFamilyKey.setVisible(StringUtils.isNotBlank(ri.getFamily()));
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(ri.getFamily(),LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    String familyTranslation){
      representationInformationFamilyValue.setText(familyTranslation);
    }
  }
);
  List<String> tagsList=ri.getTags();
  representationInformationTagValue.setVisible(tagsList != null && !tagsList.isEmpty());
  representationInformationTagKey.setVisible(tagsList != null && !tagsList.isEmpty());
  if (tagsList != null) {
    for (    final String category : tagsList) {
      InlineHTML parPanel=new InlineHTML();
      parPanel.setHTML(""String_Node_Str"" + messages.representationInformationListItems(category) + ""String_Node_Str"");
      parPanel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          List<String> history=new ArrayList<>();
          history.addAll(RepresentationInformationNetwork.RESOLVER.getHistoryPath());
          history.add(RepresentationInformationAssociations.RESOLVER.getHistoryToken());
          history.add(RodaConstants.REPRESENTATION_INFORMATION_TAGS);
          history.add(category);
          HistoryUtils.newHistory(history);
        }
      }
);
      representationInformationTagValue.add(parPanel);
    }
  }
  if (ri.getSupport() != null) {
    representationInformationSupportValue.setText(messages.representationInformationSupportValue(ri.getSupport().toString()));
    representationInformationSupportKey.setVisible(true);
  }
 else {
    representationInformationSupportKey.setVisible(false);
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      HtmlSnippetUtils.createExtraShow(extras,extra.getFamilyValues().get(ri.getFamily()),false);
    }
  }
);
  initRelations();
}","public void initElements(){
  HTMLPanel itemIconHtmlPanel=new HTMLPanel(""String_Node_Str"");
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationInformationIcon.setWidget(itemIconHtmlPanel);
  representationInformationTitle.setText(ri.getName());
  representationInformationTitle.removeStyleName(""String_Node_Str"");
  representationInformationIcon.getParent().removeStyleName(""String_Node_Str"");
  representationInformationId.setText(messages.representationInformationIdentifier() + ""String_Node_Str"" + ri.getId());
  if (ri.getCreatedOn() != null && StringUtils.isNotBlank(ri.getCreatedBy())) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(ri.getCreatedOn()),ri.getCreatedBy()));
  }
  if (ri.getUpdatedOn() != null && StringUtils.isNotBlank(ri.getUpdatedBy())) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(ri.getUpdatedOn()),ri.getUpdatedBy()));
  }
  representationInformationDescriptionValue.setHTML(ri.getDescription());
  representationInformationDescriptionKey.setVisible(StringUtils.isNotBlank(ri.getDescription()));
  representationInformationFamilyKey.setVisible(StringUtils.isNotBlank(ri.getFamily()));
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(ri.getFamily(),LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    String familyTranslation){
      representationInformationFamilyValue.setText(familyTranslation);
    }
  }
);
  List<String> tagsList=ri.getTags();
  representationInformationTagValue.setVisible(tagsList != null && !tagsList.isEmpty());
  representationInformationTagKey.setVisible(tagsList != null && !tagsList.isEmpty());
  if (tagsList != null) {
    for (    final String category : tagsList) {
      InlineHTML parPanel=new InlineHTML();
      parPanel.setHTML(""String_Node_Str"" + messages.representationInformationListItems(category) + ""String_Node_Str"");
      parPanel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          List<String> history=new ArrayList<>();
          history.addAll(RepresentationInformationNetwork.RESOLVER.getHistoryPath());
          history.add(Search.RESOLVER.getHistoryToken());
          history.add(RodaConstants.REPRESENTATION_INFORMATION_TAGS);
          history.add(category);
          HistoryUtils.newHistory(history);
        }
      }
);
      representationInformationTagValue.add(parPanel);
    }
  }
  if (ri.getSupport() != null) {
    representationInformationSupportValue.setText(messages.representationInformationSupportValue(ri.getSupport().toString()));
    representationInformationSupportKey.setVisible(true);
  }
 else {
    representationInformationSupportKey.setVisible(false);
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      HtmlSnippetUtils.createExtraShow(extras,extra.getFamilyValues().get(ri.getFamily()),false);
    }
  }
);
  initRelations();
}",0.9937834321237532
188207,"String ingestTransferItemInfo(Date creationDate,String readableFileSize);","String ingestTransferItemInfo(String creationDate,String readableFileSize);",0.945945945945946
188208,"public void viewAction(){
  IndexedPreservationEvent event=bundle.getEvent();
  eventIdValue.setText(event.getId());
  eventTypeLabel.setText(event.getEventType());
  eventDetailLabel.setText(event.getEventDetail());
  eventDatetimeLabel.setText(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT).format(event.getEventDateTime()));
  Map<String,IndexedPreservationAgent> agents=bundle.getAgents();
  boolean hasAgents=false;
  for (  LinkingIdentifier agentId : event.getLinkingAgentIds()) {
    IndexedPreservationAgent agent=agents.get(agentId.getValue());
    if (agent != null) {
      FlowPanel layout=createAgentPanel(agentId,agent);
      agentsPanel.add(layout);
      hasAgents=true;
    }
  }
  agentsHeader.setVisible(hasAgents);
  boolean showSourceObjects=false;
  for (  LinkingIdentifier sourceObjectId : event.getSourcesObjectIds()) {
    if (sourceObjectId.getRoles() != null && sourceObjectId.getRoles().contains(RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE)) {
      addObjectPanel(sourceObjectId,bundle,sourceObjectsPanel);
      showSourceObjects=true;
    }
  }
  sourceObjectsHeader.setVisible(showSourceObjects);
  sourceObjectsPanel.setVisible(showSourceObjects);
  boolean showOutcomeObjects=false;
  for (  LinkingIdentifier outcomeObjectId : event.getOutcomeObjectIds()) {
    if (outcomeObjectId.getRoles() != null && outcomeObjectId.getRoles().contains(RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME)) {
      addObjectPanel(outcomeObjectId,bundle,outcomeObjectsPanel);
      showOutcomeObjects=true;
    }
  }
  outcomeObjectsHeader.setVisible(showOutcomeObjects);
  outcomeObjectsPanel.setVisible(showOutcomeObjects);
  PluginState eventOutcome=PluginState.valueOf(event.getEventOutcome());
  eventOutcomeLabel.setText(messages.pluginStateMessage(eventOutcome));
  if (PluginState.SUCCESS.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
 else   if (PluginState.FAILURE.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
 else   if (PluginState.PARTIAL_SUCCESS.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
  getEventDetailsHTML(new AsyncCallback<SafeHtml>(){
    @Override public void onFailure(    Throwable caught){
      if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
        Toast.showError(messages.errorLoadingPreservationEventDetails(caught.getMessage()));
      }
    }
    @Override public void onSuccess(    SafeHtml result){
      eventOutcomeDetails.setHTML(result);
      outcomeDetailHeader.setVisible(result.asString().length() > 0);
    }
  }
);
}","public void viewAction(){
  IndexedPreservationEvent event=bundle.getEvent();
  eventIdValue.setText(event.getId());
  eventTypeLabel.setText(event.getEventType());
  eventDetailLabel.setText(event.getEventDetail());
  eventDatetimeLabel.setText(Humanize.formatDateTime(event.getEventDateTime()));
  Map<String,IndexedPreservationAgent> agents=bundle.getAgents();
  boolean hasAgents=false;
  for (  LinkingIdentifier agentId : event.getLinkingAgentIds()) {
    IndexedPreservationAgent agent=agents.get(agentId.getValue());
    if (agent != null) {
      FlowPanel layout=createAgentPanel(agentId,agent);
      agentsPanel.add(layout);
      hasAgents=true;
    }
  }
  agentsHeader.setVisible(hasAgents);
  boolean showSourceObjects=false;
  for (  LinkingIdentifier sourceObjectId : event.getSourcesObjectIds()) {
    if (sourceObjectId.getRoles() != null && sourceObjectId.getRoles().contains(RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE)) {
      addObjectPanel(sourceObjectId,bundle,sourceObjectsPanel);
      showSourceObjects=true;
    }
  }
  sourceObjectsHeader.setVisible(showSourceObjects);
  sourceObjectsPanel.setVisible(showSourceObjects);
  boolean showOutcomeObjects=false;
  for (  LinkingIdentifier outcomeObjectId : event.getOutcomeObjectIds()) {
    if (outcomeObjectId.getRoles() != null && outcomeObjectId.getRoles().contains(RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME)) {
      addObjectPanel(outcomeObjectId,bundle,outcomeObjectsPanel);
      showOutcomeObjects=true;
    }
  }
  outcomeObjectsHeader.setVisible(showOutcomeObjects);
  outcomeObjectsPanel.setVisible(showOutcomeObjects);
  PluginState eventOutcome=PluginState.valueOf(event.getEventOutcome());
  eventOutcomeLabel.setText(messages.pluginStateMessage(eventOutcome));
  if (PluginState.SUCCESS.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
 else   if (PluginState.FAILURE.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
 else   if (PluginState.PARTIAL_SUCCESS.equals(eventOutcome)) {
    eventOutcomeLabel.setStyleName(""String_Node_Str"");
  }
  getEventDetailsHTML(new AsyncCallback<SafeHtml>(){
    @Override public void onFailure(    Throwable caught){
      if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
        Toast.showError(messages.errorLoadingPreservationEventDetails(caught.getMessage()));
      }
    }
    @Override public void onSuccess(    SafeHtml result){
      eventOutcomeDetails.setHTML(result);
      outcomeDetailHeader.setVisible(result.asString().length() > 0);
    }
  }
);
}",0.9852122143268676
188209,"@Override protected void configureDisplay(CellTable<IndexedDIP> display){
  dateCreated=new Column<IndexedDIP,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    IndexedDIP dip){
      return dip != null ? dip.getDateCreated() : null;
    }
  }
;
  lastModified=new Column<IndexedDIP,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    IndexedDIP dip){
      return dip != null ? dip.getLastModified() : null;
    }
  }
;
  titleColumn=new TextColumn<IndexedDIP>(){
    @Override public String getValue(    IndexedDIP dip){
      return dip != null ? dip.getTitle() : null;
    }
  }
;
  titleColumn.setSortable(true);
  dateCreated.setSortable(true);
  lastModified.setSortable(true);
  display.addColumn(titleColumn,messages.aipGenericTitle());
  display.addColumn(dateCreated,messages.objectCreatedDate());
  display.addColumn(lastModified,messages.objectLastModified());
  Label emptyInfo=new Label(messages.noItemsToDisplay());
  display.setEmptyTableWidget(emptyInfo);
  display.getColumnSortList().push(new ColumnSortInfo(titleColumn,true));
  display.setColumnWidth(dateCreated,13.0,Unit.EM);
  display.setColumnWidth(lastModified,13.0,Unit.EM);
  dateCreated.setCellStyleNames(""String_Node_Str"");
  lastModified.setCellStyleNames(""String_Node_Str"");
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<IndexedDIP> display){
  dateCreated=new Column<IndexedDIP,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedDIP dip){
      return dip != null ? dip.getDateCreated() : null;
    }
  }
;
  lastModified=new Column<IndexedDIP,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedDIP dip){
      return dip != null ? dip.getLastModified() : null;
    }
  }
;
  titleColumn=new TextColumn<IndexedDIP>(){
    @Override public String getValue(    IndexedDIP dip){
      return dip != null ? dip.getTitle() : null;
    }
  }
;
  titleColumn.setSortable(true);
  dateCreated.setSortable(true);
  lastModified.setSortable(true);
  display.addColumn(titleColumn,messages.aipGenericTitle());
  display.addColumn(dateCreated,messages.objectCreatedDate());
  display.addColumn(lastModified,messages.objectLastModified());
  Label emptyInfo=new Label(messages.noItemsToDisplay());
  display.setEmptyTableWidget(emptyInfo);
  display.getColumnSortList().push(new ColumnSortInfo(titleColumn,true));
  display.setColumnWidth(dateCreated,13.0,Unit.EM);
  display.setColumnWidth(lastModified,13.0,Unit.EM);
  dateCreated.setCellStyleNames(""String_Node_Str"");
  lastModified.setCellStyleNames(""String_Node_Str"");
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
}",0.9662618083670717
188210,"@Override protected void configureDisplay(CellTable<LogEntry> display){
  dateColumn=new Column<LogEntry,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getDatetime() : null;
    }
  }
;
  actionComponentColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry entry){
      return SafeHtmlUtils.fromSafeConstant(translate(RodaConstants.LOG_ACTION_COMPONENT,entry.getActionComponent()));
    }
  }
;
  actionMethodColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      if (logEntry == null) {
        return null;
      }
      return StringUtils.getPrettifiedActionMethod(logEntry.getActionMethod());
    }
  }
;
  usernameColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getUsername() : null;
    }
  }
;
  durationColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? Humanize.durationMillisToShortDHMS(logEntry.getDuration()) : null;
    }
  }
;
  addressColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getAddress() : null;
    }
  }
;
  stateColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry logEntry){
      return HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState());
    }
  }
;
  dateColumn.setSortable(true);
  actionComponentColumn.setSortable(true);
  actionMethodColumn.setSortable(true);
  usernameColumn.setSortable(true);
  durationColumn.setSortable(true);
  addressColumn.setSortable(true);
  stateColumn.setSortable(true);
  addColumn(dateColumn,messages.logEntryDatetimeExtended(),true,false,14);
  addColumn(actionComponentColumn,messages.logEntryComponent(),true,false);
  addColumn(actionMethodColumn,messages.logEntryMethod(),true,false);
  addColumn(usernameColumn,messages.logEntryUser(),true,false);
  addColumn(durationColumn,messages.logEntryDuration(),true,true,5);
  addColumn(addressColumn,messages.logEntryAddress(),true,false);
  addColumn(stateColumn,messages.logEntryState(),true,false);
  display.getColumnSortList().push(new ColumnSortInfo(dateColumn,false));
  addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<LogEntry> display){
  dateColumn=new Column<LogEntry,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getDatetime() : null;
    }
  }
;
  actionComponentColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry entry){
      return SafeHtmlUtils.fromSafeConstant(translate(RodaConstants.LOG_ACTION_COMPONENT,entry.getActionComponent()));
    }
  }
;
  actionMethodColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      if (logEntry == null) {
        return null;
      }
      return StringUtils.getPrettifiedActionMethod(logEntry.getActionMethod());
    }
  }
;
  usernameColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getUsername() : null;
    }
  }
;
  durationColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? Humanize.durationMillisToShortDHMS(logEntry.getDuration()) : null;
    }
  }
;
  addressColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getAddress() : null;
    }
  }
;
  stateColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry logEntry){
      return HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState());
    }
  }
;
  dateColumn.setSortable(true);
  actionComponentColumn.setSortable(true);
  actionMethodColumn.setSortable(true);
  usernameColumn.setSortable(true);
  durationColumn.setSortable(true);
  addressColumn.setSortable(true);
  stateColumn.setSortable(true);
  addColumn(dateColumn,messages.logEntryDate(),true,false,14);
  addColumn(actionComponentColumn,messages.logEntryComponent(),true,false);
  addColumn(actionMethodColumn,messages.logEntryMethod(),true,false);
  addColumn(usernameColumn,messages.logEntryUser(),true,false);
  addColumn(durationColumn,messages.logEntryDuration(),true,true,5);
  addColumn(addressColumn,messages.logEntryAddress(),true,false);
  addColumn(stateColumn,messages.logEntryState(),true,false);
  display.getColumnSortList().push(new ColumnSortInfo(dateColumn,false));
  addStyleName(""String_Node_Str"");
}",0.9879081015719468
188211,"@Override protected void configureDisplay(CellTable<Notification> display){
  fromUser=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? notification.getFromUser() : null;
    }
  }
;
  recipientUsers=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? StringUtils.prettyPrint(notification.getRecipientUsers()) : null;
    }
  }
;
  sentOn=new Column<Notification,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    Notification notification){
      return notification != null ? notification.getSentOn() : null;
    }
  }
;
  subject=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? notification.getSubject() : null;
    }
  }
;
  acknowledged=new Column<Notification,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    Notification notification){
      SafeHtml ret=null;
      if (notification != null) {
        if (notification.isAcknowledged()) {
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.showMessageAcknowledged() + ""String_Node_Str"");
        }
 else {
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.showMessageNotAcknowledged() + ""String_Node_Str"");
        }
      }
      return ret;
    }
  }
;
  state=new Column<Notification,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    Notification notification){
      SafeHtml ret=null;
      if (notification != null) {
        ret=HtmlSnippetUtils.getNotificationStateHTML(notification.getState());
      }
      return ret;
    }
  }
;
  fromUser.setSortable(true);
  sentOn.setSortable(true);
  subject.setSortable(true);
  acknowledged.setSortable(true);
  state.setSortable(true);
  addColumn(fromUser,messages.notificationFrom(),true,false);
  addColumn(recipientUsers,messages.notificationTo(),true,false);
  addColumn(sentOn,messages.notificationSentOn(),true,false,13);
  addColumn(subject,messages.notificationSubject(),true,false);
  addColumn(state,messages.notificationState(),true,false,7);
  addColumn(acknowledged,messages.notificationAck(),true,false,7);
  display.getColumnSortList().push(new ColumnSortInfo(sentOn,false));
  addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<Notification> display){
  fromUser=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? notification.getFromUser() : null;
    }
  }
;
  recipientUsers=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? StringUtils.prettyPrint(notification.getRecipientUsers()) : null;
    }
  }
;
  sentOn=new Column<Notification,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    Notification notification){
      return notification != null ? notification.getSentOn() : null;
    }
  }
;
  subject=new TextColumn<Notification>(){
    @Override public String getValue(    Notification notification){
      return notification != null ? notification.getSubject() : null;
    }
  }
;
  acknowledged=new Column<Notification,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    Notification notification){
      SafeHtml ret=null;
      if (notification != null) {
        if (notification.isAcknowledged()) {
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.showMessageAcknowledged() + ""String_Node_Str"");
        }
 else {
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.showMessageNotAcknowledged() + ""String_Node_Str"");
        }
      }
      return ret;
    }
  }
;
  state=new Column<Notification,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    Notification notification){
      SafeHtml ret=null;
      if (notification != null) {
        ret=HtmlSnippetUtils.getNotificationStateHTML(notification.getState());
      }
      return ret;
    }
  }
;
  fromUser.setSortable(true);
  sentOn.setSortable(true);
  subject.setSortable(true);
  acknowledged.setSortable(true);
  state.setSortable(true);
  addColumn(fromUser,messages.notificationFrom(),true,false);
  addColumn(recipientUsers,messages.notificationTo(),true,false);
  addColumn(sentOn,messages.notificationSentOn(),true,false,13);
  addColumn(subject,messages.notificationSubject(),true,false);
  addColumn(state,messages.notificationState(),true,false,7);
  addColumn(acknowledged,messages.notificationAck(),true,false,7);
  display.getColumnSortList().push(new ColumnSortInfo(sentOn,false));
  addStyleName(""String_Node_Str"");
}",0.9902834008097166
188212,"@Override protected void configureDisplay(CellTable<IndexedRepresentation> display){
  statesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      List<String> translatedStates=new ArrayList<>();
      for (      String state : rep.getRepresentationStates()) {
        translatedStates.add(messages.statusLabel(state));
      }
      return StringUtils.prettyPrint(translatedStates);
    }
  }
;
  typeColumn=new Column<IndexedRepresentation,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedRepresentation rep){
      SafeHtml ret;
      if (rep == null) {
        LOGGER.error(""String_Node_Str"");
        ret=null;
      }
 else {
        ret=DescriptionLevelUtils.getRepresentationTypeIcon(rep.getType(),true);
      }
      return ret;
    }
  }
;
  sizeInBytesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      return rep != null ? Humanize.readableFileSize(rep.getSizeInBytes()) : null;
    }
  }
;
  numberOfDataFilesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      return rep != null ? messages.numberOfFiles(rep.getNumberOfDataFiles(),rep.getNumberOfDataFolders()) : null;
    }
  }
;
  createdOnColumn=new Column<IndexedRepresentation,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    IndexedRepresentation representation){
      return representation != null ? representation.getCreatedOn() : null;
    }
  }
;
  updatedOnColumn=new Column<IndexedRepresentation,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    IndexedRepresentation representation){
      return representation != null ? representation.getUpdatedOn() : null;
    }
  }
;
  statesColumn.setSortable(true);
  typeColumn.setSortable(true);
  sizeInBytesColumn.setSortable(true);
  numberOfDataFilesColumn.setSortable(true);
  createdOnColumn.setSortable(true);
  updatedOnColumn.setSortable(true);
  display.addColumn(typeColumn,messages.representationType());
  display.addColumn(numberOfDataFilesColumn,messages.representationFiles());
  display.addColumn(sizeInBytesColumn,messages.representationSize());
  display.addColumn(statesColumn,messages.representationStatus());
  display.addColumn(createdOnColumn,messages.objectCreatedDate());
  display.addColumn(updatedOnColumn,messages.objectLastModified());
  Label emptyInfo=new Label(messages.noItemsToDisplay());
  display.setEmptyTableWidget(emptyInfo);
  statesColumn.setCellStyleNames(""String_Node_Str"");
  typeColumn.setCellStyleNames(""String_Node_Str"");
  sizeInBytesColumn.setCellStyleNames(""String_Node_Str"");
  numberOfDataFilesColumn.setCellStyleNames(""String_Node_Str"");
  createdOnColumn.setCellStyleNames(""String_Node_Str"");
  updatedOnColumn.setCellStyleNames(""String_Node_Str"");
  display.getColumnSortList().push(new ColumnSortInfo(typeColumn,true));
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<IndexedRepresentation> display){
  statesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      List<String> translatedStates=new ArrayList<>();
      for (      String state : rep.getRepresentationStates()) {
        translatedStates.add(messages.statusLabel(state));
      }
      return StringUtils.prettyPrint(translatedStates);
    }
  }
;
  typeColumn=new Column<IndexedRepresentation,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedRepresentation rep){
      SafeHtml ret;
      if (rep == null) {
        LOGGER.error(""String_Node_Str"");
        ret=null;
      }
 else {
        ret=DescriptionLevelUtils.getRepresentationTypeIcon(rep.getType(),true);
      }
      return ret;
    }
  }
;
  sizeInBytesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      return rep != null ? Humanize.readableFileSize(rep.getSizeInBytes()) : null;
    }
  }
;
  numberOfDataFilesColumn=new TextColumn<IndexedRepresentation>(){
    @Override public String getValue(    IndexedRepresentation rep){
      return rep != null ? messages.numberOfFiles(rep.getNumberOfDataFiles(),rep.getNumberOfDataFolders()) : null;
    }
  }
;
  createdOnColumn=new Column<IndexedRepresentation,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedRepresentation representation){
      return representation != null ? representation.getCreatedOn() : null;
    }
  }
;
  updatedOnColumn=new Column<IndexedRepresentation,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedRepresentation representation){
      return representation != null ? representation.getUpdatedOn() : null;
    }
  }
;
  statesColumn.setSortable(true);
  typeColumn.setSortable(true);
  sizeInBytesColumn.setSortable(true);
  numberOfDataFilesColumn.setSortable(true);
  createdOnColumn.setSortable(true);
  updatedOnColumn.setSortable(true);
  display.addColumn(typeColumn,messages.representationType());
  display.addColumn(numberOfDataFilesColumn,messages.representationFiles());
  display.addColumn(sizeInBytesColumn,messages.representationSize());
  display.addColumn(statesColumn,messages.representationStatus());
  display.addColumn(createdOnColumn,messages.objectCreatedDate());
  display.addColumn(updatedOnColumn,messages.objectLastModified());
  Label emptyInfo=new Label(messages.noItemsToDisplay());
  display.setEmptyTableWidget(emptyInfo);
  statesColumn.setCellStyleNames(""String_Node_Str"");
  typeColumn.setCellStyleNames(""String_Node_Str"");
  sizeInBytesColumn.setCellStyleNames(""String_Node_Str"");
  numberOfDataFilesColumn.setCellStyleNames(""String_Node_Str"");
  createdOnColumn.setCellStyleNames(""String_Node_Str"");
  updatedOnColumn.setCellStyleNames(""String_Node_Str"");
  display.getColumnSortList().push(new ColumnSortInfo(typeColumn,true));
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
}",0.984858044164038
188213,"@Override protected void configureDisplay(CellTable<RiskIncidence> display){
  objectColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      if (incidence != null) {
        if (incidence.getFileId() != null) {
          return incidence.getFileId();
        }
 else         if (incidence.getRepresentationId() != null) {
          return incidence.getRepresentationId();
        }
 else         if (incidence.getAipId() != null) {
          return incidence.getAipId();
        }
      }
      return null;
    }
  }
;
  objectTypeColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getObjectClass() : null;
    }
  }
;
  riskColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence.getRiskId();
    }
  }
;
  detectedOnColumn=new Column<RiskIncidence,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_LONG))){
    @Override public Date getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getDetectedOn() : null;
    }
  }
;
  detectedByColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getDetectedBy() : null;
    }
  }
;
  statusColumn=new Column<RiskIncidence,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    RiskIncidence incidence){
      SafeHtml ret=null;
      if (incidence != null) {
        ret=HtmlSnippetUtils.getStatusDefinition(incidence.getStatus());
      }
      return ret;
    }
  }
;
  objectColumn.setSortable(true);
  objectTypeColumn.setSortable(true);
  riskColumn.setSortable(true);
  detectedOnColumn.setSortable(true);
  detectedByColumn.setSortable(true);
  statusColumn.setSortable(true);
  addColumn(objectTypeColumn,messages.riskIncidenceObjectType(),true,false,8);
  addColumn(objectColumn,messages.riskIncidenceObjectId(),false,false);
  addColumn(riskColumn,messages.riskIncidenceRisk(),false,false);
  addColumn(detectedOnColumn,messages.riskIncidenceDetectedOn(),false,false);
  addColumn(detectedByColumn,messages.riskIncidenceDetectedBy(),false,false);
  addColumn(statusColumn,messages.riskIncidenceStatus(),false,false,7);
  display.getColumnSortList().push(new ColumnSortInfo(objectTypeColumn,true));
  addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<RiskIncidence> display){
  objectColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      if (incidence != null) {
        if (incidence.getFileId() != null) {
          return incidence.getFileId();
        }
 else         if (incidence.getRepresentationId() != null) {
          return incidence.getRepresentationId();
        }
 else         if (incidence.getAipId() != null) {
          return incidence.getAipId();
        }
      }
      return null;
    }
  }
;
  objectTypeColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getObjectClass() : null;
    }
  }
;
  riskColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence.getRiskId();
    }
  }
;
  detectedOnColumn=new Column<RiskIncidence,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getDetectedOn() : null;
    }
  }
;
  detectedByColumn=new TextColumn<RiskIncidence>(){
    @Override public String getValue(    RiskIncidence incidence){
      return incidence != null ? incidence.getDetectedBy() : null;
    }
  }
;
  statusColumn=new Column<RiskIncidence,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    RiskIncidence incidence){
      SafeHtml ret=null;
      if (incidence != null) {
        ret=HtmlSnippetUtils.getStatusDefinition(incidence.getStatus());
      }
      return ret;
    }
  }
;
  objectColumn.setSortable(true);
  objectTypeColumn.setSortable(true);
  riskColumn.setSortable(true);
  detectedOnColumn.setSortable(true);
  detectedByColumn.setSortable(true);
  statusColumn.setSortable(true);
  addColumn(objectTypeColumn,messages.riskIncidenceObjectType(),true,false,8);
  addColumn(objectColumn,messages.riskIncidenceObjectId(),false,false);
  addColumn(riskColumn,messages.riskIncidenceRisk(),false,false);
  addColumn(detectedOnColumn,messages.riskIncidenceDetectedOn(),false,false);
  addColumn(detectedByColumn,messages.riskIncidenceDetectedBy(),false,false);
  addColumn(statusColumn,messages.riskIncidenceStatus(),false,false,7);
  display.getColumnSortList().push(new ColumnSortInfo(objectTypeColumn,true));
  addStyleName(""String_Node_Str"");
}",0.9901388609378144
188214,"@Override protected void configureDisplay(CellTable<IndexedRisk> display){
  nameColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getName() : null;
    }
  }
;
  identifiedOnColumn=new Column<IndexedRisk,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_LONG))){
    @Override public Date getValue(    IndexedRisk risk){
      return risk != null ? risk.getIdentifiedOn() : null;
    }
  }
;
  categoryColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getCategory() : null;
    }
  }
;
  ownerColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getMitigationOwner() : null;
    }
  }
;
  severityColumn=new Column<IndexedRisk,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedRisk risk){
      SafeHtml ret=null;
      if (risk != null) {
        ret=HtmlSnippetUtils.getSeverityDefinition(risk.getCurrentSeverityLevel());
      }
      return ret;
    }
  }
;
  incidenceCounterColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return Integer.toString(risk.getIncidencesCount());
    }
  }
;
  notMitigatedIncidenceCounterColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return Integer.toString(risk.getUnmitigatedIncidencesCount());
    }
  }
;
  nameColumn.setSortable(true);
  identifiedOnColumn.setSortable(true);
  categoryColumn.setSortable(true);
  ownerColumn.setSortable(true);
  severityColumn.setSortable(true);
  incidenceCounterColumn.setSortable(true);
  notMitigatedIncidenceCounterColumn.setSortable(true);
  addColumn(nameColumn,messages.riskName(),false,false);
  addColumn(categoryColumn,messages.riskCategory(),false,false);
  addColumn(ownerColumn,messages.riskMitigationOwner(),false,false);
  addColumn(identifiedOnColumn,messages.riskIdentifiedOn(),false,false,8);
  addColumn(severityColumn,messages.riskPostMitigationSeverity(),false,false,7);
  addColumn(incidenceCounterColumn,messages.riskIncidences(),false,false,6);
  addColumn(notMitigatedIncidenceCounterColumn,messages.riskNotMitigatedIncidences(),false,false,6);
  display.getColumnSortList().push(new ColumnSortInfo(severityColumn,false));
}","@Override protected void configureDisplay(CellTable<IndexedRisk> display){
  nameColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getName() : null;
    }
  }
;
  identifiedOnColumn=new Column<IndexedRisk,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.SIMPLE_DATE_FORMATTER))){
    @Override public Date getValue(    IndexedRisk risk){
      return risk != null ? risk.getIdentifiedOn() : null;
    }
  }
;
  categoryColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getCategory() : null;
    }
  }
;
  ownerColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return risk != null ? risk.getMitigationOwner() : null;
    }
  }
;
  severityColumn=new Column<IndexedRisk,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedRisk risk){
      SafeHtml ret=null;
      if (risk != null) {
        ret=HtmlSnippetUtils.getSeverityDefinition(risk.getCurrentSeverityLevel());
      }
      return ret;
    }
  }
;
  incidenceCounterColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return Integer.toString(risk.getIncidencesCount());
    }
  }
;
  notMitigatedIncidenceCounterColumn=new TextColumn<IndexedRisk>(){
    @Override public String getValue(    IndexedRisk risk){
      return Integer.toString(risk.getUnmitigatedIncidencesCount());
    }
  }
;
  nameColumn.setSortable(true);
  identifiedOnColumn.setSortable(true);
  categoryColumn.setSortable(true);
  ownerColumn.setSortable(true);
  severityColumn.setSortable(true);
  incidenceCounterColumn.setSortable(true);
  notMitigatedIncidenceCounterColumn.setSortable(true);
  addColumn(nameColumn,messages.riskName(),false,false);
  addColumn(categoryColumn,messages.riskCategory(),false,false);
  addColumn(ownerColumn,messages.riskMitigationOwner(),false,false);
  addColumn(identifiedOnColumn,messages.riskIdentifiedOn(),false,false,8);
  addColumn(severityColumn,messages.riskPostMitigationSeverity(),false,false,7);
  addColumn(incidenceCounterColumn,messages.riskIncidences(),false,false,6);
  addColumn(notMitigatedIncidenceCounterColumn,messages.riskNotMitigatedIncidences(),false,false,6);
  display.getColumnSortList().push(new ColumnSortInfo(severityColumn,false));
}",0.9903312075704588
188215,"private void update(){
  dateEndedLabel.setVisible(job.getEndDate() != null);
  dateEnded.setVisible(job.getEndDate() != null);
  if (job.getEndDate() != null) {
    dateEnded.setText(dateTimeFormat.format(job.getEndDate()));
  }
  duration.setText(Humanize.durationInDHMS(job.getStartDate(),job.getEndDate(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getJobStateHtml(job));
  boolean hasStateDetails=StringUtils.isNotBlank(job.getStateDetails());
  stateDetailsLabel.setVisible(hasStateDetails);
  stateDetailsValue.setVisible(hasStateDetails);
  if (hasStateDetails) {
    stateDetailsValue.setText(job.getStateDetails());
  }
  SafeHtmlBuilder b=new SafeHtmlBuilder();
  b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  b.append(messages.showJobProgressCompletionPercentage(job.getJobStats().getCompletionPercentage()));
  b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  if (job.getJobStats().getSourceObjectsCount() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressTotalCount(job.getJobStats().getSourceObjectsCount()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsProcessedWithSuccess() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressSuccessfulCount(job.getJobStats().getSourceObjectsProcessedWithSuccess()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsProcessedWithFailure() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressFailedCount(job.getJobStats().getSourceObjectsProcessedWithFailure()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsBeingProcessed() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressProcessingCount(job.getJobStats().getSourceObjectsBeingProcessed()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsWaitingToBeProcessed() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressWaitingCount(job.getJobStats().getSourceObjectsWaitingToBeProcessed()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  progress.setHTML(b.toSafeHtml());
  buttonStop.setText(messages.stopButton());
  buttonStop.setVisible(!job.isInFinalState());
  buttonStop.setEnabled(!job.isStopping());
  buttonAppraisal.setText(messages.appraisalTitle() + ""String_Node_Str"" + job.getJobStats().getOutcomeObjectsWithManualIntervention()+ ""String_Node_Str"");
  buttonAppraisal.setVisible(job.getJobStats().getOutcomeObjectsWithManualIntervention() > 0);
  scheduleUpdateStatus();
}","private void update(){
  dateEndedLabel.setVisible(job.getEndDate() != null);
  dateEnded.setVisible(job.getEndDate() != null);
  if (job.getEndDate() != null) {
    dateEnded.setText(Humanize.formatDateTime(job.getEndDate()));
  }
  duration.setText(Humanize.durationInDHMS(job.getStartDate(),job.getEndDate(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getJobStateHtml(job));
  boolean hasStateDetails=StringUtils.isNotBlank(job.getStateDetails());
  stateDetailsLabel.setVisible(hasStateDetails);
  stateDetailsValue.setVisible(hasStateDetails);
  if (hasStateDetails) {
    stateDetailsValue.setText(job.getStateDetails());
  }
  SafeHtmlBuilder b=new SafeHtmlBuilder();
  b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  b.append(messages.showJobProgressCompletionPercentage(job.getJobStats().getCompletionPercentage()));
  b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  if (job.getJobStats().getSourceObjectsCount() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressTotalCount(job.getJobStats().getSourceObjectsCount()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsProcessedWithSuccess() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressSuccessfulCount(job.getJobStats().getSourceObjectsProcessedWithSuccess()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsProcessedWithFailure() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressFailedCount(job.getJobStats().getSourceObjectsProcessedWithFailure()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsBeingProcessed() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressProcessingCount(job.getJobStats().getSourceObjectsBeingProcessed()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  if (job.getJobStats().getSourceObjectsWaitingToBeProcessed() > 0) {
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
    b.append(messages.showJobProgressWaitingCount(job.getJobStats().getSourceObjectsWaitingToBeProcessed()));
    b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  }
  progress.setHTML(b.toSafeHtml());
  buttonStop.setText(messages.stopButton());
  buttonStop.setVisible(!job.isInFinalState());
  buttonStop.setEnabled(!job.isStopping());
  buttonAppraisal.setText(messages.appraisalTitle() + ""String_Node_Str"" + job.getJobStats().getOutcomeObjectsWithManualIntervention()+ ""String_Node_Str"");
  buttonAppraisal.setVisible(job.getJobStats().getOutcomeObjectsWithManualIntervention() > 0);
  scheduleUpdateStatus();
}",0.9948150708606982
188216,"public ShowJob(Job job,Map<String,PluginInfo> pluginsInfo){
  this.job=job;
  this.pluginsInfo=pluginsInfo;
  boolean isIngest=false;
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_STATE),new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_NAME));
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getUUID()));
  if (job.getPluginType().equals(PluginType.INGEST)) {
    ingestJobReports=new IngestJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(ingestJobReports);
    simpleJobReports=new SimpleJobReportList();
    isIngest=true;
  }
 else {
    simpleJobReports=new SimpleJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(simpleJobReports);
    ingestJobReports=new IngestJobReportList();
  }
  ingestJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  ingestJobReportsSearchPanel.setList(ingestJobReports);
  simpleJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  simpleJobReportsSearchPanel.setList(simpleJobReports);
  jobReportStatus=new FlowPanel();
  jobReportLastAction=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_STATE,jobReportStatus);
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_NAME,jobReportLastAction);
  initWidget(uiBinder.createAndBindUi(this));
  simpleJobReportsSearchPanel.setVisible(!isIngest);
  simpleJobReports.setVisible(!isIngest);
  ingestJobReportsSearchPanel.setVisible(isIngest);
  ingestJobReports.setVisible(isIngest);
  buttonProcess.setVisible(isIngest);
  name.setText(job.getName());
  creator.setText(job.getUsername());
  dateStarted.setText(dateTimeFormat.format(job.getStartDate()));
  update();
  SelectedItems<?> selected=job.getSourceObjects();
  selectedListPanel.setVisible(true);
  if (isIngest) {
    FacetUtils.bindFacets(ingestJobReports,facetPanels);
    if (isJobRunning()) {
      ingestJobReports.autoUpdate(PERIOD_MILLIS);
    }
    ingestJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=ingestJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showIngestSourceObjects(selected);
  }
 else {
    FacetUtils.bindFacets(simpleJobReports,facetPanels);
    if (isJobRunning()) {
      simpleJobReports.autoUpdate(PERIOD_MILLIS);
    }
    simpleJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=simpleJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showActionSourceObjects(selected);
  }
  PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
  if (pluginInfo != null) {
    plugin.setText(messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion()));
    if (pluginInfo.getParameters().isEmpty()) {
      pluginPanel.setVisible(false);
      pluginOptions.setVisible(false);
    }
 else {
      pluginPanel.setVisible(true);
      pluginOptions.setVisible(true);
    }
    for (    PluginParameter parameter : pluginInfo.getParameters()) {
      if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
        createBooleanLayout(parameter);
      }
 else       if (PluginParameterType.STRING.equals(parameter.getType())) {
        createStringLayout(parameter);
      }
 else       if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
        createPluginSipToAipLayout(parameter);
      }
 else       if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
        createSelectAipLayout(parameter);
      }
 else {
        createStringLayout(parameter);
      }
    }
  }
 else {
    plugin.setText(job.getPlugin());
    pluginPanel.setVisible(false);
    pluginOptions.setVisible(false);
  }
}","public ShowJob(Job job,Map<String,PluginInfo> pluginsInfo){
  this.job=job;
  this.pluginsInfo=pluginsInfo;
  boolean isIngest=false;
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_STATE),new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_NAME));
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getUUID()));
  if (job.getPluginType().equals(PluginType.INGEST)) {
    ingestJobReports=new IngestJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(ingestJobReports);
    simpleJobReports=new SimpleJobReportList();
    isIngest=true;
  }
 else {
    simpleJobReports=new SimpleJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(simpleJobReports);
    ingestJobReports=new IngestJobReportList();
  }
  ingestJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  ingestJobReportsSearchPanel.setList(ingestJobReports);
  simpleJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  simpleJobReportsSearchPanel.setList(simpleJobReports);
  jobReportStatus=new FlowPanel();
  jobReportLastAction=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_STATE,jobReportStatus);
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_NAME,jobReportLastAction);
  initWidget(uiBinder.createAndBindUi(this));
  simpleJobReportsSearchPanel.setVisible(!isIngest);
  simpleJobReports.setVisible(!isIngest);
  ingestJobReportsSearchPanel.setVisible(isIngest);
  ingestJobReports.setVisible(isIngest);
  buttonProcess.setVisible(isIngest);
  name.setText(job.getName());
  creator.setText(job.getUsername());
  dateStarted.setText(Humanize.formatDateTime(job.getStartDate()));
  update();
  SelectedItems<?> selected=job.getSourceObjects();
  selectedListPanel.setVisible(true);
  if (isIngest) {
    FacetUtils.bindFacets(ingestJobReports,facetPanels);
    if (isJobRunning()) {
      ingestJobReports.autoUpdate(PERIOD_MILLIS);
    }
    ingestJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=ingestJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showIngestSourceObjects(selected);
  }
 else {
    FacetUtils.bindFacets(simpleJobReports,facetPanels);
    if (isJobRunning()) {
      simpleJobReports.autoUpdate(PERIOD_MILLIS);
    }
    simpleJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=simpleJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showActionSourceObjects(selected);
  }
  PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
  if (pluginInfo != null) {
    plugin.setText(messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion()));
    if (pluginInfo.getParameters().isEmpty()) {
      pluginPanel.setVisible(false);
      pluginOptions.setVisible(false);
    }
 else {
      pluginPanel.setVisible(true);
      pluginOptions.setVisible(true);
    }
    for (    PluginParameter parameter : pluginInfo.getParameters()) {
      if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
        createBooleanLayout(parameter);
      }
 else       if (PluginParameterType.STRING.equals(parameter.getType())) {
        createStringLayout(parameter);
      }
 else       if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
        createPluginSipToAipLayout(parameter);
      }
 else       if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
        createSelectAipLayout(parameter);
      }
 else {
        createStringLayout(parameter);
      }
    }
  }
 else {
    plugin.setText(job.getPlugin());
    pluginPanel.setVisible(false);
    pluginOptions.setVisible(false);
  }
}",0.9967198775420948
188217,"public ShowJobReport(IndexedReport jobReport){
  this.jobReport=jobReport;
  initWidget(uiBinder.createAndBindUi(this));
  job.setText(jobReport.getJobName());
  job.setHref(HistoryUtils.createHistoryHashLink(ShowJob.RESOLVER,jobReport.getJobId()));
  outcomeObjectState.setVisible(false);
  boolean hasSource=!jobReport.getSourceObjectOriginalIds().isEmpty() || !jobReport.getSourceObjectId().isEmpty();
  if (hasSource) {
    String idText=!jobReport.getSourceObjectOriginalIds().isEmpty() ? ""String_Node_Str"" + StringUtils.prettyPrint(jobReport.getSourceObjectOriginalIds()) + ""String_Node_Str"" : ""String_Node_Str"";
    if (StringUtils.isNotBlank(jobReport.getSourceObjectOriginalName())) {
      sourceObject.setText(jobReport.getSourceObjectOriginalName() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectLabel())) {
      sourceObject.setText(jobReport.getSourceObjectLabel() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectId())) {
      sourceObject.setText(jobReport.getSourceObjectId() + idText);
    }
 else {
      hasSource=false;
    }
    sourceObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getSourceObjectClass(),jobReport.getSourceObjectId())));
    sourceObjectLabel.setText(messages.jobReportSource(jobReport.getSourceObjectClass()));
  }
  sourceObjectLabel.setVisible(hasSource);
  sourceObject.setVisible(hasSource);
  boolean hasOutcome=StringUtils.isNotBlank(jobReport.getOutcomeObjectId()) && !jobReport.getOutcomeObjectId().equals(jobReport.getSourceObjectId());
  if (hasOutcome) {
    if (jobReport.getOutcomeObjectLabel() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectLabel());
    }
 else     if (jobReport.getOutcomeObjectId() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectId());
    }
 else {
      hasOutcome=false;
    }
    outcomeObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getOutcomeObjectClass(),jobReport.getOutcomeObjectId())));
    outcomeObjectLabel.setText(messages.jobReportOutcome(jobReport.getOutcomeObjectClass()));
    outcomeObjectState.setHTML(HtmlSnippetUtils.getAIPStateHTML(jobReport.getOutcomeObjectState()));
  }
  outcomeObject.setVisible(hasOutcome);
  outcomeObjectState.setVisible(hasOutcome);
  outcomeObjectLabel.setVisible(hasOutcome);
  DateTimeFormat dateTimeFormat=DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT);
  dateCreated.setText(dateTimeFormat.format(jobReport.getDateCreated()));
  dateUpdated.setText(dateTimeFormat.format(jobReport.getDateUpdated()));
  duration.setText(Humanize.durationInDHMS(jobReport.getDateCreated(),jobReport.getDateUpdated(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getPluginStateHTML(jobReport.getPluginState()));
  progress.setText(messages.showJobReportProgress(jobReport.getCompletionPercentage(),jobReport.getStepsCompleted(),jobReport.getTotalSteps()));
  ListSelectionUtils.bindLayout(jobReport,searchPrevious,searchNext,keyboardFocus,true,false,false);
  for (  Report reportItem : jobReport.getReports()) {
    FlowPanel panel=new FlowPanel();
    panel.setStyleName(""String_Node_Str"");
    panel.addStyleName(""String_Node_Str"");
    reportItems.add(panel);
    FlowPanel panelHeading=new FlowPanel();
    panelHeading.setStyleName(""String_Node_Str"");
    Label panelTitle=new Label(reportItem.getTitle());
    panelTitle.setStyleName(""String_Node_Str"");
    panelHeading.add(panelTitle);
    panel.add(panelHeading);
    FlowPanel panelBody=new FlowPanel();
    panelBody.addStyleName(""String_Node_Str"");
    panel.add(panelBody);
    Label attributeLabel=new Label(messages.reportAgent());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    String text;
    if (StringUtils.isNotBlank(reportItem.getPluginVersion())) {
      text=messages.pluginLabelWithVersion(reportItem.getPlugin(),reportItem.getPluginVersion());
    }
 else {
      text=messages.pluginLabel(reportItem.getPlugin());
    }
    Label attributeValue=new Label(text);
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportStartDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateCreated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportEndDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateUpdated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportOutcome());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    HTML outcomeHTML=new HTML(HtmlSnippetUtils.getPluginStateHTML(reportItem.getPluginState()));
    panelBody.add(outcomeHTML);
    if (reportItem.getPluginDetails() != null && !""String_Node_Str"".equals(reportItem.getPluginDetails())) {
      attributeLabel=new Label(messages.reportOutcomeDetails());
      attributeLabel.setStyleName(""String_Node_Str"");
      panelBody.add(attributeLabel);
      if (reportItem.isHtmlPluginDetails()) {
        attributeValue=new HTML(SafeHtmlUtils.fromTrustedString(reportItem.getPluginDetails()));
      }
 else {
        attributeValue=new Label(reportItem.getPluginDetails());
      }
      attributeValue.addStyleName(""String_Node_Str"");
      panelBody.add(attributeValue);
    }
  }
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.removeFromParent();
  }
}","public ShowJobReport(IndexedReport jobReport){
  this.jobReport=jobReport;
  initWidget(uiBinder.createAndBindUi(this));
  job.setText(jobReport.getJobName());
  job.setHref(HistoryUtils.createHistoryHashLink(ShowJob.RESOLVER,jobReport.getJobId()));
  outcomeObjectState.setVisible(false);
  boolean hasSource=!jobReport.getSourceObjectOriginalIds().isEmpty() || !jobReport.getSourceObjectId().isEmpty();
  if (hasSource) {
    String idText=!jobReport.getSourceObjectOriginalIds().isEmpty() ? ""String_Node_Str"" + StringUtils.prettyPrint(jobReport.getSourceObjectOriginalIds()) + ""String_Node_Str"" : ""String_Node_Str"";
    if (StringUtils.isNotBlank(jobReport.getSourceObjectOriginalName())) {
      sourceObject.setText(jobReport.getSourceObjectOriginalName() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectLabel())) {
      sourceObject.setText(jobReport.getSourceObjectLabel() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectId())) {
      sourceObject.setText(jobReport.getSourceObjectId() + idText);
    }
 else {
      hasSource=false;
    }
    sourceObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getSourceObjectClass(),jobReport.getSourceObjectId())));
    sourceObjectLabel.setText(messages.jobReportSource(jobReport.getSourceObjectClass()));
  }
  sourceObjectLabel.setVisible(hasSource);
  sourceObject.setVisible(hasSource);
  boolean hasOutcome=StringUtils.isNotBlank(jobReport.getOutcomeObjectId()) && !jobReport.getOutcomeObjectId().equals(jobReport.getSourceObjectId());
  if (hasOutcome) {
    if (jobReport.getOutcomeObjectLabel() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectLabel());
    }
 else     if (jobReport.getOutcomeObjectId() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectId());
    }
 else {
      hasOutcome=false;
    }
    outcomeObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getOutcomeObjectClass(),jobReport.getOutcomeObjectId())));
    outcomeObjectLabel.setText(messages.jobReportOutcome(jobReport.getOutcomeObjectClass()));
    outcomeObjectState.setHTML(HtmlSnippetUtils.getAIPStateHTML(jobReport.getOutcomeObjectState()));
  }
  outcomeObject.setVisible(hasOutcome);
  outcomeObjectState.setVisible(hasOutcome);
  outcomeObjectLabel.setVisible(hasOutcome);
  dateCreated.setText(Humanize.formatDateTime(jobReport.getDateCreated()));
  dateUpdated.setText(Humanize.formatDateTime(jobReport.getDateUpdated()));
  duration.setText(Humanize.durationInDHMS(jobReport.getDateCreated(),jobReport.getDateUpdated(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getPluginStateHTML(jobReport.getPluginState()));
  progress.setText(messages.showJobReportProgress(jobReport.getCompletionPercentage(),jobReport.getStepsCompleted(),jobReport.getTotalSteps()));
  ListSelectionUtils.bindLayout(jobReport,searchPrevious,searchNext,keyboardFocus,true,false,false);
  for (  Report reportItem : jobReport.getReports()) {
    FlowPanel panel=new FlowPanel();
    panel.setStyleName(""String_Node_Str"");
    panel.addStyleName(""String_Node_Str"");
    reportItems.add(panel);
    FlowPanel panelHeading=new FlowPanel();
    panelHeading.setStyleName(""String_Node_Str"");
    Label panelTitle=new Label(reportItem.getTitle());
    panelTitle.setStyleName(""String_Node_Str"");
    panelHeading.add(panelTitle);
    panel.add(panelHeading);
    FlowPanel panelBody=new FlowPanel();
    panelBody.addStyleName(""String_Node_Str"");
    panel.add(panelBody);
    Label attributeLabel=new Label(messages.reportAgent());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    String text;
    if (StringUtils.isNotBlank(reportItem.getPluginVersion())) {
      text=messages.pluginLabelWithVersion(reportItem.getPlugin(),reportItem.getPluginVersion());
    }
 else {
      text=messages.pluginLabel(reportItem.getPlugin());
    }
    Label attributeValue=new Label(text);
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportStartDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(Humanize.formatDateTime(reportItem.getDateCreated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportEndDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(Humanize.formatDateTime(reportItem.getDateUpdated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportOutcome());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    HTML outcomeHTML=new HTML(HtmlSnippetUtils.getPluginStateHTML(reportItem.getPluginState()));
    panelBody.add(outcomeHTML);
    if (reportItem.getPluginDetails() != null && !""String_Node_Str"".equals(reportItem.getPluginDetails())) {
      attributeLabel=new Label(messages.reportOutcomeDetails());
      attributeLabel.setStyleName(""String_Node_Str"");
      panelBody.add(attributeLabel);
      if (reportItem.isHtmlPluginDetails()) {
        attributeValue=new HTML(SafeHtmlUtils.fromTrustedString(reportItem.getPluginDetails()));
      }
 else {
        attributeValue=new Label(reportItem.getPluginDetails());
      }
      attributeValue.addStyleName(""String_Node_Str"");
      panelBody.add(attributeValue);
    }
  }
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.removeFromParent();
  }
}",0.9694323144104804
188218,"/** 
 * Create a new panel to view a log entry
 */
public ShowLogEntry(LogEntry logEntry){
  initWidget(uiBinder.createAndBindUi(this));
  logIdValue.setText(logEntry.getId());
  logIdLabel.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logIdValue.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logComponentValue.setText(logEntry.getActionComponent());
  logComponentLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logComponentValue.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logMethodValue.setText(logEntry.getActionMethod());
  logMethodLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logMethodValue.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logAddressValue.setText(logEntry.getAddress());
  logAddressLabel.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logAddressValue.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logDatetimeValue.setText(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL).format(logEntry.getDatetime()));
  logDatetimeLabel.setVisible(logEntry.getDatetime() != null);
  logDatetimeValue.setVisible(logEntry.getDatetime() != null);
  logRelatedObjectValue.setText(logEntry.getRelatedObjectID());
  logRelatedObjectLabel.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logRelatedObjectValue.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logUsernameValue.setText(logEntry.getUsername());
  logUsernameLabel.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  logUsernameValue.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  List<LogEntryParameter> parameters=logEntry.getParameters();
  if (parameters != null && !parameters.isEmpty()) {
    for (    LogEntryParameter par : parameters) {
      HTML parPanel=new HTML();
      parPanel.setHTML(SafeHtmlUtils.fromString(messages.logParameter(par.getName(),par.getValue())));
      logParametersValue.add(parPanel);
    }
    logParametersLabel.setVisible(true);
    logParametersValue.setVisible(true);
  }
 else {
    logParametersLabel.setVisible(false);
    logParametersValue.setVisible(false);
  }
  logStateValue.setHTML(HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState()));
  logStateLabel.setVisible(logEntry.getState() != null);
  logStateValue.setVisible(logEntry.getState() != null);
}","/** 
 * Create a new panel to view a log entry
 */
public ShowLogEntry(LogEntry logEntry){
  initWidget(uiBinder.createAndBindUi(this));
  logIdValue.setText(logEntry.getId());
  logIdLabel.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logIdValue.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logComponentValue.setText(logEntry.getActionComponent());
  logComponentLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logComponentValue.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logMethodValue.setText(logEntry.getActionMethod());
  logMethodLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logMethodValue.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logAddressValue.setText(logEntry.getAddress());
  logAddressLabel.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logAddressValue.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logDatetimeValue.setText(Humanize.formatDateTime(logEntry.getDatetime()));
  logDatetimeLabel.setVisible(logEntry.getDatetime() != null);
  logDatetimeValue.setVisible(logEntry.getDatetime() != null);
  logRelatedObjectValue.setText(logEntry.getRelatedObjectID());
  logRelatedObjectLabel.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logRelatedObjectValue.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logUsernameValue.setText(logEntry.getUsername());
  logUsernameLabel.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  logUsernameValue.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  List<LogEntryParameter> parameters=logEntry.getParameters();
  if (parameters != null && !parameters.isEmpty()) {
    for (    LogEntryParameter par : parameters) {
      HTML parPanel=new HTML();
      parPanel.setHTML(SafeHtmlUtils.fromString(messages.logParameter(par.getName(),par.getValue())));
      logParametersValue.add(parPanel);
    }
    logParametersLabel.setVisible(true);
    logParametersValue.setVisible(true);
  }
 else {
    logParametersLabel.setVisible(false);
    logParametersValue.setVisible(false);
  }
  logStateValue.setHTML(HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState()));
  logStateLabel.setVisible(logEntry.getState() != null);
  logStateValue.setVisible(logEntry.getState() != null);
}",0.9850494841019162
188219,"/** 
 * Create a new panel to view a notification
 */
public ShowNotification(Notification notification){
  initWidget(uiBinder.createAndBindUi(this));
  notificationId.setText(notification.getId());
  notificationSubject.setText(notification.getSubject());
  notificationBody.setHTML(notification.getBody());
  notificationSentOn.setText(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM).format(notification.getSentOn()));
  notificationFromUser.setText(notification.getFromUser());
  notificationIsAcknowledged.setText(messages.isAcknowledged(Boolean.toString(notification.isAcknowledged()).toLowerCase()));
  acknowledgedUsersKey.setVisible(false);
  notAcknowledgedUsersKey.setVisible(false);
  List<String> recipientUsers=new ArrayList<>(notification.getRecipientUsers());
  for (  String user : notification.getAcknowledgedUsers().keySet()) {
    String ackDate=notification.getAcknowledgedUsers().get(user);
    acknowledgedUsersKey.setVisible(true);
    acknowledgedUsersValue.setHTML(SafeHtmlUtils.fromSafeConstant(acknowledgedUsersValue.getHTML() + ""String_Node_Str"" + user+ ""String_Node_Str""+ ackDate+ ""String_Node_Str""));
    recipientUsers.remove(user);
  }
  for (  String user : recipientUsers) {
    notAcknowledgedUsersKey.setVisible(true);
    notAcknowledgedUsersValue.setHTML(SafeHtmlUtils.fromSafeConstant(notAcknowledgedUsersValue.getHTML() + ""String_Node_Str"" + user+ ""String_Node_Str""));
  }
  stateValue.setHTML(HtmlSnippetUtils.getNotificationStateHTML(notification.getState()));
  stateLabel.setVisible(notification.getState() != null);
  stateValue.setVisible(notification.getState() != null);
}","/** 
 * Create a new panel to view a notification
 */
public ShowNotification(Notification notification){
  initWidget(uiBinder.createAndBindUi(this));
  notificationId.setText(notification.getId());
  notificationSubject.setText(notification.getSubject());
  notificationBody.setHTML(notification.getBody());
  notificationSentOn.setText(Humanize.formatDateTime(notification.getSentOn()));
  notificationFromUser.setText(notification.getFromUser());
  notificationIsAcknowledged.setText(messages.isAcknowledged(Boolean.toString(notification.isAcknowledged()).toLowerCase()));
  acknowledgedUsersKey.setVisible(false);
  notAcknowledgedUsersKey.setVisible(false);
  List<String> recipientUsers=new ArrayList<>(notification.getRecipientUsers());
  for (  String user : notification.getAcknowledgedUsers().keySet()) {
    String ackDate=notification.getAcknowledgedUsers().get(user);
    acknowledgedUsersKey.setVisible(true);
    acknowledgedUsersValue.setHTML(SafeHtmlUtils.fromSafeConstant(acknowledgedUsersValue.getHTML() + ""String_Node_Str"" + user+ ""String_Node_Str""+ ackDate+ ""String_Node_Str""));
    recipientUsers.remove(user);
  }
  for (  String user : recipientUsers) {
    notAcknowledgedUsersKey.setVisible(true);
    notAcknowledgedUsersValue.setHTML(SafeHtmlUtils.fromSafeConstant(notAcknowledgedUsersValue.getHTML() + ""String_Node_Str"" + user+ ""String_Node_Str""));
  }
  stateValue.setHTML(HtmlSnippetUtils.getNotificationStateHTML(notification.getState()));
  stateLabel.setVisible(notification.getState() != null);
  stateValue.setVisible(notification.getState() != null);
}",0.977350294756438
188220,"public void init(Risk risk){
  riskId.setText(risk.getId());
  riskName.setText(risk.getName());
  riskDescriptionValue.setText(risk.getDescription());
  riskDescriptionKey.setVisible(StringUtils.isNotBlank(risk.getDescription()));
  riskIdentifiedOn.setText(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL).format(risk.getIdentifiedOn()));
  riskIdentifiedBy.setText(risk.getIdentifiedBy());
  riskCategory.setText(risk.getCategory());
  riskNotesValue.setText(risk.getNotes());
  riskNotesKey.setVisible(StringUtils.isNotBlank(risk.getNotes()));
  final int preProbability=risk.getPreMitigationProbability();
  final int preImpact=risk.getPreMitigationImpact();
  final int preSeverity=risk.getPreMitigationSeverity();
  final int posProbability=risk.getPostMitigationProbability();
  final int posImpact=risk.getPostMitigationImpact();
  final int posSeverity=risk.getPostMitigationSeverity();
  BrowserService.Util.getInstance().retrieveShowMitigationTerms(preProbability,preImpact,posProbability,posImpact,new AsyncCallback<RiskMitigationBundle>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    RiskMitigationBundle terms){
      int severityLowLimit=terms.getSeverityLowLimit();
      int severityHighLimit=terms.getSeverityHighLimit();
      riskPreMitigationProbability.setText(messages.riskMitigationProbability(terms.getPreMitigationProbability().replace(' ','_')));
      riskPreMitigationImpact.setText(messages.riskMitigationImpact(terms.getPreMitigationImpact().replace(' ','_')));
      riskPreMitigationSeverity.setHTML(HtmlSnippetUtils.getSeverityDefinition(preSeverity,severityLowLimit,severityHighLimit));
      riskPosMitigationProbability.setText(messages.riskMitigationProbability(terms.getPosMitigationProbability().replace(' ','_')));
      riskPosMitigationImpact.setText(messages.riskMitigationImpact(terms.getPosMitigationImpact().replace(' ','_')));
      riskPosMitigationKey.setVisible(true);
      riskPosMitigationProbabilityKey.setVisible(true);
      riskPosMitigationProbability.setVisible(true);
      riskPosMitigationImpactKey.setVisible(true);
      riskPosMitigationImpact.setVisible(true);
      riskPosMitigationSeverityKey.setVisible(true);
      riskPosMitigationSeverity.setVisible(true);
      riskPosMitigationSeverity.setHTML(HtmlSnippetUtils.getSeverityDefinition(posSeverity,severityLowLimit,severityHighLimit));
    }
  }
);
  riskPreMitigationNotesValue.setText(risk.getPreMitigationNotes());
  riskPreMitigationNotesKey.setVisible(StringUtils.isNotBlank(risk.getPreMitigationNotes()));
  riskPosMitigationNotesValue.setText(risk.getPostMitigationNotes());
  riskPosMitigationNotesKey.setVisible(StringUtils.isNotBlank(risk.getPostMitigationNotes()));
  int mitigationCounter=0;
  if (StringUtils.isNotBlank(risk.getMitigationStrategy())) {
    mitigationCounter++;
    riskMitigationStrategyKey.setVisible(true);
    riskMitigationStrategyValue.setText(risk.getMitigationStrategy());
  }
 else {
    riskMitigationStrategyKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationOwnerType())) {
    mitigationCounter++;
    riskMitigationOwnerTypeKey.setVisible(true);
    riskMitigationOwnerTypeValue.setText(risk.getMitigationOwnerType());
  }
 else {
    riskMitigationOwnerTypeKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationOwner())) {
    mitigationCounter++;
    riskMitigationOwnerKey.setVisible(true);
    riskMitigationOwnerValue.setText(risk.getMitigationOwner());
  }
 else {
    riskMitigationOwnerKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationRelatedEventIdentifierType())) {
    mitigationCounter++;
    riskMitigationRelatedEventIdentifierTypeKey.setVisible(true);
    riskMitigationRelatedEventIdentifierTypeValue.setText(risk.getMitigationRelatedEventIdentifierType());
  }
 else {
    riskMitigationRelatedEventIdentifierTypeKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationRelatedEventIdentifierValue())) {
    mitigationCounter++;
    riskMitigationRelatedEventIdentifierValueKey.setVisible(true);
    riskMitigationRelatedEventIdentifierValueValue.setText(risk.getMitigationRelatedEventIdentifierValue());
  }
 else {
    riskMitigationRelatedEventIdentifierValueKey.setVisible(false);
  }
  if (mitigationCounter == 0) {
    riskMitigationKey.setVisible(false);
  }
 else {
    riskMitigationKey.setVisible(true);
  }
  riskMitigationOwnerTypeKey.setVisible(false);
  riskMitigationOwnerTypeValue.setVisible(false);
  riskMitigationRelatedEventIdentifierTypeKey.setVisible(false);
  riskMitigationRelatedEventIdentifierTypeValue.setVisible(false);
  riskMitigationRelatedEventIdentifierValueKey.setVisible(false);
  riskMitigationRelatedEventIdentifierValueValue.setVisible(false);
}","public void init(Risk risk){
  riskId.setText(risk.getId());
  riskName.setText(risk.getName());
  riskDescriptionValue.setText(risk.getDescription());
  riskDescriptionKey.setVisible(StringUtils.isNotBlank(risk.getDescription()));
  riskIdentifiedOn.setText(Humanize.formatDate(risk.getIdentifiedOn()));
  riskIdentifiedBy.setText(risk.getIdentifiedBy());
  riskCategory.setText(risk.getCategory());
  riskNotesValue.setText(risk.getNotes());
  riskNotesKey.setVisible(StringUtils.isNotBlank(risk.getNotes()));
  final int preProbability=risk.getPreMitigationProbability();
  final int preImpact=risk.getPreMitigationImpact();
  final int preSeverity=risk.getPreMitigationSeverity();
  final int posProbability=risk.getPostMitigationProbability();
  final int posImpact=risk.getPostMitigationImpact();
  final int posSeverity=risk.getPostMitigationSeverity();
  BrowserService.Util.getInstance().retrieveShowMitigationTerms(preProbability,preImpact,posProbability,posImpact,new AsyncCallback<RiskMitigationBundle>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    RiskMitigationBundle terms){
      int severityLowLimit=terms.getSeverityLowLimit();
      int severityHighLimit=terms.getSeverityHighLimit();
      riskPreMitigationProbability.setText(messages.riskMitigationProbability(terms.getPreMitigationProbability().replace(' ','_')));
      riskPreMitigationImpact.setText(messages.riskMitigationImpact(terms.getPreMitigationImpact().replace(' ','_')));
      riskPreMitigationSeverity.setHTML(HtmlSnippetUtils.getSeverityDefinition(preSeverity,severityLowLimit,severityHighLimit));
      riskPosMitigationProbability.setText(messages.riskMitigationProbability(terms.getPosMitigationProbability().replace(' ','_')));
      riskPosMitigationImpact.setText(messages.riskMitigationImpact(terms.getPosMitigationImpact().replace(' ','_')));
      riskPosMitigationKey.setVisible(true);
      riskPosMitigationProbabilityKey.setVisible(true);
      riskPosMitigationProbability.setVisible(true);
      riskPosMitigationImpactKey.setVisible(true);
      riskPosMitigationImpact.setVisible(true);
      riskPosMitigationSeverityKey.setVisible(true);
      riskPosMitigationSeverity.setVisible(true);
      riskPosMitigationSeverity.setHTML(HtmlSnippetUtils.getSeverityDefinition(posSeverity,severityLowLimit,severityHighLimit));
    }
  }
);
  riskPreMitigationNotesValue.setText(risk.getPreMitigationNotes());
  riskPreMitigationNotesKey.setVisible(StringUtils.isNotBlank(risk.getPreMitigationNotes()));
  riskPosMitigationNotesValue.setText(risk.getPostMitigationNotes());
  riskPosMitigationNotesKey.setVisible(StringUtils.isNotBlank(risk.getPostMitigationNotes()));
  int mitigationCounter=0;
  if (StringUtils.isNotBlank(risk.getMitigationStrategy())) {
    mitigationCounter++;
    riskMitigationStrategyKey.setVisible(true);
    riskMitigationStrategyValue.setText(risk.getMitigationStrategy());
  }
 else {
    riskMitigationStrategyKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationOwnerType())) {
    mitigationCounter++;
    riskMitigationOwnerTypeKey.setVisible(true);
    riskMitigationOwnerTypeValue.setText(risk.getMitigationOwnerType());
  }
 else {
    riskMitigationOwnerTypeKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationOwner())) {
    mitigationCounter++;
    riskMitigationOwnerKey.setVisible(true);
    riskMitigationOwnerValue.setText(risk.getMitigationOwner());
  }
 else {
    riskMitigationOwnerKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationRelatedEventIdentifierType())) {
    mitigationCounter++;
    riskMitigationRelatedEventIdentifierTypeKey.setVisible(true);
    riskMitigationRelatedEventIdentifierTypeValue.setText(risk.getMitigationRelatedEventIdentifierType());
  }
 else {
    riskMitigationRelatedEventIdentifierTypeKey.setVisible(false);
  }
  if (StringUtils.isNotBlank(risk.getMitigationRelatedEventIdentifierValue())) {
    mitigationCounter++;
    riskMitigationRelatedEventIdentifierValueKey.setVisible(true);
    riskMitigationRelatedEventIdentifierValueValue.setText(risk.getMitigationRelatedEventIdentifierValue());
  }
 else {
    riskMitigationRelatedEventIdentifierValueKey.setVisible(false);
  }
  if (mitigationCounter == 0) {
    riskMitigationKey.setVisible(false);
  }
 else {
    riskMitigationKey.setVisible(true);
  }
  riskMitigationOwnerTypeKey.setVisible(false);
  riskMitigationOwnerTypeValue.setVisible(false);
  riskMitigationRelatedEventIdentifierTypeKey.setVisible(false);
  riskMitigationRelatedEventIdentifierTypeValue.setVisible(false);
  riskMitigationRelatedEventIdentifierValueKey.setVisible(false);
  riskMitigationRelatedEventIdentifierValueValue.setVisible(false);
}",0.9921883137173212
188221,"public void initElements(){
  HTMLPanel itemIconHtmlPanel=new HTMLPanel(""String_Node_Str"");
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationInformationIcon.setWidget(itemIconHtmlPanel);
  representationInformationTitle.setText(ri.getName());
  representationInformationTitle.removeStyleName(""String_Node_Str"");
  representationInformationIcon.getParent().removeStyleName(""String_Node_Str"");
  representationInformationId.setText(messages.representationInformationIdentifier() + ""String_Node_Str"" + ri.getId());
  if (ri.getCreatedOn() != null && StringUtils.isNotBlank(ri.getCreatedBy())) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(ri.getCreatedOn()),ri.getCreatedBy()));
  }
  if (ri.getUpdatedOn() != null && StringUtils.isNotBlank(ri.getUpdatedBy())) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(ri.getUpdatedOn()),ri.getUpdatedBy()));
  }
  representationInformationDescriptionValue.setHTML(ri.getDescription());
  representationInformationDescriptionKey.setVisible(StringUtils.isNotBlank(ri.getDescription()));
  representationInformationFamilyKey.setVisible(StringUtils.isNotBlank(ri.getFamily()));
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(ri.getFamily(),LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    String familyTranslation){
      representationInformationFamilyValue.setText(familyTranslation);
    }
  }
);
  List<String> tagsList=ri.getTags();
  representationInformationTagValue.setVisible(tagsList != null && !tagsList.isEmpty());
  representationInformationTagKey.setVisible(tagsList != null && !tagsList.isEmpty());
  if (tagsList != null) {
    for (    final String category : tagsList) {
      InlineHTML parPanel=new InlineHTML();
      parPanel.setHTML(""String_Node_Str"" + messages.representationInformationListItems(category) + ""String_Node_Str"");
      parPanel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          List<String> history=new ArrayList<>();
          history.addAll(RepresentationInformationNetwork.RESOLVER.getHistoryPath());
          history.add(Search.RESOLVER.getHistoryToken());
          history.add(RodaConstants.REPRESENTATION_INFORMATION_TAGS);
          history.add(category);
          HistoryUtils.newHistory(history);
        }
      }
);
      representationInformationTagValue.add(parPanel);
    }
  }
  if (ri.getSupport() != null) {
    representationInformationSupportValue.setText(messages.representationInformationSupportValue(ri.getSupport().toString()));
    representationInformationSupportKey.setVisible(true);
  }
 else {
    representationInformationSupportKey.setVisible(false);
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      HtmlSnippetUtils.createExtraShow(extras,extra.getFamilyValues().get(ri.getFamily()),false);
    }
  }
);
  initRelations();
}","public void initElements(){
  HTMLPanel itemIconHtmlPanel=new HTMLPanel(""String_Node_Str"");
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationInformationIcon.setWidget(itemIconHtmlPanel);
  representationInformationTitle.setText(ri.getName());
  representationInformationTitle.removeStyleName(""String_Node_Str"");
  representationInformationIcon.getParent().removeStyleName(""String_Node_Str"");
  representationInformationId.setText(messages.representationInformationIdentifier() + ""String_Node_Str"" + ri.getId());
  if (ri.getCreatedOn() != null && StringUtils.isNotBlank(ri.getCreatedBy())) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(ri.getCreatedOn()),ri.getCreatedBy()));
  }
  if (ri.getUpdatedOn() != null && StringUtils.isNotBlank(ri.getUpdatedBy())) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(ri.getUpdatedOn()),ri.getUpdatedBy()));
  }
  representationInformationDescriptionValue.setHTML(ri.getDescription());
  representationInformationDescriptionKey.setVisible(StringUtils.isNotBlank(ri.getDescription()));
  representationInformationFamilyKey.setVisible(StringUtils.isNotBlank(ri.getFamily()));
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(ri.getFamily(),LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    String familyTranslation){
      representationInformationFamilyValue.setText(familyTranslation);
    }
  }
);
  List<String> tagsList=ri.getTags();
  representationInformationTagValue.setVisible(tagsList != null && !tagsList.isEmpty());
  representationInformationTagKey.setVisible(tagsList != null && !tagsList.isEmpty());
  if (tagsList != null) {
    for (    final String category : tagsList) {
      InlineHTML parPanel=new InlineHTML();
      parPanel.setHTML(""String_Node_Str"" + messages.representationInformationListItems(category) + ""String_Node_Str"");
      parPanel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          JavascriptUtils.scrollToTop();
          List<String> history=new ArrayList<>();
          history.addAll(RepresentationInformationNetwork.RESOLVER.getHistoryPath());
          history.add(Search.RESOLVER.getHistoryToken());
          history.add(RodaConstants.REPRESENTATION_INFORMATION_TAGS);
          history.add(category);
          HistoryUtils.newHistory(history);
        }
      }
);
      representationInformationTagValue.add(parPanel);
    }
  }
  if (ri.getSupport() != null) {
    representationInformationSupportValue.setText(messages.representationInformationSupportValue(ri.getSupport().toString()));
    representationInformationSupportKey.setVisible(true);
  }
 else {
    representationInformationSupportKey.setVisible(false);
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      HtmlSnippetUtils.createExtraShow(extras,extra.getFamilyValues().get(ri.getFamily()),false);
    }
  }
);
  initRelations();
}",0.9940811318030892
188222,"public static String formatDateTime(Date date){
  return DATE_TIME_FORMAT.format(date);
}","public static String formatDateTime(Date date){
  return DATE_TIME_FORMAT_TIMEZONE.format(date);
}",0.9518716577540108
188223,"public static void showPromptDialogRepresentationInformationRelations(String title,final String cancelButtonText,final String confirmButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformationRelation> callback){
  final List<HandlerRegistration> clickHandlers=new ArrayList<>();
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveRelationTypeTranslations(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RelationTypeTranslationsBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RelationTypeTranslationsBundle relationTypes){
      final FlowPanel content=new FlowPanel();
      content.addStyleName(""String_Node_Str"");
      final FlowPanel leftSide=new FlowPanel();
      leftSide.addStyleName(""String_Node_Str"");
      final FlowPanel rightSide=new FlowPanel();
      rightSide.addStyleName(""String_Node_Str"");
      final Label aipLabel=new Label();
      aipLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.addStyleName(""String_Node_Str"");
      leftSide.add(aipLabel);
      final Label riLabel=new Label();
      riLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.addStyleName(""String_Node_Str"");
      leftSide.add(riLabel);
      final Label webLabel=new Label();
      webLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.addStyleName(""String_Node_Str"");
      leftSide.add(webLabel);
      final Label txtLabel=new Label();
      txtLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.addStyleName(""String_Node_Str"");
      leftSide.add(txtLabel);
      content.add(leftSide);
      content.add(rightSide);
      layout.add(content);
      final FlowPanel buttonPanel=new FlowPanel();
      final Button cancelButton=new Button(cancelButtonText);
      final Button confirmButton=new Button(confirmButtonText);
      confirmButton.setEnabled(false);
      final Label helpLabel=new Label(messages.title(""String_Node_Str""));
      buttonPanel.add(cancelButton);
      buttonPanel.add(confirmButton);
      buttonPanel.add(helpLabel);
      layout.add(buttonPanel);
      dialogBox.setWidget(layout);
      dialogBox.setGlassEnabled(true);
      dialogBox.setAnimationEnabled(false);
      cancelButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          callback.onFailure(null);
        }
      }
);
      cancelButton.addStyleName(""String_Node_Str"");
      confirmButton.addStyleName(""String_Node_Str"");
      helpLabel.addStyleName(""String_Node_Str"");
      AsyncCallback<Void> centerDialogBox=new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
          dialogBox.center();
        }
        @Override public void onSuccess(        Void result){
          dialogBox.center();
        }
      }
;
      showAIPDescription(aipLabel,riLabel,txtLabel,webLabel,rightSide,relationTypes,ri,confirmButton,clickHandlers,dialogBox,callback,centerDialogBox);
      dialogBox.center();
      dialogBox.show();
      helpLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          confirmButton.setEnabled(false);
        }
      }
);
      aipLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          showAIPDescription(aipLabel,riLabel,txtLabel,webLabel,rightSide,relationTypes,ri,confirmButton,clickHandlers,dialogBox,callback,centerDialogBox);
        }
      }
);
      riLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          riLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.REPRESENTATION_INFORMATION).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              List<String> riAlreadyLinked=new ArrayList<>();
              if (ri != null) {
                for (                RepresentationInformationRelation r : ri.getRelations()) {
                  if (r.getObjectType().equals(RelationObjectType.REPRESENTATION_INFORMATION)) {
                    riAlreadyLinked.add(r.getLink());
                  }
                }
              }
              Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,riAlreadyLinked));
              SelectRepresentationInformationDialog selectDialog=new SelectRepresentationInformationDialog(messages.moveItemTitle(),filter,false);
              selectDialog.setSingleSelectionMode();
              selectDialog.showAndCenter();
              selectDialog.addValueChangeHandler(new ValueChangeHandler<RepresentationInformation>(){
                @Override public void onValueChange(                ValueChangeEvent<RepresentationInformation> event){
                  final RepresentationInformation ri=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setText(ri.getName());
                  linkText.setValue(ri.getId());
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(ri.getName());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.REPRESENTATION_INFORMATION,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      txtLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          txtLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.TEXT).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.setStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.TEXT,titleBox.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      webLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          webLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.WEB).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final TextBox linkText=new TextBox();
          linkText.setStyleName(""String_Node_Str"");
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.WEB,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
    }
  }
);
}","public static void showPromptDialogRepresentationInformationRelations(String title,final String cancelButtonText,final String confirmButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformationRelation> callback){
  final List<HandlerRegistration> clickHandlers=new ArrayList<>();
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveRelationTypeTranslations(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RelationTypeTranslationsBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RelationTypeTranslationsBundle relationTypes){
      final FlowPanel content=new FlowPanel();
      content.addStyleName(""String_Node_Str"");
      final FlowPanel leftSide=new FlowPanel();
      leftSide.addStyleName(""String_Node_Str"");
      final FlowPanel rightSide=new FlowPanel();
      rightSide.addStyleName(""String_Node_Str"");
      final Label aipLabel=new Label();
      aipLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.addStyleName(""String_Node_Str"");
      leftSide.add(aipLabel);
      final Label riLabel=new Label();
      riLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.addStyleName(""String_Node_Str"");
      leftSide.add(riLabel);
      final Label webLabel=new Label();
      webLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.addStyleName(""String_Node_Str"");
      leftSide.add(webLabel);
      final Label txtLabel=new Label();
      txtLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.addStyleName(""String_Node_Str"");
      leftSide.add(txtLabel);
      content.add(leftSide);
      content.add(rightSide);
      layout.add(content);
      final FlowPanel buttonPanel=new FlowPanel();
      final Button cancelButton=new Button(cancelButtonText);
      final Button confirmButton=new Button(confirmButtonText);
      confirmButton.setEnabled(false);
      final Label helpLabel=new Label(messages.title(""String_Node_Str""));
      buttonPanel.add(cancelButton);
      buttonPanel.add(confirmButton);
      buttonPanel.add(helpLabel);
      layout.add(buttonPanel);
      dialogBox.setWidget(layout);
      dialogBox.setGlassEnabled(true);
      dialogBox.setAnimationEnabled(false);
      cancelButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          callback.onFailure(null);
        }
      }
);
      cancelButton.addStyleName(""String_Node_Str"");
      confirmButton.addStyleName(""String_Node_Str"");
      helpLabel.addStyleName(""String_Node_Str"");
      AsyncCallback<Void> centerDialogBox=new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
          dialogBox.center();
        }
        @Override public void onSuccess(        Void result){
          dialogBox.center();
        }
      }
;
      showAIPDescription(aipLabel,riLabel,txtLabel,webLabel,rightSide,relationTypes,ri,confirmButton,clickHandlers,dialogBox,callback,centerDialogBox);
      dialogBox.center();
      dialogBox.show();
      helpLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          confirmButton.setEnabled(false);
        }
      }
);
      aipLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          showAIPDescription(aipLabel,riLabel,txtLabel,webLabel,rightSide,relationTypes,ri,confirmButton,clickHandlers,dialogBox,callback,centerDialogBox);
        }
      }
);
      riLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          riLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.REPRESENTATION_INFORMATION).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              Filter filter=new Filter(new NotSimpleFilterParameter(RodaConstants.INDEX_UUID,ri.getId()));
              SelectRepresentationInformationDialog selectDialog=new SelectRepresentationInformationDialog(messages.moveItemTitle(),filter,false);
              selectDialog.setSingleSelectionMode();
              selectDialog.showAndCenter();
              selectDialog.addValueChangeHandler(new ValueChangeHandler<RepresentationInformation>(){
                @Override public void onValueChange(                ValueChangeEvent<RepresentationInformation> event){
                  final RepresentationInformation ri=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setText(ri.getName());
                  linkText.setValue(ri.getId());
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(ri.getName());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.REPRESENTATION_INFORMATION,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      txtLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          txtLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.TEXT).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.setStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.TEXT,titleBox.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      webLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          webLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",centerDialogBox);
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.WEB).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final TextBox linkText=new TextBox();
          linkText.setStyleName(""String_Node_Str"");
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.WEB,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
    }
  }
);
}",0.9827002090391408
188224,"private ReturnWithExceptions<Void,ModelObserver> indexDIPFile(DIP dip,DIPFile file,boolean recursive){
  ReturnWithExceptions<Void,ModelObserver> ret=addDocumentToIndex(DIPFile.class,file);
  if (recursive && file.isDirectory() && ret.isEmpty()) {
    try (CloseableIterable<OptionalWithCause<DIPFile>> allFiles=model.listDIPFilesUnder(file,true)){
      for (      OptionalWithCause<DIPFile> subfile : allFiles) {
        if (subfile.isPresent()) {
          indexDIPFile(dip,subfile.get(),false).addTo(ret);
        }
 else {
          LOGGER.error(""String_Node_Str"",subfile.getCause());
          ret.add(subfile.getCause());
        }
      }
    }
 catch (    NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException e) {
      LOGGER.error(""String_Node_Str"",file,e);
      ret.add(e);
    }
  }
  return ret;
}","private ReturnWithExceptions<Void,ModelObserver> indexDIPFile(DIP dip,DIPFile file,boolean recursive){
  ReturnWithExceptions<Void,ModelObserver> ret=new ReturnWithExceptions<>(this);
  SolrInputDocument dipFileDocument=SolrUtils.dipFileToSolrDocument(dip,file);
  SolrUtils.create(index,RodaConstants.INDEX_DIP_FILE,dipFileDocument,(ModelObserver)this).addTo(ret);
  if (recursive && file.isDirectory() && ret.isEmpty()) {
    try (CloseableIterable<OptionalWithCause<DIPFile>> allFiles=model.listDIPFilesUnder(file,true)){
      for (      OptionalWithCause<DIPFile> subfile : allFiles) {
        if (subfile.isPresent()) {
          indexDIPFile(dip,subfile.get(),false).addTo(ret);
        }
 else {
          LOGGER.error(""String_Node_Str"",subfile.getCause());
          ret.add(subfile.getCause());
        }
      }
    }
 catch (    NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException e) {
      LOGGER.error(""String_Node_Str"",file,e);
      ret.add(e);
    }
  }
  return ret;
}",0.8860759493670886
188225,"private static <T>SolrInputDocument toSolrDocument(Class<T> resultClass,T object) throws GenericException, NotSupportedException {
  SolrInputDocument ret;
  if (resultClass.equals(IndexedAIP.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(IndexedRepresentation.class) || resultClass.equals(Representation.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(LogEntry.class)) {
    ret=logEntryToSolrDocument((LogEntry)object);
  }
 else   if (resultClass.equals(Report.class) || resultClass.equals(IndexedReport.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(RODAMember.class) || resultClass.equals(User.class) || resultClass.equals(Group.class)) {
    ret=rodaMemberToSolrDocument((RODAMember)object);
  }
 else   if (resultClass.equals(TransferredResource.class)) {
    ret=transferredResourceToSolrDocument((TransferredResource)object);
  }
 else   if (resultClass.equals(Job.class)) {
    ret=jobToSolrDocument((Job)object);
  }
 else   if (resultClass.equals(Risk.class) || resultClass.equals(IndexedRisk.class)) {
    ret=riskToSolrDocument((Risk)object,0);
  }
 else   if (resultClass.equals(RepresentationInformation.class)) {
    ret=representationInformationToSolrDocument((RepresentationInformation)object);
  }
 else   if (resultClass.equals(Notification.class)) {
    ret=notificationToSolrDocument((Notification)object);
  }
 else   if (resultClass.equals(RiskIncidence.class)) {
    ret=riskIncidenceToSolrDocument((RiskIncidence)object);
  }
 else   if (resultClass.equals(DIP.class) || resultClass.equals(IndexedDIP.class)) {
    ret=dipToSolrDocument((DIP)object);
  }
 else   if (resultClass.equals(IndexedFile.class) || resultClass.equals(DIPFile.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(IndexedPreservationEvent.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(IndexedPreservationAgent.class)) {
    throw new NotSupportedException();
  }
 else   if (resultClass.equals(Format.class)) {
    ret=formatToSolrDocument((Format)object);
  }
 else {
    throw new GenericException(""String_Node_Str"" + resultClass.getName());
  }
  return ret;
}","private static <T>Optional<SolrInputDocument> toSolrDocument(Class<T> resultClass,T object) throws GenericException, NotSupportedException {
  Optional<SolrInputDocument> ret;
  if (resultClass.equals(IndexedAIP.class)) {
    ret=Optional.empty();
  }
 else   if (resultClass.equals(IndexedRepresentation.class) || resultClass.equals(Representation.class)) {
    ret=Optional.empty();
  }
 else   if (resultClass.equals(LogEntry.class)) {
    ret=Optional.of(logEntryToSolrDocument((LogEntry)object));
  }
 else   if (resultClass.equals(Report.class) || resultClass.equals(IndexedReport.class)) {
    ret=Optional.empty();
  }
 else   if (resultClass.equals(RODAMember.class) || resultClass.equals(User.class) || resultClass.equals(Group.class)) {
    ret=Optional.of(rodaMemberToSolrDocument((RODAMember)object));
  }
 else   if (resultClass.equals(TransferredResource.class)) {
    ret=Optional.of(transferredResourceToSolrDocument((TransferredResource)object));
  }
 else   if (resultClass.equals(Job.class)) {
    ret=Optional.of(jobToSolrDocument((Job)object));
  }
 else   if (resultClass.equals(Risk.class) || resultClass.equals(IndexedRisk.class)) {
    ret=Optional.of(riskToSolrDocument((Risk)object,0));
  }
 else   if (resultClass.equals(RepresentationInformation.class)) {
    ret=Optional.of(representationInformationToSolrDocument((RepresentationInformation)object));
  }
 else   if (resultClass.equals(Notification.class)) {
    ret=Optional.of(notificationToSolrDocument((Notification)object));
  }
 else   if (resultClass.equals(RiskIncidence.class)) {
    ret=Optional.of(riskIncidenceToSolrDocument((RiskIncidence)object));
  }
 else   if (resultClass.equals(DIP.class) || resultClass.equals(IndexedDIP.class)) {
    ret=Optional.of(dipToSolrDocument((DIP)object));
  }
 else   if (resultClass.equals(IndexedFile.class) || resultClass.equals(DIPFile.class)) {
    ret=Optional.empty();
  }
 else   if (resultClass.equals(IndexedPreservationEvent.class) || resultClass.equals(IndexedPreservationAgent.class)) {
    ret=Optional.empty();
  }
 else   if (resultClass.equals(Format.class)) {
    ret=Optional.of(formatToSolrDocument((Format)object));
  }
 else {
    throw new GenericException(""String_Node_Str"" + resultClass.getName());
  }
  return ret;
}",0.8985828166519043
188226,"public static <T extends IsIndexed,S extends Object>ReturnWithExceptions<Void,S> create(SolrClient index,Class<T> classToCreate,T instance,S source,boolean commit){
  ReturnWithExceptions<Void,S> ret=new ReturnWithExceptions<>();
  try {
    create(index,getIndexName(classToCreate).get(0),toSolrDocument(classToCreate,instance),source).addTo(ret);
    if (commit) {
      commit(index,classToCreate);
    }
  }
 catch (  NotSupportedException|GenericException e) {
    LOGGER.error(""String_Node_Str"",e);
    ret.add(e);
  }
  return ret;
}","public static <T extends IsIndexed,S extends Object>ReturnWithExceptions<Void,S> create(SolrClient index,Class<T> classToCreate,T instance,S source,boolean commit){
  ReturnWithExceptions<Void,S> ret=new ReturnWithExceptions<>();
  try {
    Optional<SolrInputDocument> solrDocument=toSolrDocument(classToCreate,instance);
    if (solrDocument.isPresent()) {
      create(index,getIndexName(classToCreate).get(0),solrDocument.get(),source).addTo(ret);
      if (commit) {
        commit(index,classToCreate);
      }
    }
  }
 catch (  NotSupportedException|GenericException e) {
    LOGGER.error(""String_Node_Str"",e);
    ret.add(e);
  }
  return ret;
}",0.7698744769874477
188227,"@Override public int hashCode(){
  return super.hashCode();
}","@Override public int hashCode(){
  final int prime=31;
  int result=super.hashCode();
  result=prime * result + ((granularity == null) ? 0 : granularity.hashCode());
  result=prime * result + timeZoneOffset;
  result=prime * result + ((toName == null) ? 0 : toName.hashCode());
  return result;
}",0.3025210084033613
188228,"@Override public boolean equals(Object obj){
  return super.equals(obj);
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  DateIntervalFilterParameter other=(DateIntervalFilterParameter)obj;
  if (granularity != other.granularity)   return false;
  if (timeZoneOffset != other.timeZoneOffset)   return false;
  if (toName == null) {
    if (other.toName != null)     return false;
  }
 else   if (!toName.equals(other.toName))   return false;
  return true;
}",0.2222222222222222
188229,"@Override public String toString(){
  return ""String_Node_Str"" + getGranularity() + ""String_Node_Str""+ getFromName()+ ""String_Node_Str""+ getToName()+ ""String_Node_Str""+ getFromValue()+ ""String_Node_Str""+ getToValue()+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + getGranularity() + ""String_Node_Str""+ getFromName()+ ""String_Node_Str""+ getToName()+ ""String_Node_Str""+ getFromValue()+ ""String_Node_Str""+ getToValue()+ ""String_Node_Str""+ getTimeZoneOffset()+ ""String_Node_Str"";
}",0.9224806201550388
188230,"public DateIntervalFilterParameter(DateIntervalFilterParameter dateIntervalFilterParameter){
  this(dateIntervalFilterParameter.getFromName(),dateIntervalFilterParameter.getToName(),dateIntervalFilterParameter.getFromValue(),dateIntervalFilterParameter.getToValue(),dateIntervalFilterParameter.getGranularity());
}","public DateIntervalFilterParameter(DateIntervalFilterParameter dateIntervalFilterParameter){
  this(dateIntervalFilterParameter.getFromName(),dateIntervalFilterParameter.getToName(),dateIntervalFilterParameter.getFromValue(),dateIntervalFilterParameter.getToValue(),dateIntervalFilterParameter.getGranularity(),dateIntervalFilterParameter.getTimeZoneOffset());
}",0.9289940828402368
188231,"@Override public int hashCode(){
  return super.hashCode();
}","@Override public int hashCode(){
  final int prime=31;
  int result=super.hashCode();
  result=prime * result + ((granularity == null) ? 0 : granularity.hashCode());
  result=prime * result + timeZoneOffset;
  return result;
}",0.3763066202090592
188232,"@Override public boolean equals(Object obj){
  return super.equals(obj);
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  DateRangeFilterParameter other=(DateRangeFilterParameter)obj;
  if (granularity != other.granularity)   return false;
  if (timeZoneOffset != other.timeZoneOffset)   return false;
  return true;
}",0.3011235955056179
188233,"public DateRangeFilterParameter(String name,Date fromValue,Date toValue,DateGranularity granularity){
  super(name,fromValue,toValue);
  this.setGranularity(granularity);
}","public DateRangeFilterParameter(String name,Date fromValue,Date toValue,DateGranularity granularity,int timeZoneOffset){
  super(name,fromValue,toValue);
  this.setGranularity(granularity);
  this.setTimeZoneOffset(timeZoneOffset);
}",0.8493827160493828
188234,"private static void parseFilterParameter(StringBuilder ret,FilterParameter parameter,boolean prefixWithANDOperatorIfBuilderNotEmpty) throws RequestNotValidException {
  if (parameter instanceof SimpleFilterParameter) {
    SimpleFilterParameter simplePar=(SimpleFilterParameter)parameter;
    appendExactMatch(ret,simplePar.getName(),simplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OneOfManyFilterParameter) {
    OneOfManyFilterParameter param=(OneOfManyFilterParameter)parameter;
    appendValuesUsingOROperator(ret,param.getName(),param.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof BasicSearchFilterParameter) {
    BasicSearchFilterParameter param=(BasicSearchFilterParameter)parameter;
    appendBasicSearch(ret,param.getName(),param.getValue(),""String_Node_Str"",prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof EmptyKeyFilterParameter) {
    EmptyKeyFilterParameter param=(EmptyKeyFilterParameter)parameter;
    appendANDOperator(ret,true);
    ret.append(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
 else   if (parameter instanceof DateRangeFilterParameter) {
    DateRangeFilterParameter param=(DateRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Date.class,param.getFromValue(),String.class,processToDate(param.getToValue(),param.getGranularity(),false),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof DateIntervalFilterParameter) {
    DateIntervalFilterParameter param=(DateIntervalFilterParameter)parameter;
    appendRangeInterval(ret,param.getFromName(),param.getToName(),param.getFromValue(),param.getToValue(),param.getGranularity(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof LongRangeFilterParameter) {
    LongRangeFilterParameter param=(LongRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Long.class,param.getFromValue(),Long.class,param.getToValue(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof NotSimpleFilterParameter) {
    NotSimpleFilterParameter notSimplePar=(NotSimpleFilterParameter)parameter;
    appendNotExactMatch(ret,notSimplePar.getName(),notSimplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OrFiltersParameters || parameter instanceof AndFiltersParameters) {
    FiltersParameters filters=(FiltersParameters)parameter;
    appendFiltersWithOperator(ret,parameter instanceof OrFiltersParameters ? ""String_Node_Str"" : ""String_Node_Str"",filters.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else {
    LOGGER.error(""String_Node_Str"",parameter.getClass().getName());
    throw new RequestNotValidException(""String_Node_Str"" + parameter.getClass().getName());
  }
}","private static void parseFilterParameter(StringBuilder ret,FilterParameter parameter,boolean prefixWithANDOperatorIfBuilderNotEmpty) throws RequestNotValidException {
  if (parameter instanceof SimpleFilterParameter) {
    SimpleFilterParameter simplePar=(SimpleFilterParameter)parameter;
    appendExactMatch(ret,simplePar.getName(),simplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OneOfManyFilterParameter) {
    OneOfManyFilterParameter param=(OneOfManyFilterParameter)parameter;
    appendValuesUsingOROperator(ret,param.getName(),param.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof BasicSearchFilterParameter) {
    BasicSearchFilterParameter param=(BasicSearchFilterParameter)parameter;
    appendBasicSearch(ret,param.getName(),param.getValue(),""String_Node_Str"",prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof EmptyKeyFilterParameter) {
    EmptyKeyFilterParameter param=(EmptyKeyFilterParameter)parameter;
    appendANDOperator(ret,true);
    ret.append(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
 else   if (parameter instanceof DateRangeFilterParameter) {
    DateRangeFilterParameter param=(DateRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Date.class,param.getFromValue(),String.class,processToDate(param.getToValue(),param.getGranularity(),param.getTimeZoneOffset(),false),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof DateIntervalFilterParameter) {
    DateIntervalFilterParameter param=(DateIntervalFilterParameter)parameter;
    appendRangeInterval(ret,param.getFromName(),param.getToName(),param.getFromValue(),param.getToValue(),param.getGranularity(),param.getTimeZoneOffset(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof LongRangeFilterParameter) {
    LongRangeFilterParameter param=(LongRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Long.class,param.getFromValue(),Long.class,param.getToValue(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof NotSimpleFilterParameter) {
    NotSimpleFilterParameter notSimplePar=(NotSimpleFilterParameter)parameter;
    appendNotExactMatch(ret,notSimplePar.getName(),notSimplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OrFiltersParameters || parameter instanceof AndFiltersParameters) {
    FiltersParameters filters=(FiltersParameters)parameter;
    appendFiltersWithOperator(ret,parameter instanceof OrFiltersParameters ? ""String_Node_Str"" : ""String_Node_Str"",filters.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else {
    LOGGER.error(""String_Node_Str"",parameter.getClass().getName());
    throw new RequestNotValidException(""String_Node_Str"" + parameter.getClass().getName());
  }
}",0.990950226244344
188235,"private static void appendRangeInterval(StringBuilder ret,String fromKey,String toKey,Date fromValue,Date toValue,DateGranularity granularity,boolean prefixWithANDOperatorIfBuilderNotEmpty){
  if (fromValue != null || toValue != null) {
    appendANDOperator(ret,prefixWithANDOperatorIfBuilderNotEmpty);
    ret.append(""String_Node_Str"");
    ret.append(fromKey).append(""String_Node_Str"");
    ret.append(processFromDate(fromValue));
    ret.append(""String_Node_Str"");
    ret.append(processToDate(toValue,granularity));
    ret.append(""String_Node_Str"").append(""String_Node_Str"");
    ret.append(toKey).append(""String_Node_Str"");
    ret.append(processFromDate(fromValue));
    ret.append(""String_Node_Str"");
    ret.append(processToDate(toValue,granularity));
    ret.append(""String_Node_Str"");
    if (fromValue != null && toValue != null) {
      ret.append(""String_Node_Str"").append(""String_Node_Str"").append(fromKey).append(""String_Node_Str"").append(processToDate(fromValue,granularity)).append(""String_Node_Str"");
      ret.append(""String_Node_Str"").append(toKey).append(""String_Node_Str"").append(processFromDate(toValue)).append(""String_Node_Str"").append(""String_Node_Str"");
    }
    ret.append(""String_Node_Str"");
  }
}","private static void appendRangeInterval(StringBuilder ret,String fromKey,String toKey,Date fromValue,Date toValue,DateGranularity granularity,int timeZoneOffset,boolean prefixWithANDOperatorIfBuilderNotEmpty){
  if (fromValue != null || toValue != null) {
    appendANDOperator(ret,prefixWithANDOperatorIfBuilderNotEmpty);
    ret.append(""String_Node_Str"");
    ret.append(fromKey).append(""String_Node_Str"");
    ret.append(processFromDate(fromValue));
    ret.append(""String_Node_Str"");
    ret.append(processToDate(toValue,granularity,timeZoneOffset));
    ret.append(""String_Node_Str"").append(""String_Node_Str"");
    ret.append(toKey).append(""String_Node_Str"");
    ret.append(processFromDate(fromValue));
    ret.append(""String_Node_Str"");
    ret.append(processToDate(toValue,granularity,timeZoneOffset));
    ret.append(""String_Node_Str"");
    if (fromValue != null && toValue != null) {
      ret.append(""String_Node_Str"").append(""String_Node_Str"").append(fromKey).append(""String_Node_Str"").append(processToDate(fromValue,granularity,timeZoneOffset)).append(""String_Node_Str"");
      ret.append(""String_Node_Str"").append(toKey).append(""String_Node_Str"").append(processFromDate(toValue)).append(""String_Node_Str"").append(""String_Node_Str"");
    }
    ret.append(""String_Node_Str"");
  }
}",0.9746233148295004
188236,"private static String processToDate(Date toValue,DateGranularity granularity,boolean returnAsteriskOnNull){
  final String ret;
  StringBuilder sb=new StringBuilder();
  if (toValue != null) {
    sb.append(DateUtil.getThreadLocalDateFormat().format(toValue));
switch (granularity) {
case YEAR:
      sb.append(""String_Node_Str"");
    break;
case MONTH:
  sb.append(""String_Node_Str"");
break;
case DAY:
sb.append(""String_Node_Str"");
break;
case HOUR:
sb.append(""String_Node_Str"");
break;
case MINUTE:
sb.append(""String_Node_Str"");
break;
case SECOND:
sb.append(""String_Node_Str"");
break;
default :
break;
}
ret=sb.toString();
}
 else {
ret=returnAsteriskOnNull ? ""String_Node_Str"" : null;
}
return ret;
}","private static String processToDate(Date toValue,DateGranularity granularity,int timeZoneOffset,boolean returnAsteriskOnNull){
  final String ret;
  StringBuilder sb=new StringBuilder();
  if (toValue != null) {
    Date toValueWithoutTimeZone=(Date)toValue.clone();
    toValueWithoutTimeZone.setMinutes(toValueWithoutTimeZone.getMinutes() - timeZoneOffset);
    sb.append(DateUtil.getThreadLocalDateFormat().format(toValueWithoutTimeZone));
switch (granularity) {
case YEAR:
      sb.append(""String_Node_Str"");
    break;
case MONTH:
  sb.append(""String_Node_Str"");
break;
case DAY:
sb.append(""String_Node_Str"");
break;
case HOUR:
sb.append(""String_Node_Str"");
break;
case MINUTE:
sb.append(""String_Node_Str"");
break;
case SECOND:
sb.append(""String_Node_Str"");
break;
default :
break;
}
ret=sb.toString();
}
 else {
ret=returnAsteriskOnNull ? ""String_Node_Str"" : null;
}
return ret;
}",0.8855345911949686
188237,"public static void showPromptDialogRepresentationInformation(String title,String cancelButtonText,String confirmButtonText,String listButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformation> callback){
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Void result){
      dialogBox.center();
    }
  }
);
  description.addStyleName(""String_Node_Str"");
  layout.add(description);
  final FlowPanel relationFormPanel=new FlowPanel();
  relationFormPanel.addStyleName(""String_Node_Str"");
  layout.add(relationFormPanel);
  final FlowPanel listPanel=new FlowPanel();
  layout.add(listPanel);
  final Label section=new Label(messages.currentRelationResults());
  section.addStyleName(""String_Node_Str"");
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  final Button listButton=new Button(listButtonText);
  buttonPanel.add(cancelButton);
  buttonPanel.add(confirmButton);
  buttonPanel.add(listButton);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  final Dropdown dropDown=new Dropdown();
  dropDown.setStyleName(""String_Node_Str"");
  dropDown.addPopupStyleName(""String_Node_Str"");
  dropDown.setVisible(true);
  dropDown.setLabel(messages.searchListBoxItems());
  dropDown.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_ITEMS);
  dropDown.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_REPRESENTATIONS);
  dropDown.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_FILES);
  final FlowPanel fieldsPanel=new FlowPanel();
  fieldsPanel.setStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RepresentationInformationFilterBundle result){
      relationFormPanel.add(dropDown);
      relationFormPanel.add(fieldsPanel);
      final List<String> appropriateFields=new ArrayList<>();
      final Map<String,List<String>> values=new HashMap<>();
      dropDown.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          updateAssociationFields(fieldsPanel,dropDown,appropriateFields,result,ri,values);
          dialogBox.center();
        }
      }
);
      if (!ri.getFilters().isEmpty()) {
        if (ri.getFilters().get(0).startsWith(Representation.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(Representation.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_REPRESENTATIONS,true);
        }
 else         if (ri.getFilters().get(0).startsWith(File.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(File.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_FILES,true);
        }
 else         if (ri.getFilters().get(0).startsWith(AIP.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
        }
      }
 else {
        appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
        dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
      }
      dialogBox.center();
      confirmButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          ri.setFilters(new ArrayList<String>());
          String className;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
            className=AIP.class.getSimpleName();
          break;
case RodaConstants.SEARCH_REPRESENTATIONS:
        className=Representation.class.getSimpleName();
      break;
case RodaConstants.SEARCH_FILES:
    className=File.class.getSimpleName();
  break;
default :
return;
}
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  ri.addFilter(RepresentationInformationUtils.createRepresentationInformationFilter(className,field,value));
}
}
}
callback.onSuccess(ri);
}
}
);
listButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
Filter tableFilter=new Filter();
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  tableFilter.add(new SimpleFilterParameter(field,value));
}
}
}
listPanel.clear();
if (!tableFilter.getParameters().isEmpty()) {
BasicAsyncTableCell<?> table=null;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
table=new AIPList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_REPRESENTATIONS:
table=new RepresentationList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_FILES:
table=new SimpleFileList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
default :
break;
}
if (table != null) {
table.addRedrawHandler(new AbstractHasData.RedrawEvent.Handler(){
@Override public void onRedraw(){
dialogBox.center();
}
}
);
listPanel.add(section);
listPanel.add(table);
}
}
}
}
);
}
}
);
cancelButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
dialogBox.hide();
callback.onFailure(null);
}
}
);
dialogBox.addStyleName(""String_Node_Str"");
layout.addStyleName(""String_Node_Str"");
cancelButton.addStyleName(""String_Node_Str"");
confirmButton.addStyleName(""String_Node_Str"");
listButton.addStyleName(""String_Node_Str"");
dialogBox.center();
dialogBox.show();
}","public static void showPromptDialogRepresentationInformation(String title,String cancelButtonText,String confirmButtonText,String listButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformation> callback){
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Void result){
      dialogBox.center();
    }
  }
);
  description.addStyleName(""String_Node_Str"");
  layout.add(description);
  final FlowPanel relationFormPanel=new FlowPanel();
  relationFormPanel.addStyleName(""String_Node_Str"");
  layout.add(relationFormPanel);
  final FlowPanel listPanel=new FlowPanel();
  layout.add(listPanel);
  final Label section=new Label(messages.currentRelationResults());
  section.addStyleName(""String_Node_Str"");
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  final Button listButton=new Button(listButtonText);
  buttonPanel.add(cancelButton);
  buttonPanel.add(confirmButton);
  buttonPanel.add(listButton);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  final Dropdown dropDown=new Dropdown();
  dropDown.setStyleName(""String_Node_Str"");
  dropDown.addPopupStyleName(""String_Node_Str"");
  dropDown.setVisible(true);
  dropDown.setLabel(messages.searchListBoxItems());
  dropDown.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_ITEMS);
  dropDown.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_REPRESENTATIONS);
  dropDown.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_FILES);
  final FlowPanel fieldsPanel=new FlowPanel();
  fieldsPanel.setStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RepresentationInformationFilterBundle result){
      relationFormPanel.add(dropDown);
      relationFormPanel.add(fieldsPanel);
      final List<String> appropriateFields=new ArrayList<>();
      final Map<String,List<String>> values=new HashMap<>();
      dropDown.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          updateAssociationFields(fieldsPanel,dropDown,appropriateFields,result,ri,values);
          dialogBox.center();
        }
      }
);
      if (!ri.getFilters().isEmpty()) {
        if (ri.getFilters().get(0).startsWith(Representation.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(Representation.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_REPRESENTATIONS,true);
        }
 else         if (ri.getFilters().get(0).startsWith(File.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(File.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_FILES,true);
        }
 else         if (ri.getFilters().get(0).startsWith(AIP.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
        }
      }
 else {
        appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
        dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
      }
      dialogBox.center();
      confirmButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          ri.setFilters(new ArrayList<String>());
          String className;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
            className=AIP.class.getSimpleName();
          break;
case RodaConstants.SEARCH_REPRESENTATIONS:
        className=Representation.class.getSimpleName();
      break;
case RodaConstants.SEARCH_FILES:
    className=File.class.getSimpleName();
  break;
default :
return;
}
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  ri.addFilter(RepresentationInformationUtils.createRepresentationInformationFilter(className,field,value));
}
}
}
callback.onSuccess(ri);
}
}
);
listButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
List<FilterParameter> filterList=new ArrayList<>();
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  filterList.add(new SimpleFilterParameter(field,value));
}
}
}
listPanel.clear();
if (!filterList.isEmpty()) {
BasicAsyncTableCell<?> table=null;
Filter tableFilter=new Filter(new OrFiltersParameters(filterList));
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
table=new AIPList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_REPRESENTATIONS:
table=new RepresentationList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_FILES:
table=new SimpleFileList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
default :
break;
}
if (table != null) {
table.addRedrawHandler(new AbstractHasData.RedrawEvent.Handler(){
@Override public void onRedraw(){
dialogBox.center();
}
}
);
listPanel.add(section);
listPanel.add(table);
}
}
}
}
);
}
}
);
cancelButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
dialogBox.hide();
callback.onFailure(null);
}
}
);
dialogBox.addStyleName(""String_Node_Str"");
layout.addStyleName(""String_Node_Str"");
cancelButton.addStyleName(""String_Node_Str"");
confirmButton.addStyleName(""String_Node_Str"");
listButton.addStyleName(""String_Node_Str"");
dialogBox.center();
dialogBox.show();
}",0.9859154929577464
188238,"private void newProcess(SelectedItems<IndexedAIP> aips,AsyncCallback<ActionImpact> callback){
  LastSelectedItemsSingleton.getInstance().setSelectedItems(aips);
  LastSelectedItemsSingleton.getInstance().setLastHistory(HistoryUtils.getCurrentHistoryPath());
  HistoryUtils.newHistory(CreateSelectedJob.RESOLVER,RodaConstants.JOB_PROCESS_ACTION);
  callback.onSuccess(ActionImpact.UPDATED);
}","private void newProcess(SelectedItems<IndexedAIP> aips,AsyncCallback<ActionImpact> callback){
  LastSelectedItemsSingleton.getInstance().setSelectedItems(aips);
  LastSelectedItemsSingleton.getInstance().setLastHistory(HistoryUtils.getCurrentHistoryPath());
  HistoryUtils.newHistory(CreateSelectedJob.RESOLVER,RodaConstants.JOB_PROCESS_ACTION);
  callback.onSuccess(ActionImpact.NONE);
}",0.9884467265725289
188239,"public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  gettingFilterResults=true;
  createPanel.setVisible(false);
  resultsPanel.setVisible(false);
  if (historyTokens.size() == 2) {
    filter=createFilterAndSubtitleFromHistoryTokens(historyTokens);
    String[] parts=RepresentationInformationUtils.breakFilterIntoParts(historyTokens.get(1));
    createPanelTitle.setHTML(messages.representationInformationNoAssociations(parts[0],parts[1],parts[2]));
    resultsPanelTitle.setHTML(messages.representationInformationAssociatedWith(parts[0],parts[1],parts[2]));
    description.setHTML(messages.representationInformationAssociatedWithDescription(parts[0],parts[1],parts[2]));
    addWithAssociationDialogTitle=messages.representationInformationAssociateWith(parts[0],parts[1],parts[2]);
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    HistoryUtils.newHistory(RESOLVER);
    callback.onSuccess(null);
  }
}","public void resolve(List<String> historyTokens,AsyncCallback<Widget> callback){
  gettingFilterResults=true;
  createPanel.setVisible(false);
  resultsPanel.setVisible(false);
  if (historyTokens.size() == 2) {
    Filter filter=createFilterAndSubtitleFromHistoryTokens(historyTokens);
    String[] parts=RepresentationInformationUtils.breakFilterIntoParts(historyTokens.get(1));
    createPanelTitle.setHTML(messages.representationInformationNoAssociations(parts[0],parts[1],parts[2]));
    resultsPanelTitle.setHTML(messages.representationInformationAssociatedWith(parts[0],parts[1],parts[2]));
    description.setHTML(messages.representationInformationAssociatedWithDescription(parts[0],parts[1],parts[2]));
    addWithAssociationDialogTitle=messages.representationInformationAssociateWith(parts[0],parts[1],parts[2]);
    searchPanel.setDefaultFilter(filter,true);
    representationInformationList.setFilter(filter);
    searchPanel.clearSearchInputBox();
    callback.onSuccess(this);
  }
 else {
    HistoryUtils.newHistory(RESOLVER);
    callback.onSuccess(null);
  }
}",0.9967396367023754
188240,"/** 
 * Create a representation information page
 */
public RepresentationInformationAssociations(){
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_TAGS),new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_SUPPORT));
  representationInformationList=new RepresentationInformationList(filter,facets,messages.representationInformationTitle(),false);
  searchPanel=new SearchPanel(DEFAULT_FILTER,ALL_FILTER,true,messages.representationInformationRegisterSearchPlaceHolder(),false,false,true);
  searchPanel.setList(representationInformationList);
  initWidget(uiBinder.createAndBindUi(this));
  resultsPanel.setVisible(false);
  createPanel.setVisible(false);
  searchPanel.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      gettingFilterResults=false;
    }
  }
);
  representationInformationList.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      RepresentationInformation selected=representationInformationList.getSelectionModel().getSelectedObject();
      if (selected != null) {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setLastHistory(HistoryUtils.getCurrentHistoryPath());
        HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selected.getId());
      }
    }
  }
);
  representationInformationList.addValueChangeHandler(new ValueChangeHandler<IndexResult<RepresentationInformation>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<RepresentationInformation>> event){
      boolean associating=gettingFilterResults && event.getValue().getTotalCount() == 0;
      resultsPanel.setVisible(!associating);
      createPanel.setVisible(associating);
    }
  }
);
  Label titleLabel=new Label(messages.representationInformationAssociationsTitle());
  titleLabel.addStyleName(""String_Node_Str"");
  title.add(titleLabel);
  InlineHTML badge=new InlineHTML(""String_Node_Str"");
  title.add(badge);
  buttonAddToExistingRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RepresentationInformationDialogs.showPromptAddRepresentationInformationWithAssociation(addWithAssociationDialogTitle,messages.cancelButton(),messages.addToExistingRepresentationInformation(),messages.createNewRepresentationInformation(),new NoAsyncCallback<SelectedItemsList<RepresentationInformation>>(){
        @Override public void onSuccess(        final SelectedItemsList<RepresentationInformation> selectedItemsList){
          if (selectedItemsList != null) {
            String filtertoAdd=HistoryUtils.getCurrentHistoryPath().get(HistoryUtils.getCurrentHistoryPath().size() - 1);
            BrowserService.Util.getInstance().updateRepresentationInformationListWithFilter(selectedItemsList,filtertoAdd,new NoAsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                if (selectedItemsList.getIds().size() == 1) {
                  HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selectedItemsList.getIds().get(0));
                }
 else {
                  gettingFilterResults=false;
                  representationInformationList.refresh();
                  createPanel.setVisible(false);
                  resultsPanel.setVisible(true);
                }
              }
            }
);
          }
 else {
            addToNewClickHandler();
          }
        }
      }
);
    }
  }
);
  buttonCreateNewRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      addToNewClickHandler();
    }
  }
);
}","/** 
 * Create a representation information page
 */
public RepresentationInformationAssociations(){
  representationInformationList=new RepresentationInformationList(Filter.NULL,Facets.NONE,messages.representationInformationTitle(),false);
  searchPanel=new SearchPanel(DEFAULT_FILTER,ALL_FILTER,true,messages.representationInformationRegisterSearchPlaceHolder(),false,false,true);
  searchPanel.setList(representationInformationList);
  initWidget(uiBinder.createAndBindUi(this));
  resultsPanel.setVisible(false);
  createPanel.setVisible(false);
  searchPanel.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      gettingFilterResults=false;
    }
  }
);
  representationInformationList.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      RepresentationInformation selected=representationInformationList.getSelectionModel().getSelectedObject();
      if (selected != null) {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setLastHistory(HistoryUtils.getCurrentHistoryPath());
        HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selected.getId());
      }
    }
  }
);
  representationInformationList.addValueChangeHandler(new ValueChangeHandler<IndexResult<RepresentationInformation>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<RepresentationInformation>> event){
      boolean associating=gettingFilterResults && event.getValue().getTotalCount() == 0;
      resultsPanel.setVisible(!associating);
      createPanel.setVisible(associating);
    }
  }
);
  Label titleLabel=new Label(messages.representationInformationAssociationsTitle());
  titleLabel.addStyleName(""String_Node_Str"");
  title.add(titleLabel);
  InlineHTML badge=new InlineHTML(""String_Node_Str"");
  title.add(badge);
  buttonAddToExistingRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RepresentationInformationDialogs.showPromptAddRepresentationInformationWithAssociation(addWithAssociationDialogTitle,messages.cancelButton(),messages.addToExistingRepresentationInformation(),messages.createNewRepresentationInformation(),new NoAsyncCallback<SelectedItemsList<RepresentationInformation>>(){
        @Override public void onSuccess(        final SelectedItemsList<RepresentationInformation> selectedItemsList){
          if (selectedItemsList != null) {
            String filtertoAdd=HistoryUtils.getCurrentHistoryPath().get(HistoryUtils.getCurrentHistoryPath().size() - 1);
            BrowserService.Util.getInstance().updateRepresentationInformationListWithFilter(selectedItemsList,filtertoAdd,new NoAsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                if (selectedItemsList.getIds().size() == 1) {
                  HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selectedItemsList.getIds().get(0));
                }
 else {
                  gettingFilterResults=false;
                  representationInformationList.refresh();
                  createPanel.setVisible(false);
                  resultsPanel.setVisible(true);
                }
              }
            }
);
          }
 else {
            addToNewClickHandler();
          }
        }
      }
);
    }
  }
);
  buttonCreateNewRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      addToNewClickHandler();
    }
  }
);
}",0.9577015163607342
188241,"public static void showPromptDialogRepresentationInformation(String title,String cancelButtonText,String confirmButtonText,String listButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformation> callback){
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Void result){
      dialogBox.center();
    }
  }
);
  description.addStyleName(""String_Node_Str"");
  layout.add(description);
  final FlowPanel relationFormPanel=new FlowPanel();
  relationFormPanel.addStyleName(""String_Node_Str"");
  layout.add(relationFormPanel);
  final FlowPanel listPanel=new FlowPanel();
  layout.add(listPanel);
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  final Button listButton=new Button(listButtonText);
  buttonPanel.add(cancelButton);
  buttonPanel.add(confirmButton);
  buttonPanel.add(listButton);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  final Dropdown dropDown=new Dropdown();
  dropDown.setStyleName(""String_Node_Str"");
  dropDown.addPopupStyleName(""String_Node_Str"");
  dropDown.setVisible(true);
  dropDown.setLabel(messages.searchListBoxItems());
  dropDown.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_ITEMS);
  dropDown.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_REPRESENTATIONS);
  dropDown.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_FILES);
  final FlowPanel fieldsPanel=new FlowPanel();
  fieldsPanel.setStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RepresentationInformationFilterBundle result){
      relationFormPanel.add(dropDown);
      relationFormPanel.add(fieldsPanel);
      final List<String> appropriateFields=new ArrayList<>();
      final Map<String,List<String>> values=new HashMap<>();
      dropDown.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          updateAssociationFields(fieldsPanel,dropDown,appropriateFields,result,ri,values);
          dialogBox.center();
        }
      }
);
      if (!ri.getFilters().isEmpty()) {
        if (ri.getFilters().get(0).startsWith(Representation.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(Representation.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_REPRESENTATIONS,true);
        }
 else         if (ri.getFilters().get(0).startsWith(File.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(File.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_FILES,true);
        }
 else         if (ri.getFilters().get(0).startsWith(AIP.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
        }
      }
 else {
        appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
        dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
      }
      dialogBox.center();
      confirmButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          ri.setFilters(new ArrayList<String>());
          String className;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
            className=AIP.class.getSimpleName();
          break;
case RodaConstants.SEARCH_REPRESENTATIONS:
        className=Representation.class.getSimpleName();
      break;
case RodaConstants.SEARCH_FILES:
    className=File.class.getSimpleName();
  break;
default :
return;
}
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  ri.addFilter(RepresentationInformationUtils.createRepresentationInformationFilter(className,field,value));
}
}
}
callback.onSuccess(ri);
}
}
);
listButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
Filter tableFilter=new Filter();
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  tableFilter.add(new SimpleFilterParameter(field,value));
}
}
}
final AbstractHasData.RedrawEvent.Handler handler=new AbstractHasData.RedrawEvent.Handler(){
@Override public void onRedraw(){
dialogBox.center();
}
}
;
BasicAsyncTableCell<?> table;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
table=new AIPList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5){
@Override protected void configureDisplay(CellTable<IndexedAIP> display){
  super.configureDisplay(display);
  display.addRedrawHandler(handler);
}
}
;
break;
case RodaConstants.SEARCH_REPRESENTATIONS:
table=new RepresentationList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5){
@Override protected void configureDisplay(CellTable<IndexedRepresentation> display){
super.configureDisplay(display);
display.addRedrawHandler(handler);
}
}
;
break;
case RodaConstants.SEARCH_FILES:
table=new SimpleFileList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5){
@Override protected void configureDisplay(CellTable<IndexedFile> display){
super.configureDisplay(display);
display.addRedrawHandler(handler);
}
}
;
break;
default :
return;
}
Label section=new Label(messages.currentRelationResults());
section.addStyleName(""String_Node_Str"");
listPanel.clear();
listPanel.add(section);
listPanel.add(table);
}
}
);
}
}
);
cancelButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
dialogBox.hide();
callback.onFailure(null);
}
}
);
dialogBox.addStyleName(""String_Node_Str"");
layout.addStyleName(""String_Node_Str"");
cancelButton.addStyleName(""String_Node_Str"");
confirmButton.addStyleName(""String_Node_Str"");
listButton.addStyleName(""String_Node_Str"");
dialogBox.center();
dialogBox.show();
}","public static void showPromptDialogRepresentationInformation(String title,String cancelButtonText,String confirmButtonText,String listButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformation> callback){
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Void result){
      dialogBox.center();
    }
  }
);
  description.addStyleName(""String_Node_Str"");
  layout.add(description);
  final FlowPanel relationFormPanel=new FlowPanel();
  relationFormPanel.addStyleName(""String_Node_Str"");
  layout.add(relationFormPanel);
  final FlowPanel listPanel=new FlowPanel();
  layout.add(listPanel);
  final Label section=new Label(messages.currentRelationResults());
  section.addStyleName(""String_Node_Str"");
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  final Button listButton=new Button(listButtonText);
  buttonPanel.add(cancelButton);
  buttonPanel.add(confirmButton);
  buttonPanel.add(listButton);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  final Dropdown dropDown=new Dropdown();
  dropDown.setStyleName(""String_Node_Str"");
  dropDown.addPopupStyleName(""String_Node_Str"");
  dropDown.setVisible(true);
  dropDown.setLabel(messages.searchListBoxItems());
  dropDown.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_ITEMS);
  dropDown.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_REPRESENTATIONS);
  dropDown.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_FILES);
  final FlowPanel fieldsPanel=new FlowPanel();
  fieldsPanel.setStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RepresentationInformationFilterBundle result){
      relationFormPanel.add(dropDown);
      relationFormPanel.add(fieldsPanel);
      final List<String> appropriateFields=new ArrayList<>();
      final Map<String,List<String>> values=new HashMap<>();
      dropDown.addValueChangeHandler(new ValueChangeHandler<String>(){
        @Override public void onValueChange(        ValueChangeEvent<String> event){
          updateAssociationFields(fieldsPanel,dropDown,appropriateFields,result,ri,values);
          dialogBox.center();
        }
      }
);
      if (!ri.getFilters().isEmpty()) {
        if (ri.getFilters().get(0).startsWith(Representation.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(Representation.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_REPRESENTATIONS,true);
        }
 else         if (ri.getFilters().get(0).startsWith(File.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(File.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_FILES,true);
        }
 else         if (ri.getFilters().get(0).startsWith(AIP.class.getSimpleName())) {
          appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
          dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
        }
      }
 else {
        appropriateFields.addAll(result.getObjectClassFields().get(AIP.class.getSimpleName()));
        dropDown.setSelectedValue(RodaConstants.SEARCH_ITEMS,true);
      }
      dialogBox.center();
      confirmButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          ri.setFilters(new ArrayList<String>());
          String className;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
            className=AIP.class.getSimpleName();
          break;
case RodaConstants.SEARCH_REPRESENTATIONS:
        className=Representation.class.getSimpleName();
      break;
case RodaConstants.SEARCH_FILES:
    className=File.class.getSimpleName();
  break;
default :
return;
}
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  ri.addFilter(RepresentationInformationUtils.createRepresentationInformationFilter(className,field,value));
}
}
}
callback.onSuccess(ri);
}
}
);
listButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
Filter tableFilter=new Filter();
for (String field : values.keySet()) {
for (String value : values.get(field)) {
if (StringUtils.isNotBlank(value)) {
  tableFilter.add(new SimpleFilterParameter(field,value));
}
}
}
listPanel.clear();
if (!tableFilter.getParameters().isEmpty()) {
BasicAsyncTableCell<?> table=null;
switch (dropDown.getSelectedValue()) {
case RodaConstants.SEARCH_ITEMS:
table=new AIPList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_REPRESENTATIONS:
table=new RepresentationList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
case RodaConstants.SEARCH_FILES:
table=new SimpleFileList(tableFilter,true,Facets.NONE,""String_Node_Str"",false,5,5);
break;
default :
break;
}
if (table != null) {
table.addRedrawHandler(new AbstractHasData.RedrawEvent.Handler(){
@Override public void onRedraw(){
dialogBox.center();
}
}
);
listPanel.add(section);
listPanel.add(table);
}
}
}
}
);
}
}
);
cancelButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
dialogBox.hide();
callback.onFailure(null);
}
}
);
dialogBox.addStyleName(""String_Node_Str"");
layout.addStyleName(""String_Node_Str"");
cancelButton.addStyleName(""String_Node_Str"");
confirmButton.addStyleName(""String_Node_Str"");
listButton.addStyleName(""String_Node_Str"");
dialogBox.center();
dialogBox.show();
}",0.913145717970113
188242,"/** 
 * Representation information dialog 
 */
String representationInformationChooseOptionLabel();",String representationInformationChooseOptionLabel();,0.6887417218543046
188243,"/** 
 * Create a representation information page
 */
public RepresentationInformationAssociations(){
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_TAGS),new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_SUPPORT));
  representationInformationList=new RepresentationInformationList(filter,facets,messages.representationInformationTitle(),false);
  searchPanel=new SearchPanel(DEFAULT_FILTER,ALL_FILTER,true,messages.representationInformationRegisterSearchPlaceHolder(),false,false,true);
  searchPanel.setList(representationInformationList);
  initWidget(uiBinder.createAndBindUi(this));
  resultsPanel.setVisible(false);
  createPanel.setVisible(false);
  searchPanel.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      gettingFilterResults=false;
    }
  }
);
  representationInformationList.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      RepresentationInformation selected=representationInformationList.getSelectionModel().getSelectedObject();
      if (selected != null) {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setLastHistory(HistoryUtils.getCurrentHistoryPath());
        HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selected.getId());
      }
    }
  }
);
  representationInformationList.addValueChangeHandler(new ValueChangeHandler<IndexResult<RepresentationInformation>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<RepresentationInformation>> event){
      boolean associating=gettingFilterResults && event.getValue().getTotalCount() == 0;
      resultsPanel.setVisible(!associating);
      createPanel.setVisible(associating);
    }
  }
);
  Label titleLabel=new Label(messages.representationInformationAssociationsTitle());
  titleLabel.addStyleName(""String_Node_Str"");
  title.add(titleLabel);
  InlineHTML badge=new InlineHTML(""String_Node_Str"");
  title.add(badge);
  buttonAddToExistingRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RepresentationInformationDialogs.showPromptAddRepresentationInformationWithAssociation(addWithAssociationDialogTitle,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new NoAsyncCallback<SelectedItemsList<RepresentationInformation>>(){
        @Override public void onSuccess(        final SelectedItemsList<RepresentationInformation> selectedItemsList){
          if (selectedItemsList != null) {
            String filtertoAdd=HistoryUtils.getCurrentHistoryPath().get(HistoryUtils.getCurrentHistoryPath().size() - 1);
            BrowserService.Util.getInstance().updateRepresentationInformationListWithFilter(selectedItemsList,filtertoAdd,new NoAsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                if (selectedItemsList.getIds().size() == 1) {
                  HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selectedItemsList.getIds().get(0));
                }
 else {
                  gettingFilterResults=false;
                  representationInformationList.refresh();
                  createPanel.setVisible(false);
                  resultsPanel.setVisible(true);
                }
              }
            }
);
          }
 else {
            addToNewClickHandler();
          }
        }
      }
);
    }
  }
);
  buttonAddToNewRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      addToNewClickHandler();
    }
  }
);
}","/** 
 * Create a representation information page
 */
public RepresentationInformationAssociations(){
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_TAGS),new SimpleFacetParameter(RodaConstants.REPRESENTATION_INFORMATION_SUPPORT));
  representationInformationList=new RepresentationInformationList(filter,facets,messages.representationInformationTitle(),false);
  searchPanel=new SearchPanel(DEFAULT_FILTER,ALL_FILTER,true,messages.representationInformationRegisterSearchPlaceHolder(),false,false,true);
  searchPanel.setList(representationInformationList);
  initWidget(uiBinder.createAndBindUi(this));
  resultsPanel.setVisible(false);
  createPanel.setVisible(false);
  searchPanel.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      gettingFilterResults=false;
    }
  }
);
  representationInformationList.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      RepresentationInformation selected=representationInformationList.getSelectionModel().getSelectedObject();
      if (selected != null) {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setLastHistory(HistoryUtils.getCurrentHistoryPath());
        HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selected.getId());
      }
    }
  }
);
  representationInformationList.addValueChangeHandler(new ValueChangeHandler<IndexResult<RepresentationInformation>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<RepresentationInformation>> event){
      boolean associating=gettingFilterResults && event.getValue().getTotalCount() == 0;
      resultsPanel.setVisible(!associating);
      createPanel.setVisible(associating);
    }
  }
);
  Label titleLabel=new Label(messages.representationInformationAssociationsTitle());
  titleLabel.addStyleName(""String_Node_Str"");
  title.add(titleLabel);
  InlineHTML badge=new InlineHTML(""String_Node_Str"");
  title.add(badge);
  buttonAddToExistingRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RepresentationInformationDialogs.showPromptAddRepresentationInformationWithAssociation(addWithAssociationDialogTitle,messages.cancelButton(),messages.addToExistingRepresentationInformation(),messages.createNewRepresentationInformation(),new NoAsyncCallback<SelectedItemsList<RepresentationInformation>>(){
        @Override public void onSuccess(        final SelectedItemsList<RepresentationInformation> selectedItemsList){
          if (selectedItemsList != null) {
            String filtertoAdd=HistoryUtils.getCurrentHistoryPath().get(HistoryUtils.getCurrentHistoryPath().size() - 1);
            BrowserService.Util.getInstance().updateRepresentationInformationListWithFilter(selectedItemsList,filtertoAdd,new NoAsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                if (selectedItemsList.getIds().size() == 1) {
                  HistoryUtils.newHistory(ShowRepresentationInformation.RESOLVER,selectedItemsList.getIds().get(0));
                }
 else {
                  gettingFilterResults=false;
                  representationInformationList.refresh();
                  createPanel.setVisible(false);
                  resultsPanel.setVisible(true);
                }
              }
            }
);
          }
 else {
            addToNewClickHandler();
          }
        }
      }
);
    }
  }
);
  buttonCreateNewRI.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      addToNewClickHandler();
    }
  }
);
}",0.9762373637915188
188244,"@Override public void onClick(ClickEvent event){
  relations.get(translations.get(relation.getValue().getRelationType())).remove(relation);
  listRelations();
  DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
}","@Override public void onClick(ClickEvent event){
  relations.get(translations.get(relation.getValue().getObjectType()).get(relation.getValue().getRelationType())).remove(relation);
  listRelations();
  DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
}",0.8957952468007313
188245,"private void addRelation(final RepresentationInformationRelation element,final boolean redesign,final Map<RelationObjectType,Map<String,String>> translations){
  final RemovableRelation relation=new RemovableRelation(element);
  String relationType=translations.get(element.getObjectType()).get(element.getRelationType());
  if (relations.containsKey(relationType)) {
    relations.get(relationType).add(relation);
  }
 else {
    List<RemovableRelation> list=new ArrayList<>();
    list.add(relation);
    relations.put(relationType,list);
  }
  relation.addRemoveClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      relations.get(translations.get(relation.getValue().getRelationType())).remove(relation);
      listRelations();
      DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
    }
  }
);
  DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
  if (redesign) {
    listRelations();
  }
}","private void addRelation(final RepresentationInformationRelation element,final boolean redesign,final Map<RelationObjectType,Map<String,String>> translations){
  final RemovableRelation relation=new RemovableRelation(element);
  String relationType=translations.get(element.getObjectType()).get(element.getRelationType());
  if (relations.containsKey(relationType)) {
    relations.get(relationType).add(relation);
  }
 else {
    List<RemovableRelation> list=new ArrayList<>();
    list.add(relation);
    relations.put(relationType,list);
  }
  relation.addRemoveClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      relations.get(translations.get(relation.getValue().getObjectType()).get(relation.getValue().getRelationType())).remove(relation);
      listRelations();
      DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
    }
  }
);
  DomEvent.fireNativeEvent(Document.get().createChangeEvent(),IncrementalRelationList.this);
  if (redesign) {
    listRelations();
  }
}",0.972609322441134
188246,"public static void showPromptAddRepresentationInformationWithAssociation(SafeHtml title,final String cancelButtonText,final String addToSelectedRIButtonText,final String addToNewRIButtonText,final AsyncCallback<SelectedItemsList<RepresentationInformation>> callback){
  final List<HandlerRegistration> clickHandlers=new ArrayList<>();
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setHTML(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button addToSelectedRIButton=new Button(addToSelectedRIButtonText);
  final Button addToNewRIButton=new Button(addToNewRIButtonText);
  addToSelectedRIButton.setEnabled(false);
  buttonPanel.add(cancelButton);
  buttonPanel.add(addToSelectedRIButton);
  buttonPanel.add(addToNewRIButton);
  final FlowPanel content=new FlowPanel();
  content.addStyleName(""String_Node_Str"");
  content.add(createInnerAddRepresentationInformationwithAssociation(dialogBox,addToSelectedRIButton,callback));
  layout.add(content);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  addToNewRIButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onSuccess(null);
    }
  }
);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  cancelButton.addStyleName(""String_Node_Str"");
  addToSelectedRIButton.addStyleName(""String_Node_Str"");
  addToNewRIButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
}","public static void showPromptAddRepresentationInformationWithAssociation(SafeHtml title,final String cancelButtonText,final String addToSelectedRIButtonText,final String addToNewRIButtonText,final AsyncCallback<SelectedItemsList<RepresentationInformation>> callback){
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setHTML(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  final FlowPanel buttonPanel=new FlowPanel();
  final Button cancelButton=new Button(cancelButtonText);
  final Button addToSelectedRIButton=new Button(addToSelectedRIButtonText);
  final Button addToNewRIButton=new Button(addToNewRIButtonText);
  addToSelectedRIButton.setEnabled(false);
  buttonPanel.add(cancelButton);
  buttonPanel.add(addToSelectedRIButton);
  buttonPanel.add(addToNewRIButton);
  final FlowPanel content=new FlowPanel();
  content.addStyleName(""String_Node_Str"");
  content.add(createInnerAddRepresentationInformationwithAssociation(dialogBox,addToSelectedRIButton,callback));
  layout.add(content);
  layout.add(buttonPanel);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  addToNewRIButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onSuccess(null);
    }
  }
);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  cancelButton.addStyleName(""String_Node_Str"");
  addToSelectedRIButton.addStyleName(""String_Node_Str"");
  addToNewRIButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
}",0.982109479305741
188247,"public static void showPromptDialogRepresentationInformationRelations(String title,final String cancelButtonText,final String confirmButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformationRelation> callback){
  final List<HandlerRegistration> clickHandlers=new ArrayList<>();
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveRelationTypeTranslations(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RelationTypeTranslationsBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RelationTypeTranslationsBundle relationTypes){
      final FlowPanel content=new FlowPanel();
      content.addStyleName(""String_Node_Str"");
      final FlowPanel leftSide=new FlowPanel();
      leftSide.addStyleName(""String_Node_Str"");
      final FlowPanel rightSide=new FlowPanel();
      rightSide.addStyleName(""String_Node_Str"");
      HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        Void result){
          dialogBox.center();
        }
      }
);
      description.addStyleName(""String_Node_Str"");
      rightSide.add(description);
      final Label aipLabel=new Label();
      aipLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.addStyleName(""String_Node_Str"");
      leftSide.add(aipLabel);
      final Label riLabel=new Label();
      riLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.addStyleName(""String_Node_Str"");
      leftSide.add(riLabel);
      final Label webLabel=new Label();
      webLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.addStyleName(""String_Node_Str"");
      leftSide.add(webLabel);
      final Label txtLabel=new Label();
      txtLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.addStyleName(""String_Node_Str"");
      leftSide.add(txtLabel);
      final Label helpLabel=new Label();
      helpLabel.setText(messages.title(""String_Node_Str""));
      helpLabel.setTitle(messages.title(""String_Node_Str""));
      helpLabel.addStyleName(""String_Node_Str"");
      leftSide.add(helpLabel);
      content.add(leftSide);
      content.add(rightSide);
      layout.add(content);
      final FlowPanel buttonPanel=new FlowPanel();
      final Button cancelButton=new Button(cancelButtonText);
      final Button confirmButton=new Button(confirmButtonText);
      confirmButton.setEnabled(false);
      buttonPanel.add(cancelButton);
      buttonPanel.add(confirmButton);
      layout.add(buttonPanel);
      dialogBox.setWidget(layout);
      dialogBox.setGlassEnabled(true);
      dialogBox.setAnimationEnabled(false);
      cancelButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          callback.onFailure(null);
        }
      }
);
      cancelButton.addStyleName(""String_Node_Str"");
      confirmButton.addStyleName(""String_Node_Str"");
      dialogBox.center();
      dialogBox.show();
      helpLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.addStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          confirmButton.setEnabled(false);
        }
      }
);
      aipLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.addStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.AIP).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              List<String> aipsAlreadyLinked=new ArrayList<>();
              if (ri != null) {
                for (                RepresentationInformationRelation r : ri.getRelations()) {
                  if (r.getObjectType().equals(RelationObjectType.AIP)) {
                    aipsAlreadyLinked.add(r.getLink());
                  }
                }
              }
              Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,aipsAlreadyLinked));
              SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,false,false);
              selectAipDialog.setSingleSelectionMode();
              selectAipDialog.showAndCenter();
              selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
                @Override public void onValueChange(                ValueChangeEvent<IndexedAIP> event){
                  final IndexedAIP aip=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setText(aip.getTitle());
                  linkText.setValue(aip.getId());
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(aip.getTitle());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.AIP,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      riLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          riLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.REPRESENTATION_INFORMATION).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              List<String> riAlreadyLinked=new ArrayList<>();
              if (ri != null) {
                for (                RepresentationInformationRelation r : ri.getRelations()) {
                  if (r.getObjectType().equals(RelationObjectType.REPRESENTATION_INFORMATION)) {
                    riAlreadyLinked.add(r.getLink());
                  }
                }
              }
              Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,riAlreadyLinked));
              SelectRepresentationInformationDialog selectDialog=new SelectRepresentationInformationDialog(messages.moveItemTitle(),filter,false);
              selectDialog.setSingleSelectionMode();
              selectDialog.showAndCenter();
              selectDialog.addValueChangeHandler(new ValueChangeHandler<RepresentationInformation>(){
                @Override public void onValueChange(                ValueChangeEvent<RepresentationInformation> event){
                  final RepresentationInformation ri=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setText(ri.getName());
                  linkText.setValue(ri.getId());
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(ri.getName());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.REPRESENTATION_INFORMATION,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      txtLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          txtLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.TEXT).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.setStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.TEXT,titleBox.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      webLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          webLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.WEB).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final TextBox linkText=new TextBox();
          linkText.setStyleName(""String_Node_Str"");
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.WEB,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
    }
  }
);
}","public static void showPromptDialogRepresentationInformationRelations(String title,final String cancelButtonText,final String confirmButtonText,final RepresentationInformation ri,final AsyncCallback<RepresentationInformationRelation> callback){
  final List<HandlerRegistration> clickHandlers=new ArrayList<>();
  final DialogBox dialogBox=new DialogBox(true,true);
  dialogBox.addStyleName(""String_Node_Str"");
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  BrowserService.Util.getInstance().retrieveRelationTypeTranslations(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RelationTypeTranslationsBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final RelationTypeTranslationsBundle relationTypes){
      final FlowPanel content=new FlowPanel();
      content.addStyleName(""String_Node_Str"");
      final FlowPanel leftSide=new FlowPanel();
      leftSide.addStyleName(""String_Node_Str"");
      final FlowPanel rightSide=new FlowPanel();
      rightSide.addStyleName(""String_Node_Str"");
      HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"",new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        Void result){
          dialogBox.center();
        }
      }
);
      description.addStyleName(""String_Node_Str"");
      rightSide.add(description);
      final Label aipLabel=new Label();
      aipLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.AIP.toString()));
      aipLabel.addStyleName(""String_Node_Str"");
      leftSide.add(aipLabel);
      final Label riLabel=new Label();
      riLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.REPRESENTATION_INFORMATION.toString()));
      riLabel.addStyleName(""String_Node_Str"");
      leftSide.add(riLabel);
      final Label webLabel=new Label();
      webLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.WEB.toString()));
      webLabel.addStyleName(""String_Node_Str"");
      leftSide.add(webLabel);
      final Label txtLabel=new Label();
      txtLabel.setText(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.setTitle(messages.representationInformationRelationObjectType(RelationObjectType.TEXT.toString()));
      txtLabel.addStyleName(""String_Node_Str"");
      leftSide.add(txtLabel);
      final Label helpLabel=new Label();
      helpLabel.setText(messages.title(""String_Node_Str""));
      helpLabel.setTitle(messages.title(""String_Node_Str""));
      helpLabel.addStyleName(""String_Node_Str"");
      leftSide.add(helpLabel);
      content.add(leftSide);
      content.add(rightSide);
      layout.add(content);
      final FlowPanel buttonPanel=new FlowPanel();
      final Button cancelButton=new Button(cancelButtonText);
      final Button confirmButton=new Button(confirmButtonText);
      confirmButton.setEnabled(false);
      buttonPanel.add(cancelButton);
      buttonPanel.add(confirmButton);
      layout.add(buttonPanel);
      dialogBox.setWidget(layout);
      dialogBox.setGlassEnabled(true);
      dialogBox.setAnimationEnabled(false);
      cancelButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          dialogBox.hide();
          callback.onFailure(null);
        }
      }
);
      cancelButton.addStyleName(""String_Node_Str"");
      confirmButton.addStyleName(""String_Node_Str"");
      dialogBox.center();
      dialogBox.show();
      helpLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.addStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          confirmButton.setEnabled(false);
        }
      }
);
      aipLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          aipLabel.addStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.AIP).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              List<String> aipsAlreadyLinked=new ArrayList<>();
              if (ri != null) {
                for (                RepresentationInformationRelation r : ri.getRelations()) {
                  if (r.getObjectType().equals(RelationObjectType.AIP)) {
                    aipsAlreadyLinked.add(r.getLink());
                  }
                }
              }
              Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,aipsAlreadyLinked));
              SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,false,false);
              selectAipDialog.setSingleSelectionMode();
              selectAipDialog.showAndCenter();
              selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
                @Override public void onValueChange(                ValueChangeEvent<IndexedAIP> event){
                  final IndexedAIP aip=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setValue(aip.getId());
                  if (StringUtils.isNotBlank(aip.getTitle())) {
                    linkText.setText(aip.getTitle());
                  }
 else {
                    linkText.setText(messages.noTitleMessage());
                  }
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(aip.getTitle());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.AIP,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      riLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          riLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.REPRESENTATION_INFORMATION).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final Button button=new Button(messages.selectButton());
          button.addStyleName(""String_Node_Str"");
          rightSide.add(button);
          final ValuedLabel linkText=new ValuedLabel();
          linkText.setStyleName(""String_Node_Str"");
          linkText.setVisible(false);
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          button.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              List<String> riAlreadyLinked=new ArrayList<>();
              if (ri != null) {
                for (                RepresentationInformationRelation r : ri.getRelations()) {
                  if (r.getObjectType().equals(RelationObjectType.REPRESENTATION_INFORMATION)) {
                    riAlreadyLinked.add(r.getLink());
                  }
                }
              }
              Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,riAlreadyLinked));
              SelectRepresentationInformationDialog selectDialog=new SelectRepresentationInformationDialog(messages.moveItemTitle(),filter,false);
              selectDialog.setSingleSelectionMode();
              selectDialog.showAndCenter();
              selectDialog.addValueChangeHandler(new ValueChangeHandler<RepresentationInformation>(){
                @Override public void onValueChange(                ValueChangeEvent<RepresentationInformation> event){
                  final RepresentationInformation ri=event.getValue();
                  button.setVisible(false);
                  linkText.setVisible(true);
                  linkText.setText(ri.getName());
                  linkText.setValue(ri.getId());
                  if (titleBox.getText().isEmpty()) {
                    titleBox.setText(ri.getName());
                  }
                  confirmButton.setEnabled(true);
                }
              }
);
            }
          }
);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getValue().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.REPRESENTATION_INFORMATION,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      txtLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          txtLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          webLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.TEXT).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.setStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.TEXT,titleBox.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
      webLabel.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          webLabel.addStyleName(""String_Node_Str"");
          aipLabel.removeStyleName(""String_Node_Str"");
          riLabel.removeStyleName(""String_Node_Str"");
          txtLabel.removeStyleName(""String_Node_Str"");
          helpLabel.removeStyleName(""String_Node_Str"");
          rightSide.clear();
          HTMLWidgetWrapper description=new HTMLWidgetWrapper(""String_Node_Str"");
          description.addStyleName(""String_Node_Str"");
          rightSide.add(description);
          Label selectLabel=new Label(messages.representationInformationRelationType());
          selectLabel.addStyleName(""String_Node_Str"");
          rightSide.add(selectLabel);
          final ListBox select=new ListBox();
          select.addStyleName(""String_Node_Str"");
          for (          Entry<String,String> type : relationTypes.getTranslations().get(RelationObjectType.WEB).entrySet()) {
            select.addItem(type.getValue(),type.getKey());
          }
          rightSide.add(select);
          Label linkLabel=new Label(messages.representationInformationRelationLink());
          linkLabel.addStyleName(""String_Node_Str"");
          rightSide.add(linkLabel);
          final TextBox linkText=new TextBox();
          linkText.setStyleName(""String_Node_Str"");
          rightSide.add(linkText);
          Label titleLabel=new Label(messages.representationInformationRelationTitle());
          titleLabel.addStyleName(""String_Node_Str"");
          rightSide.add(titleLabel);
          final TextBox titleBox=new TextBox();
          titleBox.addStyleName(""String_Node_Str"");
          rightSide.add(titleBox);
          confirmButton.setEnabled(true);
          for (          HandlerRegistration handler : clickHandlers) {
            handler.removeHandler();
          }
          clickHandlers.add(confirmButton.addClickHandler(new ClickHandler(){
            @Override public void onClick(            ClickEvent event){
              if (!titleBox.getText().isEmpty() && !linkText.getText().isEmpty()) {
                dialogBox.hide();
                callback.onSuccess(new RepresentationInformationRelation(select.getSelectedValue(),RelationObjectType.WEB,linkText.getValue(),titleBox.getValue()));
              }
 else {
                Toast.showError(messages.representationInformationMissingFieldsTitle(),messages.representationInformationMissingFields());
              }
            }
          }
));
        }
      }
);
    }
  }
);
}",0.9929383537366742
188248,"public static String allFilter(String actualClass){
  if (actualClass.equals(AIP.class.getName()) || actualClass.equals(IndexedAIP.class.getName())) {
    return RodaConstants.AIP_SEARCH;
  }
 else   if (actualClass.equals(Representation.class.getName()) || actualClass.equals(IndexedRepresentation.class.getName())) {
    return RodaConstants.REPRESENTATION_SEARCH;
  }
 else   if (actualClass.equals(File.class.getName()) || actualClass.equals(IndexedFile.class.getName())) {
    return RodaConstants.FILE_SEARCH;
  }
 else   if (actualClass.equals(RepresentationInformation.class.getName())) {
    return RodaConstants.REPRESENTATION_INFORMATION_SEARCH;
  }
 else   if (actualClass.equals(IndexedRisk.class.getName()) || actualClass.equals(Risk.class.getName())) {
    return RodaConstants.RISK_SEARCH;
  }
 else   if (actualClass.equals(RiskIncidence.class.getName())) {
    return RodaConstants.RISK_INCIDENCE_SEARCH;
  }
 else   if (actualClass.equals(Job.class.getName())) {
    return RodaConstants.JOB_SEARCH;
  }
 else   if (actualClass.equals(Report.class.getName()) || actualClass.equals(IndexedReport.class.getName())) {
    return RodaConstants.JOB_REPORT_SEARCH;
  }
 else   if (actualClass.equals(TransferredResource.class.getName())) {
    return RodaConstants.TRANSFERRED_RESOURCE_SEARCH;
  }
 else   if (actualClass.equals(Notification.class.getName())) {
    return RodaConstants.NOTIFICATION_SEARCH;
  }
 else   if (actualClass.equals(LogEntry.class.getName())) {
    return RodaConstants.LOG_SEARCH;
  }
 else   if (actualClass.equals(RODAMember.class.getName())) {
    return RodaConstants.MEMBERS_SEARCH;
  }
 else   if (actualClass.equals(DIP.class.getName()) || actualClass.equals(IndexedDIP.class.getName())) {
    return RodaConstants.DIP_SEARCH;
  }
 else   if (actualClass.equals(DIPFile.class.getName())) {
    return RodaConstants.DIPFILE_SEARCH;
  }
 else {
    return ""String_Node_Str"";
  }
}","public static String allFilter(String actualClass){
  if (actualClass.equals(AIP.class.getName()) || actualClass.equals(IndexedAIP.class.getName())) {
    return RodaConstants.AIP_SEARCH;
  }
 else   if (actualClass.equals(Representation.class.getName()) || actualClass.equals(IndexedRepresentation.class.getName())) {
    return RodaConstants.REPRESENTATION_SEARCH;
  }
 else   if (actualClass.equals(File.class.getName()) || actualClass.equals(IndexedFile.class.getName())) {
    return RodaConstants.FILE_SEARCH;
  }
 else   if (actualClass.equals(RepresentationInformation.class.getName())) {
    return RodaConstants.REPRESENTATION_INFORMATION_SEARCH;
  }
 else   if (actualClass.equals(IndexedRisk.class.getName()) || actualClass.equals(Risk.class.getName())) {
    return RodaConstants.RISK_SEARCH;
  }
 else   if (actualClass.equals(RiskIncidence.class.getName())) {
    return RodaConstants.RISK_INCIDENCE_SEARCH;
  }
 else   if (actualClass.equals(Job.class.getName())) {
    return RodaConstants.JOB_SEARCH;
  }
 else   if (actualClass.equals(Report.class.getName()) || actualClass.equals(IndexedReport.class.getName())) {
    return RodaConstants.JOB_REPORT_SEARCH;
  }
 else   if (actualClass.equals(TransferredResource.class.getName())) {
    return RodaConstants.TRANSFERRED_RESOURCE_SEARCH;
  }
 else   if (actualClass.equals(Notification.class.getName())) {
    return RodaConstants.NOTIFICATION_SEARCH;
  }
 else   if (actualClass.equals(LogEntry.class.getName())) {
    return RodaConstants.LOG_SEARCH;
  }
 else   if (actualClass.equals(RODAMember.class.getName())) {
    return RodaConstants.MEMBERS_SEARCH;
  }
 else   if (actualClass.equals(DIP.class.getName()) || actualClass.equals(IndexedDIP.class.getName())) {
    return RodaConstants.DIP_SEARCH;
  }
 else   if (actualClass.equals(DIPFile.class.getName())) {
    return RodaConstants.DIPFILE_SEARCH;
  }
 else   if (actualClass.equals(Format.class.getName())) {
    return RodaConstants.FORMAT_SEARCH;
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9742033383915024
188249,"public static void create(FlowPanel panel,Set<MetadataValue> bundle,boolean addStyle){
  for (  MetadataValue mv : bundle) {
    boolean mandatory=(mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equalsIgnoreCase(mv.get(""String_Node_Str""))) ? true : false;
    if (mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(mv.get(""String_Node_Str""))) {
      continue;
    }
    FlowPanel layout=new FlowPanel();
    if (addStyle) {
      layout.addStyleName(""String_Node_Str"");
    }
    String controlType=mv.get(""String_Node_Str"");
    if (controlType == null) {
      addTextField(panel,layout,mv,mandatory);
    }
 else {
switch (controlType) {
case ""String_Node_Str"":
        addTextField(panel,layout,mv,mandatory);
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    addTextArea(panel,layout,mv,mandatory);
  break;
case ""String_Node_Str"":
addList(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
addDatePicker(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
layout.addStyleName(""String_Node_Str"");
addSeparator(panel,layout,mv);
break;
default :
addTextField(panel,layout,mv,mandatory);
break;
}
}
}
}","public static void create(FlowPanel panel,Set<MetadataValue> bundle,boolean addStyle){
  for (  MetadataValue mv : bundle) {
    boolean mandatory=(mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equalsIgnoreCase(mv.get(""String_Node_Str""))) ? true : false;
    if (mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(mv.get(""String_Node_Str""))) {
      continue;
    }
    FlowPanel layout=new FlowPanel();
    if (addStyle) {
      layout.addStyleName(""String_Node_Str"");
    }
    String controlType=mv.get(""String_Node_Str"");
    if (controlType == null) {
      addTextField(panel,layout,mv,mandatory);
    }
 else {
switch (controlType) {
case ""String_Node_Str"":
        addTextField(panel,layout,mv,mandatory);
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    addTextArea(panel,layout,mv,mandatory);
  break;
case ""String_Node_Str"":
addRichTextArea(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
addList(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
addDatePicker(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
layout.addStyleName(""String_Node_Str"");
addSeparator(panel,layout,mv);
break;
default :
addTextField(panel,layout,mv,mandatory);
break;
}
}
}
}",0.969173859432799
188250,"public static RepresentationInformationExtraBundle retrieveRepresentationInformationExtraBundle(User user,RepresentationInformation ri,Locale locale) throws AuthorizationDeniedException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  LOG_ENTRY_STATE state=LOG_ENTRY_STATE.SUCCESS;
  RepresentationInformationExtraBundle extra=null;
  controllerAssistant.checkRoles(user);
  try {
    extra=BrowserHelper.retrieveRepresentationInformationExtraBundle(ri,locale);
  }
 catch (  Exception e) {
    state=LOG_ENTRY_STATE.FAILURE;
  }
  controllerAssistant.registerAction(user,state,RodaConstants.CONTROLLER_REPRESENTATION_INFORMATION_PARAM,ri);
  return extra;
}","public static RepresentationInformationExtraBundle retrieveRepresentationInformationExtraBundle(User user,RepresentationInformation ri,Locale locale) throws AuthorizationDeniedException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  LOG_ENTRY_STATE state=LOG_ENTRY_STATE.SUCCESS;
  controllerAssistant.checkRoles(user);
  RepresentationInformationExtraBundle extra=BrowserHelper.retrieveRepresentationInformationExtraBundle(ri,locale);
  controllerAssistant.registerAction(user,state,RodaConstants.CONTROLLER_REPRESENTATION_INFORMATION_PARAM,ri);
  return extra;
}",0.8734567901234568
188251,"/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 */
public RepresentationInformationDataPanel(boolean visible,final boolean editmode,final RepresentationInformation ri){
  relations=new IncrementalRelationList(ri);
  categories=new IncrementalList(true);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  filters.setVisible(false);
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
    }
  }
;
  ValueChangeHandler valueChangeHandler=new ValueChangeHandler(){
    @Override public void onValueChange(    ValueChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  name.addChangeHandler(changeHandler);
  name.addKeyUpHandler(keyUpHandler);
  description.addChangeHandler(changeHandler);
  description.addKeyUpHandler(keyUpHandler);
  ChangeHandler familyChangeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
      extras.clear();
      FormUtilities.create(extras,extraBundle.getFamilyValues().get(family.getSelectedValue()),false);
    }
  }
;
  family.addChangeHandler(familyChangeHandler);
  family.addKeyUpHandler(keyUpHandler);
  categories.addValueChangeHandler(valueChangeHandler);
  support.addChangeHandler(changeHandler);
  relations.addChangeHandler(changeHandler);
  filters.addChangeHandler(changeHandler);
  for (  RepresentationInformationSupport val : RepresentationInformationSupport.values()) {
    support.addItem(messages.representationInformationSupportValue(val.toString()),val.toString());
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<Map<String,String>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final Map<String,String> families){
      for (      Entry<String,String> item : families.entrySet()) {
        family.addItem(item.getValue(),item.getKey());
      }
    }
  }
);
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationFilterBundle result){
      RepresentationInformationDataPanel.this.filters.setFields(result.getObjectClassFields());
      if (editmode) {
        setRepresentationInformation(ri);
      }
 else {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        List<String> lastHistory=selectedItems.getLastHistory();
        if (lastHistory.size() > 4 && lastHistory.get(0).equals(Planning.RESOLVER.getHistoryToken()) && lastHistory.get(1).equals(RepresentationInformationNetwork.RESOLVER.getHistoryToken()) && lastHistory.get(2).equals(RepresentationInformationAssociations.RESOLVER.getHistoryToken())) {
          RepresentationInformationDataPanel.this.filters.setFilters(Collections.singletonList(lastHistory.get(lastHistory.size() - 1)));
          String[] filterParts=RepresentationInformationDialogs.breakFilterIntoParts(lastHistory.get(lastHistory.size() - 1));
          RepresentationInformationDataPanel.this.name.setText(messages.representationInformationNameFromAssociation(filterParts[0],filterParts[1],filterParts[2]));
        }
      }
    }
  }
);
}","/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 */
public RepresentationInformationDataPanel(boolean visible,final boolean editmode,final RepresentationInformation ri){
  relations=new IncrementalRelationList(ri);
  categories=new IncrementalList(true);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  filters.setVisible(false);
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
    }
  }
;
  ValueChangeHandler valueChangeHandler=new ValueChangeHandler(){
    @Override public void onValueChange(    ValueChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  name.addChangeHandler(changeHandler);
  name.addKeyUpHandler(keyUpHandler);
  description.addChangeHandler(changeHandler);
  description.addKeyUpHandler(keyUpHandler);
  ChangeHandler familyChangeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      RepresentationInformationDataPanel.this.onChange();
      extras.clear();
      FormUtilities.create(extras,extraBundle.getFamilyValues().get(family.getSelectedValue()),false);
    }
  }
;
  family.addChangeHandler(familyChangeHandler);
  family.addKeyUpHandler(keyUpHandler);
  categories.addValueChangeHandler(valueChangeHandler);
  support.addChangeHandler(changeHandler);
  relations.addChangeHandler(changeHandler);
  filters.addChangeHandler(changeHandler);
  for (  RepresentationInformationSupport val : RepresentationInformationSupport.values()) {
    support.addItem(messages.representationInformationSupportValue(val.toString()),val.toString());
  }
  BrowserService.Util.getInstance().retrieveRepresentationInformationFamilyOptions(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<Map<String,String>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final Map<String,String> families){
      for (      Entry<String,String> item : families.entrySet()) {
        family.addItem(item.getValue(),item.getKey());
      }
    }
  }
);
  BrowserService.Util.getInstance().retrieveObjectClassFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationFilterBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationFilterBundle result){
      RepresentationInformationDataPanel.this.filters.setFields(result.getObjectClassFields());
      if (editmode) {
        setRepresentationInformation(ri);
      }
 else {
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        List<String> lastHistory=selectedItems.getLastHistory();
        if (lastHistory.size() > 4 && lastHistory.get(0).equals(Planning.RESOLVER.getHistoryToken()) && lastHistory.get(1).equals(RepresentationInformationNetwork.RESOLVER.getHistoryToken()) && lastHistory.get(2).equals(RepresentationInformationAssociations.RESOLVER.getHistoryToken())) {
          RepresentationInformationDataPanel.this.filters.setFilters(Collections.singletonList(lastHistory.get(lastHistory.size() - 1)));
          String[] filterParts=RepresentationInformationDialogs.breakFilterIntoParts(lastHistory.get(lastHistory.size() - 1));
          RepresentationInformationDataPanel.this.name.setText(messages.representationInformationNameFromAssociation(filterParts[0],filterParts[1],filterParts[2]));
        }
      }
    }
  }
);
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      RepresentationInformationDataPanel.this.extraBundle=extra;
      extras.clear();
      FormUtilities.create(extras,extra.getFamilyValues().get(family.getSelectedValue()),false);
    }
  }
);
}",0.928519855595668
188252,"public void setRepresentationInformation(RepresentationInformation ri){
  this.name.setText(ri.getName());
  this.description.setText(ri.getDescription());
  int index=0;
  for (int i=0; i < this.family.getItemCount(); i++) {
    if (this.family.getValue(i).equals(ri.getFamily())) {
      index=i;
    }
  }
  this.family.setSelectedIndex(index);
  this.categories.setTextBoxList(ri.getCategories());
  for (int i=0; i < support.getItemCount(); i++) {
    if (support.getValue(i).equals(ri.getSupport().toString())) {
      support.setSelectedIndex(i);
      break;
    }
  }
  this.relations.setRelationList(ri.getRelations());
  this.filters.setFilters(ri.getFilters());
  BrowserService.Util.getInstance().retrieveRepresentationInformationExtraBundle(ri,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<RepresentationInformationExtraBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    RepresentationInformationExtraBundle extra){
      RepresentationInformationDataPanel.this.extraBundle=extra;
      extras.clear();
      FormUtilities.create(extras,extra.getFamilyValues().get(family.getSelectedValue()),false);
    }
  }
);
}","public void setRepresentationInformation(RepresentationInformation ri){
  this.name.setText(ri.getName());
  this.description.setText(ri.getDescription());
  int index=0;
  for (int i=0; i < this.family.getItemCount(); i++) {
    if (this.family.getValue(i).equals(ri.getFamily())) {
      index=i;
    }
  }
  this.family.setSelectedIndex(index);
  this.categories.setTextBoxList(ri.getCategories());
  for (int i=0; i < support.getItemCount(); i++) {
    if (support.getValue(i).equals(ri.getSupport().toString())) {
      support.setSelectedIndex(i);
      break;
    }
  }
  this.relations.setRelationList(ri.getRelations());
  this.filters.setFilters(ri.getFilters());
}",0.6944444444444444
188253,"private void updateLayout(final BrowseRepresentationBundle bundle,final AIPState state,final boolean justActive){
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  String title=representation.getTitle() != null ? representation.getTitle() : representation.getType();
  title=title == null ? representation.getId() : title;
  representationTitle.clear();
  HtmlSnippetUtils.getRepresentationTypeHTML(representationTitle,title,representation.getRepresentationStates());
  final String idFilter=RepresentationInformationUtils.createRepresentationInformationFilter(RodaConstants.INDEX_REPRESENTATION,RodaConstants.INDEX_UUID,representation.getUUID());
  RepresentationInformationHelper.addFieldWithRepresentationInformationIcon(SafeHtmlUtils.fromString(messages.representationId() + ""String_Node_Str"" + representation.getId()),idFilter,representationId,bundle.getRepresentationInformationFields().contains(RodaConstants.INDEX_UUID));
  if (representation.getType() != null) {
    final String typeFilter=RepresentationInformationUtils.createRepresentationInformationFilter(RodaConstants.INDEX_REPRESENTATION,RodaConstants.REPRESENTATION_TYPE,representation.getType());
    RepresentationInformationHelper.addFieldWithRepresentationInformationIcon(SafeHtmlUtils.fromString(messages.representationType() + ""String_Node_Str"" + representation.getType()),typeFilter,representationType,bundle.getRepresentationInformationFields().contains(RodaConstants.REPRESENTATION_TYPE));
  }
  if (!breadcrumbItems.isEmpty()) {
    breadcrumbItems.remove(breadcrumbItems.size() - 1);
    breadcrumbItems.add(BreadcrumbUtils.getBreadcrumbItem(representation));
    breadcrumb.updatePath(breadcrumbItems);
  }
  if (representation.getCreatedOn() != null) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(representation.getCreatedOn()),representation.getCreatedBy()));
  }
  if (representation.getUpdatedOn() != null) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(representation.getUpdatedOn()),representation.getUpdatedBy()));
  }
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
      if (Actionable.ActionImpact.UPDATED.equals(impact)) {
        BrowserService.Util.getInstance().retrieve(IndexedRepresentation.class.getName(),representation.getUUID(),representationFields,new AsyncCallback<IndexedRepresentation>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          IndexedRepresentation rep){
            representation=rep;
            updateLayout(bundle,state,justActive);
          }
        }
);
      }
    }
  }
));
}","private void updateLayout(final BrowseRepresentationBundle bundle,final AIPState state,final boolean justActive){
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  String title=representation.getTitle() != null ? representation.getTitle() : representation.getType();
  title=title == null ? representation.getId() : title;
  representationTitle.clear();
  HtmlSnippetUtils.getRepresentationTypeHTML(representationTitle,title,representation.getRepresentationStates());
  representationId.clear();
  final String idFilter=RepresentationInformationUtils.createRepresentationInformationFilter(RodaConstants.INDEX_REPRESENTATION,RodaConstants.INDEX_UUID,representation.getUUID());
  RepresentationInformationHelper.addFieldWithRepresentationInformationIcon(SafeHtmlUtils.fromString(messages.representationId() + ""String_Node_Str"" + representation.getId()),idFilter,representationId,bundle.getRepresentationInformationFields().contains(RodaConstants.INDEX_UUID));
  if (representation.getType() != null) {
    representationType.clear();
    final String typeFilter=RepresentationInformationUtils.createRepresentationInformationFilter(RodaConstants.INDEX_REPRESENTATION,RodaConstants.REPRESENTATION_TYPE,representation.getType());
    RepresentationInformationHelper.addFieldWithRepresentationInformationIcon(SafeHtmlUtils.fromString(messages.representationType() + ""String_Node_Str"" + representation.getType()),typeFilter,representationType,bundle.getRepresentationInformationFields().contains(RodaConstants.REPRESENTATION_TYPE));
  }
  if (!breadcrumbItems.isEmpty()) {
    breadcrumbItems.remove(breadcrumbItems.size() - 1);
    breadcrumbItems.add(BreadcrumbUtils.getBreadcrumbItem(representation));
    breadcrumb.updatePath(breadcrumbItems);
  }
  if (representation.getCreatedOn() != null) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(representation.getCreatedOn()),representation.getCreatedBy()));
  }
  if (representation.getUpdatedOn() != null) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(representation.getUpdatedOn()),representation.getUpdatedBy()));
  }
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
      if (Actionable.ActionImpact.UPDATED.equals(impact)) {
        BrowserService.Util.getInstance().retrieve(IndexedRepresentation.class.getName(),representation.getUUID(),representationFields,new AsyncCallback<IndexedRepresentation>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          IndexedRepresentation rep){
            representation=rep;
            updateLayout(bundle,state,justActive);
          }
        }
);
      }
    }
  }
));
}",0.9909828674481514
188254,"@Override public void onClick(ClickEvent event){
  Widget sender=(Widget)event.getSource();
  if (sender == bold) {
    formatter.toggleBold();
  }
 else   if (sender == italic) {
    formatter.toggleItalic();
  }
 else   if (sender == underline) {
    formatter.toggleUnderline();
  }
 else   if (sender == subscript) {
    formatter.toggleSubscript();
  }
 else   if (sender == superscript) {
    formatter.toggleSuperscript();
  }
 else   if (sender == strikethrough) {
    formatter.toggleStrikethrough();
  }
 else   if (sender == indent) {
    formatter.rightIndent();
  }
 else   if (sender == outdent) {
    formatter.leftIndent();
  }
 else   if (sender == justifyLeft) {
    formatter.setJustification(RichTextArea.Justification.LEFT);
  }
 else   if (sender == justifyCenter) {
    formatter.setJustification(RichTextArea.Justification.CENTER);
  }
 else   if (sender == justifyRight) {
    formatter.setJustification(RichTextArea.Justification.RIGHT);
  }
 else   if (sender == insertImage) {
    Dialogs.showPromptDialog(messages.insertImageUrl(),null,null,""String_Node_Str"",RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,false,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String url){
        if (url != null) {
          formatter.insertImage(url);
        }
      }
    }
);
  }
 else   if (sender == createLink) {
    Dialogs.showPromptDialog(messages.insertLinkUrl(),null,null,""String_Node_Str"",RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,false,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String url){
        if (url != null) {
          formatter.createLink(url);
        }
      }
    }
);
  }
 else   if (sender == removeLink) {
    formatter.removeLink();
  }
 else   if (sender == ol) {
    formatter.insertOrderedList();
  }
 else   if (sender == ul) {
    formatter.insertUnorderedList();
  }
 else   if (sender == removeFormat) {
    formatter.removeFormat();
  }
 else   if (sender == code) {
    Dialogs.showPromptDialog(messages.editHTMLContent(),null,richText.getHTML(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,true,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String codeHtml){
        if (codeHtml != null) {
          richText.setHTML(codeHtml);
        }
      }
    }
);
  }
 else   if (sender == richText) {
    updateStatus();
  }
}","@Override public void onClick(ClickEvent event){
  Widget sender=(Widget)event.getSource();
  if (sender == bold) {
    formatter.toggleBold();
  }
 else   if (sender == italic) {
    formatter.toggleItalic();
  }
 else   if (sender == underline) {
    formatter.toggleUnderline();
  }
 else   if (sender == subscript) {
    formatter.toggleSubscript();
  }
 else   if (sender == superscript) {
    formatter.toggleSuperscript();
  }
 else   if (sender == strikethrough) {
    formatter.toggleStrikethrough();
  }
 else   if (sender == indent) {
    formatter.rightIndent();
  }
 else   if (sender == outdent) {
    formatter.leftIndent();
  }
 else   if (sender == justifyLeft) {
    formatter.setJustification(RichTextArea.Justification.LEFT);
  }
 else   if (sender == justifyCenter) {
    formatter.setJustification(RichTextArea.Justification.CENTER);
  }
 else   if (sender == justifyRight) {
    formatter.setJustification(RichTextArea.Justification.RIGHT);
  }
 else   if (sender == insertImage) {
    Dialogs.showPromptDialog(messages.insertImageUrl(),null,null,""String_Node_Str"",RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,false,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String url){
        if (url != null) {
          formatter.insertImage(url);
        }
      }
    }
);
  }
 else   if (sender == createLink) {
    Dialogs.showPromptDialog(messages.insertLinkUrl(),null,null,""String_Node_Str"",RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,false,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String url){
        if (url != null) {
          formatter.createLink(url);
        }
      }
    }
);
  }
 else   if (sender == removeLink) {
    formatter.removeLink();
  }
 else   if (sender == ol) {
    formatter.insertOrderedList();
  }
 else   if (sender == ul) {
    formatter.insertUnorderedList();
  }
 else   if (sender == removeFormat) {
    formatter.removeFormat();
  }
 else   if (sender == code) {
    Dialogs.showPromptDialog(messages.editHTMLContent(),null,richText.getHTML(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,true,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String codeHtml){
        if (codeHtml != null) {
          richText.setHTML(codeHtml);
        }
      }
    }
);
  }
 else   if (sender == richText) {
    updateStatus();
  }
}",0.998706338939198
188255,"private void doFilterWithCredentials(final HttpServletRequest request,final HttpServletResponse response,final FilterChain filterChain,final String username,final String password) throws GenericException, IOException, ServletException, AuthenticationDeniedException {
  if (UserUtility.getLdapUtility().isInternal(username)) {
    final User user=UserUtility.getLdapUtility().getAuthenticatedUser(username,password);
    user.setIpAddress(request.getRemoteAddr());
    UserUtility.setUser(request,user);
  }
 else {
    final String tgt=this.casClient.getTicketGrantingTicket(username,password);
    doFilterWithTGT(request,response,filterChain,tgt);
  }
}","private void doFilterWithCredentials(final HttpServletRequest request,final HttpServletResponse response,final FilterChain filterChain,final String username,final String password) throws GenericException, IOException, ServletException, AuthenticationDeniedException {
  if (UserUtility.getLdapUtility().isInternal(username)) {
    final User user=UserUtility.getLdapUtility().getAuthenticatedUser(username,password);
    user.setIpAddress(request.getRemoteAddr());
    UserUtility.setUser(request,user);
    filterChain.doFilter(request,response);
  }
 else {
    final String tgt=this.casClient.getTicketGrantingTicket(username,password);
    doFilterWithTGT(request,response,filterChain,tgt);
  }
}",0.967551622418879
188256,"private static void instantiateTestNodeSpecificObjects(){
  if (TEST_DEPLOY_LDAP) {
    startApacheDS();
  }
  if (TEST_DEPLOY_SCANNER) {
    instantiateTransferredResourcesScanner();
  }
  if (TEST_DEPLOY_ORCHESTRATOR) {
    pluginOrchestrator=new AkkaEmbeddedPluginOrchestrator();
  }
}","private static void instantiateTestNodeSpecificObjects(){
  if (TEST_DEPLOY_LDAP) {
    startApacheDS();
  }
 else   if (TEST_DEPLOY_SOLR) {
    try {
      getIndexService().create(RODAMember.class,new User(RodaConstants.ADMIN));
      getIndexService().commit(RODAMember.class);
    }
 catch (    GenericException|RequestNotValidException e) {
      LOGGER.warn(""String_Node_Str"",e);
    }
  }
  if (TEST_DEPLOY_SCANNER) {
    instantiateTransferredResourcesScanner();
  }
  if (TEST_DEPLOY_ORCHESTRATOR) {
    pluginOrchestrator=new AkkaEmbeddedPluginOrchestrator();
  }
}",0.6674391657010429
188257,"private void ensureAllContainersExist(){
  try {
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_AIP);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_PRESERVATION);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_ACTIONLOG);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_JOB);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_JOB_REPORT);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_RISK);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_RISK_INCIDENCE);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_DIP);
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void ensureAllContainersExist(){
  try {
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_AIP);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_PRESERVATION);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_ACTIONLOG);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_JOB);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_JOB_REPORT);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_RISK);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_RISK_INCIDENCE);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_DIP);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_REPRESENTATION_INFORMATION);
    createContainerIfNotExists(RodaConstants.STORAGE_CONTAINER_FORMAT);
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9036427732079906
188258,"private InternalProcess(){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_PLUGIN_TYPE,PluginType.INTERNAL.toString()));
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_STATE),new SimpleFacetParameter(RodaConstants.JOB_USERNAME),new SimpleFacetParameter(RodaConstants.JOB_PLUGIN_TYPE));
  jobList=new JobList(filter,facets,messages.jobList(),false);
  producerFacets=new FlowPanel();
  stateFacets=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_STATE,stateFacets);
  facetPanels.put(RodaConstants.JOB_USERNAME,producerFacets);
  FacetUtils.bindFacets(jobList,facetPanels);
  initWidget(uiBinder.createAndBindUi(this));
  internalProcessDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  DefaultFormat dateFormat=new DateBox.DefaultFormat(DateTimeFormat.getFormat(""String_Node_Str""));
  ValueChangeHandler<Date> valueChangeHandler=new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> event){
      updateDateFilter();
    }
  }
;
  inputDateInitial.getElement().setPropertyString(""String_Node_Str"",messages.sidebarFilterFromDatePlaceHolder());
  inputDateFinal.getElement().setPropertyString(""String_Node_Str"",messages.sidebarFilterToDatePlaceHolder());
  inputDateInitial.setFormat(dateFormat);
  inputDateInitial.getDatePicker().setYearArrowsVisible(true);
  inputDateInitial.setFireNullValues(true);
  inputDateInitial.addValueChangeHandler(valueChangeHandler);
  inputDateInitial.setTitle(messages.dateIntervalLabelInitial());
  inputDateFinal.setFormat(dateFormat);
  inputDateFinal.getDatePicker().setYearArrowsVisible(true);
  inputDateFinal.setFireNullValues(true);
  inputDateFinal.addValueChangeHandler(valueChangeHandler);
  inputDateFinal.setTitle(messages.dateIntervalLabelFinal());
  jobList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Job job=jobList.getSelectionModel().getSelectedObject();
      if (job != null) {
        HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
      }
    }
  }
);
  jobList.autoUpdate(10000);
}","private InternalProcess(){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_PLUGIN_TYPE,PluginType.INTERNAL.toString()));
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_STATE),new SimpleFacetParameter(RodaConstants.JOB_USERNAME));
  jobList=new JobList(filter,facets,messages.jobList(),false);
  producerFacets=new FlowPanel();
  stateFacets=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_STATE,stateFacets);
  facetPanels.put(RodaConstants.JOB_USERNAME,producerFacets);
  FacetUtils.bindFacets(jobList,facetPanels);
  initWidget(uiBinder.createAndBindUi(this));
  internalProcessDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  DefaultFormat dateFormat=new DateBox.DefaultFormat(DateTimeFormat.getFormat(""String_Node_Str""));
  ValueChangeHandler<Date> valueChangeHandler=new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> event){
      updateDateFilter();
    }
  }
;
  inputDateInitial.getElement().setPropertyString(""String_Node_Str"",messages.sidebarFilterFromDatePlaceHolder());
  inputDateFinal.getElement().setPropertyString(""String_Node_Str"",messages.sidebarFilterToDatePlaceHolder());
  inputDateInitial.setFormat(dateFormat);
  inputDateInitial.getDatePicker().setYearArrowsVisible(true);
  inputDateInitial.setFireNullValues(true);
  inputDateInitial.addValueChangeHandler(valueChangeHandler);
  inputDateInitial.setTitle(messages.dateIntervalLabelInitial());
  inputDateFinal.setFormat(dateFormat);
  inputDateFinal.getDatePicker().setYearArrowsVisible(true);
  inputDateFinal.setFireNullValues(true);
  inputDateFinal.addValueChangeHandler(valueChangeHandler);
  inputDateFinal.setTitle(messages.dateIntervalLabelFinal());
  jobList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Job job=jobList.getSelectionModel().getSelectedObject();
      if (job != null) {
        HistoryUtils.newHistory(ShowJob.RESOLVER,job.getId());
      }
    }
  }
);
  jobList.autoUpdate(10000);
}",0.9871382636655948
188259,"private static void doJobCleanup(ModelService model,IterableIndexResult<IndexedAIP> results){
  for (  IndexedAIP indexedAIP : results) {
    try {
      LOGGER.info(""String_Node_Str"",indexedAIP.getId());
      model.deleteAIP(indexedAIP.getId());
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","private static void doJobCleanup(ModelService model,List<String> aipIds){
  for (  String aipId : aipIds) {
    try {
      LOGGER.info(""String_Node_Str"",aipId);
      model.deleteAIP(aipId);
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.7630208333333334
188260,"public static void doJobObjectsCleanup(Job job,ModelService model,IndexService index){
  if (RodaCoreFactory.getNodeType() == NodeType.MASTER) {
    try {
      index.commit(IndexedAIP.class);
      Filter filter=new Filter();
      filter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,job.getId()));
      filter.add(new OneOfManyFilterParameter(RodaConstants.AIP_STATE,Arrays.asList(AIPState.CREATED.toString(),AIPState.INGEST_PROCESSING.toString())));
      doJobCleanup(model,index.findAll(IndexedAIP.class,filter,false,Arrays.asList(RodaConstants.INDEX_UUID)));
    }
 catch (    GenericException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","public static void doJobObjectsCleanup(Job job,ModelService model,IndexService index){
  if (RodaCoreFactory.getNodeType() == NodeType.MASTER) {
    try {
      index.commit(IndexedAIP.class);
      Filter filter=new Filter();
      filter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,job.getId()));
      filter.add(new OneOfManyFilterParameter(RodaConstants.AIP_STATE,Arrays.asList(AIPState.CREATED.toString(),AIPState.INGEST_PROCESSING.toString())));
      List<String> aipIds=new ArrayList<>();
      index.findAll(IndexedAIP.class,filter,false,Arrays.asList(RodaConstants.INDEX_UUID)).forEach(e -> aipIds.add(e.getUUID()));
      ;
      doJobCleanup(model,aipIds);
    }
 catch (    GenericException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9011748445058744
188261,"@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  try {
    for (    AIP aip : list) {
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
      LOGGER.debug(""String_Node_Str"",aip.getId());
      List<LinkingIdentifier> sources=new ArrayList<>();
      Map<String,Map<String,List<String>>> updatedData=sipUpdateInformation.getUpdatedData();
      if (sipUpdateInformation.hasUpdatedData() || !updatedData.containsKey(aip.getId())) {
        try {
          for (          Representation representation : aip.getRepresentations()) {
            LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
            sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(this,model,representation));
            model.notifyRepresentationUpdated(representation);
          }
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
          reportItem.setPluginState(PluginState.SUCCESS);
        }
 catch (        PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"",aip.getId(),e.getMessage(),e);
          jobPluginInfo.incrementObjectsProcessedWithFailure();
          reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
        }
      }
 else {
        Map<String,List<String>> aipData=updatedData.get(aip.getId());
        PluginState state=PluginState.SUCCESS;
        if (aipData.containsKey(RodaConstants.RODA_OBJECT_REPRESENTATION)) {
          List<Representation> filteredList=aip.getRepresentations().stream().filter(r -> aipData.get(RodaConstants.RODA_OBJECT_REPRESENTATION).contains(IdUtils.getRepresentationId(r))).collect(Collectors.toList());
          for (          Representation representation : filteredList) {
            try {
              LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
              sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(this,model,representation));
              model.notifyRepresentationUpdated(representation);
            }
 catch (            RODAException e) {
              state=PluginState.FAILURE;
              LOGGER.error(""String_Node_Str"" + aip.getId(),e);
            }
          }
        }
        reportItem.setPluginState(state).setPluginDetails(""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessed(state);
      }
      try {
        List<LinkingIdentifier> outcomes=null;
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"",e.getMessage(),e);
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
  }
 catch (  ClassCastException e) {
    LOGGER.error(""String_Node_Str"");
    jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
  }
  return report;
}","@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  try {
    for (    AIP aip : list) {
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
      LOGGER.debug(""String_Node_Str"",aip.getId());
      List<LinkingIdentifier> sources=new ArrayList<>();
      Map<String,Map<String,List<String>>> updatedData=sipUpdateInformation.getUpdatedData();
      if (sipUpdateInformation.hasUpdatedData() || !updatedData.containsKey(aip.getId())) {
        try {
          for (          Representation representation : aip.getRepresentations()) {
            LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
            sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(model,representation));
            model.notifyRepresentationUpdated(representation);
          }
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
          reportItem.setPluginState(PluginState.SUCCESS);
        }
 catch (        PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"",aip.getId(),e.getMessage(),e);
          jobPluginInfo.incrementObjectsProcessedWithFailure();
          reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
        }
      }
 else {
        Map<String,List<String>> aipData=updatedData.get(aip.getId());
        PluginState state=PluginState.SUCCESS;
        if (aipData.containsKey(RodaConstants.RODA_OBJECT_REPRESENTATION)) {
          List<Representation> filteredList=aip.getRepresentations().stream().filter(r -> aipData.get(RodaConstants.RODA_OBJECT_REPRESENTATION).contains(IdUtils.getRepresentationId(r))).collect(Collectors.toList());
          for (          Representation representation : filteredList) {
            try {
              LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
              sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(model,representation));
              model.notifyRepresentationUpdated(representation);
            }
 catch (            RODAException e) {
              state=PluginState.FAILURE;
              LOGGER.error(""String_Node_Str"" + aip.getId(),e);
            }
          }
        }
        reportItem.setPluginState(state).setPluginDetails(""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessed(state);
      }
      try {
        List<LinkingIdentifier> outcomes=null;
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"",e.getMessage(),e);
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
  }
 catch (  ClassCastException e) {
    LOGGER.error(""String_Node_Str"");
    jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
  }
  return report;
}",0.998566513761468
188262,"@Override public Report executeOnFile(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<File> list,Job job) throws PluginException {
  for (  File file : list) {
    List<LinkingIdentifier> sources=new ArrayList<>();
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getFileId(file),File.class);
    PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    LOGGER.debug(""String_Node_Str"",file.getId(),file.getRepresentationId(),file.getAipId());
    try {
      sources.addAll(SiegfriedPluginUtils.runSiegfriedOnFile(this,model,file));
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      reportItem.setPluginState(PluginState.SUCCESS);
    }
 catch (    PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",file.getId(),e.getMessage(),e);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=null;
      boolean notify=true;
      PluginHelper.createPluginEvent(this,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
    }
 catch (    ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}","@Override public Report executeOnFile(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<File> list,Job job) throws PluginException {
  for (  File file : list) {
    List<LinkingIdentifier> sources=new ArrayList<>();
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getFileId(file),File.class);
    PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    LOGGER.debug(""String_Node_Str"",file.getId(),file.getRepresentationId(),file.getAipId());
    try {
      sources.addAll(SiegfriedPluginUtils.runSiegfriedOnFile(model,file));
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      reportItem.setPluginState(PluginState.SUCCESS);
    }
 catch (    PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",file.getId(),e.getMessage(),e);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=null;
      boolean notify=true;
      PluginHelper.createPluginEvent(this,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
    }
 catch (    ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}",0.9986107252014448
188263,"@Override public Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<Representation> list,Job job) throws PluginException {
  for (  Representation representation : list) {
    List<LinkingIdentifier> sources=new ArrayList<>();
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),Representation.class);
    PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    LOGGER.debug(""String_Node_Str"",representation.getId(),representation.getAipId());
    try {
      sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(this,model,representation));
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      reportItem.setPluginState(PluginState.SUCCESS);
      model.notifyRepresentationUpdated(representation);
    }
 catch (    PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",representation.getAipId(),e.getMessage(),e);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + representation.getAipId() + ""String_Node_Str""+ e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=null;
      boolean notify=true;
      PluginHelper.createPluginEvent(this,representation.getAipId(),representation.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
    }
 catch (    ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}","@Override public Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<Representation> list,Job job) throws PluginException {
  for (  Representation representation : list) {
    List<LinkingIdentifier> sources=new ArrayList<>();
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),Representation.class);
    PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    LOGGER.debug(""String_Node_Str"",representation.getId(),representation.getAipId());
    try {
      sources.addAll(SiegfriedPluginUtils.runSiegfriedOnRepresentation(model,representation));
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      reportItem.setPluginState(PluginState.SUCCESS);
      model.notifyRepresentationUpdated(representation);
    }
 catch (    PluginException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",representation.getAipId(),e.getMessage(),e);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + representation.getAipId() + ""String_Node_Str""+ e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=null;
      boolean notify=true;
      PluginHelper.createPluginEvent(this,representation.getAipId(),representation.getId(),model,index,sources,outcomes,reportItem.getPluginState(),""String_Node_Str"",notify);
    }
 catch (    ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}",0.9987136609210188
188264,"public static String getVersion(){
  String version=null;
  try {
    String siegfriedPath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    List<String> command=new ArrayList<>(Arrays.asList(siegfriedPath,""String_Node_Str""));
    String siegfriedOutput=CommandUtility.execute(command);
    StringBuilder result=new StringBuilder(""String_Node_Str"");
    if (siegfriedOutput.contains(""String_Node_Str"")) {
      result.append(siegfriedOutput.split(""String_Node_Str"")[0].split(""String_Node_Str"")[1]);
    }
    if (siegfriedOutput.contains(""String_Node_Str"")) {
      result.append(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(siegfriedOutput);
      if (matcher.find()) {
        result.append(matcher.group(0));
      }
    }
    return result.toString();
  }
 catch (  CommandException ce) {
    LOGGER.error(""String_Node_Str"" + ce.getMessage(),ce);
  }
  return version;
}","public static String getVersion(){
  try {
    String siegfriedPath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    List<String> command=new ArrayList<>(Arrays.asList(siegfriedPath,""String_Node_Str""));
    String siegfriedOutput=CommandUtility.execute(command);
    StringBuilder result=new StringBuilder(""String_Node_Str"");
    if (siegfriedOutput.contains(""String_Node_Str"")) {
      result.append(siegfriedOutput.split(""String_Node_Str"")[0].split(""String_Node_Str"")[1]);
    }
    if (siegfriedOutput.contains(""String_Node_Str"")) {
      result.append(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(siegfriedOutput);
      if (matcher.find()) {
        result.append(matcher.group(0));
      }
    }
    return result.toString();
  }
 catch (  CommandException ce) {
    LOGGER.error(""String_Node_Str"" + ce.getMessage(),ce);
  }
  return null;
}",0.983084577114428
188265,"public static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnFile(Plugin<T> plugin,ModelService model,File file) throws GenericException, RequestNotValidException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException, PluginException {
  StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
  DirectResourceAccess directAccess=model.getStorage().getDirectAccess(fileStoragePath);
  Path filePath=directAccess.getPath();
  List<LinkingIdentifier> sources=runSiegfriedOnRepresentationOrFile(plugin,model,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),filePath);
  IOUtils.closeQuietly(directAccess);
  model.notifyFileUpdated(file);
  return sources;
}","public static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnFile(ModelService model,File file) throws GenericException, RequestNotValidException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException, PluginException {
  StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
  DirectResourceAccess directAccess=model.getStorage().getDirectAccess(fileStoragePath);
  Path filePath=directAccess.getPath();
  List<LinkingIdentifier> sources=runSiegfriedOnRepresentationOrFile(model,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),filePath);
  IOUtils.closeQuietly(directAccess);
  model.notifyFileUpdated(file);
  return sources;
}",0.9830508474576272
188266,"public static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentation(Plugin<T> plugin,ModelService model,Representation representation) throws GenericException, RequestNotValidException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException, PluginException {
  StoragePath representationDataPath=ModelUtils.getRepresentationDataStoragePath(representation.getAipId(),representation.getId());
  DirectResourceAccess directAccess=model.getStorage().getDirectAccess(representationDataPath);
  Path representationFsPath=directAccess.getPath();
  List<LinkingIdentifier> sources=runSiegfriedOnRepresentationOrFile(plugin,model,representation.getAipId(),representation.getId(),new ArrayList<>(),null,representationFsPath);
  IOUtils.closeQuietly(directAccess);
  return sources;
}","public static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentation(ModelService model,Representation representation) throws GenericException, RequestNotValidException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException, PluginException {
  StoragePath representationDataPath=ModelUtils.getRepresentationDataStoragePath(representation.getAipId(),representation.getId());
  DirectResourceAccess directAccess=model.getStorage().getDirectAccess(representationDataPath);
  Path representationFsPath=directAccess.getPath();
  List<LinkingIdentifier> sources=runSiegfriedOnRepresentationOrFile(model,representation.getAipId(),representation.getId(),new ArrayList<>(),null,representationFsPath);
  IOUtils.closeQuietly(directAccess);
  return sources;
}",0.9850374064837906
188267,"private static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentationOrFile(Plugin<T> plugin,ModelService model,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,Path path) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException, PluginException {
  List<LinkingIdentifier> sources=new ArrayList<>();
  if (FSUtils.exists(path)) {
    String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(path);
    final JsonNode jsonObject=JsonUtils.parseJson(siegfriedOutput);
    final JsonNode files=jsonObject.get(""String_Node_Str"");
    for (    JsonNode file : files) {
      Path fullFsPath=Paths.get(file.get(""String_Node_Str"").asText());
      Path relativeFsPath=path.relativize(fullFsPath);
      String jsonFileId=fullFsPath.getFileName().toString();
      List<String> jsonFilePath=new ArrayList<>(fileDirectoryPath);
      if (fileId != null) {
        jsonFilePath.add(fileId);
      }
      for (int j=0; j < relativeFsPath.getNameCount() && StringUtils.isNotBlank(relativeFsPath.getName(j).toString()); j++) {
        jsonFilePath.add(relativeFsPath.getName(j).toString());
      }
      jsonFilePath.remove(jsonFilePath.size() - 1);
      ContentPayload payload=new StringContentPayload(file.toString());
      model.createOrUpdateOtherMetadata(aipId,representationId,jsonFilePath,jsonFileId,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,payload,false);
      sources.add(PluginHelper.getLinkingIdentifier(aipId,representationId,jsonFilePath,jsonFileId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
      final JsonNode matches=file.get(""String_Node_Str"");
      for (      JsonNode match : matches) {
        String format=null;
        String version=null;
        String pronom=null;
        String mime=null;
        String[] pluginVersion=plugin.getVersion().split(""String_Node_Str"")[0].split(""String_Node_Str"");
        if (""String_Node_Str"".equals(pluginVersion[0])) {
          if (Integer.parseInt(pluginVersion[1]) > 4) {
            if (""String_Node_Str"".equalsIgnoreCase(match.get(""String_Node_Str"").textValue())) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
 else {
            if (""String_Node_Str"".equalsIgnoreCase(match.get(""String_Node_Str"").textValue())) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
        }
        PremisV3Utils.updateFormatPreservationMetadata(model,aipId,representationId,jsonFilePath,jsonFileId,format,version,pronom,mime,true);
      }
    }
  }
  return sources;
}","private static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentationOrFile(ModelService model,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,Path path) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException, PluginException {
  List<LinkingIdentifier> sources=new ArrayList<>();
  if (FSUtils.exists(path)) {
    String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(path);
    final JsonNode jsonObject=JsonUtils.parseJson(siegfriedOutput);
    final JsonNode files=jsonObject.get(""String_Node_Str"");
    for (    JsonNode file : files) {
      Path fullFsPath=Paths.get(file.get(""String_Node_Str"").asText());
      Path relativeFsPath=path.relativize(fullFsPath);
      String jsonFileId=fullFsPath.getFileName().toString();
      List<String> jsonFilePath=new ArrayList<>(fileDirectoryPath);
      if (fileId != null) {
        jsonFilePath.add(fileId);
      }
      for (int j=0; j < relativeFsPath.getNameCount() && StringUtils.isNotBlank(relativeFsPath.getName(j).toString()); j++) {
        jsonFilePath.add(relativeFsPath.getName(j).toString());
      }
      jsonFilePath.remove(jsonFilePath.size() - 1);
      ContentPayload payload=new StringContentPayload(file.toString());
      model.createOrUpdateOtherMetadata(aipId,representationId,jsonFilePath,jsonFileId,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,payload,false);
      sources.add(PluginHelper.getLinkingIdentifier(aipId,representationId,jsonFilePath,jsonFileId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
      final JsonNode matches=file.get(""String_Node_Str"");
      for (      JsonNode match : matches) {
        String format=null;
        String version=null;
        String pronom=null;
        String mime=null;
        String[] pluginVersion=getVersion().split(""String_Node_Str"")[0].split(""String_Node_Str"");
        if (""String_Node_Str"".equals(pluginVersion[0])) {
          if (Integer.parseInt(pluginVersion[1]) > 4) {
            if (""String_Node_Str"".equalsIgnoreCase(match.get(""String_Node_Str"").textValue())) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
 else {
            if (""String_Node_Str"".equalsIgnoreCase(match.get(""String_Node_Str"").textValue())) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
        }
        PremisV3Utils.updateFormatPreservationMetadata(model,aipId,representationId,jsonFilePath,jsonFileId,format,version,pronom,mime,true);
      }
    }
  }
  return sources;
}",0.9960066555740432
188268,"private static void bootstrap(CloudSolrClient cloudSolrClient,Path solrHome){
  CollectionAdminRequest.List req=new CollectionAdminRequest.List();
  try {
    CollectionAdminResponse response=req.process(cloudSolrClient);
    @SuppressWarnings(""String_Node_Str"") List<String> existingCollections=(List<String>)response.getResponse().get(""String_Node_Str"");
    if (existingCollections == null) {
      existingCollections=new ArrayList<>();
    }
    Map<String,Path> defaultCollections=getDefaultCollections(solrHome);
    for (    String defaultCollection : defaultCollections.keySet()) {
      if (!existingCollections.contains(defaultCollections)) {
        createCollection(cloudSolrClient,defaultCollection,defaultCollections.get(defaultCollection));
      }
    }
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private static void bootstrap(CloudSolrClient cloudSolrClient,Path solrHome){
  CollectionAdminRequest.List req=new CollectionAdminRequest.List();
  try {
    CollectionAdminResponse response=req.process(cloudSolrClient);
    @SuppressWarnings(""String_Node_Str"") List<String> existingCollections=(List<String>)response.getResponse().get(""String_Node_Str"");
    if (existingCollections == null) {
      existingCollections=new ArrayList<>();
    }
    Map<String,Path> defaultCollections=getDefaultCollections(solrHome);
    for (    String defaultCollection : defaultCollections.keySet()) {
      if (!existingCollections.contains(defaultCollection)) {
        createCollection(cloudSolrClient,defaultCollection,defaultCollections.get(defaultCollection));
      }
    }
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9994222992489892
188269,"private static void createCollection(CloudSolrClient cloudSolrClient,String collection,Path configPath){
  CollectionAdminRequest.Create req=new CollectionAdminRequest.Create();
  try {
    LOGGER.info(""String_Node_Str"",collection);
    Path collectionConf=configPath.resolve(""String_Node_Str"");
    Path solrCoreProperties=collectionConf.resolve(""String_Node_Str"");
    try (BufferedWriter solrCorePropertiesWriter=Files.newBufferedWriter(solrCoreProperties)){
      IOUtils.write(String.format(""String_Node_Str"",collection,collection.toLowerCase()),solrCorePropertiesWriter);
    }
     cloudSolrClient.uploadConfig(collectionConf,collection);
    req.setCollectionName(collection).setConfigName(collection);
    req.setNumShards(getEnvInt(""String_Node_Str"",1));
    req.setReplicationFactor(getEnvInt(""String_Node_Str"",1));
    req.setAutoAddReplicas(getEnvBoolean(""String_Node_Str"",false));
    CollectionAdminResponse response=req.process(cloudSolrClient);
    if (!response.isSuccess()) {
      LOGGER.error(""String_Node_Str"",collection,response.getErrorMessages());
    }
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"",collection,e);
  }
}","private static void createCollection(CloudSolrClient cloudSolrClient,String collection,Path configPath){
  CollectionAdminRequest.Create req=new CollectionAdminRequest.Create();
  try {
    LOGGER.info(""String_Node_Str"",collection);
    Path collectionConf=configPath.resolve(""String_Node_Str"");
    Path solrCoreProperties=collectionConf.resolve(""String_Node_Str"");
    try (BufferedWriter solrCorePropertiesWriter=Files.newBufferedWriter(solrCoreProperties)){
      IOUtils.write(String.format(""String_Node_Str"",collection,collection.toLowerCase()),solrCorePropertiesWriter);
    }
     cloudSolrClient.uploadConfig(collectionConf,collection);
    req.setCollectionName(collection).setConfigName(collection);
    req.setNumShards(getEnvInt(""String_Node_Str"",1));
    req.setReplicationFactor(getEnvInt(""String_Node_Str"",1));
    req.setAutoAddReplicas(getEnvBoolean(""String_Node_Str"",false));
    CollectionAdminResponse response=req.process(cloudSolrClient);
    if (!response.isSuccess()) {
      LOGGER.error(""String_Node_Str"",collection,response.getErrorMessages());
    }
  }
 catch (  SolrServerException|SolrException|IOException e) {
    LOGGER.error(""String_Node_Str"",collection,e);
  }
}",0.9941275167785236
188270,"@Override public ReturnWithExceptions<Void> representationCreated(Representation representation){
  ReturnWithExceptions<Void> exceptions=new ReturnWithExceptions<>();
  try {
    AIP aip=model.retrieveAIP(representation.getAipId());
    List<String> ancestors=SolrUtils.getAncestors(aip.getParentId(),model);
    ReturnWithExceptions<Void> representationExceptions=indexRepresentation(aip,representation,ancestors);
    exceptions.addExceptions(representationExceptions.getExceptions());
    ReturnWithExceptions<Void> eventExceptions=indexPreservationsEvents(aip.getId(),representation.getId());
    exceptions.addExceptions(eventExceptions.getExceptions());
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",representation,e);
  }
  return exceptions;
}","@Override public ReturnWithExceptions<Void> representationCreated(Representation representation){
  ReturnWithExceptions<Void> exceptions=new ReturnWithExceptions<>();
  try {
    AIP aip=model.retrieveAIP(representation.getAipId());
    List<String> ancestors=SolrUtils.getAncestors(aip.getParentId(),model);
    ReturnWithExceptions<Void> representationExceptions=indexRepresentation(aip,representation,ancestors);
    exceptions.addExceptions(representationExceptions.getExceptions());
    ReturnWithExceptions<Void> eventExceptions=indexPreservationsEvents(aip.getId(),representation.getId());
    exceptions.addExceptions(eventExceptions.getExceptions());
    if (aip.getRepresentations().size() == 1) {
      SolrInputDocument doc=SolrUtils.updateAIPHasRepresentations(aip.getId(),true);
      index.add(RodaConstants.INDEX_AIP,doc);
    }
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",representation,e);
  }
catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return exceptions;
}",0.8417849898580122
188271,"@Override public void representationDeleted(String aipId,String representationId,boolean deleteIncidences){
  String representationUUID=IdUtils.getRepresentationId(aipId,representationId);
  deleteDocumentFromIndex(IndexedRepresentation.class,representationUUID);
  deleteDocumentsFromIndex(IndexedFile.class,RodaConstants.FILE_REPRESENTATION_UUID,representationUUID);
  deleteDocumentsFromIndex(IndexedPreservationEvent.class,RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID,representationUUID);
  if (deleteIncidences) {
    deleteDocumentsFromIndex(RiskIncidence.class,RodaConstants.RISK_INCIDENCE_REPRESENTATION_ID,representationId);
  }
}","@Override public void representationDeleted(String aipId,String representationId,boolean deleteIncidences){
  String representationUUID=IdUtils.getRepresentationId(aipId,representationId);
  deleteDocumentFromIndex(IndexedRepresentation.class,representationUUID);
  deleteDocumentsFromIndex(IndexedFile.class,RodaConstants.FILE_REPRESENTATION_UUID,representationUUID);
  deleteDocumentsFromIndex(IndexedPreservationEvent.class,RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID,representationUUID);
  if (deleteIncidences) {
    deleteDocumentsFromIndex(RiskIncidence.class,RodaConstants.RISK_INCIDENCE_REPRESENTATION_ID,representationId);
  }
  try {
    AIP aip=model.retrieveAIP(aipId);
    if (aip.getRepresentations().size() == 0) {
      SolrInputDocument doc=SolrUtils.updateAIPHasRepresentations(aipId,false);
      index.add(RodaConstants.INDEX_AIP,doc);
    }
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|NotFoundException|GenericException|SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.7598355842630652
188272,"private void updateLayout(final AIPState state,final boolean justActive){
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  String type=representation.getType() != null ? representation.getType() : representation.getId();
  representationType.setHTML(HtmlSnippetUtils.getRepresentationTypeHTML(type,representation.getRepresentationStates()));
  representationId.setText(representation.getId());
  if (representation.getCreatedOn() != null) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(representation.getCreatedOn()),representation.getCreatedBy()));
  }
  if (representation.getUpdatedOn() != null) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(representation.getUpdatedOn()),representation.getUpdatedBy()));
  }
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
      if (Actionable.ActionImpact.UPDATED.equals(impact)) {
        BrowserService.Util.getInstance().retrieve(IndexedRepresentation.class.getName(),representation.getUUID(),representationFields,new AsyncCallback<IndexedRepresentation>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          IndexedRepresentation rep){
            representation=rep;
            updateLayout(state,justActive);
          }
        }
);
      }
    }
  }
));
}","private void updateLayout(final AIPState state,final boolean justActive){
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  String type=representation.getType() != null ? representation.getType() : representation.getId();
  representationType.setHTML(HtmlSnippetUtils.getRepresentationTypeHTML(type,representation.getRepresentationStates()));
  representationId.setText(representation.getId());
  if (!breadcrumbItems.isEmpty()) {
    breadcrumbItems.remove(breadcrumbItems.size() - 1);
    breadcrumbItems.add(BreadcrumbUtils.getBreadcrumbItem(representation));
    breadcrumb.updatePath(breadcrumbItems);
  }
  if (representation.getCreatedOn() != null) {
    dateCreated.setText(messages.dateCreated(Humanize.formatDateTime(representation.getCreatedOn()),representation.getCreatedBy()));
  }
  if (representation.getUpdatedOn() != null) {
    dateUpdated.setText(messages.dateUpdated(Humanize.formatDateTime(representation.getUpdatedOn()),representation.getUpdatedBy()));
  }
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
      if (Actionable.ActionImpact.UPDATED.equals(impact)) {
        BrowserService.Util.getInstance().retrieve(IndexedRepresentation.class.getName(),representation.getUUID(),representationFields,new AsyncCallback<IndexedRepresentation>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          IndexedRepresentation rep){
            representation=rep;
            updateLayout(state,justActive);
          }
        }
);
      }
    }
  }
));
}",0.9487422876127196
188273,"public BrowseRepresentation(BrowseRepresentationBundle bundle){
  this.representation=bundle.getRepresentation();
  this.aipId=representation.getAipId();
  this.repId=representation.getId();
  this.repUUID=representation.getUUID();
  handlers=new ArrayList<>();
  String summary=messages.representationListOfFiles();
  final AIPState state=bundle.getAip().getState();
  final boolean justActive=AIPState.ACTIVE.equals(state);
  boolean selectable=true;
  boolean showFilesPath=false;
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,repUUID),new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  filesList=new SearchFileList(filter,justActive,Facets.NONE,summary,selectable,showFilesPath);
  LastSelectedItemsSingleton.getInstance().setSelectedJustActive(justActive);
  filesList.setActionable(FileActions.get(aipId,repId));
  ListSelectionUtils.bindBrowseOpener(filesList);
  filesSearch=new SearchPanel(filter,ALL_FILTER,true,messages.searchPlaceHolder(),false,false,true);
  filesSearch.setList(filesList);
  disseminationsList=new DIPList(Filter.NULL,Facets.NONE,messages.listOfDisseminations(),true);
  disseminationsList.setActionable(DisseminationActions.get());
  ListSelectionUtils.bindBrowseOpener(disseminationsList);
  disseminationsSearch=new SearchPanel(Filter.NULL,RodaConstants.DIP_SEARCH,true,messages.searchPlaceHolder(),false,false,true);
  disseminationsSearch.setList(disseminationsList);
  initWidget(uiBinder.createAndBindUi(this));
  updateLayout(state,justActive);
  breadcrumb.updatePath(BreadcrumbUtils.getRepresentationBreadcrumbs(bundle));
  breadcrumb.setVisible(true);
  final List<Pair<String,HTML>> descriptiveMetadataContainers=new ArrayList<>();
  final Map<String,DescriptiveMetadataViewBundle> bundles=new HashMap<>();
  for (  DescriptiveMetadataViewBundle descMetadataBundle : bundle.getRepresentationDescriptiveMetadata()) {
    String title=descMetadataBundle.getLabel() != null ? descMetadataBundle.getLabel() : descMetadataBundle.getId();
    HTML container=new HTML();
    container.addStyleName(""String_Node_Str"");
    itemMetadata.add(container,title);
    descriptiveMetadataContainers.add(Pair.of(descMetadataBundle.getId(),container));
    bundles.put(descMetadataBundle.getId(),descMetadataBundle);
  }
  HandlerRegistration tabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() < descriptiveMetadataContainers.size()) {
        Pair<String,HTML> pair=descriptiveMetadataContainers.get(event.getSelectedItem());
        String descId=pair.getFirst();
        final HTML html=pair.getSecond();
        final DescriptiveMetadataViewBundle bundle=bundles.get(descId);
        if (html.getText().length() == 0) {
          getDescriptiveMetadataHTML(descId,bundle,new AsyncCallback<SafeHtml>(){
            @Override public void onFailure(            Throwable caught){
              if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
                Toast.showError(messages.errorLoadingDescriptiveMetadata(caught.getMessage()));
              }
            }
            @Override public void onSuccess(            SafeHtml result){
              html.setHTML(result);
            }
          }
);
        }
      }
    }
  }
);
  final int addTabIndex=itemMetadata.getWidgetCount();
  FlowPanel addTab=new FlowPanel();
  addTab.add(new HTML(SafeHtmlUtils.fromSafeConstant(""String_Node_Str"")));
  itemMetadata.add(new Label(),addTab);
  HandlerRegistration addTabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() == addTabIndex) {
        newRepresentationDescriptiveMetadata();
      }
    }
  }
);
  addTab.addStyleName(""String_Node_Str"");
  addTab.getParent().addStyleName(""String_Node_Str"");
  handlers.add(tabHandler);
  handlers.add(addTabHandler);
  if (!bundle.getRepresentationDescriptiveMetadata().isEmpty()) {
    newDescriptiveMetadata.setVisible(false);
    itemMetadata.setVisible(true);
    itemMetadata.selectTab(0);
  }
 else {
    newDescriptiveMetadata.setVisible(true);
    itemMetadata.setVisible(false);
  }
  if (bundle.getDipCount() > 0) {
    Filter disseminationsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,repUUID));
    disseminationsList.set(disseminationsFilter,state.equals(AIPState.ACTIVE),Facets.NONE);
    disseminationsSearch.setDefaultFilter(disseminationsFilter,true);
    disseminationsSearch.clearSearchInputBox();
  }
  disseminationsList.getParent().setVisible(bundle.getDipCount() > 0);
  ListSelectionUtils.bindLayout(representation,searchPrevious,searchNext,keyboardFocus,true,false,false,searchSection);
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(state.toString().toLowerCase());
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  WCAGUtilities.getInstance().makeAccessible(itemMetadata.getElement());
}","public BrowseRepresentation(BrowseRepresentationBundle bundle){
  this.representation=bundle.getRepresentation();
  this.aipId=representation.getAipId();
  this.repId=representation.getId();
  this.repUUID=representation.getUUID();
  handlers=new ArrayList<>();
  String summary=messages.representationListOfFiles();
  final AIPState state=bundle.getAip().getState();
  final boolean justActive=AIPState.ACTIVE.equals(state);
  boolean selectable=true;
  boolean showFilesPath=false;
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,repUUID),new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  filesList=new SearchFileList(filter,justActive,Facets.NONE,summary,selectable,showFilesPath);
  LastSelectedItemsSingleton.getInstance().setSelectedJustActive(justActive);
  filesList.setActionable(FileActions.get(aipId,repId));
  ListSelectionUtils.bindBrowseOpener(filesList);
  filesSearch=new SearchPanel(filter,ALL_FILTER,true,messages.searchPlaceHolder(),false,false,true);
  filesSearch.setList(filesList);
  disseminationsList=new DIPList(Filter.NULL,Facets.NONE,messages.listOfDisseminations(),true);
  disseminationsList.setActionable(DisseminationActions.get());
  ListSelectionUtils.bindBrowseOpener(disseminationsList);
  disseminationsSearch=new SearchPanel(Filter.NULL,RodaConstants.DIP_SEARCH,true,messages.searchPlaceHolder(),false,false,true);
  disseminationsSearch.setList(disseminationsList);
  initWidget(uiBinder.createAndBindUi(this));
  updateLayout(state,justActive);
  breadcrumbItems=BreadcrumbUtils.getRepresentationBreadcrumbs(bundle);
  breadcrumb.updatePath(breadcrumbItems);
  breadcrumb.setVisible(true);
  final List<Pair<String,HTML>> descriptiveMetadataContainers=new ArrayList<>();
  final Map<String,DescriptiveMetadataViewBundle> bundles=new HashMap<>();
  for (  DescriptiveMetadataViewBundle descMetadataBundle : bundle.getRepresentationDescriptiveMetadata()) {
    String title=descMetadataBundle.getLabel() != null ? descMetadataBundle.getLabel() : descMetadataBundle.getId();
    HTML container=new HTML();
    container.addStyleName(""String_Node_Str"");
    itemMetadata.add(container,title);
    descriptiveMetadataContainers.add(Pair.of(descMetadataBundle.getId(),container));
    bundles.put(descMetadataBundle.getId(),descMetadataBundle);
  }
  HandlerRegistration tabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() < descriptiveMetadataContainers.size()) {
        Pair<String,HTML> pair=descriptiveMetadataContainers.get(event.getSelectedItem());
        String descId=pair.getFirst();
        final HTML html=pair.getSecond();
        final DescriptiveMetadataViewBundle bundle=bundles.get(descId);
        if (html.getText().length() == 0) {
          getDescriptiveMetadataHTML(descId,bundle,new AsyncCallback<SafeHtml>(){
            @Override public void onFailure(            Throwable caught){
              if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
                Toast.showError(messages.errorLoadingDescriptiveMetadata(caught.getMessage()));
              }
            }
            @Override public void onSuccess(            SafeHtml result){
              html.setHTML(result);
            }
          }
);
        }
      }
    }
  }
);
  final int addTabIndex=itemMetadata.getWidgetCount();
  FlowPanel addTab=new FlowPanel();
  addTab.add(new HTML(SafeHtmlUtils.fromSafeConstant(""String_Node_Str"")));
  itemMetadata.add(new Label(),addTab);
  HandlerRegistration addTabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() == addTabIndex) {
        newRepresentationDescriptiveMetadata();
      }
    }
  }
);
  addTab.addStyleName(""String_Node_Str"");
  addTab.getParent().addStyleName(""String_Node_Str"");
  handlers.add(tabHandler);
  handlers.add(addTabHandler);
  if (!bundle.getRepresentationDescriptiveMetadata().isEmpty()) {
    newDescriptiveMetadata.setVisible(false);
    itemMetadata.setVisible(true);
    itemMetadata.selectTab(0);
  }
 else {
    newDescriptiveMetadata.setVisible(true);
    itemMetadata.setVisible(false);
  }
  if (bundle.getDipCount() > 0) {
    Filter disseminationsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,repUUID));
    disseminationsList.set(disseminationsFilter,state.equals(AIPState.ACTIVE),Facets.NONE);
    disseminationsSearch.setDefaultFilter(disseminationsFilter,true);
    disseminationsSearch.clearSearchInputBox();
  }
  disseminationsList.getParent().setVisible(bundle.getDipCount() > 0);
  ListSelectionUtils.bindLayout(representation,searchPrevious,searchNext,keyboardFocus,true,false,false,searchSection);
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(state.toString().toLowerCase());
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  WCAGUtilities.getInstance().makeAccessible(itemMetadata.getElement());
}",0.9868582773943462
188274,"public boolean hasObjects(Class<? extends IsRODAObject> objectClass){
  try {
    if (LogEntry.class.equals(objectClass) || RODAMember.class.equals(objectClass) || TransferredResource.class.equals(objectClass)|| IndexedPreservationAgent.class.equals(objectClass)) {
      return true;
    }
 else {
      StoragePath storagePath=ModelUtils.getContainerPath(objectClass);
      try {
        return RodaCoreFactory.getStorageService().countResourcesUnderContainer(storagePath,false).intValue() > 0;
      }
 catch (      NotFoundException e) {
      }
    }
    return false;
  }
 catch (  RODAException e) {
    return false;
  }
}","public boolean hasObjects(Class<? extends IsRODAObject> objectClass){
  try {
    if (LogEntry.class.equals(objectClass) || RODAMember.class.equals(objectClass) || TransferredResource.class.equals(objectClass)|| IndexedPreservationAgent.class.equals(objectClass)|| IndexedAIP.class.equals(objectClass)) {
      return true;
    }
 else {
      StoragePath storagePath=ModelUtils.getContainerPath(objectClass);
      try {
        return RodaCoreFactory.getStorageService().countResourcesUnderContainer(storagePath,false).intValue() > 0;
      }
 catch (      NotFoundException e) {
      }
    }
    return false;
  }
 catch (  RODAException e) {
    return false;
  }
}",0.970023059185242
188275,"private static void updateParent(IndexService index,ModelService model,String aipId,String newParentId,Optional<String> searchScope) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  Filter parentFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,aipId));
  searchScope.ifPresent(id -> parentFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
  index.execute(IndexedAIP.class,parentFilter,Arrays.asList(RodaConstants.INDEX_UUID),child -> {
    try {
      AIP aip=model.retrieveAIP(child.getId());
      aip.setParentId(newParentId);
      model.updateAIP(aip,""String_Node_Str"");
    }
 catch (    NotFoundException e) {
      LOGGER.debug(""String_Node_Str"",e);
    }
  }
,e -> LOGGER.debug(""String_Node_Str"",e));
  try {
    model.deleteAIP(aipId);
  }
 catch (  NotFoundException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}","private static void updateParent(IndexService index,ModelService model,String aipId,String newParentId,Optional<String> searchScope,String updatedBy) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  Filter parentFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,aipId));
  searchScope.ifPresent(id -> parentFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
  index.execute(IndexedAIP.class,parentFilter,Arrays.asList(RodaConstants.INDEX_UUID),child -> {
    try {
      AIP aip=model.retrieveAIP(child.getId());
      aip.setParentId(newParentId);
      model.updateAIP(aip,updatedBy);
    }
 catch (    NotFoundException e) {
      LOGGER.debug(""String_Node_Str"",e);
    }
  }
,e -> LOGGER.debug(""String_Node_Str"",e));
  try {
    model.deleteAIP(aipId);
  }
 catch (  NotFoundException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}",0.9764125068568296
188276,"public static void fixParents(IndexService index,ModelService model,Optional<String> jobId,Optional<String> computedSearchScope,String updatedBy) throws GenericException, RequestNotValidException, AuthorizationDeniedException, NotFoundException {
  Map<String,List<String>> aipIdToGhost=new HashMap<>();
  Map<String,List<String>> sipIdToGhost=new HashMap<>();
  Filter ghostsFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.TRUE.toString()));
  jobId.ifPresent(id -> ghostsFilter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,id)));
  IterableIndexResult<IndexedAIP> ghosts=index.findAll(IndexedAIP.class,ghostsFilter,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.INGEST_SIP_IDS));
  for (  IndexedAIP aip : ghosts) {
    if (aip.getIngestSIPIds() != null && !aip.getIngestSIPIds().isEmpty()) {
      List<String> temp=new ArrayList<>();
      String firstIngestSIPId=aip.getIngestSIPIds().get(0);
      if (sipIdToGhost.containsKey(firstIngestSIPId)) {
        temp=sipIdToGhost.get(firstIngestSIPId);
      }
      temp.add(aip.getId());
      sipIdToGhost.put(firstIngestSIPId,temp);
    }
 else {
      List<String> temp=new ArrayList<>();
      if (aipIdToGhost.containsKey(aip.getId())) {
        temp=aipIdToGhost.get(aip.getId());
      }
      temp.add(aip.getId());
      aipIdToGhost.put(aip.getId(),temp);
    }
  }
  for (  Map.Entry<String,List<String>> entry : sipIdToGhost.entrySet()) {
    Filter nonGhostsFilter=new Filter(new SimpleFilterParameter(RodaConstants.INGEST_SIP_IDS,entry.getKey()),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
    computedSearchScope.ifPresent(id -> nonGhostsFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
    IndexResult<IndexedAIP> result=index.find(IndexedAIP.class,nonGhostsFilter,Sorter.NONE,new Sublist(0,1),Arrays.asList(RodaConstants.INDEX_UUID));
    if (result.getTotalCount() > 1) {
      LOGGER.debug(""String_Node_Str"",entry.getKey());
    }
 else     if (result.getTotalCount() == 1) {
      IndexedAIP newParentIAIP=result.getResults().get(0);
      for (      String id : entry.getValue()) {
        moveChildrenAIPsAndDelete(index,model,id,newParentIAIP.getId(),computedSearchScope,updatedBy);
      }
    }
 else     if (result.getTotalCount() == 0) {
      String ghostIdToKeep=entry.getValue().get(0);
      AIP ghostToKeep=model.retrieveAIP(ghostIdToKeep);
      ghostToKeep.setGhost(false);
      model.updateAIP(ghostToKeep,""String_Node_Str"");
      if (entry.getValue().size() > 1) {
        for (int i=1; i < entry.getValue().size(); i++) {
          updateParent(index,model,entry.getValue().get(i),ghostIdToKeep,computedSearchScope);
        }
      }
    }
  }
}","public static void fixParents(IndexService index,ModelService model,Optional<String> jobId,Optional<String> computedSearchScope,String updatedBy) throws GenericException, RequestNotValidException, AuthorizationDeniedException, NotFoundException {
  Map<String,List<String>> aipIdToGhost=new HashMap<>();
  Map<String,List<String>> sipIdToGhost=new HashMap<>();
  Filter ghostsFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.TRUE.toString()));
  jobId.ifPresent(id -> ghostsFilter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,id)));
  IterableIndexResult<IndexedAIP> ghosts=index.findAll(IndexedAIP.class,ghostsFilter,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.INGEST_SIP_IDS,RodaConstants.AIP_GHOST));
  for (  IndexedAIP aip : ghosts) {
    List<String> temp=new ArrayList<>();
    if (aip.getIngestSIPIds() != null && !aip.getIngestSIPIds().isEmpty()) {
      String firstIngestSIPId=aip.getIngestSIPIds().get(0);
      if (sipIdToGhost.containsKey(firstIngestSIPId)) {
        temp=sipIdToGhost.get(firstIngestSIPId);
      }
      temp.add(aip.getId());
      sipIdToGhost.put(firstIngestSIPId,temp);
    }
 else {
      if (aipIdToGhost.containsKey(aip.getId())) {
        temp=aipIdToGhost.get(aip.getId());
      }
      temp.add(aip.getId());
      aipIdToGhost.put(aip.getId(),temp);
    }
  }
  for (  Map.Entry<String,List<String>> entry : sipIdToGhost.entrySet()) {
    Filter nonGhostsFilter=new Filter(new SimpleFilterParameter(RodaConstants.INGEST_SIP_IDS,entry.getKey()),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
    computedSearchScope.ifPresent(id -> nonGhostsFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
    IndexResult<IndexedAIP> result=index.find(IndexedAIP.class,nonGhostsFilter,Sorter.NONE,new Sublist(0,1),Arrays.asList(RodaConstants.INDEX_UUID));
    if (result.getTotalCount() > 1) {
      LOGGER.debug(""String_Node_Str"",entry.getKey());
    }
 else     if (result.getTotalCount() == 1) {
      IndexedAIP newParentIAIP=result.getResults().get(0);
      for (      String id : entry.getValue()) {
        moveChildrenAIPsAndDelete(index,model,id,newParentIAIP.getId(),computedSearchScope,updatedBy);
      }
    }
 else     if (result.getTotalCount() == 0) {
      String ghostIdToKeep=entry.getValue().get(0);
      if (entry.getValue().size() > 1) {
        for (int i=1; i < entry.getValue().size(); i++) {
          updateParent(index,model,entry.getValue().get(i),ghostIdToKeep,computedSearchScope,updatedBy);
        }
      }
    }
  }
}",0.8614344723995494
188277,"private void fixAncestors(IndexService index,ModelService model,Report report,SimpleJobPluginInfo jobPluginInfo,int counter){
  try {
    Optional<String> computedSearchScope=PluginHelper.getSearchScopeFromParameters(this,model);
    Job originalJob=PluginHelper.getJob(originalJobId,model);
    PluginHelper.fixParents(index,model,Optional.ofNullable(originalJob.getId()),computedSearchScope,originalJob.getUsername());
    jobPluginInfo.incrementObjectsProcessedWithSuccess(counter);
    report.setPluginState(PluginState.SUCCESS);
  }
 catch (  NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
    jobPluginInfo.incrementObjectsProcessedWithFailure(counter);
    report.setPluginState(PluginState.FAILURE);
    Report reportItem=PluginHelper.initPluginReportItem(this,""String_Node_Str"",AIP.class);
    reportItem.setPluginDetails(""String_Node_Str"" + e.getMessage());
    reportItem.setPluginState(PluginState.FAILURE);
    report.addReport(reportItem);
    try {
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,PluginHelper.getJob(this,index));
    }
 catch (    NotFoundException|GenericException e1) {
    }
  }
}","private void fixAncestors(IndexService index,ModelService model,Report report,SimpleJobPluginInfo jobPluginInfo,int counter){
  try {
    Optional<String> computedSearchScope=PluginHelper.getSearchScopeFromParameters(this,model);
    Job originalJob=PluginHelper.getJob(originalJobId,model);
    PluginHelper.fixParents(index,model,Optional.ofNullable(originalJob.getId()),computedSearchScope,originalJob.getUsername());
    jobPluginInfo.incrementObjectsProcessedWithSuccess(counter);
    report.setPluginState(PluginState.SUCCESS);
  }
 catch (  NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
    jobPluginInfo.incrementObjectsProcessedWithFailure(counter);
    report.setPluginState(PluginState.FAILURE);
    Report reportItem=PluginHelper.initPluginReportItem(this,""String_Node_Str"",AIP.class);
    reportItem.setPluginDetails(""String_Node_Str"" + e.getMessage());
    reportItem.setPluginState(PluginState.FAILURE);
    report.addReport(reportItem);
    try {
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,PluginHelper.getJob(this,index));
    }
 catch (    NotFoundException|GenericException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}",0.9831189710610932
188278,"@GET @Path(""String_Node_Str"" + RodaConstants.API_PATH_PARAM_AIP_ID + ""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML,ExtraMediaType.APPLICATION_ZIP}) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=AIP.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=AIP.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response retrieveAIP(@ApiParam(value=""String_Node_Str"",required=true) @PathParam(RodaConstants.API_PATH_PARAM_AIP_ID) String aipId,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  IndexedAIP indexedAIP=Browser.retrieve(user,IndexedAIP.class,aipId,new ArrayList<>());
  return ApiUtils.okResponse(indexedAIP,acceptFormat,mediaType);
}","@GET @Path(""String_Node_Str"" + RodaConstants.API_PATH_PARAM_AIP_ID + ""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML,ExtraMediaType.APPLICATION_ZIP}) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=IndexedAIP.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=IndexedAIP.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response retrieveAIP(@ApiParam(value=""String_Node_Str"",required=true) @PathParam(RodaConstants.API_PATH_PARAM_AIP_ID) String aipId,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  IndexedAIP indexedAIP=Browser.retrieve(user,IndexedAIP.class,aipId,new ArrayList<>());
  return ApiUtils.okResponse(indexedAIP,acceptFormat,mediaType);
}",0.9936421435059036
188279,"public Report addReport(Report report){
  report.setDateUpdated(new Date());
  setDateUpdated(report.getDateUpdated());
  if (totalSteps == 0 && report.getTotalSteps() != 0) {
    setTotalSteps(report.getTotalSteps());
  }
  stepsCompleted=stepsCompleted + 1;
  if (totalSteps != 0) {
    completionPercentage=Math.round((100f / totalSteps) * stepsCompleted);
  }
  setPlugin(report.getPlugin());
  setPluginName(report.getPluginName());
  setPluginVersion(report.getPluginVersion());
  setPluginState(report.getPluginState());
  if (!""String_Node_Str"".equals(report.getPluginDetails()) && !getPluginDetails().equals(report.getPluginDetails())) {
    setPluginDetails((!""String_Node_Str"".equals(getPluginDetails()) ? getPluginDetails() + lineSeparator : ""String_Node_Str"") + report.getPluginDetails());
  }
  setOutcomeObjectState(report.getOutcomeObjectState());
  reports.add(report);
  return this;
}","public Report addReport(Report report,boolean updateReportItemDateUpdated){
  if (updateReportItemDateUpdated) {
    report.setDateUpdated(new Date());
  }
  setDateUpdated(report.getDateUpdated());
  if (totalSteps == 0 && report.getTotalSteps() != 0) {
    setTotalSteps(report.getTotalSteps());
  }
  stepsCompleted=stepsCompleted + 1;
  if (totalSteps != 0) {
    completionPercentage=Math.round((100f / totalSteps) * stepsCompleted);
  }
  setPlugin(report.getPlugin());
  setPluginName(report.getPluginName());
  setPluginVersion(report.getPluginVersion());
  setPluginState(report.getPluginState());
  if (!""String_Node_Str"".equals(report.getPluginDetails()) && !getPluginDetails().equals(report.getPluginDetails())) {
    setPluginDetails((!""String_Node_Str"".equals(getPluginDetails()) ? getPluginDetails() + lineSeparator : ""String_Node_Str"") + report.getPluginDetails());
  }
  setOutcomeObjectState(report.getOutcomeObjectState());
  reports.add(report);
  return this;
}",0.9474801061007958
188280,"public void addReport(String outcomeObjectId,Report report){
  reportsFromBeingProcessed.get(aipIdToTransferredResourceId.get(outcomeObjectId)).get(outcomeObjectId).addReport(report);
}","public void addReport(Report report){
  String outcomeObjectId=report.getOutcomeObjectId();
  reportsFromBeingProcessed.get(aipIdToTransferredResourceId.get(outcomeObjectId)).get(outcomeObjectId).addReport(report,false);
}",0.7960687960687961
188281,"private void mergeReports(IngestJobPluginInfo jobPluginInfo,Report plugin){
  Map<String,String> aipIdToTransferredResourceId=jobPluginInfo.getAipIdToTransferredResourceId();
  if (plugin != null) {
    for (    Report reportItem : plugin.getReports()) {
      if (TransferredResource.class.getName().equals(reportItem.getSourceObjectClass())) {
        Report report=new Report(reportItem);
        report.addReport(reportItem);
        jobPluginInfo.addReport(reportItem.getSourceObjectId(),reportItem.getOutcomeObjectId(),report);
      }
 else       if (StringUtils.isNotBlank(reportItem.getOutcomeObjectId()) && aipIdToTransferredResourceId.get(reportItem.getOutcomeObjectId()) != null) {
        jobPluginInfo.addReport(reportItem.getOutcomeObjectId(),reportItem);
      }
    }
  }
}","private void mergeReports(IngestJobPluginInfo jobPluginInfo,Report plugin){
  Map<String,String> aipIdToTransferredResourceId=jobPluginInfo.getAipIdToTransferredResourceId();
  if (plugin != null) {
    for (    Report reportItem : plugin.getReports()) {
      if (TransferredResource.class.getName().equals(reportItem.getSourceObjectClass())) {
        Report report=new Report(reportItem);
        report.addReport(reportItem);
        jobPluginInfo.addReport(reportItem.getSourceObjectId(),reportItem.getOutcomeObjectId(),report);
      }
 else       if (StringUtils.isNotBlank(reportItem.getOutcomeObjectId()) && aipIdToTransferredResourceId.get(reportItem.getOutcomeObjectId()) != null) {
        jobPluginInfo.addReport(reportItem);
      }
    }
  }
}",0.979328165374677
188282,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  final CSVPrinter csvFilePrinter=createCSVPrinter();
  return PluginHelper.processObjects(this,new RODAObjectProcessingLogic<AIP>(){
    @Override public void process(    IndexService index,    ModelService model,    StorageService storage,    Report report,    Job cachedJob,    SimpleJobPluginInfo jobPluginInfo,    Plugin<AIP> plugin,    AIP object){
      processAIP(model,storage,jobPluginInfo,csvFilePrinter,object);
    }
  }
,new RODAProcessingLogic<AIP>(){
    @Override public void process(    IndexService index,    ModelService model,    StorageService storage,    Report report,    Job cachedJob,    SimpleJobPluginInfo jobPluginInfo,    Plugin<AIP> plugin){
      IOUtils.closeQuietly(csvFilePrinter);
    }
  }
,index,model,storage,liteList);
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Path jobCSVTempFolder=getJobCSVTempFolder();
  Path csvTempFile=jobCSVTempFolder.resolve(IdUtils.createUUID() + ""String_Node_Str"");
  CSVFormat csvFileFormat=CSVFormat.DEFAULT.withRecordSeparator(""String_Node_Str"");
  try {
    BufferedWriter fileWriter=Files.newBufferedWriter(csvTempFile);
    CSVPrinter csvFilePrinter=new CSVPrinter(fileWriter,csvFileFormat);
    return PluginHelper.processObjects(this,new RODAObjectProcessingLogic<AIP>(){
      @Override public void process(      IndexService index,      ModelService model,      StorageService storage,      Report report,      Job cachedJob,      SimpleJobPluginInfo jobPluginInfo,      Plugin<AIP> plugin,      AIP object){
        processAIP(model,storage,jobPluginInfo,csvFilePrinter,object);
      }
    }
,new RODAProcessingLogic<AIP>(){
      @Override public void process(      IndexService index,      ModelService model,      StorageService storage,      Report report,      Job cachedJob,      SimpleJobPluginInfo jobPluginInfo,      Plugin<AIP> plugin){
        IOUtils.closeQuietly(csvFilePrinter);
      }
    }
,index,model,storage,liteList);
  }
 catch (  IOException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
}",0.7547169811320755
188283,"private void processAIP(ModelService model,StorageService storage,SimpleJobPluginInfo jobPluginInfo,CSVPrinter csvFilePrinter,AIP aip){
  if (csvFilePrinter == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  try {
    if (outputDataInformation && aip.getRepresentations() != null) {
      List<List<String>> dataInformation=InventoryReportPluginUtils.getDataInformation(fields,aip,model,storage);
      csvFilePrinter.printRecords(dataInformation);
    }
    if (outputDescriptiveMetadataInformation && aip.getDescriptiveMetadata() != null) {
      List<List<String>> dataInformation=InventoryReportPluginUtils.getDescriptiveMetadataInformation(fields,aip,model,storage);
      csvFilePrinter.printRecords(dataInformation);
    }
    if (otherMetadataTypes != null && !otherMetadataTypes.isEmpty()) {
      for (      String otherMetadataType : otherMetadataTypes) {
        List<List<String>> otherMetadataInformation=InventoryReportPluginUtils.getOtherMetadataInformation(fields,otherMetadataType,aip,model,storage);
        csvFilePrinter.printRecords(otherMetadataInformation);
      }
    }
    jobPluginInfo.incrementObjectsProcessedWithSuccess();
  }
 catch (  IOException e) {
    jobPluginInfo.incrementObjectsProcessedWithFailure();
  }
}","private void processAIP(ModelService model,StorageService storage,SimpleJobPluginInfo jobPluginInfo,CSVPrinter csvFilePrinter,AIP aip){
  if (csvFilePrinter == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  try {
    if (outputDataInformation && aip.getRepresentations() != null) {
      List<List<String>> dataInformation=InventoryReportPluginUtils.getDataInformation(fields,aip,model,storage);
      csvFilePrinter.printRecords(dataInformation);
    }
    if (outputDescriptiveMetadataInformation && aip.getDescriptiveMetadata() != null) {
      List<List<String>> dataInformation=InventoryReportPluginUtils.getDescriptiveMetadataInformation(fields,aip,model,storage);
      csvFilePrinter.printRecords(dataInformation);
    }
    if (otherMetadataTypes != null && !otherMetadataTypes.isEmpty()) {
      for (      String otherMetadataType : otherMetadataTypes) {
        List<List<String>> otherMetadataInformation=InventoryReportPluginUtils.getOtherMetadataInformation(fields,otherMetadataType,aip,model,storage);
        csvFilePrinter.printRecords(otherMetadataInformation);
      }
    }
    jobPluginInfo.incrementObjectsProcessedWithSuccess();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    jobPluginInfo.incrementObjectsProcessedWithFailure();
  }
}",0.9847834568864612
188284,"@Override public void setTotalSteps(){
  this.totalSteps=11 - deactivatedPlugins.size();
}","@Override public void setTotalSteps(){
  this.totalSteps=DefaultIngestPlugin.INITIAL_TOTAL_STEPS - deactivatedPlugins.size();
}",0.8110599078341014
188285,"@Override public List<PluginParameter> getParameters(){
  loadMap();
  ArrayList<PluginParameter> pluginParameters=new ArrayList<>();
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_PARENT_ID));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION));
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_VERAPDF)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK));
  }
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION));
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION));
  }
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION));
  }
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_REPLICATION));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_NOTIFICATION_WHEN_FAILED));
  return pluginParameters;
}","@Override public List<PluginParameter> getParameters(){
  loadMap();
  ArrayList<PluginParameter> pluginParameters=new ArrayList<>();
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_PARENT_ID));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION));
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_VERAPDF)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK));
  }
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION));
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION));
  }
  if (!deactivatedPlugins.contains(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE)) {
    pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION));
  }
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION));
  pluginParameters.add(getPluginParameter(RodaConstants.PLUGIN_PARAMS_NOTIFICATION_WHEN_FAILED));
  return pluginParameters;
}",0.9767318878900052
188286,"private int calculateEfectiveTotalSteps(){
  List<String> parameterIdsToIgnore=Arrays.asList(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT);
  int effectiveTotalSteps=getTotalSteps();
  boolean tikaParameters=false;
  boolean dontDoFeatureExtraction=false;
  boolean dontDoFulltext=false;
  for (  PluginParameter pluginParameter : getParameters()) {
    if (pluginParameter.getType() == PluginParameterType.BOOLEAN && !parameterIdsToIgnore.contains(pluginParameter.getId()) && !PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
      effectiveTotalSteps--;
    }
    if (pluginParameter.getId().equals(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION)) {
      tikaParameters=true;
      if (!PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
        dontDoFeatureExtraction=true;
      }
    }
    if (pluginParameter.getId().equals(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION)) {
      tikaParameters=true;
      if (!PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
        dontDoFulltext=true;
      }
    }
  }
  if (tikaParameters && (dontDoFeatureExtraction && dontDoFulltext)) {
    effectiveTotalSteps--;
  }
  return effectiveTotalSteps;
}","private int calculateEfectiveTotalSteps(){
  List<String> parameterIdsToIgnore=Arrays.asList(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT,RodaConstants.PLUGIN_PARAMS_NOTIFICATION_WHEN_FAILED);
  int effectiveTotalSteps=getTotalSteps();
  boolean tikaParameters=false;
  boolean dontDoFeatureExtraction=false;
  boolean dontDoFulltext=false;
  for (  PluginParameter pluginParameter : getParameters()) {
    if (pluginParameter.getType() == PluginParameterType.BOOLEAN && !parameterIdsToIgnore.contains(pluginParameter.getId()) && !PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
      effectiveTotalSteps--;
    }
    if (pluginParameter.getId().equals(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION)) {
      tikaParameters=true;
      if (!PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
        dontDoFeatureExtraction=true;
      }
    }
    if (pluginParameter.getId().equals(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION)) {
      tikaParameters=true;
      if (!PluginHelper.verifyIfStepShouldBePerformed(this,pluginParameter)) {
        dontDoFulltext=true;
      }
    }
  }
  if (tikaParameters && (dontDoFeatureExtraction && dontDoFulltext)) {
    effectiveTotalSteps--;
  }
  return effectiveTotalSteps;
}",0.9808456812432236
188287,"@Override public void aipMoved(AIP aip,String oldParentId,String newParentId){
  try {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    List<String> topAncestors=SolrUtils.getAncestors(newParentId,model);
    SolrInputDocument aipDoc=SolrUtils.updateAIPParentId(aip.getId(),newParentId,topAncestors);
    index.add(RodaConstants.INDEX_AIP,aipDoc);
    updateRepresentationAndFileAncestors(aip,topAncestors);
    LOGGER.debug(""String_Node_Str"",aip.getId());
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
    List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_PARENT_ID,RodaConstants.AIP_HAS_REPRESENTATIONS);
    SolrUtils.execute(index,IndexedAIP.class,filter,aipFields,new IndexRunnable<IndexedAIP>(){
      @Override public void run(      IndexedAIP item) throws RequestNotValidException, GenericException, AuthorizationDeniedException {
        SolrInputDocument descendantDoc;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId(),item.getId());
          AIP aip=model.retrieveAIP(item.getId());
          List<String> ancestors=SolrUtils.getAncestors(item.getParentID(),model);
          descendantDoc=SolrUtils.updateAIPAncestors(item.getId(),ancestors);
          index.add(RodaConstants.INDEX_AIP,descendantDoc);
          if (item.getHasRepresentations()) {
            updateRepresentationAndFileAncestors(aip,ancestors);
          }
        }
 catch (        SolrServerException|IOException|NotFoundException e) {
          LOGGER.error(""String_Node_Str"",aip.getId(),oldParentId,newParentId,e);
        }
      }
    }
,e -> LOGGER.error(""String_Node_Str"",e));
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException|SolrServerException|IOException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",aip.getId(),oldParentId,newParentId,e);
  }
}","@Override public void aipMoved(AIP aip,String oldParentId,String newParentId){
  try {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    List<String> topAncestors=SolrUtils.getAncestors(newParentId,model);
    SolrInputDocument aipDoc=SolrUtils.updateAIPParentId(aip.getId(),newParentId,topAncestors);
    index.add(RodaConstants.INDEX_AIP,aipDoc);
    updateRepresentationAndFileAncestors(aip,topAncestors);
    LOGGER.debug(""String_Node_Str"",aip.getId());
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
    List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_PARENT_ID,RodaConstants.AIP_HAS_REPRESENTATIONS);
    boolean justActive=false;
    boolean removeDuplicates=true;
    List<String> aipIds=new ArrayList<>();
    new IterableIndexResult<>(index,IndexedAIP.class,filter,Sorter.NONE,Facets.NONE,null,justActive,removeDuplicates,aipFields).forEach(e -> aipIds.add(e.getUUID()));
    for (    String aipId : aipIds) {
      IndexedAIP item=SolrUtils.retrieve(index,IndexedAIP.class,aipId,aipFields);
      SolrInputDocument descendantDoc;
      try {
        LOGGER.debug(""String_Node_Str"",aip.getId(),item.getId());
        AIP aipModel=model.retrieveAIP(item.getId());
        List<String> ancestors=SolrUtils.getAncestors(item.getParentID(),model);
        descendantDoc=SolrUtils.updateAIPAncestors(item.getId(),ancestors);
        index.add(RodaConstants.INDEX_AIP,descendantDoc);
        if (item.getHasRepresentations()) {
          updateRepresentationAndFileAncestors(aipModel,ancestors);
        }
      }
 catch (      SolrServerException|IOException|NotFoundException e) {
        LOGGER.error(""String_Node_Str"",aip.getId(),oldParentId,newParentId,e);
      }
    }
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException|SolrServerException|IOException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",aip.getId(),oldParentId,newParentId,e);
  }
}",0.7197815835194837
188288,"private static void moveChildrenAIPsAndDelete(IndexService index,ModelService model,String aipId,String newParentId,Optional<String> searchScope,String updatedBy) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  Filter parentFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,aipId),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
  searchScope.ifPresent(id -> parentFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
  IterableIndexResult<IndexedAIP> aips=index.findAll(IndexedAIP.class,parentFilter,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_ID));
  for (  IndexedAIP child : aips) {
    try {
      model.moveAIP(child.getId(),newParentId,updatedBy);
    }
 catch (    NotFoundException e) {
      LOGGER.debug(""String_Node_Str"",e);
    }
  }
  try {
    model.deleteAIP(aipId);
  }
 catch (  NotFoundException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}","private static void moveChildrenAIPsAndDelete(IndexService index,ModelService model,String aipId,String newParentId,Optional<String> searchScope,String updatedBy) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  Filter parentFilter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,aipId),new SimpleFilterParameter(RodaConstants.AIP_GHOST,Boolean.FALSE.toString()));
  searchScope.ifPresent(id -> parentFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id)));
  List<String> aipIds=new ArrayList<>();
  index.findAll(IndexedAIP.class,parentFilter,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_ID)).forEach(e -> aipIds.add(e.getUUID()));
  for (  String id : aipIds) {
    try {
      model.moveAIP(id,newParentId,updatedBy);
    }
 catch (    NotFoundException e) {
      LOGGER.debug(""String_Node_Str"",e);
    }
  }
  try {
    model.deleteAIP(aipId);
  }
 catch (  NotFoundException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}",0.9307923771313942
188289,"private void processTransferredResource(ModelService model,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,List<TransferredResource> resources){
  if (destinationId == null) {
    destinationId=""String_Node_Str"";
  }
  try {
    Map<String,String> moveResult=RodaCoreFactory.getTransferredResourcesScanner().moveTransferredResource(resources,destinationId,false,true);
    for (    TransferredResource resource : resources) {
      if (!moveResult.containsKey(resource.getId())) {
        addFailedReport(model,report,jobPluginInfo,job,resource.getId());
      }
 else {
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
    }
  }
 catch (  GenericException|IsStillUpdatingException|NotFoundException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
    for (    TransferredResource resource : resources) {
      addFailedReport(model,report,jobPluginInfo,job,resource.getId());
    }
  }
}","private void processTransferredResource(ModelService model,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,List<TransferredResource> resources){
  if (destinationId == null) {
    destinationId=""String_Node_Str"";
  }
  try {
    Map<String,String> moveResult=RodaCoreFactory.getTransferredResourcesScanner().moveTransferredResource(resources,destinationId,false,true);
    for (    TransferredResource resource : resources) {
      if (!moveResult.containsKey(resource.getUUID())) {
        addFailedReport(model,report,jobPluginInfo,job,resource.getId());
      }
 else {
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
    }
  }
 catch (  GenericException|IsStillUpdatingException|NotFoundException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
    for (    TransferredResource resource : resources) {
      addFailedReport(model,report,jobPluginInfo,job,resource.getId());
    }
  }
}",0.9967776584317938
188290,"private void reindexActionLogs(IndexService index,ModelService model,Report report,Job job,SimpleJobPluginInfo jobPluginInfo){
  report.setPluginState(PluginState.SUCCESS);
  int i=0;
  for (  OptionalWithCause<LogEntry> logEntry : model.listLogEntries(dontReindexOlderThanXDays)) {
    jobPluginInfo.incrementObjectsCount();
    i++;
    if (logEntry.isPresent()) {
      index.reindexActionLog(logEntry.get());
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      Report reportItem=PluginHelper.initPluginReportItem(this,""String_Node_Str"",LogEntry.class);
      StringBuilder message=new StringBuilder(""String_Node_Str"");
      if (logEntry.getCause() instanceof LogEntryJsonParseException) {
        LogEntryJsonParseException cause=(LogEntryJsonParseException)logEntry.getCause();
        message.append(""String_Node_Str"" + cause.getFilename() + ""String_Node_Str""+ cause.getLine());
        if (cause.getCause() != null) {
          message.append(""String_Node_Str"" + cause.getCause().getCause().getClass().getSimpleName() + ""String_Node_Str""+ cause.getCause().getCause().getMessage());
        }
      }
 else {
        RODAException cause=logEntry.getCause();
        message.append(""String_Node_Str"" + cause.getClass().getSimpleName() + ""String_Node_Str""+ cause.getMessage());
        if (cause.getCause() != null) {
          message.append(""String_Node_Str"" + cause.getCause().getClass().getSimpleName() + ""String_Node_Str""+ cause.getCause().getMessage());
        }
      }
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(message.toString());
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    }
  }
}","private void reindexActionLogs(IndexService index,ModelService model,Report report,Job job,SimpleJobPluginInfo jobPluginInfo){
  report.setPluginState(PluginState.SUCCESS);
  for (  OptionalWithCause<LogEntry> logEntry : model.listLogEntries(dontReindexOlderThanXDays)) {
    jobPluginInfo.incrementObjectsCount();
    if (logEntry.isPresent()) {
      index.reindexActionLog(logEntry.get());
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      String id;
      StringBuilder message=new StringBuilder(""String_Node_Str"");
      if (logEntry.getCause() instanceof LogEntryJsonParseException) {
        LogEntryJsonParseException cause=(LogEntryJsonParseException)logEntry.getCause();
        id=IdUtils.createUUID(cause.getFilename() + cause.getLine());
        message.append(""String_Node_Str"" + cause.getFilename() + ""String_Node_Str""+ cause.getLine());
        if (cause.getCause() != null) {
          message.append(""String_Node_Str"" + cause.getCause().getCause().getClass().getSimpleName() + ""String_Node_Str""+ cause.getCause().getCause().getMessage());
        }
      }
 else {
        id=IdUtils.createUUID();
        RODAException cause=logEntry.getCause();
        message.append(""String_Node_Str"" + cause.getClass().getSimpleName() + ""String_Node_Str""+ cause.getMessage());
        if (cause.getCause() != null) {
          message.append(""String_Node_Str"" + cause.getCause().getClass().getSimpleName() + ""String_Node_Str""+ cause.getCause().getMessage());
        }
      }
      Report reportItem=PluginHelper.initPluginReportItem(this,id,LogEntry.class);
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(message.toString());
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,false,job);
    }
  }
}",0.7217510259917921
188291,"/** 
 */
public void logout(){
  String currentURL=Window.Location.getHref().replaceAll(""String_Node_Str"",""String_Node_Str"");
  String locale=LocaleInfo.getCurrentLocale().getLocaleName();
  String moduleBaseURL=GWT.getModuleBaseURL();
  moduleBaseURL=moduleBaseURL.substring(0,moduleBaseURL.length() - 2).substring(0,moduleBaseURL.indexOf('/'));
  Window.open(moduleBaseURL + ""String_Node_Str"" + currentURL+ ""String_Node_Str""+ locale,""String_Node_Str"",""String_Node_Str"");
  getUserRequest.clearCache();
}","public void logout(){
  String currentURL=Window.Location.getHref().replaceAll(""String_Node_Str"",""String_Node_Str"");
  String locale=LocaleInfo.getCurrentLocale().getLocaleName();
  String moduleBaseURL=GWT.getModuleBaseURL();
  moduleBaseURL=moduleBaseURL.substring(0,moduleBaseURL.length() - 2).substring(0,moduleBaseURL.indexOf('/'));
  Window.open(moduleBaseURL + ""String_Node_Str"" + currentURL+ ""String_Node_Str""+ locale,""String_Node_Str"",""String_Node_Str"");
  getUserRequest.clearCache();
}",0.991008991008991
188292,"private void handleTerminated(Object msg){
  LOGGER.trace(""String_Node_Str"",""String_Node_Str"",Terminated.class.getSimpleName());
  boolean allChildrenAreDead=true;
  if (stopping) {
    for (    ActorRef child : getContext().getChildren()) {
      allChildrenAreDead=false;
      break;
    }
    if (allChildrenAreDead) {
      getSelf().tell(new Messages.JobStateUpdated(plugin,JOB_STATE.STOPPED),getSelf());
    }
  }
  LOGGER.trace(""String_Node_Str"",""String_Node_Str"",Terminated.class.getSimpleName(),stopping,allChildrenAreDead);
}","private void handleTerminated(Object msg){
  LOGGER.trace(""String_Node_Str"",""String_Node_Str"",Terminated.class.getSimpleName());
  boolean allChildrenAreDead=true;
  if (stopping) {
    allChildrenAreDead=Iterables.isEmpty(getContext().getChildren());
    if (allChildrenAreDead) {
      getSelf().tell(new Messages.JobStateUpdated(plugin,JOB_STATE.STOPPED),getSelf());
    }
  }
  LOGGER.trace(""String_Node_Str"",""String_Node_Str"",Terminated.class.getSimpleName(),stopping,allChildrenAreDead);
}",0.8903976721629486
188293,"public static DescriptiveMetadataEditBundle retrieveDescriptiveMetadataEditBundle(User user,IndexedAIP aip,IndexedRepresentation representation,String descriptiveMetadataId,String type,String version,final Locale locale) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    String representationId=representation != null ? representation.getId() : null;
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),representationId,descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.retrieveSupportedMetadata(user,aip,representation,locale);
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version)) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      if (values != null) {
        for (        MetadataValue mv : values) {
          String xpathRaw=mv.get(""String_Node_Str"");
          if (xpathRaw != null && xpathRaw.length() > 0) {
            String[] xpaths=xpathRaw.split(""String_Node_Str"");
            String value;
            List<String> allValues=new ArrayList<>();
            for (            String xpath : xpaths) {
              allValues.addAll(ServerTools.applyXpath(xml,xpath));
            }
            boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
            if (allEqual && !allValues.isEmpty()) {
              value=allValues.get(0);
            }
 else {
              value=String.join(""String_Node_Str"",allValues);
            }
            mv.set(""String_Node_Str"",value.trim());
          }
        }
        metadataTypeBundle.setValues(values);
        String templateWithValues=retrieveDescriptiveMetadataPreview(metadataTypeBundle);
        try {
          XMLUnit.setIgnoreComments(true);
          XMLUnit.setIgnoreWhitespace(true);
          XMLUnit.setIgnoreAttributeOrder(true);
          XMLUnit.setCompareUnmatched(false);
          Diff xmlDiff=new Diff(xml,templateWithValues);
          xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
          similar=xmlDiff.identical() || xmlDiff.similar();
        }
 catch (        SAXException e) {
          LOGGER.warn(""String_Node_Str"",e);
        }
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}","public static DescriptiveMetadataEditBundle retrieveDescriptiveMetadataEditBundle(User user,IndexedAIP aip,IndexedRepresentation representation,String descriptiveMetadataId,String type,String version,final Locale locale) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    String representationId=representation != null ? representation.getId() : null;
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),representationId,descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.retrieveSupportedMetadata(user,aip,representation,locale);
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if ((typeBundle.getVersion() == null && version == null) || (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version))) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      if (values != null) {
        for (        MetadataValue mv : values) {
          String xpathRaw=mv.get(""String_Node_Str"");
          if (xpathRaw != null && xpathRaw.length() > 0) {
            String[] xpaths=xpathRaw.split(""String_Node_Str"");
            String value;
            List<String> allValues=new ArrayList<>();
            for (            String xpath : xpaths) {
              allValues.addAll(ServerTools.applyXpath(xml,xpath));
            }
            boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
            if (allEqual && !allValues.isEmpty()) {
              value=allValues.get(0);
            }
 else {
              value=String.join(""String_Node_Str"",allValues);
            }
            mv.set(""String_Node_Str"",value.trim());
          }
        }
        metadataTypeBundle.setValues(values);
        String templateWithValues=retrieveDescriptiveMetadataPreview(metadataTypeBundle);
        try {
          XMLUnit.setIgnoreComments(true);
          XMLUnit.setIgnoreWhitespace(true);
          XMLUnit.setIgnoreAttributeOrder(true);
          XMLUnit.setCompareUnmatched(false);
          Diff xmlDiff=new Diff(xml,templateWithValues);
          xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
          similar=xmlDiff.identical() || xmlDiff.similar();
        }
 catch (        SAXException e) {
          LOGGER.warn(""String_Node_Str"",e);
        }
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}",0.9912676904546824
188294,"@Override public void onChange(ChangeEvent changeEvent){
  String typeString=null;
  String version=""String_Node_Str"";
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      Set<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new TreeSet<>();
        for (        MetadataValue mv : bundle.getValues())         newValues.add(mv.copy());
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}","@Override public void onChange(ChangeEvent changeEvent){
  String typeString=null;
  String version=null;
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      Set<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new TreeSet<>();
        for (        MetadataValue mv : bundle.getValues())         newValues.add(mv.copy());
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}",0.9924215084806928
188295,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  Set<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new TreeSet<>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.copy());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  metadataXML.setTitle(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null;
      String version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          Set<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new TreeSet<>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.copy());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  Set<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new TreeSet<>();
    for (    MetadataValue mv : bundle.getValues()) {
      newValues.add(mv.copy());
    }
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  metadataXML.setTitle(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null;
      String version=null;
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          Set<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new TreeSet<>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.copy());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9968556648747338
188296,"public static void create(FlowPanel panel,Set<MetadataValue> bundle,boolean addStyle){
  for (  MetadataValue mv : bundle) {
    boolean mandatory=(mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equalsIgnoreCase(mv.get(""String_Node_Str""))) ? true : false;
    if (mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(mv.get(""String_Node_Str"")))     continue;
    FlowPanel layout=new FlowPanel();
    if (addStyle) {
      layout.addStyleName(""String_Node_Str"");
    }
    String controlType=mv.get(""String_Node_Str"");
    if (controlType == null) {
      addTextField(panel,layout,mv,mandatory);
    }
 else {
switch (controlType) {
case ""String_Node_Str"":
        addTextField(panel,layout,mv,mandatory);
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    addTextArea(panel,layout,mv,mandatory);
  break;
case ""String_Node_Str"":
addList(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
addDatePicker(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
layout.addStyleName(""String_Node_Str"");
addSeparator(panel,layout,mv);
break;
default :
addTextField(panel,layout,mv,mandatory);
break;
}
}
}
}","public static void create(FlowPanel panel,Set<MetadataValue> bundle,boolean addStyle){
  for (  MetadataValue mv : bundle) {
    boolean mandatory=(mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equalsIgnoreCase(mv.get(""String_Node_Str""))) ? true : false;
    if (mv.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(mv.get(""String_Node_Str""))) {
      continue;
    }
    FlowPanel layout=new FlowPanel();
    if (addStyle) {
      layout.addStyleName(""String_Node_Str"");
    }
    String controlType=mv.get(""String_Node_Str"");
    if (controlType == null) {
      addTextField(panel,layout,mv,mandatory);
    }
 else {
switch (controlType) {
case ""String_Node_Str"":
        addTextField(panel,layout,mv,mandatory);
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    addTextArea(panel,layout,mv,mandatory);
  break;
case ""String_Node_Str"":
addList(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
addDatePicker(panel,layout,mv,mandatory);
break;
case ""String_Node_Str"":
layout.addStyleName(""String_Node_Str"");
addSeparator(panel,layout,mv);
break;
default :
addTextField(panel,layout,mv,mandatory);
break;
}
}
}
}",0.9846678023850084
188297,"public LongRangeFilterParameter(String name,Long fromValue,Long toValue){
  super(name,fromValue,toValue);
}","public LongRangeFilterParameter(String name,String fromValue,String toValue){
  super(name,parseInput(fromValue),parseInput(toValue));
}",0.8524590163934426
188298,"public FilterParameter getFilter(){
  FilterParameter filterParameter=null;
  String type=searchField.getType();
  List<String> searchFields=searchField.getSearchFields();
  if (searchFields != null && !searchFields.isEmpty()) {
    String field=searchFields.get(0);
    if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE) && dateValid(inputDateBox)) {
      filterParameter=new SimpleFilterParameter(field,inputDateBox.getValue().toString());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE_INTERVAL) && dateIntervalValid(inputDateBoxFrom,inputDateBoxTo) && searchFields.size() >= 2) {
      String fieldTo=searchField.getSearchFields().get(1);
      filterParameter=new DateIntervalFilterParameter(field,fieldTo,inputDateBoxFrom.getValue(),inputDateBoxTo.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE_INTERVAL) && dateIntervalValid(inputDateBoxFrom,inputDateBoxTo)) {
      filterParameter=new DateIntervalFilterParameter(field,field,inputDateBoxFrom.getValue(),inputDateBoxTo.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_NUMERIC) && valid(inputNumeric)) {
      filterParameter=new BasicSearchFilterParameter(field,inputNumeric.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_NUMERIC_INTERVAL) && intervalValid(inputNumericFrom,inputNumericTo)) {
      filterParameter=new LongRangeFilterParameter(field,Long.valueOf(inputNumericFrom.getValue()),Long.valueOf(inputNumericTo.getValue()));
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_STORAGE) && intervalValid(inputStorageSizeFrom,inputStorageSizeTo)) {
      filterParameter=new LongRangeFilterParameter(field,Humanize.parseFileSize(inputStorageSizeFrom.getValue(),inputStorageSizeList.getSelectedValue()),Humanize.parseFileSize(inputStorageSizeTo.getValue(),inputStorageSizeList.getSelectedValue()));
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_BOOLEAN) && valid(inputCheckBox)) {
      filterParameter=new SimpleFilterParameter(field,Boolean.toString(inputCheckBox.getValue()));
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_SUGGEST) && valid(inputSearchSuggestBox)) {
      filterParameter=new SimpleFilterParameter(inputSearchSuggestBox.isAllowPartial() ? field + RodaConstants.INDEX_SEARCH_SUFFIX : field,inputSearchSuggestBox.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_CONTROLLED)) {
      filterParameter=new SimpleFilterParameter(field,inputControlled.getSelectedValue());
    }
 else     if (valid(inputText)) {
      filterParameter=new BasicSearchFilterParameter(field,inputText.getValue());
    }
  }
  return filterParameter;
}","public FilterParameter getFilter(){
  FilterParameter filterParameter=null;
  String type=searchField.getType();
  List<String> searchFields=searchField.getSearchFields();
  if (searchFields != null && !searchFields.isEmpty()) {
    String field=searchFields.get(0);
    if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE) && dateValid(inputDateBox)) {
      filterParameter=new SimpleFilterParameter(field,inputDateBox.getValue().toString());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE_INTERVAL) && dateIntervalValid(inputDateBoxFrom,inputDateBoxTo) && searchFields.size() >= 2) {
      String fieldTo=searchField.getSearchFields().get(1);
      filterParameter=new DateIntervalFilterParameter(field,fieldTo,inputDateBoxFrom.getValue(),inputDateBoxTo.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_DATE_INTERVAL) && dateIntervalValid(inputDateBoxFrom,inputDateBoxTo)) {
      filterParameter=new DateIntervalFilterParameter(field,field,inputDateBoxFrom.getValue(),inputDateBoxTo.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_NUMERIC) && valid(inputNumeric)) {
      filterParameter=new BasicSearchFilterParameter(field,inputNumeric.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_NUMERIC_INTERVAL) && intervalValid(inputNumericFrom,inputNumericTo)) {
      filterParameter=new LongRangeFilterParameter(field,inputNumericFrom.getValue(),inputNumericTo.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_STORAGE) && intervalValid(inputStorageSizeFrom,inputStorageSizeTo)) {
      filterParameter=new LongRangeFilterParameter(field,Humanize.parseFileSize(inputStorageSizeFrom.getValue(),inputStorageSizeList.getSelectedValue()),Humanize.parseFileSize(inputStorageSizeTo.getValue(),inputStorageSizeList.getSelectedValue()));
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_BOOLEAN) && valid(inputCheckBox)) {
      filterParameter=new SimpleFilterParameter(field,Boolean.toString(inputCheckBox.getValue()));
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_SUGGEST) && valid(inputSearchSuggestBox)) {
      filterParameter=new SimpleFilterParameter(inputSearchSuggestBox.isAllowPartial() ? field + RodaConstants.INDEX_SEARCH_SUFFIX : field,inputSearchSuggestBox.getValue());
    }
 else     if (type.equals(RodaConstants.SEARCH_FIELD_TYPE_CONTROLLED)) {
      filterParameter=new SimpleFilterParameter(field,inputControlled.getSelectedValue());
    }
 else     if (valid(inputText)) {
      filterParameter=new BasicSearchFilterParameter(field,inputText.getValue());
    }
  }
  return filterParameter;
}",0.9947955390334572
188299,"private boolean intervalValid(TextBox inputFrom,TextBox inputTo){
  try {
    if (!inputFrom.getValue().isEmpty() && !inputTo.getValue().isEmpty()) {
      return true;
    }
    if (!inputFrom.getValue().isEmpty() || !inputTo.getValue().isEmpty()) {
      return true;
    }
  }
 catch (  Exception e) {
  }
  return false;
}","private boolean intervalValid(TextBox inputFrom,TextBox inputTo){
  try {
    if (!inputFrom.getValue().isEmpty() || !inputTo.getValue().isEmpty()) {
      return true;
    }
  }
 catch (  Exception e) {
  }
  return false;
}",0.809437386569873
188300,"public static void updateMyUser(User user,User modifiedUser,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException {
  ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  if (!user.getId().equals(modifiedUser.getId())) {
    throw new IllegalOperationException(""String_Node_Str"");
  }
  controllerAssistant.checkRoles(user);
  LOG_ENTRY_STATE state=LOG_ENTRY_STATE.SUCCESS;
  try {
    UserManagementHelper.updateMyUser(modifiedUser,password,extra);
  }
 catch (  RODAException e) {
    state=LOG_ENTRY_STATE.FAILURE;
    throw e;
  }
 finally {
    controllerAssistant.registerAction(user,state,RodaConstants.CONTROLLER_USER_PARAM,modifiedUser);
  }
}","public static User updateMyUser(User user,User modifiedUser,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException {
  ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  if (!user.getId().equals(modifiedUser.getId())) {
    throw new IllegalOperationException(""String_Node_Str"");
  }
  controllerAssistant.checkRoles(user);
  LOG_ENTRY_STATE state=LOG_ENTRY_STATE.SUCCESS;
  try {
    return UserManagementHelper.updateMyUser(modifiedUser,password,extra);
  }
 catch (  RODAException e) {
    state=LOG_ENTRY_STATE.FAILURE;
    throw e;
  }
 finally {
    controllerAssistant.registerAction(user,state,RodaConstants.CONTROLLER_USER_PARAM,modifiedUser);
  }
}",0.9904640813731724
188301,"public static User updateMyUser(User user,String password,UserExtraBundle extra) throws GenericException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException {
  user.setExtra(getUserExtra(extra));
  User currentUser=RodaCoreFactory.getModelService().retrieveUserByName(user.getName());
  User resetUser=resetUser(user,currentUser);
  User modifiedUser=RodaCoreFactory.getModelService().updateMyUser(resetUser,password,true);
  RodaCoreFactory.getIndexService().commit(RODAMember.class);
  return modifiedUser;
}","public static User updateMyUser(User modifiedUser,String password,UserExtraBundle extra) throws GenericException, AlreadyExistsException, NotFoundException, AuthorizationDeniedException {
  modifiedUser.setExtra(getUserExtra(extra));
  User currentUser=RodaCoreFactory.getModelService().retrieveUserByName(modifiedUser.getName());
  User resetUser=resetUser(modifiedUser,currentUser);
  User finalModifiedUser=RodaCoreFactory.getModelService().updateMyUser(resetUser,password,true);
  RodaCoreFactory.getIndexService().commit(RODAMember.class);
  return finalModifiedUser;
}",0.9511754068716094
188302,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  if (userDataPanel.isChanged()) {
    if (userDataPanel.isValid()) {
      final User user=userDataPanel.getUser();
      final String password=userDataPanel.getPassword();
      UserManagementService.Util.getInstance().updateMyUser(user,password,userDataPanel.getExtra(),new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
          errorMessage(caught);
        }
        @Override public void onSuccess(        Void result){
          UserLogin.getInstance().updateLoggedUser(user);
          HistoryUtils.newHistory(Welcome.RESOLVER);
        }
      }
);
    }
  }
 else {
    HistoryUtils.newHistory(Welcome.RESOLVER);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  if (userDataPanel.isChanged()) {
    if (userDataPanel.isValid()) {
      final User user=userDataPanel.getUser();
      final String password=userDataPanel.getPassword();
      UserManagementService.Util.getInstance().updateMyUser(user,password,userDataPanel.getExtra(),new AsyncCallback<User>(){
        @Override public void onFailure(        Throwable caught){
          errorMessage(caught);
        }
        @Override public void onSuccess(        User updatedUser){
          UserLogin.getInstance().updateLoggedUser(updatedUser);
          HistoryUtils.newHistory(Welcome.RESOLVER);
        }
      }
);
    }
  }
 else {
    HistoryUtils.newHistory(Welcome.RESOLVER);
  }
}",0.9719251336898396
188303,"@Override public void onSuccess(Void result){
  UserLogin.getInstance().updateLoggedUser(user);
  HistoryUtils.newHistory(Welcome.RESOLVER);
}","@Override public void onSuccess(User updatedUser){
  UserLogin.getInstance().updateLoggedUser(updatedUser);
  HistoryUtils.newHistory(Welcome.RESOLVER);
}",0.8986486486486487
188304,"/** 
 * Modify the authenticated user
 * @param user the modified user
 * @param password the user password if modified, or null if it remains the same
 * @throws AuthorizationDeniedException
 * @throws NotFoundException
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws IllegalOperationException
 */
public void updateMyUser(User user,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException ;","/** 
 * Modify the authenticated user
 * @param user the modified user
 * @param password the user password if modified, or null if it remains the same
 * @throws AuthorizationDeniedException
 * @throws NotFoundException
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws IllegalOperationException
 */
public User updateMyUser(User user,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException ;",0.9923518164435946
188305,"/** 
 * Modify the authenticated user
 * @param user the modified user
 * @param password the user password if modified, or null if it remains the same
 * @throws AuthorizationDeniedException
 * @throws NotFoundException
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws IllegalOperationException
 */
public void updateMyUser(User user,String password,UserExtraBundle extra,AsyncCallback<Void> callback);","/** 
 * Modify the authenticated user
 * @param user the modified user
 * @param password the user password if modified, or null if it remains the same
 * @throws AuthorizationDeniedException
 * @throws NotFoundException
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws IllegalOperationException
 */
public void updateMyUser(User user,String password,UserExtraBundle extra,AsyncCallback<User> callback);",0.990632318501171
188306,"@Override public void updateMyUser(User modifiedUser,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException {
  User user=UserUtility.getUser(getThreadLocalRequest());
  UserManagement.updateMyUser(user,modifiedUser,password,extra);
}","@Override public User updateMyUser(User modifiedUser,String password,UserExtraBundle extra) throws AuthorizationDeniedException, NotFoundException, AlreadyExistsException, GenericException, IllegalOperationException {
  HttpServletRequest request=getThreadLocalRequest();
  User user=UserUtility.getUser(request);
  User finalModifiedUser=UserManagement.updateMyUser(user,modifiedUser,password,extra);
  UserUtility.setUser(finalModifiedUser,request);
  return finalModifiedUser;
}",0.3110571081409477
188307,"public boolean isSmall(){
  boolean small=editPassword.getValue().length() < 6;
  updateAfterValidation(!small);
  return small;
}","public boolean isSmall(){
  boolean small;
  if (buttonMode && StringUtils.isBlank(editPassword.getValue())) {
    small=false;
  }
 else {
    small=editPassword.getValue().length() < 6;
  }
  updateAfterValidation(!small);
  return small;
}",0.6989247311827957
188308,"/** 
 * Is the requested path in the list of exclusions?
 * @param request the request.
 * @return <code>true</code> if it is excluded and <code>false</code>otherwise.
 */
private boolean isRequestUrlExcluded(final HttpServletRequest request){
  for (  String exclusion : this.exclusions) {
    if (request.getPathInfo().matches(exclusion)) {
      return true;
    }
  }
  return false;
}","/** 
 * Is the requested path in the list of exclusions?
 * @param request the request.
 * @return <code>true</code> if it is excluded and <code>false</code>otherwise.
 */
private boolean isRequestUrlExcluded(final HttpServletRequest request){
  for (  String exclusion : this.exclusions) {
    String pathInfo=request.getPathInfo();
    if (pathInfo != null && exclusion != null && pathInfo.matches(exclusion)) {
      return true;
    }
  }
  return false;
}",0.9069493521790342
188309,"private static IndexedPreservationEvent solrDocumentToIndexedPreservationEvent(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.INDEX_UUID),null);
  final String aipId=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_AIP_ID),null);
  final String representationUUID=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID),null);
  final String fileUUID=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_FILE_UUID),null);
  IndexedPreservationEvent ipe=new IndexedPreservationEvent();
  ipe.setId(id);
  ipe.setAipID(aipId);
  ipe.setRepresentationUUID(representationUUID);
  ipe.setFileUUID(fileUUID);
  String objectClass=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS),null);
  if (StringUtils.isNotBlank(objectClass)) {
    ipe.setObjectClass(PreservationMetadataEventClass.valueOf(objectClass.toUpperCase()));
  }
  final Date eventDateTime=objectToDate(doc.get(RodaConstants.PRESERVATION_EVENT_DATETIME));
  final String eventDetail=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_DETAIL),null);
  final String eventType=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_TYPE),null);
  final String eventOutcome=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_OUTCOME),null);
  final List<String> agents=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_AGENT_IDENTIFIER));
  final List<String> outcomes=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_OUTCOME_OBJECT_IDENTIFIER));
  final List<String> sources=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_SOURCE_OBJECT_IDENTIFIER));
  ipe.setEventDateTime(eventDateTime);
  ipe.setEventDetail(eventDetail);
  ipe.setEventType(eventType);
  ipe.setEventOutcome(eventOutcome);
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String source : sources) {
      ids.add(JsonUtils.getObjectFromJson(source,LinkingIdentifier.class));
    }
    ipe.setSourcesObjectIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String outcome : outcomes) {
      ids.add(JsonUtils.getObjectFromJson(outcome,LinkingIdentifier.class));
    }
    ipe.setOutcomeObjectIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String agent : agents) {
      ids.add(JsonUtils.getObjectFromJson(agent,LinkingIdentifier.class));
    }
    ipe.setLinkingAgentIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return ipe;
}","private static IndexedPreservationEvent solrDocumentToIndexedPreservationEvent(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.INDEX_UUID),null);
  final String aipId=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_AIP_ID),null);
  final String representationUUID=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID),null);
  final String fileUUID=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_FILE_UUID),null);
  IndexedPreservationEvent ipe=new IndexedPreservationEvent();
  ipe.setId(id);
  ipe.setAipID(aipId);
  ipe.setRepresentationUUID(representationUUID);
  ipe.setFileUUID(fileUUID);
  String objectClass=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS),null);
  if (StringUtils.isNotBlank(objectClass)) {
    ipe.setObjectClass(PreservationMetadataEventClass.valueOf(objectClass.toUpperCase()));
  }
  final Date eventDateTime=objectToDate(doc.get(RodaConstants.PRESERVATION_EVENT_DATETIME));
  final String eventDetail=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_DETAIL),""String_Node_Str"");
  final String eventType=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_TYPE),""String_Node_Str"");
  final String eventOutcome=objectToString(doc.get(RodaConstants.PRESERVATION_EVENT_OUTCOME),""String_Node_Str"");
  final List<String> agents=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_AGENT_IDENTIFIER));
  final List<String> outcomes=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_OUTCOME_OBJECT_IDENTIFIER));
  final List<String> sources=objectToListString(doc.get(RodaConstants.PRESERVATION_EVENT_LINKING_SOURCE_OBJECT_IDENTIFIER));
  ipe.setEventDateTime(eventDateTime);
  ipe.setEventDetail(eventDetail);
  ipe.setEventType(eventType);
  ipe.setEventOutcome(eventOutcome);
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String source : sources) {
      ids.add(JsonUtils.getObjectFromJson(source,LinkingIdentifier.class));
    }
    ipe.setSourcesObjectIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String outcome : outcomes) {
      ids.add(JsonUtils.getObjectFromJson(outcome,LinkingIdentifier.class));
    }
    ipe.setOutcomeObjectIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    List<LinkingIdentifier> ids=new ArrayList<>();
    for (    String agent : agents) {
      ids.add(JsonUtils.getObjectFromJson(agent,LinkingIdentifier.class));
    }
    ipe.setLinkingAgentIds(ids);
  }
 catch (  GenericException|RuntimeException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return ipe;
}",0.9885890237275856
188310,"private void processAIP(ModelService model,IndexService index,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,AIP aip){
  Locale locale=PluginHelper.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  PluginState state=PluginState.SUCCESS;
  String outcomeText=""String_Node_Str"";
  if (!aip.getId().equals(destinationId)) {
    LOGGER.debug(""String_Node_Str"",aip.getId(),destinationId);
    try {
      Filter filter=new Filter();
      filter.add(new SimpleFilterParameter(RodaConstants.INDEX_UUID,destinationId));
      filter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()));
      IndexResult<IndexedAIP> result=index.find(IndexedAIP.class,filter,Sorter.NONE,new Sublist(0,1),Arrays.asList(RodaConstants.INDEX_UUID));
      if (result.getResults().isEmpty()) {
        model.moveAIP(aip.getId(),destinationId);
        outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_SUCCESS,aip.getId());
      }
 else {
        state=PluginState.FAILURE;
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
        reportItem.addPluginDetails(""String_Node_Str"").setPluginState(state);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
        outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_FAILURE,aip.getId());
      }
    }
 catch (    GenericException|NotFoundException|RequestNotValidException|AuthorizationDeniedException e) {
      state=PluginState.FAILURE;
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
      reportItem.addPluginDetails(""String_Node_Str"" + e.getMessage()).setPluginState(state);
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_FAILURE,aip.getId());
    }
  }
  jobPluginInfo.incrementObjectsProcessed(state);
  model.createUpdateAIPEvent(aip.getId(),null,null,null,PreservationEventType.UPDATE,eventDescription,state,outcomeText,details,job.getUsername(),true);
}","private void processAIP(ModelService model,IndexService index,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,AIP aip){
  Locale locale=PluginHelper.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  PluginState state=PluginState.SUCCESS;
  String outcomeText=""String_Node_Str"";
  if (!aip.getId().equals(destinationId)) {
    LOGGER.debug(""String_Node_Str"",aip.getId(),destinationId);
    try {
      IndexResult<IndexedAIP> result=new IndexResult<>();
      if (destinationId != null) {
        Filter filter=new Filter();
        filter.add(new SimpleFilterParameter(RodaConstants.INDEX_UUID,destinationId));
        filter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()));
        result=index.find(IndexedAIP.class,filter,Sorter.NONE,new Sublist(0,1),Arrays.asList(RodaConstants.INDEX_UUID));
      }
      if (destinationId == null || result.getResults().isEmpty()) {
        model.moveAIP(aip.getId(),destinationId);
        outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_SUCCESS,aip.getId());
      }
 else {
        state=PluginState.FAILURE;
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
        reportItem.addPluginDetails(""String_Node_Str"").setPluginState(state);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
        outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_FAILURE,aip.getId());
      }
    }
 catch (    GenericException|NotFoundException|RequestNotValidException|AuthorizationDeniedException e) {
      state=PluginState.FAILURE;
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
      reportItem.addPluginDetails(""String_Node_Str"" + e.getMessage()).setPluginState(state);
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_MOVE_AIP_FAILURE,aip.getId());
    }
  }
  jobPluginInfo.incrementObjectsProcessed(state);
  model.createUpdateAIPEvent(aip.getId(),null,null,null,PreservationEventType.UPDATE,eventDescription,state,outcomeText,details,job.getUsername(),true);
}",0.965953731994762
188311,"private boolean doPluginExecute(String fileFormat,String filePronom,String fileMimetype,List<String> applicableTo,List<String> convertableTo,Map<String,List<String>> pronomToExtension,Map<String,List<String>> mimetypeToExtension){
  String lowerCaseFileFormat=fileFormat == null ? null : fileFormat.toLowerCase();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",lowerCaseFileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension);
  }
  boolean format=getInputFormat().isEmpty() || lowerCaseFileFormat.equalsIgnoreCase(getInputFormat());
  boolean applicable=applicableTo.isEmpty() || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype))|| (applicableTo.contains(lowerCaseFileFormat));
  boolean convertable=convertableTo.isEmpty() || convertableTo.contains(outputFormat.toLowerCase());
  LOGGER.debug(""String_Node_Str"",format,applicable,convertable);
  return format && applicable && convertable;
}","private boolean doPluginExecute(String fileFormat,String filePronom,String fileMimetype,List<String> applicableTo,List<String> convertableTo,Map<String,List<String>> pronomToExtension,Map<String,List<String>> mimetypeToExtension){
  String lowerCaseFileFormat=fileFormat == null ? null : fileFormat.toLowerCase();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",lowerCaseFileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension);
  }
  boolean format=getInputFormat().isEmpty() || getInputFormat().equalsIgnoreCase(lowerCaseFileFormat);
  boolean applicable=applicableTo.isEmpty() || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype))|| (applicableTo.contains(lowerCaseFileFormat));
  boolean convertable=convertableTo.isEmpty() || convertableTo.contains(outputFormat.toLowerCase());
  LOGGER.debug(""String_Node_Str"",format,applicable,convertable);
  return format && applicable && convertable;
}",0.9675881792183032
188312,"@Override protected Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    List<String> newRepresentations=new ArrayList<>();
    String newRepresentationID=null;
    boolean notify=true;
    PluginState reportState=PluginState.SUCCESS;
    ValidationReport validationReport=new ValidationReport();
    boolean hasNonPdfFiles=false;
    List<File> alteredFiles=new ArrayList<>();
    List<File> newFiles=new ArrayList<>();
    List<DIPFile> newDIPFiles=new ArrayList<>();
    List<File> unchangedFiles=new ArrayList<>();
    for (    Representation representation : aip.getRepresentations()) {
      newRepresentationID=IdUtils.createUUID();
      PluginState pluginResultState=PluginState.SUCCESS;
      Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),IdUtils.getRepresentationId(representation),Representation.class,AIPState.ACTIVE);
      if (createDIP) {
        reportItem.setOutcomeObjectClass(DIP.class.getName());
      }
      try {
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            LOGGER.debug(""String_Node_Str"",file);
            if (!file.isDirectory()) {
              IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file),RodaConstants.FILE_FORMAT_FIELDS_TO_RETURN);
              String fileMimetype=ifile.getFileFormat().getMimeType();
              String filePronom=ifile.getFileFormat().getPronom();
              String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
              List<String> applicableTo=getApplicableTo();
              List<String> convertableTo=getConvertableTo();
              Map<String,List<String>> pronomToExtension=getPronomToExtension();
              Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
              if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
                fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
                StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
                DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
                LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId());
                try {
                  Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                  String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                  String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                  ContentPayload payload=new FSPathContentPayload(pluginResult);
                  if (createDIP) {
                    FileLink fileLink=new FileLink(file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
                    List<FileLink> links=new ArrayList<>();
                    links.add(fileLink);
                    DIP dip=new DIP();
                    dip.setId(IdUtils.createUUID());
                    dip.setFileIds(links);
                    dip.setPermissions(aip.getPermissions());
                    dip.setTitle(dipTitle);
                    dip.setDescription(dipDescription);
                    dip.setType(RodaConstants.DIP_TYPE_CONVERSION);
                    dip=model.createDIP(dip,true);
                    newRepresentationID=dip.getId();
                    DIPFile f=model.createDIPFile(newRepresentationID,file.getPath(),newFileId,directAccess.getPath().toFile().length(),payload,notify);
                    newDIPFiles.add(f);
                  }
 else                   if (!newRepresentations.contains(newRepresentationID)) {
                    LOGGER.debug(""String_Node_Str"",newRepresentationID,aip.getId());
                    boolean original=false;
                    newRepresentations.add(newRepresentationID);
                    String newRepresentationType=representation.getType();
                    model.createRepresentation(aip.getId(),newRepresentationID,original,newRepresentationType,notify);
                    reportItem.setOutcomeObjectId(IdUtils.getRepresentationId(representation.getAipId(),newRepresentationID));
                    File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                    newFiles.add(f);
                  }
                  alteredFiles.add(file);
                  IOUtils.closeQuietly(directAccess);
                  Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
                  fileReportItem.setPluginState(pluginResultState).setPluginDetails(result);
                  reportItem.addReport(fileReportItem);
                }
 catch (                CommandException e) {
                  pluginResultState=PluginState.PARTIAL_SUCCESS;
                  reportState=pluginResultState;
                  reportItem.setPluginState(pluginResultState).addPluginDetails(e.getMessage() + ""String_Node_Str"" + e.getOutput()+ ""String_Node_Str"");
                  LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId(),representation.getId(),aip.getId());
                }
              }
 else {
                unchangedFiles.add(file);
                if (ignoreFiles) {
                  validationReport.addIssue(new ValidationIssue(ModelUtils.getFileStoragePath(file).toString()));
                }
 else {
                  pluginResultState=PluginState.FAILURE;
                  reportState=pluginResultState;
                  hasNonPdfFiles=true;
                }
              }
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        reportItem.setPluginState(pluginResultState);
        if (reportState.equals(PluginState.SUCCESS)) {
          if (ignoreFiles && !validationReport.getIssues().isEmpty()) {
            reportItem.setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
          }
        }
        if (hasNonPdfFiles) {
          reportItem.setPluginDetails(""String_Node_Str"");
        }
        if (!alteredFiles.isEmpty() && !createDIP) {
          createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=PluginState.FAILURE;
        reportState=pluginResultState;
        reportItem.setPluginState(pluginResultState).setPluginDetails(e.getMessage());
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
        if (!createDIP) {
          try {
            Representation rep=model.retrieveRepresentation(aip.getId(),newRepresentationID);
            createPremisSkeletonOnRepresentation(model,aip.getId(),rep);
          }
 catch (          RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException|ValidationException|IOException|XmlException e) {
            LOGGER.error(""String_Node_Str"",e.getMessage());
          }
        }
      }
    }
    try {
      LOGGER.debug(""String_Node_Str"",aip.getId());
      boolean notifyEvent=false;
      createEvent(model,index,aip.getId(),null,null,null,outputFormat,reportState,alteredFiles,newFiles,notifyEvent);
      model.notifyAipUpdated(aip.getId());
      jobPluginInfo.incrementObjectsProcessed(reportState);
    }
 catch (    PluginException|RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException e) {
      LOGGER.debug(""String_Node_Str"");
    }
  }
  return report;
}","@Override protected Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    List<String> newRepresentations=new ArrayList<>();
    String newRepresentationID=null;
    boolean notify=true;
    PluginState reportState=PluginState.SUCCESS;
    ValidationReport validationReport=new ValidationReport();
    boolean hasNonPdfFiles=false;
    List<File> alteredFiles=new ArrayList<>();
    List<File> newFiles=new ArrayList<>();
    List<DIPFile> newDIPFiles=new ArrayList<>();
    List<File> unchangedFiles=new ArrayList<>();
    for (    Representation representation : aip.getRepresentations()) {
      newRepresentationID=IdUtils.createUUID();
      PluginState pluginResultState=PluginState.SUCCESS;
      Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),IdUtils.getRepresentationId(representation),Representation.class,AIPState.ACTIVE);
      if (createDIP) {
        reportItem.setOutcomeObjectClass(DIP.class.getName());
      }
      try {
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            LOGGER.debug(""String_Node_Str"",file);
            if (!file.isDirectory()) {
              IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file),RodaConstants.FILE_FORMAT_FIELDS_TO_RETURN);
              String fileMimetype=ifile.getFileFormat().getMimeType();
              String filePronom=ifile.getFileFormat().getPronom();
              String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
              List<String> applicableTo=getApplicableTo();
              List<String> convertableTo=getConvertableTo();
              Map<String,List<String>> pronomToExtension=getPronomToExtension();
              Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
              if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
                fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
                StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
                DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
                LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId());
                try {
                  Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                  String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                  String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                  ContentPayload payload=new FSPathContentPayload(pluginResult);
                  if (createDIP) {
                    FileLink fileLink=new FileLink(file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
                    List<FileLink> links=new ArrayList<>();
                    links.add(fileLink);
                    DIP dip=new DIP();
                    dip.setId(IdUtils.createUUID());
                    dip.setFileIds(links);
                    dip.setPermissions(aip.getPermissions());
                    dip.setTitle(dipTitle);
                    dip.setDescription(dipDescription);
                    dip.setType(RodaConstants.DIP_TYPE_CONVERSION);
                    dip=model.createDIP(dip,true);
                    newRepresentationID=dip.getId();
                    DIPFile f=model.createDIPFile(newRepresentationID,file.getPath(),newFileId,directAccess.getPath().toFile().length(),payload,notify);
                    newDIPFiles.add(f);
                  }
 else {
                    if (!newRepresentations.contains(newRepresentationID)) {
                      LOGGER.debug(""String_Node_Str"",newRepresentationID,aip.getId());
                      boolean original=false;
                      newRepresentations.add(newRepresentationID);
                      String newRepresentationType=representation.getType();
                      model.createRepresentation(aip.getId(),newRepresentationID,original,newRepresentationType,notify);
                      reportItem.setOutcomeObjectId(IdUtils.getRepresentationId(representation.getAipId(),newRepresentationID));
                    }
                    File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                    newFiles.add(f);
                  }
                  alteredFiles.add(file);
                  IOUtils.closeQuietly(directAccess);
                  Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
                  fileReportItem.setPluginState(pluginResultState).setPluginDetails(result);
                  reportItem.addReport(fileReportItem);
                }
 catch (                CommandException e) {
                  pluginResultState=PluginState.PARTIAL_SUCCESS;
                  reportState=pluginResultState;
                  reportItem.setPluginState(pluginResultState).addPluginDetails(e.getMessage() + ""String_Node_Str"" + e.getOutput()+ ""String_Node_Str"");
                  LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId(),representation.getId(),aip.getId());
                }
              }
 else {
                unchangedFiles.add(file);
                if (ignoreFiles) {
                  validationReport.addIssue(new ValidationIssue(ModelUtils.getFileStoragePath(file).toString()));
                }
 else {
                  pluginResultState=PluginState.FAILURE;
                  reportState=pluginResultState;
                  hasNonPdfFiles=true;
                }
              }
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        reportItem.setPluginState(pluginResultState);
        if (reportState.equals(PluginState.SUCCESS)) {
          if (ignoreFiles && !validationReport.getIssues().isEmpty()) {
            reportItem.setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
          }
        }
        if (hasNonPdfFiles) {
          reportItem.setPluginDetails(""String_Node_Str"");
        }
        if (!alteredFiles.isEmpty() && !createDIP) {
          createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=PluginState.FAILURE;
        reportState=pluginResultState;
        reportItem.setPluginState(pluginResultState).setPluginDetails(e.getMessage());
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
        if (!createDIP) {
          try {
            Representation rep=model.retrieveRepresentation(aip.getId(),newRepresentationID);
            createPremisSkeletonOnRepresentation(model,aip.getId(),rep);
          }
 catch (          RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException|ValidationException|IOException|XmlException e) {
            LOGGER.error(""String_Node_Str"",e.getMessage());
          }
        }
      }
    }
    try {
      LOGGER.debug(""String_Node_Str"",aip.getId());
      boolean notifyEvent=false;
      createEvent(model,index,aip.getId(),null,null,null,outputFormat,reportState,alteredFiles,newFiles,notifyEvent);
      model.notifyAipUpdated(aip.getId());
      jobPluginInfo.incrementObjectsProcessed(reportState);
    }
 catch (    PluginException|RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException e) {
      LOGGER.debug(""String_Node_Str"");
    }
  }
  return report;
}",0.9977803738317756
188313,"@Override protected Report executeOnFile(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<File> list,Job job) throws PluginException {
  Map<String,String> changedRepresentationsOnAIPs=new HashMap<>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<>();
  ArrayList<DIPFile> newDIPFiles=new ArrayList<>();
  Report reportItem=null;
  PluginState reportState=PluginState.SUCCESS;
  PluginState pluginResultState=PluginState.SUCCESS;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"",file.getId());
      newRepresentationID=IdUtils.createUUID();
      pluginResultState=PluginState.SUCCESS;
      reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getFileId(file),File.class,AIPState.ACTIVE);
      if (createDIP) {
        reportItem.setOutcomeObjectClass(DIP.class.getName());
      }
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file),RodaConstants.FILE_FORMAT_FIELDS_TO_RETURN);
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        List<String> convertableTo=getConvertableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
          fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"",newRepresentationID,file.getAipId());
            boolean original=false;
            if (createDIP) {
              FileLink fileLink=new FileLink(file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
              List<FileLink> links=new ArrayList<>();
              links.add(fileLink);
              AIP aip=model.retrieveAIP(file.getAipId());
              DIP dip=new DIP();
              dip.setId(IdUtils.createUUID());
              dip.setFileIds(links);
              dip.setPermissions(aip.getPermissions());
              dip.setTitle(dipTitle);
              dip.setDescription(dipDescription);
              dip.setType(RodaConstants.DIP_TYPE_CONVERSION);
              dip=model.createDIP(dip,true);
              newRepresentationID=dip.getId();
            }
 else {
              String newRepresentationType=RodaConstants.REPRESENTATION_TYPE_MIXED;
              model.createRepresentation(file.getAipId(),newRepresentationID,original,newRepresentationType,model.getStorage(),storagePath);
            }
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            if (createDIP) {
              DIPFile f=model.createDIPFile(newRepresentationID,file.getPath(),newFileId,directAccess.getPath().toFile().length(),payload,notify);
              newDIPFiles.add(f);
            }
 else {
              model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
              File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
              newFiles.add(f);
              reportItem.setOutcomeObjectId(IdUtils.getFileId(f));
              changedRepresentationsOnAIPs.put(file.getRepresentationId(),file.getAipId());
            }
            Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
            fileReportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
            reportItem.addReport(fileReportItem);
          }
 catch (          CommandException e) {
            pluginResultState=PluginState.PARTIAL_SUCCESS;
            Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
            fileReportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage() + ""String_Node_Str"" + e.getOutput());
            reportItem.addReport(fileReportItem);
            LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId(),file.getRepresentationId(),file.getAipId());
          }
        }
 else {
          if (ignoreFiles) {
            reportItem.setPluginDetails(""String_Node_Str"");
          }
 else {
            pluginResultState=PluginState.FAILURE;
            reportItem.setPluginDetails(""String_Node_Str"");
          }
        }
      }
      if (!pluginResultState.equals(PluginState.SUCCESS)) {
        reportState=PluginState.FAILURE;
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",file.getId(),e.getMessage(),e);
      reportState=PluginState.FAILURE;
      reportItem.setPluginDetails(e.getMessage());
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
 finally {
      reportItem.setPluginState(pluginResultState);
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
    boolean notifyEvent=false;
    createEvent(model,index,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),outputFormat,reportState,Arrays.asList(file),newFiles,notifyEvent);
    if (!createDIP) {
      try {
        Representation rep=model.retrieveRepresentation(file.getAipId(),newRepresentationID);
        createPremisSkeletonOnRepresentation(model,file.getAipId(),rep);
      }
 catch (      RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException|ValidationException|IOException|XmlException e) {
        LOGGER.error(""String_Node_Str"",e.getMessage());
      }
    }
  }
  return report;
}","@Override protected Report executeOnFile(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<File> list,Job job) throws PluginException {
  Map<String,String> changedRepresentationsOnAIPs=new HashMap<>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<>();
  ArrayList<DIPFile> newDIPFiles=new ArrayList<>();
  Report reportItem=null;
  PluginState reportState=PluginState.SUCCESS;
  PluginState pluginResultState=PluginState.SUCCESS;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"",file.getId());
      newRepresentationID=IdUtils.createUUID();
      pluginResultState=PluginState.SUCCESS;
      reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getFileId(file),File.class,AIPState.ACTIVE);
      if (createDIP) {
        reportItem.setOutcomeObjectClass(DIP.class.getName());
      }
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file),RodaConstants.FILE_FORMAT_FIELDS_TO_RETURN);
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        List<String> convertableTo=getConvertableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
          fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"",newRepresentationID,file.getAipId());
            boolean original=false;
            if (createDIP) {
              FileLink fileLink=new FileLink(file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
              List<FileLink> links=new ArrayList<>();
              links.add(fileLink);
              AIP aip=model.retrieveAIP(file.getAipId());
              DIP dip=new DIP();
              dip.setId(IdUtils.createUUID());
              dip.setFileIds(links);
              dip.setPermissions(aip.getPermissions());
              dip.setTitle(dipTitle);
              dip.setDescription(dipDescription);
              dip.setType(RodaConstants.DIP_TYPE_CONVERSION);
              dip=model.createDIP(dip,true);
              newRepresentationID=dip.getId();
            }
 else {
              String newRepresentationType=RodaConstants.REPRESENTATION_TYPE_MIXED;
              Representation newRep=model.createRepresentation(file.getAipId(),newRepresentationID,original,newRepresentationType,model.getStorage(),storagePath);
              StoragePath metadataPath=ModelUtils.getRepresentationMetadataStoragePath(newRep.getAipId(),newRep.getId());
              storage.deleteResource(metadataPath);
              storage.createDirectory(metadataPath);
            }
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            if (createDIP) {
              DIPFile f=model.createDIPFile(newRepresentationID,file.getPath(),newFileId,directAccess.getPath().toFile().length(),payload,notify);
              newDIPFiles.add(f);
            }
 else {
              model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
              File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
              newFiles.add(f);
              reportItem.setOutcomeObjectId(IdUtils.getFileId(f));
              changedRepresentationsOnAIPs.put(file.getRepresentationId(),file.getAipId());
            }
            Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
            fileReportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
            reportItem.addReport(fileReportItem);
          }
 catch (          CommandException e) {
            pluginResultState=PluginState.PARTIAL_SUCCESS;
            Report fileReportItem=PluginHelper.initPluginReportItem(this,file.getId(),File.class,AIPState.ACTIVE);
            fileReportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage() + ""String_Node_Str"" + e.getOutput());
            reportItem.addReport(fileReportItem);
            LOGGER.debug(""String_Node_Str"",fileFormat,outputFormat,file.getId(),file.getRepresentationId(),file.getAipId());
          }
        }
 else {
          if (ignoreFiles) {
            reportItem.setPluginDetails(""String_Node_Str"");
          }
 else {
            pluginResultState=PluginState.FAILURE;
            reportItem.setPluginDetails(""String_Node_Str"");
          }
        }
      }
      if (!pluginResultState.equals(PluginState.SUCCESS)) {
        reportState=PluginState.FAILURE;
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"",file.getId(),e.getMessage(),e);
      reportState=PluginState.FAILURE;
      reportItem.setPluginDetails(e.getMessage());
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
 finally {
      reportItem.setPluginState(pluginResultState);
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
    boolean notifyEvent=false;
    createEvent(model,index,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),outputFormat,reportState,Arrays.asList(file),newFiles,notifyEvent);
    if (!createDIP) {
      try {
        Representation rep=model.retrieveRepresentation(file.getAipId(),newRepresentationID);
        createPremisSkeletonOnRepresentation(model,file.getAipId(),rep);
      }
 catch (      RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException|ValidationException|IOException|XmlException e) {
        LOGGER.error(""String_Node_Str"",e.getMessage());
      }
    }
  }
  return report;
}",0.9823165968326112
188314,"public void updateRepresentationType(String aipId,String representationId,String type) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException {
  AIP aip=retrieveAIP(aipId);
  for (Iterator<Representation> it=aip.getRepresentations().iterator(); it.hasNext(); ) {
    Representation representation=it.next();
    if (representation.getId().equals(representationId)) {
      representation.setType(type);
      notifyRepresentationUpdated(representation);
      break;
    }
  }
  updateAIPMetadata(aip);
}","public void updateRepresentationType(String aipId,String representationId,String type) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException {
  Representation representation=this.retrieveRepresentation(aipId,representationId);
  representation.setType(type);
  notifyRepresentationUpdated(representation);
  updateAIPMetadata(retrieveAIP(aipId));
}",0.496288441145281
188315,"@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    PluginState pluginState=PluginState.SUCCESS;
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class);
    for (    Representation representation : aip.getRepresentations()) {
      String dipId=IdUtils.createUUID();
      try {
        RepresentationLink representationLink=new RepresentationLink(representation.getAipId(),representation.getId());
        List<RepresentationLink> links=new ArrayList<>();
        links.add(representationLink);
        DIP dip=new DIP();
        dip.setId(dipId);
        dip.setRepresentationIds(links);
        dip.setPermissions(aip.getPermissions());
        dip.setTitle(getDIPTitle());
        dip.setDescription(getDIPDescription());
        dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
        dip=model.createDIP(dip,false);
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            manageFileSigning(model,index,storage,file,dip.getId());
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        model.notifyDIPCreated(dip,true);
      }
 catch (      Exception|LinkageError e) {
        LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
        reportItem.setPluginDetails(e.getMessage());
        pluginState=PluginState.FAILURE;
        try {
          model.deleteDIP(dipId);
        }
 catch (        GenericException|NotFoundException|AuthorizationDeniedException e1) {
        }
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      }
    }
    if (pluginState.equals(PluginState.SUCCESS)) {
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
    reportItem.setPluginState(pluginState);
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}","@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    PluginState pluginState=PluginState.SUCCESS;
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class);
    for (    Representation representation : aip.getRepresentations()) {
      String dipId=IdUtils.createUUID();
      try {
        RepresentationLink representationLink=new RepresentationLink(representation.getAipId(),representation.getId());
        List<RepresentationLink> links=new ArrayList<>();
        links.add(representationLink);
        DIP dip=new DIP();
        dip.setId(dipId);
        dip.setRepresentationIds(links);
        dip.setPermissions(aip.getPermissions());
        dip.setTitle(getDIPTitle());
        dip.setDescription(getDIPDescription());
        dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
        dip=model.createDIP(dip,false);
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            manageFileSigning(model,index,storage,oFile.get(),dip.getId());
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        model.notifyDIPCreated(dip,true);
      }
 catch (      Exception|LinkageError e) {
        LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
        reportItem.setPluginDetails(e.getMessage());
        pluginState=PluginState.FAILURE;
        try {
          model.deleteDIP(dipId);
        }
 catch (        GenericException|NotFoundException|AuthorizationDeniedException e1) {
        }
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      }
    }
    if (pluginState.equals(PluginState.SUCCESS)) {
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
    reportItem.setPluginState(pluginState);
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}",0.9811912225705328
188316,"public static void changeRepresentationType(User user,SelectedItems<IndexedRepresentation> selected,String newType,String details) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  Locale locale=ServerTools.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  String eventDescription=messages.getTranslation(RodaConstants.EVENT_UPDATE_ON_REPOSITORY);
  List<String> representationIds=consolidate(user,IndexedRepresentation.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Filter filter=new Filter();
  filter.add(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,representationIds));
  IndexResult<IndexedRepresentation> reps=index.find(IndexedRepresentation.class,filter,Sorter.NONE,new Sublist(0,representationIds.size()),Arrays.asList(RodaConstants.REPRESENTATION_ID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_AIP_ID));
  for (  IndexedRepresentation irep : reps.getResults()) {
    String oldType=irep.getType();
    List<LinkingIdentifier> sources=new ArrayList<>();
    sources.add(PluginHelper.getLinkingIdentifier(irep.getAipId(),irep.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
    try {
      model.updateRepresentationType(irep.getAipId(),irep.getId(),newType);
      String outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_CHANGE_TYPE_REPRESENTATION_SUCCESS,irep.getId(),oldType,newType);
      model.createEvent(irep.getAipId(),irep.getId(),null,null,PreservationEventType.UPDATE,eventDescription,sources,null,PluginState.SUCCESS,outcomeText,details,user.getName(),true);
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      String outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_CHANGE_TYPE_REPRESENTATION_FAILURE,irep.getId(),oldType,newType);
      model.createEvent(irep.getAipId(),irep.getId(),null,null,PreservationEventType.UPDATE,eventDescription,sources,null,PluginState.FAILURE,outcomeText,details,user.getName(),true);
      throw e;
    }
  }
  index.commit(IndexedRepresentation.class);
}","public static void changeRepresentationType(User user,SelectedItems<IndexedRepresentation> selected,String newType,String details) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  Locale locale=ServerTools.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  String eventDescription=messages.getTranslation(RodaConstants.EVENT_UPDATE_ON_REPOSITORY);
  List<String> representationIds=consolidate(user,IndexedRepresentation.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Filter filter=new Filter();
  filter.add(new OneOfManyFilterParameter(RodaConstants.INDEX_UUID,representationIds));
  IndexResult<IndexedRepresentation> reps=index.find(IndexedRepresentation.class,filter,Sorter.NONE,new Sublist(0,representationIds.size()),Arrays.asList(RodaConstants.REPRESENTATION_ID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_AIP_ID));
  for (  IndexedRepresentation irep : reps.getResults()) {
    String oldType=irep.getType();
    List<LinkingIdentifier> sources=new ArrayList<>();
    sources.add(PluginHelper.getLinkingIdentifier(irep.getAipId(),irep.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
    try {
      model.updateRepresentationType(irep.getAipId(),irep.getId(),newType);
      index.commit(IndexedRepresentation.class);
      String outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_CHANGE_TYPE_REPRESENTATION_SUCCESS,irep.getId(),oldType,newType);
      model.createEvent(irep.getAipId(),irep.getId(),null,null,PreservationEventType.UPDATE,eventDescription,sources,null,PluginState.SUCCESS,outcomeText,details,user.getName(),true);
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      String outcomeText=messages.getTranslationWithArgs(RodaConstants.EVENT_CHANGE_TYPE_REPRESENTATION_FAILURE,irep.getId(),oldType,newType);
      model.createEvent(irep.getAipId(),irep.getId(),null,null,PreservationEventType.UPDATE,eventDescription,sources,null,PluginState.FAILURE,outcomeText,details,user.getName(),true);
      throw e;
    }
  }
}",0.9790739091718612
188317,"public BrowseRepresentation(BrowseRepresentationBundle bundle){
  this.representation=bundle.getRepresentation();
  this.aipId=representation.getAipId();
  this.repId=representation.getId();
  this.repUUID=representation.getUUID();
  handlers=new ArrayList<>();
  String summary=messages.representationListOfFiles();
  AIPState state=bundle.getAip().getState();
  boolean justActive=AIPState.ACTIVE.equals(state);
  boolean selectable=true;
  boolean showFilesPath=false;
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,repUUID),new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  filesList=new SearchFileList(filter,justActive,Facets.NONE,summary,selectable,showFilesPath);
  LastSelectedItemsSingleton.getInstance().setSelectedJustActive(justActive);
  filesList.setActionable(FileActions.get(aipId,repId));
  ListSelectionUtils.bindBrowseOpener(filesList);
  filesSearch=new SearchPanel(filter,ALL_FILTER,true,messages.searchPlaceHolder(),false,false,true);
  filesSearch.setList(filesList);
  disseminationsList=new DIPList(Filter.NULL,Facets.NONE,messages.listOfDisseminations(),true);
  disseminationsList.setActionable(DisseminationActions.get());
  ListSelectionUtils.bindBrowseOpener(disseminationsList);
  disseminationsSearch=new SearchPanel(Filter.NULL,RodaConstants.DIP_SEARCH,true,messages.searchPlaceHolder(),false,false,true);
  disseminationsSearch.setList(disseminationsList);
  initWidget(uiBinder.createAndBindUi(this));
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  representationType.setText(representation.getType() != null ? representation.getType() : representation.getId());
  representationId.setText(representation.getId());
  breadcrumb.updatePath(BreadcrumbUtils.getRepresentationBreadcrumbs(bundle));
  breadcrumb.setVisible(true);
  final List<Pair<String,HTML>> descriptiveMetadataContainers=new ArrayList<>();
  final Map<String,DescriptiveMetadataViewBundle> bundles=new HashMap<>();
  for (  DescriptiveMetadataViewBundle descMetadataBundle : bundle.getRepresentationDescriptiveMetadata()) {
    String title=descMetadataBundle.getLabel() != null ? descMetadataBundle.getLabel() : descMetadataBundle.getId();
    HTML container=new HTML();
    container.addStyleName(""String_Node_Str"");
    itemMetadata.add(container,title);
    descriptiveMetadataContainers.add(Pair.of(descMetadataBundle.getId(),container));
    bundles.put(descMetadataBundle.getId(),descMetadataBundle);
  }
  HandlerRegistration tabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() < descriptiveMetadataContainers.size()) {
        Pair<String,HTML> pair=descriptiveMetadataContainers.get(event.getSelectedItem());
        String descId=pair.getFirst();
        final HTML html=pair.getSecond();
        final DescriptiveMetadataViewBundle bundle=bundles.get(descId);
        if (html.getText().length() == 0) {
          getDescriptiveMetadataHTML(descId,bundle,new AsyncCallback<SafeHtml>(){
            @Override public void onFailure(            Throwable caught){
              if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
                Toast.showError(messages.errorLoadingDescriptiveMetadata(caught.getMessage()));
              }
            }
            @Override public void onSuccess(            SafeHtml result){
              html.setHTML(result);
            }
          }
);
        }
      }
    }
  }
);
  final int addTabIndex=itemMetadata.getWidgetCount();
  FlowPanel addTab=new FlowPanel();
  addTab.add(new HTML(SafeHtmlUtils.fromSafeConstant(""String_Node_Str"")));
  itemMetadata.add(new Label(),addTab);
  HandlerRegistration addTabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() == addTabIndex) {
        newRepresentationDescriptiveMetadata();
      }
    }
  }
);
  addTab.addStyleName(""String_Node_Str"");
  addTab.getParent().addStyleName(""String_Node_Str"");
  handlers.add(tabHandler);
  handlers.add(addTabHandler);
  if (!bundle.getRepresentationDescriptiveMetadata().isEmpty()) {
    newDescriptiveMetadata.setVisible(false);
    itemMetadata.setVisible(true);
    itemMetadata.selectTab(0);
  }
 else {
    newDescriptiveMetadata.setVisible(true);
    itemMetadata.setVisible(false);
  }
  if (bundle.getDipCount() > 0) {
    Filter disseminationsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,repUUID));
    disseminationsList.set(disseminationsFilter,state.equals(AIPState.ACTIVE),Facets.NONE);
    disseminationsSearch.setDefaultFilter(disseminationsFilter,true);
    disseminationsSearch.clearSearchInputBox();
  }
  disseminationsList.getParent().setVisible(bundle.getDipCount() > 0);
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
    }
  }
));
  ListSelectionUtils.bindLayout(representation,searchPrevious,searchNext,keyboardFocus,true,false,false,searchSection);
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(state.toString().toLowerCase());
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  WCAGUtilities.getInstance().makeAccessible(itemMetadata.getElement());
}","public BrowseRepresentation(BrowseRepresentationBundle bundle){
  this.representation=bundle.getRepresentation();
  this.aipId=representation.getAipId();
  this.repId=representation.getId();
  this.repUUID=representation.getUUID();
  handlers=new ArrayList<>();
  String summary=messages.representationListOfFiles();
  AIPState state=bundle.getAip().getState();
  boolean justActive=AIPState.ACTIVE.equals(state);
  boolean selectable=true;
  boolean showFilesPath=false;
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,repUUID),new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  filesList=new SearchFileList(filter,justActive,Facets.NONE,summary,selectable,showFilesPath);
  LastSelectedItemsSingleton.getInstance().setSelectedJustActive(justActive);
  filesList.setActionable(FileActions.get(aipId,repId));
  ListSelectionUtils.bindBrowseOpener(filesList);
  filesSearch=new SearchPanel(filter,ALL_FILTER,true,messages.searchPlaceHolder(),false,false,true);
  filesSearch.setList(filesList);
  disseminationsList=new DIPList(Filter.NULL,Facets.NONE,messages.listOfDisseminations(),true);
  disseminationsList.setActionable(DisseminationActions.get());
  ListSelectionUtils.bindBrowseOpener(disseminationsList);
  disseminationsSearch=new SearchPanel(Filter.NULL,RodaConstants.DIP_SEARCH,true,messages.searchPlaceHolder(),false,false,true);
  disseminationsSearch.setList(disseminationsList);
  initWidget(uiBinder.createAndBindUi(this));
  aipState.setHTML(HtmlSnippetUtils.getAIPStateHTML(state));
  aipState.setVisible(!justActive);
  HTMLPanel representationIconHtmlPanel=new HTMLPanel(DescriptionLevelUtils.getRepresentationTypeIcon(representation.getType(),false));
  representationIconHtmlPanel.addStyleName(""String_Node_Str"");
  representationIcon.setWidget(representationIconHtmlPanel);
  representationType.setText(representation.getType() != null ? representation.getType() : representation.getId());
  representationId.setText(representation.getId());
  breadcrumb.updatePath(BreadcrumbUtils.getRepresentationBreadcrumbs(bundle));
  breadcrumb.setVisible(true);
  final List<Pair<String,HTML>> descriptiveMetadataContainers=new ArrayList<>();
  final Map<String,DescriptiveMetadataViewBundle> bundles=new HashMap<>();
  for (  DescriptiveMetadataViewBundle descMetadataBundle : bundle.getRepresentationDescriptiveMetadata()) {
    String title=descMetadataBundle.getLabel() != null ? descMetadataBundle.getLabel() : descMetadataBundle.getId();
    HTML container=new HTML();
    container.addStyleName(""String_Node_Str"");
    itemMetadata.add(container,title);
    descriptiveMetadataContainers.add(Pair.of(descMetadataBundle.getId(),container));
    bundles.put(descMetadataBundle.getId(),descMetadataBundle);
  }
  HandlerRegistration tabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() < descriptiveMetadataContainers.size()) {
        Pair<String,HTML> pair=descriptiveMetadataContainers.get(event.getSelectedItem());
        String descId=pair.getFirst();
        final HTML html=pair.getSecond();
        final DescriptiveMetadataViewBundle bundle=bundles.get(descId);
        if (html.getText().length() == 0) {
          getDescriptiveMetadataHTML(descId,bundle,new AsyncCallback<SafeHtml>(){
            @Override public void onFailure(            Throwable caught){
              if (!AsyncCallbackUtils.treatCommonFailures(caught)) {
                Toast.showError(messages.errorLoadingDescriptiveMetadata(caught.getMessage()));
              }
            }
            @Override public void onSuccess(            SafeHtml result){
              html.setHTML(result);
            }
          }
);
        }
      }
    }
  }
);
  final int addTabIndex=itemMetadata.getWidgetCount();
  FlowPanel addTab=new FlowPanel();
  addTab.add(new HTML(SafeHtmlUtils.fromSafeConstant(""String_Node_Str"")));
  itemMetadata.add(new Label(),addTab);
  HandlerRegistration addTabHandler=itemMetadata.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      if (event.getSelectedItem() == addTabIndex) {
        newRepresentationDescriptiveMetadata();
      }
    }
  }
);
  addTab.addStyleName(""String_Node_Str"");
  addTab.getParent().addStyleName(""String_Node_Str"");
  handlers.add(tabHandler);
  handlers.add(addTabHandler);
  if (!bundle.getRepresentationDescriptiveMetadata().isEmpty()) {
    newDescriptiveMetadata.setVisible(false);
    itemMetadata.setVisible(true);
    itemMetadata.selectTab(0);
  }
 else {
    newDescriptiveMetadata.setVisible(true);
    itemMetadata.setVisible(false);
  }
  if (bundle.getDipCount() > 0) {
    Filter disseminationsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,repUUID));
    disseminationsList.set(disseminationsFilter,state.equals(AIPState.ACTIVE),Facets.NONE);
    disseminationsSearch.setDefaultFilter(disseminationsFilter,true);
    disseminationsSearch.clearSearchInputBox();
  }
  disseminationsList.getParent().setVisible(bundle.getDipCount() > 0);
  actionsSidebar.setWidget(RepresentationActions.get(aipId).createActionsLayout(representation,new AsyncCallback<Actionable.ActionImpact>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Actionable.ActionImpact impact){
      if (Actionable.ActionImpact.UPDATED.equals(impact)) {
        BrowserService.Util.getInstance().retrieve(IndexedRepresentation.class.getName(),representation.getUUID(),representationFields,new AsyncCallback<IndexedRepresentation>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          IndexedRepresentation rep){
            representation=rep;
            representationType.setText(rep.getType());
          }
        }
);
      }
    }
  }
));
  ListSelectionUtils.bindLayout(representation,searchPrevious,searchNext,keyboardFocus,true,false,false,searchSection);
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(""String_Node_Str"");
  this.addStyleName(state.toString().toLowerCase());
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  WCAGUtilities.getInstance().makeAccessible(itemMetadata.getElement());
}",0.9541757898029404
188318,"@Override public void onSuccess(Actionable.ActionImpact impact){
}","@Override public void onSuccess(IndexedRepresentation rep){
  representation=rep;
  representationType.setText(rep.getType());
}",0.5154639175257731
188319,"@Override public Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<Representation> list,Job job) throws PluginException {
  for (  Representation representation : list) {
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),Representation.class);
    String dipId=""String_Node_Str"";
    try {
      LOGGER.debug(""String_Node_Str"",representation);
      boolean recursive=true;
      CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      OptionalWithCause<File> oFile : allFiles) {
        if (oFile.isPresent()) {
          File file=oFile.get();
          dipId=IdUtils.createUUID();
          Permissions aipPermissions=model.retrieveAIP(representation.getAipId()).getPermissions();
          RepresentationLink representationLink=new RepresentationLink(representation.getAipId(),representation.getId());
          List<RepresentationLink> links=new ArrayList<>();
          links.add(representationLink);
          DIP dip=new DIP();
          dip.setId(dipId);
          dip.setRepresentationIds(links);
          dip.setPermissions(aipPermissions);
          dip.setTitle(getDIPTitle());
          dip.setDescription(getDIPDescription());
          dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
          dip=model.createDIP(dip,false);
          manageFileSigning(model,index,storage,file,dip.getId());
          model.notifyDIPCreated(dip,true);
        }
 else {
          LOGGER.error(""String_Node_Str"",oFile.getCause());
        }
      }
      IOUtils.closeQuietly(allFiles);
      reportItem.setPluginState(PluginState.SUCCESS);
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 catch (    Exception|LinkageError e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      try {
        model.deleteDIP(dipId);
      }
 catch (      GenericException|NotFoundException|AuthorizationDeniedException e1) {
      }
    }
 finally {
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
  }
  return report;
}","@Override public Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<Representation> list,Job job) throws PluginException {
  for (  Representation representation : list) {
    Report reportItem=PluginHelper.initPluginReportItem(this,IdUtils.getRepresentationId(representation),Representation.class);
    String dipId=IdUtils.createUUID();
    try {
      Permissions aipPermissions=model.retrieveAIP(representation.getAipId()).getPermissions();
      RepresentationLink representationLink=new RepresentationLink(representation.getAipId(),representation.getId());
      List<RepresentationLink> links=new ArrayList<>();
      links.add(representationLink);
      DIP dip=new DIP();
      dip.setId(dipId);
      dip.setRepresentationIds(links);
      dip.setPermissions(aipPermissions);
      dip.setTitle(getDIPTitle());
      dip.setDescription(getDIPDescription());
      dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
      dip=model.createDIP(dip,false);
      LOGGER.debug(""String_Node_Str"",representation);
      boolean recursive=true;
      CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      OptionalWithCause<File> oFile : allFiles) {
        if (oFile.isPresent()) {
          manageFileSigning(model,index,storage,oFile.get(),dip.getId());
        }
 else {
          LOGGER.error(""String_Node_Str"",oFile.getCause());
        }
      }
      model.notifyDIPCreated(dip,true);
      IOUtils.closeQuietly(allFiles);
      reportItem.setPluginState(PluginState.SUCCESS);
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 catch (    Exception|LinkageError e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      try {
        model.deleteDIP(dipId);
      }
 catch (      GenericException|NotFoundException|AuthorizationDeniedException e1) {
      }
    }
 finally {
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
    }
  }
  return report;
}",0.7373040752351098
188320,"@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    PluginState pluginState=PluginState.SUCCESS;
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class);
    for (    Representation representation : aip.getRepresentations()) {
      String dipId=""String_Node_Str"";
      try {
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            dipId=IdUtils.createUUID();
            AIPLink aipLink=new AIPLink(representation.getAipId());
            List<AIPLink> links=new ArrayList<>();
            links.add(aipLink);
            DIP dip=new DIP();
            dip.setId(dipId);
            dip.setAipIds(links);
            dip.setPermissions(aip.getPermissions());
            dip.setTitle(getDIPTitle());
            dip.setDescription(getDIPDescription());
            dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
            dip=model.createDIP(dip,false);
            manageFileSigning(model,index,storage,file,dip.getId());
            model.notifyDIPCreated(dip,true);
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
      }
 catch (      Exception|LinkageError e) {
        LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
        reportItem.setPluginDetails(e.getMessage());
        pluginState=PluginState.FAILURE;
        try {
          model.deleteDIP(dipId);
        }
 catch (        GenericException|NotFoundException|AuthorizationDeniedException e1) {
        }
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      }
    }
    if (pluginState.equals(PluginState.SUCCESS)) {
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
    reportItem.setPluginState(pluginState);
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}","@Override public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  for (  AIP aip : list) {
    PluginState pluginState=PluginState.SUCCESS;
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class);
    for (    Representation representation : aip.getRepresentations()) {
      String dipId=IdUtils.createUUID();
      try {
        RepresentationLink representationLink=new RepresentationLink(representation.getAipId(),representation.getId());
        List<RepresentationLink> links=new ArrayList<>();
        links.add(representationLink);
        DIP dip=new DIP();
        dip.setId(dipId);
        dip.setRepresentationIds(links);
        dip.setPermissions(aip.getPermissions());
        dip.setTitle(getDIPTitle());
        dip.setDescription(getDIPDescription());
        dip.setType(RodaConstants.DIP_TYPE_DIGITAL_SIGNATURE);
        dip=model.createDIP(dip,false);
        LOGGER.debug(""String_Node_Str"",representation);
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            manageFileSigning(model,index,storage,file,dip.getId());
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        model.notifyDIPCreated(dip,true);
      }
 catch (      Exception|LinkageError e) {
        LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
        reportItem.setPluginDetails(e.getMessage());
        pluginState=PluginState.FAILURE;
        try {
          model.deleteDIP(dipId);
        }
 catch (        GenericException|NotFoundException|AuthorizationDeniedException e1) {
        }
      }
 finally {
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
      }
    }
    if (pluginState.equals(PluginState.SUCCESS)) {
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
 else {
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
    reportItem.setPluginState(pluginState);
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,reportItem,true,job);
  }
  return report;
}",0.6887675507020281
188321,"public static DipBundle retrieveDipBundle(String dipUUID,String dipFileUUID,User user) throws GenericException, NotFoundException, RequestNotValidException {
  DipBundle bundle=new DipBundle();
  bundle.setDip(retrieve(IndexedDIP.class,dipUUID,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIP_ID,RodaConstants.DIP_TITLE,RodaConstants.DIP_AIP_IDS,RodaConstants.DIP_AIP_UUIDS,RodaConstants.DIP_FILE_IDS)));
  List<String> dipFileFields=new ArrayList<>();
  if (dipFileUUID != null) {
    DIPFile dipFile=retrieve(DIPFile.class,dipFileUUID,dipFileFields);
    bundle.setDipFile(dipFile);
    List<DIPFile> dipFileAncestors=new ArrayList<>();
    for (    String dipFileAncestor : dipFile.getAncestorsUUIDs()) {
      try {
        dipFileAncestors.add(retrieve(DIPFile.class,dipFileAncestor,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIPFILE_DIP_ID,RodaConstants.DIPFILE_ID)));
      }
 catch (      NotFoundException e) {
      }
    }
    bundle.setDipFileAncestors(dipFileAncestors);
  }
 else {
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIPFILE_DIP_ID,dipUUID));
    Sublist sublist=new Sublist(0,1);
    IndexResult<DIPFile> dipFiles=find(DIPFile.class,filter,Sorter.NONE,sublist,Facets.NONE,user,false,dipFileFields);
    if (dipFiles.getTotalCount() == 1 && !dipFiles.getResults().get(0).isDirectory()) {
      bundle.setDipFile(dipFiles.getResults().get(0));
    }
  }
  List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_TITLE,RodaConstants.AIP_LEVEL,RodaConstants.AIP_DATE_FINAL,RodaConstants.AIP_DATE_INITIAL,RodaConstants.AIP_GHOST);
  List<String> representationFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_NUMBER_OF_DATA_FILES,RodaConstants.REPRESENTATION_ORIGINAL,RodaConstants.REPRESENTATION_AIP_ID,RodaConstants.REPRESENTATION_ID);
  List<String> fileFields=new ArrayList<>();
  IndexedDIP dip=bundle.getDip();
  if (!dip.getFileIds().isEmpty()) {
    IndexedFile file=BrowserHelper.retrieve(IndexedFile.class,IdUtils.getFileId(dip.getFileIds().get(0)),fileFields);
    bundle.setFile(file);
    bundle.setRepresentation(BrowserHelper.retrieve(IndexedRepresentation.class,file.getRepresentationUUID(),representationFields));
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,file.getAipId(),aipFields));
  }
 else   if (!dip.getRepresentationIds().isEmpty()) {
    IndexedRepresentation representation=BrowserHelper.retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(dip.getRepresentationIds().get(0)),representationFields);
    bundle.setRepresentation(representation);
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,representation.getAipId(),aipFields));
  }
 else   if (!dip.getAipIds().isEmpty()) {
    IndexedAIP aip=BrowserHelper.retrieve(IndexedAIP.class,dip.getAipIds().get(0).getAipId(),aipFields);
    bundle.setAip(aip);
  }
  return bundle;
}","public static DipBundle retrieveDipBundle(String dipUUID,String dipFileUUID,User user) throws GenericException, NotFoundException, RequestNotValidException {
  DipBundle bundle=new DipBundle();
  bundle.setDip(retrieve(IndexedDIP.class,dipUUID,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIP_ID,RodaConstants.DIP_TITLE,RodaConstants.DIP_AIP_IDS,RodaConstants.DIP_AIP_UUIDS,RodaConstants.DIP_FILE_IDS,RodaConstants.DIP_REPRESENTATION_IDS)));
  List<String> dipFileFields=new ArrayList<>();
  if (dipFileUUID != null) {
    DIPFile dipFile=retrieve(DIPFile.class,dipFileUUID,dipFileFields);
    bundle.setDipFile(dipFile);
    List<DIPFile> dipFileAncestors=new ArrayList<>();
    for (    String dipFileAncestor : dipFile.getAncestorsUUIDs()) {
      try {
        dipFileAncestors.add(retrieve(DIPFile.class,dipFileAncestor,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIPFILE_DIP_ID,RodaConstants.DIPFILE_ID)));
      }
 catch (      NotFoundException e) {
      }
    }
    bundle.setDipFileAncestors(dipFileAncestors);
  }
 else {
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIPFILE_DIP_ID,dipUUID));
    Sublist sublist=new Sublist(0,1);
    IndexResult<DIPFile> dipFiles=find(DIPFile.class,filter,Sorter.NONE,sublist,Facets.NONE,user,false,dipFileFields);
    if (dipFiles.getTotalCount() == 1 && !dipFiles.getResults().get(0).isDirectory()) {
      bundle.setDipFile(dipFiles.getResults().get(0));
    }
  }
  List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_TITLE,RodaConstants.AIP_LEVEL,RodaConstants.AIP_DATE_FINAL,RodaConstants.AIP_DATE_INITIAL,RodaConstants.AIP_GHOST);
  List<String> representationFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_NUMBER_OF_DATA_FILES,RodaConstants.REPRESENTATION_ORIGINAL,RodaConstants.REPRESENTATION_AIP_ID,RodaConstants.REPRESENTATION_ID);
  List<String> fileFields=new ArrayList<>();
  IndexedDIP dip=bundle.getDip();
  if (!dip.getFileIds().isEmpty()) {
    IndexedFile file=BrowserHelper.retrieve(IndexedFile.class,IdUtils.getFileId(dip.getFileIds().get(0)),fileFields);
    bundle.setFile(file);
    bundle.setRepresentation(BrowserHelper.retrieve(IndexedRepresentation.class,file.getRepresentationUUID(),representationFields));
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,file.getAipId(),aipFields));
  }
 else   if (!dip.getRepresentationIds().isEmpty()) {
    IndexedRepresentation representation=BrowserHelper.retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(dip.getRepresentationIds().get(0)),representationFields);
    bundle.setRepresentation(representation);
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,representation.getAipId(),aipFields));
  }
 else   if (!dip.getAipIds().isEmpty()) {
    IndexedAIP aip=BrowserHelper.retrieve(IndexedAIP.class,dip.getAipIds().get(0).getAipId(),aipFields);
    bundle.setAip(aip);
  }
  return bundle;
}",0.99374471682164
188322,"private void initializeRefererListSelectionState(){
  boolean requireCtrlModifier=true;
  boolean requireShiftModifier=true;
  boolean requireAltModifier=false;
  if (aip != null && representation != null && file != null) {
    refererTitle.setText(file.isDirectory() ? messages.catalogueFolderTitle() : messages.catalogueFileTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getFileBreadcrumbs(aip,representation,file));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(file,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedFile>(){
      @Override public void process(      final IndexedFile file){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,file.getUUID()));
        openReferred(file,filter);
      }
    }
);
  }
 else   if (aip != null && representation != null) {
    refererTitle.setText(messages.catalogueRepresentationTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getRepresentationBreadcrumbs(aip,representation));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(representation,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedRepresentation>(){
      @Override public void process(      final IndexedRepresentation representation){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,representation.getUUID()));
        openReferred(representation,filter);
      }
    }
);
  }
 else   if (aip != null) {
    refererTitle.setText(messages.catalogueItemTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getAipBreadcrumbs(aip));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(aip,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedAIP>(){
      @Override public void process(      final IndexedAIP aip){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_AIP_UUIDS,aip.getUUID()));
        openReferred(aip,filter);
      }
    }
);
  }
 else {
    refererToolbar.setVisible(false);
  }
}","private void initializeRefererListSelectionState(){
  boolean requireCtrlModifier=true;
  boolean requireShiftModifier=true;
  boolean requireAltModifier=false;
  if (aip != null && representation != null && file != null) {
    GWT.log(""String_Node_Str"");
    refererTitle.setText(file.isDirectory() ? messages.catalogueFolderTitle() : messages.catalogueFileTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getFileBreadcrumbs(aip,representation,file));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(file,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedFile>(){
      @Override public void process(      final IndexedFile file){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,file.getUUID()));
        openReferred(file,filter);
      }
    }
);
  }
 else   if (aip != null && representation != null) {
    refererTitle.setText(messages.catalogueRepresentationTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getRepresentationBreadcrumbs(aip,representation));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(representation,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedRepresentation>(){
      @Override public void process(      final IndexedRepresentation representation){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_REPRESENTATION_UUIDS,representation.getUUID()));
        openReferred(representation,filter);
      }
    }
);
  }
 else   if (aip != null) {
    refererTitle.setText(messages.catalogueItemTitle());
    refererBreadcrumb.updatePath(BreadcrumbUtils.getAipBreadcrumbs(aip));
    refererBreadcrumb.setVisible(true);
    ListSelectionUtils.bindLayout(aip,refererPreviousButton,refererNextButton,keyboardFocus,requireCtrlModifier,requireShiftModifier,requireAltModifier,new ListSelectionUtils.ProcessRelativeItem<IndexedAIP>(){
      @Override public void process(      final IndexedAIP aip){
        Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_AIP_UUIDS,aip.getUUID()));
        openReferred(aip,filter);
      }
    }
);
  }
 else {
    refererToolbar.setVisible(false);
  }
}",0.9932829554995802
188323,"public static ConsumesOutputStream retrieveClassificationPlan(User user,String filename) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException {
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    ObjectNode root=mapper.createObjectNode();
    ArrayNode array=mapper.createArrayNode();
    List<String> descriptionsLevels=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.LEVELS_CLASSIFICATION_PLAN));
    Filter allButRepresentationsFilter=new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_LEVEL,descriptionsLevels));
    IndexService index=RodaCoreFactory.getIndexService();
    boolean justActive=true;
    boolean removeDuplicates=true;
    IterableIndexResult<IndexedAIP> res=index.findAll(IndexedAIP.class,allButRepresentationsFilter,null,Sublist.ALL,user,justActive,removeDuplicates,new ArrayList<>());
    Iterator<IndexedAIP> it=res.iterator();
    while (it.hasNext()) {
      array.add(aipToJSON(it.next()));
    }
    root.set(""String_Node_Str"",array);
    return new ConsumesOutputStream(){
      @Override public void consumeOutputStream(      OutputStream out) throws IOException {
        try {
          mapper.writeValue(out,root);
        }
 catch (        IOException e) {
          throw e;
        }
 finally {
          IOUtils.closeQuietly(out);
        }
      }
      @Override public String getFileName(){
        return filename;
      }
      @Override public String getMediaType(){
        return RodaConstants.MEDIA_TYPE_APPLICATION_JSON;
      }
    }
;
  }
 catch (  IOException e) {
    throw new GenericException(e);
  }
}","public static ConsumesOutputStream retrieveClassificationPlan(User user,String filename) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException {
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    ObjectNode root=mapper.createObjectNode();
    ArrayNode array=mapper.createArrayNode();
    List<String> descriptionsLevels=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.LEVELS_CLASSIFICATION_PLAN));
    Filter allButRepresentationsFilter=new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_LEVEL,descriptionsLevels));
    IndexService index=RodaCoreFactory.getIndexService();
    boolean justActive=true;
    IterableIndexResult<IndexedAIP> res=index.findAll(IndexedAIP.class,allButRepresentationsFilter,null,Sublist.ALL,user,justActive,new ArrayList<>());
    Iterator<IndexedAIP> it=res.iterator();
    while (it.hasNext()) {
      array.add(aipToJSON(it.next()));
    }
    root.set(""String_Node_Str"",array);
    return new ConsumesOutputStream(){
      @Override public void consumeOutputStream(      OutputStream out) throws IOException {
        try {
          mapper.writeValue(out,root);
        }
 catch (        IOException e) {
          throw e;
        }
 finally {
          IOUtils.closeQuietly(out);
        }
      }
      @Override public String getFileName(){
        return filename;
      }
      @Override public String getMediaType(){
        return RodaConstants.MEDIA_TYPE_APPLICATION_JSON;
      }
    }
;
  }
 catch (  IOException e) {
    throw new GenericException(e);
  }
}",0.9844124700239808
188324,"public <T extends IsIndexed>IterableIndexResult<T> findAll(final Class<T> returnClass,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final User user,final boolean justActive,final boolean removeDuplicates,final List<String> fieldsToReturn){
  return new IterableIndexResult<>(getSolrClient(),returnClass,filter,sorter,sublist,facets,user,justActive,removeDuplicates,fieldsToReturn);
}","public <T extends IsIndexed>IterableIndexResult<T> findAll(final Class<T> returnClass,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final User user,final boolean justActive,final List<String> fieldsToReturn){
  return new IterableIndexResult<>(getSolrClient(),returnClass,filter,sorter,sublist,facets,user,justActive,true,fieldsToReturn);
}",0.9358490566037736
188325,"public static void doJobObjectsCleanup(Job job,ModelService model,IndexService index){
  if (RodaCoreFactory.getNodeType() == NodeType.MASTER) {
    try {
      index.commit(IndexedAIP.class);
      Filter filter=new Filter();
      filter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,job.getId()));
      filter.add(new OneOfManyFilterParameter(RodaConstants.AIP_STATE,Arrays.asList(AIPState.CREATED.toString(),AIPState.INGEST_PROCESSING.toString())));
      doJobCleanup(model,index.findAll(IndexedAIP.class,filter,Arrays.asList(RodaConstants.INDEX_UUID)));
    }
 catch (    GenericException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","public static void doJobObjectsCleanup(Job job,ModelService model,IndexService index){
  if (RodaCoreFactory.getNodeType() == NodeType.MASTER) {
    try {
      index.commit(IndexedAIP.class);
      Filter filter=new Filter();
      filter.add(new SimpleFilterParameter(RodaConstants.INGEST_JOB_ID,job.getId()));
      filter.add(new OneOfManyFilterParameter(RodaConstants.AIP_STATE,Arrays.asList(AIPState.CREATED.toString(),AIPState.INGEST_PROCESSING.toString())));
      doJobCleanup(model,index.findAll(IndexedAIP.class,filter,false,Arrays.asList(RodaConstants.INDEX_UUID)));
    }
 catch (    GenericException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9955089820359282
188326,"private IterableIndexResult<IndexedAIP> findAipsToDelete(IndexService index,List<String> activeJobsIds){
  Filter aipsFilter=new Filter();
  activeJobsIds.forEach(e -> aipsFilter.add(new NotSimpleFilterParameter(RodaConstants.INGEST_JOB_ID,e)));
  aipsFilter.add(new SimpleFilterParameter(RodaConstants.AIP_STATE,AIPState.INGEST_PROCESSING.toString()));
  return index.findAll(IndexedAIP.class,aipsFilter,false,true,Arrays.asList(RodaConstants.INDEX_UUID));
}","private IterableIndexResult<IndexedAIP> findAipsToDelete(IndexService index,List<String> activeJobsIds){
  Filter aipsFilter=new Filter();
  activeJobsIds.forEach(e -> aipsFilter.add(new NotSimpleFilterParameter(RodaConstants.INGEST_JOB_ID,e)));
  aipsFilter.add(new SimpleFilterParameter(RodaConstants.AIP_STATE,AIPState.INGEST_PROCESSING.toString()));
  return index.findAll(IndexedAIP.class,aipsFilter,false,Arrays.asList(RodaConstants.INDEX_UUID));
}",0.9945235487404164
188327,"private List<String> findActiveJobs(IndexService index){
  Filter activeJobsViaStateFilter=new Filter();
  for (  Job.JOB_STATE jobState : Job.JOB_STATE.values()) {
    if (Job.isFinalState(jobState)) {
      activeJobsViaStateFilter.add(new NotSimpleFilterParameter(RodaConstants.JOB_STATE,jobState.toString()));
    }
  }
  List<String> activeJobsIds=new ArrayList<>();
  index.findAll(Job.class,activeJobsViaStateFilter,Arrays.asList(RodaConstants.JOB_ID)).forEach(e -> activeJobsIds.add(e.getId()));
  return activeJobsIds;
}","private List<String> findActiveJobs(IndexService index){
  Filter activeJobsViaStateFilter=new Filter();
  for (  Job.JOB_STATE jobState : Job.JOB_STATE.values()) {
    if (Job.isFinalState(jobState)) {
      activeJobsViaStateFilter.add(new NotSimpleFilterParameter(RodaConstants.JOB_STATE,jobState.toString()));
    }
  }
  List<String> activeJobsIds=new ArrayList<>();
  index.findAll(Job.class,activeJobsViaStateFilter,Arrays.asList(RodaConstants.INDEX_UUID)).forEach(e -> activeJobsIds.add(e.getId()));
  return activeJobsIds;
}",0.9905838041431262
188328,"protected static <T extends IsIndexed>IterableIndexResult<T> findAll(final Class<T> returnClass,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final User user,final boolean justActive,List<String> fieldsToReturn){
  return RodaCoreFactory.getIndexService().findAll(returnClass,filter,sorter,sublist,facets,user,justActive,true,fieldsToReturn);
}","protected static <T extends IsIndexed>IterableIndexResult<T> findAll(final Class<T> returnClass,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final User user,final boolean justActive,List<String> fieldsToReturn){
  return RodaCoreFactory.getIndexService().findAll(returnClass,filter,sorter,sublist,facets,user,justActive,fieldsToReturn);
}",0.9933774834437086
188329,"public static ContentPayload getMetadataPayload(TransferredResource transferredResource){
  try {
    Element root=new Element(""String_Node_Str"");
    org.jdom2.Document doc=new org.jdom2.Document();
    Element child=new Element(""String_Node_Str"");
    child.setAttribute(""String_Node_Str"",""String_Node_Str"");
    child.addContent(escapeContent(transferredResource.getName()));
    root.addContent(child);
    doc.setRootElement(root);
    XMLOutputter outter=new XMLOutputter();
    outter.setFormat(Format.getPrettyFormat());
    outter.outputString(doc);
    return new StringContentPayload(outter.outputString(doc));
  }
 catch (  IllegalDataException e) {
    LOGGER.debug(""String_Node_Str"",e.getMessage());
    return new StringContentPayload(""String_Node_Str"");
  }
}","public static ContentPayload getMetadataPayload(TransferredResource transferredResource){
  try {
    Element root=new Element(""String_Node_Str"");
    org.jdom2.Document doc=new org.jdom2.Document();
    Element child=new Element(""String_Node_Str"");
    child.setAttribute(""String_Node_Str"",""String_Node_Str"");
    child.addContent(transferredResource.getName());
    root.addContent(child);
    doc.setRootElement(root);
    XMLOutputter outter=new XMLOutputter();
    outter.setFormat(Format.getPrettyFormat());
    outter.outputString(doc);
    return new StringContentPayload(outter.outputString(doc));
  }
 catch (  IllegalDataException e) {
    LOGGER.debug(""String_Node_Str"",e.getMessage());
    return new StringContentPayload(""String_Node_Str"");
  }
}",0.990228013029316
188330,"public static IndexedAIP solrDocumentToIndexedAIP(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.INDEX_UUID),null);
  AIPState state=null;
  if (doc.containsKey(RodaConstants.STATE)) {
    state=AIPState.valueOf(objectToString(doc.get(RodaConstants.STATE),AIPState.getDefault().toString()));
  }
  final String parentId=objectToString(doc.get(RodaConstants.AIP_PARENT_ID),null);
  final List<String> ingestSIPIds=objectToListString(doc.get(RodaConstants.INGEST_SIP_IDS));
  final String ingestJobId=objectToString(doc.get(RodaConstants.INGEST_JOB_ID),""String_Node_Str"");
  final List<String> ingestUpdateJobIds=objectToListString(doc.get(RodaConstants.INGEST_UPDATE_JOB_IDS));
  final List<String> ancestors=objectToListString(doc.get(RodaConstants.AIP_ANCESTORS));
  final List<String> levels=objectToListString(doc.get(RodaConstants.AIP_LEVEL));
  final List<String> titles=objectToListString(doc.get(RodaConstants.AIP_TITLE));
  final List<String> descriptions=objectToListString(doc.get(RodaConstants.AIP_DESCRIPTION));
  final Date dateInitial=objectToDate(doc.get(RodaConstants.AIP_DATE_INITIAL));
  final Date dateFinal=objectToDate(doc.get(RodaConstants.AIP_DATE_FINAL));
  final Long numberOfSubmissionFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_SUBMISSION_FILES),0L);
  final Long numberOfDocumentationFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_DOCUMENTATION_FILES),0L);
  final Long numberOfSchemaFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_SCHEMA_FILES),0L);
  final Boolean hasRepresentations=objectToBoolean(doc.get(RodaConstants.AIP_HAS_REPRESENTATIONS),Boolean.FALSE);
  final Boolean ghost=objectToBoolean(doc.get(RodaConstants.AIP_GHOST),Boolean.FALSE);
  Permissions permissions=getPermissions(doc);
  final String title=titles.isEmpty() ? null : titles.get(0);
  final String description=descriptions.isEmpty() ? null : descriptions.get(0);
  String level;
  if (ghost) {
    level=RodaConstants.AIP_GHOST;
  }
 else   level=levels.isEmpty() ? null : levels.get(0);
  return new IndexedAIP(id,state,level,title,dateInitial,dateFinal,description,parentId,ancestors,permissions,numberOfSubmissionFiles,numberOfDocumentationFiles,numberOfSchemaFiles,hasRepresentations,ghost).setIngestSIPIds(ingestSIPIds).setIngestJobId(ingestJobId).setIngestUpdateJobIds(ingestUpdateJobIds);
}","public static IndexedAIP solrDocumentToIndexedAIP(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.INDEX_UUID),null);
  AIPState state=null;
  if (doc.containsKey(RodaConstants.STATE)) {
    state=AIPState.valueOf(objectToString(doc.get(RodaConstants.STATE),AIPState.getDefault().toString()));
  }
  final String parentId=objectToString(doc.get(RodaConstants.AIP_PARENT_ID),null);
  final List<String> ingestSIPIds=objectToListString(doc.get(RodaConstants.INGEST_SIP_IDS));
  final String ingestJobId=objectToString(doc.get(RodaConstants.INGEST_JOB_ID),""String_Node_Str"");
  final List<String> ingestUpdateJobIds=objectToListString(doc.get(RodaConstants.INGEST_UPDATE_JOB_IDS));
  final List<String> ancestors=objectToListString(doc.get(RodaConstants.AIP_ANCESTORS));
  final List<String> levels=objectToListString(doc.get(RodaConstants.AIP_LEVEL));
  final List<String> titles=objectToListString(doc.get(RodaConstants.AIP_TITLE));
  final List<String> descriptions=objectToListString(doc.get(RodaConstants.AIP_DESCRIPTION));
  final Date dateInitial=objectToDate(doc.get(RodaConstants.AIP_DATE_INITIAL));
  final Date dateFinal=objectToDate(doc.get(RodaConstants.AIP_DATE_FINAL));
  final Long numberOfSubmissionFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_SUBMISSION_FILES),0L);
  final Long numberOfDocumentationFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_DOCUMENTATION_FILES),0L);
  final Long numberOfSchemaFiles=objectToLong(doc.get(RodaConstants.AIP_NUMBER_OF_SCHEMA_FILES),0L);
  final Boolean hasRepresentations=objectToBoolean(doc.get(RodaConstants.AIP_HAS_REPRESENTATIONS),Boolean.FALSE);
  final Boolean ghost=objectToBoolean(doc.get(RodaConstants.AIP_GHOST),Boolean.FALSE);
  Permissions permissions=getPermissions(doc);
  final String title=titles.isEmpty() ? null : titles.get(0);
  final String description=descriptions.isEmpty() ? null : descriptions.get(0);
  String level;
  if (ghost) {
    level=RodaConstants.AIP_GHOST;
  }
 else {
    level=levels.isEmpty() ? null : levels.get(0);
  }
  return new IndexedAIP(id,state,level,title,dateInitial,dateFinal,description,parentId,ancestors,permissions,numberOfSubmissionFiles,numberOfDocumentationFiles,numberOfSchemaFiles,hasRepresentations,ghost).setIngestSIPIds(ingestSIPIds).setIngestJobId(ingestJobId).setIngestUpdateJobIds(ingestUpdateJobIds);
}",0.9983050847457628
188331,"public void createFolder(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      Toast.showInfo(messages.dialogFailure(),messages.renameFailed());
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          IndexedFile folder=file;
          String aipId=folder.getAipId();
          String repId=folder.getRepresentationId();
          String folderUUID=folder.getUUID();
          BrowserService.Util.getInstance().createFolder(aipId,repId,folderUUID,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof AlreadyExistsException) {
                Dialogs.showInformationDialog(messages.createFolderAlreadyExistsTitle(),messages.createFolderAlreadyExistsMessage(),messages.dialogOk());
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","public void createFolder(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          IndexedFile folder=file;
          String aipId=folder.getAipId();
          String repId=folder.getRepresentationId();
          String folderUUID=folder.getUUID();
          BrowserService.Util.getInstance().createFolder(aipId,repId,folderUUID,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof AlreadyExistsException) {
                Dialogs.showInformationDialog(messages.createFolderAlreadyExistsTitle(),messages.createFolderAlreadyExistsMessage(),messages.dialogOk());
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9797866367209432
188332,"public void createFolder(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      Toast.showInfo(messages.dialogFailure(),messages.renameFailed());
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        final String details){
          BrowserService.Util.getInstance().createFolder(representation.getAipId(),representation.getId(),null,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","public void createFolder(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        final String details){
          BrowserService.Util.getInstance().createFolder(representation.getAipId(),representation.getId(),null,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9772727272727272
188333,"@UiHandler(""String_Node_Str"") void buttonRenameHandler(ClickEvent e){
  if (!ClientSelectedItemsUtils.isEmpty(getSelected()) && getSelected() instanceof SelectedItemsList) {
    SelectedItemsList<TransferredResource> resourceList=(SelectedItemsList<TransferredResource>)getSelected();
    BrowserService.Util.getInstance().retrieve(TransferredResource.class.getName(),resourceList.getIds().get(0),Arrays.asList(RodaConstants.TRANSFERRED_RESOURCE_ID,RodaConstants.TRANSFERRED_RESOURCE_NAME),new AsyncCallback<TransferredResource>(){
      @Override public void onFailure(      Throwable caught){
        Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
      }
      @Override public void onSuccess(      final TransferredResource resultResource){
        Dialogs.showPromptDialog(messages.renameTransferredResourcesDialogTitle(),null,resultResource.getName(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String result){
            BrowserService.Util.getInstance().renameTransferredResource(resultResource.getId(),result,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
              }
              @Override public void onSuccess(              String result){
                Toast.showInfo(messages.dialogSuccess(),messages.renameSIPSuccessful());
                HistoryUtils.newHistory(IngestTransfer.RESOLVER,result);
              }
            }
);
          }
        }
);
      }
    }
);
  }
 else {
    return;
  }
}","@UiHandler(""String_Node_Str"") void buttonRenameHandler(ClickEvent e){
  if (!ClientSelectedItemsUtils.isEmpty(getSelected()) && getSelected() instanceof SelectedItemsList) {
    SelectedItemsList<TransferredResource> resourceList=(SelectedItemsList<TransferredResource>)getSelected();
    BrowserService.Util.getInstance().retrieve(TransferredResource.class.getName(),resourceList.getIds().get(0),Arrays.asList(RodaConstants.TRANSFERRED_RESOURCE_ID,RodaConstants.TRANSFERRED_RESOURCE_NAME),new AsyncCallback<TransferredResource>(){
      @Override public void onFailure(      Throwable caught){
        Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
      }
      @Override public void onSuccess(      final TransferredResource resultResource){
        Dialogs.showPromptDialog(messages.renameTransferredResourcesDialogTitle(),null,resultResource.getName(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String result){
            BrowserService.Util.getInstance().renameTransferredResource(resultResource.getUUID(),result,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
              }
              @Override public void onSuccess(              String result){
                Toast.showInfo(messages.dialogSuccess(),messages.renameSIPSuccessful());
                HistoryUtils.newHistory(IngestTransfer.RESOLVER,result);
              }
            }
);
          }
        }
);
      }
    }
);
  }
 else {
    return;
  }
}",0.9988864142538976
188334,"private void showRelativeTo(UIObject target,CalloutPosition position,int offsetWidth,int offsetHeight){
  int left;
  int top;
  if (CalloutPosition.BOTTOM_RIGHT.equals(position)) {
    left=target.getAbsoluteLeft() + target.getOffsetWidth() / 2 - offsetWidth + ARROW_OFFSET_PX;
    top=target.getAbsoluteTop() - offsetHeight - MARGIN_FROM_TARGET_PX;
  }
 else   if (CalloutPosition.TOP_RIGHT.equals(position)) {
    left=target.getAbsoluteLeft() + target.getOffsetWidth() / 2 - offsetWidth + ARROW_OFFSET_PX;
    top=target.getAbsoluteTop() + target.getOffsetHeight() + MARGIN_FROM_TARGET_PX;
  }
 else {
    left=0;
    top=0;
  }
  setPopupPosition(left,top);
}","private void showRelativeTo(UIObject target,CalloutPosition position,int offsetWidth,int offsetHeight){
  Pair<Integer,Integer> positionPair=Pair.of(0,0);
  if (CalloutPosition.BOTTOM_RIGHT.equals(position)) {
    positionPair=getBottomRight(target,offsetWidth,offsetHeight);
  }
 else   if (CalloutPosition.TOP_RIGHT.equals(position)) {
    positionPair=getTopRight(target,offsetWidth,offsetHeight);
  }
  setPopupPosition(positionPair.getFirst(),positionPair.getSecond());
}",0.4789473684210526
188335,"private void loadMap(){
  if (pluginParameters.isEmpty()) {
    deactivatedPlugins=new ArrayList<>();
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,new PluginParameter(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,""String_Node_Str"",PluginParameterType.PLUGIN_SIP_TO_AIP,""String_Node_Str"",true,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,new PluginParameter(RodaConstants.PLUGIN_PARAMS_PARENT_ID,""String_Node_Str"",PluginParameterType.AIP_ID,""String_Node_Str"",false,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,new PluginParameter(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",false,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK,AntivirusPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,AntivirusPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION,DescriptiveMetadataValidationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,DescriptiveMetadataValidationPlugin.getStaticDescription()));
    PluginManager pluginManager=RodaCoreFactory.getPluginManager();
    Plugin<?> plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_VERAPDF);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK,plugin.getName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,plugin.getDescription()));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_VERAPDF);
    }
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON,new PluginParameter(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON,PremisSkeletonPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,PremisSkeletonPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK,VerifyProducerAuthorizationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,VerifyProducerAuthorizationPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION,SiegfriedPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,SiegfriedPlugin.getStaticDescription()));
    plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,""String_Node_Str""));
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,""String_Node_Str""));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT);
    }
    plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION,plugin.getName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,plugin.getDescription()));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE);
    }
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT,AutoAcceptSIPPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,AutoAcceptSIPPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_REPLICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_REPLICATION,ReplicationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,ReplicationPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION,""String_Node_Str"",PluginParameterType.STRING,""String_Node_Str"",false,false,""String_Node_Str""));
  }
}","private void loadMap(){
  if (pluginParameters.isEmpty()) {
    deactivatedPlugins=new ArrayList<>();
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,new PluginParameter(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,""String_Node_Str"",PluginParameterType.PLUGIN_SIP_TO_AIP,""String_Node_Str"",true,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,new PluginParameter(RodaConstants.PLUGIN_PARAMS_PARENT_ID,""String_Node_Str"",PluginParameterType.AIP_ID,""String_Node_Str"",false,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,new PluginParameter(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",false,false,""String_Node_Str""));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VIRUS_CHECK,AntivirusPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,AntivirusPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DESCRIPTIVE_METADATA_VALIDATION,DescriptiveMetadataValidationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,DescriptiveMetadataValidationPlugin.getStaticDescription()));
    PluginManager pluginManager=RodaCoreFactory.getPluginManager();
    Plugin<?> plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_VERAPDF);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_VERAPDF_CHECK,plugin.getName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,plugin.getDescription()));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_VERAPDF);
    }
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON,new PluginParameter(RodaConstants.PLUGIN_PARAMS_CREATE_PREMIS_SKELETON,PremisSkeletonPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,PremisSkeletonPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_PRODUCER_AUTHORIZATION_CHECK,VerifyUserAuthorizationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,true,VerifyUserAuthorizationPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FILE_FORMAT_IDENTIFICATION,SiegfriedPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,SiegfriedPlugin.getStaticDescription()));
    plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FEATURE_EXTRACTION,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,""String_Node_Str""));
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_FULL_TEXT_EXTRACTION,""String_Node_Str"",PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,""String_Node_Str""));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_TIKA_FULLTEXT);
    }
    plugin=pluginManager.getPlugin(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE);
    if (plugin != null) {
      pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_DIGITAL_SIGNATURE_VALIDATION,plugin.getName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,plugin.getDescription()));
    }
 else {
      deactivatedPlugins.add(RodaConstants.PLUGIN_CLASS_DIGITAL_SIGNATURE);
    }
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_AUTO_ACCEPT,AutoAcceptSIPPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,AutoAcceptSIPPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DO_REPLICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_DO_REPLICATION,ReplicationPlugin.getStaticName(),PluginParameterType.BOOLEAN,""String_Node_Str"",true,false,ReplicationPlugin.getStaticDescription()));
    pluginParameters.put(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION,new PluginParameter(RodaConstants.PLUGIN_PARAMS_EMAIL_NOTIFICATION,""String_Node_Str"",PluginParameterType.STRING,""String_Node_Str"",false,false,""String_Node_Str""));
  }
}",0.9983097401225438
188336,"private Report verifyProducerAuthorization(IndexService index,ModelService model,StorageService storage,List<AIP> aips){
  return executePlugin(index,model,storage,aips,VerifyProducerAuthorizationPlugin.class.getName());
}","private Report verifyProducerAuthorization(IndexService index,ModelService model,StorageService storage,List<AIP> aips){
  return executePlugin(index,model,storage,aips,VerifyUserAuthorizationPlugin.class.getName());
}",0.9818181818181818
188337,"String pluginLabel(String name,String version);",String pluginLabel(String name);,0.810126582278481
188338,"public static void appraisal(User user,SelectedItems<IndexedAIP> selected,boolean accept,String rejectReason,Locale locale) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  List<String> listOfIds=consolidate(user,IndexedAIP.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Date now=new Date();
  Map<String,Pair<Integer,Integer>> jobState=new HashMap<>();
  List<String> aipsToDelete=new ArrayList<>();
  String userAgentId;
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(user.getName(),model,index,notifyAgent);
    userAgentId=pm.getId();
  }
 catch (  AlreadyExistsException e) {
    userAgentId=IdUtils.getUserAgentId(user.getName());
  }
catch (  ValidationException e) {
    throw new GenericException(e);
  }
  for (  String aipId : listOfIds) {
    AIP aip=model.retrieveAIP(aipId);
    String jobId=aip.getIngestJobId();
    if (accept) {
      aip.setState(AIPState.ACTIVE);
      model.updateAIPState(aip,user.getName());
      String id=IdUtils.createPreservationMetadataId(PreservationMetadataType.EVENT);
      PreservationEventType type=PreservationEventType.ACCESSION;
      String preservationEventDescription=AutoAcceptSIPPlugin.DESCRIPTION;
      List<LinkingIdentifier> sources=new ArrayList<>();
      List<LinkingIdentifier> outcomes=Arrays.asList(PluginHelper.getLinkingIdentifier(aipId,RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
      PluginState outcome=PluginState.SUCCESS;
      String outcomeDetailNote=AutoAcceptSIPPlugin.SUCCESS_MESSAGE;
      String outcomeDetailExtension=null;
      boolean notifyEvent=true;
      try {
        ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,now,type.toString(),preservationEventDescription,sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,Arrays.asList(userAgentId));
        model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipId,null,null,null,premisEvent,notifyEvent);
      }
 catch (      AlreadyExistsException|ValidationException e) {
        throw new GenericException(e);
      }
    }
 else {
      model.deleteAIP(aipId);
      aipsToDelete.add(aipId);
    }
    Job job=model.retrieveJob(jobId);
    Report report=model.retrieveJobReport(jobId,aipId,true);
    Report reportItem=new Report();
    Messages messages=RodaCoreFactory.getI18NMessages(locale);
    reportItem.setTitle(messages.getTranslation(RodaConstants.I18N_UI_APPRAISAL));
    reportItem.setPlugin(user.getName());
    reportItem.setPluginDetails(rejectReason);
    reportItem.setPluginState(accept ? PluginState.SUCCESS : PluginState.FAILURE);
    reportItem.setOutcomeObjectState(accept ? AIPState.ACTIVE : AIPState.DELETED);
    reportItem.setDateCreated(now);
    report.addReport(reportItem);
    model.createOrUpdateJobReport(report,job);
    Pair<Integer,Integer> pair=jobState.get(jobId);
    if (pair == null) {
      jobState.put(jobId,Pair.of(1,accept ? 1 : 0));
    }
 else {
      jobState.put(jobId,Pair.of(pair.getFirst() + 1,pair.getSecond() + (accept ? 1 : 0)));
    }
  }
  try {
    Job job=new Job();
    job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
    job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
    job.setSourceObjects(SelectedItemsList.create(AIP.class,aipsToDelete));
    Jobs.createJob(user,job,false);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"");
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : jobState.entrySet()) {
    String jobId=entry.getKey();
    int total=entry.getValue().getFirst();
    int accepted=entry.getValue().getSecond();
    int rejected=total - accepted;
    Job job=model.retrieveJob(jobId);
    if (rejected > 0) {
      job.getJobStats().setSourceObjectsProcessedWithSuccess(job.getJobStats().getSourceObjectsProcessedWithSuccess() - rejected);
      job.getJobStats().setSourceObjectsProcessedWithFailure(job.getJobStats().getSourceObjectsProcessedWithFailure() + rejected);
    }
    job.getJobStats().setOutcomeObjectsWithManualIntervention(job.getJobStats().getOutcomeObjectsWithManualIntervention() - total);
    model.createOrUpdateJob(job);
  }
  RodaCoreFactory.getIndexService().commit(IndexedAIP.class,Job.class,IndexedReport.class,IndexedPreservationEvent.class);
}","public static void appraisal(User user,SelectedItems<IndexedAIP> selected,boolean accept,String rejectReason,Locale locale) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  List<String> listOfIds=consolidate(user,IndexedAIP.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Date now=new Date();
  Map<String,Pair<Integer,Integer>> jobState=new HashMap<>();
  List<String> aipsToDelete=new ArrayList<>();
  String userAgentId;
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(user.getName(),model,index,notifyAgent);
    userAgentId=pm.getId();
  }
 catch (  AlreadyExistsException e) {
    userAgentId=IdUtils.getUserAgentId(user.getName());
  }
catch (  ValidationException e) {
    throw new GenericException(e);
  }
  for (  String aipId : listOfIds) {
    AIP aip=model.retrieveAIP(aipId);
    String jobId=aip.getIngestJobId();
    if (accept) {
      aip.setState(AIPState.ACTIVE);
      model.updateAIPState(aip,user.getName());
      String id=IdUtils.createPreservationMetadataId(PreservationMetadataType.EVENT);
      PreservationEventType type=PreservationEventType.ACCESSION;
      String preservationEventDescription=AutoAcceptSIPPlugin.DESCRIPTION;
      List<LinkingIdentifier> sources=new ArrayList<>();
      List<LinkingIdentifier> outcomes=Arrays.asList(PluginHelper.getLinkingIdentifier(aipId,RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
      PluginState outcome=PluginState.SUCCESS;
      String outcomeDetailNote=AutoAcceptSIPPlugin.SUCCESS_MESSAGE;
      String outcomeDetailExtension=null;
      boolean notifyEvent=true;
      try {
        ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,now,type.toString(),preservationEventDescription,sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,Arrays.asList(userAgentId));
        model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipId,null,null,null,premisEvent,notifyEvent);
      }
 catch (      AlreadyExistsException|ValidationException e) {
        throw new GenericException(e);
      }
    }
 else {
      model.deleteAIP(aipId);
      aipsToDelete.add(aipId);
    }
    Job job=model.retrieveJob(jobId);
    Report report=model.retrieveJobReport(jobId,aipId,true);
    Report reportItem=new Report();
    Messages messages=RodaCoreFactory.getI18NMessages(locale);
    reportItem.setTitle(messages.getTranslation(RodaConstants.I18N_UI_APPRAISAL));
    reportItem.setPlugin(messages.getTranslation(RodaConstants.I18N_UI_APPRAISAL));
    reportItem.setPluginDetails(rejectReason);
    reportItem.setPluginState(accept ? PluginState.SUCCESS : PluginState.FAILURE);
    reportItem.setOutcomeObjectState(accept ? AIPState.ACTIVE : AIPState.DELETED);
    reportItem.setDateCreated(now);
    report.addReport(reportItem);
    model.createOrUpdateJobReport(report,job);
    Pair<Integer,Integer> pair=jobState.get(jobId);
    if (pair == null) {
      jobState.put(jobId,Pair.of(1,accept ? 1 : 0));
    }
 else {
      jobState.put(jobId,Pair.of(pair.getFirst() + 1,pair.getSecond() + (accept ? 1 : 0)));
    }
  }
  try {
    Job job=new Job();
    job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
    job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
    job.setSourceObjects(SelectedItemsList.create(AIP.class,aipsToDelete));
    Jobs.createJob(user,job,false);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"");
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : jobState.entrySet()) {
    String jobId=entry.getKey();
    int total=entry.getValue().getFirst();
    int accepted=entry.getValue().getSecond();
    int rejected=total - accepted;
    Job job=model.retrieveJob(jobId);
    if (rejected > 0) {
      job.getJobStats().setSourceObjectsProcessedWithSuccess(job.getJobStats().getSourceObjectsProcessedWithSuccess() - rejected);
      job.getJobStats().setSourceObjectsProcessedWithFailure(job.getJobStats().getSourceObjectsProcessedWithFailure() + rejected);
    }
    job.getJobStats().setOutcomeObjectsWithManualIntervention(job.getJobStats().getOutcomeObjectsWithManualIntervention() - total);
    model.createOrUpdateJob(job);
  }
  RodaCoreFactory.getIndexService().commit(IndexedAIP.class,Job.class,IndexedReport.class,IndexedPreservationEvent.class);
}",0.992643780650914
188339,"@Override protected void configureDisplay(CellTable<IndexedReport> display){
  sourceObjectColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (report.getSourceObjectOriginalIds().isEmpty()) {
          value=report.getSourceObjectId();
        }
 else {
          value=StringUtils.prettyPrint(report.getSourceObjectOriginalIds());
        }
        value=report.getSourceObjectOriginalName() + ""String_Node_Str"" + value+ ""String_Node_Str"";
      }
      return value;
    }
  }
;
  outcomeObjectColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (StringUtils.isNotBlank(report.getOutcomeObjectLabel())) {
          value=report.getOutcomeObjectLabel() + ""String_Node_Str"" + report.getOutcomeObjectId()+ ""String_Node_Str"";
        }
 else {
          value=report.getOutcomeObjectId();
        }
      }
      return value;
    }
  }
;
  updatedDateColumn=new Column<IndexedReport,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedReport job){
      return job != null ? job.getDateUpdated() : null;
    }
  }
;
  lastPluginRunColumn=new TextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport job){
      String value=null;
      if (job != null && job.getPlugin() != null) {
        PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
        String pluginName;
        if (pluginInfo != null) {
          pluginName=pluginInfo.getName();
        }
 else {
          pluginName=job.getPlugin();
        }
        value=messages.pluginLabel(pluginName,job.getPluginVersion());
      }
      return value;
    }
  }
;
  lastPluginRunStateColumn=new Column<IndexedReport,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedReport report){
      SafeHtml ret=null;
      if (report != null) {
switch (report.getPluginState()) {
case SUCCESS:
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.SUCCESS) + ""String_Node_Str"");
        break;
case RUNNING:
      ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.RUNNING) + ""String_Node_Str"");
    break;
case FAILURE:
default :
  ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.FAILURE) + ""String_Node_Str"");
break;
}
}
return ret;
}
}
;
completionStatusColumn=new TextColumn<IndexedReport>(){
@Override public String getValue(IndexedReport report){
String value=""String_Node_Str"";
if (report != null) {
value=report.getStepsCompleted() + ""String_Node_Str"" + messages.of()+ ""String_Node_Str""+ report.getTotalSteps()+ ""String_Node_Str""+ report.getCompletionPercentage()+ ""String_Node_Str"";
}
return value;
}
}
;
sourceObjectColumn.setSortable(true);
outcomeObjectColumn.setSortable(true);
updatedDateColumn.setSortable(true);
lastPluginRunColumn.setSortable(true);
lastPluginRunStateColumn.setSortable(true);
completionStatusColumn.setSortable(false);
addColumn(sourceObjectColumn,messages.showSIPExtended(),true,false);
addColumn(outcomeObjectColumn,messages.showAIPExtended(),true,false);
addColumn(updatedDateColumn,messages.reportLastUpdatedAt(),true,false,11);
addColumn(lastPluginRunColumn,messages.reportLastRunTask(),true,false);
addColumn(lastPluginRunStateColumn,messages.reportStatus(),true,false,8);
addColumn(completionStatusColumn,messages.reportProgress(),true,false,8);
Label emptyInfo=new Label(messages.noItemsToDisplay());
display.setEmptyTableWidget(emptyInfo);
display.getColumnSortList().push(new ColumnSortInfo(updatedDateColumn,false));
}","@Override protected void configureDisplay(CellTable<IndexedReport> display){
  sourceObjectColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (report.getSourceObjectOriginalIds().isEmpty()) {
          value=report.getSourceObjectId();
        }
 else {
          value=StringUtils.prettyPrint(report.getSourceObjectOriginalIds());
        }
        value=report.getSourceObjectOriginalName() + ""String_Node_Str"" + value+ ""String_Node_Str"";
      }
      return value;
    }
  }
;
  outcomeObjectColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (StringUtils.isNotBlank(report.getOutcomeObjectLabel())) {
          value=report.getOutcomeObjectLabel() + ""String_Node_Str"" + report.getOutcomeObjectId()+ ""String_Node_Str"";
        }
 else {
          value=report.getOutcomeObjectId();
        }
      }
      return value;
    }
  }
;
  updatedDateColumn=new Column<IndexedReport,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedReport job){
      return job != null ? job.getDateUpdated() : null;
    }
  }
;
  lastPluginRunColumn=new TextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport job){
      String value=null;
      if (job != null && job.getPlugin() != null) {
        PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
        String pluginName;
        if (pluginInfo != null) {
          pluginName=pluginInfo.getName();
        }
 else {
          pluginName=job.getPlugin();
        }
        if (StringUtils.isNotBlank(job.getPluginVersion())) {
          value=messages.pluginLabelWithVersion(pluginName,job.getPluginVersion());
        }
 else {
          value=messages.pluginLabel(pluginName);
        }
      }
      return value;
    }
  }
;
  lastPluginRunStateColumn=new Column<IndexedReport,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedReport report){
      SafeHtml ret=null;
      if (report != null) {
switch (report.getPluginState()) {
case SUCCESS:
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.SUCCESS) + ""String_Node_Str"");
        break;
case RUNNING:
      ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.RUNNING) + ""String_Node_Str"");
    break;
case FAILURE:
default :
  ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.FAILURE) + ""String_Node_Str"");
break;
}
}
return ret;
}
}
;
completionStatusColumn=new TextColumn<IndexedReport>(){
@Override public String getValue(IndexedReport report){
String value=""String_Node_Str"";
if (report != null) {
value=report.getStepsCompleted() + ""String_Node_Str"" + messages.of()+ ""String_Node_Str""+ report.getTotalSteps()+ ""String_Node_Str""+ report.getCompletionPercentage()+ ""String_Node_Str"";
}
return value;
}
}
;
sourceObjectColumn.setSortable(true);
outcomeObjectColumn.setSortable(true);
updatedDateColumn.setSortable(true);
lastPluginRunColumn.setSortable(true);
lastPluginRunStateColumn.setSortable(true);
completionStatusColumn.setSortable(false);
addColumn(sourceObjectColumn,messages.showSIPExtended(),true,false);
addColumn(outcomeObjectColumn,messages.showAIPExtended(),true,false);
addColumn(updatedDateColumn,messages.reportLastUpdatedAt(),true,false,11);
addColumn(lastPluginRunColumn,messages.reportLastRunTask(),true,false);
addColumn(lastPluginRunStateColumn,messages.reportStatus(),true,false,8);
addColumn(completionStatusColumn,messages.reportProgress(),true,false,8);
Label emptyInfo=new Label(messages.noItemsToDisplay());
display.setEmptyTableWidget(emptyInfo);
display.getColumnSortList().push(new ColumnSortInfo(updatedDateColumn,false));
}",0.9806108224559624
188340,"@Override protected void configureDisplay(CellTable<IndexedReport> display){
  sourceColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        value=report.getSourceObjectOriginalIds().isEmpty() ? report.getSourceObjectId() : StringUtils.prettyPrint(report.getSourceObjectOriginalIds());
        sourceClass=report.getSourceObjectClass();
      }
      return value;
    }
  }
;
  outcomeColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (StringUtils.isNotBlank(report.getOutcomeObjectLabel())) {
          value=report.getOutcomeObjectLabel() + ""String_Node_Str"" + report.getOutcomeObjectId()+ ""String_Node_Str"";
        }
 else {
          value=report.getOutcomeObjectId();
        }
      }
      return value;
    }
  }
;
  updatedDateColumn=new Column<IndexedReport,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedReport job){
      return job != null ? job.getDateUpdated() : null;
    }
  }
;
  lastPluginRunColumn=new TextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport job){
      String value=null;
      if (job != null) {
        String jobPlugin=job.getPlugin();
        if (jobPlugin != null) {
          PluginInfo pluginInfo=pluginsInfo.get(jobPlugin);
          String pluginName;
          if (pluginInfo != null) {
            pluginName=pluginInfo.getName();
          }
 else {
            pluginName=jobPlugin;
          }
          value=messages.pluginLabel(pluginName,job.getPluginVersion());
        }
      }
      return value;
    }
  }
;
  lastPluginRunStateColumn=new Column<IndexedReport,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedReport report){
      SafeHtml ret=null;
      if (report != null) {
switch (report.getPluginState()) {
case SUCCESS:
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.SUCCESS) + ""String_Node_Str"");
        break;
case RUNNING:
      ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.RUNNING) + ""String_Node_Str"");
    break;
case FAILURE:
default :
  ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.FAILURE) + ""String_Node_Str"");
break;
}
}
return ret;
}
}
;
completionStatusColumn=new TextColumn<IndexedReport>(){
@Override public String getValue(IndexedReport report){
String value=""String_Node_Str"";
if (report != null) {
value=report.getStepsCompleted() + ""String_Node_Str"" + messages.of()+ ""String_Node_Str""+ report.getTotalSteps()+ ""String_Node_Str""+ report.getCompletionPercentage()+ ""String_Node_Str"";
}
return value;
}
}
;
sourceColumn.setSortable(true);
outcomeColumn.setSortable(true);
updatedDateColumn.setSortable(true);
lastPluginRunColumn.setSortable(true);
lastPluginRunStateColumn.setSortable(true);
completionStatusColumn.setSortable(false);
addColumn(sourceColumn,messages.reportSource(),true,false);
addColumn(outcomeColumn,messages.reportOutcome(),true,false);
addColumn(updatedDateColumn,messages.reportLastUpdatedAt(),true,false,11);
addColumn(lastPluginRunColumn,messages.reportLastRunTask(),true,false);
addColumn(lastPluginRunStateColumn,messages.reportStatus(),true,false,8);
addColumn(completionStatusColumn,messages.reportProgress(),true,false,8);
Label emptyInfo=new Label(messages.noItemsToDisplay());
display.setEmptyTableWidget(emptyInfo);
display.getColumnSortList().push(new ColumnSortInfo(updatedDateColumn,false));
}","@Override protected void configureDisplay(CellTable<IndexedReport> display){
  sourceColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        value=report.getSourceObjectOriginalIds().isEmpty() ? report.getSourceObjectId() : StringUtils.prettyPrint(report.getSourceObjectOriginalIds());
        sourceClass=report.getSourceObjectClass();
      }
      return value;
    }
  }
;
  outcomeColumn=new TooltipTextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport report){
      String value=""String_Node_Str"";
      if (report != null) {
        if (StringUtils.isNotBlank(report.getOutcomeObjectLabel())) {
          value=report.getOutcomeObjectLabel() + ""String_Node_Str"" + report.getOutcomeObjectId()+ ""String_Node_Str"";
        }
 else {
          value=report.getOutcomeObjectId();
        }
      }
      return value;
    }
  }
;
  updatedDateColumn=new Column<IndexedReport,Date>(new DateCell(DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT))){
    @Override public Date getValue(    IndexedReport job){
      return job != null ? job.getDateUpdated() : null;
    }
  }
;
  lastPluginRunColumn=new TextColumn<IndexedReport>(){
    @Override public String getValue(    IndexedReport job){
      String value=null;
      if (job != null) {
        String jobPlugin=job.getPlugin();
        if (jobPlugin != null) {
          PluginInfo pluginInfo=pluginsInfo.get(jobPlugin);
          String pluginName;
          if (pluginInfo != null) {
            pluginName=pluginInfo.getName();
          }
 else {
            pluginName=jobPlugin;
          }
          if (StringUtils.isNotBlank(job.getPluginVersion())) {
            value=messages.pluginLabelWithVersion(pluginName,job.getPluginVersion());
          }
 else {
            value=messages.pluginLabel(pluginName);
          }
        }
      }
      return value;
    }
  }
;
  lastPluginRunStateColumn=new Column<IndexedReport,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    IndexedReport report){
      SafeHtml ret=null;
      if (report != null) {
switch (report.getPluginState()) {
case SUCCESS:
          ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.SUCCESS) + ""String_Node_Str"");
        break;
case RUNNING:
      ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.RUNNING) + ""String_Node_Str"");
    break;
case FAILURE:
default :
  ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"" + messages.pluginStateMessage(PluginState.FAILURE) + ""String_Node_Str"");
break;
}
}
return ret;
}
}
;
completionStatusColumn=new TextColumn<IndexedReport>(){
@Override public String getValue(IndexedReport report){
String value=""String_Node_Str"";
if (report != null) {
value=report.getStepsCompleted() + ""String_Node_Str"" + messages.of()+ ""String_Node_Str""+ report.getTotalSteps()+ ""String_Node_Str""+ report.getCompletionPercentage()+ ""String_Node_Str"";
}
return value;
}
}
;
sourceColumn.setSortable(true);
outcomeColumn.setSortable(true);
updatedDateColumn.setSortable(true);
lastPluginRunColumn.setSortable(true);
lastPluginRunStateColumn.setSortable(true);
completionStatusColumn.setSortable(false);
addColumn(sourceColumn,messages.reportSource(),true,false);
addColumn(outcomeColumn,messages.reportOutcome(),true,false);
addColumn(updatedDateColumn,messages.reportLastUpdatedAt(),true,false,11);
addColumn(lastPluginRunColumn,messages.reportLastRunTask(),true,false);
addColumn(lastPluginRunStateColumn,messages.reportStatus(),true,false,8);
addColumn(completionStatusColumn,messages.reportProgress(),true,false,8);
Label emptyInfo=new Label(messages.noItemsToDisplay());
display.setEmptyTableWidget(emptyInfo);
display.getColumnSortList().push(new ColumnSortInfo(updatedDateColumn,false));
}",0.97916936214258
188341,"private void createPluginSipToAipLayout(){
  List<PluginType> plugins=Arrays.asList(PluginType.SIP_TO_AIP);
  BrowserService.Util.getInstance().retrievePluginsInfo(plugins,new AsyncCallback<List<PluginInfo>>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    List<PluginInfo> pluginsInfo){
      Label parameterName=new Label(parameter.getName());
      layout.add(parameterName);
      addHelp();
      FlowPanel radioGroup=new FlowPanel();
      PluginUtils.sortByName(pluginsInfo);
      for (      final PluginInfo pluginInfo : pluginsInfo) {
        if (pluginInfo != null) {
          RadioButton pRadio=new RadioButton(parameter.getName(),messages.pluginLabel(pluginInfo.getName(),pluginInfo.getVersion()));
          if (pluginInfo.getId().equals(parameter.getDefaultValue())) {
            pRadio.setValue(true);
            value=pluginInfo.getId();
          }
          Label pHelp=new Label(pluginInfo.getDescription());
          pRadio.setTitle(""String_Node_Str"");
          radioGroup.add(pRadio);
          radioGroup.add(pHelp);
          pRadio.addStyleName(""String_Node_Str"");
          pHelp.addStyleName(""String_Node_Str"");
          pRadio.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
            @Override public void onValueChange(            ValueChangeEvent<Boolean> event){
              if (event.getValue()) {
                value=pluginInfo.getId();
              }
            }
          }
);
        }
 else {
          GWT.log(""String_Node_Str"");
        }
      }
      layout.add(radioGroup);
      radioGroup.addStyleName(""String_Node_Str"");
      parameterName.addStyleName(""String_Node_Str"");
    }
  }
);
}","private void createPluginSipToAipLayout(){
  List<PluginType> plugins=Arrays.asList(PluginType.SIP_TO_AIP);
  BrowserService.Util.getInstance().retrievePluginsInfo(plugins,new AsyncCallback<List<PluginInfo>>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    List<PluginInfo> pluginsInfo){
      Label parameterName=new Label(parameter.getName());
      layout.add(parameterName);
      addHelp();
      FlowPanel radioGroup=new FlowPanel();
      PluginUtils.sortByName(pluginsInfo);
      for (      final PluginInfo pluginInfo : pluginsInfo) {
        if (pluginInfo != null) {
          RadioButton pRadio=new RadioButton(parameter.getName(),messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion()));
          if (pluginInfo.getId().equals(parameter.getDefaultValue())) {
            pRadio.setValue(true);
            value=pluginInfo.getId();
          }
          Label pHelp=new Label(pluginInfo.getDescription());
          pRadio.setTitle(""String_Node_Str"");
          radioGroup.add(pRadio);
          radioGroup.add(pHelp);
          pRadio.addStyleName(""String_Node_Str"");
          pHelp.addStyleName(""String_Node_Str"");
          pRadio.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
            @Override public void onValueChange(            ValueChangeEvent<Boolean> event){
              if (event.getValue()) {
                value=pluginInfo.getId();
              }
            }
          }
);
        }
 else {
          GWT.log(""String_Node_Str"");
        }
      }
      layout.add(radioGroup);
      radioGroup.addStyleName(""String_Node_Str"");
      parameterName.addStyleName(""String_Node_Str"");
    }
  }
);
}",0.9968069666182874
188342,"@Override public void onSuccess(List<PluginInfo> pluginsInfo){
  Label parameterName=new Label(parameter.getName());
  layout.add(parameterName);
  addHelp();
  FlowPanel radioGroup=new FlowPanel();
  PluginUtils.sortByName(pluginsInfo);
  for (  final PluginInfo pluginInfo : pluginsInfo) {
    if (pluginInfo != null) {
      RadioButton pRadio=new RadioButton(parameter.getName(),messages.pluginLabel(pluginInfo.getName(),pluginInfo.getVersion()));
      if (pluginInfo.getId().equals(parameter.getDefaultValue())) {
        pRadio.setValue(true);
        value=pluginInfo.getId();
      }
      Label pHelp=new Label(pluginInfo.getDescription());
      pRadio.setTitle(""String_Node_Str"");
      radioGroup.add(pRadio);
      radioGroup.add(pHelp);
      pRadio.addStyleName(""String_Node_Str"");
      pHelp.addStyleName(""String_Node_Str"");
      pRadio.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
        @Override public void onValueChange(        ValueChangeEvent<Boolean> event){
          if (event.getValue()) {
            value=pluginInfo.getId();
          }
        }
      }
);
    }
 else {
      GWT.log(""String_Node_Str"");
    }
  }
  layout.add(radioGroup);
  radioGroup.addStyleName(""String_Node_Str"");
  parameterName.addStyleName(""String_Node_Str"");
}","@Override public void onSuccess(List<PluginInfo> pluginsInfo){
  Label parameterName=new Label(parameter.getName());
  layout.add(parameterName);
  addHelp();
  FlowPanel radioGroup=new FlowPanel();
  PluginUtils.sortByName(pluginsInfo);
  for (  final PluginInfo pluginInfo : pluginsInfo) {
    if (pluginInfo != null) {
      RadioButton pRadio=new RadioButton(parameter.getName(),messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion()));
      if (pluginInfo.getId().equals(parameter.getDefaultValue())) {
        pRadio.setValue(true);
        value=pluginInfo.getId();
      }
      Label pHelp=new Label(pluginInfo.getDescription());
      pRadio.setTitle(""String_Node_Str"");
      radioGroup.add(pRadio);
      radioGroup.add(pHelp);
      pRadio.addStyleName(""String_Node_Str"");
      pHelp.addStyleName(""String_Node_Str"");
      pRadio.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
        @Override public void onValueChange(        ValueChangeEvent<Boolean> event){
          if (event.getValue()) {
            value=pluginInfo.getId();
          }
        }
      }
);
    }
 else {
      GWT.log(""String_Node_Str"");
    }
  }
  layout.add(radioGroup);
  radioGroup.addStyleName(""String_Node_Str"");
  parameterName.addStyleName(""String_Node_Str"");
}",0.9957347809228384
188343,"public ShowJob(Job job,Map<String,PluginInfo> pluginsInfo){
  this.job=job;
  this.pluginsInfo=pluginsInfo;
  boolean isIngest=false;
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_STATE),new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_NAME));
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getUUID()));
  if (job.getPluginType().equals(PluginType.INGEST)) {
    ingestJobReports=new IngestJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(ingestJobReports);
    simpleJobReports=new SimpleJobReportList();
    isIngest=true;
  }
 else {
    simpleJobReports=new SimpleJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(simpleJobReports);
    ingestJobReports=new IngestJobReportList();
  }
  ingestJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  ingestJobReportsSearchPanel.setList(ingestJobReports);
  simpleJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  simpleJobReportsSearchPanel.setList(simpleJobReports);
  jobReportStatus=new FlowPanel();
  jobReportLastAction=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_STATE,jobReportStatus);
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_NAME,jobReportLastAction);
  initWidget(uiBinder.createAndBindUi(this));
  simpleJobReportsSearchPanel.setVisible(!isIngest);
  simpleJobReports.setVisible(!isIngest);
  ingestJobReportsSearchPanel.setVisible(isIngest);
  ingestJobReports.setVisible(isIngest);
  buttonProcess.setVisible(isIngest);
  name.setText(job.getName());
  creator.setText(job.getUsername());
  dateStarted.setText(dateTimeFormat.format(job.getStartDate()));
  update();
  SelectedItems<?> selected=job.getSourceObjects();
  selectedListPanel.setVisible(true);
  if (isIngest) {
    FacetUtils.bindFacets(ingestJobReports,facetPanels);
    if (isJobRunning()) {
      ingestJobReports.autoUpdate(PERIOD_MILLIS);
    }
    ingestJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=ingestJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showIngestSourceObjects(selected);
  }
 else {
    FacetUtils.bindFacets(simpleJobReports,facetPanels);
    if (isJobRunning()) {
      simpleJobReports.autoUpdate(PERIOD_MILLIS);
    }
    simpleJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=simpleJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showActionSourceObjects(selected);
  }
  PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
  if (pluginInfo != null) {
    plugin.setText(messages.pluginLabel(pluginInfo.getName(),pluginInfo.getVersion()));
    if (pluginInfo.getParameters().isEmpty()) {
      pluginPanel.setVisible(false);
      pluginOptions.setVisible(false);
    }
 else {
      pluginPanel.setVisible(true);
      pluginOptions.setVisible(true);
    }
    for (    PluginParameter parameter : pluginInfo.getParameters()) {
      if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
        createBooleanLayout(parameter);
      }
 else       if (PluginParameterType.STRING.equals(parameter.getType())) {
        createStringLayout(parameter);
      }
 else       if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
        createPluginSipToAipLayout(parameter);
      }
 else       if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
        createSelectAipLayout(parameter);
      }
 else {
        GWT.log(""String_Node_Str"");
        createStringLayout(parameter);
      }
    }
  }
 else {
    plugin.setText(job.getPlugin());
    pluginPanel.setVisible(false);
    pluginOptions.setVisible(false);
  }
}","public ShowJob(Job job,Map<String,PluginInfo> pluginsInfo){
  this.job=job;
  this.pluginsInfo=pluginsInfo;
  boolean isIngest=false;
  Facets facets=new Facets(new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_STATE),new SimpleFacetParameter(RodaConstants.JOB_REPORT_PLUGIN_NAME));
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getUUID()));
  if (job.getPluginType().equals(PluginType.INGEST)) {
    ingestJobReports=new IngestJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(ingestJobReports);
    simpleJobReports=new SimpleJobReportList();
    isIngest=true;
  }
 else {
    simpleJobReports=new SimpleJobReportList(new Filter(new SimpleFilterParameter(RodaConstants.JOB_REPORT_JOB_ID,job.getId())),facets,messages.reportList(),pluginsInfo,false);
    ListSelectionUtils.bindBrowseOpener(simpleJobReports);
    ingestJobReports=new IngestJobReportList();
  }
  ingestJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  ingestJobReportsSearchPanel.setList(ingestJobReports);
  simpleJobReportsSearchPanel=new SearchPanel(filter,RodaConstants.JOB_REPORT_SEARCH,true,messages.jobProcessedSearchPlaceHolder(),false,false,false);
  simpleJobReportsSearchPanel.setList(simpleJobReports);
  jobReportStatus=new FlowPanel();
  jobReportLastAction=new FlowPanel();
  Map<String,FlowPanel> facetPanels=new HashMap<>();
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_STATE,jobReportStatus);
  facetPanels.put(RodaConstants.JOB_REPORT_PLUGIN_NAME,jobReportLastAction);
  initWidget(uiBinder.createAndBindUi(this));
  simpleJobReportsSearchPanel.setVisible(!isIngest);
  simpleJobReports.setVisible(!isIngest);
  ingestJobReportsSearchPanel.setVisible(isIngest);
  ingestJobReports.setVisible(isIngest);
  buttonProcess.setVisible(isIngest);
  name.setText(job.getName());
  creator.setText(job.getUsername());
  dateStarted.setText(dateTimeFormat.format(job.getStartDate()));
  update();
  SelectedItems<?> selected=job.getSourceObjects();
  selectedListPanel.setVisible(true);
  if (isIngest) {
    FacetUtils.bindFacets(ingestJobReports,facetPanels);
    if (isJobRunning()) {
      ingestJobReports.autoUpdate(PERIOD_MILLIS);
    }
    ingestJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=ingestJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showIngestSourceObjects(selected);
  }
 else {
    FacetUtils.bindFacets(simpleJobReports,facetPanels);
    if (isJobRunning()) {
      simpleJobReports.autoUpdate(PERIOD_MILLIS);
    }
    simpleJobReports.getSelectionModel().addSelectionChangeHandler(new Handler(){
      @Override public void onSelectionChange(      SelectionChangeEvent event){
        Report jobReport=simpleJobReports.getSelectionModel().getSelectedObject();
        if (jobReport != null) {
          HistoryUtils.newHistory(ShowJobReport.RESOLVER,jobReport.getId());
        }
      }
    }
);
    showActionSourceObjects(selected);
  }
  PluginInfo pluginInfo=pluginsInfo.get(job.getPlugin());
  if (pluginInfo != null) {
    plugin.setText(messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion()));
    if (pluginInfo.getParameters().isEmpty()) {
      pluginPanel.setVisible(false);
      pluginOptions.setVisible(false);
    }
 else {
      pluginPanel.setVisible(true);
      pluginOptions.setVisible(true);
    }
    for (    PluginParameter parameter : pluginInfo.getParameters()) {
      if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
        createBooleanLayout(parameter);
      }
 else       if (PluginParameterType.STRING.equals(parameter.getType())) {
        createStringLayout(parameter);
      }
 else       if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
        createPluginSipToAipLayout(parameter);
      }
 else       if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
        createSelectAipLayout(parameter);
      }
 else {
        GWT.log(""String_Node_Str"");
        createStringLayout(parameter);
      }
    }
  }
 else {
    plugin.setText(job.getPlugin());
    pluginPanel.setVisible(false);
    pluginOptions.setVisible(false);
  }
}",0.9988049972840848
188344,"private void createPluginSipToAipLayout(PluginParameter parameter){
  String value=job.getPluginParameters().get(parameter.getId());
  if (value == null) {
    value=parameter.getDefaultValue();
  }
  if (StringUtils.isNotBlank(value)) {
    Label pluginLabel=new Label(parameter.getName());
    PluginInfo sipToAipPlugin=pluginsInfo.get(value);
    RadioButton pluginValue;
    pluginOptions.add(pluginLabel);
    addHelp(parameter.getDescription());
    if (sipToAipPlugin != null) {
      pluginValue=new RadioButton(parameter.getId(),messages.pluginLabel(sipToAipPlugin.getName(),sipToAipPlugin.getVersion()));
      pluginValue.setValue(true);
      pluginValue.setEnabled(false);
      pluginOptions.add(pluginValue);
      addHelp(sipToAipPlugin.getDescription());
    }
 else {
      pluginValue=new RadioButton(parameter.getId(),value);
      pluginValue.setValue(true);
      pluginValue.setEnabled(false);
      pluginOptions.add(pluginValue);
      GWT.log(""String_Node_Str"" + value);
    }
    pluginLabel.addStyleName(""String_Node_Str"");
    pluginValue.addStyleName(""String_Node_Str"");
  }
}","private void createPluginSipToAipLayout(PluginParameter parameter){
  String value=job.getPluginParameters().get(parameter.getId());
  if (value == null) {
    value=parameter.getDefaultValue();
  }
  if (StringUtils.isNotBlank(value)) {
    Label pluginLabel=new Label(parameter.getName());
    PluginInfo sipToAipPlugin=pluginsInfo.get(value);
    RadioButton pluginValue;
    pluginOptions.add(pluginLabel);
    addHelp(parameter.getDescription());
    if (sipToAipPlugin != null) {
      pluginValue=new RadioButton(parameter.getId(),messages.pluginLabelWithVersion(sipToAipPlugin.getName(),sipToAipPlugin.getVersion()));
      pluginValue.setValue(true);
      pluginValue.setEnabled(false);
      pluginOptions.add(pluginValue);
      addHelp(sipToAipPlugin.getDescription());
    }
 else {
      pluginValue=new RadioButton(parameter.getId(),value);
      pluginValue.setValue(true);
      pluginValue.setEnabled(false);
      pluginOptions.add(pluginValue);
      GWT.log(""String_Node_Str"" + value);
    }
    pluginLabel.addStyleName(""String_Node_Str"");
    pluginValue.addStyleName(""String_Node_Str"");
  }
}",0.9950517318938372
188345,"public ShowJobReport(IndexedReport jobReport){
  this.jobReport=jobReport;
  initWidget(uiBinder.createAndBindUi(this));
  job.setText(jobReport.getJobName());
  job.setHref(HistoryUtils.createHistoryHashLink(ShowJob.RESOLVER,jobReport.getJobId()));
  outcomeObjectState.setVisible(false);
  boolean hasSource=!jobReport.getSourceObjectOriginalIds().isEmpty() || !jobReport.getSourceObjectId().isEmpty();
  if (hasSource) {
    String idText=!jobReport.getSourceObjectOriginalIds().isEmpty() ? ""String_Node_Str"" + StringUtils.prettyPrint(jobReport.getSourceObjectOriginalIds()) + ""String_Node_Str"" : ""String_Node_Str"";
    if (StringUtils.isNotBlank(jobReport.getSourceObjectOriginalName())) {
      sourceObject.setText(jobReport.getSourceObjectOriginalName() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectLabel())) {
      sourceObject.setText(jobReport.getSourceObjectLabel() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectId())) {
      sourceObject.setText(jobReport.getSourceObjectId() + idText);
    }
 else {
      hasSource=false;
    }
    sourceObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getSourceObjectClass(),jobReport.getSourceObjectId())));
    sourceObjectLabel.setText(messages.jobReportSource(jobReport.getSourceObjectClass()));
  }
  sourceObjectLabel.setVisible(hasSource);
  sourceObject.setVisible(hasSource);
  boolean hasOutcome=StringUtils.isNotBlank(jobReport.getOutcomeObjectId()) && !jobReport.getOutcomeObjectId().equals(jobReport.getSourceObjectId());
  if (hasOutcome) {
    if (jobReport.getOutcomeObjectLabel() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectLabel());
    }
 else     if (jobReport.getOutcomeObjectId() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectId());
    }
 else {
      hasOutcome=false;
    }
    outcomeObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getOutcomeObjectClass(),jobReport.getOutcomeObjectId())));
    outcomeObjectLabel.setText(messages.jobReportOutcome(jobReport.getOutcomeObjectClass()));
    outcomeObjectState.setHTML(HtmlSnippetUtils.getAIPStateHTML(jobReport.getOutcomeObjectState()));
  }
  outcomeObject.setVisible(hasOutcome);
  outcomeObjectState.setVisible(hasOutcome);
  outcomeObjectLabel.setVisible(hasOutcome);
  DateTimeFormat dateTimeFormat=DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT);
  dateCreated.setText(dateTimeFormat.format(jobReport.getDateCreated()));
  dateUpdated.setText(dateTimeFormat.format(jobReport.getDateUpdated()));
  duration.setText(Humanize.durationInDHMS(jobReport.getDateCreated(),jobReport.getDateUpdated(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getPluginStateHTML(jobReport.getPluginState()));
  progress.setText(messages.showJobReportProgress(jobReport.getCompletionPercentage(),jobReport.getStepsCompleted(),jobReport.getTotalSteps()));
  ListSelectionUtils.bindLayout(jobReport,searchPrevious,searchNext,keyboardFocus,true,false,false);
  for (  Report reportItem : jobReport.getReports()) {
    FlowPanel panel=new FlowPanel();
    panel.setStyleName(""String_Node_Str"");
    panel.addStyleName(""String_Node_Str"");
    reportItems.add(panel);
    FlowPanel panelHeading=new FlowPanel();
    panelHeading.setStyleName(""String_Node_Str"");
    Label panelTitle=new Label(reportItem.getTitle());
    panelTitle.setStyleName(""String_Node_Str"");
    panelHeading.add(panelTitle);
    panel.add(panelHeading);
    FlowPanel panelBody=new FlowPanel();
    panelBody.addStyleName(""String_Node_Str"");
    panel.add(panelBody);
    Label attributeLabel=new Label(messages.reportAgent());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    Label attributeValue=new Label(messages.pluginLabel(reportItem.getPlugin(),reportItem.getPluginVersion()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportStartDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateCreated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportEndDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateUpdated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportOutcome());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    HTML outcomeHTML=new HTML(HtmlSnippetUtils.getPluginStateHTML(reportItem.getPluginState()));
    panelBody.add(outcomeHTML);
    if (reportItem.getPluginDetails() != null && !""String_Node_Str"".equals(reportItem.getPluginDetails())) {
      attributeLabel=new Label(messages.reportOutcomeDetails());
      attributeLabel.setStyleName(""String_Node_Str"");
      panelBody.add(attributeLabel);
      if (reportItem.isHtmlPluginDetails()) {
        attributeValue=new HTML(SafeHtmlUtils.fromTrustedString(reportItem.getPluginDetails()));
      }
 else {
        attributeValue=new Label(reportItem.getPluginDetails());
      }
      attributeValue.addStyleName(""String_Node_Str"");
      panelBody.add(attributeValue);
    }
  }
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.removeFromParent();
  }
}","public ShowJobReport(IndexedReport jobReport){
  this.jobReport=jobReport;
  initWidget(uiBinder.createAndBindUi(this));
  job.setText(jobReport.getJobName());
  job.setHref(HistoryUtils.createHistoryHashLink(ShowJob.RESOLVER,jobReport.getJobId()));
  outcomeObjectState.setVisible(false);
  boolean hasSource=!jobReport.getSourceObjectOriginalIds().isEmpty() || !jobReport.getSourceObjectId().isEmpty();
  if (hasSource) {
    String idText=!jobReport.getSourceObjectOriginalIds().isEmpty() ? ""String_Node_Str"" + StringUtils.prettyPrint(jobReport.getSourceObjectOriginalIds()) + ""String_Node_Str"" : ""String_Node_Str"";
    if (StringUtils.isNotBlank(jobReport.getSourceObjectOriginalName())) {
      sourceObject.setText(jobReport.getSourceObjectOriginalName() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectLabel())) {
      sourceObject.setText(jobReport.getSourceObjectLabel() + idText);
    }
 else     if (StringUtils.isNotBlank(jobReport.getSourceObjectId())) {
      sourceObject.setText(jobReport.getSourceObjectId() + idText);
    }
 else {
      hasSource=false;
    }
    sourceObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getSourceObjectClass(),jobReport.getSourceObjectId())));
    sourceObjectLabel.setText(messages.jobReportSource(jobReport.getSourceObjectClass()));
  }
  sourceObjectLabel.setVisible(hasSource);
  sourceObject.setVisible(hasSource);
  boolean hasOutcome=StringUtils.isNotBlank(jobReport.getOutcomeObjectId()) && !jobReport.getOutcomeObjectId().equals(jobReport.getSourceObjectId());
  if (hasOutcome) {
    if (jobReport.getOutcomeObjectLabel() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectLabel());
    }
 else     if (jobReport.getOutcomeObjectId() != null) {
      outcomeObject.setText(jobReport.getOutcomeObjectId());
    }
 else {
      hasOutcome=false;
    }
    outcomeObject.setHref(HistoryUtils.createHistoryHashLink(HistoryUtils.getHistoryUuidResolver(jobReport.getOutcomeObjectClass(),jobReport.getOutcomeObjectId())));
    outcomeObjectLabel.setText(messages.jobReportOutcome(jobReport.getOutcomeObjectClass()));
    outcomeObjectState.setHTML(HtmlSnippetUtils.getAIPStateHTML(jobReport.getOutcomeObjectState()));
  }
  outcomeObject.setVisible(hasOutcome);
  outcomeObjectState.setVisible(hasOutcome);
  outcomeObjectLabel.setVisible(hasOutcome);
  DateTimeFormat dateTimeFormat=DateTimeFormat.getFormat(RodaConstants.DEFAULT_DATETIME_FORMAT);
  dateCreated.setText(dateTimeFormat.format(jobReport.getDateCreated()));
  dateUpdated.setText(dateTimeFormat.format(jobReport.getDateUpdated()));
  duration.setText(Humanize.durationInDHMS(jobReport.getDateCreated(),jobReport.getDateUpdated(),DHMSFormat.LONG));
  status.setHTML(HtmlSnippetUtils.getPluginStateHTML(jobReport.getPluginState()));
  progress.setText(messages.showJobReportProgress(jobReport.getCompletionPercentage(),jobReport.getStepsCompleted(),jobReport.getTotalSteps()));
  ListSelectionUtils.bindLayout(jobReport,searchPrevious,searchNext,keyboardFocus,true,false,false);
  for (  Report reportItem : jobReport.getReports()) {
    FlowPanel panel=new FlowPanel();
    panel.setStyleName(""String_Node_Str"");
    panel.addStyleName(""String_Node_Str"");
    reportItems.add(panel);
    FlowPanel panelHeading=new FlowPanel();
    panelHeading.setStyleName(""String_Node_Str"");
    Label panelTitle=new Label(reportItem.getTitle());
    panelTitle.setStyleName(""String_Node_Str"");
    panelHeading.add(panelTitle);
    panel.add(panelHeading);
    FlowPanel panelBody=new FlowPanel();
    panelBody.addStyleName(""String_Node_Str"");
    panel.add(panelBody);
    Label attributeLabel=new Label(messages.reportAgent());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    String text;
    if (StringUtils.isNotBlank(reportItem.getPluginVersion())) {
      text=messages.pluginLabelWithVersion(reportItem.getPlugin(),reportItem.getPluginVersion());
    }
 else {
      text=messages.pluginLabel(reportItem.getPlugin());
    }
    Label attributeValue=new Label(text);
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportStartDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateCreated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportEndDatetime());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    attributeValue=new Label(dateTimeFormat.format(reportItem.getDateUpdated()));
    attributeValue.setStyleName(""String_Node_Str"");
    panelBody.add(attributeValue);
    attributeLabel=new Label(messages.reportOutcome());
    attributeLabel.setStyleName(""String_Node_Str"");
    panelBody.add(attributeLabel);
    HTML outcomeHTML=new HTML(HtmlSnippetUtils.getPluginStateHTML(reportItem.getPluginState()));
    panelBody.add(outcomeHTML);
    if (reportItem.getPluginDetails() != null && !""String_Node_Str"".equals(reportItem.getPluginDetails())) {
      attributeLabel=new Label(messages.reportOutcomeDetails());
      attributeLabel.setStyleName(""String_Node_Str"");
      panelBody.add(attributeLabel);
      if (reportItem.isHtmlPluginDetails()) {
        attributeValue=new HTML(SafeHtmlUtils.fromTrustedString(reportItem.getPluginDetails()));
      }
 else {
        attributeValue=new Label(reportItem.getPluginDetails());
      }
      attributeValue.addStyleName(""String_Node_Str"");
      panelBody.add(attributeValue);
    }
  }
  Element firstElement=this.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.removeFromParent();
  }
}",0.9686555565149816
188346,"protected void updateWorkflowOptions(){
  isListEmpty=true;
  if (selectedPlugin == null) {
    workflowListDescription.clear();
    workflowListDescriptionCategories.setText(""String_Node_Str"");
    workflowListDescription.setVisible(false);
    workflowListDescriptionCategories.setVisible(false);
    workflowOptions.setPluginInfo(null);
  }
 else {
    String pluginName=messages.pluginLabel(selectedPlugin.getName(),selectedPlugin.getVersion());
    name.setText(pluginName);
    workflowListTitle.setText(pluginName);
    String description=selectedPlugin.getDescription();
    if (description != null && description.length() > 0) {
      String[] split=description.split(""String_Node_Str"");
      workflowListDescription.clear();
      for (      String s : split) {
        Label descriptionLine=new Label(s);
        descriptionLine.addStyleName(""String_Node_Str"");
        descriptionLine.addStyleName(""String_Node_Str"");
        workflowListDescription.add(descriptionLine);
      }
      List<String> categoryTranslations=new ArrayList<>();
      for (      String category : selectedPlugin.getCategories()) {
        categoryTranslations.add(messages.showPluginCategories(category));
      }
      SafeHtml categories=messages.createJobCategoryWorkflow(categoryTranslations);
      workflowListDescriptionCategories.setHTML(categories);
      workflowListDescription.setVisible(true);
      workflowListDescriptionCategories.setVisible(true);
    }
 else {
      workflowListDescription.setVisible(false);
      workflowListDescriptionCategories.setVisible(false);
    }
    if (selectedPlugin.getParameters().isEmpty()) {
      workflowPanel.setVisible(false);
    }
 else {
      workflowPanel.setVisible(true);
      workflowOptions.setPluginInfo(selectedPlugin);
    }
    targetList.clear();
    List<String> rodaClasses=getPluginNames(selectedPlugin.getObjectClasses());
    for (    String objectClass : rodaClasses) {
      targetList.addItem(messages.allOfAObject(objectClass),objectClass);
    }
    targetList.addChangeHandler(new ChangeHandler(){
      @Override public void onChange(      ChangeEvent event){
        targetListPanel.clear();
        defineTargetInformation(targetList.getSelectedValue());
      }
    }
);
    targetListPanel.clear();
    defineTargetInformation(targetList.getSelectedValue());
  }
}","protected void updateWorkflowOptions(){
  isListEmpty=true;
  if (selectedPlugin == null) {
    workflowListDescription.clear();
    workflowListDescriptionCategories.setText(""String_Node_Str"");
    workflowListDescription.setVisible(false);
    workflowListDescriptionCategories.setVisible(false);
    workflowOptions.setPluginInfo(null);
  }
 else {
    String pluginName=messages.pluginLabelWithVersion(selectedPlugin.getName(),selectedPlugin.getVersion());
    name.setText(pluginName);
    workflowListTitle.setText(pluginName);
    String description=selectedPlugin.getDescription();
    if (description != null && description.length() > 0) {
      String[] split=description.split(""String_Node_Str"");
      workflowListDescription.clear();
      for (      String s : split) {
        Label descriptionLine=new Label(s);
        descriptionLine.addStyleName(""String_Node_Str"");
        descriptionLine.addStyleName(""String_Node_Str"");
        workflowListDescription.add(descriptionLine);
      }
      List<String> categoryTranslations=new ArrayList<>();
      for (      String category : selectedPlugin.getCategories()) {
        categoryTranslations.add(messages.showPluginCategories(category));
      }
      SafeHtml categories=messages.createJobCategoryWorkflow(categoryTranslations);
      workflowListDescriptionCategories.setHTML(categories);
      workflowListDescription.setVisible(true);
      workflowListDescriptionCategories.setVisible(true);
    }
 else {
      workflowListDescription.setVisible(false);
      workflowListDescriptionCategories.setVisible(false);
    }
    if (selectedPlugin.getParameters().isEmpty()) {
      workflowPanel.setVisible(false);
    }
 else {
      workflowPanel.setVisible(true);
      workflowOptions.setPluginInfo(selectedPlugin);
    }
    targetList.clear();
    List<String> rodaClasses=getPluginNames(selectedPlugin.getObjectClasses());
    for (    String objectClass : rodaClasses) {
      targetList.addItem(messages.allOfAObject(objectClass),objectClass);
    }
    targetList.addChangeHandler(new ChangeHandler(){
      @Override public void onChange(      ChangeEvent event){
        targetListPanel.clear();
        defineTargetInformation(targetList.getSelectedValue());
      }
    }
);
    targetListPanel.clear();
    defineTargetInformation(targetList.getSelectedValue());
  }
}",0.99765708200213
188347,"private Widget addPluginItemWidgetToWorkflowList(PluginInfo pluginInfo){
  FlowPanel panel=new FlowPanel();
  panel.addStyleName(""String_Node_Str"");
  panel.getElement().setAttribute(""String_Node_Str"",pluginInfo.getId());
  panel.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      FlowPanel panel=(FlowPanel)event.getSource();
      String selectedPluginId=panel.getElement().getAttribute(""String_Node_Str"");
      for (int i=0; i < workflowList.getWidgetCount(); i++) {
        Widget panelWidget=workflowList.getWidget(i);
        panelWidget.removeStyleName(""String_Node_Str"");
      }
      if (selectedPluginId != null) {
        CreateDefaultJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
        panel.addStyleName(""String_Node_Str"");
      }
      updateWorkflowOptions();
    }
  }
,ClickEvent.getType());
  FlowPanel itemImage=new FlowPanel();
  itemImage.addStyleName(""String_Node_Str"");
  itemImage.addStyleName(""String_Node_Str"");
  if (pluginInfo.getCategories().isEmpty()) {
    itemImage.addStyleName(""String_Node_Str"");
  }
 else {
    itemImage.addStyleName(""String_Node_Str"" + pluginInfo.getCategories().get(0));
    itemImage.setTitle(pluginInfo.getCategories().get(0));
  }
  Label label=new Label();
  String labelContent=messages.pluginLabel(pluginInfo.getName(),pluginInfo.getVersion());
  label.setText(labelContent);
  label.setTitle(labelContent);
  label.addStyleName(""String_Node_Str"");
  panel.add(itemImage);
  panel.add(label);
  workflowList.add(panel);
  return panel;
}","private Widget addPluginItemWidgetToWorkflowList(PluginInfo pluginInfo){
  FlowPanel panel=new FlowPanel();
  panel.addStyleName(""String_Node_Str"");
  panel.getElement().setAttribute(""String_Node_Str"",pluginInfo.getId());
  panel.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      FlowPanel panel=(FlowPanel)event.getSource();
      String selectedPluginId=panel.getElement().getAttribute(""String_Node_Str"");
      for (int i=0; i < workflowList.getWidgetCount(); i++) {
        Widget panelWidget=workflowList.getWidget(i);
        panelWidget.removeStyleName(""String_Node_Str"");
      }
      if (selectedPluginId != null) {
        CreateDefaultJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
        panel.addStyleName(""String_Node_Str"");
      }
      updateWorkflowOptions();
    }
  }
,ClickEvent.getType());
  FlowPanel itemImage=new FlowPanel();
  itemImage.addStyleName(""String_Node_Str"");
  itemImage.addStyleName(""String_Node_Str"");
  if (pluginInfo.getCategories().isEmpty()) {
    itemImage.addStyleName(""String_Node_Str"");
  }
 else {
    itemImage.addStyleName(""String_Node_Str"" + pluginInfo.getCategories().get(0));
    itemImage.setTitle(pluginInfo.getCategories().get(0));
  }
  Label label=new Label();
  String labelContent=messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion());
  label.setText(labelContent);
  label.setTitle(labelContent);
  label.addStyleName(""String_Node_Str"");
  panel.add(itemImage);
  panel.add(label);
  workflowList.add(panel);
  return panel;
}",0.9964844998402044
188348,"protected void updateWorkflowOptions(){
  if (selectedPlugin == null) {
    workflowListDescription.clear();
    workflowListDescriptionCategories.setText(""String_Node_Str"");
    workflowListDescription.setVisible(false);
    workflowListDescriptionCategories.setVisible(false);
    workflowOptions.setPluginInfo(null);
  }
 else {
    String pluginName=messages.pluginLabel(selectedPlugin.getName(),selectedPlugin.getVersion());
    name.setText(pluginName);
    workflowListTitle.setText(pluginName);
    String description=selectedPlugin.getDescription();
    if (description != null && description.length() > 0) {
      String[] split=description.split(""String_Node_Str"");
      workflowListDescription.clear();
      for (      String s : split) {
        Label descriptionLine=new Label(s);
        descriptionLine.addStyleName(""String_Node_Str"");
        descriptionLine.addStyleName(""String_Node_Str"");
        workflowListDescription.add(descriptionLine);
      }
      List<String> categoryTranslations=new ArrayList<>();
      for (      String category : selectedPlugin.getCategories()) {
        categoryTranslations.add(messages.showPluginCategories(category));
      }
      SafeHtml categories=messages.createJobCategoryWorkflow(categoryTranslations);
      workflowListDescriptionCategories.setHTML(categories);
      workflowListDescription.setVisible(true);
      workflowListDescriptionCategories.setVisible(true);
    }
 else {
      workflowListDescription.setVisible(false);
      workflowListDescriptionCategories.setVisible(false);
    }
    if (selectedPlugin.getParameters().isEmpty()) {
      workflowPanel.setVisible(false);
      workflowOptions.setPluginInfo(null);
    }
 else {
      workflowPanel.setVisible(true);
      workflowOptions.setPluginInfo(selectedPlugin);
    }
  }
}","protected void updateWorkflowOptions(){
  if (selectedPlugin == null) {
    workflowListDescription.clear();
    workflowListDescriptionCategories.setText(""String_Node_Str"");
    workflowListDescription.setVisible(false);
    workflowListDescriptionCategories.setVisible(false);
    workflowOptions.setPluginInfo(null);
  }
 else {
    String pluginName=messages.pluginLabelWithVersion(selectedPlugin.getName(),selectedPlugin.getVersion());
    name.setText(pluginName);
    workflowListTitle.setText(pluginName);
    String description=selectedPlugin.getDescription();
    if (description != null && description.length() > 0) {
      String[] split=description.split(""String_Node_Str"");
      workflowListDescription.clear();
      for (      String s : split) {
        Label descriptionLine=new Label(s);
        descriptionLine.addStyleName(""String_Node_Str"");
        descriptionLine.addStyleName(""String_Node_Str"");
        workflowListDescription.add(descriptionLine);
      }
      List<String> categoryTranslations=new ArrayList<>();
      for (      String category : selectedPlugin.getCategories()) {
        categoryTranslations.add(messages.showPluginCategories(category));
      }
      SafeHtml categories=messages.createJobCategoryWorkflow(categoryTranslations);
      workflowListDescriptionCategories.setHTML(categories);
      workflowListDescription.setVisible(true);
      workflowListDescriptionCategories.setVisible(true);
    }
 else {
      workflowListDescription.setVisible(false);
      workflowListDescriptionCategories.setVisible(false);
    }
    if (selectedPlugin.getParameters().isEmpty()) {
      workflowPanel.setVisible(false);
      workflowOptions.setPluginInfo(null);
    }
 else {
      workflowPanel.setVisible(true);
      workflowOptions.setPluginInfo(selectedPlugin);
    }
  }
}",0.9969755292823756
188349,"private Widget addPluginItemWidgetToWorkflowList(PluginInfo pluginInfo){
  FlowPanel panel=new FlowPanel();
  panel.addStyleName(""String_Node_Str"");
  panel.getElement().setAttribute(""String_Node_Str"",pluginInfo.getId());
  panel.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      FlowPanel panel=(FlowPanel)event.getSource();
      String selectedPluginId=panel.getElement().getAttribute(""String_Node_Str"");
      for (int i=0; i < workflowList.getWidgetCount(); i++) {
        Widget panelWidget=workflowList.getWidget(i);
        panelWidget.removeStyleName(""String_Node_Str"");
      }
      if (selectedPluginId != null) {
        CreateSelectedJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
        panel.addStyleName(""String_Node_Str"");
      }
      updateWorkflowOptions();
    }
  }
,ClickEvent.getType());
  FlowPanel itemImage=new FlowPanel();
  itemImage.addStyleName(""String_Node_Str"");
  itemImage.addStyleName(""String_Node_Str"");
  if (pluginInfo.getCategories().isEmpty()) {
    itemImage.addStyleName(""String_Node_Str"");
  }
 else {
    itemImage.addStyleName(""String_Node_Str"" + pluginInfo.getCategories().get(0));
    itemImage.setTitle(pluginInfo.getCategories().get(0));
  }
  Label label=new Label();
  String labelContent=messages.pluginLabel(pluginInfo.getName(),pluginInfo.getVersion());
  label.setText(labelContent);
  label.setTitle(labelContent);
  label.addStyleName(""String_Node_Str"");
  panel.add(itemImage);
  panel.add(label);
  workflowList.add(panel);
  return panel;
}","private Widget addPluginItemWidgetToWorkflowList(PluginInfo pluginInfo){
  FlowPanel panel=new FlowPanel();
  panel.addStyleName(""String_Node_Str"");
  panel.getElement().setAttribute(""String_Node_Str"",pluginInfo.getId());
  panel.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      FlowPanel panel=(FlowPanel)event.getSource();
      String selectedPluginId=panel.getElement().getAttribute(""String_Node_Str"");
      for (int i=0; i < workflowList.getWidgetCount(); i++) {
        Widget panelWidget=workflowList.getWidget(i);
        panelWidget.removeStyleName(""String_Node_Str"");
      }
      if (selectedPluginId != null) {
        CreateSelectedJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
        panel.addStyleName(""String_Node_Str"");
      }
      updateWorkflowOptions();
    }
  }
,ClickEvent.getType());
  FlowPanel itemImage=new FlowPanel();
  itemImage.addStyleName(""String_Node_Str"");
  itemImage.addStyleName(""String_Node_Str"");
  if (pluginInfo.getCategories().isEmpty()) {
    itemImage.addStyleName(""String_Node_Str"");
  }
 else {
    itemImage.addStyleName(""String_Node_Str"" + pluginInfo.getCategories().get(0));
    itemImage.setTitle(pluginInfo.getCategories().get(0));
  }
  Label label=new Label();
  String labelContent=messages.pluginLabelWithVersion(pluginInfo.getName(),pluginInfo.getVersion());
  label.setText(labelContent);
  label.setTitle(labelContent);
  label.addStyleName(""String_Node_Str"");
  panel.add(itemImage);
  panel.add(label);
  workflowList.add(panel);
  return panel;
}",0.9964867454487384
188350,"private void apply(final boolean recursive){
  final Permissions permissions=getPermissions();
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      if (IndexedAIP.class.getName().equals(objectClass)) {
        List<IndexedAIP> aips=(List<IndexedAIP>)(Object)objects;
        BrowserService.Util.getInstance().updateAIPPermissions(aips,permissions,details,recursive,new LoadingAsyncCallback<Void>(){
          @Override public void onSuccessImpl(          Void result){
            if (recursive) {
              Toast.showInfo(messages.dialogSuccess(),messages.permissionsWillBeChanged());
            }
 else {
              Toast.showInfo(messages.dialogSuccess(),messages.permissionsChanged());
            }
          }
        }
);
      }
 else       if (IndexedDIP.class.getName().equals(objectClass)) {
        List<IndexedDIP> dips=(List<IndexedDIP>)(Object)objects;
        BrowserService.Util.getInstance().updateDIPPermissions(dips,permissions,details,new LoadingAsyncCallback<Void>(){
          @Override public void onSuccessImpl(          Void result){
            Toast.showInfo(messages.dialogSuccess(),messages.permissionsChanged());
          }
        }
);
      }
    }
  }
);
}","private void apply(final boolean recursive){
  final Permissions permissions=getPermissions();
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      if (IndexedAIP.class.getName().equals(objectClass)) {
        List<IndexedAIP> aips=(List<IndexedAIP>)(Object)objects;
        BrowserService.Util.getInstance().updateAIPPermissions(aips,permissions,details,recursive,new LoadingAsyncCallback<Void>(){
          @Override public void onSuccessImpl(          Void result){
            if (recursive) {
              Toast.showInfo(messages.dialogSuccess(),messages.permissionsWillBeChanged());
            }
 else {
              Toast.showInfo(messages.dialogSuccess(),messages.permissionsChanged());
            }
          }
        }
);
      }
 else       if (IndexedDIP.class.getName().equals(objectClass)) {
        List<IndexedDIP> dips=(List<IndexedDIP>)(Object)objects;
        BrowserService.Util.getInstance().updateDIPPermissions(dips,permissions,details,new LoadingAsyncCallback<Void>(){
          @Override public void onSuccessImpl(          Void result){
            Toast.showInfo(messages.dialogSuccess(),messages.permissionsChanged());
          }
        }
);
      }
    }
  }
);
}",0.9979892761394102
188351,"private void move(final SelectedItems<IndexedAIP> selected,final AsyncCallback<ActionImpact> callback){
  int counter=0;
  boolean justActive=parentAipState != null ? AIPState.ACTIVE.equals(parentAipState) : true;
  Filter filter=new Filter();
  boolean showEmptyParentButton;
  if (parentAipId != null) {
    filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,parentAipId));
    filter.add(new NotSimpleFilterParameter(RodaConstants.INDEX_UUID,parentAipId));
    showEmptyParentButton=true;
  }
 else {
    if (selected instanceof SelectedItemsList) {
      SelectedItemsList<IndexedAIP> list=(SelectedItemsList<IndexedAIP>)selected;
      counter=list.getIds().size();
      if (counter <= RodaConstants.DIALOG_FILTER_LIMIT_NUMBER) {
        for (        String id : list.getIds()) {
          filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id));
          filter.add(new NotSimpleFilterParameter(RodaConstants.INDEX_UUID,id));
        }
      }
    }
    if (selected instanceof SelectedItemsFilter) {
      filter=((SelectedItemsFilter<IndexedAIP>)selected).getFilter();
    }
 else {
      filter=Filter.ALL;
    }
    showEmptyParentButton=false;
  }
  SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,true);
  selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
  selectAipDialog.showAndCenter();
  if (counter > 0 && counter <= RodaConstants.DIALOG_FILTER_LIMIT_NUMBER) {
    selectAipDialog.addStyleName(""String_Node_Str"");
  }
  selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedAIP> event){
      final IndexedAIP parentAIP=event.getValue();
      final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,details,new LoadingAsyncCallback<IndexedAIP>(){
            @Override public void onSuccessImpl(            IndexedAIP result){
              Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
              if (result != null) {
                HistoryUtils.newHistory(BrowseAIP.RESOLVER,result.getId());
              }
 else {
                HistoryUtils.newHistory(BrowseAIP.RESOLVER);
              }
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","private void move(final SelectedItems<IndexedAIP> selected,final AsyncCallback<ActionImpact> callback){
  int counter=0;
  boolean justActive=parentAipState != null ? AIPState.ACTIVE.equals(parentAipState) : true;
  Filter filter=new Filter();
  boolean showEmptyParentButton;
  if (parentAipId != null) {
    filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,parentAipId));
    filter.add(new NotSimpleFilterParameter(RodaConstants.INDEX_UUID,parentAipId));
    showEmptyParentButton=true;
  }
 else {
    if (selected instanceof SelectedItemsList) {
      SelectedItemsList<IndexedAIP> list=(SelectedItemsList<IndexedAIP>)selected;
      counter=list.getIds().size();
      if (counter <= RodaConstants.DIALOG_FILTER_LIMIT_NUMBER) {
        for (        String id : list.getIds()) {
          filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,id));
          filter.add(new NotSimpleFilterParameter(RodaConstants.INDEX_UUID,id));
        }
      }
    }
    if (selected instanceof SelectedItemsFilter) {
      filter=((SelectedItemsFilter<IndexedAIP>)selected).getFilter();
    }
 else {
      filter=Filter.ALL;
    }
    showEmptyParentButton=false;
  }
  SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,true);
  selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
  selectAipDialog.showAndCenter();
  if (counter > 0 && counter <= RodaConstants.DIALOG_FILTER_LIMIT_NUMBER) {
    selectAipDialog.addStyleName(""String_Node_Str"");
  }
  selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedAIP> event){
      final IndexedAIP parentAIP=event.getValue();
      final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,details,new LoadingAsyncCallback<IndexedAIP>(){
            @Override public void onSuccessImpl(            IndexedAIP result){
              Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
              if (result != null) {
                HistoryUtils.newHistory(BrowseAIP.RESOLVER,result.getId());
              }
 else {
                HistoryUtils.newHistory(BrowseAIP.RESOLVER);
              }
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9990485252140818
188352,"@Override public void onValueChange(ValueChangeEvent<IndexedAIP> event){
  final IndexedAIP parentAIP=event.getValue();
  final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,details,new LoadingAsyncCallback<IndexedAIP>(){
        @Override public void onSuccessImpl(        IndexedAIP result){
          Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
          if (result != null) {
            HistoryUtils.newHistory(BrowseAIP.RESOLVER,result.getId());
          }
 else {
            HistoryUtils.newHistory(BrowseAIP.RESOLVER);
          }
          callback.onSuccess(ActionImpact.UPDATED);
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            callback.onFailure(caught);
          }
        }
      }
);
    }
  }
);
}","@Override public void onValueChange(ValueChangeEvent<IndexedAIP> event){
  final IndexedAIP parentAIP=event.getValue();
  final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,details,new LoadingAsyncCallback<IndexedAIP>(){
        @Override public void onSuccessImpl(        IndexedAIP result){
          Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
          if (result != null) {
            HistoryUtils.newHistory(BrowseAIP.RESOLVER,result.getId());
          }
 else {
            HistoryUtils.newHistory(BrowseAIP.RESOLVER);
          }
          callback.onSuccess(ActionImpact.UPDATED);
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            callback.onFailure(caught);
          }
        }
      }
);
    }
  }
);
}",0.9978525411596276
188353,"private void appraisalReject(final SelectedItems<IndexedAIP> aips,final AsyncCallback<ActionImpact> callback){
  final boolean accept=false;
  Dialogs.showPromptDialog(messages.rejectMessage(),messages.rejectQuestion(),null,null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String rejectReason){
      BrowserService.Util.getInstance().appraisal(aips,accept,rejectReason,LocaleInfo.getCurrentLocale().getLocaleName(),new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void result){
          Toast.showInfo(messages.dialogDone(),messages.itemWasRejected());
          HistoryUtils.newHistory(IngestAppraisal.RESOLVER);
          callback.onSuccess(ActionImpact.DESTROYED);
        }
      }
);
    }
  }
);
}","private void appraisalReject(final SelectedItems<IndexedAIP> aips,final AsyncCallback<ActionImpact> callback){
  final boolean accept=false;
  Dialogs.showPromptDialog(messages.rejectMessage(),messages.rejectQuestion(),null,null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),true,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String rejectReason){
      BrowserService.Util.getInstance().appraisal(aips,accept,rejectReason,LocaleInfo.getCurrentLocale().getLocaleName(),new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void result){
          Toast.showInfo(messages.dialogDone(),messages.itemWasRejected());
          HistoryUtils.newHistory(IngestAppraisal.RESOLVER);
          callback.onSuccess(ActionImpact.DESTROYED);
        }
      }
);
    }
  }
);
}",0.9972781709308656
188354,"private void remove(final SelectedItems<IndexedAIP> selected,final AsyncCallback<ActionImpact> callback){
  ClientSelectedItemsUtils.size(IndexedAIP.class,selected,new AsyncCallback<Long>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final Long size){
      Dialogs.showConfirmDialog(messages.removeConfirmDialogTitle(),messages.removeSelectedConfirmDialogMessage(size),messages.dialogNo(),messages.dialogYes(),new AsyncCallback<Boolean>(){
        @Override public void onSuccess(        Boolean confirmed){
          if (confirmed) {
            Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
              }
              @Override public void onSuccess(              final String details){
                BrowserService.Util.getInstance().deleteAIP(selected,details,new LoadingAsyncCallback<Void>(){
                  @Override public void onFailureImpl(                  Throwable caught){
                    callback.onFailure(caught);
                  }
                  @Override public void onSuccessImpl(                  Void result){
                    Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
);
              }
            }
);
          }
        }
        @Override public void onFailure(        Throwable caught){
        }
      }
);
    }
  }
);
}","private void remove(final SelectedItems<IndexedAIP> selected,final AsyncCallback<ActionImpact> callback){
  ClientSelectedItemsUtils.size(IndexedAIP.class,selected,new AsyncCallback<Long>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    final Long size){
      Dialogs.showConfirmDialog(messages.removeConfirmDialogTitle(),messages.removeSelectedConfirmDialogMessage(size),messages.dialogNo(),messages.dialogYes(),new AsyncCallback<Boolean>(){
        @Override public void onSuccess(        Boolean confirmed){
          if (confirmed) {
            Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
              }
              @Override public void onSuccess(              final String details){
                BrowserService.Util.getInstance().deleteAIP(selected,details,new LoadingAsyncCallback<Void>(){
                  @Override public void onFailureImpl(                  Throwable caught){
                    callback.onFailure(caught);
                  }
                  @Override public void onSuccessImpl(                  Void result){
                    Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
);
              }
            }
);
          }
        }
        @Override public void onFailure(        Throwable caught){
        }
      }
);
    }
  }
);
}",0.9983286908077994
188355,"private void addRepresentation(final IndexedAIP aip,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().createRepresentation(aip.getId(),details,new LoadingAsyncCallback<String>(){
        @Override public void onSuccessImpl(        String representationId){
          HistoryUtils.newHistory(BrowseRepresentation.RESOLVER,aip.getId(),representationId);
          callback.onSuccess(ActionImpact.UPDATED);
        }
      }
);
    }
  }
);
}","private void addRepresentation(final IndexedAIP aip,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().createRepresentation(aip.getId(),details,new LoadingAsyncCallback<String>(){
        @Override public void onSuccessImpl(        String representationId){
          HistoryUtils.newHistory(BrowseRepresentation.RESOLVER,aip.getId(),representationId);
          callback.onSuccess(ActionImpact.UPDATED);
        }
      }
);
    }
  }
);
}",0.9963144963144964
188356,"public void move(final String aipId,final String representationId,final SelectedItems<IndexedFile> selectedItems,final AsyncCallback<ActionImpact> callback){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_AIP_ID,aipId),new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_ID,representationId),new SimpleFilterParameter(RodaConstants.FILE_ISDIRECTORY,Boolean.toString(true)));
  SelectFileDialog selectFileDialog=new SelectFileDialog(messages.moveItemTitle(),filter,true,false);
  selectFileDialog.setEmptyParentButtonVisible(true);
  selectFileDialog.setSingleSelectionMode();
  selectFileDialog.showAndCenter();
  selectFileDialog.addValueChangeHandler(new ValueChangeHandler<IndexedFile>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedFile> event){
      final IndexedFile toFolder=event.getValue();
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().moveFiles(aipId,representationId,selectedItems,toFolder,details,new LoadingAsyncCallback<Void>(){
            @Override public void onSuccessImpl(            Void nothing){
              Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
              Timer timer=new Timer(){
                @Override public void run(){
                  if (toFolder != null) {
                    HistoryUtils.openBrowse(toFolder);
                  }
 else {
                    HistoryUtils.openBrowse(aipId,representationId);
                  }
                  callback.onSuccess(null);
                }
              }
;
              timer.schedule(RodaConstants.ACTION_TIMEOUT);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","public void move(final String aipId,final String representationId,final SelectedItems<IndexedFile> selectedItems,final AsyncCallback<ActionImpact> callback){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_AIP_ID,aipId),new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_ID,representationId),new SimpleFilterParameter(RodaConstants.FILE_ISDIRECTORY,Boolean.toString(true)));
  SelectFileDialog selectFileDialog=new SelectFileDialog(messages.moveItemTitle(),filter,true,false);
  selectFileDialog.setEmptyParentButtonVisible(true);
  selectFileDialog.setSingleSelectionMode();
  selectFileDialog.showAndCenter();
  selectFileDialog.addValueChangeHandler(new ValueChangeHandler<IndexedFile>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedFile> event){
      final IndexedFile toFolder=event.getValue();
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().moveFiles(aipId,representationId,selectedItems,toFolder,details,new LoadingAsyncCallback<Void>(){
            @Override public void onSuccessImpl(            Void nothing){
              Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
              Timer timer=new Timer(){
                @Override public void run(){
                  if (toFolder != null) {
                    HistoryUtils.openBrowse(toFolder);
                  }
 else {
                    HistoryUtils.openBrowse(aipId,representationId);
                  }
                  callback.onSuccess(null);
                }
              }
;
              timer.schedule(RodaConstants.ACTION_TIMEOUT);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9987315010570824
188357,"public void uploadFiles(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  if (file.isDirectory()) {
    Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String details){
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setDetailsMessage(details);
        HistoryUtils.openUpload(file);
        callback.onSuccess(ActionImpact.UPDATED);
      }
    }
);
  }
}","public void uploadFiles(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  if (file.isDirectory()) {
    Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      String details){
        LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
        selectedItems.setDetailsMessage(details);
        HistoryUtils.openUpload(file);
        callback.onSuccess(ActionImpact.UPDATED);
      }
    }
);
  }
}",0.9958563535911602
188358,"@Override public void onValueChange(ValueChangeEvent<IndexedFile> event){
  final IndexedFile toFolder=event.getValue();
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().moveFiles(aipId,representationId,selectedItems,toFolder,details,new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void nothing){
          Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
          Timer timer=new Timer(){
            @Override public void run(){
              if (toFolder != null) {
                HistoryUtils.openBrowse(toFolder);
              }
 else {
                HistoryUtils.openBrowse(aipId,representationId);
              }
              callback.onSuccess(null);
            }
          }
;
          timer.schedule(RodaConstants.ACTION_TIMEOUT);
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            callback.onFailure(caught);
          }
        }
      }
);
    }
  }
);
}","@Override public void onValueChange(ValueChangeEvent<IndexedFile> event){
  final IndexedFile toFolder=event.getValue();
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      BrowserService.Util.getInstance().moveFiles(aipId,representationId,selectedItems,toFolder,details,new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void nothing){
          Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
          Timer timer=new Timer(){
            @Override public void run(){
              if (toFolder != null) {
                HistoryUtils.openBrowse(toFolder);
              }
 else {
                HistoryUtils.openBrowse(aipId,representationId);
              }
              callback.onSuccess(null);
            }
          }
;
          timer.schedule(RodaConstants.ACTION_TIMEOUT);
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            callback.onFailure(caught);
          }
        }
      }
);
    }
  }
);
}",0.9979770734996628
188359,"public void remove(final SelectedItems<IndexedFile> selected,final AsyncCallback<ActionImpact> callback){
  Dialogs.showConfirmDialog(messages.filesRemoveTitle(),messages.selectedFileRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          final String details){
            BrowserService.Util.getInstance().deleteFile(selected,details,new AsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
                Timer timer=new Timer(){
                  @Override public void run(){
                    HistoryUtils.newHistory(HistoryUtils.getCurrentHistoryPath());
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
;
                timer.schedule(RodaConstants.ACTION_TIMEOUT);
              }
              @Override public void onFailure(              Throwable caught){
                callback.onFailure(caught);
              }
            }
);
          }
        }
);
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}","public void remove(final SelectedItems<IndexedFile> selected,final AsyncCallback<ActionImpact> callback){
  Dialogs.showConfirmDialog(messages.filesRemoveTitle(),messages.selectedFileRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          final String details){
            BrowserService.Util.getInstance().deleteFile(selected,details,new AsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                Toast.showInfo(messages.runningInBackgroundTitle(),messages.runningInBackgroundDescription());
                Timer timer=new Timer(){
                  @Override public void run(){
                    HistoryUtils.newHistory(HistoryUtils.getCurrentHistoryPath());
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
;
                timer.schedule(RodaConstants.ACTION_TIMEOUT);
              }
              @Override public void onFailure(              Throwable caught){
                callback.onFailure(caught);
              }
            }
);
          }
        }
);
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}",0.9981773997569866
188360,"public void rename(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.renameItemTitle(),null,file.getId(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().renameFolder(file.getUUID(),newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              Toast.showInfo(messages.dialogSuccess(),messages.renameSuccessful());
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
          }
);
        }
      }
);
    }
  }
);
}","public void rename(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.renameItemTitle(),null,file.getId(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().renameFolder(file.getUUID(),newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              Toast.showInfo(messages.dialogSuccess(),messages.renameSuccessful());
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9955555555555556
188361,"public void createFolder(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          IndexedFile folder=file;
          String aipId=folder.getAipId();
          String repId=folder.getRepresentationId();
          String folderUUID=folder.getUUID();
          BrowserService.Util.getInstance().createFolder(aipId,repId,folderUUID,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof AlreadyExistsException) {
                Dialogs.showInformationDialog(messages.createFolderAlreadyExistsTitle(),messages.createFolderAlreadyExistsMessage(),messages.dialogOk());
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","public void createFolder(final IndexedFile file,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          IndexedFile folder=file;
          String aipId=folder.getAipId();
          String repId=folder.getRepresentationId();
          String folderUUID=folder.getUUID();
          BrowserService.Util.getInstance().createFolder(aipId,repId,folderUUID,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof AlreadyExistsException) {
                Dialogs.showInformationDialog(messages.createFolderAlreadyExistsTitle(),messages.createFolderAlreadyExistsMessage(),messages.dialogOk());
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9965928449744464
188362,"public void uploadFiles(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
      selectedItems.setDetailsMessage(details);
      HistoryUtils.openUpload(representation);
      callback.onSuccess(ActionImpact.UPDATED);
    }
  }
);
}","public void uploadFiles(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String details){
      LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
      selectedItems.setDetailsMessage(details);
      HistoryUtils.openUpload(representation);
      callback.onSuccess(ActionImpact.UPDATED);
    }
  }
);
}",0.995702005730659
188363,"public void changeType(final SelectedItems<IndexedRepresentation> representations,final AsyncCallback<ActionImpact> callback){
  SearchSuggestBox<IndexedRepresentation> suggestBox=new SearchSuggestBox<>(IndexedRepresentation.class,RodaConstants.REPRESENTATION_TYPE,true);
  Dialogs.showPromptDialogSuggest(messages.changeTypeTitle(),null,messages.changeTypePlaceHolder(),messages.cancelButton(),messages.confirmButton(),suggestBox,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newType){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().changeRepresentationType(representations,newType,details,new LoadingAsyncCallback<Void>(){
            @Override public void onSuccessImpl(            Void nothing){
              Toast.showInfo(messages.dialogSuccess(),messages.changeTypeSuccessful());
              callback.onSuccess(ActionImpact.UPDATED);
            }
          }
);
        }
      }
);
    }
  }
);
}","public void changeType(final SelectedItems<IndexedRepresentation> representations,final AsyncCallback<ActionImpact> callback){
  SearchSuggestBox<IndexedRepresentation> suggestBox=new SearchSuggestBox<>(IndexedRepresentation.class,RodaConstants.REPRESENTATION_TYPE,true);
  Dialogs.showPromptDialogSuggest(messages.changeTypeTitle(),null,messages.changeTypePlaceHolder(),messages.cancelButton(),messages.confirmButton(),suggestBox,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newType){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        String details){
          BrowserService.Util.getInstance().changeRepresentationType(representations,newType,details,new LoadingAsyncCallback<Void>(){
            @Override public void onSuccessImpl(            Void nothing){
              Toast.showInfo(messages.dialogSuccess(),messages.changeTypeSuccessful());
              callback.onSuccess(ActionImpact.UPDATED);
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9978102189781022
188364,"public void remove(final SelectedItems<IndexedRepresentation> selectedList,final AsyncCallback<ActionImpact> callback){
  Dialogs.showConfirmDialog(messages.representationRemoveTitle(),messages.representationRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String details){
            BrowserService.Util.getInstance().deleteRepresentation(selectedList,details,new AsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                Timer timer=new Timer(){
                  @Override public void run(){
                    if (aipId != null) {
                      HistoryUtils.openBrowse(aipId);
                    }
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
;
                timer.schedule(RodaConstants.ACTION_TIMEOUT);
              }
              @Override public void onFailure(              Throwable caught){
                callback.onFailure(caught);
              }
            }
);
          }
        }
);
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}","public void remove(final SelectedItems<IndexedRepresentation> selectedList,final AsyncCallback<ActionImpact> callback){
  Dialogs.showConfirmDialog(messages.representationRemoveTitle(),messages.representationRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String details){
            BrowserService.Util.getInstance().deleteRepresentation(selectedList,details,new AsyncCallback<Void>(){
              @Override public void onSuccess(              Void result){
                Timer timer=new Timer(){
                  @Override public void run(){
                    if (aipId != null) {
                      HistoryUtils.openBrowse(aipId);
                    }
                    callback.onSuccess(ActionImpact.DESTROYED);
                  }
                }
;
                timer.schedule(RodaConstants.ACTION_TIMEOUT);
              }
              @Override public void onFailure(              Throwable caught){
                callback.onFailure(caught);
              }
            }
);
          }
        }
);
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}",0.99812734082397
188365,"public void createFolder(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        final String details){
          BrowserService.Util.getInstance().createFolder(representation.getAipId(),representation.getId(),null,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}","public void createFolder(final IndexedRepresentation representation,final AsyncCallback<ActionImpact> callback){
  Dialogs.showPromptDialog(messages.createFolderTitle(),null,null,messages.createFolderPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    final String newName){
      Dialogs.showPromptDialog(messages.outcomeDetailTitle(),null,null,messages.outcomeDetailPlaceholder(),RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),false,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        final String details){
          BrowserService.Util.getInstance().createFolder(representation.getAipId(),representation.getId(),null,newName,details,new LoadingAsyncCallback<IndexedFile>(){
            @Override public void onSuccessImpl(            IndexedFile newFolder){
              HistoryUtils.openBrowse(newFolder);
              callback.onSuccess(ActionImpact.UPDATED);
            }
            @Override public void onFailureImpl(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                callback.onFailure(caught);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}",0.9964822513591302
188366,"public static void showPromptDialog(String title,String message,String value,String placeHolder,final RegExp validator,String cancelButtonText,String confirmButtonText,final AsyncCallback<String> callback){
  final DialogBox dialogBox=new DialogBox(false,true);
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  if (message != null) {
    final Label messageLabel=new Label(message);
    layout.add(messageLabel);
    messageLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox inputBox=new TextBox();
  inputBox.setTitle(""String_Node_Str"");
  if (value != null) {
    inputBox.setText(value);
  }
  if (placeHolder != null) {
    inputBox.getElement().setPropertyString(""String_Node_Str"",placeHolder);
  }
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  layout.add(inputBox);
  layout.add(cancelButton);
  layout.add(confirmButton);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  confirmButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean isValid=validator.test(inputBox.getText());
      if (isValid) {
        dialogBox.hide();
        callback.onSuccess(inputBox.getText());
      }
    }
  }
);
  inputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      boolean isValid=validator.test(event.getValue());
      confirmButton.setEnabled(isValid);
      if (isValid) {
        inputBox.removeStyleName(""String_Node_Str"");
      }
 else {
        inputBox.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  inputBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      TextBox box=(TextBox)event.getSource();
      confirmButton.setEnabled(validator.test(box.getText()));
    }
  }
);
  inputBox.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        boolean isValid=validator.test(inputBox.getText());
        if (isValid) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
 else {
        TextBox box=(TextBox)event.getSource();
        confirmButton.setEnabled(validator.test(box.getText()));
      }
    }
  }
);
  inputBox.addKeyUpHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        boolean isValid=validator.test(inputBox.getText());
        if (isValid) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
 else {
        TextBox box=(TextBox)event.getSource();
        confirmButton.setEnabled(validator.test(box.getText()));
      }
    }
  }
);
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  inputBox.addStyleName(""String_Node_Str"");
  cancelButton.addStyleName(""String_Node_Str"");
  confirmButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
  inputBox.setFocus(true);
}","public static void showPromptDialog(String title,String message,String value,String placeHolder,final RegExp validator,String cancelButtonText,String confirmButtonText,boolean mandatory,final AsyncCallback<String> callback){
  final DialogBox dialogBox=new DialogBox(false,true);
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  if (message != null) {
    final Label messageLabel=new Label(message);
    layout.add(messageLabel);
    messageLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox inputBox=new TextBox();
  inputBox.setTitle(""String_Node_Str"");
  if (value != null) {
    inputBox.setText(value);
  }
  if (placeHolder != null) {
    inputBox.getElement().setPropertyString(""String_Node_Str"",placeHolder);
  }
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  confirmButton.setEnabled(!mandatory);
  layout.add(inputBox);
  layout.add(cancelButton);
  layout.add(confirmButton);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  confirmButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (validator.test(inputBox.getText())) {
        dialogBox.hide();
        callback.onSuccess(inputBox.getText());
      }
    }
  }
);
  inputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      boolean isValid=validator.test(event.getValue());
      confirmButton.setEnabled(isValid);
      if (isValid) {
        inputBox.removeStyleName(""String_Node_Str"");
      }
 else {
        inputBox.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  inputBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      TextBox box=(TextBox)event.getSource();
      confirmButton.setEnabled(validator.test(box.getText()));
    }
  }
);
  inputBox.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      TextBox box=(TextBox)event.getSource();
      confirmButton.setEnabled(validator.test(box.getText()));
    }
  }
);
  inputBox.addKeyUpHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        if (validator.test(inputBox.getText())) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
 else {
        TextBox box=(TextBox)event.getSource();
        confirmButton.setEnabled(validator.test(box.getText()));
      }
    }
  }
);
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  inputBox.addStyleName(""String_Node_Str"");
  cancelButton.addStyleName(""String_Node_Str"");
  confirmButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
  inputBox.setFocus(true);
}",0.8707172224760165
188367,"@Override public void onKeyDown(KeyDownEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
    boolean isValid=validator.test(inputBox.getText());
    if (isValid) {
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
 else {
    TextBox box=(TextBox)event.getSource();
    confirmButton.setEnabled(validator.test(box.getText()));
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  TextBox box=(TextBox)event.getSource();
  confirmButton.setEnabled(validator.test(box.getText()));
}",0.5772811918063314
188368,"@Override public void onKeyUp(KeyUpEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
    boolean isValid=validator.test(inputBox.getText());
    if (isValid) {
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
 else {
    TextBox box=(TextBox)event.getSource();
    confirmButton.setEnabled(validator.test(box.getText()));
  }
}","@Override public void onKeyUp(KeyUpEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
    if (validator.test(inputBox.getText())) {
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
 else {
    TextBox box=(TextBox)event.getSource();
    confirmButton.setEnabled(validator.test(box.getText()));
  }
}",0.3466299862448418
188369,"@UiHandler(""String_Node_Str"") void buttonRenameHandler(ClickEvent e){
  if (!ClientSelectedItemsUtils.isEmpty(getSelected()) && getSelected() instanceof SelectedItemsList) {
    SelectedItemsList<TransferredResource> resourceList=(SelectedItemsList<TransferredResource>)getSelected();
    BrowserService.Util.getInstance().retrieve(TransferredResource.class.getName(),resourceList.getIds().get(0),Arrays.asList(RodaConstants.TRANSFERRED_RESOURCE_ID,RodaConstants.TRANSFERRED_RESOURCE_NAME),new AsyncCallback<TransferredResource>(){
      @Override public void onFailure(      Throwable caught){
        Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
      }
      @Override public void onSuccess(      final TransferredResource resultResource){
        Dialogs.showPromptDialog(messages.renameTransferredResourcesDialogTitle(),null,resultResource.getName(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String result){
            BrowserService.Util.getInstance().renameTransferredResource(resultResource.getUUID(),result,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
              }
              @Override public void onSuccess(              String result){
                Toast.showInfo(messages.dialogSuccess(),messages.renameSIPSuccessful());
                HistoryUtils.newHistory(IngestTransfer.RESOLVER,result);
              }
            }
);
          }
        }
);
      }
    }
);
  }
 else {
    return;
  }
}","@UiHandler(""String_Node_Str"") void buttonRenameHandler(ClickEvent e){
  if (!ClientSelectedItemsUtils.isEmpty(getSelected()) && getSelected() instanceof SelectedItemsList) {
    SelectedItemsList<TransferredResource> resourceList=(SelectedItemsList<TransferredResource>)getSelected();
    BrowserService.Util.getInstance().retrieve(TransferredResource.class.getName(),resourceList.getIds().get(0),Arrays.asList(RodaConstants.TRANSFERRED_RESOURCE_ID,RodaConstants.TRANSFERRED_RESOURCE_NAME),new AsyncCallback<TransferredResource>(){
      @Override public void onFailure(      Throwable caught){
        Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
      }
      @Override public void onSuccess(      final TransferredResource resultResource){
        Dialogs.showPromptDialog(messages.renameTransferredResourcesDialogTitle(),null,resultResource.getName(),null,RegExp.compile(""String_Node_Str""),messages.cancelButton(),messages.confirmButton(),true,new AsyncCallback<String>(){
          @Override public void onFailure(          Throwable caught){
          }
          @Override public void onSuccess(          String result){
            BrowserService.Util.getInstance().renameTransferredResource(resultResource.getUUID(),result,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                Toast.showInfo(messages.dialogFailure(),messages.renameSIPFailed());
              }
              @Override public void onSuccess(              String result){
                Toast.showInfo(messages.dialogSuccess(),messages.renameSIPSuccessful());
                HistoryUtils.newHistory(IngestTransfer.RESOLVER,result);
              }
            }
);
          }
        }
);
      }
    }
);
  }
 else {
    return;
  }
}",0.998614574674425
188370,"@UiHandler(""String_Node_Str"") void buttonCreateFolderHandler(ClickEvent e){
  Dialogs.showPromptDialog(messages.ingestTransferCreateFolderTitle(),messages.ingestTransferCreateFolderMessage(),null,null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String folderName){
      String parent=resource != null ? resource.getUUID() : null;
      BrowserService.Util.getInstance().createTransferredResourcesFolder(parent,folderName,true,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        String newResourceUUID){
          HistoryUtils.newHistory(RESOLVER,newResourceUUID);
        }
      }
);
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonCreateFolderHandler(ClickEvent e){
  Dialogs.showPromptDialog(messages.ingestTransferCreateFolderTitle(),messages.ingestTransferCreateFolderMessage(),null,null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),true,new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    String folderName){
      String parent=resource != null ? resource.getUUID() : null;
      BrowserService.Util.getInstance().createTransferredResourcesFolder(parent,folderName,true,new AsyncCallback<String>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        String newResourceUUID){
          HistoryUtils.newHistory(RESOLVER,newResourceUUID);
        }
      }
);
    }
  }
);
}",0.9973247726056714
188371,"public static void showPromptDialog(String title,String message,String placeHolder,final RegExp validator,String cancelButtonText,String confirmButtonText,final AsyncCallback<String> callback){
  final DialogBox dialogBox=new DialogBox(false,true);
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  if (message != null) {
    final Label messageLabel=new Label(message);
    layout.add(messageLabel);
    messageLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox inputBox=new TextBox();
  inputBox.setTitle(""String_Node_Str"");
  if (placeHolder != null) {
    inputBox.getElement().setPropertyString(""String_Node_Str"",placeHolder);
  }
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  layout.add(inputBox);
  layout.add(cancelButton);
  layout.add(confirmButton);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  confirmButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
);
  inputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      boolean isValid=validator.test(inputBox.getText());
      if (isValid) {
        inputBox.addStyleName(""String_Node_Str"");
      }
 else {
        inputBox.removeStyleName(""String_Node_Str"");
      }
    }
  }
);
  inputBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      boolean isValid=validator.test(inputBox.getText());
      confirmButton.setEnabled(isValid);
    }
  }
);
  inputBox.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        boolean isValid=validator.test(inputBox.getText());
        if (isValid) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
    }
  }
);
  confirmButton.setEnabled(validator.test(inputBox.getText()));
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  inputBox.addStyleName(""String_Node_Str"");
  cancelButton.addStyleName(""String_Node_Str"");
  confirmButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
  inputBox.setFocus(true);
}","public static void showPromptDialog(String title,String message,String placeHolder,final RegExp validator,String cancelButtonText,String confirmButtonText,final AsyncCallback<String> callback){
  final DialogBox dialogBox=new DialogBox(false,true);
  dialogBox.setText(title);
  final FlowPanel layout=new FlowPanel();
  if (message != null) {
    final Label messageLabel=new Label(message);
    layout.add(messageLabel);
    messageLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox inputBox=new TextBox();
  inputBox.setTitle(""String_Node_Str"");
  if (placeHolder != null) {
    inputBox.getElement().setPropertyString(""String_Node_Str"",placeHolder);
  }
  final Button cancelButton=new Button(cancelButtonText);
  final Button confirmButton=new Button(confirmButtonText);
  layout.add(inputBox);
  layout.add(cancelButton);
  layout.add(confirmButton);
  dialogBox.setWidget(layout);
  dialogBox.setGlassEnabled(true);
  dialogBox.setAnimationEnabled(false);
  cancelButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      dialogBox.hide();
      callback.onFailure(null);
    }
  }
);
  confirmButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean isValid=validator.test(inputBox.getText());
      if (isValid) {
        dialogBox.hide();
        callback.onSuccess(inputBox.getText());
      }
    }
  }
);
  inputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      boolean isValid=validator.test(event.getValue());
      confirmButton.setEnabled(isValid);
      if (isValid) {
        inputBox.removeStyleName(""String_Node_Str"");
      }
 else {
        inputBox.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  inputBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      TextBox box=(TextBox)event.getSource();
      confirmButton.setEnabled(validator.test(box.getText()));
    }
  }
);
  inputBox.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        boolean isValid=validator.test(inputBox.getText());
        if (isValid) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
 else {
        TextBox box=(TextBox)event.getSource();
        confirmButton.setEnabled(validator.test(box.getText()));
      }
    }
  }
);
  inputBox.addKeyUpHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
        boolean isValid=validator.test(inputBox.getText());
        if (isValid) {
          dialogBox.hide();
          callback.onSuccess(inputBox.getText());
        }
      }
 else {
        TextBox box=(TextBox)event.getSource();
        confirmButton.setEnabled(validator.test(box.getText()));
      }
    }
  }
);
  dialogBox.addStyleName(""String_Node_Str"");
  layout.addStyleName(""String_Node_Str"");
  inputBox.addStyleName(""String_Node_Str"");
  cancelButton.addStyleName(""String_Node_Str"");
  confirmButton.addStyleName(""String_Node_Str"");
  dialogBox.center();
  dialogBox.show();
  inputBox.setFocus(true);
}",0.8514323784143905
188372,"@Override public void onKeyDown(KeyDownEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
    boolean isValid=validator.test(inputBox.getText());
    if (isValid) {
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
    boolean isValid=validator.test(inputBox.getText());
    if (isValid) {
      dialogBox.hide();
      callback.onSuccess(inputBox.getText());
    }
  }
 else {
    TextBox box=(TextBox)event.getSource();
    confirmButton.setEnabled(validator.test(box.getText()));
  }
}",0.8191653786707882
188373,"@Override public void onValueChange(ValueChangeEvent<String> event){
  boolean isValid=validator.test(inputBox.getText());
  if (isValid) {
    inputBox.addStyleName(""String_Node_Str"");
  }
 else {
    inputBox.removeStyleName(""String_Node_Str"");
  }
}","@Override public void onValueChange(ValueChangeEvent<String> event){
  boolean isValid=validator.test(event.getValue());
  confirmButton.setEnabled(isValid);
  if (isValid) {
    inputBox.removeStyleName(""String_Node_Str"");
  }
 else {
    inputBox.addStyleName(""String_Node_Str"");
  }
}",0.5602968460111317
188374,"@Override public void onKeyPress(KeyPressEvent event){
  boolean isValid=validator.test(inputBox.getText());
  confirmButton.setEnabled(isValid);
}","@Override public void onKeyPress(KeyPressEvent event){
  TextBox box=(TextBox)event.getSource();
  confirmButton.setEnabled(validator.test(box.getText()));
}",0.6973684210526315
188375,"private boolean isIndexMigrationNecessary(SolrClient solrClient,Optional<Path> tempIndexConfigsPath) throws GenericException {
  boolean migrationIsNecessary=false;
  if (tempIndexConfigsPath.isPresent()) {
    Path indexConfigsFolder=tempIndexConfigsPath.get().resolve(RodaConstants.CORE_CONFIG_FOLDER).resolve(RodaConstants.CORE_INDEX_FOLDER);
    List<String> solrCollections=getSolrCollections(indexConfigsFolder);
    Map<String,Integer> indexVersionsFromCode=getIndexVersionsFromCode(indexConfigsFolder,solrCollections);
    Map<String,Integer> indexVersionsInstalled=getIndexVersionsFromSolr(solrClient,solrCollections);
    if (indexVersionsFromCode.isEmpty() || indexVersionsInstalled.isEmpty()) {
      LOGGER.error(""String_Node_Str"");
      throw new GenericException(""String_Node_Str"");
    }
 else {
      for (      Entry<String,Integer> indexFromCode : indexVersionsFromCode.entrySet()) {
        String collection=indexFromCode.getKey();
        Integer collectionVersionFromCode=indexFromCode.getValue();
        if (indexVersionsInstalled.containsKey(collection)) {
          Integer collectionVersionInstalled=indexVersionsInstalled.get(collection);
          if (collectionVersionFromCode != collectionVersionInstalled) {
            LOGGER.warn(""String_Node_Str"",collection,collectionVersionFromCode,collectionVersionInstalled);
            migrationIsNecessary=true;
          }
        }
 else {
          LOGGER.warn(""String_Node_Str"",collection);
          migrationIsNecessary=true;
        }
      }
    }
  }
 else {
    LOGGER.error(""String_Node_Str"");
    throw new GenericException(""String_Node_Str"");
  }
  return migrationIsNecessary;
}","private boolean isIndexMigrationNecessary(SolrClient solrClient,Optional<Path> tempIndexConfigsPath) throws GenericException {
  boolean migrationIsNecessary=false;
  if (tempIndexConfigsPath.isPresent()) {
    Path indexConfigsFolder=tempIndexConfigsPath.get().resolve(RodaConstants.CORE_CONFIG_FOLDER).resolve(RodaConstants.CORE_INDEX_FOLDER);
    List<String> solrCollections=getSolrCollections(indexConfigsFolder);
    Map<String,Integer> indexVersionsFromCode=getIndexVersionsFromCode(indexConfigsFolder,solrCollections);
    Map<String,Integer> indexVersionsInstalled=getIndexVersionsFromSolr(solrClient,solrCollections);
    if (indexVersionsFromCode.isEmpty() || indexVersionsInstalled.isEmpty()) {
      LOGGER.error(""String_Node_Str"");
      throw new GenericException(""String_Node_Str"");
    }
 else {
      for (      Entry<String,Integer> indexFromCode : indexVersionsFromCode.entrySet()) {
        String collection=indexFromCode.getKey();
        Integer collectionVersionFromCode=indexFromCode.getValue();
        if (indexVersionsInstalled.containsKey(collection)) {
          Integer collectionVersionInstalled=indexVersionsInstalled.get(collection);
          if (!collectionVersionFromCode.equals(collectionVersionInstalled)) {
            LOGGER.warn(""String_Node_Str"",collection,collectionVersionFromCode,collectionVersionInstalled);
            migrationIsNecessary=true;
          }
        }
 else {
          LOGGER.warn(""String_Node_Str"",collection);
          migrationIsNecessary=true;
        }
      }
    }
  }
 else {
    LOGGER.error(""String_Node_Str"");
    throw new GenericException(""String_Node_Str"");
  }
  return migrationIsNecessary;
}",0.9958133971291866
188376,"public static DescriptiveMetadataEditBundle retrieveDescriptiveMetadataEditBundle(User user,IndexedAIP aip,IndexedRepresentation representation,String descriptiveMetadataId,String type,String version,final Locale locale) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    String representationId=representation != null ? representation.getId() : null;
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),representationId,descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.retrieveSupportedMetadata(user,aip,representation,locale);
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if (typeBundle.getVersion() == version || (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version))) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      if (values != null) {
        for (        MetadataValue mv : values) {
          String xpathRaw=mv.get(""String_Node_Str"");
          if (xpathRaw != null && xpathRaw.length() > 0) {
            String[] xpaths=xpathRaw.split(""String_Node_Str"");
            String value;
            List<String> allValues=new ArrayList<>();
            for (            String xpath : xpaths) {
              allValues.addAll(ServerTools.applyXpath(xml,xpath));
            }
            boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
            if (allEqual && !allValues.isEmpty()) {
              value=allValues.get(0);
            }
 else {
              value=String.join(""String_Node_Str"",allValues);
            }
            mv.set(""String_Node_Str"",value.trim());
          }
        }
        metadataTypeBundle.setValues(values);
        String templateWithValues=retrieveDescriptiveMetadataPreview(metadataTypeBundle);
        try {
          XMLUnit.setIgnoreComments(true);
          XMLUnit.setIgnoreWhitespace(true);
          XMLUnit.setIgnoreAttributeOrder(true);
          XMLUnit.setCompareUnmatched(false);
          Diff xmlDiff=new Diff(xml,templateWithValues);
          xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
          similar=xmlDiff.identical() || xmlDiff.similar();
        }
 catch (        SAXException e) {
          LOGGER.warn(""String_Node_Str"",e);
        }
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}","public static DescriptiveMetadataEditBundle retrieveDescriptiveMetadataEditBundle(User user,IndexedAIP aip,IndexedRepresentation representation,String descriptiveMetadataId,String type,String version,final Locale locale) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    String representationId=representation != null ? representation.getId() : null;
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),representationId,descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.retrieveSupportedMetadata(user,aip,representation,locale);
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if (typeBundle.getVersion().equals(version) || (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version))) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      if (values != null) {
        for (        MetadataValue mv : values) {
          String xpathRaw=mv.get(""String_Node_Str"");
          if (xpathRaw != null && xpathRaw.length() > 0) {
            String[] xpaths=xpathRaw.split(""String_Node_Str"");
            String value;
            List<String> allValues=new ArrayList<>();
            for (            String xpath : xpaths) {
              allValues.addAll(ServerTools.applyXpath(xml,xpath));
            }
            boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
            if (allEqual && !allValues.isEmpty()) {
              value=allValues.get(0);
            }
 else {
              value=String.join(""String_Node_Str"",allValues);
            }
            mv.set(""String_Node_Str"",value.trim());
          }
        }
        metadataTypeBundle.setValues(values);
        String templateWithValues=retrieveDescriptiveMetadataPreview(metadataTypeBundle);
        try {
          XMLUnit.setIgnoreComments(true);
          XMLUnit.setIgnoreWhitespace(true);
          XMLUnit.setIgnoreAttributeOrder(true);
          XMLUnit.setCompareUnmatched(false);
          Diff xmlDiff=new Diff(xml,templateWithValues);
          xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
          similar=xmlDiff.identical() || xmlDiff.similar();
        }
 catch (        SAXException e) {
          LOGGER.warn(""String_Node_Str"",e);
        }
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}",0.9980506822612084
188377,"public static String executeAvconv(Path input,Path output,String commandArguments,String outputArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  command=command.replace(""String_Node_Str"",outputArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  return CommandUtility.execute(commandList);
}","public static String executeAvconv(Path input,Path output,String commandArguments,String outputArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  command=command.replace(""String_Node_Str"",outputArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  for (int i=0; i < commandList.size(); i++) {
    if (""String_Node_Str"".equals(commandList.get(i))) {
      commandList.set(i,input.toString());
    }
  }
  return CommandUtility.execute(commandList);
}",0.8507157464212679
188378,"public static String executeGS(Path input,Path output,String commandArguments) throws GhostscriptException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String[] gsArgs=command.split(""String_Node_Str"");
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}","public static String executeGS(Path input,Path output,String commandArguments) throws GhostscriptException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String[] gsArgs=command.split(""String_Node_Str"");
  for (int i=0; i < gsArgs.length; i++) {
    if (""String_Node_Str"".equals(gsArgs[i])) {
      gsArgs[i]=input.toString();
    }
  }
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}",0.8926615553121577
188379,"public static String executeImageMagick(Path input,Path output,String outputFormat,String commandArguments) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",outputFormat + ""String_Node_Str"" + output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  return CommandUtility.execute(Arrays.asList(command.split(""String_Node_Str"")));
}","public static String executeImageMagick(Path input,Path output,String outputFormat,String commandArguments) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",outputFormat + ""String_Node_Str"" + output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  for (int i=0; i < commandList.size(); i++) {
    if (""String_Node_Str"".equals(commandList.get(i))) {
      commandList.set(i,input.toString());
    }
  }
  return CommandUtility.execute(commandList);
}",0.622187742435997
188380,"public static String executeSox(Path input,Path output,String commandArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  return CommandUtility.execute(commandList);
}","public static String executeSox(Path input,Path output,String commandArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  for (int i=0; i < commandList.size(); i++) {
    if (""String_Node_Str"".equals(commandList.get(i))) {
      commandList.set(i,input.toString());
    }
  }
  return CommandUtility.execute(commandList);
}",0.8575146389069617
188381,"public static String executeUnoconvConvert(Path input,Path output,String outputFormat,String commandArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",outputFormat);
  command=command.replace(""String_Node_Str"",commandArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  return CommandUtility.execute(commandList);
}","public static String executeUnoconvConvert(Path input,Path output,String outputFormat,String commandArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",outputFormat);
  command=command.replace(""String_Node_Str"",commandArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  for (int i=0; i < commandList.size(); i++) {
    if (""String_Node_Str"".equals(commandList.get(i))) {
      commandList.set(i,input.toString());
    }
  }
  return CommandUtility.execute(commandList);
}",0.8511216859279401
188382,"@Test public void testJobExecutingPluginThatStopsItselfUsingOrchestratorStop() throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  ModelService modelService=RodaCoreFactory.getModelService();
  List<String> aips=new ArrayList<>();
  try {
    for (int i=0; i < 30; i++) {
      aips.add(modelService.createAIP(null,RodaConstants.REPRESENTATION_TYPE_MIXED,new Permissions(),RodaConstants.ADMIN).getId());
    }
  }
 catch (  AlreadyExistsException e) {
  }
  int originalNumberOfJobWorkers=JobsHelper.getNumberOfJobsWorkers();
  int originalBlockSize=JobsHelper.getBlockSize();
  JobsHelper.setNumberOfJobsWorkers(1);
  JobsHelper.setBlockSize(1);
  TestsHelper.executeJob(PluginThatStopsItself.class,PluginType.MISC,SelectedItemsNone.create(),JOB_STATE.STOPPED);
  JobsHelper.setNumberOfJobsWorkers(originalNumberOfJobWorkers);
  JobsHelper.setBlockSize(originalBlockSize);
}","@Test public void testJobExecutingPluginThatStopsItselfUsingOrchestratorStop() throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  ModelService modelService=RodaCoreFactory.getModelService();
  List<String> aips=new ArrayList<>();
  try {
    for (int i=0; i < 30; i++) {
      aips.add(modelService.createAIP(null,RodaConstants.REPRESENTATION_TYPE_MIXED,new Permissions(),RodaConstants.ADMIN).getId());
    }
  }
 catch (  AlreadyExistsException e) {
  }
  int originalNumberOfJobWorkers=JobsHelper.getNumberOfJobsWorkers();
  int originalBlockSize=JobsHelper.getBlockSize();
  JobsHelper.setNumberOfJobsWorkers(1);
  JobsHelper.setBlockSize(1);
  TestsHelper.executeJob(PluginThatStopsItself.class,PluginType.MISC,SelectedItemsList.create(AIP.class,aips),JOB_STATE.STOPPED);
  JobsHelper.setNumberOfJobsWorkers(originalNumberOfJobWorkers);
  JobsHelper.setBlockSize(originalBlockSize);
}",0.979635584137192
188383,"@Override public List<Class<Void>> getObjectClasses(){
  return Arrays.asList(Void.class);
}","@Override public List<Class<AIP>> getObjectClasses(){
  return Arrays.asList(AIP.class);
}",0.9230769230769232
188384,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> list) throws PluginException {
  long sleepTime=ThreadLocalRandom.current().nextLong(1,3 + 1) * 1000;
  LOGGER.info(""String_Node_Str"",sleepTime);
  try {
    Thread.sleep(sleepTime);
    Job job=PluginHelper.getJob(this,RodaCoreFactory.getModelService());
    RodaCoreFactory.getPluginOrchestrator().stopJob(job);
  }
 catch (  NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|InterruptedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.info(""String_Node_Str"",sleepTime);
  return null;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> list) throws PluginException {
  long sleepTime=1000;
  LOGGER.info(""String_Node_Str"",sleepTime);
  try {
    Thread.sleep(sleepTime);
    Job job=PluginHelper.getJob(this,RodaCoreFactory.getModelService());
    RodaCoreFactory.getPluginOrchestrator().stopJob(job);
  }
 catch (  NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|InterruptedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.info(""String_Node_Str"",sleepTime);
  return null;
}",0.9626749611197511
188385,"@Override public Plugin<Void> cloneMe(){
  return new PluginThatStopsItself();
}","@Override public Plugin<AIP> cloneMe(){
  return new PluginThatStopsItself();
}",0.9559748427672956
188386,"@Override public void onValueChange(ValueChangeEvent<Boolean> event){
  workflowList.clear();
  boolean noChecks=true;
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    int pluginsAdded=0;
    for (    PluginInfo pluginInfo : plugins) {
      if (pluginInfo != null) {
        List<String> categories=pluginInfo.getCategories();
        if (categories != null) {
          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
            if (checkbox.getValue()) {
              noChecks=false;
              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                if (pluginsAdded == 0) {
                  CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                  pluginItem.addStyleName(""String_Node_Str"");
                  pluginsAdded++;
                }
              }
            }
          }
          if (noChecks) {
            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
              if (pluginsAdded == 0) {
                CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                pluginItem.addStyleName(""String_Node_Str"");
                pluginsAdded++;
              }
            }
          }
        }
      }
    }
  }
  updateWorkflowOptions();
}","@Override public void onValueChange(ValueChangeEvent<Boolean> event){
  workflowList.clear();
  boolean noChecks=true;
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    List<String> pluginsAdded=new ArrayList<>();
    for (    PluginInfo pluginInfo : plugins) {
      if (pluginInfo != null) {
        List<String> categories=pluginInfo.getCategories();
        if (categories != null) {
          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
            if (checkbox.getValue()) {
              noChecks=false;
              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))&& !pluginsAdded.contains(pluginInfo.getId())) {
                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                if (pluginsAdded.isEmpty()) {
                  CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                  pluginItem.addStyleName(""String_Node_Str"");
                }
                pluginsAdded.add(pluginInfo.getId());
              }
            }
          }
          if (noChecks) {
            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
              if (pluginsAdded.isEmpty()) {
                CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                pluginItem.addStyleName(""String_Node_Str"");
              }
              pluginsAdded.add(pluginInfo.getId());
            }
          }
        }
      }
    }
  }
  updateWorkflowOptions();
}",0.9427987742594484
188387,"public void configurePlugins(final String selectedClass){
  List<String> categoriesOnListBox=new ArrayList<>();
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    int pluginAdded=0;
    for (    PluginInfo pluginInfo : plugins) {
      if (pluginInfo != null) {
        List<String> pluginCategories=pluginInfo.getCategories();
        if (pluginCategories != null) {
          for (          String category : pluginCategories) {
            if (!categoriesOnListBox.contains(category) && !category.equals(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
              CheckBox box=new CheckBox();
              box.setText(messages.showPluginCategories(category));
              box.setName(category);
              box.addStyleName(""String_Node_Str"");
              box.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
                @Override public void onValueChange(                ValueChangeEvent<Boolean> event){
                  workflowList.clear();
                  boolean noChecks=true;
                  if (plugins != null) {
                    PluginUtils.sortByName(plugins);
                    int pluginsAdded=0;
                    for (                    PluginInfo pluginInfo : plugins) {
                      if (pluginInfo != null) {
                        List<String> categories=pluginInfo.getCategories();
                        if (categories != null) {
                          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
                            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
                            if (checkbox.getValue()) {
                              noChecks=false;
                              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
                                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                                if (pluginsAdded == 0) {
                                  CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                  pluginItem.addStyleName(""String_Node_Str"");
                                  pluginsAdded++;
                                }
                              }
                            }
                          }
                          if (noChecks) {
                            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
                              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                              if (pluginsAdded == 0) {
                                CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                pluginItem.addStyleName(""String_Node_Str"");
                                pluginsAdded++;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  updateWorkflowOptions();
                }
              }
);
              workflowCategoryList.add(box);
              categoriesOnListBox.add(category);
            }
          }
          if (!pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
            Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
            if (pluginAdded == 0) {
              CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
              pluginItem.addStyleName(""String_Node_Str"");
              pluginAdded++;
            }
          }
        }
      }
 else {
        GWT.log(""String_Node_Str"");
      }
    }
    updateWorkflowOptions();
  }
}","public void configurePlugins(final String selectedClass){
  List<String> categoriesOnListBox=new ArrayList<>();
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    int pluginAdded=0;
    for (    PluginInfo pluginInfo : plugins) {
      if (pluginInfo != null) {
        List<String> pluginCategories=pluginInfo.getCategories();
        if (pluginCategories != null) {
          for (          String category : pluginCategories) {
            if (!categoriesOnListBox.contains(category) && !category.equals(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
              CheckBox box=new CheckBox();
              box.setText(messages.showPluginCategories(category));
              box.setName(category);
              box.addStyleName(""String_Node_Str"");
              box.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
                @Override public void onValueChange(                ValueChangeEvent<Boolean> event){
                  workflowList.clear();
                  boolean noChecks=true;
                  if (plugins != null) {
                    PluginUtils.sortByName(plugins);
                    List<String> pluginsAdded=new ArrayList<>();
                    for (                    PluginInfo pluginInfo : plugins) {
                      if (pluginInfo != null) {
                        List<String> categories=pluginInfo.getCategories();
                        if (categories != null) {
                          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
                            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
                            if (checkbox.getValue()) {
                              noChecks=false;
                              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))&& !pluginsAdded.contains(pluginInfo.getId())) {
                                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                                if (pluginsAdded.isEmpty()) {
                                  CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                  pluginItem.addStyleName(""String_Node_Str"");
                                }
                                pluginsAdded.add(pluginInfo.getId());
                              }
                            }
                          }
                          if (noChecks) {
                            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
                              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                              if (pluginsAdded.isEmpty()) {
                                CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                pluginItem.addStyleName(""String_Node_Str"");
                              }
                              pluginsAdded.add(pluginInfo.getId());
                            }
                          }
                        }
                      }
                    }
                  }
                  updateWorkflowOptions();
                }
              }
);
              workflowCategoryList.add(box);
              categoriesOnListBox.add(category);
            }
          }
          if (!pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && ((!isSelectedEmpty() && pluginInfo.hasObjectClass(selectedClass)) || (isSelectedEmpty() && pluginInfo.hasObjectClass(listSelectedClass)))) {
            Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
            if (pluginAdded == 0) {
              CreateSelectedJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
              pluginItem.addStyleName(""String_Node_Str"");
              pluginAdded++;
            }
          }
        }
      }
 else {
        GWT.log(""String_Node_Str"");
      }
    }
    updateWorkflowOptions();
  }
}",0.9673098751418844
188388,"public void setUsers(Map<PermissionType,Set<String>> users){
  this.users=users;
}","public void setUsers(EnumMap<PermissionType,Set<String>> users){
  this.users=users;
}",0.9761904761904762
188389,"public Map<PermissionType,Set<String>> getUsers(){
  return users;
}","public EnumMap<PermissionType,Set<String>> getUsers(){
  return users;
}",0.9714285714285714
188390,"public void setGroups(Map<PermissionType,Set<String>> groups){
  this.groups=groups;
}","public void setGroups(EnumMap<PermissionType,Set<String>> groups){
  this.groups=groups;
}",0.9772727272727272
188391,"public Map<PermissionType,Set<String>> getGroups(){
  return groups;
}","public EnumMap<PermissionType,Set<String>> getGroups(){
  return groups;
}",0.9722222222222222
188392,"@Test public void testRiskIndex(){
  try {
    Risk risk=new Risk();
    risk.setName(""String_Node_Str"");
    risk.setDescription(""String_Node_Str"");
    risk.setIdentifiedOn(new Date());
    risk.setIdentifiedBy(""String_Node_Str"");
    risk.setCategory(""String_Node_Str"");
    risk.setNotes(""String_Node_Str"");
    risk.setPreMitigationProbability(4);
    risk.setPreMitigationImpact(4);
    risk.setPreMitigationSeverity(16);
    risk.setPreMitigationSeverityLevel(SEVERITY_LEVEL.HIGH);
    risk.setPreMitigationNotes(""String_Node_Str"");
    risk.setPostMitigationProbability(3);
    risk.setPostMitigationImpact(2);
    risk.setPostMitigationSeverity(6);
    risk.setPostMitigationSeverityLevel(SEVERITY_LEVEL.MODERATE);
    risk.setPostMitigationNotes(""String_Node_Str"");
    risk.setMitigationStrategy(""String_Node_Str"");
    risk.setMitigationOwnerType(""String_Node_Str"");
    risk.setMitigationOwner(""String_Node_Str"");
    risk.setMitigationRelatedEventIdentifierType(""String_Node_Str"");
    risk.setMitigationRelatedEventIdentifierValue(""String_Node_Str"");
    risk.setCreatedOn(new Date());
    risk.setCreatedBy(""String_Node_Str"");
    risk.setUpdatedOn(new Date());
    risk.setUpdatedBy(""String_Node_Str"");
    model.createRisk(risk,false);
    index.commit(IndexedRisk.class);
    Risk risk2=model.retrieveRisk(risk.getId());
    assertNotNull(risk2);
    assertEquals(risk.getId(),risk2.getId());
    assertEquals(risk.getName(),risk2.getName());
    IndexResult<IndexedRisk> find=index.find(IndexedRisk.class,null,null,new Sublist(0,10),Collections.emptyList());
    assertEquals(1,find.getTotalCount());
    Risk risk3=index.retrieve(IndexedRisk.class,risk.getId(),new ArrayList<>());
    assertNotNull(risk3);
    assertEquals(risk.getId(),risk3.getId());
    assertEquals(risk.getName(),risk3.getName());
    risk3.setName(""String_Node_Str"");
    Map<String,String> properties=new HashMap<>();
    properties.put(RodaConstants.VERSION_ACTION,RodaConstants.VersionAction.UPDATED.toString());
    model.updateRisk(risk3,properties,false,0);
    Risk risk4=index.retrieve(IndexedRisk.class,risk.getId(),new ArrayList<>());
    assertNotNull(risk4);
    assertEquals(risk.getId(),risk4.getId());
    assertEquals(risk4.getName(),""String_Node_Str"");
    model.deleteRisk(risk.getId(),false);
  }
 catch (  GenericException|RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    e.printStackTrace();
    assertTrue(false);
  }
}","@Test public void testRiskIndex(){
  try {
    Risk risk=new Risk();
    risk.setName(""String_Node_Str"");
    risk.setDescription(""String_Node_Str"");
    risk.setIdentifiedOn(new Date());
    risk.setIdentifiedBy(""String_Node_Str"");
    risk.setCategory(""String_Node_Str"");
    risk.setNotes(""String_Node_Str"");
    risk.setPreMitigationProbability(4);
    risk.setPreMitigationImpact(4);
    risk.setPreMitigationSeverity(16);
    risk.setPreMitigationSeverityLevel(SEVERITY_LEVEL.HIGH);
    risk.setPreMitigationNotes(""String_Node_Str"");
    risk.setPostMitigationProbability(3);
    risk.setPostMitigationImpact(2);
    risk.setPostMitigationSeverity(6);
    risk.setPostMitigationSeverityLevel(SEVERITY_LEVEL.MODERATE);
    risk.setPostMitigationNotes(""String_Node_Str"");
    risk.setMitigationStrategy(""String_Node_Str"");
    risk.setMitigationOwnerType(""String_Node_Str"");
    risk.setMitigationOwner(""String_Node_Str"");
    risk.setMitigationRelatedEventIdentifierType(""String_Node_Str"");
    risk.setMitigationRelatedEventIdentifierValue(""String_Node_Str"");
    risk.setCreatedOn(new Date());
    risk.setCreatedBy(""String_Node_Str"");
    risk.setUpdatedOn(new Date());
    risk.setUpdatedBy(""String_Node_Str"");
    model.createRisk(risk,false);
    index.commit(IndexedRisk.class);
    Risk risk2=model.retrieveRisk(risk.getId());
    assertNotNull(risk2);
    assertEquals(risk.getId(),risk2.getId());
    assertEquals(risk.getName(),risk2.getName());
    IndexResult<IndexedRisk> find=index.find(IndexedRisk.class,null,null,new Sublist(0,10),Collections.emptyList());
    assertEquals(1,find.getTotalCount());
    Risk risk3=index.retrieve(IndexedRisk.class,risk.getId(),new ArrayList<>());
    assertNotNull(risk3);
    assertEquals(risk.getId(),risk3.getId());
    assertEquals(risk.getName(),risk3.getName());
    risk3.setName(""String_Node_Str"");
    Map<String,String> properties=new HashMap<>();
    properties.put(RodaConstants.VERSION_ACTION,RodaConstants.VersionAction.UPDATED.toString());
    model.updateRisk(risk3,properties,false,0);
    Risk risk4=index.retrieve(IndexedRisk.class,risk.getId(),new ArrayList<>());
    assertNotNull(risk4);
    assertEquals(risk.getId(),risk4.getId());
    assertEquals(risk4.getName(),""String_Node_Str"");
    model.deleteRisk(risk.getId(),false);
  }
 catch (  GenericException|RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    e.printStackTrace(System.err);
    assertTrue(false);
  }
}",0.9979773462783172
188393,"private static void runSolrQuery(List<String> args){
  String collection=args.get(2);
  String solrQueryString=args.get(3);
  try {
    QueryResponse executeSolrQuery=SolrUtils.executeSolrQuery(solr,collection,solrQueryString);
    SolrDocumentList results=executeSolrQuery.getResults();
    System.out.println(""String_Node_Str"" + results.getNumFound() + ""String_Node_Str""+ results.size());
    for (    SolrDocument solrDocument : results) {
      System.out.println(""String_Node_Str"" + solrDocument);
    }
  }
 catch (  SolrServerException|IOException e) {
    e.printStackTrace();
  }
}","private static void runSolrQuery(List<String> args){
  String collection=args.get(2);
  String solrQueryString=args.get(3);
  try {
    QueryResponse executeSolrQuery=SolrUtils.executeSolrQuery(solr,collection,solrQueryString);
    SolrDocumentList results=executeSolrQuery.getResults();
    System.out.println(""String_Node_Str"" + results.getNumFound() + ""String_Node_Str""+ results.size());
    for (    SolrDocument solrDocument : results) {
      System.out.println(""String_Node_Str"" + solrDocument);
    }
  }
 catch (  SolrServerException|IOException e) {
    e.printStackTrace(System.err);
  }
}",0.9915966386554622
188394,"private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  EnumMap<PermissionType,Set<String>> userPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  Map<PermissionType,Set<String>> groupPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(groupPermissions);
  return permissions;
}","private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  EnumMap<PermissionType,Set<String>> userPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  EnumMap<PermissionType,Set<String>> groupPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(groupPermissions);
  return permissions;
}",0.9978094194961664
188395,"public static <T extends IsIndexed>List<String> getClassLiteFields(Class<T> classToRetrieve){
  List<String> ret;
  if (liteFieldsForEachClass.containsKey(classToRetrieve.getName())) {
    ret=liteFieldsForEachClass.get(classToRetrieve.getName());
  }
 else {
    try {
      ret=((T)classToRetrieve.newInstance()).liteFields();
      liteFieldsForEachClass.put(classToRetrieve.getName(),ret);
    }
 catch (    InstantiationException|IllegalAccessException e) {
      LOGGER.error(""String_Node_Str"",classToRetrieve.getName(),e);
      ret=new ArrayList<>();
    }
  }
  return ret;
}","public static <T extends IsIndexed>List<String> getClassLiteFields(Class<T> classToRetrieve){
  List<String> ret;
  if (liteFieldsForEachClass.containsKey(classToRetrieve.getName())) {
    ret=liteFieldsForEachClass.get(classToRetrieve.getName());
  }
 else {
    try {
      ret=classToRetrieve.newInstance().liteFields();
      liteFieldsForEachClass.put(classToRetrieve.getName(),ret);
    }
 catch (    InstantiationException|IllegalAccessException e) {
      LOGGER.error(""String_Node_Str"",classToRetrieve.getName(),e);
      ret=new ArrayList<>();
    }
  }
  return ret;
}",0.9957007738607052
188396,"/** 
 * @deprecated use {@link #objectToString(Object,String)} instead
 */
private static String objectToString(Object object){
  String ret;
  if (object == null) {
    ret=null;
  }
 else   if (object instanceof String) {
    ret=(String)object;
  }
 else {
    LOGGER.warn(""String_Node_Str"",object.getClass().getName());
    ret=object.toString();
  }
  return ret;
}","/** 
 * @deprecated use {@link #objectToString(Object,String)} instead
 */
@Deprecated private static String objectToString(Object object){
  String ret;
  if (object == null) {
    ret=null;
  }
 else   if (object instanceof String) {
    ret=(String)object;
  }
 else {
    LOGGER.warn(""String_Node_Str"",object.getClass().getName());
    ret=object.toString();
  }
  return ret;
}",0.9840425531914894
188397,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!super.equals(obj) || obj == null || getClass() != obj.getClass()) {
    return false;
  }
  DefaultBinary other=(DefaultBinary)obj;
  if (content == null) {
    if (other.content != null) {
      return false;
    }
  }
 else   if (!content.equals(other.content)) {
    return false;
  }
  if (contentDigest == null) {
    if (other.contentDigest != null) {
      return false;
    }
  }
 else   if (!contentDigest.equals(other.contentDigest)) {
    return false;
  }
  if (reference != other.reference) {
    return false;
  }
  if (sizeInBytes == null) {
    if (other.sizeInBytes != null) {
      return false;
    }
  }
 else   if (!sizeInBytes.equals(other.sizeInBytes)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!super.equals(obj) || getClass() != obj.getClass()) {
    return false;
  }
  DefaultBinary other=(DefaultBinary)obj;
  if (content == null) {
    if (other.content != null) {
      return false;
    }
  }
 else   if (!content.equals(other.content)) {
    return false;
  }
  if (contentDigest == null) {
    if (other.contentDigest != null) {
      return false;
    }
  }
 else   if (!contentDigest.equals(other.contentDigest)) {
    return false;
  }
  if (reference != other.reference) {
    return false;
  }
  if (sizeInBytes == null) {
    if (other.sizeInBytes != null) {
      return false;
    }
  }
 else   if (!sizeInBytes.equals(other.sizeInBytes)) {
    return false;
  }
  return true;
}",0.8531553398058253
188398,"@Override public void onChange(ChangeEvent changeEvent){
  String typeString=null;
  String version=""String_Node_Str"";
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      HashSet<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new HashSet<>();
        for (        MetadataValue mv : bundle.getValues())         newValues.add(mv.clone());
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}","@Override public void onChange(ChangeEvent changeEvent){
  String typeString=null;
  String version=""String_Node_Str"";
  String value=type.getSelectedValue();
  if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
    typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
    version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
  }
  if (typeString == null) {
    typeString=value;
  }
  BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    DescriptiveMetadataEditBundle editBundle){
      bundle=editBundle;
      HashSet<MetadataValue> newValues=null;
      if (bundle.getValues() != null) {
        newValues=new HashSet<>();
        for (        MetadataValue mv : bundle.getValues())         newValues.add(mv.copy());
      }
      supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
      updateFormOrXML();
    }
  }
);
}",0.9974937343358397
188399,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.clone());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null;
      String version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.clone());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.copy());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null;
      String version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.copy());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().equalsIgnoreCase(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
  Element firstElement=showXml.getElement().getFirstChildElement();
  if (""String_Node_Str"".equalsIgnoreCase(firstElement.getTagName())) {
    firstElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9985705534000408
188400,"/** 
 * Creates a new MetadataValue object.
 * @param id The id of the MetadataValue object.
 * @param options The options map of the MetadataValue
 */
public MetadataValue(String id,HashMap<String,String> options){
  this.id=id;
  if (options == null || options.isEmpty()) {
    this.options=new HashMap<>();
  }
 else {
    this.options=options;
  }
  if (!this.options.containsKey(""String_Node_Str"")) {
    this.options.put(""String_Node_Str"",getTitle(id));
  }
}","/** 
 * Creates a new MetadataValue object.
 * @param id The id of the MetadataValue object.
 * @param options The options map of the MetadataValue
 */
public MetadataValue(String id,HashMap<String,String> options){
  this.id=id;
  if (options == null || options.isEmpty()) {
    this.options=new HashMap<>();
  }
 else {
    this.options=options;
  }
  if (!this.options.containsKey(""String_Node_Str"")) {
    this.options.put(""String_Node_Str"",id);
  }
}",0.9847826086956522
188401,"private Pair(K first,V second){
  this.first=first;
  this.second=second;
}","/** 
 * Instead of using this construtor, the of function should be used
 */
public Pair(K first,V second){
  this.first=first;
  this.second=second;
}",0.6194690265486725
188402,"/** 
 * Copies a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 */
public static void copy(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException {
  if (!replaceExisting && FSUtils.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    Files.createDirectories(targetPath.getParent());
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  if (FSUtils.isDirectory(sourcePath)) {
    try {
      Files.walkFileTree(sourcePath,new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult preVisitDirectory(        final Path dir,        final BasicFileAttributes attrs) throws IOException {
          Files.createDirectories(targetPath.resolve(sourcePath.relativize(dir)));
          return FileVisitResult.CONTINUE;
        }
        @Override public FileVisitResult visitFile(        final Path file,        final BasicFileAttributes attrs) throws IOException {
          Files.copy(file,targetPath.resolve(sourcePath.relativize(file)));
          return FileVisitResult.CONTINUE;
        }
      }
);
    }
 catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
 else {
    try {
      CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
      Files.copy(sourcePath,targetPath,copyOptions);
    }
 catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}","/** 
 * Copies a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 */
public static void copy(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException {
  if (!replaceExisting && FSUtils.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    if (targetPath != null) {
      Files.createDirectories(targetPath.getParent());
    }
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  if (FSUtils.isDirectory(sourcePath)) {
    try {
      Files.walkFileTree(sourcePath,new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult preVisitDirectory(        final Path dir,        final BasicFileAttributes attrs) throws IOException {
          Files.createDirectories(targetPath.resolve(sourcePath.relativize(dir)));
          return FileVisitResult.CONTINUE;
        }
        @Override public FileVisitResult visitFile(        final Path file,        final BasicFileAttributes attrs) throws IOException {
          Files.copy(file,targetPath.resolve(sourcePath.relativize(file)));
          return FileVisitResult.CONTINUE;
        }
      }
);
    }
 catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
 else {
    try {
      CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
      Files.copy(sourcePath,targetPath,copyOptions);
    }
 catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}",0.9895547003848268
188403,"/** 
 * Moves a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws NotFoundException
 */
public static void move(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException, NotFoundException {
  if (!replaceExisting && FSUtils.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    Files.createDirectories(targetPath.getParent());
  }
 catch (  FileAlreadyExistsException e) {
  }
catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
  if (FSUtils.isDirectory(sourcePath)) {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    DirectoryNotEmptyException e) {
      LOGGER.debug(""String_Node_Str"",sourcePath,targetPath);
      moveRecursively(sourcePath,targetPath,replaceExisting);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ targetPath,e);
    }
  }
 else {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    NoSuchFileException e) {
      throw new NotFoundException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}","/** 
 * Moves a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws NotFoundException
 */
public static void move(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException, NotFoundException {
  if (!replaceExisting && FSUtils.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    if (targetPath != null) {
      Files.createDirectories(targetPath.getParent());
    }
  }
 catch (  FileAlreadyExistsException e) {
  }
catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
  if (FSUtils.isDirectory(sourcePath)) {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    DirectoryNotEmptyException e) {
      LOGGER.debug(""String_Node_Str"",sourcePath,targetPath);
      moveRecursively(sourcePath,targetPath,replaceExisting);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ targetPath,e);
    }
  }
 else {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    NoSuchFileException e) {
      throw new NotFoundException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}",0.9884918231374924
188404,"public void setObjects(List<Format> formats){
  this.formatList=formats;
}","@Override public void setObjects(List<Format> formats){
  this.formatList=formats;
}",0.9367088607594936
188405,"public void addObject(Format format){
  this.formatList.add(format);
}","@Override public void addObject(Format format){
  this.formatList.add(format);
}",0.9333333333333332
188406,"@JsonProperty(value=RodaConstants.RODA_OBJECT_FORMATS) @XmlElement(name=RodaConstants.RODA_OBJECT_FORMAT) public List<Format> getObjects(){
  return formatList;
}","@Override @JsonProperty(value=RodaConstants.RODA_OBJECT_FORMATS) @XmlElement(name=RodaConstants.RODA_OBJECT_FORMAT) public List<Format> getObjects(){
  return formatList;
}",0.9700598802395208
188407,"public String toString(){
  return ""String_Node_Str"" + this.query + ""String_Node_Str""+ this.parameters+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + this.query + ""String_Node_Str""+ this.parameters+ ""String_Node_Str"";
}",0.9612403100775194
188408,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}",0.9683544303797468
188409,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getExpression()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getExpression()+ ""String_Node_Str"";
}",0.9693251533742332
188410,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}",0.9683544303797468
188411,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValues()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValues()+ ""String_Node_Str"";
}",0.9685534591194968
188412,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getFromValue()+ ""String_Node_Str""+ getToValue()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getFromValue()+ ""String_Node_Str""+ getToValue()+ ""String_Node_Str"";
}",0.9743589743589745
188413,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getRegex()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getRegex()+ ""String_Node_Str"";
}",0.9683544303797468
188414,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}","/** 
 * @see Object#toString()
 */
@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
}",0.9683544303797468
188415,"public void setPermissions(Permissions permissions){
  this.permissions=permissions;
}","@Override public void setPermissions(Permissions permissions){
  this.permissions=permissions;
}",0.945054945054945
188416,"public Permissions getPermissions(){
  return permissions;
}","@Override public Permissions getPermissions(){
  return permissions;
}",0.9230769230769232
188417,"public void setObjects(List<TransferredResource> resources){
  this.resources=resources;
}","@Override public void setObjects(List<TransferredResource> resources){
  this.resources=resources;
}",0.9473684210526316
188418,"public void addObject(TransferredResource resource){
  this.resources.add(resource);
}","@Override public void addObject(TransferredResource resource){
  this.resources.add(resource);
}",0.945054945054945
188419,"@JsonProperty(value=RodaConstants.RODA_OBJECT_TRANSFERRED_RESOURCES) @XmlElement(name=RodaConstants.RODA_OBJECT_TRANSFERRED_RESOURCE) public List<TransferredResource> getObjects(){
  return resources;
}","@Override @JsonProperty(value=RodaConstants.RODA_OBJECT_TRANSFERRED_RESOURCES) @XmlElement(name=RodaConstants.RODA_OBJECT_TRANSFERRED_RESOURCE) public List<TransferredResource> getObjects(){
  return resources;
}",0.9758454106280192
188420,"public String getId(){
  return id;
}","@Override public String getId(){
  return id;
}",0.8809523809523809
188421,"@Override public PluginType getType(){
  return PluginType.MISC;
}","@Override public PluginType getType(){
  return PluginType.INTERNAL;
}",0.9264705882352942
188422,"public static IndexedAIP moveAIPInHierarchy(User user,SelectedItems<IndexedAIP> selected,String parentId,String details) throws GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException, AlreadyExistsException, ValidationException {
  Locale locale=ServerTools.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  String eventDescription=messages.getTranslation(RodaConstants.EVENT_UPDATE_ON_REPOSITORY);
  Job job=new Job();
  job.setId(UUID.randomUUID().toString());
  job.setName(""String_Node_Str"");
  job.setSourceObjects(selected);
  job.setPlugin(MovePlugin.class.getCanonicalName());
  job.setPluginType(PluginType.INTERNAL);
  job.setUsername(user.getName());
  Map<String,String> pluginParameters=new HashMap<>();
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_AIP_ID,parentId);
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DETAILS,details);
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_EVENT_DESCRIPTION,eventDescription);
  job.setPluginParameters(pluginParameters);
  RodaCoreFactory.getModelService().createJob(job);
  try {
    RodaCoreFactory.getPluginOrchestrator().executeJob(job,true);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  IndexService index=RodaCoreFactory.getIndexService();
  index.commit(IndexedAIP.class);
  index.commit(IndexedRepresentation.class);
  index.commit(IndexedFile.class);
  return (parentId != null) ? index.retrieve(IndexedAIP.class,parentId,Arrays.asList(RodaConstants.INDEX_UUID)) : null;
}","public static IndexedAIP moveAIPInHierarchy(User user,SelectedItems<IndexedAIP> selected,String parentId,String details) throws GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException, AlreadyExistsException, ValidationException {
  Locale locale=ServerTools.parseLocale(RodaConstants.DEFAULT_EVENT_LOCALE);
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  String eventDescription=messages.getTranslation(RodaConstants.EVENT_UPDATE_ON_REPOSITORY);
  Job job=new Job();
  job.setId(UUID.randomUUID().toString());
  job.setName(""String_Node_Str"");
  job.setSourceObjects(selected);
  job.setPlugin(MovePlugin.class.getCanonicalName());
  job.setPluginType(PluginType.INTERNAL);
  job.setUsername(user.getName());
  Map<String,String> pluginParameters=new HashMap<>();
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_ID,parentId);
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_DETAILS,details);
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_EVENT_DESCRIPTION,eventDescription);
  job.setPluginParameters(pluginParameters);
  RodaCoreFactory.getModelService().createJob(job);
  try {
    RodaCoreFactory.getPluginOrchestrator().executeJob(job,true);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  IndexService index=RodaCoreFactory.getIndexService();
  index.commit(IndexedAIP.class);
  index.commit(IndexedRepresentation.class);
  index.commit(IndexedFile.class);
  return (parentId != null) ? index.retrieve(IndexedAIP.class,parentId,Arrays.asList(RodaConstants.INDEX_UUID)) : null;
}",0.9987429289754872
188423,"/** 
 * Start showing popup
 */
public void start(){
  setPopupPositionAndShow(new PositionCallback(){
    public void setPosition(    int offsetWidth,    int offsetHeight){
      int slotOffset=0;
      for (int i=0; i < slotNumber; i++) {
        if (slots[i] != null) {
          slotOffset+=slots[i].getOffsetHeight() + PADDING;
        }
      }
      Toast.this.setPopupPosition(Window.getClientWidth() - offsetWidth - PADDING,Window.getScrollTop() + PADDING + slotOffset);
    }
  }
);
  hideTimer.schedule(HIDE_DELAY_MS);
}","/** 
 * Start showing popup
 */
public void start(){
  setPopupPositionAndShow(new PositionCallback(){
    public void setPosition(    int offsetWidth,    int offsetHeight){
      int slotOffset=0;
      for (int i=0; i < slotNumber; i++) {
        if (slots[i] != null) {
          slotOffset+=slots[i].getOffsetHeight() + PADDING;
        }
      }
      Window.scrollTo(Window.getScrollLeft(),0);
      Toast.this.setPopupPosition(Window.getClientWidth() - offsetWidth - PADDING,Window.getScrollTop() + PADDING + slotOffset);
    }
  }
);
  hideTimer.schedule(HIDE_DELAY_MS);
}",0.955895589558956
188424,"public void setPosition(int offsetWidth,int offsetHeight){
  int slotOffset=0;
  for (int i=0; i < slotNumber; i++) {
    if (slots[i] != null) {
      slotOffset+=slots[i].getOffsetHeight() + PADDING;
    }
  }
  Toast.this.setPopupPosition(Window.getClientWidth() - offsetWidth - PADDING,Window.getScrollTop() + PADDING + slotOffset);
}","public void setPosition(int offsetWidth,int offsetHeight){
  int slotOffset=0;
  for (int i=0; i < slotNumber; i++) {
    if (slots[i] != null) {
      slotOffset+=slots[i].getOffsetHeight() + PADDING;
    }
  }
  Window.scrollTo(Window.getScrollLeft(),0);
  Toast.this.setPopupPosition(Window.getClientWidth() - offsetWidth - PADDING,Window.getScrollTop() + PADDING + slotOffset);
}",0.9375866851595008
188425,"@Test public void siegfriedCorporaTestAIP() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  String aipId=ingestReports.get(0).getOutcomeObjectId();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(AIP.class,aipId));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(0,report.getReports().size());
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
}","@Test public void siegfriedCorporaTestAIP() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  String aipId=ingestReports.get(0).getOutcomeObjectId();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(AIP.class,aipId));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(1,report.getReports().size());
  Report innerReport=report.getReports().get(0);
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
  AssertJUnit.assertEquals(true,report.getDateCreated().equals(innerReport.getDateCreated()));
  AssertJUnit.assertEquals(true,report.getDateUpdated().equals(innerReport.getDateUpdated()));
}",0.9036501150937192
188426,"@Test private void ingestCorporaTest() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException, SolrServerException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job job=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  for (  Report report : jobReports) {
    AssertJUnit.assertEquals(5,report.getReports().size());
    AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
  }
}","@Test private void ingestCorporaTest() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException, SolrServerException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job job=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  for (  Report report : jobReports) {
    AssertJUnit.assertEquals(MinimalIngestPlugin.TOTAL_STEPS,report.getReports().size());
    Report first=report.getReports().get(0);
    Report last=report.getReports().get(MinimalIngestPlugin.TOTAL_STEPS - 1);
    AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
    AssertJUnit.assertEquals(true,report.getDateCreated().equals(first.getDateCreated()));
    AssertJUnit.assertEquals(true,report.getDateUpdated().equals(last.getDateUpdated()));
  }
}",0.8779956427015251
188427,"@Test public void siegfriedCorporaTestRepresentation() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  IndexResult<IndexedRepresentation> reps=index.find(IndexedRepresentation.class,Filter.ALL,Sorter.NONE,new Sublist(0,1),new ArrayList<String>());
  String representationUUID=reps.getResults().get(0).getUUID();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(IndexedRepresentation.class,representationUUID));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(0,report.getReports().size());
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
}","@Test public void siegfriedCorporaTestRepresentation() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  IndexResult<IndexedRepresentation> reps=index.find(IndexedRepresentation.class,Filter.ALL,Sorter.NONE,new Sublist(0,1),new ArrayList<String>());
  String representationUUID=reps.getResults().get(0).getUUID();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(IndexedRepresentation.class,representationUUID));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(1,report.getReports().size());
  Report innerReport=report.getReports().get(0);
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
  AssertJUnit.assertEquals(true,report.getDateCreated().equals(innerReport.getDateCreated()));
  AssertJUnit.assertEquals(true,report.getDateUpdated().equals(innerReport.getDateUpdated()));
}",0.914602156805596
188428,"@Test public void siegfriedCorporaTestFile() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  IndexResult<IndexedFile> files=index.find(IndexedFile.class,Filter.ALL,Sorter.NONE,new Sublist(0,1),new ArrayList<String>());
  String fileUUID=files.getResults().get(0).getUUID();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(IndexedFile.class,fileUUID));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(0,report.getReports().size());
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
}","@Test public void siegfriedCorporaTestFile() throws RODAException, ParseException, FileAlreadyExistsException, InterruptedException, IOException {
  AIP root=model.createAIP(null,RodaConstants.AIP_TYPE_MIXED,new Permissions(),aipCreator);
  TransferredResource transferredResource=createCorpora();
  AssertJUnit.assertEquals(transferredResource == null,false);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_SIP_TO_AIP_CLASS,TransferredResourceToAIPPlugin.class.getName());
  Job ingest=TestsHelper.executeJob(MinimalIngestPlugin.class,parameters,PluginType.SIP_TO_AIP,SelectedItemsList.create(TransferredResource.class,transferredResource.getUUID()));
  List<Report> ingestReports=TestsHelper.getJobReports(index,ingest,true);
  AssertJUnit.assertEquals(1,ingestReports.size());
  IndexResult<IndexedFile> files=index.find(IndexedFile.class,Filter.ALL,Sorter.NONE,new Sublist(0,1),new ArrayList<String>());
  String fileUUID=files.getResults().get(0).getUUID();
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,new HashMap<String,String>(),PluginType.MISC,SelectedItemsList.create(IndexedFile.class,fileUUID));
  List<Report> jobReports=TestsHelper.getJobReports(index,job,true);
  AssertJUnit.assertEquals(1,jobReports.size());
  Report report=jobReports.get(0);
  AssertJUnit.assertEquals(1,report.getReports().size());
  Report innerReport=report.getReports().get(0);
  AssertJUnit.assertEquals(false,report.getDateCreated().equals(report.getDateUpdated()));
  AssertJUnit.assertEquals(true,report.getDateCreated().equals(innerReport.getDateCreated()));
  AssertJUnit.assertEquals(true,report.getDateUpdated().equals(innerReport.getDateUpdated()));
}",0.9116138763197588
188429,"public static <T extends IsRODAObject>void updatePartialJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceLastReportItemIfTheSame,Job cachedJob){
  String jobId=getJobId(plugin);
  boolean retrieved=true;
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getOutcomeObjectId(),true);
    }
 catch (    NotFoundException e) {
      jobReport=initPluginReportItem(plugin,reportItem.getOutcomeObjectId(),reportItem.getSourceObjectId()).setSourceObjectClass(reportItem.getSourceObjectClass()).setOutcomeObjectClass(reportItem.getOutcomeObjectClass());
      jobReport.setId(reportItem.getOutcomeObjectId());
      jobReport.addReport(reportItem);
      retrieved=false;
    }
    if (retrieved) {
      if (!replaceLastReportItemIfTheSame) {
        jobReport.addReport(reportItem);
      }
 else {
        List<Report> reportItems=jobReport.getReports();
        Report report=reportItems.get(reportItems.size() - 1);
        if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
          reportItems.remove(reportItems.size() - 1);
          jobReport.setStepsCompleted(jobReport.getStepsCompleted() - 1);
          jobReport.addReport(reportItem);
        }
      }
    }
    model.createOrUpdateJobReport(jobReport,cachedJob);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public static <T extends IsRODAObject>void updatePartialJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceLastReportItemIfTheSame,Job cachedJob){
  String jobId=getJobId(plugin);
  boolean retrieved=true;
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getOutcomeObjectId(),true);
    }
 catch (    NotFoundException e) {
      jobReport=initPluginReportItem(plugin,reportItem.getOutcomeObjectId(),reportItem.getSourceObjectId()).setSourceObjectClass(reportItem.getSourceObjectClass()).setOutcomeObjectClass(reportItem.getOutcomeObjectClass());
      jobReport.setId(reportItem.getId());
      jobReport.setDateCreated(reportItem.getDateCreated());
      jobReport.addReport(reportItem);
      retrieved=false;
    }
    if (retrieved) {
      if (!replaceLastReportItemIfTheSame) {
        jobReport.addReport(reportItem);
      }
 else {
        List<Report> reportItems=jobReport.getReports();
        Report report=reportItems.get(reportItems.size() - 1);
        if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
          reportItems.remove(reportItems.size() - 1);
          jobReport.setStepsCompleted(jobReport.getStepsCompleted() - 1);
          jobReport.addReport(reportItem);
        }
      }
    }
    model.createOrUpdateJobReport(jobReport,cachedJob);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9745478901540524
188430,"@Override public void setTotalSteps(){
  this.totalSteps=5;
}","@Override public void setTotalSteps(){
  this.totalSteps=TOTAL_STEPS;
}",0.9090909090909092
188431,"@BeforeMethod public static void setUp() throws IOException, GenericException {
  basePath=TestsHelper.createBaseTempDir(FileStorageServiceTest.class,true);
  storage=new FileStorageService(basePath);
}","@BeforeMethod public static void setUp() throws Exception {
  basePath=TestsHelper.createBaseTempDir(FileStorageServiceTest.class,true);
  storage=new FileStorageService(basePath);
}",0.9479166666666666
188432,"@AfterMethod public static void tearDown() throws NotFoundException, GenericException {
  FSUtils.deletePath(basePath);
  FSUtils.deletePath(basePath.getParent().resolve(basePath.getFileName() + FileStorageService.HISTORY_SUFFIX));
}","@AfterMethod public static void tearDown() throws RODAException {
  FSUtils.deletePath(basePath);
  FSUtils.deletePath(basePath.getParent().resolve(basePath.getFileName() + FileStorageService.HISTORY_SUFFIX));
}",0.9324324324324323
188433,"private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  Map<PermissionType,Set<String>> userPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  Map<PermissionType,Set<String>> groupPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(groupPermissions);
  return permissions;
}","private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  EnumMap<PermissionType,Set<String>> userPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  Map<PermissionType,Set<String>> groupPermissions=new EnumMap<>(PermissionType.class);
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(groupPermissions);
  return permissions;
}",0.9662542182227222
188434,"public static SolrInputDocument premisToSolr(PreservationMetadataType preservationMetadataType,AIP aip,String representationUUID,String fileUUID,Binary binary) throws GenericException {
  SolrInputDocument doc;
  Map<String,String> stylesheetOpt=new HashMap<String,String>();
  stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.REPOSITORY.toString());
  if (aip != null) {
    stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.AIP.toString());
    stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId());
    if (representationUUID != null) {
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID,representationUUID);
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.REPRESENTATION.toString());
    }
    if (fileUUID != null) {
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_FILE_UUID,fileUUID);
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.FILE.toString());
    }
  }
  try {
    Reader reader=RodaUtils.applyMetadataStylesheet(binary,RodaConstants.CORE_CROSSWALKS_INGEST_OTHER,RodaConstants.PREMIS_METADATA_TYPE,RodaConstants.PREMIS_METADATA_VERSION,stylesheetOpt);
    XMLLoader loader=new XMLLoader();
    XMLStreamReader parser=XMLInputFactory.newInstance().createXMLStreamReader(reader);
    boolean parsing=true;
    doc=null;
    while (parsing) {
      int event=parser.next();
      if (event == XMLStreamConstants.END_DOCUMENT) {
        parser.close();
        parsing=false;
      }
 else       if (event == XMLStreamConstants.START_ELEMENT) {
        String currTag=parser.getLocalName();
        if (""String_Node_Str"".equals(currTag)) {
          doc=loader.readDoc(parser);
        }
      }
    }
    IOUtils.closeQuietly(reader);
  }
 catch (  XMLStreamException|FactoryConfigurationError e) {
    throw new GenericException(""String_Node_Str"" + binary.getStoragePath(),e);
  }
  if (preservationMetadataType == PreservationMetadataType.EVENT) {
    try {
      List<LinkingIdentifier> agents=PremisV3Utils.extractAgentsFromEvent(binary);
      for (      LinkingIdentifier id : agents) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_AGENT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    try {
      List<LinkingIdentifier> sources=PremisV3Utils.extractObjectFromEvent(binary);
      for (      LinkingIdentifier id : sources) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_SOURCE_OBJECT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=PremisV3Utils.extractObjectFromEvent(binary);
      for (      LinkingIdentifier id : outcomes) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_OUTCOME_OBJECT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    if (aip != null) {
      doc.addField(RodaConstants.STATE,aip.getState().toString());
      setPermissions(aip.getPermissions(),doc);
    }
 else {
      doc.addField(RodaConstants.STATE,AIPState.ACTIVE);
    }
  }
  doc.addField(RodaConstants.INDEX_UUID,doc.getFieldValue(RodaConstants.PRESERVATION_EVENT_ID));
  return doc;
}","public static SolrInputDocument premisToSolr(PreservationMetadataType preservationMetadataType,AIP aip,String representationUUID,String fileUUID,Binary binary) throws GenericException {
  SolrInputDocument doc;
  Map<String,String> stylesheetOpt=new HashMap<>();
  stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.REPOSITORY.toString());
  if (aip != null) {
    stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.AIP.toString());
    stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId());
    if (representationUUID != null) {
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_REPRESENTATION_UUID,representationUUID);
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.REPRESENTATION.toString());
    }
    if (fileUUID != null) {
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_FILE_UUID,fileUUID);
      stylesheetOpt.put(RodaConstants.PRESERVATION_EVENT_OBJECT_CLASS,PreservationMetadataEventClass.FILE.toString());
    }
  }
  Reader reader=null;
  try {
    reader=RodaUtils.applyMetadataStylesheet(binary,RodaConstants.CORE_CROSSWALKS_INGEST_OTHER,RodaConstants.PREMIS_METADATA_TYPE,RodaConstants.PREMIS_METADATA_VERSION,stylesheetOpt);
    XMLLoader loader=new XMLLoader();
    XMLStreamReader parser=XMLInputFactory.newInstance().createXMLStreamReader(reader);
    boolean parsing=true;
    doc=null;
    while (parsing) {
      int event=parser.next();
      if (event == XMLStreamConstants.END_DOCUMENT) {
        parser.close();
        parsing=false;
      }
 else       if (event == XMLStreamConstants.START_ELEMENT) {
        String currTag=parser.getLocalName();
        if (""String_Node_Str"".equals(currTag)) {
          doc=loader.readDoc(parser);
        }
      }
    }
  }
 catch (  XMLStreamException|FactoryConfigurationError e) {
    throw new GenericException(""String_Node_Str"" + binary.getStoragePath(),e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  if (preservationMetadataType == PreservationMetadataType.EVENT) {
    try {
      List<LinkingIdentifier> agents=PremisV3Utils.extractAgentsFromEvent(binary);
      for (      LinkingIdentifier id : agents) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_AGENT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    try {
      List<LinkingIdentifier> sources=PremisV3Utils.extractObjectFromEvent(binary);
      for (      LinkingIdentifier id : sources) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_SOURCE_OBJECT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    try {
      List<LinkingIdentifier> outcomes=PremisV3Utils.extractObjectFromEvent(binary);
      for (      LinkingIdentifier id : outcomes) {
        doc.addField(RodaConstants.PRESERVATION_EVENT_LINKING_OUTCOME_OBJECT_IDENTIFIER,JsonUtils.getJsonFromObject(id));
      }
    }
 catch (    org.roda.core.data.v2.validation.ValidationException e) {
      LOGGER.warn(""String_Node_Str"",e.getMessage());
    }
    if (aip != null) {
      doc.addField(RodaConstants.STATE,aip.getState().toString());
      setPermissions(aip.getPermissions(),doc);
    }
 else {
      doc.addField(RodaConstants.STATE,AIPState.ACTIVE);
    }
  }
  doc.addField(RodaConstants.INDEX_UUID,doc.getFieldValue(RodaConstants.PRESERVATION_EVENT_ID));
  return doc;
}",0.9829677067720398
188435,"public File renameFolder(File folder,String newName,boolean replaceExisting,boolean reindexResources) throws AlreadyExistsException, GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException {
  Path basePath=RodaCoreFactory.getStoragePath();
  StoragePath fileStoragePath=ModelUtils.getFileStoragePath(folder);
  Path fullPath=basePath.resolve(FSUtils.getStoragePathAsString(fileStoragePath,false));
  if (Files.exists(fullPath)) {
    FSUtils.move(fullPath,fullPath.getParent().resolve(newName),replaceExisting);
    if (reindexResources) {
      notifyAIPUpdated(folder.getAipId());
    }
    return retrieveFile(folder.getAipId(),folder.getRepresentationId(),folder.getPath(),newName);
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}","public File renameFolder(File folder,String newName,boolean replaceExisting,boolean reindexResources) throws AlreadyExistsException, GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException {
  Path basePath=RodaCoreFactory.getStoragePath();
  StoragePath fileStoragePath=ModelUtils.getFileStoragePath(folder);
  Path fullPath=basePath.resolve(FSUtils.getStoragePathAsString(fileStoragePath,false));
  if (Files.exists(fullPath)) {
    FSUtils.move(fullPath,fullPath.getParent().resolve(newName),replaceExisting);
    if (reindexResources) {
      notifyAipUpdated(folder.getAipId());
    }
    return retrieveFile(folder.getAipId(),folder.getRepresentationId(),folder.getPath(),newName);
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}",0.9974779319041616
188436,"private CloseableIterable<OptionalWithCause<LogEntry>> listLogEntries(){
  boolean recursive=false;
  CloseableIterable<OptionalWithCause<LogEntry>> inStorage=null;
  CloseableIterable<OptionalWithCause<LogEntry>> notStorage=null;
  try {
    final CloseableIterable<Resource> actionLogs=getStorage().listResourcesUnderContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),recursive);
    inStorage=new CloseableIterable<OptionalWithCause<LogEntry>>(){
      @Override public void close() throws IOException {
        actionLogs.close();
      }
      @Override public Iterator<OptionalWithCause<LogEntry>> iterator(){
        Iterator<Resource> resources=actionLogs.iterator();
        return new Iterator<OptionalWithCause<LogEntry>>(){
          LogEntry nextLogEntry=null;
          BufferedReader br=null;
          @Override public boolean hasNext(){
            if (nextLogEntry == null) {
              while (resources.hasNext()) {
                try {
                  Resource resource=resources.next();
                  if (resource instanceof Binary) {
                    Binary b=(Binary)resource;
                    br=new BufferedReader(new InputStreamReader(b.getContent().createInputStream()));
                    String nextLine=null;
                    if ((nextLine=br.readLine()) != null) {
                      nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
                      break;
                    }
                  }
                }
 catch (                GenericException|IOException e) {
                }
              }
            }
            return nextLogEntry != null;
          }
          @Override public OptionalWithCause<LogEntry> next(){
            OptionalWithCause<LogEntry> entry=OptionalWithCause.of(nextLogEntry);
            try {
              String nextLine=null;
              if ((nextLine=br.readLine()) == null) {
                IOUtils.closeQuietly(br);
                while (resources.hasNext()) {
                  try {
                    Resource resource=resources.next();
                    if (resource instanceof Binary) {
                      Binary b=(Binary)resource;
                      br=new BufferedReader(new InputStreamReader(b.getContent().createInputStream()));
                      if ((nextLine=br.readLine()) != null) {
                        nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
                        break;
                      }
                    }
                  }
 catch (                  GenericException|IOException e) {
                  }
                }
              }
 else {
                nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
              }
            }
 catch (            GenericException|IOException e) {
              nextLogEntry=null;
            }
            return entry;
          }
        }
;
      }
    }
;
  }
 catch (  NotFoundException|GenericException|AuthorizationDeniedException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    DirectoryStream<Path> directoryStream=Files.newDirectoryStream(RodaCoreFactory.getLogPath());
    notStorage=new CloseableIterable<OptionalWithCause<LogEntry>>(){
      @Override public void close() throws IOException {
        directoryStream.close();
      }
      @Override public Iterator<OptionalWithCause<LogEntry>> iterator(){
        Iterator<Path> paths=directoryStream.iterator();
        return new Iterator<OptionalWithCause<LogEntry>>(){
          LogEntry nextLogEntry=null;
          BufferedReader br=null;
          @Override public boolean hasNext(){
            if (nextLogEntry == null) {
              while (paths.hasNext()) {
                try {
                  Path logFile=paths.next();
                  br=new BufferedReader(new InputStreamReader(Files.newInputStream(logFile)));
                  String nextLine=null;
                  if ((nextLine=br.readLine()) != null) {
                    nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
                    break;
                  }
                }
 catch (                GenericException|IOException e) {
                }
              }
            }
            return nextLogEntry != null;
          }
          @Override public OptionalWithCause<LogEntry> next(){
            OptionalWithCause<LogEntry> entry=OptionalWithCause.of(nextLogEntry);
            try {
              String nextLine=null;
              if ((nextLine=br.readLine()) == null) {
                IOUtils.closeQuietly(br);
                while (paths.hasNext()) {
                  try {
                    Path logFile=paths.next();
                    br=new BufferedReader(new InputStreamReader(Files.newInputStream(logFile)));
                    if ((nextLine=br.readLine()) != null) {
                      nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
                      break;
                    }
                  }
 catch (                  GenericException|IOException e) {
                  }
                }
              }
 else {
                nextLogEntry=JsonUtils.getObjectFromJson(nextLine,LogEntry.class);
              }
            }
 catch (            GenericException|IOException e) {
              nextLogEntry=null;
            }
            return entry;
          }
        }
;
      }
    }
;
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return CloseableIterables.concat(inStorage,notStorage);
}","private CloseableIterable<OptionalWithCause<LogEntry>> listLogEntries(){
  boolean recursive=false;
  CloseableIterable<OptionalWithCause<LogEntry>> inStorage=null;
  CloseableIterable<OptionalWithCause<LogEntry>> notStorage=null;
  try {
    final CloseableIterable<Resource> actionLogs=getStorage().listResourcesUnderContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),recursive);
    inStorage=new LogEntryStorageIterable(actionLogs);
  }
 catch (  NotFoundException|GenericException|AuthorizationDeniedException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    notStorage=new LogEntryFileSystemIterable(RodaCoreFactory.getLogPath());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return CloseableIterables.concat(inStorage,notStorage);
}",0.1637408730775205
188437,"public synchronized void findOldLogsAndMoveThemToStorage(Path logDirectory,Path currentLogFile) throws RequestNotValidException, AuthorizationDeniedException, NotFoundException {
  try {
    final DirectoryStream<Path> directoryStream=Files.newDirectoryStream(logDirectory);
    for (    Path path : directoryStream) {
      if (!path.equals(currentLogFile)) {
        try {
          StoragePath logPath=ModelUtils.getLogStoragePath(path.getFileName().toString());
          storage.createBinary(logPath,new FSPathContentPayload(path),false);
          Files.delete(path);
        }
 catch (        IOException|GenericException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
    directoryStream.close();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public synchronized void findOldLogsAndMoveThemToStorage(Path logDirectory,Path currentLogFile) throws RequestNotValidException, AuthorizationDeniedException, NotFoundException {
  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(logDirectory)){
    for (    Path path : directoryStream) {
      if (!path.equals(currentLogFile)) {
        try {
          StoragePath logPath=ModelUtils.getLogStoragePath(path.getFileName().toString());
          storage.createBinary(logPath,new FSPathContentPayload(path),false);
          Files.delete(path);
        }
 catch (        IOException|GenericException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.972239358420728
188438,"private static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentationOrFile(Plugin<T> plugin,ModelService model,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,Path path) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException, PluginException {
  List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
  if (Files.exists(path)) {
    String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(path);
    final JsonNode jsonObject=JsonUtils.parseJson(siegfriedOutput);
    final JsonNode files=jsonObject.get(""String_Node_Str"");
    for (    JsonNode file : files) {
      Path fullFsPath=Paths.get(file.get(""String_Node_Str"").asText());
      Path relativeFsPath=path.relativize(fullFsPath);
      String jsonFileId=fullFsPath.getFileName().toString();
      List<String> jsonFilePath=new ArrayList<>(fileDirectoryPath);
      if (fileId != null) {
        jsonFilePath.add(fileId);
      }
      for (int j=0; j < relativeFsPath.getNameCount() && StringUtils.isNotBlank(relativeFsPath.getName(j).toString()); j++) {
        jsonFilePath.add(relativeFsPath.getName(j).toString());
      }
      jsonFilePath.remove(jsonFilePath.size() - 1);
      ContentPayload payload=new StringContentPayload(file.toString());
      model.createOrUpdateOtherMetadata(aipId,representationId,jsonFilePath,jsonFileId,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,payload,false);
      sources.add(PluginHelper.getLinkingIdentifier(aipId,representationId,jsonFilePath,jsonFileId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
      final JsonNode matches=file.get(""String_Node_Str"");
      for (      JsonNode match : matches) {
        String format=null;
        String version=null;
        String pronom=null;
        String mime=null;
        if (plugin.getVersion().startsWith(""String_Node_Str"") || plugin.getVersion().startsWith(""String_Node_Str"")) {
          if (match.get(""String_Node_Str"").textValue().equalsIgnoreCase(""String_Node_Str"")) {
            format=match.get(""String_Node_Str"").textValue();
            version=match.get(""String_Node_Str"").textValue();
            pronom=match.get(""String_Node_Str"").textValue();
            mime=match.get(""String_Node_Str"").textValue();
          }
        }
 else {
          if (match.get(""String_Node_Str"").textValue().equalsIgnoreCase(""String_Node_Str"")) {
            format=match.get(""String_Node_Str"").textValue();
            version=match.get(""String_Node_Str"").textValue();
            pronom=match.get(""String_Node_Str"").textValue();
            mime=match.get(""String_Node_Str"").textValue();
          }
        }
        PremisV3Utils.updateFormatPreservationMetadata(model,aipId,representationId,jsonFilePath,jsonFileId,format,version,pronom,mime,true);
      }
    }
  }
  return sources;
}","private static <T extends IsRODAObject>List<LinkingIdentifier> runSiegfriedOnRepresentationOrFile(Plugin<T> plugin,ModelService model,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,Path path) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException, PluginException {
  List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
  if (Files.exists(path)) {
    String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(path);
    final JsonNode jsonObject=JsonUtils.parseJson(siegfriedOutput);
    final JsonNode files=jsonObject.get(""String_Node_Str"");
    for (    JsonNode file : files) {
      Path fullFsPath=Paths.get(file.get(""String_Node_Str"").asText());
      Path relativeFsPath=path.relativize(fullFsPath);
      String jsonFileId=fullFsPath.getFileName().toString();
      List<String> jsonFilePath=new ArrayList<>(fileDirectoryPath);
      if (fileId != null) {
        jsonFilePath.add(fileId);
      }
      for (int j=0; j < relativeFsPath.getNameCount() && StringUtils.isNotBlank(relativeFsPath.getName(j).toString()); j++) {
        jsonFilePath.add(relativeFsPath.getName(j).toString());
      }
      jsonFilePath.remove(jsonFilePath.size() - 1);
      ContentPayload payload=new StringContentPayload(file.toString());
      model.createOrUpdateOtherMetadata(aipId,representationId,jsonFilePath,jsonFileId,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,payload,false);
      sources.add(PluginHelper.getLinkingIdentifier(aipId,representationId,jsonFilePath,jsonFileId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
      final JsonNode matches=file.get(""String_Node_Str"");
      for (      JsonNode match : matches) {
        String format=null;
        String version=null;
        String pronom=null;
        String mime=null;
        String[] pluginVersion=plugin.getVersion().split(""String_Node_Str"");
        if (""String_Node_Str"".equals(pluginVersion[0])) {
          if (Integer.parseInt(pluginVersion[1]) > 4) {
            if (match.get(""String_Node_Str"").textValue().equalsIgnoreCase(""String_Node_Str"")) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
 else {
            if (match.get(""String_Node_Str"").textValue().equalsIgnoreCase(""String_Node_Str"")) {
              format=match.get(""String_Node_Str"").textValue();
              version=match.get(""String_Node_Str"").textValue();
              pronom=match.get(""String_Node_Str"").textValue();
              mime=match.get(""String_Node_Str"").textValue();
            }
          }
        }
        PremisV3Utils.updateFormatPreservationMetadata(model,aipId,representationId,jsonFilePath,jsonFileId,format,version,pronom,mime,true);
      }
    }
  }
  return sources;
}",0.9550618958792606
188439,"public static DipBundle retrieveDipBundle(String dipUUID,String dipFileUUID,User user) throws GenericException, NotFoundException, RequestNotValidException {
  DipBundle bundle=new DipBundle();
  bundle.setDip(retrieve(IndexedDIP.class,dipUUID,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIP_ID,RodaConstants.DIP_TITLE)));
  List<String> dipFileFields=new ArrayList<>();
  if (dipFileUUID != null) {
    DIPFile dipFile=retrieve(DIPFile.class,dipFileUUID,dipFileFields);
    bundle.setDipFile(dipFile);
    List<DIPFile> dipFileAncestors=new ArrayList<>();
    for (    String dipFileAncestor : dipFile.getAncestorsUUIDs()) {
      try {
        dipFileAncestors.add(retrieve(DIPFile.class,dipFileAncestor,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIPFILE_DIP_ID,RodaConstants.DIPFILE_ID)));
      }
 catch (      NotFoundException e) {
      }
    }
    bundle.setDipFileAncestors(dipFileAncestors);
  }
 else {
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIPFILE_DIP_ID,dipUUID));
    Sublist sublist=new Sublist(0,1);
    IndexResult<DIPFile> dipFiles=find(DIPFile.class,filter,Sorter.NONE,sublist,Facets.NONE,user,false,dipFileFields);
    if (dipFiles.getTotalCount() == 1 && !dipFiles.getResults().get(0).isDirectory()) {
      bundle.setDipFile(dipFiles.getResults().get(0));
    }
  }
  List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_TITLE,RodaConstants.AIP_LEVEL,RodaConstants.AIP_DATE_FINAL,RodaConstants.AIP_DATE_INITIAL,RodaConstants.AIP_GHOST);
  List<String> representationFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_NUMBER_OF_DATA_FILES,RodaConstants.REPRESENTATION_ORIGINAL,RodaConstants.REPRESENTATION_AIP_ID,RodaConstants.REPRESENTATION_ID);
  List<String> fileFields=new ArrayList<>();
  IndexedDIP dip=bundle.getDip();
  if (!dip.getFileIds().isEmpty()) {
    IndexedFile file=BrowserHelper.retrieve(IndexedFile.class,IdUtils.getFileId(dip.getFileIds().get(0)),fileFields);
    bundle.setFile(file);
    bundle.setRepresentation(BrowserHelper.retrieve(IndexedRepresentation.class,file.getRepresentationUUID(),representationFields));
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,file.getAipId(),aipFields));
  }
 else   if (!dip.getRepresentationIds().isEmpty()) {
    IndexedRepresentation representation=BrowserHelper.retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(dip.getRepresentationIds().get(0)),representationFields);
    bundle.setRepresentation(representation);
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,representation.getAipId(),aipFields));
  }
 else   if (!dip.getAipIds().isEmpty()) {
    IndexedAIP aip=BrowserHelper.retrieve(IndexedAIP.class,dip.getAipIds().get(0).getAipId(),aipFields);
    bundle.setAip(aip);
  }
  return bundle;
}","public static DipBundle retrieveDipBundle(String dipUUID,String dipFileUUID,User user) throws GenericException, NotFoundException, RequestNotValidException {
  DipBundle bundle=new DipBundle();
  bundle.setDip(retrieve(IndexedDIP.class,dipUUID,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIP_ID,RodaConstants.DIP_TITLE,RodaConstants.DIP_AIP_IDS,RodaConstants.DIP_AIP_UUIDS,RodaConstants.DIP_FILE_IDS)));
  List<String> dipFileFields=new ArrayList<>();
  if (dipFileUUID != null) {
    DIPFile dipFile=retrieve(DIPFile.class,dipFileUUID,dipFileFields);
    bundle.setDipFile(dipFile);
    List<DIPFile> dipFileAncestors=new ArrayList<>();
    for (    String dipFileAncestor : dipFile.getAncestorsUUIDs()) {
      try {
        dipFileAncestors.add(retrieve(DIPFile.class,dipFileAncestor,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIPFILE_DIP_ID,RodaConstants.DIPFILE_ID)));
      }
 catch (      NotFoundException e) {
      }
    }
    bundle.setDipFileAncestors(dipFileAncestors);
  }
 else {
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIPFILE_DIP_ID,dipUUID));
    Sublist sublist=new Sublist(0,1);
    IndexResult<DIPFile> dipFiles=find(DIPFile.class,filter,Sorter.NONE,sublist,Facets.NONE,user,false,dipFileFields);
    if (dipFiles.getTotalCount() == 1 && !dipFiles.getResults().get(0).isDirectory()) {
      bundle.setDipFile(dipFiles.getResults().get(0));
    }
  }
  List<String> aipFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.AIP_TITLE,RodaConstants.AIP_LEVEL,RodaConstants.AIP_DATE_FINAL,RodaConstants.AIP_DATE_INITIAL,RodaConstants.AIP_GHOST);
  List<String> representationFields=Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.REPRESENTATION_TYPE,RodaConstants.REPRESENTATION_NUMBER_OF_DATA_FILES,RodaConstants.REPRESENTATION_ORIGINAL,RodaConstants.REPRESENTATION_AIP_ID,RodaConstants.REPRESENTATION_ID);
  List<String> fileFields=new ArrayList<String>();
  IndexedDIP dip=bundle.getDip();
  if (!dip.getFileIds().isEmpty()) {
    IndexedFile file=BrowserHelper.retrieve(IndexedFile.class,IdUtils.getFileId(dip.getFileIds().get(0)),fileFields);
    bundle.setFile(file);
    bundle.setRepresentation(BrowserHelper.retrieve(IndexedRepresentation.class,file.getRepresentationUUID(),representationFields));
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,file.getAipId(),aipFields));
  }
 else   if (!dip.getRepresentationIds().isEmpty()) {
    IndexedRepresentation representation=BrowserHelper.retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(dip.getRepresentationIds().get(0)),representationFields);
    bundle.setRepresentation(representation);
    bundle.setAip(BrowserHelper.retrieve(IndexedAIP.class,representation.getAipId(),aipFields));
  }
 else   if (!dip.getAipIds().isEmpty()) {
    IndexedAIP aip=BrowserHelper.retrieve(IndexedAIP.class,dip.getAipIds().get(0).getAipId(),aipFields);
    bundle.setAip(aip);
  }
  return bundle;
}",0.9850077546096846
188440,"private static <T extends IsIndexed>void openReferred(final T object,Filter filter){
  BrowserService.Util.getInstance().find(IndexedDIP.class.getName(),filter,DEFAULT_DIPFILE_SORTER,new Sublist(0,1),Facets.NONE,LocaleInfo.getCurrentLocale().getLocaleName(),true,Arrays.asList(RodaConstants.DIP_ID),new AsyncCallback<IndexResult<IndexedDIP>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    IndexResult<IndexedDIP> result){
      if (result.getTotalCount() > 0) {
        HistoryUtils.openBrowse(result.getResults().get(0));
      }
 else {
        HistoryUtils.resolve(object);
      }
    }
  }
);
}","private static <T extends IsIndexed>void openReferred(final T object,Filter filter){
  BrowserService.Util.getInstance().find(IndexedDIP.class.getName(),filter,DEFAULT_DIPFILE_SORTER,new Sublist(0,1),Facets.NONE,LocaleInfo.getCurrentLocale().getLocaleName(),true,Arrays.asList(RodaConstants.INDEX_UUID,RodaConstants.DIP_ID),new AsyncCallback<IndexResult<IndexedDIP>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    IndexResult<IndexedDIP> result){
      if (result.getTotalCount() > 0) {
        HistoryUtils.openBrowse(result.getResults().get(0));
      }
 else {
        HistoryUtils.resolve(object);
      }
    }
  }
);
}",0.9828884325804244
188441,"@Override public Widget createActionsLayout(SelectedItems<IndexedAIP> aips,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.intellectualEntity(),aips,null,AipAction.NEW_CHILD_AIP,AipAction.MOVE_IN_HIERARCHY,AipAction.UPDATE_PERMISSIONS,AipAction.ADD_REPRESENTATION,AipAction.REMOVE,AipAction.DOWNLOAD);
  addButton(layout,messages.moveArchivalPackage(),AipAction.MOVE_IN_HIERARCHY,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.archivalPackagePermissions(),AipAction.UPDATE_PERMISSIONS,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.addRepresentation(),AipAction.ADD_REPRESENTATION,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.removeArchivalPackage(),AipAction.REMOVE,aips,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addButton(layout,messages.downloadButton(),AipAction.DOWNLOAD,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),aips,null,AipAction.NEW_PROCESS,AipAction.SHOW_EVENTS,AipAction.SHOW_RISKS,AipAction.SHOW_LOGS);
  addButton(layout,messages.newProcessPreservation(),AipAction.NEW_PROCESS,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),AipAction.SHOW_EVENTS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationLogs(),AipAction.SHOW_LOGS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),AipAction.SHOW_RISKS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.appraisalTitle(),aips,null,AipAction.APPRAISAL_ACCEPT,AipAction.APPRAISAL_REJECT);
  addButton(layout,messages.appraisalAccept(),AipAction.APPRAISAL_ACCEPT,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.appraisalReject(),AipAction.APPRAISAL_REJECT,aips,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  return layout;
}","@Override public Widget createActionsLayout(SelectedItems<IndexedAIP> aips,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.intellectualEntity(),aips,AipAction.NEW_CHILD_AIP,AipAction.MOVE_IN_HIERARCHY,AipAction.UPDATE_PERMISSIONS,AipAction.ADD_REPRESENTATION,AipAction.REMOVE,AipAction.DOWNLOAD);
  addButton(layout,messages.moveArchivalPackage(),AipAction.MOVE_IN_HIERARCHY,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.archivalPackagePermissions(),AipAction.UPDATE_PERMISSIONS,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.addRepresentation(),AipAction.ADD_REPRESENTATION,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.removeArchivalPackage(),AipAction.REMOVE,aips,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addButton(layout,messages.downloadButton(),AipAction.DOWNLOAD,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),aips,AipAction.NEW_PROCESS,AipAction.SHOW_EVENTS,AipAction.SHOW_RISKS,AipAction.SHOW_LOGS);
  addButton(layout,messages.newProcessPreservation(),AipAction.NEW_PROCESS,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),AipAction.SHOW_EVENTS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationLogs(),AipAction.SHOW_LOGS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),AipAction.SHOW_RISKS,aips,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.appraisalTitle(),aips,AipAction.APPRAISAL_ACCEPT,AipAction.APPRAISAL_REJECT);
  addButton(layout,messages.appraisalAccept(),AipAction.APPRAISAL_ACCEPT,aips,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.appraisalReject(),AipAction.APPRAISAL_REJECT,aips,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  return layout;
}",0.9962843695813725
188442,"@Override public Widget createActionsLayout(SelectedItems<IndexedDIP> disseminations,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.viewRepresentationFileDisseminationTitle(),disseminations,null,DisseminationAction.DOWNLOAD,DisseminationAction.REMOVE);
  addButton(layout,messages.downloadButton(),DisseminationAction.DOWNLOAD,disseminations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.removeButton(),DisseminationAction.REMOVE,disseminations,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addButton(layout,messages.disseminationPermissions(),DisseminationAction.UPDATE_PERMISSIONS,disseminations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),disseminations,null,DisseminationAction.NEW_PROCESS);
  addButton(layout,messages.newProcessPreservation(),DisseminationAction.NEW_PROCESS,disseminations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  return layout;
}","@Override public Widget createActionsLayout(SelectedItems<IndexedDIP> disseminations,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.viewRepresentationFileDisseminationTitle(),disseminations,DisseminationAction.DOWNLOAD,DisseminationAction.REMOVE);
  addButton(layout,messages.downloadButton(),DisseminationAction.DOWNLOAD,disseminations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.removeButton(),DisseminationAction.REMOVE,disseminations,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addButton(layout,messages.disseminationPermissions(),DisseminationAction.UPDATE_PERMISSIONS,disseminations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),disseminations,DisseminationAction.NEW_PROCESS);
  addButton(layout,messages.newProcessPreservation(),DisseminationAction.NEW_PROCESS,disseminations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  return layout;
}",0.9950149551345964
188443,"public void showEvents(IndexedFile file,final AsyncCallback<ActionImpact> callback){
  List<String> history=new ArrayList<>();
  history.add(file.getAipId());
  history.add(file.getRepresentationUUID());
  history.add(file.getUUID());
  GWT.log(history.toString());
  HistoryUtils.newHistory(PreservationEvents.BROWSE_RESOLVER,history);
  callback.onSuccess(ActionImpact.NONE);
}","public void showEvents(IndexedFile file,final AsyncCallback<ActionImpact> callback){
  List<String> history=new ArrayList<>();
  history.add(file.getAipId());
  history.add(file.getRepresentationUUID());
  history.add(file.getUUID());
  HistoryUtils.newHistory(PreservationEvents.BROWSE_RESOLVER,history);
  callback.onSuccess(ActionImpact.NONE);
}",0.9573590096286108
188444,"@Override public Widget createActionsLayout(SelectedItems<IndexedFile> files,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.sidebarFoldersFilesTitle(),files,null,FileAction.DOWNLOAD,FileAction.RENAME,FileAction.MOVE,FileAction.UPLOAD_FILES,FileAction.CREATE_FOLDER,FileAction.REMOVE);
  addButton(layout,messages.downloadButton(),FileAction.DOWNLOAD,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.renameButton(),FileAction.RENAME,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.moveButton(),FileAction.MOVE,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.uploadFilesButton(),FileAction.UPLOAD_FILES,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.createFolderButton(),FileAction.CREATE_FOLDER,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.removeButton(),FileAction.REMOVE,files,ActionImpact.DESTROYED,callback,""String_Node_Str"",""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),files,""String_Node_Str"",FileAction.NEW_PROCESS,FileAction.IDENTIFY_FORMATS,FileAction.SHOW_EVENTS,FileAction.SHOW_RISKS);
  addButton(layout,messages.newProcessPreservation(),FileAction.NEW_PROCESS,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.identifyFormatsButton(),FileAction.IDENTIFY_FORMATS,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),FileAction.SHOW_EVENTS,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),FileAction.SHOW_RISKS,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  return layout;
}","@Override public Widget createActionsLayout(SelectedItems<IndexedFile> files,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.sidebarFoldersFilesTitle(),files,FileAction.DOWNLOAD,FileAction.RENAME,FileAction.MOVE,FileAction.UPLOAD_FILES,FileAction.CREATE_FOLDER,FileAction.REMOVE);
  addButton(layout,messages.downloadButton(),FileAction.DOWNLOAD,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.renameButton(),FileAction.RENAME,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.moveButton(),FileAction.MOVE,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.uploadFilesButton(),FileAction.UPLOAD_FILES,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.createFolderButton(),FileAction.CREATE_FOLDER,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.removeButton(),FileAction.REMOVE,files,ActionImpact.DESTROYED,callback,""String_Node_Str"",""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),files,""String_Node_Str"",FileAction.NEW_PROCESS,FileAction.IDENTIFY_FORMATS,FileAction.SHOW_EVENTS,FileAction.SHOW_RISKS);
  addButton(layout,messages.newProcessPreservation(),FileAction.NEW_PROCESS,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.identifyFormatsButton(),FileAction.IDENTIFY_FORMATS,files,ActionImpact.UPDATED,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),FileAction.SHOW_EVENTS,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),FileAction.SHOW_RISKS,files,ActionImpact.NONE,callback,""String_Node_Str"",""String_Node_Str"");
  return layout;
}",0.99871432244793
188445,"@Override public Widget createActionsLayout(SelectedItems<IndexedRepresentation> representations,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.representation(),representations,null,RepresentationAction.DOWNLOAD,RepresentationAction.CHANGE_TYPE,RepresentationAction.REMOVE);
  addButton(layout,messages.downloadButton(),RepresentationAction.DOWNLOAD,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.changeTypeButton(),RepresentationAction.CHANGE_TYPE,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.removeButton(),RepresentationAction.REMOVE,representations,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),representations,null,RepresentationAction.NEW_PROCESS,RepresentationAction.IDENTIFY_FORMATS,RepresentationAction.SHOW_EVENTS,RepresentationAction.SHOW_RISKS);
  addButton(layout,messages.newProcessPreservation(),RepresentationAction.NEW_PROCESS,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.identifyFormatsButton(),RepresentationAction.IDENTIFY_FORMATS,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),RepresentationAction.SHOW_EVENTS,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),RepresentationAction.SHOW_RISKS,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.sidebarFoldersFilesTitle(),representations,null,RepresentationAction.UPLOAD_FILES,RepresentationAction.CREATE_FOLDER);
  addButton(layout,messages.uploadFilesButton(),RepresentationAction.UPLOAD_FILES,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.createFolderButton(),RepresentationAction.CREATE_FOLDER,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  return layout;
}","@Override public Widget createActionsLayout(SelectedItems<IndexedRepresentation> representations,AsyncCallback<ActionImpact> callback){
  FlowPanel layout=createLayout();
  addTitle(layout,messages.representation(),representations,RepresentationAction.DOWNLOAD,RepresentationAction.CHANGE_TYPE,RepresentationAction.REMOVE);
  addButton(layout,messages.downloadButton(),RepresentationAction.DOWNLOAD,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.changeTypeButton(),RepresentationAction.CHANGE_TYPE,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.removeButton(),RepresentationAction.REMOVE,representations,ActionImpact.DESTROYED,callback,""String_Node_Str"");
  addTitle(layout,messages.preservationTitle(),representations,RepresentationAction.NEW_PROCESS,RepresentationAction.IDENTIFY_FORMATS,RepresentationAction.SHOW_EVENTS,RepresentationAction.SHOW_RISKS);
  addButton(layout,messages.newProcessPreservation(),RepresentationAction.NEW_PROCESS,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.identifyFormatsButton(),RepresentationAction.IDENTIFY_FORMATS,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.preservationEvents(),RepresentationAction.SHOW_EVENTS,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addButton(layout,messages.preservationRisks(),RepresentationAction.SHOW_RISKS,representations,ActionImpact.NONE,callback,""String_Node_Str"");
  addTitle(layout,messages.sidebarFoldersFilesTitle(),representations,RepresentationAction.UPLOAD_FILES,RepresentationAction.CREATE_FOLDER);
  addButton(layout,messages.uploadFilesButton(),RepresentationAction.UPLOAD_FILES,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  addButton(layout,messages.createFolderButton(),RepresentationAction.CREATE_FOLDER,representations,ActionImpact.UPDATED,callback,""String_Node_Str"");
  return layout;
}",0.9962658700522778
188446,"/** 
 * Constructs a new   {@link PluginParameter} cloning an existing{@link PluginParameter}.
 * @param parameter the  {@link PluginParameter} to clone.
 */
public PluginParameter(PluginParameter parameter){
  this(parameter.getId(),parameter.getName(),parameter.getType(),parameter.getDefaultValue(),parameter.getPossibleValues(),parameter.isMandatory(),parameter.isReadonly(),parameter.getDescription());
}","/** 
 * Constructs a new   {@link PluginParameter} cloning an existing{@link PluginParameter}.
 * @param parameter the  {@link PluginParameter} to clone.
 */
public PluginParameter(PluginParameter parameter){
  this(parameter.getId(),parameter.getName(),parameter.getType(),parameter.getDefaultValue(),new ArrayList<>(parameter.getPossibleValues()),parameter.isMandatory(),parameter.isReadonly(),parameter.getDescription());
}",0.9796407185628744
188447,"protected Map<String,PluginParameter> getDefaultParameters(){
  return new HashMap<String,PluginParameter>(pluginParameters);
}","protected Map<String,PluginParameter> getDefaultParameters(){
  return pluginParameters.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(),e -> new PluginParameter(e.getValue())));
}",0.5705329153605015
188448,"protected Map<String,PluginParameter> getDefaultParameters(){
  Map<String,PluginParameter> defaultParameters=super.getDefaultParameters();
  defaultParameters.putAll(new HashMap<String,PluginParameter>(pluginParameters));
  return defaultParameters;
}","protected Map<String,PluginParameter> getDefaultParameters(){
  Map<String,PluginParameter> defaultParameters=super.getDefaultParameters();
  defaultParameters.putAll(pluginParameters.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(),e -> new PluginParameter(e.getValue()))));
  return defaultParameters;
}",0.7170474516695958
188449,"private void processAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,AIP aip){
  boolean aipFailed=false;
  List<String> passedFiles=new ArrayList<String>();
  Map<String,Pair<String,String>> failedFiles=new HashMap<>();
  List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
  for (  Representation r : aip.getRepresentations()) {
    LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
    try {
      boolean recursive=true;
      CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
      for (      OptionalWithCause<File> oFile : allFiles) {
        if (oFile.isPresent()) {
          File file=oFile.get();
          if (!file.isDirectory()) {
            StoragePath storagePath=ModelUtils.getFileStoragePath(file);
            Binary currentFileBinary=storage.getBinary(storagePath);
            Binary premisFile=model.retrievePreservationFile(file);
            List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
            sources.add(PluginHelper.getLinkingIdentifier(aip.getId(),file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
            String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
            if (fixities != null) {
              boolean passedFixity=true;
              Set<String> algorithms=new HashSet<>();
              for (              Fixity f : fixities) {
                algorithms.add(f.getMessageDigestAlgorithm());
              }
              try {
                Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                for (                Fixity f : fixities) {
                  String checksum=checksums.get(f.getMessageDigestAlgorithm());
                  if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                    passedFixity=false;
                    failedFiles.put(fileEntry,new Pair<>(f.getMessageDigest().trim(),checksum.trim()));
                    break;
                  }
                }
              }
 catch (              NoSuchAlgorithmException e) {
                passedFixity=false;
                LOGGER.debug(""String_Node_Str"",e);
              }
              if (passedFixity) {
                passedFiles.add(fileEntry);
              }
 else {
                aipFailed=true;
                createIncidence(model,file,risks.get(0));
              }
            }
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
    }
 catch (    IOException|RODAException|XmlException e) {
      LOGGER.error(""String_Node_Str"",r.getId(),e);
    }
  }
  try {
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
    if (aipFailed) {
      ValidationReport validationReport=new ValidationReport();
      for (      Entry<String,Pair<String,String>> entry : failedFiles.entrySet()) {
        ValidationIssue issue=new ValidationIssue(entry.getKey() + ""String_Node_Str"" + entry.getValue().getFirst()+ ""String_Node_Str""+ entry.getValue().getSecond()+ ""String_Node_Str"");
        validationReport.addIssue(issue);
      }
      reportItem.setPluginState(PluginState.FAILURE).setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.FAILURE,validationReport.toHtml(false,false,false,""String_Node_Str""),true);
    }
 else {
      reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.SUCCESS,""String_Node_Str"",true);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"");
  }
}","private void processAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,Job job,AIP aip){
  boolean aipFailed=false;
  List<String> passedFiles=new ArrayList<String>();
  List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
  ValidationReport validationReport=new ValidationReport();
  for (  Representation r : aip.getRepresentations()) {
    LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
    try {
      boolean recursive=true;
      CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
      for (      OptionalWithCause<File> oFile : allFiles) {
        if (oFile.isPresent()) {
          File file=oFile.get();
          if (!file.isDirectory()) {
            StoragePath storagePath=ModelUtils.getFileStoragePath(file);
            Binary currentFileBinary=storage.getBinary(storagePath);
            Binary premisFile=model.retrievePreservationFile(file);
            List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
            sources.add(PluginHelper.getLinkingIdentifier(aip.getId(),file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
            String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
            if (fixities != null) {
              boolean passedFixity=true;
              Set<String> algorithms=new HashSet<>();
              for (              Fixity f : fixities) {
                algorithms.add(f.getMessageDigestAlgorithm());
              }
              try {
                Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                for (                Fixity f : fixities) {
                  String checksum=checksums.get(f.getMessageDigestAlgorithm());
                  if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                    passedFixity=false;
                    ValidationIssue issue=new ValidationIssue(fileEntry + ""String_Node_Str"" + f.getMessageDigest().trim()+ ""String_Node_Str""+ checksum.trim()+ ""String_Node_Str"");
                    validationReport.addIssue(issue);
                    break;
                  }
                }
              }
 catch (              NoSuchAlgorithmException|IOException e) {
                passedFixity=false;
                ValidationIssue issue=new ValidationIssue(""String_Node_Str"" + e.getMessage());
                validationReport.addIssue(issue);
                LOGGER.debug(""String_Node_Str"",e);
              }
              if (passedFixity) {
                passedFiles.add(fileEntry);
              }
 else {
                aipFailed=true;
                createIncidence(model,file,risks.get(0));
              }
            }
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
    }
 catch (    IOException|RODAException|XmlException e) {
      LOGGER.error(""String_Node_Str"",r.getId(),e);
    }
  }
  try {
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
    if (aipFailed) {
      reportItem.setPluginState(PluginState.FAILURE).setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
      jobPluginInfo.incrementObjectsProcessedWithFailure();
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.FAILURE,validationReport.toHtml(false,false,false,""String_Node_Str""),true);
    }
 else {
      reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.SUCCESS,""String_Node_Str"",true);
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"");
  }
}",0.9016753321779318
188450,"@Override public void process(IndexService index,ModelService model,StorageService storage,Report report,Job cachedJob,SimpleJobPluginInfo jobPluginInfo,Plugin<TransferredResource> plugin,TransferredResource object){
  processTransferredResource(index,model,report,cachedJob,object);
}","@Override public void process(IndexService index,ModelService model,StorageService storage,Report report,Job cachedJob,SimpleJobPluginInfo jobPluginInfo,Plugin<TransferredResource> plugin,TransferredResource object){
  processTransferredResource(index,model,report,jobPluginInfo,cachedJob,object);
}",0.976027397260274
188451,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  return PluginHelper.processObjects(this,new RODAObjectProcessingLogic<TransferredResource>(){
    @Override public void process(    IndexService index,    ModelService model,    StorageService storage,    Report report,    Job cachedJob,    SimpleJobPluginInfo jobPluginInfo,    Plugin<TransferredResource> plugin,    TransferredResource object){
      processTransferredResource(index,model,report,cachedJob,object);
    }
  }
,index,model,storage,liteList);
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  return PluginHelper.processObjects(this,new RODAObjectProcessingLogic<TransferredResource>(){
    @Override public void process(    IndexService index,    ModelService model,    StorageService storage,    Report report,    Job cachedJob,    SimpleJobPluginInfo jobPluginInfo,    Plugin<TransferredResource> plugin,    TransferredResource object){
      processTransferredResource(index,model,report,jobPluginInfo,cachedJob,object);
    }
  }
,index,model,storage,liteList);
}",0.988817891373802
188452,"@Override public Report beforeAllExecute(IndexService index,ModelService model,StorageService storage) throws PluginException {
  return null;
}","@Override public Report beforeAllExecute(IndexService index,ModelService model,StorageService storage) throws PluginException {
  createEvent=Boolean.parseBoolean(RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return new Report();
}",0.6143187066974596
188453,"private void processTransferredResource(IndexService index,ModelService model,Report report,Job job,TransferredResource transferredResource){
  Report reportItem=PluginHelper.initPluginReportItem(this,transferredResource);
  PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
  try {
    LOGGER.debug(""String_Node_Str"",transferredResource.getFullPath());
    model.deleteTransferredResource(transferredResource);
    LOGGER.debug(""String_Node_Str"",transferredResource.getFullPath());
  }
 catch (  RuntimeException e) {
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
    LOGGER.error(""String_Node_Str"" + transferredResource.getFullPath(),e);
  }
  report.addReport(reportItem);
  PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
}","private void processTransferredResource(IndexService index,ModelService model,Report report,SimpleJobPluginInfo pluginInfo,Job job,TransferredResource transferredResource){
  Report reportItem=PluginHelper.initPluginReportItem(this,transferredResource);
  PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
  try {
    LOGGER.debug(""String_Node_Str"",transferredResource.getFullPath());
    model.deleteTransferredResource(transferredResource);
    LOGGER.debug(""String_Node_Str"",transferredResource.getFullPath());
    if (createEvent) {
      model.createRepositoryEvent(PreservationEventType.DELETION,""String_Node_Str"",PluginState.SUCCESS,""String_Node_Str"" + transferredResource.getId() + ""String_Node_Str"",""String_Node_Str"",job.getUsername(),true);
    }
    pluginInfo.incrementObjectsProcessedWithSuccess();
  }
 catch (  RuntimeException e) {
    if (createEvent) {
      model.createRepositoryEvent(PreservationEventType.DELETION,""String_Node_Str"",PluginState.SUCCESS,""String_Node_Str"" + transferredResource.getId() + ""String_Node_Str"",""String_Node_Str"",job.getUsername(),true);
    }
    pluginInfo.incrementObjectsProcessedWithFailure();
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
    LOGGER.error(""String_Node_Str"" + transferredResource.getFullPath(),e);
  }
  report.addReport(reportItem);
  PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
}",0.7196467991169978
188454,"@Override public Report afterAllExecute(IndexService index,ModelService model,StorageService storage) throws PluginException {
  return null;
}","@Override public Report afterAllExecute(IndexService index,ModelService model,StorageService storage) throws PluginException {
  return new Report();
}",0.9523809523809524
188455,"/** 
 * Assess the risk for the given   {@link FileFormat}.
 * @param fileFormat the  {@link FileFormat}.
 * @return the {@link Result} of the assessment.
 */
private Result assessRiskOnFileFormat(final FileFormat fileFormat){
  final boolean missingFormatName=checkFormatDesignationName() && (StringUtils.isBlank(fileFormat.getFormatDesignationName()));
  final boolean missingFormatVersion=checkFormatDesignationName() && (StringUtils.isBlank(fileFormat.getFormatDesignationName()));
  final boolean missingMimetype=checkMimetype() && StringUtils.isBlank(fileFormat.getMimeType());
  final boolean missingPronom=checkPronom() && StringUtils.isBlank(fileFormat.getPronom());
  return new Result(missingFormatName,missingFormatVersion,missingMimetype,missingPronom);
}","/** 
 * Assess the risk for the given   {@link FileFormat}.
 * @param fileFormat the  {@link FileFormat}.
 * @return the {@link Result} of the assessment.
 */
private Result assessRiskOnFileFormat(final FileFormat fileFormat){
  final boolean missingFormatName=checkFormatDesignationName() && (StringUtils.isBlank(fileFormat.getFormatDesignationName()));
  final boolean missingFormatVersion=checkFormatDesignationVersion() && (StringUtils.isBlank(fileFormat.getFormatDesignationVersion()));
  final boolean missingMimetype=checkMimetype() && StringUtils.isBlank(fileFormat.getMimeType());
  final boolean missingPronom=checkPronom() && StringUtils.isBlank(fileFormat.getPronom());
  return new Result(missingFormatName,missingFormatVersion,missingMimetype,missingPronom);
}",0.9857328145265888
188456,"@Override @SuppressWarnings(""String_Node_Str"") public void init(final FilterConfig filterConfig) throws ServletException {
  this.webXmlFilterConfig=filterConfig;
  if (isConfigAvailable()) {
    initInnerFilter();
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void init(final FilterConfig filterConfig) throws ServletException {
  this.webXmlFilterConfig=filterConfig;
}",0.8541666666666666
188457,"/** 
 * Init inner filter.
 * @throws ServletException if some error occurs.
 */
private void initInnerFilter() throws ServletException {
  final Configuration rodaConfig=RodaCoreFactory.getRodaConfiguration();
  if (rodaConfig == null) {
    LOGGER.info(""String_Node_Str"" + this.webXmlFilterConfig.getInitParameter(PARAM_INNER_FILTER_CLASS) + ""String_Node_Str"");
  }
 else {
    final String innerFilterClass=this.webXmlFilterConfig.getInitParameter(PARAM_INNER_FILTER_CLASS);
    final String configPrefix=this.webXmlFilterConfig.getInitParameter(PARAM_CONFIG_PREFIX);
    this.isOn=rodaConfig.getBoolean(configPrefix + ""String_Node_Str"",false);
    LOGGER.info(getFilterConfig().getFilterName() + ""String_Node_Str"" + (this.isOn ? ""String_Node_Str"" : ""String_Node_Str""));
    if (this.isOn) {
      try {
        this.innerFilter=(Filter)Class.forName(innerFilterClass).newInstance();
        this.innerFilter.init(getFilterConfig());
      }
 catch (      final InstantiationException|IllegalAccessException|ClassNotFoundException e) {
        throw new ServletException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
}","/** 
 * Init inner filter.
 * @throws ServletException if some error occurs.
 */
private void initInnerFilter() throws ServletException {
  final Configuration rodaConfig=RodaCoreFactory.getRodaConfiguration();
  if (rodaConfig == null) {
    LOGGER.info(""String_Node_Str"",this.webXmlFilterConfig.getInitParameter(PARAM_INNER_FILTER_CLASS));
  }
 else {
    final String innerFilterClass=this.webXmlFilterConfig.getInitParameter(PARAM_INNER_FILTER_CLASS);
    final String configPrefix=this.webXmlFilterConfig.getInitParameter(PARAM_CONFIG_PREFIX);
    if (rodaConfig.getBoolean(configPrefix + ""String_Node_Str"",false)) {
      try {
        this.innerFilter=(Filter)Class.forName(innerFilterClass).newInstance();
        this.innerFilter.init(getFilterConfig());
        this.isOn=true;
      }
 catch (      final InstantiationException|IllegalAccessException|ClassNotFoundException e) {
        this.isOn=false;
        throw new ServletException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
 else {
      this.isOn=false;
    }
  }
  LOGGER.info(""String_Node_Str"",getFilterConfig().getFilterName(),(this.isOn ? ""String_Node_Str"" : ""String_Node_Str""));
}",0.6147148454505877
188458,"/** 
 * Is this filter on?
 * @return <code>true</code> if the Filter is on and <code>false</code>otherwise.
 * @throws ServletException if some error occurs.
 */
private boolean isOn() throws ServletException {
  if (this.isOn == null && isConfigAvailable()) {
    initInnerFilter();
  }
  return this.isOn != null && this.isOn;
}","/** 
 * Is this filter on?
 * @return <code>true</code> if the Filter is on and <code>false</code>otherwise.
 * @throws ServletException if some error occurs.
 */
private synchronized boolean isOn() throws ServletException {
  if (this.isOn == null && isConfigAvailable()) {
    initInnerFilter();
  }
  return this.isOn != null && this.isOn;
}",0.9807407407407408
188459,"/** 
 * Constructor.
 * @param classToReturn Class name of resources to return.
 * @param filter Filter.
 */
public CountRequest(final String classToReturn,final Filter filter){
  this.classToReturn=classToReturn;
  this.filter=filter;
}","/** 
 * Constructor.
 * @param classToReturn Class name of resources to return.
 * @param filter Filter.
 */
public CountRequest(final String classToReturn,final Filter filter,final boolean onlyActive){
  this.classToReturn=classToReturn;
  this.filter=filter;
  this.onlyActive=onlyActive;
}",0.8960302457466919
188460,"/** 
 * Constructor.
 * @param classToReturn Class name of resources to return.
 * @param filter Filter.
 * @param sorter Sorter.
 * @param sublist Sublist (paging).
 * @param facets Facets to return.
 * @param onlyActive Return only active resources?
 * @param exportFacets for CSV results, export only facets?
 * @param filename the filename for exported CSV.
 */
public FindRequest(final String classToReturn,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final boolean onlyActive,final boolean exportFacets,final String filename){
  super(classToReturn,filter);
  this.sorter=sorter;
  this.sublist=sublist;
  this.facets=facets;
  this.onlyActive=onlyActive;
  this.exportFacets=exportFacets;
  this.filename=filename;
}","/** 
 * Constructor.
 * @param classToReturn Class name of resources to return.
 * @param filter Filter.
 * @param sorter Sorter.
 * @param sublist Sublist (paging).
 * @param facets Facets to return.
 * @param onlyActive Return only active resources?
 * @param exportFacets for CSV results, export only facets?
 * @param filename the filename for exported CSV.
 */
public FindRequest(final String classToReturn,final Filter filter,final Sorter sorter,final Sublist sublist,final Facets facets,final boolean onlyActive,final boolean exportFacets,final String filename){
  super(classToReturn,filter,onlyActive);
  this.sorter=sorter;
  this.sublist=sublist;
  this.facets=facets;
  this.exportFacets=exportFacets;
  this.filename=filename;
}",0.9193870752831446
188461,"public static <T extends IsIndexed>Long count(final User user,final Class<T> classToReturn,final Filter filter) throws AuthorizationDeniedException, GenericException, RequestNotValidException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  controllerAssistant.checkRoles(user,classToReturn);
  final Long count=BrowserHelper.count(classToReturn,filter,user);
  controllerAssistant.registerAction(user,LOG_ENTRY_STATE.SUCCESS,RodaConstants.CONTROLLER_CLASS_PARAM,classToReturn.getSimpleName(),RodaConstants.CONTROLLER_FILTER_PARAM,filter.toString());
  return count;
}","public static <T extends IsIndexed>Long count(final User user,final Class<T> classToReturn,final Filter filter,boolean justActive) throws AuthorizationDeniedException, GenericException, RequestNotValidException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  controllerAssistant.checkRoles(user,classToReturn);
  final Long count=BrowserHelper.count(classToReturn,filter,justActive,user);
  controllerAssistant.registerAction(user,LOG_ENTRY_STATE.SUCCESS,RodaConstants.CONTROLLER_CLASS_PARAM,classToReturn.getSimpleName(),RodaConstants.CONTROLLER_FILTER_PARAM,filter.toString());
  return count;
}",0.975767366720517
188462,"private static <T extends IsIndexed>List<String> consolidate(User user,Class<T> classToReturn,SelectedItems<T> selected) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  List<String> ret;
  if (selected instanceof SelectedItemsList) {
    ret=((SelectedItemsList<T>)selected).getIds();
  }
 else   if (selected instanceof SelectedItemsFilter) {
    SelectedItemsFilter<T> selectedItemsFilter=(SelectedItemsFilter<T>)selected;
    Filter filter=selectedItemsFilter.getFilter();
    Long count=count(classToReturn,filter,user);
    IndexResult<T> find=find(classToReturn,filter,Sorter.NONE,new Sublist(0,count.intValue()),Facets.NONE,user,selectedItemsFilter.justActive());
    ret=find.getResults().stream().map(i -> i.getUUID()).collect(Collectors.toList());
  }
 else {
    throw new RequestNotValidException(""String_Node_Str"" + selected.getClass().getName());
  }
  return ret;
}","private static <T extends IsIndexed>List<String> consolidate(User user,Class<T> classToReturn,SelectedItems<T> selected) throws GenericException, AuthorizationDeniedException, RequestNotValidException {
  List<String> ret;
  if (selected instanceof SelectedItemsList) {
    ret=((SelectedItemsList<T>)selected).getIds();
  }
 else   if (selected instanceof SelectedItemsFilter) {
    SelectedItemsFilter<T> selectedItemsFilter=(SelectedItemsFilter<T>)selected;
    Filter filter=selectedItemsFilter.getFilter();
    boolean justActive=selectedItemsFilter.justActive();
    Long count=count(classToReturn,filter,justActive,user);
    IndexResult<T> find=find(classToReturn,filter,Sorter.NONE,new Sublist(0,count.intValue()),Facets.NONE,user,justActive);
    ret=find.getResults().stream().map(i -> i.getUUID()).collect(Collectors.toList());
  }
 else {
    throw new RequestNotValidException(""String_Node_Str"" + selected.getClass().getName());
  }
  return ret;
}",0.952076677316294
188463,"protected static <T extends IsIndexed>Long count(Class<T> returnClass,Filter filter,User user) throws GenericException, RequestNotValidException {
  boolean justActive=false;
  return RodaCoreFactory.getIndexService().count(returnClass,filter,user,justActive);
}","protected static <T extends IsIndexed>Long count(Class<T> returnClass,Filter filter,boolean justActive,User user) throws GenericException, RequestNotValidException {
  return RodaCoreFactory.getIndexService().count(returnClass,filter,user,justActive);
}",0.90873786407767
188464,"public static BrowseFileBundle retrieveBrowseFileBundle(IndexedAIP aip,String representationId,List<String> filePath,String fileId,Locale locale,User user) throws NotFoundException, GenericException, RequestNotValidException {
  BrowseFileBundle bundle=new BrowseFileBundle();
  bundle.setAip(aip);
  bundle.setRepresentation(retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(aip.getId(),representationId)));
  String fileUUID=IdUtils.getFileId(aip.getId(),representationId,filePath,fileId);
  bundle.setFile(retrieve(IndexedFile.class,fileUUID));
  try {
    bundle.setAipAncestors(retrieveAncestors(aip));
  }
 catch (  NotFoundException e) {
    LOGGER.warn(""String_Node_Str"",aip.getId(),e);
  }
  String parentUUID=bundle.getFile().getParentUUID();
  Filter siblingFilter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,bundle.getFile().getRepresentationUUID()));
  if (parentUUID != null) {
    siblingFilter.add(new SimpleFilterParameter(RodaConstants.FILE_PARENT_UUID,parentUUID));
  }
 else {
    siblingFilter.add(new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  }
  bundle.setTotalSiblingCount(count(IndexedFile.class,siblingFilter,user));
  Filter dipsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,fileUUID));
  Long dipCount=RodaCoreFactory.getIndexService().count(IndexedDIP.class,dipsFilter);
  bundle.setDipCount(dipCount);
  return bundle;
}","public static BrowseFileBundle retrieveBrowseFileBundle(IndexedAIP aip,String representationId,List<String> filePath,String fileId,Locale locale,User user) throws NotFoundException, GenericException, RequestNotValidException {
  BrowseFileBundle bundle=new BrowseFileBundle();
  bundle.setAip(aip);
  bundle.setRepresentation(retrieve(IndexedRepresentation.class,IdUtils.getRepresentationId(aip.getId(),representationId)));
  String fileUUID=IdUtils.getFileId(aip.getId(),representationId,filePath,fileId);
  bundle.setFile(retrieve(IndexedFile.class,fileUUID));
  try {
    bundle.setAipAncestors(retrieveAncestors(aip));
  }
 catch (  NotFoundException e) {
    LOGGER.warn(""String_Node_Str"",aip.getId(),e);
  }
  String parentUUID=bundle.getFile().getParentUUID();
  Filter siblingFilter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,bundle.getFile().getRepresentationUUID()));
  if (parentUUID != null) {
    siblingFilter.add(new SimpleFilterParameter(RodaConstants.FILE_PARENT_UUID,parentUUID));
  }
 else {
    siblingFilter.add(new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  }
  boolean justActive=AIPState.ACTIVE.equals(aip.getState());
  bundle.setTotalSiblingCount(count(IndexedFile.class,siblingFilter,justActive,user));
  Filter dipsFilter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,fileUUID));
  Long dipCount=RodaCoreFactory.getIndexService().count(IndexedDIP.class,dipsFilter);
  bundle.setDipCount(dipCount);
  return bundle;
}",0.9668470906630582
188465,"/** 
 * Count indexed resources.
 * @param countRequest count parameters.
 * @return a {@link Response} with the count.
 * @throws RODAException if some error occurs.
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Long.class) public Response count(@ApiParam(value=""String_Node_Str"") final CountRequest countRequest) throws RODAException {
  final String mediaType=ApiUtils.getMediaType(null,request);
  final User user=UserUtility.getApiUser(request);
  final long result=Browser.count(user,getClass(countRequest.classToReturn),countRequest.filter);
  return Response.ok(result,mediaType).build();
}","/** 
 * Count indexed resources.
 * @param countRequest count parameters.
 * @return a {@link Response} with the count.
 * @throws RODAException if some error occurs.
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Long.class) public Response count(@ApiParam(value=""String_Node_Str"") final CountRequest countRequest) throws RODAException {
  final String mediaType=ApiUtils.getMediaType(null,request);
  final User user=UserUtility.getApiUser(request);
  final long result=Browser.count(user,getClass(countRequest.classToReturn),countRequest.filter,countRequest.onlyActive);
  return Response.ok(result,mediaType).build();
}",0.984
188466,"/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseDIP(Viewers viewers,DipBundle bundle){
  this.viewers=viewers;
  this.bundle=bundle;
  this.aip=bundle.getAip();
  this.representation=bundle.getRepresentation();
  this.file=bundle.getFile();
  this.dip=bundle.getDip();
  this.dipFile=bundle.getDipFile();
  this.dipFileAncestors=bundle.getDipFileAncestors();
  initWidget(uiBinder.createAndBindUi(this));
  HtmlSnippetUtils.setCssClassDisabled(previousButton,true);
  HtmlSnippetUtils.setCssClassDisabled(nextButton,true);
  show();
  initializeRefererListSelectionState();
  if (dipFile != null) {
    ListSelectionUtils.bindLayout(dipFile,previousButton,nextButton,keyboardFocus,true,false,false);
  }
  keyboardFocus.setFocus(true);
  if (file != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,file);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getFile());
    Sliders.createOptionsSlider(center,refererOptionsButton,bundle.getFile());
  }
 else   if (representation != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,representation);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getRepresentation());
    Sliders.createOptionsSlider(center,refererOptionsButton,bundle.getRepresentation());
  }
 else   if (aip != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,aip);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getAip());
    refererOptionsButton.setVisible(false);
  }
 else {
    disseminationsButton.setVisible(false);
    refererInfoButton.setVisible(false);
    refererOptionsButton.setVisible(false);
  }
  if (dipFile != null) {
    Sliders.createOptionsSlider(center,dipOptionsButton,dipFile);
  }
 else {
    Sliders.createOptionsSlider(center,dipOptionsButton,dip);
  }
}","/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseDIP(Viewers viewers,DipBundle bundle){
  this.viewers=viewers;
  this.bundle=bundle;
  this.aip=bundle.getAip();
  this.representation=bundle.getRepresentation();
  this.file=bundle.getFile();
  this.dip=bundle.getDip();
  this.dipFile=bundle.getDipFile();
  this.dipFileAncestors=bundle.getDipFileAncestors();
  initWidget(uiBinder.createAndBindUi(this));
  HtmlSnippetUtils.setCssClassDisabled(previousButton,true);
  HtmlSnippetUtils.setCssClassDisabled(nextButton,true);
  update();
  initializeRefererListSelectionState();
  if (dipFile != null) {
    ListSelectionUtils.bindLayout(dipFile,previousButton,nextButton,keyboardFocus,true,false,false);
  }
  keyboardFocus.setFocus(true);
  if (file != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,file);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getFile());
    Sliders.createOptionsSlider(center,refererOptionsButton,bundle.getFile());
  }
 else   if (representation != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,representation);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getRepresentation());
    Sliders.createOptionsSlider(center,refererOptionsButton,bundle.getRepresentation());
  }
 else   if (aip != null) {
    Sliders.createDisseminationsSlider(center,disseminationsButton,aip);
    Sliders.createInfoSlider(center,refererInfoButton,bundle.getAip());
    refererOptionsButton.setVisible(false);
  }
 else {
    disseminationsButton.setVisible(false);
    refererInfoButton.setVisible(false);
    refererOptionsButton.setVisible(false);
  }
  if (dipFile != null) {
    Sliders.createOptionsSlider(center,dipOptionsButton,dipFile);
  }
 else {
    Sliders.createOptionsSlider(center,dipOptionsButton,dip);
  }
}",0.9974657881398884
188467,"/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param sorter
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseFile(Viewers viewers,final BrowseFileBundle bundle){
  this.bundle=bundle;
  filePreview=new IndexedFilePreview(viewers,bundle.getFile(),new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
          BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,new AsyncCallback<Long>(){
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
            @Override public void onSuccess(            Long dipCount){
              if (dipCount > 0) {
                disseminationsSlider.open();
              }
            }
          }
);
        }
      }
);
    }
  }
);
  initWidget(uiBinder.createAndBindUi(this));
  breadcrumb.updatePath(getBreadcrumbs());
  breadcrumb.setVisible(true);
  infoFileButton.setTitle(messages.viewRepresentationInfoFileButton());
  disseminationsButton.setVisible(bundle.getDipCount() > 0);
  disseminationsSlider=Sliders.createDisseminationsSlider(center,disseminationsButton,bundle.getFile());
  infoSlider=Sliders.createInfoSlider(center,infoFileButton,bundle.getFile());
  optionsSlider=Sliders.createOptionsSlider(center,optionsButton,bundle.getFile());
  keyboardFocus.setFocus(true);
  ListSelectionUtils.bindLayout(bundle.getFile(),previousButton,nextButton,keyboardFocus,true,false,false);
}","/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param sorter
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseFile(Viewers viewers,final BrowseFileBundle bundle){
  this.bundle=bundle;
  filePreview=new IndexedFilePreview(viewers,bundle.getFile(),new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
          boolean justActive=AIPState.ACTIVE.equals(bundle.getAip().getState());
          BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,justActive,new AsyncCallback<Long>(){
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
            @Override public void onSuccess(            Long dipCount){
              if (dipCount > 0) {
                disseminationsSlider.open();
              }
            }
          }
);
        }
      }
);
    }
  }
);
  initWidget(uiBinder.createAndBindUi(this));
  breadcrumb.updatePath(getBreadcrumbs());
  breadcrumb.setVisible(true);
  infoFileButton.setTitle(messages.viewRepresentationInfoFileButton());
  disseminationsButton.setVisible(bundle.getDipCount() > 0);
  disseminationsSlider=Sliders.createDisseminationsSlider(center,disseminationsButton,bundle.getFile());
  infoSlider=Sliders.createInfoSlider(center,infoFileButton,bundle.getFile());
  optionsSlider=Sliders.createOptionsSlider(center,optionsButton,bundle.getFile());
  keyboardFocus.setFocus(true);
  ListSelectionUtils.bindLayout(bundle.getFile(),previousButton,nextButton,keyboardFocus,true,false,false);
}",0.974835886214442
188468,"@Override public void execute(){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
  BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,new AsyncCallback<Long>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Long dipCount){
      if (dipCount > 0) {
        disseminationsSlider.open();
      }
    }
  }
);
}","@Override public void execute(){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
  boolean justActive=AIPState.ACTIVE.equals(bundle.getAip().getState());
  BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,justActive,new AsyncCallback<Long>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    Long dipCount){
      if (dipCount > 0) {
        disseminationsSlider.open();
      }
    }
  }
);
}",0.924187725631769
188469,"<T extends IsIndexed>Long count(String classNameToReturn,Filter filter) throws AuthorizationDeniedException, GenericException, RequestNotValidException ;","<T extends IsIndexed>Long count(String classNameToReturn,Filter filter,boolean justActive) throws AuthorizationDeniedException, GenericException, RequestNotValidException ;",0.9415384615384615
188470,"void count(String classNameToReturn,Filter filter,AsyncCallback<Long> callback);","void count(String classNameToReturn,Filter filter,boolean justActive,AsyncCallback<Long> callback);",0.8938547486033519
188471,"public static <T extends IsIndexed>void hasPreviousOrNext(final T object,final AsyncCallback<Pair<Boolean,Boolean>> callback){
  @SuppressWarnings(""String_Node_Str"") Class<T> objectClass=(Class<T>)object.getClass();
  final ListSelectionState<T> last=last(objectClass);
  if (last != null) {
    if (last.getSelected().getUUID().equals(object.getUUID())) {
      BrowserService.Util.getInstance().count(objectClass.getName(),last.getFilter(),new AsyncCallback<Long>(){
        @Override public void onFailure(        Throwable caught){
          callback.onFailure(caught);
        }
        @Override public void onSuccess(        Long totalCount){
          Integer lastIndex=last.getIndex();
          Boolean hasPrevious=lastIndex > 0;
          Boolean hasNext=lastIndex < totalCount - 1;
          callback.onSuccess(Pair.create(hasPrevious,hasNext));
        }
      }
);
    }
 else {
      callback.onSuccess(Pair.create(Boolean.FALSE,Boolean.FALSE));
    }
  }
 else {
    callback.onSuccess(Pair.create(Boolean.FALSE,Boolean.FALSE));
  }
}","public static <T extends IsIndexed>void hasPreviousOrNext(final T object,final AsyncCallback<Pair<Boolean,Boolean>> callback){
  @SuppressWarnings(""String_Node_Str"") Class<T> objectClass=(Class<T>)object.getClass();
  final ListSelectionState<T> last=last(objectClass);
  if (last != null) {
    if (last.getSelected().getUUID().equals(object.getUUID())) {
      BrowserService.Util.getInstance().count(objectClass.getName(),last.getFilter(),last.getJustActive(),new AsyncCallback<Long>(){
        @Override public void onFailure(        Throwable caught){
          callback.onFailure(caught);
        }
        @Override public void onSuccess(        Long totalCount){
          Integer lastIndex=last.getIndex();
          Boolean hasPrevious=lastIndex > 0;
          Boolean hasNext=lastIndex < totalCount - 1;
          callback.onSuccess(Pair.create(hasPrevious,hasNext));
        }
      }
);
    }
 else {
      callback.onSuccess(Pair.create(Boolean.FALSE,Boolean.FALSE));
    }
  }
 else {
    callback.onSuccess(Pair.create(Boolean.FALSE,Boolean.FALSE));
  }
}",0.99009900990099
188472,"public static <T extends IsIndexed>void size(Class<T> classToReturn,SelectedItems<T> selected,final AsyncCallback<Long> callback){
  if (selected instanceof SelectedItemsList) {
    Long size=(long)((SelectedItemsList<T>)selected).getIds().size();
    callback.onSuccess(size);
  }
 else   if (selected instanceof SelectedItemsFilter) {
    Filter filter=((SelectedItemsFilter<T>)selected).getFilter();
    BrowserService.Util.getInstance().count(classToReturn.getName(),filter,new AsyncCallback<Long>(){
      @Override public void onFailure(      Throwable caught){
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      Long result){
        callback.onSuccess(result);
      }
    }
);
  }
 else {
    callback.onFailure(new RequestNotValidException(""String_Node_Str"" + selected.getClass().getName()));
  }
}","public static <T extends IsIndexed>void size(Class<T> classToReturn,SelectedItems<T> selected,final AsyncCallback<Long> callback){
  if (selected instanceof SelectedItemsList) {
    Long size=(long)((SelectedItemsList<T>)selected).getIds().size();
    callback.onSuccess(size);
  }
 else   if (selected instanceof SelectedItemsFilter) {
    SelectedItemsFilter<T> selectedItemsFilter=(SelectedItemsFilter<T>)selected;
    Filter filter=selectedItemsFilter.getFilter();
    boolean justActive=selectedItemsFilter.justActive();
    BrowserService.Util.getInstance().count(classToReturn.getName(),filter,justActive,new AsyncCallback<Long>(){
      @Override public void onFailure(      Throwable caught){
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      Long result){
        callback.onSuccess(result);
      }
    }
);
  }
 else {
    callback.onFailure(new RequestNotValidException(""String_Node_Str"" + selected.getClass().getName()));
  }
}",0.8870614035087719
188473,"@Override public <T extends IsIndexed>Long count(String classNameToReturn,Filter filter) throws AuthorizationDeniedException, GenericException, RequestNotValidException {
  User user=UserUtility.getUser(getThreadLocalRequest());
  Class<T> classToReturn=SelectedItemsUtils.parseClass(classNameToReturn);
  return Browser.count(user,classToReturn,filter);
}","@Override public <T extends IsIndexed>Long count(String classNameToReturn,Filter filter,boolean justActive) throws AuthorizationDeniedException, GenericException, RequestNotValidException {
  User user=UserUtility.getUser(getThreadLocalRequest());
  Class<T> classToReturn=SelectedItemsUtils.parseClass(classNameToReturn);
  return Browser.count(user,classToReturn,filter,justActive);
}",0.9595687331536388
188474,"@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_MISC);
}","@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE);
}",0.9464285714285714
188475,"public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  try {
    for (    AIP aip : list) {
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
      LOGGER.debug(""String_Node_Str"",aip.getId());
      String outcomeDetailExtension=""String_Node_Str"";
      List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
      try {
        for (        Representation representation : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
          CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),true);
          for (          OptionalWithCause<File> oFile : allFiles) {
            if (oFile.isPresent()) {
              File file=oFile.get();
              LinkingIdentifier tikaResult=TikaFullTextPluginUtils.runTikaFullTextOnFile(index,model,storage,file,doFeatureExtraction,doFulltextExtraction);
              sources.add(tikaResult);
            }
 else {
              LOGGER.error(""String_Node_Str"",oFile.getCause());
            }
          }
          model.notifyRepresentationUpdated(representation);
        }
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
        reportItem.setPluginState(PluginState.SUCCESS);
      }
 catch (      Exception e) {
        outcomeDetailExtension=e.getMessage();
        LOGGER.error(""String_Node_Str"",aip.getId(),e.getMessage());
        if (reportItem != null) {
          String details=reportItem.getPluginDetails();
          if (details == null) {
            details=""String_Node_Str"";
          }
          details+=e.getMessage();
          reportItem.setPluginDetails(details).setPluginState(PluginState.FAILURE);
        }
 else {
          LOGGER.error(""String_Node_Str"",e);
        }
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
      try {
        List<LinkingIdentifier> outcomes=null;
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,outcomes,reportItem.getPluginState(),outcomeDetailExtension,notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  ClassCastException e) {
    LOGGER.error(""String_Node_Str"");
    jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
  }
  return report;
}","public Report executeOnAIP(IndexService index,ModelService model,StorageService storage,Report report,SimpleJobPluginInfo jobPluginInfo,List<AIP> list,Job job) throws PluginException {
  try {
    for (    AIP aip : list) {
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
      LOGGER.debug(""String_Node_Str"",aip.getId());
      String outcomeDetailExtension=""String_Node_Str"";
      List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
      try {
        for (        Representation representation : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",representation.getId(),aip.getId());
          CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),true);
          for (          OptionalWithCause<File> oFile : allFiles) {
            if (oFile.isPresent()) {
              File file=oFile.get();
              LinkingIdentifier tikaResult=TikaFullTextPluginUtils.runTikaFullTextOnFile(index,model,storage,file,doFeatureExtraction,doFulltextExtraction);
              sources.add(tikaResult);
            }
 else {
              LOGGER.error(""String_Node_Str"",oFile.getCause());
            }
          }
          model.notifyRepresentationUpdated(representation);
        }
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
        reportItem.setPluginState(PluginState.SUCCESS);
      }
 catch (      Exception e) {
        outcomeDetailExtension=e.getMessage();
        LOGGER.error(""String_Node_Str"",aip.getId(),e);
        if (reportItem != null) {
          String details=reportItem.getPluginDetails();
          if (details == null) {
            details=""String_Node_Str"";
          }
          details+=e.getMessage();
          reportItem.setPluginDetails(details).setPluginState(PluginState.FAILURE);
        }
 else {
          LOGGER.error(""String_Node_Str"",e);
        }
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
      try {
        List<LinkingIdentifier> outcomes=null;
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,outcomes,reportItem.getPluginState(),outcomeDetailExtension,notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  ClassCastException e) {
    LOGGER.error(""String_Node_Str"");
    jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
  }
  return report;
}",0.99771889805229
188476,"private static OtherMetadata convertResourceToOtherMetadata(Resource resource) throws RequestNotValidException {
  if (resource == null) {
    throw new RequestNotValidException(""String_Node_Str"");
  }
  StoragePath resourcePath=resource.getStoragePath();
  String filename=resourcePath.getName();
  OtherMetadata om=new OtherMetadata();
  String aipId=ModelUtils.extractAipId(resourcePath);
  String representationId=ModelUtils.extractRepresentationId(resourcePath);
  String type=representationId != null ? ModelUtils.extractTypeFromRepresentationOtherMetadata(resourcePath) : ModelUtils.extractTypeFromAipOtherMetadata(resourcePath);
  List<String> fileDirectoryPath=representationId != null ? ModelUtils.extractFilePathFromRepresentationOtherMetadata(resourcePath) : ModelUtils.extractFilePathFromAipOtherMetadata(resourcePath);
  String fileId=filename.substring(0,filename.lastIndexOf('.'));
  String suffix=filename.substring(filename.lastIndexOf('.'),filename.length());
  om.setAipId(aipId);
  om.setRepresentationId(representationId);
  om.setFileDirectoryPath(fileDirectoryPath);
  om.setFileId(fileId);
  om.setType(type);
  om.setFileSuffix(suffix);
  return om;
}","private static OtherMetadata convertResourceToOtherMetadata(Resource resource) throws RequestNotValidException {
  if (resource == null) {
    throw new RequestNotValidException(""String_Node_Str"");
  }
  StoragePath resourcePath=resource.getStoragePath();
  String filename=resourcePath.getName();
  String aipId=ModelUtils.extractAipId(resourcePath);
  String representationId=ModelUtils.extractRepresentationId(resourcePath);
  String type=representationId != null ? ModelUtils.extractTypeFromRepresentationOtherMetadata(resourcePath) : ModelUtils.extractTypeFromAipOtherMetadata(resourcePath);
  List<String> fileDirectoryPath=representationId != null ? ModelUtils.extractFilePathFromRepresentationOtherMetadata(resourcePath) : ModelUtils.extractFilePathFromAipOtherMetadata(resourcePath);
  String fileId=filename.substring(0,filename.lastIndexOf('.'));
  String suffix=filename.substring(filename.lastIndexOf('.'),filename.length());
  OtherMetadata om=new OtherMetadata();
  om.setId(IdUtils.getOtherMetadataId(type,aipId,representationId,fileDirectoryPath,fileId));
  om.setAipId(aipId);
  om.setRepresentationId(representationId);
  om.setFileDirectoryPath(fileDirectoryPath);
  om.setFileId(fileId);
  om.setType(type);
  om.setFileSuffix(suffix);
  return om;
}",0.928921568627451
188477,"@Override public void onKeyDown(KeyDownEvent event){
  if (!bundle.getFile().isDirectory()) {
    NativeEvent ne=event.getNativeEvent();
    if (ne.getKeyCode() == KeyCodes.KEY_RIGHT) {
      ne.preventDefault();
      next();
    }
 else     if (ne.getKeyCode() == KeyCodes.KEY_LEFT) {
      ne.preventDefault();
      previous();
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  if (event.isControlKeyDown()) {
    NativeEvent ne=event.getNativeEvent();
    if (ne.getKeyCode() == KeyCodes.KEY_RIGHT) {
      ne.preventDefault();
      next();
    }
 else     if (ne.getKeyCode() == KeyCodes.KEY_LEFT) {
      ne.preventDefault();
      previous();
    }
  }
}",0.9248895434462444
188478,"private void load(final Viewers viewers,final List<String> historyTokens,final AsyncCallback<Widget> callback){
  if (historyTokens.size() > 2) {
    final String historyAipId=historyTokens.get(0);
    final String historyRepresentationId=historyTokens.get(1);
    final List<String> historyFilePath=new ArrayList<String>(historyTokens.subList(2,historyTokens.size() - 1));
    final String historyFileId=historyTokens.get(historyTokens.size() - 1);
    Pair<Sorter,Integer> lastSelectionDetails=LastSelectedItemsSingleton.getInstance().getLastSelectionDetails();
    final Sorter sorter=lastSelectionDetails.getFirst() != null ? lastSelectionDetails.getFirst() : DEFAULT_FILE_SORTER;
    final Integer index=lastSelectionDetails.getSecond() != null ? lastSelectionDetails.getSecond() : DEFAULT_FILE_INDEX;
    BrowserService.Util.getInstance().retrieveBrowseFileBundle(historyAipId,historyRepresentationId,historyFilePath,historyFileId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<BrowseFileBundle>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      final BrowseFileBundle bundle){
        callback.onSuccess(new BrowseFile(viewers,bundle,sorter,index));
      }
    }
);
  }
 else {
    errorRedirect(callback);
  }
}","private void load(final Viewers viewers,final List<String> historyTokens,final AsyncCallback<Widget> callback){
  if (historyTokens.size() > 2) {
    final String historyAipId=historyTokens.get(0);
    final String historyRepresentationId=historyTokens.get(1);
    final List<String> historyFilePath=new ArrayList<String>(historyTokens.subList(2,historyTokens.size() - 1));
    final String historyFileId=historyTokens.get(historyTokens.size() - 1);
    Pair<Sorter,Integer> lastSelectionDetails=LastSelectedItemsSingleton.getInstance().getLastSelectionDetails();
    final Sorter sorter=lastSelectionDetails.getFirst() != null ? lastSelectionDetails.getFirst() : DEFAULT_FILE_SORTER;
    final Integer index=lastSelectionDetails.getSecond() != null ? lastSelectionDetails.getSecond() : DEFAULT_FILE_INDEX;
    LastSelectedItemsSingleton.getInstance().resetLastSelectionDetails();
    BrowserService.Util.getInstance().retrieveBrowseFileBundle(historyAipId,historyRepresentationId,historyFilePath,historyFileId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<BrowseFileBundle>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      final BrowseFileBundle bundle){
        callback.onSuccess(new BrowseFile(viewers,bundle,sorter,index));
      }
    }
);
  }
 else {
    errorRedirect(callback);
  }
}",0.9736091298145506
188479,"/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param sorter
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseFile(Viewers viewers,final BrowseFileBundle bundle,Sorter sorter,Integer index){
  this.bundle=bundle;
  this.sorter=sorter;
  this.index=index;
  filePreview=new IndexedFilePreview(viewers,bundle.getFile(),new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
          BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,new AsyncCallback<Long>(){
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
            @Override public void onSuccess(            Long dipCount){
              if (dipCount > 0) {
                toggleDisseminationsPanel();
              }
            }
          }
);
        }
      }
);
    }
  }
);
  initWidget(uiBinder.createAndBindUi(this));
  breadcrumb.updatePath(getBreadcrumbs());
  breadcrumb.setVisible(true);
  infoFileButton.setTitle(messages.viewRepresentationInfoFileButton());
  optionDownload.setEnabled(!bundle.getFile().isDirectory());
  infoFileButton.setVisible(!bundle.getFile().isDirectory());
  downloadDocumentationButton.setVisible(bundle.getRepresentation().getNumberOfDocumentationFiles() > 0);
  downloadSchemasButton.setVisible(bundle.getRepresentation().getNumberOfSchemaFiles() > 0);
  keyboardFocus.setFocus(true);
  keyboardFocus.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (!bundle.getFile().isDirectory()) {
        NativeEvent ne=event.getNativeEvent();
        if (ne.getKeyCode() == KeyCodes.KEY_RIGHT) {
          ne.preventDefault();
          next();
        }
 else         if (ne.getKeyCode() == KeyCodes.KEY_LEFT) {
          ne.preventDefault();
          previous();
        }
      }
    }
  }
);
  if (index < 0) {
    HtmlSnippetUtils.setCssClassDisabled(previousButton,true);
    HtmlSnippetUtils.setCssClassDisabled(nextButton,bundle.getTotalSiblingCount() < 2);
  }
 else {
    HtmlSnippetUtils.setCssClassDisabled(previousButton,index == 0);
    HtmlSnippetUtils.setCssClassDisabled(nextButton,index >= bundle.getTotalSiblingCount() - 1);
  }
}","/** 
 * Create a new panel to view a representation
 * @param viewers
 * @param index
 * @param sorter
 * @param aipId
 * @param itemBundle
 * @param representationUUID
 * @param fileUUID
 * @param file
 */
public BrowseFile(Viewers viewers,final BrowseFileBundle bundle,Sorter sorter,Integer index){
  this.bundle=bundle;
  this.sorter=sorter;
  this.index=index;
  filePreview=new IndexedFilePreview(viewers,bundle.getFile(),new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));
          BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,new AsyncCallback<Long>(){
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
            @Override public void onSuccess(            Long dipCount){
              if (dipCount > 0) {
                toggleDisseminationsPanel();
              }
            }
          }
);
        }
      }
);
    }
  }
);
  initWidget(uiBinder.createAndBindUi(this));
  breadcrumb.updatePath(getBreadcrumbs());
  breadcrumb.setVisible(true);
  infoFileButton.setTitle(messages.viewRepresentationInfoFileButton());
  optionDownload.setEnabled(!bundle.getFile().isDirectory());
  infoFileButton.setVisible(!bundle.getFile().isDirectory());
  downloadDocumentationButton.setVisible(bundle.getRepresentation().getNumberOfDocumentationFiles() > 0);
  downloadSchemasButton.setVisible(bundle.getRepresentation().getNumberOfSchemaFiles() > 0);
  keyboardFocus.setFocus(true);
  keyboardFocus.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (event.isControlKeyDown()) {
        NativeEvent ne=event.getNativeEvent();
        if (ne.getKeyCode() == KeyCodes.KEY_RIGHT) {
          ne.preventDefault();
          next();
        }
 else         if (ne.getKeyCode() == KeyCodes.KEY_LEFT) {
          ne.preventDefault();
          previous();
        }
      }
    }
  }
);
  if (index < 0) {
    HtmlSnippetUtils.setCssClassDisabled(previousButton,true);
    HtmlSnippetUtils.setCssClassDisabled(nextButton,bundle.getTotalSiblingCount() < 2);
  }
 else {
    HtmlSnippetUtils.setCssClassDisabled(previousButton,index == 0);
    HtmlSnippetUtils.setCssClassDisabled(nextButton,index >= bundle.getTotalSiblingCount() - 1);
  }
  boolean directory=bundle.getFile().isDirectory();
  optionDownload.setVisible(!directory);
  optionRename.setVisible(directory);
  optionMove.setVisible(true);
  optionUploadFiles.setVisible(directory);
  optionCreateFolder.setVisible(directory);
  optionRemove.setVisible(true);
  optionNewProcess.setVisible(true);
  optionIdentify.setVisible(true);
  optionEvents.setVisible(true);
  optionRisk.setVisible(true);
}",0.915352546673917
188480,"public void open(String parentUUID,final Sorter sorter,final int openIndex){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_PARENT_UUID,parentUUID));
  Sublist sublist=new Sublist(openIndex,1);
  String localeString=LocaleInfo.getCurrentLocale().getLocaleName();
  boolean justActive=true;
  BrowserService.Util.getInstance().find(IndexedFile.class.getName(),filter,sorter,sublist,Facets.NONE,localeString,justActive,new AsyncCallback<IndexResult<IndexedFile>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    IndexResult<IndexedFile> result){
      if (!result.getResults().isEmpty()) {
        IndexedFile firstFile=result.getResults().get(0);
        HistoryUtils.openBrowse(firstFile,sorter,openIndex);
      }
 else {
        Toast.showError(""String_Node_Str"");
      }
    }
  }
);
}","public void open(final String parentUUID,final Sorter sorter,final int openIndex){
  Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_REPRESENTATION_UUID,bundle.getFile().getRepresentationUUID()));
  if (parentUUID != null) {
    filter.add(new SimpleFilterParameter(RodaConstants.FILE_PARENT_UUID,parentUUID));
  }
 else {
    filter.add(new EmptyKeyFilterParameter(RodaConstants.FILE_PARENT_UUID));
  }
  Sublist sublist=new Sublist(openIndex,1);
  String localeString=LocaleInfo.getCurrentLocale().getLocaleName();
  boolean justActive=true;
  BrowserService.Util.getInstance().find(IndexedFile.class.getName(),filter,sorter,sublist,Facets.NONE,localeString,justActive,new AsyncCallback<IndexResult<IndexedFile>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    IndexResult<IndexedFile> result){
      if (!result.getResults().isEmpty()) {
        IndexedFile firstFile=result.getResults().get(0);
        if (firstFile.getUUID().equals(bundle.getFile().getUUID())) {
          open(parentUUID,sorter,openIndex + 1);
        }
 else {
          HistoryUtils.openBrowse(firstFile,sorter,openIndex);
        }
      }
 else {
        Toast.showError(""String_Node_Str"");
      }
    }
  }
);
}",0.8231653404067197
188481,"@Test public void testJobExecutingPluginThatFailsDuringInit() throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  Job job=TestsHelper.executeJob(PluginThatFailsDuringInit.class,PluginType.MISC,SelectedItemsNone.create(),JOB_STATE.FAILED_TO_COMPLETE);
  Assert.assertEquals(job.getStateDetails(),""String_Node_Str"");
}","@Test public void testJobExecutingPluginThatFailsDuringInit() throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  try {
    RodaCoreFactory.getPluginManager().registerPlugin(new PluginThatFailsDuringInit());
    Assert.fail(""String_Node_Str"");
  }
 catch (  PluginException e) {
  }
  Job job=TestsHelper.executeJob(PluginThatFailsDuringInit.class,PluginType.MISC,SelectedItemsNone.create(),JOB_STATE.FAILED_TO_COMPLETE);
  Assert.assertEquals(job.getStateDetails(),""String_Node_Str"");
}",0.8110497237569061
188482,"public <T extends IsRODAObject>void registerPlugin(Plugin<T> plugin) throws PluginException {
  plugin.init();
  externalPluginChache.put(plugin.getClass().getName(),plugin);
  processAndCachePluginInformation(plugin);
  LOGGER.debug(""String_Node_Str"",plugin.getName(),plugin.getVersion());
}","public <T extends IsRODAObject>void registerPlugin(Plugin<T> plugin) throws PluginException {
  try {
    plugin.init();
    externalPluginChache.put(plugin.getClass().getName(),plugin);
    processAndCachePluginInformation(plugin);
    LOGGER.debug(""String_Node_Str"",plugin.getName(),plugin.getVersion());
  }
 catch (  Exception e) {
    throw new PluginException(""String_Node_Str"",e);
  }
}",0.8087591240875912
188483,"private AbstractMessage(){
  if (LOGGER.isTraceEnabled()) {
    uuid=UUID.randomUUID().toString();
    LOGGER.trace(""String_Node_Str"",uuid,getClass().getSimpleName());
  }
  creationTime=new Date().getTime();
}","private AbstractMessage(){
  if (LOGGER.isTraceEnabled()) {
    uuid=UUID.randomUUID().toString();
    LOGGER.trace(""String_Node_Str"",uuid,getClass().getSimpleName());
  }
  creationTime=System.currentTimeMillis();
}",0.9248826291079812
188484,"public long getTimeSinceCreation(){
  return new Date().getTime() - creationTime;
}","public long getTimeSinceCreation(){
  return System.currentTimeMillis() - creationTime;
}",0.8604651162790697
188485,"public static <T extends IsRODAObject>List<T> transformLitesIntoObjects(ModelService model,IndexService index,Plugin<T> plugin,Report report,JobPluginInfo pluginInfo,List<LiteOptionalWithCause> lites){
  List<T> finalObjects=new ArrayList<>();
  for (  LiteOptionalWithCause lite : lites) {
    String failureMessage=""String_Node_Str"";
    if (lite.isPresent()) {
      OptionalWithCause<T> retrievedObject=(OptionalWithCause<T>)model.retrieveObjectFromLite(lite.getLite().get());
      if (retrievedObject.isPresent()) {
        finalObjects.add(retrievedObject.get());
      }
 else {
        RODAException exception=retrievedObject.getCause();
        if (exception != null) {
          failureMessage=""String_Node_Str"" + exception.getClass().getName() + ""String_Node_Str""+ exception.getMessage();
        }
 else {
          failureMessage=""String_Node_Str"";
        }
      }
    }
 else {
      failureMessage=""String_Node_Str"" + lite.getExceptionClass() + ""String_Node_Str""+ lite.getExceptionMessage();
    }
    if (StringUtils.isNotBlank(failureMessage)) {
      if (pluginInfo != null) {
        pluginInfo.incrementObjectsProcessedWithFailure();
      }
      if (report != null) {
        String id=lite.toString();
        if (lite.getLite().isPresent()) {
          String[] split=lite.getLite().get().getInfo().split(LiteRODAObjectFactory.SEPARATOR_REGEX);
          id=split[1];
        }
        Report reportItem=PluginHelper.initPluginReportItem(plugin,id,LiteRODAObject.class);
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(failureMessage);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(plugin,model,index,reportItem,true);
      }
    }
  }
  return finalObjects;
}","public static <T extends IsRODAObject>List<T> transformLitesIntoObjects(ModelService model,IndexService index,Plugin<T> plugin,Report report,JobPluginInfo pluginInfo,List<LiteOptionalWithCause> lites,Job job){
  List<T> finalObjects=new ArrayList<>();
  for (  LiteOptionalWithCause lite : lites) {
    String failureMessage=""String_Node_Str"";
    if (lite.isPresent()) {
      OptionalWithCause<T> retrievedObject=(OptionalWithCause<T>)model.retrieveObjectFromLite(lite.getLite().get());
      if (retrievedObject.isPresent()) {
        finalObjects.add(retrievedObject.get());
      }
 else {
        RODAException exception=retrievedObject.getCause();
        if (exception != null) {
          failureMessage=""String_Node_Str"" + exception.getClass().getName() + ""String_Node_Str""+ exception.getMessage();
        }
 else {
          failureMessage=""String_Node_Str"";
        }
      }
    }
 else {
      failureMessage=""String_Node_Str"" + lite.getExceptionClass() + ""String_Node_Str""+ lite.getExceptionMessage();
    }
    if (StringUtils.isNotBlank(failureMessage)) {
      if (pluginInfo != null) {
        pluginInfo.incrementObjectsProcessedWithFailure();
      }
      if (report != null) {
        String id=lite.toString();
        if (lite.getLite().isPresent()) {
          String[] split=lite.getLite().get().getInfo().split(LiteRODAObjectFactory.SEPARATOR_REGEX);
          id=split[1];
        }
        Report reportItem=PluginHelper.initPluginReportItem(plugin,id,LiteRODAObject.class);
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(failureMessage);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(plugin,model,index,reportItem,true,job);
      }
    }
  }
  return finalObjects;
}",0.9965792474344356
188486,"public static <T extends IsRODAObject>void updatePartialJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceLastReportItemIfTheSame){
  String jobId=getJobId(plugin);
  boolean retrieved=true;
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getOutcomeObjectId(),true);
    }
 catch (    NotFoundException e) {
      jobReport=initPluginReportItem(plugin,reportItem.getOutcomeObjectId(),reportItem.getSourceObjectId()).setSourceObjectClass(reportItem.getSourceObjectClass()).setOutcomeObjectClass(reportItem.getOutcomeObjectClass());
      jobReport.setId(reportItem.getOutcomeObjectId());
      jobReport.addReport(reportItem);
      retrieved=false;
    }
    if (retrieved) {
      if (!replaceLastReportItemIfTheSame) {
        jobReport.addReport(reportItem);
      }
 else {
        List<Report> reportItems=jobReport.getReports();
        Report report=reportItems.get(reportItems.size() - 1);
        if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
          reportItems.remove(reportItems.size() - 1);
          jobReport.setStepsCompleted(jobReport.getStepsCompleted() - 1);
          jobReport.addReport(reportItem);
        }
      }
    }
    Job job=model.retrieveJob(jobId);
    model.createOrUpdateJobReport(jobReport,job);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public static <T extends IsRODAObject>void updatePartialJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceLastReportItemIfTheSame,Job cachedJob){
  String jobId=getJobId(plugin);
  boolean retrieved=true;
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getOutcomeObjectId(),true);
    }
 catch (    NotFoundException e) {
      jobReport=initPluginReportItem(plugin,reportItem.getOutcomeObjectId(),reportItem.getSourceObjectId()).setSourceObjectClass(reportItem.getSourceObjectClass()).setOutcomeObjectClass(reportItem.getOutcomeObjectClass());
      jobReport.setId(reportItem.getOutcomeObjectId());
      jobReport.addReport(reportItem);
      retrieved=false;
    }
    if (retrieved) {
      if (!replaceLastReportItemIfTheSame) {
        jobReport.addReport(reportItem);
      }
 else {
        List<Report> reportItems=jobReport.getReports();
        Report report=reportItems.get(reportItems.size() - 1);
        if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
          reportItems.remove(reportItems.size() - 1);
          jobReport.setStepsCompleted(jobReport.getStepsCompleted() - 1);
          jobReport.addReport(reportItem);
        }
      }
    }
    model.createOrUpdateJobReport(jobReport,cachedJob);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9495628782784128
188487,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
        PluginState reportState=PluginState.SUCCESS;
        VirusCheckResult virusCheckResult=null;
        Exception exception=null;
        DirectResourceAccess directAccess=null;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
          directAccess=storage.getDirectAccess(aipPath);
          virusCheckResult=getAntiVirus().checkForVirus(directAccess.getPath());
          reportState=virusCheckResult.isClean() ? PluginState.SUCCESS : PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(virusCheckResult.getReport());
          LOGGER.debug(""String_Node_Str"",aip.getId(),virusCheckResult.isClean());
        }
 catch (        RODAException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"" + aip.getId(),e);
          reportState=PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(e.getMessage());
          exception=e;
        }
 finally {
          IOUtils.closeQuietly(directAccess);
          jobPluginInfo.incrementObjectsProcessed(reportState);
          try {
            createEvent(virusCheckResult,exception,reportItem.getPluginState(),aip,model,index,true);
            report.addReport(reportItem);
            PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
          }
 catch (          PluginException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList,job);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
        PluginState reportState=PluginState.SUCCESS;
        VirusCheckResult virusCheckResult=null;
        Exception exception=null;
        DirectResourceAccess directAccess=null;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
          directAccess=storage.getDirectAccess(aipPath);
          virusCheckResult=getAntiVirus().checkForVirus(directAccess.getPath());
          reportState=virusCheckResult.isClean() ? PluginState.SUCCESS : PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(virusCheckResult.getReport());
          LOGGER.debug(""String_Node_Str"",aip.getId(),virusCheckResult.isClean());
        }
 catch (        RODAException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"" + aip.getId(),e);
          reportState=PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(e.getMessage());
          exception=e;
        }
 finally {
          IOUtils.closeQuietly(directAccess);
          jobPluginInfo.incrementObjectsProcessed(reportState);
          try {
            createEvent(virusCheckResult,exception,reportItem.getPluginState(),aip,model,index,true);
            report.addReport(reportItem);
            PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
          }
 catch (          PluginException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException|AuthorizationDeniedException|RequestNotValidException|GenericException|NotFoundException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}",0.9627959413754228
188488,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        List<String> passedFiles=new ArrayList<String>();
        Map<String,Pair<String,String>> failedFiles=new HashMap<>();
        List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
          try {
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  sources.add(PluginHelper.getLinkingIdentifier(aip.getId(),file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
                  String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          failedFiles.put(fileEntry,new Pair<>(f.getMessageDigest().trim(),checksum.trim()));
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    if (passedFixity) {
                      passedFiles.add(fileEntry);
                    }
 else {
                      aipFailed=true;
                      createIncidence(model,file,risks.get(0));
                    }
                  }
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"",r.getId(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            ValidationReport validationReport=new ValidationReport();
            for (            Entry<String,Pair<String,String>> entry : failedFiles.entrySet()) {
              ValidationIssue issue=new ValidationIssue(entry.getKey() + ""String_Node_Str"" + entry.getValue().getFirst()+ ""String_Node_Str""+ entry.getValue().getSecond()+ ""String_Node_Str"");
              validationReport.addIssue(issue);
            }
            reportItem.setPluginState(PluginState.FAILURE).setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.FAILURE,validationReport.toHtml(false,false,false,""String_Node_Str""),true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList,job);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        List<String> passedFiles=new ArrayList<String>();
        Map<String,Pair<String,String>> failedFiles=new HashMap<>();
        List<LinkingIdentifier> sources=new ArrayList<LinkingIdentifier>();
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
          try {
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  sources.add(PluginHelper.getLinkingIdentifier(aip.getId(),file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
                  String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          failedFiles.put(fileEntry,new Pair<>(f.getMessageDigest().trim(),checksum.trim()));
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    if (passedFixity) {
                      passedFiles.add(fileEntry);
                    }
 else {
                      aipFailed=true;
                      createIncidence(model,file,risks.get(0));
                    }
                  }
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"",r.getId(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            ValidationReport validationReport=new ValidationReport();
            for (            Entry<String,Pair<String,String>> entry : failedFiles.entrySet()) {
              ValidationIssue issue=new ValidationIssue(entry.getKey() + ""String_Node_Str"" + entry.getValue().getFirst()+ ""String_Node_Str""+ entry.getValue().getSecond()+ ""String_Node_Str"");
              validationReport.addIssue(issue);
            }
            reportItem.setPluginState(PluginState.FAILURE).setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.FAILURE,validationReport.toHtml(false,false,false,""String_Node_Str""),true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,sources,null,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException|AuthorizationDeniedException|NotFoundException|GenericException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}",0.9875808990729404
188489,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> objects) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,0);
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<String> activeJobsIds=findActiveJobs(index);
    activeJobsIds.remove(PluginHelper.getJobId(this));
    IterableIndexResult<IndexedAIP> aipsToDelete=findAipsToDelete(index,activeJobsIds);
    for (    IndexedAIP indexedAIP : aipsToDelete) {
      String error=null;
      try {
        LOGGER.debug(""String_Node_Str"",indexedAIP.getId());
        model.deleteAIP(indexedAIP.getId());
      }
 catch (      RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
        error=e.getMessage();
      }
      Report reportItem=PluginHelper.initPluginReportItem(this,indexedAIP.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      if (error != null) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str""+ error);
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
    }
    jobPluginInfo.setSourceObjectsCount((int)aipsToDelete.getTotalObjects());
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> objects) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,0);
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<String> activeJobsIds=findActiveJobs(index);
    activeJobsIds.remove(PluginHelper.getJobId(this));
    IterableIndexResult<IndexedAIP> aipsToDelete=findAipsToDelete(index,activeJobsIds);
    Job job=PluginHelper.getJob(this,model);
    for (    IndexedAIP indexedAIP : aipsToDelete) {
      String error=null;
      try {
        LOGGER.debug(""String_Node_Str"",indexedAIP.getId());
        model.deleteAIP(indexedAIP.getId());
      }
 catch (      RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
        error=e.getMessage();
      }
      Report reportItem=PluginHelper.initPluginReportItem(this,indexedAIP.getId(),AIP.class,AIPState.INGEST_PROCESSING);
      if (error != null) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str""+ error);
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
    }
    jobPluginInfo.setSourceObjectsCount((int)aipsToDelete.getTotalObjects());
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException|AuthorizationDeniedException|NotFoundException|GenericException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}",0.8794805194805195
188490,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  boolean validateDescriptiveMetadata=PluginHelper.getBooleanFromParameters(this,PARAMETER_VALIDATE_DESCRIPTIVE_METADATA);
  boolean validatePremis=PluginHelper.getBooleanFromParameters(this,PARAMETER_VALIDATE_PREMIS);
  boolean forceDescriptiveMetadataType=PluginHelper.getBooleanFromParameters(this,PARAMETER_FORCE_DESCRIPTIVE_METADATA_TYPE);
  String metadataType=PluginHelper.getStringFromParameters(this,PARAMETER_METADATA_TYPE);
  String metadataVersion=PluginHelper.getStringFromParameters(this,PARAMETER_METADATA_VERSION);
  Report pluginReport=PluginHelper.initPluginReport(this);
  List<ValidationReport> reports=new ArrayList<ValidationReport>();
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,pluginReport,jobPluginInfo,liteList);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
        PluginState state=PluginState.SUCCESS;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          ValidationReport report=ValidationUtils.isAIPMetadataValid(forceDescriptiveMetadataType,validateDescriptiveMetadata,metadataType,metadataVersion,validatePremis,model,aip.getId());
          reports.add(report);
          if (report.isValid()) {
            reportItem.setPluginState(state);
          }
 else {
            state=PluginState.FAILURE;
            reportItem.setPluginState(state).setHtmlPluginDetails(true).setPluginDetails(report.toHtml(false,false));
          }
        }
 catch (        RODAException mse) {
          state=PluginState.FAILURE;
          LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ mse.getMessage(),mse);
        }
        try {
          boolean notify=true;
          createEvent(aip,model,index,reportItem.getPluginState(),notify);
          jobPluginInfo.incrementObjectsProcessed(state);
          pluginReport.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        PluginException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return pluginReport;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  boolean validateDescriptiveMetadata=PluginHelper.getBooleanFromParameters(this,PARAMETER_VALIDATE_DESCRIPTIVE_METADATA);
  boolean validatePremis=PluginHelper.getBooleanFromParameters(this,PARAMETER_VALIDATE_PREMIS);
  boolean forceDescriptiveMetadataType=PluginHelper.getBooleanFromParameters(this,PARAMETER_FORCE_DESCRIPTIVE_METADATA_TYPE);
  String metadataType=PluginHelper.getStringFromParameters(this,PARAMETER_METADATA_TYPE);
  String metadataVersion=PluginHelper.getStringFromParameters(this,PARAMETER_METADATA_VERSION);
  Report pluginReport=PluginHelper.initPluginReport(this);
  List<ValidationReport> reports=new ArrayList<ValidationReport>();
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,pluginReport,jobPluginInfo,liteList,job);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false,job);
        PluginState state=PluginState.SUCCESS;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          ValidationReport report=ValidationUtils.isAIPMetadataValid(forceDescriptiveMetadataType,validateDescriptiveMetadata,metadataType,metadataVersion,validatePremis,model,aip.getId());
          reports.add(report);
          if (report.isValid()) {
            reportItem.setPluginState(state);
          }
 else {
            state=PluginState.FAILURE;
            reportItem.setPluginState(state).setHtmlPluginDetails(true).setPluginDetails(report.toHtml(false,false));
          }
        }
 catch (        RODAException mse) {
          state=PluginState.FAILURE;
          LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ mse.getMessage(),mse);
        }
        try {
          boolean notify=true;
          createEvent(aip,model,index,reportItem.getPluginState(),notify);
          jobPluginInfo.incrementObjectsProcessed(state);
          pluginReport.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
        }
 catch (        PluginException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException|AuthorizationDeniedException|NotFoundException|GenericException|RequestNotValidException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return pluginReport;
}",0.975674775074975
188491,"private Report exportMultiZip(List<AIP> aips,Path outputPath,Report report,ModelService model,IndexService index,StorageService storage,SimpleJobPluginInfo jobPluginInfo){
  for (  AIP aip : aips) {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    OutputStream os=null;
    String error=null;
    try {
      Path zip=outputPath.resolve(aip.getId() + ""String_Node_Str"");
      if (Files.exists(zip) && removeIfAlreadyExists) {
        Files.delete(zip);
      }
 else       if (Files.exists(zip) && !removeIfAlreadyExists) {
        error=""String_Node_Str"" + zip.toString() + ""String_Node_Str"";
      }
      if (error == null) {
        os=Files.newOutputStream(zip,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
        Directory directory=storage.getDirectory(ModelUtils.getAIPStoragePath(aip.getId()));
        ConsumesOutputStream cos=DownloadUtils.download(storage,directory);
        cos.consumeOutputStream(os);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
      error=e.getMessage();
    }
 finally {
      if (os != null) {
        IOUtils.closeQuietly(os);
      }
    }
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
    if (error != null) {
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + error);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
 else {
      reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
  }
  return report;
}","private Report exportMultiZip(List<AIP> aips,Path outputPath,Report report,ModelService model,IndexService index,StorageService storage,SimpleJobPluginInfo jobPluginInfo,Job job){
  for (  AIP aip : aips) {
    LOGGER.debug(""String_Node_Str"",aip.getId());
    OutputStream os=null;
    String error=null;
    try {
      Path zip=outputPath.resolve(aip.getId() + ""String_Node_Str"");
      if (Files.exists(zip) && removeIfAlreadyExists) {
        Files.delete(zip);
      }
 else       if (Files.exists(zip) && !removeIfAlreadyExists) {
        error=""String_Node_Str"" + zip.toString() + ""String_Node_Str"";
      }
      if (error == null) {
        os=Files.newOutputStream(zip,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
        Directory directory=storage.getDirectory(ModelUtils.getAIPStoragePath(aip.getId()));
        ConsumesOutputStream cos=DownloadUtils.download(storage,directory);
        cos.consumeOutputStream(os);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
      error=e.getMessage();
    }
 finally {
      if (os != null) {
        IOUtils.closeQuietly(os);
      }
    }
    Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
    if (error != null) {
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + error);
      jobPluginInfo.incrementObjectsProcessedWithFailure();
    }
 else {
      reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
    report.addReport(reportItem);
    PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
  }
  return report;
}",0.996629213483146
188492,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<AIP> aips=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList);
    Path outputPath=Paths.get(outputFolder);
    String error=null;
    try {
      if (!Files.exists(outputPath)) {
        Files.createDirectories(outputPath);
      }
      if (!Files.isWritable(outputPath)) {
        error=""String_Node_Str"" + outputPath.toString();
      }
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
      error=e.getMessage();
    }
    if (error == null && exportType == ExportType.ZIP) {
      report=exportMultiZip(aips,outputPath,report,model,index,storage,jobPluginInfo);
    }
 else     if (error == null && exportType == ExportType.FOLDER) {
      report=exportFolders(aips,outputPath,storage,model,index,report,jobPluginInfo);
    }
 else     if (error != null) {
      jobPluginInfo.incrementObjectsProcessedWithFailure(aips.size());
      report.setCompletionPercentage(100);
      report.setPluginState(PluginState.FAILURE);
      report.setPluginDetails(""String_Node_Str"" + error);
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> aips=PluginHelper.transformLitesIntoObjects(model,index,this,report,jobPluginInfo,liteList,job);
    Path outputPath=Paths.get(outputFolder);
    String error=null;
    try {
      if (!Files.exists(outputPath)) {
        Files.createDirectories(outputPath);
      }
      if (!Files.isWritable(outputPath)) {
        error=""String_Node_Str"" + outputPath.toString();
      }
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
      error=e.getMessage();
    }
    if (error == null && exportType == ExportType.ZIP) {
      report=exportMultiZip(aips,outputPath,report,model,index,storage,jobPluginInfo,job);
    }
 else     if (error == null && exportType == ExportType.FOLDER) {
      report=exportFolders(aips,outputPath,storage,model,index,report,jobPluginInfo,job);
    }
 else     if (error != null) {
      jobPluginInfo.incrementObjectsProcessedWithFailure(aips.size());
      report.setCompletionPercentage(100);
      report.setPluginState(PluginState.FAILURE);
      report.setPluginDetails(""String_Node_Str"" + error);
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException|AuthorizationDeniedException|NotFoundException|GenericException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}",0.957284961966062
188493,"private Report exportFolders(List<AIP> aips,Path outputPath,StorageService storage,ModelService model,IndexService index,Report report,SimpleJobPluginInfo jobPluginInfo){
  try {
    FileStorageService localStorage=new FileStorageService(Paths.get(outputFolder));
    for (    AIP aip : aips) {
      LOGGER.debug(""String_Node_Str"",aip.getId());
      String error=null;
      StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
      try {
        localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
      }
 catch (      AlreadyExistsException e) {
        if (removeIfAlreadyExists) {
          try {
            localStorage.deleteResource(DefaultStoragePath.parse(aip.getId()));
            localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
          }
 catch (          AlreadyExistsException e2) {
            error=""String_Node_Str"" + aipPath.toString();
          }
        }
 else {
          error=""String_Node_Str"" + aipPath.toString() + ""String_Node_Str"";
        }
      }
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
      if (error != null) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + error);
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
      try {
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,reportItem.getPluginState(),""String_Node_Str"",notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException e) {
    LOGGER.error(e.getMessage(),e);
  }
  return report;
}","private Report exportFolders(List<AIP> aips,Path outputPath,StorageService storage,ModelService model,IndexService index,Report report,SimpleJobPluginInfo jobPluginInfo,Job job){
  try {
    FileStorageService localStorage=new FileStorageService(Paths.get(outputFolder));
    for (    AIP aip : aips) {
      LOGGER.debug(""String_Node_Str"",aip.getId());
      String error=null;
      StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
      try {
        localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
      }
 catch (      AlreadyExistsException e) {
        if (removeIfAlreadyExists) {
          try {
            localStorage.deleteResource(DefaultStoragePath.parse(aip.getId()));
            localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
          }
 catch (          AlreadyExistsException e2) {
            error=""String_Node_Str"" + aipPath.toString();
          }
        }
 else {
          error=""String_Node_Str"" + aipPath.toString() + ""String_Node_Str"";
        }
      }
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
      if (error != null) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + error);
        jobPluginInfo.incrementObjectsProcessedWithFailure();
      }
 else {
        reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
        jobPluginInfo.incrementObjectsProcessedWithSuccess();
      }
      report.addReport(reportItem);
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,true,job);
      try {
        boolean notify=true;
        PluginHelper.createPluginEvent(this,aip.getId(),model,index,reportItem.getPluginState(),""String_Node_Str"",notify);
      }
 catch (      ValidationException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException e) {
    LOGGER.error(e.getMessage(),e);
  }
  return report;
}",0.9972677595628416
188494,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  String firstAIPId=""String_Node_Str"";
  BufferedWriter fileWriter=null;
  CSVPrinter csvFilePrinter=null;
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,null,jobPluginInfo,liteList);
    Path jobCSVTempFolder=getJobCSVTempFolder();
    Path csvTempFile=jobCSVTempFolder.resolve(UUID.randomUUID().toString() + ""String_Node_Str"");
    CSVFormat csvFileFormat=CSVFormat.DEFAULT.withRecordSeparator(""String_Node_Str"");
    fileWriter=Files.newBufferedWriter(csvTempFile);
    csvFilePrinter=new CSVPrinter(fileWriter,csvFileFormat);
    for (    AIP aip : list) {
      if (StringUtils.isNotBlank(firstAIPId)) {
        firstAIPId=aip.getId();
      }
      if (outputDataInformation && aip.getRepresentations() != null) {
        List<List<String>> dataInformation=InventoryReportPluginUtils.getDataInformation(fields,aip,model,storage);
        csvFilePrinter.printRecords(dataInformation);
      }
      if (outputDescriptiveMetadataInformation && aip.getDescriptiveMetadata() != null) {
        List<List<String>> dataInformation=InventoryReportPluginUtils.getDescriptiveMetadataInformation(fields,aip,model,storage);
        csvFilePrinter.printRecords(dataInformation);
      }
      if (otherMetadataTypes != null && otherMetadataTypes.size() > 0) {
        for (        String otherMetadataType : otherMetadataTypes) {
          List<List<String>> otherMetadataInformation=InventoryReportPluginUtils.getOtherMetadataInformation(fields,otherMetadataType,aip,model,storage);
          csvFilePrinter.printRecords(otherMetadataInformation);
        }
      }
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    LOGGER.debug(""String_Node_Str"",firstAIPId,list.size());
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(fileWriter);
    IOUtils.closeQuietly(csvFilePrinter);
  }
  return PluginHelper.initPluginReport(this);
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  String firstAIPId=""String_Node_Str"";
  BufferedWriter fileWriter=null;
  CSVPrinter csvFilePrinter=null;
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,liteList.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> list=PluginHelper.transformLitesIntoObjects(model,index,this,null,jobPluginInfo,liteList,job);
    Path jobCSVTempFolder=getJobCSVTempFolder();
    Path csvTempFile=jobCSVTempFolder.resolve(UUID.randomUUID().toString() + ""String_Node_Str"");
    CSVFormat csvFileFormat=CSVFormat.DEFAULT.withRecordSeparator(""String_Node_Str"");
    fileWriter=Files.newBufferedWriter(csvTempFile);
    csvFilePrinter=new CSVPrinter(fileWriter,csvFileFormat);
    for (    AIP aip : list) {
      if (StringUtils.isNotBlank(firstAIPId)) {
        firstAIPId=aip.getId();
      }
      if (outputDataInformation && aip.getRepresentations() != null) {
        List<List<String>> dataInformation=InventoryReportPluginUtils.getDataInformation(fields,aip,model,storage);
        csvFilePrinter.printRecords(dataInformation);
      }
      if (outputDescriptiveMetadataInformation && aip.getDescriptiveMetadata() != null) {
        List<List<String>> dataInformation=InventoryReportPluginUtils.getDescriptiveMetadataInformation(fields,aip,model,storage);
        csvFilePrinter.printRecords(dataInformation);
      }
      if (otherMetadataTypes != null && otherMetadataTypes.size() > 0) {
        for (        String otherMetadataType : otherMetadataTypes) {
          List<List<String>> otherMetadataInformation=InventoryReportPluginUtils.getOtherMetadataInformation(fields,otherMetadataType,aip,model,storage);
          csvFilePrinter.printRecords(otherMetadataInformation);
        }
      }
      jobPluginInfo.incrementObjectsProcessedWithSuccess();
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    LOGGER.debug(""String_Node_Str"",firstAIPId,list.size());
  }
 catch (  JobException|AuthorizationDeniedException|NotFoundException|GenericException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"");
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(fileWriter);
    IOUtils.closeQuietly(csvFilePrinter);
  }
  return PluginHelper.initPluginReport(this);
}",0.9724
188495,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  try {
    String username=PluginHelper.getJobUsername(this,index);
    List<AIP> aipList=PluginHelper.transformLitesIntoObjects(model,index,this,null,null,liteList);
    List<String> aipIds=aipList.stream().map(aip -> aip.getId()).collect(Collectors.toList());
    IndexResult<IndexedAIP> indexResults=index.find(IndexedAIP.class,new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_AIP_ID,aipIds)),Sorter.NONE,new Sublist(0,aipIds.size()));
    for (    IndexedAIP indexedAIP : indexResults.getResults()) {
      try {
        LOGGER.debug(""String_Node_Str"",indexedAIP.getId());
        if (indexedAIP.getLevel() == null || !indexedAIP.getLevel().trim().equalsIgnoreCase(""String_Node_Str"")) {
          AIP aip=model.retrieveAIP(indexedAIP.getId());
          aip.setParentId(newParent.getId());
          model.updateAIP(aip,username);
        }
 else {
          LOGGER.debug(""String_Node_Str"",indexedAIP.getLevel());
        }
      }
 catch (      RODAException e) {
        LOGGER.error(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str"",e);
      }
    }
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LiteOptionalWithCause> liteList) throws PluginException {
  try {
    String username=PluginHelper.getJobUsername(this,index);
    Job job=PluginHelper.getJob(this,model);
    List<AIP> aipList=PluginHelper.transformLitesIntoObjects(model,index,this,null,null,liteList,job);
    List<String> aipIds=aipList.stream().map(aip -> aip.getId()).collect(Collectors.toList());
    IndexResult<IndexedAIP> indexResults=index.find(IndexedAIP.class,new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_AIP_ID,aipIds)),Sorter.NONE,new Sublist(0,aipIds.size()));
    for (    IndexedAIP indexedAIP : indexResults.getResults()) {
      try {
        LOGGER.debug(""String_Node_Str"",indexedAIP.getId());
        if (indexedAIP.getLevel() == null || !indexedAIP.getLevel().trim().equalsIgnoreCase(""String_Node_Str"")) {
          AIP aip=model.retrieveAIP(indexedAIP.getId());
          aip.setParentId(newParent.getId());
          model.updateAIP(aip,username);
        }
 else {
          LOGGER.debug(""String_Node_Str"",indexedAIP.getLevel());
        }
      }
 catch (      RODAException e) {
        LOGGER.error(""String_Node_Str"" + indexedAIP.getId() + ""String_Node_Str"",e);
      }
    }
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}",0.9818451278251203
188496,"@SuppressWarnings(""String_Node_Str"") private <T extends IsRODAObject>void loadInternalPlugins(){
  Reflections reflections=new Reflections(RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Set<Class<? extends AbstractPlugin>> plugins=reflections.getSubTypesOf(AbstractPlugin.class);
  plugins.addAll(reflections.getSubTypesOf(AbstractAIPComponentsPlugin.class));
  for (  Class<? extends AbstractPlugin> plugin : plugins) {
    String name=plugin.getName();
    if (!Modifier.isAbstract(plugin.getModifiers()) && !blacklistedPlugins.contains(name)) {
      LOGGER.debug(""String_Node_Str"",name);
      try {
        Plugin<? extends IsRODAObject> p=(Plugin<?>)ClassLoaderUtility.createObject(plugin.getName());
        p.init();
        internalPluginChache.put(plugin.getName(),p);
        processAndCachePluginInformation(p);
      }
 catch (      ClassNotFoundException|InstantiationException|IllegalAccessException|PluginException|RuntimeException e) {
        LOGGER.error(""String_Node_Str"",plugin.getName(),e);
      }
    }
  }
  internalPluginStarted=true;
}","@SuppressWarnings(""String_Node_Str"") private <T extends IsRODAObject>void loadInternalPlugins(){
  Reflections reflections=new Reflections(RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Set<Class<? extends AbstractPlugin>> plugins=reflections.getSubTypesOf(AbstractPlugin.class);
  plugins.addAll(reflections.getSubTypesOf(AbstractAIPComponentsPlugin.class));
  for (  Class<? extends AbstractPlugin> plugin : plugins) {
    String name=plugin.getName();
    if (!Modifier.isAbstract(plugin.getModifiers()) && !blacklistedPlugins.contains(name)) {
      LOGGER.info(""String_Node_Str"",name);
      try {
        Plugin<? extends IsRODAObject> p=(Plugin<?>)ClassLoaderUtility.createObject(plugin.getName());
        p.init();
        internalPluginChache.put(plugin.getName(),p);
        processAndCachePluginInformation(p);
      }
 catch (      ClassNotFoundException|InstantiationException|IllegalAccessException|PluginException|RuntimeException e) {
        LOGGER.error(""String_Node_Str"",plugin.getName(),e);
      }
    }
  }
  internalPluginStarted=true;
}",0.9960404751429828
188497,"public void run(){
  LOGGER.debug(""String_Node_Str"");
  blacklistedPlugins=RodaCoreFactory.getRodaConfigurationAsList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  loadPlugins();
  LOGGER.debug(""String_Node_Str"",jarPluginCache.size());
  for (  Path jarFile : jarPluginCache.keySet()) {
    List<Plugin<?>> plugins=jarPluginCache.get(jarFile).plugins;
    if (!plugins.isEmpty()) {
      for (      Plugin<?> plugin : plugins) {
        LOGGER.debug(""String_Node_Str"",jarFile.getFileName());
        LOGGER.debug(""String_Node_Str"",plugin.getName(),plugin.getVersion(),plugin.getDescription());
      }
    }
  }
}","public void run(){
  LOGGER.debug(""String_Node_Str"");
  loadPlugins();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",jarPluginCache.size());
    for (    Path jarFile : jarPluginCache.keySet()) {
      List<Plugin<?>> plugins=jarPluginCache.get(jarFile).plugins;
      if (!plugins.isEmpty()) {
        for (        Plugin<?> plugin : plugins) {
          LOGGER.debug(""String_Node_Str"",jarFile.getFileName());
          LOGGER.debug(""String_Node_Str"",plugin.getName(),plugin.getVersion(),plugin.getDescription());
        }
      }
    }
  }
}",0.8211586901763224
188498,"private void loadPlugins(){
  loadExternalPlugins();
  if (!internalPluginStarted) {
    loadInternalPlugins();
  }
}","private void loadPlugins(){
  blacklistedPlugins=RodaCoreFactory.getRodaConfigurationAsList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (Files.exists(RODA_PLUGINS_PATH) && Files.isDirectory(RODA_PLUGINS_PATH)) {
    loadExternalPlugins();
  }
  if (!internalPluginStarted) {
    loadInternalPlugins();
  }
}",0.5306122448979592
188499,"/** 
 * Constructs a new   {@link PluginManager}.
 * @throws PluginManagerException
 */
private PluginManager() throws PluginManagerException {
  LOGGER.debug(""String_Node_Str"");
  int timeInSeconds=RodaCoreFactory.getRodaConfiguration().getInt(""String_Node_Str"");
  this.loadPluginsTimer=new Timer(""String_Node_Str"",true);
  this.loadPluginsTimer.schedule(new SearchPluginsTask(),1000,timeInSeconds * 1000);
  LOGGER.info(""String_Node_Str"",getClass().getSimpleName());
}","/** 
 * Constructs a new   {@link PluginManager}.
 * @throws PluginManagerException
 */
private PluginManager() throws PluginManagerException {
  loadPlugins();
  LOGGER.debug(""String_Node_Str"");
  int timeInSeconds=RodaCoreFactory.getRodaConfiguration().getInt(""String_Node_Str"");
  this.loadPluginsTimer=new Timer(""String_Node_Str"",true);
  this.loadPluginsTimer.schedule(new SearchPluginsTask(),timeInSeconds * 1000,timeInSeconds * 1000);
  LOGGER.info(""String_Node_Str"",getClass().getSimpleName());
}",0.966153846153846
188500,"private void loadExternalPlugins(){
  try {
    List<URL> sharedJarURLs=getSharedJarURLs(RODA_PLUGINS_SHARED_PATH);
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(RODA_PLUGINS_PATH,""String_Node_Str"")){
      Iterator<Path> iterator=stream.iterator();
      if (iterator.hasNext()) {
        LOGGER.error(""String_Node_Str"",RODA_PLUGINS_PATH,RodaConstants.CORE_PLUGINS_SHARED_FOLDER,RodaConstants.CORE_PLUGINS_DEACTIVATED_FOLDER);
        iterator.forEachRemaining(path -> LOGGER.error(""String_Node_Str"",path));
      }
    }
     try (DirectoryStream<Path> pluginsFolders=Files.newDirectoryStream(RODA_PLUGINS_PATH,path -> Files.isDirectory(path) && !RodaConstants.CORE_PLUGINS_SHARED_FOLDER.equals(path.getFileName().toString()) && !RodaConstants.CORE_PLUGINS_DEACTIVATED_FOLDER.equals(path.getFileName().toString()))){
      for (      Path pluginFolder : pluginsFolders) {
        LOGGER.debug(""String_Node_Str"",pluginFolder);
        List<Path> pluginJarFiles=new ArrayList<>();
        List<URL> pluginJarURLs=new ArrayList<>();
        try (DirectoryStream<Path> jarsStream=Files.newDirectoryStream(pluginFolder,""String_Node_Str"")){
          for (          Path jarFile : jarsStream) {
            LOGGER.debug(""String_Node_Str"",jarFile);
            pluginJarFiles.add(jarFile);
            pluginJarURLs.add(jarFile.toUri().toURL());
          }
        }
 catch (        NoSuchFileException e) {
        }
        pluginJarURLs.addAll(sharedJarURLs);
        URL[] jars=pluginJarURLs.toArray(new URL[pluginJarURLs.size()]);
        for (        Path jarFile : pluginJarFiles) {
          processJar(jarFile,jars);
        }
      }
    }
   }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void loadExternalPlugins(){
  try {
    List<URL> sharedJarURLs=getSharedJarURLs(RODA_PLUGINS_SHARED_PATH);
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(RODA_PLUGINS_PATH,""String_Node_Str"")){
      Iterator<Path> iterator=stream.iterator();
      if (iterator.hasNext()) {
        LOGGER.error(""String_Node_Str"",RODA_PLUGINS_PATH,RodaConstants.CORE_PLUGINS_SHARED_FOLDER,RodaConstants.CORE_PLUGINS_DISABLED_FOLDER);
        iterator.forEachRemaining(path -> LOGGER.error(""String_Node_Str"",path));
      }
    }
     try (DirectoryStream<Path> pluginsFolders=Files.newDirectoryStream(RODA_PLUGINS_PATH,path -> Files.isDirectory(path) && !RodaConstants.CORE_PLUGINS_SHARED_FOLDER.equals(path.getFileName().toString()) && !RodaConstants.CORE_PLUGINS_DISABLED_FOLDER.equals(path.getFileName().toString()))){
      for (      Path pluginFolder : pluginsFolders) {
        LOGGER.debug(""String_Node_Str"",pluginFolder);
        List<Path> pluginJarFiles=new ArrayList<>();
        List<URL> pluginJarURLs=new ArrayList<>();
        try (DirectoryStream<Path> jarsStream=Files.newDirectoryStream(pluginFolder,""String_Node_Str"")){
          for (          Path jarFile : jarsStream) {
            LOGGER.debug(""String_Node_Str"",jarFile);
            pluginJarFiles.add(jarFile);
            pluginJarURLs.add(jarFile.toUri().toURL());
          }
        }
 catch (        NoSuchFileException e) {
        }
        pluginJarURLs.addAll(sharedJarURLs);
        URL[] jars=pluginJarURLs.toArray(new URL[pluginJarURLs.size()]);
        for (        Path jarFile : pluginJarFiles) {
          processJar(jarFile,jars);
        }
      }
    }
   }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.993663594470046
188501,"@Override public void onClick(ClickEvent event){
  RestUtils.requestCSVExport(getClassToReturn(),getFilter(),dataProvider.getSorter(),dataProvider.getSublist(),getFacets(),getJustActive(),false,notNullSummary + ""String_Node_Str"");
}","@Override public void onClick(ClickEvent event){
  for (  Map.Entry<String,FacetParameter> entry : getFacets().getParameters().entrySet()) {
    entry.getValue().getValues().clear();
  }
  update();
}",0.2962962962962963
188502,"public AsyncTableCell(final Class<T> classToReturn,final Filter filter,final boolean justActive,final Facets facets,final String summary,final boolean selectable,final int initialPageSize,final int pageSizeIncrement,final O object){
  super();
  this.classToReturn=classToReturn;
  this.initialPageSize=initialPageSize;
  this.pageSizeIncrement=pageSizeIncrement;
  this.object=object;
  final String notNullSummary=StringUtils.isNotBlank(summary) ? summary : ""String_Node_Str"" + Random.nextInt(1000);
  this.filter=filter;
  this.justActive=justActive;
  this.facets=facets;
  this.selectable=selectable;
  display=new AccessibleCellTable<T>(getInitialPageSize(),(MyCellTableResources)GWT.create(MyCellTableResources.class),getKeyProvider(),summary);
  display.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED);
  display.setLoadingIndicator(new HTML(HtmlSnippetUtils.LOADING));
  configure(display);
  this.dataProvider=new MyAsyncDataProvider<T>(display,new IndexResultDataProvider<T>(){
    @Override public void getData(    Sublist sublist,    Sorter sorter,    final AsyncCallback<IndexResult<T>> callback){
      AsyncTableCell.this.getData(AsyncTableCell.this.getFilter(),sublist,sorter,new AsyncCallback<IndexResult<T>>(){
        @Override public void onFailure(        Throwable caught){
          callback.onFailure(caught);
        }
        @Override public void onSuccess(        IndexResult<T> result){
          setResult(result);
          callback.onSuccess(result);
        }
      }
);
    }
    @Override public Sorter getSorter(    ColumnSortList columnSortList){
      return AsyncTableCell.this.getSorter(columnSortList);
    }
  }
){
    @Override protected void fireChangeEvent(    IndexResult<T> result){
      ValueChangeEvent.fire(AsyncTableCell.this,result);
    }
  }
;
  dataProvider.addDataDisplay(display);
  resultsPager=new AccessibleSimplePager(AccessibleSimplePager.TextLocation.LEFT,(SimplePager.Resources)GWT.create(SimplePager.Resources.class),false,initialPageSize,false,false,(SimplePager.ImageButtonsConstants)GWT.create(SimplePager.ImageButtonsConstants.class));
  resultsPager.setDisplay(display);
  pageSizePager=new RodaPageSizePager(getPageSizePagerIncrement());
  pageSizePager.setDisplay(display);
  csvDownloadButton=new Button(messages.tableDownloadCSV());
  csvDownloadButton.addStyleName(""String_Node_Str"");
  createSelectAllPanel();
  add(selectAllPanel);
  add(display);
  add(resultsPager);
  add(pageSizePager);
  add(csvDownloadButton);
  csvDownloadButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RestUtils.requestCSVExport(getClassToReturn(),getFilter(),dataProvider.getSorter(),dataProvider.getSublist(),getFacets(),getJustActive(),false,notNullSummary + ""String_Node_Str"");
    }
  }
);
  selectionModel=new SingleSelectionModel<>(getKeyProvider());
  Handler<T> selectionEventManager=getSelectionEventManager();
  if (selectionEventManager != null) {
    display.setSelectionModel(selectionModel,selectionEventManager);
  }
 else {
    display.setSelectionModel(selectionModel);
  }
  columnSortHandler=new AsyncHandler(display);
  display.addColumnSortHandler(columnSortHandler);
  addStyleName(""String_Node_Str"");
  resultsPager.addStyleName(""String_Node_Str"");
  pageSizePager.addStyleName(""String_Node_Str"");
  display.addStyleName(""String_Node_Str"");
  addValueChangeHandler(new ValueChangeHandler<IndexResult<T>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<T>> event){
      selected=new HashSet<T>();
      hideSelectAllPanel();
    }
  }
);
  Label emptyInfo=new Label(messages.noItemsToDisplay());
  display.setEmptyTableWidget(emptyInfo);
}","public AsyncTableCell(final Class<T> classToReturn,final Filter filter,final boolean justActive,final Facets facets,final String summary,final boolean selectable,final int initialPageSize,final int pageSizeIncrement,final O object){
  super();
  this.classToReturn=classToReturn;
  this.initialPageSize=initialPageSize;
  this.pageSizeIncrement=pageSizeIncrement;
  this.object=object;
  final String notNullSummary=StringUtils.isNotBlank(summary) ? summary : ""String_Node_Str"" + Random.nextInt(1000);
  this.filter=filter;
  this.justActive=justActive;
  this.facets=facets;
  this.selectable=selectable;
  display=new AccessibleCellTable<T>(getInitialPageSize(),(MyCellTableResources)GWT.create(MyCellTableResources.class),getKeyProvider(),summary);
  display.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED);
  display.setLoadingIndicator(new HTML(HtmlSnippetUtils.LOADING));
  configure(display);
  this.dataProvider=new MyAsyncDataProvider<T>(display,new IndexResultDataProvider<T>(){
    @Override public void getData(    Sublist sublist,    Sorter sorter,    final AsyncCallback<IndexResult<T>> callback){
      AsyncTableCell.this.getData(AsyncTableCell.this.getFilter(),sublist,sorter,new AsyncCallback<IndexResult<T>>(){
        @Override public void onFailure(        Throwable caught){
          callback.onFailure(caught);
        }
        @Override public void onSuccess(        IndexResult<T> result){
          setResult(result);
          callback.onSuccess(result);
        }
      }
);
    }
    @Override public Sorter getSorter(    ColumnSortList columnSortList){
      return AsyncTableCell.this.getSorter(columnSortList);
    }
  }
){
    @Override protected void fireChangeEvent(    IndexResult<T> result){
      ValueChangeEvent.fire(AsyncTableCell.this,result);
    }
  }
;
  dataProvider.addDataDisplay(display);
  resultsPager=new AccessibleSimplePager(AccessibleSimplePager.TextLocation.LEFT,(SimplePager.Resources)GWT.create(SimplePager.Resources.class),false,initialPageSize,false,false,(SimplePager.ImageButtonsConstants)GWT.create(SimplePager.ImageButtonsConstants.class));
  resultsPager.setDisplay(display);
  pageSizePager=new RodaPageSizePager(getPageSizePagerIncrement());
  pageSizePager.setDisplay(display);
  csvDownloadButton=new Button(messages.tableDownloadCSV());
  csvDownloadButton.addStyleName(""String_Node_Str"");
  createSelectAllPanel();
  add(selectAllPanel);
  add(display);
  add(resultsPager);
  add(pageSizePager);
  add(csvDownloadButton);
  csvDownloadButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      RestUtils.requestCSVExport(getClassToReturn(),getFilter(),dataProvider.getSorter(),dataProvider.getSublist(),getFacets(),getJustActive(),false,notNullSummary + ""String_Node_Str"");
    }
  }
);
  selectionModel=new SingleSelectionModel<>(getKeyProvider());
  Handler<T> selectionEventManager=getSelectionEventManager();
  if (selectionEventManager != null) {
    display.setSelectionModel(selectionModel,selectionEventManager);
  }
 else {
    display.setSelectionModel(selectionModel);
  }
  columnSortHandler=new AsyncHandler(display);
  display.addColumnSortHandler(columnSortHandler);
  addStyleName(""String_Node_Str"");
  resultsPager.addStyleName(""String_Node_Str"");
  pageSizePager.addStyleName(""String_Node_Str"");
  display.addStyleName(""String_Node_Str"");
  addValueChangeHandler(new ValueChangeHandler<IndexResult<T>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<T>> event){
      selected=new HashSet<T>();
      hideSelectAllPanel();
    }
  }
);
  updateEmptyTableWidget();
}",0.9872317305080142
188503,"public void refresh(){
  selected=new HashSet<T>();
  hideSelectAllPanel();
  display.setVisibleRangeAndClearData(new Range(0,getInitialPageSize()),true);
  getSelectionModel().clear();
}","public void refresh(){
  selected=new HashSet<T>();
  hideSelectAllPanel();
  display.setVisibleRangeAndClearData(new Range(0,getInitialPageSize()),true);
  getSelectionModel().clear();
  updateEmptyTableWidget();
}",0.9303482587064676
188504,"private void clear(){
  justActive=true;
  browseItemHeader.setVisible(false);
  browseTitle.setVisible(false);
  browseDescription.setVisible(false);
  HTMLPanel itemIconHtmlPanel=DescriptionLevelUtils.getTopIconHTMLPanel();
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(messages.browseLoading());
  itemTitle.removeStyleName(""String_Node_Str"");
  itemIcon.getParent().removeStyleName(""String_Node_Str"");
  itemId.setText(""String_Node_Str"");
  itemId.removeStyleName(""String_Node_Str"");
  sipId.setText(""String_Node_Str"");
  sipId.removeStyleName(""String_Node_Str"");
  ingestJobId.clear();
  ingestJobId.removeStyleName(""String_Node_Str"");
  breadcrumb.setVisible(false);
  itemMetadata.setVisible(false);
  itemMetadata.clear();
  removeHandlerRegistrations();
  newDescriptiveMetadata.setVisible(false);
  viewingTop=false;
  searchable=false;
  representationsPanelTitle.setVisible(false);
  representationsSearchPanel.setVisible(false);
  representationsSearchPanel.clearSearchInputBox();
  representationsList.setVisible(false);
  fondsPanelTitle.setVisible(false);
  searchPanel.setVisible(false);
  searchPanel.clearSearchInputBox();
  aipList.setVisible(false);
  appraisalSidebar.setVisible(false);
  preservationSidebar.setVisible(false);
  actionsSidebar.setVisible(false);
  searchSection.setVisible(false);
  createItem.setVisible(false);
  moveItem.setVisible(false);
  editPermissions.setVisible(false);
  remove.setVisible(false);
  newRepresentation.setVisible(false);
  for (  AIPState state : AIPState.values()) {
    this.removeStyleName(state.toString().toLowerCase());
  }
}","private void clear(){
  justActive=true;
  browseItemHeader.setVisible(false);
  browseTitle.setVisible(false);
  browseDescription.setVisible(false);
  HTMLPanel itemIconHtmlPanel=DescriptionLevelUtils.getTopIconHTMLPanel();
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(messages.browseLoading());
  itemTitle.removeStyleName(""String_Node_Str"");
  itemIcon.getParent().removeStyleName(""String_Node_Str"");
  itemId.setText(""String_Node_Str"");
  itemId.removeStyleName(""String_Node_Str"");
  sipId.setText(""String_Node_Str"");
  sipId.removeStyleName(""String_Node_Str"");
  ingestJobId.clear();
  ingestJobId.removeStyleName(""String_Node_Str"");
  breadcrumb.setVisible(false);
  itemMetadata.setVisible(false);
  itemMetadata.clear();
  removeHandlerRegistrations();
  newDescriptiveMetadata.setVisible(false);
  viewingTop=false;
  searchable=false;
  representationsPanelTitle.setVisible(false);
  representationsSearchPanel.setVisible(false);
  representationsSearchPanel.clearSearchInputBox();
  representationsList.setVisible(false);
  fondsPanelTitle.setVisible(false);
  searchPanel.setVisible(false);
  searchPanel.clearSearchInputBox();
  aipList.setVisible(false);
  appraisalSidebar.setVisible(false);
  preservationSidebar.setVisible(false);
  actionsSidebar.setVisible(false);
  searchSection.setVisible(false);
  createItem.setVisible(false);
  moveItem.setVisible(false);
  editPermissions.setVisible(false);
  remove.setVisible(false);
  newRepresentation.setVisible(false);
  for (  AIPState state : AIPState.values()) {
    this.removeStyleName(state.toString().toLowerCase());
  }
  FACETS=new Facets(new SimpleFacetParameter(RodaConstants.AIP_LEVEL),new SimpleFacetParameter(RodaConstants.AIP_HAS_REPRESENTATIONS));
}",0.9607616849394114
188505,"/** 
 * The   {@link List} of {@link AttributeCheck} for this result.
 * @param present default value for present attribute.
 * @return a {@link List<AttributeCheck>}.
 */
List<AttributeCheck> attributeChecks(final boolean present){
  final List<AttributeCheck> checks=new ArrayList<>();
  if (checkMimetype()) {
    checks.add(new AttributeCheck(MIMETYPE_NAME,fileFormat.getMimeType(),present,new SimpleFilterParameter(RodaConstants.FORMAT_MIMETYPES,fileFormat.getMimeType())));
  }
  if (checkPronom()) {
    checks.add(new AttributeCheck(PRONOM_NAME,fileFormat.getPronom(),present,new SimpleFilterParameter(RodaConstants.FORMAT_PRONOMS,fileFormat.getPronom())));
  }
  if (checkExtension()) {
    checks.add(new AttributeCheck(EXTENSION_NAME,fileFormat.getExtension(),present,new SimpleFilterParameter(RodaConstants.FORMAT_EXTENSIONS,fileFormat.getExtension())));
  }
  if (checkFormatDesignation()) {
    final FilterParameter mainName=new SimpleFilterParameter(RodaConstants.FORMAT_NAME,fileFormat.getFormatDesignationName());
    final FilterParameter alternativeName=new SimpleFilterParameter(RodaConstants.FORMAT_ALTERNATIVE_DESIGNATIONS,fileFormat.getFormatDesignationName());
    final FilterParameter name=new OrFiltersParameters(""String_Node_Str"",Arrays.asList(mainName,alternativeName));
    final FilterParameter version=new SimpleFilterParameter(RodaConstants.FORMAT_VERSIONS,fileFormat.getFormatDesignationVersion());
    final FilterParameter nameAndVersion=new AndFiltersParameters(""String_Node_Str"",Arrays.asList(name,version));
    final FilterParameter nameAndVersionOrName=new OrFiltersParameters(""String_Node_Str"",Arrays.asList(nameAndVersion,name));
    final String value=String.format(""String_Node_Str"",fileFormat.getFormatDesignationName(),fileFormat.getFormatDesignationVersion());
    checks.add(new AttributeCheck(FORMAT_DESIGNATION_NAME,value,present,nameAndVersionOrName));
  }
  return checks;
}","/** 
 * The   {@link List} of {@link AttributeCheck} for this result.
 * @param present default value for present attribute.
 * @return a {@link List<AttributeCheck>}.
 */
List<AttributeCheck> attributeChecks(final boolean present){
  final List<AttributeCheck> checks=new ArrayList<>();
  if (checkMimetype()) {
    checks.add(new AttributeCheck(MIMETYPE_NAME,fileFormat.getMimeType(),present,new SimpleFilterParameter(RodaConstants.FORMAT_MIMETYPES,fileFormat.getMimeType())));
  }
  if (checkPronom()) {
    checks.add(new AttributeCheck(PRONOM_NAME,fileFormat.getPronom(),present,new SimpleFilterParameter(RodaConstants.FORMAT_PRONOMS,fileFormat.getPronom())));
  }
  if (checkExtension()) {
    checks.add(new AttributeCheck(EXTENSION_NAME,fileFormat.getExtension(),present,new SimpleFilterParameter(RodaConstants.FORMAT_EXTENSIONS,fileFormat.getExtension())));
  }
  if (checkFormatDesignation()) {
    final FilterParameter mainName=new SimpleFilterParameter(RodaConstants.FORMAT_NAME,fileFormat.getFormatDesignationName());
    final FilterParameter alternativeName=new SimpleFilterParameter(RodaConstants.FORMAT_ALTERNATIVE_DESIGNATIONS,fileFormat.getFormatDesignationName());
    final FilterParameter name=new OrFiltersParameters(Arrays.asList(mainName,alternativeName));
    final FilterParameter version=new SimpleFilterParameter(RodaConstants.FORMAT_VERSIONS,fileFormat.getFormatDesignationVersion());
    final FilterParameter nameAndVersion=new AndFiltersParameters(Arrays.asList(name,version));
    final FilterParameter nameAndVersionOrName=new OrFiltersParameters(Arrays.asList(nameAndVersion,name));
    final String value=String.format(""String_Node_Str"",fileFormat.getFormatDesignationName(),fileFormat.getFormatDesignationVersion());
    checks.add(new AttributeCheck(FORMAT_DESIGNATION_NAME,value,present,nameAndVersionOrName));
  }
  return checks;
}",0.985796948974224
188506,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  String xmlText=metadataXML.getText();
  if (inXML) {
    updateMetadataOnServer(xmlText);
  }
 else {
    BrowserService.Util.getInstance().retrieveDescriptiveMetadataPreview(supportedBundle,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      String preview){
        updateMetadataOnServer(preview);
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  Window.scrollTo(0,0);
  String xmlText=metadataXML.getText();
  if (inXML) {
    updateMetadataOnServer(xmlText);
  }
 else {
    BrowserService.Util.getInstance().retrieveDescriptiveMetadataPreview(supportedBundle,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      String preview){
        updateMetadataOnServer(preview);
      }
    }
);
  }
}",0.978494623655914
188507,"public String renameTransferredResource(TransferredResource resource,String newName,boolean replaceExisting,boolean reindexResources) throws AlreadyExistsException, GenericException, IsStillUpdatingException, NotFoundException {
  if (Files.exists(Paths.get(resource.getFullPath()))) {
    Path resourcePath=Paths.get(resource.getFullPath());
    FSUtils.move(resourcePath,resourcePath.getParent().resolve(newName),replaceExisting);
    if (reindexResources) {
      if (resource.getParentUUID() != null) {
        try {
          TransferredResource parent=index.retrieve(TransferredResource.class,resource.getParentUUID());
          updateTransferredResources(Optional.of(parent.getRelativePath()),true);
        }
 catch (        GenericException|NotFoundException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else {
        updateTransferredResources(Optional.empty(),true);
      }
    }
    Path relativeToBase=basePath.relativize(resourcePath.getParent().resolve(newName));
    return UUID.nameUUIDFromBytes(relativeToBase.toString().getBytes()).toString();
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}","public String renameTransferredResource(TransferredResource resource,String newName,boolean replaceExisting,boolean reindexResources) throws AlreadyExistsException, GenericException, IsStillUpdatingException, NotFoundException {
  if (Files.exists(Paths.get(resource.getFullPath()))) {
    Path resourcePath=Paths.get(resource.getFullPath());
    Path newPath=resourcePath.getParent().resolve(newName);
    FSUtils.move(resourcePath,newPath,replaceExisting);
    if (reindexResources) {
      if (resource.getParentUUID() != null) {
        try {
          TransferredResource parent=index.retrieve(TransferredResource.class,resource.getParentUUID());
          if (parent != null) {
            updateTransferredResources(Optional.of(parent.getRelativePath()),true);
          }
 else {
            updateTransferredResources(Optional.empty(),true);
          }
        }
 catch (        GenericException|NotFoundException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else {
        updateTransferredResources(Optional.empty(),true);
      }
    }
    Path relativeToBase=basePath.relativize(resourcePath.getParent().resolve(newName));
    return UUID.nameUUIDFromBytes(relativeToBase.toString().getBytes()).toString();
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}",0.9064398541919806
188508,"/** 
 * Moves a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws NotFoundException
 */
public static void move(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException, NotFoundException {
  if (!replaceExisting && Files.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    Files.createDirectories(targetPath.getParent());
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
  if (Files.isDirectory(sourcePath)) {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    DirectoryNotEmptyException e) {
      LOGGER.debug(""String_Node_Str"",sourcePath,targetPath);
      moveRecursively(sourcePath,targetPath,replaceExisting);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ targetPath,e);
    }
  }
 else {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    NoSuchFileException e) {
      throw new NotFoundException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}","/** 
 * Moves a directory/file from one path to another
 * @param sourcePath source path
 * @param targetPath target path
 * @param replaceExisting true if the target directory/file should be replaced if it already exists; false otherwise
 * @throws AlreadyExistsException
 * @throws GenericException
 * @throws NotFoundException
 */
public static void move(final Path sourcePath,final Path targetPath,boolean replaceExisting) throws AlreadyExistsException, GenericException, NotFoundException {
  if (!replaceExisting && Files.exists(targetPath)) {
    throw new AlreadyExistsException(""String_Node_Str"" + targetPath);
  }
  try {
    Files.createDirectories(targetPath.getParent());
  }
 catch (  FileAlreadyExistsException e) {
  }
catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  CopyOption[] copyOptions=replaceExisting ? new CopyOption[]{StandardCopyOption.REPLACE_EXISTING} : new CopyOption[]{};
  if (Files.isDirectory(sourcePath)) {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    DirectoryNotEmptyException e) {
      LOGGER.debug(""String_Node_Str"",sourcePath,targetPath);
      moveRecursively(sourcePath,targetPath,replaceExisting);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ targetPath,e);
    }
  }
 else {
    try {
      Files.move(sourcePath,targetPath,copyOptions);
    }
 catch (    NoSuchFileException e) {
      throw new NotFoundException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new GenericException(""String_Node_Str"",e);
    }
  }
}",0.9859856742447836
188509,"public static List<SupportedMetadataTypeBundle> retrieveSupportedMetadata(User user,IndexedAIP aip,IndexedRepresentation representation,Locale locale) throws GenericException {
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  List<String> types=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.UI_BROWSER_METADATA_DESCRIPTIVE_TYPES));
  List<SupportedMetadataTypeBundle> supportedMetadata=new ArrayList<>();
  if (types != null) {
    for (    String id : types) {
      String type=id;
      String version=null;
      if (id.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
        version=id.substring(id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,id.length());
        type=id.substring(0,id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
      }
      String key=RodaConstants.I18N_UI_BROWSE_METADATA_DESCRIPTIVE_TYPE_PREFIX + type;
      if (version != null) {
        key+=RodaConstants.METADATA_VERSION_SEPARATOR + version;
      }
      String label=messages.getTranslation(key,type);
      InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.METADATA_TEMPLATE_FOLDER + ""String_Node_Str"" + ((version != null) ? type + RodaConstants.METADATA_VERSION_SEPARATOR + version : type)+ RodaConstants.METADATA_TEMPLATE_EXTENSION);
      String template=null;
      Set<MetadataValue> values=null;
      if (templateStream != null) {
        try {
          template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
          values=ServerTools.transform(template);
          for (          MetadataValue mv : values) {
            String generator=mv.get(""String_Node_Str"");
            if (generator != null && generator.length() > 0) {
              String value=null;
              if (representation != null) {
                value=ServerTools.autoGenerateRepresentationValue(representation,user,generator);
              }
 else {
                value=ServerTools.autoGenerateAIPValue(aip,user,generator);
              }
              if (value != null) {
                mv.set(""String_Node_Str"",value);
              }
            }
            String labels=mv.get(""String_Node_Str"");
            String labelI18N=mv.get(""String_Node_Str"");
            if (labels != null && labelI18N != null) {
              Map<String,String> labelsMaps=JsonUtils.getMapFromJson(labels);
              try {
                labelsMaps.put(locale.toString(),RodaCoreFactory.getI18NMessages(locale).getTranslation(labelI18N));
              }
 catch (              MissingResourceException e) {
                LOGGER.debug(""String_Node_Str"",labelI18N);
              }
              labels=JsonUtils.getJsonFromObject(labelsMaps);
              mv.set(""String_Node_Str"",labels);
            }
            String i18nPrefix=mv.get(""String_Node_Str"");
            if (i18nPrefix != null) {
              Map<String,String> terms=messages.getTranslations(i18nPrefix,String.class,false);
              if (terms.size() > 0) {
                try {
                  String options=mv.get(""String_Node_Str"");
                  List<String> optionsList=JsonUtils.getListFromJson(options,String.class);
                  if (optionsList != null) {
                    Map<String,Map<String,String>> i18nMap=new HashMap<String,Map<String,String>>();
                    for (int i=0; i < optionsList.size(); i++) {
                      String value=optionsList.get(i);
                      String translation=terms.get(i18nPrefix + ""String_Node_Str"" + value);
                      if (translation == null) {
                        translation=value;
                      }
                      Map<String,String> term=new HashMap<String,String>();
                      term.put(locale.toString(),translation);
                      i18nMap.put(value,term);
                    }
                    mv.set(""String_Node_Str"",JsonUtils.getJsonFromObject(i18nMap));
                  }
                }
 catch (                MissingResourceException e) {
                  LOGGER.error(e.getMessage(),e);
                }
              }
            }
          }
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
      supportedMetadata.add(new SupportedMetadataTypeBundle(id,type,version,label,template,values));
    }
  }
  return supportedMetadata;
}","public static List<SupportedMetadataTypeBundle> retrieveSupportedMetadata(User user,IndexedAIP aip,IndexedRepresentation representation,Locale locale) throws GenericException {
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  List<String> types=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.UI_BROWSER_METADATA_DESCRIPTIVE_TYPES));
  List<SupportedMetadataTypeBundle> supportedMetadata=new ArrayList<>();
  if (types != null) {
    for (    String id : types) {
      String type=id;
      String version=null;
      if (id.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
        version=id.substring(id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,id.length());
        type=id.substring(0,id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
      }
      String key=RodaConstants.I18N_UI_BROWSE_METADATA_DESCRIPTIVE_TYPE_PREFIX + type;
      if (version != null) {
        key+=RodaConstants.METADATA_VERSION_SEPARATOR + version.toLowerCase();
      }
      String label=messages.getTranslation(key,type);
      InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.METADATA_TEMPLATE_FOLDER + ""String_Node_Str"" + ((version != null) ? type + RodaConstants.METADATA_VERSION_SEPARATOR + version : type)+ RodaConstants.METADATA_TEMPLATE_EXTENSION);
      String template=null;
      Set<MetadataValue> values=null;
      if (templateStream != null) {
        try {
          template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
          values=ServerTools.transform(template);
          for (          MetadataValue mv : values) {
            String generator=mv.get(""String_Node_Str"");
            if (generator != null && generator.length() > 0) {
              String value=null;
              if (representation != null) {
                value=ServerTools.autoGenerateRepresentationValue(representation,user,generator);
              }
 else {
                value=ServerTools.autoGenerateAIPValue(aip,user,generator);
              }
              if (value != null) {
                mv.set(""String_Node_Str"",value);
              }
            }
            String labels=mv.get(""String_Node_Str"");
            String labelI18N=mv.get(""String_Node_Str"");
            if (labels != null && labelI18N != null) {
              Map<String,String> labelsMaps=JsonUtils.getMapFromJson(labels);
              try {
                labelsMaps.put(locale.toString(),RodaCoreFactory.getI18NMessages(locale).getTranslation(labelI18N));
              }
 catch (              MissingResourceException e) {
                LOGGER.debug(""String_Node_Str"",labelI18N);
              }
              labels=JsonUtils.getJsonFromObject(labelsMaps);
              mv.set(""String_Node_Str"",labels);
            }
            String i18nPrefix=mv.get(""String_Node_Str"");
            if (i18nPrefix != null) {
              Map<String,String> terms=messages.getTranslations(i18nPrefix,String.class,false);
              if (terms.size() > 0) {
                try {
                  String options=mv.get(""String_Node_Str"");
                  List<String> optionsList=JsonUtils.getListFromJson(options,String.class);
                  if (optionsList != null) {
                    Map<String,Map<String,String>> i18nMap=new HashMap<String,Map<String,String>>();
                    for (int i=0; i < optionsList.size(); i++) {
                      String value=optionsList.get(i);
                      String translation=terms.get(i18nPrefix + ""String_Node_Str"" + value);
                      if (translation == null) {
                        translation=value;
                      }
                      Map<String,String> term=new HashMap<String,String>();
                      term.put(locale.toString(),translation);
                      i18nMap.put(value,term);
                    }
                    mv.set(""String_Node_Str"",JsonUtils.getJsonFromObject(i18nMap));
                  }
                }
 catch (                MissingResourceException e) {
                  LOGGER.error(e.getMessage(),e);
                }
              }
            }
          }
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
      supportedMetadata.add(new SupportedMetadataTypeBundle(id,type,version,label,template,values));
    }
  }
  return supportedMetadata;
}",0.9984223574487266
188510,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<MetadataValue>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.clone());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null, version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<MetadataValue>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.clone());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<String,Integer>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().toLowerCase().equals(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equals(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final String representationId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.representationId=representationId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<MetadataValue>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.clone());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null, version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,representationId,bundle.getId(),typeString,version,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<MetadataValue>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.clone());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getId(),bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,representationId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<String,Integer>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().toLowerCase().equals(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equalsIgnoreCase(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
}",0.998939104604286
188511,"/** 
 * Constructs a   {@link OrFiltersParameters} from a list of values.
 * @param name the name of the attribute.
 * @param values the list of values for this filter.
 */
public OrFiltersParameters(String name,List<FilterParameter> values){
  setName(name);
  setValues(values);
}","/** 
 * Constructs a   {@link OrFiltersParameters} from a list of values.
 * @param name the name of the attribute.
 * @param values the list of values for this filter.
 */
public OrFiltersParameters(String name,List<FilterParameter> values){
  super(name,values);
}",0.9306569343065694
188512,"/** 
 * @see Object#toString()
 */
public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ getValues()+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str"";
}",0.6589147286821705
188513,"private static void parseFilterParameter(StringBuilder ret,FilterParameter parameter,boolean prefixWithANDOperatorIfBuilderNotEmpty) throws RequestNotValidException {
  if (parameter instanceof SimpleFilterParameter) {
    SimpleFilterParameter simplePar=(SimpleFilterParameter)parameter;
    appendExactMatch(ret,simplePar.getName(),simplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OneOfManyFilterParameter) {
    OneOfManyFilterParameter param=(OneOfManyFilterParameter)parameter;
    appendValuesUsingOROperator(ret,param.getName(),param.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof BasicSearchFilterParameter) {
    BasicSearchFilterParameter param=(BasicSearchFilterParameter)parameter;
    appendBasicSearch(ret,param.getName(),param.getValue(),""String_Node_Str"",prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof EmptyKeyFilterParameter) {
    EmptyKeyFilterParameter param=(EmptyKeyFilterParameter)parameter;
    appendANDOperator(ret,true);
    ret.append(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
 else   if (parameter instanceof DateRangeFilterParameter) {
    DateRangeFilterParameter param=(DateRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Date.class,param.getFromValue(),String.class,processToDate(param.getToValue(),param.getGranularity(),false),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof DateIntervalFilterParameter) {
    DateIntervalFilterParameter param=(DateIntervalFilterParameter)parameter;
    appendRangeInterval(ret,param.getFromName(),param.getToName(),param.getFromValue(),param.getToValue(),param.getGranularity(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof LongRangeFilterParameter) {
    LongRangeFilterParameter param=(LongRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Long.class,param.getFromValue(),Long.class,param.getToValue(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof NotSimpleFilterParameter) {
    NotSimpleFilterParameter notSimplePar=(NotSimpleFilterParameter)parameter;
    appendNotExactMatch(ret,notSimplePar.getName(),notSimplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OrFiltersParameters) {
    OrFiltersParameters orFilters=(OrFiltersParameters)parameter;
    appendFiltersWithOr(ret,orFilters.getName(),orFilters.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else {
    LOGGER.error(""String_Node_Str"",parameter.getClass().getName());
    throw new RequestNotValidException(""String_Node_Str"" + parameter.getClass().getName());
  }
}","private static void parseFilterParameter(StringBuilder ret,FilterParameter parameter,boolean prefixWithANDOperatorIfBuilderNotEmpty) throws RequestNotValidException {
  if (parameter instanceof SimpleFilterParameter) {
    SimpleFilterParameter simplePar=(SimpleFilterParameter)parameter;
    appendExactMatch(ret,simplePar.getName(),simplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OneOfManyFilterParameter) {
    OneOfManyFilterParameter param=(OneOfManyFilterParameter)parameter;
    appendValuesUsingOROperator(ret,param.getName(),param.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof BasicSearchFilterParameter) {
    BasicSearchFilterParameter param=(BasicSearchFilterParameter)parameter;
    appendBasicSearch(ret,param.getName(),param.getValue(),""String_Node_Str"",prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof EmptyKeyFilterParameter) {
    EmptyKeyFilterParameter param=(EmptyKeyFilterParameter)parameter;
    appendANDOperator(ret,true);
    ret.append(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
 else   if (parameter instanceof DateRangeFilterParameter) {
    DateRangeFilterParameter param=(DateRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Date.class,param.getFromValue(),String.class,processToDate(param.getToValue(),param.getGranularity(),false),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof DateIntervalFilterParameter) {
    DateIntervalFilterParameter param=(DateIntervalFilterParameter)parameter;
    appendRangeInterval(ret,param.getFromName(),param.getToName(),param.getFromValue(),param.getToValue(),param.getGranularity(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof LongRangeFilterParameter) {
    LongRangeFilterParameter param=(LongRangeFilterParameter)parameter;
    appendRange(ret,param.getName(),Long.class,param.getFromValue(),Long.class,param.getToValue(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof NotSimpleFilterParameter) {
    NotSimpleFilterParameter notSimplePar=(NotSimpleFilterParameter)parameter;
    appendNotExactMatch(ret,notSimplePar.getName(),notSimplePar.getValue(),true,prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else   if (parameter instanceof OrFiltersParameters || parameter instanceof AndFiltersParameters) {
    FiltersParameters filters=(FiltersParameters)parameter;
    appendFiltersWithOperator(ret,parameter instanceof OrFiltersParameters ? ""String_Node_Str"" : ""String_Node_Str"",filters.getValues(),prefixWithANDOperatorIfBuilderNotEmpty);
  }
 else {
    LOGGER.error(""String_Node_Str"",parameter.getClass().getName());
    throw new RequestNotValidException(""String_Node_Str"" + parameter.getClass().getName());
  }
}",0.9620751341681574
188514,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
        PluginState reportState=PluginState.SUCCESS;
        VirusCheckResult virusCheckResult=null;
        Exception exception=null;
        DirectResourceAccess directAccess=null;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
          directAccess=storage.getDirectAccess(aipPath);
          virusCheckResult=getAntiVirus().checkForVirus(directAccess.getPath());
          reportState=virusCheckResult.isClean() ? PluginState.SUCCESS : PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(virusCheckResult.getReport());
          LOGGER.debug(""String_Node_Str"",aip.getId(),virusCheckResult.isClean());
        }
 catch (        RODAException|RuntimeException e) {
          reportState=PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(e.getMessage());
          jobPluginInfo.incrementObjectsProcessedWithFailure();
          exception=e;
          LOGGER.error(""String_Node_Str"" + aip.getId(),e);
        }
 finally {
          IOUtils.closeQuietly(directAccess);
        }
        try {
          jobPluginInfo.incrementObjectsProcessed(reportState);
          boolean notify=true;
          createEvent(virusCheckResult,exception,reportItem.getPluginState(),aip,model,index,notify);
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        PluginException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.INGEST_PROCESSING);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
        PluginState reportState=PluginState.SUCCESS;
        VirusCheckResult virusCheckResult=null;
        Exception exception=null;
        DirectResourceAccess directAccess=null;
        try {
          LOGGER.debug(""String_Node_Str"",aip.getId());
          StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
          directAccess=storage.getDirectAccess(aipPath);
          virusCheckResult=getAntiVirus().checkForVirus(directAccess.getPath());
          reportState=virusCheckResult.isClean() ? PluginState.SUCCESS : PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(virusCheckResult.getReport());
          LOGGER.debug(""String_Node_Str"",aip.getId(),virusCheckResult.isClean());
        }
 catch (        RODAException|RuntimeException e) {
          LOGGER.error(""String_Node_Str"" + aip.getId(),e);
          reportState=PluginState.FAILURE;
          reportItem.setPluginState(reportState).setPluginDetails(e.getMessage());
          exception=e;
        }
 finally {
          IOUtils.closeQuietly(directAccess);
          jobPluginInfo.incrementObjectsProcessed(reportState);
          try {
            createEvent(virusCheckResult,exception,reportItem.getPluginState(),aip,model,index,true);
            report.addReport(reportItem);
            PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
          }
 catch (          PluginException e) {
            LOGGER.error(""String_Node_Str"",e);
          }
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}",0.9065495207667732
188515,"private void createEvent(VirusCheckResult virusCheckResult,Exception exception,PluginState state,AIP aip,ModelService model,IndexService index,boolean notify) throws PluginException {
  try {
    StringBuilder outcomeDetailExtension=new StringBuilder(virusCheckResult.getReport());
    if (state != PluginState.SUCCESS && exception != null) {
      outcomeDetailExtension.append(""String_Node_Str"").append(exception.getClass().getName()).append(""String_Node_Str"").append(exception.getMessage());
    }
    PluginHelper.createPluginEvent(this,aip.getId(),model,index,state,outcomeDetailExtension.toString(),notify);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
}","private void createEvent(VirusCheckResult virusCheckResult,Exception exception,PluginState state,AIP aip,ModelService model,IndexService index,boolean notify) throws PluginException {
  try {
    StringBuilder outcomeDetailExtension=new StringBuilder();
    outcomeDetailExtension.append(virusCheckResult == null ? ""String_Node_Str"" : virusCheckResult.getReport());
    if (state != PluginState.SUCCESS && exception != null) {
      outcomeDetailExtension.append(""String_Node_Str"").append(exception.getClass().getName()).append(""String_Node_Str"").append(exception.getMessage());
    }
    PluginHelper.createPluginEvent(this,aip.getId(),model,index,state,outcomeDetailExtension.toString(),notify);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
}",0.9513888888888888
188516,"private static String getSiegfriedServerEndpoint(Path sourceDirectory){
  String siegfriedServer=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String endpoint=siegfriedServer + ""String_Node_Str"" + new String(Base64.encode(sourceDirectory.toString().getBytes()));
  return endpoint;
}","private static String getSiegfriedServerEndpoint(Path sourceDirectory){
  String siegfriedServer=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return String.format(""String_Node_Str"",siegfriedServer,new String(Base64.encode(sourceDirectory.toString().getBytes())));
}",0.8583690987124464
188517,"@Override public Notification processNotification(ModelService model,final Notification notification){
  Notification processedNotification=new Notification(notification);
  try {
    List<String> recipients=processedNotification.getRecipientUsers();
    String templatePath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String templateCompletePath=templatePath + templateName;
    InputStream templateStream;
    if (localeString != null) {
      String localeTemplateCompletePath=templateCompletePath.replace(RodaConstants.EMAIL_TEMPLATE_EXTENSION,""String_Node_Str"" + localeString + RodaConstants.EMAIL_TEMPLATE_EXTENSION);
      templateStream=RodaCoreFactory.getConfigurationFileAsStream(localeTemplateCompletePath,templateCompletePath);
    }
 else {
      templateStream=RodaCoreFactory.getConfigurationFileAsStream(templateCompletePath);
    }
    String template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
    IOUtils.closeQuietly(templateStream);
    if (!scope.containsKey(FROM)) {
      scope.put(FROM,processedNotification.getFromUser());
    }
    if (recipients.size() == 1) {
      scope.put(RECIPIENT,recipients.get(0));
    }
 else {
      scope.put(RECIPIENT,RodaConstants.NOTIFICATION_VARIOUS_RECIPIENT_USERS);
    }
    processedNotification.setBody(HandlebarsUtility.executeHandlebars(template,scope));
    scope.remove(RECIPIENT);
    ConfigurableEmailUtility emailUtility=new ConfigurableEmailUtility(processedNotification.getFromUser(),processedNotification.getSubject());
    for (    String recipient : recipients) {
      String modifiedBody=getUpdatedMessageBody(model,notification,recipient,template,scope);
      String host=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (StringUtils.isNotBlank(host)) {
        LOGGER.debug(""String_Node_Str"");
        emailUtility.sendMail(recipient,modifiedBody);
        LOGGER.debug(""String_Node_Str"");
        processedNotification.setState(NOTIFICATION_STATE.COMPLETED);
      }
 else {
        processedNotification.setState(NOTIFICATION_STATE.FAILED);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  IOException|MessagingException e) {
    processedNotification.setState(NOTIFICATION_STATE.FAILED);
    LOGGER.debug(""String_Node_Str"",e.getMessage());
  }
  return processedNotification;
}","@Override public Notification processNotification(ModelService model,final Notification notification){
  Notification processedNotification=new Notification(notification);
  try {
    List<String> recipients=processedNotification.getRecipientUsers();
    String templatePath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String templateCompletePath=templatePath + templateName;
    InputStream templateStream;
    if (localeString != null) {
      String localeTemplateCompletePath=templateCompletePath.replace(RodaConstants.EMAIL_TEMPLATE_EXTENSION,""String_Node_Str"" + localeString + RodaConstants.EMAIL_TEMPLATE_EXTENSION);
      templateStream=RodaCoreFactory.getConfigurationFileAsStream(localeTemplateCompletePath,templateCompletePath);
    }
 else {
      templateStream=RodaCoreFactory.getConfigurationFileAsStream(templateCompletePath);
    }
    String template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
    IOUtils.closeQuietly(templateStream);
    if (!scope.containsKey(FROM)) {
      scope.put(FROM,processedNotification.getFromUser());
    }
    if (recipients.size() == 1) {
      scope.put(RECIPIENT,recipients.get(0));
    }
 else {
      scope.put(RECIPIENT,RodaConstants.NOTIFICATION_VARIOUS_RECIPIENT_USERS);
    }
    processedNotification.setBody(HandlebarsUtility.executeHandlebars(template.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),scope));
    scope.remove(RECIPIENT);
    ConfigurableEmailUtility emailUtility=new ConfigurableEmailUtility(processedNotification.getFromUser(),processedNotification.getSubject());
    for (    String recipient : recipients) {
      String modifiedBody=getUpdatedMessageBody(model,notification,recipient,template,scope);
      String host=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (StringUtils.isNotBlank(host)) {
        LOGGER.debug(""String_Node_Str"");
        emailUtility.sendMail(recipient,modifiedBody);
        LOGGER.debug(""String_Node_Str"");
        processedNotification.setState(NOTIFICATION_STATE.COMPLETED);
      }
 else {
        processedNotification.setState(NOTIFICATION_STATE.FAILED);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  IOException|MessagingException e) {
    processedNotification.setState(NOTIFICATION_STATE.FAILED);
    LOGGER.debug(""String_Node_Str"",e.getMessage());
  }
  return processedNotification;
}",0.981788749494132
188518,"public void acknowledgeNotification(String notificationId,String token) throws GenericException, NotFoundException, AuthorizationDeniedException {
  Notification notification=this.retrieveNotification(notificationId);
  String ackToken=token.substring(0,36);
  String emailToken=token.substring(36);
  if (notification.getAcknowledgeToken().equals(ackToken)) {
    for (    String recipient : notification.getRecipientUsers()) {
      if (recipient.equals(emailToken)) {
        DateFormat df=DateFormat.getDateTimeInstance();
        String ackDate=df.format(new Date());
        notification.addAcknowledgedUser(recipient,ackDate);
        notification.setAcknowledged(true);
        this.updateNotification(notification);
      }
    }
  }
}","public void acknowledgeNotification(String notificationId,String token) throws GenericException, NotFoundException, AuthorizationDeniedException {
  Notification notification=this.retrieveNotification(notificationId);
  String ackToken=token.substring(0,36);
  String emailToken=token.substring(36);
  if (notification.getAcknowledgeToken().equals(ackToken)) {
    for (    String recipient : notification.getRecipientUsers()) {
      String recipientUUID=UUID.nameUUIDFromBytes(recipient.getBytes()).toString();
      if (recipientUUID.equals(emailToken)) {
        DateFormat df=DateFormat.getDateTimeInstance();
        String ackDate=df.format(new Date());
        notification.addAcknowledgedUser(recipient,ackDate);
        notification.setAcknowledged(true);
        this.updateNotification(notification);
      }
    }
  }
}",0.9276649746192892
188519,"@Override public void onSuccessImpl(Void result){
  Toast.showInfo(messages.dialogDone(),messages.allItemsWereAccepted());
  mainSearch.refresh();
}","@Override public void onSuccessImpl(Void result){
  Toast.showInfo(messages.dialogDone(),messages.allItemsWereRejected());
  mainSearch.refresh();
  acceptButton.setEnabled(false);
  rejectButton.setEnabled(false);
}",0.6538461538461539
188520,"@SuppressWarnings(""String_Node_Str"") @UiHandler(""String_Node_Str"") void buttonAcceptHandler(ClickEvent e){
  boolean accept=true;
  SelectedItems<?> selected=mainSearch.getSelected();
  String rejectReason=null;
  BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
    @Override public void onSuccessImpl(    Void result){
      Toast.showInfo(messages.dialogDone(),messages.allItemsWereAccepted());
      mainSearch.refresh();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @UiHandler(""String_Node_Str"") void buttonAcceptHandler(ClickEvent e){
  boolean accept=true;
  SelectedItems<?> selected=mainSearch.getSelected();
  String rejectReason=null;
  BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
    @Override public void onSuccessImpl(    Void result){
      Toast.showInfo(messages.dialogDone(),messages.allItemsWereAccepted());
      mainSearch.refresh();
      acceptButton.setEnabled(false);
      rejectButton.setEnabled(false);
    }
  }
);
}",0.9325044404973356
188521,"@UiHandler(""String_Node_Str"") void buttonRejectHandler(ClickEvent e){
  final boolean accept=false;
  final SelectedItems<?> selected=mainSearch.getSelected();
  Dialogs.showPromptDialog(messages.rejectMessage(),messages.rejectSIPQuestion(),null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void onSuccess(    final String rejectReason){
      BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void result){
          Toast.showInfo(messages.dialogDone(),messages.allItemsWereAccepted());
          mainSearch.refresh();
        }
      }
);
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonRejectHandler(ClickEvent e){
  final boolean accept=false;
  final SelectedItems<?> selected=mainSearch.getSelected();
  Dialogs.showPromptDialog(messages.rejectMessage(),messages.rejectSIPQuestion(),null,RegExp.compile(""String_Node_Str""),messages.dialogCancel(),messages.dialogOk(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void onSuccess(    final String rejectReason){
      BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
        @Override public void onSuccessImpl(        Void result){
          Toast.showInfo(messages.dialogDone(),messages.allItemsWereRejected());
          mainSearch.refresh();
          acceptButton.setEnabled(false);
          rejectButton.setEnabled(false);
        }
      }
);
    }
  }
);
}",0.9488574537540804
188522,"@SuppressWarnings(""String_Node_Str"") @Override public void onSuccess(final String rejectReason){
  BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
    @Override public void onSuccessImpl(    Void result){
      Toast.showInfo(messages.dialogDone(),messages.allItemsWereAccepted());
      mainSearch.refresh();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onSuccess(final String rejectReason){
  BrowserService.Util.getInstance().appraisal((SelectedItems<IndexedAIP>)selected,accept,rejectReason,new LoadingAsyncCallback<Void>(){
    @Override public void onSuccessImpl(    Void result){
      Toast.showInfo(messages.dialogDone(),messages.allItemsWereRejected());
      mainSearch.refresh();
      acceptButton.setEnabled(false);
      rejectButton.setEnabled(false);
    }
  }
);
}",0.9040178571428572
188523,"@UiHandler(""String_Node_Str"") void buttonAppraisalHandler(ClickEvent e){
  HistoryUtils.newHistory(IngestAppraisal.RESOLVER,RodaConstants.INGEST_JOB_ID,job.getId());
}","@UiHandler(""String_Node_Str"") void buttonAppraisalHandler(ClickEvent e){
  HistoryUtils.newHistory(IngestAppraisal.RESOLVER,RodaConstants.SEARCH_ITEMS,RodaConstants.INGEST_JOB_ID,job.getId());
}",0.925207756232687
188524,"@Override public void onValueChange(ValueChangeEvent<Boolean> event){
  workflowList.clear();
  boolean noChecks=true;
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    int pluginsAdded=0;
    for (int p=0; p < plugins.size(); p++) {
      PluginInfo pluginInfo=plugins.get(p);
      if (pluginInfo != null) {
        List<String> categories=pluginInfo.getCategories();
        if (categories != null) {
          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
            if (checkbox.getValue().booleanValue()) {
              noChecks=false;
              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                if (pluginsAdded == 0) {
                  CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                  pluginItem.addStyleName(""String_Node_Str"");
                  pluginsAdded++;
                }
              }
            }
          }
          if (noChecks) {
            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
              if (p == 0) {
                CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                pluginItem.addStyleName(""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  updateWorkflowOptions();
}","@Override public void onValueChange(ValueChangeEvent<Boolean> event){
  workflowList.clear();
  boolean noChecks=true;
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    List<String> pluginsAdded=new ArrayList<String>();
    for (int p=0; p < plugins.size(); p++) {
      PluginInfo pluginInfo=plugins.get(p);
      if (pluginInfo != null) {
        List<String> categories=pluginInfo.getCategories();
        if (categories != null) {
          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
            if (checkbox.getValue().booleanValue()) {
              noChecks=false;
              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && !pluginsAdded.contains(pluginInfo.getId())) {
                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                if (pluginsAdded.isEmpty()) {
                  CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                  pluginItem.addStyleName(""String_Node_Str"");
                }
                pluginsAdded.add(pluginInfo.getId());
              }
            }
          }
          if (noChecks) {
            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
              if (p == 0) {
                CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                pluginItem.addStyleName(""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  updateWorkflowOptions();
}",0.951670644391408
188525,"public void configurePlugins(){
  List<String> categoriesOnListBox=new ArrayList<String>();
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    for (int p=0; p < plugins.size(); p++) {
      PluginInfo pluginInfo=plugins.get(p);
      if (pluginInfo != null) {
        List<String> pluginCategories=pluginInfo.getCategories();
        if (pluginCategories != null && !pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
          for (          String category : pluginCategories) {
            if (!categoriesOnListBox.contains(category)) {
              CheckBox box=new CheckBox();
              box.setText(messages.showPluginCategories(category));
              box.setName(category);
              box.addStyleName(""String_Node_Str"");
              box.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
                @Override public void onValueChange(                ValueChangeEvent<Boolean> event){
                  workflowList.clear();
                  boolean noChecks=true;
                  if (plugins != null) {
                    PluginUtils.sortByName(plugins);
                    int pluginsAdded=0;
                    for (int p=0; p < plugins.size(); p++) {
                      PluginInfo pluginInfo=plugins.get(p);
                      if (pluginInfo != null) {
                        List<String> categories=pluginInfo.getCategories();
                        if (categories != null) {
                          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
                            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
                            if (checkbox.getValue().booleanValue()) {
                              noChecks=false;
                              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
                                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                                if (pluginsAdded == 0) {
                                  CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                  pluginItem.addStyleName(""String_Node_Str"");
                                  pluginsAdded++;
                                }
                              }
                            }
                          }
                          if (noChecks) {
                            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
                              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                              if (p == 0) {
                                CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                pluginItem.addStyleName(""String_Node_Str"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  updateWorkflowOptions();
                }
              }
);
              workflowCategoryList.add(box);
              categoriesOnListBox.add(category);
            }
          }
          if (!pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
            Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
            if (p == 0) {
              CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
              pluginItem.addStyleName(""String_Node_Str"");
            }
          }
        }
      }
 else {
        GWT.log(""String_Node_Str"");
      }
    }
    updateWorkflowOptions();
  }
}","public void configurePlugins(){
  List<String> categoriesOnListBox=new ArrayList<String>();
  if (plugins != null) {
    PluginUtils.sortByName(plugins);
    for (int p=0; p < plugins.size(); p++) {
      PluginInfo pluginInfo=plugins.get(p);
      if (pluginInfo != null) {
        List<String> pluginCategories=pluginInfo.getCategories();
        if (pluginCategories != null && !pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
          for (          String category : pluginCategories) {
            if (!categoriesOnListBox.contains(category)) {
              CheckBox box=new CheckBox();
              box.setText(messages.showPluginCategories(category));
              box.setName(category);
              box.addStyleName(""String_Node_Str"");
              box.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
                @Override public void onValueChange(                ValueChangeEvent<Boolean> event){
                  workflowList.clear();
                  boolean noChecks=true;
                  if (plugins != null) {
                    PluginUtils.sortByName(plugins);
                    List<String> pluginsAdded=new ArrayList<String>();
                    for (int p=0; p < plugins.size(); p++) {
                      PluginInfo pluginInfo=plugins.get(p);
                      if (pluginInfo != null) {
                        List<String> categories=pluginInfo.getCategories();
                        if (categories != null) {
                          for (int i=0; i < workflowCategoryList.getWidgetCount(); i++) {
                            CheckBox checkbox=(CheckBox)workflowCategoryList.getWidget(i);
                            if (checkbox.getValue().booleanValue()) {
                              noChecks=false;
                              if (categories.contains(checkbox.getName()) && !categories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE) && !pluginsAdded.contains(pluginInfo.getId())) {
                                Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                                if (pluginsAdded.isEmpty()) {
                                  CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                  pluginItem.addStyleName(""String_Node_Str"");
                                }
                                pluginsAdded.add(pluginInfo.getId());
                              }
                            }
                          }
                          if (noChecks) {
                            if (!pluginInfo.getCategories().contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
                              Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
                              if (p == 0) {
                                CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
                                pluginItem.addStyleName(""String_Node_Str"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  updateWorkflowOptions();
                }
              }
);
              workflowCategoryList.add(box);
              categoriesOnListBox.add(category);
            }
          }
          if (!pluginCategories.contains(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE)) {
            Widget pluginItem=addPluginItemWidgetToWorkflowList(pluginInfo);
            if (p == 0) {
              CreateActionJob.this.selectedPlugin=lookupPlugin(pluginInfo.getId());
              pluginItem.addStyleName(""String_Node_Str"");
            }
          }
        }
      }
 else {
        GWT.log(""String_Node_Str"");
      }
    }
    updateWorkflowOptions();
  }
}",0.9746835443037974
188526,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  Map<String,Report> reports=new HashMap<>();
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    PluginState pluginState=PluginState.SUCCESS;
    for (    AIP aip : list) {
      Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,aip.getState());
      PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
      reports.put(aip.getId(),reportItem);
      String rsyncResult=ReplicationPluginUtils.executeRsyncAIP(aip,hasCompression,true);
      if (rsyncResult.equals(ReplicationPluginUtils.PROPERTIES_ERROR_MESSAGE)) {
        pluginState=PluginState.FAILURE;
      }
      PreservationMetadata pm=PluginHelper.createPluginEvent(this,aip.getId(),model,index,pluginState,rsyncResult,true);
      rsyncResult=ReplicationPluginUtils.executeRsyncEvent(pm,hasCompression);
      if (rsyncResult.equals(ReplicationPluginUtils.PROPERTIES_ERROR_MESSAGE)) {
        pluginState=PluginState.FAILURE;
      }
    }
    try {
      ReplicationPluginUtils.executeRsyncAgents(hasCompression);
      sendReindexRequest(model,index,list.stream().map(aip -> aip.getId()).collect(Collectors.toList()));
      for (      AIP aip : list) {
        Report reportItem=reports.get(aip.getId());
        reportItem.setPluginState(pluginState);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        jobPluginInfo.incrementObjectsProcessed(pluginState);
      }
    }
 catch (    UnsupportedOperationException|RODAException e) {
      pluginState=PluginState.FAILURE;
      String outcomeDetailExtension=""String_Node_Str"" + e.getMessage();
      if (e instanceof CommandException) {
        outcomeDetailExtension+=""String_Node_Str"" + ((CommandException)e).getOutput();
      }
      for (      AIP aip : list) {
        Report reportItem=reports.get(aip.getId());
        reportItem.setPluginState(pluginState).setPluginDetails(outcomeDetailExtension);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        jobPluginInfo.incrementObjectsProcessed(pluginState);
      }
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  RODAException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  Map<String,Report> reports=new HashMap<>();
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    PluginState pluginState=PluginState.SUCCESS;
    try {
      for (      AIP aip : list) {
        Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,aip.getState());
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,false);
        reports.put(aip.getId(),reportItem);
        String rsyncResult=ReplicationPluginUtils.executeRsyncAIP(aip,hasCompression);
        if (rsyncResult.equals(ReplicationPluginUtils.PROPERTIES_ERROR_MESSAGE)) {
          pluginState=PluginState.FAILURE;
        }
        reportItem.addPluginDetails(rsyncResult);
        PreservationMetadata pm=PluginHelper.createPluginEvent(this,aip.getId(),model,index,pluginState,rsyncResult,true);
        rsyncResult=ReplicationPluginUtils.executeRsyncEvent(pm,hasCompression);
        if (rsyncResult.equals(ReplicationPluginUtils.PROPERTIES_ERROR_MESSAGE)) {
          pluginState=PluginState.FAILURE;
        }
        reportItem.addPluginDetails(""String_Node_Str"" + rsyncResult);
      }
      String rsyncAgentsResult=ReplicationPluginUtils.executeRsyncAgents(hasCompression);
      sendReindexRequest(model,index,list.stream().map(aip -> aip.getId()).collect(Collectors.toList()));
      for (      AIP aip : list) {
        Report reportItem=reports.get(aip.getId());
        reportItem.setPluginState(pluginState);
        reportItem.addPluginDetails(""String_Node_Str"" + rsyncAgentsResult);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        jobPluginInfo.incrementObjectsProcessed(pluginState);
      }
    }
 catch (    UnsupportedOperationException|RODAException e) {
      pluginState=PluginState.FAILURE;
      String outcomeDetailExtension=""String_Node_Str"" + e.getMessage();
      if (e instanceof CommandException) {
        outcomeDetailExtension+=""String_Node_Str"" + ((CommandException)e).getOutput();
      }
      for (      AIP aip : list) {
        Report reportItem=reports.get(aip.getId());
        if (reportItem == null) {
          reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,aip.getState());
        }
        reportItem.setPluginState(pluginState).setPluginDetails(outcomeDetailExtension);
        report.addReport(reportItem);
        PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        jobPluginInfo.incrementObjectsProcessed(pluginState);
      }
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    throw new PluginException(""String_Node_Str"",e);
  }
  return report;
}",0.9104372355430184
188527,"public static String executeRsyncAgents(boolean hasCompression) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceAgentPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_PRESERVATION).resolve(RodaConstants.STORAGE_CONTAINER_PRESERVATION_AGENTS);
  String targetAgentPath=dataTarget + ""String_Node_Str"" + RodaConstants.CORE_STORAGE_FOLDER+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_PRESERVATION+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_PRESERVATION_AGENTS+ ""String_Node_Str"";
  rsyncCommand.add(sourceAgentPath + ""String_Node_Str"");
  rsyncCommand.add(targetAgentPath);
  LOGGER.debug(""String_Node_Str"",rsyncCommand);
  return CommandUtility.execute(rsyncCommand);
}","public static String executeRsyncAgents(boolean hasCompression) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceAgentPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_PRESERVATION).resolve(RodaConstants.STORAGE_CONTAINER_PRESERVATION_AGENTS);
  String targetAgentPath=dataTarget + RodaConstants.CORE_STORAGE_FOLDER + ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_PRESERVATION+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_PRESERVATION_AGENTS+ ""String_Node_Str"";
  StringBuilder ret=new StringBuilder();
  if (Files.exists(sourceAgentPath)) {
    rsyncCommand.add(sourceAgentPath + ""String_Node_Str"");
    rsyncCommand.add(targetAgentPath);
    String output=CommandUtility.execute(rsyncCommand);
    ret.append(""String_Node_Str"").append(StringUtils.join(rsyncCommand,""String_Node_Str"")).append(""String_Node_Str"");
    ret.append(output);
  }
 else {
  }
  return ret.toString();
}",0.8108843537414966
188528,"public static String executeRsyncEvent(PreservationMetadata pm,boolean hasCompression) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceEventPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(pm.getAipId()).resolve(RodaConstants.STORAGE_DIRECTORY_METADATA).resolve(RodaConstants.STORAGE_DIRECTORY_PRESERVATION).resolve(pm.getId() + RodaConstants.PREMIS_SUFFIX);
  String targetEventPath=dataTarget + ""String_Node_Str"" + RodaConstants.CORE_STORAGE_FOLDER+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ pm.getAipId()+ ""String_Node_Str""+ RodaConstants.STORAGE_DIRECTORY_METADATA+ ""String_Node_Str""+ RodaConstants.STORAGE_DIRECTORY_PRESERVATION+ ""String_Node_Str""+ pm.getId()+ RodaConstants.PREMIS_SUFFIX+ ""String_Node_Str"";
  rsyncCommand.add(sourceEventPath + ""String_Node_Str"");
  rsyncCommand.add(targetEventPath);
  LOGGER.debug(""String_Node_Str"",rsyncCommand);
  return CommandUtility.execute(rsyncCommand);
}","public static String executeRsyncEvent(PreservationMetadata pm,boolean hasCompression) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceEventPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(pm.getAipId()).resolve(RodaConstants.STORAGE_DIRECTORY_METADATA).resolve(RodaConstants.STORAGE_DIRECTORY_PRESERVATION).resolve(pm.getId() + RodaConstants.PREMIS_SUFFIX);
  String targetEventPath=dataTarget + RodaConstants.CORE_STORAGE_FOLDER + ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ pm.getAipId()+ ""String_Node_Str""+ RodaConstants.STORAGE_DIRECTORY_METADATA+ ""String_Node_Str""+ RodaConstants.STORAGE_DIRECTORY_PRESERVATION+ ""String_Node_Str""+ pm.getId()+ RodaConstants.PREMIS_SUFFIX;
  StringBuilder ret=new StringBuilder();
  if (Files.exists(sourceEventPath)) {
    rsyncCommand.add(sourceEventPath.toString());
    rsyncCommand.add(targetEventPath);
    String output=CommandUtility.execute(rsyncCommand);
    ret.append(""String_Node_Str"").append(StringUtils.join(rsyncCommand,""String_Node_Str"")).append(""String_Node_Str"");
    ret.append(output);
  }
 else {
  }
  return ret.toString();
}",0.8279926335174954
188529,"public static String executeRsyncAIP(AIP aip,boolean hasCompression,boolean syncHistory) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceAipPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
  String targetAipPath=dataTarget + ""String_Node_Str"" + RodaConstants.CORE_STORAGE_FOLDER+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
  String ret;
  rsyncCommand.add(sourceAipPath + ""String_Node_Str"");
  rsyncCommand.add(targetAipPath);
  LOGGER.debug(""String_Node_Str"",rsyncCommand);
  ret=CommandUtility.execute(rsyncCommand);
  if (syncHistory) {
    Path sourceAipHistoryDataPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_HISTORY_FOLDER).resolve(RodaConstants.STORAGE_HISTORY_CONTAINER_DATA).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
    Path sourceAipHistoryMetadataPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_HISTORY_FOLDER).resolve(RodaConstants.STORAGE_HISTORY_CONTAINER_METADATA).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
    String targetAipHistoryDataPath=dataTarget + ""String_Node_Str"" + RodaConstants.CORE_STORAGE_HISTORY_FOLDER+ ""String_Node_Str""+ RodaConstants.STORAGE_HISTORY_CONTAINER_DATA+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
    String targetAipHistoryMetadataPath=dataTarget + ""String_Node_Str"" + RodaConstants.CORE_STORAGE_HISTORY_FOLDER+ ""String_Node_Str""+ RodaConstants.STORAGE_HISTORY_CONTAINER_METADATA+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
    List<String> rsyncHistoryDataCommand=addInitialCommandPart(hasCompression);
    rsyncHistoryDataCommand.add(sourceAipHistoryDataPath + ""String_Node_Str"");
    rsyncHistoryDataCommand.add(targetAipHistoryDataPath);
    LOGGER.debug(""String_Node_Str"",rsyncHistoryDataCommand);
    ret+=CommandUtility.execute(rsyncHistoryDataCommand);
    List<String> rsyncHistoryMetadataCommand=addInitialCommandPart(hasCompression);
    rsyncHistoryMetadataCommand.add(sourceAipHistoryMetadataPath + ""String_Node_Str"");
    rsyncHistoryMetadataCommand.add(targetAipHistoryMetadataPath);
    LOGGER.debug(""String_Node_Str"",rsyncHistoryMetadataCommand);
    ret+=CommandUtility.execute(rsyncHistoryMetadataCommand);
  }
  return ret;
}","public static String executeRsyncAIP(AIP aip,boolean hasCompression) throws CommandException {
  String dataTarget=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (dataTarget == null) {
    return PROPERTIES_ERROR_MESSAGE;
  }
  List<String> rsyncCommand=addInitialCommandPart(hasCompression);
  Path sourceAipPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_FOLDER).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
  String targetAipPath=dataTarget + RodaConstants.CORE_STORAGE_FOLDER + ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
  StringBuilder ret=new StringBuilder();
  if (Files.exists(sourceAipPath)) {
    rsyncCommand.add(sourceAipPath + ""String_Node_Str"");
    rsyncCommand.add(targetAipPath);
    String output=CommandUtility.execute(rsyncCommand);
    ret.append(""String_Node_Str"").append(StringUtils.join(rsyncCommand,""String_Node_Str"")).append(""String_Node_Str"");
    ret.append(output);
  }
  Path sourceAipHistoryDataPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_HISTORY_FOLDER).resolve(RodaConstants.STORAGE_HISTORY_CONTAINER_DATA).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
  String targetAipHistoryDataPath=dataTarget + RodaConstants.CORE_STORAGE_HISTORY_FOLDER + ""String_Node_Str""+ RodaConstants.STORAGE_HISTORY_CONTAINER_DATA+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
  if (Files.exists(sourceAipHistoryDataPath)) {
    List<String> rsyncHistoryDataCommand=addInitialCommandPart(hasCompression);
    rsyncHistoryDataCommand.add(sourceAipHistoryDataPath + ""String_Node_Str"");
    rsyncHistoryDataCommand.add(targetAipHistoryDataPath);
    String output=CommandUtility.execute(rsyncHistoryDataCommand);
    ret.append(""String_Node_Str"").append(StringUtils.join(rsyncHistoryDataCommand,""String_Node_Str"")).append(""String_Node_Str"");
    ret.append(output);
  }
 else {
  }
  Path sourceAipHistoryMetadataPath=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_STORAGE_HISTORY_FOLDER).resolve(RodaConstants.STORAGE_HISTORY_CONTAINER_METADATA).resolve(RodaConstants.STORAGE_CONTAINER_AIP).resolve(aip.getId());
  String targetAipHistoryMetadataPath=dataTarget + RodaConstants.CORE_STORAGE_HISTORY_FOLDER + ""String_Node_Str""+ RodaConstants.STORAGE_HISTORY_CONTAINER_METADATA+ ""String_Node_Str""+ RodaConstants.STORAGE_CONTAINER_AIP+ ""String_Node_Str""+ aip.getId()+ ""String_Node_Str"";
  if (Files.exists(sourceAipHistoryMetadataPath)) {
    List<String> rsyncHistoryMetadataCommand=addInitialCommandPart(hasCompression);
    rsyncHistoryMetadataCommand.add(sourceAipHistoryMetadataPath + ""String_Node_Str"");
    rsyncHistoryMetadataCommand.add(targetAipHistoryMetadataPath);
    String output=CommandUtility.execute(rsyncHistoryMetadataCommand);
    ret.append(""String_Node_Str"").append(StringUtils.join(rsyncHistoryMetadataCommand,""String_Node_Str"")).append(""String_Node_Str"");
    ret.append(output);
  }
 else {
  }
  return ret.toString();
}",0.5451134231622037
188530,"@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_DISSEMINATION,RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE);
}","@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_DISSEMINATION);
}",0.8447653429602888
188531,"public static SolrInputDocument representationPermissionsUpdateToSolrDocument(Representation representation,Permissions permissions){
  SolrInputDocument document=new SolrInputDocument();
  document.addField(RodaConstants.INDEX_UUID,IdUtils.getRepresentationId(representation.getAipId(),IdUtils.getRepresentationId(representation)));
  document.addField(RodaConstants.REPRESENTATION_ID,representation.getId());
  return permissionsUpdateToSolrDocument(document,permissions);
}","public static SolrInputDocument representationPermissionsUpdateToSolrDocument(Representation representation,Permissions permissions){
  SolrInputDocument document=new SolrInputDocument();
  document.addField(RodaConstants.INDEX_UUID,IdUtils.getRepresentationId(representation));
  return permissionsUpdateToSolrDocument(document,permissions);
}",0.8390243902439024
188532,"public AkkaEmbeddedPluginOrchestrator(){
  maxNumberOfJobsInParallel=JobsHelper.getMaxNumberOfJobsInParallel();
  index=RodaCoreFactory.getIndexService();
  model=RodaCoreFactory.getModelService();
  storage=RodaCoreFactory.getStorageService();
  runningJobs=new HashMap<>();
  Config akkaConfig=getAkkaConfiguration();
  workersSystem=ActorSystem.create(""String_Node_Str"",akkaConfig);
  Props jobsProps=new RoundRobinPool(maxNumberOfJobsInParallel).props(Props.create(AkkaJobActor.class));
  jobWorkersRouter=workersSystem.actorOf(jobsProps,""String_Node_Str"");
}","public AkkaEmbeddedPluginOrchestrator(){
  maxNumberOfJobsInParallel=JobsHelper.getMaxNumberOfJobsInParallel();
  index=RodaCoreFactory.getIndexService();
  model=RodaCoreFactory.getModelService();
  storage=RodaCoreFactory.getStorageService();
  runningJobs=new HashMap<>();
  Config akkaConfig=getAkkaConfiguration();
  jobsSystem=ActorSystem.create(""String_Node_Str"",akkaConfig);
  jobsManager=jobsSystem.actorOf(Props.create(AkkaJobsManager.class,maxNumberOfJobsInParallel),""String_Node_Str"");
}",0.8192090395480226
188533,"@Override public void executeJob(Job job,boolean async) throws JobAlreadyStartedException {
  LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
  if (runningJobs.containsKey(job.getId())) {
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
    throw new JobAlreadyStartedException();
  }
 else {
    if (async) {
      jobWorkersRouter.tell(job,ActorRef.noSender());
    }
 else {
      int timeoutInSeconds=JobsHelper.getSyncTimeout();
      Timeout timeout=new Timeout(Duration.create(timeoutInSeconds,""String_Node_Str""));
      Future<Object> future=Patterns.ask(jobWorkersRouter,job,timeout);
      try {
        Await.result(future,timeout.duration());
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
  }
}","@Override public void executeJob(Job job,boolean async) throws JobAlreadyStartedException {
  LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
  if (runningJobs.containsKey(job.getId())) {
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
    throw new JobAlreadyStartedException();
  }
 else {
    if (async) {
      jobsManager.tell(job,ActorRef.noSender());
    }
 else {
      int timeoutInSeconds=JobsHelper.getSyncTimeout();
      Timeout timeout=new Timeout(Duration.create(timeoutInSeconds,""String_Node_Str""));
      Future<Object> future=Patterns.ask(jobsManager,job,timeout);
      try {
        Await.result(future,timeout.duration());
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId());
  }
}",0.9796163069544364
188534,"@Override public void shutdown(){
  LOGGER.info(""String_Node_Str"");
  Future<Terminated> terminate=workersSystem.terminate();
  terminate.onComplete(new OnComplete<Terminated>(){
    public void onComplete(    Throwable failure,    Terminated result){
      if (failure != null) {
        LOGGER.error(""String_Node_Str"",failure);
      }
 else {
        LOGGER.info(""String_Node_Str"");
      }
    }
  }
,workersSystem.dispatcher());
}","@Override public void shutdown(){
  LOGGER.info(""String_Node_Str"");
  Future<Terminated> terminate=jobsSystem.terminate();
  terminate.onComplete(new OnComplete<Terminated>(){
    public void onComplete(    Throwable failure,    Terminated result){
      if (failure != null) {
        LOGGER.error(""String_Node_Str"",failure);
      }
 else {
        LOGGER.info(""String_Node_Str"");
      }
    }
  }
,jobsSystem.dispatcher());
}",0.9791666666666666
188535,"/** 
 * Public empty constructor 
 */
public AkkaJobActor(){
  super();
}","/** 
 * Public constructor 
 */
public AkkaJobActor(ActorRef jobsManager){
  super();
  this.jobsManager=jobsManager;
}",0.6979166666666666
188536,"@Override public void onReceive(Object msg) throws Exception {
  super.setup(msg);
  if (msg instanceof Job) {
    Job job=(Job)msg;
    Plugin<? extends IsRODAObject> plugin=super.getPluginManager().getPlugin(job.getPlugin());
    if (plugin == null) {
      JobsHelper.updateJobState(job,super.getModel(),JOB_STATE.FAILED_TO_COMPLETE,Optional.of(""String_Node_Str""));
      getSender().tell(""String_Node_Str"",getSelf());
      return;
    }
    JobsHelper.setPluginParameters(plugin,job);
    String jobId=job.getId();
    ActorRef jobStateInfoActor=getContext().actorOf(Props.create(AkkaJobStateInfoActor.class,plugin,getSender(),JobsHelper.getNumberOfJobsWorkers()),jobId);
    super.getPluginOrchestrator().setJobContextInformation(jobId,jobStateInfoActor);
    jobStateInfoActor.tell(new Messages.JobStateUpdated(plugin,JOB_STATE.STARTED),getSelf());
    try {
      if (job.getSourceObjects() instanceof SelectedItemsAll<?>) {
        runOnAll(job,plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsNone<?>) {
        super.getPluginOrchestrator().runPlugin(getSelf(),plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsList<?>) {
        runFromList(job,plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsFilter<?>) {
        runFromFilter(job,plugin);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      jobStateInfoActor.tell(new Messages.JobStateUpdated(plugin,JOB_STATE.FAILED_TO_COMPLETE,e),getSelf());
      getSender().tell(""String_Node_Str"",getSelf());
    }
  }
 else {
    LOGGER.error(""String_Node_Str"",msg.getClass().getName());
    unhandled(msg);
  }
}","@Override public void onReceive(Object msg) throws Exception {
  super.setup(msg);
  if (msg instanceof Job) {
    Job job=(Job)msg;
    Plugin<? extends IsRODAObject> plugin=super.getPluginManager().getPlugin(job.getPlugin());
    if (plugin == null) {
      JobsHelper.updateJobState(job,super.getModel(),JOB_STATE.FAILED_TO_COMPLETE,Optional.of(""String_Node_Str""));
      getSender().tell(""String_Node_Str"",getSelf());
      return;
    }
    JobsHelper.setPluginParameters(plugin,job);
    String jobId=job.getId();
    ActorRef jobStateInfoActor=getContext().actorOf(Props.create(AkkaJobStateInfoActor.class,plugin,getSender(),jobsManager,JobsHelper.getNumberOfJobsWorkers()),jobId);
    super.getPluginOrchestrator().setJobContextInformation(jobId,jobStateInfoActor);
    jobStateInfoActor.tell(new Messages.JobStateUpdated(plugin,JOB_STATE.STARTED),getSelf());
    try {
      if (job.getSourceObjects() instanceof SelectedItemsAll<?>) {
        runOnAll(job,plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsNone<?>) {
        super.getPluginOrchestrator().runPlugin(getSelf(),plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsList<?>) {
        runFromList(job,plugin);
      }
 else       if (job.getSourceObjects() instanceof SelectedItemsFilter<?>) {
        runFromFilter(job,plugin);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      jobStateInfoActor.tell(new Messages.JobStateUpdated(plugin,JOB_STATE.FAILED_TO_COMPLETE,e),getSelf());
      getSender().tell(""String_Node_Str"",getSelf());
    }
  }
 else {
    LOGGER.error(""String_Node_Str"",msg.getClass().getName());
    unhandled(msg);
  }
}",0.9964726631393298
188537,"private void handleJobStateUpdated(Object msg){
  Messages.JobStateUpdated message=(Messages.JobStateUpdated)msg;
  message.logProcessingStarted();
  Plugin<?> p=message.getPlugin() == null ? this.plugin : message.getPlugin();
  try {
    Job job=PluginHelper.getJob(p,super.getIndex());
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId(),message.getState(),message.getStateDatails().orElse(""String_Node_Str""));
  }
 catch (  NotFoundException|GenericException e) {
    LOGGER.warn(""String_Node_Str"",e.getMessage());
  }
  JobsHelper.updateJobState(p,super.getModel(),message.getState(),message.getStateDatails());
  if (Job.isFinalState(message.getState())) {
    jobCreator.tell(""String_Node_Str"",getSelf());
    getContext().stop(getSelf());
  }
  message.logProcessingEnded();
}","private void handleJobStateUpdated(Object msg){
  Messages.JobStateUpdated message=(Messages.JobStateUpdated)msg;
  message.logProcessingStarted();
  Plugin<?> p=message.getPlugin() == null ? this.plugin : message.getPlugin();
  try {
    Job job=PluginHelper.getJob(p,super.getIndex());
    LOGGER.info(""String_Node_Str"",job.getName(),job.getId(),message.getState(),message.getStateDatails().orElse(""String_Node_Str""));
  }
 catch (  NotFoundException|GenericException e) {
    LOGGER.warn(""String_Node_Str"",e.getMessage());
  }
  JobsHelper.updateJobState(p,super.getModel(),message.getState(),message.getStateDatails());
  if (Job.isFinalState(message.getState())) {
    jobCreator.tell(""String_Node_Str"",getSelf());
    jobsManager.tell(new Messages.JobsManagerJobEnded(),getSelf());
    getContext().stop(getSelf());
  }
  message.logProcessingEnded();
}",0.9587878787878787
188538,"public AkkaJobStateInfoActor(Plugin<?> plugin,ActorRef jobCreator,int numberOfJobsWorkers){
  super();
  jobInfo=new JobInfo();
  this.plugin=plugin;
  this.jobCreator=jobCreator;
  LOGGER.debug(""String_Node_Str"",numberOfJobsWorkers);
  Props workersProps=new RoundRobinPool(numberOfJobsWorkers).props(Props.create(AkkaWorkerActor.class));
  workersRouter=getContext().actorOf(workersProps,""String_Node_Str"");
  getContext().watch(workersRouter);
}","public AkkaJobStateInfoActor(Plugin<?> plugin,ActorRef jobCreator,ActorRef jobsManager,int numberOfJobsWorkers){
  super();
  jobInfo=new JobInfo();
  this.plugin=plugin;
  this.jobCreator=jobCreator;
  this.jobsManager=jobsManager;
  LOGGER.debug(""String_Node_Str"",numberOfJobsWorkers);
  Props workersProps=new RoundRobinPool(numberOfJobsWorkers).props(Props.create(AkkaWorkerActor.class));
  workersRouter=getContext().actorOf(workersProps,""String_Node_Str"");
  getContext().watch(workersRouter);
}",0.9441517386722866
188539,"private Map<String,Integer> getIndexVersionsFromCode(Path indexConfigsFolder,List<String> collections){
  Map<String,Integer> ret=new HashMap<>();
  for (  String collection : collections) {
    Path schemaFile=indexConfigsFolder.resolve(collection).resolve(""String_Node_Str"").resolve(""String_Node_Str"");
    String version=XMLUtility.getStringFromFile(schemaFile,""String_Node_Str"");
    try {
      ret.put(collection,Integer.parseInt(version));
    }
 catch (    NumberFormatException e) {
    }
  }
  return ret;
}","private Map<String,Integer> getIndexVersionsFromCode(Path indexConfigsFolder,List<String> collections){
  Map<String,Integer> ret=new HashMap<>();
  for (  String collection : collections) {
    Path schemaFile=indexConfigsFolder.resolve(collection).resolve(""String_Node_Str"").resolve(""String_Node_Str"");
    String version=XMLUtility.getStringFromFile(schemaFile,""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
    try {
      ret.put(collection,Integer.parseInt(version));
    }
 catch (    NumberFormatException e) {
    }
  }
  return ret;
}",0.9538745387453874
188540,"@UiHandler(""String_Node_Str"") void buttonRemoveHandler(ClickEvent e){
  Dialogs.showConfirmDialog(messages.representationRemoveTitle(),messages.representationRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        SelectedItemsList<IndexedRepresentation> selected=new SelectedItemsList<IndexedRepresentation>(Arrays.asList(repId),IndexedRepresentation.class.getName());
        BrowserService.Util.getInstance().deleteRepresentation(selected,new AsyncCallback<Void>(){
          @Override public void onSuccess(          Void result){
            Tools.newHistory(Browse.RESOLVER,aipId);
          }
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
        }
);
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonRemoveHandler(ClickEvent e){
  Dialogs.showConfirmDialog(messages.representationRemoveTitle(),messages.representationRemoveMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
    @Override public void onSuccess(    Boolean confirmed){
      if (confirmed) {
        SelectedItems selected=(SelectedItems)filesList.getSelected();
        if (ClientSelectedItemsUtils.isEmpty(selected)) {
          selected=new SelectedItemsList<IndexedRepresentation>(Arrays.asList(repId),IndexedRepresentation.class.getName());
          BrowserService.Util.getInstance().deleteRepresentation(selected,new AsyncCallback<Void>(){
            @Override public void onSuccess(            Void result){
              Tools.newHistory(Browse.RESOLVER,aipId);
            }
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
          }
);
        }
 else {
          BrowserService.Util.getInstance().deleteFile(selected,new AsyncCallback<Void>(){
            @Override public void onSuccess(            Void result){
              filesList.refresh();
            }
            @Override public void onFailure(            Throwable caught){
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
          }
);
        }
      }
    }
    @Override public void onFailure(    Throwable caught){
    }
  }
);
}",0.7418831168831169
188541,"@UiHandler(""String_Node_Str"") void buttonNewProcessHandler(ClickEvent e){
  if (repId != null) {
    LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
    selectedItems.setSelectedItems(SelectedItemsList.create(IndexedRepresentation.class,repId));
    Tools.newHistory(CreateJob.RESOLVER,""String_Node_Str"");
  }
}","@UiHandler(""String_Node_Str"") void buttonNewProcessHandler(ClickEvent e){
  SelectedItems selected=(SelectedItems)filesList.getSelected();
  if (ClientSelectedItemsUtils.isEmpty(selected)) {
    selected=new SelectedItemsList<IndexedRepresentation>(Arrays.asList(repId),IndexedRepresentation.class.getName());
  }
  LastSelectedItemsSingleton selectedItems=LastSelectedItemsSingleton.getInstance();
  selectedItems.setSelectedItems(selected);
  Tools.newHistory(CreateJob.RESOLVER,""String_Node_Str"");
}",0.5377358490566038
188542,"@Override public void onSuccess(Void result){
  Tools.newHistory(Browse.RESOLVER,aipId);
}","@Override public void onSuccess(Void result){
  filesList.refresh();
}",0.7375
188543,"@Test public void testSiegfried() throws RODAException, FileAlreadyExistsException, InterruptedException, IOException, SolrServerException, XmlException {
  AIP aip=ingestCorpora();
  TestsHelper.executeJob(PremisSkeletonPlugin.class,PluginType.AIP_TO_AIP,SelectedItemsList.create(AIP.class,aip.getId()));
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_REPORTING_CLASS,FAKE_REPORTING_CLASS);
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,parameters,PluginType.AIP_TO_AIP,SelectedItemsList.create(AIP.class,aip.getId()));
  TestsHelper.getJobReports(index,job,true);
  aip=model.retrieveAIP(aip.getId());
  AssertJUnit.assertEquals(CORPORA_FILES_COUNT,Iterables.size(model.listOtherMetadata(aip.getId(),RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,true)));
  Binary om=model.retrieveOtherMetadataBinary(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED);
  AssertJUnit.assertNotNull(om);
  Binary fpo_bin=model.retrievePreservationFile(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT);
  gov.loc.premis.v3.File fpo=PremisV3Utils.binaryToFile(fpo_bin.getContent(),true);
  FormatComplexType format=fpo.getObjectCharacteristicsArray(0).getFormatArray(0);
  AssertJUnit.assertEquals(""String_Node_Str"",format.getFormatDesignation().getFormatName().getStringValue());
  FormatRegistryComplexType pronomRegistry=PremisV3Utils.getFormatRegistry(fpo,RodaConstants.PRESERVATION_REGISTRY_PRONOM);
  AssertJUnit.assertEquals(RodaConstants.PRESERVATION_REGISTRY_PRONOM,pronomRegistry.getFormatRegistryName().getStringValue());
  AssertJUnit.assertEquals(""String_Node_Str"",pronomRegistry.getFormatRegistryKey().getStringValue());
  FormatRegistryComplexType mimeRegistry=PremisV3Utils.getFormatRegistry(fpo,RodaConstants.PRESERVATION_REGISTRY_MIME);
  String mimetype=""String_Node_Str"";
  AssertJUnit.assertEquals(mimetype,mimeRegistry.getFormatRegistryKey().getStringValue());
  index.commitAIPs();
  IndexedFile indFile=index.retrieve(IndexedFile.class,IdUtils.getFileId(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT));
  AssertJUnit.assertEquals(mimetype,indFile.getFileFormat().getMimeType());
  AssertJUnit.assertEquals(""String_Node_Str"",indFile.getFileFormat().getPronom());
  AssertJUnit.assertEquals(""String_Node_Str"",indFile.getFileFormat().getFormatDesignationName());
  List<String> suggest=index.suggest(IndexedFile.class,RodaConstants.FILE_FORMAT_MIMETYPE,mimetype.substring(0,1),null,false);
  MatcherAssert.assertThat(suggest,Matchers.contains(mimetype));
  Plugin<? extends IsRODAObject> plugin=RodaCoreFactory.getPluginManager().getPlugin(SiegfriedPlugin.class.getName());
  String agentID=IdUtils.getPluginAgentId(plugin);
  boolean found=false;
  CloseableIterable<OptionalWithCause<PreservationMetadata>> preservationMetadataList=model.listPreservationMetadata(aip.getId(),true);
  for (  OptionalWithCause<PreservationMetadata> opm : preservationMetadataList) {
    if (opm.isPresent()) {
      PreservationMetadata pm=opm.get();
      if (pm.getType().equals(PreservationMetadataType.EVENT)) {
        EventComplexType event=PremisV3Utils.binaryToEvent(model.retrievePreservationEvent(pm.getAipId(),pm.getRepresentationId(),pm.getId()).getContent().createInputStream());
        if (event.getLinkingAgentIdentifierArray() != null && event.getLinkingAgentIdentifierArray().length > 0) {
          for (          LinkingAgentIdentifierComplexType laict : event.getLinkingAgentIdentifierArray()) {
            if (laict.getLinkingAgentIdentifierValue() != null && laict.getLinkingAgentIdentifierValue().equalsIgnoreCase(agentID)) {
              found=true;
              break;
            }
          }
          if (found) {
            break;
          }
        }
      }
    }
  }
  IOUtils.closeQuietly(preservationMetadataList);
  AssertJUnit.assertTrue(found);
  Filter filter=new Filter();
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_TYPE,PreservationEventType.FORMAT_IDENTIFICATION.toString()));
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId()));
  IndexResult<IndexedPreservationEvent> events=index.find(IndexedPreservationEvent.class,filter,null,new Sublist(0,10));
  AssertJUnit.assertEquals(1,events.getTotalCount());
}","@Test public void testSiegfried() throws RODAException, FileAlreadyExistsException, InterruptedException, IOException, SolrServerException, XmlException {
  AIP aip=ingestCorpora();
  TestsHelper.executeJob(PremisSkeletonPlugin.class,PluginType.AIP_TO_AIP,SelectedItemsList.create(AIP.class,aip.getId()));
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_REPORTING_CLASS,FAKE_REPORTING_CLASS);
  Job job=TestsHelper.executeJob(SiegfriedPlugin.class,parameters,PluginType.AIP_TO_AIP,SelectedItemsList.create(AIP.class,aip.getId()));
  TestsHelper.getJobReports(index,job,true);
  aip=model.retrieveAIP(aip.getId());
  AssertJUnit.assertEquals(CORPORA_FILES_COUNT,Iterables.size(model.listOtherMetadata(aip.getId(),RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED,true)));
  Binary om=model.retrieveOtherMetadataBinary(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT,SiegfriedPlugin.FILE_SUFFIX,RodaConstants.OTHER_METADATA_TYPE_SIEGFRIED);
  AssertJUnit.assertNotNull(om);
  Binary fpo_bin=model.retrievePreservationFile(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT);
  gov.loc.premis.v3.File fpo=PremisV3Utils.binaryToFile(fpo_bin.getContent(),true);
  FormatComplexType format=fpo.getObjectCharacteristicsArray(0).getFormatArray(0);
  AssertJUnit.assertEquals(""String_Node_Str"",format.getFormatDesignation().getFormatName().getStringValue());
  FormatRegistryComplexType pronomRegistry=PremisV3Utils.getFormatRegistry(fpo,RodaConstants.PRESERVATION_REGISTRY_PRONOM);
  AssertJUnit.assertEquals(RodaConstants.PRESERVATION_REGISTRY_PRONOM,pronomRegistry.getFormatRegistryName().getStringValue());
  AssertJUnit.assertEquals(""String_Node_Str"",pronomRegistry.getFormatRegistryKey().getStringValue());
  FormatRegistryComplexType mimeRegistry=PremisV3Utils.getFormatRegistry(fpo,RodaConstants.PRESERVATION_REGISTRY_MIME);
  String mimetype=""String_Node_Str"";
  AssertJUnit.assertEquals(mimetype,mimeRegistry.getFormatRegistryKey().getStringValue());
  index.commitAIPs();
  IndexedFile indFile=index.retrieve(IndexedFile.class,IdUtils.getFileId(aip.getId(),aip.getRepresentations().get(0).getId(),Arrays.asList(CORPORA_TEST1),CORPORA_TEST1_TXT));
  AssertJUnit.assertEquals(mimetype,indFile.getFileFormat().getMimeType());
  AssertJUnit.assertEquals(""String_Node_Str"",indFile.getFileFormat().getPronom());
  AssertJUnit.assertEquals(""String_Node_Str"",indFile.getFileFormat().getFormatDesignationName());
  List<String> suggest=index.suggest(IndexedFile.class,RodaConstants.FILE_FORMAT_MIMETYPE,mimetype.substring(0,1),null,false,false);
  MatcherAssert.assertThat(suggest,Matchers.contains(mimetype));
  Plugin<? extends IsRODAObject> plugin=RodaCoreFactory.getPluginManager().getPlugin(SiegfriedPlugin.class.getName());
  String agentID=IdUtils.getPluginAgentId(plugin);
  boolean found=false;
  CloseableIterable<OptionalWithCause<PreservationMetadata>> preservationMetadataList=model.listPreservationMetadata(aip.getId(),true);
  for (  OptionalWithCause<PreservationMetadata> opm : preservationMetadataList) {
    if (opm.isPresent()) {
      PreservationMetadata pm=opm.get();
      if (pm.getType().equals(PreservationMetadataType.EVENT)) {
        EventComplexType event=PremisV3Utils.binaryToEvent(model.retrievePreservationEvent(pm.getAipId(),pm.getRepresentationId(),pm.getId()).getContent().createInputStream());
        if (event.getLinkingAgentIdentifierArray() != null && event.getLinkingAgentIdentifierArray().length > 0) {
          for (          LinkingAgentIdentifierComplexType laict : event.getLinkingAgentIdentifierArray()) {
            if (laict.getLinkingAgentIdentifierValue() != null && laict.getLinkingAgentIdentifierValue().equalsIgnoreCase(agentID)) {
              found=true;
              break;
            }
          }
          if (found) {
            break;
          }
        }
      }
    }
  }
  IOUtils.closeQuietly(preservationMetadataList);
  AssertJUnit.assertTrue(found);
  Filter filter=new Filter();
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_TYPE,PreservationEventType.FORMAT_IDENTIFICATION.toString()));
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId()));
  IndexResult<IndexedPreservationEvent> events=index.find(IndexedPreservationEvent.class,filter,null,new Sublist(0,10));
  AssertJUnit.assertEquals(1,events.getTotalCount());
}",0.9993322946806142
188544,"public <T extends IsIndexed>List<String> suggest(Class<T> returnClass,String field,String query,User user,boolean allowPartial) throws GenericException {
  boolean justActive=true;
  return SolrUtils.suggest(getSolrClient(),returnClass,field,query,justActive,user,allowPartial);
}","public <T extends IsIndexed>List<String> suggest(Class<T> returnClass,String field,String query,User user,boolean allowPartial,boolean justActive) throws GenericException {
  return SolrUtils.suggest(getSolrClient(),returnClass,field,query,justActive,user,allowPartial);
}",0.9166666666666666
188545,"protected static <T extends IsIndexed>List<String> suggest(Class<T> returnClass,String field,String query,User user,boolean allowPartial) throws GenericException, NotFoundException {
  return RodaCoreFactory.getIndexService().suggest(returnClass,field,query,user,allowPartial);
}","protected static <T extends IsIndexed>List<String> suggest(Class<T> returnClass,String field,String query,User user,boolean allowPartial) throws GenericException, NotFoundException {
  boolean justActive=true;
  return RodaCoreFactory.getIndexService().suggest(returnClass,field,query,user,allowPartial,justActive);
}",0.9362416107382552
188546,"private <T extends Serializable>CloseableIterable<OptionalWithCause<T>> listFiles(Class<T> objectClass) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  CloseableIterable<OptionalWithCause<AIP>> aips=listAIPs();
  Iterator<OptionalWithCause<AIP>> aipIter=aips.iterator();
  List<CloseableIterable<OptionalWithCause<T>>> files=new ArrayList<CloseableIterable<OptionalWithCause<T>>>();
  while (aipIter.hasNext()) {
    OptionalWithCause<AIP> aip=aipIter.next();
    if (aip.isPresent()) {
      for (      Representation representation : aip.get().getRepresentations()) {
        final CloseableIterable<Resource> resourcesIterable=storage.listResourcesUnderContainer(ModelUtils.getRepresentationDataStoragePath(aip.get().getId(),representation.getId()),true);
        CloseableIterable<OptionalWithCause<T>> fs=ResourceParseUtils.convert(getStorage(),resourcesIterable,objectClass);
        files.add(fs);
      }
    }
  }
  return CloseableIterables.concat(files);
}","private <T extends Serializable>CloseableIterable<OptionalWithCause<T>> listFiles(Class<T> objectClass) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  CloseableIterable<OptionalWithCause<AIP>> aips=listAIPs();
  Iterator<OptionalWithCause<AIP>> aipIter=aips.iterator();
  List<CloseableIterable<OptionalWithCause<T>>> files=new ArrayList<CloseableIterable<OptionalWithCause<T>>>();
  while (aipIter.hasNext()) {
    OptionalWithCause<AIP> aip=aipIter.next();
    if (aip.isPresent()) {
      for (      Representation representation : aip.get().getRepresentations()) {
        StoragePath representationDataStoragePath=ModelUtils.getRepresentationDataStoragePath(aip.get().getId(),representation.getId());
        try {
          final CloseableIterable<Resource> resourcesIterable=storage.listResourcesUnderDirectory(representationDataStoragePath,true);
          CloseableIterable<OptionalWithCause<T>> fs=ResourceParseUtils.convert(getStorage(),resourcesIterable,objectClass);
          files.add(fs);
        }
 catch (        NotFoundException e) {
        }
      }
    }
  }
  return CloseableIterables.concat(files);
}",0.8548094373865699
188547,"@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_VALIDATION);
}","@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_MISC);
}",0.945945945945946
188548,"@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_VALIDATION);
}","@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_MISC);
}",0.945945945945946
188549,"private void getDescriptiveMetadata(final String aipId,final String representationId,final String descId,final String versionKey,final boolean inHTML,final AsyncCallback<SafeHtml> callback){
  SafeUri uri;
  if (inHTML) {
    uri=RestUtils.createRepresentationDescriptiveMetadataHTMLUri(representationId,descId,versionKey);
  }
 else {
    uri=RestUtils.createRepresentationDescriptiveMetadataDownloadUri(representationId,descId,versionKey);
  }
  RequestBuilder requestBuilder=new RequestBuilder(RequestBuilder.GET,uri.asString());
  requestBuilder.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    requestBuilder.sendRequest(null,new RequestCallback(){
      @Override public void onResponseReceived(      Request request,      Response response){
        if (200 == response.getStatusCode()) {
          String text=response.getText();
          SafeHtmlBuilder b=new SafeHtmlBuilder();
          if (inHTML) {
            b.append(SafeHtmlUtils.fromTrustedString(text));
          }
 else {
            b.append(SafeHtmlUtils.fromString(text));
          }
          SafeHtml safeHtml=b.toSafeHtml();
          callback.onSuccess(safeHtml);
        }
 else {
          String text=response.getText();
          String message;
          try {
            RestErrorOverlayType error=(RestErrorOverlayType)JsonUtils.safeEval(text);
            message=error.getMessage();
          }
 catch (          IllegalArgumentException e) {
            message=text;
          }
          SafeHtmlBuilder b=new SafeHtmlBuilder();
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(messages.descriptiveMetadataTranformToHTMLError());
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(SafeHtmlUtils.fromString(message));
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          callback.onSuccess(b.toSafeHtml());
        }
      }
      @Override public void onError(      Request request,      Throwable exception){
        callback.onFailure(exception);
      }
    }
);
  }
 catch (  RequestException e) {
    callback.onFailure(e);
  }
}","private void getDescriptiveMetadata(final String aipId,final String representationId,final String descId,final String versionKey,final boolean inHTML,final AsyncCallback<SafeHtml> callback){
  SafeUri uri;
  if (inHTML) {
    if (representationId != null) {
      uri=RestUtils.createRepresentationDescriptiveMetadataHTMLUri(representationId,descId,versionKey);
    }
 else {
      uri=RestUtils.createDescriptiveMetadataHTMLUri(aipId,descId,versionKey);
    }
  }
 else {
    if (representationId != null) {
      uri=RestUtils.createRepresentationDescriptiveMetadataDownloadUri(representationId,descId,versionKey);
    }
 else {
      uri=RestUtils.createDescriptiveMetadataDownloadUri(aipId,descId,versionKey);
    }
  }
  RequestBuilder requestBuilder=new RequestBuilder(RequestBuilder.GET,uri.asString());
  requestBuilder.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    requestBuilder.sendRequest(null,new RequestCallback(){
      @Override public void onResponseReceived(      Request request,      Response response){
        if (200 == response.getStatusCode()) {
          String text=response.getText();
          SafeHtmlBuilder b=new SafeHtmlBuilder();
          if (inHTML) {
            b.append(SafeHtmlUtils.fromTrustedString(text));
          }
 else {
            b.append(SafeHtmlUtils.fromString(text));
          }
          SafeHtml safeHtml=b.toSafeHtml();
          callback.onSuccess(safeHtml);
        }
 else {
          String text=response.getText();
          String message;
          try {
            RestErrorOverlayType error=(RestErrorOverlayType)JsonUtils.safeEval(text);
            message=error.getMessage();
          }
 catch (          IllegalArgumentException e) {
            message=text;
          }
          SafeHtmlBuilder b=new SafeHtmlBuilder();
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(messages.descriptiveMetadataTranformToHTMLError());
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(SafeHtmlUtils.fromString(message));
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          b.append(SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
          callback.onSuccess(b.toSafeHtml());
        }
      }
      @Override public void onError(      Request request,      Throwable exception){
        callback.onFailure(exception);
      }
    }
);
  }
 catch (  RequestException e) {
    callback.onFailure(e);
  }
}",0.9257215619694398
188550,"public static <T extends IsRODAObject>SelectedItemsAll<T> create(Class<T> classToCreate){
  return new SelectedItemsAll<>(classToCreate.getName());
}","public static <T extends IsRODAObject>SelectedItemsAll<T> create(String classToCreate){
  return new SelectedItemsAll<>(classToCreate);
}",0.916083916083916
188551,"protected static TransferredResource createTransferredResource(Path resourcePath,BasicFileAttributes attr,long size,Path basePath,Date lastScanDate){
  Path relativeToBase=basePath.relativize(resourcePath);
  TransferredResource tr=new TransferredResource();
  Date d=new Date(attr.creationTime().toMillis());
  tr.setCreationDate(d);
  tr.setFile(!Files.isDirectory(resourcePath));
  tr.setFullPath(resourcePath.toString());
  String id=relativeToBase.toString();
  tr.setId(id);
  tr.setUUID(getTransferredResourceUUID(relativeToBase));
  tr.setName(resourcePath.getFileName().toString());
  tr.setRelativePath(relativeToBase.toString());
  if (relativeToBase.getParent() != null) {
    String parentId=relativeToBase.getParent().toString();
    tr.setParentId(parentId);
    tr.setParentUUID(UUID.nameUUIDFromBytes(parentId.getBytes()).toString());
  }
  tr.setSize(size);
  List<String> ancestors=new ArrayList<String>();
  StringBuilder temp=new StringBuilder();
  Iterator<Path> pathIterator=relativeToBase.iterator();
  while (pathIterator.hasNext()) {
    temp.append(pathIterator.next().toString());
    ancestors.add(temp.toString());
    temp.append(""String_Node_Str"");
  }
  ancestors.remove(ancestors.size() - 1);
  tr.setAncestorsPaths(ancestors);
  tr.setLastScanDate(lastScanDate);
  return tr;
}","protected static TransferredResource createTransferredResource(Path resourcePath,BasicFileAttributes attr,long size,Path basePath,Date lastScanDate){
  Path relativeToBase=basePath.relativize(resourcePath);
  TransferredResource tr=new TransferredResource();
  Date d=new Date(attr.creationTime().toMillis());
  tr.setCreationDate(d);
  tr.setFile(!Files.isDirectory(resourcePath));
  tr.setFullPath(resourcePath.toString());
  String id=relativeToBase.toString();
  tr.setId(id);
  tr.setUUID(IdUtils.getTransferredResourceUUID(relativeToBase));
  tr.setName(resourcePath.getFileName().toString());
  tr.setRelativePath(relativeToBase.toString());
  if (relativeToBase.getParent() != null) {
    String parentId=relativeToBase.getParent().toString();
    tr.setParentId(parentId);
    tr.setParentUUID(UUID.nameUUIDFromBytes(parentId.getBytes()).toString());
  }
  tr.setSize(size);
  List<String> ancestors=new ArrayList<String>();
  StringBuilder temp=new StringBuilder();
  Iterator<Path> pathIterator=relativeToBase.iterator();
  while (pathIterator.hasNext()) {
    temp.append(pathIterator.next().toString());
    ancestors.add(temp.toString());
    temp.append(""String_Node_Str"");
  }
  ancestors.remove(ancestors.size() - 1);
  tr.setAncestorsPaths(ancestors);
  tr.setLastScanDate(lastScanDate);
  return tr;
}",0.9969604863221884
188552,"public Map<String,String> moveTransferredResource(List<TransferredResource> resources,String newRelativePath,boolean replaceExisting,boolean reindexResources,boolean areResourcesFromSameFolder,boolean addOldRelativePathToNewRelativePath) throws AlreadyExistsException, GenericException, IsStillUpdatingException, NotFoundException {
  Map<String,String> oldToNewTransferredResourceIds=new HashMap<String,String>();
  List<TransferredResource> resourcesToIndex=new ArrayList<TransferredResource>();
  boolean notFoundResources=false;
  for (  TransferredResource resource : resources) {
    if (Files.exists(Paths.get(resource.getFullPath()))) {
      Path newResourcePath=basePath.resolve(newRelativePath);
      if (addOldRelativePathToNewRelativePath) {
        newResourcePath=newResourcePath.resolve(resource.getRelativePath());
      }
 else {
        newResourcePath=newResourcePath.resolve(resource.getName());
      }
      FSUtils.move(Paths.get(resource.getFullPath()),newResourcePath,replaceExisting);
      oldToNewTransferredResourceIds.put(resource.getUUID(),getTransferredResourceUUID(basePath.relativize(newResourcePath)));
      resourcesToIndex.add(resource);
    }
 else {
      notFoundResources=true;
    }
  }
  if (reindexResources) {
    updateAllTransferredResources(getTransferredResourceUUID(newRelativePath),true);
    reindexOldResourcesParentsAfterMove(resourcesToIndex,areResourcesFromSameFolder);
  }
  if (notFoundResources) {
    throw new NotFoundException(""String_Node_Str"");
  }
  return oldToNewTransferredResourceIds;
}","public Map<String,String> moveTransferredResource(List<TransferredResource> resources,String newRelativePath,boolean replaceExisting,boolean reindexResources,boolean areResourcesFromSameFolder,boolean addOldRelativePathToNewRelativePath) throws AlreadyExistsException, GenericException, IsStillUpdatingException, NotFoundException {
  Map<String,String> oldToNewTransferredResourceIds=new HashMap<String,String>();
  List<TransferredResource> resourcesToIndex=new ArrayList<TransferredResource>();
  boolean notFoundResources=false;
  for (  TransferredResource resource : resources) {
    if (Files.exists(Paths.get(resource.getFullPath()))) {
      Path newResourcePath=basePath.resolve(newRelativePath);
      if (addOldRelativePathToNewRelativePath) {
        newResourcePath=newResourcePath.resolve(resource.getRelativePath());
      }
 else {
        newResourcePath=newResourcePath.resolve(resource.getName());
      }
      FSUtils.move(Paths.get(resource.getFullPath()),newResourcePath,replaceExisting);
      oldToNewTransferredResourceIds.put(resource.getUUID(),IdUtils.getTransferredResourceUUID(basePath.relativize(newResourcePath)));
      resourcesToIndex.add(resource);
    }
 else {
      notFoundResources=true;
    }
  }
  if (reindexResources) {
    updateAllTransferredResources(IdUtils.getTransferredResourceUUID(newRelativePath),true);
    reindexOldResourcesParentsAfterMove(resourcesToIndex,areResourcesFromSameFolder);
  }
  if (notFoundResources) {
    throw new NotFoundException(""String_Node_Str"");
  }
  return oldToNewTransferredResourceIds;
}",0.9948914431673052
188553,"public static Report lastReport(User user,String id,String resourceOrSip,String acceptFormat) throws RODAException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  BrowserHelper.validateListingParams(acceptFormat);
  controllerAssistant.checkRoles(user);
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  Reports reportList;
  if (id == null || resourceOrSip == null) {
    reportList=BrowserHelper.listReports(start,limit);
  }
 else {
    if (RodaConstants.API_GET_REPORTS_ID_OBJECT_SIP.equals(resourceOrSip)) {
      reportList=BrowserHelper.listTransferredResourcesReportsWithSIP(id,start,limit);
    }
 else {
      reportList=BrowserHelper.listTransferredResourcesReports(id,start,limit);
    }
  }
  controllerAssistant.registerAction(user,id,LOG_ENTRY_STATE.SUCCESS,RodaConstants.API_QUERY_PARAM_ID,id,RodaConstants.API_GET_REPORTS_ID_OBJECT,resourceOrSip,RodaConstants.API_QUERY_KEY_START,start,RodaConstants.API_QUERY_KEY_LIMIT,limit);
  if (reportList.getReports().isEmpty()) {
    throw new RODAException();
  }
 else {
    return reportList.getReports().get(0);
  }
}","public static Report lastReport(User user,String id,String resourceOrSip,String acceptFormat) throws RODAException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  BrowserHelper.validateListingParams(acceptFormat);
  controllerAssistant.checkRoles(user);
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  Reports reportList;
  if (id == null || resourceOrSip == null) {
    reportList=BrowserHelper.listReports(start,limit);
  }
 else {
    if (RodaConstants.API_GET_REPORTS_ID_OBJECT_SIP.equals(resourceOrSip)) {
      reportList=BrowserHelper.listTransferredResourcesReportsWithSIP(id,start,limit);
    }
 else {
      if (RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE_PATH.equals(resourceOrSip)) {
        id=IdUtils.getTransferredResourceUUID(id);
      }
      reportList=BrowserHelper.listTransferredResourcesReports(id,start,limit);
    }
  }
  controllerAssistant.registerAction(user,id,LOG_ENTRY_STATE.SUCCESS,RodaConstants.API_QUERY_PARAM_ID,id,RodaConstants.API_GET_REPORTS_ID_OBJECT,resourceOrSip,RodaConstants.API_QUERY_KEY_START,start,RodaConstants.API_QUERY_KEY_LIMIT,limit);
  if (reportList.getReports().isEmpty()) {
    throw new RODAException();
  }
 else {
    return reportList.getReports().get(0);
  }
}",0.9388429752066116
188554,"@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Report.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Report.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceLastReport(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  try {
    Report lastReport=Browser.lastReport(user,id,resourceOrSip,acceptFormat);
    return Response.ok(lastReport,mediaType).build();
  }
 catch (  RODAException e) {
    return Response.ok(new ApiResponseMessage(ApiResponseMessage.ERROR,""String_Node_Str""),mediaType).build();
  }
}","@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Report.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Report.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceLastReport(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE_PATH) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  try {
    Report lastReport=Browser.lastReport(user,id,resourceOrSip,acceptFormat);
    return Response.ok(lastReport,mediaType).build();
  }
 catch (  RODAException e) {
    return Response.ok(new ApiResponseMessage(ApiResponseMessage.ERROR,""String_Node_Str""),mediaType).build();
  }
}",0.998077662437524
188555,"@GET @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Reports.class,responseContainer=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Reports.class,responseContainer=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceReports(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_KEY_START) String start,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_KEY_LIMIT) String limit,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  Reports reportList=Browser.listReports(user,id,resourceOrSip,start,limit,acceptFormat);
  return Response.ok(reportList,mediaType).build();
}","@GET @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Reports.class,responseContainer=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Reports.class,responseContainer=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceReports(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE_PATH) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_KEY_START) String start,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_KEY_LIMIT) String limit,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  Reports reportList=Browser.listReports(user,id,resourceOrSip,start,limit,acceptFormat);
  return Response.ok(reportList,mediaType).build();
}",0.99828001375989
188556,"private String createAncestors(SIP sip,IndexService index,ModelService model,String forcedParent) throws GenericException, RequestNotValidException, AuthorizationDeniedException, NotFoundException, AlreadyExistsException, ValidationException {
  List<String> ancestors=new ArrayList<>(sip.getAncestors());
  if (ancestors.isEmpty())   return null;
  Collections.reverse(ancestors);
  String parent=StringUtils.isBlank(forcedParent) ? null : forcedParent;
  for (  String ancestor : ancestors) {
    try {
      Filter ancestorFilter=new Filter(new SimpleFilterParameter(RodaConstants.INGEST_SIP_ID,ancestor));
      if (!StringUtils.isBlank(forcedParent)) {
        ancestorFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,forcedParent));
      }
      IndexResult<IndexedAIP> result=index.find(IndexedAIP.class,ancestorFilter,Sorter.NONE,new Sublist(0,1));
      if (result.getTotalCount() >= 1) {
        IndexedAIP indexedAIP=result.getResults().get(0);
        parent=indexedAIP.getId();
      }
 else       throw new NotFoundException();
    }
 catch (    NotFoundException e) {
      Job currentJob=PluginHelper.getJob(this,index);
      if (currentJob == null) {
        throw new GenericException(""String_Node_Str"");
      }
      String username=currentJob.getUsername();
      Permissions permissions=new Permissions();
      permissions.setUserPermissions(username,new HashSet<>(Arrays.asList(Permissions.PermissionType.CREATE,Permissions.PermissionType.READ,Permissions.PermissionType.UPDATE,Permissions.PermissionType.DELETE,Permissions.PermissionType.GRANT)));
      boolean isGhost=true;
      AIP ghostAIP=model.createAIP(parent,""String_Node_Str"",permissions,true,ancestor,isGhost,username);
      parent=ghostAIP.getId();
    }
  }
  return parent;
}","private String createAncestors(SIP sip,IndexService index,ModelService model,String forcedParent) throws GenericException, RequestNotValidException, AuthorizationDeniedException, NotFoundException, AlreadyExistsException, ValidationException {
  List<String> ancestors=new ArrayList<>(sip.getAncestors());
  if (ancestors.isEmpty())   return null;
  Collections.reverse(ancestors);
  String parent=StringUtils.isBlank(forcedParent) ? null : forcedParent;
  for (  String ancestor : ancestors) {
    try {
      Filter ancestorFilter=new Filter(new SimpleFilterParameter(RodaConstants.INGEST_SIP_ID,ancestor));
      if (!StringUtils.isBlank(forcedParent)) {
        ancestorFilter.add(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,forcedParent));
      }
      IndexResult<IndexedAIP> result=index.find(IndexedAIP.class,ancestorFilter,Sorter.NONE,new Sublist(0,1));
      if (result.getTotalCount() >= 1) {
        IndexedAIP indexedAIP=result.getResults().get(0);
        parent=indexedAIP.getId();
      }
 else {
        IndexedAIP aip=index.retrieve(IndexedAIP.class,ancestor);
        parent=aip.getId();
      }
    }
 catch (    NotFoundException e) {
      Job currentJob=PluginHelper.getJob(this,index);
      if (currentJob == null) {
        throw new GenericException(""String_Node_Str"");
      }
      String username=currentJob.getUsername();
      Permissions permissions=new Permissions();
      permissions.setUserPermissions(username,new HashSet<>(Arrays.asList(Permissions.PermissionType.CREATE,Permissions.PermissionType.READ,Permissions.PermissionType.UPDATE,Permissions.PermissionType.DELETE,Permissions.PermissionType.GRANT)));
      boolean isGhost=true;
      AIP ghostAIP=model.createAIP(parent,""String_Node_Str"",permissions,true,ancestor,isGhost,username);
      parent=ghostAIP.getId();
    }
  }
  return parent;
}",0.961739609138453
188557,"private void processAIPPermissions(IndexService index,ModelService model,Job currentJob,AIP aip,Report reportItem){
  try {
    String jobCreatorUsername=currentJob.getUsername();
    if (aip.getParentId() != null) {
      try {
        AIP parentAIP=model.retrieveAIP(aip.getParentId());
        Set<PermissionType> userPermissions=parentAIP.getPermissions().getUserPermissions(jobCreatorUsername);
        LOGGER.trace(""String_Node_Str"",jobCreatorUsername,parentAIP.getId(),userPermissions);
        if (userPermissions.contains(PermissionType.CREATE)) {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
        }
 else {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
          reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_PERMISSION_TO_CREATE_UNDER_AIP);
        }
      }
 catch (      NotFoundException nfe) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(PARENT_AIP_NOT_FOUND);
      }
catch (      AuthorizationDeniedException e) {
        LOGGER.debug(""String_Node_Str"");
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_AIP_PERMISSION);
      }
    }
 else {
      RODAMember member=index.retrieve(RODAMember.class,jobCreatorUsername);
      if (member.getAllRoles().contains(RodaConstants.REPOSITORY_PERMISSIONS_AIP_CREATE_TOP)) {
        LOGGER.debug(""String_Node_Str"");
      }
 else {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_CREATE_TOP_LEVEL_AIP_PERMISSION);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  GenericException|RequestNotValidException|NotFoundException e) {
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
  }
}","private void processAIPPermissions(IndexService index,ModelService model,Job currentJob,AIP aip,Report reportItem){
  try {
    String jobCreatorUsername=currentJob.getUsername();
    if (aip.getParentId() != null) {
      try {
        IndexedAIP parentAIP=index.retrieve(IndexedAIP.class,aip.getParentId());
        User user=index.retrieve(User.class,jobCreatorUsername);
        UserUtility.checkObjectPermissions(user,parentAIP,PermissionType.CREATE);
      }
 catch (      NotFoundException nfe) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(PARENT_AIP_NOT_FOUND);
      }
catch (      AuthorizationDeniedException e) {
        LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_PERMISSION_TO_CREATE_UNDER_AIP);
      }
    }
 else {
      RODAMember member=index.retrieve(RODAMember.class,jobCreatorUsername);
      if (member.getAllRoles().contains(RodaConstants.REPOSITORY_PERMISSIONS_AIP_CREATE_TOP)) {
        LOGGER.debug(""String_Node_Str"");
      }
 else {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_CREATE_TOP_LEVEL_AIP_PERMISSION);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  GenericException|NotFoundException e) {
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
  }
}",0.3947368421052631
188558,"public boolean hasObjects(Class<? extends IsRODAObject> objectClass){
  try {
    if (!TransferredResource.class.equals(objectClass)) {
      StoragePath storagePath=ModelUtils.getContainerPath(objectClass);
      try {
        return RodaCoreFactory.getStorageService().countResourcesUnderContainer(storagePath,false).intValue() > 0;
      }
 catch (      NotFoundException e) {
      }
    }
    return false;
  }
 catch (  RODAException e) {
    return false;
  }
}","public boolean hasObjects(Class<? extends IsRODAObject> objectClass){
  try {
    if (LogEntry.class.equals(objectClass) || RODAMember.class.equals(objectClass)) {
      return true;
    }
 else     if (!TransferredResource.class.equals(objectClass)) {
      StoragePath storagePath=ModelUtils.getContainerPath(objectClass);
      try {
        return RodaCoreFactory.getStorageService().countResourcesUnderContainer(storagePath,false).intValue() > 0;
      }
 catch (      NotFoundException e) {
      }
    }
    return false;
  }
 catch (  RODAException e) {
    return false;
  }
}",0.8888888888888888
188559,"public <T extends Serializable>CloseableIterable<OptionalWithCause<T>> list(Class<T> objectClass) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  if (Representation.class.equals(objectClass)) {
    return listRepresentations(objectClass);
  }
 else   if (File.class.equals(objectClass)) {
    return listFiles(objectClass);
  }
 else   if (TransferredResource.class.equals(objectClass)) {
    return RodaCoreFactory.getIndexService().listTransferredResource();
  }
 else {
    StoragePath containerPath=ModelUtils.getContainerPath(objectClass);
    final CloseableIterable<Resource> resourcesIterable=storage.listResourcesUnderContainer(containerPath,false);
    return ResourceParseUtils.convert(getStorage(),resourcesIterable,objectClass);
  }
}","public <T extends Serializable>CloseableIterable<OptionalWithCause<T>> list(Class<T> objectClass) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  if (Representation.class.equals(objectClass)) {
    return listRepresentations(objectClass);
  }
 else   if (File.class.equals(objectClass)) {
    return listFiles(objectClass);
  }
 else   if (TransferredResource.class.equals(objectClass)) {
    return RodaCoreFactory.getIndexService().list(TransferredResource.class);
  }
 else   if (RODAMember.class.equals(objectClass)) {
    return RodaCoreFactory.getIndexService().list(RODAMember.class);
  }
 else   if (LogEntry.class.equals(objectClass)) {
    return RodaCoreFactory.getIndexService().list(LogEntry.class);
  }
 else {
    StoragePath containerPath=ModelUtils.getContainerPath(objectClass);
    final CloseableIterable<Resource> resourcesIterable=storage.listResourcesUnderContainer(containerPath,false);
    return ResourceParseUtils.convert(getStorage(),resourcesIterable,objectClass);
  }
}",0.8631465517241379
188560,"/** 
 */
public static List<Class<? extends IsRODAObject>> getReindexObjectClasses(){
  List<Class<? extends IsRODAObject>> list=new ArrayList<>();
  list.add(TransferredResource.class);
  list.add(AIP.class);
  list.add(Format.class);
  list.add(Notification.class);
  list.add(Risk.class);
  list.add(LogEntry.class);
  list.add(RiskIncidence.class);
  list.add(Job.class);
  return list;
}","/** 
 */
public static List<Class<? extends IsRODAObject>> getReindexObjectClasses(){
  List<Class<? extends IsRODAObject>> list=new ArrayList<>();
  list.add(TransferredResource.class);
  list.add(AIP.class);
  list.add(RODAMember.class);
  list.add(Format.class);
  list.add(Notification.class);
  list.add(Risk.class);
  list.add(LogEntry.class);
  list.add(RiskIncidence.class);
  list.add(Job.class);
  return list;
}",0.9631449631449632
188561,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LogEntry> list) throws PluginException {
  Report pluginReport=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,0);
    jobPluginInfo.setSourceObjectsCount(0);
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    pluginReport.setPluginState(PluginState.SUCCESS);
    Date firstDayToIndex=calculateFirstDayToIndex();
    reindexActionLogsStillNotInStorage(index,firstDayToIndex,pluginReport,jobPluginInfo);
    reindexActionLogsInStorage(index,model,firstDayToIndex,pluginReport,jobPluginInfo);
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return pluginReport;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<LogEntry> list) throws PluginException {
  Report pluginReport=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    jobPluginInfo.setSourceObjectsCount(0);
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    pluginReport.setPluginState(PluginState.SUCCESS);
    Date firstDayToIndex=PluginHelper.calculateFirstDayToIndex(dontReindexOlderThanXDays);
    jobPluginInfo=PluginHelper.reindexActionLogsStillNotInStorage(index,firstDayToIndex,pluginReport,jobPluginInfo,dontReindexOlderThanXDays);
    jobPluginInfo=PluginHelper.reindexActionLogsInStorage(index,model,firstDayToIndex,pluginReport,jobPluginInfo,dontReindexOlderThanXDays);
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return pluginReport;
}",0.9029535864978904
188562,"@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_MANAGEMENT);
}","@Override public List<String> getCategories(){
  return Arrays.asList(RodaConstants.PLUGIN_CATEGORY_NOT_LISTABLE);
}",0.9217391304347826
188563,"@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null && itemBundle != null) {
      Filter filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId),new NotSimpleFilterParameter(RodaConstants.AIP_ID,aipId));
      SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,false);
      if (itemBundle.getAip().getParentID() != null) {
        selectAipDialog.setEmptyParentButtonVisible(true);
      }
      selectAipDialog.showAndCenter();
      selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
        @Override public void onValueChange(        ValueChangeEvent<IndexedAIP> event){
          final IndexedAIP parentAIP=event.getValue();
          final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
          SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
          BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new AsyncCallback<IndexedAIP>(){
            @Override public void onSuccess(            IndexedAIP result){
              if (result != null) {
                Tools.newHistory(Browse.RESOLVER,result.getId());
              }
 else {
                Tools.newHistory(Browse.RESOLVER);
              }
            }
            @Override public void onFailure(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                AsyncCallbackUtils.defaultFailureTreatment(caught);
              }
            }
          }
);
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemToMoveDescription(),messages.dialogOk());
    }
  }
 else {
    Filter filter=new Filter();
    boolean showEmptyParentButton;
    if (aipId != null) {
      filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ID,aipId));
      showEmptyParentButton=true;
    }
 else {
      filter=Filter.NULL;
      showEmptyParentButton=false;
    }
    SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,true);
    selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
    selectAipDialog.showAndCenter();
    selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
      @Override public void onValueChange(      ValueChangeEvent<IndexedAIP> event){
        final IndexedAIP parentAIP=event.getValue();
        final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
        BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
          @Override public void onSuccessImpl(          IndexedAIP result){
            if (result != null) {
              Tools.newHistory(Browse.RESOLVER,result.getId());
            }
 else {
              Tools.newHistory(Browse.RESOLVER);
            }
          }
          @Override public void onFailureImpl(          Throwable caught){
            if (caught instanceof NotFoundException) {
              Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
            }
 else {
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
          }
        }
);
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null && itemBundle != null) {
      Filter filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId),new NotSimpleFilterParameter(RodaConstants.AIP_ID,aipId));
      SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,false);
      if (itemBundle.getAip().getParentID() != null) {
        selectAipDialog.setEmptyParentButtonVisible(true);
      }
      selectAipDialog.showAndCenter();
      selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
        @Override public void onValueChange(        ValueChangeEvent<IndexedAIP> event){
          final IndexedAIP parentAIP=event.getValue();
          final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
          SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
          BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new AsyncCallback<IndexedAIP>(){
            @Override public void onSuccess(            IndexedAIP result){
              if (result != null) {
                Tools.newHistory(Browse.RESOLVER,result.getId());
              }
 else {
                Tools.newHistory(Browse.RESOLVER);
              }
            }
            @Override public void onFailure(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                AsyncCallbackUtils.defaultFailureTreatment(caught);
              }
            }
          }
);
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemToMoveDescription(),messages.dialogOk());
    }
  }
 else {
    Filter filter=new Filter();
    boolean showEmptyParentButton;
    if (aipId != null) {
      filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      filter.add(new NotSimpleFilterParameter(RodaConstants.AIP_ID,aipId));
      showEmptyParentButton=true;
    }
 else {
      filter=Filter.ALL;
      showEmptyParentButton=false;
    }
    SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive,true);
    selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
    selectAipDialog.showAndCenter();
    selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
      @Override public void onValueChange(      ValueChangeEvent<IndexedAIP> event){
        final IndexedAIP parentAIP=event.getValue();
        final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
        BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
          @Override public void onSuccessImpl(          IndexedAIP result){
            if (result != null) {
              Tools.newHistory(Browse.RESOLVER,result.getId());
            }
 else {
              Tools.newHistory(Browse.RESOLVER);
            }
          }
          @Override public void onFailureImpl(          Throwable caught){
            if (caught instanceof NotFoundException) {
              Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
            }
 else {
              AsyncCallbackUtils.defaultFailureTreatment(caught);
            }
          }
        }
);
      }
    }
);
  }
}",0.9995886466474702
188564,"@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=(SelectedItems<IndexedAIP>)getSelected();
  Filter filter;
  boolean showEmptyParentButton;
  filter=new Filter();
  filter=Filter.NULL;
  showEmptyParentButton=false;
  SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,mainSearch.isJustActive(),true);
  selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
  selectAipDialog.showAndCenter();
  selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedAIP> event){
      final IndexedAIP parentAIP=event.getValue();
      final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
      BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
        @Override public void onSuccessImpl(        IndexedAIP result){
          if (result != null) {
            Tools.newHistory(Browse.RESOLVER,result.getId());
          }
 else {
            Tools.newHistory(Search.RESOLVER);
          }
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
        }
      }
);
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=(SelectedItems<IndexedAIP>)getSelected();
  Filter filter;
  boolean showEmptyParentButton;
  filter=new Filter();
  filter=Filter.ALL;
  showEmptyParentButton=false;
  SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,mainSearch.isJustActive(),true);
  selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
  selectAipDialog.showAndCenter();
  selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexedAIP> event){
      final IndexedAIP parentAIP=event.getValue();
      final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
      BrowserService.Util.getInstance().moveAIPInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
        @Override public void onSuccessImpl(        IndexedAIP result){
          if (result != null) {
            Tools.newHistory(Browse.RESOLVER,result.getId());
          }
 else {
            Tools.newHistory(Search.RESOLVER);
          }
        }
        @Override public void onFailureImpl(        Throwable caught){
          if (caught instanceof NotFoundException) {
            Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
          }
 else {
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
        }
      }
);
    }
  }
);
}",0.9989976612094889
188565,"/** 
 * Start ApacheDS.
 */
private static void startApacheDS(){
  rodaApacheDSDataDirectory=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_LDAP_FOLDER);
  try {
    final Configuration rodaConfig=RodaCoreFactory.getRodaConfiguration();
    final boolean ldapStartServer=rodaConfig.getBoolean(""String_Node_Str"",false);
    final int ldapPort=rodaConfig.getInt(""String_Node_Str"",RodaConstants.CORE_LDAP_DEFAULT_PORT);
    final String ldapBaseDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapPeopleDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapGroupsDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapRolesDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapAdminDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapAdminPassword=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapPasswordDigestAlgorithm=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final List<String> ldapProtectedUsers=RodaUtils.copyList(rodaConfig.getList(""String_Node_Str""));
    final List<String> ldapProtectedGroups=RodaUtils.copyList(rodaConfig.getList(""String_Node_Str""));
    final String rodaGuestDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String rodaAdminDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String rodaAdministratorsDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    RodaCoreFactory.ldapUtility=new LdapUtility(ldapStartServer,ldapPort,ldapBaseDN,ldapPeopleDN,ldapGroupsDN,ldapRolesDN,ldapAdminDN,ldapAdminPassword,ldapPasswordDigestAlgorithm,ldapProtectedUsers,ldapProtectedGroups,rodaGuestDN,rodaAdminDN,rodaApacheDSDataDirectory);
    ldapUtility.setRODAAdministratorsDN(rodaAdministratorsDN);
    UserUtility.setLdapUtility(ldapUtility);
    if (!Files.exists(rodaApacheDSDataDirectory)) {
      Files.createDirectories(rodaApacheDSDataDirectory);
      final List<String> ldifFileNames=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      final List<String> ldifs=new ArrayList<>();
      for (      String ldifFileName : ldifFileNames) {
        final InputStream ldifInputStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.CORE_LDAP_FOLDER + ""String_Node_Str"" + ldifFileName);
        ldifs.add(IOUtils.toString(ldifInputStream,RodaConstants.DEFAULT_ENCODING));
        RodaUtils.closeQuietly(ldifInputStream);
      }
      RodaCoreFactory.ldapUtility.initDirectoryService(ldifs);
      indexUsersAndGroupsFromLDAP();
    }
 else {
      RodaCoreFactory.ldapUtility.initDirectoryService();
    }
    createRoles(rodaConfig);
  }
 catch (  final Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    instantiatedWithoutErrors=false;
  }
}","/** 
 * Start ApacheDS.
 */
private static void startApacheDS(){
  rodaApacheDSDataDirectory=RodaCoreFactory.getDataPath().resolve(RodaConstants.CORE_LDAP_FOLDER);
  try {
    final Configuration rodaConfig=RodaCoreFactory.getRodaConfiguration();
    final boolean ldapStartServer=rodaConfig.getBoolean(""String_Node_Str"",false);
    final int ldapPort=rodaConfig.getInt(""String_Node_Str"",RodaConstants.CORE_LDAP_DEFAULT_PORT);
    final String ldapBaseDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapPeopleDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapGroupsDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapRolesDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapAdminDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapAdminPassword=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String ldapPasswordDigestAlgorithm=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final List<String> ldapProtectedUsers=RodaUtils.copyList(rodaConfig.getList(""String_Node_Str""));
    final List<String> ldapProtectedGroups=RodaUtils.copyList(rodaConfig.getList(""String_Node_Str""));
    final String rodaGuestDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String rodaAdminDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    final String rodaAdministratorsDN=rodaConfig.getString(""String_Node_Str"",""String_Node_Str"");
    RodaCoreFactory.ldapUtility=new LdapUtility(ldapStartServer,ldapPort,ldapBaseDN,ldapPeopleDN,ldapGroupsDN,ldapRolesDN,ldapAdminDN,ldapAdminPassword,ldapPasswordDigestAlgorithm,ldapProtectedUsers,ldapProtectedGroups,rodaGuestDN,rodaAdminDN,rodaApacheDSDataDirectory);
    ldapUtility.setRODAAdministratorsDN(rodaAdministratorsDN);
    UserUtility.setLdapUtility(ldapUtility);
    if (!Files.exists(rodaApacheDSDataDirectory)) {
      Files.createDirectories(rodaApacheDSDataDirectory);
      final List<String> ldifFileNames=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      final List<String> ldifs=new ArrayList<>();
      for (      String ldifFileName : ldifFileNames) {
        final InputStream ldifInputStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.CORE_LDAP_FOLDER + ""String_Node_Str"" + ldifFileName);
        ldifs.add(IOUtils.toString(ldifInputStream,RodaConstants.DEFAULT_ENCODING));
        RodaUtils.closeQuietly(ldifInputStream);
      }
      RodaCoreFactory.ldapUtility.initDirectoryService(ldifs);
      indexUsersAndGroupsFromLDAP();
    }
 else {
      RodaCoreFactory.ldapUtility.initDirectoryService();
    }
    createRoles(rodaConfig);
    indexUsersAndGroupsFromLDAP();
  }
 catch (  final Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    instantiatedWithoutErrors=false;
  }
}",0.9939309866481706
188566,"@Override public void onSelectionChange(SelectedItems<IndexedAIP> selected){
  boolean empty=SelectedItemsUtils.isEmpty(selected);
  if (empty) {
    moveItem.setEnabled(false);
    editPermissions.setEnabled(false);
  }
 else {
    moveItem.setEnabled(true);
    editPermissions.setEnabled(true);
  }
}","@Override public void onSelectionChange(SelectedItems<IndexedAIP> selected){
  boolean empty=SelectedItemsUtils.isEmpty(selected);
  moveItem.setEnabled(!empty);
  editPermissions.setEnabled(!empty);
}",0.75
188567,"private Browse(){
  viewingTop=true;
  handlers=new ArrayList<HandlerRegistration>();
  String summary=messages.listOfItems();
  boolean selectable=true;
  aipList=new AIPList(Filter.NULL,justActive,FACETS,summary,selectable);
  searchPanel=new SearchPanel(COLLECTIONS_FILTER,RodaConstants.AIP_SEARCH,messages.searchPlaceHolder(),false,false,false);
  searchPanel.setDefaultFilterIncremental(true);
  searchPanel.setList(aipList);
  initWidget(uiBinder.createAndBindUi(this));
  browseDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  aipList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      IndexedAIP aip=aipList.getSelectionModel().getSelectedObject();
      if (aip != null) {
        view(aip.getId());
      }
    }
  }
);
  aipList.addValueChangeHandler(new ValueChangeHandler<IndexResult<IndexedAIP>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<IndexedAIP>> event){
      if (!viewingTop && event.getValue().getTotalCount() > 0 && !searchable) {
        searchable=true;
      }
      fondsPanelTitle.setVisible(searchable);
      searchPanel.setVisible(searchable);
      aipList.setVisible(viewingTop || searchable);
    }
  }
);
  aipList.addCheckboxSelectionListener(new CheckboxSelectionListener<IndexedAIP>(){
    @Override public void onSelectionChange(    SelectedItems<IndexedAIP> selected){
      boolean empty=SelectedItemsUtils.isEmpty(selected);
      if (empty) {
        moveItem.setEnabled(false);
        editPermissions.setEnabled(false);
      }
 else {
        moveItem.setEnabled(true);
        editPermissions.setEnabled(true);
      }
    }
  }
);
  UserLogin.getInstance().getAuthenticatedUser(new AsyncCallback<User>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    User user){
      onPermissionsUpdate(user);
    }
  }
);
}","private Browse(){
  viewingTop=true;
  handlers=new ArrayList<HandlerRegistration>();
  String summary=messages.listOfItems();
  boolean selectable=true;
  aipList=new AIPList(Filter.NULL,justActive,FACETS,summary,selectable);
  searchPanel=new SearchPanel(COLLECTIONS_FILTER,RodaConstants.AIP_SEARCH,messages.searchPlaceHolder(),false,false,false);
  searchPanel.setDefaultFilterIncremental(true);
  searchPanel.setList(aipList);
  initWidget(uiBinder.createAndBindUi(this));
  browseDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  aipList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      IndexedAIP aip=aipList.getSelectionModel().getSelectedObject();
      if (aip != null) {
        view(aip.getId());
      }
    }
  }
);
  aipList.addValueChangeHandler(new ValueChangeHandler<IndexResult<IndexedAIP>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<IndexedAIP>> event){
      if (!viewingTop && event.getValue().getTotalCount() > 0 && !searchable) {
        searchable=true;
      }
      fondsPanelTitle.setVisible(searchable);
      searchPanel.setVisible(searchable);
      aipList.setVisible(viewingTop || searchable);
    }
  }
);
  aipList.addCheckboxSelectionListener(new CheckboxSelectionListener<IndexedAIP>(){
    @Override public void onSelectionChange(    SelectedItems<IndexedAIP> selected){
      boolean empty=SelectedItemsUtils.isEmpty(selected);
      moveItem.setEnabled(!empty);
      editPermissions.setEnabled(!empty);
    }
  }
);
  UserLogin.getInstance().getAuthenticatedUser(new AsyncCallback<User>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    User user){
      onPermissionsUpdate(user);
    }
  }
);
}",0.9369877049180328
188568,"@Override public void onSuccess(Void result){
  Tools.newHistory(ShowRisk.RESOLVER,risk.getId());
}","@Override public void onSuccess(Void result){
  Tools.newHistory(RiskRegister.RESOLVER);
}",0.8677248677248677
188569,"@Override public Notification processNotification(ModelService model,final Notification notification){
  Notification processedNotification=new Notification(notification);
  try {
    List<String> recipients=notification.getRecipientUsers();
    String templatePath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(templatePath + templateName);
    String template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
    IOUtils.closeQuietly(templateStream);
    if (!scope.containsKey(FROM)) {
      scope.put(FROM,notification.getFromUser());
    }
    if (recipients.size() == 1) {
      scope.put(RECIPIENT,recipients.get(0));
    }
 else {
      scope.put(RECIPIENT,RodaConstants.NOTIFICATION_VARIOUS_RECIPIENT_USERS);
    }
    processedNotification.setBody(executeHandlebars(template,scope));
    scope.remove(RECIPIENT);
    ConfigurableEmailUtility emailUtility=new ConfigurableEmailUtility(notification.getFromUser(),notification.getSubject());
    for (    String recipient : recipients) {
      String modifiedBody=getUpdatedMessageBody(model,notification,recipient,template,scope);
      String host=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (StringUtils.isNotBlank(host)) {
        LOGGER.debug(""String_Node_Str"");
        emailUtility.sendMail(recipient,modifiedBody);
        LOGGER.debug(""String_Node_Str"");
        processedNotification.setState(NOTIFICATION_STATE.COMPLETED);
      }
 else {
        processedNotification.setState(NOTIFICATION_STATE.FAILED);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  IOException|MessagingException e) {
    processedNotification.setState(NOTIFICATION_STATE.FAILED);
    LOGGER.debug(""String_Node_Str"",e.getMessage());
  }
  return processedNotification;
}","@Override public Notification processNotification(ModelService model,final Notification notification){
  Notification processedNotification=new Notification(notification);
  try {
    List<String> recipients=processedNotification.getRecipientUsers();
    String templatePath=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(templatePath + templateName);
    String template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
    IOUtils.closeQuietly(templateStream);
    if (!scope.containsKey(FROM)) {
      scope.put(FROM,processedNotification.getFromUser());
    }
    if (recipients.size() == 1) {
      scope.put(RECIPIENT,recipients.get(0));
    }
 else {
      scope.put(RECIPIENT,RodaConstants.NOTIFICATION_VARIOUS_RECIPIENT_USERS);
    }
    processedNotification.setBody(executeHandlebars(template,scope));
    scope.remove(RECIPIENT);
    ConfigurableEmailUtility emailUtility=new ConfigurableEmailUtility(processedNotification.getFromUser(),processedNotification.getSubject());
    for (    String recipient : recipients) {
      String modifiedBody=getUpdatedMessageBody(model,notification,recipient,template,scope);
      String host=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (StringUtils.isNotBlank(host)) {
        LOGGER.debug(""String_Node_Str"");
        emailUtility.sendMail(recipient,modifiedBody);
        LOGGER.debug(""String_Node_Str"");
        processedNotification.setState(NOTIFICATION_STATE.COMPLETED);
      }
 else {
        processedNotification.setState(NOTIFICATION_STATE.FAILED);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  IOException|MessagingException e) {
    processedNotification.setState(NOTIFICATION_STATE.FAILED);
    LOGGER.debug(""String_Node_Str"",e.getMessage());
  }
  return processedNotification;
}",0.9887869520897044
188570,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  if (userDataPanel.isValid()) {
    String recaptchaResponse=null;
    if (recaptchaActive) {
      recaptchaResponse=recaptchaWidget.getResponse();
    }
    user=userDataPanel.getUser();
    user.setActive(false);
    final String password=userDataPanel.getPassword();
    final String recaptcha=recaptchaResponse;
    UserManagementService.Util.getInstance().registerUser(user,password,recaptcha,userDataPanel.getExtra(),new AsyncCallback<User>(){
      @Override public void onFailure(      Throwable caught){
        errorMessage(caught);
      }
      @Override public void onSuccess(      User result){
        if (result.isActive()) {
          Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessageActive(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
            @Override public void onSuccess(            Void result){
              Tools.newHistory(Login.RESOLVER);
            }
            @Override public void onFailure(            Throwable caught){
              Tools.newHistory(Login.RESOLVER);
            }
          }
);
        }
 else {
          UserManagementService.Util.getInstance().sendEmailVerification(user.getId(),new AsyncCallback<Notification>(){
            @Override public void onSuccess(            Notification result){
              if (result.getState() == NOTIFICATION_STATE.COMPLETED) {
                Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessage(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
                  @Override public void onSuccess(                  Void result){
                    Tools.newHistory(Login.RESOLVER);
                  }
                  @Override public void onFailure(                  Throwable caught){
                    Tools.newHistory(Login.RESOLVER);
                  }
                }
);
              }
 else {
                user.setActive(true);
                UserManagementService.Util.getInstance().updateUser(user,password,userDataPanel.getExtra(),new AsyncCallback<Void>(){
                  @Override public void onFailure(                  Throwable caught){
                    errorMessage(caught);
                  }
                  @Override public void onSuccess(                  Void result){
                    Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessageActive(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
                      @Override public void onSuccess(                      Void result){
                        Tools.newHistory(Login.RESOLVER);
                      }
                      @Override public void onFailure(                      Throwable caught){
                        Tools.newHistory(Login.RESOLVER);
                      }
                    }
);
                  }
                }
);
              }
            }
            @Override public void onFailure(            Throwable caught){
              sendEmailVerificationFailure(caught);
            }
          }
);
        }
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  if (userDataPanel.isValid()) {
    String recaptchaResponse=null;
    if (recaptchaActive) {
      recaptchaResponse=recaptchaWidget.getResponse();
    }
    user=userDataPanel.getUser();
    user.setActive(false);
    final String password=userDataPanel.getPassword();
    final String recaptcha=recaptchaResponse;
    UserManagementService.Util.getInstance().registerUser(user,password,recaptcha,userDataPanel.getExtra(),new AsyncCallback<User>(){
      @Override public void onFailure(      Throwable caught){
        errorMessage(caught);
      }
      @Override public void onSuccess(      final User registeredUser){
        if (registeredUser.isActive()) {
          Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessageActive(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
            @Override public void onSuccess(            Void result){
              Tools.newHistory(Login.RESOLVER);
            }
            @Override public void onFailure(            Throwable caught){
              Tools.newHistory(Login.RESOLVER);
            }
          }
);
        }
 else {
          UserManagementService.Util.getInstance().sendEmailVerification(registeredUser.getId(),new AsyncCallback<Notification>(){
            @Override public void onSuccess(            Notification result){
              if (result.getState() == NOTIFICATION_STATE.COMPLETED) {
                Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessage(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
                  @Override public void onSuccess(                  Void result){
                    Tools.newHistory(Login.RESOLVER);
                  }
                  @Override public void onFailure(                  Throwable caught){
                    Tools.newHistory(Login.RESOLVER);
                  }
                }
);
              }
 else {
                registeredUser.setActive(true);
                UserManagementService.Util.getInstance().updateUser(registeredUser,password,userDataPanel.getExtra(),new AsyncCallback<Void>(){
                  @Override public void onFailure(                  Throwable caught){
                    errorMessage(caught);
                  }
                  @Override public void onSuccess(                  Void result){
                    Dialogs.showInformationDialog(messages.registerSuccessDialogTitle(),messages.registerSuccessDialogMessageActive(),messages.registerSuccessDialogButton(),new AsyncCallback<Void>(){
                      @Override public void onSuccess(                      Void result){
                        Tools.newHistory(Login.RESOLVER);
                      }
                      @Override public void onFailure(                      Throwable caught){
                        Tools.newHistory(Login.RESOLVER);
                      }
                    }
);
                  }
                }
);
              }
            }
            @Override public void onFailure(            Throwable caught){
              sendEmailVerificationFailure(caught);
            }
          }
);
        }
      }
    }
);
  }
}",0.988750380054728
188571,"private static void mainMasterTasks(final List<String> args) throws GenericException, RequestNotValidException {
  if (""String_Node_Str"".equals(args.get(0))) {
    if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)) || ""String_Node_Str"".equals(args.get(2)))) {
      final Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.MEMBERS_IS_USER,""String_Node_Str"".equals(args.get(2)) ? ""String_Node_Str"" : ""String_Node_Str""));
      printIndexMembers(args,filter,null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printCountSips(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printFiles(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printEvents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printAgents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 4 && StringUtils.isNotBlank(args.get(2)) && StringUtils.isNotBlank(args.get(3))) {
      runSolrQuery(args);
    }
 else     if (""String_Node_Str"".equals(args.get(1))) {
      runReindex(args);
    }
  }
  if (""String_Node_Str"".equals(args.get(0))) {
    final List<String> resetParams=args.subList(1,args.size());
    if (resetParams.contains(""String_Node_Str"")) {
      resetAdminAccess();
    }
  }
 else {
    printMainUsage();
  }
}","private static void mainMasterTasks(final List<String> args) throws GenericException, RequestNotValidException {
  if (""String_Node_Str"".equals(args.get(0))) {
    if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)) || ""String_Node_Str"".equals(args.get(2)))) {
      final Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.MEMBERS_IS_USER,""String_Node_Str"".equals(args.get(2)) ? ""String_Node_Str"" : ""String_Node_Str""));
      printIndexMembers(args,filter,null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printCountSips(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printFiles(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printEvents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printAgents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 4 && StringUtils.isNotBlank(args.get(2)) && StringUtils.isNotBlank(args.get(3))) {
      runSolrQuery(args);
    }
 else     if (""String_Node_Str"".equals(args.get(1))) {
      runReindex(args);
    }
  }
  if (""String_Node_Str"".equals(args.get(0))) {
    final List<String> resetParams=args.subList(1,args.size());
    if (resetParams.isEmpty()) {
      printResetUsage();
    }
 else {
      final String resetParam=resetParams.get(0);
      if (""String_Node_Str"".equals(resetParam)) {
        resetAdminAccess();
      }
 else {
        System.err.println(""String_Node_Str"" + resetParam + ""String_Node_Str"");
        printResetUsage();
      }
    }
  }
 else {
    printMainUsage();
  }
}",0.9149054505005562
188572,"private static void resetAdminAccess() throws GenericException {
  try {
    final String password=readPassword(""String_Node_Str"");
    final String passwordConfirmation=readPassword(""String_Node_Str"");
    if (password.equals(passwordConfirmation)) {
      RodaCoreFactory.ldapUtility.resetAdminAccess(password);
      System.out.println(""String_Node_Str"");
    }
 else {
      throw new GenericException(""String_Node_Str"");
    }
  }
 catch (  final IOException|LdapUtilityException e) {
    throw new GenericException(e.getMessage(),e);
  }
 finally {
    try {
      RodaCoreFactory.shutdown();
    }
 catch (    final Exception e) {
      e.printStackTrace(System.err);
    }
  }
}","private static void resetAdminAccess() throws GenericException {
  try {
    final String password=readPassword(""String_Node_Str"");
    final String passwordConfirmation=readPassword(""String_Node_Str"");
    if (password.equals(passwordConfirmation)) {
      RodaCoreFactory.ldapUtility.resetAdminAccess(password);
      try {
        indexUsersAndGroupsFromLDAP();
      }
 catch (      final Exception e) {
        LOGGER.warn(""String_Node_Str"" + e.getMessage(),e);
        System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
    }
 else {
      throw new GenericException(""String_Node_Str"");
    }
  }
 catch (  final IOException|LdapUtilityException e) {
    throw new GenericException(e.getMessage(),e);
  }
 finally {
    try {
      RodaCoreFactory.shutdown();
    }
 catch (    final Exception e) {
      e.printStackTrace(System.err);
    }
  }
}",0.8484848484848485
188573,"/** 
 * Sets the groups to which a member belongs to.
 * @param session the session.
 * @param memberDN the DN of the member to change the groups for.
 * @param groups a list of groups that this member should belong to.
 * @throws LdapException if some error occurs.
 */
private void setMemberGroups(final CoreSession session,final String memberDN,final Set<String> groups) throws LdapException {
  final Set<String> newGroups=(groups == null) ? new HashSet<>() : new HashSet<>(groups);
  final Set<String> oldgroupDNs=getDNsOfGroupsContainingMember(session,memberDN);
  final Set<String> newgroupDNs=new HashSet<>();
  for (  String groupName : newGroups) {
    newgroupDNs.add(getGroupDN(groupName));
  }
  final Set<String> tempOldgroupDNs=new HashSet<>(oldgroupDNs);
  tempOldgroupDNs.removeAll(newgroupDNs);
  for (  String groupDN : tempOldgroupDNs) {
    removeMemberFromRoleOrGroup(session,groupDN,memberDN,UNIQUE_MEMBER);
  }
  newgroupDNs.removeAll(oldgroupDNs);
  if (this.rodaAdminDN.equals(memberDN)) {
    newgroupDNs.add(this.rodaAdministratorsDN);
  }
  for (  String groupDN : newgroupDNs) {
    addMemberToRoleOrGroup(session,groupDN,memberDN,UNIQUE_MEMBER);
  }
}","/** 
 * Sets the groups to which a member belongs to.
 * @param session the session.
 * @param memberDN the DN of the member to change the groups for.
 * @param groups a list of groups that this member should belong to.
 * @throws LdapException if some error occurs.
 */
private void setMemberGroups(final CoreSession session,final String memberDN,final Set<String> groups) throws LdapException {
  final Set<String> newGroups=(groups == null) ? new HashSet<>() : new HashSet<>(groups);
  final Set<String> oldgroupDNs=getDNsOfGroupsContainingMember(session,memberDN);
  final Set<String> newgroupDNs=new HashSet<>();
  for (  String groupName : newGroups) {
    newgroupDNs.add(getGroupDN(groupName));
  }
  final Set<String> tempOldgroupDNs=new HashSet<>(oldgroupDNs);
  tempOldgroupDNs.removeAll(newgroupDNs);
  for (  String groupDN : tempOldgroupDNs) {
    removeMemberFromRoleOrGroup(session,groupDN,memberDN,UNIQUE_MEMBER);
  }
  newgroupDNs.removeAll(oldgroupDNs);
  if (this.rodaAdminDN.equals(memberDN)) {
    newgroupDNs.add(this.rodaAdministratorsDN);
  }
  for (  String groupDN : newgroupDNs) {
    try {
      addMemberToRoleOrGroup(session,groupDN,memberDN,UNIQUE_MEMBER);
    }
 catch (    final LdapNoSuchObjectException e) {
      LOGGER.debug(""String_Node_Str"",groupDN);
    }
  }
}",0.9516908212560388
188574,"public void resetAdminAccess(final String password) throws LdapUtilityException, GenericException {
  try {
    final CoreSession session=this.service.getAdminSession();
    final String adminName=getFirstNameFromDN(this.rodaAdminDN);
    final String administratorsName=getFirstNameFromDN(this.rodaAdministratorsDN);
    User admin;
    try {
      admin=getUser(session,adminName);
    }
 catch (    final LdapNoSuchObjectException e) {
      admin=new User(adminName);
      admin=addUser(admin);
    }
    admin.setActive(true);
    modifyUser(session,admin,password,true,true);
    Group administrators;
    try {
      administrators=getGroup(session,administratorsName);
    }
 catch (    final LdapNoSuchObjectException e) {
      administrators=addGroup(new Group(administratorsName));
      administrators.setActive(true);
    }
    administrators.setDirectRoles(getRoles(session));
    administrators.addMemberUser(adminName);
    modifyGroup(administrators,true);
  }
 catch (  final UserAlreadyExistsException|EmailAlreadyExistsException|NotFoundException|IllegalOperationException|GroupAlreadyExistsException|LdapException e) {
    throw new LdapUtilityException(e.getMessage(),e);
  }
}","public void resetAdminAccess(final String password) throws LdapUtilityException, GenericException {
  try {
    final CoreSession session=this.service.getAdminSession();
    final String adminName=getFirstNameFromDN(this.rodaAdminDN);
    final String administratorsName=getFirstNameFromDN(this.rodaAdministratorsDN);
    User admin;
    try {
      admin=getUser(session,adminName);
    }
 catch (    final LdapNoSuchObjectException e) {
      admin=new User(adminName);
      admin=addUser(admin);
    }
    admin.setActive(true);
    modifyUser(session,admin,password,false,true);
    Group administrators;
    try {
      administrators=getGroup(session,administratorsName);
    }
 catch (    final LdapNoSuchObjectException e) {
      administrators=addGroup(new Group(administratorsName));
      administrators.setActive(true);
    }
    administrators.setDirectRoles(getRoles(session));
    administrators.addMemberUser(adminName);
    modifyGroup(administrators,true);
  }
 catch (  final UserAlreadyExistsException|EmailAlreadyExistsException|NotFoundException|IllegalOperationException|GroupAlreadyExistsException|LdapException e) {
    throw new LdapUtilityException(e.getMessage(),e);
  }
}",0.9970869746150643
188575,"private User getUserFromEntry(final Entry entry) throws LdapException {
  final User user=new User(getEntryAttributeAsString(entry,UID));
  user.setFullName(getEntryAttributeAsString(entry,CN));
  user.setActive(""String_Node_Str"".equalsIgnoreCase(getEntryAttributeAsString(entry,SHADOW_INACTIVE)));
  user.setEmail(entry.get(EMAIL).getString());
  user.setGuest(false);
  user.setExtra(getEntryAttributeAsString(entry,""String_Node_Str""));
  if (entry.get(""String_Node_Str"") != null) {
    final String infoStr=entry.get(""String_Node_Str"").getString();
    final String[] parts=infoStr.split(""String_Node_Str"");
    if (parts.length >= 1 && parts[0].trim().length() > 0) {
      user.setEmailConfirmationToken(parts[0].trim());
    }
    if (parts.length >= 2 && parts[1].trim().length() > 0) {
      user.setEmailConfirmationTokenExpirationDate(parts[1].trim());
    }
    if (parts.length >= 3 && parts[2].trim().length() > 0) {
      user.setResetPasswordToken(parts[2].trim());
    }
    if (parts.length >= 4 && parts[3].trim().length() > 0) {
      user.setResetPasswordTokenExpirationDate(parts[3].trim());
    }
  }
  return user;
}","private User getUserFromEntry(final Entry entry) throws LdapException {
  final User user=new User(getEntryAttributeAsString(entry,UID));
  user.setFullName(getEntryAttributeAsString(entry,CN));
  user.setActive(""String_Node_Str"".equalsIgnoreCase(getEntryAttributeAsString(entry,SHADOW_INACTIVE)));
  user.setEmail(getEntryAttributeAsString(entry,EMAIL));
  user.setGuest(false);
  user.setExtra(getEntryAttributeAsString(entry,""String_Node_Str""));
  if (entry.get(""String_Node_Str"") != null) {
    final String infoStr=entry.get(""String_Node_Str"").getString();
    final String[] parts=infoStr.split(""String_Node_Str"");
    if (parts.length >= 1 && parts[0].trim().length() > 0) {
      user.setEmailConfirmationToken(parts[0].trim());
    }
    if (parts.length >= 2 && parts[1].trim().length() > 0) {
      user.setEmailConfirmationTokenExpirationDate(parts[1].trim());
    }
    if (parts.length >= 3 && parts[2].trim().length() > 0) {
      user.setResetPasswordToken(parts[2].trim());
    }
    if (parts.length >= 4 && parts[3].trim().length() > 0) {
      user.setResetPasswordTokenExpirationDate(parts[3].trim());
    }
  }
  return user;
}",0.9763986013986014
188576,"public static List<String> getRodaConfigurationAsList(String... keyParts){
  return Arrays.asList(rodaConfiguration.getStringArray(getConfigurationKey(keyParts)));
}","public static List<String> getRodaConfigurationAsList(String... keyParts){
  String[] array=rodaConfiguration.getStringArray(getConfigurationKey(keyParts));
  List<String> res=Arrays.asList(array);
  List<String> clean=new ArrayList<String>();
  for (  String s : res) {
    if (s != null && !s.trim().equalsIgnoreCase(""String_Node_Str"")) {
      clean.add(s);
    }
  }
  return clean;
}",0.3688969258589512
188577,"/** 
 * For each role in roda-roles.properties create the role in LDAP if it don't exist already.
 * @param rodaConfig roda configuration
 * @throws GenericException if something unexpected happens creating roles.
 */
private static void createRoles(final Configuration rodaConfig) throws GenericException {
  final Iterator<String> keys=rodaConfig.getKeys(""String_Node_Str"");
  final Set<String> roles=new HashSet<>();
  while (keys.hasNext()) {
    roles.addAll(Arrays.asList(rodaConfig.getStringArray(keys.next())));
  }
  for (  final String role : roles) {
    try {
      RodaCoreFactory.ldapUtility.addRole(role);
      LOGGER.info(""String_Node_Str"",role);
    }
 catch (    final RoleAlreadyExistsException e) {
      LOGGER.info(""String_Node_Str"",role);
      LOGGER.trace(e.getMessage(),e);
    }
catch (    final LdapUtilityException e) {
      throw new GenericException(""String_Node_Str"" + role + ""String_Node_Str"",e);
    }
  }
}","/** 
 * For each role in roda-roles.properties create the role in LDAP if it don't exist already.
 * @param rodaConfig roda configuration
 * @throws GenericException if something unexpected happens creating roles.
 */
private static void createRoles(final Configuration rodaConfig) throws GenericException {
  final Iterator<String> keys=rodaConfig.getKeys(""String_Node_Str"");
  final Set<String> roles=new HashSet<>();
  while (keys.hasNext()) {
    roles.addAll(Arrays.asList(rodaConfig.getStringArray(keys.next())));
  }
  for (  final String role : roles) {
    try {
      if (!role.trim().equalsIgnoreCase(""String_Node_Str"")) {
        RodaCoreFactory.ldapUtility.addRole(role);
        LOGGER.info(""String_Node_Str"",role);
      }
    }
 catch (    final RoleAlreadyExistsException e) {
      LOGGER.info(""String_Node_Str"",role);
      LOGGER.trace(e.getMessage(),e);
    }
catch (    final LdapUtilityException e) {
      throw new GenericException(""String_Node_Str"" + role + ""String_Node_Str"",e);
    }
  }
}",0.9622448979591836
188578,"public static void checkRoles(final User user,final Class<?> invokingMethodInnerClass,final Class<?> classToReturn) throws AuthorizationDeniedException {
  final Method method=invokingMethodInnerClass.getEnclosingMethod();
  final String classParam=(classToReturn == null) ? ""String_Node_Str"" : ""String_Node_Str"" + classToReturn.getSimpleName() + ""String_Node_Str"";
  final String configKey=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),classParam);
  final List<String> roles=RodaCoreFactory.getRodaConfigurationAsList(configKey);
  checkRoles(user,roles);
}","public static void checkRoles(final User user,final Class<?> invokingMethodInnerClass,final Class<?> classToReturn) throws AuthorizationDeniedException {
  final Method method=invokingMethodInnerClass.getEnclosingMethod();
  final String classParam=(classToReturn == null) ? ""String_Node_Str"" : ""String_Node_Str"" + classToReturn.getSimpleName() + ""String_Node_Str"";
  final String configKey=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),classParam);
  if (RodaCoreFactory.getRodaConfiguration().containsKey(configKey)) {
    final List<String> roles=RodaCoreFactory.getRodaConfigurationAsList(configKey);
    checkRoles(user,roles);
  }
 else {
    LOGGER.error(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ configKey);
    throw new AuthorizationDeniedException(""String_Node_Str"" + configKey);
  }
}",0.8267770876466529
188579,"public User registerUser(User user,String password,boolean notify) throws GenericException, UserAlreadyExistsException, EmailAlreadyExistsException {
  try {
    user=UserUtility.resetGroupsAndRoles(user);
    User registeredUser=UserUtility.getLdapUtility().registerUser(user,password);
    if (notify) {
      notifyUserCreated(registeredUser);
    }
    return registeredUser;
  }
 catch (  LdapUtilityException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
catch (  UserAlreadyExistsException e) {
    throw new UserAlreadyExistsException(""String_Node_Str"",e);
  }
catch (  EmailAlreadyExistsException e) {
    throw new EmailAlreadyExistsException(""String_Node_Str"",e);
  }
}","public User registerUser(User user,String password,boolean notify) throws GenericException, UserAlreadyExistsException, EmailAlreadyExistsException {
  try {
    User registeredUser=UserUtility.getLdapUtility().registerUser(user,password);
    if (notify) {
      notifyUserCreated(registeredUser);
    }
    return registeredUser;
  }
 catch (  LdapUtilityException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
catch (  UserAlreadyExistsException e) {
    throw new UserAlreadyExistsException(""String_Node_Str"",e);
  }
catch (  EmailAlreadyExistsException e) {
    throw new EmailAlreadyExistsException(""String_Node_Str"",e);
  }
}",0.9642857142857144
188580,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        List<String> passedFiles=new ArrayList<String>();
        List<String> failedFiles=new ArrayList<String>();
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
          try {
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
                    if (passedFixity) {
                      passedFiles.add(fileEntry);
                    }
 else {
                      failedFiles.add(fileEntry);
                      aipFailed=true;
                      createRiskAndIncidence(model,file,risks.get(0));
                    }
                  }
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"",r.getId(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"" + failedFiles);
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.FAILURE,""String_Node_Str"" + failedFiles.toString(),true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        List<String> passedFiles=new ArrayList<String>();
        Map<String,Pair<String,String>> failedFiles=new HashMap<>();
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"",r.getId(),aip.getId());
          try {
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  String fileEntry=file.getRepresentationId() + (file.getPath().isEmpty() ? ""String_Node_Str"" : '/' + String.join(""String_Node_Str"",file.getPath())) + '/'+ file.getId();
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          failedFiles.put(fileEntry,new Pair<>(f.getMessageDigest().trim(),checksum.trim()));
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    if (passedFixity) {
                      passedFiles.add(fileEntry);
                    }
 else {
                      aipFailed=true;
                      createIncidence(model,file,risks.get(0));
                    }
                  }
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"",r.getId(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            ValidationReport validationReport=new ValidationReport();
            for (            Entry<String,Pair<String,String>> entry : failedFiles.entrySet()) {
              ValidationIssue issue=new ValidationIssue(entry.getKey() + ""String_Node_Str"" + entry.getValue().getFirst()+ ""String_Node_Str""+ entry.getValue().getSecond()+ ""String_Node_Str"");
              validationReport.addIssue(issue);
            }
            reportItem.setPluginState(PluginState.FAILURE).setHtmlPluginDetails(true).setPluginDetails(validationReport.toHtml(false,false,false,""String_Node_Str""));
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.FAILURE,validationReport.toHtml(false,false,false,""String_Node_Str""),true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}",0.8557575757575757
188581,"public void refresh(){
  if (itemsSearchResultPanel != null && itemsSearchAdvancedFieldsPanel.isVisible()) {
    itemsSearchResultPanel.refresh();
  }
  if (representationsSearchResultPanel != null && representationsSearchAdvancedFieldsPanel.isVisible()) {
    representationsSearchResultPanel.refresh();
  }
  if (filesSearchResultPanel != null && filesSearchAdvancedFieldsPanel.isVisible()) {
    filesSearchResultPanel.refresh();
  }
}","public void refresh(){
  if (itemsSearchResultPanel != null && itemsSearchResultPanel.hasElementsSelected()) {
    itemsSearchResultPanel.refresh();
  }
 else   if (representationsSearchResultPanel != null && representationsSearchResultPanel.hasElementsSelected()) {
    representationsSearchResultPanel.refresh();
  }
 else   if (filesSearchResultPanel != null && filesSearchResultPanel.hasElementsSelected()) {
    filesSearchResultPanel.refresh();
  }
}",0.7919463087248322
188582,"public SelectedItems<?> getSelected(){
  SelectedItems<?> selected=null;
  if (itemsSearchResultPanel != null && itemsSearchAdvancedFieldsPanel.isVisible()) {
    selected=itemsSearchResultPanel.getSelected();
  }
  if (representationsSearchResultPanel != null && representationsSearchAdvancedFieldsPanel.isVisible()) {
    selected=representationsSearchResultPanel.getSelected();
  }
  if (filesSearchResultPanel != null && filesSearchAdvancedFieldsPanel.isVisible()) {
    selected=filesSearchResultPanel.getSelected();
  }
  if (selected == null) {
    selected=new SelectedItemsList<>();
  }
  return selected;
}","public SelectedItems<?> getSelected(){
  SelectedItems<?> selected=null;
  if (itemsSearchResultPanel != null && itemsSearchResultPanel.hasElementsSelected()) {
    selected=itemsSearchResultPanel.getSelected();
  }
 else   if (representationsSearchResultPanel != null && representationsSearchResultPanel.hasElementsSelected()) {
    selected=representationsSearchResultPanel.getSelected();
  }
 else   if (filesSearchResultPanel != null && filesSearchResultPanel.hasElementsSelected()) {
    selected=filesSearchResultPanel.getSelected();
  }
  if (selected == null) {
    selected=new SelectedItemsList<>();
  }
  return selected;
}",0.8752
188583,"public static StreamResponse retrieveClassificationPlan(String type,User user) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    ObjectNode root=mapper.createObjectNode();
    ArrayNode array=mapper.createArrayNode();
    List<DescriptionLevel> descriptionLevels=DescriptionLevelUtils.getAllButRepresentationsDescriptionLevels();
    List<String> descriptionsLevels=descriptionLevels.stream().map(d -> d.getLevel()).collect(Collectors.toList());
    Filter allButRepresentationsFilter=new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_LEVEL,descriptionsLevels));
    IndexService index=RodaCoreFactory.getIndexService();
    long collectionsCount=index.count(IndexedAIP.class,allButRepresentationsFilter);
    for (int i=0; i < collectionsCount; i+=RodaConstants.DEFAULT_PAGINATION_VALUE) {
      IndexResult<IndexedAIP> collections=index.find(IndexedAIP.class,allButRepresentationsFilter,null,new Sublist(i,RodaConstants.DEFAULT_PAGINATION_VALUE));
      for (      IndexedAIP aip : collections.getResults()) {
        array.add(aipToJSON(aip));
      }
    }
    root.set(""String_Node_Str"",array);
    StringWriter sw=new StringWriter();
    mapper.writeValue(sw,root);
    StreamingOutput stream=new StreamingOutput(){
      @Override public void write(      OutputStream os) throws IOException, WebApplicationException {
        IOUtils.write(sw.toString().getBytes(""String_Node_Str""),os);
      }
    }
;
    return new StreamResponse(""String_Node_Str"",MediaType.APPLICATION_JSON,stream);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
}","public static StreamResponse retrieveClassificationPlan(String type,User user) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    ObjectNode root=mapper.createObjectNode();
    ArrayNode array=mapper.createArrayNode();
    List<String> descriptionsLevels=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.LEVELS_CLASSIFICATION_PLAN));
    Filter allButRepresentationsFilter=new Filter(new OneOfManyFilterParameter(RodaConstants.AIP_LEVEL,descriptionsLevels));
    IndexService index=RodaCoreFactory.getIndexService();
    long collectionsCount=index.count(IndexedAIP.class,allButRepresentationsFilter);
    for (int i=0; i < collectionsCount; i+=RodaConstants.DEFAULT_PAGINATION_VALUE) {
      IndexResult<IndexedAIP> collections=index.find(IndexedAIP.class,allButRepresentationsFilter,null,new Sublist(i,RodaConstants.DEFAULT_PAGINATION_VALUE));
      for (      IndexedAIP aip : collections.getResults()) {
        array.add(aipToJSON(aip));
      }
    }
    root.set(""String_Node_Str"",array);
    StringWriter sw=new StringWriter();
    mapper.writeValue(sw,root);
    StreamingOutput stream=new StreamingOutput(){
      @Override public void write(      OutputStream os) throws IOException, WebApplicationException {
        IOUtils.write(sw.toString().getBytes(""String_Node_Str""),os);
      }
    }
;
    return new StreamResponse(""String_Node_Str"",MediaType.APPLICATION_JSON,stream);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
}",0.9059233449477352
188584,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public CreateDescriptiveMetadata(String aipId,boolean isNew){
  this.aipId=aipId;
  this.isNew=isNew;
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      String value=type.getSelectedValue();
      selectedBundle=null;
      if (StringUtils.isNotBlank(value)) {
        for (        SupportedMetadataTypeBundle bundle : metadataTypes) {
          if (bundle.getId().equals(value)) {
            selectedBundle=bundle;
            break;
          }
        }
        id.setText(value + ""String_Node_Str"");
      }
 else {
        id.setText(""String_Node_Str"");
      }
      updateFormOrXML();
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      CreateDescriptiveMetadata.this.metadataTypes=metadataTypes;
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
      }
      type.addItem(messages.otherItem(),""String_Node_Str"");
      type.setSelectedIndex(0);
      id.setText(metadataTypes.get(0).getType() + ""String_Node_Str"");
      selectedBundle=metadataTypes.get(0);
      updateFormOrXML();
    }
  }
);
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public CreateDescriptiveMetadata(String aipId,boolean isNew){
  this.aipId=aipId;
  this.isNew=isNew;
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      String value=type.getSelectedValue();
      selectedBundle=null;
      if (StringUtils.isNotBlank(value)) {
        for (        SupportedMetadataTypeBundle bundle : metadataTypes) {
          if (bundle.getId().equals(value)) {
            selectedBundle=bundle;
            break;
          }
        }
        id.setText(value + ""String_Node_Str"");
      }
 else {
        id.setText(""String_Node_Str"");
      }
      updateFormOrXML();
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      CreateDescriptiveMetadata.this.metadataTypes=metadataTypes;
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
      }
      type.addItem(messages.otherItem(),""String_Node_Str"");
      type.setSelectedIndex(0);
      selectedBundle=metadataTypes.get(0);
      if (selectedBundle.getVersion() != null) {
        id.setText(selectedBundle.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + selectedBundle.getVersion()+ ""String_Node_Str"");
      }
 else {
        id.setText(selectedBundle.getType() + ""String_Node_Str"");
      }
      updateFormOrXML();
    }
  }
);
}",0.9202547770700636
188585,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  buttonApply.setEnabled(false);
  String idText=id.getText();
  String typeText=selectedBundle != null ? selectedBundle.getType() : messages.otherItem();
  String typeVersion=selectedBundle != null ? selectedBundle.getVersion() : null;
  String template=selectedBundle != null ? selectedBundle.getTemplate() : null;
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=inXML && !xmlText.equals(metadataTextFromForm);
  if (idText.length() > 0) {
    Set<MetadataValue> values=null;
    if (!hasOverridenTheForm && selectedBundle != null) {
      values=selectedBundle.getValues();
    }
    DescriptiveMetadataEditBundle newBundle=new DescriptiveMetadataEditBundle(idText,typeText,typeVersion,xmlText,template,values,true);
    BrowserService.Util.getInstance().createDescriptiveMetadataFile(aipId,newBundle,new AsyncCallback<Void>(){
      @Override public void onFailure(      Throwable caught){
        if (caught instanceof ValidationException) {
          ValidationException e=(ValidationException)caught;
          updateErrors(e);
        }
 else         if (caught instanceof AlreadyExistsException) {
          idError.setVisible(true);
          idError.setHTML(SafeHtmlUtils.fromSafeConstant(messages.fileAlreadyExists()));
        }
 else {
          idError.setVisible(false);
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        buttonApply.setEnabled(true);
      }
      @Override public void onSuccess(      Void result){
        errors.setText(""String_Node_Str"");
        errors.setVisible(false);
        Toast.showInfo(messages.dialogSuccess(),messages.metadataFileCreated());
        Tools.newHistory(Browse.RESOLVER,aipId);
      }
    }
);
  }
 else {
    Toast.showError(""String_Node_Str"");
    buttonApply.setEnabled(true);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  buttonApply.setEnabled(false);
  String idText=id.getText();
  String typeText=selectedBundle != null ? selectedBundle.getType() : messages.otherItem();
  String typeVersion=selectedBundle != null ? selectedBundle.getVersion() : null;
  String template=selectedBundle != null ? selectedBundle.getTemplate() : null;
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=inXML && !xmlText.equals(metadataTextFromForm);
  if (idText.length() > 0) {
    Set<MetadataValue> values=null;
    if (!hasOverridenTheForm && selectedBundle != null) {
      values=selectedBundle.getValues();
    }
    DescriptiveMetadataEditBundle newBundle=new DescriptiveMetadataEditBundle(idText,typeText,typeVersion,xmlText,template,values,true);
    BrowserService.Util.getInstance().createDescriptiveMetadataFile(aipId,newBundle,new AsyncCallback<Void>(){
      @Override public void onFailure(      Throwable caught){
        if (caught instanceof ValidationException) {
          ValidationException e=(ValidationException)caught;
          updateErrors(e);
          idError.setVisible(false);
        }
 else         if (caught instanceof AlreadyExistsException) {
          idError.setVisible(true);
          idError.setHTML(SafeHtmlUtils.fromSafeConstant(messages.fileAlreadyExists()));
          errors.setVisible(false);
        }
 else {
          idError.setVisible(false);
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        buttonApply.setEnabled(true);
      }
      @Override public void onSuccess(      Void result){
        errors.setText(""String_Node_Str"");
        errors.setVisible(false);
        Toast.showInfo(messages.dialogSuccess(),messages.metadataFileCreated());
        Tools.newHistory(Browse.RESOLVER,aipId);
      }
    }
);
  }
 else {
    Toast.showError(""String_Node_Str"");
    buttonApply.setEnabled(true);
  }
}",0.9808449225924954
188586,"@Test public void testMessageIndex() throws ConfigurationException, RODAException {
  Notification notification=new Notification();
  notification.setSubject(""String_Node_Str"");
  notification.setBody(""String_Node_Str"");
  notification.setSentOn(new Date());
  notification.setFromUser(""String_Node_Str"");
  notification.setRecipientUsers(Arrays.asList(""String_Node_Str""));
  try {
    model.createNotification(notification,new EmailNotificationProcessor(""String_Node_Str""));
    Assert.fail(""String_Node_Str"");
  }
 catch (  GenericException e) {
  }
  index.commit(Notification.class);
  Notification message2=model.retrieveNotification(notification.getId());
  assertNotNull(message2);
  assertEquals(notification.getId(),message2.getId());
  assertEquals(notification.getSubject(),message2.getSubject());
  IndexResult<Notification> find=index.find(Notification.class,null,null,new Sublist(0,10));
  assertEquals(1,find.getTotalCount());
  Notification message3=index.retrieve(Notification.class,notification.getId());
  assertNotNull(message3);
  assertEquals(notification.getId(),message3.getId());
  assertEquals(message3.getSubject(),message3.getSubject());
  message3.setSubject(""String_Node_Str"");
  model.updateNotification(message3);
  Notification message4=index.retrieve(Notification.class,notification.getId());
  assertNotNull(message4);
  assertEquals(notification.getId(),message4.getId());
  assertEquals(message4.getSubject(),""String_Node_Str"");
  model.deleteNotification(notification.getId());
}","@Test public void testMessageIndex() throws ConfigurationException, RODAException {
  Notification notification=new Notification();
  notification.setSubject(""String_Node_Str"");
  notification.setBody(""String_Node_Str"");
  notification.setSentOn(new Date());
  notification.setFromUser(""String_Node_Str"");
  notification.setRecipientUsers(Arrays.asList(""String_Node_Str""));
  Notification n=model.createNotification(notification,new EmailNotificationProcessor(""String_Node_Str""));
  Assert.assertEquals(n.getState(),NOTIFICATION_STATE.FAILED);
  index.commit(Notification.class);
  Notification message2=model.retrieveNotification(notification.getId());
  assertNotNull(message2);
  assertEquals(notification.getId(),message2.getId());
  assertEquals(notification.getSubject(),message2.getSubject());
  IndexResult<Notification> find=index.find(Notification.class,null,null,new Sublist(0,10));
  assertEquals(1,find.getTotalCount());
  Notification message3=index.retrieve(Notification.class,notification.getId());
  assertNotNull(message3);
  assertEquals(notification.getId(),message3.getId());
  assertEquals(message3.getSubject(),message3.getSubject());
  message3.setSubject(""String_Node_Str"");
  model.updateNotification(message3);
  Notification message4=index.retrieve(Notification.class,notification.getId());
  assertNotNull(message4);
  assertEquals(notification.getId(),message4.getId());
  assertEquals(message4.getSubject(),""String_Node_Str"");
  model.deleteNotification(notification.getId());
}",0.953734302709848
188587,"/** 
 */
public Notification createNotification(Notification notification,NotificationProcessor processor) throws GenericException {
  try {
    notification.setId(UUID.randomUUID().toString());
    notification.setAcknowledgeToken(UUID.randomUUID().toString());
    notification=processor.processNotification(this,notification);
    notification.setState(Notification.NOTIFICATION_STATE.COMPLETED);
  }
 catch (  RODAException e) {
    notification.setState(Notification.NOTIFICATION_STATE.FAILED);
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    String notificationAsJson=JsonUtils.getJsonFromObject(notification);
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notification.getId());
    storage.createBinary(notificationPath,new StringContentPayload(notificationAsJson),false);
    notifyNotificationCreatedOrUpdated(notification);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(e);
  }
  return notification;
}","/** 
 * @throws AuthorizationDeniedException
 */
public Notification createNotification(Notification notification,NotificationProcessor processor) throws GenericException, AuthorizationDeniedException {
  try {
    notification.setId(UUID.randomUUID().toString());
    notification.setAcknowledgeToken(UUID.randomUUID().toString());
    notification=processor.processNotification(this,notification);
    notification.setState(Notification.NOTIFICATION_STATE.COMPLETED);
  }
 catch (  RODAException e) {
    notification.setState(Notification.NOTIFICATION_STATE.FAILED);
  }
  try {
    String notificationAsJson=JsonUtils.getJsonFromObject(notification);
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notification.getId());
    storage.createBinary(notificationPath,new StringContentPayload(notificationAsJson),false);
    notifyNotificationCreatedOrUpdated(notification);
  }
 catch (  NotFoundException|RequestNotValidException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(e);
  }
  return notification;
}",0.5232390991854337
188588,"public void acknowledgeNotification(String notificationId,String token) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  Notification notification=this.retrieveNotification(notificationId);
  String ackToken=token.substring(0,36);
  String emailToken=token.substring(36);
  if (notification.getAcknowledgeToken().equals(ackToken)) {
    for (    String recipient : notification.getRecipientUsers()) {
      if (recipient.equals(emailToken)) {
        DateFormat df=DateFormat.getDateTimeInstance();
        String ackDate=df.format(new Date());
        notification.addAcknowledgedUser(recipient,ackDate);
        notification.setAcknowledged(true);
        this.updateNotification(notification);
      }
    }
  }
}","public void acknowledgeNotification(String notificationId,String token) throws GenericException, NotFoundException, AuthorizationDeniedException {
  Notification notification=this.retrieveNotification(notificationId);
  String ackToken=token.substring(0,36);
  String emailToken=token.substring(36);
  if (notification.getAcknowledgeToken().equals(ackToken)) {
    for (    String recipient : notification.getRecipientUsers()) {
      if (recipient.equals(emailToken)) {
        DateFormat df=DateFormat.getDateTimeInstance();
        String ackDate=df.format(new Date());
        notification.addAcknowledgedUser(recipient,ackDate);
        notification.setAcknowledged(true);
        this.updateNotification(notification);
      }
    }
  }
}",0.9828269484808454
188589,"public void deleteNotification(String notificationId) throws GenericException, NotFoundException, AuthorizationDeniedException, RequestNotValidException {
  StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notificationId);
  storage.deleteResource(notificationPath);
  notifyNotificationDeleted(notificationId);
}","public void deleteNotification(String notificationId) throws GenericException, NotFoundException, AuthorizationDeniedException {
  try {
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notificationId);
    storage.deleteResource(notificationPath);
    notifyNotificationDeleted(notificationId);
  }
 catch (  RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(e);
  }
}",0.4430051813471503
188590,"public Notification updateNotification(Notification notification) throws GenericException {
  try {
    String notificationAsJson=JsonUtils.getJsonFromObject(notification);
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notification.getId());
    storage.updateBinaryContent(notificationPath,new StringContentPayload(notificationAsJson),false,true);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  notifyNotificationCreatedOrUpdated(notification);
  return notification;
}","public Notification updateNotification(Notification notification) throws GenericException, NotFoundException, AuthorizationDeniedException {
  try {
    String notificationAsJson=JsonUtils.getJsonFromObject(notification);
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notification.getId());
    storage.updateBinaryContent(notificationPath,new StringContentPayload(notificationAsJson),false,true);
  }
 catch (  GenericException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(e);
  }
  notifyNotificationCreatedOrUpdated(notification);
  return notification;
}",0.8942695722356739
188591,"public Notification retrieveNotification(String notificationId) throws RequestNotValidException, GenericException, NotFoundException, AuthorizationDeniedException {
  StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notificationId);
  Binary binary=storage.getBinary(notificationPath);
  Notification ret;
  InputStream inputStream=null;
  try {
    inputStream=binary.getContent().createInputStream();
    ret=JsonUtils.getObjectFromJson(inputStream,Notification.class);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}","public Notification retrieveNotification(String notificationId) throws GenericException, NotFoundException, AuthorizationDeniedException {
  InputStream inputStream=null;
  Notification ret;
  try {
    StoragePath notificationPath=ModelUtils.getNotificationStoragePath(notificationId);
    Binary binary=storage.getBinary(notificationPath);
    inputStream=binary.getContent().createInputStream();
    ret=JsonUtils.getObjectFromJson(inputStream,Notification.class);
  }
 catch (  IOException|RequestNotValidException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}",0.7987663839629915
188592,"private static Notification sendEmailVerification(String servletPath,User user) throws GenericException {
  try {
    Notification notification=new Notification();
    notification.setSubject(""String_Node_Str"");
    notification.setFromUser(""String_Node_Str"");
    notification.setRecipientUsers(Arrays.asList(user.getEmail()));
    String token=user.getEmailConfirmationToken();
    String username=user.getName();
    String verificationURL=servletPath + ""String_Node_Str"";
    String verificationCompleteURL=verificationURL + ""String_Node_Str"" + URLEncoder.encode(username,RodaConstants.DEFAULT_ENCODING)+ ""String_Node_Str""+ token;
    Map<String,Object> scopes=new HashMap<String,Object>();
    scopes.put(""String_Node_Str"",username);
    scopes.put(""String_Node_Str"",token);
    scopes.put(""String_Node_Str"",verificationURL);
    scopes.put(""String_Node_Str"",verificationCompleteURL);
    return RodaCoreFactory.getModelService().createNotification(notification,new EmailNotificationProcessor(RodaConstants.VERIFICATION_EMAIL_TEMPLATE,scopes));
  }
 catch (  UnsupportedEncodingException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
}","private static Notification sendEmailVerification(String servletPath,User user) throws GenericException {
  try {
    Notification notification=new Notification();
    notification.setSubject(""String_Node_Str"");
    notification.setFromUser(""String_Node_Str"");
    notification.setRecipientUsers(Arrays.asList(user.getEmail()));
    String token=user.getEmailConfirmationToken();
    String username=user.getName();
    String verificationURL=servletPath + ""String_Node_Str"";
    String verificationCompleteURL=verificationURL + ""String_Node_Str"" + URLEncoder.encode(username,RodaConstants.DEFAULT_ENCODING)+ ""String_Node_Str""+ token;
    Map<String,Object> scopes=new HashMap<String,Object>();
    scopes.put(""String_Node_Str"",username);
    scopes.put(""String_Node_Str"",token);
    scopes.put(""String_Node_Str"",verificationURL);
    scopes.put(""String_Node_Str"",verificationCompleteURL);
    return RodaCoreFactory.getModelService().createNotification(notification,new EmailNotificationProcessor(RodaConstants.VERIFICATION_EMAIL_TEMPLATE,scopes));
  }
 catch (  UnsupportedEncodingException|AuthorizationDeniedException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
}",0.987612131567706
188593,"private static void addTextField(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox mvText=new TextBox();
  mvText.addStyleName(""String_Node_Str"");
  if (mv.get(""String_Node_Str"") != null) {
    mvText.setText(mv.get(""String_Node_Str""));
  }
  mvText.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      mv.set(""String_Node_Str"",mvText.getValue());
      if (mandatory && (mvText.getValue() != null && !mvText.getValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvText.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (mvText.getValue() == null || mvText.getValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvText.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  layout.add(mvLabel);
  layout.add(mvText);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvText.addStyleName(""String_Node_Str"");
  }
  panel.add(layout);
}","private static void addTextField(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final TextBox mvText=new TextBox();
  mvText.addStyleName(""String_Node_Str"");
  if (mv.get(""String_Node_Str"") != null) {
    mvText.setText(mv.get(""String_Node_Str""));
  }
  mvText.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      mv.set(""String_Node_Str"",mvText.getValue());
      if (mandatory && (mvText.getValue() != null && !mvText.getValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvText.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (mvText.getValue() == null || mvText.getValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvText.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  layout.add(mvLabel);
  layout.add(mvText);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    if (mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      GWT.log(""String_Node_Str"");
    }
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvText.addStyleName(""String_Node_Str"");
  }
 else {
    if (mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      GWT.log(""String_Node_Str"");
    }
  }
  panel.add(layout);
}",0.9304093567251462
188594,"private static void addList(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final ListBox mvList=new ListBox();
  mvList.addStyleName(""String_Node_Str"");
  String list=mv.get(""String_Node_Str"");
  mvList.addItem(""String_Node_Str"");
  if (list != null) {
    JSONArray jsonArray=JSONParser.parseLenient(list).isArray();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.size(); i++) {
        String value=jsonArray.get(i).isString().stringValue();
        mvList.addItem(value);
        if (value.equals(mv.get(""String_Node_Str""))) {
          mvList.setSelectedIndex(i + 1);
        }
      }
    }
 else {
      JSONObject jsonObject=JSONParser.parseLenient(list).isObject();
      if (jsonObject != null) {
        String loc=LocaleInfo.getCurrentLocale().getLocaleName();
        int i=0;
        for (        String key : jsonObject.keySet()) {
          JSONValue entry=jsonObject.get(key);
          if (entry.isObject() != null) {
            JSONValue jsonValue=entry.isObject().get(loc);
            String value=null;
            if (jsonValue != null) {
              value=jsonValue.isString().stringValue();
            }
 else {
              value=entry.isObject().get(entry.isObject().keySet().iterator().next()).isString().stringValue();
            }
            if (value != null) {
              mvList.addItem(value,key);
              if (key.equals(mv.get(""String_Node_Str""))) {
                mvList.setSelectedIndex(i + 1);
              }
            }
          }
          i++;
        }
      }
    }
  }
  mvList.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      mv.set(""String_Node_Str"",mvList.getSelectedValue());
      if (mandatory && (mvList.getSelectedValue() != null && !mvList.getSelectedValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvList.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (mvList.getSelectedValue() == null || mvList.getSelectedValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvList.removeStyleName(""String_Node_Str"");
      }
    }
  }
);
  if (mv.get(""String_Node_Str"") == null || mv.get(""String_Node_Str"").isEmpty()) {
    mvList.setSelectedIndex(0);
    mv.set(""String_Node_Str"",mvList.getSelectedValue());
  }
  layout.add(mvLabel);
  layout.add(mvList);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvList.addStyleName(""String_Node_Str"");
  }
  panel.add(layout);
}","private static void addList(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final ListBox mvList=new ListBox();
  mvList.addStyleName(""String_Node_Str"");
  String list=mv.get(""String_Node_Str"");
  mvList.addItem(""String_Node_Str"");
  if (list != null) {
    JSONArray jsonArray=JSONParser.parseLenient(list).isArray();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.size(); i++) {
        String value=jsonArray.get(i).isString().stringValue();
        mvList.addItem(value);
        if (value.equals(mv.get(""String_Node_Str""))) {
          mvList.setSelectedIndex(i + 1);
        }
      }
    }
 else {
      JSONObject jsonObject=JSONParser.parseLenient(list).isObject();
      if (jsonObject != null) {
        String loc=LocaleInfo.getCurrentLocale().getLocaleName();
        int i=0;
        for (        String key : jsonObject.keySet()) {
          JSONValue entry=jsonObject.get(key);
          if (entry.isObject() != null) {
            JSONValue jsonValue=entry.isObject().get(loc);
            String value=null;
            if (jsonValue != null) {
              value=jsonValue.isString().stringValue();
            }
 else {
              value=entry.isObject().get(entry.isObject().keySet().iterator().next()).isString().stringValue();
            }
            if (value != null) {
              mvList.addItem(value,key);
              if (key.equals(mv.get(""String_Node_Str""))) {
                mvList.setSelectedIndex(i + 1);
              }
            }
          }
          i++;
        }
      }
    }
  }
  mvList.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      mv.set(""String_Node_Str"",mvList.getSelectedValue());
      if (mandatory && (mvList.getSelectedValue() != null && !mvList.getSelectedValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvList.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (mvList.getSelectedValue() == null || mvList.getSelectedValue().trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvList.removeStyleName(""String_Node_Str"");
      }
    }
  }
);
  if (mv.get(""String_Node_Str"") == null || mv.get(""String_Node_Str"").isEmpty()) {
    mvList.setSelectedIndex(0);
    mv.set(""String_Node_Str"",mvList.getSelectedValue());
  }
  layout.add(mvLabel);
  layout.add(mvList);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    GWT.log(""String_Node_Str"" + mv.get(""String_Node_Str""));
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvList.addStyleName(""String_Node_Str"");
  }
  panel.add(layout);
}",0.9787234042553192
188595,"public static List<String> validate(Set<MetadataValue> values,FlowPanel extra){
  List<String> errors=new ArrayList<String>();
  if (values != null) {
    for (    MetadataValue mv : values) {
      String value=mv.get(""String_Node_Str"");
      boolean mandatory=(mv.get(""String_Node_Str"") != null && mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) ? true : false;
      if (mandatory && (value == null || value.trim().equalsIgnoreCase(""String_Node_Str""))) {
        String labels=mv.get(""String_Node_Str"");
        errors.add(messages.isAMandatoryField(labels));
      }
    }
  }
  if (errors.size() > 0) {
    extra.clear();
    create(extra,values,true);
  }
  return errors;
}","public static List<String> validate(Set<MetadataValue> values,FlowPanel extra){
  List<String> errors=new ArrayList<String>();
  if (values != null) {
    for (    MetadataValue mv : values) {
      String value=mv.get(""String_Node_Str"");
      boolean mandatory=(mv.get(""String_Node_Str"") != null && mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) ? true : false;
      if (mandatory && (value == null || value.trim().equalsIgnoreCase(""String_Node_Str""))) {
        if (mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          GWT.log(""String_Node_Str"");
        }
        String labels=mv.get(""String_Node_Str"");
        errors.add(messages.isAMandatoryField(labels));
        mv.set(""String_Node_Str"",messages.mandatoryField());
      }
 else {
        if (mv.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          GWT.log(""String_Node_Str"");
        }
        mv.set(""String_Node_Str"",null);
      }
    }
  }
  extra.clear();
  create(extra,values,true);
  return errors;
}",0.7517401392111369
188596,"@Override protected void configureDisplay(CellTable<LogEntry> display){
  dateColumn=new Column<LogEntry,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getDatetime() : null;
    }
  }
;
  actionComponentColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry entry){
      return SafeHtmlUtils.fromSafeConstant(translate(""String_Node_Str"",entry.getActionComponent()));
    }
  }
;
  actionMethodColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      if (logEntry == null) {
        return null;
      }
      return StringUtils.getPrettifiedActionMethod(logEntry.getActionMethod());
    }
  }
;
  usernameColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getUsername() : null;
    }
  }
;
  durationColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? Humanize.durationMillisToShortDHMS(logEntry.getDuration()) : null;
    }
  }
;
  addressColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getAddress() : null;
    }
  }
;
  stateColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry logEntry){
      return HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState());
    }
  }
;
  dateColumn.setSortable(true);
  actionComponentColumn.setSortable(true);
  actionMethodColumn.setSortable(true);
  usernameColumn.setSortable(true);
  durationColumn.setSortable(true);
  addressColumn.setSortable(true);
  stateColumn.setSortable(true);
  addColumn(dateColumn,messages.logEntryDatetimeExtended(),true,false,14);
  addColumn(actionComponentColumn,messages.logEntryComponent(),true,false);
  addColumn(actionMethodColumn,messages.logEntryMethod(),true,false);
  addColumn(usernameColumn,messages.logEntryUser(),true,false);
  addColumn(durationColumn,messages.logEntryDuration(),true,true,5);
  addColumn(addressColumn,messages.logEntryAddress(),true,false);
  addColumn(stateColumn,messages.logEntryState(),true,false);
  display.getColumnSortList().push(new ColumnSortInfo(dateColumn,false));
  addStyleName(""String_Node_Str"");
}","@Override protected void configureDisplay(CellTable<LogEntry> display){
  dateColumn=new Column<LogEntry,Date>(new DateCell(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_MEDIUM))){
    @Override public Date getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getDatetime() : null;
    }
  }
;
  actionComponentColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry entry){
      return SafeHtmlUtils.fromSafeConstant(translate(RodaConstants.LOG_ACTION_COMPONENT,entry.getActionComponent()));
    }
  }
;
  actionMethodColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      if (logEntry == null) {
        return null;
      }
      return StringUtils.getPrettifiedActionMethod(logEntry.getActionMethod());
    }
  }
;
  usernameColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getUsername() : null;
    }
  }
;
  durationColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? Humanize.durationMillisToShortDHMS(logEntry.getDuration()) : null;
    }
  }
;
  addressColumn=new TextColumn<LogEntry>(){
    @Override public String getValue(    LogEntry logEntry){
      return logEntry != null ? logEntry.getAddress() : null;
    }
  }
;
  stateColumn=new Column<LogEntry,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    LogEntry logEntry){
      return HtmlSnippetUtils.getLogEntryStateHtml(logEntry.getState());
    }
  }
;
  dateColumn.setSortable(true);
  actionComponentColumn.setSortable(true);
  actionMethodColumn.setSortable(true);
  usernameColumn.setSortable(true);
  durationColumn.setSortable(true);
  addressColumn.setSortable(true);
  stateColumn.setSortable(true);
  addColumn(dateColumn,messages.logEntryDatetimeExtended(),true,false,14);
  addColumn(actionComponentColumn,messages.logEntryComponent(),true,false);
  addColumn(actionMethodColumn,messages.logEntryMethod(),true,false);
  addColumn(usernameColumn,messages.logEntryUser(),true,false);
  addColumn(durationColumn,messages.logEntryDuration(),true,true,5);
  addColumn(addressColumn,messages.logEntryAddress(),true,false);
  addColumn(stateColumn,messages.logEntryState(),true,false);
  display.getColumnSortList().push(new ColumnSortInfo(dateColumn,false));
  addStyleName(""String_Node_Str"");
}",0.9909145972138098
188597,"public static Report lastReport(User user,String id,String resourceOrSip,String acceptFormat) throws AuthorizationDeniedException, GenericException, NotFoundException, RequestNotValidException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  BrowserHelper.validateListingParams(acceptFormat);
  controllerAssistant.checkRoles(user);
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  Reports reportList;
  if (id == null || resourceOrSip == null) {
    reportList=BrowserHelper.listReports(start,limit);
  }
 else {
    if (RodaConstants.API_GET_REPORTS_ID_OBJECT_SIP.equals(resourceOrSip)) {
      reportList=BrowserHelper.listTransferredResourcesReportsWithSIP(id,start,limit);
    }
 else {
      reportList=BrowserHelper.listTransferredResourcesReports(id,start,limit);
    }
  }
  controllerAssistant.registerAction(user,id,LOG_ENTRY_STATE.SUCCESS,RodaConstants.API_QUERY_PARAM_ID,id,RodaConstants.API_GET_REPORTS_ID_OBJECT,resourceOrSip,RodaConstants.API_QUERY_KEY_START,start,RodaConstants.API_QUERY_KEY_LIMIT,limit);
  return reportList.getReports().get(0);
}","public static Report lastReport(User user,String id,String resourceOrSip,String acceptFormat) throws RODAException {
  final ControllerAssistant controllerAssistant=new ControllerAssistant(){
  }
;
  BrowserHelper.validateListingParams(acceptFormat);
  controllerAssistant.checkRoles(user);
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  Reports reportList;
  if (id == null || resourceOrSip == null) {
    reportList=BrowserHelper.listReports(start,limit);
  }
 else {
    if (RodaConstants.API_GET_REPORTS_ID_OBJECT_SIP.equals(resourceOrSip)) {
      reportList=BrowserHelper.listTransferredResourcesReportsWithSIP(id,start,limit);
    }
 else {
      reportList=BrowserHelper.listTransferredResourcesReports(id,start,limit);
    }
  }
  controllerAssistant.registerAction(user,id,LOG_ENTRY_STATE.SUCCESS,RodaConstants.API_QUERY_PARAM_ID,id,RodaConstants.API_GET_REPORTS_ID_OBJECT,resourceOrSip,RodaConstants.API_QUERY_KEY_START,start,RodaConstants.API_QUERY_KEY_LIMIT,limit);
  if (reportList.getReports().isEmpty()) {
    throw new RODAException();
  }
 else {
    return reportList.getReports().get(0);
  }
}",0.9158547387068202
188598,"@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Report.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Report.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceLastReport(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  Report lastReport=Browser.lastReport(user,id,resourceOrSip,acceptFormat);
  return Response.ok(lastReport,mediaType).build();
}","@GET @Path(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"",response=Report.class) @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Report.class),@ApiResponse(code=404,message=""String_Node_Str"",response=ApiResponseMessage.class)}) public Response getTransferredResourceLastReport(@ApiParam(value=""String_Node_Str"") @QueryParam(RodaConstants.API_QUERY_PARAM_ID) String id,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_GET_REPORTS_ID_OBJECT,defaultValue=RodaConstants.API_GET_REPORTS_ID_OBJECT_RESOURCE) @QueryParam(RodaConstants.API_QUERY_PARAM_TYPE) String resourceOrSip,@ApiParam(value=""String_Node_Str"",allowableValues=RodaConstants.API_LIST_MEDIA_TYPES,defaultValue=RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON) @QueryParam(RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT) String acceptFormat) throws RODAException {
  String mediaType=ApiUtils.getMediaType(acceptFormat,request);
  User user=UserUtility.getApiUser(request);
  try {
    Report lastReport=Browser.lastReport(user,id,resourceOrSip,acceptFormat);
    return Response.ok(lastReport,mediaType).build();
  }
 catch (  RODAException e) {
    return Response.ok(new ApiResponseMessage(ApiResponseMessage.ERROR,""String_Node_Str""),mediaType).build();
  }
}",0.9347558473533032
188599,"@Override public void onValueChange(ValueChangeEvent<String> event){
  String value=event.getValue();
  try {
    Date date=dateTimeFormat.parse(value.trim());
    mvDate.setValue(date);
  }
 catch (  IllegalArgumentException iae) {
    mvDate.getTextBox().setValue(value);
  }
}","@Override public void onValueChange(ValueChangeEvent<String> event){
  String value=event.getValue();
  try {
    Date date=dateTimeFormat.parse(value.trim());
    mvDate.setValue(date);
    mv.set(""String_Node_Str"",value);
  }
 catch (  IllegalArgumentException iae) {
    if (event.getValue() == null || event.getValue().trim().equalsIgnoreCase(""String_Node_Str"")) {
      mv.set(""String_Node_Str"",null);
    }
    mvDate.getTextBox().setValue(value);
  }
}",0.7560975609756098
188600,"private static void addDatePicker(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  final DateTimeFormat dateTimeFormat=DateTimeFormat.getFormat(""String_Node_Str"");
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final DateBox mvDate=new DateBox();
  mvDate.getDatePicker().setYearAndMonthDropdownVisible(true);
  mvDate.getDatePicker().setYearArrowsVisible(true);
  mvDate.addStyleName(""String_Node_Str"");
  mvDate.setFormat(new DateBox.DefaultFormat(){
    @Override public String format(    DateBox dateBox,    Date date){
      if (date == null)       return null;
      return dateTimeFormat.format(date);
    }
  }
);
  String value=mv.get(""String_Node_Str"");
  if (value != null && value.length() > 0) {
    try {
      Date date=dateTimeFormat.parse(value.trim());
      mvDate.setValue(date);
    }
 catch (    IllegalArgumentException iae) {
      mvDate.getTextBox().setValue(value);
    }
  }
  mvDate.addValueChangeHandler(new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> valueChangeEvent){
      String newValue=dateTimeFormat.format(mvDate.getValue());
      mv.set(""String_Node_Str"",newValue);
      if (mandatory && (newValue != null && !newValue.trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvDate.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (newValue == null || newValue.trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvDate.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  mvDate.getTextBox().addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      String value=event.getValue();
      try {
        Date date=dateTimeFormat.parse(value.trim());
        mvDate.setValue(date);
      }
 catch (      IllegalArgumentException iae) {
        mvDate.getTextBox().setValue(value);
      }
    }
  }
);
  layout.add(mvLabel);
  layout.add(mvDate);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvDate.addStyleName(""String_Node_Str"");
  }
  panel.add(layout);
}","private static void addDatePicker(FlowPanel panel,final FlowPanel layout,final MetadataValue mv,final boolean mandatory){
  final DateTimeFormat dateTimeFormat=DateTimeFormat.getFormat(""String_Node_Str"");
  Label mvLabel=new Label(getFieldLabel(mv));
  mvLabel.addStyleName(""String_Node_Str"");
  if (mandatory) {
    mvLabel.addStyleName(""String_Node_Str"");
  }
  final DateBox mvDate=new DateBox();
  mvDate.getDatePicker().setYearAndMonthDropdownVisible(true);
  mvDate.getDatePicker().setYearArrowsVisible(true);
  mvDate.addStyleName(""String_Node_Str"");
  mvDate.setFormat(new DateBox.DefaultFormat(){
    @Override public String format(    DateBox dateBox,    Date date){
      if (date == null)       return null;
      return dateTimeFormat.format(date);
    }
  }
);
  String value=mv.get(""String_Node_Str"");
  if (value != null && value.length() > 0) {
    try {
      Date date=dateTimeFormat.parse(value.trim());
      mvDate.setValue(date);
    }
 catch (    IllegalArgumentException iae) {
      mvDate.getTextBox().setValue(value);
    }
  }
  mvDate.addValueChangeHandler(new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> valueChangeEvent){
      String newValue=dateTimeFormat.format(mvDate.getValue());
      mv.set(""String_Node_Str"",newValue);
      if (mandatory && (newValue != null && !newValue.trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvDate.removeStyleName(""String_Node_Str"");
      }
 else       if (mandatory && (newValue == null || newValue.trim().equalsIgnoreCase(""String_Node_Str""))) {
        mvDate.addStyleName(""String_Node_Str"");
      }
    }
  }
);
  mvDate.getTextBox().addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      String value=event.getValue();
      try {
        Date date=dateTimeFormat.parse(value.trim());
        mvDate.setValue(date);
        mv.set(""String_Node_Str"",value);
      }
 catch (      IllegalArgumentException iae) {
        if (event.getValue() == null || event.getValue().trim().equalsIgnoreCase(""String_Node_Str"")) {
          mv.set(""String_Node_Str"",null);
        }
        mvDate.getTextBox().setValue(value);
      }
    }
  }
);
  layout.add(mvLabel);
  layout.add(mvDate);
  String description=mv.get(""String_Node_Str"");
  if (description != null && description.length() > 0) {
    Label mvDescription=new Label(description);
    mvDescription.addStyleName(""String_Node_Str"");
    layout.add(mvDescription);
  }
  if (mv.get(""String_Node_Str"") != null && !mv.get(""String_Node_Str"").trim().equalsIgnoreCase(""String_Node_Str"")) {
    Label errorLabel=new Label(mv.get(""String_Node_Str""));
    errorLabel.addStyleName(""String_Node_Str"");
    layout.add(errorLabel);
    mvDate.addStyleName(""String_Node_Str"");
  }
  panel.add(layout);
}",0.964467005076142
188601,"public static List<SupportedMetadataTypeBundle> retrieveSupportedMetadata(User user,IndexedAIP aip,Locale locale) throws GenericException {
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  List<String> types=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.UI_BROWSER_METADATA_DESCRIPTIVE_TYPES));
  List<SupportedMetadataTypeBundle> supportedMetadata=new ArrayList<>();
  if (types != null) {
    for (    String id : types) {
      String type=id;
      String version=null;
      if (id.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
        version=id.substring(id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,id.length());
        type=id.substring(0,id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
      }
      String key=RodaConstants.I18N_UI_BROWSE_METADATA_DESCRIPTIVE_TYPE_PREFIX + id;
      if (version != null) {
        key+=""String_Node_Str"" + version;
      }
      String label=messages.getTranslation(key,id);
      InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.METADATA_TEMPLATE_FOLDER + ""String_Node_Str"" + ((version != null) ? id + RodaConstants.METADATA_VERSION_SEPARATOR + version : id)+ RodaConstants.METADATA_TEMPLATE_EXTENSION);
      String template=null;
      Set<MetadataValue> values=null;
      if (templateStream != null) {
        try {
          template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
          values=ServerTools.transform(template);
          for (          MetadataValue mv : values) {
            String generator=mv.get(""String_Node_Str"");
            if (generator != null && generator.length() > 0) {
              String value=ServerTools.autoGenerateValue(aip,user,generator);
              if (value != null) {
                mv.set(""String_Node_Str"",value);
              }
            }
            String labels=mv.get(""String_Node_Str"");
            String labelI18N=mv.get(""String_Node_Str"");
            if (labels != null && labelI18N != null) {
              Map<String,String> labelsMaps=JsonUtils.getMapFromJson(labels);
              try {
                labelsMaps.put(locale.toString(),RodaCoreFactory.getI18NMessages(locale).getTranslation(labelI18N));
              }
 catch (              MissingResourceException e) {
                LOGGER.debug(""String_Node_Str"",labelI18N);
              }
              labels=JsonUtils.getJsonFromObject(labelsMaps);
              mv.set(""String_Node_Str"",labels);
            }
            String i18nPrefix=mv.get(""String_Node_Str"");
            if (i18nPrefix != null) {
              try {
                Map<String,String> terms=messages.getTranslations(i18nPrefix,String.class,false);
                Map<String,Map<String,String>> i18nMap=new HashMap<String,Map<String,String>>();
                for (                Map.Entry<String,String> entry : terms.entrySet()) {
                  Map<String,String> term=new HashMap<String,String>();
                  term.put(locale.toString(),entry.getValue());
                  i18nMap.put(entry.getKey().replace(i18nPrefix + ""String_Node_Str"",""String_Node_Str""),term);
                }
                mv.set(""String_Node_Str"",JsonUtils.getJsonFromObject(i18nMap));
              }
 catch (              MissingResourceException e) {
                LOGGER.error(e.getMessage(),e);
              }
            }
          }
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
      supportedMetadata.add(new SupportedMetadataTypeBundle(id,type,version,label,template,values));
    }
  }
  return supportedMetadata;
}","public static List<SupportedMetadataTypeBundle> retrieveSupportedMetadata(User user,IndexedAIP aip,Locale locale) throws GenericException {
  LOGGER.error(""String_Node_Str"");
  Messages messages=RodaCoreFactory.getI18NMessages(locale);
  List<String> types=RodaUtils.copyList(RodaCoreFactory.getRodaConfiguration().getList(RodaConstants.UI_BROWSER_METADATA_DESCRIPTIVE_TYPES));
  List<SupportedMetadataTypeBundle> supportedMetadata=new ArrayList<>();
  if (types != null) {
    for (    String id : types) {
      String type=id;
      String version=null;
      if (id.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
        version=id.substring(id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,id.length());
        type=id.substring(0,id.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
      }
      String key=RodaConstants.I18N_UI_BROWSE_METADATA_DESCRIPTIVE_TYPE_PREFIX + type;
      if (version != null) {
        key+=RodaConstants.METADATA_VERSION_SEPARATOR + version;
      }
      String label=messages.getTranslation(key,type);
      InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.METADATA_TEMPLATE_FOLDER + ""String_Node_Str"" + ((version != null) ? type + RodaConstants.METADATA_VERSION_SEPARATOR + version : type)+ RodaConstants.METADATA_TEMPLATE_EXTENSION);
      String template=null;
      Set<MetadataValue> values=null;
      if (templateStream != null) {
        try {
          template=IOUtils.toString(templateStream,RodaConstants.DEFAULT_ENCODING);
          values=ServerTools.transform(template);
          for (          MetadataValue mv : values) {
            String generator=mv.get(""String_Node_Str"");
            if (generator != null && generator.length() > 0) {
              String value=ServerTools.autoGenerateValue(aip,user,generator);
              if (value != null) {
                mv.set(""String_Node_Str"",value);
              }
            }
            String labels=mv.get(""String_Node_Str"");
            String labelI18N=mv.get(""String_Node_Str"");
            if (labels != null && labelI18N != null) {
              Map<String,String> labelsMaps=JsonUtils.getMapFromJson(labels);
              try {
                labelsMaps.put(locale.toString(),RodaCoreFactory.getI18NMessages(locale).getTranslation(labelI18N));
              }
 catch (              MissingResourceException e) {
                LOGGER.debug(""String_Node_Str"",labelI18N);
              }
              labels=JsonUtils.getJsonFromObject(labelsMaps);
              mv.set(""String_Node_Str"",labels);
            }
            String i18nPrefix=mv.get(""String_Node_Str"");
            if (i18nPrefix != null) {
              try {
                Map<String,String> terms=messages.getTranslations(i18nPrefix,String.class,false);
                Map<String,Map<String,String>> i18nMap=new HashMap<String,Map<String,String>>();
                for (                Map.Entry<String,String> entry : terms.entrySet()) {
                  Map<String,String> term=new HashMap<String,String>();
                  term.put(locale.toString(),entry.getValue());
                  i18nMap.put(entry.getKey().replace(i18nPrefix + ""String_Node_Str"",""String_Node_Str""),term);
                }
                mv.set(""String_Node_Str"",JsonUtils.getJsonFromObject(i18nMap));
              }
 catch (              MissingResourceException e) {
                LOGGER.error(e.getMessage(),e);
              }
            }
          }
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
      supportedMetadata.add(new SupportedMetadataTypeBundle(id,type,version,label,template,values));
    }
  }
  return supportedMetadata;
}",0.9846485321842176
188602,"public static UserExtraBundle retrieveUserExtraBundle(String name){
  String template=null;
  InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.USERS_TEMPLATE_FOLDER + ""String_Node_Str"");
  try {
    template=IOUtils.toString(templateStream,StandardCharsets.UTF_8);
  }
 catch (  IOException e1) {
    LOGGER.error(""String_Node_Str"");
  }
  Set<MetadataValue> values=new HashSet<>();
  if (template != null) {
    values=ServerTools.transform(template);
  }
  try {
    User user=UserUtility.getLdapUtility().getUser(name);
    String userExtra=user.getExtra();
    if (values != null) {
      for (      MetadataValue mv : values) {
        String xpathRaw=mv.get(""String_Node_Str"");
        if (xpathRaw != null && xpathRaw.length() > 0) {
          String[] xpaths=xpathRaw.split(""String_Node_Str"");
          String value;
          List<String> allValues=new ArrayList<>();
          for (          String xpath : xpaths) {
            allValues.addAll(ServerTools.applyXpath(userExtra,xpath));
          }
          boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
          if (allEqual && !allValues.isEmpty()) {
            value=allValues.get(0);
          }
 else {
            value=String.join(""String_Node_Str"",allValues);
          }
          mv.set(""String_Node_Str"",value.trim());
        }
      }
    }
  }
 catch (  LdapUtilityException e) {
  }
  return new UserExtraBundle(name,values);
}","public static UserExtraBundle retrieveUserExtraBundle(String name){
  String template=null;
  InputStream templateStream=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.USERS_TEMPLATE_FOLDER + ""String_Node_Str"");
  try {
    template=IOUtils.toString(templateStream,StandardCharsets.UTF_8);
  }
 catch (  IOException e1) {
    LOGGER.error(""String_Node_Str"");
  }
  Set<MetadataValue> values=new HashSet<>();
  if (template != null) {
    values=ServerTools.transform(template);
  }
  try {
    User user=UserUtility.getLdapUtility().getUser(name);
    String userExtra=user.getExtra();
    if (values != null && userExtra != null) {
      for (      MetadataValue mv : values) {
        String xpathRaw=mv.get(""String_Node_Str"");
        if (xpathRaw != null && xpathRaw.length() > 0) {
          String[] xpaths=xpathRaw.split(""String_Node_Str"");
          String value;
          List<String> allValues=new ArrayList<>();
          for (          String xpath : xpaths) {
            allValues.addAll(ServerTools.applyXpath(userExtra,xpath));
          }
          boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
          if (allEqual && !allValues.isEmpty()) {
            value=allValues.get(0);
          }
 else {
            value=String.join(""String_Node_Str"",allValues);
          }
          mv.set(""String_Node_Str"",value.trim());
        }
      }
    }
  }
 catch (  LdapUtilityException e) {
  }
  return new UserExtraBundle(name,values);
}",0.993006993006993
188603,"public CreateJob(Class<T> classToReceive,final List<PluginType> pluginType){
  if (classToReceive.getName().equals(TransferredResource.class.getName())) {
    this.selected=IngestTransfer.getInstance().getSelected();
  }
 else {
    this.selected=Search.getInstance().getSelected();
  }
  initWidget(uiBinder.createAndBindUi(this));
  BrowserService.Util.getInstance().retrievePluginsInfo(pluginType,new AsyncCallback<List<PluginInfo>>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    List<PluginInfo> pluginsInfo){
      init(pluginsInfo);
    }
  }
);
}","public CreateJob(Class<T> classToReceive,final List<PluginType> pluginType){
  if (classToReceive.getName().equals(TransferredResource.class.getName())) {
    this.selected=IngestTransfer.getInstance().getSelected();
    isIngest=true;
  }
 else {
    this.selected=Search.getInstance().getSelected();
    isIngest=false;
  }
  initWidget(uiBinder.createAndBindUi(this));
  boolean isEmpty=updateObjectList();
  if (isEmpty && isIngest) {
    Tools.newHistory(IngestTransfer.RESOLVER);
  }
  BrowserService.Util.getInstance().retrievePluginsInfo(pluginType,new AsyncCallback<List<PluginInfo>>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    List<PluginInfo> pluginsInfo){
      init(pluginsInfo);
    }
  }
);
}",0.8866425992779784
188604,"public void init(List<PluginInfo> plugins){
  this.plugins=plugins;
  name.setText(messages.processNewDefaultName(new Date()));
  workflowOptions.setPlugins(plugins);
  updateObjectList();
  configurePlugins(selected.getSelectedClass());
  workflowCategoryList.addStyleName(""String_Node_Str"");
  workflowList.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      String selectedPluginId=workflowList.getSelectedValue();
      if (selectedPluginId != null) {
        CreateJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
      }
      updateWorkflowOptions();
    }
  }
);
}","public void init(List<PluginInfo> plugins){
  this.plugins=plugins;
  name.setText(messages.processNewDefaultName(new Date()));
  workflowOptions.setPlugins(plugins);
  configurePlugins(selected.getSelectedClass());
  workflowCategoryList.addStyleName(""String_Node_Str"");
  workflowList.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      String selectedPluginId=workflowList.getSelectedValue();
      if (selectedPluginId != null) {
        CreateJob.this.selectedPlugin=lookupPlugin(selectedPluginId);
      }
      updateWorkflowOptions();
    }
  }
);
}",0.9822294022617124
188605,"/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 * @param enablePermissions
 */
public UserDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect,boolean enablePermissions){
  password=new PasswordPanel(editmode);
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  permissionsSelectPanel.setVisible(enablePermissions);
  ValueChangeHandler<String> valueChangedHandler=new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      onChange();
    }
  }
;
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      UserDataPanel.this.onChange();
    }
  }
;
  SelectionHandler<Suggestion> selectionHandler=new SelectionHandler<Suggestion>(){
    @Override public void onSelection(    SelectionEvent<Suggestion> event){
      onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  username.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      int keyCode=event.getNativeKeyCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != KeyCodes.KEY_TAB) && (keyCode != KeyCodes.KEY_DELETE) && (keyCode != KeyCodes.KEY_ENTER) && (keyCode != KeyCodes.KEY_HOME) && (keyCode != KeyCodes.KEY_END) && (keyCode != KeyCodes.KEY_LEFT) && (keyCode != KeyCodes.KEY_UP) && (keyCode != KeyCodes.KEY_RIGHT) && (keyCode != KeyCodes.KEY_DOWN) && (keyCode != KeyCodes.KEY_BACKSPACE)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  username.addChangeHandler(changeHandler);
  username.addKeyUpHandler(keyUpHandler);
  password.addValueChangeHandler(valueChangedHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}","/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 * @param enablePermissions
 */
public UserDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect,boolean enablePermissions){
  password=new PasswordPanel(editmode);
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  permissionsSelectPanel.setVisible(enablePermissions);
  ValueChangeHandler<String> valueChangedHandler=new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      onChange();
    }
  }
;
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      UserDataPanel.this.onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  username.addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      int keyCode=event.getNativeKeyCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != KeyCodes.KEY_TAB) && (keyCode != KeyCodes.KEY_DELETE) && (keyCode != KeyCodes.KEY_ENTER) && (keyCode != KeyCodes.KEY_HOME) && (keyCode != KeyCodes.KEY_END) && (keyCode != KeyCodes.KEY_LEFT) && (keyCode != KeyCodes.KEY_UP) && (keyCode != KeyCodes.KEY_RIGHT) && (keyCode != KeyCodes.KEY_DOWN) && (keyCode != KeyCodes.KEY_BACKSPACE)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  username.addChangeHandler(changeHandler);
  username.addKeyUpHandler(keyUpHandler);
  password.addValueChangeHandler(valueChangedHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}",0.9625563614977456
188606,"@Override public boolean updateObjectList(){
  SelectedItems selected=getSelected();
  boolean isEmpty=false;
  if (selected != null) {
    if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList)selected).getIds();
      Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.TRANSFERRED_RESOURCE_UUID,ids));
      TransferredResourceList list=new TransferredResourceList(filter,null,messages.transferredResourcesTitle(),false,10,10);
      getTargetPanel().clear();
      getTargetPanel().add(list);
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter)selected).getFilter();
      TransferredResourceList list=new TransferredResourceList(filter,null,messages.transferredResourcesTitle(),false,10,10);
      getTargetPanel().clear();
      getTargetPanel().add(list);
    }
 else {
      isEmpty=true;
    }
    setJobSelectedDescription(messages.createJobSelectedSIP());
  }
  return isEmpty;
}","@Override public boolean updateObjectList(){
  SelectedItems selected=getSelected();
  boolean isEmpty=false;
  if (selected != null) {
    if (selected instanceof SelectedItemsList) {
      List<String> ids=((SelectedItemsList)selected).getIds();
      Filter filter=new Filter(new OneOfManyFilterParameter(RodaConstants.TRANSFERRED_RESOURCE_UUID,ids));
      TransferredResourceList list=new TransferredResourceList(filter,null,messages.transferredResourcesTitle(),false,10,10);
      getTargetPanel().clear();
      getTargetPanel().add(list);
      isEmpty=ids.isEmpty();
    }
 else     if (selected instanceof SelectedItemsFilter) {
      Filter filter=((SelectedItemsFilter)selected).getFilter();
      TransferredResourceList list=new TransferredResourceList(filter,null,messages.transferredResourcesTitle(),false,10,10);
      getTargetPanel().clear();
      getTargetPanel().add(list);
    }
 else {
      isEmpty=true;
    }
    setJobSelectedDescription(messages.createJobSelectedSIP());
  }
 else {
    isEmpty=true;
  }
  return isEmpty;
}",0.9623839765510503
188607,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> aips) throws PluginException {
  FileOutputStream fos=null;
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,aips.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    if (exportType == ExportType.MULTI_ZIP) {
      for (      AIP aip : aips) {
        LOGGER.debug(""String_Node_Str"",aip.getId());
        try {
          List<ZipEntryInfo> zipEntries=ModelUtils.aipToZipEntry(aip);
          java.io.File outputFolderFile=new java.io.File(outputFolder);
          java.io.File zip=new java.io.File(outputFolderFile,aip.getId() + ""String_Node_Str"");
          if (zip.exists() && removeIfAlreadyExists) {
            zip.delete();
          }
          fos=new FileOutputStream(zip);
          ZipTools.zip(zipEntries,fos);
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
          jobPluginInfo.incrementObjectsProcessedWithFailure();
        }
      }
      jobPluginInfo.finalizeInfo();
      PluginHelper.updateJobInformation(this,jobPluginInfo);
    }
 else     if (exportType == ExportType.FOLDER) {
      FileStorageService localStorage=new FileStorageService(Paths.get(outputFolder));
      for (      AIP aip : aips) {
        LOGGER.debug(""String_Node_Str"",aip.getId());
        StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
        try {
          localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
        }
 catch (        AlreadyExistsException e) {
          if (removeIfAlreadyExists) {
            try {
              localStorage.deleteResource(DefaultStoragePath.parse(aip.getId()));
              localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
              jobPluginInfo.incrementObjectsProcessedWithSuccess();
            }
 catch (            AlreadyExistsException e2) {
              jobPluginInfo.incrementObjectsProcessedWithFailure();
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",aip.getId());
            jobPluginInfo.incrementObjectsProcessedWithFailure();
          }
        }
      }
      jobPluginInfo.finalizeInfo();
      PluginHelper.updateJobInformation(this,jobPluginInfo);
    }
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|GenericException|NotFoundException e) {
    throw new PluginException(e.getMessage(),e);
  }
catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
 finally {
    IOUtils.closeQuietly(fos);
  }
  return PluginHelper.initPluginReport(this);
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> aips) throws PluginException {
  OutputStream os=null;
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,aips.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    if (exportType == ExportType.MULTI_ZIP) {
      for (      AIP aip : aips) {
        LOGGER.debug(""String_Node_Str"",aip.getId());
        try {
          List<ZipEntryInfo> zipEntries=ModelUtils.aipToZipEntry(aip);
          Path outputPath=Paths.get(outputFolder);
          Path zip=outputPath.resolve(aip.getId() + ""String_Node_Str"");
          if (Files.exists(zip) && removeIfAlreadyExists) {
            Files.delete(zip);
          }
          os=Files.newOutputStream(zip,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
          ZipTools.zip(zipEntries,os);
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
          jobPluginInfo.incrementObjectsProcessedWithFailure();
        }
      }
      jobPluginInfo.finalizeInfo();
      PluginHelper.updateJobInformation(this,jobPluginInfo);
    }
 else     if (exportType == ExportType.FOLDER) {
      FileStorageService localStorage=new FileStorageService(Paths.get(outputFolder));
      for (      AIP aip : aips) {
        LOGGER.debug(""String_Node_Str"",aip.getId());
        StoragePath aipPath=ModelUtils.getAIPStoragePath(aip.getId());
        try {
          localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
          jobPluginInfo.incrementObjectsProcessedWithSuccess();
        }
 catch (        AlreadyExistsException e) {
          if (removeIfAlreadyExists) {
            try {
              localStorage.deleteResource(DefaultStoragePath.parse(aip.getId()));
              localStorage.copy(storage,aipPath,DefaultStoragePath.parse(aip.getId()));
              jobPluginInfo.incrementObjectsProcessedWithSuccess();
            }
 catch (            AlreadyExistsException e2) {
              jobPluginInfo.incrementObjectsProcessedWithFailure();
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",aip.getId());
            jobPluginInfo.incrementObjectsProcessedWithFailure();
          }
        }
      }
      jobPluginInfo.finalizeInfo();
      PluginHelper.updateJobInformation(this,jobPluginInfo);
    }
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|GenericException|NotFoundException e) {
    throw new PluginException(e.getMessage(),e);
  }
catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
 finally {
    IOUtils.closeQuietly(os);
  }
  return PluginHelper.initPluginReport(this);
}",0.9427157001414428
188608,"/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<MetadataValue>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.clone());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null, version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,bundle.getId(),typeString,version,new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<MetadataValue>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.clone());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().toLowerCase().equals(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equals(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 2);
      }
    }
  }
);
}","/** 
 * Create a new panel to edit a user
 * @param user the user to edit
 */
public EditDescriptiveMetadata(final String aipId,final DescriptiveMetadataEditBundle bundleParam){
  this.aipId=aipId;
  this.bundle=bundleParam;
  HashSet<MetadataValue> newValues=null;
  if (bundle.getValues() != null) {
    newValues=new HashSet<MetadataValue>();
    for (    MetadataValue mv : bundle.getValues())     newValues.add(mv.clone());
  }
  supportedBundle=new SupportedMetadataTypeBundle(bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
  initWidget(uiBinder.createAndBindUi(this));
  metadataXML=new TextArea();
  metadataXML.addStyleName(""String_Node_Str"");
  id.setText(bundle.getId());
  id.setEnabled(false);
  type.addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent changeEvent){
      String typeString=null, version=""String_Node_Str"";
      String value=type.getSelectedValue();
      if (value.contains(RodaConstants.METADATA_VERSION_SEPARATOR) && bundle.getVersion() != null) {
        typeString=value.substring(0,value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
        version=value.substring(value.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,value.length());
      }
      if (typeString == null) {
        typeString=value;
      }
      BrowserService.Util.getInstance().retrieveDescriptiveMetadataEditBundle(aipId,bundle.getId(),typeString,version,new AsyncCallback<DescriptiveMetadataEditBundle>(){
        @Override public void onFailure(        Throwable caught){
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        @Override public void onSuccess(        DescriptiveMetadataEditBundle editBundle){
          bundle=editBundle;
          HashSet<MetadataValue> newValues=null;
          if (bundle.getValues() != null) {
            newValues=new HashSet<MetadataValue>();
            for (            MetadataValue mv : bundle.getValues())             newValues.add(mv.clone());
          }
          supportedBundle=new SupportedMetadataTypeBundle(bundle.getType(),bundle.getVersion(),bundle.getId(),bundle.getRawTemplate(),newValues);
          updateFormOrXML();
        }
      }
);
    }
  }
);
  BrowserService.Util.getInstance().retrieveSupportedMetadata(aipId,LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SupportedMetadataTypeBundle>>(){
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
    @Override public void onSuccess(    List<SupportedMetadataTypeBundle> metadataTypes){
      int selected=-1;
      int index=0;
      Map<String,Integer> types=new HashMap<String,Integer>();
      for (      SupportedMetadataTypeBundle b : metadataTypes) {
        if (b.getVersion() != null) {
          type.addItem(b.getLabel(),b.getType() + RodaConstants.METADATA_VERSION_SEPARATOR + b.getVersion());
        }
 else {
          type.addItem(b.getLabel(),b.getType());
        }
        String lowerCaseType=bundle.getType() != null ? bundle.getType().toLowerCase() : null;
        if (b.getType().toLowerCase().equals(lowerCaseType)) {
          String lowerCaseVersion=bundle.getVersion() != null ? bundle.getVersion().toLowerCase() : null;
          if (b.getVersion() != null && lowerCaseVersion != null) {
            if (lowerCaseVersion != null && b.getVersion().equals(lowerCaseVersion)) {
              selected=index;
            }
          }
 else           if (b.getVersion() == null && lowerCaseVersion == null) {
            selected=index;
          }
        }
        types.put(b.getType(),index);
        index++;
      }
      updateFormOrXML();
      if (selected >= 0) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(selected);
      }
 else       if (""String_Node_Str"".equals(bundle.getType())) {
        type.addItem(messages.otherItem(),""String_Node_Str"");
        type.setSelectedIndex(type.getItemCount() - 1);
      }
 else {
        if (!types.keySet().contains(bundle.getType())) {
          type.addItem(messages.otherItem() + ""String_Node_Str"" + bundle.getType()+ ""String_Node_Str"",bundle.getType());
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(type.getItemCount() - 2);
        }
 else {
          type.addItem(messages.otherItem(),""String_Node_Str"");
          type.setSelectedIndex(types.get(bundle.getType()));
        }
      }
    }
  }
);
}",0.9627848391159968
188609,"@Override public void onChange(ChangeEvent event){
  IncrementalAssociativeList sourceList=(IncrementalAssociativeList)event.getSource();
  List<String> values=sourceList.getTextBoxesValue();
  if (!values.isEmpty()) {
    value=getValuesString(values);
  }
}","@Override public void onChange(ChangeEvent event){
  value=objectBox.getSelectedValue();
}",0.4355300859598854
188610,"private void updateLayout(){
  if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
    createBooleanLayout();
  }
 else   if (PluginParameterType.STRING.equals(parameter.getType())) {
    createStringLayout();
  }
 else   if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
    createPluginSipToAipLayout();
  }
 else   if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
    createSelectAipLayout();
  }
 else   if (PluginParameterType.RISK_ID.equals(parameter.getType())) {
    createSelectRiskLayout();
  }
 else   if (PluginParameterType.SEVERITY.equals(parameter.getType())) {
    createSelectSeverityLayout();
  }
 else {
    logger.warn(""String_Node_Str"" + parameter.getType() + ""String_Node_Str"");
    createStringLayout();
  }
}","private void updateLayout(){
  if (PluginParameterType.BOOLEAN.equals(parameter.getType())) {
    createBooleanLayout();
  }
 else   if (PluginParameterType.STRING.equals(parameter.getType())) {
    createStringLayout();
  }
 else   if (PluginParameterType.PLUGIN_SIP_TO_AIP.equals(parameter.getType())) {
    createPluginSipToAipLayout();
  }
 else   if (PluginParameterType.AIP_ID.equals(parameter.getType())) {
    createSelectAipLayout();
  }
 else   if (PluginParameterType.RISK_ID.equals(parameter.getType())) {
    createSelectRiskLayout();
  }
 else   if (PluginParameterType.SEVERITY.equals(parameter.getType())) {
    createSelectSeverityLayout();
  }
 else   if (PluginParameterType.SEVERITY.equals(parameter.getType())) {
    createSelectSeverityLayout();
  }
 else   if (PluginParameterType.RODA_OBJECT.equals(parameter.getType())) {
    createSelectRodaObjectLayout();
  }
 else {
    logger.warn(""String_Node_Str"" + parameter.getType() + ""String_Node_Str"");
    createStringLayout();
  }
}",0.8738081884464386
188611,"@Override public List<Class<AIP>> getObjectClasses(){
  return Arrays.asList(AIP.class);
}","@Override public List<Class<T>> getObjectClasses(){
  List<Class<? extends IsRODAObject>> list=new ArrayList<>();
  list.add(AIP.class);
  list.add(Risk.class);
  return (List)list;
}",0.5860805860805861
188612,"@Override public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  super.setParameterValues(parameters);
  if (parameters.containsKey(""String_Node_Str"")) {
    riskIds=parameters.get(""String_Node_Str"");
  }
  if (parameters.containsKey(""String_Node_Str"")) {
    aipIds=parameters.get(""String_Node_Str"");
  }
}","@Override public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  super.setParameterValues(parameters);
}",0.593186372745491
188613,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  LOGGER.debug(""String_Node_Str"");
  Report pluginReport=PluginHelper.initPluginReport(this);
  try {
    Filter filter=new Filter();
    int size=0;
    if (riskIds != null) {
      String[] risks=riskIds.split(""String_Node_Str"");
      size=risks.length;
      for (      String riskId : risks) {
        filter.add(new SimpleFilterParameter(RodaConstants.RISK_INCIDENCE_RISK_ID,riskId));
      }
    }
 else     if (aipIds != null) {
      String[] aips=aipIds.split(""String_Node_Str"");
      size=aips.length;
      for (      String aipId : aips) {
        filter.add(new SimpleFilterParameter(RodaConstants.RISK_INCIDENCE_AIP_ID,aipId));
      }
    }
    IndexResult<RiskIncidence> incidences=index.find(RiskIncidence.class,filter,Sorter.NONE,new Sublist(0,size));
    for (    RiskIncidence incidence : incidences.getResults()) {
      model.deleteRiskIncidence(incidence.getId(),false);
    }
  }
 catch (  GenericException|NotFoundException|AuthorizationDeniedException|RequestNotValidException e) {
    LOGGER.error(""String_Node_Str"");
  }
  LOGGER.debug(""String_Node_Str"");
  return pluginReport;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<T> list) throws PluginException {
  LOGGER.debug(""String_Node_Str"");
  Report pluginReport=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      Filter filter=new Filter();
      for (      T object : list) {
        if (object instanceof AIP) {
          AIP aip=(AIP)object;
          filter.add(new SimpleFilterParameter(RodaConstants.RISK_INCIDENCE_AIP_ID,aip.getId()));
        }
 else         if (object instanceof Risk) {
          Risk risk=(Risk)object;
          filter.add(new SimpleFilterParameter(RodaConstants.RISK_INCIDENCE_RISK_ID,risk.getId()));
        }
      }
      IndexResult<RiskIncidence> incidences=index.find(RiskIncidence.class,filter,Sorter.NONE,new Sublist(0,list.size()));
      for (      RiskIncidence incidence : incidences.getResults()) {
        model.deleteRiskIncidence(incidence.getId(),false);
      }
      jobPluginInfo.incrementObjectsProcessedWithSuccess(list.size());
      jobPluginInfo.finalizeInfo();
      PluginHelper.updateJobInformation(this,jobPluginInfo);
    }
 catch (    GenericException|NotFoundException|AuthorizationDeniedException|RequestNotValidException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.debug(""String_Node_Str"");
  return pluginReport;
}",0.5398260869565218
188614,"@Override public Plugin<AIP> cloneMe(){
  return new RiskIncidenceRemoverPlugin();
}","@Override public Plugin<T> cloneMe(){
  return new RiskIncidenceRemoverPlugin();
}",0.9759036144578314
188615,"public static String deleteAIP(SelectedItems<IndexedAIP> selected,RodaUser user) throws AuthorizationDeniedException, GenericException, RequestNotValidException, NotFoundException {
  List<String> aipIds=consolidate(user,IndexedAIP.class,selected);
  String parentId=null;
  for (  String aipId : aipIds) {
    AIP aip=RodaCoreFactory.getModelService().retrieveAIP(aipId);
    parentId=aip.getParentId();
    RodaCoreFactory.getModelService().deleteAIP(aip.getId());
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()));
    RodaCoreFactory.getIndexService().execute(IndexedAIP.class,filter,new IndexRunnable<IndexedAIP>(){
      @Override public void run(      IndexedAIP item) throws GenericException, RequestNotValidException, AuthorizationDeniedException {
        try {
          RodaCoreFactory.getModelService().deleteAIP(item.getId());
        }
 catch (        NotFoundException e) {
        }
      }
    }
);
  }
  RodaCoreFactory.getIndexService().commitAIPs();
  try {
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put(""String_Node_Str"",StringUtils.join(aipIds,""String_Node_Str""));
    Job job=new Job();
    job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
    job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
    job.setPluginParameters(parameters);
    job.setSourceObjects(new SelectedItemsAll<>(AIP.class.getName()));
    Jobs.createJob(user,job);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return parentId;
}","public static String deleteAIP(SelectedItems<IndexedAIP> selected,RodaUser user) throws AuthorizationDeniedException, GenericException, RequestNotValidException, NotFoundException {
  List<String> aipIds=consolidate(user,IndexedAIP.class,selected);
  try {
    Job job=new Job();
    job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
    job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
    job.setSourceObjects(SelectedItemsList.create(AIP.class,aipIds));
    Jobs.createJob(user,job);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"");
  }
  String parentId=null;
  for (  String aipId : aipIds) {
    AIP aip=RodaCoreFactory.getModelService().retrieveAIP(aipId);
    parentId=aip.getParentId();
    RodaCoreFactory.getModelService().deleteAIP(aip.getId());
    Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aip.getId()));
    RodaCoreFactory.getIndexService().execute(IndexedAIP.class,filter,new IndexRunnable<IndexedAIP>(){
      @Override public void run(      IndexedAIP item) throws GenericException, RequestNotValidException, AuthorizationDeniedException {
        try {
          RodaCoreFactory.getModelService().deleteAIP(item.getId());
        }
 catch (        NotFoundException e) {
        }
      }
    }
);
  }
  RodaCoreFactory.getIndexService().commitAIPs();
  return parentId;
}",0.2971729125575279
188616,"public static void deleteRisk(RodaUser user,SelectedItems<IndexedRisk> selected) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException, InvalidParameterException, JobAlreadyStartedException {
  List<String> idList=consolidate(user,IndexedRisk.class,selected);
  for (  String riskId : idList) {
    RodaCoreFactory.getModelService().deleteRisk(riskId,true);
  }
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",StringUtils.join(idList,""String_Node_Str""));
  Job job=new Job();
  job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
  job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
  job.setPluginParameters(parameters);
  job.setSourceObjects(new SelectedItemsAll<>(AIP.class.getName()));
  Jobs.createJob(user,job);
}","public static void deleteRisk(RodaUser user,SelectedItems<IndexedRisk> selected) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException, InvalidParameterException, JobAlreadyStartedException {
  List<String> idList=consolidate(user,IndexedRisk.class,selected);
  for (  String riskId : idList) {
    RodaCoreFactory.getModelService().deleteRisk(riskId,true);
  }
  Job job=new Job();
  job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
  job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
  job.setSourceObjects(SelectedItemsList.create(Risk.class,idList));
  Jobs.createJob(user,job);
}",0.585832801531589
188617,"protected static void validateGetAIPRepresentationParams(String acceptFormat) throws RequestNotValidException {
  if (!RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_BIN.equals(acceptFormat) && !RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON.equals(acceptFormat) && !RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_XML.equals(acceptFormat)) {
    throw new RequestNotValidException(""String_Node_Str"" + RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT + ""String_Node_Str""+ Arrays.asList(RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON,RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_XML,RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_BIN));
  }
}","protected static void validateGetAIPRepresentationParams(String acceptFormat) throws RequestNotValidException {
  if (!RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_ZIP.equals(acceptFormat) && !RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON.equals(acceptFormat) && !RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_XML.equals(acceptFormat)) {
    throw new RequestNotValidException(""String_Node_Str"" + RodaConstants.API_QUERY_KEY_ACCEPT_FORMAT + ""String_Node_Str""+ Arrays.asList(RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_JSON,RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_XML,RodaConstants.API_QUERY_VALUE_ACCEPT_FORMAT_ZIP));
  }
}",0.9904306220095692
188618,"public static void appraisal(RodaUser user,SelectedItems<IndexedAIP> selected,boolean accept,String rejectReason) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  List<String> listOfIds=consolidate(user,IndexedAIP.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Date now=new Date();
  Map<String,Pair<Integer,Integer>> jobState=new HashMap<>();
  String userAgentId;
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(user.getName(),model,index,notifyAgent);
    userAgentId=pm.getId();
  }
 catch (  AlreadyExistsException e) {
    userAgentId=IdUtils.getUserAgentId(user.getName());
  }
catch (  ValidationException e) {
    throw new GenericException(e);
  }
  for (  String aipId : listOfIds) {
    AIP aip=model.retrieveAIP(aipId);
    String jobId=aip.getIngestJobId();
    if (accept) {
      aip.setState(AIPState.ACTIVE);
      model.updateAIPState(aip,user.getName());
      String id=IdUtils.createPreservationMetadataId(PreservationMetadataType.EVENT);
      PreservationEventType type=PreservationEventType.ACCESSION;
      String preservationEventDescription=AutoAcceptSIPPlugin.DESCRIPTION;
      List<LinkingIdentifier> sources=new ArrayList<>();
      List<LinkingIdentifier> outcomes=Arrays.asList(PluginHelper.getLinkingIdentifier(aipId,RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
      PluginState outcome=PluginState.SUCCESS;
      String outcomeDetailNote=AutoAcceptSIPPlugin.SUCCESS_MESSAGE;
      String outcomeDetailExtension=null;
      boolean notifyEvent=true;
      try {
        ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,now,type.toString(),preservationEventDescription,sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,Arrays.asList(userAgentId));
        model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipId,null,null,null,premisEvent,notifyEvent);
      }
 catch (      AlreadyExistsException|ValidationException e) {
        throw new GenericException(e);
      }
    }
 else {
      model.deleteAIP(aipId);
      try {
        Map<String,String> parameters=new HashMap<String,String>();
        parameters.put(""String_Node_Str"",aipId);
        Job job=new Job();
        job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
        job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
        job.setPluginParameters(parameters);
        job.setSourceObjects(new SelectedItemsAll<>(AIP.class.getName()));
        Jobs.createJob(user,job);
      }
 catch (      JobAlreadyStartedException e) {
        LOGGER.error(""String_Node_Str"");
      }
    }
    Report report=model.retrieveJobReport(jobId,aipId);
    Report reportItem=new Report();
    reportItem.setTitle(""String_Node_Str"");
    reportItem.setPlugin(user.getName());
    reportItem.setPluginDetails(rejectReason);
    reportItem.setPluginState(accept ? PluginState.SUCCESS : PluginState.FAILURE);
    reportItem.setOutcomeObjectState(accept ? AIPState.ACTIVE : AIPState.DELETED);
    reportItem.setDateCreated(now);
    report.addReport(reportItem);
    model.createOrUpdateJobReport(report);
    Pair<Integer,Integer> pair=jobState.get(jobId);
    if (pair == null) {
      jobState.put(jobId,Pair.create(1,accept ? 1 : 0));
    }
 else {
      jobState.put(jobId,Pair.create(pair.getFirst() + 1,pair.getSecond() + (accept ? 1 : 0)));
    }
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : jobState.entrySet()) {
    String jobId=entry.getKey();
    int total=entry.getValue().getFirst();
    int accepted=entry.getValue().getSecond();
    int rejected=total - accepted;
    Job job=model.retrieveJob(jobId);
    if (rejected > 0) {
      job.getJobStats().setSourceObjectsProcessedWithSuccess(job.getJobStats().getSourceObjectsProcessedWithSuccess() - rejected);
      job.getJobStats().setSourceObjectsProcessedWithFailure(job.getJobStats().getSourceObjectsProcessedWithFailure() + rejected);
    }
    job.getJobStats().setOutcomeObjectsWithManualIntervention(job.getJobStats().getOutcomeObjectsWithManualIntervention() - total);
    model.createOrUpdateJob(job);
  }
  RodaCoreFactory.getIndexService().commit(IndexedAIP.class,Job.class,Report.class,IndexedPreservationEvent.class);
}","public static void appraisal(RodaUser user,SelectedItems<IndexedAIP> selected,boolean accept,String rejectReason) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException {
  List<String> listOfIds=consolidate(user,IndexedAIP.class,selected);
  ModelService model=RodaCoreFactory.getModelService();
  IndexService index=RodaCoreFactory.getIndexService();
  Date now=new Date();
  Map<String,Pair<Integer,Integer>> jobState=new HashMap<>();
  List<String> aipsToDelete=new ArrayList<>();
  String userAgentId;
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(user.getName(),model,index,notifyAgent);
    userAgentId=pm.getId();
  }
 catch (  AlreadyExistsException e) {
    userAgentId=IdUtils.getUserAgentId(user.getName());
  }
catch (  ValidationException e) {
    throw new GenericException(e);
  }
  for (  String aipId : listOfIds) {
    AIP aip=model.retrieveAIP(aipId);
    String jobId=aip.getIngestJobId();
    if (accept) {
      aip.setState(AIPState.ACTIVE);
      model.updateAIPState(aip,user.getName());
      String id=IdUtils.createPreservationMetadataId(PreservationMetadataType.EVENT);
      PreservationEventType type=PreservationEventType.ACCESSION;
      String preservationEventDescription=AutoAcceptSIPPlugin.DESCRIPTION;
      List<LinkingIdentifier> sources=new ArrayList<>();
      List<LinkingIdentifier> outcomes=Arrays.asList(PluginHelper.getLinkingIdentifier(aipId,RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
      PluginState outcome=PluginState.SUCCESS;
      String outcomeDetailNote=AutoAcceptSIPPlugin.SUCCESS_MESSAGE;
      String outcomeDetailExtension=null;
      boolean notifyEvent=true;
      try {
        ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,now,type.toString(),preservationEventDescription,sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,Arrays.asList(userAgentId));
        model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipId,null,null,null,premisEvent,notifyEvent);
      }
 catch (      AlreadyExistsException|ValidationException e) {
        throw new GenericException(e);
      }
    }
 else {
      model.deleteAIP(aipId);
      aipsToDelete.add(aipId);
    }
    Report report=model.retrieveJobReport(jobId,aipId);
    Report reportItem=new Report();
    reportItem.setTitle(""String_Node_Str"");
    reportItem.setPlugin(user.getName());
    reportItem.setPluginDetails(rejectReason);
    reportItem.setPluginState(accept ? PluginState.SUCCESS : PluginState.FAILURE);
    reportItem.setOutcomeObjectState(accept ? AIPState.ACTIVE : AIPState.DELETED);
    reportItem.setDateCreated(now);
    report.addReport(reportItem);
    model.createOrUpdateJobReport(report);
    Pair<Integer,Integer> pair=jobState.get(jobId);
    if (pair == null) {
      jobState.put(jobId,Pair.create(1,accept ? 1 : 0));
    }
 else {
      jobState.put(jobId,Pair.create(pair.getFirst() + 1,pair.getSecond() + (accept ? 1 : 0)));
    }
  }
  try {
    Job job=new Job();
    job.setName(RiskIncidenceRemoverPlugin.class.getSimpleName() + ""String_Node_Str"" + job.getStartDate());
    job.setPlugin(RiskIncidenceRemoverPlugin.class.getName());
    job.setSourceObjects(SelectedItemsList.create(AIP.class,aipsToDelete));
    Jobs.createJob(user,job);
  }
 catch (  JobAlreadyStartedException e) {
    LOGGER.error(""String_Node_Str"");
  }
  for (  Entry<String,Pair<Integer,Integer>> entry : jobState.entrySet()) {
    String jobId=entry.getKey();
    int total=entry.getValue().getFirst();
    int accepted=entry.getValue().getSecond();
    int rejected=total - accepted;
    Job job=model.retrieveJob(jobId);
    if (rejected > 0) {
      job.getJobStats().setSourceObjectsProcessedWithSuccess(job.getJobStats().getSourceObjectsProcessedWithSuccess() - rejected);
      job.getJobStats().setSourceObjectsProcessedWithFailure(job.getJobStats().getSourceObjectsProcessedWithFailure() + rejected);
    }
    job.getJobStats().setOutcomeObjectsWithManualIntervention(job.getJobStats().getOutcomeObjectsWithManualIntervention() - total);
    model.createOrUpdateJob(job);
  }
  RodaCoreFactory.getIndexService().commit(IndexedAIP.class,Job.class,Report.class,IndexedPreservationEvent.class);
}",0.7843137254901961
188619,"public AIP(String id,String parentId,String type,AIPState state,Permissions permissions,List<DescriptiveMetadata> descriptiveMetadata,List<Representation> representations){
  super();
  this.id=id;
  this.parentId=parentId;
  this.type=type;
  this.state=state;
  this.permissions=permissions;
  this.descriptiveMetadata=descriptiveMetadata;
  this.representations=representations;
}","public AIP(String id,String parentId,String type,AIPState state,Permissions permissions,List<DescriptiveMetadata> descriptiveMetadata,List<Representation> representations,AIPFormat format,List<Relationship> relationships,Date createdOn,String createdBy,Date updatedOn,String updatedBy){
  super();
  this.id=id;
  this.parentId=parentId;
  this.type=type;
  this.state=state;
  this.permissions=permissions;
  this.relationships=relationships;
  this.descriptiveMetadata=descriptiveMetadata;
  this.representations=representations;
  this.format=format;
  this.createdOn=createdOn;
  this.createdBy=createdBy;
  this.updatedOn=updatedOn;
  this.updatedBy=updatedBy;
}",0.7295238095238096
188620,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + id + '\''+ ""String_Node_Str""+ parentId+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ state+ ""String_Node_Str""+ permissions+ ""String_Node_Str""+ descriptiveMetadata+ ""String_Node_Str""+ representations+ ""String_Node_Str""+ ingestSIPId+ '\''+ ""String_Node_Str""+ ingestJobId+ '\''+ ""String_Node_Str""+ ghost+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + id + '\''+ ""String_Node_Str""+ parentId+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ state+ ""String_Node_Str""+ permissions+ ""String_Node_Str""+ descriptiveMetadata+ ""String_Node_Str""+ representations+ ""String_Node_Str""+ ingestSIPId+ '\''+ ""String_Node_Str""+ ingestJobId+ '\''+ ""String_Node_Str""+ ghost+ ""String_Node_Str""+ format+ ""String_Node_Str""+ relationships+ ""String_Node_Str""+ createdOn+ ""String_Node_Str""+ createdBy+ ""String_Node_Str""+ updatedOn+ ""String_Node_Str""+ updatedBy+ '}';
}",0.8169868554095046
188621,"@Override public ByteArrayInputStream load(String href) throws Exception {
  InputStream in=null;
  ByteArrayOutputStream out=null;
  try {
    in=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.CROSSWALKS_DISSEMINATION_OTHER_PATH + href);
    out=new ByteArrayOutputStream();
    IOUtils.copy(in,out);
    return new ByteArrayInputStream(out.toByteArray());
  }
  finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}","@Override public byte[] load(String href) throws Exception {
  InputStream in=null;
  ByteArrayOutputStream out=null;
  try {
    in=RodaCoreFactory.getConfigurationFileAsStream(RodaConstants.CROSSWALKS_DISSEMINATION_OTHER_PATH + href);
    out=new ByteArrayOutputStream();
    IOUtils.copy(in,out);
    return out.toByteArray();
  }
  finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}",0.9236111111111112
188622,"@Override public Source resolve(String href,String base) throws TransformerException {
  try {
    ByteArrayInputStream in=cache.get(href);
    return new StreamSource(in);
  }
 catch (  ExecutionException e) {
    throw new TransformerException(""String_Node_Str"" + href,e);
  }
}","@Override public Source resolve(String href,String base) throws TransformerException {
  try {
    byte[] in=cache.get(href);
    return new StreamSource(new ByteArrayInputStream(in));
  }
 catch (  ExecutionException e) {
    throw new TransformerException(""String_Node_Str"" + href,e);
  }
}",0.8006993006993007
188623,"@Override public XsltExecutable load(Triple<String,String,String> key) throws Exception {
  String basePath=key.getLeft();
  String metadataType=key.getMiddle();
  String metadataVersion=key.getRight();
  return createMetadataTranformer(basePath,metadataType,metadataVersion);
}","@Override public XsltExecutable load(Triple<String,String,String> key) throws Exception {
  String basePath=key.getLeft();
  String metadataType=key.getMiddle();
  String metadataVersion=key.getRight();
  return createMetadataTransformer(basePath,metadataType,metadataVersion);
}",0.9982046678635548
188624,"public static Reader applyMetadataStylesheet(Binary binary,String basePath,String metadataType,String metadataVersion,Map<String,String> parameters) throws GenericException {
  Reader descMetadataReader=null;
  try {
    descMetadataReader=new InputStreamReader(new BOMInputStream(binary.getContent().createInputStream()));
    XMLReader xmlReader=XMLReaderFactory.createXMLReader();
    xmlReader.setEntityResolver(new RodaEntityResolver());
    InputSource source=new InputSource(descMetadataReader);
    Source text=new SAXSource(xmlReader,source);
    XsltExecutable xsltExecutable=CACHE.get(Triple.of(basePath,metadataType,metadataVersion));
    XsltTransformer transformer=xsltExecutable.load();
    CharArrayWriter transformerResult=new CharArrayWriter();
    transformer.setSource(text);
    transformer.setDestination(PROCESSOR.newSerializer(transformerResult));
    for (    Entry<String,String> parameter : parameters.entrySet()) {
      QName qName=new QName(parameter.getKey());
      XdmValue xdmValue=new XdmAtomicValue(parameter.getValue());
      transformer.setParameter(qName,xdmValue);
    }
    transformer.transform();
    return new CharArrayReader(transformerResult.toCharArray());
  }
 catch (  IOException|SAXException|ExecutionException|SaxonApiException e) {
    throw new GenericException(""String_Node_Str"" + binary.getStoragePath() + ""String_Node_Str""+ metadataType+ ""String_Node_Str""+ metadataVersion,e);
  }
 finally {
    IOUtils.closeQuietly(descMetadataReader);
  }
}","public static Reader applyMetadataStylesheet(Binary binary,String basePath,String metadataType,String metadataVersion,Map<String,String> parameters) throws GenericException {
  Reader descMetadataReader=null;
  try {
    descMetadataReader=new InputStreamReader(new BOMInputStream(binary.getContent().createInputStream()));
    XMLReader xmlReader=XMLReaderFactory.createXMLReader();
    xmlReader.setEntityResolver(new RodaEntityResolver());
    InputSource source=new InputSource(descMetadataReader);
    Source text=new SAXSource(xmlReader,source);
    XsltExecutable xsltExecutable=CACHE.get(Triple.of(basePath,metadataType,metadataVersion));
    XsltTransformer transformer=xsltExecutable.load();
    CharArrayWriter transformerResult=new CharArrayWriter();
    transformer.setSource(text);
    transformer.setDestination(PROCESSOR.newSerializer(transformerResult));
    for (    Entry<String,String> parameter : parameters.entrySet()) {
      QName qName=new QName(parameter.getKey());
      XdmValue xdmValue=new XdmAtomicValue(parameter.getValue());
      transformer.setParameter(qName,xdmValue);
    }
    transformer.transform();
    return new CharArrayReader(transformerResult.toCharArray());
  }
 catch (  IOException|SAXException|ExecutionException|SaxonApiException e) {
    LOGGER.error(e.getMessage(),e);
    throw new GenericException(""String_Node_Str"" + binary.getStoragePath() + ""String_Node_Str""+ metadataType+ ""String_Node_Str""+ metadataVersion,e);
  }
 finally {
    IOUtils.closeQuietly(descMetadataReader);
  }
}",0.988157894736842
188625,"public static void checkTransferredResourceAccess(RodaUser user,List<String> ids) throws AuthorizationDeniedException {
  if (""String_Node_Str"".equalsIgnoreCase(user.getId())) {
    return;
  }
 else {
    for (    String id : ids) {
      if (id == null && !""String_Node_Str"".equals(user.getName())) {
        throw new AuthorizationDeniedException(""String_Node_Str"" + user.getId() + ""String_Node_Str"");
      }
 else       if (!Paths.get(id).getName(0).toString().equalsIgnoreCase(user.getName())) {
        throw new AuthorizationDeniedException(""String_Node_Str"" + user.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
      }
    }
  }
}","/** 
 * This method make sure that a normal user can only upload a file to a folder with its own username
 * @param user
 * @param ids
 * @throws AuthorizationDeniedException
 */
public static void checkTransferredResourceAccess(RodaUser user,List<String> ids) throws AuthorizationDeniedException {
  if (""String_Node_Str"".equalsIgnoreCase(user.getId())) {
    return;
  }
 else {
    for (    String id : ids) {
      if (id == null && !""String_Node_Str"".equals(user.getName())) {
        throw new AuthorizationDeniedException(""String_Node_Str"" + user.getId() + ""String_Node_Str"");
      }
 else {
        try {
          IndexService index=RodaCoreFactory.getIndexService();
          TransferredResource parent=index.retrieve(TransferredResource.class,id);
          if (!Paths.get(parent.getRelativePath()).getName(0).toString().equalsIgnoreCase(user.getName())) {
            throw new AuthorizationDeniedException(""String_Node_Str"" + user.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
          }
        }
 catch (        GenericException|NotFoundException e) {
          throw new AuthorizationDeniedException(""String_Node_Str"" + user.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
      }
    }
  }
}",0.6854709952102181
188626,"private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  Path sip=corporaPath.resolve(CorporaConstants.SIP_FOLDER).resolve(CorporaConstants.BAGIT_SIP);
  TransferredResource transferredResourceCreated=f.createFile(null,CorporaConstants.BAGIT_SIP,Files.newInputStream(sip));
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,transferredResourceCreated.getUUID());
  return transferredResource;
}","private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException, AlreadyExistsException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  Path sip=corporaPath.resolve(CorporaConstants.SIP_FOLDER).resolve(CorporaConstants.BAGIT_SIP);
  TransferredResource transferredResourceCreated=f.createFile(null,CorporaConstants.BAGIT_SIP,Files.newInputStream(sip));
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,transferredResourceCreated.getUUID());
  return transferredResource;
}",0.982532751091703
188627,"private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException, IsStillUpdatingException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  Path sip=corporaPath.resolve(CorporaConstants.SIP_FOLDER).resolve(CorporaConstants.EARK_SIP);
  f.createFile(null,CorporaConstants.EARK_SIP,Files.newInputStream(sip));
  f.updateAllTransferredResources(null,true);
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,UUID.nameUUIDFromBytes(CorporaConstants.EARK_SIP.getBytes()).toString());
  return transferredResource;
}","private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException, IsStillUpdatingException, AlreadyExistsException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  Path sip=corporaPath.resolve(CorporaConstants.SIP_FOLDER).resolve(CorporaConstants.EARK_SIP);
  f.createFile(null,CorporaConstants.EARK_SIP,Files.newInputStream(sip));
  f.updateAllTransferredResources(null,true);
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,UUID.nameUUIDFromBytes(CorporaConstants.EARK_SIP.getBytes()).toString());
  return transferredResource;
}",0.9838926174496644
188628,"private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  String parentUUID=f.createFolder(null,""String_Node_Str"").getUUID();
  String test1UUID=f.createFolder(parentUUID,CORPORA_TEST1).getUUID();
  String test2UUID=f.createFolder(parentUUID,""String_Node_Str"").getUUID();
  String test3UUID=f.createFolder(parentUUID,""String_Node_Str"").getUUID();
  f.createFile(parentUUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(parentUUID,""String_Node_Str"",generateContentData());
  f.createFile(parentUUID,""String_Node_Str"",generateContentData());
  f.createFile(test1UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test1UUID,""String_Node_Str"",generateContentData());
  f.createFile(test1UUID,""String_Node_Str"",generateContentData());
  f.createFile(test2UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test2UUID,""String_Node_Str"",generateContentData());
  f.createFile(test2UUID,""String_Node_Str"",generateContentData());
  f.createFile(test3UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test3UUID,""String_Node_Str"",generateContentData());
  f.createFile(test3UUID,""String_Node_Str"",generateContentData());
  f.createFile(parentUUID,CORPORA_PDF,getClass().getResourceAsStream(""String_Node_Str"" + CORPORA_PDF));
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,UUID.nameUUIDFromBytes(""String_Node_Str"".getBytes()).toString());
  return transferredResource;
}","private TransferredResource createCorpora() throws InterruptedException, IOException, FileAlreadyExistsException, NotFoundException, GenericException, RequestNotValidException, AlreadyExistsException {
  TransferredResourcesScanner f=RodaCoreFactory.getTransferredResourcesScanner();
  String parentUUID=f.createFolder(null,""String_Node_Str"").getUUID();
  String test1UUID=f.createFolder(parentUUID,CORPORA_TEST1).getUUID();
  String test2UUID=f.createFolder(parentUUID,""String_Node_Str"").getUUID();
  String test3UUID=f.createFolder(parentUUID,""String_Node_Str"").getUUID();
  f.createFile(parentUUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(parentUUID,""String_Node_Str"",generateContentData());
  f.createFile(parentUUID,""String_Node_Str"",generateContentData());
  f.createFile(test1UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test1UUID,""String_Node_Str"",generateContentData());
  f.createFile(test1UUID,""String_Node_Str"",generateContentData());
  f.createFile(test2UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test2UUID,""String_Node_Str"",generateContentData());
  f.createFile(test2UUID,""String_Node_Str"",generateContentData());
  f.createFile(test3UUID,CORPORA_TEST1_TXT,generateContentData());
  f.createFile(test3UUID,""String_Node_Str"",generateContentData());
  f.createFile(test3UUID,""String_Node_Str"",generateContentData());
  f.createFile(parentUUID,CORPORA_PDF,getClass().getResourceAsStream(""String_Node_Str"" + CORPORA_PDF));
  index.commit(TransferredResource.class);
  TransferredResource transferredResource=index.retrieve(TransferredResource.class,UUID.nameUUIDFromBytes(""String_Node_Str"".getBytes()).toString());
  return transferredResource;
}",0.9929286977018268
188629,"public static AIP earkSIPToAIP(SIP sip,String username,Permissions fullPermissions,ModelService model,StorageService storage,String ingestSIPId,String ingestJobId,String parentId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, ValidationException, IOException {
  AIPState state=AIPState.INGEST_PROCESSING;
  Permissions permissions=new Permissions();
  boolean notify=false;
  String aipType=IngestHelper.getType(sip);
  AIP aip=model.createAIP(state,parentId,aipType,permissions,ingestSIPId,ingestJobId,notify);
  processIPInformation(model,sip,aip.getId(),notify,false);
  for (  IPRepresentation representation : sip.getRepresentations()) {
    processIPRepresentationInformation(model,representation,aip.getId(),storage,notify,false);
  }
  model.notifyAIPCreated(aip.getId());
  AIP createdAIP=model.retrieveAIP(aip.getId());
  Permissions readPermissions=PermissionUtils.grantReadPermissionToUserGroup(model,createdAIP,aip.getPermissions());
  Permissions finalPermissions=PermissionUtils.grantAllPermissions(username,readPermissions,fullPermissions);
  createdAIP.setPermissions(finalPermissions);
  model.updateAIPPermissions(createdAIP);
  return model.retrieveAIP(aip.getId());
}","public static AIP earkSIPToAIP(SIP sip,String username,Permissions fullPermissions,ModelService model,StorageService storage,String ingestSIPId,String ingestJobId,String parentId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, ValidationException, IOException {
  AIPState state=AIPState.INGEST_PROCESSING;
  Permissions permissions=new Permissions();
  boolean notify=false;
  String aipType=IngestHelper.getType(sip);
  AIP aip=model.createAIP(state,parentId,aipType,permissions,ingestSIPId,ingestJobId,notify);
  processIPInformation(model,sip,aip.getId(),notify,false);
  for (  IPRepresentation representation : sip.getRepresentations()) {
    processIPRepresentationInformation(model,representation,aip.getId(),storage,notify,false);
  }
  model.notifyAIPCreated(aip.getId());
  AIP createdAIP=model.retrieveAIP(aip.getId());
  Permissions readPermissions=PermissionUtils.grantReadPermissionToUserGroup(model,createdAIP,aip.getPermissions());
  Permissions finalPermissions=PermissionUtils.grantAllPermissions(username,readPermissions,fullPermissions);
  createdAIP.setPermissions(finalPermissions);
  model.updateAIP(createdAIP);
  return model.retrieveAIP(aip.getId());
}",0.9956401109789932
188630,"private void processAIPPermissions(IndexService index,ModelService model,Job currentJob,AIP aip,Report reportItem){
  try {
    AIP parentAIP=null;
    String jobCreatorUsername=currentJob.getUsername();
    if (aip.getParentId() != null) {
      try {
        parentAIP=model.retrieveAIP(aip.getParentId());
        Set<PermissionType> userPermissions=parentAIP.getPermissions().getUserPermissions(jobCreatorUsername);
        LOGGER.trace(""String_Node_Str"",jobCreatorUsername,parentAIP.getId(),userPermissions);
        if (userPermissions.contains(PermissionType.CREATE)) {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
        }
 else {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
          reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_PERMISSION_TO_CREATE_UNDER_AIP);
        }
      }
 catch (      NotFoundException nfe) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(PARENT_AIP_NOT_FOUND);
      }
catch (      AuthorizationDeniedException e) {
        LOGGER.debug(""String_Node_Str"");
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_AIP_PERMISSION);
      }
    }
 else {
      RODAMember member=index.retrieve(RODAMember.class,jobCreatorUsername);
      if (member.getAllRoles().contains(CREATE_TOP_LEVEL_AIP_PERMISSION)) {
        LOGGER.debug(""String_Node_Str"");
      }
 else {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_CREATE_TOP_LEVEL_AIP_PERMISSION);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  GenericException|RequestNotValidException|NotFoundException e) {
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
  }
}","private void processAIPPermissions(IndexService index,ModelService model,Job currentJob,AIP aip,Report reportItem){
  try {
    AIP parentAIP=null;
    String jobCreatorUsername=currentJob.getUsername();
    if (aip.getParentId() != null) {
      try {
        parentAIP=model.retrieveAIP(aip.getParentId());
        Set<PermissionType> userPermissions=parentAIP.getPermissions().getUserPermissions(jobCreatorUsername);
        LOGGER.trace(""String_Node_Str"",jobCreatorUsername,parentAIP.getId(),userPermissions);
        if (userPermissions.contains(PermissionType.CREATE)) {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
        }
 else {
          LOGGER.debug(""String_Node_Str"",jobCreatorUsername);
          reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_PERMISSION_TO_CREATE_UNDER_AIP);
        }
      }
 catch (      NotFoundException nfe) {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(PARENT_AIP_NOT_FOUND);
      }
catch (      AuthorizationDeniedException e) {
        LOGGER.debug(""String_Node_Str"");
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_AIP_PERMISSION);
      }
    }
 else {
      RODAMember member=index.retrieve(RODAMember.class,jobCreatorUsername);
      if (member.getAllRoles().contains(CREATE_TOP_LEVEL_AIP_PERMISSION) || member.getName().equals(""String_Node_Str"")) {
        LOGGER.debug(""String_Node_Str"");
      }
 else {
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(NO_CREATE_TOP_LEVEL_AIP_PERMISSION);
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
 catch (  GenericException|RequestNotValidException|NotFoundException e) {
    reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
  }
}",0.9869095048377916
188631,"public void registerAction(RodaUser user){
  registerAction(user,null,Collections.EMPTY_LIST);
}","public void registerAction(RodaUser user){
  registerAction(user,(String)null);
}",0.8248587570621468
188632,"private static Path determineRodaHomePath(){
  Path rodaHomePath;
  if (System.getProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY) != null) {
    rodaHomePath=Paths.get(System.getProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY));
  }
 else   if (System.getenv(RodaConstants.INSTALL_FOLDER_ENVIRONEMNT_VARIABLE) != null) {
    rodaHomePath=Paths.get(System.getenv(RodaConstants.INSTALL_FOLDER_ENVIRONEMNT_VARIABLE));
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    rodaHomePath=Paths.get(userHome,""String_Node_Str"");
    if (!Files.exists(rodaHomePath)) {
      try {
        Files.createDirectories(rodaHomePath);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"" + rodaHomePath + ""String_Node_Str"",e);
      }
    }
    System.setProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY,rodaHomePath.toString());
  }
  configPath=rodaHomePath.resolve(RodaConstants.CORE_CONFIG_FOLDER);
  exampleConfigPath=rodaHomePath.resolve(RodaConstants.CORE_EXAMPLE_CONFIG_FOLDER);
  dataPath=rodaHomePath.resolve(RodaConstants.CORE_DATA_FOLDER);
  logPath=dataPath.resolve(RodaConstants.CORE_LOG_FOLDER);
  storagePath=dataPath.resolve(RodaConstants.CORE_STORAGE_FOLDER);
  indexDataPath=dataPath.resolve(RodaConstants.CORE_INDEX_FOLDER);
  if (nodeType != NodeType.TEST) {
    configureLogback();
  }
  return rodaHomePath;
}","private static Path determineRodaHomePath(){
  Path rodaHomePath;
  if (System.getProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY) != null) {
    rodaHomePath=Paths.get(System.getProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY));
  }
 else   if (System.getenv(RodaConstants.INSTALL_FOLDER_ENVIRONEMNT_VARIABLE) != null) {
    rodaHomePath=Paths.get(System.getenv(RodaConstants.INSTALL_FOLDER_ENVIRONEMNT_VARIABLE));
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    rodaHomePath=Paths.get(userHome,""String_Node_Str"");
    if (!Files.exists(rodaHomePath)) {
      try {
        Files.createDirectories(rodaHomePath);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"" + rodaHomePath + ""String_Node_Str"",e);
      }
    }
    System.setProperty(RodaConstants.INSTALL_FOLDER_SYSTEM_PROPERTY,rodaHomePath.toString());
  }
  configPath=rodaHomePath.resolve(RodaConstants.CORE_CONFIG_FOLDER);
  exampleConfigPath=rodaHomePath.resolve(RodaConstants.CORE_EXAMPLE_CONFIG_FOLDER);
  defaultPath=rodaHomePath.resolve(RodaConstants.CORE_DEFAULT_FOLDER);
  dataPath=rodaHomePath.resolve(RodaConstants.CORE_DATA_FOLDER);
  logPath=dataPath.resolve(RodaConstants.CORE_LOG_FOLDER);
  storagePath=dataPath.resolve(RodaConstants.CORE_STORAGE_FOLDER);
  indexDataPath=dataPath.resolve(RodaConstants.CORE_INDEX_FOLDER);
  if (nodeType != NodeType.TEST) {
    configureLogback();
  }
  return rodaHomePath;
}",0.975166142007695
188633,"private static <T extends AbstractPlugin>void createDefaultRisk(ModelService model,int riskIndex,String riskId,Class<T> pluginClass) throws AlreadyExistsException, GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  String configurationFile=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",pluginClass.getName(),""String_Node_Str"",""String_Node_Str"" + Integer.toString(riskIndex + 1));
  if (configurationFile != null) {
    InputStream inputStream=RodaCoreFactory.getConfigurationFileAsStream(configurationFile);
    try {
      Risk risk=JsonUtils.getObjectFromJson(inputStream,Risk.class);
      risk.setId(riskId);
      model.createRisk(risk,false);
    }
 catch (    GenericException e) {
      LOGGER.error(""String_Node_Str"");
    }
    IOUtils.closeQuietly(inputStream);
  }
}","private static <T extends AbstractPlugin>void createDefaultRisk(ModelService model,int riskIndex,String riskId,Class<T> pluginClass) throws AlreadyExistsException, GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  String defaultFile=RodaConstants.CORE_DATA_FOLDER + '/' + RodaConstants.CORE_STORAGE_FOLDER+ '/'+ RodaConstants.CORE_RISK_FOLDER+ '/'+ riskId+ ""String_Node_Str"";
  InputStream inputStream=RodaCoreFactory.getDefaultFileAsStream(defaultFile);
  try {
    Risk risk=JsonUtils.getObjectFromJson(inputStream,Risk.class);
    risk.setId(riskId);
    model.createRisk(risk,false);
  }
 catch (  GenericException e) {
    LOGGER.error(""String_Node_Str"");
  }
  IOUtils.closeQuietly(inputStream);
}",0.5311516677155443
188634,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
          try {
            List<String> passedFiles=new ArrayList<String>();
            List<String> failedFiles=new ArrayList<String>();
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    if (passedFixity) {
                      passedFiles.add(file.getId());
                    }
 else {
                      failedFiles.add(file.getId());
                      aipFailed=true;
                      PluginHelper.createRiskIfNotExists(model,0,risks.get(0),getClass());
                      model.addRiskIncidence(risks.get(0),file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
                    }
                  }
                }
 else {
                  LOGGER.warn(""String_Node_Str"",oFile.getCause());
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ e.getMessage(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.FAILURE,""String_Node_Str"",true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.initPluginReport(this);
  try {
    SimpleJobPluginInfo jobPluginInfo=PluginHelper.getInitialJobInformation(this,list.size());
    PluginHelper.updateJobInformation(this,jobPluginInfo);
    try {
      for (      AIP aip : list) {
        boolean aipFailed=false;
        for (        Representation r : aip.getRepresentations()) {
          LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
          try {
            List<String> passedFiles=new ArrayList<String>();
            List<String> failedFiles=new ArrayList<String>();
            boolean recursive=true;
            CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
            for (            OptionalWithCause<File> oFile : allFiles) {
              if (oFile.isPresent()) {
                File file=oFile.get();
                if (!file.isDirectory()) {
                  StoragePath storagePath=ModelUtils.getFileStoragePath(file);
                  Binary currentFileBinary=storage.getBinary(storagePath);
                  Binary premisFile=model.retrievePreservationFile(file);
                  List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
                  if (fixities != null) {
                    boolean passedFixity=true;
                    Set<String> algorithms=new HashSet<>();
                    for (                    Fixity f : fixities) {
                      algorithms.add(f.getMessageDigestAlgorithm());
                    }
                    try {
                      Map<String,String> checksums=FileUtility.checksums(currentFileBinary.getContent().createInputStream(),algorithms);
                      for (                      Fixity f : fixities) {
                        String checksum=checksums.get(f.getMessageDigestAlgorithm());
                        if (!f.getMessageDigest().trim().equalsIgnoreCase(checksum.trim())) {
                          passedFixity=false;
                          break;
                        }
                      }
                    }
 catch (                    NoSuchAlgorithmException e) {
                      passedFixity=false;
                      LOGGER.debug(""String_Node_Str"",e);
                    }
                    if (passedFixity) {
                      passedFiles.add(file.getId());
                    }
 else {
                      failedFiles.add(file.getId());
                      aipFailed=true;
                      PluginHelper.createRiskIfNotExists(model,0,risks.get(0),getClass());
                      model.addRiskIncidence(risks.get(0),file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId());
                    }
                  }
                }
              }
            }
            IOUtils.closeQuietly(allFiles);
            model.notifyAIPUpdated(aip.getId());
          }
 catch (          IOException|RODAException|XmlException e) {
            LOGGER.error(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ e.getMessage(),e);
          }
        }
        try {
          Report reportItem=PluginHelper.initPluginReportItem(this,aip.getId(),AIP.class,AIPState.ACTIVE);
          if (aipFailed) {
            reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithFailure();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.FAILURE,""String_Node_Str"",true);
          }
 else {
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(""String_Node_Str"");
            jobPluginInfo.incrementObjectsProcessedWithSuccess();
            PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",true);
          }
          report.addReport(reportItem);
          PluginHelper.updatePartialJobReport(this,model,index,reportItem,true);
        }
 catch (        RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
 catch (    ClassCastException e) {
      LOGGER.error(""String_Node_Str"");
      jobPluginInfo.incrementObjectsProcessedWithFailure(list.size());
    }
    jobPluginInfo.finalizeInfo();
    PluginHelper.updateJobInformation(this,jobPluginInfo);
  }
 catch (  JobException e) {
    LOGGER.error(""String_Node_Str"");
  }
  return report;
}",0.9901430842607312
188635,"@Override public List<Class<T>> getObjectClasses(){
  List<Class<? extends IsRODAObject>> list=new ArrayList<>();
  list.add(Agent.class);
  list.add(Format.class);
  list.add(Notification.class);
  list.add(Risk.class);
  list.add(RiskIncidence.class);
  return (List)list;
}","@Override public List<Class<T>> getObjectClasses(){
  List<Class<? extends IsRODAObject>> list=new ArrayList<>();
  list.add(Agent.class);
  list.add(Format.class);
  list.add(Notification.class);
  list.add(Risk.class);
  return (List)list;
}",0.9364161849710982
188636,"/** 
 * Add URL to CLASSPATH
 * @param url {@link URL}
 * @throws IOException IOException
 */
public static void addURL(URL url) throws IOException {
  URLClassLoader sysLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();
  URL urls[]=sysLoader.getURLs();
  for (int i=0; i < urls.length; i++) {
    if (StringUtils.equalsIgnoreCase(urls[i].toString(),url.toString())) {
      LOGGER.debug(""String_Node_Str"" + url + ""String_Node_Str"");
      return;
    }
  }
  Class<?> sysclass=URLClassLoader.class;
  try {
    Method method=sysclass.getDeclaredMethod(""String_Node_Str"",PARAMETERS);
    method.setAccessible(true);
    method.invoke(sysLoader,new Object[]{url});
  }
 catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException|RuntimeException e) {
    throw new IOException(""String_Node_Str"",e);
  }
}","/** 
 * Add URL to CLASSPATH
 * @param url {@link URL}
 * @throws IOException IOException
 */
public static void addURL(URL url) throws IOException {
  URLClassLoader sysLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();
  URL urls[]=sysLoader.getURLs();
  for (int i=0; i < urls.length; i++) {
    if (StringUtils.equalsIgnoreCase(urls[i].toString(),url.toString())) {
      LOGGER.debug(""String_Node_Str"" + url + ""String_Node_Str"");
      return;
    }
  }
  Class sysclass=URLClassLoader.class;
  try {
    Method method=sysclass.getDeclaredMethod(""String_Node_Str"",PARAMETERS);
    method.setAccessible(true);
    method.invoke(sysLoader,new Object[]{url});
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new IOException(""String_Node_Str"");
  }
}",0.917910447761194
188637,"/** 
 * Add file to CLASSPATH
 * @param f File object
 * @throws IOException IOException
 */
public static void addFile(File f) throws IOException {
  addURL(f.toURI().toURL());
}","/** 
 * Add file to CLASSPATH
 * @param f File object
 * @throws IOException IOException
 */
public static void addFile(File f) throws IOException {
  addURL(f.toURL());
}",0.9771428571428572
188638,"/** 
 * Adds the given file path to the classpath and creates an instance of the given class name.
 * @param filePath the path of the file to add to the classpath.
 * @param className the name of the class for which to create an instance.
 * @return the instance created.
 * @throws IOException
 * @throws ClassNotFoundException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public static Object createObject(String filePath,String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
  if (StringUtils.isBlank(className)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoaderUtility.addFile(filePath);
  filePath=""String_Node_Str"" + filePath + ""String_Node_Str"";
  URL url=new File(filePath).toURI().toURL();
  URLClassLoader clazzLoader=null;
  try {
    clazzLoader=new URLClassLoader(new URL[]{url},CLASS_LOADER);
    LOGGER.trace(""String_Node_Str"" + className + ""String_Node_Str""+ CLASS_LOADER.getClass().getSimpleName());
    Class<?> clazz=clazzLoader.loadClass(className);
    return clazz.newInstance();
  }
  finally {
    IOUtils.closeQuietly(clazzLoader);
  }
}","/** 
 * Adds the given file path to the classpath and creates an instance of the given class name.
 * @param filePath the path of the file to add to the classpath.
 * @param className the name of the class for which to create an instance.
 * @return the instance created.
 * @throws IOException
 * @throws ClassNotFoundException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public static Object createObject(String filePath,String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
  if (StringUtils.isBlank(className)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoaderUtility.addFile(filePath);
  filePath=""String_Node_Str"" + filePath + ""String_Node_Str"";
  URL url=new File(filePath).toURL();
  URLClassLoader clazzLoader=new URLClassLoader(new URL[]{url},CLASS_LOADER);
  LOGGER.trace(""String_Node_Str"" + className + ""String_Node_Str""+ CLASS_LOADER.getClass().getSimpleName());
  Class clazz=clazzLoader.loadClass(className);
  return clazz.newInstance();
}",0.946524064171123
188639,"protected void viewAction(){
  aipId=null;
  viewingTop=true;
  browseTitle.setVisible(true);
  browseDescription.setVisible(true);
  breadcrumb.updatePath(Arrays.asList(new BreadcrumbItem(DescriptionLevelUtils.getTopIconSafeHtml(),RESOLVER.getHistoryPath())));
  HTMLPanel topIcon=DescriptionLevelUtils.getTopIconHTMLPanel();
  topIcon.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(topIcon);
  itemTitle.setText(messages.allCollectionsTitle());
  itemTitle.addStyleName(""String_Node_Str"");
  itemIcon.getParent().addStyleName(""String_Node_Str"");
  aipList.setFilter(COLLECTIONS_FILTER);
  actionsSidebar.setVisible(true);
  createItem.setVisible(true);
  moveItem.setVisible(true);
  editPermissions.setVisible(false);
  remove.setVisible(true);
  downloadSection.setVisible(false);
  download.setVisible(false);
  this.removeStyleName(""String_Node_Str"");
  aipState.setVisible(false);
}","protected void viewAction(){
  aipId=null;
  viewingTop=true;
  browseTitle.setVisible(true);
  browseDescription.setVisible(true);
  breadcrumb.updatePath(Arrays.asList(new BreadcrumbItem(DescriptionLevelUtils.getTopIconSafeHtml(),RESOLVER.getHistoryPath())));
  HTMLPanel topIcon=DescriptionLevelUtils.getTopIconHTMLPanel();
  topIcon.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(topIcon);
  itemTitle.setText(messages.allCollectionsTitle());
  itemTitle.addStyleName(""String_Node_Str"");
  itemIcon.getParent().addStyleName(""String_Node_Str"");
  aipList.set(COLLECTIONS_FILTER,justActive,FACETS);
  actionsSidebar.setVisible(true);
  createItem.setVisible(true);
  moveItem.setVisible(true);
  editPermissions.setVisible(false);
  remove.setVisible(true);
  downloadSection.setVisible(false);
  download.setVisible(false);
  this.removeStyleName(""String_Node_Str"");
  aipState.setVisible(false);
}",0.9866962305986696
188640,"private void clear(){
  browseTitle.setVisible(false);
  browseDescription.setVisible(false);
  HTMLPanel itemIconHtmlPanel=DescriptionLevelUtils.getTopIconHTMLPanel();
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(messages.browseLoading());
  itemTitle.removeStyleName(""String_Node_Str"");
  itemIcon.getParent().removeStyleName(""String_Node_Str"");
  itemId.setText(""String_Node_Str"");
  breadcrumb.setVisible(false);
  itemMetadata.setVisible(false);
  itemMetadata.clear();
  removeHandlerRegistrations();
  newDescriptiveMetadata.setVisible(false);
  viewingTop=false;
  fondsPanelTitle.setVisible(false);
  aipList.setVisible(false);
  downloadList.clear();
  sidebarData.setVisible(false);
  appraisalSidebar.setVisible(false);
  preservationSidebar.setVisible(false);
  actionsSidebar.setVisible(false);
  createItem.setVisible(false);
  moveItem.setVisible(false);
  editPermissions.setVisible(false);
  remove.setVisible(false);
  submission.setVisible(false);
  documentation.setVisible(false);
  schemas.setVisible(false);
  for (  AIPState state : AIPState.values()) {
    this.removeStyleName(state.toString().toLowerCase());
  }
}","private void clear(){
  justActive=true;
  browseTitle.setVisible(false);
  browseDescription.setVisible(false);
  HTMLPanel itemIconHtmlPanel=DescriptionLevelUtils.getTopIconHTMLPanel();
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(messages.browseLoading());
  itemTitle.removeStyleName(""String_Node_Str"");
  itemIcon.getParent().removeStyleName(""String_Node_Str"");
  itemId.setText(""String_Node_Str"");
  breadcrumb.setVisible(false);
  itemMetadata.setVisible(false);
  itemMetadata.clear();
  removeHandlerRegistrations();
  newDescriptiveMetadata.setVisible(false);
  viewingTop=false;
  fondsPanelTitle.setVisible(false);
  aipList.setVisible(false);
  downloadList.clear();
  sidebarData.setVisible(false);
  appraisalSidebar.setVisible(false);
  preservationSidebar.setVisible(false);
  actionsSidebar.setVisible(false);
  createItem.setVisible(false);
  moveItem.setVisible(false);
  editPermissions.setVisible(false);
  remove.setVisible(false);
  submission.setVisible(false);
  documentation.setVisible(false);
  schemas.setVisible(false);
  for (  AIPState state : AIPState.values()) {
    this.removeStyleName(state.toString().toLowerCase());
  }
}",0.9922163047931176
188641,"private Browse(){
  viewingTop=true;
  handlers=new ArrayList<HandlerRegistration>();
  String summary=messages.listOfItems();
  boolean selectable=true;
  aipList=new AIPList(Filter.NULL,justActive,Facets.NONE,summary,selectable);
  initWidget(uiBinder.createAndBindUi(this));
  browseDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  aipList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      IndexedAIP aip=aipList.getSelectionModel().getSelectedObject();
      if (aip != null) {
        view(aip.getId());
      }
    }
  }
);
  aipList.addValueChangeHandler(new ValueChangeHandler<IndexResult<IndexedAIP>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<IndexedAIP>> event){
      fondsPanelTitle.setVisible(!viewingTop && event.getValue().getTotalCount() > 0);
      aipList.setVisible(viewingTop || event.getValue().getTotalCount() > 0);
    }
  }
);
}","private Browse(){
  viewingTop=true;
  handlers=new ArrayList<HandlerRegistration>();
  String summary=messages.listOfItems();
  boolean selectable=true;
  aipList=new AIPList(Filter.NULL,justActive,FACETS,summary,selectable);
  initWidget(uiBinder.createAndBindUi(this));
  browseDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  aipList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      IndexedAIP aip=aipList.getSelectionModel().getSelectedObject();
      if (aip != null) {
        view(aip.getId());
      }
    }
  }
);
  aipList.addValueChangeHandler(new ValueChangeHandler<IndexResult<IndexedAIP>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<IndexedAIP>> event){
      fondsPanelTitle.setVisible(!viewingTop && event.getValue().getTotalCount() > 0);
      aipList.setVisible(viewingTop || event.getValue().getTotalCount() > 0);
    }
  }
);
}",0.9934310257705912
188642,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  buttonApply.setEnabled(false);
  String idText=id.getText();
  String typeText=selectedBundle.getType();
  String typeVersion=selectedBundle.getVersion();
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=inXML && !xmlText.equals(metadataTextFromForm);
  if (idText.length() > 0) {
    Set<MetadataValue> values=null;
    if (!hasOverridenTheForm) {
      values=selectedBundle.getValues();
    }
    DescriptiveMetadataEditBundle newBundle=new DescriptiveMetadataEditBundle(idText,typeText,typeVersion,xmlText,selectedBundle.getTemplate(),values,true);
    BrowserService.Util.getInstance().createDescriptiveMetadataFile(aipId,newBundle,new AsyncCallback<Void>(){
      @Override public void onFailure(      Throwable caught){
        if (caught instanceof ValidationException) {
          ValidationException e=(ValidationException)caught;
          updateErrors(e);
        }
 else {
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        buttonApply.setEnabled(true);
      }
      @Override public void onSuccess(      Void result){
        errors.setText(""String_Node_Str"");
        errors.setVisible(false);
        Toast.showInfo(messages.dialogSuccess(),messages.metadataFileCreated());
        Tools.newHistory(Browse.RESOLVER,aipId);
      }
    }
);
  }
 else {
    Toast.showError(""String_Node_Str"");
    buttonApply.setEnabled(true);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  buttonApply.setEnabled(false);
  String idText=id.getText();
  String typeText=selectedBundle != null ? selectedBundle.getType() : messages.otherItem();
  String typeVersion=selectedBundle != null ? selectedBundle.getVersion() : ""String_Node_Str"";
  String template=selectedBundle != null ? selectedBundle.getTemplate() : null;
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=inXML && !xmlText.equals(metadataTextFromForm);
  if (idText.length() > 0) {
    Set<MetadataValue> values=null;
    if (!hasOverridenTheForm && selectedBundle != null) {
      values=selectedBundle.getValues();
    }
    DescriptiveMetadataEditBundle newBundle=new DescriptiveMetadataEditBundle(idText,typeText,typeVersion,xmlText,template,values,true);
    BrowserService.Util.getInstance().createDescriptiveMetadataFile(aipId,newBundle,new AsyncCallback<Void>(){
      @Override public void onFailure(      Throwable caught){
        if (caught instanceof ValidationException) {
          ValidationException e=(ValidationException)caught;
          updateErrors(e);
        }
 else {
          AsyncCallbackUtils.defaultFailureTreatment(caught);
        }
        buttonApply.setEnabled(true);
      }
      @Override public void onSuccess(      Void result){
        errors.setText(""String_Node_Str"");
        errors.setVisible(false);
        Toast.showInfo(messages.dialogSuccess(),messages.metadataFileCreated());
        Tools.newHistory(Browse.RESOLVER,aipId);
      }
    }
);
  }
 else {
    Toast.showError(""String_Node_Str"");
    buttonApply.setEnabled(true);
  }
}",0.9246069939043952
188643,"private void updateMetadataOnServer(String content){
  String typeText=type.getSelectedValue();
  String version=null;
  if (typeText.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
    version=typeText.substring(typeText.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,typeText.length());
    typeText=typeText.substring(0,typeText.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
  }
  DescriptiveMetadataEditBundle updatedBundle=new DescriptiveMetadataEditBundle(bundle.getId(),typeText,version,content);
  BrowserService.Util.getInstance().updateDescriptiveMetadataFile(aipId,updatedBundle,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      if (caught instanceof ValidationException) {
        ValidationException e=(ValidationException)caught;
        updateErrors(e);
      }
 else {
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
    }
    @Override public void onSuccess(    Void result){
      errors.setText(""String_Node_Str"");
      errors.setVisible(false);
      Toast.showInfo(messages.dialogSuccess(),messages.metadataFileSaved());
      Tools.newHistory(Browse.RESOLVER,aipId);
    }
  }
);
}","private void updateMetadataOnServer(String content){
  String typeText=type.getSelectedValue();
  String version=""String_Node_Str"";
  if (typeText.contains(RodaConstants.METADATA_VERSION_SEPARATOR)) {
    version=typeText.substring(typeText.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR) + 1,typeText.length());
    typeText=typeText.substring(0,typeText.lastIndexOf(RodaConstants.METADATA_VERSION_SEPARATOR));
  }
  DescriptiveMetadataEditBundle updatedBundle=new DescriptiveMetadataEditBundle(bundle.getId(),typeText,version,content);
  BrowserService.Util.getInstance().updateDescriptiveMetadataFile(aipId,updatedBundle,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable caught){
      if (caught instanceof ValidationException) {
        ValidationException e=(ValidationException)caught;
        updateErrors(e);
      }
 else {
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
    }
    @Override public void onSuccess(    Void result){
      errors.setText(""String_Node_Str"");
      errors.setVisible(false);
      Toast.showInfo(messages.dialogSuccess(),messages.metadataFileSaved());
      Tools.newHistory(Browse.RESOLVER,aipId);
    }
  }
);
}",0.9912463526469362
188644,"private void updateFormOrXML(){
  if (bundle != null && bundle.getValues() != null && !bundle.getValues().isEmpty()) {
    if (!bundle.isSimilar()) {
      formSimilarDanger.setVisible(true);
    }
 else {
      formSimilarDanger.setVisible(false);
    }
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
      }
    }
  }
 else {
    formSimilarDanger.setVisible(false);
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getXml());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
    metadataTextFromForm=null;
  }
}","private void updateFormOrXML(){
  if (bundle != null && bundle.getValues() != null && !bundle.getValues().isEmpty()) {
    if (!bundle.isSimilar()) {
      formSimilarDanger.setVisible(true);
    }
 else {
      formSimilarDanger.setVisible(false);
    }
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
      }
    }
  }
 else {
    inXML=true;
    formSimilarDanger.setVisible(false);
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getXml());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    showXml.setVisible(false);
    metadataTextFromForm=null;
  }
}",0.994486560992419
188645,"@Test public void testVirusCheck() throws RODAException, FileAlreadyExistsException, InterruptedException, IOException, SolrServerException {
  AIP aip=ingestCorpora();
  Plugin<AIP> plugin=RodaCoreFactory.getPluginManager().getPlugin(AntivirusPlugin.class.getCanonicalName(),AIP.class.getName());
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  plugin.setParameterValues(parameters);
  List<String> aipIdList=Arrays.asList(aip.getId());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnAIPs(null,plugin,aipIdList,false);
  Thread.sleep(1000);
  aip=model.retrieveAIP(aip.getId());
  String agentID=plugin.getClass().getName() + ""String_Node_Str"" + plugin.getVersion();
  boolean found=false;
  CloseableIterable<OptionalWithCause<PreservationMetadata>> preservationMetadataList=model.listPreservationMetadata(aip.getId(),true);
  for (  OptionalWithCause<PreservationMetadata> opm : preservationMetadataList) {
    if (opm.isPresent()) {
      PreservationMetadata pm=opm.get();
      if (pm.getType().equals(PreservationMetadataType.EVENT)) {
        try {
          EventComplexType event=PremisV3Utils.binaryToEvent(model.retrievePreservationEvent(pm.getAipId(),pm.getRepresentationId(),pm.getId()).getContent().createInputStream());
          if (event.getLinkingAgentIdentifierArray() != null && event.getLinkingAgentIdentifierArray().length > 0) {
            for (            LinkingAgentIdentifierComplexType laict : event.getLinkingAgentIdentifierArray()) {
              if (laict.getLinkingAgentIdentifierValue() != null && laict.getLinkingAgentIdentifierValue().equalsIgnoreCase(agentID)) {
                found=true;
                break;
              }
            }
            if (found) {
              break;
            }
          }
        }
 catch (        XmlException|IOException e) {
        }
      }
    }
  }
  IOUtils.closeQuietly(preservationMetadataList);
  Assert.assertTrue(found);
  index.commitAIPs();
  Filter filter=new Filter();
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_TYPE,PreservationEventType.VIRUS_CHECK.toString()));
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId()));
  IndexResult<IndexedPreservationEvent> events=index.find(IndexedPreservationEvent.class,filter,null,new Sublist(0,10));
  Assert.assertEquals(1,events.getTotalCount());
}","@Test public void testVirusCheck() throws RODAException, FileAlreadyExistsException, InterruptedException, IOException, SolrServerException {
  AIP aip=ingestCorpora();
  Plugin<AIP> plugin=RodaCoreFactory.getPluginManager().getPlugin(AntivirusPlugin.class.getCanonicalName(),AIP.class);
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  plugin.setParameterValues(parameters);
  List<String> aipIdList=Arrays.asList(aip.getId());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnAIPs(null,plugin,aipIdList,false);
  Thread.sleep(1000);
  aip=model.retrieveAIP(aip.getId());
  String agentID=plugin.getClass().getName() + ""String_Node_Str"" + plugin.getVersion();
  boolean found=false;
  CloseableIterable<OptionalWithCause<PreservationMetadata>> preservationMetadataList=model.listPreservationMetadata(aip.getId(),true);
  for (  OptionalWithCause<PreservationMetadata> opm : preservationMetadataList) {
    if (opm.isPresent()) {
      PreservationMetadata pm=opm.get();
      if (pm.getType().equals(PreservationMetadataType.EVENT)) {
        try {
          EventComplexType event=PremisV3Utils.binaryToEvent(model.retrievePreservationEvent(pm.getAipId(),pm.getRepresentationId(),pm.getId()).getContent().createInputStream());
          if (event.getLinkingAgentIdentifierArray() != null && event.getLinkingAgentIdentifierArray().length > 0) {
            for (            LinkingAgentIdentifierComplexType laict : event.getLinkingAgentIdentifierArray()) {
              if (laict.getLinkingAgentIdentifierValue() != null && laict.getLinkingAgentIdentifierValue().equalsIgnoreCase(agentID)) {
                found=true;
                break;
              }
            }
            if (found) {
              break;
            }
          }
        }
 catch (        XmlException|IOException e) {
        }
      }
    }
  }
  IOUtils.closeQuietly(preservationMetadataList);
  Assert.assertTrue(found);
  index.commitAIPs();
  Filter filter=new Filter();
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_TYPE,PreservationEventType.VIRUS_CHECK.toString()));
  filter.add(new SimpleFilterParameter(RodaConstants.PRESERVATION_EVENT_AIP_ID,aip.getId()));
  IndexResult<IndexedPreservationEvent> events=index.find(IndexedPreservationEvent.class,filter,null,new Sublist(0,10));
  Assert.assertEquals(1,events.getTotalCount());
}",0.9979415397282831
188646,"public static DescriptiveMetadataEditBundle getDescriptiveMetadataEditBundle(RodaUser user,IndexedAIP aip,String descriptiveMetadataId,String type,String version) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.getSupportedMetadata(user,aip,Locale.getDefault());
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if (typeBundle.getVersion() == version || (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version))) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      for (      MetadataValue mv : values) {
        String xpathRaw=mv.get(""String_Node_Str"");
        if (xpathRaw != null && xpathRaw.length() > 0) {
          String[] xpaths=xpathRaw.split(""String_Node_Str"");
          String value;
          List<String> allValues=new ArrayList<>();
          for (          String xpath : xpaths) {
            allValues.addAll(ServerTools.applyXpath(xml,xpath));
          }
          boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
          if (allEqual && !allValues.isEmpty()) {
            value=allValues.get(0);
          }
 else {
            value=String.join(""String_Node_Str"",allValues);
          }
          mv.set(""String_Node_Str"",value.trim());
        }
      }
      metadataTypeBundle.setValues(values);
      String templateWithValues=getDescriptiveMetadataPreview(metadataTypeBundle);
      try {
        XMLUnit.setIgnoreComments(true);
        XMLUnit.setIgnoreWhitespace(true);
        XMLUnit.setIgnoreAttributeOrder(true);
        XMLUnit.setCompareUnmatched(false);
        Diff xmlDiff=new Diff(xml,templateWithValues);
        xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
        similar=xmlDiff.identical() || xmlDiff.similar();
      }
 catch (      SAXException e) {
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}","public static DescriptiveMetadataEditBundle getDescriptiveMetadataEditBundle(RodaUser user,IndexedAIP aip,String descriptiveMetadataId,String type,String version) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  DescriptiveMetadataEditBundle ret;
  InputStream inputStream=null;
  try {
    Binary binary=RodaCoreFactory.getModelService().retrieveDescriptiveMetadataBinary(aip.getId(),descriptiveMetadataId);
    inputStream=binary.getContent().createInputStream();
    String xml=IOUtils.toString(inputStream,""String_Node_Str"");
    SupportedMetadataTypeBundle metadataTypeBundle=null;
    List<SupportedMetadataTypeBundle> supportedMetadataTypeBundles=BrowserHelper.getSupportedMetadata(user,aip,Locale.getDefault());
    for (    SupportedMetadataTypeBundle typeBundle : supportedMetadataTypeBundles) {
      if (typeBundle.getType() != null && typeBundle.getType().equalsIgnoreCase(type)) {
        if (typeBundle.getVersion() == version || (typeBundle.getVersion() != null && typeBundle.getVersion().equalsIgnoreCase(version))) {
          metadataTypeBundle=typeBundle;
          break;
        }
      }
    }
    boolean similar=false;
    Set<MetadataValue> values=null;
    String template=null;
    if (metadataTypeBundle != null) {
      values=metadataTypeBundle.getValues();
      template=metadataTypeBundle.getTemplate();
      if (values != null) {
        for (        MetadataValue mv : values) {
          String xpathRaw=mv.get(""String_Node_Str"");
          if (xpathRaw != null && xpathRaw.length() > 0) {
            String[] xpaths=xpathRaw.split(""String_Node_Str"");
            String value;
            List<String> allValues=new ArrayList<>();
            for (            String xpath : xpaths) {
              allValues.addAll(ServerTools.applyXpath(xml,xpath));
            }
            boolean allEqual=allValues.stream().allMatch(s -> s.trim().equals(allValues.get(0).trim()));
            if (allEqual && !allValues.isEmpty()) {
              value=allValues.get(0);
            }
 else {
              value=String.join(""String_Node_Str"",allValues);
            }
            mv.set(""String_Node_Str"",value.trim());
          }
        }
        metadataTypeBundle.setValues(values);
        String templateWithValues=getDescriptiveMetadataPreview(metadataTypeBundle);
        try {
          XMLUnit.setIgnoreComments(true);
          XMLUnit.setIgnoreWhitespace(true);
          XMLUnit.setIgnoreAttributeOrder(true);
          XMLUnit.setCompareUnmatched(false);
          Diff xmlDiff=new Diff(xml,templateWithValues);
          xmlDiff.overrideDifferenceListener(new XMLSimilarityIgnoreElements(""String_Node_Str""));
          similar=xmlDiff.identical() || xmlDiff.similar();
        }
 catch (        SAXException e) {
        }
      }
    }
    ret=new DescriptiveMetadataEditBundle(descriptiveMetadataId,type,version,xml,template,values,similar);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return ret;
}",0.982061317677756
188647,"private void updateFormOrXML(){
  if (!bundle.isSimilar()) {
    formSimilarDanger.setVisible(true);
  }
 else {
    formSimilarDanger.setVisible(false);
  }
  if (bundle != null && bundle.getValues() != null) {
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
              formOrXMLLabel.setText(""String_Node_Str"");
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
        formOrXMLLabel.setText(""String_Node_Str"");
      }
    }
  }
 else {
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getRawTemplate());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    formOrXMLLabel.setText(""String_Node_Str"");
    showXml.setVisible(false);
  }
}","private void updateFormOrXML(){
  if (bundle != null && bundle.getValues() != null && !bundle.getValues().isEmpty()) {
    if (!bundle.isSimilar()) {
      formSimilarDanger.setVisible(true);
    }
 else {
      formSimilarDanger.setVisible(false);
    }
    showXml.setVisible(true);
    if (inXML) {
      updateMetadataXML();
    }
 else {
      if (metadataTextFromForm != null && !metadataXML.getText().equals(metadataTextFromForm)) {
        Dialogs.showConfirmDialog(messages.confirmChangeToFormTitle(),messages.confirmChangeToFormMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
          @Override public void onSuccess(          Boolean aBoolean){
            if (aBoolean) {
              formOrXML.clear();
              createForm(supportedBundle);
              formOrXMLLabel.setText(""String_Node_Str"");
            }
 else {
              setInXML(!inXML);
            }
          }
        }
);
      }
 else {
        formOrXML.clear();
        createForm(supportedBundle);
        formOrXMLLabel.setText(""String_Node_Str"");
      }
    }
  }
 else {
    formSimilarDanger.setVisible(false);
    formOrXML.clear();
    if (bundle != null) {
      metadataXML.setText(bundle.getXml());
    }
 else {
      metadataXML.setText(""String_Node_Str"");
    }
    formOrXML.add(metadataXML);
    formOrXMLLabel.setText(""String_Node_Str"");
    showXml.setVisible(false);
    metadataTextFromForm=null;
  }
}",0.8766591129815474
188648,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=inXML && !xmlText.equals(metadataTextFromForm);
  if (hasOverridenTheForm) {
    updateMetadataOnServer(xmlText);
  }
 else {
    BrowserService.Util.getInstance().getDescriptiveMetadataPreview(aipId,supportedBundle,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      String preview){
        updateMetadataOnServer(preview);
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  String xmlText=metadataXML.getText();
  boolean hasOverridenTheForm=(inXML && !xmlText.equals(metadataTextFromForm)) || metadataTextFromForm == null;
  if (hasOverridenTheForm) {
    updateMetadataOnServer(xmlText);
  }
 else {
    BrowserService.Util.getInstance().getDescriptiveMetadataPreview(aipId,supportedBundle,new AsyncCallback<String>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      String preview){
        updateMetadataOnServer(preview);
      }
    }
);
  }
}",0.9740853658536586
188649,"public <T extends Serializable>JobPluginInfo processJobPluginInformation(Plugin<T> plugin,JobInfo jobInfo){
  int taskObjectsCount=jobInfo.getObjectsCount();
  Map<Plugin<?>,JobPluginInfo> jobInfos=jobInfo.getJobInfo();
  float percentage=0f;
  int sourceObjectsCount=0;
  int sourceObjectsBeingProcessed=0;
  int sourceObjectsProcessedWithSuccess=0;
  int sourceObjectsProcessedWithFailure=0;
  int outcomeObjectsWithManualIntervention=0;
  for (  JobPluginInfo jpi : jobInfos.values()) {
    IngestJobPluginInfo pluginInfo=(IngestJobPluginInfo)jpi;
    if (pluginInfo.getTotalSteps() > 0) {
      float pluginPercentage=jpi.getCompletionPercentage();
      if (pluginPercentage != 100 && pluginInfo.getStepsCompleted() != 0 && pluginInfo.getTotalSteps() != 0) {
        pluginPercentage=((float)pluginInfo.getStepsCompleted()) / pluginInfo.getTotalSteps();
      }
      float pluginWeight=((float)pluginInfo.getSourceObjectsCount()) / taskObjectsCount;
      percentage+=(pluginPercentage * pluginWeight);
      sourceObjectsProcessedWithSuccess+=pluginInfo.getSourceObjectsProcessedWithSuccess();
      sourceObjectsProcessedWithFailure+=pluginInfo.getSourceObjectsProcessedWithFailure();
      outcomeObjectsWithManualIntervention+=pluginInfo.getOutcomeObjectsWithManualIntervention();
    }
    sourceObjectsBeingProcessed+=pluginInfo.getSourceObjectsBeingProcessed();
    sourceObjectsCount+=pluginInfo.getSourceObjectsCount();
  }
  IngestJobPluginInfo ingestInfoUpdated=new IngestJobPluginInfo();
  ingestInfoUpdated.setCompletionPercentage(Math.round((percentage * 100)));
  ingestInfoUpdated.setSourceObjectsCount(sourceObjectsCount);
  ingestInfoUpdated.setSourceObjectsBeingProcessed(sourceObjectsBeingProcessed);
  ingestInfoUpdated.setSourceObjectsProcessedWithSuccess(sourceObjectsProcessedWithSuccess);
  ingestInfoUpdated.setSourceObjectsProcessedWithFailure(sourceObjectsProcessedWithFailure);
  ingestInfoUpdated.setOutcomeObjectsWithManualIntervention(outcomeObjectsWithManualIntervention);
  return ingestInfoUpdated;
}","public <T extends Serializable>JobPluginInfo processJobPluginInformation(Plugin<T> plugin,JobInfo jobInfo){
  int taskObjectsCount=jobInfo.getObjectsCount();
  Map<Plugin<?>,JobPluginInfo> jobInfos=jobInfo.getJobInfo();
  float percentage=0f;
  int sourceObjectsCount=0;
  int sourceObjectsBeingProcessed=0;
  int sourceObjectsProcessedWithSuccess=0;
  int sourceObjectsProcessedWithFailure=0;
  int outcomeObjectsWithManualIntervention=0;
  for (  JobPluginInfo jpi : jobInfos.values()) {
    IngestJobPluginInfo pluginInfo=(IngestJobPluginInfo)jpi;
    if (pluginInfo.getTotalSteps() > 0) {
      float pluginPercentage=pluginInfo.getCompletionPercentage() == 100 ? 1.0f : 0.0f;
      if (pluginInfo.getCompletionPercentage() != 100) {
        pluginPercentage=((float)pluginInfo.getStepsCompleted()) / pluginInfo.getTotalSteps();
      }
      float pluginWeight=((float)pluginInfo.getSourceObjectsCount()) / taskObjectsCount;
      percentage+=(pluginPercentage * pluginWeight);
      sourceObjectsProcessedWithSuccess+=pluginInfo.getSourceObjectsProcessedWithSuccess();
      sourceObjectsProcessedWithFailure+=pluginInfo.getSourceObjectsProcessedWithFailure();
      outcomeObjectsWithManualIntervention+=pluginInfo.getOutcomeObjectsWithManualIntervention();
    }
    sourceObjectsBeingProcessed+=pluginInfo.getSourceObjectsBeingProcessed();
    sourceObjectsCount+=pluginInfo.getSourceObjectsCount();
  }
  IngestJobPluginInfo ingestInfoUpdated=new IngestJobPluginInfo();
  ingestInfoUpdated.setCompletionPercentage(Math.round((percentage * 100)));
  ingestInfoUpdated.setSourceObjectsCount(sourceObjectsCount);
  ingestInfoUpdated.setSourceObjectsBeingProcessed(sourceObjectsBeingProcessed);
  ingestInfoUpdated.setSourceObjectsProcessedWithSuccess(sourceObjectsProcessedWithSuccess);
  ingestInfoUpdated.setSourceObjectsProcessedWithFailure(sourceObjectsProcessedWithFailure);
  ingestInfoUpdated.setOutcomeObjectsWithManualIntervention(outcomeObjectsWithManualIntervention);
  return ingestInfoUpdated;
}",0.4501972386587771
188650,"@UiHandler(""String_Node_Str"") void buttonRemoveHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null) {
      Dialogs.showConfirmDialog(messages.browseRemoveConfirmDialogTitle(),messages.browseRemoveConfirmDialogMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        Boolean confirmed){
          if (confirmed) {
            SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
            BrowserService.Util.getInstance().removeAIP(selected,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                AsyncCallbackUtils.defaultFailureTreatment(caught);
              }
              @Override public void onSuccess(              String parentId){
                if (parentId != null) {
                  Tools.newHistory(Browse.RESOLVER,parentId);
                }
 else {
                  Tools.newHistory(Browse.RESOLVER);
                }
              }
            }
);
          }
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemDescription(),messages.dialogOk());
    }
  }
 else {
    SelectedItemsUtils.size(IndexedAIP.class,selected,new AsyncCallback<Long>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      final Long size){
        Dialogs.showConfirmDialog(messages.ingestTransferRemoveFolderConfirmDialogTitle(),messages.ingestTransferRemoveSelectedConfirmDialogMessage(size),messages.ingestTransferRemoveFolderConfirmDialogCancel(),messages.ingestTransferRemoveFolderConfirmDialogOk(),new AsyncCallback<Boolean>(){
          @Override public void onSuccess(          Boolean confirmed){
            if (confirmed) {
              BrowserService.Util.getInstance().removeAIP(selected,new LoadingAsyncCallback<String>(){
                @Override public void onFailureImpl(                Throwable caught){
                  AsyncCallbackUtils.defaultFailureTreatment(caught);
                  aipList.refresh();
                }
                @Override public void onSuccessImpl(                String parentId){
                  Toast.showInfo(messages.ingestTransferRemoveSuccessTitle(),messages.ingestTransferRemoveSuccessMessage(size));
                  aipList.refresh();
                }
              }
);
            }
          }
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
        }
);
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonRemoveHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null) {
      Dialogs.showConfirmDialog(messages.browseRemoveConfirmDialogTitle(),messages.browseRemoveConfirmDialogMessage(),messages.dialogCancel(),messages.dialogYes(),new AsyncCallback<Boolean>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        Boolean confirmed){
          if (confirmed) {
            SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
            BrowserService.Util.getInstance().removeAIP(selected,new AsyncCallback<String>(){
              @Override public void onFailure(              Throwable caught){
                AsyncCallbackUtils.defaultFailureTreatment(caught);
              }
              @Override public void onSuccess(              String parentId){
                if (parentId != null) {
                  Tools.newHistory(Browse.RESOLVER,parentId);
                }
 else {
                  Tools.newHistory(Browse.RESOLVER);
                }
              }
            }
);
          }
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemToRemoveDescription(),messages.dialogOk());
    }
  }
 else {
    SelectedItemsUtils.size(IndexedAIP.class,selected,new AsyncCallback<Long>(){
      @Override public void onFailure(      Throwable caught){
        AsyncCallbackUtils.defaultFailureTreatment(caught);
      }
      @Override public void onSuccess(      final Long size){
        Dialogs.showConfirmDialog(messages.ingestTransferRemoveFolderConfirmDialogTitle(),messages.ingestTransferRemoveSelectedConfirmDialogMessage(size),messages.ingestTransferRemoveFolderConfirmDialogCancel(),messages.ingestTransferRemoveFolderConfirmDialogOk(),new AsyncCallback<Boolean>(){
          @Override public void onSuccess(          Boolean confirmed){
            if (confirmed) {
              BrowserService.Util.getInstance().removeAIP(selected,new LoadingAsyncCallback<String>(){
                @Override public void onFailureImpl(                Throwable caught){
                  AsyncCallbackUtils.defaultFailureTreatment(caught);
                  aipList.refresh();
                }
                @Override public void onSuccessImpl(                String parentId){
                  Toast.showInfo(messages.ingestTransferRemoveSuccessTitle(),messages.ingestTransferRemoveSuccessMessage(size));
                  aipList.refresh();
                }
              }
);
            }
          }
          @Override public void onFailure(          Throwable caught){
            AsyncCallbackUtils.defaultFailureTreatment(caught);
          }
        }
);
      }
    }
);
  }
}",0.9986422267481332
188651,"@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null && itemBundle != null) {
      Filter filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive);
      if (itemBundle.getAip().getParentID() != null) {
        selectAipDialog.setEmptyParentButtonVisible(true);
      }
      selectAipDialog.showAndCenter();
      selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
        @Override public void onValueChange(        ValueChangeEvent<IndexedAIP> event){
          final IndexedAIP parentAIP=event.getValue();
          final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
          SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
          BrowserService.Util.getInstance().moveInHierarchy(selected,parentId,new AsyncCallback<IndexedAIP>(){
            @Override public void onSuccess(            IndexedAIP result){
              if (result != null) {
                Tools.newHistory(Browse.RESOLVER,result.getId());
              }
 else {
                Tools.newHistory(Browse.RESOLVER);
              }
            }
            @Override public void onFailure(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                Toast.showError(messages.moveIllegalOperation(caught.getMessage()));
              }
            }
          }
);
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemDescription(),messages.dialogOk());
    }
  }
 else {
    Filter filter;
    boolean showEmptyParentButton;
    if (aipId != null) {
      filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      showEmptyParentButton=true;
    }
 else {
      filter=new Filter();
      showEmptyParentButton=false;
    }
    SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive);
    selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
    selectAipDialog.showAndCenter();
    selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
      @Override public void onValueChange(      ValueChangeEvent<IndexedAIP> event){
        final IndexedAIP parentAIP=event.getValue();
        final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
        BrowserService.Util.getInstance().moveInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
          @Override public void onSuccessImpl(          IndexedAIP result){
            if (result != null) {
              Tools.newHistory(Browse.RESOLVER,result.getId());
            }
 else {
              Tools.newHistory(Browse.RESOLVER);
            }
          }
          @Override public void onFailureImpl(          Throwable caught){
            if (caught instanceof NotFoundException) {
              Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
            }
 else {
              Toast.showError(messages.moveIllegalOperation(caught.getMessage()));
            }
          }
        }
);
      }
    }
);
  }
}","@UiHandler(""String_Node_Str"") void buttonMoveItemHandler(ClickEvent e){
  final SelectedItems<IndexedAIP> selected=aipList.getSelected();
  if (SelectedItemsUtils.isEmpty(selected)) {
    if (aipId != null && itemBundle != null) {
      Filter filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive);
      if (itemBundle.getAip().getParentID() != null) {
        selectAipDialog.setEmptyParentButtonVisible(true);
      }
      selectAipDialog.showAndCenter();
      selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
        @Override public void onValueChange(        ValueChangeEvent<IndexedAIP> event){
          final IndexedAIP parentAIP=event.getValue();
          final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
          SelectedItemsList<IndexedAIP> selected=new SelectedItemsList<IndexedAIP>(Arrays.asList(aipId),IndexedAIP.class.getName());
          BrowserService.Util.getInstance().moveInHierarchy(selected,parentId,new AsyncCallback<IndexedAIP>(){
            @Override public void onSuccess(            IndexedAIP result){
              if (result != null) {
                Tools.newHistory(Browse.RESOLVER,result.getId());
              }
 else {
                Tools.newHistory(Browse.RESOLVER);
              }
            }
            @Override public void onFailure(            Throwable caught){
              if (caught instanceof NotFoundException) {
                Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
              }
 else {
                Toast.showError(messages.moveIllegalOperation(caught.getMessage()));
              }
            }
          }
);
        }
      }
);
    }
 else {
      Dialogs.showInformationDialog(messages.selectAnItemTitle(),messages.selectAnItemToMoveDescription(),messages.dialogOk());
    }
  }
 else {
    Filter filter;
    boolean showEmptyParentButton;
    if (aipId != null) {
      filter=new Filter(new NotSimpleFilterParameter(RodaConstants.AIP_ANCESTORS,aipId));
      showEmptyParentButton=true;
    }
 else {
      filter=new Filter();
      showEmptyParentButton=false;
    }
    SelectAipDialog selectAipDialog=new SelectAipDialog(messages.moveItemTitle(),filter,justActive);
    selectAipDialog.setEmptyParentButtonVisible(showEmptyParentButton);
    selectAipDialog.showAndCenter();
    selectAipDialog.addValueChangeHandler(new ValueChangeHandler<IndexedAIP>(){
      @Override public void onValueChange(      ValueChangeEvent<IndexedAIP> event){
        final IndexedAIP parentAIP=event.getValue();
        final String parentId=(parentAIP != null) ? parentAIP.getId() : null;
        BrowserService.Util.getInstance().moveInHierarchy(selected,parentId,new LoadingAsyncCallback<IndexedAIP>(){
          @Override public void onSuccessImpl(          IndexedAIP result){
            if (result != null) {
              Tools.newHistory(Browse.RESOLVER,result.getId());
            }
 else {
              Tools.newHistory(Browse.RESOLVER);
            }
          }
          @Override public void onFailureImpl(          Throwable caught){
            if (caught instanceof NotFoundException) {
              Toast.showError(messages.moveNoSuchObject(caught.getMessage()));
            }
 else {
              Toast.showError(messages.moveIllegalOperation(caught.getMessage()));
            }
          }
        }
);
      }
    }
);
  }
}",0.9991484530229918
188652,"/** 
 * Create a new panel to view a log entry
 */
public ShowLogEntry(LogEntry logEntry){
  initWidget(uiBinder.createAndBindUi(this));
  logId.setText(logEntry.getId());
  logComponent.setText(logEntry.getActionComponent());
  logMethod.setText(logEntry.getActionMethod());
  logAddress.setText(logEntry.getAddress());
  logDatetime.setText(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL).format(logEntry.getDatetime()));
  logRelatedObjectLabel.setVisible(logEntry.getRelatedObjectID() != null && !logEntry.getRelatedObjectID().isEmpty());
  logRelatedObject.setText(logEntry.getRelatedObjectID());
  logUsername.setText(logEntry.getUsername());
  List<LogEntryParameter> parameters=logEntry.getParameters();
  logParametersLabel.setVisible(parameters != null && !parameters.isEmpty());
  if (parameters != null) {
    for (    LogEntryParameter par : parameters) {
      HTML parPanel=new HTML();
      parPanel.setHTML(messages.logParameter(par.getName(),par.getValue()));
      logParameters.add(parPanel);
    }
  }
}","/** 
 * Create a new panel to view a log entry
 */
public ShowLogEntry(LogEntry logEntry){
  initWidget(uiBinder.createAndBindUi(this));
  logIdValue.setText(logEntry.getId());
  logIdLabel.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logIdValue.setVisible(StringUtils.isNotBlank(logEntry.getId()));
  logComponentValue.setText(logEntry.getActionComponent());
  logComponentLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logComponentValue.setVisible(StringUtils.isNotBlank(logEntry.getActionComponent()));
  logMethodValue.setText(logEntry.getActionMethod());
  logMethodLabel.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logMethodValue.setVisible(StringUtils.isNotBlank(logEntry.getActionMethod()));
  logAddressValue.setText(logEntry.getAddress());
  logAddressLabel.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logAddressValue.setVisible(StringUtils.isNotBlank(logEntry.getAddress()));
  logDatetimeValue.setText(DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL).format(logEntry.getDatetime()));
  logDatetimeLabel.setVisible(logEntry.getDatetime() != null);
  logDatetimeValue.setVisible(logEntry.getDatetime() != null);
  logRelatedObjectValue.setText(logEntry.getRelatedObjectID());
  logRelatedObjectLabel.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logRelatedObjectValue.setVisible(StringUtils.isNotBlank(logEntry.getRelatedObjectID()));
  logUsernameValue.setText(logEntry.getUsername());
  logUsernameLabel.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  logUsernameValue.setVisible(StringUtils.isNotBlank(logEntry.getUsername()));
  List<LogEntryParameter> parameters=logEntry.getParameters();
  if (parameters != null && parameters.size() > 0) {
    for (    LogEntryParameter par : parameters) {
      HTML parPanel=new HTML();
      parPanel.setHTML(messages.logParameter(par.getName(),par.getValue()));
      logParametersValue.add(parPanel);
    }
    logParametersLabel.setVisible(true);
    logParametersValue.setVisible(true);
  }
 else {
    logParametersLabel.setVisible(false);
    logParametersValue.setVisible(false);
  }
}",0.4225967540574282
188653,"public static void indentXML(Reader input,Writer output) throws TransformerException {
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  StreamSource source=new StreamSource(input);
  StreamResult result=new StreamResult(output);
  transformer.transform(source,result);
}","public static String indentXML(String xml) throws TransformerException {
  Reader input=new StringReader(xml);
  Writer output=new StringWriter();
  indentXML(input,output);
  return output.toString();
}",0.2303664921465968
188654,"public static String createDescriptiveMetadataPreview(RodaUser user,String aipId,SupportedMetadataTypeBundle bundle) throws AuthorizationDeniedException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,BROWSE_ROLE);
  String payload=BrowserHelper.getDescriptiveMetadataPreview(bundle);
  long duration=new Date().getTime() - startDate.getTime();
  registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,""String_Node_Str"",bundle.getLabel());
  return payload;
}","public static String createDescriptiveMetadataPreview(RodaUser user,String aipId,SupportedMetadataTypeBundle bundle) throws AuthorizationDeniedException, GenericException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,BROWSE_ROLE);
  String payload=BrowserHelper.getDescriptiveMetadataPreview(bundle);
  long duration=new Date().getTime() - startDate.getTime();
  registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,""String_Node_Str"",bundle.getLabel());
  return payload;
}",0.9818548387096774
188655,"public static String getDescriptiveMetadataPreview(SupportedMetadataTypeBundle bundle){
  String rawTemplate=bundle.getTemplate();
  String result=null;
  try {
    Handlebars handlebars=new Handlebars();
    Map<String,String> data=new HashMap<>();
    handlebars.registerHelperMissing((o,options) -> {
      if (data.containsKey(options.helperName)) {
        return data.get(options.helperName);
      }
      return ""String_Node_Str"";
    }
);
    Template tmpl=handlebars.compileInline(rawTemplate);
    Set<MetadataValue> values=bundle.getValues();
    if (values != null) {
      values.forEach(metadataValue -> {
        String val=metadataValue.get(""String_Node_Str"");
        if (val != null) {
          val=val.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (!""String_Node_Str"".equals(val)) {
            data.put(metadataValue.getId(),metadataValue.get(""String_Node_Str""));
          }
        }
      }
);
    }
    result=tmpl.apply(data);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}","public static String getDescriptiveMetadataPreview(SupportedMetadataTypeBundle bundle) throws GenericException {
  String rawTemplate=bundle.getTemplate();
  String result=null;
  try {
    Handlebars handlebars=new Handlebars();
    Map<String,String> data=new HashMap<>();
    handlebars.registerHelperMissing((o,options) -> {
      if (data.containsKey(options.helperName)) {
        return data.get(options.helperName);
      }
      return ""String_Node_Str"";
    }
);
    Template tmpl=handlebars.compileInline(rawTemplate);
    Set<MetadataValue> values=bundle.getValues();
    if (values != null) {
      values.forEach(metadataValue -> {
        String val=metadataValue.get(""String_Node_Str"");
        if (val != null) {
          val=val.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (!""String_Node_Str"".equals(val)) {
            data.put(metadataValue.getId(),metadataValue.get(""String_Node_Str""));
          }
        }
      }
);
    }
    result=tmpl.apply(data);
    result=RodaUtils.indentXML(result);
  }
 catch (  IOException|TransformerException e) {
    throw new GenericException(e);
  }
  return result;
}",0.9388127853881278
188656,"private static <T extends Serializable>PreservationMetadata createPluginEvent(Plugin<T> plugin,String aipID,String representationID,List<String> filePath,String fileID,ModelService model,IndexService index,List<LinkingIdentifier> sources,List<LinkingIdentifier> outcomes,PluginState outcome,String outcomeDetailExtension,boolean notify,Date startDate) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException, ValidationException, AlreadyExistsException {
  Job job=getJobFromIndex(plugin,index);
  List<String> agentIds=new ArrayList<>();
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisAgentBinary(plugin,model,notifyAgent);
    agentIds.add(pm.getId());
  }
 catch (  AlreadyExistsException e) {
    agentIds.add(IdUtils.getPluginAgentId(plugin.getClass().getName(),plugin.getVersion()));
  }
catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(job.getUsername(),model,index,notifyAgent);
    agentIds.add(pm.getId());
  }
 catch (  AlreadyExistsException e) {
    agentIds.add(IdUtils.getUserAgentId(job.getUsername()));
  }
catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  String id=UUID.randomUUID().toString();
  String outcomeDetailNote=(outcome == PluginState.SUCCESS) ? plugin.getPreservationEventSuccessMessage() : plugin.getPreservationEventFailureMessage();
  ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,startDate,plugin.getPreservationEventType().toString(),plugin.getPreservationEventDescription(),sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,agentIds);
  model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipID,representationID,filePath,fileID,premisEvent,notify);
  PreservationMetadata pm=new PreservationMetadata();
  pm.setId(id);
  pm.setAipId(aipID);
  pm.setRepresentationId(representationID);
  pm.setType(PreservationMetadataType.EVENT);
  return pm;
}","private static <T extends Serializable>PreservationMetadata createPluginEvent(Plugin<T> plugin,String aipID,String representationID,List<String> filePath,String fileID,ModelService model,IndexService index,List<LinkingIdentifier> sources,List<LinkingIdentifier> outcomes,PluginState outcome,String outcomeDetailExtension,boolean notify,Date startDate) throws RequestNotValidException, NotFoundException, GenericException, AuthorizationDeniedException, ValidationException, AlreadyExistsException {
  List<String> agentIds=new ArrayList<>();
  try {
    boolean notifyAgent=true;
    PreservationMetadata pm=PremisV3Utils.createPremisAgentBinary(plugin,model,notifyAgent);
    agentIds.add(pm.getId());
  }
 catch (  AlreadyExistsException e) {
    agentIds.add(IdUtils.getPluginAgentId(plugin.getClass().getName(),plugin.getVersion()));
  }
catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  Job job;
  try {
    job=getJobFromIndex(plugin,index);
  }
 catch (  NotFoundException e) {
    job=null;
  }
  if (job != null) {
    try {
      boolean notifyAgent=true;
      PreservationMetadata pm=PremisV3Utils.createPremisUserAgentBinary(job.getUsername(),model,index,notifyAgent);
      if (pm != null) {
        agentIds.add(pm.getId());
      }
    }
 catch (    AlreadyExistsException e) {
      agentIds.add(IdUtils.getUserAgentId(job.getUsername()));
    }
catch (    RODAException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  String id=UUID.randomUUID().toString();
  String outcomeDetailNote=(outcome == PluginState.SUCCESS) ? plugin.getPreservationEventSuccessMessage() : plugin.getPreservationEventFailureMessage();
  ContentPayload premisEvent=PremisV3Utils.createPremisEventBinary(id,startDate,plugin.getPreservationEventType().toString(),plugin.getPreservationEventDescription(),sources,outcomes,outcome.name(),outcomeDetailNote,outcomeDetailExtension,agentIds);
  model.createPreservationMetadata(PreservationMetadataType.EVENT,id,aipID,representationID,filePath,fileID,premisEvent,notify);
  PreservationMetadata pm=new PreservationMetadata();
  pm.setId(id);
  pm.setAipId(aipID);
  pm.setRepresentationId(representationID);
  pm.setType(PreservationMetadataType.EVENT);
  return pm;
}",0.93354943273906
188657,"@Override public Class<? extends Entity> getEntity(StoragePath storagePath) throws GenericException {
  Path entity=FSUtils.getEntityPath(basePath,storagePath);
  if (Files.exists(entity)) {
    if (Files.isDirectory(entity)) {
      if (storagePath.isFromAContainer()) {
        return DefaultContainer.class;
      }
 else {
        return DefaultDirectory.class;
      }
    }
 else {
      return DefaultBinary.class;
    }
  }
 else {
    throw new GenericException(""String_Node_Str"" + storagePath);
  }
}","@Override public Class<? extends Entity> getEntity(StoragePath storagePath) throws NotFoundException {
  Path entity=FSUtils.getEntityPath(basePath,storagePath);
  if (Files.exists(entity)) {
    if (Files.isDirectory(entity)) {
      if (storagePath.isFromAContainer()) {
        return DefaultContainer.class;
      }
 else {
        return DefaultDirectory.class;
      }
    }
 else {
      return DefaultBinary.class;
    }
  }
 else {
    throw new NotFoundException(""String_Node_Str"" + storagePath);
  }
}",0.9706457925636008
188658,"public Risk(Risk risk){
  super(risk.getId(),risk.getName());
  this.description=risk.getDescription();
  this.identifiedOn=risk.getIdentifiedOn();
  this.identifiedBy=risk.getIdentifiedBy();
  this.category=risk.getCategory();
  this.notes=risk.getNotes();
  this.preMitigationProbability=risk.getPreMitigationProbability();
  this.preMitigationImpact=risk.getPreMitigationImpact();
  this.preMitigationSeverity=risk.getPreMitigationSeverity();
  this.preMitigationSeverityLevel=risk.getPreMitigationSeverityLevel();
  this.preMitigationNotes=risk.getPreMitigationNotes();
  this.posMitigationProbability=risk.getPosMitigationProbability();
  this.posMitigationImpact=risk.getPosMitigationImpact();
  this.posMitigationSeverity=risk.getPosMitigationSeverity();
  this.posMitigationSeverityLevel=risk.getPosMitigationSeverityLevel();
  this.posMitigationNotes=risk.getPosMitigationNotes();
  this.mitigationStrategy=risk.getMitigationStrategy();
  this.mitigationOwnerType=risk.getMitigationOwnerType();
  this.mitigationOwner=risk.getMitigationOwner();
  this.mitigationRelatedEventIdentifierType=risk.getMitigationRelatedEventIdentifierType();
  this.mitigationRelatedEventIdentifierValue=risk.getMitigationRelatedEventIdentifierValue();
  this.affectedObjects=new HashMap<String,String>(risk.getAffectedObjects());
}","public Risk(Risk risk){
  super(risk.getId(),risk.getName());
  this.description=risk.getDescription();
  this.identifiedOn=risk.getIdentifiedOn();
  this.identifiedBy=risk.getIdentifiedBy();
  this.category=risk.getCategory();
  this.notes=risk.getNotes();
  this.preMitigationProbability=risk.getPreMitigationProbability();
  this.preMitigationImpact=risk.getPreMitigationImpact();
  this.preMitigationSeverity=risk.getPreMitigationSeverity();
  this.preMitigationSeverityLevel=risk.getPreMitigationSeverityLevel();
  this.preMitigationNotes=risk.getPreMitigationNotes();
  this.posMitigationProbability=risk.getPosMitigationProbability();
  this.posMitigationImpact=risk.getPosMitigationImpact();
  this.posMitigationSeverity=risk.getPosMitigationSeverity();
  this.posMitigationSeverityLevel=risk.getPosMitigationSeverityLevel();
  this.posMitigationNotes=risk.getPosMitigationNotes();
  this.mitigationStrategy=risk.getMitigationStrategy();
  this.mitigationOwnerType=risk.getMitigationOwnerType();
  this.mitigationOwner=risk.getMitigationOwner();
  this.mitigationRelatedEventIdentifierType=risk.getMitigationRelatedEventIdentifierType();
  this.mitigationRelatedEventIdentifierValue=risk.getMitigationRelatedEventIdentifierValue();
}",0.96953125
188659,"@Override public String toString(){
  return ""String_Node_Str"" + super.getId() + ""String_Node_Str""+ super.getName()+ ""String_Node_Str""+ description+ ""String_Node_Str""+ identifiedOn+ ""String_Node_Str""+ identifiedBy+ ""String_Node_Str""+ category+ ""String_Node_Str""+ notes+ ""String_Node_Str""+ preMitigationProbability+ ""String_Node_Str""+ preMitigationImpact+ ""String_Node_Str""+ preMitigationSeverity+ ""String_Node_Str""+ preMitigationNotes+ ""String_Node_Str""+ posMitigationProbability+ ""String_Node_Str""+ posMitigationImpact+ ""String_Node_Str""+ posMitigationSeverity+ ""String_Node_Str""+ posMitigationNotes+ ""String_Node_Str""+ mitigationStrategy+ ""String_Node_Str""+ mitigationOwnerType+ ""String_Node_Str""+ mitigationOwner+ ""String_Node_Str""+ mitigationRelatedEventIdentifierType+ ""String_Node_Str""+ mitigationRelatedEventIdentifierValue+ ""String_Node_Str""+ affectedObjects+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + super.getId() + ""String_Node_Str""+ super.getName()+ ""String_Node_Str""+ description+ ""String_Node_Str""+ identifiedOn+ ""String_Node_Str""+ identifiedBy+ ""String_Node_Str""+ category+ ""String_Node_Str""+ notes+ ""String_Node_Str""+ preMitigationProbability+ ""String_Node_Str""+ preMitigationImpact+ ""String_Node_Str""+ preMitigationSeverity+ ""String_Node_Str""+ preMitigationNotes+ ""String_Node_Str""+ posMitigationProbability+ ""String_Node_Str""+ posMitigationImpact+ ""String_Node_Str""+ posMitigationSeverity+ ""String_Node_Str""+ posMitigationNotes+ ""String_Node_Str""+ mitigationStrategy+ ""String_Node_Str""+ mitigationOwnerType+ ""String_Node_Str""+ mitigationOwner+ ""String_Node_Str""+ mitigationRelatedEventIdentifierType+ ""String_Node_Str""+ mitigationRelatedEventIdentifierValue+ ""String_Node_Str"";
}",0.9793103448275862
188660,"public static SolrInputDocument riskToSolrDocument(Risk risk){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.RISK_ID,risk.getId());
  doc.addField(RodaConstants.RISK_NAME,risk.getName());
  doc.addField(RodaConstants.RISK_DESCRIPTION,risk.getDescription());
  doc.addField(RodaConstants.RISK_IDENTIFIED_ON,risk.getIdentifiedOn());
  doc.addField(RodaConstants.RISK_IDENTIFIED_BY,risk.getIdentifiedBy());
  doc.addField(RodaConstants.RISK_CATEGORY,risk.getCategory());
  doc.addField(RodaConstants.RISK_NOTES,risk.getNotes());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY,risk.getPreMitigationProbability());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_IMPACT,risk.getPreMitigationImpact());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY,risk.getPreMitigationSeverity());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL,risk.getPreMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_NOTES,risk.getPreMitigationNotes());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_PROBABILITY,risk.getPosMitigationProbability());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_IMPACT,risk.getPosMitigationImpact());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_SEVERITY,risk.getPosMitigationSeverity());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_SEVERITY_LEVEL,risk.getPosMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_NOTES,risk.getPosMitigationNotes());
  doc.addField(RodaConstants.RISK_MITIGATION_STRATEGY,risk.getMitigationStrategy());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER_TYPE,risk.getMitigationOwnerType());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER,risk.getMitigationOwner());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE,risk.getMitigationRelatedEventIdentifierType());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE,risk.getMitigationRelatedEventIdentifierValue());
  doc.addField(RodaConstants.RISK_AFFECTED_OBJECTS,JsonUtils.getJsonFromObject(risk.getAffectedObjects()));
  if (risk instanceof IndexedRisk) {
    doc.addField(RodaConstants.RISK_OBJECTS_SIZE,((IndexedRisk)risk).getObjectsSize());
  }
 else {
    doc.addField(RodaConstants.RISK_OBJECTS_SIZE,0);
  }
  return doc;
}","public static SolrInputDocument riskToSolrDocument(Risk risk){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.RISK_ID,risk.getId());
  doc.addField(RodaConstants.RISK_NAME,risk.getName());
  doc.addField(RodaConstants.RISK_DESCRIPTION,risk.getDescription());
  doc.addField(RodaConstants.RISK_IDENTIFIED_ON,risk.getIdentifiedOn());
  doc.addField(RodaConstants.RISK_IDENTIFIED_BY,risk.getIdentifiedBy());
  doc.addField(RodaConstants.RISK_CATEGORY,risk.getCategory());
  doc.addField(RodaConstants.RISK_NOTES,risk.getNotes());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY,risk.getPreMitigationProbability());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_IMPACT,risk.getPreMitigationImpact());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY,risk.getPreMitigationSeverity());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL,risk.getPreMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_PRE_MITIGATION_NOTES,risk.getPreMitigationNotes());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_PROBABILITY,risk.getPosMitigationProbability());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_IMPACT,risk.getPosMitigationImpact());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_SEVERITY,risk.getPosMitigationSeverity());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_SEVERITY_LEVEL,risk.getPosMitigationSeverityLevel().toString());
  doc.addField(RodaConstants.RISK_POS_MITIGATION_NOTES,risk.getPosMitigationNotes());
  doc.addField(RodaConstants.RISK_MITIGATION_STRATEGY,risk.getMitigationStrategy());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER_TYPE,risk.getMitigationOwnerType());
  doc.addField(RodaConstants.RISK_MITIGATION_OWNER,risk.getMitigationOwner());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE,risk.getMitigationRelatedEventIdentifierType());
  doc.addField(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE,risk.getMitigationRelatedEventIdentifierValue());
  if (risk instanceof IndexedRisk) {
    doc.addField(RodaConstants.RISK_OBJECTS_SIZE,((IndexedRisk)risk).getObjectsSize());
  }
 else {
    doc.addField(RodaConstants.RISK_OBJECTS_SIZE,0);
  }
  return doc;
}",0.9183852566915314
188661,"public static IndexedRisk solrDocumentToRisk(SolrDocument doc){
  IndexedRisk risk=new IndexedRisk();
  risk.setId(objectToString(doc.get(RodaConstants.RISK_ID)));
  risk.setName(objectToString(doc.get(RodaConstants.RISK_NAME)));
  risk.setDescription(objectToString(doc.get(RodaConstants.RISK_DESCRIPTION)));
  risk.setIdentifiedOn(objectToDate(doc.get(RodaConstants.RISK_IDENTIFIED_ON)));
  risk.setIdentifiedBy(objectToString(doc.get(RodaConstants.RISK_IDENTIFIED_BY)));
  risk.setCategory(objectToString(doc.get(RodaConstants.RISK_CATEGORY)));
  risk.setNotes(objectToString(doc.get(RodaConstants.RISK_NOTES)));
  risk.setPreMitigationProbability(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY),0));
  risk.setPreMitigationImpact(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_IMPACT),0));
  risk.setPreMitigationSeverity(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_SEVERITY),0));
  risk.setPreMitigationSeverityLevel(Risk.SEVERITY_LEVEL.valueOf(objectToString(doc.get(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL))));
  risk.setPreMitigationNotes(objectToString(doc.get(RodaConstants.RISK_PRE_MITIGATION_NOTES)));
  risk.setPosMitigationProbability(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_PROBABILITY),0));
  risk.setPosMitigationImpact(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_IMPACT),0));
  risk.setPosMitigationSeverity(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_SEVERITY),0));
  risk.setPosMitigationSeverityLevel(Risk.SEVERITY_LEVEL.valueOf(objectToString(doc.get(RodaConstants.RISK_POS_MITIGATION_SEVERITY_LEVEL))));
  risk.setPosMitigationNotes(objectToString(doc.get(RodaConstants.RISK_POS_MITIGATION_NOTES)));
  risk.setMitigationStrategy(objectToString(doc.get(RodaConstants.RISK_MITIGATION_STRATEGY)));
  risk.setMitigationOwnerType(objectToString(doc.get(RodaConstants.RISK_MITIGATION_OWNER_TYPE)));
  risk.setMitigationOwner(objectToString(doc.get(RodaConstants.RISK_MITIGATION_OWNER)));
  risk.setMitigationRelatedEventIdentifierType(objectToString(doc.get(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE)));
  risk.setMitigationRelatedEventIdentifierValue(objectToString(doc.get(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE)));
  risk.setObjectsSize(objectToInteger(doc.get(RodaConstants.RISK_OBJECTS_SIZE),0));
  risk.setAffectedObjects(JsonUtils.getMapFromJson(objectToString(doc.get(RodaConstants.RISK_AFFECTED_OBJECTS))));
  return risk;
}","public static IndexedRisk solrDocumentToRisk(SolrDocument doc){
  IndexedRisk risk=new IndexedRisk();
  risk.setId(objectToString(doc.get(RodaConstants.RISK_ID)));
  risk.setName(objectToString(doc.get(RodaConstants.RISK_NAME)));
  risk.setDescription(objectToString(doc.get(RodaConstants.RISK_DESCRIPTION)));
  risk.setIdentifiedOn(objectToDate(doc.get(RodaConstants.RISK_IDENTIFIED_ON)));
  risk.setIdentifiedBy(objectToString(doc.get(RodaConstants.RISK_IDENTIFIED_BY)));
  risk.setCategory(objectToString(doc.get(RodaConstants.RISK_CATEGORY)));
  risk.setNotes(objectToString(doc.get(RodaConstants.RISK_NOTES)));
  risk.setPreMitigationProbability(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_PROBABILITY),0));
  risk.setPreMitigationImpact(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_IMPACT),0));
  risk.setPreMitigationSeverity(objectToInteger(doc.get(RodaConstants.RISK_PRE_MITIGATION_SEVERITY),0));
  risk.setPreMitigationSeverityLevel(Risk.SEVERITY_LEVEL.valueOf(objectToString(doc.get(RodaConstants.RISK_PRE_MITIGATION_SEVERITY_LEVEL))));
  risk.setPreMitigationNotes(objectToString(doc.get(RodaConstants.RISK_PRE_MITIGATION_NOTES)));
  risk.setPosMitigationProbability(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_PROBABILITY),0));
  risk.setPosMitigationImpact(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_IMPACT),0));
  risk.setPosMitigationSeverity(objectToInteger(doc.get(RodaConstants.RISK_POS_MITIGATION_SEVERITY),0));
  risk.setPosMitigationSeverityLevel(Risk.SEVERITY_LEVEL.valueOf(objectToString(doc.get(RodaConstants.RISK_POS_MITIGATION_SEVERITY_LEVEL))));
  risk.setPosMitigationNotes(objectToString(doc.get(RodaConstants.RISK_POS_MITIGATION_NOTES)));
  risk.setMitigationStrategy(objectToString(doc.get(RodaConstants.RISK_MITIGATION_STRATEGY)));
  risk.setMitigationOwnerType(objectToString(doc.get(RodaConstants.RISK_MITIGATION_OWNER_TYPE)));
  risk.setMitigationOwner(objectToString(doc.get(RodaConstants.RISK_MITIGATION_OWNER)));
  risk.setMitigationRelatedEventIdentifierType(objectToString(doc.get(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_TYPE)));
  risk.setMitigationRelatedEventIdentifierValue(objectToString(doc.get(RodaConstants.RISK_MITIGATION_RELATED_EVENT_IDENTIFIER_VALUE)));
  risk.setObjectsSize(objectToInteger(doc.get(RodaConstants.RISK_OBJECTS_SIZE),0));
  return risk;
}",0.9763908848285772
188662,"@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ objectId+ ""String_Node_Str""+ risks+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ objectId+ ""String_Node_Str""+ objectClass+ ""String_Node_Str""+ risks+ ""String_Node_Str"";
}",0.9006211180124224
188663,"public RiskIncidence(RiskIncidence incidence){
  this.id=incidence.getId();
  this.setObjectId(incidence.getObjectId());
  this.setRisks(incidence.getRisks());
}","public RiskIncidence(RiskIncidence incidence){
  this.id=incidence.getId();
  this.setObjectId(incidence.getObjectId());
  this.setObjectClass(incidence.getObjectClass());
  this.setRisks(incidence.getRisks());
}",0.8632707774798928
188664,"public void riskIncidenceDeleted(String riskIncidenceId){
  deleteDocumentFromIndex(RodaConstants.INDEX_RISK_INCIDENCE,riskIncidenceId,""String_Node_Str"" + riskIncidenceId + ""String_Node_Str"");
}","public void riskIncidenceDeleted(String riskIncidenceId,boolean commit){
  deleteDocumentFromIndex(RodaConstants.INDEX_RISK_INCIDENCE,riskIncidenceId,""String_Node_Str"" + riskIncidenceId + ""String_Node_Str"");
  if (commit) {
    try {
      SolrUtils.commit(index,RiskIncidence.class);
    }
 catch (    GenericException e) {
      LOGGER.warn(""String_Node_Str"");
    }
  }
}",0.6830985915492958
188665,"public void riskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence){
  addDocumentToIndex(RodaConstants.INDEX_RISK_INCIDENCE,SolrUtils.riskIncidenceToSolrDocument(riskIncidence),""String_Node_Str"");
}","public void riskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence,boolean commit){
  addDocumentToIndex(RodaConstants.INDEX_RISK_INCIDENCE,SolrUtils.riskIncidenceToSolrDocument(riskIncidence),""String_Node_Str"");
  if (commit) {
    try {
      SolrUtils.commit(index,RiskIncidence.class);
    }
 catch (    GenericException e) {
      LOGGER.warn(""String_Node_Str"");
    }
  }
}",0.6917808219178082
188666,"public void reindexRiskIncidence(RiskIncidence riskIncidence){
  observer.riskIncidenceCreatedOrUpdated(riskIncidence);
}","public void reindexRiskIncidence(RiskIncidence riskIncidence){
  observer.riskIncidenceCreatedOrUpdated(riskIncidence,false);
}",0.9758064516129032
188667,"public static SolrInputDocument riskIncidenceToSolrDocument(RiskIncidence incidence){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.RISK_INCIDENCE_ID,incidence.getId());
  doc.addField(RodaConstants.RISK_INCIDENCE_OBJECT_ID,incidence.getObjectId());
  doc.addField(RodaConstants.RISK_INCIDENCE_RISKS,incidence.getRisks());
  return doc;
}","public static SolrInputDocument riskIncidenceToSolrDocument(RiskIncidence incidence){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(RodaConstants.RISK_INCIDENCE_ID,incidence.getId());
  doc.addField(RodaConstants.RISK_INCIDENCE_OBJECT_ID,incidence.getObjectId());
  doc.addField(RodaConstants.RISK_INCIDENCE_OBJECT_CLASS,incidence.getObjectClass());
  doc.addField(RodaConstants.RISK_INCIDENCE_RISKS,incidence.getRisks());
  return doc;
}",0.8958837772397095
188668,"public static RiskIncidence solrDocumentToRiskIncidence(SolrDocument doc){
  RiskIncidence incidence=new RiskIncidence();
  incidence.setId(objectToString(doc.get(RodaConstants.RISK_INCIDENCE_ID)));
  incidence.setObjectId(objectToString(doc.get(RodaConstants.RISK_INCIDENCE_OBJECT_ID)));
  incidence.setRisks(objectToListString(doc.get(RodaConstants.RISK_INCIDENCE_RISKS)));
  return incidence;
}","public static RiskIncidence solrDocumentToRiskIncidence(SolrDocument doc){
  RiskIncidence incidence=new RiskIncidence();
  incidence.setId(objectToString(doc.get(RodaConstants.RISK_INCIDENCE_ID)));
  incidence.setObjectId(objectToString(doc.get(RodaConstants.RISK_INCIDENCE_OBJECT_ID)));
  incidence.setObjectClass(objectToString(doc.get(RodaConstants.RISK_INCIDENCE_OBJECT_CLASS)));
  incidence.setRisks(objectToListString(doc.get(RodaConstants.RISK_INCIDENCE_RISKS)));
  return incidence;
}",0.8921348314606742
188669,"protected void notifyRiskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence){
  for (  ModelObserver observer : observers) {
    observer.riskIncidenceCreatedOrUpdated(riskIncidence);
  }
}","protected void notifyRiskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence,boolean commit){
  for (  ModelObserver observer : observers) {
    observer.riskIncidenceCreatedOrUpdated(riskIncidence,commit);
  }
}",0.9458128078817734
188670,"protected void notifyRiskIncidenceDeleted(String riskIncidenceId){
  for (  ModelObserver observer : observers) {
    observer.riskIncidenceDeleted(riskIncidenceId);
  }
}","protected void notifyRiskIncidenceDeleted(String riskIncidenceId,boolean commit){
  for (  ModelObserver observer : observers) {
    observer.riskIncidenceDeleted(riskIncidenceId,commit);
  }
}",0.9395604395604396
188671,public void riskIncidenceDeleted(String riskIncidenceId);,"public void riskIncidenceDeleted(String riskIncidenceId,boolean commit);",0.8837209302325582
188672,public void riskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence);,"public void riskIncidenceCreatedOrUpdated(RiskIncidence riskIncidence,boolean commit);",0.9044585987261148
188673,"public void deleteRiskIncidence(String riskId,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,String type) throws GenericException, NotFoundException, AuthorizationDeniedException, RequestNotValidException {
  String fileSuffix=RodaConstants.RISK_INCIDENCE_FILE_EXTENSION;
  try {
    try {
      Binary incidenceBinary=this.retrieveOtherMetadataBinary(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type);
      InputStream inputStream=incidenceBinary.getContent().createInputStream();
      RiskIncidence riskIncidence=JsonUtils.getObjectFromJson(inputStream,RiskIncidence.class);
      riskIncidence.removeRisk(riskId);
      IOUtils.closeQuietly(inputStream);
      if (riskIncidence.getRisks().size() > 0) {
        String riskIncidenceAsJson=JsonUtils.getJsonFromObject(riskIncidence);
        this.createOtherMetadata(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type,new StringContentPayload(riskIncidenceAsJson),true);
        notifyRiskIncidenceCreatedOrUpdated(riskIncidence);
      }
 else {
        storage.deleteResource(incidenceBinary.getStoragePath());
        notifyRiskIncidenceDeleted(riskIncidence.getId());
      }
      Risk risk=this.retrieveRisk(riskId);
      risk.setObjectsSize(risk.getObjectsSize() - 1);
      this.updateRisk(risk,null,false);
    }
 catch (    NotFoundException e) {
    }
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public void deleteRiskIncidence(String riskId,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,String type) throws GenericException, NotFoundException, AuthorizationDeniedException, RequestNotValidException {
  String fileSuffix=RodaConstants.RISK_INCIDENCE_FILE_EXTENSION;
  try {
    try {
      Binary incidenceBinary=this.retrieveOtherMetadataBinary(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type);
      InputStream inputStream=incidenceBinary.getContent().createInputStream();
      RiskIncidence riskIncidence=JsonUtils.getObjectFromJson(inputStream,RiskIncidence.class);
      riskIncidence.removeRisk(riskId);
      IOUtils.closeQuietly(inputStream);
      if (riskIncidence.getRisks().size() > 0) {
        String riskIncidenceAsJson=JsonUtils.getJsonFromObject(riskIncidence);
        this.createOtherMetadata(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type,new StringContentPayload(riskIncidenceAsJson),false);
        notifyRiskIncidenceCreatedOrUpdated(riskIncidence,true);
      }
 else {
        storage.deleteResource(incidenceBinary.getStoragePath());
        notifyRiskIncidenceDeleted(riskIncidence.getId(),true);
      }
      Risk risk=this.retrieveRisk(riskId);
      risk.setObjectsSize(risk.getObjectsSize() - 1);
      this.updateRisk(risk,null,false);
    }
 catch (    NotFoundException e) {
    }
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9944535073409462
188674,"/** 
 */
public Risk createRisk(Risk risk,boolean commit) throws GenericException {
  try {
    risk.setId(UUID.randomUUID().toString());
    String riskAsJson=JsonUtils.getJsonFromObject(risk);
    StoragePath riskPath=ModelUtils.getRiskStoragePath(risk.getId());
    storage.createBinary(riskPath,new StringContentPayload(riskAsJson),false);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  notifyRiskCreatedOrUpdated(risk,commit);
  return risk;
}","public Risk createRisk(Risk risk,String id,boolean commit) throws GenericException {
  try {
    if (id == null) {
      risk.setId(UUID.randomUUID().toString());
    }
 else {
      risk.setId(id);
    }
    String riskAsJson=JsonUtils.getJsonFromObject(risk);
    StoragePath riskPath=ModelUtils.getRiskStoragePath(risk.getId());
    storage.createBinary(riskPath,new StringContentPayload(riskAsJson),false);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException|NotFoundException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  notifyRiskCreatedOrUpdated(risk,commit);
  return risk;
}",0.9303849303849304
188675,"public RiskIncidence addRiskIncidence(String riskId,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,String type) throws GenericException {
  RiskIncidence riskIncidence=null;
  String fileSuffix=RodaConstants.RISK_INCIDENCE_FILE_EXTENSION;
  try {
    Binary incidenceBinary=this.retrieveOtherMetadataBinary(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type);
    InputStream inputStream=incidenceBinary.getContent().createInputStream();
    riskIncidence=JsonUtils.getObjectFromJson(inputStream,RiskIncidence.class);
    IOUtils.closeQuietly(inputStream);
    if (riskIncidence.getRisks().contains(riskId)) {
      return riskIncidence;
    }
  }
 catch (  NotFoundException|IOException|RequestNotValidException|AuthorizationDeniedException e) {
    riskIncidence=new RiskIncidence();
    riskIncidence.setId(UUID.randomUUID().toString());
    if (fileId != null) {
      riskIncidence.setObjectId(fileId);
    }
 else     if (representationId != null) {
      riskIncidence.setObjectId(representationId);
    }
 else {
      riskIncidence.setObjectId(aipId);
    }
  }
  try {
    riskIncidence.addRisk(riskId);
    String riskIncidenceAsJson=JsonUtils.getJsonFromObject(riskIncidence);
    this.createOtherMetadata(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type,new StringContentPayload(riskIncidenceAsJson),true);
    notifyRiskIncidenceCreatedOrUpdated(riskIncidence);
  }
 catch (  RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return riskIncidence;
}","public RiskIncidence addRiskIncidence(String riskId,String aipId,String representationId,List<String> fileDirectoryPath,String fileId,String type) throws GenericException {
  RiskIncidence riskIncidence=null;
  String fileSuffix=RodaConstants.RISK_INCIDENCE_FILE_EXTENSION;
  try {
    Binary incidenceBinary=this.retrieveOtherMetadataBinary(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type);
    InputStream inputStream=incidenceBinary.getContent().createInputStream();
    riskIncidence=JsonUtils.getObjectFromJson(inputStream,RiskIncidence.class);
    IOUtils.closeQuietly(inputStream);
    if (riskIncidence.getRisks().contains(riskId)) {
      return riskIncidence;
    }
  }
 catch (  NotFoundException|IOException|RequestNotValidException|AuthorizationDeniedException e) {
    riskIncidence=new RiskIncidence();
    riskIncidence.setId(UUID.randomUUID().toString());
    if (fileId != null) {
      riskIncidence.setObjectId(fileId);
      riskIncidence.setObjectClass(File.class.getSimpleName());
    }
 else     if (representationId != null) {
      riskIncidence.setObjectId(representationId);
      riskIncidence.setObjectClass(Representation.class.getSimpleName());
    }
 else {
      riskIncidence.setObjectId(aipId);
      riskIncidence.setObjectClass(AIP.class.getSimpleName());
    }
  }
  try {
    riskIncidence.addRisk(riskId);
    String riskIncidenceAsJson=JsonUtils.getJsonFromObject(riskIncidence);
    this.createOtherMetadata(aipId,representationId,fileDirectoryPath,fileId,fileSuffix,type,new StringContentPayload(riskIncidenceAsJson),true);
    notifyRiskIncidenceCreatedOrUpdated(riskIncidence,true);
  }
 catch (  RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return riskIncidence;
}",0.897119341563786
188676,"@Override <T extends Serializable>JobPluginInfo processJobPluginInformation(Plugin<T> plugin,Integer taskObjectsCount,Map<Plugin<?>,JobPluginInfo> jobInfos){
  RiskJobPluginInfo newJobPluginInfo=new RiskJobPluginInfo();
  newJobPluginInfo.setRisks(this.getRisks());
  return newJobPluginInfo;
}","@Override <T extends Serializable>JobPluginInfo processJobPluginInformation(Plugin<T> plugin,Integer taskObjectsCount,Map<Plugin<?>,JobPluginInfo> jobInfos){
  RiskJobPluginInfo riskInfo=this;
  IngestJobPluginInfo jobPluginInfo=(IngestJobPluginInfo)jobInfos.get(plugin);
  jobPluginInfo.setCompletionPercentage(riskInfo.getCompletionPercentage());
  jobPluginInfo.setObjectsBeingProcessed(riskInfo.getObjectsBeingProcessed());
  jobPluginInfo.setObjectsWaitingToBeProcessed(riskInfo.getObjectsWaitingToBeProcessed());
  jobPluginInfo.setObjectsProcessedWithSuccess(riskInfo.getObjectsProcessedWithSuccess());
  jobPluginInfo.setObjectsProcessedWithFailure(riskInfo.getObjectsProcessedWithFailure());
  float percentage=0f;
  int beingProcessed=0;
  int processedWithSuccess=0;
  int processedWithFailure=0;
  for (  JobPluginInfo jpi : jobInfos.values()) {
    IngestJobPluginInfo pluginInfo=(IngestJobPluginInfo)jpi;
    if (pluginInfo.getTotalSteps() > 0) {
      float pluginPercentage=((float)pluginInfo.getStepsCompleted()) / pluginInfo.getTotalSteps();
      float pluginWeight=((float)pluginInfo.getObjectsCount()) / taskObjectsCount;
      percentage+=(pluginPercentage * pluginWeight);
      processedWithSuccess+=pluginInfo.getObjectsProcessedWithSuccess();
      processedWithFailure+=pluginInfo.getObjectsProcessedWithFailure();
    }
    beingProcessed+=pluginInfo.getObjectsBeingProcessed();
  }
  RiskJobPluginInfo newJobPluginInfo=new RiskJobPluginInfo();
  newJobPluginInfo.setRisks(this.getRisks());
  newJobPluginInfo.setCompletionPercentage(Math.round((percentage * 100)));
  newJobPluginInfo.setObjectsBeingProcessed(beingProcessed);
  newJobPluginInfo.setObjectsProcessedWithSuccess(processedWithSuccess);
  newJobPluginInfo.setObjectsProcessedWithFailure(processedWithFailure);
  return newJobPluginInfo;
}",0.2702448210922787
188677,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    for (    Representation r : aip.getRepresentations()) {
      boolean inotify=false;
      LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
      try {
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
        List<String> okFileIDS=new ArrayList<String>();
        List<String> koFileIDS=new ArrayList<String>();
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            StoragePath storagePath=ModelUtils.getFileStoragePath(file);
            Binary currentFileBinary=storage.getBinary(storagePath);
            Binary premisFile=model.retrievePreservationFile(file);
            List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
            if (fixities != null) {
              boolean fixityOK=true;
              for (              Fixity f : fixities) {
                try {
                  Fixity currentFixity=PremisV3Utils.calculateFixity(currentFileBinary,f.getMessageDigestAlgorithm(),""String_Node_Str"");
                  if (!f.getMessageDigest().trim().equalsIgnoreCase(currentFixity.getMessageDigest().trim())) {
                    fixityOK=false;
                    break;
                  }
                }
 catch (                NoSuchAlgorithmException nsae) {
                  fixityOK=false;
                  break;
                }
              }
              if (fixityOK) {
                okFileIDS.add(file.getId());
              }
 else {
                koFileIDS.add(file.getId());
              }
            }
            if (koFileIDS.size() > 0) {
              LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
              StringBuilder sb=new StringBuilder();
              sb.append(""String_Node_Str"");
              sb.append(""String_Node_Str"");
              for (              String s : koFileIDS) {
                sb.append(""String_Node_Str"" + s + ""String_Node_Str"");
              }
              sb.append(""String_Node_Str"");
            }
 else {
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        model.notifyAIPUpdated(aip.getId());
      }
 catch (      IOException|RODAException|XmlException e) {
        LOGGER.error(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
  return null;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    for (    Representation r : aip.getRepresentations()) {
      boolean inotify=false;
      LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
      try {
        boolean recursive=true;
        CloseableIterable<OptionalWithCause<File>> allFiles=model.listFilesUnder(aip.getId(),r.getId(),recursive);
        List<String> okFileIDS=new ArrayList<String>();
        List<String> koFileIDS=new ArrayList<String>();
        for (        OptionalWithCause<File> oFile : allFiles) {
          if (oFile.isPresent()) {
            File file=oFile.get();
            StoragePath storagePath=ModelUtils.getFileStoragePath(file);
            Binary currentFileBinary=storage.getBinary(storagePath);
            Binary premisFile=model.retrievePreservationFile(file);
            List<Fixity> fixities=PremisV3Utils.extractFixities(premisFile);
            if (fixities != null) {
              boolean fixityOK=true;
              for (              Fixity f : fixities) {
                try {
                  Fixity currentFixity=PremisV3Utils.calculateFixity(currentFileBinary,f.getMessageDigestAlgorithm(),""String_Node_Str"");
                  if (!f.getMessageDigest().trim().equalsIgnoreCase(currentFixity.getMessageDigest().trim())) {
                    fixityOK=false;
                    break;
                  }
                }
 catch (                NoSuchAlgorithmException nsae) {
                  fixityOK=false;
                  break;
                }
              }
              if (fixityOK) {
                okFileIDS.add(file.getId());
              }
 else {
                koFileIDS.add(file.getId());
                if (riskId != null && !riskId.equals(""String_Node_Str"")) {
                  try {
                    model.retrieveRisk(riskId);
                  }
 catch (                  NotFoundException e) {
                    Risk risk=new Risk();
                    risk.setName(riskName);
                    risk.setCategory(riskCategory);
                    model.createRisk(risk,riskId,false);
                  }
                  model.addRiskIncidence(riskId,file.getAipId(),file.getRepresentationId(),file.getPath(),file.getId(),""String_Node_Str"");
                }
              }
            }
            if (koFileIDS.size() > 0) {
              LOGGER.debug(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ aip.getId());
              StringBuilder sb=new StringBuilder();
              sb.append(""String_Node_Str"");
              sb.append(""String_Node_Str"");
              for (              String s : koFileIDS) {
                sb.append(""String_Node_Str"" + s + ""String_Node_Str"");
              }
              sb.append(""String_Node_Str"");
            }
 else {
            }
          }
 else {
            LOGGER.error(""String_Node_Str"",oFile.getCause());
          }
        }
        IOUtils.closeQuietly(allFiles);
        model.notifyAIPUpdated(aip.getId());
      }
 catch (      IOException|RODAException|XmlException e) {
        LOGGER.error(""String_Node_Str"" + r.getId() + ""String_Node_Str""+ e.getMessage(),e);
      }
    }
  }
  return null;
}",0.9026812313803376
188678,"public Set<String> getGroupnames(){
  HashSet<String> groupnames=new HashSet<>();
  for (  Set<String> values : groups.values()) {
    groupnames.addAll(values);
  }
  return groupnames;
}","@JsonIgnore public Set<String> getGroupnames(){
  HashSet<String> groupnames=new HashSet<>();
  for (  Set<String> values : groups.values()) {
    groupnames.addAll(values);
  }
  return groupnames;
}",0.9690721649484536
188679,"public Set<String> getUsernames(){
  HashSet<String> usernames=new HashSet<>();
  for (  Set<String> values : users.values()) {
    usernames.addAll(values);
  }
  return usernames;
}","@JsonIgnore public Set<String> getUsernames(){
  HashSet<String> usernames=new HashSet<>();
  for (  Set<String> values : users.values()) {
    usernames.addAll(values);
  }
  return usernames;
}",0.9682539682539684
188680,"private static <T>T solrDocumentTo(Class<T> resultClass,SolrDocument doc) throws GenericException {
  T ret;
  if (resultClass.equals(IndexedAIP.class)) {
    ret=resultClass.cast(solrDocumentToIndexAIP(doc));
  }
 else   if (resultClass.equals(IndexedRepresentation.class) || resultClass.equals(Representation.class)) {
    ret=resultClass.cast(solrDocumentToRepresentation(doc));
  }
 else   if (resultClass.equals(LogEntry.class)) {
    ret=resultClass.cast(solrDocumentToLogEntry(doc));
  }
 else   if (resultClass.equals(Report.class)) {
    ret=resultClass.cast(solrDocumentToJobReport(doc));
  }
 else   if (resultClass.equals(RODAMember.class) || resultClass.equals(User.class) || resultClass.equals(Group.class)) {
    ret=resultClass.cast(solrDocumentToRodaMember(doc));
  }
 else   if (resultClass.equals(TransferredResource.class)) {
    ret=resultClass.cast(solrDocumentToTransferredResource(doc));
  }
 else   if (resultClass.equals(Job.class)) {
    ret=resultClass.cast(solrDocumentToJob(doc));
  }
 else   if (resultClass.equals(Risk.class)) {
    ret=resultClass.cast(solrDocumentToRisk(doc));
  }
 else   if (resultClass.equals(Agent.class)) {
    ret=resultClass.cast(solrDocumentToAgent(doc));
  }
 else   if (resultClass.equals(Format.class)) {
    ret=resultClass.cast(solrDocumentToFormat(doc));
  }
 else   if (resultClass.equals(Notification.class)) {
    ret=resultClass.cast(solrDocumentToNotification(doc));
  }
 else   if (resultClass.equals(RiskIncidence.class)) {
    ret=resultClass.cast(solrDocumentToRiskIncidence(doc));
  }
 else   if (resultClass.equals(IndexedFile.class)) {
    ret=resultClass.cast(solrDocumentToIndexedFile(doc));
  }
 else   if (resultClass.equals(IndexedPreservationEvent.class)) {
    ret=resultClass.cast(solrDocumentToIndexedPreservationEvent(doc));
  }
 else   if (resultClass.equals(IndexedPreservationAgent.class)) {
    ret=resultClass.cast(solrDocumentToIndexedPreservationAgent(doc));
  }
 else {
    throw new GenericException(""String_Node_Str"" + resultClass.getName());
  }
  return ret;
}","private static <T>T solrDocumentTo(Class<T> resultClass,SolrDocument doc) throws GenericException {
  T ret;
  if (resultClass.equals(IndexedAIP.class)) {
    ret=resultClass.cast(solrDocumentToIndexedAIP(doc));
  }
 else   if (resultClass.equals(IndexedRepresentation.class) || resultClass.equals(Representation.class)) {
    ret=resultClass.cast(solrDocumentToRepresentation(doc));
  }
 else   if (resultClass.equals(LogEntry.class)) {
    ret=resultClass.cast(solrDocumentToLogEntry(doc));
  }
 else   if (resultClass.equals(Report.class)) {
    ret=resultClass.cast(solrDocumentToJobReport(doc));
  }
 else   if (resultClass.equals(RODAMember.class) || resultClass.equals(User.class) || resultClass.equals(Group.class)) {
    ret=resultClass.cast(solrDocumentToRodaMember(doc));
  }
 else   if (resultClass.equals(TransferredResource.class)) {
    ret=resultClass.cast(solrDocumentToTransferredResource(doc));
  }
 else   if (resultClass.equals(Job.class)) {
    ret=resultClass.cast(solrDocumentToJob(doc));
  }
 else   if (resultClass.equals(Risk.class)) {
    ret=resultClass.cast(solrDocumentToRisk(doc));
  }
 else   if (resultClass.equals(Agent.class)) {
    ret=resultClass.cast(solrDocumentToAgent(doc));
  }
 else   if (resultClass.equals(Format.class)) {
    ret=resultClass.cast(solrDocumentToFormat(doc));
  }
 else   if (resultClass.equals(Notification.class)) {
    ret=resultClass.cast(solrDocumentToNotification(doc));
  }
 else   if (resultClass.equals(RiskIncidence.class)) {
    ret=resultClass.cast(solrDocumentToRiskIncidence(doc));
  }
 else   if (resultClass.equals(IndexedFile.class)) {
    ret=resultClass.cast(solrDocumentToIndexedFile(doc));
  }
 else   if (resultClass.equals(IndexedPreservationEvent.class)) {
    ret=resultClass.cast(solrDocumentToIndexedPreservationEvent(doc));
  }
 else   if (resultClass.equals(IndexedPreservationAgent.class)) {
    ret=resultClass.cast(solrDocumentToIndexedPreservationAgent(doc));
  }
 else {
    throw new GenericException(""String_Node_Str"" + resultClass.getName());
  }
  return ret;
}",0.999514563106796
188681,"private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  Map<PermissionType,Set<String>> userPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  Map<PermissionType,Set<String>> groupPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(userPermissions);
  return permissions;
}","private static Permissions getPermissions(SolrDocument doc){
  Permissions permissions=new Permissions();
  Map<PermissionType,Set<String>> userPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_USERS_PREFIX + type;
    Set<String> users=new HashSet<>();
    users.addAll(objectToListString(doc.get(key)));
    userPermissions.put(type,users);
  }
  Map<PermissionType,Set<String>> groupPermissions=new HashMap<>();
  for (  PermissionType type : PermissionType.values()) {
    String key=RodaConstants.INDEX_PERMISSION_GROUPS_PREFIX + type;
    Set<String> groups=new HashSet<>();
    groups.addAll(objectToListString(doc.get(key)));
    groupPermissions.put(type,groups);
  }
  permissions.setUsers(userPermissions);
  permissions.setGroups(groupPermissions);
  return permissions;
}",0.994806693594922
188682,"public ValueCheckBox(PermissionType permissionType,String label){
  super(label);
  this.permissionType=permissionType;
}","public ValueCheckBox(PermissionType permissionType){
  super(messages.objectPermission(permissionType));
  setTitle(messages.objectPermissionDescription(permissionType));
  this.permissionType=permissionType;
}",0.5800604229607251
188683,"public PermissionPanel(String name,boolean isUser,Set<PermissionType> permissions){
  this.name=name;
  this.isUser=isUser;
  panel=new FlowPanel();
  panelBody=new FlowPanel();
  type=new HTML(SafeHtmlUtils.fromSafeConstant(isUser ? ""String_Node_Str"" : ""String_Node_Str""));
  nameLabel=new Label(name);
  rightPanel=new FlowPanel();
  editPermissionsPanel=new FlowPanel();
  for (  PermissionType permissionType : Permissions.PermissionType.values()) {
    ValueCheckBox valueCheckBox=new ValueCheckBox(permissionType,permissionType.toString());
    if (permissions.contains(permissionType)) {
      valueCheckBox.setValue(true);
    }
    editPermissionsPanel.add(valueCheckBox);
    valueCheckBox.addStyleName(""String_Node_Str"");
  }
  removePanel=new Button(""String_Node_Str"");
  panelBody.add(type);
  panelBody.add(nameLabel);
  panelBody.add(rightPanel);
  rightPanel.add(editPermissionsPanel);
  rightPanel.add(removePanel);
  panel.add(panelBody);
  initWidget(panel);
  panel.addStyleName(""String_Node_Str"");
  panel.addStyleName(isUser ? ""String_Node_Str"" : ""String_Node_Str"");
  panelBody.addStyleName(""String_Node_Str"");
  type.addStyleName(""String_Node_Str"");
  nameLabel.addStyleName(""String_Node_Str"");
  rightPanel.addStyleName(""String_Node_Str"");
  editPermissionsPanel.addStyleName(""String_Node_Str"");
  removePanel.addStyleName(""String_Node_Str"");
  removePanel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      PermissionPanel.this.removeFromParent();
    }
  }
);
}","public PermissionPanel(String name,boolean isUser,Set<PermissionType> permissions){
  this.name=name;
  this.isUser=isUser;
  panel=new FlowPanel();
  panelBody=new FlowPanel();
  type=new HTML(SafeHtmlUtils.fromSafeConstant(isUser ? ""String_Node_Str"" : ""String_Node_Str""));
  nameLabel=new Label(name);
  rightPanel=new FlowPanel();
  editPermissionsPanel=new FlowPanel();
  for (  PermissionType permissionType : Permissions.PermissionType.values()) {
    ValueCheckBox valueCheckBox=new ValueCheckBox(permissionType);
    if (permissions.contains(permissionType)) {
      valueCheckBox.setValue(true);
    }
    editPermissionsPanel.add(valueCheckBox);
    valueCheckBox.addStyleName(""String_Node_Str"");
  }
  removePanel=new Button(""String_Node_Str"");
  panelBody.add(type);
  panelBody.add(nameLabel);
  panelBody.add(rightPanel);
  rightPanel.add(editPermissionsPanel);
  rightPanel.add(removePanel);
  panel.add(panelBody);
  initWidget(panel);
  panel.addStyleName(""String_Node_Str"");
  panel.addStyleName(isUser ? ""String_Node_Str"" : ""String_Node_Str"");
  panelBody.addStyleName(""String_Node_Str"");
  type.addStyleName(""String_Node_Str"");
  nameLabel.addStyleName(""String_Node_Str"");
  rightPanel.addStyleName(""String_Node_Str"");
  editPermissionsPanel.addStyleName(""String_Node_Str"");
  removePanel.addStyleName(""String_Node_Str"");
  removePanel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      PermissionPanel.this.removeFromParent();
    }
  }
);
}",0.9914642153644124
188684,"@Override public void onFailure(Throwable caught){
  Toast.showError(caught.getMessage());
  cancel();
}","@Override public void onFailure(Throwable caught){
  AsyncCallbackUtils.defaultFailureTreatment(caught);
}",0.638095238095238
188685,"@UiHandler(""String_Node_Str"") void buttonCancelHandler(ClickEvent e){
  cancel();
}","@UiHandler(""String_Node_Str"") void buttonCancelHandler(ClickEvent e){
  close();
}",0.9575757575757576
188686,"private void createPermissionPanel(){
  Permissions permissions=aip.getPermissions();
  GWT.log(aip.getPermissions().toString());
  for (  String username : permissions.getUsernames()) {
    permissionsPanel.add(new PermissionPanel(username,true,permissions.getUserPermissions(username)));
  }
  for (  String groupname : permissions.getGroupnames()) {
    permissionsPanel.add(new PermissionPanel(groupname,false,permissions.getGroupPermissions(groupname)));
  }
}","private void createPermissionPanel(){
  Permissions permissions=aip.getPermissions();
  GWT.log(""String_Node_Str"" + permissions);
  for (  String username : permissions.getUsernames()) {
    userPermissionsPanel.add(new PermissionPanel(username,true,permissions.getUserPermissions(username)));
  }
  for (  String groupname : permissions.getGroupnames()) {
    groupPermissionsPanel.add(new PermissionPanel(groupname,false,permissions.getGroupPermissions(groupname)));
  }
}",0.9329073482428116
188687,"public void addPermissionPanel(RODAMember member){
  permissionsPanel.insert(new PermissionPanel(member),0);
}","public void addPermissionPanel(RODAMember member){
  if (member.isUser()) {
    userPermissionsPanel.insert(new PermissionPanel(member),0);
  }
 else {
    groupPermissionsPanel.insert(new PermissionPanel(member),0);
  }
}",0.6566265060240963
188688,"@UiHandler(""String_Node_Str"") void buttonAddHandler(ClickEvent e){
  MemberSelectDialog selectDialog=new MemberSelectDialog(""String_Node_Str"",null);
  selectDialog.showAndCenter();
  selectDialog.addValueChangeHandler(new ValueChangeHandler<RODAMember>(){
    @Override public void onValueChange(    ValueChangeEvent<RODAMember> event){
      RODAMember selected=event.getValue();
      if (selected != null) {
        addPermissionPanel(selected);
      }
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonAddHandler(ClickEvent e){
  Filter filter=new Filter();
  for (  String username : getAssignedUserNames()) {
    filter.add(new NotSimpleFilterParameter(RodaConstants.MEMBERS_ID,username));
  }
  for (  String groupname : getAssignedGroupNames()) {
    filter.add(new NotSimpleFilterParameter(RodaConstants.MEMBERS_ID,groupname));
  }
  MemberSelectDialog selectDialog=new MemberSelectDialog(""String_Node_Str"",filter);
  selectDialog.showAndCenter();
  selectDialog.addValueChangeHandler(new ValueChangeHandler<RODAMember>(){
    @Override public void onValueChange(    ValueChangeEvent<RODAMember> event){
      RODAMember selected=event.getValue();
      if (selected != null) {
        addPermissionPanel(selected);
      }
    }
  }
);
}",0.7454110135674381
188689,"@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  Permissions permissions=new Permissions();
  for (int i=0; i < permissionsPanel.getWidgetCount(); i++) {
    PermissionPanel permissionPanel=(PermissionPanel)permissionsPanel.getWidget(i);
    if (permissionPanel.isUser()) {
      permissions.setUserPermissions(permissionPanel.getName(),permissionPanel.getPermissions());
    }
 else {
      permissions.setGroupPermissions(permissionPanel.getName(),permissionPanel.getPermissions());
    }
  }
  BrowserService.Util.getInstance().updateAIPPermssions(aip.getId(),permissions,new AsyncCallback<Void>(){
    @Override public void onSuccess(    Void result){
      cancel();
    }
    @Override public void onFailure(    Throwable caught){
      Toast.showError(caught.getMessage());
      cancel();
    }
  }
);
}","@UiHandler(""String_Node_Str"") void buttonApplyHandler(ClickEvent e){
  Permissions permissions=getPermissions();
  GWT.log(""String_Node_Str"" + permissions);
  BrowserService.Util.getInstance().updateAIPPermssions(aip.getId(),permissions,new AsyncCallback<Void>(){
    @Override public void onSuccess(    Void result){
      Toast.showInfo(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFailure(    Throwable caught){
      AsyncCallbackUtils.defaultFailureTreatment(caught);
    }
  }
);
}",0.5463994060876021
188690,"@Override public void onSuccess(Void result){
  cancel();
}","@Override public void onSuccess(Void result){
  Toast.showInfo(""String_Node_Str"",""String_Node_Str"");
}",0.6832298136645962
188691,"public String createFolder(String parent,String folderName) throws GenericException, RequestNotValidException {
  Path parentPath=parent != null ? basePath.resolve(parent) : basePath;
  Path createdPath;
  try {
    createdPath=Files.createDirectories(parentPath.resolve(folderName));
    BasicFileAttributes attrs=Files.readAttributes(createdPath,BasicFileAttributes.class);
    TransferredResource resource=createTransferredResource(createdPath,attrs,0L,basePath,new Date());
    index.create(TransferredResource.class,resource);
    return resource.getUUID();
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
}","public String createFolder(String parentUUID,String folderName) throws GenericException, RequestNotValidException, NotFoundException {
  Path parentPath;
  if (parentUUID != null) {
    TransferredResource parent=index.retrieve(TransferredResource.class,parentUUID);
    parentPath=basePath.resolve(parent.getRelativePath());
  }
 else {
    parentPath=basePath;
  }
  try {
    Path createdPath=Files.createDirectories(parentPath.resolve(folderName));
    BasicFileAttributes attrs=Files.readAttributes(createdPath,BasicFileAttributes.class);
    TransferredResource resource=createTransferredResource(createdPath,attrs,0L,basePath,new Date());
    index.create(TransferredResource.class,resource);
    return resource.getUUID();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(""String_Node_Str"",e);
  }
}",0.1495698213103904
188692,"public String createFile(String path,String fileName,InputStream inputStream) throws GenericException, RequestNotValidException {
  Path parent=path != null ? basePath.resolve(path) : basePath;
  try {
    Files.createDirectories(parent);
    Path file=parent.resolve(fileName);
    Files.copy(inputStream,file);
    BasicFileAttributes attrs=Files.readAttributes(file,BasicFileAttributes.class);
    TransferredResource resource=createTransferredResource(file,attrs,attrs.size(),basePath,new Date());
    index.create(TransferredResource.class,resource);
    return resource.getUUID();
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
}","public String createFile(String parentUUID,String fileName,InputStream inputStream) throws GenericException, RequestNotValidException, NotFoundException {
  Path parentPath;
  if (parentUUID != null) {
    TransferredResource parent=index.retrieve(TransferredResource.class,parentUUID);
    parentPath=basePath.resolve(parent.getRelativePath());
  }
 else {
    parentPath=basePath;
  }
  try {
    try {
      Files.createDirectories(parentPath);
    }
 catch (    FileAlreadyExistsException e) {
    }
    Path file=parentPath.resolve(fileName);
    Files.copy(inputStream,file);
    BasicFileAttributes attrs=Files.readAttributes(file,BasicFileAttributes.class);
    TransferredResource resource=createTransferredResource(file,attrs,attrs.size(),basePath,new Date());
    index.create(TransferredResource.class,resource);
    return resource.getUUID();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new GenericException(""String_Node_Str"",e);
  }
}",0.1301204819277108
188693,"public static String createTransferredResourcesFolder(RodaUser user,String parent,String folderName,boolean forceCommit) throws AuthorizationDeniedException, GenericException, RequestNotValidException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,INGEST_TRANSFER_ROLE);
  UserUtility.checkTransferredResourceAccess(user,Arrays.asList(parent));
  try {
    String uuid=BrowserHelper.createTransferredResourcesFolder(parent,folderName,forceCommit);
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PARENT_PARAM,parent,FOLDERNAME_PARAM,folderName,SUCCESS_PARAM,true);
    return uuid;
  }
 catch (  GenericException e) {
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PARENT_PARAM,parent,FOLDERNAME_PARAM,folderName,SUCCESS_PARAM,false,ERROR_PARAM,e.getMessage());
    throw e;
  }
}","public static String createTransferredResourcesFolder(RodaUser user,String parentUUID,String folderName,boolean forceCommit) throws AuthorizationDeniedException, GenericException, RequestNotValidException, NotFoundException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,INGEST_TRANSFER_ROLE);
  UserUtility.checkTransferredResourceAccess(user,Arrays.asList(parentUUID));
  try {
    String uuid=BrowserHelper.createTransferredResourcesFolder(parentUUID,folderName,forceCommit);
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PARENT_PARAM,parentUUID,FOLDERNAME_PARAM,folderName,SUCCESS_PARAM,true);
    return uuid;
  }
 catch (  GenericException e) {
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PARENT_PARAM,parentUUID,FOLDERNAME_PARAM,folderName,SUCCESS_PARAM,false,ERROR_PARAM,e.getMessage());
    throw e;
  }
}",0.9803129732458354
188694,"public static void createTransferredResource(RodaUser user,String parentId,String fileName,InputStream inputStream,String name,boolean forceCommit) throws AuthorizationDeniedException, GenericException, AlreadyExistsException, RequestNotValidException {
  if (name == null) {
    Browser.createTransferredResourceFile(user,parentId,fileName,inputStream,forceCommit);
  }
 else {
    Browser.createTransferredResourcesFolder(user,parentId,name,forceCommit);
  }
}","public static void createTransferredResource(RodaUser user,String parentUUID,String fileName,InputStream inputStream,String name,boolean forceCommit) throws AuthorizationDeniedException, GenericException, AlreadyExistsException, RequestNotValidException, NotFoundException {
  if (name == null) {
    Browser.createTransferredResourceFile(user,parentUUID,fileName,inputStream,forceCommit);
  }
 else {
    Browser.createTransferredResourcesFolder(user,parentUUID,name,forceCommit);
  }
}",0.9673340358271864
188695,"public static void createTransferredResourceFile(RodaUser user,String path,String fileName,InputStream inputStream,boolean forceCommit) throws AuthorizationDeniedException, GenericException, AlreadyExistsException, RequestNotValidException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,INGEST_TRANSFER_ROLE);
  UserUtility.checkTransferredResourceAccess(user,Arrays.asList(path));
  try {
    BrowserHelper.createTransferredResourceFile(path,fileName,inputStream,forceCommit);
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PATH_PARAM,path,FILENAME_PARAM,fileName,SUCCESS_PARAM,true);
  }
 catch (  GenericException e) {
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PATH_PARAM,path,FILENAME_PARAM,fileName,SUCCESS_PARAM,false,ERROR_PARAM,e.getMessage());
    throw e;
  }
}","public static void createTransferredResourceFile(RodaUser user,String parentUUID,String fileName,InputStream inputStream,boolean forceCommit) throws AuthorizationDeniedException, GenericException, AlreadyExistsException, RequestNotValidException, NotFoundException {
  Date startDate=new Date();
  UserUtility.checkRoles(user,INGEST_TRANSFER_ROLE);
  UserUtility.checkTransferredResourceAccess(user,Arrays.asList(parentUUID));
  try {
    BrowserHelper.createTransferredResourceFile(parentUUID,fileName,inputStream,forceCommit);
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PATH_PARAM,parentUUID,FILENAME_PARAM,fileName,SUCCESS_PARAM,true);
  }
 catch (  GenericException e) {
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",null,duration,PATH_PARAM,parentUUID,FILENAME_PARAM,fileName,SUCCESS_PARAM,false,ERROR_PARAM,e.getMessage());
    throw e;
  }
}",0.8957178841309824
188696,"public static String createTransferredResourcesFolder(String parent,String folderName,boolean forceCommit) throws GenericException, RequestNotValidException {
  String uuid=RodaCoreFactory.getTransferredResourcesScanner().createFolder(parent,folderName);
  if (forceCommit) {
    RodaCoreFactory.getTransferredResourcesScanner().commit();
  }
  return uuid;
}","public static String createTransferredResourcesFolder(String parentUUID,String folderName,boolean forceCommit) throws GenericException, RequestNotValidException, NotFoundException {
  String uuid=RodaCoreFactory.getTransferredResourcesScanner().createFolder(parentUUID,folderName);
  if (forceCommit) {
    RodaCoreFactory.getTransferredResourcesScanner().commit();
  }
  return uuid;
}",0.963758389261745
188697,"public static void createTransferredResourceFile(String path,String fileName,InputStream inputStream,boolean forceCommit) throws GenericException, AlreadyExistsException, RequestNotValidException {
  LOGGER.debug(""String_Node_Str"",path,fileName);
  RodaCoreFactory.getTransferredResourcesScanner().createFile(path,fileName,inputStream);
  if (forceCommit) {
    RodaCoreFactory.getTransferredResourcesScanner().commit();
  }
}","public static void createTransferredResourceFile(String parentUUID,String fileName,InputStream inputStream,boolean forceCommit) throws GenericException, AlreadyExistsException, RequestNotValidException, NotFoundException {
  LOGGER.debug(""String_Node_Str"",parentUUID,fileName);
  RodaCoreFactory.getTransferredResourcesScanner().createFile(parentUUID,fileName,inputStream);
  if (forceCommit) {
    RodaCoreFactory.getTransferredResourcesScanner().commit();
  }
}",0.8053993250843644
188698,"@Override public Response toResponse(RODAException e){
  Response response;
  if (e instanceof AuthorizationDeniedException) {
    response=Response.status(Status.UNAUTHORIZED).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
 else   if (e instanceof NotImplementedException) {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,""String_Node_Str"")).build();
  }
 else   if (e instanceof RequestNotValidException) {
    response=Response.status(Status.BAD_REQUEST).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
 else   if (e instanceof GenericException) {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
 else   if (e instanceof NotFoundException) {
    response=Response.status(Status.NOT_FOUND).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
 else   if (e instanceof AlreadyExistsException) {
    response=Response.status(Status.CONFLICT).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
 else {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,e.getMessage())).build();
  }
  return response;
}","@Override public Response toResponse(RODAException e){
  Response response;
  String message=e.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage();
  if (e.getCause() != null) {
    message+=""String_Node_Str"" + e.getCause().getClass().getCanonicalName() + ""String_Node_Str""+ e.getCause().getMessage();
  }
  if (e instanceof AuthorizationDeniedException) {
    response=Response.status(Status.UNAUTHORIZED).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
 else   if (e instanceof NotImplementedException) {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,""String_Node_Str"")).build();
  }
 else   if (e instanceof RequestNotValidException) {
    response=Response.status(Status.BAD_REQUEST).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
 else   if (e instanceof GenericException) {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
 else   if (e instanceof NotFoundException) {
    response=Response.status(Status.NOT_FOUND).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
 else   if (e instanceof AlreadyExistsException) {
    response=Response.status(Status.CONFLICT).entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
 else {
    response=Response.serverError().entity(new ApiResponseMessage(ApiResponseMessage.ERROR,message)).build();
  }
  return response;
}",0.7807142857142857
188699,"@POST public Response createResource(@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String parentId,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String name,@FormDataParam(""String_Node_Str"") InputStream inputStream,@FormDataParam(""String_Node_Str"") FormDataContentDisposition fileDetail) throws RODAException {
  RodaUser user=UserUtility.getApiUser(request,RodaCoreFactory.getIndexService());
  Browser.createTransferredResource(user,parentId,fileDetail.getFileName(),inputStream,name,true);
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST public Response createResource(@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(RodaConstants.TRANSFERRED_RESOURCE_PARENT_UUID) String parentUUID,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String name,@FormDataParam(""String_Node_Str"") InputStream inputStream,@FormDataParam(""String_Node_Str"") FormDataContentDisposition fileDetail) throws RODAException {
  RodaUser user=UserUtility.getApiUser(request,RodaCoreFactory.getIndexService());
  Browser.createTransferredResource(user,parentUUID,fileDetail.getFileName(),inputStream,name,true);
  return Response.ok().entity(""String_Node_Str"").build();
}",0.9207843137254902
188700,"String createTransferredResourcesFolder(String parent,String folderName) throws AuthorizationDeniedException, GenericException, RequestNotValidException ;","String createTransferredResourcesFolder(String parent,String folderName) throws AuthorizationDeniedException, GenericException, RequestNotValidException, NotFoundException ;",0.9418960244648318
188701,"private String getUploadUrl(){
  String ret;
  if (resource == null) {
    ret=RestUtils.createTransferredResourceUploadUri(null);
  }
 else   if (resource != null && !resource.isFile()) {
    String id=resource.getId();
    ret=RestUtils.createTransferredResourceUploadUri(id);
  }
 else {
    ret=null;
  }
  return ret;
}","private String getUploadUrl(){
  String ret;
  if (resource == null) {
    ret=RestUtils.createTransferredResourceUploadUri(null);
  }
 else   if (resource != null && !resource.isFile()) {
    ret=RestUtils.createTransferredResourceUploadUri(resource.getUUID());
  }
 else {
    ret=null;
  }
  return ret;
}",0.8037974683544303
188702,"public static String createTransferredResourceUploadUri(String parentId){
  StringBuilder b=new StringBuilder();
  b.append(RodaConstants.API_REST_V1_TRANSFERRED);
  if (parentId != null) {
    b.append(RodaConstants.API_QUERY_START).append(""String_Node_Str"").append(RodaConstants.API_QUERY_ASSIGN_SYMBOL).append(parentId);
  }
  return b.toString();
}","public static String createTransferredResourceUploadUri(String parentUUID){
  StringBuilder b=new StringBuilder();
  b.append(RodaConstants.API_REST_V1_TRANSFERRED);
  if (parentUUID != null) {
    b.append(RodaConstants.API_QUERY_START).append(RodaConstants.TRANSFERRED_RESOURCE_PARENT_UUID).append(RodaConstants.API_QUERY_ASSIGN_SYMBOL).append(parentUUID);
  }
  return b.toString();
}",0.8930987821380244
188703,"public static <T extends Serializable>void updateJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceReportItem){
  String jobId=getJobId(plugin);
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getItemId());
    }
 catch (    NotFoundException e) {
      jobReport=createPluginReportItem(plugin,reportItem.getItemId(),reportItem.getOtherId());
      jobReport.setId(IdUtils.getJobReportId(jobId,reportItem.getItemId()));
      jobReport.addReport(reportItem);
    }
    jobReport.setDateUpdated(new Date());
    if (!replaceReportItem) {
      jobReport.addReport(reportItem);
    }
 else {
      List<Report> reportItems=jobReport.getReports();
      Report report=reportItems.get(reportItems.size() - 1);
      if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
        reportItems.remove(reportItems.size() - 1);
        jobReport.addReport(reportItem);
      }
    }
    model.createOrUpdateJobReport(jobReport);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public static <T extends Serializable>void updateJobReport(Plugin<T> plugin,ModelService model,IndexService index,Report reportItem,boolean replaceReportItem){
  String jobId=getJobId(plugin);
  try {
    Report jobReport;
    try {
      jobReport=model.retrieveJobReport(jobId,reportItem.getItemId());
    }
 catch (    NotFoundException e) {
      jobReport=createPluginReportItem(plugin,reportItem.getItemId(),reportItem.getOtherId());
      jobReport.setId(IdUtils.getJobReportId(jobId,reportItem.getItemId()));
      jobReport.addReport(reportItem);
    }
    jobReport.setDateUpdated(new Date());
    if (!replaceReportItem) {
      jobReport.addReport(reportItem);
    }
 else {
      List<Report> reportItems=jobReport.getReports();
      Report report=reportItems.get(reportItems.size() - 1);
      if (report.getPlugin().equalsIgnoreCase(reportItem.getPlugin())) {
        reportItems.remove(reportItems.size() - 1);
        jobReport.setStepsCompleted(jobReport.getStepsCompleted() - 1);
        jobReport.addReport(reportItem);
      }
    }
    model.createOrUpdateJobReport(jobReport);
  }
 catch (  GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9699749791492912
188704,"protected static void validateAndSetCreateJobInformation(RodaUser user,Job job) throws RequestNotValidException {
  if (!ORCHESTRATOR_METHODS.contains(job.getOrchestratorMethod())) {
    throw new RequestNotValidException(""String_Node_Str"" + job.getOrchestratorMethod() + ""String_Node_Str"");
  }
  validateJobPluginInformation(job);
  if (org.apache.commons.lang3.StringUtils.isBlank(job.getId())) {
    job.setId(UUID.randomUUID().toString());
  }
  if (org.apache.commons.lang3.StringUtils.isBlank(job.getName())) {
    job.setName(job.getId());
  }
  job.setUsername(user.getName());
}","protected static void validateAndSetCreateJobInformation(RodaUser user,Job job) throws RequestNotValidException {
  if (!ORCHESTRATOR_METHODS.contains(job.getOrchestratorMethod())) {
    throw new RequestNotValidException(""String_Node_Str"" + job.getOrchestratorMethod() + ""String_Node_Str"");
  }
  validateJobPluginInformation(job);
  job.setId(UUID.randomUUID().toString());
  if (org.apache.commons.lang3.StringUtils.isBlank(job.getName())) {
    job.setName(job.getId());
  }
  job.setUsername(user.getName());
}",0.7035358114233907
188705,"public static void runReindexAipsPlugin(List<String> aipIds){
  Plugin<AIP> reindexPlugin=new ReindexAIPPlugin();
  ((ReindexAIPPlugin)reindexPlugin).setClearIndexes(false);
  getPluginOrchestrator().runPluginOnAIPs(reindexPlugin,aipIds);
}","public static void runReindexAipsPlugin(List<String> aipIds){
  Plugin<AIP> reindexPlugin=new ReindexAIPPlugin();
  getPluginOrchestrator().runPluginOnAIPs(reindexPlugin,aipIds);
}",0.8571428571428571
188706,"private ApiResponseMessage createJobToReindexAllAIPs(RodaUser user,Date startDate){
  ApiResponseMessage response=new ApiResponseMessage(ApiResponseMessage.OK,""String_Node_Str"");
  Job job=new Job();
  job.setName(""String_Node_Str"").setOrchestratorMethod(ORCHESTRATOR_METHOD.ON_ALL_AIPS).setPlugin(ReindexAIPPlugin.class.getCanonicalName());
  try {
    Job jobCreated=Jobs.createJob(user,job);
    response.setMessage(""String_Node_Str"" + jobCreated + ""String_Node_Str"");
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,""String_Node_Str"",""String_Node_Str"",null,duration);
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|NotFoundException|GenericException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return response;
}","private ApiResponseMessage createJobToReindexAllAIPs(RodaUser user,Date startDate){
  ApiResponseMessage response=new ApiResponseMessage(ApiResponseMessage.OK,""String_Node_Str"");
  Job job=new Job();
  job.setName(""String_Node_Str"").setOrchestratorMethod(ORCHESTRATOR_METHOD.ON_ALL_AIPS).setPlugin(ReindexAIPPlugin.class.getCanonicalName());
  Map<String,String> pluginParameters=new HashMap<>();
  pluginParameters.put(RodaConstants.PLUGIN_PARAMS_BOOLEAN_VALUE,""String_Node_Str"");
  job.setPluginParameters(pluginParameters);
  try {
    Job jobCreated=Jobs.createJob(user,job);
    response.setMessage(""String_Node_Str"" + jobCreated + ""String_Node_Str"");
    long duration=new Date().getTime() - startDate.getTime();
    registerAction(user,""String_Node_Str"",""String_Node_Str"",null,duration);
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|NotFoundException|GenericException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return response;
}",0.8941041785918717
188707,"/** 
 * Recalculates (if failures must be noticed) and updates AIP objects (by obtaining them from model)
 */
private List<AIP> recalculateAIPsList(ModelService model,List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToTransferredResourceId,boolean removeAIPProcessingFailed){
  List<AIP> newAips=new ArrayList<>();
  for (int i=0; i < aips.size(); i++) {
    AIP aip=aips.get(i);
    String transferredResourceId=aipIdToTransferredResourceId.get(aip.getId());
    Report report=reports.get(transferredResourceId);
    if (removeAIPProcessingFailed && report.getPluginState() == PluginState.FAILURE) {
      aips.remove(i);
    }
 else {
      try {
        newAips.add(model.retrieveAIP(aip.getId()));
      }
 catch (      RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return newAips;
}","/** 
 * Recalculates (if failures must be noticed) and updates AIP objects (by obtaining them from model)
 */
private List<AIP> recalculateAIPsList(ModelService model,List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToTransferredResourceId,boolean removeAIPProcessingFailed){
  List<AIP> newAips=new ArrayList<>();
  for (  AIP aip : aips) {
    String transferredResourceId=aipIdToTransferredResourceId.get(aip.getId());
    Report report=reports.get(transferredResourceId);
    if (removeAIPProcessingFailed && report.getPluginState() == PluginState.FAILURE) {
      LOGGER.debug(""String_Node_Str"",aip.getId());
    }
 else {
      try {
        newAips.add(model.retrieveAIP(aip.getId()));
      }
 catch (      RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return newAips;
}",0.6963207029104888
188708,"private static String getSiegfriedServerEndpoint(Path sourceDirectory){
  String siegfriedServer=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String endpoint=siegfriedServer + ""String_Node_Str"" + new String(Base64.encode(sourceDirectory.toString().getBytes()));
  return endpoint;
}","private static String getSiegfriedServerEndpoint(Path sourceDirectory){
  String siegfriedServer=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String endpoint=siegfriedServer + ""String_Node_Str"" + new String(Base64.encode(sourceDirectory.toString().getBytes()));
  return endpoint;
}",0.9742120343839542
188709,"public static String executePdfToPdfa(Path p,Path fixed) throws IOException, VeraPDFException, GhostscriptException {
  Path pdfa=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String[] gsArgs=new String[10];
  gsArgs[0]=""String_Node_Str"";
  gsArgs[1]=""String_Node_Str"";
  gsArgs[2]=""String_Node_Str"";
  gsArgs[3]=""String_Node_Str"";
  gsArgs[4]=""String_Node_Str"";
  gsArgs[5]=""String_Node_Str"";
  gsArgs[6]=""String_Node_Str"";
  gsArgs[7]=""String_Node_Str"";
  gsArgs[8]=""String_Node_Str"" + pdfa.toString();
  gsArgs[9]=p.toString();
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  InputStream is=new FileInputStream(pdfa.toString());
  try (ModelParser loader=new ModelParser(is)){
    ValidationProfile profile=Profiles.getVeraProfileDirectory().getValidationProfileByFlavour(PDFAFlavour.PDFA_1_B);
    PDFAValidator validator=Validators.createValidator(profile,true);
    ValidationResult result=validator.validate(loader);
    is.close();
    OutputStream fixedOutputStream=new FileOutputStream(fixed.toString());
    FixerConfig fconf=FixerConfigImpl.getFixerConfig(loader.getPDDocument(),result);
    MetadataFixerImpl.fixMetadata(fixedOutputStream,fconf);
    fixedOutputStream.close();
    loader.close();
  }
 catch (  ValidationException|FileNotFoundException e) {
    throw new VeraPDFException(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}","public static String executePdfToPdfa(Path p,Path fixed) throws IOException, VeraPDFException, GhostscriptException {
  Path pdfa=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
  String[] gsArgs=new String[10];
  gsArgs[0]=""String_Node_Str"";
  gsArgs[1]=""String_Node_Str"";
  gsArgs[2]=""String_Node_Str"";
  gsArgs[3]=""String_Node_Str"";
  gsArgs[4]=""String_Node_Str"";
  gsArgs[5]=""String_Node_Str"";
  gsArgs[6]=""String_Node_Str"";
  gsArgs[7]=""String_Node_Str"";
  gsArgs[8]=""String_Node_Str"" + pdfa.toString();
  gsArgs[9]=p.toString();
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  InputStream is=new FileInputStream(pdfa.toString());
  try (ModelParser loader=new ModelParser(is)){
    ValidationProfile profile=Profiles.getVeraProfileDirectory().getValidationProfileByFlavour(PDFAFlavour.PDFA_1_B);
    PDFAValidator validator=Validators.createValidator(profile,true);
    ValidationResult result=validator.validate(loader);
    is.close();
    if (result.isCompliant()) {
      FileUtils.copyFile(pdfa.toFile(),fixed.toFile());
    }
 else {
      OutputStream fixedOutputStream=new FileOutputStream(fixed.toString());
      FixerConfig fconf=FixerConfigImpl.getFixerConfig(loader.getPDDocument(),result);
      MetadataFixerResult mfr=MetadataFixerImpl.fixMetadata(fixedOutputStream,fconf);
      fixedOutputStream.close();
    }
    loader.close();
  }
 catch (  ValidationException|FileNotFoundException e) {
    throw new VeraPDFException(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}",0.9560301507537688
188710,"@Override public <T extends Serializable>void updateJobPercentage(Plugin<T> plugin,int stepsCompleted,int totalSteps){
  String jobId=PluginHelper.getJobId(plugin);
  if (jobId != null) {
synchronized (runningTasks) {
      Integer totalNumberOfObjects=runningTasksTotalObjects.get(jobId);
      Map<Plugin<?>,JobPluginInfo> map=runningTasks.get(jobId);
      map.get(plugin).setStepsCompleted(stepsCompleted);
      float percentage=0f;
      for (      JobPluginInfo entry : map.values()) {
        float pluginPercentage=((float)entry.getStepsCompleted()) / totalSteps;
        float pluginWeight=((float)entry.getNumberOfObjects()) / totalNumberOfObjects;
        percentage+=(pluginPercentage * pluginWeight);
      }
      PluginHelper.updateJobStatus(plugin,index,model,Math.round((percentage * 100)));
    }
  }
}","@Override public <T extends Serializable>void updateJobPercentage(Plugin<T> plugin,int stepsCompleted,int totalSteps){
  String jobId=PluginHelper.getJobId(plugin);
  if (jobId != null) {
synchronized (runningTasks) {
      Integer totalNumberOfObjects=runningTasksTotalObjects.get(jobId);
      Map<Plugin<?>,JobPluginInfo> map=runningTasks.get(jobId);
      map.get(plugin).setStepsCompleted(stepsCompleted);
      float percentage=0f;
      for (      JobPluginInfo entry : map.values()) {
        float pluginPercentage=((float)entry.getStepsCompleted()) / totalSteps;
        float pluginWeight=((float)entry.getNumberOfObjects()) / totalNumberOfObjects;
        percentage+=(pluginPercentage * pluginWeight);
      }
      PluginHelper.updateJobStatus(plugin,model,Math.round((percentage * 100)));
    }
  }
}",0.9963325183374084
188711,"@Override public void onReceive(Object msg) throws Exception {
  if (msg instanceof Job) {
    List<Report> reports=new ArrayList<>();
    Job job=(Job)msg;
    Plugin<?> plugin=(Plugin<?>)RodaCoreFactory.getPluginManager().getPlugin(job.getPlugin());
    PluginHelper.setPluginParameters(plugin,job);
    PluginHelper.updateJobStatus(plugin,RodaCoreFactory.getIndexService(),RodaCoreFactory.getModelService(),0);
    if (ORCHESTRATOR_METHOD.ON_TRANSFERRED_RESOURCES == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources((Plugin<TransferredResource>)plugin,getTransferredResourcesFromObjectIds(job.getObjectIds()));
    }
 else     if (ORCHESTRATOR_METHOD.ON_ALL_AIPS == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnAllAIPs((Plugin<AIP>)plugin);
    }
 else     if (ORCHESTRATOR_METHOD.ON_AIPS == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnAIPs((Plugin<AIP>)plugin,job.getObjectIds());
    }
 else     if (ORCHESTRATOR_METHOD.RUN_PLUGIN == job.getOrchestratorMethod()) {
      RodaCoreFactory.getPluginOrchestrator().runPlugin(plugin);
    }
    PluginHelper.updateJobStatus(plugin,RodaCoreFactory.getIndexService(),RodaCoreFactory.getModelService(),100);
    getSender().tell(reports,getSelf());
  }
}","@Override public void onReceive(Object msg) throws Exception {
  if (msg instanceof Job) {
    List<Report> reports=new ArrayList<>();
    Job job=(Job)msg;
    Plugin<?> plugin=(Plugin<?>)RodaCoreFactory.getPluginManager().getPlugin(job.getPlugin());
    PluginHelper.setPluginParameters(plugin,job);
    PluginHelper.updateJobStatus(plugin,RodaCoreFactory.getModelService(),0);
    if (ORCHESTRATOR_METHOD.ON_TRANSFERRED_RESOURCES == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources((Plugin<TransferredResource>)plugin,getTransferredResourcesFromObjectIds(job.getObjectIds()));
    }
 else     if (ORCHESTRATOR_METHOD.ON_ALL_AIPS == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnAllAIPs((Plugin<AIP>)plugin);
    }
 else     if (ORCHESTRATOR_METHOD.ON_AIPS == job.getOrchestratorMethod()) {
      reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnAIPs((Plugin<AIP>)plugin,job.getObjectIds());
    }
 else     if (ORCHESTRATOR_METHOD.RUN_PLUGIN == job.getOrchestratorMethod()) {
      RodaCoreFactory.getPluginOrchestrator().runPlugin(plugin);
    }
    PluginHelper.updateJobStatus(plugin,RodaCoreFactory.getModelService(),100);
    getSender().tell(reports,getSelf());
  }
}",0.9745889387144993
188712,"public static <T extends Serializable>void updateJobStatus(Plugin<T> plugin,IndexService index,ModelService model,int newCompletionPercentage){
  try {
    LOGGER.debug(""String_Node_Str"",newCompletionPercentage);
    Job job=PluginHelper.getJobFromIndex(plugin,index);
    job.setCompletionPercentage(newCompletionPercentage);
    if (newCompletionPercentage == 0) {
      job.setState(JOB_STATE.STARTED);
    }
 else     if (newCompletionPercentage == 100) {
      job.setState(JOB_STATE.COMPLETED);
      job.setEndDate(new Date());
    }
    model.createOrUpdateJob(job);
  }
 catch (  NotFoundException|GenericException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","public static <T extends Serializable>void updateJobStatus(Plugin<T> plugin,ModelService model,int newCompletionPercentage){
  try {
    LOGGER.debug(""String_Node_Str"",newCompletionPercentage);
    Job job=PluginHelper.getJobFromModel(plugin,model);
    job.setCompletionPercentage(newCompletionPercentage);
    if (newCompletionPercentage == 0) {
      job.setState(JOB_STATE.STARTED);
    }
 else     if (newCompletionPercentage == 100) {
      job.setState(JOB_STATE.COMPLETED);
      job.setEndDate(new Date());
    }
    model.createOrUpdateJob(job);
  }
 catch (  NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9326574945691528
188713,"public static <T extends Serializable>Job getJobFromIndex(Plugin<T> plugin,IndexService index) throws NotFoundException, GenericException {
  String jobID=getJobId(plugin);
  if (jobID != null) {
    return index.retrieve(Job.class,jobID);
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}","/** 
 * 20160329 hsilva: use this method only to get job information that most certainly won't change in time (e.g. username, etc.)
 */
public static <T extends Serializable>Job getJobFromIndex(Plugin<T> plugin,IndexService index) throws NotFoundException, GenericException {
  String jobID=getJobId(plugin);
  if (jobID != null) {
    return index.retrieve(Job.class,jobID);
  }
 else {
    throw new NotFoundException(""String_Node_Str"");
  }
}",0.8196286472148541
188714,"private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null);
  Plugin<TransferredResource> plugin=new BagitToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,Arrays.asList(transferredResource));
  assertReports(reports);
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}","private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null,new Permissions());
  Plugin<TransferredResource> plugin=new BagitToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,Arrays.asList(transferredResource));
  assertReports(reports);
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}",0.9918330308529946
188715,"private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null);
  Plugin<TransferredResource> plugin=new EARKSIPToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,Arrays.asList(transferredResource));
  assertReports(reports);
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}","private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null,new Permissions());
  Plugin<TransferredResource> plugin=new EARKSIPToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,Arrays.asList(transferredResource));
  assertReports(reports);
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}",0.9920071047957372
188716,"private AIP ingestCorpora(int corporaId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null);
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  List<TransferredResource> transferredResources=new ArrayList<TransferredResource>();
  transferredResources=createCorpora(corporaId);
  Assert.assertEquals(1,transferredResources.size());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,transferredResources);
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}","private AIP ingestCorpora(int corporaId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null,new Permissions());
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  List<TransferredResource> transferredResources=new ArrayList<TransferredResource>();
  transferredResources=createCorpora(corporaId);
  Assert.assertEquals(1,transferredResources.size());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,transferredResources);
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}",0.9927536231884058
188717,"private AIP ingestCorpora(int corporaId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null);
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  List<TransferredResource> transferredResources=new ArrayList<TransferredResource>();
  transferredResources=createCorpora(corporaId);
  Assert.assertEquals(1,transferredResources.size());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,transferredResources);
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}","private AIP ingestCorpora(int corporaId) throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null,new Permissions());
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  plugin.setParameterValues(parameters);
  List<TransferredResource> transferredResources=new ArrayList<TransferredResource>();
  transferredResources=createCorpora(corporaId);
  Assert.assertEquals(1,transferredResources.size());
  RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,transferredResources);
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}",0.9922010398613518
188718,"private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null);
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<TransferredResource> items=Arrays.asList(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,items);
  assertReports(reports,null,items.stream().map(tr -> tr.getId()).collect(Collectors.toList()));
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}","private AIP ingestCorpora() throws RequestNotValidException, NotFoundException, GenericException, AlreadyExistsException, AuthorizationDeniedException, InvalidParameterException, InterruptedException, IOException, FileAlreadyExistsException {
  AIP root=model.createAIP(null,new Permissions());
  Plugin<TransferredResource> plugin=new TransferredResourceToAIPPlugin();
  Map<String,String> parameters=new HashMap<>();
  parameters.put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,root.getId());
  parameters.put(RodaConstants.PLUGIN_PARAMS_JOB_ID,FAKE_JOB_ID);
  plugin.setParameterValues(parameters);
  TransferredResource transferredResource=createCorpora();
  Assert.assertNotNull(transferredResource);
  List<TransferredResource> items=Arrays.asList(transferredResource);
  List<Report> reports=RodaCoreFactory.getPluginOrchestrator().runPluginOnTransferredResources(plugin,items);
  assertReports(reports,null,items.stream().map(tr -> tr.getId()).collect(Collectors.toList()));
  index.commitAIPs();
  IndexResult<IndexedAIP> find=index.find(IndexedAIP.class,new Filter(new SimpleFilterParameter(RodaConstants.AIP_PARENT_ID,root.getId())),null,new Sublist(0,10));
  Assert.assertEquals(1L,find.getTotalCount());
  IndexedAIP indexedAIP=find.getResults().get(0);
  AIP aip=model.retrieveAIP(indexedAIP.getId());
  return aip;
}",0.993161094224924
188719,"public static AIP createAIP(RodaUser user,String parentId) throws AuthorizationDeniedException, GenericException, NotFoundException, RequestNotValidException, AlreadyExistsException {
  Date start=new Date();
  UserUtility.checkRoles(user,ADMINISTRATION_METADATA_EDITOR_ROLE);
  if (parentId != null) {
    IndexedAIP parentSDO=BrowserHelper.retrieve(IndexedAIP.class,parentId);
    UserUtility.checkObjectPermissions(user,parentSDO,PermissionType.CREATE);
  }
 else {
  }
  AIP aip=BrowserHelper.createAIP(parentId);
  long duration=new Date().getTime() - start.getTime();
  registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",aip.getId(),duration,""String_Node_Str"",parentId);
  return aip;
}","public static AIP createAIP(RodaUser user,String parentId) throws AuthorizationDeniedException, GenericException, NotFoundException, RequestNotValidException, AlreadyExistsException {
  Date start=new Date();
  UserUtility.checkRoles(user,ADMINISTRATION_METADATA_EDITOR_ROLE);
  if (parentId != null) {
    IndexedAIP parentSDO=BrowserHelper.retrieve(IndexedAIP.class,parentId);
    UserUtility.checkObjectPermissions(user,parentSDO,PermissionType.CREATE);
  }
 else {
  }
  Permissions permissions=new Permissions();
  permissions.setUserPermissions(user.getId(),new HashSet<PermissionType>(Arrays.asList(PermissionType.values())));
  AIP aip=BrowserHelper.createAIP(parentId,permissions);
  long duration=new Date().getTime() - start.getTime();
  registerAction(user,BROWSER_COMPONENT,""String_Node_Str"",aip.getId(),duration,""String_Node_Str"",parentId);
  return aip;
}",0.8895979578813018
188720,"public static AIP createAIP(String parentAipId) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException, AlreadyExistsException {
  ModelService model=RodaCoreFactory.getModelService();
  AIP aip=model.createAIP(parentAipId);
  return aip;
}","public static AIP createAIP(String parentAipId,Permissions permissions) throws GenericException, AuthorizationDeniedException, RequestNotValidException, NotFoundException, AlreadyExistsException {
  ModelService model=RodaCoreFactory.getModelService();
  AIP aip=model.createAIP(parentAipId,permissions);
  return aip;
}",0.9403973509933776
188721,"public static PreservationEventViewBundle retrievePreservationEventViewBundle(String eventId) throws NotFoundException, GenericException {
  PreservationEventViewBundle eventBundle=new PreservationEventViewBundle();
  Map<String,IndexedAIP> aips=new HashMap<String,IndexedAIP>();
  Map<String,IndexedRepresentation> representations=new HashMap<String,IndexedRepresentation>();
  Map<String,IndexedFile> files=new HashMap<String,IndexedFile>();
  Map<String,TransferredResource> transferredResources=new HashMap<String,TransferredResource>();
  IndexedPreservationEvent ipe=RodaCoreFactory.getIndexService().retrieve(IndexedPreservationEvent.class,eventId);
  eventBundle.setEvent(ipe);
  if (ipe.getLinkingAgentIds() != null && !ipe.getLinkingAgentIds().isEmpty()) {
    Map<String,IndexedPreservationAgent> agents=new HashMap<String,IndexedPreservationAgent>();
    for (    LinkingIdentifier agentID : ipe.getLinkingAgentIds()) {
      try {
        IndexedPreservationAgent agent=RodaCoreFactory.getIndexService().retrieve(IndexedPreservationAgent.class,agentID.getValue());
        agents.put(agentID.getValue(),agent);
      }
 catch (      NotFoundException|GenericException e) {
        LOGGER.error(""String_Node_Str"" + agentID + ""String_Node_Str""+ e.getMessage());
      }
    }
    eventBundle.setAgents(agents);
  }
  List<LinkingIdentifier> allLinkingIdentifiers=new ArrayList<>();
  if (ipe.getSourcesObjectIds() != null) {
    allLinkingIdentifiers.addAll(ipe.getSourcesObjectIds());
  }
  if (ipe.getOutcomeObjectIds() != null) {
    allLinkingIdentifiers.addAll(ipe.getOutcomeObjectIds());
  }
  for (  LinkingIdentifier identifier : allLinkingIdentifiers) {
    String idValue=identifier.getValue();
    LinkingObjectType linkingType=LinkingObjectUtils.getLinkingIdentifierType(idValue);
    try {
      if (LinkingObjectType.AIP.equals(linkingType)) {
        String uuid=LinkingObjectUtils.getAipIdFromLinkingId(idValue);
        IndexedAIP aip=retrieve(IndexedAIP.class,uuid);
        aips.put(idValue,aip);
      }
 else       if (LinkingObjectType.REPRESENTATION.equals(linkingType)) {
        String uuid=LinkingObjectUtils.getRepresentationIdFromLinkingId(idValue);
        IndexedRepresentation rep=retrieve(IndexedRepresentation.class,uuid);
        representations.put(idValue,rep);
      }
 else       if (LinkingObjectType.FILE.equals(linkingType)) {
        IndexedFile file=retrieve(IndexedFile.class,LinkingObjectUtils.getFileIdFromLinkingId(idValue));
        files.put(idValue,file);
      }
 else       if (LinkingObjectType.TRANSFERRED_RESOURCE.equals(linkingType)) {
        String uuid=LinkingObjectUtils.getTransferredResourceIdFromLinkingId(idValue);
        TransferredResource tr=retrieve(TransferredResource.class,uuid);
        transferredResources.put(idValue,tr);
      }
 else {
        LOGGER.warn(""String_Node_Str"" + linkingType);
      }
    }
 catch (    NotFoundException e) {
    }
  }
  eventBundle.setAips(aips);
  eventBundle.setRepresentations(representations);
  eventBundle.setFiles(files);
  eventBundle.setTransferredResources(transferredResources);
  return eventBundle;
}","public static PreservationEventViewBundle retrievePreservationEventViewBundle(String eventId) throws NotFoundException, GenericException {
  PreservationEventViewBundle eventBundle=new PreservationEventViewBundle();
  Map<String,IndexedAIP> aips=new HashMap<String,IndexedAIP>();
  Map<String,IndexedRepresentation> representations=new HashMap<String,IndexedRepresentation>();
  Map<String,IndexedFile> files=new HashMap<String,IndexedFile>();
  Map<String,TransferredResource> transferredResources=new HashMap<String,TransferredResource>();
  IndexedPreservationEvent ipe=RodaCoreFactory.getIndexService().retrieve(IndexedPreservationEvent.class,eventId);
  eventBundle.setEvent(ipe);
  if (ipe.getLinkingAgentIds() != null && !ipe.getLinkingAgentIds().isEmpty()) {
    Map<String,IndexedPreservationAgent> agents=new HashMap<String,IndexedPreservationAgent>();
    for (    LinkingIdentifier agentID : ipe.getLinkingAgentIds()) {
      try {
        IndexedPreservationAgent agent=RodaCoreFactory.getIndexService().retrieve(IndexedPreservationAgent.class,agentID.getValue());
        agents.put(agentID.getValue(),agent);
      }
 catch (      NotFoundException|GenericException e) {
        LOGGER.error(""String_Node_Str"" + agentID + ""String_Node_Str""+ e.getMessage());
      }
    }
    eventBundle.setAgents(agents);
  }
  List<LinkingIdentifier> allLinkingIdentifiers=new ArrayList<>();
  if (ipe.getSourcesObjectIds() != null) {
    allLinkingIdentifiers.addAll(ipe.getSourcesObjectIds());
  }
  if (ipe.getOutcomeObjectIds() != null) {
    allLinkingIdentifiers.addAll(ipe.getOutcomeObjectIds());
  }
  for (  LinkingIdentifier identifier : allLinkingIdentifiers) {
    String idValue=identifier.getValue();
    LinkingObjectType linkingType=LinkingObjectUtils.getLinkingIdentifierType(idValue);
    try {
      if (LinkingObjectType.AIP.equals(linkingType)) {
        String uuid=LinkingObjectUtils.getAipIdFromLinkingId(idValue);
        IndexedAIP aip=retrieve(IndexedAIP.class,uuid);
        aips.put(idValue,aip);
      }
 else       if (LinkingObjectType.REPRESENTATION.equals(linkingType)) {
        String uuid=LinkingObjectUtils.getRepresentationIdFromLinkingId(idValue);
        IndexedRepresentation rep=retrieve(IndexedRepresentation.class,uuid);
        representations.put(idValue,rep);
      }
 else       if (LinkingObjectType.FILE.equals(linkingType)) {
        IndexedFile file=retrieve(IndexedFile.class,LinkingObjectUtils.getFileIdFromLinkingId(idValue));
        files.put(idValue,file);
      }
 else       if (LinkingObjectType.TRANSFERRED_RESOURCE.equals(linkingType)) {
        String id=LinkingObjectUtils.getTransferredResourceIdFromLinkingId(idValue);
        String uuid=UUID.nameUUIDFromBytes(id.getBytes()).toString();
        TransferredResource tr=retrieve(TransferredResource.class,uuid);
        transferredResources.put(idValue,tr);
      }
 else {
        LOGGER.warn(""String_Node_Str"" + linkingType);
      }
    }
 catch (    NotFoundException e) {
    }
  }
  eventBundle.setAips(aips);
  eventBundle.setRepresentations(representations);
  eventBundle.setFiles(files);
  eventBundle.setTransferredResources(transferredResources);
  return eventBundle;
}",0.988632775497316
188722,"protected static Job createJob(Job job) throws NotFoundException, GenericException {
  Job updatedJob=new Job(job);
  RodaCoreFactory.getModelService().createOrUpdateJob(updatedJob);
  RodaCoreFactory.getPluginOrchestrator().executeJob(updatedJob);
  return updatedJob;
}","protected static Job createJob(Job job) throws NotFoundException, GenericException {
  Job updatedJob=new Job(job);
  RodaCoreFactory.getModelService().createOrUpdateJob(updatedJob);
  RodaCoreFactory.getPluginOrchestrator().executeJob(updatedJob);
  RodaCoreFactory.getIndexService().commit(Job.class);
  return updatedJob;
}",0.9078726968174204
188723,"@Override public void transferredResourceDeleted(String transferredResourceID){
  boolean forceCommit=false;
  deleteDocumentFromIndex(RodaConstants.INDEX_TRANSFERRED_RESOURCE,transferredResourceID,""String_Node_Str"" + transferredResourceID + ""String_Node_Str"",forceCommit);
}","@Override public void transferredResourceDeleted(String transferredResourceID){
  deleteDocumentFromIndex(RodaConstants.INDEX_TRANSFERRED_RESOURCE,transferredResourceID,""String_Node_Str"" + transferredResourceID + ""String_Node_Str"");
}",0.9194499017681728
188724,"public static TransferredResource createTransferredResource(Path resourcePath,Path basePath){
  Path relativeToBase=basePath.relativize(resourcePath);
  TransferredResource tr=new TransferredResource();
  try {
    BasicFileAttributes attr=Files.readAttributes(resourcePath,BasicFileAttributes.class);
    Date d=new Date(attr.creationTime().toMillis());
    tr.setCreationDate(d);
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"");
    tr.setCreationDate(new Date());
  }
  tr.setFile(!Files.isDirectory(resourcePath));
  tr.setFullPath(resourcePath.toString());
  tr.setId(relativeToBase.toString());
  tr.setName(resourcePath.getFileName().toString());
  tr.setRelativePath(relativeToBase.toString());
  if (relativeToBase.getParent() != null) {
    tr.setParentId(relativeToBase.getParent().toString());
  }
  try {
    tr.setSize(Files.isDirectory(resourcePath) ? 0L : Files.size(resourcePath));
  }
 catch (  IOException e) {
    tr.setSize(0L);
  }
  List<String> ancestors=new ArrayList<String>();
  StringBuilder temp=new StringBuilder();
  Iterator<Path> pathIterator=relativeToBase.iterator();
  while (pathIterator.hasNext()) {
    temp.append(pathIterator.next().toString());
    ancestors.add(temp.toString());
    temp.append(""String_Node_Str"");
  }
  ancestors.remove(ancestors.size() - 1);
  tr.setAncestorsPaths(ancestors);
  return tr;
}","public static TransferredResource createTransferredResource(Path resourcePath,Path basePath){
  Path relativeToBase=basePath.relativize(resourcePath);
  TransferredResource tr=new TransferredResource();
  try {
    BasicFileAttributes attr=Files.readAttributes(resourcePath,BasicFileAttributes.class);
    Date d=new Date(attr.creationTime().toMillis());
    tr.setCreationDate(d);
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"");
    tr.setCreationDate(new Date());
  }
  tr.setFile(!Files.isDirectory(resourcePath));
  tr.setFullPath(resourcePath.toString());
  String id=relativeToBase.toString();
  tr.setId(id);
  tr.setUUID(UUID.nameUUIDFromBytes(id.getBytes()).toString());
  tr.setName(resourcePath.getFileName().toString());
  tr.setRelativePath(relativeToBase.toString());
  if (relativeToBase.getParent() != null) {
    String parentId=relativeToBase.getParent().toString();
    tr.setParentId(parentId);
    tr.setParentUUID(UUID.nameUUIDFromBytes(parentId.getBytes()).toString());
  }
  try {
    tr.setSize(Files.isDirectory(resourcePath) ? 0L : Files.size(resourcePath));
  }
 catch (  IOException e) {
    tr.setSize(0L);
  }
  List<String> ancestors=new ArrayList<String>();
  StringBuilder temp=new StringBuilder();
  Iterator<Path> pathIterator=relativeToBase.iterator();
  while (pathIterator.hasNext()) {
    temp.append(pathIterator.next().toString());
    ancestors.add(temp.toString());
    temp.append(""String_Node_Str"");
  }
  ancestors.remove(ancestors.size() - 1);
  tr.setAncestorsPaths(ancestors);
  return tr;
}",0.9195088676671214
188725,"public static SolrInputDocument transferredResourceToSolrDocument(TransferredResource resource) throws IOException {
  SolrInputDocument transferredResource=new SolrInputDocument();
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_UUID,UUID.nameUUIDFromBytes(resource.getId().getBytes()).toString());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ID,resource.getId());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_FULLPATH,resource.getFullPath());
  if (resource.getParentId() != null) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID,resource.getParentId());
  }
  if (resource.getRelativePath() != null) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_RELATIVEPATH,resource.getRelativePath());
  }
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_DATE,resource.getCreationDate());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ISFILE,resource.isFile());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_SIZE,resource.getSize());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_NAME,resource.getName());
  if (resource.getAncestorsPaths() != null && !resource.getAncestorsPaths().isEmpty()) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ANCESTORS,resource.getAncestorsPaths());
  }
  return transferredResource;
}","public static SolrInputDocument transferredResourceToSolrDocument(TransferredResource resource) throws IOException {
  SolrInputDocument transferredResource=new SolrInputDocument();
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_UUID,UUID.nameUUIDFromBytes(resource.getId().getBytes()).toString());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ID,resource.getId());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_FULLPATH,resource.getFullPath());
  if (resource.getParentId() != null) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID,resource.getParentId());
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_PARENT_UUID,UUID.nameUUIDFromBytes(resource.getParentId().getBytes()).toString());
  }
  if (resource.getRelativePath() != null) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_RELATIVEPATH,resource.getRelativePath());
  }
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_DATE,resource.getCreationDate());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ISFILE,resource.isFile());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_SIZE,resource.getSize());
  transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_NAME,resource.getName());
  if (resource.getAncestorsPaths() != null && !resource.getAncestorsPaths().isEmpty()) {
    transferredResource.addField(RodaConstants.TRANSFERRED_RESOURCE_ANCESTORS,resource.getAncestorsPaths());
  }
  return transferredResource;
}",0.94954894754427
188726,"private static TransferredResource solrDocumentToTransferredResource(SolrDocument doc){
  TransferredResource tr=new TransferredResource();
  String id=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ID));
  String uuid=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_UUID));
  String fullPath=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_FULLPATH));
  String parentId=null;
  if (doc.containsKey(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID)) {
    parentId=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID));
  }
  String relativePath=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_RELATIVEPATH));
  Date d=objectToDate(doc.get(RodaConstants.TRANSFERRED_RESOURCE_DATE));
  if (d == null) {
    LOGGER.warn(""String_Node_Str"");
    d=new Date();
  }
  boolean isFile=objectToBoolean(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ISFILE));
  long size=objectToLong(doc.get(RodaConstants.TRANSFERRED_RESOURCE_SIZE),0L);
  String name=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_NAME));
  List<String> ancestorsPath=objectToListString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ANCESTORS));
  tr.setId(id);
  tr.setUUID(uuid);
  tr.setCreationDate(d);
  tr.setFullPath(fullPath);
  tr.setName(name);
  tr.setRelativePath(relativePath);
  tr.setSize(size);
  tr.setParentId(parentId);
  tr.setFile(isFile);
  tr.setAncestorsPaths(ancestorsPath);
  return tr;
}","private static TransferredResource solrDocumentToTransferredResource(SolrDocument doc){
  TransferredResource tr=new TransferredResource();
  String id=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ID));
  String uuid=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_UUID));
  String fullPath=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_FULLPATH));
  String parentId=null;
  String parentUUID=null;
  if (doc.containsKey(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID)) {
    parentId=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_PARENT_ID));
    parentUUID=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_PARENT_UUID));
  }
  String relativePath=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_RELATIVEPATH));
  Date d=objectToDate(doc.get(RodaConstants.TRANSFERRED_RESOURCE_DATE));
  if (d == null) {
    LOGGER.warn(""String_Node_Str"");
    d=new Date();
  }
  boolean isFile=objectToBoolean(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ISFILE));
  long size=objectToLong(doc.get(RodaConstants.TRANSFERRED_RESOURCE_SIZE),0L);
  String name=objectToString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_NAME));
  List<String> ancestorsPath=objectToListString(doc.get(RodaConstants.TRANSFERRED_RESOURCE_ANCESTORS));
  tr.setId(id);
  tr.setUUID(uuid);
  tr.setCreationDate(d);
  tr.setFullPath(fullPath);
  tr.setName(name);
  tr.setRelativePath(relativePath);
  tr.setSize(size);
  tr.setParentId(parentId);
  tr.setParentUUID(parentUUID);
  tr.setFile(isFile);
  tr.setAncestorsPaths(ancestorsPath);
  return tr;
}",0.9308050565535596
188727,"@Override public void onKeyPress(KeyPressEvent event){
  char keyCode=event.getCharCode();
  if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
    ((TextBox)event.getSource()).cancelKey();
  }
}","@Override public void onKeyPress(KeyPressEvent event){
  char keyCode=event.getCharCode();
  if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
    ((TextBox)event.getSource()).cancelKey();
  }
}",0.967032967032967
188728,"/** 
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 */
public GroupDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect){
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      GroupDataPanel.this.onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  groupname.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      char keyCode=event.getCharCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  groupname.addChangeHandler(changeHandler);
  groupname.addKeyUpHandler(keyUpHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}","/** 
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 */
public GroupDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect){
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      GroupDataPanel.this.onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  groupname.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      char keyCode=event.getCharCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  groupname.addChangeHandler(changeHandler);
  groupname.addKeyUpHandler(keyUpHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}",0.989133059647428
188729,"@Override public void onKeyPress(KeyPressEvent event){
  char keyCode=event.getCharCode();
  if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
    ((TextBox)event.getSource()).cancelKey();
  }
}","@Override public void onKeyPress(KeyPressEvent event){
  char keyCode=event.getCharCode();
  if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
    ((TextBox)event.getSource()).cancelKey();
  }
}",0.967032967032967
188730,"/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 * @param enablePermissions
 */
public UserDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect,boolean enablePermissions){
  password=new PasswordPanel(editmode);
  MultiWordSuggestOracle nationalityOracle=new MultiWordSuggestOracle();
  List<String> nationalityList=Arrays.asList(constants.nationalityList());
  nationalityOracle.addAll(nationalityList);
  nationality=new SuggestBox(nationalityOracle);
  MultiWordSuggestOracle countryOracle=new MultiWordSuggestOracle();
  List<String> countryList=Arrays.asList(constants.countryList());
  countryOracle.addAll(countryList);
  country=new SuggestBox(countryOracle);
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  permissionsSelectPanel.setVisible(enablePermissions);
  businessCategory.setVisibleItemCount(1);
  for (  String function : constants.getJobFunctions()) {
    businessCategory.addItem(function);
  }
  idType.setVisibleItemCount(1);
  for (  String type : User.ID_TYPES) {
    String typeText;
    try {
      typeText=constants.getString(""String_Node_Str"" + type);
    }
 catch (    MissingResourceException e) {
      typeText=type;
    }
    idType.addItem(typeText,type);
  }
  DefaultFormat dateFormat=new DateBox.DefaultFormat(DateTimeFormat.getFormat(""String_Node_Str""));
  idDate.setFormat(dateFormat);
  idDate.getDatePicker().setYearArrowsVisible(true);
  idDate.setFireNullValues(true);
  ValueChangeHandler<String> valueChangedHandler=new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      onChange();
    }
  }
;
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      UserDataPanel.this.onChange();
    }
  }
;
  SelectionHandler<Suggestion> selectionHandler=new SelectionHandler<Suggestion>(){
    @Override public void onSelection(    SelectionEvent<Suggestion> event){
      onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  username.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      char keyCode=event.getCharCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  username.addChangeHandler(changeHandler);
  username.addKeyUpHandler(keyUpHandler);
  password.addValueChangeHandler(valueChangedHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  businessCategory.addChangeHandler(changeHandler);
  idType.addChangeHandler(changeHandler);
  idNumber.addChangeHandler(changeHandler);
  idNumber.addKeyUpHandler(keyUpHandler);
  idDate.addValueChangeHandler(new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> event){
      onChange();
    }
  }
);
  idLocality.addChangeHandler(changeHandler);
  idLocality.addKeyUpHandler(keyUpHandler);
  nationality.addValueChangeHandler(valueChangedHandler);
  nationality.addSelectionHandler(selectionHandler);
  nationality.addKeyUpHandler(keyUpHandler);
  nif.addChangeHandler(changeHandler);
  email.addChangeHandler(changeHandler);
  email.addKeyUpHandler(keyUpHandler);
  postalAddress.addChangeHandler(changeHandler);
  postalCode.addChangeHandler(changeHandler);
  locality.addChangeHandler(changeHandler);
  country.addValueChangeHandler(valueChangedHandler);
  country.addSelectionHandler(selectionHandler);
  country.addKeyUpHandler(keyUpHandler);
  phoneNumber.addChangeHandler(changeHandler);
  fax.addChangeHandler(changeHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}","/** 
 * Create a new user data panel
 * @param visible
 * @param editmode
 * @param enableGroupSelect
 * @param enablePermissions
 */
public UserDataPanel(boolean visible,boolean editmode,boolean enableGroupSelect,boolean enablePermissions){
  password=new PasswordPanel(editmode);
  MultiWordSuggestOracle nationalityOracle=new MultiWordSuggestOracle();
  List<String> nationalityList=Arrays.asList(constants.nationalityList());
  nationalityOracle.addAll(nationalityList);
  nationality=new SuggestBox(nationalityOracle);
  MultiWordSuggestOracle countryOracle=new MultiWordSuggestOracle();
  List<String> countryList=Arrays.asList(constants.countryList());
  countryOracle.addAll(countryList);
  country=new SuggestBox(countryOracle);
  groupSelect=new GroupSelect(enableGroupSelect);
  initWidget(uiBinder.createAndBindUi(this));
  this.editmode=editmode;
  super.setVisible(visible);
  this.enableGroupSelect=enableGroupSelect;
  groupSelectPanel.setVisible(enableGroupSelect);
  permissionsSelectPanel.setVisible(enablePermissions);
  businessCategory.setVisibleItemCount(1);
  for (  String function : constants.getJobFunctions()) {
    businessCategory.addItem(function);
  }
  idType.setVisibleItemCount(1);
  for (  String type : User.ID_TYPES) {
    String typeText;
    try {
      typeText=constants.getString(""String_Node_Str"" + type);
    }
 catch (    MissingResourceException e) {
      typeText=type;
    }
    idType.addItem(typeText,type);
  }
  DefaultFormat dateFormat=new DateBox.DefaultFormat(DateTimeFormat.getFormat(""String_Node_Str""));
  idDate.setFormat(dateFormat);
  idDate.getDatePicker().setYearArrowsVisible(true);
  idDate.setFireNullValues(true);
  ValueChangeHandler<String> valueChangedHandler=new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      onChange();
    }
  }
;
  ChangeHandler changeHandler=new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      UserDataPanel.this.onChange();
    }
  }
;
  SelectionHandler<Suggestion> selectionHandler=new SelectionHandler<Suggestion>(){
    @Override public void onSelection(    SelectionEvent<Suggestion> event){
      onChange();
    }
  }
;
  KeyUpHandler keyUpHandler=new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      onChange();
    }
  }
;
  username.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent event){
      char keyCode=event.getCharCode();
      if (!(keyCode >= '0' && keyCode <= '9') && !(keyCode >= 'A' && keyCode <= 'Z') && !(keyCode >= 'a' && keyCode <= 'z')&& keyCode != '.' && keyCode != '_' && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_DELETE) && (keyCode != (char)KeyCodes.KEY_ENTER) && (keyCode != (char)KeyCodes.KEY_HOME) && (keyCode != (char)KeyCodes.KEY_END) && (keyCode != (char)KeyCodes.KEY_LEFT) && (keyCode != (char)KeyCodes.KEY_UP) && (keyCode != (char)KeyCodes.KEY_RIGHT) && (keyCode != (char)KeyCodes.KEY_DOWN)) {
        ((TextBox)event.getSource()).cancelKey();
      }
    }
  }
);
  username.addChangeHandler(changeHandler);
  username.addKeyUpHandler(keyUpHandler);
  password.addValueChangeHandler(valueChangedHandler);
  fullname.addChangeHandler(changeHandler);
  fullname.addKeyUpHandler(keyUpHandler);
  businessCategory.addChangeHandler(changeHandler);
  idType.addChangeHandler(changeHandler);
  idNumber.addChangeHandler(changeHandler);
  idNumber.addKeyUpHandler(keyUpHandler);
  idDate.addValueChangeHandler(new ValueChangeHandler<Date>(){
    @Override public void onValueChange(    ValueChangeEvent<Date> event){
      onChange();
    }
  }
);
  idLocality.addChangeHandler(changeHandler);
  idLocality.addKeyUpHandler(keyUpHandler);
  nationality.addValueChangeHandler(valueChangedHandler);
  nationality.addSelectionHandler(selectionHandler);
  nationality.addKeyUpHandler(keyUpHandler);
  nif.addChangeHandler(changeHandler);
  email.addChangeHandler(changeHandler);
  email.addKeyUpHandler(keyUpHandler);
  postalAddress.addChangeHandler(changeHandler);
  postalCode.addChangeHandler(changeHandler);
  locality.addChangeHandler(changeHandler);
  country.addValueChangeHandler(valueChangedHandler);
  country.addSelectionHandler(selectionHandler);
  country.addKeyUpHandler(keyUpHandler);
  phoneNumber.addChangeHandler(changeHandler);
  fax.addChangeHandler(changeHandler);
  permissionsPanel.addValueChangeHandler(new ValueChangeHandler<List<String>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<String>> event){
      onChange();
    }
  }
);
  groupSelect.addValueChangeHandler(new ValueChangeHandler<List<Group>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Group>> event){
      updatePermissions(event.getValue());
      onChange();
    }
  }
);
}",0.9953756037406228
188731,"public static <T extends Serializable>IndexResult<T> find(SolrClient index,Class<T> classToRetrieve,Filter filter,Sorter sorter,Sublist sublist,Facets facets,RodaUser user,boolean showInactive) throws GenericException, RequestNotValidException {
  IndexResult<T> ret;
  SolrQuery query=new SolrQuery();
  String queryString=parseFilter(filter);
  query.setQuery(queryString);
  query.setSorts(parseSorter(sorter));
  query.setStart(sublist.getFirstElementIndex());
  query.setRows(sublist.getMaximumElementCount());
  parseAndConfigureFacets(facets,query);
  if (hasPermissionFilters(classToRetrieve)) {
    query.setFilterQueries(getFilterQueries(user,showInactive));
  }
  try {
    QueryResponse response=index.query(getIndexName(classToRetrieve),query);
    ret=queryResponseToIndexResult(response,classToRetrieve,facets);
  }
 catch (  SolrServerException|IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  return ret;
}","public static <T extends Serializable>IndexResult<T> find(SolrClient index,Class<T> classToRetrieve,Filter filter,Sorter sorter,Sublist sublist,Facets facets,RodaUser user,boolean showInactive) throws GenericException, RequestNotValidException {
  IndexResult<T> ret;
  SolrQuery query=new SolrQuery();
  String queryString=parseFilter(filter);
  query.setQuery(queryString);
  query.setSorts(parseSorter(sorter));
  query.setStart(sublist.getFirstElementIndex());
  query.setRows(sublist.getMaximumElementCount());
  parseAndConfigureFacets(facets,query);
  if (hasPermissionFilters(classToRetrieve)) {
    query.addFilterQuery(getFilterQueries(user,showInactive));
  }
  try {
    QueryResponse response=index.query(getIndexName(classToRetrieve),query);
    ret=queryResponseToIndexResult(response,classToRetrieve,facets);
  }
 catch (  SolrServerException|IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  return ret;
}",0.9947312961011592
188732,"private BasicSearch(){
  facetDescriptionLevels=new FlowPanel();
  facetHasRepresentations=new FlowPanel();
  searchInputListBox=new Dropdown();
  searchAdvancedFieldOptions=new ListBox();
  initWidget(uiBinder.createAndBindUi(this));
  searchDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  searchInputListBox.setLabel(messages.searchListBoxItems());
  searchInputListBox.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_LIST_BOX_ITEMS);
  searchInputListBox.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_LIST_BOX_REPRESENTATIONS);
  searchInputListBox.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_LIST_BOX_FILES);
  searchInputListBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      if (searchInputListBox.getSelectedValue().equals(RodaConstants.SEARCH_LIST_BOX_ITEMS)) {
        showSearchAdvancedFieldsPanel();
      }
 else       if (searchInputListBox.getSelectedValue().equals(RodaConstants.SEARCH_LIST_BOX_REPRESENTATIONS)) {
        showRepresentationsSearchAdvancedFieldsPanel();
      }
 else {
        showFilesSearchAdvancedFieldsPanel();
      }
      doSearch();
    }
  }
);
  searchInputListBox.addPopupStyleName(""String_Node_Str"");
  searchInputBox.getElement().setPropertyString(""String_Node_Str"",messages.searchPlaceHolder());
  searchAdvancedPanel.setVisible(false);
  searchInputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      doSearch();
    }
  }
);
  searchInputButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      doSearch();
    }
  }
);
  searchAdvancedDisclosureButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      showSearchAdvancedPanel();
    }
  }
);
  BrowserService.Util.getInstance().getSearchFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SearchField>>(){
    @Override public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    List<SearchField> searchFields){
      BasicSearch.this.searchFields.clear();
      for (      SearchField searchField : searchFields) {
        ListboxUtils.insertItemByAlphabeticOrder(searchAdvancedFieldOptions,searchField.getLabel(),searchField.getId());
        BasicSearch.this.searchFields.put(searchField.getId(),searchField);
      }
      for (      SearchField searchField : searchFields) {
        if (searchField.isFixed()) {
          SearchFieldPanel searchFieldPanel=new SearchFieldPanel();
          searchFieldPanel.setSearchAdvancedFields(searchAdvancedFieldOptions);
          searchFieldPanel.setSearchFields(BasicSearch.this.searchFields);
          addSearchFieldPanel(searchFieldPanel);
          searchFieldPanel.selectSearchField(searchField.getId());
        }
      }
    }
  }
);
  createRepresentationsSearchAdvancedFieldsPanel();
  createFilesSearchAdvancedFieldsPanel();
  showSearchAdvancedFieldsPanel();
}","private BasicSearch(){
  facetDescriptionLevels=new FlowPanel();
  facetHasRepresentations=new FlowPanel();
  facetFormats=new FlowPanel();
  facetPronoms=new FlowPanel();
  facetMimetypes=new FlowPanel();
  searchInputListBox=new Dropdown();
  searchAdvancedFieldOptions=new ListBox();
  initWidget(uiBinder.createAndBindUi(this));
  searchDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  searchInputListBox.setLabel(messages.searchListBoxItems());
  searchInputListBox.addItem(messages.searchListBoxItems(),RodaConstants.SEARCH_LIST_BOX_ITEMS);
  searchInputListBox.addItem(messages.searchListBoxRepresentations(),RodaConstants.SEARCH_LIST_BOX_REPRESENTATIONS);
  searchInputListBox.addItem(messages.searchListBoxFiles(),RodaConstants.SEARCH_LIST_BOX_FILES);
  searchInputListBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      if (searchInputListBox.getSelectedValue().equals(RodaConstants.SEARCH_LIST_BOX_ITEMS)) {
        showSearchAdvancedFieldsPanel();
      }
 else       if (searchInputListBox.getSelectedValue().equals(RodaConstants.SEARCH_LIST_BOX_REPRESENTATIONS)) {
        showRepresentationsSearchAdvancedFieldsPanel();
      }
 else {
        showFilesSearchAdvancedFieldsPanel();
      }
      doSearch();
    }
  }
);
  searchInputListBox.addPopupStyleName(""String_Node_Str"");
  searchInputBox.getElement().setPropertyString(""String_Node_Str"",messages.searchPlaceHolder());
  searchAdvancedPanel.setVisible(false);
  searchInputBox.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      doSearch();
    }
  }
);
  searchInputButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      doSearch();
    }
  }
);
  searchAdvancedDisclosureButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      showSearchAdvancedPanel();
    }
  }
);
  BrowserService.Util.getInstance().getSearchFields(LocaleInfo.getCurrentLocale().getLocaleName(),new AsyncCallback<List<SearchField>>(){
    @Override public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    List<SearchField> searchFields){
      BasicSearch.this.searchFields.clear();
      for (      SearchField searchField : searchFields) {
        ListboxUtils.insertItemByAlphabeticOrder(searchAdvancedFieldOptions,searchField.getLabel(),searchField.getId());
        BasicSearch.this.searchFields.put(searchField.getId(),searchField);
      }
      for (      SearchField searchField : searchFields) {
        if (searchField.isFixed()) {
          SearchFieldPanel searchFieldPanel=new SearchFieldPanel();
          searchFieldPanel.setSearchAdvancedFields(searchAdvancedFieldOptions);
          searchFieldPanel.setSearchFields(BasicSearch.this.searchFields);
          addSearchFieldPanel(searchFieldPanel);
          searchFieldPanel.selectSearchField(searchField.getId());
        }
      }
    }
  }
);
  createRepresentationsSearchAdvancedFieldsPanel();
  createFilesSearchAdvancedFieldsPanel();
  showSearchAdvancedFieldsPanel();
}",0.9847161572052402
188733,"/** 
 * Returns an instance of the   {@link Plugin} with the specified ID(classname).
 * @param pluginID the ID (classname) of the  {@link Plugin}.
 * @return a {@link Plugin} or <code>null</code> if the specified classname ifnot a  {@link Plugin}.
 */
public Plugin<?> getPlugin(String pluginID){
  Plugin<?> plugin=null;
  if (internalPluginChache.get(pluginID) != null) {
    plugin=internalPluginChache.get(pluginID).cloneMe();
  }
  boolean internalPluginTakesPrecedence=RodaCoreFactory.getRodaConfiguration().getBoolean(""String_Node_Str"");
  if (plugin == null || !internalPluginTakesPrecedence) {
    for (    JarPlugin jarPlugin : this.jarPluginCache.values()) {
      if (jarPlugin.plugin != null && jarPlugin.plugin.getClass().getName().equals(pluginID)) {
        plugin=jarPlugin.plugin.cloneMe();
        break;
      }
    }
  }
  return plugin;
}","public <T extends Serializable>Plugin<T> getPlugin(String pluginID,Class<T> pluginClass){
  return (Plugin<T>)getPlugin(pluginID);
}",0.1591137965760322
188734,"@Override public List<Report> runPluginOnTransferredResources(Plugin<TransferredResource> plugin,List<TransferredResource> resources){
  try {
    LOGGER.info(""String_Node_Str"",plugin.getName());
    int multiplier=0;
    plugin.beforeExecute(index,model,storage);
    List<Future<Object>> futures=new ArrayList<Future<Object>>();
    List<TransferredResource> block=new ArrayList<TransferredResource>();
    for (    TransferredResource resource : resources) {
      if (block.size() == BLOCK_SIZE) {
        futures.add(Patterns.ask(workersRouter,new PluginMessage<TransferredResource>(block,plugin),DEFAULT_TIMEOUT));
        block=new ArrayList<TransferredResource>();
        multiplier++;
      }
      block.add(resource);
    }
    if (!block.isEmpty()) {
      futures.add(Patterns.ask(workersRouter,new PluginMessage<TransferredResource>(block,plugin),DEFAULT_TIMEOUT));
      multiplier++;
    }
    final Future<Iterable<Object>> sequenceResult=Futures.sequence(futures,workersSystem.dispatcher());
    Iterable<Object> reports=Await.result(sequenceResult,Duration.create(multiplier * TIMEOUT,TIMEOUT_UNIT));
    plugin.afterExecute(index,model,storage);
    LOGGER.info(""String_Node_Str"",plugin.getName());
    return mapToReports(reports);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.info(""String_Node_Str"",plugin.getName());
  return null;
}","@Override public List<Report> runPluginOnTransferredResources(Plugin<TransferredResource> plugin,List<TransferredResource> resources){
  try {
    LOGGER.info(""String_Node_Str"",plugin.getName());
    int multiplier=0;
    List<Future<Object>> futures=new ArrayList<Future<Object>>();
    List<Plugin<TransferredResource>> innerPlugins=new ArrayList<>();
    Plugin<TransferredResource> innerPlugin;
    List<TransferredResource> block=new ArrayList<TransferredResource>();
    for (    TransferredResource resource : resources) {
      if (block.size() == BLOCK_SIZE) {
        innerPlugin=RodaCoreFactory.getPluginManager().getPlugin(plugin.getClass().getCanonicalName(),TransferredResource.class);
        innerPlugin.setParameterValues(plugin.getParameterValues());
        innerPlugins.add(innerPlugin);
        innerPlugin.beforeExecute(index,model,storage);
        futures.add(Patterns.ask(workersRouter,new PluginMessage<TransferredResource>(block,innerPlugin),DEFAULT_TIMEOUT));
        block=new ArrayList<TransferredResource>();
        multiplier++;
      }
      block.add(resource);
    }
    if (!block.isEmpty()) {
      innerPlugin=RodaCoreFactory.getPluginManager().getPlugin(plugin.getClass().getCanonicalName(),TransferredResource.class);
      innerPlugin.setParameterValues(plugin.getParameterValues());
      innerPlugins.add(innerPlugin);
      innerPlugin.beforeExecute(index,model,storage);
      futures.add(Patterns.ask(workersRouter,new PluginMessage<TransferredResource>(block,innerPlugin),DEFAULT_TIMEOUT));
      multiplier++;
    }
    final Future<Iterable<Object>> sequenceResult=Futures.sequence(futures,workersSystem.dispatcher());
    Iterable<Object> reports=Await.result(sequenceResult,Duration.create(multiplier * TIMEOUT,TIMEOUT_UNIT));
    for (    Plugin<TransferredResource> p : innerPlugins) {
      p.afterExecute(index,model,storage);
    }
    LOGGER.info(""String_Node_Str"",plugin.getName());
    return mapToReports(reports);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  LOGGER.info(""String_Node_Str"",plugin.getName());
  return null;
}",0.7628278221208666
188735,"/** 
 * Performs a virus check on the specified path.
 * @param path a path to scan.
 * @return the results of the virus check as a {@link VirusCheckResult}.
 * @throws RuntimeException if some problem prevented the virus check from run a normal test.
 * @see AntiVirus
 */
public VirusCheckResult checkForVirus(Path path) throws RuntimeException {
  VirusCheckResult result=new VirusCheckResult();
  try {
    LOGGER.debug(""String_Node_Str"" + path.toString());
    String clamavBin=RodaCoreFactory.getRodaConfiguration().getString(""String_Node_Str"",""String_Node_Str"");
    String clamavParams=RodaCoreFactory.getRodaConfiguration().getString(""String_Node_Str"",""String_Node_Str"");
    ProcessBuilder processBuilder=new ProcessBuilder(clamavBin,clamavParams,path.toString());
    Process process=processBuilder.start();
    StringWriter outputWriter=new StringWriter();
    IOUtils.copy(process.getInputStream(),outputWriter);
    result.setReport(outputWriter.toString());
    int exitValue=process.waitFor();
switch (exitValue) {
case NO_VIRUS_FOUND:
      result.setClean(true);
    break;
default :
  result.setClean(false);
break;
}
}
 catch (IOException e) {
LOGGER.debug(""String_Node_Str"" + e.getMessage(),e);
throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
}
catch (InterruptedException e) {
LOGGER.debug(""String_Node_Str"" + e.getMessage(),e);
throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
}
return result;
}","/** 
 * Performs a virus check on the specified path.
 * @param path a path to scan.
 * @return the results of the virus check as a {@link VirusCheckResult}.
 * @throws RuntimeException if some problem prevented the virus check from run a normal test.
 * @see AntiVirus
 */
public VirusCheckResult checkForVirus(Path path) throws RuntimeException {
  VirusCheckResult result=new VirusCheckResult();
  try {
    LOGGER.debug(""String_Node_Str"",path);
    String clamavBin=RodaCoreFactory.getRodaConfiguration().getString(""String_Node_Str"",""String_Node_Str"");
    String clamavParams=RodaCoreFactory.getRodaConfiguration().getString(""String_Node_Str"",""String_Node_Str"");
    ProcessBuilder processBuilder=new ProcessBuilder(clamavBin,clamavParams,path.toString());
    Process process=processBuilder.start();
    StringWriter outputWriter=new StringWriter();
    IOUtils.copy(process.getInputStream(),outputWriter);
    result.setReport(outputWriter.toString());
    int exitValue=process.waitFor();
switch (exitValue) {
case NO_VIRUS_FOUND:
      result.setClean(true);
    break;
default :
  result.setClean(false);
break;
}
}
 catch (IOException e) {
LOGGER.debug(""String_Node_Str"" + e.getMessage(),e);
throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
}
catch (InterruptedException e) {
LOGGER.debug(""String_Node_Str"" + e.getMessage(),e);
throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
}
return result;
}",0.9920497753197371
188736,"private Map<String,Report> mergeReports(Map<String,Report> reports,Report plugin){
  if (plugin != null) {
    for (    Report reportItem : plugin.getReports()) {
      if (StringUtils.isNotBlank(reportItem.getOtherId())) {
        aipIdToTransferredResourceId.put(reportItem.getItemId(),reportItem.getOtherId());
        Report report=new Report();
        report.addReport(reportItem);
        reports.put(reportItem.getOtherId(),report);
      }
 else       if (StringUtils.isNotBlank(reportItem.getItemId()) && aipIdToTransferredResourceId.get(reportItem.getItemId()) != null) {
        reports.get(aipIdToTransferredResourceId.get(reportItem.getItemId())).addReport(reportItem);
      }
    }
  }
  return reports;
}","private Map<String,Report> mergeReports(Map<String,Report> reports,Map<String,String> aipIdToTransferredResourceId,Report plugin){
  if (plugin != null) {
    for (    Report reportItem : plugin.getReports()) {
      if (StringUtils.isNotBlank(reportItem.getOtherId())) {
        aipIdToTransferredResourceId.put(reportItem.getItemId(),reportItem.getOtherId());
        Report report=new Report();
        report.addReport(reportItem);
        reports.put(reportItem.getOtherId(),report);
      }
 else       if (StringUtils.isNotBlank(reportItem.getItemId()) && aipIdToTransferredResourceId.get(reportItem.getItemId()) != null) {
        reports.get(aipIdToTransferredResourceId.get(reportItem.getItemId())).addReport(reportItem);
      }
    }
  }
  return reports;
}",0.9677852348993288
188737,"private List<AIP> recalculateAIPsList(List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToObjectId){
  for (int i=0; i < aips.size(); i++) {
    AIP aip=aips.get(i);
    String transferredResourceId=aipIdToObjectId.get(aip.getId());
    Report report=reports.get(transferredResourceId);
    if (report.getPluginState() == PluginState.FAILURE) {
      aips.remove(i);
    }
  }
  return aips;
}","private List<AIP> recalculateAIPsList(List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToTransferredResourceId){
  for (int i=0; i < aips.size(); i++) {
    AIP aip=aips.get(i);
    String transferredResourceId=aipIdToTransferredResourceId.get(aip.getId());
    Report report=reports.get(transferredResourceId);
    if (report.getPluginState() == PluginState.FAILURE) {
      aips.remove(i);
    }
  }
  return aips;
}",0.9407582938388626
188738,"private List<AIP> getAIPsFromReports(IndexService index,ModelService model,StorageService storage,Map<String,Report> reports){
  List<AIP> aips=new ArrayList<>();
  List<String> aipIds=getAIPsIdsFromReport(reports);
  LOGGER.debug(""String_Node_Str"",aipIds);
  for (  String aipId : aipIds) {
    try {
      aips.add(model.retrieveAIP(aipId));
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return aips;
}","private List<AIP> getAIPsFromReports(IndexService index,ModelService model,StorageService storage,Map<String,Report> reports){
  List<AIP> aips=new ArrayList<>();
  List<String> aipIds=getAIPsIdsFromReport(reports);
  LOGGER.debug(""String_Node_Str"",aipIds);
  for (  String aipId : aipIds) {
    try {
      aips.add(model.retrieveAIP(aipId));
    }
 catch (    RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  LOGGER.debug(""String_Node_Str"");
  return aips;
}",0.962072155411656
188739,"private void createIngestEndedEvent(ModelService model,IndexService index,List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToObjectId){
  setPreservationEventType(END_TYPE);
  setPreservationSuccessMessage(END_SUCCESS);
  setPreservationFailureMessage(END_FAILURE);
  setPreservationEventDescription(END_DESCRIPTION);
  for (  AIP aip : aips) {
    try {
      boolean notify=true;
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",notify);
    }
 catch (    NotFoundException|RequestNotValidException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
      LOGGER.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","private void createIngestEndedEvent(ModelService model,IndexService index,List<AIP> aips,Map<String,Report> reports,Map<String,String> aipIdToTransferredResourceId){
  setPreservationEventType(END_TYPE);
  setPreservationSuccessMessage(END_SUCCESS);
  setPreservationFailureMessage(END_FAILURE);
  setPreservationEventDescription(END_DESCRIPTION);
  for (  AIP aip : aips) {
    try {
      boolean notify=true;
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,PluginState.SUCCESS,""String_Node_Str"",notify);
    }
 catch (    NotFoundException|RequestNotValidException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
      LOGGER.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.983142279163857
188740,"private void createIngestStartedEvent(ModelService model,IndexService index,Map<String,String> sipToAIP,Date startDate){
  setPreservationEventType(START_TYPE);
  setPreservationSuccessMessage(START_SUCCESS);
  setPreservationFailureMessage(START_FAILURE);
  setPreservationEventDescription(START_DESCRIPTION);
  for (  Map.Entry<String,String> entry : sipToAIP.entrySet()) {
    try {
      AIP aip=model.retrieveAIP(entry.getKey());
      TransferredResource tr=index.retrieve(TransferredResource.class,entry.getValue());
      boolean notify=true;
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,tr,PluginState.SUCCESS,""String_Node_Str"",notify,startDate);
    }
 catch (    NotFoundException|RequestNotValidException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
      LOGGER.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","private void createIngestStartedEvent(ModelService model,IndexService index,Map<String,String> aipIdToTransferredResourceId,Date startDate){
  setPreservationEventType(START_TYPE);
  setPreservationSuccessMessage(START_SUCCESS);
  setPreservationFailureMessage(START_FAILURE);
  setPreservationEventDescription(START_DESCRIPTION);
  for (  Map.Entry<String,String> entry : aipIdToTransferredResourceId.entrySet()) {
    try {
      AIP aip=model.retrieveAIP(entry.getKey());
      TransferredResource tr=index.retrieve(TransferredResource.class,entry.getValue());
      boolean notify=true;
      PluginHelper.createPluginEvent(this,aip.getId(),model,index,tr,PluginState.SUCCESS,""String_Node_Str"",notify,startDate);
    }
 catch (    NotFoundException|RequestNotValidException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
      LOGGER.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.9608695652173912
188741,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<TransferredResource> resources) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  Report pluginReport;
  Map<String,Report> reports=new HashMap<>();
  aipIdToTransferredResourceId=new HashMap<>();
  Date startDate=new Date();
  String parentId=PluginHelper.getStringFromParameters(this,PARAMETER_PARENT_ID);
  boolean forceParentId=PluginHelper.getBooleanFromParameters(this,PARAMETER_FORCE_PARENT_ID);
  getParameterValues().put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,parentId);
  getParameterValues().put(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,forceParentId ? ""String_Node_Str"" : ""String_Node_Str"");
  pluginReport=transformTransferredResourceIntoAnAIP(index,model,storage,resources);
  reports=mergeReports(reports,pluginReport);
  List<AIP> aips=getAIPsFromReports(index,model,storage,reports);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  createIngestStartedEvent(model,index,aipIdToTransferredResourceId,startDate);
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_VIRUS_CHECK)) {
    pluginReport=doVirusCheck(index,model,storage,aips);
    reports=mergeReports(reports,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
    aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_PDFTOPDFA_CONVERSION)) {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    pluginReport=doPDFtoPDFAConversion(index,model,storage,aips,params);
    reports=mergeReports(reports,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_VERAPDF_CHECK)) {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    pluginReport=doVeraPDFCheck(index,model,storage,aips,params);
    reports=mergeReports(reports,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  pluginReport=createPremisSkeleton(index,model,storage,aips);
  reports=mergeReports(reports,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  pluginReport=verifyIfAipIsWellFormed(index,model,storage,aips);
  reports=mergeReports(reports,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  pluginReport=verifyProducerAuthorization(index,model,storage,aips);
  reports=mergeReports(reports,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_FILE_FORMAT_IDENTIFICATION)) {
    pluginReport=doFileFormatIdentification(index,model,storage,aips);
    reports=mergeReports(reports,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_METADATA_AND_FULL_TEXT_EXTRACTION)) {
    pluginReport=doMetadataAndFullTextExtraction(index,model,storage,aips);
    reports=mergeReports(reports,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_AUTO_ACCEPT)) {
    pluginReport=doAutoAccept(index,model,storage,aips);
    reports=mergeReports(reports,pluginReport);
  }
  createIngestEndedEvent(model,index,aips,reports,aipIdToTransferredResourceId);
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<TransferredResource> resources) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  Report pluginReport;
  Map<String,Report> reports=new HashMap<>();
  aipIdToTransferredResourceId=new HashMap<>();
  Date startDate=new Date();
  String parentId=PluginHelper.getStringFromParameters(this,PARAMETER_PARENT_ID);
  boolean forceParentId=PluginHelper.getBooleanFromParameters(this,PARAMETER_FORCE_PARENT_ID);
  getParameterValues().put(RodaConstants.PLUGIN_PARAMS_PARENT_ID,parentId);
  getParameterValues().put(RodaConstants.PLUGIN_PARAMS_FORCE_PARENT_ID,forceParentId ? ""String_Node_Str"" : ""String_Node_Str"");
  pluginReport=transformTransferredResourceIntoAnAIP(index,model,storage,resources);
  reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
  List<AIP> aips=getAIPsFromReports(index,model,storage,reports);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  createIngestStartedEvent(model,index,aipIdToTransferredResourceId,startDate);
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_VIRUS_CHECK)) {
    pluginReport=doVirusCheck(index,model,storage,aips);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
    aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_PDFTOPDFA_CONVERSION)) {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    pluginReport=doPDFtoPDFAConversion(index,model,storage,aips,params);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_VERAPDF_CHECK)) {
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    pluginReport=doVeraPDFCheck(index,model,storage,aips,params);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  pluginReport=createPremisSkeleton(index,model,storage,aips);
  reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  pluginReport=verifyIfAipIsWellFormed(index,model,storage,aips);
  reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  pluginReport=verifyProducerAuthorization(index,model,storage,aips);
  reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
  stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  aips=recalculateAIPsList(aips,reports,aipIdToTransferredResourceId);
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_FILE_FORMAT_IDENTIFICATION)) {
    pluginReport=doFileFormatIdentification(index,model,storage,aips);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_METADATA_AND_FULL_TEXT_EXTRACTION)) {
    pluginReport=doMetadataAndFullTextExtraction(index,model,storage,aips);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
    stepsCompleted=PluginHelper.updateJobStatus(this,index,model,stepsCompleted,totalSteps);
  }
  if (PluginHelper.verifyIfStepShouldBePerformed(this,PARAMETER_DO_AUTO_ACCEPT)) {
    pluginReport=doAutoAccept(index,model,storage,aips);
    reports=mergeReports(reports,aipIdToTransferredResourceId,pluginReport);
  }
  createIngestEndedEvent(model,index,aips,reports,aipIdToTransferredResourceId);
  return report;
}",0.9662712258664806
188742,"private Filter buildSearchFilter(String basicQuery,Filter defaultFilter,String allFilter,FlowPanel fieldsPanel){
  List<FilterParameter> parameters=new ArrayList<FilterParameter>();
  if (basicQuery != null && basicQuery.trim().length() > 0) {
    parameters.add(new BasicSearchFilterParameter(allFilter,basicQuery));
  }
  if (fieldsPanel != null && fieldsPanel.getParent() != null && fieldsPanel.getParent().isVisible()) {
    for (int i=0; i < fieldsPanel.getWidgetCount(); i++) {
      SearchFieldPanel searchAdvancedFieldPanel=(SearchFieldPanel)fieldsPanel.getWidget(i);
      FilterParameter filterParameter=searchAdvancedFieldPanel.getFilter();
      if (filterParameter != null) {
        parameters.add(filterParameter);
      }
    }
  }
  Filter filter;
  if (parameters.size() == 0) {
    filter=defaultFilter;
  }
 else {
    filter=new Filter(parameters);
  }
  return filter;
}","private Filter buildSearchFilter(String basicQuery,Filter defaultFilter,String allFilter,FlowPanel fieldsPanel,boolean defaultFilterIncremental){
  List<FilterParameter> parameters=new ArrayList<FilterParameter>();
  if (basicQuery != null && basicQuery.trim().length() > 0) {
    parameters.add(new BasicSearchFilterParameter(allFilter,basicQuery));
  }
  if (fieldsPanel != null && fieldsPanel.getParent() != null && fieldsPanel.getParent().isVisible()) {
    for (int i=0; i < fieldsPanel.getWidgetCount(); i++) {
      SearchFieldPanel searchAdvancedFieldPanel=(SearchFieldPanel)fieldsPanel.getWidget(i);
      FilterParameter filterParameter=searchAdvancedFieldPanel.getFilter();
      if (filterParameter != null) {
        parameters.add(filterParameter);
      }
    }
  }
  Filter filter;
  if (defaultFilterIncremental) {
    filter=new Filter(defaultFilter);
    filter.add(parameters);
  }
 else   if (parameters.size() == 0) {
    filter=defaultFilter;
  }
 else {
    filter=new Filter(parameters);
  }
  return filter;
}",0.9257913855734302
188743,"public void doSearch(){
  Filter filter=buildSearchFilter(searchInputBox.getText(),defaultFilter,allFilter,fieldsPanel);
  list.setFilter(filter);
}","public void doSearch(){
  Filter filter=buildSearchFilter(searchInputBox.getText(),defaultFilter,allFilter,fieldsPanel,defaultFilterIncremental);
  list.setFilter(filter);
}",0.9221183800623052
188744,"protected void view(){
  resource=null;
  ingestTransferTitle.setVisible(true);
  ingestTransferDescription.setVisible(true);
  HTML itemIconHtmlPanel=new HTML(TOP_ICON);
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(""String_Node_Str"");
  itemDates.setText(""String_Node_Str"");
  itemTitle.addStyleName(""String_Node_Str"");
  itemIcon.getParent().addStyleName(""String_Node_Str"");
  basicSearch.setVisible(true);
  transferredResourceList.setVisible(true);
  download.setVisible(false);
  transferredResourceList.setFilter(DEFAULT_FILTER);
  breadcrumb.setVisible(false);
  updateVisibles();
}","protected void view(){
  resource=null;
  ingestTransferTitle.setVisible(true);
  ingestTransferDescription.setVisible(true);
  HTML itemIconHtmlPanel=new HTML(TOP_ICON);
  itemIconHtmlPanel.addStyleName(""String_Node_Str"");
  itemIcon.setWidget(itemIconHtmlPanel);
  itemTitle.setText(""String_Node_Str"");
  itemDates.setText(""String_Node_Str"");
  itemTitle.addStyleName(""String_Node_Str"");
  itemIcon.getParent().addStyleName(""String_Node_Str"");
  basicSearch.setVisible(true);
  transferredResourceList.setVisible(true);
  download.setVisible(false);
  transferredResourceList.setFilter(DEFAULT_FILTER);
  basicSearch.setDefaultFilter(DEFAULT_FILTER);
  breadcrumb.setVisible(false);
  updateVisibles();
}",0.9648093841642228
188745,"private IngestTransfer(){
  Facets facets=null;
  transferredResourceList=new TransferredResourceList(DEFAULT_FILTER,facets,messages.ingestTransferList(),true);
  basicSearch=new BasicSearch(DEFAULT_FILTER,RodaConstants.TRANSFERRED_RESOURCE_NAME,messages.ingestTransferSearchPlaceHolder(),false,false);
  initWidget(uiBinder.createAndBindUi(this));
  ingestTransferDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  transferredResourceList.addValueChangeHandler(new ValueChangeHandler<IndexResult<TransferredResource>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<TransferredResource>> event){
      updateVisibles();
    }
  }
);
  transferredResourceList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      TransferredResource r=transferredResourceList.getSelectionModel().getSelectedObject();
      if (r != null) {
        basicSearch.clearSearchInputBox();
        Tools.newHistory(RESOLVER,getPathFromTransferredResourceId(r.getId()));
      }
    }
  }
);
  transferredResourceList.addCheckboxSelectionListener(new CheckboxSelectionListener<TransferredResource>(){
    @Override public void onSelectionChange(    SelectedItems<TransferredResource> selected){
      boolean empty=SelectedItemsUtils.isEmpty(selected);
      remove.setText(empty ? messages.ingestTransferButtonRemoveWholeFolder() : messages.ingestTransferButtonRemoveSelectedItems());
      startIngest.setText(empty ? messages.ingestTransferButtonIngestWholeFolder() : messages.ingestTransferButtonIngestSelectedItems());
      updateVisibles();
    }
  }
);
}","private IngestTransfer(){
  Facets facets=null;
  transferredResourceList=new TransferredResourceList(DEFAULT_FILTER,facets,messages.ingestTransferList(),true);
  basicSearch=new BasicSearch(DEFAULT_FILTER,RodaConstants.TRANSFERRED_RESOURCE_NAME,messages.ingestTransferSearchPlaceHolder(),false,false);
  basicSearch.setList(transferredResourceList);
  basicSearch.setDefaultFilterIncremental(true);
  initWidget(uiBinder.createAndBindUi(this));
  ingestTransferDescription.add(new HTMLWidgetWrapper(""String_Node_Str""));
  transferredResourceList.addValueChangeHandler(new ValueChangeHandler<IndexResult<TransferredResource>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<TransferredResource>> event){
      updateVisibles();
    }
  }
);
  transferredResourceList.getSelectionModel().addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      TransferredResource r=transferredResourceList.getSelectionModel().getSelectedObject();
      if (r != null) {
        basicSearch.clearSearchInputBox();
        Tools.newHistory(RESOLVER,getPathFromTransferredResourceId(r.getId()));
      }
    }
  }
);
  transferredResourceList.addCheckboxSelectionListener(new CheckboxSelectionListener<TransferredResource>(){
    @Override public void onSelectionChange(    SelectedItems<TransferredResource> selected){
      boolean empty=SelectedItemsUtils.isEmpty(selected);
      remove.setText(empty ? messages.ingestTransferButtonRemoveWholeFolder() : messages.ingestTransferButtonRemoveSelectedItems());
      startIngest.setText(empty ? messages.ingestTransferButtonIngestWholeFolder() : messages.ingestTransferButtonIngestSelectedItems());
      updateVisibles();
    }
  }
);
}",0.9717118693496646
188746,"private static void runPDFtoPDFAPlugin(){
  try {
    Plugin<AIP> plugin=new PdfToPdfaPlugin<AIP>();
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
    plugin.setParameterValues(params);
    getPluginOrchestrator().runPluginOnAIPs(plugin,Arrays.asList(aipId));
  }
 catch (  InvalidParameterException ipe) {
    LOGGER.error(ipe.getMessage(),ipe);
  }
}","private static void runPDFtoPDFAPlugin(){
  Plugin<AIP> plugin=new PdfToPdfaPlugin<AIP>();
  getPluginOrchestrator().runPluginOnAllAIPs(plugin);
}",0.4627831715210356
188747,"private void createEvent(List<File> alteredFiles,List<File> newFiles,String aipId,String newRepresentationID,ModelService model,String outputFormat,int pluginResultState,String detailExtension,boolean notify) throws PluginException {
  List<LinkingIdentifier> premisSourceFilesIdentifiers=new ArrayList<LinkingIdentifier>();
  List<LinkingIdentifier> premisTargetFilesIdentifiers=new ArrayList<LinkingIdentifier>();
  PluginState outcome=PluginState.SUCCESS;
  StringBuilder stringBuilder=new StringBuilder();
  if (alteredFiles.size() == 0) {
    stringBuilder.append(""String_Node_Str"");
  }
 else {
    for (    File file : alteredFiles) {
      premisSourceFilesIdentifiers.add(PluginHelper.getLinkingIdentifier(aipId,file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
    }
    for (    File file : newFiles) {
      premisTargetFilesIdentifiers.add(PluginHelper.getLinkingIdentifier(aipId,file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
    }
    stringBuilder.append(""String_Node_Str"" + outputFormat + ""String_Node_Str"");
  }
  if (pluginResultState == 0 || (pluginResultState == 2 && hasPartialSuccessOnOutcome() == false)) {
    outcome=PluginState.FAILURE;
    stringBuilder.setLength(0);
  }
  if (pluginResultState == 2 && hasPartialSuccessOnOutcome() == true) {
    outcome=PluginState.PARTIAL_SUCCESS;
  }
  try {
    PluginHelper.createPluginEvent(this,aipId,model,premisSourceFilesIdentifiers,premisTargetFilesIdentifiers,outcome,stringBuilder.toString(),notify);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(e.getMessage(),e);
  }
}","private void createEvent(List<File> alteredFiles,List<File> newFiles,String aipId,String newRepresentationID,ModelService model,String outputFormat,PluginState outcome,String detailExtension,boolean notify) throws PluginException {
  List<LinkingIdentifier> premisSourceFilesIdentifiers=new ArrayList<LinkingIdentifier>();
  List<LinkingIdentifier> premisTargetFilesIdentifiers=new ArrayList<LinkingIdentifier>();
  StringBuilder stringBuilder=new StringBuilder();
  if (alteredFiles.size() == 0) {
    stringBuilder.append(""String_Node_Str"");
  }
 else {
    for (    File file : alteredFiles) {
      premisSourceFilesIdentifiers.add(PluginHelper.getLinkingIdentifier(aipId,file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE));
    }
    for (    File file : newFiles) {
      premisTargetFilesIdentifiers.add(PluginHelper.getLinkingIdentifier(aipId,file.getRepresentationId(),file.getPath(),file.getId(),RodaConstants.PRESERVATION_LINKING_OBJECT_OUTCOME));
    }
    stringBuilder.append(""String_Node_Str"" + outputFormat + ""String_Node_Str"");
  }
  if (outcome == PluginState.FAILURE || (outcome == PluginState.PARTIAL_SUCCESS && hasPartialSuccessOnOutcome() == false)) {
    outcome=PluginState.FAILURE;
    stringBuilder.setLength(0);
  }
  try {
    PluginHelper.createPluginEvent(this,aipId,model,premisSourceFilesIdentifiers,premisTargetFilesIdentifiers,outcome,stringBuilder.toString(),notify);
  }
 catch (  RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(e.getMessage(),e);
  }
}",0.8688619295205083
188748,"private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    int pluginResultState=1;
    boolean notify=true;
    Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
    try {
      LOGGER.debug(""String_Node_Str"" + representation);
      boolean recursive=true;
      CloseableIterable<File> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      File file : allFiles) {
        LOGGER.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          List<String> applicableTo=getApplicableTo();
          List<String> convertableTo=getConvertableTo();
          Map<String,List<String>> pronomToExtension=getPronomToExtension();
          Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
          if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
            fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            try {
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              if (!newRepresentations.contains(newRepresentationID)) {
                LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File newFile=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(newFile);
              IOUtils.closeQuietly(directAccess);
              reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
            }
 catch (            CommandException e) {
              detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
              pluginResultState=2;
              reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ representation.getAipId());
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      report.addReport(reportItem);
      if (alteredFiles.size() > 0) {
        createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentationAfterConversion(index,model,storage,aipId,newRepresentationID,notifyReindex);
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException|ValidationException|InvalidParameterException|SAXException|TikaException|XmlException e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      report.addReport(reportItem);
    }
    LOGGER.debug(""String_Node_Str"" + representation.getId());
    boolean notifyEvent=false;
    createEvent(alteredFiles,newFiles,aipId,newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return report;
}","private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    PluginState pluginResultState=PluginState.SUCCESS;
    boolean notify=true;
    Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
    try {
      LOGGER.debug(""String_Node_Str"" + representation);
      boolean recursive=true;
      CloseableIterable<File> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      File file : allFiles) {
        LOGGER.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          List<String> applicableTo=getApplicableTo();
          List<String> convertableTo=getConvertableTo();
          Map<String,List<String>> pronomToExtension=getPronomToExtension();
          Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
          if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
            fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            try {
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              if (!newRepresentations.contains(newRepresentationID)) {
                LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File newFile=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(newFile);
              IOUtils.closeQuietly(directAccess);
              reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
            }
 catch (            CommandException e) {
              detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
              pluginResultState=PluginState.PARTIAL_SUCCESS;
              reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ representation.getAipId());
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      report.addReport(reportItem);
      if (alteredFiles.size() > 0) {
        createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentationAfterConversion(index,model,storage,aipId,newRepresentationID,notifyReindex);
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException|ValidationException|InvalidParameterException|SAXException|TikaException|XmlException e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=PluginState.FAILURE;
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      report.addReport(reportItem);
    }
    LOGGER.debug(""String_Node_Str"" + representation.getId());
    boolean notifyEvent=false;
    createEvent(alteredFiles,newFiles,aipId,newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return report;
}",0.992175572519084
188749,"private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      int pluginResultState=1;
      Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
      try {
        LOGGER.debug(""String_Node_Str"" + representation);
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            List<String> applicableTo=getApplicableTo();
            List<String> convertableTo=getConvertableTo();
            Map<String,List<String>> pronomToExtension=getPronomToExtension();
            Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
            if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
              fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              try {
                Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                if (!newRepresentations.contains(newRepresentationID)) {
                  LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
                reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
              }
 catch (              CommandException e) {
                detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
                pluginResultState=2;
                reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
                LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0) {
          createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=0;
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip.getId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
      report.addReport(reportItem);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentationAfterConversion(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      LOGGER.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return report;
}","private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      PluginState pluginResultState=PluginState.SUCCESS;
      Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
      try {
        LOGGER.debug(""String_Node_Str"" + representation);
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            List<String> applicableTo=getApplicableTo();
            List<String> convertableTo=getConvertableTo();
            Map<String,List<String>> pronomToExtension=getPronomToExtension();
            Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
            if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
              fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              try {
                Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                if (!newRepresentations.contains(newRepresentationID)) {
                  LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
                reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
              }
 catch (              CommandException e) {
                detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
                pluginResultState=PluginState.PARTIAL_SUCCESS;
                reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
                LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0) {
          createNewFilesOnRepresentation(storage,model,unchangedFiles,newRepresentationID,notify);
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=PluginState.FAILURE;
        reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip.getId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
      report.addReport(reportItem);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentationAfterConversion(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      LOGGER.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return report;
}",0.9923876717415522
188750,"private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list) throws PluginException {
  int pluginResultState=1;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<File>();
  String detailExtension=""String_Node_Str"";
  Report report=PluginHelper.createPluginReport(this);
  Report reportItem=null;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"" + file.getId());
      newRepresentationID=UUID.randomUUID().toString();
      reportItem=PluginHelper.createPluginReportItem(this,file.getId(),null);
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        List<String> convertableTo=getConvertableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
          fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            newFiles.add(f);
            aipSet.add(file.getAipId());
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
          }
 catch (          CommandException e) {
            detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
            pluginResultState=2;
            reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
          }
        }
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
    }
    boolean notifyEvent=false;
    createEvent(Arrays.asList(file),newFiles,file.getAipId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
    report.addReport(reportItem);
  }
  try {
    AbstractConvertPluginUtils.reIndexPlugins(model,aipSet);
  }
 catch (  Throwable e) {
    LOGGER.debug(""String_Node_Str"");
  }
  return report;
}","private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list) throws PluginException {
  PluginState pluginResultState=PluginState.SUCCESS;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<File>();
  String detailExtension=""String_Node_Str"";
  Report report=PluginHelper.createPluginReport(this);
  Report reportItem=null;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"" + file.getId());
      newRepresentationID=UUID.randomUUID().toString();
      reportItem=PluginHelper.createPluginReportItem(this,file.getId(),null);
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        List<String> convertableTo=getConvertableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (doPluginExecute(fileFormat,filePronom,fileMimetype,applicableTo,convertableTo,pronomToExtension,mimetypeToExtension)) {
          fileFormat=getNewFileFormat(fileFormat,filePronom,fileMimetype,applicableTo,pronomToExtension,mimetypeToExtension);
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            newFiles.add(f);
            aipSet.add(file.getAipId());
            reportItem.setPluginState(PluginState.SUCCESS).setPluginDetails(result);
          }
 catch (          CommandException e) {
            detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
            pluginResultState=PluginState.PARTIAL_SUCCESS;
            reportItem.setPluginState(PluginState.PARTIAL_SUCCESS).setPluginDetails(e.getMessage());
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
          }
        }
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=PluginState.FAILURE;
      reportItem.setPluginState(PluginState.FAILURE).setPluginDetails(e.getMessage());
    }
    boolean notifyEvent=false;
    createEvent(Arrays.asList(file),newFiles,file.getAipId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,notifyEvent);
    report.addReport(reportItem);
  }
  try {
    AbstractConvertPluginUtils.reIndexPlugins(model,aipSet);
  }
 catch (  Throwable e) {
    LOGGER.debug(""String_Node_Str"");
  }
  return report;
}",0.9903981264637002
188751,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  for (  AIP aip : list) {
    logger.debug(""String_Node_Str"" + aip.getId());
    for (    Representation representation : aip.getRepresentations()) {
      Map<String,Path> resourceList=new HashMap<>();
      Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
      int pluginResultState=1;
      try {
        logger.debug(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ aip.getId());
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          logger.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            if ((fileFormat.equalsIgnoreCase(""String_Node_Str"") || fileMimetype.equals(""String_Node_Str""))) {
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              Binary binary=storage.getBinary(fileStoragePath);
              logger.debug(""String_Node_Str"" + file.getId());
              Path veraPDFResult=VeraPDFPluginUtils.runVeraPDF(binary.getContent(),file.getId(),profile,hasFeatures);
              if (veraPDFResult != null) {
                reportItem.setPluginState(PluginState.SUCCESS);
                resourceList.put(file.getId(),veraPDFResult);
              }
 else {
                reportItem.setPluginState(PluginState.PARTIAL_SUCCESS);
                pluginResultState=2;
              }
            }
          }
 else {
            logger.debug(""String_Node_Str"" + file);
          }
        }
        IOUtils.closeQuietly(allFiles);
      }
 catch (      Throwable e) {
        logger.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        reportItem.setPluginState(PluginState.FAILURE);
        pluginResultState=0;
      }
      logger.debug(""String_Node_Str"" + representation.getId());
      createEvent(resourceList,aip,representation.getId(),model,pluginResultState);
      report.addReport(reportItem);
    }
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    for (    Representation representation : aip.getRepresentations()) {
      List<String> resourceList=new ArrayList<String>();
      Report reportItem=PluginHelper.createPluginReportItem(this,representation.getId(),null);
      PluginState pluginResultState=PluginState.SUCCESS;
      StringBuilder details=new StringBuilder();
      try {
        LOGGER.debug(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ aip.getId());
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            if ((fileFormat.equalsIgnoreCase(""String_Node_Str"") || fileMimetype.equals(""String_Node_Str""))) {
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + file.getId());
              Path veraPDFResult=VeraPDFPluginUtils.runVeraPDF(directAccess.getPath(),profile,hasFeatures);
              if (veraPDFResult != null) {
                ContentPayload payload=new FSPathContentPayload(veraPDFResult);
                InputStream inputStream=payload.createInputStream();
                String xmlReport=IOUtils.toString(inputStream,StandardCharsets.UTF_8);
                IOUtils.closeQuietly(inputStream);
                Pattern pattern=Pattern.compile(""String_Node_Str"");
                Matcher matcher=pattern.matcher(xmlReport);
                if (matcher.find()) {
                  resourceList.add(file.getId());
                  pluginResultState=PluginState.PARTIAL_SUCCESS;
                  details.append(xmlReport.substring(xmlReport.indexOf('\n') + 1));
                }
              }
 else {
                pluginResultState=PluginState.PARTIAL_SUCCESS;
              }
              IOUtils.closeQuietly(directAccess);
            }
          }
        }
        reportItem.setPluginState(pluginResultState);
        IOUtils.closeQuietly(allFiles);
      }
 catch (      Throwable e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=PluginState.FAILURE;
        reportItem.setPluginState(pluginResultState);
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      report.addReport(reportItem);
      createEvent(resourceList,aip,representation.getId(),model,pluginResultState,details);
    }
  }
  return report;
}",0.3264513852126345
188752,"private void createEvent(Map<String,Path> resourceList,AIP aip,String representationId,ModelService model,int state) throws PluginException {
  PluginState pluginState=PluginState.SUCCESS;
  String outcomeDetails=null;
  try {
    StringBuilder noteStringBuilder=new StringBuilder();
    StringBuilder detailsStringBuilder=new StringBuilder();
    noteStringBuilder.append(""String_Node_Str"");
    detailsStringBuilder.append(""String_Node_Str"");
    for (    String fileID : resourceList.keySet()) {
      Path veraPDFResult=resourceList.get(fileID);
      Binary b=(Binary)FSUtils.convertPathToResource(veraPDFResult.getParent(),veraPDFResult);
      XPath xpath=XPathFactory.newInstance().newXPath();
      InputStream inputStream=b.getContent().createInputStream();
      String xmlReport=IOUtils.toString(inputStream,StandardCharsets.UTF_8);
      InputSource inputSource=new InputSource(xmlReport);
      NodeList nodes=(NodeList)xpath.evaluate(""String_Node_Str"",inputSource,XPathConstants.NODESET);
      if (nodes.getLength() > 0) {
        noteStringBuilder.append(fileID + ""String_Node_Str"");
        detailsStringBuilder.append(xmlReport.substring(xmlReport.indexOf('\n') + 1));
        state=2;
      }
      IOUtils.closeQuietly(inputStream);
    }
    noteStringBuilder.setLength(noteStringBuilder.length() - 2);
    detailsStringBuilder.append(""String_Node_Str"");
    if (state == 1) {
      pluginState=PluginState.SUCCESS;
      noteStringBuilder.setLength(0);
      detailsStringBuilder.setLength(0);
    }
    if (state == 0 || (state == 2 && hasPartialSuccessOnOutcome == false)) {
      pluginState=PluginState.FAILURE;
      noteStringBuilder.setLength(0);
      detailsStringBuilder.setLength(0);
    }
    if (state == 2 && hasPartialSuccessOnOutcome == true) {
      pluginState=PluginState.PARTIAL_SUCCESS;
    }
    logger.debug(""String_Node_Str"" + representationId + ""String_Node_Str""+ aip.getId()+ ""String_Node_Str""+ pluginState.name()+ ""String_Node_Str"");
    outcomeDetails=noteStringBuilder.toString();
  }
 catch (  Throwable e) {
    pluginState=PluginState.FAILURE;
    outcomeDetails=e.getMessage();
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  boolean notify=false;
  try {
    PluginHelper.createPluginEvent(this,aip.getId(),model,Arrays.asList(PluginHelper.getLinkingIdentifier(aip.getId(),representationId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE)),null,pluginState,outcomeDetails,notify);
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|NotFoundException|GenericException|ValidationException|AlreadyExistsException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void createEvent(List<String> resourceList,AIP aip,String representationId,ModelService model,PluginState pluginState,StringBuilder details) throws PluginException {
  String outcomeDetails=null;
  try {
    StringBuilder noteStringBuilder=new StringBuilder();
    StringBuilder detailsStringBuilder=new StringBuilder();
    noteStringBuilder.append(""String_Node_Str"");
    detailsStringBuilder.append(""String_Node_Str"");
    for (    String fileID : resourceList) {
      noteStringBuilder.append(fileID + ""String_Node_Str"");
    }
    noteStringBuilder.setLength(noteStringBuilder.length() - 2);
    detailsStringBuilder.append(details);
    detailsStringBuilder.append(""String_Node_Str"");
    noteStringBuilder.append(detailsStringBuilder);
    if (pluginState == PluginState.SUCCESS)     noteStringBuilder.setLength(0);
    if (pluginState == PluginState.FAILURE || (pluginState == PluginState.PARTIAL_SUCCESS && hasPartialSuccessOnOutcome == false)) {
      pluginState=PluginState.FAILURE;
      noteStringBuilder.setLength(0);
    }
    outcomeDetails=noteStringBuilder.toString();
  }
 catch (  Throwable e) {
    pluginState=PluginState.FAILURE;
    outcomeDetails=e.getMessage();
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
  boolean notify=false;
  try {
    PluginHelper.createPluginEvent(this,aip.getId(),model,Arrays.asList(PluginHelper.getLinkingIdentifier(aip.getId(),representationId,RodaConstants.PRESERVATION_LINKING_OBJECT_SOURCE)),null,pluginState,outcomeDetails,notify);
  }
 catch (  AuthorizationDeniedException|RequestNotValidException|NotFoundException|GenericException|ValidationException|AlreadyExistsException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.3677742375967228
188753,"public static SolrInputDocument updateSolrDocument(SolrInputDocument doc,Binary premisBinary) throws GenericException {
  InputStream inputStream=null;
  try {
    inputStream=premisBinary.getContent().createInputStream();
    gov.loc.premis.v3.File premisFile=binaryToFile(inputStream);
    if (premisFile.getOriginalName() != null) {
      doc.setField(RodaConstants.FILE_ORIGINALNAME,premisFile.getOriginalName().getStringValue());
    }
    if (premisFile.getObjectCharacteristicsArray() != null && premisFile.getObjectCharacteristicsArray().length > 0) {
      ObjectCharacteristicsComplexType occt=premisFile.getObjectCharacteristicsArray(0);
      doc.setField(RodaConstants.FILE_SIZE,occt.getSize());
      if (occt.getFixityArray() != null && occt.getFixityArray().length > 0) {
        List<String> hashes=new ArrayList<>();
        for (        FixityComplexType fct : occt.getFixityArray()) {
          StringBuilder fixityPrint=new StringBuilder();
          fixityPrint.append(fct.getMessageDigest());
          fixityPrint.append(""String_Node_Str"");
          fixityPrint.append(fct.getMessageDigestAlgorithm());
          if (StringUtils.isNotBlank(fct.getMessageDigestOriginator().getStringValue())) {
            fixityPrint.append(""String_Node_Str"");
            fixityPrint.append(fct.getMessageDigestOriginator().getStringValue());
          }
          fixityPrint.append(""String_Node_Str"");
          hashes.add(fixityPrint.toString());
        }
        doc.addField(RodaConstants.FILE_HASH,hashes);
      }
      if (occt.getFormatArray() != null && occt.getFormatArray().length > 0) {
        FormatComplexType fct=occt.getFormatArray(0);
        if (fct.getFormatDesignation() != null) {
          doc.addField(RodaConstants.FILE_FILEFORMAT,fct.getFormatDesignation().getFormatName().getStringValue());
          doc.addField(RodaConstants.FILE_FORMAT_VERSION,fct.getFormatDesignation().getFormatVersion());
        }
        FormatRegistryComplexType pronomRegistry=getFormatRegistry(premisFile,RodaConstants.PRESERVATION_REGISTRY_PRONOM);
        if (pronomRegistry != null) {
          if (pronomRegistry.getFormatRegistryKey() != null) {
            doc.addField(RodaConstants.FILE_PRONOM,pronomRegistry.getFormatRegistryKey().getStringValue());
          }
        }
        FormatRegistryComplexType mimeRegistry=getFormatRegistry(premisFile,RodaConstants.PRESERVATION_REGISTRY_MIME);
        if (mimeRegistry != null) {
          if (mimeRegistry.getFormatRegistryKey() != null) {
            doc.addField(RodaConstants.FILE_FORMAT_MIMETYPE,mimeRegistry.getFormatRegistryKey().getStringValue());
          }
        }
      }
      if (occt.getCreatingApplicationArray() != null && occt.getCreatingApplicationArray().length > 0) {
        CreatingApplicationComplexType cact=occt.getCreatingApplicationArray(0);
        if (cact.getCreatingApplicationName() != null) {
          doc.addField(RodaConstants.FILE_CREATING_APPLICATION_NAME,cact.getCreatingApplicationName().getStringValue());
        }
        doc.addField(RodaConstants.FILE_CREATING_APPLICATION_VERSION,cact.getCreatingApplicationVersion());
        doc.addField(RodaConstants.FILE_DATE_CREATED_BY_APPLICATION,cact.getDateCreatedByApplication());
      }
    }
  }
 catch (  XmlException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return doc;
}","public static SolrInputDocument updateSolrDocument(SolrInputDocument doc,Binary premisBinary) throws GenericException {
  InputStream inputStream=null;
  try {
    inputStream=premisBinary.getContent().createInputStream();
    gov.loc.premis.v3.File premisFile=binaryToFile(inputStream);
    if (premisFile.getOriginalName() != null) {
      doc.setField(RodaConstants.FILE_ORIGINALNAME,premisFile.getOriginalName().getStringValue());
    }
    if (premisFile.getObjectCharacteristicsArray() != null && premisFile.getObjectCharacteristicsArray().length > 0) {
      ObjectCharacteristicsComplexType occt=premisFile.getObjectCharacteristicsArray(0);
      doc.setField(RodaConstants.FILE_SIZE,occt.getSize());
      if (occt.getFixityArray() != null && occt.getFixityArray().length > 0) {
        List<String> hashes=new ArrayList<>();
        for (        FixityComplexType fct : occt.getFixityArray()) {
          StringBuilder fixityPrint=new StringBuilder();
          fixityPrint.append(fct.getMessageDigest());
          fixityPrint.append(""String_Node_Str"");
          fixityPrint.append(fct.getMessageDigestAlgorithm().getStringValue());
          if (StringUtils.isNotBlank(fct.getMessageDigestOriginator().getStringValue())) {
            fixityPrint.append(""String_Node_Str"");
            fixityPrint.append(fct.getMessageDigestOriginator().getStringValue());
          }
          fixityPrint.append(""String_Node_Str"");
          hashes.add(fixityPrint.toString());
        }
        doc.addField(RodaConstants.FILE_HASH,hashes);
      }
      if (occt.getFormatArray() != null && occt.getFormatArray().length > 0) {
        FormatComplexType fct=occt.getFormatArray(0);
        if (fct.getFormatDesignation() != null) {
          doc.addField(RodaConstants.FILE_FILEFORMAT,fct.getFormatDesignation().getFormatName().getStringValue());
          doc.addField(RodaConstants.FILE_FORMAT_VERSION,fct.getFormatDesignation().getFormatVersion());
        }
        FormatRegistryComplexType pronomRegistry=getFormatRegistry(premisFile,RodaConstants.PRESERVATION_REGISTRY_PRONOM);
        if (pronomRegistry != null) {
          if (pronomRegistry.getFormatRegistryKey() != null) {
            doc.addField(RodaConstants.FILE_PRONOM,pronomRegistry.getFormatRegistryKey().getStringValue());
          }
        }
        FormatRegistryComplexType mimeRegistry=getFormatRegistry(premisFile,RodaConstants.PRESERVATION_REGISTRY_MIME);
        if (mimeRegistry != null) {
          if (mimeRegistry.getFormatRegistryKey() != null) {
            doc.addField(RodaConstants.FILE_FORMAT_MIMETYPE,mimeRegistry.getFormatRegistryKey().getStringValue());
          }
        }
      }
      if (occt.getCreatingApplicationArray() != null && occt.getCreatingApplicationArray().length > 0) {
        CreatingApplicationComplexType cact=occt.getCreatingApplicationArray(0);
        if (cact.getCreatingApplicationName() != null) {
          doc.addField(RodaConstants.FILE_CREATING_APPLICATION_NAME,cact.getCreatingApplicationName().getStringValue());
        }
        doc.addField(RodaConstants.FILE_CREATING_APPLICATION_VERSION,cact.getCreatingApplicationVersion());
        doc.addField(RodaConstants.FILE_DATE_CREATED_BY_APPLICATION,cact.getDateCreatedByApplication());
      }
    }
  }
 catch (  XmlException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
  }
  return doc;
}",0.9975186104218362
188754,"public Messages(Locale locale,Path folder){
  this.resourceBundle=ResourceBundle.getBundle(MESSAGES_BUNDLE,locale,new FolderBasedUTF8Control(folder));
}","public Messages(Locale locale,Path folder){
  this.resourceBundle=ResourceBundle.getBundle(MESSAGES_BUNDLE,locale,new FolderBasedUTF8Control(folder));
  this.translationsCache=new HashMap<String,Map<String,Object>>();
}",0.8194070080862533
188755,"/** 
 * prefix will be replaced by ""i18n."" for simplicity purposes
 */
public <T>Map<String,T> getTranslations(String prefix,Class<T> valueClass,boolean replacePrefixFromKey){
  Map<String,T> map=new HashMap<String,T>();
  Enumeration<String> keys=resourceBundle.getKeys();
  String fullPrefix=prefix + ""String_Node_Str"";
  while (keys.hasMoreElements()) {
    String key=keys.nextElement();
    if (key.startsWith(fullPrefix)) {
      map.put(replacePrefixFromKey ? key.replaceFirst(fullPrefix,""String_Node_Str"") : key,valueClass.cast(resourceBundle.getString(key)));
    }
  }
  return map;
}","/** 
 * prefix will be replaced by ""i18n."" for simplicity purposes
 */
public <T>Map<String,T> getTranslations(String prefix,Class<T> valueClass,boolean replacePrefixFromKey){
  if (translationsCache.get(prefix) != null) {
    return (Map<String,T>)translationsCache.get(prefix);
  }
  Map<String,T> map=new HashMap<String,T>();
  Enumeration<String> keys=resourceBundle.getKeys();
  String fullPrefix=prefix + ""String_Node_Str"";
  while (keys.hasMoreElements()) {
    String key=keys.nextElement();
    if (key.startsWith(fullPrefix)) {
      map.put(replacePrefixFromKey ? key.replaceFirst(fullPrefix,""String_Node_Str"") : key,valueClass.cast(resourceBundle.getString(key)));
    }
  }
  translationsCache.put(prefix,(Map<String,Object>)map);
  return map;
}",0.8632668144863267
188756,"private static String runDigitalSignatureVerifyOOXML(Path input) throws IOException, GeneralSecurityException {
  boolean isValid=true;
  try {
    OPCPackage pkg=OPCPackage.open(input.toString(),PackageAccess.READ);
    SignatureConfig sic=new SignatureConfig();
    sic.setOpcPackage(pkg);
    SignatureInfo si=new SignatureInfo();
    si.setSignatureConfig(sic);
    for (    SignaturePart sp : si.getSignatureParts()) {
      isValid=isValid && sp.validate();
      Set<Certificate> trustedRootCerts=new HashSet<Certificate>();
      Set<Certificate> intermediateCerts=new HashSet<Certificate>();
      List<X509Certificate> certChain=sp.getCertChain();
      for (      X509Certificate c : certChain) {
        c.checkValidity();
        if (DigitalSignaturePluginUtils.isCertificateSelfSigned(c))         trustedRootCerts.add(c);
 else         intermediateCerts.add(c);
      }
      verifyCertificateChain(trustedRootCerts,intermediateCerts,certChain.get(0));
    }
    pkg.close();
  }
 catch (  InvalidFormatException e) {
    return ""String_Node_Str"";
  }
catch (  CertificateExpiredException|CertificateNotYetValidException e) {
    return ""String_Node_Str"";
  }
catch (  CertPathBuilderException e) {
    return ""String_Node_Str"";
  }
  return isValid ? ""String_Node_Str"" : ""String_Node_Str"";
}","private static String runDigitalSignatureVerifyOOXML(Path input) throws IOException, GeneralSecurityException {
  boolean isValid=true;
  try {
    OPCPackage pkg=OPCPackage.open(input.toString(),PackageAccess.READ);
    SignatureConfig sic=new SignatureConfig();
    sic.setOpcPackage(pkg);
    SignatureInfo si=new SignatureInfo();
    si.setSignatureConfig(sic);
    Iterable<SignaturePart> it=si.getSignatureParts();
    if (it != null) {
      for (      SignaturePart sp : it) {
        isValid=isValid && sp.validate();
        Set<Certificate> trustedRootCerts=new HashSet<Certificate>();
        Set<Certificate> intermediateCerts=new HashSet<Certificate>();
        List<X509Certificate> certChain=sp.getCertChain();
        for (        X509Certificate c : certChain) {
          c.checkValidity();
          if (DigitalSignaturePluginUtils.isCertificateSelfSigned(c))           trustedRootCerts.add(c);
 else           intermediateCerts.add(c);
        }
        verifyCertificateChain(trustedRootCerts,intermediateCerts,certChain.get(0));
      }
    }
    pkg.close();
  }
 catch (  InvalidFormatException e) {
    return ""String_Node_Str"";
  }
catch (  CertificateExpiredException|CertificateNotYetValidException e) {
    return ""String_Node_Str"";
  }
catch (  CertPathBuilderException e) {
    return ""String_Node_Str"";
  }
  return isValid ? ""String_Node_Str"" : ""String_Node_Str"";
}",0.9390018484288356
188757,"private static void runDigitalSignatureStripOOXML(Path input,Path output) throws IOException, AlreadyExistsException, GenericException, InvalidFormatException {
  FSUtils.copy(input,output,true);
  OPCPackage pkg=OPCPackage.open(output.toString(),PackageAccess.READ_WRITE);
  String signatureContentType=""String_Node_Str"";
  String signatureRelType=""String_Node_Str"";
  ArrayList<PackagePart> pps=pkg.getPartsByContentType(signatureContentType);
  for (  PackagePart pp : pps) {
    pkg.removePart(pp);
  }
  ArrayList<PackagePart> ppct=pkg.getPartsByRelationshipType(signatureRelType);
  for (  PackagePart pp : ppct) {
    pkg.removePart(pp);
  }
  pkg.close();
}","private static void runDigitalSignatureStripOOXML(Path input,Path output) throws IOException, AlreadyExistsException, GenericException, InvalidFormatException {
  FSUtils.copy(input,output,true);
  OPCPackage pkg=OPCPackage.open(output.toString(),PackageAccess.READ_WRITE);
  ArrayList<PackagePart> pps=pkg.getPartsByContentType(SIGN_CONTENT_TYPE_OOXML);
  for (  PackagePart pp : pps) {
    pkg.removePart(pp);
  }
  ArrayList<PackagePart> ppct=pkg.getPartsByRelationshipType(SIGN_REL_TYPE_OOXML);
  for (  PackagePart pp : ppct) {
    pkg.removePart(pp);
  }
  for (  PackageRelationship r : pkg.getRelationships()) {
    if (r.getRelationshipType().equals(SIGN_REL_TYPE_OOXML)) {
      pkg.removeRelationship(r.getId());
    }
  }
  pkg.close();
}",0.4084805653710247
188758,"@UiHandler(""String_Node_Str"") void buttonCancelHandler(ClickEvent e){
  callback.onSuccess(false);
  hide();
}","@UiHandler(""String_Node_Str"") void buttonCancelHandler(ClickEvent e){
  hide();
}",0.8481675392670157
188759,"public static List<String> extractFilePathFromRepresentationPreservationMetadata(StoragePath path){
  String container=path.getContainerName();
  List<String> directoryPath=path.getDirectoryPath();
  if (container.equals(RodaConstants.STORAGE_CONTAINER_AIP) && directoryPath.size() > 4 && directoryPath.get(1).equals(RodaConstants.STORAGE_DIRECTORY_REPRESENTATIONS) && directoryPath.get(3).equals(RodaConstants.STORAGE_DIRECTORY_METADATA) && directoryPath.get(4).equals(RodaConstants.STORAGE_DIRECTORY_METADATA)) {
    return directoryPath.subList(5,directoryPath.size());
  }
 else {
    return null;
  }
}","public static List<String> extractFilePathFromRepresentationPreservationMetadata(StoragePath path){
  String container=path.getContainerName();
  List<String> directoryPath=path.getDirectoryPath();
  if (container.equals(RodaConstants.STORAGE_CONTAINER_AIP) && directoryPath.size() > 4 && directoryPath.get(1).equals(RodaConstants.STORAGE_DIRECTORY_REPRESENTATIONS) && directoryPath.get(3).equals(RodaConstants.STORAGE_DIRECTORY_METADATA) && directoryPath.get(4).equals(RodaConstants.STORAGE_DIRECTORY_PRESERVATION)) {
    return directoryPath.subList(5,directoryPath.size());
  }
 else {
    return null;
  }
}",0.9835796387520526
188760,"private static PreservationMetadata convertResourceToPreservationMetadata(Resource resource) throws RequestNotValidException {
  if (resource == null) {
    throw new RequestNotValidException(""String_Node_Str"");
  }
  StoragePath resourcePath=resource.getStoragePath();
  String filename=resourcePath.getName();
  PreservationMetadata pm=new PreservationMetadata();
  String id;
  String aipId=ModelUtils.extractAipId(resourcePath);
  String representationId=ModelUtils.extractRepresentationId(resourcePath);
  List<String> fileDirectoryPath=null;
  String fileId=null;
  PreservationMetadataType type;
  if (filename.endsWith(RodaConstants.PREMIS_AGENT_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_AGENT_SUFFIX.length());
    type=PreservationMetadataType.AGENT;
    aipId=null;
    representationId=null;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_EVENT_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_EVENT_SUFFIX.length());
    type=PreservationMetadataType.EVENT;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_FILE_SUFFIX)) {
    type=PreservationMetadataType.OBJECT_FILE;
    fileDirectoryPath=ModelUtils.extractFilePathFromRepresentationPreservationMetadata(resourcePath);
    fileId=filename.substring(0,filename.length() - RodaConstants.PREMIS_FILE_SUFFIX.length());
    id=fileId;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_REPRESENTATION_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_EVENT_SUFFIX.length());
    type=PreservationMetadataType.OBJECT_REPRESENTATION;
  }
 else {
    throw new RequestNotValidException(""String_Node_Str"" + filename);
  }
  pm.setId(id);
  pm.setAipId(aipId);
  pm.setRepresentationId(representationId);
  pm.setFileDirectoryPath(fileDirectoryPath);
  pm.setFileId(fileId);
  pm.setType(type);
  return pm;
}","private static PreservationMetadata convertResourceToPreservationMetadata(Resource resource) throws RequestNotValidException {
  if (resource == null) {
    throw new RequestNotValidException(""String_Node_Str"");
  }
  StoragePath resourcePath=resource.getStoragePath();
  String filename=resourcePath.getName();
  PreservationMetadata pm=new PreservationMetadata();
  String id;
  String aipId=ModelUtils.extractAipId(resourcePath);
  String representationId=ModelUtils.extractRepresentationId(resourcePath);
  List<String> fileDirectoryPath=null;
  String fileId=null;
  PreservationMetadataType type;
  if (filename.endsWith(RodaConstants.PREMIS_AGENT_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_AGENT_SUFFIX.length());
    type=PreservationMetadataType.AGENT;
    aipId=null;
    representationId=null;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_EVENT_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_EVENT_SUFFIX.length());
    type=PreservationMetadataType.EVENT;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_FILE_SUFFIX)) {
    type=PreservationMetadataType.OBJECT_FILE;
    fileDirectoryPath=ModelUtils.extractFilePathFromRepresentationPreservationMetadata(resourcePath);
    fileId=filename.substring(0,filename.length() - RodaConstants.PREMIS_FILE_SUFFIX.length());
    id=fileId;
  }
 else   if (filename.endsWith(RodaConstants.PREMIS_REPRESENTATION_SUFFIX)) {
    id=filename.substring(0,filename.length() - RodaConstants.PREMIS_REPRESENTATION_SUFFIX.length());
    type=PreservationMetadataType.OBJECT_REPRESENTATION;
  }
 else {
    throw new RequestNotValidException(""String_Node_Str"" + filename);
  }
  pm.setId(id);
  pm.setAipId(aipId);
  pm.setRepresentationId(representationId);
  pm.setFileDirectoryPath(fileDirectoryPath);
  pm.setFileId(fileId);
  pm.setType(type);
  return pm;
}",0.9965544659422212
188761,"public static StreamResponse aipsAipIdPreservationMetadataGet(String aipId,String start,String limit) throws GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException {
  List<Representation> representations=null;
  CloseableIterable<PreservationMetadata> preservationFiles=null;
  try {
    ModelService model=RodaCoreFactory.getModelService();
    StorageService storage=RodaCoreFactory.getStorageService();
    representations=model.retrieveAIP(aipId).getRepresentations();
    Pair<Integer,Integer> pagingParams=ApiUtils.processPagingParams(start,limit);
    int startInt=pagingParams.getFirst();
    int limitInt=pagingParams.getSecond();
    int counter=0;
    List<ZipEntryInfo> zipEntries=new ArrayList<ZipEntryInfo>();
    boolean includeRepresentations=true;
    preservationFiles=model.listPreservationMetadata(aipId,includeRepresentations);
    for (    PreservationMetadata preservationFile : preservationFiles) {
      if (counter >= startInt && (counter <= limitInt || limitInt == -1)) {
        StoragePath storagePath=ModelUtils.getPreservationMetadataStoragePath(preservationFile);
        Binary binary=storage.getBinary(storagePath);
        if (preservationFile.getRepresentationId() != null) {
          ZipEntryInfo info=new ZipEntryInfo(preservationFile.getRepresentationId() + File.separator + storagePath.getName(),binary.getContent());
          zipEntries.add(info);
        }
      }
 else {
        break;
      }
      counter++;
    }
    return createZipStreamResponse(zipEntries,aipId);
  }
  finally {
    IOUtils.closeQuietly(preservationFiles);
  }
}","public static StreamResponse aipsAipIdPreservationMetadataGet(String aipId,String start,String limit) throws GenericException, NotFoundException, RequestNotValidException, AuthorizationDeniedException {
  List<Representation> representations=null;
  CloseableIterable<PreservationMetadata> preservationFiles=null;
  try {
    ModelService model=RodaCoreFactory.getModelService();
    StorageService storage=RodaCoreFactory.getStorageService();
    representations=model.retrieveAIP(aipId).getRepresentations();
    Pair<Integer,Integer> pagingParams=ApiUtils.processPagingParams(start,limit);
    int startInt=pagingParams.getFirst();
    int limitInt=pagingParams.getSecond();
    int counter=0;
    List<ZipEntryInfo> zipEntries=new ArrayList<ZipEntryInfo>();
    boolean includeRepresentations=true;
    preservationFiles=model.listPreservationMetadata(aipId,includeRepresentations);
    for (    PreservationMetadata preservationFile : preservationFiles) {
      if (counter >= startInt && (counter <= limitInt || limitInt == -1)) {
        StoragePath storagePath=ModelUtils.getPreservationMetadataStoragePath(preservationFile);
        Binary binary=storage.getBinary(storagePath);
        if (preservationFile.getRepresentationId() != null) {
          ZipEntryInfo info=new ZipEntryInfo(preservationFile.getRepresentationId() + File.separator + StringUtils.join(storagePath.getDirectoryPath(),File.separator)+ File.separator+ storagePath.getName(),binary.getContent());
          zipEntries.add(info);
        }
      }
 else {
        break;
      }
      counter++;
    }
    return createZipStreamResponse(zipEntries,aipId);
  }
  finally {
    IOUtils.closeQuietly(preservationFiles);
  }
}",0.9756244357508276
188762,"@Override protected void getData(Sublist sublist,ColumnSortList columnSortList,AsyncCallback<IndexResult<Report>> callback){
  Filter filter=getFilter();
  Map<Column<Report,?>,String> columnSortingKeyMap=new HashMap<Column<Report,?>,String>();
  columnSortingKeyMap.put(objectIdColumn,RodaConstants.JOB_REPORT_OTHER_ID);
  columnSortingKeyMap.put(updatedDateColumn,RodaConstants.JOB_REPORT_DATE_UPDATE);
  columnSortingKeyMap.put(lastPluginRunColumn,RodaConstants.JOB_REPORT_PLUGIN);
  columnSortingKeyMap.put(lastPluginRunStateColumn,RodaConstants.JOB_REPORT_PLUGIN_STATE);
  Sorter sorter=createSorter(columnSortList,columnSortingKeyMap);
  BrowserService.Util.getInstance().find(JobReport.class.getName(),filter,sorter,sublist,getFacets(),LocaleInfo.getCurrentLocale().getLocaleName(),callback);
}","@Override protected void getData(Sublist sublist,ColumnSortList columnSortList,AsyncCallback<IndexResult<Report>> callback){
  Filter filter=getFilter();
  Map<Column<Report,?>,String> columnSortingKeyMap=new HashMap<Column<Report,?>,String>();
  columnSortingKeyMap.put(objectIdColumn,RodaConstants.JOB_REPORT_OTHER_ID);
  columnSortingKeyMap.put(updatedDateColumn,RodaConstants.JOB_REPORT_DATE_UPDATE);
  columnSortingKeyMap.put(lastPluginRunColumn,RodaConstants.JOB_REPORT_PLUGIN);
  columnSortingKeyMap.put(lastPluginRunStateColumn,RodaConstants.JOB_REPORT_PLUGIN_STATE);
  Sorter sorter=createSorter(columnSortList,columnSortingKeyMap);
  BrowserService.Util.getInstance().find(Report.class.getName(),filter,sorter,sublist,getFacets(),LocaleInfo.getCurrentLocale().getLocaleName(),callback);
}",0.874296435272045
188763,"@SuppressWarnings(""String_Node_Str"") private <T extends Serializable>Class<T> parseClass(String classNameToReturn) throws GenericException {
  Class<T> classToReturn;
  try {
    classToReturn=(Class<T>)Class.forName(classNameToReturn);
  }
 catch (  ClassNotFoundException e) {
    throw new GenericException(""String_Node_Str"" + classNameToReturn);
  }
  return classToReturn;
}","@SuppressWarnings(""String_Node_Str"") private <T extends IsIndexed>Class<T> parseClass(String classNameToReturn) throws GenericException {
  Class<T> classToReturn;
  try {
    classToReturn=(Class<T>)Class.forName(classNameToReturn);
  }
 catch (  ClassNotFoundException e) {
    throw new GenericException(""String_Node_Str"" + classNameToReturn);
  }
  return classToReturn;
}",0.9721854304635762
188764,"@Override public CloseableIterable<BinaryVersion> listBinaryVersions(StoragePath storagePath) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  Path fauxPath=historyPath.resolve(storagePath.asString());
  Path parent=fauxPath.getParent();
  final String baseName=fauxPath.getFileName().toString();
  CloseableIterable<BinaryVersion> iterable;
  try {
    final DirectoryStream<Path> directoryStream=Files.newDirectoryStream(parent,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path entry) throws IOException {
        return entry.getFileName().toString().startsWith(baseName);
      }
    }
);
    final Iterator<Path> pathIterator=directoryStream.iterator();
    iterable=new CloseableIterable<BinaryVersion>(){
      @Override public Iterator<BinaryVersion> iterator(){
        return new Iterator<BinaryVersion>(){
          @Override public boolean hasNext(){
            return pathIterator.hasNext();
          }
          @Override public BinaryVersion next(){
            Path next=pathIterator.next();
            BinaryVersion ret;
            try {
              ret=FSUtils.convertPathToBinaryVersion(historyPath,next);
            }
 catch (            GenericException|NotFoundException|RequestNotValidException e) {
              LOGGER.error(""String_Node_Str"" + basePath + ""String_Node_Str""+ next,e);
              ret=null;
            }
            return ret;
          }
        }
;
      }
      @Override public void close() throws IOException {
        directoryStream.close();
      }
    }
;
  }
 catch (  NoSuchFileException e) {
    throw new NotFoundException(""String_Node_Str"" + storagePath,e);
  }
catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + storagePath,e);
  }
  return iterable;
}","@Override public CloseableIterable<BinaryVersion> listBinaryVersions(StoragePath storagePath) throws GenericException, RequestNotValidException, NotFoundException, AuthorizationDeniedException {
  Path fauxPath=historyPath.resolve(storagePath.asString());
  Path parent=fauxPath.getParent();
  final String baseName=fauxPath.getFileName().toString();
  CloseableIterable<BinaryVersion> iterable;
  if (!Files.exists(parent)) {
    return new EmptyClosableIterable<>();
  }
  try {
    final DirectoryStream<Path> directoryStream=Files.newDirectoryStream(parent,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path entry) throws IOException {
        return entry.getFileName().toString().startsWith(baseName);
      }
    }
);
    final Iterator<Path> pathIterator=directoryStream.iterator();
    iterable=new CloseableIterable<BinaryVersion>(){
      @Override public Iterator<BinaryVersion> iterator(){
        return new Iterator<BinaryVersion>(){
          @Override public boolean hasNext(){
            return pathIterator.hasNext();
          }
          @Override public BinaryVersion next(){
            Path next=pathIterator.next();
            BinaryVersion ret;
            try {
              ret=FSUtils.convertPathToBinaryVersion(historyPath,next);
            }
 catch (            GenericException|NotFoundException|RequestNotValidException e) {
              LOGGER.error(""String_Node_Str"" + basePath + ""String_Node_Str""+ next,e);
              ret=null;
            }
            return ret;
          }
        }
;
      }
      @Override public void close() throws IOException {
        directoryStream.close();
      }
    }
;
  }
 catch (  NoSuchFileException e) {
    throw new NotFoundException(""String_Node_Str"" + storagePath,e);
  }
catch (  IOException e) {
    throw new GenericException(""String_Node_Str"" + storagePath,e);
  }
  return iterable;
}",0.979428266096714
188765,"public static <T>List<T> getListFromJson(String json,Class<T> objectClass) throws GenericException {
  List<T> ret;
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    ret=mapper.readValue(json,new TypeReference<List<T>>(){
    }
);
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  return ret;
}","public static <T>List<T> getListFromJson(String json,Class<T> objectClass) throws GenericException {
  List<T> ret;
  try {
    JsonFactory factory=new JsonFactory();
    ObjectMapper mapper=new ObjectMapper(factory);
    TypeFactory t=TypeFactory.defaultInstance();
    ret=mapper.readValue(json,t.constructCollectionType(ArrayList.class,objectClass));
  }
 catch (  IOException e) {
    throw new GenericException(""String_Node_Str"",e);
  }
  return ret;
}",0.8453364817001181
188766,"@Override public void deleteResource(StoragePath storagePath) throws NotFoundException, GenericException {
  Path resourcePath=FSUtils.getEntityPath(basePath,storagePath);
  FSUtils.deletePath(resourcePath);
  Path resourceHistoryPath=historyPath.resolve(resourcePath);
  FSUtils.deletePath(resourceHistoryPath);
  FSUtils.deleteEmptyAncestorsQuietly(resourceHistoryPath);
}","@Override public void deleteResource(StoragePath storagePath) throws NotFoundException, GenericException {
  Path resourcePath=FSUtils.getEntityPath(basePath,storagePath);
  FSUtils.deletePath(resourcePath);
  Path resourceHistoryPath=historyPath.resolve(resourcePath);
  try {
    FSUtils.deletePath(resourceHistoryPath);
    FSUtils.deleteEmptyAncestorsQuietly(resourceHistoryPath);
  }
 catch (  NotFoundException e) {
  }
}",0.933832709113608
188767,"@Override public void deleteContainer(StoragePath storagePath) throws NotFoundException, GenericException {
  Path containerPath=FSUtils.getEntityPath(basePath,storagePath);
  FSUtils.deletePath(containerPath);
  Path resourceHistoryPath=historyPath.resolve(containerPath);
  FSUtils.deletePath(resourceHistoryPath);
  FSUtils.deleteEmptyAncestorsQuietly(resourceHistoryPath);
}","@Override public void deleteContainer(StoragePath storagePath) throws NotFoundException, GenericException {
  Path containerPath=FSUtils.getEntityPath(basePath,storagePath);
  FSUtils.deletePath(containerPath);
  Path resourceHistoryPath=historyPath.resolve(containerPath);
  try {
    FSUtils.deletePath(resourceHistoryPath);
    FSUtils.deleteEmptyAncestorsQuietly(resourceHistoryPath);
  }
 catch (  NotFoundException e) {
  }
}",0.934487021013597
188768,"@Test public void testBinaryVersions() throws RODAException, IOException {
  final StoragePath containerStoragePath=StorageTestUtils.generateRandomContainerStoragePath();
  getStorage().createContainer(containerStoragePath);
  final StoragePath binaryStoragePath=StorageTestUtils.generateRandomResourceStoragePathUnder(containerStoragePath);
  final ContentPayload payload1=new RandomMockContentPayload();
  getStorage().createBinary(binaryStoragePath,payload1,false);
  String version1=""String_Node_Str"";
  getStorage().createBinaryVersion(binaryStoragePath,version1);
  final ContentPayload payload2=new RandomMockContentPayload();
  getStorage().updateBinaryContent(binaryStoragePath,payload2,false,false);
  String version2=""String_Node_Str"";
  getStorage().createBinaryVersion(binaryStoragePath,version2);
  try {
    getStorage().createBinaryVersion(binaryStoragePath,version1);
    fail(""String_Node_Str"");
  }
 catch (  AlreadyExistsException e) {
  }
  CloseableIterable<BinaryVersion> binaryVersions=getStorage().listBinaryVersions(binaryStoragePath);
  List<BinaryVersion> reusableBinaryVersions=new ArrayList<>();
  Iterables.addAll(reusableBinaryVersions,binaryVersions);
  assertEquals(2,reusableBinaryVersions.size());
  BinaryVersion binaryVersion1=getStorage().getBinaryVersion(binaryStoragePath,version1);
  assertEquals(version1,binaryVersion1.getLabel());
  assertNotNull(binaryVersion1.getCreatedDate());
  assertTrue(IOUtils.contentEquals(payload1.createInputStream(),binaryVersion1.getBinary().getContent().createInputStream()));
  getStorage().revertBinaryVersion(binaryStoragePath,version1);
  Binary binary=getStorage().getBinary(binaryStoragePath);
  testBinaryContent(binary,payload1);
  getStorage().deleteBinaryVersion(binaryStoragePath,version1);
  try {
    getStorage().getBinaryVersion(binaryStoragePath,version1);
    fail(""String_Node_Str"");
  }
 catch (  NotFoundException e) {
  }
  getStorage().deleteContainer(containerStoragePath);
}","@Test public void testBinaryVersions() throws RODAException, IOException {
  final StoragePath containerStoragePath=StorageTestUtils.generateRandomContainerStoragePath();
  getStorage().createContainer(containerStoragePath);
  final StoragePath binaryStoragePath=StorageTestUtils.generateRandomResourceStoragePathUnder(containerStoragePath);
  final ContentPayload payload1=new RandomMockContentPayload();
  getStorage().createBinary(binaryStoragePath,payload1,false);
  String version1=""String_Node_Str"";
  getStorage().createBinaryVersion(binaryStoragePath,version1);
  final ContentPayload payload2=new RandomMockContentPayload();
  getStorage().updateBinaryContent(binaryStoragePath,payload2,false,false);
  String version2=""String_Node_Str"";
  getStorage().createBinaryVersion(binaryStoragePath,version2);
  try {
    getStorage().createBinaryVersion(binaryStoragePath,version1);
    fail(""String_Node_Str"");
  }
 catch (  AlreadyExistsException e) {
  }
  CloseableIterable<BinaryVersion> binaryVersions=getStorage().listBinaryVersions(binaryStoragePath);
  List<BinaryVersion> reusableBinaryVersions=new ArrayList<>();
  Iterables.addAll(reusableBinaryVersions,binaryVersions);
  assertEquals(2,reusableBinaryVersions.size());
  BinaryVersion binaryVersion1=getStorage().getBinaryVersion(binaryStoragePath,version1);
  assertEquals(version1,binaryVersion1.getLabel());
  assertNotNull(binaryVersion1.getCreatedDate());
  assertTrue(IOUtils.contentEquals(payload1.createInputStream(),binaryVersion1.getBinary().getContent().createInputStream()));
  getStorage().revertBinaryVersion(binaryStoragePath,version1);
  Binary binary=getStorage().getBinary(binaryStoragePath);
  testBinaryContent(binary,payload1);
  getStorage().deleteBinaryVersion(binaryStoragePath,version1);
  try {
    getStorage().getBinaryVersion(binaryStoragePath,version1);
    fail(""String_Node_Str"");
  }
 catch (  NotFoundException e) {
  }
  getStorage().deleteResource(binaryStoragePath);
  try {
    getStorage().getBinaryVersion(binaryStoragePath,version1);
    fail(""String_Node_Str"");
  }
 catch (  NotFoundException e) {
  }
  getStorage().deleteContainer(containerStoragePath);
}",0.9538535878231456
188769,"public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  if (parameters.containsKey(""String_Node_Str"")) {
    maxKbytes=Long.parseLong(parameters.get(""String_Node_Str""));
  }
  if (parameters.containsKey(""String_Node_Str"")) {
    inputFormat=parameters.get(""String_Node_Str"");
  }
  if (parameters.containsKey(""String_Node_Str"")) {
    outputFormat=parameters.get(""String_Node_Str"");
  }
}","public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  if (parameters.containsKey(""String_Node_Str"")) {
    setOutputFormat(parameters.get(""String_Node_Str""));
  }
  if (parameters.containsKey(""String_Node_Str"")) {
    setOutputFormat(parameters.get(""String_Node_Str""));
  }
}",0.7909454061251664
188770,public abstract String getInputFormat();,"public String getInputFormat(){
  return this.inputFormat;
}",0.62
188771,"public void createEvent(List<File> alteredFiles,List<File> newFiles,AIP aip,String newRepresentationID,ModelService model,int state,IndexedPreservationAgent agent,boolean notify) throws PluginException {
  List<String> premisSourceFilesIdentifiers=new ArrayList<String>();
  List<String> premisTargetFilesIdentifiers=new ArrayList<String>();
  String outcome=""String_Node_Str"";
  StringBuilder stringBuilder=new StringBuilder();
  if (alteredFiles.size() == 0) {
    stringBuilder.append(""String_Node_Str"");
  }
 else {
    stringBuilder.append(""String_Node_Str"");
    for (    File file : alteredFiles) {
      stringBuilder.append(file.getId() + ""String_Node_Str"");
      premisSourceFilesIdentifiers.add(PremisUtils.createPremisFileIdentifier(file));
    }
    for (    File file : newFiles) {
      premisTargetFilesIdentifiers.add(PremisUtils.createPremisFileIdentifier(file));
    }
    stringBuilder.setLength(stringBuilder.length() - 2);
  }
  if (state == 0 || (state == 2 && hasPartialSuccessOnOutcome == false)) {
    outcome=""String_Node_Str"";
    stringBuilder.setLength(0);
  }
  if (state == 2 && hasPartialSuccessOnOutcome == true) {
    outcome=""String_Node_Str"";
  }
  try {
    PluginHelper.createPluginEvent(aip.getId(),newRepresentationID,null,model,RodaConstants.PRESERVATION_EVENT_TYPE_MIGRATION,""String_Node_Str"",premisSourceFilesIdentifiers,premisTargetFilesIdentifiers,outcome,stringBuilder.toString(),null,agent,notify);
  }
 catch (  IOException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(e.getMessage(),e);
  }
}","public void createEvent(List<File> alteredFiles,List<File> newFiles,AIP aip,String newRepresentationID,ModelService model,int state,IndexedPreservationAgent agent,boolean notify) throws PluginException {
  List<String> premisSourceFilesIdentifiers=new ArrayList<String>();
  List<String> premisTargetFilesIdentifiers=new ArrayList<String>();
  String outcome=""String_Node_Str"";
  StringBuilder stringBuilder=new StringBuilder();
  if (alteredFiles.size() == 0) {
    stringBuilder.append(""String_Node_Str"");
  }
 else {
    stringBuilder.append(""String_Node_Str"");
    for (    File file : alteredFiles) {
      stringBuilder.append(file.getId() + ""String_Node_Str"");
      premisSourceFilesIdentifiers.add(PremisUtils.createPremisFileIdentifier(file));
    }
    for (    File file : newFiles) {
      premisTargetFilesIdentifiers.add(PremisUtils.createPremisFileIdentifier(file));
    }
    stringBuilder.setLength(stringBuilder.length() - 2);
  }
  if (state == 0 || (state == 2 && hasPartialSuccessOnOutcome() == false)) {
    outcome=""String_Node_Str"";
    stringBuilder.setLength(0);
  }
  if (state == 2 && hasPartialSuccessOnOutcome() == true) {
    outcome=""String_Node_Str"";
  }
  try {
    PluginHelper.createPluginEvent(aip.getId(),newRepresentationID,null,model,RodaConstants.PRESERVATION_EVENT_TYPE_MIGRATION,""String_Node_Str"",premisSourceFilesIdentifiers,premisTargetFilesIdentifiers,outcome,stringBuilder.toString(),null,agent,notify);
  }
 catch (  IOException|RequestNotValidException|NotFoundException|GenericException|AuthorizationDeniedException|ValidationException|AlreadyExistsException e) {
    throw new PluginException(e.getMessage(),e);
  }
}",0.9988002399520096
188772,"private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list,IndexedPreservationAgent agent) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    int state=1;
    boolean notify=true;
    try {
      logger.debug(""String_Node_Str"" + representation);
      ClosableIterable<File> allFiles=model.listAllFiles(aipId,representation.getId());
      for (      File file : allFiles) {
        logger.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || (inputFormat.isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat))) && ifile.getSize() < (maxKbytes * 1024)) {
            if (applicableTo.size() > 0) {
              if (filePronom != null && !filePronom.isEmpty() && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                fileFormat=pronomToExtension.get(filePronom).get(0);
              }
 else               if (fileMimetype != null && !fileMimetype.isEmpty() && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
              }
            }
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            Path pluginResult=executePlugin(directAccess.getPath(),fileFormat);
            if (pluginResult != null) {
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              StoragePath storagePath=ModelUtils.getRepresentationPath(aipId,representation.getId());
              if (!newRepresentations.contains(newRepresentationID)) {
                logger.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
                StoragePath storagePreservationPath=ModelUtils.getAIPRepresentationPreservationPath(aipId,newRepresentationID);
                model.getStorage().createDirectory(storagePreservationPath);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File f=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(f);
              IOUtils.closeQuietly(directAccess);
            }
 else {
              logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aipId);
              state=2;
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      if (alteredFiles.size() > 0) {
        for (        File f : unchangedFiles) {
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
          Binary binary=storage.getBinary(fileStoragePath);
          Path uriPath=Paths.get(binary.getContent().getURI());
          ContentPayload payload=new FSPathContentPayload(uriPath);
          model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
        }
        if (!representation.isOriginal()) {
          model.deleteRepresentation(aipId,representation.getId());
        }
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aipId,newRepresentationID,notifyReindex);
        logger.debug(""String_Node_Str"" + representation.getId());
        boolean notifyEvent=false;
        createEvent(alteredFiles,newFiles,model.retrieveAIP(aipId),newRepresentationID,model,state,agent,notifyEvent);
      }
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      state=0;
    }
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    logger.error(""String_Node_Str"",e);
  }
  return new Report();
}","private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list,IndexedPreservationAgent agent) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    int state=1;
    boolean notify=true;
    try {
      LOGGER.debug(""String_Node_Str"" + representation);
      ClosableIterable<File> allFiles=model.listAllFiles(aipId,representation.getId());
      for (      File file : allFiles) {
        LOGGER.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || (inputFormat.isEmpty())) && (getApplicableTo().size() == 0 || (filePronom != null && getPronomToExtension().containsKey(filePronom)) || (fileMimetype != null && getMimetypeToExtension().containsKey(fileMimetype)) || (getApplicableTo().contains(fileFormat)))) {
            if (getApplicableTo().size() > 0) {
              if (filePronom != null && !filePronom.isEmpty() && !getPronomToExtension().get(filePronom).contains(fileFormat)) {
                fileFormat=getPronomToExtension().get(filePronom).get(0);
              }
 else               if (fileMimetype != null && !fileMimetype.isEmpty() && !getMimetypeToExtension().get(fileMimetype).contains(fileFormat)) {
                fileFormat=getMimetypeToExtension().get(fileMimetype).get(0);
              }
            }
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            try {
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              StoragePath storagePath=ModelUtils.getRepresentationPath(aipId,representation.getId());
              if (!newRepresentations.contains(newRepresentationID)) {
                LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
                StoragePath storagePreservationPath=ModelUtils.getAIPRepresentationPreservationPath(aipId,newRepresentationID);
                model.getStorage().createDirectory(storagePreservationPath);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File f=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(f);
              IOUtils.closeQuietly(directAccess);
            }
 catch (            CommandException e) {
              e.getOutput();
              e.getExitCode();
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ representation.getAipId());
              state=2;
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      if (alteredFiles.size() > 0) {
        for (        File f : unchangedFiles) {
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
          Binary binary=storage.getBinary(fileStoragePath);
          Path uriPath=Paths.get(binary.getContent().getURI());
          ContentPayload payload=new FSPathContentPayload(uriPath);
          model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
        }
        if (!representation.isOriginal()) {
          model.deleteRepresentation(aipId,representation.getId());
        }
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aipId,newRepresentationID,notifyReindex);
        LOGGER.debug(""String_Node_Str"" + representation.getId());
        boolean notifyEvent=false;
        createEvent(alteredFiles,newFiles,model.retrieveAIP(aipId),newRepresentationID,model,state,agent,notifyEvent);
      }
    }
 catch (    Throwable e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      state=0;
    }
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return new Report();
}",0.8912531776668864
188773,"public Map<String,String> getParameterValues(){
  Map<String,String> parametersMap=new HashMap<String,String>();
  parametersMap.put(""String_Node_Str"",inputFormat);
  parametersMap.put(""String_Node_Str"",outputFormat);
  parametersMap.put(""String_Node_Str"",Long.toString(maxKbytes));
  parametersMap.put(""String_Node_Str"",Boolean.toString(hasPartialSuccessOnOutcome));
  return parametersMap;
}","public Map<String,String> getParameterValues(){
  Map<String,String> parametersMap=new HashMap<String,String>();
  parametersMap.put(""String_Node_Str"",getInputFormat());
  parametersMap.put(""String_Node_Str"",getOutputFormat());
  parametersMap.put(""String_Node_Str"",Boolean.toString(hasPartialSuccessOnOutcome()));
  return parametersMap;
}",0.8922237380627558
188774,"private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list,IndexedPreservationAgent agent) throws PluginException {
  for (  AIP aip : list) {
    logger.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      int state=1;
      try {
        logger.debug(""String_Node_Str"" + representation);
        ClosableIterable<File> allFiles=model.listAllFiles(aip.getId(),representation.getId());
        for (        File file : allFiles) {
          logger.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || inputFormat.isEmpty()) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || applicableTo.contains(fileFormat) || applicableTo.size() == 0) && ifile.getSize() < (maxKbytes * 1024)) {
              if (applicableTo.size() > 0) {
                if (filePronom != null && !filePronom.isEmpty() && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                  fileFormat=pronomToExtension.get(filePronom).get(0);
                }
 else                 if (fileMimetype != null && !fileMimetype.isEmpty() && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                  fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
                }
              }
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              Path pluginResult=executePlugin(directAccess.getPath(),fileFormat);
              if (pluginResult != null) {
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                StoragePath storagePath=ModelUtils.getRepresentationPath(aip.getId(),representation.getId());
                if (!newRepresentations.contains(newRepresentationID)) {
                  logger.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                  StoragePath storagePreservationPath=ModelUtils.getPreservationPath(aip.getId(),newRepresentationID);
                  model.getStorage().createDirectory(storagePreservationPath);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
              }
 else {
                logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
                state=2;
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
          if (!representation.isOriginal()) {
            model.deleteRepresentation(aip.getId(),representation.getId());
          }
        }
      }
 catch (      Throwable e) {
        logger.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        state=0;
      }
      logger.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip,newRepresentationID,model,state,agent,notifyEvent);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      logger.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return new Report();
}","private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list,IndexedPreservationAgent agent) throws PluginException {
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      int state=1;
      try {
        LOGGER.debug(""String_Node_Str"" + representation);
        ClosableIterable<File> allFiles=model.listAllFiles(aip.getId(),representation.getId());
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || inputFormat.isEmpty()) && (getApplicableTo().size() == 0 || (filePronom != null && getPronomToExtension().containsKey(filePronom)) || (fileMimetype != null && getMimetypeToExtension().containsKey(fileMimetype)) || getApplicableTo().contains(fileFormat) || getApplicableTo().size() == 0)) {
              if (getApplicableTo().size() > 0) {
                if (filePronom != null && !filePronom.isEmpty() && !getPronomToExtension().get(filePronom).contains(fileFormat)) {
                  fileFormat=getPronomToExtension().get(filePronom).get(0);
                }
 else                 if (fileMimetype != null && !fileMimetype.isEmpty() && !getMimetypeToExtension().get(fileMimetype).contains(fileFormat)) {
                  fileFormat=getMimetypeToExtension().get(fileMimetype).get(0);
                }
              }
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result;
              try {
                result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                StoragePath storagePath=ModelUtils.getRepresentationPath(aip.getId(),representation.getId());
                if (!newRepresentations.contains(newRepresentationID)) {
                  LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                  StoragePath storagePreservationPath=ModelUtils.getPreservationPath(aip.getId(),newRepresentationID);
                  model.getStorage().createDirectory(storagePreservationPath);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
              }
 catch (              CommandException e) {
                e.getOutput();
                e.getExitCode();
                LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
                state=2;
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
          if (!representation.isOriginal()) {
            model.deleteRepresentation(aip.getId(),representation.getId());
          }
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        state=0;
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip,newRepresentationID,model,state,agent,notifyEvent);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      LOGGER.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return new Report();
}",0.8822859146288018
188775,"private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list,IndexedPreservationAgent agent) throws PluginException {
  int state=1;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  for (  File file : list) {
    try {
      logger.debug(""String_Node_Str"" + file.getId());
      String newRepresentationID=UUID.randomUUID().toString();
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || (inputFormat.isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat))) && ifile.getSize() < (maxKbytes * 1024)) {
          if (applicableTo.size() > 0) {
            if (filePronom != null && !filePronom.isEmpty() && !pronomToExtension.get(filePronom).contains(fileFormat)) {
              fileFormat=pronomToExtension.get(filePronom).get(0);
            }
 else             if (fileMimetype != null && !fileMimetype.isEmpty() && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
              fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
            }
          }
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          Path pluginResult=executePlugin(directAccess.getPath(),fileFormat);
          if (pluginResult != null) {
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationPath(file.getAipId(),file.getRepresentationId());
            logger.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            StoragePath storagePreservationPath=ModelUtils.getPreservationPath(file.getAipId(),newRepresentationID);
            model.getStorage().createDirectory(storagePreservationPath);
            String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            aipSet.add(file.getAipId());
          }
 else {
            logger.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
            state=2;
          }
        }
      }
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      state=0;
    }
  }
  try {
    Plugin<AIP> psp=new PremisSkeletonPlugin();
    Plugin<AIP> sfp=new SiegfriedPlugin();
    Plugin<AIP> ttp=new TikaFullTextPlugin();
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    psp.setParameterValues(params);
    sfp.setParameterValues(params);
    ttp.setParameterValues(params);
    PluginOrchestrator pluginOrchestrator=new AkkaEmbeddedPluginOrchestrator();
    pluginOrchestrator.runPluginOnAIPs(psp,new ArrayList<String>(aipSet));
    pluginOrchestrator.runPluginOnAIPs(sfp,new ArrayList<String>(aipSet));
    pluginOrchestrator.runPluginOnAIPs(ttp,new ArrayList<String>(aipSet));
    for (    String aipId : aipSet) {
      model.notifyAIPUpdated(aipId);
    }
  }
 catch (  Throwable e) {
    logger.debug(""String_Node_Str"");
  }
  return new Report();
}","private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list,IndexedPreservationAgent agent) throws PluginException {
  int state=1;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"" + file.getId());
      String newRepresentationID=UUID.randomUUID().toString();
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        if (((!inputFormat.isEmpty() && fileFormat.equalsIgnoreCase(inputFormat)) || (inputFormat.isEmpty())) && (getApplicableTo().size() == 0 || (filePronom != null && getPronomToExtension().containsKey(filePronom)) || (fileMimetype != null && getMimetypeToExtension().containsKey(fileMimetype)) || (getApplicableTo().contains(fileFormat)))) {
          if (getApplicableTo().size() > 0) {
            if (filePronom != null && !filePronom.isEmpty() && !getPronomToExtension().get(filePronom).contains(fileFormat)) {
              fileFormat=getPronomToExtension().get(filePronom).get(0);
            }
 else             if (fileMimetype != null && !fileMimetype.isEmpty() && !getMimetypeToExtension().get(fileMimetype).contains(fileFormat)) {
              fileFormat=getMimetypeToExtension().get(fileMimetype).get(0);
            }
          }
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationPath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            StoragePath storagePreservationPath=ModelUtils.getPreservationPath(file.getAipId(),newRepresentationID);
            model.getStorage().createDirectory(storagePreservationPath);
            String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            aipSet.add(file.getAipId());
          }
 catch (          CommandException e) {
            e.getOutput();
            e.getExitCode();
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
            state=2;
          }
        }
      }
    }
 catch (    Throwable e) {
      LOGGER.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      state=0;
    }
  }
  try {
    AbstractConvertPluginUtils.reIndexPlugins(model,aipSet);
  }
 catch (  Throwable e) {
    LOGGER.debug(""String_Node_Str"");
  }
  return new Report();
}",0.7536268134067033
188776,"public Report execute(IndexService index,ModelService model,StorageService storage,List<Serializable> list) throws PluginException {
  IndexedPreservationAgent agent=null;
  try {
    boolean notify=true;
    agent=PremisUtils.createPremisAgentBinary(this,RodaConstants.PRESERVATION_AGENT_TYPE_CONVERSION_PLUGIN,model,notify);
  }
 catch (  AlreadyExistsException e) {
    agent=PremisUtils.getPreservationAgent(this,RodaConstants.PRESERVATION_AGENT_TYPE_CONVERSION_PLUGIN,model);
  }
catch (  RODAException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  if (list.size() > 0) {
    if (list.get(0) instanceof AIP)     return executeOnAIP(index,model,storage,(List<AIP>)(List<?>)list,agent);
    if (list.get(0) instanceof Representation)     return executeOnRepresentation(index,model,storage,(List<Representation>)(List<?>)list,agent);
    if (list.get(0) instanceof File)     return executeOnFile(index,model,storage,(List<File>)(List<?>)list,agent);
  }
  return new Report();
}","public Report execute(IndexService index,ModelService model,StorageService storage,List<Serializable> list) throws PluginException {
  IndexedPreservationAgent agent=null;
  try {
    boolean notify=true;
    agent=PremisUtils.createPremisAgentBinary(this,RodaConstants.PRESERVATION_AGENT_TYPE_CONVERSION_PLUGIN,model,notify);
  }
 catch (  AlreadyExistsException e) {
    agent=PremisUtils.getPreservationAgent(this,RodaConstants.PRESERVATION_AGENT_TYPE_CONVERSION_PLUGIN,model);
  }
catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
  if (list.size() > 0) {
    if (list.get(0) instanceof AIP)     return executeOnAIP(index,model,storage,(List<AIP>)(List<?>)list,agent);
    if (list.get(0) instanceof Representation)     return executeOnRepresentation(index,model,storage,(List<Representation>)(List<?>)list,agent);
    if (list.get(0) instanceof File)     return executeOnFile(index,model,storage,(List<File>)(List<?>)list,agent);
  }
  return new Report();
}",0.994005994005994
188777,public abstract String getOutputFormat();,"public String getOutputFormat(){
  return this.outputFormat;
}",0.6213592233009708
188778,"public List<PluginParameter> getParameters(){
  List<PluginParameter> params=new ArrayList<PluginParameter>();
  PluginParameter outputParam=new PluginParameter(""String_Node_Str"",""String_Node_Str"",PluginParameterType.STRING,""String_Node_Str"",convertableTo,true,true,""String_Node_Str"");
  params.add(outputParam);
  return params;
}","public List<PluginParameter> getParameters(){
  List<PluginParameter> params=new ArrayList<PluginParameter>();
  PluginParameter outputParam=new PluginParameter(""String_Node_Str"",""String_Node_Str"",PluginParameterType.STRING,""String_Node_Str"",getConvertableTo(),true,true,""String_Node_Str"");
  params.add(outputParam);
  return params;
}",0.9895052473763118
188779,"@Override public String getVersion(){
  try {
    return AvconvConvertPluginUtils.getVersion();
  }
 catch (  CommandException|IOException|UnsupportedOperationException e) {
    logger.debug(""String_Node_Str"");
    return new String();
  }
}","@Override public String getVersion(){
  try {
    return AvconvConvertPluginUtils.getVersion();
  }
 catch (  CommandException|IOException|UnsupportedOperationException e) {
    LoggerFactory.getLogger(SoxConvertPlugin.class).debug(""String_Node_Str"");
    return new String();
  }
}",0.8986615678776291
188780,"@Override public Path executePlugin(Path uriPath,String fileFormat) throws UnsupportedOperationException, IOException, CommandException {
  return AvconvConvertPluginUtils.runAvconvVideoConvert(uriPath,fileFormat,outputFormat,commandArguments,outputArguments);
}","@Override public String executePlugin(Path inputPath,Path outputPath,String fileFormat) throws UnsupportedOperationException, IOException, CommandException {
  return AvconvConvertPluginUtils.executeAvconv(inputPath,outputPath,commandArguments,outputArguments);
}",0.7733333333333333
188781,"public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  super.setParameterValues(parameters);
  if (parameters.containsKey(""String_Node_Str"")) {
    outputArguments=parameters.get(""String_Node_Str"");
  }
  fillFileFormatStructures();
}","public void setParameterValues(Map<String,String> parameters) throws InvalidParameterException {
  super.setParameterValues(parameters);
  if (parameters.containsKey(""String_Node_Str"")) {
    outputArguments=parameters.get(""String_Node_Str"");
  }
}",0.9429657794676806
188782,"private static Path executeAvconv(Path input,Path output,String commandArguments,String outputArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  command=command.replace(""String_Node_Str"",outputArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}","public static String executeAvconv(Path input,Path output,String commandArguments,String outputArguments) throws CommandException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",commandArguments);
  command=command.replace(""String_Node_Str"",outputArguments);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  return CommandUtility.execute(commandList);
}",0.9547141796585004
188783,"@Override public Path executePlugin(Path uriPath,String fileFormat){
  try {
    return GeneralCommandConvertPluginUtils.runGeneralCommandConvert(uriPath,fileFormat,outputFormat,commandArguments);
  }
 catch (  IOException|CommandException e) {
    return null;
  }
}","@Override public String executePlugin(Path inputPath,Path outputPath,String fileFormat){
  try {
    return GeneralCommandConvertPluginUtils.executeGeneralCommand(inputPath,outputPath,commandArguments);
  }
 catch (  IOException|CommandException e) {
    return null;
  }
}",0.8111111111111111
188784,"private static Path executeGeneralCommand(Path input,Path output,String command) throws CommandException, IOException, UnsupportedOperationException {
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}","public static String executeGeneralCommand(Path input,Path output,String command) throws CommandException, IOException, UnsupportedOperationException {
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  return CommandUtility.execute(commandList);
}",0.9249692496924968
188785,"@Override public String getVersion(){
  try {
    return GhostScriptConvertPluginUtils.getVersion();
  }
 catch (  CommandException|IOException|UnsupportedOperationException e) {
    logger.debug(""String_Node_Str"");
    return new String();
  }
}","@Override public String getVersion(){
  try {
    return GhostScriptConvertPluginUtils.getVersion();
  }
 catch (  CommandException|IOException|UnsupportedOperationException e) {
    LoggerFactory.getLogger(SoxConvertPlugin.class).debug(""String_Node_Str"");
    return new String();
  }
}",0.900562851782364
188786,"@Override public Path executePlugin(Path uriPath,String fileFormat) throws UnsupportedOperationException, IOException, CommandException {
  try {
    return GhostScriptConvertPluginUtils.runGhostScriptConvert(uriPath,fileFormat,outputFormat,commandArguments);
  }
 catch (  GhostscriptException e) {
    return null;
  }
}","@Override public String executePlugin(Path inputPath,Path outputPath,String fileFormat) throws UnsupportedOperationException, IOException, CommandException {
  try {
    return GhostScriptConvertPluginUtils.executeGS(inputPath,outputPath,commandArguments);
  }
 catch (  GhostscriptException e) {
    return null;
  }
}",0.8268330733229329
188787,"private static Path executeGS(Path input,Path output,String commandArguments) throws GhostscriptException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String[] gsArgs=command.split(""String_Node_Str"");
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  return output;
}","public static String executeGS(Path input,Path output,String commandArguments) throws GhostscriptException, IOException, UnsupportedOperationException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  if (commandArguments.length() > 0) {
    command=command.replace(""String_Node_Str"",commandArguments);
  }
 else {
    command=command.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String[] gsArgs=command.split(""String_Node_Str"");
  Ghostscript gs=Ghostscript.getInstance();
  try {
    gs.initialize(gsArgs);
    gs.exit();
  }
 catch (  GhostscriptException e) {
    throw new GhostscriptException(""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}",0.9648711943793912
188788,"private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list,IndexedPreservationAgent agent) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    int pluginResultState=1;
    boolean notify=true;
    ReportItem reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",representation.getId(),null);
    try {
      if (!representation.isOriginal()) {
        newRepresentationID=representation.getId();
        newRepresentations.add(representation.getId());
        StoragePath representationPreservationPath=ModelUtils.getRepresentationPreservationMetadataStoragePath(aipId,representation.getId());
        storage.deleteResource(representationPreservationPath);
      }
      LOGGER.debug(""String_Node_Str"" + representation);
      boolean recursive=true;
      CloseableIterable<File> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      File file : allFiles) {
        LOGGER.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          List<String> applicableTo=getApplicableTo();
          Map<String,List<String>> pronomToExtension=getPronomToExtension();
          Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
          if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat)))) {
            if (applicableTo.size() > 0) {
              if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                fileFormat=pronomToExtension.get(filePronom).get(0);
              }
 else               if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
              }
            }
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            try {
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              if (!newRepresentations.contains(newRepresentationID)) {
                LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
              }
              if (!representation.isOriginal()) {
                model.deleteFile(aipId,newRepresentationID,file.getPath(),file.getId(),notify);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File f=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(f);
              IOUtils.closeQuietly(directAccess);
              reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
            }
 catch (            CommandException e) {
              detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
              pluginResultState=2;
              reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ representation.getAipId());
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      report.addItem(reportItem);
      if (alteredFiles.size() > 0) {
        if (representation.isOriginal()) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
        }
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aipId,newRepresentationID,notifyReindex);
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException|ValidationException|InvalidParameterException|SAXException|TikaException|XmlException e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
      report.addItem(reportItem);
    }
    LOGGER.debug(""String_Node_Str"" + representation.getId());
    boolean notifyEvent=false;
    createEvent(alteredFiles,newFiles,aipId,newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return report;
}","private Report executeOnRepresentation(IndexService index,ModelService model,StorageService storage,List<Representation> list,IndexedPreservationAgent agent) throws PluginException {
  List<String> newRepresentations=new ArrayList<String>();
  String aipId=null;
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  Representation representation : list) {
    List<File> unchangedFiles=new ArrayList<File>();
    String newRepresentationID=UUID.randomUUID().toString();
    List<File> alteredFiles=new ArrayList<File>();
    List<File> newFiles=new ArrayList<File>();
    aipId=representation.getAipId();
    int pluginResultState=1;
    boolean notify=true;
    ReportItem reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",representation.getId(),null);
    try {
      if (!representation.isOriginal()) {
        newRepresentationID=representation.getId();
        newRepresentations.add(representation.getId());
        StoragePath representationPreservationPath=ModelUtils.getRepresentationPreservationMetadataStoragePath(aipId,representation.getId());
        storage.deleteResource(representationPreservationPath);
      }
      LOGGER.debug(""String_Node_Str"" + representation);
      boolean recursive=true;
      CloseableIterable<File> allFiles=model.listFilesUnder(representation.getAipId(),representation.getId(),recursive);
      for (      File file : allFiles) {
        LOGGER.debug(""String_Node_Str"" + file);
        if (!file.isDirectory()) {
          IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
          String fileMimetype=ifile.getFileFormat().getMimeType();
          String filePronom=ifile.getFileFormat().getPronom();
          String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
          List<String> applicableTo=getApplicableTo();
          List<String> convertableTo=getConvertableTo();
          Map<String,List<String>> pronomToExtension=getPronomToExtension();
          Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
          if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat))) && (convertableTo.size() == 0 || convertableTo.contains(outputFormat))) {
            if (applicableTo.size() > 0) {
              if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                fileFormat=pronomToExtension.get(filePronom).get(0);
              }
 else               if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
              }
            }
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
            DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
            try {
              Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
              String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
              ContentPayload payload=new FSPathContentPayload(pluginResult);
              if (!newRepresentations.contains(newRepresentationID)) {
                LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aipId);
                boolean original=false;
                newRepresentations.add(newRepresentationID);
                model.createRepresentation(aipId,newRepresentationID,original,notify);
              }
              if (!representation.isOriginal()) {
                model.deleteFile(aipId,newRepresentationID,file.getPath(),file.getId(),notify);
              }
              String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
              File f=model.createFile(aipId,newRepresentationID,file.getPath(),newFileId,payload,notify);
              alteredFiles.add(file);
              newFiles.add(f);
              IOUtils.closeQuietly(directAccess);
              reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
            }
 catch (            CommandException e) {
              detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
              pluginResultState=2;
              reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ representation.getAipId());
            }
          }
 else {
            unchangedFiles.add(file);
          }
        }
      }
      IOUtils.closeQuietly(allFiles);
      report.addItem(reportItem);
      if (alteredFiles.size() > 0) {
        if (representation.isOriginal()) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
        }
        boolean notifyReindex=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aipId,newRepresentationID,notifyReindex);
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException|ValidationException|InvalidParameterException|SAXException|TikaException|XmlException e) {
      LOGGER.error(""String_Node_Str"" + representation.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
      report.addItem(reportItem);
    }
    LOGGER.debug(""String_Node_Str"" + representation.getId());
    boolean notifyEvent=false;
    createEvent(alteredFiles,newFiles,aipId,newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
  }
  try {
    model.notifyAIPUpdated(aipId);
  }
 catch (  RODAException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return report;
}",0.991223258365332
188789,"private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list,IndexedPreservationAgent agent) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      int pluginResultState=1;
      ReportItem reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",representation.getId(),null);
      try {
        if (!representation.isOriginal()) {
          newRepresentationID=representation.getId();
          newRepresentations.add(representation.getId());
          StoragePath representationPreservationPath=ModelUtils.getRepresentationPreservationMetadataStoragePath(aip.getId(),representation.getId());
          storage.deleteResource(representationPreservationPath);
        }
        LOGGER.debug(""String_Node_Str"" + representation);
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            List<String> applicableTo=getApplicableTo();
            Map<String,List<String>> pronomToExtension=getPronomToExtension();
            Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
            if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat)))) {
              if (applicableTo.size() > 0) {
                if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                  fileFormat=pronomToExtension.get(filePronom).get(0);
                }
 else                 if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                  fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
                }
              }
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              try {
                Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                if (!newRepresentations.contains(newRepresentationID) && representation.isOriginal()) {
                  LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                }
                if (!representation.isOriginal()) {
                  model.deleteFile(aip.getId(),newRepresentationID,file.getPath(),file.getId(),notify);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
                reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
              }
 catch (              CommandException e) {
                detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
                pluginResultState=2;
                reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
                LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0 && representation.isOriginal()) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=0;
        reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip.getId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
      report.addItem(reportItem);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      LOGGER.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return new Report();
}","private Report executeOnAIP(IndexService index,ModelService model,StorageService storage,List<AIP> list,IndexedPreservationAgent agent) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  String detailExtension=""String_Node_Str"";
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    List<String> newRepresentations=new ArrayList<String>();
    String newRepresentationID=null;
    boolean notify=true;
    for (    Representation representation : aip.getRepresentations()) {
      List<File> alteredFiles=new ArrayList<File>();
      List<File> newFiles=new ArrayList<File>();
      List<File> unchangedFiles=new ArrayList<File>();
      newRepresentationID=UUID.randomUUID().toString();
      int pluginResultState=1;
      ReportItem reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",representation.getId(),null);
      try {
        if (!representation.isOriginal()) {
          newRepresentationID=representation.getId();
          newRepresentations.add(representation.getId());
          StoragePath representationPreservationPath=ModelUtils.getRepresentationPreservationMetadataStoragePath(aip.getId(),representation.getId());
          storage.deleteResource(representationPreservationPath);
        }
        LOGGER.debug(""String_Node_Str"" + representation);
        boolean recursive=true;
        CloseableIterable<File> allFiles=model.listFilesUnder(aip.getId(),representation.getId(),recursive);
        for (        File file : allFiles) {
          LOGGER.debug(""String_Node_Str"" + file);
          if (!file.isDirectory()) {
            IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
            String fileMimetype=ifile.getFileFormat().getMimeType();
            String filePronom=ifile.getFileFormat().getPronom();
            String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1,ifile.getId().length());
            List<String> applicableTo=getApplicableTo();
            List<String> convertableTo=getConvertableTo();
            Map<String,List<String>> pronomToExtension=getPronomToExtension();
            Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
            if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat))) && (convertableTo.size() == 0 || convertableTo.contains(outputFormat))) {
              if (applicableTo.size() > 0) {
                if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
                  fileFormat=pronomToExtension.get(filePronom).get(0);
                }
 else                 if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
                  fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
                }
              }
              StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
              DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
              LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
              try {
                Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
                String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
                ContentPayload payload=new FSPathContentPayload(pluginResult);
                if (!newRepresentations.contains(newRepresentationID) && representation.isOriginal()) {
                  LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ aip.getId());
                  boolean original=false;
                  newRepresentations.add(newRepresentationID);
                  model.createRepresentation(aip.getId(),newRepresentationID,original,notify);
                }
                if (!representation.isOriginal()) {
                  model.deleteFile(aip.getId(),newRepresentationID,file.getPath(),file.getId(),notify);
                }
                String newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
                File f=model.createFile(aip.getId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
                alteredFiles.add(file);
                newFiles.add(f);
                IOUtils.closeQuietly(directAccess);
                reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
              }
 catch (              CommandException e) {
                detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
                pluginResultState=2;
                reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
                LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ representation.getId()+ ""String_Node_Str""+ aip.getId());
              }
            }
 else {
              unchangedFiles.add(file);
            }
          }
        }
        IOUtils.closeQuietly(allFiles);
        if (alteredFiles.size() > 0 && representation.isOriginal()) {
          for (          File f : unchangedFiles) {
            StoragePath fileStoragePath=ModelUtils.getFileStoragePath(f);
            Binary binary=storage.getBinary(fileStoragePath);
            Path uriPath=Paths.get(binary.getContent().getURI());
            ContentPayload payload=new FSPathContentPayload(uriPath);
            model.createFile(f.getAipId(),newRepresentationID,f.getPath(),f.getId(),payload,notify);
          }
        }
      }
 catch (      RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|IOException|AlreadyExistsException e) {
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage(),e);
        pluginResultState=0;
        reportItem=PluginHelper.setPluginReportItemInfo(reportItem,representation.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
      }
      LOGGER.debug(""String_Node_Str"" + representation.getId());
      boolean notifyEvent=false;
      createEvent(alteredFiles,newFiles,aip.getId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
      report.addItem(reportItem);
    }
    try {
      for (      String repId : newRepresentations) {
        boolean inotify=false;
        AbstractConvertPluginUtils.reIndexingRepresentation(index,model,storage,aip.getId(),repId,inotify);
      }
      model.notifyAIPUpdated(aip.getId());
    }
 catch (    Exception e) {
      LOGGER.debug(""String_Node_Str"" + newRepresentationID);
    }
  }
  return new Report();
}",0.991342567927544
188790,"private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list,IndexedPreservationAgent agent) throws PluginException {
  int pluginResultState=1;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<File>();
  String detailExtension=""String_Node_Str"";
  Report report=PluginHelper.createPluginReport(this);
  ReportItem reportItem=null;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"" + file.getId());
      newRepresentationID=UUID.randomUUID().toString();
      reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",file.getId(),null);
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat)))) {
          if (applicableTo.size() > 0) {
            if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
              fileFormat=pronomToExtension.get(filePronom).get(0);
            }
 else             if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
              fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
            }
          }
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            newFiles.add(f);
            aipSet.add(file.getAipId());
            reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
          }
 catch (          CommandException e) {
            detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
            pluginResultState=2;
            reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
          }
        }
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
    }
    boolean notifyEvent=false;
    createEvent(Arrays.asList(file),newFiles,file.getAipId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
    report.addItem(reportItem);
  }
  try {
    AbstractConvertPluginUtils.reIndexPlugins(model,aipSet);
  }
 catch (  Throwable e) {
    LOGGER.debug(""String_Node_Str"");
  }
  return report;
}","private Report executeOnFile(IndexService index,ModelService model,StorageService storage,List<File> list,IndexedPreservationAgent agent) throws PluginException {
  int pluginResultState=1;
  Set<String> aipSet=new HashSet<String>();
  boolean notify=true;
  String newRepresentationID=null;
  String newFileId=null;
  ArrayList<File> newFiles=new ArrayList<File>();
  String detailExtension=""String_Node_Str"";
  Report report=PluginHelper.createPluginReport(this);
  ReportItem reportItem=null;
  for (  File file : list) {
    try {
      LOGGER.debug(""String_Node_Str"" + file.getId());
      newRepresentationID=UUID.randomUUID().toString();
      reportItem=PluginHelper.createPluginReportItem(this,""String_Node_Str"",file.getId(),null);
      if (!file.isDirectory()) {
        IndexedFile ifile=index.retrieve(IndexedFile.class,IdUtils.getFileId(file));
        String fileMimetype=ifile.getFileFormat().getMimeType();
        String filePronom=ifile.getFileFormat().getPronom();
        String fileFormat=ifile.getId().substring(ifile.getId().lastIndexOf('.') + 1);
        List<String> applicableTo=getApplicableTo();
        List<String> convertableTo=getConvertableTo();
        Map<String,List<String>> pronomToExtension=getPronomToExtension();
        Map<String,List<String>> mimetypeToExtension=getMimetypeToExtension();
        if (((!getInputFormat().isEmpty() && fileFormat.equalsIgnoreCase(getInputFormat())) || (getInputFormat().isEmpty())) && (applicableTo.size() == 0 || (filePronom != null && pronomToExtension.containsKey(filePronom)) || (fileMimetype != null && mimetypeToExtension.containsKey(fileMimetype)) || (applicableTo.contains(fileFormat))) && (convertableTo.size() == 0 || convertableTo.contains(outputFormat))) {
          if (applicableTo.size() > 0) {
            if (filePronom != null && !filePronom.isEmpty() && pronomToExtension.get(filePronom) != null && !pronomToExtension.get(filePronom).contains(fileFormat)) {
              fileFormat=pronomToExtension.get(filePronom).get(0);
            }
 else             if (fileMimetype != null && !fileMimetype.isEmpty() && mimetypeToExtension.get(fileMimetype) != null && !mimetypeToExtension.get(fileMimetype).contains(fileFormat)) {
              fileFormat=mimetypeToExtension.get(fileMimetype).get(0);
            }
          }
          StoragePath fileStoragePath=ModelUtils.getFileStoragePath(file);
          DirectResourceAccess directAccess=storage.getDirectAccess(fileStoragePath);
          LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId());
          try {
            Path pluginResult=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + getOutputFormat());
            String result=executePlugin(directAccess.getPath(),pluginResult,fileFormat);
            ContentPayload payload=new FSPathContentPayload(pluginResult);
            StoragePath storagePath=ModelUtils.getRepresentationStoragePath(file.getAipId(),file.getRepresentationId());
            LOGGER.debug(""String_Node_Str"" + newRepresentationID + ""String_Node_Str""+ file.getAipId());
            boolean original=false;
            model.createRepresentation(file.getAipId(),newRepresentationID,original,model.getStorage(),storagePath);
            newFileId=file.getId().replaceFirst(""String_Node_Str"",""String_Node_Str"" + outputFormat);
            model.deleteFile(file.getAipId(),newRepresentationID,file.getPath(),file.getId(),notify);
            File f=model.createFile(file.getAipId(),newRepresentationID,file.getPath(),newFileId,payload,notify);
            newFiles.add(f);
            aipSet.add(file.getAipId());
            reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,result));
          }
 catch (          CommandException e) {
            detailExtension+=file.getId() + ""String_Node_Str"" + e.getOutput();
            pluginResultState=2;
            reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.PARTIAL_SUCCESS.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
            LOGGER.debug(""String_Node_Str"" + fileFormat + ""String_Node_Str""+ outputFormat+ ""String_Node_Str""+ file.getId()+ ""String_Node_Str""+ file.getRepresentationId()+ ""String_Node_Str""+ file.getAipId());
          }
        }
      }
    }
 catch (    RuntimeException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|ValidationException|IOException|AlreadyExistsException e) {
      LOGGER.error(""String_Node_Str"" + file.getId() + ""String_Node_Str""+ e.getMessage(),e);
      pluginResultState=0;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,file.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,PluginState.FAILURE.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
    }
    boolean notifyEvent=false;
    createEvent(Arrays.asList(file),newFiles,file.getAipId(),newRepresentationID,model,outputFormat,pluginResultState,detailExtension,agent,notifyEvent);
    report.addItem(reportItem);
  }
  try {
    AbstractConvertPluginUtils.reIndexPlugins(model,aipSet);
  }
 catch (  Throwable e) {
    LOGGER.debug(""String_Node_Str"");
  }
  return report;
}",0.9883095193913528
188791,"private static void mainMasterTasks(List<String> args) throws GenericException, RequestNotValidException {
  if (""String_Node_Str"".equals(args.get(0))) {
    if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)) || ""String_Node_Str"".equals(args.get(2)))) {
      Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.MEMBERS_IS_USER,""String_Node_Str"".equals(args.get(2)) ? ""String_Node_Str"" : ""String_Node_Str""));
      printIndexMembers(args,filter,null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printCountSips(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printFiles(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printEvents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 2) {
      runReindexAipsPlugin();
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() >= 3) {
      runReindexAipsPlugin(args.subList(2,args.size()));
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 4 && StringUtils.isNotBlank(args.get(2)) && StringUtils.isNotBlank(args.get(3))) {
      runSolrQuery(args);
    }
  }
 else   if (""String_Node_Str"".equals(args.get(0)) && args.size() == 2 && StringUtils.isNotBlank(args.get(1))) {
    runRemoveOrphansPlugin(args.get(1));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFixityPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runAntivirusPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runPremisSkeletonPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runDroidPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFulltextPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runVeraPDFPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runPDFtoPDFAPlugin(args.get(1));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertFilePlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runSoxConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFfmpegConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJodConverterPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGhostScriptConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runMencoderConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runUnoconvConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runUnoconvConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGeneralCommandConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGeneralCommandConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runReindexingPlugins();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJhovePlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFitsPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runBagitPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runValidationPlugin(args.get(1),args.get(2),args.get(3),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runLogCleanPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runExifToolPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runMediaInfoPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFFProbePlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJpylyzerPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runEARKPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runTransferredResourceToAIPPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runSiegfriedPlugin();
  }
 else {
    printMainUsage();
  }
}","private static void mainMasterTasks(List<String> args) throws GenericException, RequestNotValidException {
  if (""String_Node_Str"".equals(args.get(0))) {
    if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)) || ""String_Node_Str"".equals(args.get(2)))) {
      Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.MEMBERS_IS_USER,""String_Node_Str"".equals(args.get(2)) ? ""String_Node_Str"" : ""String_Node_Str""));
      printIndexMembers(args,filter,null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printCountSips(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printFiles(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printEvents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && (""String_Node_Str"".equals(args.get(2)))) {
      printAgents(null,new Sublist(0,10000),null);
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 2) {
      runReindexAipsPlugin();
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() >= 3) {
      runReindexAipsPlugin(args.subList(2,args.size()));
    }
 else     if (""String_Node_Str"".equals(args.get(1)) && args.size() == 4 && StringUtils.isNotBlank(args.get(2)) && StringUtils.isNotBlank(args.get(3))) {
      runSolrQuery(args);
    }
  }
 else   if (""String_Node_Str"".equals(args.get(0)) && args.size() == 2 && StringUtils.isNotBlank(args.get(1))) {
    runRemoveOrphansPlugin(args.get(1));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFixityPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runAntivirusPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runPremisSkeletonPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runDroidPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFulltextPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runVeraPDFPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runPDFtoPDFAPlugin(args.get(1));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runImageMagickConvertFilePlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runSoxConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFfmpegConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJodConverterPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGhostScriptConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runMencoderConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runUnoconvConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runUnoconvConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGeneralCommandConvertPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runGeneralCommandConvertRepresentationPlugin(args.get(1),args.get(2),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runReindexingPlugins();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJhovePlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFitsPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runBagitPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runValidationPlugin(args.get(1),args.get(2),args.get(3),args.get(3));
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runLogCleanPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runExifToolPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runMediaInfoPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runFFProbePlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runJpylyzerPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runEARKPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runTransferredResourceToAIPPlugin();
  }
 else   if (""String_Node_Str"".equals(args.get(0))) {
    runSiegfriedPlugin();
  }
 else {
    printMainUsage();
  }
}",0.9844798237709022
188792,"@Override public void preservationMetadataCreated(PreservationMetadata preservationMetadata){
  try {
    if (preservationMetadata.getAipId() != null) {
      AIP aip=model.retrieveAIP(preservationMetadata.getAipId());
      indexAIP(aip);
    }
    LOGGER.debug(""String_Node_Str"");
    StoragePath storagePath=ModelUtils.getPreservationMetadataStoragePath(preservationMetadata);
    Binary binary=model.getStorage().getBinary(storagePath);
    SolrInputDocument premisFileDocument=SolrUtils.premisToSolr(preservationMetadata.getAipId(),preservationMetadata.getRepresentationId(),preservationMetadata.getId(),binary);
    PreservationMetadataType type=preservationMetadata.getType();
    if (type.equals(PreservationMetadataType.EVENT)) {
      LOGGER.debug(""String_Node_Str"");
      index.add(RodaConstants.INDEX_PRESERVATION_EVENTS,premisFileDocument);
      index.commit(RodaConstants.INDEX_PRESERVATION_EVENTS);
    }
 else     if (type.equals(PreservationMetadataType.AGENT)) {
      LOGGER.debug(""String_Node_Str"");
      index.add(RodaConstants.INDEX_PRESERVATION_AGENTS,premisFileDocument);
      index.commit(RodaConstants.INDEX_PRESERVATION_EVENTS);
    }
  }
 catch (  IOException|SolrServerException|GenericException|RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@Override public void preservationMetadataCreated(PreservationMetadata preservationMetadata){
  try {
    if (preservationMetadata.getAipId() != null) {
      AIP aip=model.retrieveAIP(preservationMetadata.getAipId());
      indexAIP(aip);
    }
    LOGGER.debug(""String_Node_Str"");
    StoragePath storagePath=ModelUtils.getPreservationMetadataStoragePath(preservationMetadata);
    Binary binary=model.getStorage().getBinary(storagePath);
    SolrInputDocument premisFileDocument=SolrUtils.premisToSolr(preservationMetadata.getAipId(),preservationMetadata.getRepresentationId(),preservationMetadata.getId(),binary);
    PreservationMetadataType type=preservationMetadata.getType();
    if (type.equals(PreservationMetadataType.EVENT)) {
      index.add(RodaConstants.INDEX_PRESERVATION_EVENTS,premisFileDocument);
      index.commit(RodaConstants.INDEX_PRESERVATION_EVENTS);
    }
 else     if (type.equals(PreservationMetadataType.AGENT)) {
      index.add(RodaConstants.INDEX_PRESERVATION_AGENTS,premisFileDocument);
      index.commit(RodaConstants.INDEX_PRESERVATION_AGENTS);
    }
  }
 catch (  IOException|SolrServerException|GenericException|RequestNotValidException|NotFoundException|AuthorizationDeniedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.5987795575896262
188793,"private void indexFile(File file,boolean commit,boolean recursive){
  RepresentationFilePreservationObject premisFile=null;
  try {
    premisFile=PremisUtils.getPremisFile(model.getStorage(),file.getAipId(),file.getRepresentationId(),file.getId());
  }
 catch (  NotFoundException e) {
    LOGGER.warn(""String_Node_Str"" + file);
  }
catch (  RODAException|IOException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
  String fulltext=null;
  try {
    Binary fulltextBinary=model.retrieveOtherMetadataBinary(file.getAipId(),file.getRepresentationId(),file.getId() + TikaFullTextPlugin.OUTPUT_EXT,TikaFullTextPlugin.APP_NAME);
    Map<String,String> properties=TikaFullTextPluginUtils.extractPropertiesFromResult(fulltextBinary.getContent().createInputStream());
    fulltext=properties.get(RodaConstants.FILE_FULLTEXT);
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException|ParserConfigurationException|IOException|SAXException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
catch (  NotFoundException e) {
    LOGGER.debug(""String_Node_Str"" + file);
  }
  SolrInputDocument fileDocument=SolrUtils.fileToSolrDocument(file,premisFile,fulltext);
  try {
    index.add(RodaConstants.INDEX_FILE,fileDocument);
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"" + file,e);
  }
  if (recursive && file.isDirectory()) {
    try {
      ClosableIterable<File> allFiles=model.listAllFiles(file);
      for (      File subfile : allFiles) {
        indexFile(subfile,false,false);
      }
      IOUtils.closeQuietly(allFiles);
    }
 catch (    NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"" + file,e);
    }
  }
  if (commit) {
    try {
      index.commit(RodaConstants.INDEX_FILE);
    }
 catch (    SolrServerException|IOException e) {
      LOGGER.error(""String_Node_Str"" + file,e);
    }
  }
}","private void indexFile(File file,boolean commit,boolean recursive){
  RepresentationFilePreservationObject premisFile=null;
  try {
    premisFile=PremisUtils.getPremisFile(model.getStorage(),file.getAipId(),file.getRepresentationId(),file.getId());
  }
 catch (  NotFoundException e) {
    LOGGER.trace(""String_Node_Str"" + file);
  }
catch (  RODAException|IOException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
  String fulltext=null;
  try {
    Binary fulltextBinary=model.retrieveOtherMetadataBinary(file.getAipId(),file.getRepresentationId(),file.getId() + TikaFullTextPlugin.OUTPUT_EXT,TikaFullTextPlugin.APP_NAME);
    Map<String,String> properties=TikaFullTextPluginUtils.extractPropertiesFromResult(fulltextBinary.getContent().createInputStream());
    fulltext=properties.get(RodaConstants.FILE_FULLTEXT);
  }
 catch (  RequestNotValidException|GenericException|AuthorizationDeniedException|ParserConfigurationException|IOException|SAXException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
catch (  NotFoundException e) {
    LOGGER.trace(""String_Node_Str"" + file);
  }
  SolrInputDocument fileDocument=SolrUtils.fileToSolrDocument(file,premisFile,fulltext);
  try {
    index.add(RodaConstants.INDEX_FILE,fileDocument);
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"" + file,e);
  }
  if (recursive && file.isDirectory()) {
    try {
      ClosableIterable<File> allFiles=model.listAllFiles(file);
      for (      File subfile : allFiles) {
        indexFile(subfile,false,false);
      }
      IOUtils.closeQuietly(allFiles);
    }
 catch (    NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException e) {
      LOGGER.error(""String_Node_Str"" + file,e);
    }
  }
  if (commit) {
    try {
      index.commit(RodaConstants.INDEX_FILE);
    }
 catch (    SolrServerException|IOException e) {
      LOGGER.error(""String_Node_Str"" + file,e);
    }
  }
}",0.995136933708728
188794,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  try {
    Path relativePath=transferredResourcePath.relativize(file);
    String fileId=file.getFileName().toString();
    List<String> directoryPath=new ArrayList<>();
    for (int i=0; i < relativePath.getNameCount() - 1; i++) {
      directoryPath.add(relativePath.getName(i).toString());
    }
    ContentPayload payload=new FSPathContentPayload(transferredResourcePath);
    boolean notifyFileCreated=false;
    model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
  }
 catch (  RODAException e) {
  }
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  try {
    Path relativePath=transferredResourcePath.relativize(file);
    String fileId=file.getFileName().toString();
    List<String> directoryPath=new ArrayList<>();
    for (int i=0; i < relativePath.getNameCount() - 2; i++) {
      directoryPath.add(relativePath.getName(i).toString());
    }
    ContentPayload payload=new FSPathContentPayload(file);
    boolean notifyFileCreated=false;
    model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
  }
 catch (  RODAException e) {
  }
  return FileVisitResult.CONTINUE;
}",0.9786293294030952
188795,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<TransferredResource> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  PluginState state;
  String jobDefinedParentId=PluginHelper.getParentIdFromParameters(parameters);
  for (  TransferredResource transferredResource : list) {
    ReportItem reportItem=PluginHelper.createPluginReportItem(transferredResource,this);
    try {
      Path transferredResourcePath=Paths.get(transferredResource.getFullPath());
      boolean active=false;
      String parentId=jobDefinedParentId;
      AIPPermissions permissions=new AIPPermissions();
      boolean notifyCreatedAIP=false;
      final AIP aip=model.createAIP(active,parentId,permissions,notifyCreatedAIP);
      final String representationId=UUID.randomUUID().toString();
      final boolean original=true;
      boolean notifyRepresentationCreated=false;
      model.createRepresentation(aip.getId(),representationId,original,notifyRepresentationCreated);
      PluginHelper.createDirectories(model,aip.getId(),representationId);
      if (transferredResource.isFile()) {
        String fileId=transferredResource.getName();
        List<String> directoryPath=new ArrayList<>();
        ContentPayload payload=new FSPathContentPayload(transferredResourcePath);
        boolean notifyFileCreated=false;
        model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
      }
 else {
        EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
        Files.walkFileTree(transferredResourcePath,opts,Integer.MAX_VALUE,new FileVisitor<Path>(){
          @Override public FileVisitResult preVisitDirectory(          Path dir,          BasicFileAttributes attrs) throws IOException {
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFile(          Path file,          BasicFileAttributes attrs) throws IOException {
            try {
              Path relativePath=transferredResourcePath.relativize(file);
              String fileId=file.getFileName().toString();
              List<String> directoryPath=new ArrayList<>();
              for (int i=0; i < relativePath.getNameCount() - 1; i++) {
                directoryPath.add(relativePath.getName(i).toString());
              }
              ContentPayload payload=new FSPathContentPayload(transferredResourcePath);
              boolean notifyFileCreated=false;
              model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
            }
 catch (            RODAException e) {
            }
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFileFailed(          Path file,          IOException exc) throws IOException {
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult postVisitDirectory(          Path dir,          IOException exc) throws IOException {
            return FileVisitResult.CONTINUE;
          }
        }
);
      }
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      b.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(transferredResource.getName()) + ""String_Node_Str"");
      b.append(""String_Node_Str"");
      ContentPayload metadataPayload=new StringContentPayload(b.toString());
      boolean notifyDescriptiveMetadataCreated=false;
      model.createDescriptiveMetadata(aip.getId(),""String_Node_Str"",metadataPayload,""String_Node_Str"",notifyDescriptiveMetadataCreated);
      model.notifyAIPCreated(aip.getId());
      state=PluginState.SUCCESS;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,aip.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,state.toString()));
    }
 catch (    Throwable e) {
      LOGGER.error(""String_Node_Str"" + transferredResource.getId() + ""String_Node_Str"",e);
      state=PluginState.FAILURE;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,null,new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,state.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
    }
    report.addItem(reportItem);
    PluginHelper.createJobReport(model,this,reportItem,state,PluginHelper.getJobId(parameters));
  }
  return report;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<TransferredResource> list) throws PluginException {
  Report report=PluginHelper.createPluginReport(this);
  PluginState state;
  String jobDefinedParentId=PluginHelper.getParentIdFromParameters(parameters);
  for (  TransferredResource transferredResource : list) {
    ReportItem reportItem=PluginHelper.createPluginReportItem(transferredResource,this);
    try {
      Path transferredResourcePath=Paths.get(transferredResource.getFullPath());
      boolean active=false;
      String parentId=jobDefinedParentId;
      AIPPermissions permissions=new AIPPermissions();
      boolean notifyCreatedAIP=false;
      final AIP aip=model.createAIP(active,parentId,permissions,notifyCreatedAIP);
      final String representationId=UUID.randomUUID().toString();
      final boolean original=true;
      boolean notifyRepresentationCreated=false;
      model.createRepresentation(aip.getId(),representationId,original,notifyRepresentationCreated);
      PluginHelper.createDirectories(model,aip.getId(),representationId);
      if (transferredResource.isFile()) {
        String fileId=transferredResource.getName();
        List<String> directoryPath=new ArrayList<>();
        ContentPayload payload=new FSPathContentPayload(transferredResourcePath);
        boolean notifyFileCreated=false;
        model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
      }
 else {
        EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
        Files.walkFileTree(transferredResourcePath,opts,Integer.MAX_VALUE,new FileVisitor<Path>(){
          @Override public FileVisitResult preVisitDirectory(          Path dir,          BasicFileAttributes attrs) throws IOException {
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFile(          Path file,          BasicFileAttributes attrs) throws IOException {
            try {
              Path relativePath=transferredResourcePath.relativize(file);
              String fileId=file.getFileName().toString();
              List<String> directoryPath=new ArrayList<>();
              for (int i=0; i < relativePath.getNameCount() - 2; i++) {
                directoryPath.add(relativePath.getName(i).toString());
              }
              ContentPayload payload=new FSPathContentPayload(file);
              boolean notifyFileCreated=false;
              model.createFile(aip.getId(),representationId,directoryPath,fileId,payload,notifyFileCreated);
            }
 catch (            RODAException e) {
            }
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFileFailed(          Path file,          IOException exc) throws IOException {
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult postVisitDirectory(          Path dir,          IOException exc) throws IOException {
            return FileVisitResult.CONTINUE;
          }
        }
);
      }
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      b.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(transferredResource.getName()) + ""String_Node_Str"");
      b.append(""String_Node_Str"");
      ContentPayload metadataPayload=new StringContentPayload(b.toString());
      boolean notifyDescriptiveMetadataCreated=false;
      model.createDescriptiveMetadata(aip.getId(),""String_Node_Str"",metadataPayload,""String_Node_Str"",notifyDescriptiveMetadataCreated);
      model.notifyAIPCreated(aip.getId());
      state=PluginState.SUCCESS;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,aip.getId(),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,state.toString()));
    }
 catch (    Throwable e) {
      LOGGER.error(""String_Node_Str"" + transferredResource.getId() + ""String_Node_Str"",e);
      state=PluginState.FAILURE;
      reportItem=PluginHelper.setPluginReportItemInfo(reportItem,null,new Attribute(RodaConstants.REPORT_ATTR_OUTCOME,state.toString()),new Attribute(RodaConstants.REPORT_ATTR_OUTCOME_DETAILS,e.getMessage()));
    }
    report.addItem(reportItem);
    PluginHelper.createJobReport(model,this,reportItem,state,PluginHelper.getJobId(parameters));
  }
  return report;
}",0.9966845775694524
188796,"public void run(){
  StringBuffer outputBuffer=new StringBuffer();
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line=null;
    do {
      line=reader.readLine();
      if (line != null) {
        outputBuffer.append(line + ""String_Node_Str"");
        logger.trace(line);
      }
    }
 while (line != null);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  output=outputBuffer.toString();
synchronized (is) {
    is.notify();
  }
}","public void run(){
  StringBuffer outputBuffer=new StringBuffer();
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line=null;
    while ((line=reader.readLine()) != null) {
      outputBuffer.append(line + ""String_Node_Str"");
      logger.trace(line);
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  output=outputBuffer.toString();
synchronized (is) {
    is.notify();
  }
}",0.8254288597376388
188797,"public static Path runFFMPEGVideoConvert(Path input,String inputFormat,String outputFormat) throws IOException, CommandException {
  Path output=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + outputFormat);
  List<String> command=new ArrayList<String>();
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(input.toString());
  command.add(output.toString());
  CommandUtility.execute(command);
  return output;
}","public static Path runFFMPEGVideoConvert(Path input,String inputFormat,String outputFormat) throws IOException, CommandException {
  Path output=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + outputFormat);
  List<String> command=new ArrayList<String>();
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(input.toString());
  command.add(output.toString());
  CommandUtility.execute(command);
  return output;
}",0.9639830508474576
188798,"public static Path runJODConverter(Path input,String inputFormat,String outputFormat) throws IOException, CommandException {
  Path output=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + outputFormat);
  File inputFile=new File(input.toString());
  File outputFile=new File(output.toString());
  OpenOfficeConnection connection=new SocketOpenOfficeConnection(8100);
  connection.connect();
  DocumentConverter converter=new OpenOfficeDocumentConverter(connection);
  converter.convert(inputFile,outputFile);
  connection.disconnect();
  return output;
}","public static Path runJODConverter(Path input,String inputFormat,String outputFormat) throws IOException, CommandException {
  Path output=Files.createTempFile(""String_Node_Str"",""String_Node_Str"" + outputFormat);
  File inputFile=new File(input.toString());
  File outputFile=new File(output.toString());
  OpenOfficeConnection connection=new SocketOpenOfficeConnection(PluginHelper.OPENOFFICE_PORT);
  connection.connect();
  DocumentConverter converter=new OpenOfficeDocumentConverter(connection);
  converter.convert(inputFile,outputFile);
  connection.disconnect();
  return output;
}",0.9722222222222222
188799,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    List<String> representationIds=aip.getRepresentationIds();
    if (representationIds != null && representationIds.size() > 0) {
      for (      String representationID : representationIds) {
        LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
        EventPreservationObject epo=new EventPreservationObject();
        epo.setDatetime(new Date());
        epo.setEventType(EventPreservationObject.PRESERVATION_EVENT_TYPE_FIXITY_CHECK);
        epo.setEventDetail(""String_Node_Str"");
        epo.setAgentRole(EventPreservationObject.PRESERVATION_EVENT_AGENT_ROLE_PRESERVATION_TASK);
        try {
          Representation r=model.retrieveRepresentation(aip.getId(),representationID);
          List<String> fileIDs=r.getFileIds();
          List<String> okFileIDS=new ArrayList<String>();
          List<String> koFileIDS=new ArrayList<String>();
          if (fileIDs != null && fileIDs.size() > 0) {
            for (            String fileID : fileIDs) {
              LOGGER.debug(""String_Node_Str"" + fileID);
              File currentFile=model.retrieveFile(aip.getId(),representationID,fileID);
              Binary currentFileBinary=storage.getBinary(currentFile.getStoragePath());
              Path currentPath=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
              currentFileBinary.getContent().writeToPath(currentPath);
              RepresentationFilePreservationObject rfpo=model.retrieveRepresentationFileObject(aip.getId(),representationID,fileID);
              if (rfpo.getFixities() != null) {
                boolean fixityOK=true;
                for (                Fixity f : rfpo.getFixities()) {
                  try {
                    Fixity currentFixity=PremisUtils.calculateFixity(currentFileBinary,f.getMessageDigestAlgorithm(),""String_Node_Str"");
                    if (!f.getMessageDigest().trim().equalsIgnoreCase(currentFixity.getMessageDigest().trim())) {
                      fixityOK=false;
                      break;
                    }
                  }
 catch (                  NoSuchAlgorithmException nsae) {
                    fixityOK=false;
                    break;
                  }
                }
                if (fixityOK) {
                  okFileIDS.add(fileID);
                }
 else {
                  koFileIDS.add(fileID);
                }
              }
            }
            if (okFileIDS.size() < fileIDs.size()) {
              LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
              epo.setOutcome(""String_Node_Str"");
              epo.setOutcomeDetailNote(""String_Node_Str"");
              StringBuilder sb=new StringBuilder();
              sb.append(""String_Node_Str"");
              sb.append(""String_Node_Str"");
              for (              String s : koFileIDS) {
                sb.append(""String_Node_Str"" + s + ""String_Node_Str"");
              }
              sb.append(""String_Node_Str"");
              epo.setOutcomeDetailExtension(sb.toString());
              notifyUserOfFixityCheckError(representationID,okFileIDS,koFileIDS,epo);
            }
 else {
              LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
              epo.setOutcome(""String_Node_Str"");
              epo.setOutcomeDetailNote(fileIDs.size() + ""String_Node_Str"");
              epo.setOutcomeDetailExtension(fileIDs.toString());
              notifyUserOfFixityCheckSucess(representationID,okFileIDS,koFileIDS,epo);
            }
          }
        }
 catch (        ModelServiceException|IOException|StorageServiceException e) {
          LOGGER.error(""String_Node_Str"" + representationID + ""String_Node_Str""+ e.getMessage(),e);
          epo.setOutcome(""String_Node_Str"");
          epo.setOutcomeDetailNote(""String_Node_Str"");
          epo.setOutcomeDetailExtension(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
          notifyUserOfFixityCheckUndetermined(representationID,epo,e.getMessage());
        }
        try {
          DateFormat format=new SimpleDateFormat(""String_Node_Str"");
          String name=""String_Node_Str"" + format.format(new Date()) + ""String_Node_Str"";
          epo.setId(name);
          epo.setAgentID(fixityAgent.getId());
          epo.setObjectIDs(new String[]{""String_Node_Str""});
          byte[] serializedPremisEvent=new PremisEventHelper(epo).saveToByteArray();
          Path file=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
          Files.copy(new ByteArrayInputStream(serializedPremisEvent),file,StandardCopyOption.REPLACE_EXISTING);
          Binary resource=(Binary)FSUtils.convertPathToResource(file.getParent(),file);
          model.createPreservationMetadata(aip.getId(),representationID,name,resource);
        }
 catch (        ModelServiceException e) {
          LOGGER.error(e.getMessage(),e);
        }
catch (        PremisMetadataException e) {
          LOGGER.error(e.getMessage(),e);
        }
catch (        IOException e) {
          LOGGER.error(e.getMessage(),e);
        }
catch (        StorageServiceException e) {
          LOGGER.error(e.getMessage(),e);
        }
      }
    }
  }
  return null;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    List<String> representationIds=aip.getRepresentationIds();
    if (representationIds != null && representationIds.size() > 0) {
      for (      String representationID : representationIds) {
        LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
        EventPreservationObject epo=new EventPreservationObject();
        epo.setDatetime(new Date());
        epo.setEventType(EventPreservationObject.PRESERVATION_EVENT_TYPE_FIXITY_CHECK);
        epo.setEventDetail(""String_Node_Str"");
        epo.setAgentRole(EventPreservationObject.PRESERVATION_EVENT_AGENT_ROLE_PRESERVATION_TASK);
        try {
          Representation r=model.retrieveRepresentation(aip.getId(),representationID);
          List<String> fileIDs=r.getFileIds();
          List<String> okFileIDS=new ArrayList<String>();
          List<String> koFileIDS=new ArrayList<String>();
          if (fileIDs != null && fileIDs.size() > 0) {
            for (            String fileID : fileIDs) {
              LOGGER.debug(""String_Node_Str"" + fileID);
              File currentFile=model.retrieveFile(aip.getId(),representationID,fileID);
              Binary currentFileBinary=storage.getBinary(currentFile.getStoragePath());
              Path currentPath=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
              currentFileBinary.getContent().writeToPath(currentPath);
              RepresentationFilePreservationObject rfpo=model.retrieveRepresentationFileObject(aip.getId(),representationID,fileID);
              if (rfpo.getFixities() != null) {
                boolean fixityOK=true;
                for (                Fixity f : rfpo.getFixities()) {
                  try {
                    Fixity currentFixity=PremisUtils.calculateFixity(currentFileBinary,f.getMessageDigestAlgorithm(),""String_Node_Str"");
                    if (!f.getMessageDigest().trim().equalsIgnoreCase(currentFixity.getMessageDigest().trim())) {
                      fixityOK=false;
                      break;
                    }
                  }
 catch (                  NoSuchAlgorithmException nsae) {
                    fixityOK=false;
                    break;
                  }
                }
                if (fixityOK) {
                  okFileIDS.add(fileID);
                }
 else {
                  koFileIDS.add(fileID);
                }
              }
            }
            if (okFileIDS.size() < fileIDs.size()) {
              LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
              epo.setOutcome(""String_Node_Str"");
              epo.setOutcomeDetailNote(""String_Node_Str"");
              StringBuilder sb=new StringBuilder();
              sb.append(""String_Node_Str"");
              sb.append(""String_Node_Str"");
              for (              String s : koFileIDS) {
                sb.append(""String_Node_Str"" + s + ""String_Node_Str"");
              }
              sb.append(""String_Node_Str"");
              epo.setOutcomeDetailExtension(sb.toString());
              notifyUserOfFixityCheckError(representationID,okFileIDS,koFileIDS,epo);
            }
 else {
              LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
              epo.setOutcome(""String_Node_Str"");
              epo.setOutcomeDetailNote(fileIDs.size() + ""String_Node_Str"");
              epo.setOutcomeDetailExtension(fileIDs.toString());
              notifyUserOfFixityCheckSucess(representationID,okFileIDS,koFileIDS,epo);
            }
          }
        }
 catch (        IOException|RequestNotValidException|GenericException|NotFoundException|AuthorizationDeniedException e) {
          LOGGER.error(""String_Node_Str"" + representationID + ""String_Node_Str""+ e.getMessage(),e);
          epo.setOutcome(""String_Node_Str"");
          epo.setOutcomeDetailNote(""String_Node_Str"");
          epo.setOutcomeDetailExtension(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
          notifyUserOfFixityCheckUndetermined(representationID,epo,e.getMessage());
        }
        try {
          DateFormat format=new SimpleDateFormat(""String_Node_Str"");
          String name=""String_Node_Str"" + format.format(new Date()) + ""String_Node_Str"";
          epo.setId(name);
          epo.setAgentID(fixityAgent.getId());
          epo.setObjectIDs(new String[]{""String_Node_Str""});
          byte[] serializedPremisEvent=new PremisEventHelper(epo).saveToByteArray();
          Path file=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
          Files.copy(new ByteArrayInputStream(serializedPremisEvent),file,StandardCopyOption.REPLACE_EXISTING);
          Binary resource=(Binary)FSUtils.convertPathToResource(file.getParent(),file);
          model.createPreservationMetadata(aip.getId(),representationID,name,resource);
        }
 catch (        PremisMetadataException e) {
          LOGGER.error(e.getMessage(),e);
        }
catch (        IOException e) {
          LOGGER.error(e.getMessage(),e);
        }
catch (        RequestNotValidException e) {
          e.printStackTrace();
        }
catch (        NotFoundException e) {
          e.printStackTrace();
        }
catch (        GenericException e) {
          e.printStackTrace();
        }
catch (        AuthorizationDeniedException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return null;
}",0.9587741700109448
188800,"private static Path executeFFMPEG(Path input,Path output) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command.replace(""String_Node_Str"",input.toString());
  command.replace(""String_Node_Str"",output.toString());
  System.out.println(""String_Node_Str"" + command);
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}","private static Path executeFFMPEG(Path input,Path output) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",""String_Node_Str"");
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}",0.8836754643206256
188801,"private static Path executeImageMagick(Path input,Path output,String inputFormat,String outputFormat) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command.replace(""String_Node_Str"",inputFormat + ""String_Node_Str"" + input.toString());
  command.replace(""String_Node_Str"",outputFormat + ""String_Node_Str"" + output.toString());
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}","private static Path executeImageMagick(Path input,Path output,String inputFormat,String outputFormat) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",inputFormat + ""String_Node_Str"" + input.toString());
  command=command.replace(""String_Node_Str"",outputFormat + ""String_Node_Str"" + output.toString());
  command=command.replace(""String_Node_Str"",""String_Node_Str"");
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}",0.9332220367278798
188802,"private static Path executeSox(Path input,Path output) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command.replace(""String_Node_Str"",input.toString());
  command.replace(""String_Node_Str"",output.toString());
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}","private static Path executeSox(Path input,Path output) throws CommandException {
  String command=RodaCoreFactory.getRodaConfigurationAsString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  command=command.replace(""String_Node_Str"",input.toString());
  command=command.replace(""String_Node_Str"",output.toString());
  command=command.replace(""String_Node_Str"",""String_Node_Str"");
  List<String> commandList=Arrays.asList(command.split(""String_Node_Str""));
  CommandUtility.execute(commandList);
  return output;
}",0.917184265010352
188803,"private void indexFile(File file,boolean commit){
  RepresentationFilePreservationObject premisFile=null;
  try {
    premisFile=PremisUtils.getPremisFile(model.getStorage(),file.getAipId(),file.getRepresentationId(),file.getId() + ""String_Node_Str"");
  }
 catch (  PremisMetadataException|RODAException|IOException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
  SolrInputDocument fileDocument=SolrUtils.fileToSolrDocument(file,premisFile);
  try {
    index.add(RodaConstants.INDEX_FILE,fileDocument);
    if (commit) {
      index.commit();
    }
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"" + file,e);
  }
}","private void indexFile(File file,boolean commit){
  RepresentationFilePreservationObject premisFile=null;
  try {
    premisFile=PremisUtils.getPremisFile(model.getStorage(),file.getAipId(),file.getRepresentationId(),file.getId() + ""String_Node_Str"");
  }
 catch (  PremisMetadataException|RODAException|IOException e) {
    LOGGER.warn(""String_Node_Str"" + file,e);
  }
  SolrInputDocument fileDocument=SolrUtils.fileToSolrDocument(file,premisFile);
  try {
    index.add(RodaConstants.INDEX_FILE,fileDocument);
    if (commit) {
      index.commit(RodaConstants.INDEX_FILE);
    }
  }
 catch (  SolrServerException|IOException e) {
    LOGGER.error(""String_Node_Str"" + file,e);
  }
}",0.9821428571428572
188804,"@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    for (    String representationID : aip.getRepresentationIds()) {
      LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
      try {
        Path data=Files.createTempDirectory(""String_Node_Str"");
        StorageService tempStorage=new FileStorageService(data);
        StoragePath representationPath=ModelUtils.getRepresentationPath(aip.getId(),representationID);
        tempStorage.copy(storage,representationPath,representationPath);
        String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(data.resolve(representationPath.asString()));
        final JSONObject obj=new JSONObject(siegfriedOutput);
        JSONArray files=(JSONArray)obj.get(""String_Node_Str"");
        List<org.roda.core.model.File> updatedFiles=new ArrayList<org.roda.core.model.File>();
        for (int i=0; i < files.length(); i++) {
          JSONObject fileObject=files.getJSONObject(i);
          String fileName=fileObject.getString(""String_Node_Str"");
          fileName=fileName.substring(fileName.lastIndexOf(File.separatorChar) + 1);
          long fileSize=fileObject.getLong(""String_Node_Str"");
          Path p=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
          Files.write(p,fileObject.toString().getBytes());
          Binary resource=(Binary)FSUtils.convertPathToResource(p.getParent(),p);
          LOGGER.debug(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ representationID+ ""String_Node_Str""+ fileName+ ""String_Node_Str"");
          try {
            model.createOtherMetadata(aip.getId(),representationID,fileName + ""String_Node_Str"",""String_Node_Str"",resource);
          }
 catch (          ModelServiceException e1) {
            e1.printStackTrace();
          }
          p.toFile().delete();
          JSONArray matches=(JSONArray)fileObject.get(""String_Node_Str"");
          if (matches.length() > 0) {
            for (int j=0; j < matches.length(); j++) {
              JSONObject match=(JSONObject)matches.get(j);
              if (match.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
                String pronom=match.getString(""String_Node_Str"");
                String mime=match.getString(""String_Node_Str"");
                String version=match.getString(""String_Node_Str"");
                String extension=""String_Node_Str"";
                if (fileName.contains(""String_Node_Str"")) {
                  extension=fileName.substring(fileName.lastIndexOf('.'));
                }
                System.out.println(fileName + ""String_Node_Str"" + pronom+ ""String_Node_Str""+ mime);
                try {
                  org.roda.core.model.File f=model.retrieveFile(aip.getId(),representationID,fileName);
                  FileFormat ff=new org.roda.core.data.v2.FileFormat();
                  ff.setPronom(pronom);
                  ff.setMimeType(mime);
                  ff.setVersion(version);
                  ff.setCreatedDate(new Date());
                  ff.setExtension(extension);
                  f.setFileFormat(ff);
                  f.setSize(fileSize);
                  updatedFiles.add(f);
                }
 catch (                ModelServiceException e) {
                  e.printStackTrace();
                }
              }
            }
          }
        }
        model.updateFileFormats(updatedFiles);
        FSUtils.deletePath(data);
      }
 catch (      StorageServiceException|PluginException|IOException|ModelServiceException e) {
        e.printStackTrace();
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
      }
    }
  }
  return null;
}","@Override public Report execute(IndexService index,ModelService model,StorageService storage,List<AIP> list) throws PluginException {
  for (  AIP aip : list) {
    LOGGER.debug(""String_Node_Str"" + aip.getId());
    for (    String representationID : aip.getRepresentationIds()) {
      LOGGER.debug(""String_Node_Str"" + representationID + ""String_Node_Str""+ aip.getId());
      try {
        Path data=Files.createTempDirectory(""String_Node_Str"");
        StorageService tempStorage=new FileStorageService(data);
        StoragePath representationPath=ModelUtils.getRepresentationPath(aip.getId(),representationID);
        tempStorage.copy(storage,representationPath,representationPath);
        String siegfriedOutput=SiegfriedPluginUtils.runSiegfriedOnPath(data.resolve(representationPath.asString()));
        final JSONObject obj=new JSONObject(siegfriedOutput);
        JSONArray files=(JSONArray)obj.get(""String_Node_Str"");
        List<org.roda.core.model.File> updatedFiles=new ArrayList<org.roda.core.model.File>();
        for (int i=0; i < files.length(); i++) {
          JSONObject fileObject=files.getJSONObject(i);
          String fileName=fileObject.getString(""String_Node_Str"");
          fileName=fileName.substring(fileName.lastIndexOf(File.separatorChar) + 1);
          long fileSize=fileObject.getLong(""String_Node_Str"");
          Path p=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
          Files.write(p,fileObject.toString().getBytes());
          Binary resource=(Binary)FSUtils.convertPathToResource(p.getParent(),p);
          LOGGER.debug(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ representationID+ ""String_Node_Str""+ fileName+ ""String_Node_Str"");
          model.createOtherMetadata(aip.getId(),representationID,fileName + ""String_Node_Str"",""String_Node_Str"",resource);
          p.toFile().delete();
          JSONArray matches=(JSONArray)fileObject.get(""String_Node_Str"");
          if (matches.length() > 0) {
            for (int j=0; j < matches.length(); j++) {
              JSONObject match=(JSONObject)matches.get(j);
              if (match.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
                String pronom=match.getString(""String_Node_Str"");
                String mime=match.getString(""String_Node_Str"");
                String version=match.getString(""String_Node_Str"");
                String extension=""String_Node_Str"";
                if (fileName.contains(""String_Node_Str"")) {
                  extension=fileName.substring(fileName.lastIndexOf('.'));
                }
                System.out.println(fileName + ""String_Node_Str"" + pronom+ ""String_Node_Str""+ mime);
                try {
                  org.roda.core.model.File f=model.retrieveFile(aip.getId(),representationID,fileName);
                  FileFormat ff=new org.roda.core.data.v2.FileFormat();
                  ff.setPronom(pronom);
                  ff.setMimeType(mime);
                  ff.setVersion(version);
                  ff.setCreatedDate(new Date());
                  ff.setExtension(extension);
                  f.setFileFormat(ff);
                  f.setSize(fileSize);
                  updatedFiles.add(f);
                }
 catch (                RequestNotValidException|AuthorizationDeniedException e) {
                  LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
                }
              }
            }
          }
        }
        model.updateFileFormats(updatedFiles);
        FSUtils.deletePath(data);
      }
 catch (      PluginException|IOException|ModelServiceException|NotFoundException|GenericException|RequestNotValidException|AuthorizationDeniedException|AlreadyExistsException e) {
        e.printStackTrace();
        LOGGER.error(""String_Node_Str"" + aip.getId() + ""String_Node_Str""+ e.getMessage());
      }
    }
  }
  return null;
}",0.8768932038834951
188805,"public void run(){
  long start=System.currentTimeMillis();
  LOGGER.error(""String_Node_Str"" + basePath.toString());
  try {
    EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
    Files.walkFileTree(basePath,opts,Integer.MAX_VALUE,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        indexPath(dir,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        indexPath(file,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
    index.commit(RodaConstants.INDEX_SIP);
    LOGGER.error(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"" + ((System.currentTimeMillis() - start) / 1000) + ""String_Node_Str"");
    RodaCoreFactory.setFolderMonitorDate(basePath,new Date());
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"");
  }
}","public void run(){
  long start=System.currentTimeMillis();
  LOGGER.debug(""String_Node_Str"" + basePath.toString());
  try {
    EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
    Files.walkFileTree(basePath,opts,Integer.MAX_VALUE,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        indexPath(dir,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        indexPath(file,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
    index.commit(RodaConstants.INDEX_SIP);
    LOGGER.debug(""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + ((System.currentTimeMillis() - start) / 1000) + ""String_Node_Str"");
    RodaCoreFactory.setFolderMonitorDate(basePath,new Date());
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"");
  }
}",0.989010989010989
188806,"public void transferredResourceAdded(TransferredResource resource,boolean commit){
  try {
    if (resource.getAncestorsPaths() != null && resource.getAncestorsPaths().size() > 0) {
      for (      String ancestor : resource.getAncestorsPaths()) {
        TransferredResource resourceAncestor=FolderMonitorNIO.createTransferredResource(basePath.resolve(Paths.get(ancestor)),Paths.get(resource.getBasePath()));
        if (resourceAncestor.isToIndex()) {
          LOGGER.error(""String_Node_Str"");
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getFullPath());
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getRelativePath());
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getParentPath());
          LOGGER.error(""String_Node_Str"");
          index.add(RodaConstants.INDEX_SIP,SolrUtils.transferredResourceToSolrDocument(resourceAncestor));
        }
 else {
          LOGGER.error(""String_Node_Str"");
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getFullPath());
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getRelativePath());
          LOGGER.error(""String_Node_Str"" + resourceAncestor.getParentPath());
          LOGGER.error(""String_Node_Str"");
        }
      }
    }
    if (resource.isToIndex()) {
      LOGGER.error(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + resource.getFullPath());
      LOGGER.error(""String_Node_Str"" + resource.getRelativePath());
      LOGGER.error(""String_Node_Str"" + resource.getParentPath());
      LOGGER.error(""String_Node_Str"");
      index.add(RodaConstants.INDEX_SIP,SolrUtils.transferredResourceToSolrDocument(resource));
    }
 else {
      LOGGER.error(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + resource.getFullPath());
      LOGGER.error(""String_Node_Str"" + resource.getRelativePath());
      LOGGER.error(""String_Node_Str"" + resource.getParentPath());
      LOGGER.error(""String_Node_Str"");
    }
    if (commit) {
      index.commit(RodaConstants.INDEX_SIP);
    }
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"" + t.getMessage(),t);
  }
}","public void transferredResourceAdded(TransferredResource resource,boolean commit){
  try {
    if (resource.getAncestorsPaths() != null && resource.getAncestorsPaths().size() > 0) {
      for (      String ancestor : resource.getAncestorsPaths()) {
        TransferredResource resourceAncestor=FolderMonitorNIO.createTransferredResource(basePath.resolve(Paths.get(ancestor)),Paths.get(resource.getBasePath()));
        if (resourceAncestor.isToIndex()) {
          LOGGER.debug(""String_Node_Str"");
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getFullPath());
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getRelativePath());
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getParentPath());
          LOGGER.debug(""String_Node_Str"");
          index.add(RodaConstants.INDEX_SIP,SolrUtils.transferredResourceToSolrDocument(resourceAncestor));
        }
 else {
          LOGGER.debug(""String_Node_Str"");
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getFullPath());
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getRelativePath());
          LOGGER.debug(""String_Node_Str"" + resourceAncestor.getParentPath());
          LOGGER.debug(""String_Node_Str"");
        }
      }
    }
    if (resource.isToIndex()) {
      LOGGER.debug(""String_Node_Str"");
      LOGGER.debug(""String_Node_Str"" + resource.getFullPath());
      LOGGER.debug(""String_Node_Str"" + resource.getRelativePath());
      LOGGER.debug(""String_Node_Str"" + resource.getParentPath());
      LOGGER.debug(""String_Node_Str"");
      index.add(RodaConstants.INDEX_SIP,SolrUtils.transferredResourceToSolrDocument(resource));
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      LOGGER.debug(""String_Node_Str"" + resource.getFullPath());
      LOGGER.debug(""String_Node_Str"" + resource.getRelativePath());
      LOGGER.debug(""String_Node_Str"" + resource.getParentPath());
      LOGGER.debug(""String_Node_Str"");
    }
    if (commit) {
      index.commit(RodaConstants.INDEX_SIP);
    }
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"" + t.getMessage(),t);
  }
}",0.9547511312217196
188807,"private void indexPath(Path file,BasicFileAttributes attrs){
  Date modifiedDate=new Date(attrs.lastModifiedTime().toMillis());
  if (from == null || from.before(modifiedDate)) {
    transferredResourceAdded(FolderMonitorNIO.createTransferredResource(file,basePath),false);
    counter++;
    if (counter >= 1000) {
      try {
        LOGGER.error(""String_Node_Str"");
        index.commit(RodaConstants.INDEX_SIP);
        counter=0;
      }
 catch (      IOException|SolrServerException e) {
        LOGGER.error(e.getMessage(),e);
      }
    }
  }
}","private void indexPath(Path file,BasicFileAttributes attrs){
  Date modifiedDate=new Date(attrs.lastModifiedTime().toMillis());
  if (from == null || from.before(modifiedDate)) {
    transferredResourceAdded(FolderMonitorNIO.createTransferredResource(file,basePath),false);
    counter++;
    if (counter >= 1000) {
      try {
        LOGGER.debug(""String_Node_Str"");
        index.commit(RodaConstants.INDEX_SIP);
        counter=0;
      }
 catch (      IOException|SolrServerException e) {
        LOGGER.error(e.getMessage(),e);
      }
    }
  }
}",0.9909584086799276
188808,"private <T extends Serializable>void addPluginToPluginTypeMapping(Plugin<T> plugin){
  PluginInfo pluginInfo=getPluginInfo(plugin.getName());
  PluginType pluginType=plugin.getType();
  if (pluginInfoPerType.get(pluginType) == null) {
    List<PluginInfo> list=new ArrayList<>();
    list.add(pluginInfo);
    pluginInfoPerType.put(pluginType,list);
  }
 else   if (!pluginInfoPerType.get(pluginType).contains(plugin)) {
    pluginInfoPerType.get(pluginType).add(pluginInfo);
  }
}","private <T extends Serializable>void addPluginToPluginTypeMapping(Plugin<T> plugin){
  PluginInfo pluginInfo=getPluginInfo(plugin.getClass().getCanonicalName());
  PluginType pluginType=plugin.getType();
  if (pluginInfoPerType.get(pluginType) == null) {
    List<PluginInfo> list=new ArrayList<>();
    list.add(pluginInfo);
    pluginInfoPerType.put(pluginType,list);
  }
 else   if (!pluginInfoPerType.get(pluginType).contains(plugin)) {
    pluginInfoPerType.get(pluginType).add(pluginInfo);
  }
}",0.979633401221996
188809,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  Date modifiedDate=new Date(attrs.lastModifiedTime().toMillis());
  if (from == null || from.before(modifiedDate)) {
    transferredResourceAdded(FolderMonitorNIO.createTransferredResource(file,basePath),false);
    counter++;
    if (counter >= 1000) {
      try {
        LOGGER.error(""String_Node_Str"");
        index.commit(RodaConstants.INDEX_SIP);
        counter=0;
      }
 catch (      IOException|SolrServerException e) {
        LOGGER.error(e.getMessage(),e);
      }
    }
  }
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  indexPath(file,attrs);
  return FileVisitResult.CONTINUE;
}",0.3873417721518987
188810,"public void run(){
  long start=System.currentTimeMillis();
  LOGGER.error(""String_Node_Str"" + basePath.toString());
  try {
    EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
    Files.walkFileTree(basePath,opts,100,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        Date modifiedDate=new Date(attrs.lastModifiedTime().toMillis());
        if (from == null || from.before(modifiedDate)) {
          transferredResourceAdded(FolderMonitorNIO.createTransferredResource(file,basePath),false);
          counter++;
          if (counter >= 1000) {
            try {
              LOGGER.error(""String_Node_Str"");
              index.commit(RodaConstants.INDEX_SIP);
              counter=0;
            }
 catch (            IOException|SolrServerException e) {
              LOGGER.error(e.getMessage(),e);
            }
          }
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
    index.commit(RodaConstants.INDEX_SIP);
    LOGGER.error(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"" + ((System.currentTimeMillis() - start) / 1000) + ""String_Node_Str"");
    RodaCoreFactory.setFolderMonitorDate(basePath,new Date());
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"");
  }
}","public void run(){
  long start=System.currentTimeMillis();
  LOGGER.error(""String_Node_Str"" + basePath.toString());
  try {
    EnumSet<FileVisitOption> opts=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
    Files.walkFileTree(basePath,opts,Integer.MAX_VALUE,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        indexPath(dir,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        indexPath(file,attrs);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
    index.commit(RodaConstants.INDEX_SIP);
    LOGGER.error(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"" + ((System.currentTimeMillis() - start) / 1000) + ""String_Node_Str"");
    RodaCoreFactory.setFolderMonitorDate(basePath,new Date());
  }
 catch (  IOException|SolrServerException e) {
    LOGGER.error(""String_Node_Str"");
  }
}",0.3838071693448702
188811,"@Override public FileVisitResult preVisitDirectory(Path dir,BasicFileAttributes attrs) throws IOException {
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult preVisitDirectory(Path dir,BasicFileAttributes attrs) throws IOException {
  indexPath(dir,attrs);
  return FileVisitResult.CONTINUE;
}",0.9230769230769232
188812,"@Override protected void configureDisplay(final CellTable<TransferredResource> display){
  selectColumn=new Column<TransferredResource,Boolean>(new CheckboxCell(true,false)){
    @Override public Boolean getValue(    TransferredResource resource){
      return getSelected().contains(resource);
    }
  }
;
  selectColumn.setFieldUpdater(new FieldUpdater<TransferredResource,Boolean>(){
    @Override public void update(    int index,    TransferredResource resource,    Boolean isSelected){
      if (isSelected) {
        getSelected().add(resource);
      }
 else {
        getSelected().remove(resource);
      }
      display.redrawHeaders();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  isFileColumn=new Column<TransferredResource,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    TransferredResource r){
      SafeHtml ret;
      if (r == null) {
        logger.error(""String_Node_Str"");
        ret=null;
      }
 else       if (r.isFile()) {
        ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"");
      }
 else {
        ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"");
      }
      return ret;
    }
  }
;
  nameColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null ? r.getName() : null;
    }
  }
;
  sizeColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null ? Humanize.readableFileSize(r.getSize()) : null;
    }
  }
;
  creationDateColumn=new Column<TransferredResource,Date>(new DateCell(DateTimeFormat.getFormat(""String_Node_Str""))){
    @Override public Date getValue(    TransferredResource r){
      return r != null ? r.getCreationDate() : null;
    }
  }
;
  ownerColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null ? r.getOwner() : null;
    }
  }
;
  isFileColumn.setSortable(true);
  nameColumn.setSortable(true);
  sizeColumn.setSortable(true);
  creationDateColumn.setSortable(true);
  ownerColumn.setSortable(true);
  Header<Boolean> selectHeader=new Header<Boolean>(new CheckboxCell(true,true)){
    @Override public Boolean getValue(){
      Boolean ret;
      if (selected.isEmpty()) {
        ret=false;
      }
 else       if (selected.containsAll(getVisibleItems())) {
        ret=true;
      }
 else {
        ret=false;
      }
      return ret;
    }
  }
;
  selectHeader.setUpdater(new ValueUpdater<Boolean>(){
    @Override public void update(    Boolean value){
      if (value) {
        selected.addAll(getVisibleItems());
      }
 else {
        selected.clear();
      }
      redraw();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  addValueChangeHandler(new ValueChangeHandler<IndexResult<TransferredResource>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<TransferredResource>> event){
      selected.clear();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  display.addColumn(selectColumn,selectHeader);
  display.addColumn(isFileColumn,SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  display.addColumn(nameColumn,""String_Node_Str"");
  Header<String> sizeHeader=new TextHeader(""String_Node_Str"");
  Header<String> sizeFooter=new Header<String>(new TextCell()){
    @Override public String getValue(){
      List<TransferredResource> items=display.getVisibleItems();
      if (items.size() == 0) {
        return ""String_Node_Str"";
      }
 else {
        long totalSize=0;
        for (        TransferredResource item : items) {
          totalSize+=item.getSize();
        }
        return Humanize.readableFileSize(totalSize);
      }
    }
  }
;
  display.addColumn(sizeColumn,sizeHeader,sizeFooter);
  display.addColumn(creationDateColumn,""String_Node_Str"");
  display.addColumn(ownerColumn,""String_Node_Str"");
  Label emptyInfo=new Label(""String_Node_Str"");
  display.setEmptyTableWidget(emptyInfo);
  display.setColumnWidth(nameColumn,""String_Node_Str"");
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
  sizeHeader.setHeaderStyleNames(""String_Node_Str"");
  sizeFooter.setHeaderStyleNames(""String_Node_Str"");
  sizeColumn.setCellStyleNames(""String_Node_Str"");
  creationDateColumn.setCellStyleNames(""String_Node_Str"");
  ownerColumn.setCellStyleNames(""String_Node_Str"");
}","@Override protected void configureDisplay(final CellTable<TransferredResource> display){
  selectColumn=new Column<TransferredResource,Boolean>(new CheckboxCell(true,false)){
    @Override public Boolean getValue(    TransferredResource resource){
      return getSelected().contains(resource);
    }
  }
;
  selectColumn.setFieldUpdater(new FieldUpdater<TransferredResource,Boolean>(){
    @Override public void update(    int index,    TransferredResource resource,    Boolean isSelected){
      if (isSelected) {
        getSelected().add(resource);
      }
 else {
        getSelected().remove(resource);
      }
      display.redrawHeaders();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  isFileColumn=new Column<TransferredResource,SafeHtml>(new SafeHtmlCell()){
    @Override public SafeHtml getValue(    TransferredResource r){
      SafeHtml ret;
      if (r == null) {
        logger.error(""String_Node_Str"");
        ret=null;
      }
 else       if (r.isFile()) {
        ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"");
      }
 else {
        ret=SafeHtmlUtils.fromSafeConstant(""String_Node_Str"");
      }
      return ret;
    }
  }
;
  nameColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null ? r.getName() : null;
    }
  }
;
  sizeColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null && r.isFile() ? Humanize.readableFileSize(r.getSize()) : ""String_Node_Str"";
    }
  }
;
  creationDateColumn=new Column<TransferredResource,Date>(new DateCell(DateTimeFormat.getFormat(""String_Node_Str""))){
    @Override public Date getValue(    TransferredResource r){
      return r != null ? r.getCreationDate() : null;
    }
  }
;
  ownerColumn=new TextColumn<TransferredResource>(){
    @Override public String getValue(    TransferredResource r){
      return r != null ? r.getOwner() : null;
    }
  }
;
  isFileColumn.setSortable(true);
  nameColumn.setSortable(true);
  sizeColumn.setSortable(true);
  creationDateColumn.setSortable(true);
  ownerColumn.setSortable(true);
  Header<Boolean> selectHeader=new Header<Boolean>(new CheckboxCell(true,true)){
    @Override public Boolean getValue(){
      Boolean ret;
      if (selected.isEmpty()) {
        ret=false;
      }
 else       if (selected.containsAll(getVisibleItems())) {
        ret=true;
      }
 else {
        ret=false;
      }
      return ret;
    }
  }
;
  selectHeader.setUpdater(new ValueUpdater<Boolean>(){
    @Override public void update(    Boolean value){
      if (value) {
        selected.addAll(getVisibleItems());
      }
 else {
        selected.clear();
      }
      redraw();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  addValueChangeHandler(new ValueChangeHandler<IndexResult<TransferredResource>>(){
    @Override public void onValueChange(    ValueChangeEvent<IndexResult<TransferredResource>> event){
      selected.clear();
      fireOnCheckboxSelectionChanged();
    }
  }
);
  display.addColumn(selectColumn,selectHeader);
  display.addColumn(isFileColumn,SafeHtmlUtils.fromSafeConstant(""String_Node_Str""));
  display.addColumn(nameColumn,""String_Node_Str"");
  Header<String> sizeHeader=new TextHeader(""String_Node_Str"");
  Header<String> sizeFooter=new Header<String>(new TextCell()){
    @Override public String getValue(){
      List<TransferredResource> items=display.getVisibleItems();
      if (items.size() == 0) {
        return ""String_Node_Str"";
      }
 else {
        long totalSize=0;
        for (        TransferredResource item : items) {
          totalSize+=item.getSize();
        }
        return totalSize > 0 ? Humanize.readableFileSize(totalSize) : ""String_Node_Str"";
      }
    }
  }
;
  display.addColumn(sizeColumn,sizeHeader,sizeFooter);
  display.addColumn(creationDateColumn,""String_Node_Str"");
  display.addColumn(ownerColumn,""String_Node_Str"");
  Label emptyInfo=new Label(""String_Node_Str"");
  display.setEmptyTableWidget(emptyInfo);
  display.setColumnWidth(nameColumn,""String_Node_Str"");
  addStyleName(""String_Node_Str"");
  emptyInfo.addStyleName(""String_Node_Str"");
  sizeHeader.setHeaderStyleNames(""String_Node_Str"");
  sizeFooter.setHeaderStyleNames(""String_Node_Str"");
  sizeColumn.setCellStyleNames(""String_Node_Str"");
  creationDateColumn.setCellStyleNames(""String_Node_Str"");
  ownerColumn.setCellStyleNames(""String_Node_Str"");
}",0.9919855514166384
188813,"@Override public String getValue(){
  List<TransferredResource> items=display.getVisibleItems();
  if (items.size() == 0) {
    return ""String_Node_Str"";
  }
 else {
    long totalSize=0;
    for (    TransferredResource item : items) {
      totalSize+=item.getSize();
    }
    return Humanize.readableFileSize(totalSize);
  }
}","@Override public String getValue(){
  List<TransferredResource> items=display.getVisibleItems();
  if (items.size() == 0) {
    return ""String_Node_Str"";
  }
 else {
    long totalSize=0;
    for (    TransferredResource item : items) {
      totalSize+=item.getSize();
    }
    return totalSize > 0 ? Humanize.readableFileSize(totalSize) : ""String_Node_Str"";
  }
}",0.9482758620689656
188814,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  LOGGER.debug(""String_Node_Str"");
  final HttpServletRequest httpRequest=(HttpServletRequest)request;
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  String url=httpRequest.getRequestURL().toString();
  String requestURI=httpRequest.getRequestURI();
  String service=httpRequest.getParameter(""String_Node_Str"");
  String hash=httpRequest.getParameter(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + url);
  LOGGER.debug(""String_Node_Str"" + requestURI);
  LOGGER.debug(""String_Node_Str"" + service);
  LOGGER.debug(""String_Node_Str"" + hash);
  if (requestURI.equals(""String_Node_Str"")) {
    String redirect=""String_Node_Str"";
    if (hash != null) {
      redirect+=Tools.HISTORY_SEP + hash;
    }
    httpResponse.sendRedirect(redirect);
  }
 else   if (requestURI.equals(""String_Node_Str"")) {
    UserUtility.logout(httpRequest);
    httpResponse.sendRedirect(""String_Node_Str"");
  }
 else {
    chain.doFilter(request,response);
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  LOGGER.debug(""String_Node_Str"");
  final HttpServletRequest httpRequest=(HttpServletRequest)request;
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  String url=httpRequest.getRequestURL().toString();
  String requestURI=httpRequest.getRequestURI();
  String service=httpRequest.getParameter(""String_Node_Str"");
  String hash=httpRequest.getParameter(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + url);
  LOGGER.debug(""String_Node_Str"" + requestURI);
  LOGGER.debug(""String_Node_Str"" + service);
  LOGGER.debug(""String_Node_Str"" + hash);
  if (requestURI.equals(""String_Node_Str"")) {
    String redirect=""String_Node_Str"" + Login.RESOLVER.getHistoryToken();
    if (hash != null) {
      redirect+=Tools.HISTORY_SEP + hash;
    }
    httpResponse.sendRedirect(redirect);
  }
 else   if (requestURI.equals(""String_Node_Str"")) {
    UserUtility.logout(httpRequest);
    httpResponse.sendRedirect(""String_Node_Str"" + About.RESOLVER.getHistoryToken());
  }
 else {
    chain.doFilter(request,response);
  }
}",0.969352014010508
188815,"@Override public void run(){
  if (create) {
    notifyPathCreated(basePath,updatedPath);
  }
 else   if (modify) {
    notifyPathModified(basePath,updatedPath);
  }
 else   if (delete) {
    notifyPathDeleted(basePath,updatedPath);
  }
}","@Override public void run(){
  if (kind == ENTRY_CREATE) {
    notifyPathCreated(basePath,updatedPath);
  }
 else   if (kind == ENTRY_MODIFY) {
    notifyPathModified(basePath,updatedPath);
  }
 else   if (kind == ENTRY_DELETE) {
    notifyPathDeleted(basePath,updatedPath);
  }
}",0.583011583011583
188816,"void processEvents(){
  for (; ; ) {
    WatchKey key;
    try {
      key=watcher.poll(timeout,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException x) {
      return;
    }
    Path dir=keys.get(key);
    if (dir == null) {
      continue;
    }
    for (    WatchEvent<?> event : key.pollEvents()) {
      WatchEvent.Kind<?> kind=event.kind();
      if (kind == OVERFLOW) {
        continue;
      }
      WatchEvent<Path> ev=cast(event);
      Path name=ev.context();
      Path child=dir.resolve(name);
      if (recursive && (kind == ENTRY_CREATE)) {
        try {
          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
            registerAll(child,false,null);
          }
        }
 catch (        IOException x) {
        }
      }
      if (kind == ENTRY_CREATE) {
        LOGGER.debug(""String_Node_Str"" + child.toString());
        NotifierThread nt=new NotifierThread(observers,basePath,child,true,false,false);
        executor.execute(nt);
      }
 else       if (kind == ENTRY_MODIFY) {
        LOGGER.debug(""String_Node_Str"" + child.toString());
        NotifierThread nt=new NotifierThread(observers,basePath,child,true,false,false);
        executor.execute(nt);
      }
 else       if (kind == ENTRY_DELETE) {
        LOGGER.debug(""String_Node_Str"" + child.toString());
        NotifierThread nt=new NotifierThread(observers,basePath,child,true,false,false);
        executor.execute(nt);
      }
 else       if (kind == OVERFLOW) {
        LOGGER.debug(""String_Node_Str"");
      }
    }
    boolean valid=key.reset();
    if (!valid) {
      keys.remove(key);
      if (keys.isEmpty()) {
        break;
      }
    }
  }
}","void processEvents(){
  for (; ; ) {
    WatchKey key;
    try {
      key=watcher.poll(timeout,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException x) {
      return;
    }
    Path dir=keys.get(key);
    if (dir == null) {
      continue;
    }
    for (    WatchEvent<?> event : key.pollEvents()) {
      WatchEvent.Kind<?> kind=event.kind();
      if (kind == OVERFLOW) {
        continue;
      }
      WatchEvent<Path> ev=cast(event);
      Path name=ev.context();
      Path child=dir.resolve(name);
      if (recursive && (kind == ENTRY_CREATE)) {
        try {
          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
            registerAll(child,false,null);
          }
        }
 catch (        IOException x) {
        }
      }
      NotifierThread nt=new NotifierThread(observers,basePath,child,kind);
      executor.execute(nt);
    }
    boolean valid=key.reset();
    if (!valid) {
      keys.remove(key);
      if (keys.isEmpty()) {
        break;
      }
    }
  }
}",0.7317993210109393
188817,"public NotifierThread(List<FolderObserver> observers,Path basePath,Path updatedPath,boolean create,boolean modify,boolean delete){
  this.observers=observers;
  this.basePath=basePath;
  this.updatedPath=updatedPath;
  this.create=create;
  this.modify=modify;
  this.delete=delete;
}","public NotifierThread(List<FolderObserver> observers,Path basePath,Path updatedPath,WatchEvent.Kind<?> kind){
  this.observers=observers;
  this.basePath=basePath;
  this.updatedPath=updatedPath;
  this.kind=kind;
}",0.7374749498997996
188818,"@Override public void onClick(ClickEvent event){
  dialogBox.hide();
  callback.onSuccess(null);
}","@Override public void onClick(ClickEvent event){
  dialogBox.hide();
  callback.onSuccess(inputBox.getText());
}",0.9142857142857144
188819,"private IngestSubmit(){
  layout=new TabPanel();
  uploadSIP=new UploadSIP();
  createSIP=new CreateSIP();
  layout.add(createSIP.getWidget(),constants.createTabTitle());
  layout.add(uploadSIP.getWidget(),constants.uploadTabTitle());
  layout.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      String newHistoryToken;
switch (event.getSelectedItem()) {
case 0:
        newHistoryToken=RESOLVER.getHistoryPath() + ""String_Node_Str"";
      break;
case 1:
default :
    newHistoryToken=RESOLVER.getHistoryPath() + ""String_Node_Str"";
  break;
}
if (!History.getToken().equals(newHistoryToken)) {
History.newItem(newHistoryToken);
}
}
}
);
layout.addStyleName(""String_Node_Str"");
}","private IngestSubmit(){
  layout=new TabPanel();
  uploadSIP=new UploadSIP();
  createSIP=new CreateSIP();
  layout.add(createSIP.getWidget(),constants.createTabTitle());
  layout.add(uploadSIP.getWidget(),constants.uploadTabTitle());
  layout.addSelectionHandler(new SelectionHandler<Integer>(){
    @Override public void onSelection(    SelectionEvent<Integer> event){
      String newHistoryToken;
switch (event.getSelectedItem()) {
case 0:
        newHistoryToken=""String_Node_Str"";
      break;
case 1:
default :
    newHistoryToken=""String_Node_Str"";
  break;
}
if (!History.getToken().equals(newHistoryToken)) {
Tools.newHistory(RESOLVER,newHistoryToken);
}
}
}
);
layout.addStyleName(""String_Node_Str"");
}",0.6739130434782609
188820,"@Override public void onSelection(SelectionEvent<Integer> event){
  String newHistoryToken;
switch (event.getSelectedItem()) {
case 0:
    newHistoryToken=RESOLVER.getHistoryPath() + ""String_Node_Str"";
  break;
case 1:
default :
newHistoryToken=RESOLVER.getHistoryPath() + ""String_Node_Str"";
break;
}
if (!History.getToken().equals(newHistoryToken)) {
History.newItem(newHistoryToken);
}
}","@Override public void onSelection(SelectionEvent<Integer> event){
  String newHistoryToken;
switch (event.getSelectedItem()) {
case 0:
    newHistoryToken=""String_Node_Str"";
  break;
case 1:
default :
newHistoryToken=""String_Node_Str"";
break;
}
if (!History.getToken().equals(newHistoryToken)) {
Tools.newHistory(RESOLVER,newHistoryToken);
}
}",0.4590163934426229
188821,"/** 
 * @see Filter#doFilter(ServletRequest,ServletResponse,FilterChain)
 */
@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  boolean doFilter=true;
  logger.debug(""String_Node_Str"");
  if (request.getParameter(""String_Node_Str"") != null) {
    logger.debug(""String_Node_Str"");
    HttpServletRequest servletRequest=(HttpServletRequest)request;
    HttpServletResponse servletResponse=(HttpServletResponse)response;
    try {
      String ticket=request.getParameter(""String_Node_Str"");
      String cleanURL=getCleanURL(servletRequest);
      UserUtility.loginCas(servletRequest,cleanURL.toString(),ticket,new URL(casURL),new URL(coreURL));
      doFilter=false;
      logger.debug(""String_Node_Str"" + cleanURL.toString());
      servletResponse.sendRedirect(cleanURL.toString());
    }
 catch (    AuthenticationException e) {
      e.printStackTrace();
    }
  }
 else {
    HttpServletRequest servletRequest=(HttpServletRequest)request;
    HttpServletResponse servletResponse=(HttpServletResponse)response;
    if (servletRequest.getRequestURI().trim().equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"");
      try {
        UserLoginServiceImpl.getInstance().logout();
      }
 catch (      Exception e) {
      }
      String cleanURL=getCleanURL(servletRequest);
      String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLoginURL,""String_Node_Str"",cleanURL,false,false);
      if (!this.gatewayStorage.hasGatewayedAlready(servletRequest,urlToRedirectTo)) {
        urlToRedirectTo=this.gatewayStorage.storeGatewayInformation(servletRequest,urlToRedirectTo);
        doFilter=false;
        servletResponse.sendRedirect(urlToRedirectTo);
      }
 else {
        doFilter=false;
        servletResponse.sendRedirect(""String_Node_Str"");
      }
    }
 else     if (servletRequest.getRequestURI().trim().equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"");
      String cleanURL=getCleanURL(servletRequest);
      UserUtility.logout(servletRequest,new URL(casURL),new URL(coreURL));
      String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLogoutURL,""String_Node_Str"",cleanURL,false,false);
      doFilter=false;
      servletResponse.sendRedirect(urlToRedirectTo);
    }
 else {
      CASUserPrincipal cup=UserUtility.getUser(servletRequest);
      if (cup != null) {
        if (UserUtility.haveSessionActive(casUtility,servletRequest)) {
          String cleanURL=getCleanURL(servletRequest);
          String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLoginURL,""String_Node_Str"",cleanURL,false,false);
          if (!this.gatewayStorage.hasGatewayedAlready(servletRequest,urlToRedirectTo)) {
            urlToRedirectTo=this.gatewayStorage.storeGatewayInformation(servletRequest,urlToRedirectTo);
            doFilter=false;
            servletResponse.sendRedirect(urlToRedirectTo);
          }
 else {
            doFilter=false;
            servletResponse.sendRedirect(""String_Node_Str"");
          }
        }
      }
 else {
        try {
          CASUserPrincipal guestCUP=this.casUtility.getCASUserPrincipal(guestUsername,guestPassword,""String_Node_Str"");
          guestCUP.setGuest(true);
          UserLoginServiceImpl.getInstance().loginCUP(servletRequest,guestCUP);
        }
 catch (        Exception e) {
        }
      }
    }
    if (doFilter) {
      chain.doFilter(servletRequest,servletResponse);
    }
  }
}","/** 
 * @see Filter#doFilter(ServletRequest,ServletResponse,FilterChain)
 */
@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  boolean doFilter=true;
  logger.debug(""String_Node_Str"");
  if (request.getParameter(""String_Node_Str"") != null) {
    logger.debug(""String_Node_Str"");
    HttpServletRequest servletRequest=(HttpServletRequest)request;
    HttpServletResponse servletResponse=(HttpServletResponse)response;
    try {
      String ticket=request.getParameter(""String_Node_Str"");
      String cleanURL=getCleanURL(servletRequest);
      UserUtility.loginCas(servletRequest,cleanURL.toString(),ticket,new URL(casURL),new URL(coreURL));
      doFilter=false;
      logger.debug(""String_Node_Str"" + cleanURL.toString());
      servletResponse.sendRedirect(cleanURL.toString());
    }
 catch (    AuthenticationException e) {
      e.printStackTrace();
    }
  }
 else {
    HttpServletRequest servletRequest=(HttpServletRequest)request;
    HttpServletResponse servletResponse=(HttpServletResponse)response;
    if (servletRequest.getRequestURI().trim().equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"");
      try {
        UserLoginServiceImpl.getInstance().logout();
      }
 catch (      Exception e) {
      }
      String cleanURL=getCleanURL(servletRequest);
      String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLoginURL,""String_Node_Str"",cleanURL,false,false);
      if (!this.gatewayStorage.hasGatewayedAlready(servletRequest,urlToRedirectTo)) {
        urlToRedirectTo=this.gatewayStorage.storeGatewayInformation(servletRequest,urlToRedirectTo);
        doFilter=false;
        servletResponse.sendRedirect(urlToRedirectTo);
      }
 else {
        doFilter=false;
        servletResponse.sendRedirect(""String_Node_Str"");
      }
    }
 else     if (servletRequest.getRequestURI().trim().equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"");
      String cleanURL=getCleanURL(servletRequest);
      UserUtility.logout(servletRequest,new URL(casURL),new URL(coreURL));
      String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLogoutURL,""String_Node_Str"",cleanURL,false,false);
      doFilter=false;
      servletResponse.sendRedirect(urlToRedirectTo);
    }
 else {
      CASUserPrincipal cup=UserUtility.getUser(servletRequest);
      if (cup != null) {
        try {
          logger.debug(""String_Node_Str"");
          CASUserPrincipal cupUpdated=this.casUtility.getCASUserPrincipalFromProxyGrantingTicket(cup.getProxyGrantingTicket(),""String_Node_Str"");
          cupUpdated.setGuest(cup.isGuest());
          UserUtility.setUser(servletRequest,cupUpdated);
        }
 catch (        Exception e) {
          String cleanURL=getCleanURL(servletRequest);
          String urlToRedirectTo=CommonUtils.constructRedirectUrl(casLoginURL,""String_Node_Str"",cleanURL,false,false);
          if (!this.gatewayStorage.hasGatewayedAlready(servletRequest,urlToRedirectTo)) {
            urlToRedirectTo=this.gatewayStorage.storeGatewayInformation(servletRequest,urlToRedirectTo);
            doFilter=false;
            servletResponse.sendRedirect(urlToRedirectTo);
          }
 else {
            doFilter=false;
            servletResponse.sendRedirect(""String_Node_Str"");
          }
        }
      }
 else {
        try {
          CASUserPrincipal guestCUP=this.casUtility.getCASUserPrincipal(guestUsername,guestPassword,""String_Node_Str"");
          guestCUP.setGuest(true);
          UserLoginServiceImpl.getInstance().loginCUP(servletRequest,guestCUP);
        }
 catch (        Exception e) {
        }
      }
    }
    if (doFilter) {
      chain.doFilter(servletRequest,servletResponse);
    }
  }
}",0.9508376819555068
188822,"/** 
 * @throws RODAServiceException
 */
public AbstractSynchronousConverter() throws RODAServiceException {
  super();
  String rodaServicesURL=getConfiguration().getString(""String_Node_Str"");
  String username=getClientUser().getName();
  String password=getClientUserPassword();
  String casURL=getConfiguration().getString(""String_Node_Str"");
  String coreURL=getConfiguration().getString(""String_Node_Str"");
  CASUserPrincipal cup=null;
  CASUtility casUtility=null;
  try {
    casUtility=new CASUtility(new URL(casURL),new URL(coreURL));
  }
 catch (  Throwable e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    cup=casUtility.getCASUserPrincipal(username,password);
  }
 catch (  Exception e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    this.rodaDownloader=new Downloader(new URL(rodaServicesURL),cup,casUtility);
  }
 catch (  DownloaderException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    rodaClient=new RODAClient(new URL(rodaServicesURL),cup,casUtility);
  }
 catch (  RODAClientException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * @throws RODAServiceException
 */
public AbstractSynchronousConverter() throws RODAServiceException {
  super();
  String rodaServicesURL=getConfiguration().getString(""String_Node_Str"");
  String username=getClientUser().getName();
  String password=getClientUserPassword();
  String casURL=getConfiguration().getString(""String_Node_Str"");
  String coreURL=getConfiguration().getString(""String_Node_Str"");
  CASUserPrincipal cup=null;
  CASUtility casUtility=null;
  try {
    casUtility=new CASUtility(new URL(casURL),new URL(coreURL));
  }
 catch (  Throwable e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    cup=casUtility.getCASUserPrincipal(username,password,""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    this.rodaDownloader=new Downloader(new URL(rodaServicesURL),cup,casUtility);
  }
 catch (  DownloaderException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    rodaClient=new RODAClient(new URL(rodaServicesURL),cup,casUtility);
  }
 catch (  RODAClientException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    throw new RODAServiceException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9938650306748468
188823,"public static String preservationObjectFromStorageToHtml(SimplePreservationMetadata object,ModelService model,Locale locale) throws ModelServiceException {
  try {
    if (locale == null) {
      locale=new Locale(""String_Node_Str"",""String_Node_Str"");
    }
    StoragePath storagePath=ModelUtils.getPreservationFilePath(object.getAipId(),object.getRepresentationId(),object.getFileId());
    Binary binary=model.getStorage().getBinary(storagePath);
    InputStream inputStream=binary.getContent().createInputStream();
    Reader descMetadataReader=new InputStreamReader(inputStream);
    InputStream transformerStream=getStylesheetInputStream(""String_Node_Str"",locale,""String_Node_Str"");
    Reader xsltReader=new InputStreamReader(transformerStream);
    CharArrayWriter transformerResult=new CharArrayWriter();
    Map<String,String> stylesheetOpt=new HashMap<String,String>();
    stylesheetOpt.put(""String_Node_Str"",RodaConstants.INDEX_OTHER_DESCRIPTIVE_DATA_PREFIX);
    RodaUtils.applyStylesheet(xsltReader,descMetadataReader,stylesheetOpt,transformerResult);
    descMetadataReader.close();
    return transformerResult.toString();
  }
 catch (  StorageActionException|TransformerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ModelServiceException(""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR,e);
  }
}","public static String preservationObjectFromStorageToHtml(SimplePreservationMetadata object,ModelService model,Locale locale) throws ModelServiceException {
  try {
    if (locale == null) {
      locale=new Locale(""String_Node_Str"",""String_Node_Str"");
    }
    StoragePath storagePath=ModelUtils.getPreservationFilePath(object.getAipId(),object.getRepresentationId(),object.getFileId());
    Binary binary=model.getStorage().getBinary(storagePath);
    InputStream inputStream=binary.getContent().createInputStream();
    Reader descMetadataReader=new InputStreamReader(inputStream);
    InputStream transformerStream=getStylesheetInputStream(""String_Node_Str"",locale,""String_Node_Str"");
    Reader xsltReader=new InputStreamReader(transformerStream);
    CharArrayWriter transformerResult=new CharArrayWriter();
    Map<String,String> stylesheetOpt=new HashMap<String,String>();
    stylesheetOpt.put(""String_Node_Str"",RodaConstants.INDEX_OTHER_DESCRIPTIVE_DATA_PREFIX);
    RodaUtils.applyStylesheet(xsltReader,descMetadataReader,stylesheetOpt,transformerResult);
    descMetadataReader.close();
    return transformerResult.toString();
  }
 catch (  StorageServiceException|TransformerException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ModelServiceException(""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR,e);
  }
}",0.995225853837679
188824,"/** 
 * Validates descriptive medatada (e.g. against its schema, but other strategies may be used)
 */
public static boolean isDescriptiveMetadataValid(ModelService model,DescriptiveMetadata metadata) throws ModelServiceException {
  boolean valid=false;
  try {
    StoragePath storagePath=metadata.getStoragePath();
    Binary binary=model.getStorage().getBinary(storagePath);
    InputStream inputStream=binary.getContent().createInputStream();
    String filename=binary.getStoragePath().getName();
    ClassLoader classLoader=SolrUtils.class.getClassLoader();
    InputStream schemaStream=classLoader.getResourceAsStream(""String_Node_Str"" + filename + ""String_Node_Str"");
    if (schemaStream == null) {
      throw new ModelServiceException(""String_Node_Str"" + filename,ModelServiceException.INTERNAL_SERVER_ERROR);
    }
    Source xmlFile=new StreamSource(inputStream);
    SchemaFactory schemaFactory=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema schema=schemaFactory.newSchema(new StreamSource(schemaStream));
    Validator validator=schema.newValidator();
    try {
      validator.validate(xmlFile);
      valid=true;
    }
 catch (    SAXException e) {
      LOGGER.error(""String_Node_Str"" + metadata.getStoragePath().asString());
    }
  }
 catch (  StorageActionException|SAXException|IOException e) {
    throw new ModelServiceException(""String_Node_Str"" + metadata.getStoragePath().asString(),ModelServiceException.INTERNAL_SERVER_ERROR,e);
  }
  return valid;
}","/** 
 * Validates descriptive medatada (e.g. against its schema, but other strategies may be used)
 * @param failIfNoSchema
 */
public static boolean isDescriptiveMetadataValid(ModelService model,DescriptiveMetadata metadata,boolean failIfNoSchema) throws ModelServiceException {
  boolean valid;
  try {
    StoragePath storagePath=metadata.getStoragePath();
    Binary binary=model.getStorage().getBinary(storagePath);
    InputStream inputStream=binary.getContent().createInputStream();
    String filename=binary.getStoragePath().getName();
    ClassLoader classLoader=SolrUtils.class.getClassLoader();
    InputStream schemaStream=classLoader.getResourceAsStream(""String_Node_Str"" + filename + ""String_Node_Str"");
    if (schemaStream != null) {
      Source xmlFile=new StreamSource(inputStream);
      SchemaFactory schemaFactory=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
      Schema schema=schemaFactory.newSchema(new StreamSource(schemaStream));
      Validator validator=schema.newValidator();
      try {
        validator.validate(xmlFile);
        valid=true;
      }
 catch (      SAXException e) {
        valid=false;
        LOGGER.error(""String_Node_Str"" + metadata.getStoragePath().asString());
      }
    }
 else {
      if (failIfNoSchema) {
        throw new ModelServiceException(""String_Node_Str"" + filename,ModelServiceException.INTERNAL_SERVER_ERROR);
      }
 else {
        valid=true;
      }
    }
  }
 catch (  StorageServiceException|SAXException|IOException e) {
    throw new ModelServiceException(""String_Node_Str"" + metadata.getStoragePath().asString(),ModelServiceException.INTERNAL_SERVER_ERROR,e);
  }
  return valid;
}",0.396584440227704
188825,"/** 
 * Validates all descriptive metadata files contained in the AIP
 */
public static boolean isAIPDescriptiveMetadataValid(ModelService model,String aipId) throws ModelServiceException {
  boolean valid=true;
  ClosableIterable<DescriptiveMetadata> descriptiveMetadataBinaries=model.listDescriptiveMetadataBinaries(aipId);
  try {
    for (    DescriptiveMetadata descriptiveMetadata : descriptiveMetadataBinaries) {
      if (!isDescriptiveMetadataValid(model,descriptiveMetadata)) {
        valid=false;
        break;
      }
    }
  }
  finally {
    try {
      descriptiveMetadataBinaries.close();
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return valid;
}","/** 
 * Validates all descriptive metadata files contained in the AIP
 */
public static boolean isAIPDescriptiveMetadataValid(ModelService model,String aipId,boolean failIfNoSchema) throws ModelServiceException {
  boolean valid=true;
  ClosableIterable<DescriptiveMetadata> descriptiveMetadataBinaries=model.listDescriptiveMetadataBinaries(aipId);
  try {
    for (    DescriptiveMetadata descriptiveMetadata : descriptiveMetadataBinaries) {
      if (!isDescriptiveMetadataValid(model,descriptiveMetadata,failIfNoSchema)) {
        valid=false;
        break;
      }
    }
  }
  finally {
    try {
      descriptiveMetadataBinaries.close();
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return valid;
}",0.9739368998628258
188826,"private void indexAIPandSDO(final AIP aip){
  try {
    SolrInputDocument aipDoc=SolrUtils.aipToSolrInputDocument(aip);
    SolrInputDocument sdoDoc=SolrUtils.aipToSolrInputDocumentAsSDO(aip,model);
    index.add(RodaConstants.INDEX_AIP,aipDoc);
    LOGGER.debug(""String_Node_Str"" + sdoDoc);
    index.add(RodaConstants.INDEX_SDO,sdoDoc);
  }
 catch (  SolrServerException|IOException|ModelServiceException|StorageActionException|IndexActionException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void indexAIPandSDO(final AIP aip){
  try {
    SolrInputDocument aipDoc=SolrUtils.aipToSolrInputDocument(aip);
    SolrInputDocument sdoDoc=SolrUtils.aipToSolrInputDocumentAsSDO(aip,model);
    index.add(RodaConstants.INDEX_AIP,aipDoc);
    index.commit(RodaConstants.INDEX_AIP);
    LOGGER.debug(""String_Node_Str"" + sdoDoc);
    index.add(RodaConstants.INDEX_SDO,sdoDoc);
    index.commit(RodaConstants.INDEX_SDO);
  }
 catch (  SolrServerException|IOException|ModelServiceException|StorageServiceException|IndexServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.8970588235294118
188827,"private void ensureAllContainersExist(){
  try {
    storage.createContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),new HashMap<String,Set<String>>());
  }
 catch (  StorageServiceException e) {
    if (e.getCode() != StorageServiceException.ALREADY_EXISTS) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","private void ensureAllContainersExist(){
  try {
    storage.createContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),new HashMap<String,Set<String>>());
  }
 catch (  StorageServiceException e) {
    if (e.getCode() != StorageServiceException.ALREADY_EXISTS) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  try {
    storage.createContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_SIP_STATE),new HashMap<String,Set<String>>());
  }
 catch (  StorageServiceException e) {
    if (e.getCode() != StorageServiceException.ALREADY_EXISTS) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.6952089704383282
188828,"@BeforeClass public static void setUp() throws IOException, StorageServiceException, URISyntaxException, ModelServiceException {
  basePath=Files.createTempDirectory(""String_Node_Str"");
  logPath=basePath.resolve(""String_Node_Str"");
  Files.createDirectories(logPath);
  storage=new FileStorageService(basePath);
  model=new ModelService(storage);
  URL corporaURL=ModelServiceTest.class.getResource(""String_Node_Str"");
  corporaPath=Paths.get(corporaURL.toURI());
  corporaService=new FileStorageService(corporaPath);
  logger.debug(""String_Node_Str"" + basePath);
}","@BeforeClass public static void setUp() throws IOException, StorageServiceException, URISyntaxException, ModelServiceException {
  basePath=Files.createTempDirectory(""String_Node_Str"");
  logPath=basePath.resolve(""String_Node_Str"");
  storage=new FileStorageService(basePath);
  model=new ModelService(storage);
  URL corporaURL=ModelServiceTest.class.getResource(""String_Node_Str"");
  corporaPath=Paths.get(corporaURL.toURI());
  corporaService=new FileStorageService(corporaPath);
  logger.debug(""String_Node_Str"" + basePath);
}",0.9671532846715328
188829,"@Test public void createSIPState() throws ModelServiceException, StorageActionException {
  SIPState state=new SIPState();
  state.setComplete(true);
  state.setCompletePercentage(99.9F);
  state.setDatetime(new Date());
  state.setFileID(""String_Node_Str"");
  state.setId(""String_Node_Str"");
  state.setIngestedID(""String_Node_Str"");
  state.setOriginalFilename(""String_Node_Str"");
  state.setParentID(""String_Node_Str"");
  state.setProcessing(false);
  state.setState(""String_Node_Str"");
  SIPStateTransition[] stateTransitions=new SIPStateTransition[2];
  SIPStateTransition st1=new SIPStateTransition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(),""String_Node_Str"",true,""String_Node_Str"");
  SIPStateTransition st2=new SIPStateTransition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(),""String_Node_Str"",false,""String_Node_Str"");
  stateTransitions[0]=st1;
  stateTransitions[1]=st2;
  state.setStateTransitions(stateTransitions);
  state.setUsername(""String_Node_Str"");
  model.addSipState(state);
}","@Test public void createSIPState() throws ModelServiceException, StorageServiceException {
  SIPState state=new SIPState();
  state.setComplete(true);
  state.setCompletePercentage(99.9F);
  state.setDatetime(new Date());
  state.setFileID(""String_Node_Str"");
  state.setId(""String_Node_Str"");
  state.setIngestedID(""String_Node_Str"");
  state.setOriginalFilename(""String_Node_Str"");
  state.setParentID(""String_Node_Str"");
  state.setProcessing(false);
  state.setState(""String_Node_Str"");
  SIPStateTransition[] stateTransitions=new SIPStateTransition[2];
  SIPStateTransition st1=new SIPStateTransition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(),""String_Node_Str"",true,""String_Node_Str"");
  SIPStateTransition st2=new SIPStateTransition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(),""String_Node_Str"",false,""String_Node_Str"");
  stateTransitions[0]=st1;
  stateTransitions[1]=st2;
  state.setStateTransitions(stateTransitions);
  state.setUsername(""String_Node_Str"");
  model.addSipState(state);
}",0.9947140797693416
188830,"@Test public void createLogEntry() throws ModelServiceException {
  LogEntry entry=new LogEntry();
  entry.setActionComponent(""String_Node_Str"");
  entry.setActionMethod(""String_Node_Str"");
  entry.setAddress(""String_Node_Str"");
  entry.setId(""String_Node_Str"");
  entry.setDatetime(new Date());
  List<LogEntryParameter> parameters=new ArrayList<LogEntryParameter>();
  parameters.add(new LogEntryParameter(""String_Node_Str"",""String_Node_Str""));
  parameters.add(new LogEntryParameter(""String_Node_Str"",""String_Node_Str""));
  entry.setParameters(parameters);
  model.addLogEntry(entry,logPath);
}","@Test public void createLogEntry() throws ModelServiceException {
  createLogActionDirectory();
  LogEntry entry=new LogEntry();
  entry.setActionComponent(""String_Node_Str"");
  entry.setActionMethod(""String_Node_Str"");
  entry.setAddress(""String_Node_Str"");
  entry.setId(""String_Node_Str"");
  entry.setDatetime(new Date());
  List<LogEntryParameter> parameters=new ArrayList<LogEntryParameter>();
  parameters.add(new LogEntryParameter(""String_Node_Str"",""String_Node_Str""));
  parameters.add(new LogEntryParameter(""String_Node_Str"",""String_Node_Str""));
  entry.setParameters(parameters);
  model.addLogEntry(entry,logPath);
}",0.9754901960784312
188831,"private static SIPReport solrDocumentToSipState(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.SIPSTATE_ID));
  final String username=objectToString(doc.get(RodaConstants.SIPSTATE_USERNAME));
  final String originalFilename=objectToString(doc.get(RodaConstants.SIPSTATE_ORIGINAL_FILENAME));
  final String state=objectToString(doc.get(RodaConstants.SIPSTATE_STATE));
  final Date dateTime=objectToDate(doc.get(RodaConstants.SIPSTATE_DATETIME));
  final boolean processing=objectToBoolean(doc.get(RodaConstants.SIPSTATE_PROCESSING));
  final boolean complete=objectToBoolean(doc.get(RodaConstants.SIPSTATE_COMPLETE));
  final float completePercentage=objectToFloat(doc.get(RodaConstants.SIPSTATE_COMPLETE_PERCENTAGE));
  final String parentPID=objectToString(doc.get(RodaConstants.SIPSTATE_PARENT_PID));
  final String ingestedPID=objectToString(doc.get(RodaConstants.SIPSTATE_INGESTED_PID));
  final String fileID=objectToString(doc.get(RodaConstants.SIPSTATE_FILE_ID));
  List<SIPStateTransition> ssts=new ArrayList<SIPStateTransition>();
  SIPReport sipState=new SIPReport();
  sipState.setId(id);
  sipState.setUsername(username);
  sipState.setOriginalFilename(originalFilename);
  sipState.setState(state);
  sipState.setDatetime(dateTime);
  sipState.setProcessing(processing);
  sipState.setComplete(complete);
  sipState.setCompletePercentage(completePercentage);
  sipState.setParentID(parentPID);
  sipState.setIngestedID(ingestedPID);
  sipState.setFileID(fileID);
  sipState.setStateTransitions(ssts.toArray(new SIPStateTransition[ssts.size()]));
  return sipState;
}","private static SIPReport solrDocumentToSipState(SolrDocument doc){
  final String id=objectToString(doc.get(RodaConstants.SIP_REPORT_ID));
  final String username=objectToString(doc.get(RodaConstants.SIP_REPORT_USERNAME));
  final String originalFilename=objectToString(doc.get(RodaConstants.SIP_REPORT_ORIGINAL_FILENAME));
  final String state=objectToString(doc.get(RodaConstants.SIP_REPORT_STATE));
  final Date dateTime=objectToDate(doc.get(RodaConstants.SIP_REPORT_DATETIME));
  final boolean processing=objectToBoolean(doc.get(RodaConstants.SIP_REPORT_PROCESSING));
  final boolean complete=objectToBoolean(doc.get(RodaConstants.SIP_REPORT_COMPLETE));
  final float completePercentage=objectToFloat(doc.get(RodaConstants.SIP_REPORT_COMPLETE_PERCENTAGE));
  final String parentPID=objectToString(doc.get(RodaConstants.SIP_REPORT_PARENT_PID));
  final String ingestedPID=objectToString(doc.get(RodaConstants.SIP_REPORT_INGESTED_PID));
  final String fileID=objectToString(doc.get(RodaConstants.SIP_REPORT_FILE_ID));
  List<SIPStateTransition> ssts=new ArrayList<SIPStateTransition>();
  SIPReport sipState=new SIPReport();
  sipState.setId(id);
  sipState.setUsername(username);
  sipState.setOriginalFilename(originalFilename);
  sipState.setState(state);
  sipState.setDatetime(dateTime);
  sipState.setProcessing(processing);
  sipState.setComplete(complete);
  sipState.setCompletePercentage(completePercentage);
  sipState.setParentID(parentPID);
  sipState.setIngestedID(ingestedPID);
  sipState.setFileID(fileID);
  sipState.setStateTransitions(ssts.toArray(new SIPStateTransition[ssts.size()]));
  return sipState;
}",0.9591836734693876
188832,"protected void notifySipStateCreated(SIPReport state){
  for (  ModelObserver observer : observers) {
    observer.sipStateCreated(state);
  }
}","protected void notifySipStateCreated(SIPReport state){
  for (  ModelObserver observer : observers) {
    observer.sipReportCreated(state);
  }
}",0.9688581314878892
188833,"private Representation convertResourceToRepresentation(Resource resource) throws ModelServiceException {
  if (resource instanceof DefaultDirectory) {
    StoragePath directoryPath=resource.getStoragePath();
    Map<String,Set<String>> directoryMetadata=resource.getMetadata();
    Boolean active=ModelUtils.getBoolean(directoryMetadata,RodaConstants.STORAGE_META_ACTIVE);
    Date dateCreated=ModelUtils.getDate(directoryMetadata,RodaConstants.STORAGE_META_DATE_CREATED);
    Date dateModified=ModelUtils.getDate(directoryMetadata,RodaConstants.STORAGE_META_DATE_MODIFIED);
    Set<RepresentationState> statuses=ModelUtils.getStatuses(directoryMetadata);
    String type=ModelUtils.getString(directoryMetadata,RodaConstants.STORAGE_META_TYPE);
    List<String> fileIds=new ArrayList<String>();
    try {
      fileIds=ModelUtils.getIds(storage,resource.getStoragePath());
    }
 catch (    StorageServiceException e) {
      LOGGER.error(""String_Node_Str"" + directoryPath.asString());
    }
    if (active == null) {
      active=false;
    }
    return new Representation(directoryPath.getName(),ModelUtils.getAIPidFromStoragePath(directoryPath),active,dateCreated,dateModified,statuses,type,fileIds);
  }
 else {
    throw new ModelServiceException(""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR);
  }
}","private Representation convertResourceToRepresentation(Resource resource) throws ModelServiceException {
  if (resource instanceof DefaultDirectory) {
    StoragePath directoryPath=resource.getStoragePath();
    Map<String,Set<String>> directoryMetadata=resource.getMetadata();
    Boolean active=ModelUtils.getBoolean(directoryMetadata,RodaConstants.STORAGE_META_ACTIVE);
    Date dateCreated=ModelUtils.getDate(directoryMetadata,RodaConstants.STORAGE_META_DATE_CREATED);
    Date dateModified=ModelUtils.getDate(directoryMetadata,RodaConstants.STORAGE_META_DATE_MODIFIED);
    Set<RepresentationState> statuses=ModelUtils.getStatuses(directoryMetadata);
    String type=ModelUtils.getString(directoryMetadata,RodaConstants.STORAGE_META_TYPE);
    List<String> fileIds=ModelUtils.getChildIds(storage,resource.getStoragePath(),true);
    if (active == null) {
      active=false;
    }
    return new Representation(directoryPath.getName(),ModelUtils.getAIPidFromStoragePath(directoryPath),active,dateCreated,dateModified,statuses,type,fileIds);
  }
 else {
    throw new ModelServiceException(""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR);
  }
}",0.788244766505636
188834,"private void retrieveAIPPreservationInformation(StoragePath storagePath,List<String> representationIds,final Map<String,List<String>> preservationRepresentationObjects,final Map<String,List<String>> preservationFileObjects,final Map<String,List<String>> preservationEvents){
  for (  String representationID : representationIds) {
    try {
      StoragePath representationPreservationPath=ModelUtils.getPreservationPath(storagePath.getName(),representationID);
      List<String> preservationFileIds=ModelUtils.getIds(storage,representationPreservationPath);
      final List<String> preservationRepresentationObjectFileIds=new ArrayList<String>();
      final List<String> preservationFileObjectFileIds=new ArrayList<String>();
      final List<String> preservationEventFileIds=new ArrayList<String>();
      for (      String preservationFileId : preservationFileIds) {
        StoragePath binaryPath=ModelUtils.getPreservationFilePath(storagePath.getName(),representationID,preservationFileId);
        Binary preservationBinary=storage.getBinary(binaryPath);
        if (ModelUtils.isPreservationRepresentationObject(preservationBinary)) {
          preservationRepresentationObjectFileIds.add(preservationFileId);
        }
 else         if (ModelUtils.isPreservationEvent(preservationBinary)) {
          preservationEventFileIds.add(preservationFileId);
        }
 else         if (ModelUtils.isPreservationFileObject(preservationBinary)) {
          preservationFileObjectFileIds.add(preservationFileId);
        }
 else {
          LOGGER.warn(""String_Node_Str"",binaryPath.asString());
        }
      }
      preservationRepresentationObjects.put(representationID,preservationRepresentationObjectFileIds);
      preservationFileObjects.put(representationID,preservationFileObjectFileIds);
      preservationEvents.put(representationID,preservationEventFileIds);
    }
 catch (    StorageServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","private void retrieveAIPPreservationInformation(StoragePath storagePath,List<String> representationIds,final Map<String,List<String>> preservationRepresentationObjects,final Map<String,List<String>> preservationFileObjects,final Map<String,List<String>> preservationEvents) throws ModelServiceException {
  for (  String representationID : representationIds) {
    try {
      StoragePath representationPreservationPath=ModelUtils.getPreservationPath(storagePath.getName(),representationID);
      List<String> preservationFileIds=ModelUtils.getChildIds(storage,representationPreservationPath,false);
      final List<String> preservationRepresentationObjectFileIds=new ArrayList<String>();
      final List<String> preservationFileObjectFileIds=new ArrayList<String>();
      final List<String> preservationEventFileIds=new ArrayList<String>();
      for (      String preservationFileId : preservationFileIds) {
        StoragePath binaryPath=ModelUtils.getPreservationFilePath(storagePath.getName(),representationID,preservationFileId);
        Binary preservationBinary=storage.getBinary(binaryPath);
        if (ModelUtils.isPreservationRepresentationObject(preservationBinary)) {
          preservationRepresentationObjectFileIds.add(preservationFileId);
        }
 else         if (ModelUtils.isPreservationEvent(preservationBinary)) {
          preservationEventFileIds.add(preservationFileId);
        }
 else         if (ModelUtils.isPreservationFileObject(preservationBinary)) {
          preservationFileObjectFileIds.add(preservationFileId);
        }
 else {
          LOGGER.warn(""String_Node_Str"",binaryPath.asString());
        }
      }
      preservationRepresentationObjects.put(representationID,preservationRepresentationObjectFileIds);
      preservationFileObjects.put(representationID,preservationFileObjectFileIds);
      preservationEvents.put(representationID,preservationEventFileIds);
    }
 catch (    StorageServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new ModelServiceException(""String_Node_Str"",e.getCode(),e);
    }
  }
}",0.9721469065812176
188835,"private AIP convertResourceToAIP(Resource resource) throws ModelServiceException {
  AIP aip;
  if (resource instanceof DefaultDirectory) {
    StoragePath storagePath=resource.getStoragePath();
    Map<String,Set<String>> metadata=resource.getMetadata();
    String parentId=ModelUtils.getString(metadata,RodaConstants.STORAGE_META_PARENT_ID);
    Boolean active=ModelUtils.getBoolean(metadata,RodaConstants.STORAGE_META_ACTIVE);
    Date dateCreated=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_CREATED);
    Date dateModified=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_MODIFIED);
    RODAObjectPermissions permissions=getPermissions(metadata);
    if (active == null) {
      active=false;
    }
    try {
      List<String> descriptiveMetadataBinaryIds=ModelUtils.getIds(storage,ModelUtils.getDescriptiveMetadataPath(storagePath.getName()));
      List<String> representationIds=ModelUtils.getIds(storage,ModelUtils.getRepresentationsPath(storagePath.getName()));
      final Map<String,List<String>> preservationRepresentationObjects=new HashMap<String,List<String>>();
      final Map<String,List<String>> preservationFileObjects=new HashMap<String,List<String>>();
      final Map<String,List<String>> preservationEvents=new HashMap<String,List<String>>();
      retrieveAIPPreservationInformation(storagePath,representationIds,preservationRepresentationObjects,preservationFileObjects,preservationEvents);
      aip=new AIP(storagePath.getName(),parentId,active,dateCreated,dateModified,permissions,descriptiveMetadataBinaryIds,representationIds,preservationRepresentationObjects,preservationEvents,preservationFileObjects);
    }
 catch (    StorageServiceException e) {
      throw new ModelServiceException(""String_Node_Str"",e.getCode(),e);
    }
  }
 else {
    throw new ModelServiceException(""String_Node_Str"" + resource + ""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR);
  }
  return aip;
}","private AIP convertResourceToAIP(Resource resource) throws ModelServiceException {
  AIP aip;
  if (resource instanceof DefaultDirectory) {
    StoragePath storagePath=resource.getStoragePath();
    Map<String,Set<String>> metadata=resource.getMetadata();
    String parentId=ModelUtils.getString(metadata,RodaConstants.STORAGE_META_PARENT_ID);
    Boolean active=ModelUtils.getBoolean(metadata,RodaConstants.STORAGE_META_ACTIVE);
    Date dateCreated=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_CREATED);
    Date dateModified=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_MODIFIED);
    RODAObjectPermissions permissions=getPermissions(metadata);
    if (active == null) {
      active=false;
    }
    try {
      List<String> descriptiveMetadataBinaryIds=ModelUtils.getChildIds(storage,ModelUtils.getDescriptiveMetadataPath(storagePath.getName()),false);
      List<String> representationIds=ModelUtils.getChildIds(storage,ModelUtils.getRepresentationsPath(storagePath.getName()),false);
      final Map<String,List<String>> preservationRepresentationObjects=new HashMap<String,List<String>>();
      final Map<String,List<String>> preservationFileObjects=new HashMap<String,List<String>>();
      final Map<String,List<String>> preservationEvents=new HashMap<String,List<String>>();
      retrieveAIPPreservationInformation(storagePath,representationIds,preservationRepresentationObjects,preservationFileObjects,preservationEvents);
      aip=new AIP(storagePath.getName(),parentId,active,dateCreated,dateModified,permissions,descriptiveMetadataBinaryIds,representationIds,preservationRepresentationObjects,preservationEvents,preservationFileObjects);
    }
 catch (    StorageServiceException e) {
      throw new ModelServiceException(""String_Node_Str"",e.getCode(),e);
    }
  }
 else {
    throw new ModelServiceException(""String_Node_Str"" + resource + ""String_Node_Str"",ModelServiceException.INTERNAL_SERVER_ERROR);
  }
  return aip;
}",0.9943963321446764
188836,"private void initClientServices() throws PluginException {
  if (!initialized) {
    CASUtility casUtility=null;
    CASUserPrincipal cup=null;
    try {
      casUtility=new CASUtility(new URL(getParameterCASUrl()),new URL(getParameterCoreUrl()));
    }
 catch (    MalformedURLException e) {
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      cup=casUtility.getCASUserPrincipal(getParameterRodaServicesUsername(),getParameterRodaServicesPassword());
    }
 catch (    Throwable e) {
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.rodaClient=new RODAClient(getParameterRodaServicesURL(),cup,casUtility);
      this.rodaUploader=new Uploader(getParameterRodaServicesURL(),cup,casUtility);
      this.rodaDownloader=new Downloader(getParameterRodaServicesURL(),cup,casUtility);
    }
 catch (    RODAClientException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    LoginException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    MalformedURLException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    DownloaderException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    Throwable e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.browserService=this.rodaClient.getBrowserService();
    }
 catch (    RODAClientException e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.ingestService=this.rodaClient.getIngestService();
    }
 catch (    RODAClientException e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    this.migratorClient=new MigratorClient();
    initialized=true;
    logger.debug(""String_Node_Str"");
  }
}","private void initClientServices() throws PluginException {
  if (!initialized) {
    CASUtility casUtility=null;
    CASUserPrincipal cup=null;
    try {
      casUtility=new CASUtility(new URL(getParameterCASUrl()),new URL(getParameterCoreUrl()));
    }
 catch (    MalformedURLException e) {
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      cup=casUtility.getCASUserPrincipal(getParameterRodaServicesUsername(),getParameterRodaServicesPassword(),""String_Node_Str"");
    }
 catch (    Throwable e) {
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.rodaClient=new RODAClient(getParameterRodaServicesURL(),cup,casUtility);
      this.rodaUploader=new Uploader(getParameterRodaServicesURL(),cup,casUtility);
      this.rodaDownloader=new Downloader(getParameterRodaServicesURL(),cup,casUtility);
    }
 catch (    RODAClientException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    LoginException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    MalformedURLException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    DownloaderException e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
catch (    Throwable e) {
      logger.debug(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.browserService=this.rodaClient.getBrowserService();
    }
 catch (    RODAClientException e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      this.ingestService=this.rodaClient.getIngestService();
    }
 catch (    RODAClientException e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
    }
    this.migratorClient=new MigratorClient();
    initialized=true;
    logger.debug(""String_Node_Str"");
  }
}",0.9961505560307956
188837,"private void initRODAServices() throws PluginException {
  try {
    CASUtility casUtility=new CASUtility(getCasURL(),getCoreURL());
    CASUserPrincipal cup=casUtility.getCASUserPrincipal(getUsername(),getPassword());
    new RODAClient(getRodaServicesURL(),cup,casUtility);
    this.fedoraClientUtility=new FedoraClientUtility(getFedoraURL(),getFedoraGSearchURL(),cup,casUtility);
    initOK=true;
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void initRODAServices() throws PluginException {
  try {
    CASUtility casUtility=new CASUtility(getCasURL(),getCoreURL());
    CASUserPrincipal cup=casUtility.getCASUserPrincipal(getUsername(),getPassword(),""String_Node_Str"");
    new RODAClient(getRodaServicesURL(),cup,casUtility);
    this.fedoraClientUtility=new FedoraClientUtility(getFedoraURL(),getFedoraGSearchURL(),cup,casUtility);
    initOK=true;
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9841549295774648
188838,"/** 
 * Initialises the RODA client services.
 * @throws PluginException if an error occurred during initialisation
 */
private void initClientServices() throws PluginException {
  final String rodaClientServiceUrl=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_URL().getName());
  final String rodaClientUsername=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_USERNAME().getName());
  final String rodaClientPassword=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_PASSWORD().getName());
  final String casURL=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CAS_URL().getName());
  final String coreURL=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_URL().getName());
  try {
    CASUtility casUtility=new CASUtility(new URL(casURL),new URL(coreURL));
    CASUserPrincipal cup=casUtility.getCASUserPrincipal(rodaClientUsername,rodaClientPassword);
    rodaClient=new RODAClient(new URL(rodaClientServiceUrl),cup,casUtility);
    rodaUploader=new Uploader(new URL(rodaClientServiceUrl),cup,casUtility);
    rodaDownloader=rodaClient.getDownloader();
  }
 catch (  RODAClientException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  LoginException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  DownloaderException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  AuthenticationException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * Initialises the RODA client services.
 * @throws PluginException if an error occurred during initialisation
 */
private void initClientServices() throws PluginException {
  final String rodaClientServiceUrl=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_URL().getName());
  final String rodaClientUsername=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_USERNAME().getName());
  final String rodaClientPassword=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_PASSWORD().getName());
  final String casURL=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CAS_URL().getName());
  final String coreURL=getParameterValues().get(AbstractPlugin.PARAMETER_RODA_CORE_URL().getName());
  try {
    CASUtility casUtility=new CASUtility(new URL(casURL),new URL(coreURL));
    CASUserPrincipal cup=casUtility.getCASUserPrincipal(rodaClientUsername,rodaClientPassword,""String_Node_Str"");
    rodaClient=new RODAClient(new URL(rodaClientServiceUrl),cup,casUtility);
    rodaUploader=new Uploader(new URL(rodaClientServiceUrl),cup,casUtility);
    rodaDownloader=rodaClient.getDownloader();
  }
 catch (  RODAClientException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  LoginException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  MalformedURLException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  DownloaderException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  AuthenticationException e) {
    logger.debug(""String_Node_Str"" + e.getMessage(),e);
    throw new PluginException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9953584321815367
188839,"public void addLogEntry(LogEntry logEntry) throws StorageActionException {
  String entryJSON=ModelUtils.getJsonLogEntry(logEntry);
  Binary dailyLog;
  try {
    dailyLog=storage.getBinary(ModelUtils.getLogPath(new Date()));
  }
 catch (  StorageActionException sae) {
    dailyLog=storage.createBinary(ModelUtils.getLogPath(new Date()),new HashMap<>(),new JsonContentPayload(""String_Node_Str""),false);
  }
  try {
    java.io.File f=new java.io.File(dailyLog.getContent().getURI().getPath());
    FileUtils.writeStringToFile(f,entryJSON,true);
  }
 catch (  IOException e) {
  }
  notifyLogEntryCreated(logEntry);
}","public void addLogEntry(LogEntry logEntry) throws StorageActionException {
  String entryJSON=ModelUtils.getJsonLogEntry(logEntry);
  Binary dailyLog;
  try {
    storage.createContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),new HashMap<>());
  }
 catch (  StorageActionException sae) {
  }
  try {
    dailyLog=storage.getBinary(ModelUtils.getLogPath(new Date()));
  }
 catch (  StorageActionException sae) {
    dailyLog=storage.createBinary(ModelUtils.getLogPath(new Date()),new HashMap<>(),new JsonContentPayload(""String_Node_Str""),false);
  }
  try {
    java.io.File f=new java.io.File(dailyLog.getContent().getURI().getPath());
    FileUtils.writeStringToFile(f,entryJSON,true);
  }
 catch (  IOException e) {
  }
  notifyLogEntryCreated(logEntry);
}",0.6396011396011396
188840,"public ModelService(StorageService storage) throws ModelServiceException {
  super();
  this.storage=storage;
  try {
    storage.createContainer(DefaultStoragePath.parse(RodaConstants.STORAGE_CONTAINER_ACTIONLOG),null);
  }
 catch (  StorageActionException sae) {
    throw new ModelServiceException(""String_Node_Str"",0);
  }
}","public ModelService(StorageService storage){
  super();
  this.storage=storage;
}",0.3960880195599022
188841,"@Test public void getAgentPreservationObject() throws ModelServiceException, StorageActionException {
  AgentPreservationObject apo=model.getAgentPreservationObject(CorporaConstants.AGENT_RODA_8_PREMIS_XML);
  assertEquals(apo.getAgentType(),CorporaConstants.SOFTWARE_INGEST_TASK);
  assertEquals(apo.getAgentName(),CorporaConstants.INGEST_CREATE_AIP);
}","@Test public void getAgentPreservationObject() throws ModelServiceException, StorageActionException {
  storage.copy(corporaService,DefaultStoragePath.parse(CorporaConstants.SOURCE_PRESERVATION_CONTAINER),DefaultStoragePath.parse(CorporaConstants.SOURCE_PRESERVATION_CONTAINER));
  AgentPreservationObject apo=model.getAgentPreservationObject(CorporaConstants.AGENT_RODA_8_PREMIS_XML);
  assertEquals(apo.getAgentType(),CorporaConstants.SOFTWARE_INGEST_TASK);
  assertEquals(apo.getAgentName(),CorporaConstants.INGEST_CREATE_AIP);
}",0.7990970654627539
188842,"@BeforeClass public static void setUp() throws IOException, StorageActionException, URISyntaxException, ModelServiceException {
  basePath=Files.createTempDirectory(""String_Node_Str"");
  storage=new FileStorageService(basePath);
  model=new ModelService(storage);
  URL corporaURL=ModelServiceTest.class.getResource(""String_Node_Str"");
  corporaPath=Paths.get(corporaURL.toURI());
  corporaService=new FileStorageService(corporaPath);
  storage.copy(corporaService,DefaultStoragePath.parse(CorporaConstants.SOURCE_PRESERVATION_CONTAINER),DefaultStoragePath.parse(CorporaConstants.SOURCE_PRESERVATION_CONTAINER));
  logger.debug(""String_Node_Str"" + basePath);
}","@BeforeClass public static void setUp() throws IOException, StorageActionException, URISyntaxException, ModelServiceException {
  basePath=Files.createTempDirectory(""String_Node_Str"");
  storage=new FileStorageService(basePath);
  model=new ModelService(storage);
  URL corporaURL=ModelServiceTest.class.getResource(""String_Node_Str"");
  corporaPath=Paths.get(corporaURL.toURI());
  corporaService=new FileStorageService(corporaPath);
  logger.debug(""String_Node_Str"" + basePath);
}",0.8441330998248686
188843,"@Test public void createLogEntry() throws ModelServiceException, StorageActionException {
  try {
    LogEntry entry=new LogEntry();
    entry.setAction(""String_Node_Str"");
    entry.setDatetime(""String_Node_Str"");
    entry.setDatetime(""String_Node_Str"");
    LogEntryParameter[] parameters=new LogEntryParameter[2];
    LogEntryParameter p1=new LogEntryParameter(""String_Node_Str"",""String_Node_Str"");
    LogEntryParameter p2=new LogEntryParameter(""String_Node_Str"",""String_Node_Str"");
    parameters[0]=p1;
    parameters[1]=p2;
    entry.setParameters(parameters);
    model.addLogEntry(entry);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Test public void createLogEntry() throws ModelServiceException, StorageActionException {
  LogEntry entry=new LogEntry();
  entry.setAction(""String_Node_Str"");
  entry.setAddress(""String_Node_Str"");
  entry.setDatetime(""String_Node_Str"");
  LogEntryParameter[] parameters=new LogEntryParameter[2];
  LogEntryParameter p1=new LogEntryParameter(""String_Node_Str"",""String_Node_Str"");
  LogEntryParameter p2=new LogEntryParameter(""String_Node_Str"",""String_Node_Str"");
  parameters[0]=p1;
  parameters[1]=p2;
  entry.setParameters(parameters);
  model.addLogEntry(entry);
}",0.8638956805215974
188844,"private void createGalleryXML(LocalRepresentationObject rep,File gallery) throws IOException, MetsMetadataException {
  File originalMetsFile=new File(URI.create(rep.getRootFile().getAccessURL()));
  DigitalizedWorkMetsHelper dwMetsHelper=DigitalizedWorkMetsHelper.newInstance(originalMetsFile);
  if (gallery.exists()) {
    gallery.delete();
  }
  gallery.createNewFile();
  String galleryTemplate=new String(StreamUtils.getBytes(DW2SimpleViewer.class.getClassLoader().getResourceAsStream(""String_Node_Str"")));
  Mets mets=dwMetsHelper.getMets();
  DivType baseDiv=mets.getStructMapList().get(0).getDiv();
  Map<String,String> datastreamIdToCaption=new HashMap<String,String>();
  for (  RepresentationFile repFile : rep.getPartFiles()) {
    datastreamIdToCaption.put(repFile.getId(),repFile.getOriginalName());
  }
  totalImageNumber=dwMetsHelper.getFiles().size();
  currentImageNumber=1;
  String imagesXML=createImageXML(new Vector<String>(),baseDiv,datastreamIdToCaption,dwMetsHelper);
  String title;
  try {
    SimpleDescriptionObject sdo=getRodaClient().getBrowserService().getSimpleDescriptionObject(rep.getDescriptionObjectPID());
    title=sdo.getTitle();
  }
 catch (  Exception e) {
    title=""String_Node_Str"";
  }
  galleryTemplate=galleryTemplate.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(title));
  galleryTemplate=galleryTemplate.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(imagesXML));
  PrintWriter printer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(gallery),""String_Node_Str""));
  printer.write(galleryTemplate);
  printer.flush();
  printer.close();
}","private void createGalleryXML(LocalRepresentationObject rep,File gallery) throws IOException, MetsMetadataException {
  File originalMetsFile=new File(URI.create(rep.getRootFile().getAccessURL()));
  DigitalizedWorkMetsHelper dwMetsHelper=DigitalizedWorkMetsHelper.newInstance(originalMetsFile);
  if (gallery.exists()) {
    gallery.delete();
  }
  gallery.createNewFile();
  String galleryTemplate=new String(StreamUtils.getBytes(DW2SimpleViewer.class.getClassLoader().getResourceAsStream(""String_Node_Str"")));
  Mets mets=dwMetsHelper.getMets();
  DivType baseDiv=mets.getStructMapList().get(0).getDiv();
  Map<String,String> datastreamIdToCaption=new HashMap<String,String>();
  for (  RepresentationFile repFile : rep.getPartFiles()) {
    datastreamIdToCaption.put(repFile.getId(),repFile.getOriginalName());
  }
  totalImageNumber=dwMetsHelper.getFiles().size();
  currentImageNumber=1;
  String imagesXML=createImageXML(new Vector<String>(),baseDiv,datastreamIdToCaption,dwMetsHelper);
  String title;
  try {
    SimpleDescriptionObject sdo=getRodaClient().getBrowserService().getSimpleDescriptionObject(rep.getDescriptionObjectPID());
    title=sdo.getTitle();
  }
 catch (  Exception e) {
    title=""String_Node_Str"";
  }
  galleryTemplate=galleryTemplate.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(XMLUtils.xmlEncodeString(title)));
  galleryTemplate=galleryTemplate.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(imagesXML));
  PrintWriter printer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(gallery),""String_Node_Str""));
  printer.write(galleryTemplate);
  printer.flush();
  printer.close();
}",0.988950276243094
188845,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String pid=request.getParameter(PARAM_PID);
  String name=""String_Node_Str"" + pid.replace(':','_');
  File tempDir=TempDir.createUniqueTemporaryDirectory(name);
  try {
    RODAClient rodaClient=RodaClientFactory.getRodaClient(request.getSession());
    getPremisAndRepresentations(pid,rodaClient,aipDir);
    getEad(pid,request,response,rodaClient,aipDir);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ZipOutputStream zip=new ZipOutputStream(baos);
    ZipUtility.addDirToArchive(zip,aipDir);
    response.setContentType(""String_Node_Str"");
    response.setContentLength((int)baos.size());
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + pid.replace(':','_') + ""String_Node_Str"");
    response.getOutputStream().write(baos.toByteArray());
    response.flushBuffer();
  }
 catch (  LoginException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_UNAUTHORIZED,e.getMessage());
  }
catch (  RODAClientException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
catch (  NoSuchRODAObjectException e) {
    response.sendError(HttpServletResponse.SC_NOT_FOUND,e.getMessage());
  }
catch (  DownloaderException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
catch (  BrowserException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
 finally {
    if ((aipDir != null) && (aipDir.exists())) {
      FileUtils.deleteDirectory(aipDir);
    }
  }
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String pid=request.getParameter(PARAM_PID);
  String name=""String_Node_Str"" + pid.replace(':','_');
  File tempDir=TempDir.createUniqueTemporaryDirectory(name);
  try {
    RODAClient rodaClient=RodaClientFactory.getRodaClient(request.getSession());
    getPremisAndRepresentations(pid,rodaClient,tempDir);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ZipOutputStream zip=new ZipOutputStream(baos);
    ZipUtility.addDirToArchive(zip,tempDir);
    response.setContentType(""String_Node_Str"");
    response.setContentLength((int)baos.size());
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + pid.replace(':','_') + ""String_Node_Str"");
    response.getOutputStream().write(baos.toByteArray());
    response.flushBuffer();
  }
 catch (  LoginException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_UNAUTHORIZED,e.getMessage());
  }
catch (  RODAClientException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
catch (  NoSuchRODAObjectException e) {
    response.sendError(HttpServletResponse.SC_NOT_FOUND,e.getMessage());
  }
catch (  DownloaderException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
catch (  BrowserException e) {
    logger.error(""String_Node_Str"",e);
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
  }
 finally {
    if ((tempDir != null) && (tempDir.exists())) {
      FileUtils.deleteDirectory(tempDir);
    }
  }
}",0.979217273954116
188846,"private static boolean startXMPPToolBox(Properties configuration){
  setXMPPReplyTimeout(configuration);
  XMPPConnection connection=createAndStartConnection(configuration);
  addTraceListeners(connection);
  LOGGER.info(""String_Node_Str"");
  MediaServerComponent component;
  try {
    component=createXMPPComponent(configuration);
  }
 catch (  ComponentException e) {
    return false;
  }
  XMPPToolBox.getInstance().start(component,connection,configuration);
  LOGGER.info(""String_Node_Str"");
  return true;
}","private static void startXMPPToolBox(Properties configuration) throws InterruptedException {
  setXMPPReplyTimeout(configuration);
  XMPPConnection connection=null;
  while (true) {
    try {
      connection=createAndStartConnection(configuration);
      addTraceListeners(connection);
      LOGGER.info(""String_Node_Str"");
      break;
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    Thread.sleep(30000);
  }
  MediaServerComponent component=null;
  while (true) {
    try {
      component=createXMPPComponent(configuration);
      LOGGER.info(""String_Node_Str"");
      break;
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    Thread.sleep(30000);
  }
  XMPPToolBox.getInstance().start(component,connection,configuration);
}",0.4530892448512585
188847,"private static XMPPConnection createAndStartConnection(Properties configuration){
  String serviceName=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SERVICENAME);
  String host=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_HOST);
  String userName=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_USERNAME);
  ConnectionConfiguration cc=new ConnectionConfiguration(host,Integer.parseInt(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_PORT)),serviceName);
  cc.setSASLAuthenticationEnabled(Boolean.valueOf(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SASL)));
  cc.setSecurityMode(SecurityMode.valueOf(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SECURITY)));
  XMPPConnection connection=new XMPPConnection(cc);
  try {
    connection.connect();
    connection.login(userName,configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_PASSWORD));
  }
 catch (  org.jivesoftware.smack.XMPPException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new com.buddycloud.mediaserver.commons.exception.XMPPException(e.getMessage(),e);
  }
  return connection;
}","private static XMPPConnection createAndStartConnection(Properties configuration){
  String serviceName=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SERVICENAME);
  String host=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_HOST);
  String userName=configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_USERNAME);
  ConnectionConfiguration cc=new ConnectionConfiguration(host,Integer.parseInt(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_PORT)),serviceName);
  cc.setSASLAuthenticationEnabled(Boolean.valueOf(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SASL)));
  cc.setSecurityMode(SecurityMode.valueOf(configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_SECURITY)));
  XMPPConnection connection=new XMPPConnection(cc);
  try {
    connection.connect();
    connection.login(userName,configuration.getProperty(MediaServerConfiguration.XMPP_CONNECTION_PASSWORD));
  }
 catch (  org.jivesoftware.smack.XMPPException e) {
    LOGGER.error(""String_Node_Str"",e);
    try {
      connection.disconnect();
    }
 catch (    Exception e2) {
    }
    throw new com.buddycloud.mediaserver.commons.exception.XMPPException(e.getMessage(),e);
  }
  return connection;
}",0.9671132764920828
188848,"public static void main(String[] args){
  Properties configuration=MediaServerConfiguration.getInstance().getConfiguration();
  try {
    startRestletComponent(configuration);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(1);
  }
  try {
    while (!startXMPPToolBox(configuration)) {
      Thread.sleep(5000);
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  keepAlive();
}","public static void main(String[] args) throws InterruptedException {
  Properties configuration=MediaServerConfiguration.getInstance().getConfiguration();
  try {
    startRestletComponent(configuration);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(1);
  }
  startXMPPToolBox(configuration);
  keepAlive();
}",0.8040455120101138
188849,"public void storeMedia(Media media) throws MetadataSourceException {
  LOGGER.debug(""String_Node_Str"" + media.getId());
  PreparedStatement statement=null;
  try {
    statement=prepareStatement(Queries.SAVE_MEDIA,media.getId(),media.getFileName(),media.getEntityId(),media.getAuthor(),media.getTitle(),media.getDescription(),media.getMimeType(),media.getFileExtension(),media.getShaChecksum(),media.getFileSize(),media.getLength(),media.getHeight(),media.getWidth());
    statement.execute();
    LOGGER.debug(""String_Node_Str"" + media.getId());
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new MetadataSourceException(e.getMessage(),e);
  }
 finally {
    close(statement);
  }
}","public void storeMedia(Media media) throws MetadataSourceException {
  LOGGER.debug(""String_Node_Str"" + media.getId());
  PreparedStatement statement=null;
  try {
    String extension=media.getFileExtension();
    if (null == extension) {
      extension=""String_Node_Str"";
    }
    statement=prepareStatement(Queries.SAVE_MEDIA,media.getId(),media.getFileName(),media.getEntityId(),media.getAuthor(),media.getTitle(),media.getDescription(),media.getMimeType(),extension,media.getShaChecksum(),media.getFileSize(),media.getLength(),media.getHeight(),media.getWidth());
    statement.execute();
    LOGGER.debug(""String_Node_Str"" + media.getId());
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new MetadataSourceException(e.getMessage(),e);
  }
 finally {
    close(statement);
  }
}",0.9127604166666666
188850,"/** 
 * Downloads media (GET /<channel>/<mediaId>) 
 */
@Get public Representation getMedia(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token=null;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
  if (!isChannelPublic && !mediaId.equals(Constants.AVATAR_ARG)) {
    String auth=getQueryValue(Constants.AUTH_QUERY);
    try {
      userId=getUserId(request,auth);
      token=getTransactionId(request,auth);
    }
 catch (    Throwable t) {
      setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
      return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
    }
    Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
    if (verifyRequest != null) {
      return verifyRequest;
    }
  }
  Integer maxHeight=null;
  Integer maxWidth=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_HEIGHT_QUERY);
    if (queryValue != null) {
      maxHeight=Integer.valueOf(queryValue);
    }
    queryValue=getQueryValue(Constants.MAX_WIDTH_QUERY);
    if (queryValue != null) {
      maxWidth=Integer.valueOf(queryValue);
    }
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  try {
    MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
    int maxAge=mediaDAO.getMaxAge();
    addCacheHeaders(maxAge);
    if (maxHeight == null && maxWidth == null) {
      MediaType mediaType=new MediaType(mediaDAO.getMediaType(entityId,mediaId));
      File media=mediaDAO.getMedia(userId,entityId,mediaId);
      return new FileRepresentation(media,mediaType,maxAge);
    }
    Thumbnail thumbnail=null;
    if (maxHeight != null && maxWidth == null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight);
    }
 else     if (maxHeight == null && maxWidth != null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxWidth);
    }
 else {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight,maxWidth);
    }
    return new DynamicFileRepresentation(new MediaType(thumbnail.getMimeType()),thumbnail.getImg(),maxAge);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  IOException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  InvalidPreviewFormatException e) {
    setStatus(Status.CLIENT_ERROR_PRECONDITION_FAILED);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}","/** 
 * Downloads media (GET /<channel>/<mediaId>) 
 */
@Get public Representation getMedia(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  if (!mediaId.equals(Constants.AVATAR_ARG)) {
    boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
    if (!isChannelPublic) {
      String auth=getQueryValue(Constants.AUTH_QUERY);
      try {
        userId=getUserId(request,auth);
        token=getTransactionId(request,auth);
      }
 catch (      Throwable t) {
        setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
      }
      Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
      if (verifyRequest != null) {
        return verifyRequest;
      }
    }
  }
  Integer maxHeight=null;
  Integer maxWidth=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_HEIGHT_QUERY);
    if (queryValue != null) {
      maxHeight=Integer.valueOf(queryValue);
    }
    queryValue=getQueryValue(Constants.MAX_WIDTH_QUERY);
    if (queryValue != null) {
      maxWidth=Integer.valueOf(queryValue);
    }
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  try {
    MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
    int maxAge=mediaDAO.getMaxAge();
    addCacheHeaders(maxAge);
    if (maxHeight == null && maxWidth == null) {
      MediaType mediaType=new MediaType(mediaDAO.getMediaType(entityId,mediaId));
      File media=mediaDAO.getMedia(userId,entityId,mediaId);
      return new FileRepresentation(media,mediaType,maxAge);
    }
    Thumbnail thumbnail=null;
    if (maxHeight != null && maxWidth == null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight);
    }
 else     if (maxHeight == null && maxWidth != null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxWidth);
    }
 else {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight,maxWidth);
    }
    return new DynamicFileRepresentation(new MediaType(thumbnail.getMimeType()),thumbnail.getImg(),maxAge);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  IOException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  InvalidPreviewFormatException e) {
    setStatus(Status.CLIENT_ERROR_PRECONDITION_FAILED);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}",0.9782278481012658
188851,"@Override protected void testSetUp() throws Exception {
  File destDir=new File(configuration.getProperty(MediaServerConfiguration.MEDIA_STORAGE_ROOT_PROPERTY) + File.separator + BASE_CHANNEL);
  if (!destDir.mkdir()) {
    FileUtils.cleanDirectory(destDir);
  }
  fileToDelete=new File(destDir + File.separator + MEDIA_ID);
  FileUtils.copyFile(new File(TEST_FILE_PATH + TEST_AVATAR_NAME),fileToDelete);
  Media media=buildMedia(MEDIA_ID,TEST_FILE_PATH + TEST_AVATAR_NAME);
  dataSource.storeMedia(media);
  dataSource.storeAvatar(media);
  AuthVerifier authClient=xmppTest.getAuthVerifier();
  EasyMock.expect(authClient.verifyRequest(EasyMock.matches(BASE_USER),EasyMock.matches(BASE_TOKEN),EasyMock.startsWith(URL))).andReturn(true);
  PubSubClient pubSubClient=xmppTest.getPubSubClient();
  EasyMock.expect(pubSubClient.matchUserCapability(EasyMock.matches(BASE_USER),EasyMock.matches(BASE_CHANNEL),(CapabilitiesDecorator)EasyMock.notNull())).andReturn(true);
  EasyMock.replay(authClient);
  EasyMock.replay(pubSubClient);
}","@Override protected void testSetUp() throws Exception {
  setupFilesAndDB();
  setupMocks();
}",0.1459074733096085
188852,"@Test public void deleteAvatar() throws Exception {
  ClientResource client=new ClientResource(URL);
  client.setChallengeResponse(ChallengeScheme.HTTP_BASIC,BASE_USER,BASE_TOKEN);
  client.delete();
  Assert.assertFalse(fileToDelete.exists());
}","@Test public void deleteAvatar() throws Exception {
  ClientResource client=new ClientResource(URL);
  client.setChallengeResponse(ChallengeScheme.HTTP_BASIC,BASE_USER,BASE_TOKEN);
  client.delete();
  assertFalse(fileToDelete.exists());
}",0.9855670103092784
188853,"public void testTearDown() throws Exception {
}","public void testTearDown() throws Exception {
  EasyMock.verify(authClient);
  EasyMock.verify(pubSubClient);
  EasyMock.reset(authClient);
  EasyMock.reset(pubSubClient);
}",0.4272727272727272
188854,"@Test public void deleteAvatarParamAuth() throws Exception {
  Base64 encoder=new Base64(true);
  String authStr=BASE_USER + ""String_Node_Str"" + BASE_TOKEN;
  ClientResource client=new ClientResource(URL + ""String_Node_Str"" + new String(encoder.encode(authStr.getBytes())));
  client.delete();
  Assert.assertFalse(fileToDelete.exists());
}","@Test public void deleteAvatarParamAuth() throws Exception {
  Base64 encoder=new Base64(true);
  String authStr=BASE_USER + ""String_Node_Str"" + BASE_TOKEN;
  ClientResource client=new ClientResource(URL + ""String_Node_Str"" + new String(encoder.encode(authStr.getBytes())));
  client.delete();
  assertFalse(fileToDelete.exists());
}",0.9182763744427934
188855,"@Override protected void testSetUp() throws Exception {
  File destDir=new File(configuration.getProperty(MediaServerConfiguration.MEDIA_STORAGE_ROOT_PROPERTY) + File.separator + BASE_CHANNEL);
  if (!destDir.mkdir()) {
    FileUtils.cleanDirectory(destDir);
  }
  fileToDelete=new File(destDir + File.separator + MEDIA_ID);
  FileUtils.copyFile(new File(TEST_FILE_PATH + TEST_IMAGE_NAME),fileToDelete);
  Media media=buildMedia(MEDIA_ID,TEST_FILE_PATH + TEST_IMAGE_NAME);
  dataSource.storeMedia(media);
  AuthVerifier authClient=xmppTest.getAuthVerifier();
  EasyMock.expect(authClient.verifyRequest(EasyMock.matches(BASE_USER),EasyMock.matches(BASE_TOKEN),EasyMock.startsWith(URL))).andReturn(true);
  PubSubClient pubSubClient=xmppTest.getPubSubClient();
  EasyMock.expect(pubSubClient.matchUserCapability(EasyMock.matches(BASE_USER),EasyMock.matches(BASE_CHANNEL),(CapabilitiesDecorator)EasyMock.notNull())).andReturn(true);
  EasyMock.replay(authClient);
  EasyMock.replay(pubSubClient);
}","@Override protected void testSetUp() throws Exception {
  setupFilesAndDB();
  setupMocks();
}",0.1505968778696051
188856,"@Test public void deleteMedia() throws Exception {
  ClientResource client=new ClientResource(URL);
  client.setChallengeResponse(ChallengeScheme.HTTP_BASIC,BASE_USER,BASE_TOKEN);
  client.delete();
  Assert.assertFalse(fileToDelete.exists());
}","@Test public void deleteMedia() throws Exception {
  ClientResource client=new ClientResource(URL);
  client.setChallengeResponse(ChallengeScheme.HTTP_BASIC,BASE_USER,BASE_TOKEN);
  client.delete();
  assertFalse(fileToDelete.exists());
}",0.9855072463768116
188857,"public void testTearDown() throws Exception {
}","public void testTearDown() throws Exception {
  EasyMock.verify(authClient);
  EasyMock.verify(pubSubClient);
  EasyMock.reset(authClient);
  EasyMock.reset(pubSubClient);
}",0.4272727272727272
188858,"@Test public void deleteMediaParamAuth() throws Exception {
  Base64 encoder=new Base64(true);
  String authStr=BASE_USER + ""String_Node_Str"" + BASE_TOKEN;
  ClientResource client=new ClientResource(URL + ""String_Node_Str"" + new String(encoder.encode(authStr.getBytes())));
  client.delete();
  Assert.assertFalse(fileToDelete.exists());
}","@Test public void deleteMediaParamAuth() throws Exception {
  Base64 encoder=new Base64(true);
  String authStr=BASE_USER + ""String_Node_Str"" + BASE_TOKEN;
  ClientResource client=new ClientResource(URL + ""String_Node_Str"" + new String(encoder.encode(authStr.getBytes())));
  client.delete();
  assertFalse(fileToDelete.exists());
}",0.918032786885246
188859,"public static String getBareId(String userId){
  return userId.split(""String_Node_Str"")[0];
}","public static String getBareId(String userId){
  return userId != null ? userId.split(""String_Node_Str"")[0] : null;
}",0.8857142857142857
188860,"/** 
 * Gets media's information list (GET /<channel>) 
 */
@Get public Representation getMediasInfo(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token=null;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
  if (!isChannelPublic) {
    String auth=getQueryValue(Constants.AUTH_QUERY);
    try {
      userId=getUserId(request,auth);
      token=getTransactionId(request,auth);
    }
 catch (    Throwable t) {
      setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
      return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
    }
    Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
    if (verifyRequest != null) {
      return verifyRequest;
    }
  }
  Integer max=null;
  String after=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_QUERY);
    if (queryValue != null) {
      max=Integer.valueOf(queryValue);
    }
    after=getQueryValue(Constants.AFTER_QUERY);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    return new StringRepresentation(mediaDAO.getMediasInfo(userId,entityId,max,after),MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}","/** 
 * Gets media's information list (GET /<channel>) 
 */
@Get public Representation getMediasInfo(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token=null;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
  if (!isChannelPublic) {
    String auth=getQueryValue(Constants.AUTH_QUERY);
    try {
      userId=getUserId(request,auth);
      token=getTransactionId(request,auth);
    }
 catch (    Throwable t) {
      setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
      return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
    }
    Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
    if (verifyRequest != null) {
      return verifyRequest;
    }
  }
  Integer max=null;
  String after=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_QUERY);
    if (queryValue != null) {
      max=Integer.valueOf(queryValue);
    }
    after=getQueryValue(Constants.AFTER_QUERY);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    return new StringRepresentation(mediaDAO.getMediasInfo(userId,entityId,max,after),MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}",0.9968399885090492
188861,"@Post(""String_Node_Str"") public Representation postWebFormMedia(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(t.getLocalizedMessage(),MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String result=""String_Node_Str"";
  try {
    if (MediaType.MULTIPART_FORM_DATA.equals(entity.getMediaType(),true)) {
      result=mediaDAO.insertFormDataMedia(userId,entityId,getRequest(),false);
    }
 else {
      result=mediaDAO.insertWebFormMedia(userId,entityId,new Form(entity),false);
    }
    setStatus(Status.SUCCESS_CREATED);
  }
 catch (  FileUploadException e) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new StringRepresentation(result,MediaType.APPLICATION_JSON);
}","@Post(""String_Node_Str"") public Representation postWebFormMedia(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(t.getLocalizedMessage(),MediaType.APPLICATION_JSON);
  }
  Representation checkRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
  if (checkRequest != null) {
    return checkRequest;
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String result=""String_Node_Str"";
  try {
    if (MediaType.MULTIPART_FORM_DATA.equals(entity.getMediaType(),true)) {
      result=mediaDAO.insertFormDataMedia(userId,entityId,getRequest(),false);
    }
 else {
      result=mediaDAO.insertWebFormMedia(userId,entityId,new Form(entity),false);
    }
    setStatus(Status.SUCCESS_CREATED);
  }
 catch (  FileUploadException e) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new StringRepresentation(result,MediaType.APPLICATION_JSON);
}",0.9329140461215932
188862,"/** 
 * Downloads media (GET /<channel>/<mediaId>) 
 */
@Get public Representation getMedia(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token=null;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
  if (!isChannelPublic && !mediaId.equals(Constants.AVATAR_ARG)) {
    String auth=getQueryValue(Constants.AUTH_QUERY);
    try {
      userId=getUserId(request,auth);
      token=getTransactionId(request,auth);
    }
 catch (    Throwable t) {
      setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
      return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
    }
    Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
    if (verifyRequest != null) {
      return verifyRequest;
    }
  }
  Integer maxHeight=null;
  Integer maxWidth=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_HEIGHT_QUERY);
    if (queryValue != null) {
      maxHeight=Integer.valueOf(queryValue);
    }
    queryValue=getQueryValue(Constants.MAX_WIDTH_QUERY);
    if (queryValue != null) {
      maxWidth=Integer.valueOf(queryValue);
    }
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  try {
    MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
    int maxAge=mediaDAO.getMaxAge();
    addCacheHeaders(maxAge);
    if (maxHeight == null && maxWidth == null) {
      MediaType mediaType=new MediaType(mediaDAO.getMediaType(entityId,mediaId));
      File media=mediaDAO.getMedia(userId,entityId,mediaId);
      return new FileRepresentation(media,mediaType,maxAge);
    }
    Thumbnail thumbnail=null;
    if (maxHeight != null && maxWidth == null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight);
    }
 else     if (maxHeight == null && maxWidth != null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxWidth);
    }
 else {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight,maxWidth);
    }
    return new DynamicFileRepresentation(new MediaType(thumbnail.getMimeType()),thumbnail.getImg(),maxAge);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  IOException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  InvalidPreviewFormatException e) {
    setStatus(Status.CLIENT_ERROR_PRECONDITION_FAILED);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}","/** 
 * Downloads media (GET /<channel>/<mediaId>) 
 */
@Get public Representation getMedia(){
  setServerHeader();
  Request request=getRequest();
  String userId=null;
  String token=null;
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  boolean isChannelPublic=XMPPToolBox.getInstance().getPubSubClient().isChannelPublic(entityId);
  if (!isChannelPublic && !mediaId.equals(Constants.AVATAR_ARG)) {
    String auth=getQueryValue(Constants.AUTH_QUERY);
    try {
      userId=getUserId(request,auth);
      token=getTransactionId(request,auth);
    }
 catch (    Throwable t) {
      setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
      return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
    }
    Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
    if (verifyRequest != null) {
      return verifyRequest;
    }
  }
  Integer maxHeight=null;
  Integer maxWidth=null;
  try {
    String queryValue=getQueryValue(Constants.MAX_HEIGHT_QUERY);
    if (queryValue != null) {
      maxHeight=Integer.valueOf(queryValue);
    }
    queryValue=getQueryValue(Constants.MAX_WIDTH_QUERY);
    if (queryValue != null) {
      maxWidth=Integer.valueOf(queryValue);
    }
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  try {
    MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
    int maxAge=mediaDAO.getMaxAge();
    addCacheHeaders(maxAge);
    if (maxHeight == null && maxWidth == null) {
      MediaType mediaType=new MediaType(mediaDAO.getMediaType(entityId,mediaId));
      File media=mediaDAO.getMedia(userId,entityId,mediaId);
      return new FileRepresentation(media,mediaType,maxAge);
    }
    Thumbnail thumbnail=null;
    if (maxHeight != null && maxWidth == null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight);
    }
 else     if (maxHeight == null && maxWidth != null) {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxWidth);
    }
 else {
      thumbnail=mediaDAO.getMediaPreview(userId,entityId,mediaId,maxHeight,maxWidth);
    }
    return new DynamicFileRepresentation(new MediaType(thumbnail.getMimeType()),thumbnail.getImg(),maxAge);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  IOException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  InvalidPreviewFormatException e) {
    setStatus(Status.CLIENT_ERROR_PRECONDITION_FAILED);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}",0.9981321107148922
188863,"/** 
 * Deletes media (DELETE /<channel>/<mediaId>) 
 */
@Delete public Representation deleteMedia(){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    mediaDAO.deleteMedia(userId,entityId,mediaId);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}","/** 
 * Deletes media (DELETE /<channel>/<mediaId>) 
 */
@Delete public Representation deleteMedia(){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    mediaDAO.deleteMedia(userId,entityId,mediaId);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}",0.9959927140255008
188864,"/** 
 * Uploads avatar (PUT /<channel>/avatar) 
 */
@Put(""String_Node_Str"") public Representation putWebFormAvatar(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  if (!mediaId.equals(Constants.AVATAR_ARG)) {
    setStatus(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  String result=""String_Node_Str"";
  try {
    if (MediaType.MULTIPART_FORM_DATA.equals(entity.getMediaType(),true)) {
      result=mediaDAO.insertFormDataMedia(userId,entityId,getRequest(),true);
    }
 else {
      result=mediaDAO.insertWebFormMedia(userId,entityId,new Form(entity),true);
    }
    setStatus(Status.SUCCESS_CREATED);
  }
 catch (  FileUploadException e) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new StringRepresentation(result,MediaType.APPLICATION_JSON);
}","/** 
 * Uploads avatar (PUT /<channel>/avatar) 
 */
@Put(""String_Node_Str"") public Representation putWebFormAvatar(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  if (!mediaId.equals(Constants.AVATAR_ARG)) {
    setStatus(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  String result=""String_Node_Str"";
  try {
    if (MediaType.MULTIPART_FORM_DATA.equals(entity.getMediaType(),true)) {
      result=mediaDAO.insertFormDataMedia(userId,entityId,getRequest(),true);
    }
 else {
      result=mediaDAO.insertWebFormMedia(userId,entityId,new Form(entity),true);
    }
    setStatus(Status.SUCCESS_CREATED);
  }
 catch (  FileUploadException e) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new StringRepresentation(result,MediaType.APPLICATION_JSON);
}",0.9968381718884736
188865,"/** 
 * Updates media (POST /<channel>/<mediaId>) 
 */
@Post(""String_Node_Str"") public Representation updateMedia(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=verifyRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    return new StringRepresentation(mediaDAO.updateMedia(userId,entityId,mediaId,new Form(entity)),MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}","/** 
 * Updates media (POST /<channel>/<mediaId>) 
 */
@Post(""String_Node_Str"") public Representation updateMedia(Representation entity){
  setServerHeader();
  Request request=getRequest();
  String auth=getQueryValue(Constants.AUTH_QUERY);
  String userId=null;
  String token=null;
  try {
    userId=getUserId(request,auth);
    token=getTransactionId(request,auth);
  }
 catch (  Throwable t) {
    setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    return new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  }
  Representation verifyRequest=checkRequest(userId,token,request.getResourceRef().getIdentifier());
  if (verifyRequest != null) {
    return verifyRequest;
  }
  String entityId=(String)request.getAttributes().get(Constants.ENTITY_ARG);
  String mediaId=(String)request.getAttributes().get(Constants.MEDIA_ARG);
  MediaDAO mediaDAO=DAOFactory.getInstance().getDAO();
  try {
    return new StringRepresentation(mediaDAO.updateMedia(userId,entityId,mediaId,new Form(entity)),MediaType.APPLICATION_JSON);
  }
 catch (  MetadataSourceException e) {
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
catch (  MediaNotFoundException e) {
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
catch (  UserNotAllowedException e) {
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
  }
catch (  Throwable t) {
    return unexpectedError(t);
  }
  return new EmptyRepresentation();
}",0.996078431372549
188866,"protected Representation authenticationResponse(){
  List<ChallengeRequest> challengeRequests=new ArrayList<ChallengeRequest>();
  challengeRequests.add(new ChallengeRequest(ChallengeScheme.HTTP_BASIC,MediaServerApplication.REALM));
  Response response=getResponse();
  response.setChallengeRequests(challengeRequests);
  return response.getEntity();
}","protected Representation authenticationResponse(){
  List<ChallengeRequest> challengeRequests=new ArrayList<ChallengeRequest>();
  challengeRequests.add(new ChallengeRequest(ChallengeScheme.HTTP_BASIC,MediaServerApplication.REALM));
  StringRepresentation representation=new StringRepresentation(""String_Node_Str"",MediaType.APPLICATION_JSON);
  Response response=getResponse();
  response.setChallengeRequests(challengeRequests);
  response.setEntity(representation);
  return response.getEntity();
}",0.5845070422535211
188867,"protected String getFileExtension(String fileName,String mimeType){
  if (fileName != null) {
    return fileName.substring(fileName.indexOf(""String_Node_Str"") + 1);
  }
  return MimeTypeMapping.lookupExtension(mimeType);
}","protected String getFileExtension(String fileName,String mimeType){
  if (fileName != null) {
    String[] dotSplit=fileName.split(""String_Node_Str"");
    if (dotSplit.length > 1) {
      return dotSplit[dotSplit.length - 1];
    }
  }
  return MimeTypeMapping.lookupExtension(mimeType);
}",0.73828125
188868,"protected Thumbnail getPreview(String entityId,String mediaId,Integer maxHeight,Integer maxWidth,String mediaDirectory) throws MetadataSourceException, IOException, InvalidPreviewFormatException, MediaNotFoundException {
  File media=new File(mediaDirectory + File.separator + mediaId);
  if (!media.exists()) {
    throw new MediaNotFoundException(mediaId,entityId);
  }
  String previewId=dataSource.getPreviewId(mediaId,maxHeight,maxWidth);
  if (previewId != null) {
    File preview=new File(mediaDirectory + File.separator + previewId);
    if (!preview.exists()) {
      dataSource.deletePreview(previewId);
    }
 else {
      return new Thumbnail(dataSource.getPreviewMimeType(mediaId),IOUtils.toByteArray(FileUtils.openInputStream(preview)));
    }
  }
 else {
    previewId=RandomStringUtils.randomAlphanumeric(20);
  }
  return buildNewPreview(media,mediaId,previewId,mediaDirectory,maxHeight,maxWidth);
}","protected Thumbnail getPreview(String entityId,String mediaId,Integer maxHeight,Integer maxWidth,String mediaDirectory) throws MetadataSourceException, IOException, InvalidPreviewFormatException, MediaNotFoundException {
  File media=new File(mediaDirectory + File.separator + mediaId);
  if (!media.exists()) {
    throw new MediaNotFoundException(mediaId,entityId);
  }
  String previewId=dataSource.getPreviewId(mediaId,maxHeight,maxWidth);
  if (previewId != null) {
    File preview=new File(mediaDirectory + File.separator + previewId);
    if (!preview.exists()) {
      dataSource.deletePreview(previewId);
    }
 else {
      return new Thumbnail(dataSource.getPreviewMimeType(previewId),IOUtils.toByteArray(FileUtils.openInputStream(preview)));
    }
  }
 else {
    previewId=RandomStringUtils.randomAlphanumeric(20);
  }
  return buildNewPreview(media,mediaId,previewId,mediaDirectory,maxHeight,maxWidth);
}",0.9934640522875816
188869,"public boolean verifyUser(String userId,String token,String url){
  try {
    IQ reply=SyncPacketSendUtil.getReply(component,createVerifyTokenPacket(userId,token,url));
    return reply.getType().equals(Type.result);
  }
 catch (  Exception e) {
    LOGGER.warn(""String_Node_Str"" + userId + ""String_Node_Str"");
  }
  return true;
}","public boolean verifyUser(String userId,String token,String url){
  try {
    IQ reply=SyncPacketSendUtil.getReply(component,createVerifyTokenPacket(userId,token,url));
    return reply.getType().equals(Type.result);
  }
 catch (  Exception e) {
    LOGGER.warn(""String_Node_Str"" + userId + ""String_Node_Str"");
  }
  return false;
}",0.9894419306184012
188870,"private void preProcessMetadata(){
  if (optionHasOneOf(new String[]{""String_Node_Str"",""String_Node_Str""})) {
    Log.debug(""String_Node_Str"");
    return;
  }
  Map<String,String> settings=ConfigTools.getSettings();
  if (optionHasOneOf(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})) {
    String user=options.valueOf(""String_Node_Str"").toString();
    String pass=options.valueOf(""String_Node_Str"").toString();
    String connection=options.valueOf(""String_Node_Str"").toString();
    try {
      meta=new MetadataDB(connection,user,pass);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    meta=MetadataFactory.get(settings);
  }
  int workflowRunId=0;
  int workflowRunAccession=0;
  ArrayList<Integer> parentIDs=new ArrayList<>();
  processingIDFiles=new ArrayList<>();
  ArrayList<Integer> parentAccessions=new ArrayList<>();
  processingAccessionFiles=new ArrayList<>();
  int ancestorWorkflowRunAccession=0;
  if (options.has(""String_Node_Str"")) {
    String outputFile=(String)options.valueOf(""String_Node_Str"");
    File file=new File(outputFile);
    try {
      if (file.exists() && file.canRead()) {
        String readFileToString=FileUtils.readFileToString(file).trim();
        try {
          int processingAccessionFromFile=Integer.valueOf(readFileToString);
          Processing proc=meta.getProcessing(processingAccessionFromFile);
          if (proc != null) {
            if (proc.getStatus().equals(ProcessingStatus.success)) {
              Log.error(""String_Node_Str"");
              System.exit(ReturnValue.SUCCESS);
            }
          }
        }
 catch (        NumberFormatException|NotFoundException ne) {
          Log.error(""String_Node_Str"");
        }
        Log.error(""String_Node_Str"");
      }
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingAccessionFileCheck=file;
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  if (options.has(""String_Node_Str"")) {
    workflowRunId=meta.add_workflow_run((Integer)options.valueOf(""String_Node_Str""));
    workflowRunAccession=meta.get_workflow_run_accession(workflowRunId);
    for (    String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
      File file=new File(outputFile);
      try {
        if ((file.exists() || file.createNewFile()) && file.canWrite()) {
          int maxTries=(Integer)options.valueOf(""String_Node_Str"");
          for (int i=0; i < maxTries; i++) {
            if (LockingFileTools.lockAndAppend(file,workflowRunAccession + System.getProperty(""String_Node_Str""))) {
              break;
            }
 else             if (i < maxTries) {
              ProcessTools.sleep((Integer)options.valueOf(""String_Node_Str""));
            }
 else {
              ReturnValue retval=new ReturnValue();
              retval.printAndAppendtoStderr(""String_Node_Str"");
              retval.setExitStatus(ReturnValue.METADATAINVALIDIDCHAIN);
              meta.update_processing_event(workflowRunAccession,retval);
              meta.update_processing_status(workflowRunAccession,ProcessingStatus.failed);
              System.exit(retval.getExitStatus());
            }
          }
        }
 else {
          Log.error(""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
 catch (      IOException e) {
        Log.error(""String_Node_Str"" + e.getMessage());
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
      break;
    }
  }
  List<Integer> workflowRunAccessions=(List<Integer>)options.valuesOf(""String_Node_Str"");
  if (workflowRunAccessions.size() == 1) {
    workflowRunAccession=workflowRunAccessions.get(0);
  }
  for (  Integer parent : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    parentIDs.add(parent);
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      while ((line=r.readLine()) != null) {
        try {
          parentIDs.add(Integer.parseInt(line));
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  Integer parent : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    parentAccessions.add(parent);
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      while ((line=r.readLine()) != null) {
        try {
          parentAccessions.add(Integer.parseInt(line));
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  Integer accession : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    ancestorWorkflowRunAccession=accession;
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      while ((line=r.readLine()) != null) {
        try {
          ancestorWorkflowRunAccession=Integer.parseInt(line);
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
    File file=new File(outputFile);
    try {
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingIDFiles.add(file);
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
    File file=new File(outputFile);
    try {
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingAccessionFiles.add(file);
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  processingAccession=0;
  if (meta != null) {
    int[] parents=new int[parentIDs.size()];
    for (int i=0; i < parentIDs.size(); i++) {
      parents[i]=parentIDs.get(i);
    }
    int[] parentAccessionsArray=new int[parentAccessions.size()];
    for (int i=0; i < parentAccessions.size(); i++) {
      parentAccessionsArray[i]=parentAccessions.get(i);
    }
    ReturnValue metaret;
    if (parentAccessionsArray.length > 0) {
      metaret=meta.add_empty_processing_event_by_parent_accession(parentAccessionsArray);
      if (metaret.getExitStatus() == ReturnValue.SUCCESS) {
        processingID=metaret.getReturnValue();
        processingAccession=meta.mapProcessingIdToAccession(processingID);
        printAndAppendtoStdout(""String_Node_Str"" + processingAccession);
      }
 else {
        printAndAppendtoStderr(""String_Node_Str"" + metaret.getExitStatus());
        if (metaret.getStdout() != null) {
          printAndAppendtoStdout(""String_Node_Str"" + metaret.getStdout());
        }
        if (metaret.getStderr() != null) {
          printAndAppendtoStderr(""String_Node_Str"" + metaret.getStderr());
        }
        System.exit(ReturnValue.SQLQUERYFAILED);
      }
    }
 else {
      metaret=meta.add_empty_processing_event(parents);
      if (metaret.getExitStatus() == ReturnValue.SUCCESS) {
        processingID=metaret.getReturnValue();
        processingAccession=meta.mapProcessingIdToAccession(processingID);
        printAndAppendtoStdout(""String_Node_Str"" + processingAccession);
      }
 else {
        printAndAppendtoStderr(""String_Node_Str"" + metaret.getExitStatus());
        if (metaret.getStdout() != null) {
          printAndAppendtoStdout(""String_Node_Str"" + metaret.getStdout());
        }
        if (metaret.getStderr() != null) {
          printAndAppendtoStderr(""String_Node_Str"" + metaret.getStderr());
        }
        System.exit(ReturnValue.SQLQUERYFAILED);
      }
    }
    if (ancestorWorkflowRunAccession > 0 && processingID > 0) {
      meta.add_workflow_run_ancestor(ancestorWorkflowRunAccession,processingID);
    }
    if (workflowRunAccession > 0 && processingID > 0) {
      meta.update_processing_workflow_run(processingID,workflowRunAccession);
    }
  }
}","private void preProcessMetadata(){
  if (optionHasOneOf(new String[]{""String_Node_Str"",""String_Node_Str""})) {
    Log.debug(""String_Node_Str"");
    return;
  }
  Map<String,String> settings=ConfigTools.getSettings();
  if (optionHasOneOf(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})) {
    String user=options.valueOf(""String_Node_Str"").toString();
    String pass=options.valueOf(""String_Node_Str"").toString();
    String connection=options.valueOf(""String_Node_Str"").toString();
    try {
      meta=new MetadataDB(connection,user,pass);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    meta=MetadataFactory.get(settings);
  }
  int workflowRunId=0;
  int workflowRunAccession=0;
  ArrayList<Integer> parentIDs=new ArrayList<>();
  processingIDFiles=new ArrayList<>();
  ArrayList<Integer> parentAccessions=new ArrayList<>();
  processingAccessionFiles=new ArrayList<>();
  int ancestorWorkflowRunAccession=0;
  if (options.has(""String_Node_Str"")) {
    String outputFile=(String)options.valueOf(""String_Node_Str"");
    File file=new File(outputFile);
    try {
      if (file.exists() && file.canRead()) {
        String readFileToString=FileUtils.readFileToString(file).trim();
        try {
          int processingAccessionFromFile=Integer.valueOf(readFileToString);
          Processing proc=meta.getProcessing(processingAccessionFromFile);
          if (proc != null) {
            if (proc.getStatus().equals(ProcessingStatus.success)) {
              Log.error(""String_Node_Str"");
              System.exit(ReturnValue.SUCCESS);
            }
          }
        }
 catch (        NumberFormatException|NotFoundException ne) {
          Log.error(""String_Node_Str"");
        }
        Log.error(""String_Node_Str"");
      }
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingAccessionFileCheck=file;
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  if (options.has(""String_Node_Str"")) {
    workflowRunId=meta.add_workflow_run((Integer)options.valueOf(""String_Node_Str""));
    workflowRunAccession=meta.get_workflow_run_accession(workflowRunId);
    for (    String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
      File file=new File(outputFile);
      try {
        if ((file.exists() || file.createNewFile()) && file.canWrite()) {
          this.writeStringToFile(file,true,workflowRunAccession + System.getProperty(""String_Node_Str""));
        }
 else {
          Log.error(""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
 catch (      IOException e) {
        Log.error(""String_Node_Str"" + e.getMessage());
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
      break;
    }
  }
  List<Integer> workflowRunAccessions=(List<Integer>)options.valuesOf(""String_Node_Str"");
  if (workflowRunAccessions.size() == 1) {
    workflowRunAccession=workflowRunAccessions.get(0);
  }
  for (  Integer parent : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    parentIDs.add(parent);
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      while ((line=r.readLine()) != null) {
        try {
          parentIDs.add(Integer.parseInt(line));
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  Integer parent : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    parentAccessions.add(parent);
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      boolean accessionFound=false;
      while ((line=r.readLine()) != null) {
        try {
          int parseInt=Integer.parseInt(line);
          parentAccessions.add(parseInt);
          int[] accessions=new int[]{parseInt};
          List<ParentAccessionModel> viaParentAccessions=meta.getViaParentAccessions(accessions);
          if (viaParentAccessions == null) {
            Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
            System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
          }
          accessionFound=true;
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
      if (!accessionFound) {
        Log.error(""String_Node_Str"" + file + ""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  Integer accession : (List<Integer>)options.valuesOf(""String_Node_Str"")) {
    ancestorWorkflowRunAccession=accession;
  }
  for (  String file : (List<String>)options.valuesOf(""String_Node_Str"")) {
    try {
      BufferedReader r;
      String line;
      r=new BufferedReader(new FileReader(file));
      while ((line=r.readLine()) != null) {
        try {
          ancestorWorkflowRunAccession=Integer.parseInt(line);
        }
 catch (        NumberFormatException ex) {
          Log.error(""String_Node_Str"" + line + ""String_Node_Str"");
          System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
        }
      }
      r.close();
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
    File file=new File(outputFile);
    try {
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingIDFiles.add(file);
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  for (  String outputFile : (List<String>)options.valuesOf(""String_Node_Str"")) {
    File file=new File(outputFile);
    try {
      if ((file.exists() || file.createNewFile()) && file.canWrite()) {
        processingAccessionFiles.add(file);
      }
 else {
        Log.error(""String_Node_Str"");
        System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
      }
    }
 catch (    IOException e) {
      Log.error(""String_Node_Str"" + e.getMessage());
      System.exit(ReturnValue.METADATAINVALIDIDCHAIN);
    }
  }
  processingAccession=0;
  if (meta != null) {
    int[] parents=new int[parentIDs.size()];
    for (int i=0; i < parentIDs.size(); i++) {
      parents[i]=parentIDs.get(i);
    }
    int[] parentAccessionsArray=new int[parentAccessions.size()];
    for (int i=0; i < parentAccessions.size(); i++) {
      parentAccessionsArray[i]=parentAccessions.get(i);
    }
    ReturnValue metaret;
    if (parentAccessionsArray.length > 0) {
      metaret=meta.add_empty_processing_event_by_parent_accession(parentAccessionsArray);
      if (metaret.getExitStatus() == ReturnValue.SUCCESS) {
        processingID=metaret.getReturnValue();
        processingAccession=meta.mapProcessingIdToAccession(processingID);
        printAndAppendtoStdout(""String_Node_Str"" + processingAccession);
      }
 else {
        printAndAppendtoStderr(""String_Node_Str"" + metaret.getExitStatus());
        if (metaret.getStdout() != null) {
          printAndAppendtoStdout(""String_Node_Str"" + metaret.getStdout());
        }
        if (metaret.getStderr() != null) {
          printAndAppendtoStderr(""String_Node_Str"" + metaret.getStderr());
        }
        System.exit(ReturnValue.SQLQUERYFAILED);
      }
    }
 else {
      metaret=meta.add_empty_processing_event(parents);
      if (metaret.getExitStatus() == ReturnValue.SUCCESS) {
        processingID=metaret.getReturnValue();
        processingAccession=meta.mapProcessingIdToAccession(processingID);
        printAndAppendtoStdout(""String_Node_Str"" + processingAccession);
      }
 else {
        printAndAppendtoStderr(""String_Node_Str"" + metaret.getExitStatus());
        if (metaret.getStdout() != null) {
          printAndAppendtoStdout(""String_Node_Str"" + metaret.getStdout());
        }
        if (metaret.getStderr() != null) {
          printAndAppendtoStderr(""String_Node_Str"" + metaret.getStderr());
        }
        System.exit(ReturnValue.SQLQUERYFAILED);
      }
    }
    if (ancestorWorkflowRunAccession > 0 && processingID > 0) {
      meta.add_workflow_run_ancestor(ancestorWorkflowRunAccession,processingID);
    }
    if (workflowRunAccession > 0 && processingID > 0) {
      meta.update_processing_workflow_run(processingID,workflowRunAccession);
    }
  }
}",0.8067778660312417
188871,"private void postProcessMetadata(){
  Log.debug(""String_Node_Str"");
  if (meta != null && processingID != 0) {
    for (    File file : processingIDFiles) {
      Log.debug(""String_Node_Str"" + file.toString());
      int maxTries=(Integer)options.valueOf(""String_Node_Str"");
      for (int i=0; i < maxTries; i++) {
        if (LockingFileTools.lockAndAppend(file,processingID + System.getProperty(""String_Node_Str""))) {
          break;
        }
 else         if (i < maxTries) {
          ProcessTools.sleep((Integer)options.valueOf(""String_Node_Str""));
        }
 else {
          ReturnValue retval=new ReturnValue();
          retval.printAndAppendtoStderr(""String_Node_Str"");
          retval.setExitStatus(ReturnValue.METADATAINVALIDIDCHAIN);
          meta.update_processing_event(processingID,retval);
          meta.update_processing_status(processingID,ProcessingStatus.failed);
          System.exit(retval.getExitStatus());
        }
      }
    }
    Log.debug(""String_Node_Str"");
    for (    File file : processingAccessionFiles) {
      Log.debug(""String_Node_Str"" + file.toString());
      writeProcessingAccessionToFile(file,true);
    }
    Log.debug(""String_Node_Str"");
    if (processingAccessionFileCheck != null) {
      writeProcessingAccessionToFile(processingAccessionFileCheck,false);
    }
    Log.debug(""String_Node_Str"");
    meta.update_processing_status(processingID,ProcessingStatus.success);
  }
}","private void postProcessMetadata(){
  Log.debug(""String_Node_Str"");
  if (meta != null && processingID != 0) {
    for (    File file : processingIDFiles) {
      Log.debug(""String_Node_Str"" + file.toString());
      this.writeStringToFile(file,true,processingID + System.getProperty(""String_Node_Str""));
    }
    Log.debug(""String_Node_Str"");
    for (    File file : processingAccessionFiles) {
      Log.debug(""String_Node_Str"" + file.toString());
      writeStringToFile(file,true,processingAccession + System.getProperty(""String_Node_Str""));
    }
    Log.debug(""String_Node_Str"");
    if (processingAccessionFileCheck != null) {
      writeStringToFile(processingAccessionFileCheck,true,processingAccession + System.getProperty(""String_Node_Str""));
    }
    Log.debug(""String_Node_Str"");
    meta.update_processing_status(processingID,ProcessingStatus.success);
  }
}",0.3327556325823224
188872,"@Override public ReturnValue do_run(){
  try {
    File tempBundleFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempBundleFile.deleteOnExit();
    File tempSchedulerFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempSchedulerFile.deleteOnExit();
    if (!options.has(workflowAccessionSpec)) {
      runBundleManagerPlugin(options.valueOf(this.bundleDirSpec),tempBundleFile);
    }
 else {
      FileUtils.write(tempBundleFile,String.valueOf(options.valueOf(workflowAccessionSpec)));
    }
    runWorkflowSchedulerPlugin(tempBundleFile,tempSchedulerFile);
    runWorkflowLauncherPlugin(tempSchedulerFile);
    if (options.has(this.waitSpec)) {
      runWatcherPlugin();
    }
  }
 catch (  IOException e) {
    throw new ExitException(ReturnValue.FILENOTWRITABLE);
  }
 finally {
    if (!options.has(noRunSpec)) {
      runStatusCheckerPlugin();
    }
    if (metadata instanceof MetadataInMemory) {
      int workflowRunSWID=Integer.parseInt(workflowRunAccession);
      if (metadata.getWorkflowRun(workflowRunSWID).getStatus().equals(WorkflowRunStatus.failed)) {
        String stdout=metadata.getWorkflowRunReportStdOut(workflowRunSWID);
        String stderr=metadata.getWorkflowRunReportStdErr(workflowRunSWID);
        Log.stdoutWithTime(""String_Node_Str"" + stdout);
        Log.stderrWithTime(""String_Node_Str"" + stderr);
      }
    }
  }
  return new ReturnValue();
}","@Override public ReturnValue do_run(){
  boolean success=true;
  try {
    File tempBundleFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempBundleFile.deleteOnExit();
    File tempSchedulerFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempSchedulerFile.deleteOnExit();
    if (!options.has(workflowAccessionSpec)) {
      runBundleManagerPlugin(options.valueOf(this.bundleDirSpec),tempBundleFile);
    }
 else {
      FileUtils.write(tempBundleFile,String.valueOf(options.valueOf(workflowAccessionSpec)));
    }
    runWorkflowSchedulerPlugin(tempBundleFile,tempSchedulerFile);
    runWorkflowLauncherPlugin(tempSchedulerFile);
    if (options.has(this.waitSpec)) {
      runWatcherPlugin();
    }
  }
 catch (  IOException e) {
    throw new ExitException(ReturnValue.FILENOTWRITABLE);
  }
 finally {
    if (!options.has(noRunSpec)) {
      runStatusCheckerPlugin();
    }
    int workflowRunSWID=Integer.parseInt(workflowRunAccession);
    if (metadata instanceof MetadataInMemory) {
      if (metadata.getWorkflowRun(workflowRunSWID).getStatus().equals(WorkflowRunStatus.failed)) {
        String stdout=metadata.getWorkflowRunReportStdOut(workflowRunSWID);
        String stderr=metadata.getWorkflowRunReportStdErr(workflowRunSWID);
        Log.stdoutWithTime(""String_Node_Str"" + stdout);
        Log.stderrWithTime(""String_Node_Str"" + stderr);
      }
    }
    if (metadata.getWorkflowRun(workflowRunSWID).getStatus().equals(WorkflowRunStatus.failed)) {
      success=false;
    }
  }
  if (!success) {
    return new ReturnValue(ReturnValue.FAILURE);
  }
  return new ReturnValue();
}",0.8941330711242216
188873,"@Override public Integer call() throws Exception {
  CommandLine cmdLine;
  File scriptsDir=job.getScriptsDir();
  String optionsFileName=OozieJob.optsFileName(job.getName());
  String runnerFileName=OozieJob.runnerFileName(job.getName());
  if (WhiteStarWorkflowEngine.this.useSge) {
    cmdLine=new CommandLine(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + optionsFileName);
  }
 else {
    cmdLine=new CommandLine(""String_Node_Str"");
  }
  cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName);
  Executor executor=new DefaultExecutor();
  executor.setWorkingDirectory(scriptsDir);
  Log.stdoutWithTime(""String_Node_Str"" + cmdLine.toString());
  if (!WhiteStarWorkflowEngine.this.useSge) {
    String time=String.valueOf(System.currentTimeMillis()).substring(4);
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
    PumpStreamHandler streamHandler=new PumpStreamHandler(outputStream,errorStream);
    executor.setStreamHandler(streamHandler);
    try {
      executor.execute(cmdLine);
    }
 catch (    ExecuteException e) {
      throw rethrow(e);
    }
catch (    IOException e) {
      throw rethrow(e);
    }
 finally {
      FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + job.getName()+ ""String_Node_Str""+ time),outputStream.toString(),StandardCharsets.UTF_8);
      FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + job.getName()+ ""String_Node_Str""+ time),errorStream.toString(),StandardCharsets.UTF_8);
    }
  }
 else {
    executor.execute(cmdLine);
  }
  return 0;
}","@Override public Integer call() throws Exception {
  CommandLine cmdLine;
  File scriptsDir=job.getScriptsDir();
  String optionsFileName=OozieJob.optsFileName(job.getName());
  String runnerFileName=OozieJob.runnerFileName(job.getName());
  if (WhiteStarWorkflowEngine.this.useSge) {
    cmdLine=new CommandLine(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(""String_Node_Str"");
    cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + optionsFileName);
  }
 else {
    cmdLine=new CommandLine(""String_Node_Str"");
  }
  cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName);
  Executor executor=new DefaultExecutor();
  executor.setWorkingDirectory(scriptsDir);
  Log.stdoutWithTime(""String_Node_Str"" + cmdLine.toString());
  if (!WhiteStarWorkflowEngine.this.useSge) {
    String time=String.valueOf(System.currentTimeMillis()).substring(4);
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
    PumpStreamHandler streamHandler=new PumpStreamHandler(outputStream,errorStream);
    executor.setStreamHandler(streamHandler);
    try {
      executor.execute(cmdLine);
    }
 catch (    ExecuteException e) {
      throw rethrow(e);
    }
catch (    IOException e) {
      throw rethrow(e);
    }
 finally {
      FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + job.getName()+ ""String_Node_Str""+ time),outputStream.toString(StandardCharsets.UTF_8.name()),StandardCharsets.UTF_8);
      FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + job.getName()+ ""String_Node_Str""+ time),errorStream.toString(StandardCharsets.UTF_8.name()),StandardCharsets.UTF_8);
    }
  }
 else {
    executor.execute(cmdLine);
  }
  return 0;
}",0.9050429184549356
188874,"/** 
 */
private void populateNfsWorkDir(){
  File lib=new File(this.nfsWorkDir,""String_Node_Str"");
  lib.mkdir();
}","/** 
 */
private void populateNfsWorkDir(){
  File lib=new File(this.nfsWorkDir,""String_Node_Str"");
  boolean mkdir=lib.mkdir();
  if (!mkdir) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.7318611987381703
188875,"public static String seqwareJarPath(AbstractWorkflowDataModel objectModel){
  return objectModel.getWorkflowBaseDir() + ""String_Node_Str"" + objectModel.getTags().get(""String_Node_Str"")+ ""String_Node_Str"";
}","private static String seqwareJarPath(AbstractWorkflowDataModel objectModel){
  return objectModel.getWorkflowBaseDir() + ""String_Node_Str"" + objectModel.getTags().get(""String_Node_Str"")+ ""String_Node_Str"";
}",0.973365617433414
188876,"@Override public ReturnValue watchWorkflow(String jobToken){
  Metadata ws=MetadataFactory.get(ConfigTools.getSettings());
  WorkflowRun workflowRun=ws.getWorkflowRun(Integer.valueOf(jobToken));
  Log.stdout(""String_Node_Str"" + jobToken + ""String_Node_Str""+ workflowRun.getStatus().name());
  return new ReturnValue(workflowRun.getStatus() == WorkflowRunStatus.completed ? ReturnValue.SUCCESS : ReturnValue.FAILURE);
}","@Override public ReturnValue watchWorkflow(String jobToken){
  Metadata ws=MetadataFactory.get(ConfigTools.getSettings());
  WorkflowRun workflowRun=ws.getWorkflowRun(Integer.parseInt(jobToken));
  Log.stdout(""String_Node_Str"" + jobToken + ""String_Node_Str""+ workflowRun.getStatus().name());
  return new ReturnValue(workflowRun.getStatus() == WorkflowRunStatus.completed ? ReturnValue.SUCCESS : ReturnValue.FAILURE);
}",0.982078853046595
188877,"public static File initNfsWorkDir(AbstractWorkflowDataModel model){
  try {
    File nfsWorkDir=FileTools.createDirectoryWithUniqueName(new File(model.getEnv().getOOZIE_WORK_DIR()),""String_Node_Str"");
    nfsWorkDir.setWritable(true,false);
    System.out.println(""String_Node_Str"" + nfsWorkDir.getAbsolutePath());
    return nfsWorkDir;
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
}","private static File initNfsWorkDir(AbstractWorkflowDataModel model){
  try {
    File nfsWorkDir=FileTools.createDirectoryWithUniqueName(new File(model.getEnv().getOOZIE_WORK_DIR()),""String_Node_Str"");
    boolean setWritable=nfsWorkDir.setWritable(true,false);
    if (!setWritable) {
      throw new RuntimeException(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"" + nfsWorkDir.getAbsolutePath());
    return nfsWorkDir;
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
}",0.8727678571428571
188878,"@Override public ReturnValue runWorkflow(){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  try {
    for (    OozieJob job : this.workflowApp.getJobs()) {
      CommandLine cmdLine;
      File scriptsDir=job.getScriptsDir();
      String optionsFileName=OozieJob.optsFileName(job.getName());
      String runnerFileName=OozieJob.runnerFileName(job.getName());
      if (this.useSge) {
        cmdLine=new CommandLine(""String_Node_Str"");
        cmdLine.addArgument(""String_Node_Str"");
        cmdLine.addArgument(""String_Node_Str"");
        cmdLine.addArgument(""String_Node_Str"");
        cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + optionsFileName);
      }
 else {
        cmdLine=new CommandLine(""String_Node_Str"");
      }
      cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName);
      Executor executor=new DefaultExecutor();
      executor.setWorkingDirectory(scriptsDir);
      Log.stdoutWithTime(""String_Node_Str"" + cmdLine.toString());
      if (!this.useSge) {
        String time=String.valueOf(System.currentTimeMillis()).substring(4);
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
        PumpStreamHandler streamHandler=new PumpStreamHandler(outputStream,errorStream);
        executor.setStreamHandler(streamHandler);
        executor.execute(cmdLine);
        FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName+ ""String_Node_Str""+ time),outputStream.toString());
        FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName+ ""String_Node_Str""+ time),errorStream.toString());
      }
 else {
        executor.execute(cmdLine);
      }
    }
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
  Log.stdoutWithTime(""String_Node_Str"" + this.jobId);
  MetadataWS ws=MetadataFactory.getWS(ConfigTools.getSettings());
  WorkflowRun workflowRun=ws.getWorkflowRun(Integer.valueOf(this.jobId));
  workflowRun.setStatus(WorkflowRunStatus.completed);
  ws.updateWorkflowRun(workflowRun);
  return ret;
}","@Override public ReturnValue runWorkflow(){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  try {
    List<List<OozieJob>> jobs=this.workflowApp.getOrderedJobs();
    for (    List<OozieJob> rowOfJobs : jobs) {
      for (      OozieJob job : rowOfJobs) {
        CommandLine cmdLine;
        File scriptsDir=job.getScriptsDir();
        String optionsFileName=OozieJob.optsFileName(job.getName());
        String runnerFileName=OozieJob.runnerFileName(job.getName());
        if (this.useSge) {
          cmdLine=new CommandLine(""String_Node_Str"");
          cmdLine.addArgument(""String_Node_Str"");
          cmdLine.addArgument(""String_Node_Str"");
          cmdLine.addArgument(""String_Node_Str"");
          cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + optionsFileName);
        }
 else {
          cmdLine=new CommandLine(""String_Node_Str"");
        }
        cmdLine.addArgument(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName);
        Executor executor=new DefaultExecutor();
        executor.setWorkingDirectory(scriptsDir);
        Log.stdoutWithTime(""String_Node_Str"" + cmdLine.toString());
        if (!this.useSge) {
          String time=String.valueOf(System.currentTimeMillis()).substring(4);
          ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
          ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
          PumpStreamHandler streamHandler=new PumpStreamHandler(outputStream,errorStream);
          executor.setStreamHandler(streamHandler);
          executor.execute(cmdLine);
          FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName+ ""String_Node_Str""+ time),outputStream.toString());
          FileUtils.write(new File(scriptsDir.getAbsolutePath() + ""String_Node_Str"" + runnerFileName+ ""String_Node_Str""+ time),errorStream.toString());
        }
 else {
          executor.execute(cmdLine);
        }
      }
    }
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
  Log.stdoutWithTime(""String_Node_Str"" + this.jobId);
  MetadataWS ws=MetadataFactory.getWS(ConfigTools.getSettings());
  WorkflowRun workflowRun=ws.getWorkflowRun(Integer.valueOf(this.jobId));
  workflowRun.setStatus(WorkflowRunStatus.completed);
  ws.updateWorkflowRun(workflowRun);
  return ret;
}",0.9577025823686554
188879,"private static void create(List<String> args){
  if (isHelp(args,true)) {
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
  }
 else {
    String obj=args.remove(0);
    if (""String_Node_Str"".equals(obj)) {
      createExperiment(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createIus(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createLane(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createSample(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createSequencerRun(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createStudy(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createWorkflow(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createWorkflowRun(args);
    }
 else {
      kill(""String_Node_Str"",obj);
    }
  }
}","private static void create(List<String> args){
  if (isHelp(args,true)) {
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
    out(""String_Node_Str"");
  }
 else {
    String obj=args.remove(0);
    if (""String_Node_Str"".equals(obj)) {
      createExperiment(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createIus(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createLane(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createSample(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createSequencerRun(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createStudy(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createWorkflow(args);
    }
 else     if (""String_Node_Str"".equals(obj)) {
      createWorkflowRun(args);
    }
 else {
      kill(""String_Node_Str"",obj);
    }
  }
}",0.9892141756548536
188880,"public void testLatestWorkflowsInternal(List<Integer> accessions) throws IOException {
  String output=ITUtility.runSeqWareJar(""String_Node_Str"",ReturnValue.SUCCESS,null);
  Assert.assertTrue(""String_Node_Str"",output.contains(""String_Node_Str""));
  Map<String,WorkflowInfo> latestWorkflows=new HashMap<>();
  String[] lines=output.split(System.getProperty(""String_Node_Str""));
  for (  String line : lines) {
    String[] lineParts=line.split(""String_Node_Str"");
    try {
      int workflow_accession=Integer.valueOf(lineParts[3]);
      String workflowName=lineParts[0];
      String path=lineParts[lineParts.length - 2];
      if (path.equals(""String_Node_Str"")) {
        continue;
      }
      WorkflowInfo wi=new WorkflowInfo(workflow_accession,path,workflowName,lineParts[1]);
      File fileAtPath=new File(path);
      if (!fileAtPath.exists()) {
        Log.warn(""String_Node_Str"" + workflowName + ""String_Node_Str""+ workflow_accession+ ""String_Node_Str""+ path);
        continue;
      }
      if (!latestWorkflows.containsKey(workflowName)) {
        latestWorkflows.put(workflowName,wi);
      }
 else {
        int old=latestWorkflows.get(workflowName).sw_accession;
        if (workflow_accession > old) {
          latestWorkflows.put(workflowName,wi);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  ExecutorService threadPool=Executors.newFixedThreadPool(latestWorkflows.size());
  CompletionService<String> pool=new ExecutorCompletionService<>(threadPool);
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession);
    if (accessions.size() > 0) {
      Integer acc=e.getValue().sw_accession;
      if (!accessions.contains(acc)) {
        System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession+ ""String_Node_Str"");
        continue;
      }
    }
    StringBuilder params=new StringBuilder();
    params.append(""String_Node_Str"").append(e.getValue().path).append(""String_Node_Str"");
    params.append(""String_Node_Str"").append(e.getValue().version).append(""String_Node_Str"");
    params.append(""String_Node_Str"");
    File tempFile=File.createTempFile(e.getValue().name,""String_Node_Str"");
    pool.submit(new TestingThread(params.toString(),tempFile));
  }
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    try {
      pool.take().get();
    }
 catch (    InterruptedException|ExecutionException ex) {
      Log.error(ex);
    }
  }
  threadPool.shutdown();
}","public void testLatestWorkflowsInternal(List<Integer> accessions) throws IOException {
  String output=ITUtility.runSeqWareJar(""String_Node_Str"",ReturnValue.SUCCESS,null);
  Assert.assertTrue(""String_Node_Str"",output.contains(""String_Node_Str""));
  Map<String,WorkflowInfo> latestWorkflows=new HashMap<>();
  String[] lines=output.split(System.getProperty(""String_Node_Str""));
  for (  String line : lines) {
    String[] lineParts=line.split(""String_Node_Str"");
    try {
      int workflow_accession=Integer.valueOf(lineParts[3]);
      String workflowName=lineParts[0];
      String path=lineParts[lineParts.length - 2];
      if (path.equals(""String_Node_Str"")) {
        continue;
      }
      WorkflowInfo wi=new WorkflowInfo(workflow_accession,path,workflowName,lineParts[1]);
      File fileAtPath=new File(path);
      if (!fileAtPath.exists()) {
        Log.warn(""String_Node_Str"" + workflowName + ""String_Node_Str""+ workflow_accession+ ""String_Node_Str""+ path);
        continue;
      }
      if (!latestWorkflows.containsKey(workflowName)) {
        latestWorkflows.put(workflowName,wi);
      }
 else {
        int old=latestWorkflows.get(workflowName).sw_accession;
        if (workflow_accession > old) {
          latestWorkflows.put(workflowName,wi);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  ExecutorService threadPool=Executors.newFixedThreadPool(latestWorkflows.size());
  CompletionService<String> pool=new ExecutorCompletionService<>(threadPool);
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession);
    if (accessions.size() > 0) {
      Integer acc=e.getValue().sw_accession;
      if (!accessions.contains(acc)) {
        System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession+ ""String_Node_Str"");
        continue;
      }
    }
    StringBuilder params=new StringBuilder();
    params.append(""String_Node_Str"").append(e.getValue().path).append(""String_Node_Str"");
    params.append(""String_Node_Str"").append(e.getValue().version).append(""String_Node_Str"");
    params.append(""String_Node_Str"");
    params.append(""String_Node_Str"").append(e.getValue().name);
    File tempFile=File.createTempFile(e.getValue().name,""String_Node_Str"");
    pool.submit(new TestingThread(params.toString(),tempFile));
  }
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    try {
      pool.take().get();
    }
 catch (    InterruptedException|ExecutionException ex) {
      Log.error(ex);
    }
  }
  threadPool.shutdown();
}",0.987734764277501
188881,"@Test public void testSequencerRunSkipValue() throws IOException {
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}","@Test public void testSequencerRunSkipValue() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}",0.8205128205128205
188882,"@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}",0.8292682926829268
188883,"@Test public void testSequencerRunSkipOnly() throws IOException {
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunSkipOnly() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}",0.8108108108108109
188884,"@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}",0.8292682926829268
188885,"@Test public void testSequencerRunSkipOnly() throws IOException {
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunSkipOnly() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}",0.8108108108108109
188886,"@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunAnnotateArbitrary() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateAndReannotate(AttributeType.SEQUENCER_RUN,47150);
}",0.8292682926829268
188887,"@Test public void testSequencerRunSkipOnly() throws IOException {
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}","@Test public void testSequencerRunSkipOnly() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  toggleSkipOnly(AttributeType.SEQUENCER_RUN,47150);
}",0.8108108108108109
188888,"@Test public void testSequencerRunSkipValue() throws IOException {
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}","@Test public void testSequencerRunSkipValue() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}",0.8205128205128205
188889,"@Test public void testSequencerRunSkipValue() throws IOException {
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}","@Test public void testSequencerRunSkipValue() throws IOException {
  ExtendedTestDatabaseCreator.resetDatabaseWithUsers();
  annotateSkipImplicitly(AttributeType.SEQUENCER_RUN,4715);
}",0.8205128205128205
188890,"private void reportOnWorkflowRun(String workflowRunAccession) throws IOException {
  String title=""String_Node_Str"" + workflowRunAccession;
  initWriter(title);
  String report=metadata.getWorkflowRunReport(Integer.parseInt(workflowRunAccession));
  if (report == null) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.INVALIDPARAMETERS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}","private void reportOnWorkflowRun(String workflowRunAccession) throws IOException {
  String title=""String_Node_Str"" + workflowRunAccession;
  initWriter(title);
  String report;
  try {
    report=metadata.getWorkflowRunReport(Integer.parseInt(workflowRunAccession));
  }
 catch (  RuntimeException e) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.INVALIDPARAMETERS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}",0.935483870967742
188891,"private void reportOnWorkflow(String workflowAccession,Date earlyDate,Date lateDate) throws IOException {
  String title=""String_Node_Str"" + workflowAccession;
  if (earlyDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(earlyDate);
  }
  if (lateDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(lateDate);
  }
  initWriter(title);
  String report=metadata.getWorkflowRunReport(Integer.parseInt(workflowAccession),earlyDate,lateDate);
  if (report == null) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.INVALIDPARAMETERS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}","private void reportOnWorkflow(String workflowAccession,Date earlyDate,Date lateDate) throws IOException {
  String title=""String_Node_Str"" + workflowAccession;
  if (earlyDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(earlyDate);
  }
  if (lateDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(lateDate);
  }
  initWriter(title);
  String report;
  try {
    report=metadata.getWorkflowRunReport(Integer.parseInt(workflowAccession),earlyDate,lateDate);
  }
 catch (  RuntimeException e) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.INVALIDPARAMETERS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}",0.9543624161073826
188892,"private void reportOnWorkflowRuns(Date earlyDate,Date lateDate) throws IOException {
  String title=""String_Node_Str"";
  if (earlyDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(earlyDate);
  }
  if (lateDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(lateDate);
  }
  initWriter(title);
  String report=metadata.getWorkflowRunReport(earlyDate,lateDate);
  if (report == null) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.SUCCESS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}","private void reportOnWorkflowRuns(Date earlyDate,Date lateDate) throws IOException {
  String title=""String_Node_Str"";
  if (earlyDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(earlyDate);
  }
  if (lateDate != null) {
    title+=""String_Node_Str"" + dateFormat.format(lateDate);
  }
  initWriter(title);
  String report;
  try {
    report=metadata.getWorkflowRunReport(earlyDate,lateDate);
  }
 catch (  RuntimeException e) {
    println(""String_Node_Str"");
    ret=new ReturnValue(ReturnValue.SUCCESS);
    return;
  }
  if (options.has(""String_Node_Str"")) {
    writer.write(TabExpansionUtil.expansion(report));
    return;
  }
  writer.write(report);
}",0.9483282674772036
188893,"@Override public Map<String,SqwFile> setupFiles(){
  try {
    SqwFile file0=this.createFile(""String_Node_Str"");
    file0.setSourcePath(getProperty(""String_Node_Str""));
    file0.setType(""String_Node_Str"");
    file0.setIsInput(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new RuntimeException(e);
  }
  return this.getFiles();
}","@Override public Map<String,SqwFile> setupFiles(){
  try {
    SqwFile file0=this.createFile(""String_Node_Str"");
    file0.setSourcePath(getProperty(""String_Node_Str""));
    file0.setType(""String_Node_Str"");
    file0.setIsInput(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new RuntimeException(ex);
  }
  return this.getFiles();
}",0.99860529986053
188894,"@Test public void testModifyingTheWorkflow() throws IOException {
  Log.info(""String_Node_Str"" + JavaClient.getAbsolutePath());
  List<String> readLines=FileUtils.readLines(JavaClient);
  boolean linesAdded=false;
  for (int i=0; i < readLines.size(); i++) {
    if (readLines.get(i).contains(""String_Node_Str"")) {
      readLines.add(i,""String_Node_Str"" + ""String_Node_Str"");
      linesAdded=true;
    }
  }
  Assert.assertTrue(""String_Node_Str"",linesAdded);
  FileUtils.writeLines(JavaClient,readLines,false);
  File buildDir=BundleDir;
  Log.info(""String_Node_Str"" + buildDir.getAbsolutePath());
  String command=""String_Node_Str"";
  String genOutput=ITUtility.runArbitraryCommand(command,0,buildDir);
}","@Test public void testModifyingTheWorkflow() throws IOException {
  Log.info(""String_Node_Str"" + JavaClient.getAbsolutePath());
  List<String> readLines=FileUtils.readLines(JavaClient);
  boolean linesAdded=false;
  for (int i=0; i < readLines.size(); i++) {
    if (readLines.get(i).contains(""String_Node_Str"")) {
      readLines.remove(i);
      readLines.add(i,""String_Node_Str"" + ""String_Node_Str"");
      linesAdded=true;
    }
  }
  Assert.assertTrue(""String_Node_Str"",linesAdded);
  FileUtils.writeLines(JavaClient,readLines,false);
  File buildDir=BundleDir;
  Log.info(""String_Node_Str"" + buildDir.getAbsolutePath());
  String command=""String_Node_Str"";
  String genOutput=ITUtility.runArbitraryCommand(command,0,buildDir);
}",0.981263011797363
188895,"/** 
 * This is the original run method from the old Workflow launcher. This still does scheduling since the new workflow launcher does not understand scheduling.
 * @return
 */
public ReturnValue doOldRun(){
  BasicWorkflow w=this.createWorkflow();
  boolean metadataWriteback=true;
  if (options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) {
    metadataWriteback=false;
  }
  ArrayList<String> parentAccessions=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      parentAccessions.addAll(Arrays.asList(tokens));
    }
  }
  ArrayList<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      parentsLinkedToWR.addAll(Arrays.asList(tokens));
    }
  }
  ArrayList<String> iniFiles=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      iniFiles.addAll(Arrays.asList(tokens));
    }
  }
  Set<Integer> inputFiles=WorkflowPlugin.collectInputFiles(options,metadata);
  if (options.has(INPUT_FILES) && (inputFiles == null || inputFiles.isEmpty())) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
    return ret;
  }
  List<String> nonOptions=options.nonOptionArguments();
  Log.info(""String_Node_Str"" + nonOptions.size());
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
    if (options.has(SCHEDULE)) {
      if (!options.has(HOST)) {
        Log.error(""String_Node_Str"");
        Log.info(this.get_syntax());
        ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
        return ret;
      }
      String host=(String)options.valueOf(HOST);
      String engine=getEngineParam();
      Log.info(""String_Node_Str"" + host + ""String_Node_Str"");
      ret=w.scheduleInstalledBundle((String)options.valueOf(""String_Node_Str""),(String)options.valueOf(""String_Node_Str""),iniFiles,metadataWriteback,parentAccessions,parentsLinkedToWR,false,nonOptions,host,engine,inputFiles);
    }
 else {
      Log.info(""String_Node_Str"");
      ret=w.launchInstalledBundle((String)options.valueOf(""String_Node_Str""),(String)options.valueOf(""String_Node_Str""),iniFiles,metadataWriteback,parentAccessions,parentsLinkedToWR,options.has(WAIT),nonOptions,inputFiles);
    }
  }
 else   if ((options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) && options.has(""String_Node_Str"") && options.has(""String_Node_Str"")&& options.has(""String_Node_Str"")) {
    Log.info(""String_Node_Str"");
    String bundlePath=""String_Node_Str"";
    if (options.has(""String_Node_Str"")) {
      bundlePath=(String)options.valueOf(""String_Node_Str"");
    }
 else {
      bundlePath=(String)options.valueOf(""String_Node_Str"");
    }
    Log.info(""String_Node_Str"" + bundlePath);
    String workflow=(String)options.valueOf(""String_Node_Str"");
    String version=(String)options.valueOf(""String_Node_Str"");
    String metadataFile=(String)options.valueOf(""String_Node_Str"");
    ret=w.launchBundle(workflow,version,metadataFile,bundlePath,iniFiles,false,new ArrayList<String>(),new ArrayList<String>(),options.has(WAIT),nonOptions,inputFiles);
  }
 else   if (options.has(LAUNCH_SCHEDULED)) {
    try {
      JUnique.acquireLock(appID);
    }
 catch (    AlreadyLockedException e) {
      Log.error(""String_Node_Str"" + appID + ""String_Node_Str"",e);
      ret.setExitStatus(ReturnValue.FAILURE);
      return ret;
    }
    launchScheduledWorkflows(w,metadataWriteback);
  }
 else {
    Log.error(""String_Node_Str"");
    Log.info(this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
  }
  return ret;
}","/** 
 * This is the original run method from the old Workflow launcher. This still does scheduling since the new workflow launcher does not understand scheduling.
 * @return
 */
public ReturnValue doOldRun(){
  BasicWorkflow w=this.createWorkflow();
  boolean metadataWriteback=true;
  if (options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) {
    metadataWriteback=false;
  }
  ArrayList<String> parentAccessions=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      parentAccessions.addAll(Arrays.asList(tokens));
    }
  }
  ArrayList<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      parentsLinkedToWR.addAll(Arrays.asList(tokens));
    }
  }
  ArrayList<String> iniFiles=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      iniFiles.addAll(Arrays.asList(tokens));
    }
  }
  Set<Integer> inputFiles=WorkflowPlugin.collectInputFiles(options,metadata);
  if (options.has(INPUT_FILES) && (inputFiles == null || inputFiles.isEmpty())) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
    return ret;
  }
  List<String> nonOptions=options.nonOptionArguments();
  Log.info(""String_Node_Str"" + nonOptions.size());
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
    if (options.has(SCHEDULE)) {
      if (!options.has(HOST)) {
        Log.error(""String_Node_Str"");
        Log.info(this.get_syntax());
        ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
        return ret;
      }
      String host=(String)options.valueOf(HOST);
      String engine=getEngineParam();
      Log.info(""String_Node_Str"" + host + ""String_Node_Str"");
      ret=w.scheduleInstalledBundle((String)options.valueOf(""String_Node_Str""),(String)options.valueOf(""String_Node_Str""),iniFiles,metadataWriteback,parentAccessions,parentsLinkedToWR,false,nonOptions,host,engine,inputFiles);
    }
 else {
      Log.info(""String_Node_Str"");
      ret=w.launchInstalledBundle((String)options.valueOf(""String_Node_Str""),(String)options.valueOf(""String_Node_Str""),iniFiles,metadataWriteback,parentAccessions,parentsLinkedToWR,options.has(WAIT),nonOptions,inputFiles);
    }
  }
 else   if ((options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) && options.has(""String_Node_Str"") && options.has(""String_Node_Str"")&& options.has(""String_Node_Str"")) {
    Log.info(""String_Node_Str"");
    String bundlePath=""String_Node_Str"";
    if (options.has(""String_Node_Str"")) {
      bundlePath=(String)options.valueOf(""String_Node_Str"");
    }
 else {
      bundlePath=(String)options.valueOf(""String_Node_Str"");
    }
    Log.info(""String_Node_Str"" + bundlePath);
    String workflow=(String)options.valueOf(""String_Node_Str"");
    String version=(String)options.valueOf(""String_Node_Str"");
    String metadataFile=(String)options.valueOf(""String_Node_Str"");
    ret=w.launchBundle(workflow,version,metadataFile,bundlePath,iniFiles,false,new ArrayList<String>(),new ArrayList<String>(),options.has(WAIT),nonOptions,inputFiles);
  }
 else   if (options.has(LAUNCH_SCHEDULED)) {
    RunLock.acquire();
    launchScheduledWorkflows(w,metadataWriteback);
  }
 else {
    Log.error(""String_Node_Str"");
    Log.info(this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
  }
  return ret;
}",0.9711923524092496
188896,"/** 
 * {@inheritDoc}
 */
@Override public ReturnValue init(){
  try {
    String lock=appID;
    if (options.has(""String_Node_Str"")) {
      Log.stderr(""String_Node_Str"");
      lock=ConfigTools.getSettings().get(""String_Node_Str"");
    }
    JUnique.acquireLock(lock);
  }
 catch (  AlreadyLockedException e) {
    Log.error(""String_Node_Str"" + appID + ""String_Node_Str"");
    classReturnValue.setExitStatus(ReturnValue.FAILURE);
  }
  if (classReturnValue.getExitStatus() != ReturnValue.SUCCESS) {
    return (classReturnValue);
  }
  LocalhostPair localhost=FileTools.getLocalhost(options);
  if (localhost.returnValue != null && localhost.returnValue.getExitStatus() != ReturnValue.SUCCESS) {
    return (localhost.returnValue);
  }
 else {
    this.hostname=localhost.hostname;
  }
  if (this.config.get(""String_Node_Str"") == null || ""String_Node_Str"".equals(this.config.get(""String_Node_Str""))) {
    Log.error(""String_Node_Str"");
    classReturnValue.setExitStatus(ReturnValue.FAILURE);
  }
  this.username=this.config.get(""String_Node_Str"");
  classReturnValue.setExitStatus(ReturnValue.SUCCESS);
  return classReturnValue;
}","/** 
 * {@inheritDoc}
 */
@Override public ReturnValue init(){
  RunLock.acquire();
  if (classReturnValue.getExitStatus() != ReturnValue.SUCCESS) {
    return (classReturnValue);
  }
  LocalhostPair localhost=FileTools.getLocalhost(options);
  if (localhost.returnValue != null && localhost.returnValue.getExitStatus() != ReturnValue.SUCCESS) {
    return (localhost.returnValue);
  }
 else {
    this.hostname=localhost.hostname;
  }
  if (this.config.get(""String_Node_Str"") == null || ""String_Node_Str"".equals(this.config.get(""String_Node_Str""))) {
    Log.error(""String_Node_Str"");
    classReturnValue.setExitStatus(ReturnValue.FAILURE);
  }
  this.username=this.config.get(""String_Node_Str"");
  classReturnValue.setExitStatus(ReturnValue.SUCCESS);
  return classReturnValue;
}",0.2265135699373695
188897,"/** 
 * <p> Constructor for WorkflowStatusChecker. </p>
 */
public WorkflowStatusChecker(){
  super();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(WORKFLOW_RUN_ACCESSION,""String_Node_Str""),""String_Node_Str"").withRequiredArg().withValuesSeparatedBy(',').ofType(Integer.class);
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg().ofType(Integer.class);
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  classReturnValue.setExitStatus(ReturnValue.SUCCESS);
}","/** 
 * <p> Constructor for WorkflowStatusChecker. </p>
 */
public WorkflowStatusChecker(){
  super();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(WORKFLOW_RUN_ACCESSION,""String_Node_Str""),""String_Node_Str"").withRequiredArg().withValuesSeparatedBy(',').ofType(Integer.class);
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg();
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  parser.acceptsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").withRequiredArg().ofType(Integer.class);
  classReturnValue.setExitStatus(ReturnValue.SUCCESS);
}",0.9300587293112652
188898,"@After public void cleanMocks(){
  JUnique.releaseLock(WorkflowStatusChecker.appID);
}","@After public void cleanMocks(){
  RunLock.release();
}",0.6950354609929078
188899,"/** 
 * Use SQL to directly retrieve relevant workflows runs (defined as any workflow runs that  include one or more files in the set we were given)
 * @param files
 * @return
 * @throws SQLException 
 */
private WorkflowRunList2 directRetrieveWorkflowRuns(List<Integer> files) throws SQLException {
  final WorkflowRunList2 runs=new WorkflowRunList2();
  runs.setList(new ArrayList());
  if (files.size() > 0) {
    ResultSet rs=null;
    MetadataDB mdb=null;
    try {
      WorkflowRunService ss=BeanFactory.getWorkflowRunServiceBean();
      StringBuilder query=new StringBuilder();
      query.append(""String_Node_Str"");
      query.append(""String_Node_Str"");
      for (int i=0; i < files.size() - 1; i++) {
        Integer fInt=files.get(i);
        query.append(""String_Node_Str"").append(fInt).append(""String_Node_Str"");
      }
      Integer fInt=files.get(files.size() - 1);
      query.append(""String_Node_Str"").append(fInt).append(""String_Node_Str"");
      query.append(""String_Node_Str"");
      Log.info(""String_Node_Str"" + query);
      mdb=DBAccess.get();
      rs=mdb.executeQuery(query.toString());
      while (rs.next()) {
        int workflowSWID=rs.getInt(""String_Node_Str"");
        WorkflowRun workflowRun=(WorkflowRun)testIfNull(ss.findBySWAccession(workflowSWID));
        runs.add(workflowRun);
      }
    }
  finally {
      if (mdb != null) {
        DbUtils.closeQuietly(mdb.getDb(),mdb.getSql(),rs);
      }
      DBAccess.close();
    }
  }
  return runs;
}","/** 
 * Use SQL to directly retrieve relevant workflows runs (defined as any workflow runs that  include one or more files in the set we were given)
 * @param files
 * @return
 * @throws SQLException 
 */
private WorkflowRunList2 directRetrieveWorkflowRuns(List<Integer> files) throws SQLException {
  final Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
  final WorkflowRunList2 runs=new WorkflowRunList2();
  runs.setList(new ArrayList());
  if (files.size() > 0) {
    ResultSet rs=null;
    MetadataDB mdb=null;
    try {
      WorkflowRunService ss=BeanFactory.getWorkflowRunServiceBean();
      StringBuilder query=new StringBuilder();
      query.append(""String_Node_Str"");
      query.append(""String_Node_Str"");
      for (int i=0; i < files.size() - 1; i++) {
        Integer fInt=files.get(i);
        query.append(""String_Node_Str"").append(fInt).append(""String_Node_Str"");
      }
      Integer fInt=files.get(files.size() - 1);
      query.append(""String_Node_Str"").append(fInt).append(""String_Node_Str"");
      query.append(""String_Node_Str"");
      Log.info(""String_Node_Str"" + query);
      mdb=DBAccess.get();
      rs=mdb.executeQuery(query.toString());
      while (rs.next()) {
        int workflowSWID=rs.getInt(""String_Node_Str"");
        WorkflowRun workflowRun=(WorkflowRun)testIfNull(ss.findBySWAccession(workflowSWID));
        WorkflowRun dto=copier.hibernate2dto(WorkflowRun.class,workflowRun);
        runs.add(dto);
      }
    }
  finally {
      if (mdb != null) {
        DbUtils.closeQuietly(mdb.getDb(),mdb.getSql(),rs);
      }
      DBAccess.close();
    }
  }
  return runs;
}",0.9514313284014152
188900,"@Test public void getDirectFilesAssociatedWithWorkflowRuns(){
  List<Integer> files=new ArrayList<Integer>();
  List<WorkflowRun> result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"",result == null);
  WorkflowRun wr=instance.getWorkflowRun(863);
  Assert.assertTrue(""String_Node_Str"",wr.getInputFiles().isEmpty());
  final int f1_sw_accession=835;
  wr.getInputFiles().add(f1_sw_accession);
  final int f2_sw_accession=838;
  wr.getInputFiles().add(f2_sw_accession);
  final int f3_sw_accession=866;
  wr.getInputFiles().add(f3_sw_accession);
  instance.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdOut(),wr.getStdErr(),wr.getWorkflowEngine(),wr.getInputFiles());
  final int f4_sw_accession=867;
  wr.getInputFiles().add(f1_sw_accession);
  wr.getInputFiles().add(f4_sw_accession);
  wr=instance.getWorkflowRun(6603);
  instance.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdOut(),wr.getStdErr(),wr.getWorkflowEngine(),wr.getInputFiles());
  files.add(835);
  result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"" + result.size(),result.size() == 2);
  Assert.assertTrue(""String_Node_Str"",result.get(0).getSwAccession() == 863);
  Assert.assertTrue(""String_Node_Str"",result.get(1).getSwAccession() == 6603);
  files.clear();
  files.add(867);
  result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"" + result.size(),result.size() == 1);
}","@Test public void getDirectFilesAssociatedWithWorkflowRuns(){
  BasicTestDatabaseCreator.resetDatabaseWithUsers();
  List<Integer> files=new ArrayList<Integer>();
  List<WorkflowRun> result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"",result.isEmpty());
  WorkflowRun wr=instance.getWorkflowRun(863);
  Assert.assertTrue(""String_Node_Str"",wr.getInputFiles().isEmpty());
  final int f1_sw_accession=835;
  wr.getInputFiles().add(f1_sw_accession);
  final int f2_sw_accession=838;
  wr.getInputFiles().add(f2_sw_accession);
  final int f3_sw_accession=866;
  wr.getInputFiles().add(f3_sw_accession);
  instance.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdOut(),wr.getStdErr(),wr.getWorkflowEngine(),wr.getInputFiles());
  final int f4_sw_accession=867;
  wr=instance.getWorkflowRun(6603);
  wr.getInputFiles().add(f1_sw_accession);
  wr.getInputFiles().add(f4_sw_accession);
  instance.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdOut(),wr.getStdErr(),wr.getWorkflowEngine(),wr.getInputFiles());
  files.add(f1_sw_accession);
  result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"" + result.size(),result.size() == 2);
  Assert.assertTrue(""String_Node_Str"",result.get(0).getSwAccession() == 863);
  Assert.assertTrue(""String_Node_Str"",result.get(1).getSwAccession() == 6603);
  files.clear();
  files.add(f4_sw_accession);
  result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"" + result.size(),result.size() == 1);
  Assert.assertTrue(""String_Node_Str"",result.get(0).getSwAccession() == 6603);
  files.add(f1_sw_accession);
  result=instance.getWorkflowRunsAssociatedWithFiles(files);
  Assert.assertTrue(""String_Node_Str"" + result.size(),result.size() == 2);
  Assert.assertTrue(""String_Node_Str"",result.get(0).getSwAccession() == 863);
  Assert.assertTrue(""String_Node_Str"",result.get(1).getSwAccession() == 6603);
}",0.7631512710797885
188901,"private List<String> runnerArgs(){
  List<String> args=runnerMetaDataArgs();
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  if (file.isInput()) {
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    args.add(file.getSourcePath());
    args.add(""String_Node_Str"");
    args.add(outputDir);
  }
 else {
    args.add(""String_Node_Str"");
    args.add(String.format(""String_Node_Str"",jobObj.getAlgo(),file.getType(),oozie_working_dir,file.getSourcePath()));
  }
  if (file.getOutputPath() != null) {
    args.add(""String_Node_Str"");
    args.add(file.getOutputPath());
  }
 else   if (file.isInput()) {
    args.add(""String_Node_Str"");
    args.add(outputDir);
  }
 else {
    args.add(""String_Node_Str"");
    args.add(metadataOutputPrefix + ""String_Node_Str"" + outputDir);
  }
  if (file.isForceCopy()) {
    args.add(""String_Node_Str"");
  }
  return args;
}","private List<String> runnerArgs(){
  List<String> args=runnerMetaDataArgs();
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  args.add(""String_Node_Str"");
  if (file.isInput()) {
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"");
    args.add(file.getSourcePath());
    if (file.getOutputPath() != null) {
      args.add(""String_Node_Str"");
      args.add(file.getOutputPath());
    }
 else {
      args.add(""String_Node_Str"");
      args.add(outputDir);
    }
  }
 else {
    args.add(""String_Node_Str"");
    args.add(String.format(""String_Node_Str"",jobObj.getAlgo(),file.getType(),oozie_working_dir,file.getSourcePath()));
    if (file.getOutputPath() != null) {
      args.add(""String_Node_Str"");
      args.add(file.getOutputPath());
    }
 else {
      args.add(""String_Node_Str"");
      args.add(metadataOutputPrefix + ""String_Node_Str"" + outputDir);
    }
  }
  if (file.isForceCopy()) {
    args.add(""String_Node_Str"");
  }
  return args;
}",0.680021085925145
188902,"/** 
 * @return ReturnValue
 */
protected ReturnValue addWorkflowRun(){
  String[] necessaryFields={""String_Node_Str"",""String_Node_Str""};
  if (interactive) {
    print(""String_Node_Str"");
  }
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (checkFields(necessaryFields)) {
    int workflowRunId=metadata.add_workflow_run(Integer.parseInt(fields.get(""String_Node_Str"")));
    int workflowRunAccession=metadata.get_workflow_run_accession(workflowRunId);
    print(""String_Node_Str"" + workflowRunAccession);
    int[] parents=parseParentAccessions();
    ReturnValue metaret=metadata.add_empty_processing_event_by_parent_accession(parents);
    int processingId=metaret.getReturnValue();
    ReturnValue newRet=new ReturnValue();
    newRet.setFiles(this.files);
    metadata.update_processing_event(processingId,newRet);
    metadata.update_processing_workflow_run(processingId,workflowRunAccession);
    WorkflowRun wr=metadata.getWorkflowRun(workflowRunAccession);
    wr.setStatus(fields.get(""String_Node_Str""));
    wr.setStdOut(fields.get(""String_Node_Str""));
    wr.setStdErr(fields.get(""String_Node_Str""));
    metadata.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),0,0,wr.getStdErr(),wr.getStdOut(),wr.getWorkflowEngine());
  }
 else {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}","/** 
 * @return ReturnValue
 */
protected ReturnValue addWorkflowRun(){
  String[] necessaryFields={""String_Node_Str"",""String_Node_Str""};
  if (interactive) {
    print(""String_Node_Str"");
  }
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (checkFields(necessaryFields)) {
    int workflowRunId=metadata.add_workflow_run(Integer.parseInt(fields.get(""String_Node_Str"")));
    int workflowRunAccession=metadata.get_workflow_run_accession(workflowRunId);
    print(""String_Node_Str"" + workflowRunAccession);
    int[] parents=parseParentAccessions();
    ReturnValue metaret=metadata.add_empty_processing_event_by_parent_accession(parents);
    int processingId=metaret.getReturnValue();
    ReturnValue newRet=new ReturnValue();
    newRet.setFiles(this.files);
    metadata.update_processing_event(processingId,newRet);
    metadata.update_processing_workflow_run(processingId,workflowRunAccession);
    WorkflowRun wr=metadata.getWorkflowRun(workflowRunAccession);
    wr.setStatus(fields.get(""String_Node_Str""));
    wr.setStdOut(fields.get(""String_Node_Str""));
    wr.setStdErr(fields.get(""String_Node_Str""));
    metadata.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdErr(),wr.getStdOut(),wr.getWorkflowEngine());
  }
 else {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}",0.9986595174262736
188903,"protected static Element addProp(Element config,String name,String value){
  Element prop=add(config,""String_Node_Str"");
  add(prop,""String_Node_Str"",name);
  add(prop,""String_Node_Str"",value);
  config.addContent(prop);
  return prop;
}","protected static Element addProp(Element config,String name,String value){
  Element prop=add(config,""String_Node_Str"");
  add(prop,""String_Node_Str"",name);
  add(prop,""String_Node_Str"",value);
  return prop;
}",0.9395973154362416
188904,"/** 
 * @return ReturnValue
 */
protected ReturnValue addWorkflowRun(){
  String[] necessaryFields={""String_Node_Str"",""String_Node_Str""};
  if (interactive) {
    print(""String_Node_Str"");
  }
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (checkFields(necessaryFields)) {
    int workflowRunId=metadata.add_workflow_run(Integer.parseInt(fields.get(""String_Node_Str"")));
    int workflowRunAccession=metadata.get_workflow_run_accession(workflowRunId);
    print(""String_Node_Str"" + workflowRunAccession);
    int[] parents=parseParentAccessions();
    ReturnValue metaret=metadata.add_empty_processing_event_by_parent_accession(parents);
    int processingId=metaret.getReturnValue();
    ReturnValue newRet=new ReturnValue();
    newRet.setFiles(this.files);
    metadata.update_processing_event(processingId,newRet);
    metadata.update_processing_workflow_run(processingId,workflowRunAccession);
    WorkflowRun wr=metadata.getWorkflowRun(workflowRunAccession);
    wr.setStatus(fields.get(""String_Node_Str""));
    wr.setStdOut(fields.get(""String_Node_Str""));
    wr.setStdErr(fields.get(""String_Node_Str""));
    metadata.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),0,0,wr.getStdErr(),wr.getStdOut(),wr.getWorkflowEngine());
  }
 else {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}","/** 
 * @return ReturnValue
 */
protected ReturnValue addWorkflowRun(){
  String[] necessaryFields={""String_Node_Str"",""String_Node_Str""};
  if (interactive) {
    print(""String_Node_Str"");
  }
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (checkFields(necessaryFields)) {
    int workflowRunId=metadata.add_workflow_run(Integer.parseInt(fields.get(""String_Node_Str"")));
    int workflowRunAccession=metadata.get_workflow_run_accession(workflowRunId);
    print(""String_Node_Str"" + workflowRunAccession);
    int[] parents=parseParentAccessions();
    ReturnValue metaret=metadata.add_empty_processing_event_by_parent_accession(parents);
    int processingId=metaret.getReturnValue();
    ReturnValue newRet=new ReturnValue();
    newRet.setFiles(this.files);
    metadata.update_processing_event(processingId,newRet);
    metadata.update_processing_workflow_run(processingId,workflowRunAccession);
    WorkflowRun wr=metadata.getWorkflowRun(workflowRunAccession);
    wr.setStatus(fields.get(""String_Node_Str""));
    wr.setStdOut(fields.get(""String_Node_Str""));
    wr.setStdErr(fields.get(""String_Node_Str""));
    metadata.update_workflow_run(wr.getWorkflowRunId(),wr.getCommand(),wr.getTemplate(),wr.getStatus(),wr.getStatusCmd(),wr.getCurrentWorkingDir(),wr.getDax(),wr.getIniFile(),wr.getHost(),wr.getStdErr(),wr.getStdOut(),wr.getWorkflowEngine());
  }
 else {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}",0.9986595174262736
188905,"/** 
 * {@inheritDoc}This method doesn't just copy the list, it actually parses through the list and looks for values that start with "" or ' and then attempts to merge other parameters separated by space until an param ending with "" or ' is found. This is to work around a limitation in JOpt. It breaks apart arguments by space regarless if the arg is a quoted string (and hence should be treated as one arg)
 */
public void setParameters(List<String> parameters){
  Log.info(""String_Node_Str"");
  this.parameters.clear();
  boolean readingQuoteString=false;
  String quoteString=null;
  StringBuffer buffer=new StringBuffer();
  for (  String param : parameters) {
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (readingQuoteString && !param.endsWith(quoteString)) {
      buffer.append(""String_Node_Str"" + param);
    }
 else     if (param.startsWith(""String_Node_Str"") && !readingQuoteString) {
      quoteString=""String_Node_Str"";
      readingQuoteString=true;
      buffer.append(param.substring(1));
    }
 else     if (param.startsWith(""String_Node_Str"") && !readingQuoteString) {
      quoteString=""String_Node_Str"";
      readingQuoteString=true;
      buffer.append(param.substring(1));
    }
 else     if (readingQuoteString && param.endsWith(quoteString)) {
      buffer.append(""String_Node_Str"" + param.substring(0,param.length() - 1));
      readingQuoteString=false;
      quoteString=null;
      Log.info(""String_Node_Str"" + buffer.toString());
      this.parameters.add(buffer.toString());
      buffer=new StringBuffer();
    }
 else {
      Log.info(""String_Node_Str"" + param);
      this.parameters.add(param);
    }
  }
}","/** 
 * {@inheritDoc}This method doesn't just copy the list, it actually parses through the list and looks for values that start with "" or ' and then attempts to merge other parameters separated by space until an param ending with "" or ' is found. This is to work around a limitation in JOpt. It breaks apart arguments by space regarless if the arg is a quoted string (and hence should be treated as one arg)
 */
public void setParameters(List<String> parameters){
  Log.info(""String_Node_Str"");
  this.parameters.clear();
  boolean readingQuoteString=false;
  String quoteString=null;
  StringBuffer buffer=new StringBuffer();
  for (  String param : parameters) {
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    param=param.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (readingQuoteString && !param.endsWith(quoteString)) {
      buffer.append(""String_Node_Str"" + param);
    }
 else     if (param.startsWith(""String_Node_Str"") && !readingQuoteString) {
      quoteString=""String_Node_Str"";
      readingQuoteString=true;
      buffer.append(param.substring(1));
    }
 else     if (param.startsWith(""String_Node_Str"") && !param.endsWith(""String_Node_Str"") && !readingQuoteString) {
      quoteString=""String_Node_Str"";
      readingQuoteString=true;
      buffer.append(param.substring(1));
    }
 else     if (readingQuoteString && param.endsWith(quoteString)) {
      buffer.append(""String_Node_Str"" + param.substring(0,param.length() - 1));
      readingQuoteString=false;
      quoteString=null;
      Log.info(""String_Node_Str"" + buffer.toString());
      this.parameters.add(buffer.toString());
      buffer=new StringBuffer();
    }
 else {
      Log.info(""String_Node_Str"" + param);
      this.parameters.add(param);
    }
  }
}",0.9237940818808268
188906,"/** 
 * Get the localhost and a return value describing the failure condition if we are unable to get the localhost
 * @param options
 * @return 
 */
public static LocalhostPair getLocalhost(OptionSet options){
  String hostname=null;
  ReturnValue returnValue=new ReturnValue(ReturnValue.SUCCESS);
  if (options.has(""String_Node_Str"") && options.valueOf(""String_Node_Str"") != null) {
    hostname=(String)options.valueOf(""String_Node_Str"");
  }
 else {
    ArrayList<String> theCommand=new ArrayList<String>();
    theCommand.add(""String_Node_Str"");
    theCommand.add(""String_Node_Str"");
    theCommand.add(""String_Node_Str"");
    returnValue=RunTools.runCommand(theCommand.toArray(new String[0]));
    if (returnValue.getExitStatus() == ReturnValue.SUCCESS) {
      String stdout=returnValue.getStdout();
      stdout=stdout.trim();
      hostname=stdout;
    }
 else {
      Log.error(""String_Node_Str"" + returnValue.getStdout());
      return new LocalhostPair(hostname,returnValue);
    }
  }
  return new LocalhostPair(hostname,returnValue);
}","/** 
 * Get the localhost and a return value describing the failure condition if we are unable to get the localhost
 * @param options
 * @return 
 */
public static LocalhostPair getLocalhost(OptionSet options){
  String hostname=null;
  ReturnValue returnValue=new ReturnValue(ReturnValue.SUCCESS);
  if (options.has(""String_Node_Str"") && options.valueOf(""String_Node_Str"") != null) {
    hostname=(String)options.valueOf(""String_Node_Str"");
    returnValue=new ReturnValue(ReturnValue.SUCCESS);
  }
 else {
    ArrayList<String> theCommand=new ArrayList<String>();
    theCommand.add(""String_Node_Str"");
    theCommand.add(""String_Node_Str"");
    theCommand.add(""String_Node_Str"");
    returnValue=RunTools.runCommand(theCommand.toArray(new String[0]));
    if (returnValue.getExitStatus() == ReturnValue.SUCCESS) {
      String stdout=returnValue.getStdout();
      stdout=stdout.trim();
      hostname=stdout;
    }
 else {
      Log.error(""String_Node_Str"" + returnValue.getStdout());
      return new LocalhostPair(hostname,returnValue);
    }
  }
  return new LocalhostPair(hostname,returnValue);
}",0.6304549675023212
188907,"/** 
 * Run the SeqWare jar given a particular set of parameters and check for an expected return value. The beauty of this approach is that we can later move this out into its own class, create an interface, and then we can reuse the same tests running against our code directly rather than through a jar, so we can compute code coverage and the like.
 * @param parameters
 * @param expectedReturnValue
 * @param workingDir null, if caller does not care about the working directory
 * @return
 * @throws IOException
 */
public static String runSeqWareJar(String parameters,int expectedReturnValue,File workingDir) throws IOException {
  File jar=retrieveFullAssembledJar();
  Properties props=new Properties();
  props.load(ITUtility.class.getClassLoader().getResourceAsStream(""String_Node_Str""));
  String itCoverageAgent=(String)props.get(""String_Node_Str"");
  if (workingDir == null) {
    workingDir=Files.createTempDir();
    workingDir.deleteOnExit();
  }
  System.out.println(""String_Node_Str"" + itCoverageAgent);
  String line=""String_Node_Str"" + itCoverageAgent + ""String_Node_Str""+ jar.getAbsolutePath()+ ""String_Node_Str""+ parameters;
  String output=runArbitraryCommand(line,expectedReturnValue,workingDir);
  return output;
}","/** 
 * Run the SeqWare jar given a particular set of parameters and check for an expected return value. The beauty of this approach is that we can later move this out into its own class, create an interface, and then we can reuse the same tests running against our code directly rather than through a jar, so we can compute code coverage and the like.
 * @param parameters
 * @param expectedReturnValue
 * @param workingDir null, if caller does not care about the working directory
 * @return
 * @throws IOException
 */
public static String runSeqWareJar(String parameters,int expectedReturnValue,File workingDir) throws IOException {
  File jar=retrieveFullAssembledJar();
  Properties props=new Properties();
  props.load(ITUtility.class.getClassLoader().getResourceAsStream(""String_Node_Str""));
  String itCoverageAgent=(String)props.get(""String_Node_Str"");
  if (workingDir == null) {
    workingDir=Files.createTempDir();
    workingDir.deleteOnExit();
  }
  String line=""String_Node_Str"" + itCoverageAgent + ""String_Node_Str""+ jar.getAbsolutePath()+ ""String_Node_Str""+ parameters;
  String output=runArbitraryCommand(line,expectedReturnValue,workingDir);
  return output;
}",0.9474989665150888
188908,"@Test public void testMonitorWorkflowRunStdOut() throws IOException {
  String swid=monitorAndReturnWorkflowRun();
  String workingDirStr=System.getProperty(""String_Node_Str"");
  Log.info(""String_Node_Str"" + workingDirStr);
  File workingDir=new File(workingDirStr);
  WorkFlowRunReporterFilterStdOut filter=new WorkFlowRunReporterFilterStdOut(swid);
  Collection<File> listFiles=FileUtils.listFiles(workingDir,filter,filter);
  for (  File f : listFiles) {
    f.delete();
  }
  String output=ITUtility.runSeqWareJar(""String_Node_Str"" + swid,ReturnValue.SUCCESS,null);
  listFiles=FileUtils.listFiles(workingDir,filter,filter);
  Assert.assertTrue(""String_Node_Str"" + listFiles.size(),listFiles.size() == 1);
  File foundFile=listFiles.iterator().next();
  foundFile.delete();
}","@Test public void testMonitorWorkflowRunStdOut() throws IOException {
  File workingDir=Files.createTempDir();
  String swid=monitorAndReturnWorkflowRun();
  WorkFlowRunReporterFilterStdOut filter=new WorkFlowRunReporterFilterStdOut(swid);
  String output=ITUtility.runSeqWareJar(""String_Node_Str"" + swid,ReturnValue.SUCCESS,workingDir);
  Collection<File> listFiles=FileUtils.listFiles(workingDir,filter,filter);
  Assert.assertTrue(""String_Node_Str"" + listFiles.size(),listFiles.size() == 1);
  File foundFile=listFiles.iterator().next();
  foundFile.delete();
}",0.6433358153387937
188909,"@Test public void testMonitorWorkflowRunStdErr() throws IOException {
  String swid=monitorAndReturnWorkflowRun();
  String workingDirStr=System.getProperty(""String_Node_Str"");
  Log.info(""String_Node_Str"" + workingDirStr);
  File workingDir=new File(workingDirStr);
  WorkFlowRunReporterFilterStdErr filter=new WorkFlowRunReporterFilterStdErr(swid);
  Collection<File> listFiles=FileUtils.listFiles(workingDir,filter,filter);
  for (  File f : listFiles) {
    f.delete();
  }
  String output=ITUtility.runSeqWareJar(""String_Node_Str"" + swid,ReturnValue.SUCCESS,null);
  listFiles=FileUtils.listFiles(workingDir,filter,filter);
  Assert.assertTrue(""String_Node_Str"" + listFiles.size(),listFiles.size() == 1);
  File foundFile=listFiles.iterator().next();
  foundFile.delete();
}","@Test public void testMonitorWorkflowRunStdErr() throws IOException {
  File workingDir=Files.createTempDir();
  String swid=monitorAndReturnWorkflowRun();
  WorkFlowRunReporterFilterStdErr filter=new WorkFlowRunReporterFilterStdErr(swid);
  String output=ITUtility.runSeqWareJar(""String_Node_Str"" + swid,ReturnValue.SUCCESS,workingDir);
  Collection<File> listFiles=FileUtils.listFiles(workingDir,filter,filter);
  Assert.assertTrue(""String_Node_Str"" + listFiles.size(),listFiles.size() == 1);
  File foundFile=listFiles.iterator().next();
  foundFile.delete();
}",0.6433358153387937
188910,"/** 
 * {@inheritDoc} 
 */
@Override public ReturnValue do_verify_parameters(){
  ReturnValue ret=new ReturnValue();
  ret.setExitStatus(ReturnValue.SUCCESS);
  try {
    OptionParser parser=getOptionParser();
    options=parser.parse(this.getParameters().toArray(new String[0]));
  }
 catch (  OptionException e) {
    ret.setStderr(e.getMessage() + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    e.printStackTrace();
    return ret;
  }
  if (!options.has(""String_Node_Str"") && !options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (!options.has(""String_Node_Str"") && !options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && options.valueOf(""String_Node_Str"") != null && options.valueOf(""String_Node_Str"").toString().length() > 0) {
    algorithmName=(String)options.valueOf(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"") && !options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && (options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) && (options.valuesOf(""String_Node_Str"").size() > 1 || options.valuesOf(""String_Node_Str"").size() > 1 || options.valuesOf(""String_Node_Str"").size() > 1)) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  return (ret);
}","/** 
 * {@inheritDoc} 
 */
@Override public ReturnValue do_verify_parameters(){
  ReturnValue ret=new ReturnValue();
  ret.setExitStatus(ReturnValue.SUCCESS);
  try {
    OptionParser parser=getOptionParser();
    options=parser.parse(this.getParameters().toArray(new String[0]));
  }
 catch (  OptionException e) {
    ret.setStderr(e.getMessage() + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    e.printStackTrace();
    return ret;
  }
  if (!options.has(""String_Node_Str"") && !options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (!options.has(""String_Node_Str"") && !options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && options.valueOf(""String_Node_Str"") != null && options.valueOf(""String_Node_Str"").toString().length() > 0) {
    algorithmName=(String)options.valueOf(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"") && !(options.has(""String_Node_Str"") || options.has(""String_Node_Str""))) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  if (options.has(""String_Node_Str"") && (options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) && (options.valuesOf(""String_Node_Str"").size() > 1 || options.valuesOf(""String_Node_Str"").size() > 1 || options.valuesOf(""String_Node_Str"").size() > 1)) {
    ret.setStderr(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    return ret;
  }
  return (ret);
}",0.9784601283226396
188911,"public Adag(AbstractWorkflowDataModel wfdm){
  this.wfdm=wfdm;
  this.jobs=new ArrayList<PegasusJob>();
  this.fileJobMap=new HashMap<SqwFile,PegasusJob>();
  this.parseWorkflow(wfdm);
  this.setDefaultExcutables();
}","public Adag(AbstractWorkflowDataModel wfdm){
  this.wfdm=wfdm;
  this.jobs=new ArrayList<PegasusJob>();
  this.fileJobMap=new HashMap<SqwFile,ProvisionFilesJob>();
  this.parseWorkflow(wfdm);
  this.setDefaultExcutables();
}",0.9614512471655328
188912,"private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=wfdm.isMetadataWriteBack();
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir(),wfdm.getTags().get(""String_Node_Str""));
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  Collection<String> parentAccession=wfdm.getParentAccessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccessions(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      SqwFile file=entry.getValue();
      job.addFile(file);
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      if (!file.getParentAccessions().isEmpty()) {
        pjob.setParentAccessions(file.getParentAccessions());
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(file,pjob);
      if (file.isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + file.getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    if (!job.getParentAccessions().isEmpty()) {
      pjob.setParentAccessions(job.getParentAccessions());
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          if (!file.getParentAccessions().isEmpty()) {
            parentPfjob.setParentAccessions(file.getParentAccessions());
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + ""String_Node_Str"" + file.getUniqueDir() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          if (!file.getParentAccessions().isEmpty()) {
            parentPfjob.setParentAccessions(file.getParentAccessions());
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}","private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=wfdm.isMetadataWriteBack();
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir(),wfdm.getTags().get(""String_Node_Str""));
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  Collection<String> parentAccession=wfdm.getParentAccessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccessions(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      SqwFile file=entry.getValue();
      job.addFile(file);
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      if (!file.getParentAccessions().isEmpty()) {
        pjob.setParentAccessions(file.getParentAccessions());
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(file,pjob);
      if (file.isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + file.getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    if (!job.getParentAccessions().isEmpty()) {
      pjob.setParentAccessions(job.getParentAccessions());
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          if (!file.getParentAccessions().isEmpty()) {
            parentPfjob.setParentAccessions(file.getParentAccessions());
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + ""String_Node_Str"" + file.getUniqueDir() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file,wfdm.getTags().get(""String_Node_Str""));
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          if (!file.getParentAccessions().isEmpty()) {
            parentPfjob.setParentAccessions(file.getParentAccessions());
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if ((_job instanceof ProvisionFilesJob == false) && _job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,ProvisionFilesJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}",0.9918531993988768
188913,"private void mergeCmdOptions(AbstractWorkflowDataModel model){
  Map<String,String> map=model.getConfigs();
  if (options.has(""String_Node_Str"")) {
    ArrayList<String> parentAccessions=new ArrayList<String>();
    if (options.has(""String_Node_Str"")) {
      List opts=options.valuesOf(""String_Node_Str"");
      for (      Object opt : opts) {
        String[] tokens=((String)opt).split(""String_Node_Str"");
        for (        String t : tokens) {
          parentAccessions.add(t);
        }
      }
    }
    model.setParentAccessions(parentAccessions);
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_accession((String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_run_accession((String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    List<String> scheduledAccessions=(List<String>)options.valuesOf(""String_Node_Str"");
    map.put(""String_Node_Str"",org.apache.commons.lang.StringUtils.join(scheduledAccessions,""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  boolean metadataWriteback=true;
  if (options.has(""String_Node_Str"") || options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) {
    metadataWriteback=false;
  }
  map.put(""String_Node_Str"",Boolean.toString(metadataWriteback));
  model.setMetadataWriteBack(metadataWriteback);
  if (options.has(""String_Node_Str"")) {
    model.setMetadata_output_file_prefix((String)options.valueOf(""String_Node_Str""));
  }
 else   if (model.hasPropertyAndNotNull(""String_Node_Str"")) {
    try {
      model.setMetadata_output_file_prefix(model.getProperty(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Logger.getLogger(WorkflowDataModelFactory.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    Log.error(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    model.setMetadata_output_dir((String)options.valueOf(""String_Node_Str""));
  }
 else   if (model.hasPropertyAndNotNull(""String_Node_Str"")) {
    try {
      model.setMetadata_output_file_prefix(model.getProperty(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Logger.getLogger(WorkflowDataModelFactory.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    Log.error(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_engine((String)options.valueOf(""String_Node_Str""));
  }
}","private void mergeCmdOptions(AbstractWorkflowDataModel model){
  Map<String,String> map=model.getConfigs();
  if (options.has(""String_Node_Str"")) {
    ArrayList<String> parentAccessions=new ArrayList<String>();
    if (options.has(""String_Node_Str"")) {
      List opts=options.valuesOf(""String_Node_Str"");
      for (      Object opt : opts) {
        String[] tokens=((String)opt).split(""String_Node_Str"");
        for (        String t : tokens) {
          parentAccessions.add(t);
        }
      }
    }
    model.setParentAccessions(parentAccessions);
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_accession((String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_run_accession((String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    List<String> scheduledAccessions=(List<String>)options.valuesOf(""String_Node_Str"");
    map.put(""String_Node_Str"",org.apache.commons.lang.StringUtils.join(scheduledAccessions,""String_Node_Str""));
  }
  if (options.has(""String_Node_Str"")) {
    map.put(""String_Node_Str"",(String)options.valueOf(""String_Node_Str""));
  }
  boolean metadataWriteback=true;
  if (options.has(""String_Node_Str"") || options.has(""String_Node_Str"") || options.has(""String_Node_Str"")) {
    metadataWriteback=false;
  }
  map.put(""String_Node_Str"",Boolean.toString(metadataWriteback));
  model.setMetadataWriteBack(metadataWriteback);
  if (options.has(""String_Node_Str"")) {
    model.setMetadata_output_file_prefix((String)options.valueOf(""String_Node_Str""));
  }
 else   if (model.hasPropertyAndNotNull(""String_Node_Str"")) {
    try {
      model.setMetadata_output_file_prefix(model.getProperty(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Logger.getLogger(WorkflowDataModelFactory.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    Log.error(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    model.setMetadata_output_dir((String)options.valueOf(""String_Node_Str""));
  }
 else   if (model.hasPropertyAndNotNull(""String_Node_Str"")) {
    try {
      model.setMetadata_output_dir(model.getProperty(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Logger.getLogger(WorkflowDataModelFactory.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    Log.error(""String_Node_Str"");
  }
  if (options.has(""String_Node_Str"")) {
    model.setWorkflow_engine((String)options.valueOf(""String_Node_Str""));
  }
}",0.9975291210730676
188914,"/** 
 * Generates a RunInfo object with the given parameters. All fields are optional.
 * @param runName
 * @param studyTitle
 * @param experimentName
 * @param filePath
 * @param platformId
 * @param studyType
 * @return
 */
protected RunInfo generateRunInfo(String runName,String runDescription,String studyTitle,String studyDescription,String studyCenterName,String studyCenterProject,String experimentName,String experimentDescription,String filePath,int platformId,int studyType,boolean isPairedEnd,String workflowType,String assayType){
  RunInfo runInfo=new RunInfo();
  KeyVal[] list=getKeyVals(metadata.getStudyTypes());
  runInfo.setStudyTitle(promptString(""String_Node_Str"",studyTitle,Field.study_name));
  runInfo.setStudyDescription(studyDescription);
  if (studyDescription == null) {
    runInfo.setStudyDescription(runInfo.getStudyTitle());
  }
  runInfo.setStudyCenterName(promptString(""String_Node_Str"",studyCenterName,Field.study_center_name));
  runInfo.setStudyCenterProject(promptString(""String_Node_Str"",studyCenterProject,Field.study_center_project));
  runInfo.setStudyType(promptAccession(""String_Node_Str"",studyType,list,Field.study_type));
  list=getKeyVals(metadata.getPlatforms());
  runInfo.setRunName(promptString(""String_Node_Str"",runName,Field.sequencer_run_name));
  runInfo.setRunDescription(runDescription);
  if (runDescription == null) {
    runInfo.setRunDescription(runInfo.getRunName());
  }
  runInfo.setRunFilePath(promptString(""String_Node_Str"",filePath,Field.run_file_path));
  runInfo.setPlatformId(promptAccession(""String_Node_Str"",platformId,list,Field.platform_id));
  runInfo.setPairedEnd(isPairedEnd);
  runInfo.setRunSkip(false);
  runInfo.setExperimentName(promptString(""String_Node_Str"",experimentName,Field.experiment_name));
  runInfo.setExperimentDescription(experimentDescription);
  if (experimentDescription == null) {
    runInfo.setExperimentDescription(runInfo.getExperimentName());
  }
  return runInfo;
}","/** 
 * Generates a RunInfo object with the given parameters. All fields are optional.
 * @param runName
 * @param studyTitle
 * @param experimentName
 * @param filePath
 * @param platformId
 * @param studyType
 * @return
 */
protected RunInfo generateRunInfo(String runName,String runDescription,String studyTitle,String studyDescription,String studyCenterName,String studyCenterProject,String experimentName,String experimentDescription,String filePath,int platformId,int studyType,boolean isPairedEnd,String workflowType,String assayType){
  RunInfo runInfo=new RunInfo();
  KeyVal[] list=getKeyVals(metadata.getStudyTypes());
  runInfo.setStudyTitle(promptString(""String_Node_Str"",studyTitle,Field.study_name));
  runInfo.setStudyDescription(studyDescription);
  if (studyDescription == null) {
    runInfo.setStudyDescription(runInfo.getStudyTitle());
  }
  runInfo.setStudyCenterName(promptString(""String_Node_Str"",studyCenterName,Field.study_center_name));
  runInfo.setStudyCenterProject(promptString(""String_Node_Str"",studyCenterProject,Field.study_center_project));
  runInfo.setStudyType(promptAccession(""String_Node_Str"",studyType,list,Field.study_type));
  list=getKeyVals(metadata.getPlatforms());
  runInfo.setRunName(promptString(""String_Node_Str"",runName,Field.sequencer_run_name));
  runInfo.setRunDescription(runDescription);
  if (runDescription == null) {
    runInfo.setRunDescription(runInfo.getRunName());
  }
  runInfo.setRunFilePath(promptString(""String_Node_Str"",filePath,Field.run_file_path));
  runInfo.setPlatformId(promptAccession(""String_Node_Str"",platformId,list,Field.platform_id));
  runInfo.setPairedEnd(isPairedEnd);
  runInfo.setRunSkip(false);
  runInfo.setExperimentName(promptString(""String_Node_Str"",experimentName,Field.experiment_name));
  runInfo.setExperimentDescription(experimentDescription);
  if (experimentDescription == null) {
    runInfo.setExperimentDescription(runInfo.getExperimentName());
  }
  if (workflowType != null) {
    runInfo.setWorkflowType(workflowType);
  }
  if (assayType != null) {
    runInfo.setAssayType(assayType);
  }
  return runInfo;
}",0.9576499388004897
188915,"private KeyVal[] getKeyVals(List list){
  KeyVal[] libs=new KeyVal[list.size()];
  int i=0;
  for (  Object o : list) {
    if (o instanceof LibraryStrategy) {
      LibraryStrategy l=(LibraryStrategy)o;
      libs[i++]=new KeyVal(l.getLibraryStrategyId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof LibrarySelection) {
      LibrarySelection l=(LibrarySelection)o;
      libs[i++]=new KeyVal(l.getLibrarySelectionId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof LibrarySource) {
      LibrarySource l=(LibrarySource)o;
      libs[i++]=new KeyVal(l.getLibrarySourceId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof StudyType) {
      StudyType l=(StudyType)o;
      libs[i++]=new KeyVal(l.getStudyTypeId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof Platform) {
      Platform l=(Platform)o;
      libs[i++]=new KeyVal(l.getPlatformId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof Organism) {
      Organism l=(Organism)o;
      libs[i++]=new KeyVal(l.getOrganismId(),l.getName(),String.valueOf(l.getNcbiTaxId()));
    }
 else {
      Log.error(""String_Node_Str"");
    }
  }
  return libs;
}","private KeyVal[] getKeyVals(List list){
  if (list == null || list.size() <= 0)   return null;
  KeyVal[] libs=new KeyVal[list.size()];
  int i=0;
  for (  Object o : list) {
    if (o instanceof LibraryStrategy) {
      LibraryStrategy l=(LibraryStrategy)o;
      libs[i++]=new KeyVal(l.getLibraryStrategyId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof LibrarySelection) {
      LibrarySelection l=(LibrarySelection)o;
      libs[i++]=new KeyVal(l.getLibrarySelectionId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof LibrarySource) {
      LibrarySource l=(LibrarySource)o;
      libs[i++]=new KeyVal(l.getLibrarySourceId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof StudyType) {
      StudyType l=(StudyType)o;
      libs[i++]=new KeyVal(l.getStudyTypeId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof Platform) {
      Platform l=(Platform)o;
      libs[i++]=new KeyVal(l.getPlatformId(),l.getName(),l.getDescription());
    }
 else     if (o instanceof Organism) {
      Organism l=(Organism)o;
      libs[i++]=new KeyVal(l.getOrganismId(),l.getName(),String.valueOf(l.getNcbiTaxId()));
    }
 else {
      Log.error(""String_Node_Str"");
    }
  }
  return libs;
}",0.9775967413441956
188916,"public Set<LaneInfo> parseMiseqData(BufferedReader freader) throws IOException, Exception {
  Set<SampleInfo> samples=new HashSet<SampleInfo>();
  LaneInfo laneInfo=generateLaneInfo(""String_Node_Str"",4);
  laneInfo.setSamples(samples);
  String[] headerStrings=freader.readLine().split(""String_Node_Str"");
  List<String> header=Arrays.asList(headerStrings);
  String line;
  while ((line=freader.readLine()) != null) {
    String[] args=line.split(""String_Node_Str"");
    String[] sampleInfo=args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"");
    String prettyName=args[header.indexOf(""String_Node_Str"")];
    String projectName=sampleInfo[0];
    String individualNumber=sampleInfo[1];
    String librarySourceTemplateType=null;
    String tissueOrigin=null;
    String tissueType=null;
    String libraryType=null;
    String librarySizeCode=null;
    String targetedResequencing=null;
    String tissuePreparation=null;
    Integer organismId=findOrganismId(args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"")[0].replace('_',' '));
    String barcode=args[header.indexOf(""String_Node_Str"")];
    if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
      tissuePreparation=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else {
      Log.stdout(""String_Node_Str"" + prettyName);
    }
    SampleInfo sample=generateSampleInfo(prettyName,projectName,individualNumber,librarySourceTemplateType,tissueOrigin,tissueType,libraryType,librarySizeCode,barcode,organismId,targetedResequencing,tissuePreparation,""String_Node_Str"",barcode,barcode);
    String tissueRegion=sampleInfo[2].substring(0,1);
    if (StringUtils.isNumeric(tissueRegion)) {
      sample.setSampleAttribute(""String_Node_Str"",tissueRegion);
    }
    samples.add(sample);
  }
  Set<LaneInfo> lanes=new HashSet<LaneInfo>();
  lanes.add(laneInfo);
  return lanes;
}","public Set<LaneInfo> parseMiseqData(BufferedReader freader) throws IOException, Exception {
  Set<SampleInfo> samples=new HashSet<SampleInfo>();
  LaneInfo laneInfo=generateLaneInfo(""String_Node_Str"",4);
  laneInfo.setSamples(samples);
  String[] headerStrings=freader.readLine().split(""String_Node_Str"");
  List<String> header=Arrays.asList(headerStrings);
  String line;
  while ((line=freader.readLine()) != null) {
    String[] args=line.split(""String_Node_Str"");
    String[] sampleInfo=args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"");
    String prettyName=args[header.indexOf(""String_Node_Str"")];
    String projectName=sampleInfo[0];
    String individualNumber=sampleInfo[1];
    String librarySourceTemplateType=null;
    String tissueOrigin=null;
    String tissueType=null;
    String libraryType=null;
    String librarySizeCode=null;
    String targetedResequencing=null;
    String tissuePreparation=null;
    int organismId=1;
    String barcode=args[header.indexOf(""String_Node_Str"")];
    if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
      tissuePreparation=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else {
      Log.stdout(""String_Node_Str"" + prettyName);
    }
    SampleInfo sample=generateSampleInfo(prettyName,projectName,individualNumber,librarySourceTemplateType,tissueOrigin,tissueType,libraryType,librarySizeCode,barcode,organismId,targetedResequencing,tissuePreparation,""String_Node_Str"",barcode,barcode);
    String tissueRegion=sampleInfo[2].substring(0,1);
    if (StringUtils.isNumeric(tissueRegion)) {
      sample.setSampleAttribute(""String_Node_Str"",tissueRegion);
    }
    samples.add(sample);
  }
  Set<LaneInfo> lanes=new HashSet<LaneInfo>();
  lanes.add(laneInfo);
  return lanes;
}",0.9665261591867096
188917,"@BeforeClass public static void setUpClass() throws Exception {
  MiseqPath=BatchMetadataInjectionTest.class.getResource(""String_Node_Str"").getPath();
}","@BeforeClass public static void setUpClass() throws Exception {
  miseqPath=BatchMetadataInjectionTest.class.getResource(""String_Node_Str"").getPath();
}",0.993421052631579
188918,"/** 
 * Test of parseMiseqFile method, of class BatchMetadataInjection.
 */
@Test public void testParseMiseqFile() throws Exception {
  System.out.println(""String_Node_Str"");
  ParseMiseqFile instance=new ParseMiseqFile(null,new HashMap<String,String>(),false);
  RunInfo run=instance.parseMiseqFile(MiseqPath);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getStudyTitle());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getExperimentName());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getWorkflowType());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getAssayType());
  Set<SampleInfo> samples=run.getLanes().iterator().next().getSamples();
  Assert.assertEquals(""String_Node_Str"",6,samples.size());
}","/** 
 * Test of parseMiseqFile method, of class BatchMetadataInjection.
 */
@Test public void testParseMiseqFile() throws Exception {
  System.out.println(""String_Node_Str"");
  HashMap<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  ParseMiseqFile instance=new ParseMiseqFile(new MetadataNoConnection(),map,false);
  RunInfo run=instance.parseMiseqFile(miseqPath);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getStudyTitle());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getExperimentName());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getWorkflowType());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",run.getAssayType());
  Set<SampleInfo> samples=run.getLanes().iterator().next().getSamples();
  Assert.assertEquals(""String_Node_Str"",6,samples.size());
}",0.7670807453416149
188919,"private ReturnValue inject(RunInfo run) throws Exception {
  int sequencerRunAccession=createRun(run);
  Set<LaneInfo> lanes=run.getLanes();
  List<Lane> existingLanes=metadata.getLanesFrom(sequencerRunAccession);
  if (existingLanes != null && !existingLanes.isEmpty() && interactive) {
    Boolean yorn=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"" + existingLanes.size() + ""String_Node_Str"",Boolean.TRUE);
    if (yorn.equals(Boolean.FALSE)) {
      throw new Exception(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"");
    }
  }
  int studyAccession=retrieveStudy(run);
  int experimentAccession=retrieveExperiment(run,studyAccession);
  List<Sample> parentSamples=metadata.getSamplesFrom(experimentAccession);
  Log.debug(""String_Node_Str"" + studyAccession + ""String_Node_Str""+ experimentAccession+ ""String_Node_Str""+ sequencerRunAccession);
  for (  LaneInfo lane : lanes) {
    Log.stdout(""String_Node_Str"" + lane.getLaneNumber());
    int laneAccession=createLane(lane,sequencerRunAccession);
    for (    SampleInfo barcode : lane.getSamples()) {
      Integer parentSampleAcc=retrieveParentSampleAccession(parentSamples,barcode,experimentAccession);
      Log.debug(""String_Node_Str"" + laneAccession + ""String_Node_Str""+ parentSampleAcc);
      int tissueTypeSampleAcc=retrieveTissueTypeSampleAccession(parentSampleAcc,barcode);
      Log.debug(""String_Node_Str"" + tissueTypeSampleAcc);
      int librarySampleNameAcc=createLibrarySample(barcode,tissueTypeSampleAcc);
      int barcodeAcc=createIUS(barcode,laneAccession,librarySampleNameAcc);
    }
  }
  return ret;
}","private ReturnValue inject(RunInfo run) throws Exception {
  int sequencerRunAccession=createRun(run);
  Set<LaneInfo> lanes=run.getLanes();
  List<Lane> existingLanes=metadata.getLanesFrom(sequencerRunAccession);
  if (existingLanes != null && !existingLanes.isEmpty() && interactive) {
    Boolean yorn=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"" + existingLanes.size() + ""String_Node_Str"",Boolean.TRUE);
    if (yorn.equals(Boolean.FALSE)) {
      throw new Exception(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"");
    }
  }
  int studyAccession=retrieveStudy(run);
  int experimentAccession=retrieveExperiment(run,studyAccession);
  Log.debug(""String_Node_Str"" + studyAccession + ""String_Node_Str""+ experimentAccession+ ""String_Node_Str""+ sequencerRunAccession);
  for (  LaneInfo lane : lanes) {
    Log.stdout(""String_Node_Str"" + lane.getLaneNumber());
    int laneAccession=createLane(lane,sequencerRunAccession);
    for (    SampleInfo barcode : lane.getSamples()) {
      List<Sample> parentSamples=metadata.getSamplesFrom(experimentAccession);
      Integer parentSampleAcc=retrieveParentSampleAccession(parentSamples,barcode,experimentAccession);
      Log.debug(""String_Node_Str"" + laneAccession + ""String_Node_Str""+ parentSampleAcc);
      int tissueTypeSampleAcc=retrieveTissueTypeSampleAccession(parentSampleAcc,barcode);
      Log.debug(""String_Node_Str"" + tissueTypeSampleAcc);
      int librarySampleNameAcc=createLibrarySample(barcode,tissueTypeSampleAcc);
      int barcodeAcc=createIUS(barcode,laneAccession,librarySampleNameAcc);
    }
  }
  return ret;
}",0.7869565217391304
188920,"/** 
 * Handles prompting for a choice out of a list of choices using integers.
 * @param sampleName the sample name used for the prompting message
 * @param title the name of the field that is being set
 * @param choices the list of choices for the value of 'title'
 * @param deflt the default choice to fall back on, which can be one of thelist of 'choices'. This is the string value, not the integer.
 * @return
 */
protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=null;
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (deflt.equals(choices[i - 1])) {
      choiceInt=i;
    }
  }
  while (choice == null) {
    choiceInt=promptPositiveInteger(title,choiceInt,null,1,choices.length);
    if (choiceInt == 0) {
      break;
    }
 else     if (choiceInt == choices.length) {
      choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
    }
 else     if (choiceInt <= 0 || choiceInt > choices.length) {
    }
 else {
      choice=choices[choiceInt - 1];
    }
  }
  return choice;
}","/** 
 * Handles prompting for a choice out of a list of choices using integers.
 * @param sampleName the sample name used for the prompting message
 * @param title the name of the field that is being set
 * @param choices the list of choices for the value of 'title'
 * @param deflt the default choice to fall back on, which can be one of thelist of 'choices'. This is the string value, not the integer.
 * @return
 */
protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=null;
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (choices[i - 1].equals(deflt)) {
      choiceInt=i;
    }
  }
  while (choice == null) {
    choiceInt=promptPositiveInteger(title,choiceInt,null,1,choices.length);
    if (choiceInt == 0) {
      break;
    }
 else     if (choiceInt == choices.length) {
      choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
    }
 else     if (choiceInt <= 0 || choiceInt > choices.length) {
    }
 else {
      choice=choices[choiceInt - 1];
    }
  }
  return choice;
}",0.989430894308943
188921,"protected int promptPositiveInteger(String description,int deflt,Field fieldName,int lowNum,int highNum){
  int value=0;
  while (value > highNum || value < lowNum) {
    Log.stdout(""String_Node_Str"");
    value=promptInteger(description,deflt,fieldName);
  }
  return value;
}","protected int promptPositiveInteger(String description,int deflt,Field fieldName,int lowNum,int highNum){
  int value=-1;
  while ((value > highNum || value < lowNum) && value != 0) {
    value=promptInteger(description,deflt,fieldName);
  }
  return value;
}",0.8992537313432836
188922,"private LaneInfo getLane(int i){
  boolean doneLane=false;
  LaneInfo lane=null;
  while (!doneLane) {
    int num=promptPositiveInteger(""String_Node_Str"",i,null,1,Integer.MAX_VALUE);
    lane=this.generateLaneInfo(String.valueOf(num),-1);
    StringBuilder sb=new StringBuilder();
    printLaneInfo(lane,sb);
    Log.stdout(sb.toString());
    doneLane=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  return lane;
}","private LaneInfo getLane(int i){
  boolean doneLane=false;
  LaneInfo lane=null;
  while (!doneLane) {
    int num=promptPositiveInteger(""String_Node_Str"",(i + 1),null,1,Integer.MAX_VALUE);
    lane=this.generateLaneInfo(String.valueOf(num),-1);
    StringBuilder sb=new StringBuilder();
    printLaneInfo(lane,sb);
    Log.stdout(sb.toString());
    doneLane=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  return lane;
}",0.991011235955056
188923,"/** 
 * Sets the library type and sets the 'geo_library_type' attribute .
 * @param libraryType
 */
public void setLibraryType(String libraryType){
  setSampleAttribute(""String_Node_Str"",String.valueOf(librarySizeCode));
  this.libraryType=libraryType;
}","/** 
 * Sets the library type and sets the 'geo_library_type' attribute .
 * @param libraryType
 */
public void setLibraryType(String libraryType){
  setSampleAttribute(""String_Node_Str"",String.valueOf(libraryType));
  this.libraryType=libraryType;
}",0.98015873015873
188924,"/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Experiment newObj=null;
  JaxbObject<Experiment> jo=new JaxbObject<Experiment>();
  try {
    String text=entity.getText();
    newObj=(Experiment)XmlTools.unMarshal(jo,new Experiment(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    ExperimentService service=BeanFactory.getExperimentServiceBean();
    Experiment exp=(Experiment)testIfNull(service.findByID(newObj.getExperimentId()));
    exp.givesPermission(registration);
    String title=newObj.getTitle();
    String name=newObj.getName();
    String desc=newObj.getDescription();
    String alias=newObj.getAlias();
    String accession=newObj.getAccession();
    String status=newObj.getStatus();
    String centerName=newObj.getCenterName();
    String sequencerSpace=newObj.getSequenceSpace();
    String baseCaller=newObj.getBaseCaller();
    String qualityScorer=newObj.getQualityScorer();
    Integer qualityNumberLevels=newObj.getQualityNumberOfLevels();
    Integer qualityMultiplier=newObj.getQualityMultiplier();
    Long expectedNumberSpots=newObj.getExpectedNumberSpots();
    Long expectedNumberReads=newObj.getExpectedNumberReads();
    Study study=newObj.getStudy();
    Registration owner=newObj.getOwner();
    Set<ExperimentAttribute> expAttributes=newObj.getExperimentAttributes();
    if (title != null) {
      exp.setTitle(title);
    }
    if (name != null) {
      exp.setName(name);
    }
    if (desc != null) {
      exp.setDescription(desc);
    }
    if (alias != null) {
      exp.setAlias(alias);
    }
    if (accession != null) {
      exp.setAccession(accession);
    }
    if (status != null) {
      exp.setStatus(status);
    }
    if (centerName != null) {
      exp.setCenterName(centerName);
    }
    if (sequencerSpace != null) {
      exp.setSequenceSpace(sequencerSpace);
    }
    if (baseCaller != null) {
      exp.setBaseCaller(baseCaller);
    }
    if (qualityScorer != null) {
      exp.setQualityScorer(qualityScorer);
    }
    if (qualityNumberLevels != null) {
      exp.setQualityNumberOfLevels(qualityNumberLevels);
    }
    if (qualityMultiplier != null) {
      exp.setQualityMultiplier(qualityMultiplier);
    }
    if (expectedNumberSpots != null) {
      exp.setExpectedNumberSpots(expectedNumberSpots);
    }
    if (expectedNumberReads != null) {
      exp.setExpectedNumberReads(expectedNumberReads);
    }
    if (study != null) {
      StudyService ss=BeanFactory.getStudyServiceBean();
      Study newStudy=ss.findByID(study.getStudyId());
      if (newStudy != null && newStudy.givesPermission(registration)) {
        exp.setStudy(newStudy);
      }
 else       if (newStudy == null) {
        Log.info(""String_Node_Str"" + study);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        exp.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (exp.getOwner() == null) {
      exp.setOwner(registration);
    }
    if (null != expAttributes) {
      exp.getExperimentAttributes().clear();
      for (      ExperimentAttribute ea : expAttributes) {
        ea.setExperiment(exp);
        exp.getExperimentAttributes().add(ea);
      }
    }
    service.update(registration,exp);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Experiment detachedLane=copier.hibernate2dto(Experiment.class,exp);
    Document line=XmlTools.marshalToDocument(jo,detachedLane);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedLane.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Experiment newObj=null;
  JaxbObject<Experiment> jo=new JaxbObject<Experiment>();
  try {
    String text=entity.getText();
    newObj=(Experiment)XmlTools.unMarshal(jo,new Experiment(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    ExperimentService service=BeanFactory.getExperimentServiceBean();
    Experiment exp=(Experiment)testIfNull(service.findByID(newObj.getExperimentId()));
    exp.givesPermission(registration);
    String title=newObj.getTitle();
    String name=newObj.getName();
    String desc=newObj.getDescription();
    String alias=newObj.getAlias();
    String accession=newObj.getAccession();
    String status=newObj.getStatus();
    String centerName=newObj.getCenterName();
    String sequencerSpace=newObj.getSequenceSpace();
    String baseCaller=newObj.getBaseCaller();
    String qualityScorer=newObj.getQualityScorer();
    Integer qualityNumberLevels=newObj.getQualityNumberOfLevels();
    Integer qualityMultiplier=newObj.getQualityMultiplier();
    Long expectedNumberSpots=newObj.getExpectedNumberSpots();
    Long expectedNumberReads=newObj.getExpectedNumberReads();
    Study study=newObj.getStudy();
    Registration owner=newObj.getOwner();
    Set<ExperimentAttribute> expAttributes=newObj.getExperimentAttributes();
    if (title != null) {
      exp.setTitle(title);
    }
    if (name != null) {
      exp.setName(name);
    }
    if (desc != null) {
      exp.setDescription(desc);
    }
    if (alias != null) {
      exp.setAlias(alias);
    }
    if (accession != null) {
      exp.setAccession(accession);
    }
    if (status != null) {
      exp.setStatus(status);
    }
    if (centerName != null) {
      exp.setCenterName(centerName);
    }
    if (sequencerSpace != null) {
      exp.setSequenceSpace(sequencerSpace);
    }
    if (baseCaller != null) {
      exp.setBaseCaller(baseCaller);
    }
    if (qualityScorer != null) {
      exp.setQualityScorer(qualityScorer);
    }
    if (qualityNumberLevels != null) {
      exp.setQualityNumberOfLevels(qualityNumberLevels);
    }
    if (qualityMultiplier != null) {
      exp.setQualityMultiplier(qualityMultiplier);
    }
    if (expectedNumberSpots != null) {
      exp.setExpectedNumberSpots(expectedNumberSpots);
    }
    if (expectedNumberReads != null) {
      exp.setExpectedNumberReads(expectedNumberReads);
    }
    if (study != null) {
      StudyService ss=BeanFactory.getStudyServiceBean();
      Study newStudy=ss.findByID(study.getStudyId());
      if (newStudy != null && newStudy.givesPermission(registration)) {
        exp.setStudy(newStudy);
      }
 else       if (newStudy == null) {
        Log.info(""String_Node_Str"" + study);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        exp.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (exp.getOwner() == null) {
      exp.setOwner(registration);
    }
    if (null != expAttributes) {
      for (      ExperimentAttribute ea : expAttributes) {
        ea.setExperiment(exp);
        exp.getExperimentAttributes().add(ea);
      }
    }
    service.update(registration,exp);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Experiment detachedLane=copier.hibernate2dto(Experiment.class,exp);
    Document line=XmlTools.marshalToDocument(jo,detachedLane);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedLane.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}",0.9948892674616696
188925,"/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  IUS newIUS=null;
  JaxbObject<IUS> jo=new JaxbObject<IUS>();
  try {
    String text=entity.getText();
    newIUS=(IUS)XmlTools.unMarshal(jo,new IUS(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    IUSService fs=BeanFactory.getIUSServiceBean();
    IUS ius=(IUS)testIfNull(fs.findByID(newIUS.getIusId()));
    ius.givesPermission(registration);
    String name=newIUS.getName();
    String desc=newIUS.getDescription();
    String tags=newIUS.getTag();
    Boolean skip=newIUS.getSkip();
    Sample sample=newIUS.getSample();
    Registration owner=newIUS.getOwner();
    Set<IUSAttribute> newAttributes=newIUS.getIusAttributes();
    ius.setName(name);
    ius.setDescription(desc);
    ius.setSkip(skip);
    ius.setTag(tags);
    if (sample != null) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Sample newSample=ss.findByID(sample.getSampleId());
      if (newSample != null && newSample.givesPermission(registration)) {
        ius.setSample(newSample);
      }
 else       if (newSample == null) {
        Log.info(""String_Node_Str"" + sample);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        ius.setOwner(newReg);
      }
 else {
        Log.info(newReg.getClass().getName() + ""String_Node_Str"" + owner.getEmailAddress());
      }
    }
 else     if (ius.getOwner() == null) {
      ius.setOwner(registration);
    }
    if (newAttributes != null) {
      ius.getIusAttributes().clear();
      for (      IUSAttribute ia : newAttributes) {
        ia.setIus(ius);
        ius.getIusAttributes().add(ia);
      }
    }
    fs.update(registration,ius);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    IUS detachedIUS=copier.hibernate2dto(IUS.class,ius);
    Document line=XmlTools.marshalToDocument(jo,detachedIUS);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedIUS.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  IUS newIUS=null;
  JaxbObject<IUS> jo=new JaxbObject<IUS>();
  try {
    String text=entity.getText();
    newIUS=(IUS)XmlTools.unMarshal(jo,new IUS(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    IUSService fs=BeanFactory.getIUSServiceBean();
    IUS ius=(IUS)testIfNull(fs.findByID(newIUS.getIusId()));
    ius.givesPermission(registration);
    String name=newIUS.getName();
    String desc=newIUS.getDescription();
    String tags=newIUS.getTag();
    Boolean skip=newIUS.getSkip();
    Sample sample=newIUS.getSample();
    Registration owner=newIUS.getOwner();
    Set<IUSAttribute> newAttributes=newIUS.getIusAttributes();
    ius.setName(name);
    ius.setDescription(desc);
    ius.setSkip(skip);
    ius.setTag(tags);
    if (sample != null) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Sample newSample=ss.findByID(sample.getSampleId());
      if (newSample != null && newSample.givesPermission(registration)) {
        ius.setSample(newSample);
      }
 else       if (newSample == null) {
        Log.info(""String_Node_Str"" + sample);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        ius.setOwner(newReg);
      }
 else {
        Log.info(newReg.getClass().getName() + ""String_Node_Str"" + owner.getEmailAddress());
      }
    }
 else     if (ius.getOwner() == null) {
      ius.setOwner(registration);
    }
    if (newAttributes != null) {
      for (      IUSAttribute ia : newAttributes) {
        ia.setIus(ius);
        ius.getIusAttributes().add(ia);
      }
    }
    fs.update(registration,ius);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    IUS detachedIUS=copier.hibernate2dto(IUS.class,ius);
    Document line=XmlTools.marshalToDocument(jo,detachedIUS);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedIUS.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}",0.9931801866475232
188926,"/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Lane newLane=null;
  JaxbObject<Lane> jo=new JaxbObject<Lane>();
  try {
    String text=entity.getText();
    newLane=(Lane)XmlTools.unMarshal(jo,new Lane(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    LaneService fs=BeanFactory.getLaneServiceBean();
    Lane lane=(Lane)testIfNull(fs.findByID(newLane.getLaneId()));
    lane.givesPermission(registration);
    String name=newLane.getName();
    String desc=newLane.getDescription();
    Integer laneIndex=newLane.getLaneIndex();
    String cycleDescriptor=newLane.getCycleDescriptor();
    Boolean skip=newLane.getSkip();
    String tags=newLane.getTags();
    String regions=newLane.getRegions();
    Sample sample=newLane.getSample();
    Registration owner=newLane.getOwner();
    Set<LaneAttribute> newAttributes=newLane.getLaneAttributes();
    if (name != null) {
      lane.setName(name);
    }
    if (desc != null) {
      lane.setDescription(desc);
    }
    if (laneIndex != null) {
      lane.setLaneIndex(laneIndex);
    }
    if (cycleDescriptor != null) {
      lane.setCycleDescriptor(cycleDescriptor);
    }
    if (skip != null) {
      lane.setSkip(skip);
    }
    if (tags != null) {
      lane.setTags(tags);
    }
    if (regions != null) {
      lane.setRegions(regions);
    }
    if (sample != null) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Sample newSample=ss.findByID(sample.getSampleId());
      if (newSample != null && newSample.givesPermission(registration)) {
        lane.setSample(newSample);
      }
 else       if (newSample == null) {
        Log.info(""String_Node_Str"" + sample);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        lane.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (lane.getOwner() == null) {
      lane.setOwner(registration);
    }
    logger.debug(""String_Node_Str"" + newAttributes);
    if (newAttributes != null) {
      lane.getLaneAttributes().clear();
      for (      LaneAttribute la : newAttributes) {
        la.setLane(lane);
        lane.getLaneAttributes().add(la);
      }
    }
    fs.update(registration,lane);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Lane detachedLane=copier.hibernate2dto(Lane.class,lane);
    Document line=XmlTools.marshalToDocument(jo,detachedLane);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedLane.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Lane newLane=null;
  JaxbObject<Lane> jo=new JaxbObject<Lane>();
  try {
    String text=entity.getText();
    newLane=(Lane)XmlTools.unMarshal(jo,new Lane(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
  }
  try {
    LaneService fs=BeanFactory.getLaneServiceBean();
    Lane lane=(Lane)testIfNull(fs.findByID(newLane.getLaneId()));
    lane.givesPermission(registration);
    String name=newLane.getName();
    String desc=newLane.getDescription();
    Integer laneIndex=newLane.getLaneIndex();
    String cycleDescriptor=newLane.getCycleDescriptor();
    Boolean skip=newLane.getSkip();
    String tags=newLane.getTags();
    String regions=newLane.getRegions();
    Sample sample=newLane.getSample();
    Registration owner=newLane.getOwner();
    Set<LaneAttribute> newAttributes=newLane.getLaneAttributes();
    if (name != null) {
      lane.setName(name);
    }
    if (desc != null) {
      lane.setDescription(desc);
    }
    if (laneIndex != null) {
      lane.setLaneIndex(laneIndex);
    }
    if (cycleDescriptor != null) {
      lane.setCycleDescriptor(cycleDescriptor);
    }
    if (skip != null) {
      lane.setSkip(skip);
    }
    if (tags != null) {
      lane.setTags(tags);
    }
    if (regions != null) {
      lane.setRegions(regions);
    }
    if (sample != null) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Sample newSample=ss.findByID(sample.getSampleId());
      if (newSample != null && newSample.givesPermission(registration)) {
        lane.setSample(newSample);
      }
 else       if (newSample == null) {
        Log.info(""String_Node_Str"" + sample);
      }
    }
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        lane.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (lane.getOwner() == null) {
      lane.setOwner(registration);
    }
    logger.debug(""String_Node_Str"" + newAttributes);
    if (newAttributes != null) {
      for (      LaneAttribute la : newAttributes) {
        la.setLane(lane);
        lane.getLaneAttributes().add(la);
      }
    }
    fs.update(registration,lane);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Lane detachedLane=copier.hibernate2dto(Lane.class,lane);
    Document line=XmlTools.marshalToDocument(jo,detachedLane);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedLane.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}",0.994058229352347
188927,"/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation rep){
  authenticate();
  Representation toreturn=null;
  if (rep.getMediaType().equals(MediaType.APPLICATION_XML)) {
    JaxbObject<Processing> jo=new JaxbObject<Processing>();
    Processing p=null;
    try {
      String text=rep.getText();
      p=(Processing)XmlTools.unMarshal(jo,new Processing(),text);
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
    }
catch (    SAXException ex) {
      ex.printStackTrace();
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    try {
      Log.info(""String_Node_Str"" + p.getSwAccession());
      ProcessingService ps=BeanFactory.getProcessingServiceBean();
      Processing processing=(Processing)testIfNull(ps.findBySWAccession(p.getSwAccession()));
      Log.debug(""String_Node_Str"" + registration.getEmailAddress());
      processing.givesPermission(registration);
      if (p.getOwner() != null) {
        processing.setOwner(BeanFactory.getRegistrationServiceBean().findByEmailAddress(p.getOwner().getEmailAddress()));
      }
 else {
        processing.setOwner(registration);
      }
      processing.setStatus(p.getStatus() == null ? ""String_Node_Str"" : p.getStatus());
      processing.setTaskGroup(p.isTaskGroup());
      if (p.getRunStartTimestamp() != null) {
        processing.setRunStartTimestamp(p.getRunStartTimestamp());
      }
      if (p.getRunStopTimestamp() != null) {
        processing.setRunStopTimestamp(p.getRunStopTimestamp());
      }
      if (p.getFiles() != null) {
        if (processing.getFiles() == null) {
          processing.setFiles(p.getFiles());
        }
 else {
          processing.getFiles().addAll(p.getFiles());
        }
      }
      if (p.getIUS() != null) {
        HashSet<IUS> set=new HashSet<IUS>();
        IUSService is=BeanFactory.getIUSServiceBean();
        for (        IUS i : p.getIUS()) {
          IUS newI=is.findBySWAccession(i.getSwAccession());
          if (newI != null && newI.givesPermission(registration)) {
            set.add(newI);
          }
 else           if (newI == null) {
            Log.info(""String_Node_Str"" + i);
          }
        }
        if (processing.getIUS() == null) {
          processing.setIUS(set);
        }
 else {
          processing.getIUS().addAll(set);
        }
      }
      if (p.getLanes() != null) {
        HashSet<Lane> set=new HashSet<Lane>();
        LaneService ls=BeanFactory.getLaneServiceBean();
        for (        Lane l : p.getLanes()) {
          Lane newL=ls.findBySWAccession(l.getSwAccession());
          if (newL != null && newL.givesPermission(registration)) {
            set.add(newL);
          }
 else           if (newL == null) {
            Log.info(""String_Node_Str"" + l);
          }
        }
        if (processing.getLanes() == null) {
          processing.setLanes(set);
        }
 else {
          processing.getLanes().addAll(set);
        }
      }
      if (p.getSamples() != null) {
        HashSet<Sample> set=new HashSet<Sample>();
        SampleService ss=BeanFactory.getSampleServiceBean();
        for (        Sample s : p.getSamples()) {
          Sample newS=ss.findBySWAccession(s.getSwAccession());
          if (newS != null && newS.givesPermission(registration)) {
            set.add(newS);
          }
 else           if (newS == null) {
            Log.info(""String_Node_Str"" + s);
          }
        }
        if (processing.getSamples() == null) {
          processing.setSamples(set);
        }
 else {
          processing.getSamples().addAll(set);
        }
      }
      if (p.getSequencerRuns() != null) {
        HashSet<SequencerRun> set=new HashSet<SequencerRun>();
        SequencerRunService srs=BeanFactory.getSequencerRunServiceBean();
        for (        SequencerRun sr : p.getSequencerRuns()) {
          SequencerRun newSR=srs.findBySWAccession(sr.getSwAccession());
          if (newSR != null && newSR.givesPermission(registration)) {
            set.add(newSR);
          }
 else           if (newSR == null) {
            Log.info(""String_Node_Str"" + sr);
          }
        }
        if (processing.getSequencerRuns() == null) {
          processing.setSequencerRuns(set);
        }
 else {
          processing.getSequencerRuns().addAll(set);
        }
      }
      if (p.getStudies() != null) {
        HashSet<Study> set=new HashSet<Study>();
        StudyService srs=BeanFactory.getStudyServiceBean();
        for (        Study sr : p.getStudies()) {
          Study newS=srs.findBySWAccession(sr.getSwAccession());
          if (newS != null && newS.givesPermission(registration)) {
            set.add(newS);
          }
 else           if (newS == null) {
            Log.info(""String_Node_Str"" + sr);
          }
        }
        if (processing.getSequencerRuns() == null) {
          processing.setStudies(set);
        }
 else {
          processing.getStudies().addAll(set);
        }
      }
      if (p.getChildren() != null || p.getParents() != null) {
        HashSet<Processing> childSet=new HashSet<Processing>();
        for (        Processing proc : p.getChildren()) {
          Processing newProc=ps.findBySWAccession(proc.getSwAccession());
          if (newProc != null && newProc.givesPermission(registration)) {
            childSet.add(newProc);
          }
 else           if (newProc == null) {
            Log.info(""String_Node_Str"" + proc);
          }
        }
        if (processing.getChildren() == null) {
          processing.setChildren(childSet);
        }
 else {
          processing.getChildren().addAll(childSet);
        }
        HashSet<Processing> parentSet=new HashSet<Processing>();
        for (        Processing proc : p.getParents()) {
          Processing newProc=ps.findBySWAccession(proc.getSwAccession());
          if (newProc != null && newProc.givesPermission(registration)) {
            parentSet.add(newProc);
          }
 else           if (newProc == null) {
            Log.info(""String_Node_Str"" + proc);
          }
        }
        if (processing.getParents() == null) {
          processing.setParents(parentSet);
        }
 else {
          processing.getParents().addAll(parentSet);
        }
      }
      if (p.getWorkflowRun() != null && (processing.getWorkflowRun() == null || p.getWorkflowRun().getSwAccession() != processing.getWorkflowRun().getSwAccession())) {
        WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
        WorkflowRun newWr=wrs.findBySWAccession(p.getWorkflowRun().getSwAccession());
        if (newWr != null && newWr.givesPermission(registration)) {
          processing.setWorkflowRun(newWr);
        }
 else         if (newWr == null) {
          Log.info(""String_Node_Str"" + p.getWorkflowRun());
        }
      }
      if (p.getWorkflowRunByAncestorWorkflowRunId() != null && (processing.getWorkflowRunByAncestorWorkflowRunId() == null || p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession() != processing.getWorkflowRunByAncestorWorkflowRunId().getSwAccession())) {
        WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
        WorkflowRun newWr=wrs.findBySWAccession(p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession());
        if (newWr != null && newWr.givesPermission(registration)) {
          processing.setWorkflowRunByAncestorWorkflowRunId(newWr);
        }
 else         if (newWr == null) {
          Log.info(""String_Node_Str"" + p.getWorkflowRunByAncestorWorkflowRunId());
        }
      }
      if (p.getProcessingAttributes() != null && !p.getProcessingAttributes().isEmpty()) {
        processing.getProcessingAttributes().clear();
        for (        ProcessingAttribute pa : p.getProcessingAttributes()) {
          pa.setProcessing(processing);
          processing.getProcessingAttributes().add(pa);
        }
      }
      ps.update(registration,processing);
      if (p.getFiles() != null) {
        addNewFiles(p);
      }
      if (p.getIUS() != null) {
        addNewIUSes(p);
      }
      if (p.getLanes() != null) {
        addNewLanes(p);
      }
      if (p.getSequencerRuns() != null) {
        addNewSequencerRuns(p);
      }
      if (p.getStudies() != null) {
        addNewStudies(p);
      }
      if (p.getExperiments() != null) {
        addNewExperiments(p);
      }
      if (p.getSamples() != null) {
        addNewSamples(p);
      }
      if (p.getChildren() != null || p.getParents() != null) {
        addNewRelationships(p);
      }
      if (p.getWorkflowRun() != null) {
        MetadataDB mdb=DBAccess.get();
        try {
          ReturnValue ret=mdb.update_processing_workflow_run(p.getProcessingId(),p.getWorkflowRun().getSwAccession());
          if (ret.getExitStatus() != ReturnValue.SUCCESS) {
            throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
          }
        }
  finally {
          this.closeConnectionStatementResultSet(mdb,null);
          DBAccess.close();
        }
      }
      if (p.getWorkflowRunByAncestorWorkflowRunId() != null) {
        MetadataDB mdb=DBAccess.get();
        try {
          mdb.add_workflow_run_ancestor(p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession(),p.getProcessingId());
        }
  finally {
          this.closeConnectionStatementResultSet(mdb,null);
          DBAccess.close();
        }
      }
      ReturnValue newProcessing=Processing.clone(p), ret;
      MetadataDB mdb=DBAccess.get();
      try {
        ret=DBAccess.get().update_processing_event(p.getProcessingId(),newProcessing);
      }
  finally {
        this.closeConnectionStatementResultSet(mdb,null);
        DBAccess.close();
      }
      if (ret.getExitStatus() != ReturnValue.SUCCESS) {
        throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
      }
      Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
      Document line=XmlTools.marshalToDocument(jo,copier.hibernate2dto(processing));
      toreturn=XmlTools.getRepresentation(line);
      getResponse().setEntity(toreturn);
      getResponse().setStatus(Status.SUCCESS_CREATED);
    }
 catch (    SecurityException e) {
      getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
    }
catch (    Exception e) {
      e.printStackTrace();
      getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
    }
 finally {
      DBAccess.close();
    }
  }
 else {
    throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE);
  }
  return toreturn;
}","/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation rep){
  authenticate();
  Representation toreturn=null;
  if (rep.getMediaType().equals(MediaType.APPLICATION_XML)) {
    JaxbObject<Processing> jo=new JaxbObject<Processing>();
    Processing p=null;
    try {
      String text=rep.getText();
      p=(Processing)XmlTools.unMarshal(jo,new Processing(),text);
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e);
    }
catch (    SAXException ex) {
      ex.printStackTrace();
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    try {
      Log.info(""String_Node_Str"" + p.getSwAccession());
      ProcessingService ps=BeanFactory.getProcessingServiceBean();
      Processing processing=(Processing)testIfNull(ps.findBySWAccession(p.getSwAccession()));
      Log.debug(""String_Node_Str"" + registration.getEmailAddress());
      processing.givesPermission(registration);
      if (p.getOwner() != null) {
        processing.setOwner(BeanFactory.getRegistrationServiceBean().findByEmailAddress(p.getOwner().getEmailAddress()));
      }
 else {
        processing.setOwner(registration);
      }
      processing.setStatus(p.getStatus() == null ? ""String_Node_Str"" : p.getStatus());
      processing.setTaskGroup(p.isTaskGroup());
      if (p.getRunStartTimestamp() != null) {
        processing.setRunStartTimestamp(p.getRunStartTimestamp());
      }
      if (p.getRunStopTimestamp() != null) {
        processing.setRunStopTimestamp(p.getRunStopTimestamp());
      }
      if (p.getFiles() != null) {
        if (processing.getFiles() == null) {
          processing.setFiles(p.getFiles());
        }
 else {
          processing.getFiles().addAll(p.getFiles());
        }
      }
      if (p.getIUS() != null) {
        HashSet<IUS> set=new HashSet<IUS>();
        IUSService is=BeanFactory.getIUSServiceBean();
        for (        IUS i : p.getIUS()) {
          IUS newI=is.findBySWAccession(i.getSwAccession());
          if (newI != null && newI.givesPermission(registration)) {
            set.add(newI);
          }
 else           if (newI == null) {
            Log.info(""String_Node_Str"" + i);
          }
        }
        if (processing.getIUS() == null) {
          processing.setIUS(set);
        }
 else {
          processing.getIUS().addAll(set);
        }
      }
      if (p.getLanes() != null) {
        HashSet<Lane> set=new HashSet<Lane>();
        LaneService ls=BeanFactory.getLaneServiceBean();
        for (        Lane l : p.getLanes()) {
          Lane newL=ls.findBySWAccession(l.getSwAccession());
          if (newL != null && newL.givesPermission(registration)) {
            set.add(newL);
          }
 else           if (newL == null) {
            Log.info(""String_Node_Str"" + l);
          }
        }
        if (processing.getLanes() == null) {
          processing.setLanes(set);
        }
 else {
          processing.getLanes().addAll(set);
        }
      }
      if (p.getSamples() != null) {
        HashSet<Sample> set=new HashSet<Sample>();
        SampleService ss=BeanFactory.getSampleServiceBean();
        for (        Sample s : p.getSamples()) {
          Sample newS=ss.findBySWAccession(s.getSwAccession());
          if (newS != null && newS.givesPermission(registration)) {
            set.add(newS);
          }
 else           if (newS == null) {
            Log.info(""String_Node_Str"" + s);
          }
        }
        if (processing.getSamples() == null) {
          processing.setSamples(set);
        }
 else {
          processing.getSamples().addAll(set);
        }
      }
      if (p.getSequencerRuns() != null) {
        HashSet<SequencerRun> set=new HashSet<SequencerRun>();
        SequencerRunService srs=BeanFactory.getSequencerRunServiceBean();
        for (        SequencerRun sr : p.getSequencerRuns()) {
          SequencerRun newSR=srs.findBySWAccession(sr.getSwAccession());
          if (newSR != null && newSR.givesPermission(registration)) {
            set.add(newSR);
          }
 else           if (newSR == null) {
            Log.info(""String_Node_Str"" + sr);
          }
        }
        if (processing.getSequencerRuns() == null) {
          processing.setSequencerRuns(set);
        }
 else {
          processing.getSequencerRuns().addAll(set);
        }
      }
      if (p.getStudies() != null) {
        HashSet<Study> set=new HashSet<Study>();
        StudyService srs=BeanFactory.getStudyServiceBean();
        for (        Study sr : p.getStudies()) {
          Study newS=srs.findBySWAccession(sr.getSwAccession());
          if (newS != null && newS.givesPermission(registration)) {
            set.add(newS);
          }
 else           if (newS == null) {
            Log.info(""String_Node_Str"" + sr);
          }
        }
        if (processing.getSequencerRuns() == null) {
          processing.setStudies(set);
        }
 else {
          processing.getStudies().addAll(set);
        }
      }
      if (p.getChildren() != null || p.getParents() != null) {
        HashSet<Processing> childSet=new HashSet<Processing>();
        for (        Processing proc : p.getChildren()) {
          Processing newProc=ps.findBySWAccession(proc.getSwAccession());
          if (newProc != null && newProc.givesPermission(registration)) {
            childSet.add(newProc);
          }
 else           if (newProc == null) {
            Log.info(""String_Node_Str"" + proc);
          }
        }
        if (processing.getChildren() == null) {
          processing.setChildren(childSet);
        }
 else {
          processing.getChildren().addAll(childSet);
        }
        HashSet<Processing> parentSet=new HashSet<Processing>();
        for (        Processing proc : p.getParents()) {
          Processing newProc=ps.findBySWAccession(proc.getSwAccession());
          if (newProc != null && newProc.givesPermission(registration)) {
            parentSet.add(newProc);
          }
 else           if (newProc == null) {
            Log.info(""String_Node_Str"" + proc);
          }
        }
        if (processing.getParents() == null) {
          processing.setParents(parentSet);
        }
 else {
          processing.getParents().addAll(parentSet);
        }
      }
      if (p.getWorkflowRun() != null && (processing.getWorkflowRun() == null || p.getWorkflowRun().getSwAccession() != processing.getWorkflowRun().getSwAccession())) {
        WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
        WorkflowRun newWr=wrs.findBySWAccession(p.getWorkflowRun().getSwAccession());
        if (newWr != null && newWr.givesPermission(registration)) {
          processing.setWorkflowRun(newWr);
        }
 else         if (newWr == null) {
          Log.info(""String_Node_Str"" + p.getWorkflowRun());
        }
      }
      if (p.getWorkflowRunByAncestorWorkflowRunId() != null && (processing.getWorkflowRunByAncestorWorkflowRunId() == null || p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession() != processing.getWorkflowRunByAncestorWorkflowRunId().getSwAccession())) {
        WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
        WorkflowRun newWr=wrs.findBySWAccession(p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession());
        if (newWr != null && newWr.givesPermission(registration)) {
          processing.setWorkflowRunByAncestorWorkflowRunId(newWr);
        }
 else         if (newWr == null) {
          Log.info(""String_Node_Str"" + p.getWorkflowRunByAncestorWorkflowRunId());
        }
      }
      if (p.getProcessingAttributes() != null && !p.getProcessingAttributes().isEmpty()) {
        for (        ProcessingAttribute pa : p.getProcessingAttributes()) {
          pa.setProcessing(processing);
          processing.getProcessingAttributes().add(pa);
        }
      }
      ps.update(registration,processing);
      if (p.getFiles() != null) {
        addNewFiles(p);
      }
      if (p.getIUS() != null) {
        addNewIUSes(p);
      }
      if (p.getLanes() != null) {
        addNewLanes(p);
      }
      if (p.getSequencerRuns() != null) {
        addNewSequencerRuns(p);
      }
      if (p.getStudies() != null) {
        addNewStudies(p);
      }
      if (p.getExperiments() != null) {
        addNewExperiments(p);
      }
      if (p.getSamples() != null) {
        addNewSamples(p);
      }
      if (p.getChildren() != null || p.getParents() != null) {
        addNewRelationships(p);
      }
      if (p.getWorkflowRun() != null) {
        MetadataDB mdb=DBAccess.get();
        try {
          ReturnValue ret=mdb.update_processing_workflow_run(p.getProcessingId(),p.getWorkflowRun().getSwAccession());
          if (ret.getExitStatus() != ReturnValue.SUCCESS) {
            throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
          }
        }
  finally {
          this.closeConnectionStatementResultSet(mdb,null);
          DBAccess.close();
        }
      }
      if (p.getWorkflowRunByAncestorWorkflowRunId() != null) {
        MetadataDB mdb=DBAccess.get();
        try {
          mdb.add_workflow_run_ancestor(p.getWorkflowRunByAncestorWorkflowRunId().getSwAccession(),p.getProcessingId());
        }
  finally {
          this.closeConnectionStatementResultSet(mdb,null);
          DBAccess.close();
        }
      }
      ReturnValue newProcessing=Processing.clone(p), ret;
      MetadataDB mdb=DBAccess.get();
      try {
        ret=DBAccess.get().update_processing_event(p.getProcessingId(),newProcessing);
      }
  finally {
        this.closeConnectionStatementResultSet(mdb,null);
        DBAccess.close();
      }
      if (ret.getExitStatus() != ReturnValue.SUCCESS) {
        throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
      }
      Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
      Document line=XmlTools.marshalToDocument(jo,copier.hibernate2dto(processing));
      toreturn=XmlTools.getRepresentation(line);
      getResponse().setEntity(toreturn);
      getResponse().setStatus(Status.SUCCESS_CREATED);
    }
 catch (    SecurityException e) {
      getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
    }
catch (    Exception e) {
      e.printStackTrace();
      getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
    }
 finally {
      DBAccess.close();
    }
  }
 else {
    throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE);
  }
  return toreturn;
}",0.9974504249291783
188928,"/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  try {
    JaxbObject<Sample> jo=new JaxbObject<Sample>();
    String text=entity.getText();
    Sample o=null;
    try {
      o=(Sample)XmlTools.unMarshal(jo,new Sample(),text);
    }
 catch (    SAXException ex) {
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    SampleService service=BeanFactory.getSampleServiceBean();
    Sample sample=(Sample)testIfNull(service.findByID(o.getSampleId()));
    sample.givesPermission(registration);
    String anonymizedName=o.getAnonymizedName();
    String individualName=o.getIndividualName();
    Integer swAccession=o.getSwAccession();
    String name=o.getName();
    String title=o.getTitle();
    String alias=o.getAlias();
    String description=o.getDescription();
    String type=o.getType();
    String tags=o.getTags();
    String adapters=o.getAdapters();
    String regions=o.getRegions();
    Integer expectedNumRuns=o.getExpectedNumRuns();
    Integer expectedNumSpots=o.getExpectedNumSpots();
    Integer expectedNumReads=o.getExpectedNumReads();
    Boolean skip=o.getSkip();
    Boolean isSelected=o.getIsSelected();
    Boolean isHasFile=o.getIsHasFile();
    Integer countFile=o.getCountFile();
    if (null != anonymizedName)     sample.setAnonymizedName(anonymizedName);
    if (null != individualName)     sample.setIndividualName(individualName);
    if (null != swAccession)     sample.setSwAccession(swAccession);
    if (null != name)     sample.setName(name);
    if (null != title)     sample.setTitle(title);
    if (null != alias)     sample.setAlias(alias);
    if (null != description)     sample.setDescription(description);
    if (null != type)     sample.setType(type);
    if (null != tags)     sample.setTags(tags);
    if (null != adapters)     sample.setAdapters(adapters);
    if (null != regions)     sample.setRegions(regions);
    if (null != expectedNumRuns)     sample.setExpectedNumRuns(expectedNumRuns);
    if (null != expectedNumSpots)     sample.setExpectedNumSpots(expectedNumSpots);
    if (null != expectedNumReads)     sample.setExpectedNumReads(expectedNumReads);
    if (null != skip)     sample.setSkip(skip);
    if (null != isSelected)     sample.setIsSelected(isSelected);
    if (null != isHasFile)     sample.setIsHasFile(isHasFile);
    if (null != countFile)     sample.setCountFile(countFile);
    if (null != o.getSampleAttributes()) {
      sample.getSampleAttributes().clear();
      for (      SampleAttribute sa : o.getSampleAttributes()) {
        sa.setSample(sample);
        sample.getSampleAttributes().add(sa);
      }
    }
    if (null != o.getParents()) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Set<Sample> parents=new HashSet<Sample>();
      for (      Sample s : o.getParents()) {
        parents.add(ss.findByID(s.getSampleId()));
      }
      sample.setParents(parents);
    }
    if (null != o.getChildren()) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Set<Sample> children=new HashSet<Sample>();
      for (      Sample s : o.getChildren()) {
        children.add(ss.findByID(s.getSampleId()));
      }
      sample.setChildren(children);
    }
    service.update(sample);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Sample detachedSample=copier.hibernate2dto(Sample.class,sample);
    Document line=XmlTools.marshalToDocument(jo,detachedSample);
    getResponse().setEntity(XmlTools.getRepresentation(line));
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedSample.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  try {
    JaxbObject<Sample> jo=new JaxbObject<Sample>();
    String text=entity.getText();
    Sample o=null;
    try {
      o=(Sample)XmlTools.unMarshal(jo,new Sample(),text);
    }
 catch (    SAXException ex) {
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    SampleService service=BeanFactory.getSampleServiceBean();
    Sample sample=(Sample)testIfNull(service.findByID(o.getSampleId()));
    sample.givesPermission(registration);
    String anonymizedName=o.getAnonymizedName();
    String individualName=o.getIndividualName();
    Integer swAccession=o.getSwAccession();
    String name=o.getName();
    String title=o.getTitle();
    String alias=o.getAlias();
    String description=o.getDescription();
    String type=o.getType();
    String tags=o.getTags();
    String adapters=o.getAdapters();
    String regions=o.getRegions();
    Integer expectedNumRuns=o.getExpectedNumRuns();
    Integer expectedNumSpots=o.getExpectedNumSpots();
    Integer expectedNumReads=o.getExpectedNumReads();
    Boolean skip=o.getSkip();
    Boolean isSelected=o.getIsSelected();
    Boolean isHasFile=o.getIsHasFile();
    Integer countFile=o.getCountFile();
    if (null != anonymizedName)     sample.setAnonymizedName(anonymizedName);
    if (null != individualName)     sample.setIndividualName(individualName);
    if (null != swAccession)     sample.setSwAccession(swAccession);
    if (null != name)     sample.setName(name);
    if (null != title)     sample.setTitle(title);
    if (null != alias)     sample.setAlias(alias);
    if (null != description)     sample.setDescription(description);
    if (null != type)     sample.setType(type);
    if (null != tags)     sample.setTags(tags);
    if (null != adapters)     sample.setAdapters(adapters);
    if (null != regions)     sample.setRegions(regions);
    if (null != expectedNumRuns)     sample.setExpectedNumRuns(expectedNumRuns);
    if (null != expectedNumSpots)     sample.setExpectedNumSpots(expectedNumSpots);
    if (null != expectedNumReads)     sample.setExpectedNumReads(expectedNumReads);
    if (null != skip)     sample.setSkip(skip);
    if (null != isSelected)     sample.setIsSelected(isSelected);
    if (null != isHasFile)     sample.setIsHasFile(isHasFile);
    if (null != countFile)     sample.setCountFile(countFile);
    if (null != o.getSampleAttributes()) {
      for (      SampleAttribute sa : o.getSampleAttributes()) {
        sa.setSample(sample);
        sample.getSampleAttributes().add(sa);
      }
    }
    if (null != o.getParents()) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Set<Sample> parents=new HashSet<Sample>(sample.getParents());
      for (      Sample s : o.getParents()) {
        parents.add(ss.findByID(s.getSampleId()));
      }
      sample.setParents(parents);
    }
    if (null != o.getChildren()) {
      SampleService ss=BeanFactory.getSampleServiceBean();
      Set<Sample> children=new HashSet<Sample>(sample.getChildren());
      for (      Sample s : o.getChildren()) {
        children.add(ss.findByID(s.getSampleId()));
      }
      sample.setChildren(children);
    }
    service.update(sample);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Sample detachedSample=copier.hibernate2dto(Sample.class,sample);
    Document line=XmlTools.marshalToDocument(jo,detachedSample);
    getResponse().setEntity(XmlTools.getRepresentation(line));
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedSample.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}",0.9282416073879944
188929,"/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  JaxbObject<SequencerRun> jo=new JaxbObject<SequencerRun>();
  SequencerRun newSequencerRun=null;
  try {
    String text=entity.getText();
    newSequencerRun=(SequencerRun)XmlTools.unMarshal(jo,new SequencerRun(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex.getMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e.getMessage());
  }
  try {
    SequencerRunService srs=BeanFactory.getSequencerRunServiceBean();
    SequencerRunWizardDTO sequencerRun=(SequencerRunWizardDTO)testIfNull(srs.findByID(newSequencerRun.getSequencerRunId()));
    sequencerRun.givesPermission(registration);
    String name=newSequencerRun.getName();
    String desc=newSequencerRun.getDescription();
    Boolean skip=newSequencerRun.getSkip();
    Registration owner=newSequencerRun.getOwner();
    Platform platform=newSequencerRun.getPlatform();
    Set<SequencerRunAttribute> newAttributes=newSequencerRun.getSequencerRunAttributes();
    sequencerRun.setName(name);
    sequencerRun.setDescription(desc);
    sequencerRun.setSkip(skip);
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        sequencerRun.setOwner(newReg);
      }
 else       if (newReg == null) {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (sequencerRun.getOwner() == null) {
      sequencerRun.setOwner(registration);
    }
    if (platform != null) {
      Platform p=BeanFactory.getPlatformServiceBean().findByID(platform.getPlatformId());
      if (p != null) {
        sequencerRun.setPlatform(p);
      }
 else       if (p == null) {
        Log.info(""String_Node_Str"" + platform);
      }
    }
    if (newAttributes != null) {
      sequencerRun.getSequencerRunAttributes().clear();
      for (      SequencerRunAttribute sra : newAttributes) {
        sra.setSequencerRunWizardDTO(sequencerRun);
        sequencerRun.getSequencerRunAttributes().add(sra);
      }
    }
    srs.update(registration,sequencerRun);
    Log.debug(""String_Node_Str"" + sequencerRun.getSkip());
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    SequencerRun detachedSequencerRun=copier.hibernate2dto(SequencerRun.class,sequencerRun);
    Document line=XmlTools.marshalToDocument(jo,detachedSequencerRun);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedSequencerRun.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  JaxbObject<SequencerRun> jo=new JaxbObject<SequencerRun>();
  SequencerRun newSequencerRun=null;
  try {
    String text=entity.getText();
    newSequencerRun=(SequencerRun)XmlTools.unMarshal(jo,new SequencerRun(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex.getMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e.getMessage());
  }
  try {
    SequencerRunService srs=BeanFactory.getSequencerRunServiceBean();
    SequencerRunWizardDTO sequencerRun=(SequencerRunWizardDTO)testIfNull(srs.findByID(newSequencerRun.getSequencerRunId()));
    sequencerRun.givesPermission(registration);
    String name=newSequencerRun.getName();
    String desc=newSequencerRun.getDescription();
    Boolean skip=newSequencerRun.getSkip();
    Registration owner=newSequencerRun.getOwner();
    Platform platform=newSequencerRun.getPlatform();
    Set<SequencerRunAttribute> newAttributes=newSequencerRun.getSequencerRunAttributes();
    sequencerRun.setName(name);
    sequencerRun.setDescription(desc);
    sequencerRun.setSkip(skip);
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        sequencerRun.setOwner(newReg);
      }
 else       if (newReg == null) {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (sequencerRun.getOwner() == null) {
      sequencerRun.setOwner(registration);
    }
    if (platform != null) {
      Platform p=BeanFactory.getPlatformServiceBean().findByID(platform.getPlatformId());
      if (p != null) {
        sequencerRun.setPlatform(p);
      }
 else       if (p == null) {
        Log.info(""String_Node_Str"" + platform);
      }
    }
    if (newAttributes != null) {
      for (      SequencerRunAttribute sra : newAttributes) {
        sra.setSequencerRunWizardDTO(sequencerRun);
        sequencerRun.getSequencerRunAttributes().add(sra);
      }
    }
    srs.update(registration,sequencerRun);
    Log.debug(""String_Node_Str"" + sequencerRun.getSkip());
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    SequencerRun detachedSequencerRun=copier.hibernate2dto(SequencerRun.class,sequencerRun);
    Document line=XmlTools.marshalToDocument(jo,detachedSequencerRun);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedSequencerRun.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}",0.9911476446411634
188930,"/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  Representation representation=null;
  try {
    JaxbObject<Study> jo=new JaxbObject<Study>();
    String text=entity.getText();
    Study p=null;
    try {
      p=(Study)XmlTools.unMarshal(jo,new Study(),text);
    }
 catch (    SAXException ex) {
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    if (p.getOwner() == null) {
      p.setOwner(registration);
    }
    StudyService service=BeanFactory.getStudyServiceBean();
    Study study=(Study)testIfNull(service.findByID(p.getStudyId()));
    if (null != p.getStudyAttributes()) {
      study.getStudyAttributes().clear();
      for (      StudyAttribute sa : p.getStudyAttributes()) {
        sa.setStudy(study);
        study.getStudyAttributes().add(sa);
      }
    }
    String title=p.getTitle();
    String description=p.getDescription();
    String alias=p.getAlias();
    String accession=p.getAccession();
    String status=p.getStatus();
    String abstractStr=p.getAbstractStr();
    String newType=p.getNewType();
    String centerName=p.getCenterName();
    String centerProjectName=p.getCenterProjectName();
    Integer projectId=p.getProjectId();
    Boolean isSelected=p.getIsSelected();
    Boolean isHasFile=p.getIsHasFile();
    String html=p.getHtml();
    Integer existingTypeInt=p.getExistingTypeInt();
    if (null != title) {
      study.setTitle(title);
    }
    if (null != description) {
      study.setDescription(description);
    }
    if (null != alias) {
      study.setAlias(alias);
    }
    if (null != accession) {
      study.setAccession(accession);
    }
    if (null != status) {
      study.setStatus(status);
    }
    if (null != abstractStr) {
      study.setAbstractStr(abstractStr);
    }
    if (null != newType) {
      study.setNewType(newType);
    }
    if (null != centerName) {
      study.setCenterName(centerName);
    }
    if (null != centerProjectName) {
      study.setCenterProjectName(centerProjectName);
    }
    if (null != projectId) {
      study.setProjectId(projectId);
    }
    if (null != isSelected) {
      study.setIsSelected(isSelected);
    }
    if (null != isHasFile) {
      study.setIsHasFile(isHasFile);
    }
    if (null != html) {
      study.setHtml(html);
    }
    if (null != existingTypeInt) {
      study.setExistingTypeInt(existingTypeInt);
    }
    service.update(study);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Study detachedStudy=copier.hibernate2dto(Study.class,study);
    Document line=XmlTools.marshalToDocument(jo,detachedStudy);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedStudy.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override @Put public Representation put(Representation entity){
  Representation representation=null;
  try {
    JaxbObject<Study> jo=new JaxbObject<Study>();
    String text=entity.getText();
    Study p=null;
    try {
      p=(Study)XmlTools.unMarshal(jo,new Study(),text);
    }
 catch (    SAXException ex) {
      throw new ResourceException(Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY,ex);
    }
    if (p.getOwner() == null) {
      p.setOwner(registration);
    }
    StudyService service=BeanFactory.getStudyServiceBean();
    Study study=(Study)testIfNull(service.findByID(p.getStudyId()));
    if (null != p.getStudyAttributes()) {
      for (      StudyAttribute sa : p.getStudyAttributes()) {
        sa.setStudy(study);
        study.getStudyAttributes().add(sa);
      }
    }
    String title=p.getTitle();
    String description=p.getDescription();
    String alias=p.getAlias();
    String accession=p.getAccession();
    String status=p.getStatus();
    String abstractStr=p.getAbstractStr();
    String newType=p.getNewType();
    String centerName=p.getCenterName();
    String centerProjectName=p.getCenterProjectName();
    Integer projectId=p.getProjectId();
    Boolean isSelected=p.getIsSelected();
    Boolean isHasFile=p.getIsHasFile();
    String html=p.getHtml();
    Integer existingTypeInt=p.getExistingTypeInt();
    if (null != title) {
      study.setTitle(title);
    }
    if (null != description) {
      study.setDescription(description);
    }
    if (null != alias) {
      study.setAlias(alias);
    }
    if (null != accession) {
      study.setAccession(accession);
    }
    if (null != status) {
      study.setStatus(status);
    }
    if (null != abstractStr) {
      study.setAbstractStr(abstractStr);
    }
    if (null != newType) {
      study.setNewType(newType);
    }
    if (null != centerName) {
      study.setCenterName(centerName);
    }
    if (null != centerProjectName) {
      study.setCenterProjectName(centerProjectName);
    }
    if (null != projectId) {
      study.setProjectId(projectId);
    }
    if (null != isSelected) {
      study.setIsSelected(isSelected);
    }
    if (null != isHasFile) {
      study.setIsHasFile(isHasFile);
    }
    if (null != html) {
      study.setHtml(html);
    }
    if (null != existingTypeInt) {
      study.setExistingTypeInt(existingTypeInt);
    }
    service.update(study);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Study detachedStudy=copier.hibernate2dto(Study.class,study);
    Document line=XmlTools.marshalToDocument(jo,detachedStudy);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedStudy.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e);
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e);
  }
  return representation;
}",0.9932907348242812
188931,"/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Workflow newWorkflow=null;
  JaxbObject<Workflow> jo=new JaxbObject<Workflow>();
  try {
    String text=entity.getText();
    newWorkflow=(Workflow)XmlTools.unMarshal(jo,new Workflow(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex.getMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e.getMessage());
  }
  try {
    WorkflowService fs=BeanFactory.getWorkflowServiceBean();
    Workflow workflow=(Workflow)testIfNull(fs.findByID(newWorkflow.getWorkflowId()));
    workflow.givesPermission(registration);
    String name=newWorkflow.getName();
    String desc=newWorkflow.getDescription();
    String baseIniFile=newWorkflow.getBaseIniFile();
    String command=newWorkflow.getCommand();
    String cwd=newWorkflow.getCwd();
    String host=newWorkflow.getHost();
    String inputAlgorithm=newWorkflow.getInputAlgorithm();
    String permanentBundleLocation=newWorkflow.getPermanentBundleLocation();
    String seqwareVersion=newWorkflow.getSeqwareVersion();
    String template=newWorkflow.getTemplate();
    String username=newWorkflow.getUsername();
    String version=newWorkflow.getVersion();
    Registration owner=newWorkflow.getOwner();
    workflow.setName(name);
    workflow.setDescription(desc);
    workflow.setBaseIniFile(baseIniFile);
    workflow.setCommand(command);
    workflow.setCwd(cwd);
    workflow.setHost(host);
    workflow.setInputAlgorithm(inputAlgorithm);
    workflow.setPermanentBundleLocation(permanentBundleLocation);
    workflow.setSeqwareVersion(seqwareVersion);
    workflow.setTemplate(template);
    workflow.setUsername(username);
    workflow.setVersion(version);
    workflow.setUpdateTimestamp(new Date());
    workflow.setWorkflowClass(newWorkflow.getWorkflowClass());
    workflow.setWorkflowType(newWorkflow.getWorkflowType());
    workflow.setWorkflowEngine(newWorkflow.getWorkflowEngine());
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        workflow.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (workflow.getOwner() == null) {
      workflow.setOwner(registration);
    }
    if (newWorkflow.getWorkflowAttributes() != null) {
      workflow.getWorkflowAttributes().clear();
      for (      WorkflowAttribute wfa : newWorkflow.getWorkflowAttributes()) {
        wfa.setWorkflow(workflow);
        workflow.getWorkflowAttributes().add(wfa);
      }
    }
    fs.update(registration,workflow);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Workflow detachedWorkflow=copier.hibernate2dto(Workflow.class,workflow);
    Document line=XmlTools.marshalToDocument(jo,detachedWorkflow);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedWorkflow.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}","/** 
 * {@inheritDoc} 
 */
@Override public Representation put(Representation entity){
  authenticate();
  Representation representation=null;
  Workflow newWorkflow=null;
  JaxbObject<Workflow> jo=new JaxbObject<Workflow>();
  try {
    String text=entity.getText();
    newWorkflow=(Workflow)XmlTools.unMarshal(jo,new Workflow(),text);
  }
 catch (  SAXException ex) {
    ex.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ex.getMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,e.getMessage());
  }
  try {
    WorkflowService fs=BeanFactory.getWorkflowServiceBean();
    Workflow workflow=(Workflow)testIfNull(fs.findByID(newWorkflow.getWorkflowId()));
    workflow.givesPermission(registration);
    String name=newWorkflow.getName();
    String desc=newWorkflow.getDescription();
    String baseIniFile=newWorkflow.getBaseIniFile();
    String command=newWorkflow.getCommand();
    String cwd=newWorkflow.getCwd();
    String host=newWorkflow.getHost();
    String inputAlgorithm=newWorkflow.getInputAlgorithm();
    String permanentBundleLocation=newWorkflow.getPermanentBundleLocation();
    String seqwareVersion=newWorkflow.getSeqwareVersion();
    String template=newWorkflow.getTemplate();
    String username=newWorkflow.getUsername();
    String version=newWorkflow.getVersion();
    Registration owner=newWorkflow.getOwner();
    workflow.setName(name);
    workflow.setDescription(desc);
    workflow.setBaseIniFile(baseIniFile);
    workflow.setCommand(command);
    workflow.setCwd(cwd);
    workflow.setHost(host);
    workflow.setInputAlgorithm(inputAlgorithm);
    workflow.setPermanentBundleLocation(permanentBundleLocation);
    workflow.setSeqwareVersion(seqwareVersion);
    workflow.setTemplate(template);
    workflow.setUsername(username);
    workflow.setVersion(version);
    workflow.setUpdateTimestamp(new Date());
    workflow.setWorkflowClass(newWorkflow.getWorkflowClass());
    workflow.setWorkflowType(newWorkflow.getWorkflowType());
    workflow.setWorkflowEngine(newWorkflow.getWorkflowEngine());
    if (owner != null) {
      RegistrationService rs=BeanFactory.getRegistrationServiceBean();
      Registration newReg=rs.findByEmailAddress(owner.getEmailAddress());
      if (newReg != null) {
        workflow.setOwner(newReg);
      }
 else {
        Log.info(""String_Node_Str"" + owner);
      }
    }
 else     if (workflow.getOwner() == null) {
      workflow.setOwner(registration);
    }
    if (newWorkflow.getWorkflowAttributes() != null) {
      for (      WorkflowAttribute wfa : newWorkflow.getWorkflowAttributes()) {
        wfa.setWorkflow(workflow);
        workflow.getWorkflowAttributes().add(wfa);
      }
    }
    fs.update(registration,workflow);
    Hibernate3DtoCopier copier=new Hibernate3DtoCopier();
    Workflow detachedWorkflow=copier.hibernate2dto(Workflow.class,workflow);
    Document line=XmlTools.marshalToDocument(jo,detachedWorkflow);
    representation=XmlTools.getRepresentation(line);
    getResponse().setEntity(representation);
    getResponse().setLocationRef(getRequest().getRootRef() + ""String_Node_Str"" + detachedWorkflow.getSwAccession());
    getResponse().setStatus(Status.SUCCESS_CREATED);
  }
 catch (  SecurityException e) {
    getResponse().setStatus(Status.CLIENT_ERROR_FORBIDDEN,e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    getResponse().setStatus(Status.SERVER_ERROR_INTERNAL,e.getMessage());
  }
  return representation;
}",0.9933091720100362
188932,"/** 
 * <p>updateWorkflowRun.</p>
 * @param newWR a {@link net.sourceforge.seqware.common.model.WorkflowRun} object.
 * @return a {@link net.sourceforge.seqware.common.model.WorkflowRun} object.
 * @throws org.restlet.resource.ResourceException if any.
 * @throws java.sql.SQLException if any.
 */
public WorkflowRun updateWorkflowRun(WorkflowRun newWR) throws ResourceException, SQLException {
  authenticate();
  WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
  WorkflowRun wr=(WorkflowRun)testIfNull(wrs.findBySWAccession(newWR.getSwAccession()));
  wr.givesPermission(registration);
  if (newWR.getIus() != null) {
    SortedSet<IUS> iuses=newWR.getIus();
    if (iuses != null) {
      SortedSet<IUS> set=new TreeSet<IUS>();
      for (      IUS ius : iuses) {
        IUSService is=BeanFactory.getIUSServiceBean();
        IUS newI=is.findBySWAccession(ius.getSwAccession());
        newI.givesPermission(registration);
        set.add(newI);
      }
      wr.setIus(set);
    }
 else {
      Log.info(""String_Node_Str"");
    }
  }
  if (newWR.getLanes() != null) {
    SortedSet<Lane> lanes=newWR.getLanes();
    if (lanes != null) {
      SortedSet<Lane> set=new TreeSet<Lane>();
      for (      Lane lane : lanes) {
        LaneService ls=BeanFactory.getLaneServiceBean();
        Lane newL=ls.findBySWAccession(lane.getSwAccession());
        newL.givesPermission(registration);
        set.add(newL);
      }
      wr.setLanes(set);
    }
 else {
      Log.info(""String_Node_Str"");
    }
  }
  wr.setCommand(newWR.getCommand());
  wr.setCurrentWorkingDir(newWR.getCurrentWorkingDir());
  wr.setDax(newWR.getDax());
  wr.setHost(newWR.getHost());
  wr.setIniFile(newWR.getIniFile());
  wr.setName(newWR.getName());
  wr.setStatus(newWR.getStatus());
  wr.setStatusCmd(newWR.getStatusCmd());
  wr.setTemplate(newWR.getTemplate());
  wr.setSeqwareRevision(newWR.getSeqwareRevision());
  wr.setUserName(newWR.getUserName());
  wr.setUpdateTimestamp(new Date());
  wr.setStdErr(newWR.getStdErr());
  wr.setStdOut(newWR.getStdOut());
  if (newWR.getWorkflow() != null) {
    WorkflowService ws=BeanFactory.getWorkflowServiceBean();
    Workflow w=ws.findByID(newWR.getWorkflow().getWorkflowId());
    if (w != null) {
      wr.setWorkflow(w);
    }
 else {
      Log.info(""String_Node_Str"" + newWR.getWorkflow());
    }
  }
  if (newWR.getOwner() != null) {
    Registration reg=BeanFactory.getRegistrationServiceBean().findByEmailAddress(newWR.getOwner().getEmailAddress());
    if (reg != null) {
      wr.setOwner(reg);
    }
 else {
      Log.info(""String_Node_Str"" + newWR.getOwner());
    }
  }
 else   if (wr.getOwner() == null) {
    wr.setOwner(registration);
  }
  if (newWR.getWorkflowRunAttributes() != null) {
    wr.getWorkflowRunAttributes().clear();
    for (    WorkflowRunAttribute wra : newWR.getWorkflowRunAttributes()) {
      wra.setWorkflowRun(wr);
      wr.getWorkflowRunAttributes().add(wra);
    }
  }
  wrs.update(registration,wr);
  if (newWR.getIus() != null) {
    addNewIUSes(newWR,wr);
  }
  if (newWR.getLanes() != null) {
    addNewLanes(newWR,wr);
  }
  return wr;
}","/** 
 * <p>updateWorkflowRun.</p>
 * @param newWR a {@link net.sourceforge.seqware.common.model.WorkflowRun} object.
 * @return a {@link net.sourceforge.seqware.common.model.WorkflowRun} object.
 * @throws org.restlet.resource.ResourceException if any.
 * @throws java.sql.SQLException if any.
 */
public WorkflowRun updateWorkflowRun(WorkflowRun newWR) throws ResourceException, SQLException {
  authenticate();
  WorkflowRunService wrs=BeanFactory.getWorkflowRunServiceBean();
  WorkflowRun wr=(WorkflowRun)testIfNull(wrs.findBySWAccession(newWR.getSwAccession()));
  wr.givesPermission(registration);
  if (newWR.getIus() != null) {
    SortedSet<IUS> iuses=newWR.getIus();
    if (iuses != null) {
      SortedSet<IUS> set=new TreeSet<IUS>();
      for (      IUS ius : iuses) {
        IUSService is=BeanFactory.getIUSServiceBean();
        IUS newI=is.findBySWAccession(ius.getSwAccession());
        newI.givesPermission(registration);
        set.add(newI);
      }
      wr.setIus(set);
    }
 else {
      Log.info(""String_Node_Str"");
    }
  }
  if (newWR.getLanes() != null) {
    SortedSet<Lane> lanes=newWR.getLanes();
    if (lanes != null) {
      SortedSet<Lane> set=new TreeSet<Lane>();
      for (      Lane lane : lanes) {
        LaneService ls=BeanFactory.getLaneServiceBean();
        Lane newL=ls.findBySWAccession(lane.getSwAccession());
        newL.givesPermission(registration);
        set.add(newL);
      }
      wr.setLanes(set);
    }
 else {
      Log.info(""String_Node_Str"");
    }
  }
  wr.setCommand(newWR.getCommand());
  wr.setCurrentWorkingDir(newWR.getCurrentWorkingDir());
  wr.setDax(newWR.getDax());
  wr.setHost(newWR.getHost());
  wr.setIniFile(newWR.getIniFile());
  wr.setName(newWR.getName());
  wr.setStatus(newWR.getStatus());
  wr.setStatusCmd(newWR.getStatusCmd());
  wr.setTemplate(newWR.getTemplate());
  wr.setSeqwareRevision(newWR.getSeqwareRevision());
  wr.setUserName(newWR.getUserName());
  wr.setUpdateTimestamp(new Date());
  wr.setStdErr(newWR.getStdErr());
  wr.setStdOut(newWR.getStdOut());
  if (newWR.getWorkflow() != null) {
    WorkflowService ws=BeanFactory.getWorkflowServiceBean();
    Workflow w=ws.findByID(newWR.getWorkflow().getWorkflowId());
    if (w != null) {
      wr.setWorkflow(w);
    }
 else {
      Log.info(""String_Node_Str"" + newWR.getWorkflow());
    }
  }
  if (newWR.getOwner() != null) {
    Registration reg=BeanFactory.getRegistrationServiceBean().findByEmailAddress(newWR.getOwner().getEmailAddress());
    if (reg != null) {
      wr.setOwner(reg);
    }
 else {
      Log.info(""String_Node_Str"" + newWR.getOwner());
    }
  }
 else   if (wr.getOwner() == null) {
    wr.setOwner(registration);
  }
  if (newWR.getWorkflowRunAttributes() != null) {
    for (    WorkflowRunAttribute wra : newWR.getWorkflowRunAttributes()) {
      wra.setWorkflowRun(wr);
      wr.getWorkflowRunAttributes().add(wra);
    }
  }
  wrs.update(registration,wr);
  if (newWR.getIus() != null) {
    addNewIUSes(newWR,wr);
  }
  if (newWR.getLanes() != null) {
    addNewLanes(newWR,wr);
  }
  return wr;
}",0.9930701047542304
188933,"private int retrieveTissueTypeSampleAccession(Integer parentSampleAcc,SampleInfo barcode) throws Exception {
  int tissueTypeSampleAcc=0;
  String name=barcode.getParentSample() + ""String_Node_Str"" + barcode.getTissueType();
  List<Sample> children=metadata.getChildSamplesFrom(parentSampleAcc);
  if (children != null) {
    for (    Sample s : children) {
      if (s.getTitle().equals(name)) {
        tissueTypeSampleAcc=s.getSwAccession();
      }
    }
  }
  if (tissueTypeSampleAcc == 0) {
    tissueTypeSampleAcc=createSample(name,""String_Node_Str"",0,parentSampleAcc,barcode.getOrganismId(),false);
  }
  names.put(tissueTypeSampleAcc,name);
  recordEdge(""String_Node_Str"",parentSampleAcc,""String_Node_Str"",tissueTypeSampleAcc);
  return tissueTypeSampleAcc;
}","private int retrieveTissueTypeSampleAccession(Integer parentSampleAcc,SampleInfo barcode) throws Exception {
  int tissueTypeSampleAcc=0;
  String name=barcode.getParentSample() + ""String_Node_Str"" + barcode.getTissueOrigin()+ ""String_Node_Str""+ barcode.getTissueType();
  List<Sample> children=metadata.getChildSamplesFrom(parentSampleAcc);
  if (children != null) {
    for (    Sample s : children) {
      if (s.getTitle().equals(name)) {
        tissueTypeSampleAcc=s.getSwAccession();
      }
    }
  }
  if (tissueTypeSampleAcc == 0) {
    tissueTypeSampleAcc=createSample(name,""String_Node_Str"",0,parentSampleAcc,barcode.getOrganismId(),false);
  }
  names.put(tissueTypeSampleAcc,name);
  recordEdge(""String_Node_Str"",parentSampleAcc,""String_Node_Str"",tissueTypeSampleAcc);
  return tissueTypeSampleAcc;
}",0.9709228824273072
188934,"private Integer retrieveParentSampleAccession(List<Sample> parentSamples,SampleInfo sample,int experimentAccession) throws Exception {
  Integer parentSampleAcc=null;
  if (parentSamples != null && !parentSamples.isEmpty()) {
    for (    Sample pSample : parentSamples) {
      if (pSample.getName().equals(sample.getParentSample())) {
        parentSampleAcc=pSample.getSwAccession();
      }
    }
  }
  if (parentSampleAcc == null) {
    parentSampleAcc=createSample(sample.getParentSample(),sample.getSampleDescription(),experimentAccession,0,sample.getOrganismId(),false);
  }
  names.put(parentSampleAcc,sample.getParentSample());
  recordEdge(""String_Node_Str"",experimentAccession,""String_Node_Str"",parentSampleAcc);
  return parentSampleAcc;
}","private Integer retrieveParentSampleAccession(List<Sample> parentSamples,SampleInfo sample,int experimentAccession) throws Exception {
  Integer parentSampleAcc=null;
  if (parentSamples != null && !parentSamples.isEmpty()) {
    for (    Sample pSample : parentSamples) {
      if (pSample.getName().equals(sample.getParentSample())) {
        parentSampleAcc=pSample.getSwAccession();
      }
    }
  }
  if (parentSampleAcc == null) {
    parentSampleAcc=createSample(sample.getParentSample(),""String_Node_Str"",experimentAccession,0,sample.getOrganismId(),false);
  }
  names.put(parentSampleAcc,sample.getParentSample());
  recordEdge(""String_Node_Str"",experimentAccession,""String_Node_Str"",parentSampleAcc);
  return parentSampleAcc;
}",0.9691689008042896
188935,"private LaneInfo getLane(int i){
  boolean doneLane=false;
  LaneInfo lane=null;
  while (!doneLane) {
    int num=promptPositiveInteger(""String_Node_Str"",(i + 1),null,1,Integer.MAX_VALUE);
    lane=this.generateLaneInfo(String.valueOf(num),-1);
    StringBuilder sb=new StringBuilder();
    printLaneInfo(lane,sb);
    Log.stdout(sb.toString());
    doneLane=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  return lane;
}","private LaneInfo getLane(int i){
  boolean doneLane=false;
  LaneInfo lane=null;
  while (!doneLane) {
    Log.stdout(""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
    int num=promptPositiveInteger(""String_Node_Str"",(i + 1),null,1,Integer.MAX_VALUE);
    lane=this.generateLaneInfo(String.valueOf(num),-1);
    StringBuilder sb=new StringBuilder();
    printLaneInfo(lane,sb);
    Log.stdout(sb.toString());
    doneLane=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  return lane;
}",0.9323621227887616
188936,"public RunInfo getRunInfo(){
  boolean runDone=false;
  RunInfo runInfo=null;
  while (!runDone) {
    runInfo=this.generateRunInfo(null,null,null,null,null,null,null,null,null,-1,-1,true,null,null);
    StringBuilder sb=new StringBuilder();
    printRunInfo(runInfo,sb);
    Log.stdout(sb.toString());
    runDone=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  String projectCode=""String_Node_Str"";
  int numLanes=this.promptInteger(""String_Node_Str"",8,Field.number_of_lanes);
  for (int i=0; i < numLanes; i++) {
    LaneInfo lane=getLane(i);
    int numBarcodes=this.promptInteger(""String_Node_Str"" + lane.getLaneNumber() + ""String_Node_Str"",1,null);
    for (int j=0; j < numBarcodes; j++) {
      try {
        boolean done=false;
        SampleInfo sample=null;
        while (!done) {
          projectCode=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",projectCode);
          String individualNumber=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
          sample=this.generateSampleInfo(projectCode + ""String_Node_Str"" + individualNumber,projectCode,individualNumber,null,null,null,null,null,null,-1,null,null,null,null,null);
          StringBuilder sb=new StringBuilder();
          printSampleInfo(sample,sb);
          Log.stdout(sb.toString());
          done=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
        }
        lane.getSamples().add(sample);
      }
 catch (      Exception ex) {
        Logger.getLogger(CreateFromScratch.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    runInfo.getLanes().add(lane);
  }
  return runInfo;
}","public RunInfo getRunInfo(){
  boolean runDone=false;
  RunInfo runInfo=null;
  while (!runDone) {
    runInfo=this.generateRunInfo(null,null,null,null,null,null,null,null,null,-1,-1,true,null,null);
    StringBuilder sb=new StringBuilder();
    printRunInfo(runInfo,sb);
    Log.stdout(sb.toString());
    runDone=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
  }
  String projectCode=""String_Node_Str"";
  int numLanes=this.promptInteger(""String_Node_Str"",8,Field.number_of_lanes);
  for (int i=0; i < numLanes; i++) {
    LaneInfo lane=getLane(i);
    int numBarcodes=this.promptInteger(""String_Node_Str"" + lane.getLaneNumber() + ""String_Node_Str"",1,null);
    for (int j=0; j < numBarcodes; j++) {
      try {
        boolean done=false;
        SampleInfo sample=null;
        while (!done) {
          Log.stdout(""String_Node_Str"" + lane.getLaneNumber() + ""String_Node_Str""+ (j + 1)+ ""String_Node_Str"");
          projectCode=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",projectCode);
          String individualNumber=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
          sample=this.generateSampleInfo(projectCode + ""String_Node_Str"" + individualNumber,projectCode,individualNumber,null,null,null,null,null,null,-1,null,null,null,null,null);
          StringBuilder sb=new StringBuilder();
          printSampleInfo(sample,sb);
          Log.stdout(sb.toString());
          done=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"",true);
        }
        lane.getSamples().add(sample);
      }
 catch (      Exception ex) {
        Logger.getLogger(CreateFromScratch.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    runInfo.getLanes().add(lane);
  }
  return runInfo;
}",0.9671361502347418
188937,"private List<Workflow> findWorkflows() throws IOException, JAXBException {
  JaxbObject<WorkflowList> jaxb=new JaxbObject<WorkflowList>();
  WorkflowList list=(WorkflowList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new WorkflowList());
  return list.getList();
}","private List<Workflow> findWorkflows() throws IOException, JAXBException {
  JaxbObject<WorkflowList> jaxb=new JaxbObject<WorkflowList>();
  WorkflowList list=(WorkflowList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new WorkflowList());
  if (list != null)   return list.getList();
  return null;
}",0.9395509499136442
188938,"private List<StudyType> findStudyTypes() throws IOException, JAXBException {
  JaxbObject<StudyTypeList> jaxb=new JaxbObject<StudyTypeList>();
  StudyTypeList list=(StudyTypeList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new StudyTypeList());
  return list.getList();
}","private List<StudyType> findStudyTypes() throws IOException, JAXBException {
  JaxbObject<StudyTypeList> jaxb=new JaxbObject<StudyTypeList>();
  StudyTypeList list=(StudyTypeList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new StudyTypeList());
  if (list != null)   return list.getList();
  return null;
}",0.9409780775716696
188939,"@Override public List<IUS> getIUSFrom(int laneOrSampleAccession){
  StringBuilder sb=new StringBuilder();
  if (ll.existsLane(""String_Node_Str"" + laneOrSampleAccession) != null) {
    sb.append(""String_Node_Str"");
  }
 else   if (ll.existsSample(""String_Node_Str"" + laneOrSampleAccession) != null) {
    sb.append(""String_Node_Str"");
  }
 else {
    Log.error(""String_Node_Str"" + laneOrSampleAccession);
    return null;
  }
  try {
    sb.append(laneOrSampleAccession).append(""String_Node_Str"");
    JaxbObject<IUSList> jaxb=new JaxbObject<IUSList>();
    IUSList list=(IUSList)ll.existsObject(sb.toString(),""String_Node_Str"",jaxb,new IUSList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<IUS> getIUSFrom(int laneOrSampleAccession){
  StringBuilder sb=new StringBuilder();
  if (ll.existsLane(""String_Node_Str"" + laneOrSampleAccession) != null) {
    sb.append(""String_Node_Str"");
  }
 else   if (ll.existsSample(""String_Node_Str"" + laneOrSampleAccession) != null) {
    sb.append(""String_Node_Str"");
  }
 else {
    Log.error(""String_Node_Str"" + laneOrSampleAccession);
    return null;
  }
  try {
    sb.append(laneOrSampleAccession).append(""String_Node_Str"");
    JaxbObject<IUSList> jaxb=new JaxbObject<IUSList>();
    IUSList list=(IUSList)ll.existsObject(sb.toString(),""String_Node_Str"",jaxb,new IUSList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.9858429858429858
188940,"@Override public List<Experiment> getExperimentsFrom(int studyAccession){
  try {
    JaxbObject<ExperimentList> jaxb=new JaxbObject<ExperimentList>();
    ExperimentList list=(ExperimentList)ll.existsObject(""String_Node_Str"" + studyAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new ExperimentList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<Experiment> getExperimentsFrom(int studyAccession){
  try {
    JaxbObject<ExperimentList> jaxb=new JaxbObject<ExperimentList>();
    ExperimentList list=(ExperimentList)ll.existsObject(""String_Node_Str"" + studyAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new ExperimentList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.9748858447488584
188941,"/** 
 * Use percent sign to designate what should be matched. Eg. SAMPLE_1% will match SAMPLE_1_001 and SAMPLE_1_002 and SAMPLE_1
 * @param name
 * @return
 * @throws IOException
 * @throws JAXBException
 */
private List<Sample> matchSampleName(String name) throws IOException, JAXBException {
  JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
  SampleList list=(SampleList)findObject(""String_Node_Str"",""String_Node_Str"" + name,jaxb,new SampleList());
  return list.getList();
}","/** 
 * Use percent sign to designate what should be matched. Eg. SAMPLE_1% will match SAMPLE_1_001 and SAMPLE_1_002 and SAMPLE_1
 * @param name
 * @return
 * @throws IOException
 * @throws JAXBException
 */
private List<Sample> matchSampleName(String name) throws IOException, JAXBException {
  JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
  SampleList list=(SampleList)findObject(""String_Node_Str"",""String_Node_Str"" + name,jaxb,new SampleList());
  if (list != null)   return list.getList();
  return null;
}",0.9594460929772504
188942,"private List<LibrarySelection> findLibrarySelections() throws IOException, JAXBException {
  JaxbObject<LibrarySelectionList> jaxb=new JaxbObject<LibrarySelectionList>();
  LibrarySelectionList list=(LibrarySelectionList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibrarySelectionList());
  return list.getList();
}","private List<LibrarySelection> findLibrarySelections() throws IOException, JAXBException {
  JaxbObject<LibrarySelectionList> jaxb=new JaxbObject<LibrarySelectionList>();
  LibrarySelectionList list=(LibrarySelectionList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibrarySelectionList());
  if (list != null)   return list.getList();
  return null;
}",0.9493487698986977
188943,"private List<Experiment> findExperiments(String searchString) throws IOException, JAXBException {
  JaxbObject<ExperimentList> jaxb=new JaxbObject<ExperimentList>();
  ExperimentList list=(ExperimentList)findObject(searchString,""String_Node_Str"",jaxb,new ExperimentList());
  return list.getList();
}","private List<Experiment> findExperiments(String searchString) throws IOException, JAXBException {
  JaxbObject<ExperimentList> jaxb=new JaxbObject<ExperimentList>();
  ExperimentList list=(ExperimentList)findObject(searchString,""String_Node_Str"",jaxb,new ExperimentList());
  if (list != null)   return list.getList();
  return null;
}",0.9354330708661416
188944,"private List<SequencerRun> findSequencerRuns() throws IOException, JAXBException {
  JaxbObject<SequencerRunList> jaxb=new JaxbObject<SequencerRunList>();
  SequencerRunList list=(SequencerRunList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new SequencerRunList());
  return list.getList();
}","private List<SequencerRun> findSequencerRuns() throws IOException, JAXBException {
  JaxbObject<SequencerRunList> jaxb=new JaxbObject<SequencerRunList>();
  SequencerRunList list=(SequencerRunList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new SequencerRunList());
  if (list != null)   return list.getList();
  return null;
}",0.9448818897637796
188945,"@Override public List<Sample> getChildSamplesFrom(int parentSampleAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + parentSampleAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<Sample> getChildSamplesFrom(int parentSampleAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + parentSampleAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.9743589743589745
188946,"private List<LibrarySource> findLibrarySources() throws IOException, JAXBException {
  JaxbObject<LibrarySourceList> jaxb=new JaxbObject<LibrarySourceList>();
  LibrarySourceList list=(LibrarySourceList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibrarySourceList());
  return list.getList();
}","private List<LibrarySource> findLibrarySources() throws IOException, JAXBException {
  JaxbObject<LibrarySourceList> jaxb=new JaxbObject<LibrarySourceList>();
  LibrarySourceList list=(LibrarySourceList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibrarySourceList());
  if (list != null)   return list.getList();
  return null;
}",0.946070878274268
188947,"@Override public List<Lane> getLanesFrom(int sequencerRunAccession){
  try {
    JaxbObject<LaneList> jaxb=new JaxbObject<LaneList>();
    LaneList list=(LaneList)ll.existsObject(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new LaneList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<Lane> getLanesFrom(int sequencerRunAccession){
  try {
    JaxbObject<LaneList> jaxb=new JaxbObject<LaneList>();
    LaneList list=(LaneList)ll.existsObject(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new LaneList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.973170731707317
188948,"@Override public List<Sample> getParentSamplesFrom(int childSampleAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + childSampleAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<Sample> getParentSamplesFrom(int childSampleAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + childSampleAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.9742990654205608
188949,"private List<Platform> findPlatforms() throws IOException, JAXBException {
  JaxbObject<PlatformList> jaxb=new JaxbObject<PlatformList>();
  PlatformList list=(PlatformList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new PlatformList());
  return list.getList();
}","private List<Platform> findPlatforms() throws IOException, JAXBException {
  JaxbObject<PlatformList> jaxb=new JaxbObject<PlatformList>();
  PlatformList list=(PlatformList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new PlatformList());
  if (list != null)   return list.getList();
  return null;
}",0.9395509499136442
188950,"private List<LibraryStrategy> findLibraryStrategies() throws IOException, JAXBException {
  JaxbObject<LibraryStrategyList> jaxb=new JaxbObject<LibraryStrategyList>();
  LibraryStrategyList list=(LibraryStrategyList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibraryStrategyList());
  return list.getList();
}","private List<LibraryStrategy> findLibraryStrategies() throws IOException, JAXBException {
  JaxbObject<LibraryStrategyList> jaxb=new JaxbObject<LibraryStrategyList>();
  LibraryStrategyList list=(LibraryStrategyList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new LibraryStrategyList());
  if (list != null)   return list.getList();
  return null;
}",0.9396170839469808
188951,"@Override public List<Sample> getSamplesFrom(int experimentAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + experimentAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public List<Sample> getSamplesFrom(int experimentAccession){
  try {
    JaxbObject<SampleList> jaxb=new JaxbObject<SampleList>();
    SampleList list=(SampleList)ll.existsObject(""String_Node_Str"" + experimentAccession + ""String_Node_Str"",""String_Node_Str"",jaxb,new SampleList());
    if (list != null)     return list.getList();
  }
 catch (  JAXBException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  return null;
}",0.9738095238095238
188952,"private List<Organism> findOrganisms() throws IOException, JAXBException {
  JaxbObject<OrganismList> jaxb=new JaxbObject<OrganismList>();
  OrganismList list=(OrganismList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new OrganismList());
  return list.getList();
}","private List<Organism> findOrganisms() throws IOException, JAXBException {
  JaxbObject<OrganismList> jaxb=new JaxbObject<OrganismList>();
  OrganismList list=(OrganismList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new OrganismList());
  if (list != null)   return list.getList();
  return null;
}",0.929188255613126
188953,"private List<Study> findStudies() throws IOException, JAXBException {
  JaxbObject<StudyList> jaxb=new JaxbObject<StudyList>();
  StudyList list=(StudyList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new StudyList());
  return list.getList();
}","private List<Study> findStudies() throws IOException, JAXBException {
  JaxbObject<StudyList> jaxb=new JaxbObject<StudyList>();
  StudyList list=(StudyList)findObject(""String_Node_Str"",""String_Node_Str"",jaxb,new StudyList());
  if (list != null)   return list.getList();
  return null;
}",0.935064935064935
188954,"/** 
 * {@inheritDoc}
 */
@Override public ReturnValue do_run(){
  if (options.has(""String_Node_Str"")) {
    for (    BatchMetadataParser.Field field : BatchMetadataParser.Field.values()) {
      Log.stdout(field.toString());
    }
  }
 else {
    if (options.has(""String_Node_Str"")) {
      parseFields();
    }
    if (options.has(""String_Node_Str"")) {
      parseFields();
      String filepath=(String)options.valueOf(""String_Node_Str"");
      ParseMiseqFile MiseqParser=new ParseMiseqFile(metadata,(Map<String,String>)fields.clone(),interactive);
      try {
        RunInfo run=MiseqParser.parseMiseqFile(filepath);
        inject(run);
      }
 catch (      Exception ex) {
        Log.error(""String_Node_Str"",ex);
      }
    }
 else {
      Log.stdout(""String_Node_Str"");
      Log.stdout(this.get_syntax());
      ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    }
  }
  return ret;
}","/** 
 * {@inheritDoc}
 */
@Override public ReturnValue do_run(){
  if (options.has(""String_Node_Str"")) {
    for (    BatchMetadataParser.Field field : BatchMetadataParser.Field.values()) {
      Log.stdout(field.toString());
    }
  }
 else {
    if (options.has(""String_Node_Str"")) {
      parseFields();
    }
    if (options.has(""String_Node_Str"")) {
      parseFields();
      String filepath=(String)options.valueOf(""String_Node_Str"");
      ParseMiseqFile MiseqParser=new ParseMiseqFile(metadata,(Map<String,String>)fields.clone(),interactive);
      try {
        RunInfo run=MiseqParser.parseMiseqFile(filepath);
        inject(run);
      }
 catch (      Exception ex) {
        Log.error(""String_Node_Str"",ex);
      }
    }
 else     if (options.has(""String_Node_Str"")) {
      try {
        parseFields();
        CreateFromScratch create=new CreateFromScratch(metadata,(Map<String,String>)fields.clone(),interactive);
        RunInfo run=create.getRunInfo();
        inject(run);
      }
 catch (      Exception ex) {
        Log.error(""String_Node_Str"",ex);
      }
    }
 else {
      Log.stdout(""String_Node_Str"");
      Log.stdout(this.get_syntax());
      ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    }
  }
  return ret;
}",0.8366682177757097
188955,"public BatchMetadataParser(Metadata metadata,Map<String,String> fields,boolean interactive){
  this.metadata=metadata;
  this.fields=fields;
  this.interactive=interactive;
}","public BatchMetadataParser(Metadata metadata,Map<String,String> fields,boolean interactive){
  this.metadata=metadata;
  this.fields=fields;
  this.defaults=new HashMap<String,String>(fields);
  this.interactive=interactive;
}",0.87
188956,"/** 
 * Generates a sample info object given the fields, and prompts for null fields if the interactive flag is on. The individualNumber and projectCode are required. Everything else can be null or less than 0.
 * @param prettyName
 * @param projectCode
 * @param individualNumber
 * @param librarySourceTemplateType
 * @param tissueOrigin
 * @param tissueType
 * @param libraryType
 * @param librarySizeCode
 * @param barcode
 * @param organismId
 * @param targetedResequencing
 * @param tissuePreparation
 * @return
 * @throws Exception
 */
protected SampleInfo generateSampleInfo(String prettyName,String projectCode,String individualNumber,String librarySourceTemplateType,String tissueOrigin,String tissueType,String libraryType,String librarySizeCode,String barcode,int organismId,String targetedResequencing,String tissuePreparation,String sampleDescription,String iusName,String iusDescription) throws Exception {
  if (individualNumber == null || individualNumber.isEmpty() || projectCode == null || projectCode.isEmpty()) {
    throw new Exception(""String_Node_Str"" + projectCode + ""String_Node_Str""+ individualNumber);
  }
  SampleInfo sa=new SampleInfo();
  sa.setIndividualNumber(individualNumber);
  sa.setProjectCode(projectCode);
  if (libraryType == null || libraryType.isEmpty()) {
    libraryType=prompt(prettyName,""String_Node_Str"",libraryTypeList,this.lity,Field.library_type);
    this.lity=libraryType;
  }
  sa.setLibraryType(libraryType);
  if (librarySourceTemplateType == null || librarySourceTemplateType.isEmpty()) {
    librarySourceTemplateType=prompt(prettyName,""String_Node_Str"",librarySourceTemplateTypeList,this.lstety,Field.library_source_template_type);
    this.lstety=librarySourceTemplateType;
  }
  sa.setLibrarySourceTemplateType(librarySourceTemplateType);
  if (targetedResequencing == null || targetedResequencing.isEmpty()) {
    targetedResequencing=prompt(prettyName,""String_Node_Str"",targetedResequencingList,this.tare,Field.targeted_resequencing);
    this.tare=targetedResequencing;
  }
  sa.setTargetedResequencing(targetedResequencing);
  if (tissueOrigin == null || tissueOrigin.isEmpty()) {
    tissueOrigin=prompt(prettyName,""String_Node_Str"",tissueOriginList,this.tior,Field.tissue_origin);
    if (tissueOrigin.isEmpty()) {
      tissueOrigin=""String_Node_Str"";
    }
 else {
      this.tior=tissueOrigin;
    }
  }
  sa.setTissueOrigin(tissueOrigin);
  if (tissuePreparation == null || tissuePreparation.isEmpty()) {
    tissuePreparation=prompt(prettyName,""String_Node_Str"",tissuePreparationList,this.tipr,Field.tissue_preparation);
    this.tipr=tissuePreparation;
  }
  sa.setTissuePreparation(tissuePreparation);
  if (tissueType == null || tissueType.isEmpty()) {
    tissueType=prompt(prettyName,""String_Node_Str"",tissueTypeList,this.tity,Field.tissue_type);
    if (tissueType.isEmpty()) {
      tissueType=""String_Node_Str"";
    }
 else {
      this.tity=tissueType;
    }
  }
  sa.setTissueType(tissueType);
  if (librarySizeCode == null || librarySizeCode.isEmpty() || !StringUtils.isNumeric(librarySizeCode)) {
    Integer lSize=prompt(""String_Node_Str"",this.lSize,Field.library_size_code);
    if (lSize <= 0) {
      librarySizeCode=""String_Node_Str"";
    }
 else {
      this.lSize=lSize;
      librarySizeCode=lSize.toString();
    }
  }
  sa.setLibrarySizeCode(librarySizeCode);
  if (barcode == null || barcode.isEmpty()) {
    barcode=prompt(""String_Node_Str"",""String_Node_Str"",Field.barcode);
  }
  sa.setBarcode(barcode);
  if (iusName == null) {
    if (interactive) {
      iusName=prompt(""String_Node_Str"",barcode,null);
    }
 else {
      iusName=barcode;
    }
  }
  sa.setIusName(iusName);
  if (iusDescription == null) {
    if (interactive) {
      iusDescription=prompt(""String_Node_Str"",barcode,null);
    }
 else {
      iusDescription=barcode;
    }
  }
  sa.setIusDescription(iusDescription);
  StringBuilder name=new StringBuilder();
  name.append(projectCode).append(""String_Node_Str"").append(individualNumber);
  name.append(""String_Node_Str"").append(tissueOrigin).append(""String_Node_Str"").append(tissueType).append(""String_Node_Str"").append(libraryType).append(""String_Node_Str"");
  name.append(librarySizeCode).append(""String_Node_Str"").append(librarySourceTemplateType);
  sa.setName(name.toString());
  if (sampleDescription == null) {
    if (interactive) {
      sampleDescription=prompt(""String_Node_Str"",name.toString(),null);
    }
 else {
      sampleDescription=name.toString();
    }
  }
  sa.setSampleDescription(sampleDescription);
  if (organismId <= 0) {
    List<Organism> organisms=new ArrayList<Organism>(metadata.getOrganisms());
    for (int i=0; i < organisms.size(); i++) {
      Log.stdout(i + ""String_Node_Str"" + organisms.get(i).toString());
    }
    organismId=prompt(""String_Node_Str"",31,Field.organism_id);
  }
  sa.setOrganismId(organismId);
  return sa;
}","/** 
 * Generates a sample info object given the fields, and prompts for null fields if the interactive flag is on. The individualNumber and projectCode are required. Everything else can be null or less than 0.
 * @param prettyName
 * @param projectCode
 * @param individualNumber
 * @param librarySourceTemplateType
 * @param tissueOrigin
 * @param tissueType
 * @param libraryType
 * @param librarySizeCode
 * @param barcode
 * @param organismId
 * @param targetedResequencing
 * @param tissuePreparation
 * @return
 * @throws Exception
 */
protected SampleInfo generateSampleInfo(String prettyName,String projectCode,String individualNumber,String librarySourceTemplateType,String tissueOrigin,String tissueType,String libraryType,String librarySizeCode,String barcode,int organismId,String targetedResequencing,String tissuePreparation,String sampleDescription,String iusName,String iusDescription) throws Exception {
  if (individualNumber == null || individualNumber.isEmpty() || projectCode == null || projectCode.isEmpty()) {
    throw new Exception(""String_Node_Str"" + projectCode + ""String_Node_Str""+ individualNumber);
  }
  SampleInfo sa=new SampleInfo();
  sa.setIndividualNumber(individualNumber);
  sa.setProjectCode(projectCode);
  if (libraryType == null || libraryType.isEmpty()) {
    libraryType=prompt(prettyName,""String_Node_Str"",libraryTypeList,this.lity,Field.library_type);
    this.lity=libraryType;
  }
  sa.setLibraryType(libraryType);
  if (librarySourceTemplateType == null || librarySourceTemplateType.isEmpty()) {
    librarySourceTemplateType=prompt(prettyName,""String_Node_Str"",librarySourceTemplateTypeList,this.lstety,Field.library_source_template_type);
    this.lstety=librarySourceTemplateType;
  }
  sa.setLibrarySourceTemplateType(librarySourceTemplateType);
  if (targetedResequencing == null || targetedResequencing.isEmpty()) {
    targetedResequencing=prompt(prettyName,""String_Node_Str"",targetedResequencingList,this.tare,Field.targeted_resequencing);
    this.tare=targetedResequencing;
  }
  sa.setTargetedResequencing(targetedResequencing);
  if (tissueOrigin == null || tissueOrigin.isEmpty()) {
    tissueOrigin=prompt(prettyName,""String_Node_Str"",tissueOriginList,this.tior,Field.tissue_origin);
    if (tissueOrigin == null || tissueOrigin.trim().isEmpty()) {
      tissueOrigin=""String_Node_Str"";
    }
 else {
      this.tior=tissueOrigin;
    }
  }
  sa.setTissueOrigin(tissueOrigin);
  if (tissuePreparation == null || tissuePreparation.isEmpty()) {
    tissuePreparation=prompt(prettyName,""String_Node_Str"",tissuePreparationList,this.tipr,Field.tissue_preparation);
    this.tipr=tissuePreparation;
  }
  sa.setTissuePreparation(tissuePreparation);
  if (tissueType == null || tissueType.isEmpty()) {
    tissueType=prompt(prettyName,""String_Node_Str"",tissueTypeList,this.tity,Field.tissue_type);
    if (tissueType == null || tissueType.trim().isEmpty()) {
      tissueType=""String_Node_Str"";
    }
 else {
      this.tity=tissueType;
    }
  }
  sa.setTissueType(tissueType);
  if (librarySizeCode == null || librarySizeCode.isEmpty() || !StringUtils.isNumeric(librarySizeCode)) {
    Integer lSize=prompt(""String_Node_Str"",this.lSize,Field.library_size_code);
    if (lSize <= 0) {
      librarySizeCode=""String_Node_Str"";
    }
 else {
      this.lSize=lSize;
      librarySizeCode=lSize.toString();
    }
  }
  sa.setLibrarySizeCode(librarySizeCode);
  if (barcode == null || barcode.isEmpty()) {
    barcode=prompt(""String_Node_Str"",""String_Node_Str"",Field.barcode);
  }
  sa.setBarcode(barcode);
  if (iusName == null) {
    if (interactive) {
      iusName=prompt(""String_Node_Str"",barcode,null);
    }
 else {
      iusName=barcode;
    }
  }
  sa.setIusName(iusName);
  if (iusDescription == null) {
    if (interactive) {
      iusDescription=prompt(""String_Node_Str"",barcode,null);
    }
 else {
      iusDescription=barcode;
    }
  }
  sa.setIusDescription(iusDescription);
  StringBuilder name=new StringBuilder();
  name.append(projectCode).append(""String_Node_Str"").append(individualNumber);
  name.append(""String_Node_Str"").append(tissueOrigin).append(""String_Node_Str"").append(tissueType).append(""String_Node_Str"").append(libraryType).append(""String_Node_Str"");
  name.append(librarySizeCode).append(""String_Node_Str"").append(librarySourceTemplateType);
  sa.setName(name.toString());
  if (sampleDescription == null) {
    if (interactive) {
      sampleDescription=prompt(""String_Node_Str"",name.toString(),null);
    }
 else {
      sampleDescription=name.toString();
    }
  }
  sa.setSampleDescription(sampleDescription);
  if (organismId <= 0) {
    List<Organism> organisms=new ArrayList<Organism>(metadata.getOrganisms());
    for (int i=0; i < organisms.size(); i++) {
      Log.stdout((i + 1) + ""String_Node_Str"" + organisms.get(i).getName());
    }
    organismId=prompt(""String_Node_Str"",31,Field.organism_id);
    if (organismId > 0 && organismId <= organisms.size()) {
      organismId=organisms.get(organismId).getOrganismId();
    }
  }
  sa.setOrganismId(organismId);
  return sa;
}",0.9460789235867056
188957,"protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=""String_Node_Str"";
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (deflt.equals(choices[i - 1])) {
      choiceInt=i;
    }
  }
  while (choice == null || choice.isEmpty()) {
    choiceInt=ConsoleAdapter.getInstance().promptInteger(title,choiceInt);
    if (choiceInt == 0) {
    }
 else     if (choiceInt == choices.length) {
      choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
    }
 else     if (choiceInt <= 0 || choiceInt > choices.length) {
      Log.stdout(""String_Node_Str"");
    }
 else {
      choice=choices[choiceInt - 1];
    }
  }
  return choice;
}","/** 
 * Handles prompting for a choice out of a list of choices using integers.
 * @param sampleName the sample name used for the prompting message
 * @param title the name of the field that is being set
 * @param choices the list of choices for the value of 'title'
 * @param deflt the default choice to fall back on, which can be one of thelist of 'choices'. This is the string value, not the integer.
 * @return
 */
protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=null;
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (deflt.equals(choices[i - 1])) {
      choiceInt=i;
    }
  }
  while (choice == null) {
    choiceInt=ConsoleAdapter.getInstance().promptInteger(title,choiceInt);
    if (choiceInt == 0) {
      break;
    }
 else     if (choiceInt == choices.length) {
      choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
    }
 else     if (choiceInt <= 0 || choiceInt > choices.length) {
      Log.stdout(""String_Node_Str"");
    }
 else {
      choice=choices[choiceInt - 1];
    }
  }
  return choice;
}",0.6676043131739334
188958,"protected String prompt(String sampleName,String title,String[] choices,String deflt,Field fieldName){
  Log.debug(""String_Node_Str"" + sampleName + ""String_Node_Str"");
  if (fieldName != null && fields.containsKey(fieldName.toString())) {
    return fields.get(fieldName.toString());
  }
 else   if (!interactive) {
    if (deflt != null && !deflt.trim().isEmpty()) {
      return deflt;
    }
 else {
      throw new OptionException(fields.keySet(),new Exception(""String_Node_Str"" + fieldName.toString())){
      }
;
    }
  }
 else {
    String s=choiceOf(sampleName,title,choices,deflt);
    if (fieldName != null) {
      fields.put(fieldName.toString(),s);
    }
    return s;
  }
}","/** 
 * Determine a value for a field 'title' of sample 'sampleName'. This method has different functionality depending on whether the Field is set (can be null), or the 'interactive' option is on.
 * @param sampleName the sample name used for prompting
 * @param title the name of the field being set
 * @param choices the list of choices (Strings) that the user can selectfrom in interactive mode
 * @param deflt the default string if everything else fails
 * @param fieldName the Field that is used for command-line defaults.
 * @return the choice for the field, or an OptionException if other methodsfail. This method can return null.
 */
protected String prompt(String sampleName,String title,String[] choices,String deflt,Field fieldName){
  Log.debug(""String_Node_Str"" + sampleName + ""String_Node_Str"");
  deflt=extractDefault(fieldName,deflt);
  if (!interactive) {
    return returnDefault(((deflt != null && !deflt.trim().isEmpty())),deflt,title,fieldName);
  }
 else {
    String s=choiceOf(sampleName,title,choices,deflt);
    if (fieldName != null) {
      defaults.put(fieldName.toString(),s);
    }
    return s;
  }
}",0.2417582417582417
188959,"@Test public void testLaunchingWithWait() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}","@Test public void testLaunchingWithWait() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ PARENT+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}",0.9823182711198428
188960,"public static void main(String[] args) throws IOException {
  PluginRunnerIT it=new PluginRunnerIT();
  List<Integer> list=new ArrayList<Integer>();
  for (  String acc : args) {
    try {
      Integer accInt=Integer.valueOf(acc);
      list.add(accInt);
    }
 catch (    NumberFormatException e) {
      Log.stdout(""String_Node_Str"");
    }
  }
  it.testLatestWorkflows(list);
}","public static void main(String[] args) throws IOException {
  PluginRunnerIT it=new PluginRunnerIT();
  List<Integer> list=new ArrayList<Integer>();
  for (  String acc : args) {
    try {
      Integer accInt=Integer.valueOf(acc);
      list.add(accInt);
    }
 catch (    NumberFormatException e) {
      Log.stdout(""String_Node_Str"");
    }
  }
  it.testLatestWorkflowsInternal(list);
}",0.9896103896103896
188961,"@Test public void testScheduleAndLaunch() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
    String extractValueFrom=ITUtility.extractValueFrom(listOutput,""String_Node_Str"");
    int wr_accession=Integer.valueOf(extractValueFrom);
    wr_accessions.put(e.getKey(),wr_accession);
    launchedWorkflowRuns.add(wr_accession);
    Log.info(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ wr_accession);
  }
  String schedCommand=""String_Node_Str"";
  String schedOutput=ITUtility.runSeqWareJar(schedCommand,ReturnValue.SUCCESS);
  Log.info(schedOutput);
  try {
    Log.info(""String_Node_Str"");
    Thread.sleep(5000);
  }
 catch (  InterruptedException ex) {
  }
  for (  Entry<String,Integer> e : wr_accessions.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String listCommand=""String_Node_Str"" + e.getValue();
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}","@Test public void testScheduleAndLaunch() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ PARENT+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
    String extractValueFrom=ITUtility.extractValueFrom(listOutput,""String_Node_Str"");
    int wr_accession=Integer.valueOf(extractValueFrom);
    wr_accessions.put(e.getKey(),wr_accession);
    launchedWorkflowRuns.add(wr_accession);
    Log.info(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ wr_accession);
  }
  String schedCommand=""String_Node_Str"";
  String schedOutput=ITUtility.runSeqWareJar(schedCommand,ReturnValue.SUCCESS);
  Log.info(schedOutput);
  try {
    Log.info(""String_Node_Str"");
    Thread.sleep(5000);
  }
 catch (  InterruptedException ex) {
  }
  for (  Entry<String,Integer> e : wr_accessions.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String listCommand=""String_Node_Str"" + e.getValue();
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}",0.9916123019571296
188962,"@Test public void testLaunchingWithoutWait() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}","@Test public void testLaunchingWithoutWait() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ PARENT+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}",0.9823874755381604
188963,"@Test public void testLatestWorkflows(List<Integer> accessions) throws IOException {
  String output=ITUtility.runSeqWareJar(""String_Node_Str"",ReturnValue.SUCCESS);
  Assert.assertTrue(""String_Node_Str"",output.contains(""String_Node_Str""));
  Map<String,WorkflowInfo> latestWorkflows=new HashMap<String,WorkflowInfo>();
  String[] lines=output.split(System.getProperty(""String_Node_Str""));
  for (  String line : lines) {
    String[] lineParts=line.split(""String_Node_Str"");
    try {
      int workflow_accession=Integer.valueOf(lineParts[3]);
      String workflowName=lineParts[0];
      String path=lineParts[4];
      if (path.equals(""String_Node_Str"")) {
        continue;
      }
      WorkflowInfo wi=new WorkflowInfo(workflow_accession,path,workflowName,lineParts[1]);
      File fileAtPath=new File(path);
      if (!fileAtPath.exists()) {
        Log.warn(""String_Node_Str"" + workflowName + ""String_Node_Str""+ workflow_accession+ ""String_Node_Str""+ path);
        continue;
      }
      if (!latestWorkflows.containsKey(workflowName)) {
        latestWorkflows.put(workflowName,wi);
      }
 else {
        int old=latestWorkflows.get(workflowName).sw_accession;
        if (workflow_accession > old) {
          latestWorkflows.put(workflowName,wi);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  ExecutorService threadPool=Executors.newFixedThreadPool(latestWorkflows.size());
  CompletionService<String> pool=new ExecutorCompletionService<String>(threadPool);
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession);
    if (accessions.size() > 0) {
      Integer acc=e.getValue().sw_accession;
      if (!accessions.contains(acc)) {
        System.out.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue().sw_accession+ ""String_Node_Str"");
        continue;
      }
    }
    StringBuilder params=new StringBuilder();
    params.append(""String_Node_Str"").append(e.getValue().path).append(""String_Node_Str"");
    params.append(""String_Node_Str"").append(e.getValue().version).append(""String_Node_Str"");
    params.append(""String_Node_Str"");
    File tempFile=File.createTempFile(e.getValue().name,""String_Node_Str"");
    pool.submit(new TestingThread(params.toString(),tempFile));
  }
  for (  Entry<String,WorkflowInfo> e : latestWorkflows.entrySet()) {
    try {
      pool.take().get();
    }
 catch (    InterruptedException ex) {
      Log.error(ex);
    }
catch (    ExecutionException ex) {
      Log.error(ex);
    }
  }
  threadPool.shutdown();
}","@Test public void testLatestWorkflows() throws IOException {
  testLatestWorkflowsInternal(new ArrayList<Integer>());
}",0.0737495436290617
188964,"@Test public void testLaunchingWithWaitAndNoMetadata() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}","@Test public void testLaunchingWithWaitAndNoMetadata() throws IOException {
  Map<String,File> iniParams=exportWorkflowInis();
  String localhost=ITUtility.getLocalhost();
  Log.info(""String_Node_Str"" + localhost);
  Map<String,Integer> wr_accessions=new HashMap<String,Integer>();
  for (  Entry<String,File> e : bundleLocations.entrySet()) {
    Log.info(""String_Node_Str"" + e.getKey());
    String workflowPath=iniParams.get(e.getKey()).getAbsolutePath();
    String accession=Integer.toString(installedWorkflows.get(e.getKey()));
    String listCommand=""String_Node_Str"" + workflowPath + ""String_Node_Str""+ accession+ ""String_Node_Str""+ PARENT+ ""String_Node_Str""+ localhost;
    String listOutput=ITUtility.runSeqWareJar(listCommand,ReturnValue.SUCCESS);
    Log.info(listOutput);
  }
}",0.9826142949130716
188965,"/** 
 * reads a map and tries to find the parent accessions, the result is de-duplicated.
 * @param map
 * @return
 */
private ArrayList<String> parseParentAccessions(Map<String,String> map){
  ArrayList<String> results=new ArrayList<String>();
  HashMap<String,String> resultsDeDup=new HashMap<String,String>();
  for (  String key : map.keySet()) {
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)) {
      resultsDeDup.put(map.get(key),""String_Node_Str"");
    }
  }
  for (  String accession : resultsDeDup.keySet()) {
    results.add(accession);
  }
  return (results);
}","/** 
 * reads a map and tries to find the parent accessions, the result is de-duplicated.
 * @param map
 * @return
 */
private ArrayList<String> parseParentAccessions(Map<String,String> map){
  ArrayList<String> results=new ArrayList<String>();
  HashMap<String,String> resultsDeDup=new HashMap<String,String>();
  for (  String key : map.keySet()) {
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)) {
      resultsDeDup.put(map.get(key),""String_Node_Str"");
    }
  }
  for (  String accession : resultsDeDup.keySet()) {
    results.add(accession);
  }
  if (results.contains(""String_Node_Str"") && results.size() > 1) {
    results.remove(""String_Node_Str"");
  }
  return (results);
}",0.8978102189781022
188966,"/** 
 * <p>get.</p>
 * @return a {@link net.sourceforge.seqware.common.metadata.MetadataDB} object.
 */
public static MetadataDB get(){
  try {
    if (db != null && ((db.getDb() != null && db.getDb().isClosed()))) {
      db.clean_up();
      db=null;
    }
  }
 catch (  SQLException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  if (db == null) {
    db=new MetadataDB();
    DataSource ds=null;
    try {
      InitialContext initCtx=new InitialContext();
      ds=(DataSource)initCtx.lookup(""String_Node_Str"");
    }
 catch (    NamingException ex) {
      Log.fatal(ex);
      ex.printStackTrace();
    }
    if (ds != null) {
      db.init(ds);
    }
 else {
      Map<String,String> settings=null;
      try {
        settings=ConfigTools.getSettings();
        String connection=""String_Node_Str"" + settings.get(""String_Node_Str"") + ""String_Node_Str""+ settings.get(""String_Node_Str"");
        String user=settings.get(""String_Node_Str"");
        String pass=settings.get(""String_Node_Str"");
        Log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ pass+ ""String_Node_Str""+ connection);
        db.init(connection,user,pass);
      }
 catch (      Exception ex) {
        Logger.getLogger(DBAccess.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
  return db;
}","/** 
 * <p>get.</p>
 * @return a {@link net.sourceforge.seqware.common.metadata.MetadataDB} object.
 */
public synchronized static MetadataDB get(){
  try {
    if (metadataDBWrapper.get() != null && ((metadataDBWrapper.get().getDb() != null && metadataDBWrapper.get().getDb().isClosed()))) {
      metadataDBWrapper.get().clean_up();
      metadataDBWrapper.set(null);
    }
  }
 catch (  SQLException ex) {
    Log.error(""String_Node_Str"",ex);
  }
  if (metadataDBWrapper.get() == null) {
    metadataDBWrapper.set(new MetadataDB());
    DataSource ds=null;
    try {
      InitialContext initCtx=new InitialContext();
      ds=(DataSource)initCtx.lookup(""String_Node_Str"");
    }
 catch (    NamingException ex) {
      Log.fatal(ex);
      ex.printStackTrace();
    }
    if (ds != null) {
      Log.debug(""String_Node_Str"");
      metadataDBWrapper.get().init(ds);
    }
 else {
      Log.debug(""String_Node_Str"");
      Map<String,String> settings=null;
      try {
        settings=ConfigTools.getSettings();
        String connection=""String_Node_Str"" + settings.get(""String_Node_Str"") + ""String_Node_Str""+ settings.get(""String_Node_Str"");
        String user=settings.get(""String_Node_Str"");
        String pass=settings.get(""String_Node_Str"");
        Log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ pass+ ""String_Node_Str""+ connection);
        metadataDBWrapper.get().init(connection,user,pass);
      }
 catch (      Exception ex) {
        Log.fatal(""String_Node_Str"",ex);
        Logger.getLogger(DBAccess.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
  Log.debug(metadataDBWrapper.get().toString() + ""String_Node_Str"");
  return metadataDBWrapper.get();
}",0.8282557750251088
188967,"/** 
 * <p>close.</p>
 */
public static void close(){
  if (db != null) {
    db.clean_up();
    db=null;
  }
}","/** 
 * <p>close.</p>
 */
public synchronized static void close(){
  if (metadataDBWrapper.get() != null) {
    Log.debug(metadataDBWrapper.get().toString() + ""String_Node_Str"");
    metadataDBWrapper.get().clean_up();
    metadataDBWrapper.set(null);
  }
}",0.5
188968,"/** 
 * <p>Setter for the field <code>sql</code>.</p>
 * @param sql a {@link java.sql.Statement} object.
 */
public void setSql(Statement sql){
  this.sql=sql;
}","/** 
 * <p>Setter for the field <code>sql</code>.</p>
 * @param sql a {@link java.sql.Statement} object.
 */
public void setSql(Statement sql){
  if (sql == null) {
    Log.fatal(""String_Node_Str"");
  }
  this.sql=sql;
}",0.8451443569553806
188969,"private ReturnValue init(){
  try {
    DatabaseMetaData foo2=this.getDb().getMetaData();
    this.setDbmd(foo2);
    this.setDbmd(this.getDb().getMetaData());
  }
 catch (  SQLException e) {
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.DBCOULDNOTINITIALIZE);
  }
  try {
    this.setSql(this.getDb().createStatement());
  }
 catch (  SQLException e) {
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.SQLQUERYFAILED);
  }
  try {
    return new ReturnValue(null,""String_Node_Str"" + dbmd.getDatabaseProductName() + ""String_Node_Str""+ dbmd.getDatabaseProductVersion()+ ""String_Node_Str"",ReturnValue.SUCCESS);
  }
 catch (  SQLException e) {
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.DBCOULDNOTINITIALIZE);
  }
}","private ReturnValue init(){
  try {
    DatabaseMetaData foo2=this.getDb().getMetaData();
    this.setDbmd(foo2);
    this.setDbmd(this.getDb().getMetaData());
  }
 catch (  SQLException e) {
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.DBCOULDNOTINITIALIZE);
  }
  Log.debug(""String_Node_Str"");
  try {
    this.setSql(this.getDb().createStatement());
  }
 catch (  SQLException e) {
    Log.debug(""String_Node_Str"",e);
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.SQLQUERYFAILED);
  }
  Log.debug(""String_Node_Str"" + this.toString());
  try {
    return new ReturnValue(null,""String_Node_Str"" + dbmd.getDatabaseProductName() + ""String_Node_Str""+ dbmd.getDatabaseProductVersion()+ ""String_Node_Str"",ReturnValue.SUCCESS);
  }
 catch (  SQLException e) {
    return new ReturnValue(null,""String_Node_Str"" + e.getMessage(),ReturnValue.DBCOULDNOTINITIALIZE);
  }
}",0.9321839080459772
188970,"/** 
 * <p>executeQuery.</p>
 * @param s a {@link java.lang.String} object.
 * @return a {@link java.sql.ResultSet} object.
 * @throws java.sql.SQLException if any.
 */
public ResultSet executeQuery(String s) throws SQLException {
  logger.debug(""String_Node_Str"" + s);
  return getSql().executeQuery(s);
}","/** 
 * <p>executeQuery.</p>
 * @param s a {@link java.lang.String} object.
 * @return a {@link java.sql.ResultSet} object.
 * @throws java.sql.SQLException if any.
 */
public ResultSet executeQuery(String s) throws SQLException {
  Statement sql1=getSql();
  logger.debug(""String_Node_Str"" + s + ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + (s == null ? ""String_Node_Str"" : ""String_Node_Str""));
  logger.debug(""String_Node_Str"" + (sql1 == null ? ""String_Node_Str"" : ""String_Node_Str""));
  return sql1.executeQuery(s);
}",0.7009569377990431
188971,"/** 
 * {@inheritDoc}
 */
@Override public ReturnValue clean_up(){
  ReturnValue ret=new ReturnValue();
  try {
    if (this.getSql() != null) {
      this.getSql().close();
    }
    if (this.getDb() != null) {
      this.getDb().close();
    }
  }
 catch (  SQLException e) {
    ret.setStderr(""String_Node_Str"" + e.getMessage());
    ret.setExitStatus(ReturnValue.DBCOULDNOTDISCONNECT);
  }
  return ret;
}","/** 
 * {@inheritDoc}
 */
@Override public ReturnValue clean_up(){
  Log.debug(""String_Node_Str"" + this.toString());
  ReturnValue ret=new ReturnValue();
  try {
    if (this.getSql() != null) {
      this.getSql().close();
    }
    if (this.getDb() != null) {
      this.getDb().close();
    }
  }
 catch (  SQLException e) {
    ret.setStderr(""String_Node_Str"" + e.getMessage());
    ret.setExitStatus(ReturnValue.DBCOULDNOTDISCONNECT);
  }
  return ret;
}",0.9423963133640552
188972,"private void addNewSamples(Processing p) throws SQLException, ResourceException {
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Sample obj : p.getSamples()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}","private void addNewSamples(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Sample obj : p.getSamples()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}",0.9683501683501684
188973,"private void addNewExperiments(Processing p) throws SQLException, ResourceException {
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Experiment obj : p.getExperiments()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}","private void addNewExperiments(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Experiment obj : p.getExperiments()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}",0.9688535453943008
188974,"private void addNewRelationships(Processing p) throws SQLException {
  Set<Processing> children=p.getChildren();
  Set<Processing> parents=p.getParents();
  Set<Integer> newParents=new HashSet<Integer>();
  for (  Processing pr : parents) {
    newParents.add(pr.getProcessingId());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int parent=rs.getInt(""String_Node_Str"");
    newParents.remove(parent);
  }
  Set<Integer> newChildren=new HashSet<Integer>();
  for (  Processing pr : children) {
    newChildren.add(pr.getProcessingId());
  }
  rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int child=rs.getInt(""String_Node_Str"");
    newParents.remove(child);
  }
  int[] parentArr=new int[newParents.size()];
  int i=0;
  for (Iterator<Integer> iterator=newParents.iterator(); iterator.hasNext(); i++) {
    parentArr[i]=iterator.next();
  }
  int[] childArr=new int[newChildren.size()];
  i=0;
  for (Iterator<Integer> iterator=newChildren.iterator(); iterator.hasNext(); i++) {
    childArr[i]=iterator.next();
  }
  ReturnValue ret=DBAccess.get().associate_processing_event_with_parents_and_child(p.getProcessingId(),parentArr,childArr);
  if (ret.getExitStatus() != ReturnValue.SUCCESS) {
    throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
  }
}","private void addNewRelationships(Processing p) throws SQLException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Processing> children=p.getChildren();
  Set<Processing> parents=p.getParents();
  Set<Integer> newParents=new HashSet<Integer>();
  for (  Processing pr : parents) {
    newParents.add(pr.getProcessingId());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int parent=rs.getInt(""String_Node_Str"");
    newParents.remove(parent);
  }
  Set<Integer> newChildren=new HashSet<Integer>();
  for (  Processing pr : children) {
    newChildren.add(pr.getProcessingId());
  }
  rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int child=rs.getInt(""String_Node_Str"");
    newParents.remove(child);
  }
  int[] parentArr=new int[newParents.size()];
  int i=0;
  for (Iterator<Integer> iterator=newParents.iterator(); iterator.hasNext(); i++) {
    parentArr[i]=iterator.next();
  }
  int[] childArr=new int[newChildren.size()];
  i=0;
  for (Iterator<Integer> iterator=newChildren.iterator(); iterator.hasNext(); i++) {
    childArr[i]=iterator.next();
  }
  ReturnValue ret=DBAccess.get().associate_processing_event_with_parents_and_child(p.getProcessingId(),parentArr,childArr);
  if (ret.getExitStatus() != ReturnValue.SUCCESS) {
    throw new ResourceException(Status.SERVER_ERROR_INTERNAL,""String_Node_Str"" + ret.getExitStatus());
  }
}",0.9845749917952084
188975,"private void addNewIUSes(Processing p) throws SQLException, ResourceException {
  Set<Integer> newIUSswa=new HashSet<Integer>();
  for (  IUS ius : p.getIUS()) {
    newIUSswa.add(ius.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newIUSswa.remove(swa);
  }
  for (  int swa : newIUSswa) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(swa,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ swa);
    }
  }
}","private void addNewIUSes(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newIUSswa=new HashSet<Integer>();
  for (  IUS ius : p.getIUS()) {
    newIUSswa.add(ius.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newIUSswa.remove(swa);
  }
  for (  int swa : newIUSswa) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(swa,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ swa);
    }
  }
}",0.9682217714672076
188976,"private void addNewFiles(Processing p) throws SQLException, ResourceException {
  Set<Integer> newFiles=new HashSet<Integer>();
  for (  File file : p.getFiles()) {
    newFiles.add(file.getFileId());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int fileID=rs.getInt(""String_Node_Str"");
    newFiles.remove(fileID);
  }
  for (  int fileID : newFiles) {
    DBAccess.get().linkProcessingAndFile(p.getProcessingId(),fileID);
  }
}","private void addNewFiles(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newFiles=new HashSet<Integer>();
  for (  File file : p.getFiles()) {
    newFiles.add(file.getFileId());
  }
  Log.debug(""String_Node_Str"" + newFiles.size() + ""String_Node_Str"");
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ p.getProcessingId();
  Log.debug(""String_Node_Str"" + query);
  ResultSet rs=DBAccess.get().executeQuery(query);
  while (rs.next()) {
    int fileID=rs.getInt(""String_Node_Str"");
    newFiles.remove(fileID);
  }
  for (  int fileID : newFiles) {
    Log.debug(""String_Node_Str"" + fileID + ""String_Node_Str""+ p.getSwAccession());
    DBAccess.get().linkProcessingAndFile(p.getProcessingId(),fileID);
  }
}",0.6875934230194319
188977,"private void addNewLanes(Processing p) throws SQLException, ResourceException {
  Set<Integer> newLane=new HashSet<Integer>();
  for (  Lane lane : p.getLanes()) {
    newLane.add(lane.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newLane.remove(swa);
  }
  for (  int laneID : newLane) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(laneID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ laneID);
    }
  }
}","private void addNewLanes(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newLane=new HashSet<Integer>();
  for (  Lane lane : p.getLanes()) {
    newLane.add(lane.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newLane.remove(swa);
  }
  for (  int laneID : newLane) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(laneID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ laneID);
    }
  }
}",0.9684775318578136
188978,"private void addNewStudies(Processing p) throws SQLException, ResourceException {
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Study obj : p.getStudies()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}","private void addNewStudies(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newObj=new HashSet<Integer>();
  for (  Study obj : p.getStudies()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}",0.9683074848280512
188979,"private void addNewSequencerRuns(Processing p) throws SQLException, ResourceException {
  Set<Integer> newObj=new HashSet<Integer>();
  for (  SequencerRun obj : p.getSequencerRuns()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}","private void addNewSequencerRuns(Processing p) throws SQLException, ResourceException {
  Log.debug(""String_Node_Str"" + p.toString());
  Set<Integer> newObj=new HashSet<Integer>();
  for (  SequencerRun obj : p.getSequencerRuns()) {
    newObj.add(obj.getSwAccession());
  }
  ResultSet rs=DBAccess.get().executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ p.getProcessingId());
  while (rs.next()) {
    int swa=rs.getInt(""String_Node_Str"");
    newObj.remove(swa);
  }
  for (  int objID : newObj) {
    boolean toReturn=DBAccess.get().linkAccessionAndParent(objID,p.getProcessingId());
    if (!toReturn) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,""String_Node_Str"" + toReturn + ""String_Node_Str""+ objID);
    }
  }
}",0.9690992767915844
188980,"/** 
 * <p>iniString2Map.</p>
 * @param iniString a {@link java.lang.String} object.
 * @return a {@link java.util.Map} object.
 */
public static Map<String,String> iniString2Map(String iniString){
  Map<String,String> result=new HashMap<String,String>();
  String[] lines=iniString.split(""String_Node_Str"");
  for (  String line : lines) {
    if (isLineMatchesKeyValue(line)) {
      String[] kv=line.split(""String_Node_Str"");
      if (kv.length == 2) {
        result.put(kv[0],kv[1]);
      }
 else {
        System.err.println(""String_Node_Str"" + line);
      }
    }
  }
  return (result);
}","/** 
 * <p>iniString2Map.</p>
 * @param iniString a {@link java.lang.String} object.
 * @return a {@link java.util.Map} object.
 */
public static Map<String,String> iniString2Map(String iniString){
  Map<String,String> result=new HashMap<String,String>();
  String[] lines=iniString.split(""String_Node_Str"");
  for (  String line : lines) {
    if (isLineMatchesKeyValue(line)) {
      String[] kv=line.split(""String_Node_Str"");
      if (kv.length == 2) {
        result.put(kv[0],kv[1]);
      }
 else       if (kv.length == 1) {
        result.put(kv[0],""String_Node_Str"");
      }
 else {
        System.err.println(""String_Node_Str"" + line);
      }
    }
  }
  return (result);
}",0.886983632112237
188981,"/** 
 * Separating out the launching of a new workflow. This way, we can eventually refactor this to the Workflow object.
 * @param options
 * @param config
 * @param params
 * @param metadata
 * @param workflowAccession
 * @return 
 */
public static ReturnValue launchNewWorkflow(OptionSet options,Map<String,String> config,String[] params,Metadata metadata,Integer workflowAccession,Integer workflowRunAccession){
  Log.info(""String_Node_Str"");
  ReturnValue ret=new ReturnValue();
  AbstractWorkflowDataModel dataModel;
  try {
    final WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
    dataModel=factory.getWorkflowDataModel(workflowAccession,workflowRunAccession);
  }
 catch (  Exception e) {
    Log.fatal(e,e);
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
    return ret;
  }
  Log.info(""String_Node_Str"");
  AbstractWorkflowEngine engine=WorkflowPlugin.getWorkflowEngine(dataModel);
  if (options.has(""String_Node_Str"")) {
    Log.stdout(""String_Node_Str"" + engine.getStatus((String)options.valueOf(""String_Node_Str"")));
    return new ReturnValue(ReturnValue.SUCCESS);
  }
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!dataModel.isMetadataWriteBack()) {
    return retPegasus;
  }
  Log.info(""String_Node_Str"");
  String wra=dataModel.getWorkflow_run_accession();
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=metadata.get_workflow_run_accession(workflowrunId);
  String statusCmd=engine.getStatus();
  List<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      for (      String t : tokens) {
        parentsLinkedToWR.add(t);
      }
    }
  }
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout(),engine.getClass().getSimpleName());
    return retPegasus;
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout(),engine.getClass().getSimpleName());
    return ret;
  }
}","/** 
 * Separating out the launching of a new workflow. This way, we can eventually refactor this to the Workflow object.
 * @param options
 * @param config
 * @param params
 * @param metadata
 * @param workflowAccession
 * @return 
 */
public static ReturnValue launchNewWorkflow(OptionSet options,Map<String,String> config,String[] params,Metadata metadata,Integer workflowAccession,Integer workflowRunAccession){
  Log.info(""String_Node_Str"");
  ReturnValue ret=new ReturnValue();
  AbstractWorkflowDataModel dataModel;
  try {
    final WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
    dataModel=factory.getWorkflowDataModel(workflowAccession,workflowRunAccession);
  }
 catch (  Exception e) {
    Log.fatal(e,e);
    ret.setExitStatus(ReturnValue.INVALIDARGUMENT);
    return ret;
  }
  Log.info(""String_Node_Str"");
  AbstractWorkflowEngine engine=WorkflowPlugin.getWorkflowEngine(dataModel);
  if (options.has(""String_Node_Str"")) {
    Log.stdout(""String_Node_Str"" + engine.getStatus((String)options.valueOf(""String_Node_Str"")));
    return new ReturnValue(ReturnValue.SUCCESS);
  }
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!dataModel.isMetadataWriteBack()) {
    return retPegasus;
  }
  Log.info(""String_Node_Str"");
  String wra=dataModel.getWorkflow_run_accession();
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunaccession=Integer.parseInt(wra);
  int workflowrunId=metadata.get_workflow_run_id(workflowrunaccession);
  String statusCmd=engine.getStatus();
  List<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      for (      String t : tokens) {
        parentsLinkedToWR.add(t);
      }
    }
  }
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout(),engine.getClass().getSimpleName());
    return retPegasus;
  }
 else {
    String status=dataModel.isWait() ? ""String_Node_Str"" : ""String_Node_Str"";
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),status,statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout(),engine.getClass().getSimpleName());
    return ret;
  }
}",0.9723358978556228
188982,"/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class.
 * @param workflowAccession if this is present, we grab metadata information from the database, not the options
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(Integer workflowAccession,Integer workflowRunAccession){
  String bundlePath=null;
  Map<String,String> metaInfo=null;
  Log.info(""String_Node_Str"");
  if (workflowAccession != null) {
    Log.info(""String_Node_Str"");
    metaInfo=this.metadata.get_workflow_info(workflowAccession);
    bundlePath=metaInfo.get(""String_Node_Str"");
  }
 else {
    Log.info(""String_Node_Str"");
    bundlePath=WorkflowV2Utility.determineRelativeBundlePath(options);
  }
  File bundle=new File(bundlePath);
  bundlePath=bundle.getAbsolutePath();
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  metaInfo=WorkflowV2Utility.parseMetaInfo(bundle);
  if (metaInfo == null) {
    Log.error(""String_Node_Str"");
    return null;
  }
  Log.info(""String_Node_Str"");
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty()) {
    workflow_java=false;
  }
  AbstractWorkflowDataModel dataModel=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String classpath=metaInfo.get(""String_Node_Str"");
    Log.stdout(""String_Node_Str"" + classpath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(classpath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        dataModel=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex,ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex,ex);
      }
catch (      SecurityException ex) {
        Log.error(ex,ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex,ex);
      }
    }
 else {
      Log.stdout(""String_Node_Str"" + classpath);
    }
  }
 else {
    dataModel=new XmlWorkflowDataModel();
  }
  Log.info(""String_Node_Str"");
  dataModel.setTags(metaInfo);
  dataModel.setName(metaInfo.get(""String_Node_Str""));
  dataModel.setVersion(metaInfo.get(""String_Node_Str""));
  dataModel.setBundle_version(metaInfo.get(""String_Node_Str""));
  dataModel.setSeqware_version(metaInfo.get(""String_Node_Str""));
  dataModel.setWorkflow_directory_name(metaInfo.get(""String_Node_Str""));
  dataModel.setWorkflowBundleDir(bundlePath);
  dataModel.setWorkflowBasedir(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Log.info(""String_Node_Str"");
  Map<String,String> configs=this.loadIniConfigs(workflowAccession,workflowRunAccession,bundlePath);
  this.mergeCmdOptions(dataModel);
  Date date=new Date();
  dataModel.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  dataModel.setRandom(""String_Node_Str"" + randInt);
  dataModel.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  dataModel.getEnv().setDaxDir(config.get(""String_Node_Str""));
  dataModel.getEnv().setSwCluster(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_URL(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_APP_ROOT(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_JOBTRACKER(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_NAMENODE(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_QUEUENAME(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_master(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_zookeeper_quorum(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_zookeeper_property_clientPort(config.get(""String_Node_Str""));
  dataModel.getEnv().setMapred_job_tracker(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_default_name(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_defaultFS(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_hdfs_impl(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_WORK_DIR(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_APP_PATH(config.get(""String_Node_Str""));
  if (options.has(""String_Node_Str"") == false && options.has((""String_Node_Str""))) {
    int workflowAccession_options=Integer.parseInt((String)options.valueOf(""String_Node_Str""));
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession_options);
    dataModel.setWorkflow_run_accession(String.valueOf(workflowrunaccession));
  }
 else   if (options.has(""String_Node_Str"") == false && workflowAccession != null) {
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
    dataModel.setWorkflow_run_accession(String.valueOf(workflowrunaccession));
  }
  dataModel.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
    }
 catch (    SecurityException e) {
      Log.error(e);
    }
catch (    NoSuchMethodException e) {
      Log.error(e);
    }
catch (    IllegalArgumentException e) {
      Log.error(e);
    }
catch (    IllegalAccessException e) {
      Log.error(e);
    }
catch (    InvocationTargetException e) {
      Log.error(e);
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(dataModel,metaInfo.get(""String_Node_Str""));
  }
  dataModel.setWait(this.options.has(""String_Node_Str""));
  Log.info(""String_Node_Str"");
  return dataModel;
}","/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class.
 * @param workflowAccession if this is present, we grab metadata information from the database, not the options
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(Integer workflowAccession,Integer workflowRunAccession){
  String bundlePath=null;
  Map<String,String> metaInfo=null;
  Log.info(""String_Node_Str"");
  if (workflowAccession != null) {
    Log.info(""String_Node_Str"");
    metaInfo=this.metadata.get_workflow_info(workflowAccession);
    bundlePath=metaInfo.get(""String_Node_Str"");
  }
 else {
    Log.info(""String_Node_Str"");
    bundlePath=WorkflowV2Utility.determineRelativeBundlePath(options);
  }
  File bundle=new File(bundlePath);
  bundlePath=bundle.getAbsolutePath();
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  metaInfo=WorkflowV2Utility.parseMetaInfo(bundle);
  if (metaInfo == null) {
    Log.error(""String_Node_Str"");
    return null;
  }
  Log.info(""String_Node_Str"");
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty()) {
    workflow_java=false;
  }
  AbstractWorkflowDataModel dataModel=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String classpath=metaInfo.get(""String_Node_Str"");
    Log.stdout(""String_Node_Str"" + classpath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(classpath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        dataModel=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex,ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex,ex);
      }
catch (      SecurityException ex) {
        Log.error(ex,ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex,ex);
      }
    }
 else {
      Log.stdout(""String_Node_Str"" + classpath);
    }
  }
 else {
    dataModel=new XmlWorkflowDataModel();
  }
  Log.info(""String_Node_Str"");
  dataModel.setTags(metaInfo);
  dataModel.setName(metaInfo.get(""String_Node_Str""));
  dataModel.setVersion(metaInfo.get(""String_Node_Str""));
  dataModel.setBundle_version(metaInfo.get(""String_Node_Str""));
  dataModel.setSeqware_version(metaInfo.get(""String_Node_Str""));
  dataModel.setWorkflow_directory_name(metaInfo.get(""String_Node_Str""));
  dataModel.setWorkflowBundleDir(bundlePath);
  dataModel.setWorkflowBasedir(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  dataModel.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Log.info(""String_Node_Str"");
  Map<String,String> configs=this.loadIniConfigs(workflowAccession,workflowRunAccession,bundlePath);
  this.mergeCmdOptions(dataModel);
  Date date=new Date();
  dataModel.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  dataModel.setRandom(""String_Node_Str"" + randInt);
  dataModel.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  dataModel.getEnv().setDaxDir(config.get(""String_Node_Str""));
  dataModel.getEnv().setSwCluster(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_URL(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_APP_ROOT(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_JOBTRACKER(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_NAMENODE(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_QUEUENAME(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_master(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_zookeeper_quorum(config.get(""String_Node_Str""));
  dataModel.getEnv().setHbase_zookeeper_property_clientPort(config.get(""String_Node_Str""));
  dataModel.getEnv().setMapred_job_tracker(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_default_name(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_defaultFS(config.get(""String_Node_Str""));
  dataModel.getEnv().setFs_hdfs_impl(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_WORK_DIR(config.get(""String_Node_Str""));
  dataModel.getEnv().setOOZIE_APP_PATH(config.get(""String_Node_Str""));
  if (options.has(""String_Node_Str"") == false) {
    if (workflowAccession != null && workflowRunAccession == null) {
      int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
      dataModel.setWorkflow_accession(Integer.toString(workflowAccession));
      dataModel.setWorkflow_run_accession(String.valueOf(workflowrunaccession));
    }
 else     if (workflowAccession != null && workflowRunAccession != null) {
      dataModel.setWorkflow_accession(Integer.toString(workflowAccession));
      dataModel.setWorkflow_run_accession(String.valueOf(workflowRunAccession));
    }
 else {
      assert(false);
      Log.error(""String_Node_Str"");
      throw new UnsupportedOperationException();
    }
  }
  dataModel.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(dataModel);
    }
 catch (    SecurityException e) {
      Log.error(e);
    }
catch (    NoSuchMethodException e) {
      Log.error(e);
    }
catch (    IllegalArgumentException e) {
      Log.error(e);
    }
catch (    IllegalAccessException e) {
      Log.error(e);
    }
catch (    InvocationTargetException e) {
      Log.error(e);
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(dataModel,metaInfo.get(""String_Node_Str""));
  }
  dataModel.setWait(this.options.has(""String_Node_Str""));
  Log.info(""String_Node_Str"");
  return dataModel;
}",0.9124797406807132
188983,"private int retrieveStudy(RunInfo run){
  Log.stdout(""String_Node_Str"");
  List<Study> studies=metadata.getAllStudies();
  Integer studyAccession=null;
  String studyName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getStudyTitle());
  for (  Study st : studies) {
    if (st.getTitle().equals(studyName)) {
      studyAccession=st.getSwAccession();
    }
  }
  if (studyAccession == null) {
    Log.stdout(""String_Node_Str"");
    fields.clear();
    fields.put(""String_Node_Str"",studyName);
    fields.put(""String_Node_Str"",run.getStudyDescription());
    fields.put(""String_Node_Str"",run.getStudyCenterName());
    fields.put(""String_Node_Str"",run.getStudyCenterProject());
    fields.put(""String_Node_Str"",run.getStudyType());
    interactive=true;
    ReturnValue rv=addStudy();
    studyAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  }
  if (!run.getStudyAttributes().isEmpty()) {
    metadata.annotateStudy(studyAccession,run.getStudyAttributes());
  }
  names.put(studyAccession,studyName);
  return studyAccession;
}","private int retrieveStudy(RunInfo run){
  Log.stdout(""String_Node_Str"");
  List<Study> studies=metadata.getAllStudies();
  Integer studyAccession=null;
  for (  Study st : studies) {
    if (st.getTitle().equals(run.getStudyTitle())) {
      Log.stdout(""String_Node_Str"" + st.getTitle() + ""String_Node_Str""+ st.getSwAccession());
      studyAccession=st.getSwAccession();
    }
  }
  if (studyAccession == null) {
    fields.clear();
    fields.put(""String_Node_Str"",run.getStudyTitle());
    fields.put(""String_Node_Str"",run.getStudyDescription());
    fields.put(""String_Node_Str"",run.getStudyCenterName());
    fields.put(""String_Node_Str"",run.getStudyCenterProject());
    fields.put(""String_Node_Str"",run.getStudyType());
    interactive=true;
    ReturnValue rv=addStudy();
    studyAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  }
  if (!run.getStudyAttributes().isEmpty()) {
    metadata.annotateStudy(studyAccession,run.getStudyAttributes());
  }
  names.put(studyAccession,run.getStudyTitle());
  return studyAccession;
}",0.7831439393939394
188984,"/** 
 * {@inheritDoc}
 */
@Override public ReturnValue init(){
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
  }
  if (options.has(""String_Node_Str"") && options.has(""String_Node_Str"")) {
    ret=(listFields((String)options.valueOf(""String_Node_Str"")));
    return ret;
  }
  whatWeDid.append(""String_Node_Str"");
  return ret;
}","/** 
 * {@inheritDoc}
 */
@Override public ReturnValue init(){
  whatWeDid.append(""String_Node_Str"");
  return ret;
}",0.4957627118644068
188985,"private int createIUS(SampleInfo barcode,int laneAccession,int sampleAccession){
  Log.stdout(""String_Node_Str"");
  fields.clear();
  fields.put(""String_Node_Str"",String.valueOf(laneAccession));
  fields.put(""String_Node_Str"",String.valueOf(sampleAccession));
  fields.put(""String_Node_Str"",barcode.getIusName());
  fields.put(""String_Node_Str"",barcode.getIusDescription());
  fields.put(""String_Node_Str"",String.valueOf(barcode.getIusSkip()));
  fields.put(""String_Node_Str"",barcode.getBarcode());
  interactive=true;
  ReturnValue rv=addIUS();
  Integer swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  if (!barcode.getIusAttributes().isEmpty()) {
    metadata.annotateIUS(swAccession,barcode.getIusAttributes());
  }
  names.put(swAccession,barcode.getBarcode());
  recordEdge(""String_Node_Str"",laneAccession,""String_Node_Str"",swAccession);
  recordEdge(""String_Node_Str"",sampleAccession,""String_Node_Str"",swAccession);
  return swAccession;
}","private int createIUS(SampleInfo barcode,int laneAccession,int sampleAccession){
  fields.clear();
  fields.put(""String_Node_Str"",String.valueOf(laneAccession));
  fields.put(""String_Node_Str"",String.valueOf(sampleAccession));
  fields.put(""String_Node_Str"",barcode.getIusName());
  fields.put(""String_Node_Str"",barcode.getIusDescription());
  fields.put(""String_Node_Str"",String.valueOf(barcode.getIusSkip()));
  fields.put(""String_Node_Str"",barcode.getBarcode());
  interactive=true;
  ReturnValue rv=addIUS();
  Integer swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  if (!barcode.getIusAttributes().isEmpty()) {
    metadata.annotateIUS(swAccession,barcode.getIusAttributes());
  }
  names.put(swAccession,barcode.getBarcode());
  recordEdge(""String_Node_Str"",laneAccession,""String_Node_Str"",swAccession);
  recordEdge(""String_Node_Str"",sampleAccession,""String_Node_Str"",swAccession);
  return swAccession;
}",0.9826041117554032
188986,"private int createRun(RunInfo run) throws Exception {
  Integer swAccession=null;
  Log.stdout(""String_Node_Str"");
  String runName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getRunName());
  List<SequencerRun> runs=metadata.getAllSequencerRuns();
  if (runs != null) {
    for (    SequencerRun sr : runs) {
      if (runName.equals(sr.getName())) {
        Log.stdout(""String_Node_Str"" + sr.getName() + ""String_Node_Str""+ sr.getSwAccession());
        swAccession=sr.getSwAccession();
      }
    }
  }
  if (swAccession == null) {
    Log.stdout(""String_Node_Str"");
    fields.clear();
    fields.put(""String_Node_Str"",run.getPlatformId());
    fields.put(""String_Node_Str"",String.valueOf(run.getRunSkip()));
    fields.put(""String_Node_Str"",String.valueOf(run.isPairedEnd()));
    fields.put(""String_Node_Str"",runName);
    fields.put(""String_Node_Str"",run.getRunDescription());
    interactive=true;
    ReturnValue rv=addSequencerRun();
    swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  }
  if (!run.getRunAttributes().isEmpty()) {
    metadata.annotateSequencerRun(swAccession,run.getRunAttributes());
  }
  names.put(swAccession,runName);
  return swAccession;
}","private int createRun(RunInfo run) throws Exception {
  Integer swAccession=null;
  Log.stdout(""String_Node_Str"");
  List<SequencerRun> runs=metadata.getAllSequencerRuns();
  if (runs != null) {
    for (    SequencerRun sr : runs) {
      if (run.getRunName().equals(sr.getName())) {
        Log.stdout(""String_Node_Str"" + sr.getName() + ""String_Node_Str""+ sr.getSwAccession());
        swAccession=sr.getSwAccession();
        break;
      }
    }
  }
  if (swAccession == null) {
    fields.clear();
    fields.put(""String_Node_Str"",run.getPlatformId());
    fields.put(""String_Node_Str"",String.valueOf(run.getRunSkip()));
    fields.put(""String_Node_Str"",String.valueOf(run.isPairedEnd()));
    fields.put(""String_Node_Str"",run.getRunName());
    fields.put(""String_Node_Str"",run.getRunDescription());
    interactive=true;
    ReturnValue rv=addSequencerRun();
    swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  }
  if (!run.getRunAttributes().isEmpty()) {
    metadata.annotateSequencerRun(swAccession,run.getRunAttributes());
  }
  names.put(swAccession,run.getRunName());
  return swAccession;
}",0.9259734702610184
188987,"private int createLane(LaneInfo lane,int sequencerRunAccession){
  Log.stdout(""String_Node_Str"");
  fields.clear();
  fields.put(""String_Node_Str"",lane.getLaneSkip().toString());
  fields.put(""String_Node_Str"",lane.getLaneNumber());
  fields.put(""String_Node_Str"",lane.getLaneName());
  fields.put(""String_Node_Str"",lane.getLaneDescription());
  fields.put(""String_Node_Str"",String.valueOf(sequencerRunAccession));
  fields.put(""String_Node_Str"",lane.getLibraryStrategyAcc());
  fields.put(""String_Node_Str"",lane.getLibrarySelectionAcc());
  fields.put(""String_Node_Str"",lane.getLibrarySourceAcc());
  fields.put(""String_Node_Str"",lane.getLaneCycleDescriptor());
  fields.put(""String_Node_Str"",lane.getStudyTypeAcc());
  interactive=true;
  ReturnValue rv=addLane();
  Integer swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  if (!lane.getLaneAttributes().isEmpty()) {
    metadata.annotateLane(swAccession,lane.getLaneAttributes());
  }
  names.put(swAccession,lane.getLaneName());
  recordEdge(""String_Node_Str"",sequencerRunAccession,""String_Node_Str"",swAccession);
  return swAccession;
}","private int createLane(LaneInfo lane,int sequencerRunAccession){
  fields.clear();
  fields.put(""String_Node_Str"",lane.getLaneSkip().toString());
  fields.put(""String_Node_Str"",lane.getLaneNumber());
  fields.put(""String_Node_Str"",lane.getLaneName());
  fields.put(""String_Node_Str"",lane.getLaneDescription());
  fields.put(""String_Node_Str"",String.valueOf(sequencerRunAccession));
  fields.put(""String_Node_Str"",lane.getLibraryStrategyAcc());
  fields.put(""String_Node_Str"",lane.getLibrarySelectionAcc());
  fields.put(""String_Node_Str"",lane.getLibrarySourceAcc());
  fields.put(""String_Node_Str"",lane.getLaneCycleDescriptor());
  fields.put(""String_Node_Str"",lane.getStudyTypeAcc());
  interactive=true;
  ReturnValue rv=addLane();
  Integer swAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
  if (!lane.getLaneAttributes().isEmpty()) {
    metadata.annotateLane(swAccession,lane.getLaneAttributes());
  }
  names.put(swAccession,lane.getLaneName());
  recordEdge(""String_Node_Str"",sequencerRunAccession,""String_Node_Str"",swAccession);
  return swAccession;
}",0.9849108367626886
188988,"private int retrieveExperiment(RunInfo run,int studyAccession) throws Exception {
  Log.stdout(""String_Node_Str"");
  List<Experiment> experiments=metadata.getExperimentsFrom(studyAccession);
  Integer experimentAccession=null;
  if (experiments != null && !experiments.isEmpty()) {
    Log.stdout(""String_Node_Str"");
    for (    Experiment e : experiments) {
      Log.stdout(""String_Node_Str"" + e.getTitle());
    }
  }
  String experimentName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getExperimentName());
  if (experiments != null) {
    for (    Experiment ex : experiments) {
      if (ex.getTitle().equals(experimentName)) {
        experimentAccession=ex.getSwAccession();
      }
    }
  }
  if (experimentAccession == null) {
    if (experiments == null || experiments.isEmpty()) {
      Log.stdout(""String_Node_Str"");
      fields.clear();
      fields.put(""String_Node_Str"",String.valueOf(studyAccession));
      fields.put(""String_Node_Str"",run.getPlatformId());
      fields.put(""String_Node_Str"",run.getExperimentName());
      fields.put(""String_Node_Str"",run.getExperimentDescription());
      interactive=true;
      ReturnValue rv=addExperiment();
      experimentAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
    }
 else {
      Log.stdout(""String_Node_Str"");
      Log.stdout(""String_Node_Str"" + studyAccession + ""String_Node_Str"");
      Log.stdout(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
  }
  if (!run.getExperimentAttributes().isEmpty()) {
    metadata.annotateExperiment(experimentAccession,run.getExperimentAttributes());
  }
  names.put(experimentAccession,experimentName);
  recordEdge(""String_Node_Str"",studyAccession,""String_Node_Str"",experimentAccession);
  return experimentAccession;
}","private int retrieveExperiment(RunInfo run,int studyAccession) throws Exception {
  Log.stdout(""String_Node_Str"");
  List<Experiment> experiments=metadata.getExperimentsFrom(studyAccession);
  Integer experimentAccession=null;
  if (experiments != null && !experiments.isEmpty()) {
    Log.stdout(""String_Node_Str"");
    for (    Experiment e : experiments) {
      Log.stdout(""String_Node_Str"" + e.getTitle());
    }
  }
  if (experiments != null) {
    for (    Experiment ex : experiments) {
      if (ex.getTitle().equals(run.getExperimentName())) {
        Log.stdout(""String_Node_Str"" + ex.getName() + ""String_Node_Str""+ ex.getSwAccession());
        experimentAccession=ex.getSwAccession();
      }
    }
  }
  if (experimentAccession == null) {
    if (experiments == null || experiments.isEmpty()) {
      Log.stdout(""String_Node_Str"");
      fields.clear();
      fields.put(""String_Node_Str"",String.valueOf(studyAccession));
      fields.put(""String_Node_Str"",run.getPlatformId());
      fields.put(""String_Node_Str"",run.getExperimentName());
      fields.put(""String_Node_Str"",run.getExperimentDescription());
      interactive=true;
      ReturnValue rv=addExperiment();
      experimentAccession=Integer.parseInt(rv.getAttribute(""String_Node_Str""));
    }
 else {
      Log.stdout(""String_Node_Str"");
      Log.stdout(""String_Node_Str"" + studyAccession + ""String_Node_Str"");
      Log.stdout(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
  }
  if (!run.getExperimentAttributes().isEmpty()) {
    metadata.annotateExperiment(experimentAccession,run.getExperimentAttributes());
  }
  names.put(experimentAccession,run.getExperimentName());
  recordEdge(""String_Node_Str"",studyAccession,""String_Node_Str"",experimentAccession);
  return experimentAccession;
}",0.9110677446333983
188989,"/** 
 * {@inheritDoc}
 */
@Override public ReturnValue do_run(){
  if (options.has(""String_Node_Str"")) {
    String filepath=(String)options.valueOf(""String_Node_Str"");
    ParseMisecFile parser=new ParseMisecFile(metadata);
    try {
      RunInfo run=parser.parseMiSecFile(filepath);
      inject(run);
    }
 catch (    Exception ex) {
      Log.error(""String_Node_Str"",ex);
    }
  }
 else {
    Log.stdout(""String_Node_Str"");
    Log.stdout(this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return ret;
}","/** 
 * {@inheritDoc}
 */
@Override public ReturnValue do_run(){
  if (options.has(""String_Node_Str"")) {
  }
 else   if (options.has(""String_Node_Str"")) {
    String filepath=(String)options.valueOf(""String_Node_Str"");
    ParseMisecFile misecParser=new ParseMisecFile(metadata);
    try {
      RunInfo run=misecParser.parseMiSecFile(filepath);
      inject(run);
    }
 catch (    Exception ex) {
      Log.error(""String_Node_Str"",ex);
    }
  }
 else {
    Log.stdout(""String_Node_Str"");
    Log.stdout(this.get_syntax());
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return ret;
}",0.9437609841827768
188990,"private int createSample(String name,String description,int experimentAccession,int parentSampleAccession,String organismId,boolean interactive){
  Log.stdout(""String_Node_Str"");
  fields.clear();
  fields.put(""String_Node_Str"",String.valueOf(experimentAccession));
  fields.put(""String_Node_Str"",String.valueOf(parentSampleAccession));
  fields.put(""String_Node_Str"",organismId);
  fields.put(""String_Node_Str"",name);
  fields.put(""String_Node_Str"",description);
  this.interactive=interactive;
  ReturnValue rv=addSample();
  return Integer.parseInt(rv.getAttribute(""String_Node_Str""));
}","private int createSample(String name,String description,int experimentAccession,int parentSampleAccession,String organismId,boolean interactive){
  fields.clear();
  fields.put(""String_Node_Str"",String.valueOf(experimentAccession));
  fields.put(""String_Node_Str"",String.valueOf(parentSampleAccession));
  fields.put(""String_Node_Str"",organismId);
  fields.put(""String_Node_Str"",name);
  fields.put(""String_Node_Str"",description);
  this.interactive=interactive;
  ReturnValue rv=addSample();
  return Integer.parseInt(rv.getAttribute(""String_Node_Str""));
}",0.4969485614646905
188991,"/** 
 * <p>Constructor for AttributeAnnotator.</p>
 */
public BatchMetadataInjection(){
  super();
  parser.accepts(""String_Node_Str"",""String_Node_Str"").withRequiredArg();
  ret.setExitStatus(ReturnValue.SUCCESS);
  names=new HashMap<Integer,String>();
}","/** 
 * <p>Constructor for AttributeAnnotator.</p>
 */
public BatchMetadataInjection(){
  super();
  parser=new OptionParser();
  parser.accepts(""String_Node_Str"",""String_Node_Str"").withRequiredArg();
  ret.setExitStatus(ReturnValue.SUCCESS);
  names=new HashMap<Integer,String>();
}",0.9459962756052142
188992,"private ReturnValue inject(RunInfo run) throws Exception {
  int sequencerRunAccession=createRun(run);
  Set<LaneInfo> lanes=run.getLanes();
  List<Lane> existingLanes=metadata.getLanesFrom(sequencerRunAccession);
  if (existingLanes != null && !existingLanes.isEmpty()) {
    Boolean yorn=promptBoolean(""String_Node_Str"" + existingLanes.size() + ""String_Node_Str"",Boolean.TRUE);
    if (yorn.equals(Boolean.FALSE)) {
      throw new Exception(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"");
    }
  }
  int studyAccession=retrieveStudy(run);
  int experimentAccession=retrieveExperiment(run,studyAccession);
  List<Sample> parentSamples=metadata.getSamplesFrom(experimentAccession);
  Log.debug(""String_Node_Str"" + studyAccession + ""String_Node_Str""+ experimentAccession+ ""String_Node_Str""+ sequencerRunAccession);
  for (  LaneInfo lane : lanes) {
    int laneAccession=createLane(lane,sequencerRunAccession);
    for (    SampleInfo barcode : lane.getSamples()) {
      Integer parentSampleAcc=retrieveParentSampleAccession(parentSamples,barcode,experimentAccession);
      Log.debug(""String_Node_Str"" + laneAccession + ""String_Node_Str""+ parentSampleAcc);
      int tissueTypeSampleAcc=retrieveTissueTypeSampleAccession(parentSampleAcc,barcode);
      Log.debug(""String_Node_Str"" + tissueTypeSampleAcc);
      int librarySampleNameAcc=createLibrarySample(barcode,tissueTypeSampleAcc);
      int barcodeAcc=createIUS(barcode,laneAccession,librarySampleNameAcc);
    }
  }
  return ret;
}","private ReturnValue inject(RunInfo run) throws Exception {
  int sequencerRunAccession=createRun(run);
  Set<LaneInfo> lanes=run.getLanes();
  List<Lane> existingLanes=metadata.getLanesFrom(sequencerRunAccession);
  if (existingLanes != null && !existingLanes.isEmpty()) {
    Boolean yorn=ConsoleAdapter.getInstance().promptBoolean(""String_Node_Str"" + existingLanes.size() + ""String_Node_Str"",Boolean.TRUE);
    if (yorn.equals(Boolean.FALSE)) {
      throw new Exception(""String_Node_Str"" + sequencerRunAccession + ""String_Node_Str"");
    }
  }
  int studyAccession=retrieveStudy(run);
  int experimentAccession=retrieveExperiment(run,studyAccession);
  List<Sample> parentSamples=metadata.getSamplesFrom(experimentAccession);
  Log.debug(""String_Node_Str"" + studyAccession + ""String_Node_Str""+ experimentAccession+ ""String_Node_Str""+ sequencerRunAccession);
  for (  LaneInfo lane : lanes) {
    int laneAccession=createLane(lane,sequencerRunAccession);
    for (    SampleInfo barcode : lane.getSamples()) {
      Integer parentSampleAcc=retrieveParentSampleAccession(parentSamples,barcode,experimentAccession);
      Log.debug(""String_Node_Str"" + laneAccession + ""String_Node_Str""+ parentSampleAcc);
      int tissueTypeSampleAcc=retrieveTissueTypeSampleAccession(parentSampleAcc,barcode);
      Log.debug(""String_Node_Str"" + tissueTypeSampleAcc);
      int librarySampleNameAcc=createLibrarySample(barcode,tissueTypeSampleAcc);
      int barcodeAcc=createIUS(barcode,laneAccession,librarySampleNameAcc);
    }
  }
  return ret;
}",0.9904636632686616
188993,"protected SampleInfo generateSampleInfo(String prettyName,String projectCode,String individualNumber,String librarySourceTemplateType,String tissueOrigin,String tissueType,String libraryType,String librarySizeCode,String barcode,Integer organismId,String targetedResequencing,String tissuePreparation) throws Exception {
  if (individualNumber == null || individualNumber.isEmpty() || projectCode == null || projectCode.isEmpty()) {
    throw new Exception(""String_Node_Str"" + projectCode + ""String_Node_Str""+ individualNumber);
  }
  SampleInfo sa=new SampleInfo();
  sa.setIndividualNumber(individualNumber);
  sa.setProjectCode(projectCode);
  if (libraryType == null || libraryType.isEmpty()) {
    libraryType=choiceOf(prettyName,""String_Node_Str"",libraryTypeList,this.lity);
    this.lity=libraryType;
  }
  if (librarySourceTemplateType == null || librarySourceTemplateType.isEmpty()) {
    librarySourceTemplateType=choiceOf(prettyName,""String_Node_Str"",librarySourceTemplateTypeList,this.lstety);
    this.lstety=librarySourceTemplateType;
  }
  if (targetedResequencing == null || targetedResequencing.isEmpty()) {
    targetedResequencing=choiceOf(prettyName,""String_Node_Str"",targetedResequencingList,this.tare);
    this.tare=targetedResequencing;
  }
  if (tissueOrigin == null || tissueOrigin.isEmpty()) {
    tissueOrigin=choiceOf(prettyName,""String_Node_Str"",tissueOriginList,this.tior);
    if (tissueOrigin.isEmpty()) {
      tissueOrigin=""String_Node_Str"";
    }
 else {
      this.tior=tissueOrigin;
    }
  }
  if (tissueType == null || tissuePreparation.isEmpty()) {
    tissuePreparation=choiceOf(prettyName,""String_Node_Str"",tissuePreparationList,this.tipr);
    this.tipr=tissuePreparation;
  }
  if (tissueType == null || tissueType.isEmpty()) {
    tissueType=choiceOf(prettyName,""String_Node_Str"",tissueTypeList,this.tity);
    if (tissueType.isEmpty()) {
      tissueType=""String_Node_Str"";
    }
 else {
      this.tity=tissueType;
    }
  }
  if (librarySizeCode == null || librarySizeCode.isEmpty() || !StringUtils.isNumeric(librarySizeCode)) {
    Integer lSize=ConsoleAdapter.getInstance().promptInteger(""String_Node_Str"",this.lSize);
    if (lSize <= 0) {
      librarySizeCode=""String_Node_Str"";
    }
 else {
      this.lSize=lSize;
      librarySizeCode=lSize.toString();
    }
  }
  StringBuilder name=new StringBuilder();
  name.append(projectCode).append(""String_Node_Str"").append(individualNumber);
  name.append(""String_Node_Str"").append(tissueOrigin).append(""String_Node_Str"").append(tissueType).append(""String_Node_Str"").append(libraryType).append(""String_Node_Str"");
  name.append(librarySizeCode).append(""String_Node_Str"").append(librarySourceTemplateType);
  sa.setName(name.toString());
  sa.setTissueOrigin(tissueOrigin);
  sa.setTissuePreparation(tissuePreparation);
  sa.setTissueType(tissueType);
  if (barcode == null || barcode.isEmpty()) {
    barcode=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",""String_Node_Str"");
  }
  sa.setBarcode(barcode);
  if (organismId == null || organismId <= 0) {
    List<Organism> organisms=new ArrayList<Organism>(metadata.getOrganisms());
    for (int i=0; i < organisms.size(); i++) {
      Log.stdout(i + ""String_Node_Str"" + organisms.get(i).toString());
    }
    organismId=ConsoleAdapter.getInstance().promptInteger(""String_Node_Str"",31);
  }
  sa.setOrganismId(organismId);
  return sa;
}","protected SampleInfo generateSampleInfo(String prettyName,String projectCode,String individualNumber,String librarySourceTemplateType,String tissueOrigin,String tissueType,String libraryType,String librarySizeCode,String barcode,Integer organismId,String targetedResequencing,String tissuePreparation) throws Exception {
  if (individualNumber == null || individualNumber.isEmpty() || projectCode == null || projectCode.isEmpty()) {
    throw new Exception(""String_Node_Str"" + projectCode + ""String_Node_Str""+ individualNumber);
  }
  SampleInfo sa=new SampleInfo();
  sa.setIndividualNumber(individualNumber);
  sa.setProjectCode(projectCode);
  if (libraryType == null || libraryType.isEmpty()) {
    libraryType=choiceOf(prettyName,""String_Node_Str"",libraryTypeList,this.lity);
    this.lity=libraryType;
  }
  if (librarySourceTemplateType == null || librarySourceTemplateType.isEmpty()) {
    librarySourceTemplateType=choiceOf(prettyName,""String_Node_Str"",librarySourceTemplateTypeList,this.lstety);
    this.lstety=librarySourceTemplateType;
  }
  if (targetedResequencing == null || targetedResequencing.isEmpty()) {
    targetedResequencing=choiceOf(prettyName,""String_Node_Str"",targetedResequencingList,this.tare);
    this.tare=targetedResequencing;
  }
  if (tissueOrigin == null || tissueOrigin.isEmpty()) {
    tissueOrigin=choiceOf(prettyName,""String_Node_Str"",tissueOriginList,this.tior);
    if (tissueOrigin.isEmpty()) {
      tissueOrigin=""String_Node_Str"";
    }
 else {
      this.tior=tissueOrigin;
    }
  }
  if (tissuePreparation == null || tissuePreparation.isEmpty()) {
    tissuePreparation=choiceOf(prettyName,""String_Node_Str"",tissuePreparationList,this.tipr);
    this.tipr=tissuePreparation;
  }
  if (tissueType == null || tissueType.isEmpty()) {
    tissueType=choiceOf(prettyName,""String_Node_Str"",tissueTypeList,this.tity);
    if (tissueType.isEmpty()) {
      tissueType=""String_Node_Str"";
    }
 else {
      this.tity=tissueType;
    }
  }
  if (librarySizeCode == null || librarySizeCode.isEmpty() || !StringUtils.isNumeric(librarySizeCode)) {
    Integer lSize=ConsoleAdapter.getInstance().promptInteger(""String_Node_Str"",this.lSize);
    if (lSize <= 0) {
      librarySizeCode=""String_Node_Str"";
    }
 else {
      this.lSize=lSize;
      librarySizeCode=lSize.toString();
    }
  }
  StringBuilder name=new StringBuilder();
  name.append(projectCode).append(""String_Node_Str"").append(individualNumber);
  name.append(""String_Node_Str"").append(tissueOrigin).append(""String_Node_Str"").append(tissueType).append(""String_Node_Str"").append(libraryType).append(""String_Node_Str"");
  name.append(librarySizeCode).append(""String_Node_Str"").append(librarySourceTemplateType);
  sa.setName(name.toString());
  sa.setTissueOrigin(tissueOrigin);
  sa.setTissuePreparation(tissuePreparation);
  sa.setTissueType(tissueType);
  if (barcode == null || barcode.isEmpty()) {
    barcode=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",""String_Node_Str"");
  }
  sa.setBarcode(barcode);
  if (organismId == null || organismId <= 0) {
    List<Organism> organisms=new ArrayList<Organism>(metadata.getOrganisms());
    for (int i=0; i < organisms.size(); i++) {
      Log.stdout(i + ""String_Node_Str"" + organisms.get(i).toString());
    }
    organismId=ConsoleAdapter.getInstance().promptInteger(""String_Node_Str"",31);
  }
  sa.setOrganismId(organismId);
  return sa;
}",0.99779638607316
188994,"protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=""String_Node_Str"";
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (deflt.equals(choices[i - 1])) {
      choiceInt=i;
    }
  }
  choiceInt=ConsoleAdapter.getInstance().promptInteger(title,choiceInt);
  if (choiceInt == 0) {
  }
 else   if (choiceInt == choices.length) {
    choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
  }
 else   if (choiceInt <= 0 || choiceInt > choices.length) {
    Log.stdout(""String_Node_Str"");
    choice=choiceOf(sampleName,title,choices,deflt);
  }
 else {
    choice=choices[choiceInt - 1];
  }
  return choice;
}","protected String choiceOf(String sampleName,String title,String[] choices,String deflt){
  String choice=""String_Node_Str"";
  int choiceInt=0;
  Log.stdout(""String_Node_Str"" + sampleName + ""String_Node_Str""+ title+ ""String_Node_Str"");
  for (int i=1; i <= choices.length; i++) {
    Log.stdout(i + ""String_Node_Str"" + choices[i - 1]);
    if (deflt.equals(choices[i - 1])) {
      choiceInt=i;
    }
  }
  while (choice == null || choice.isEmpty()) {
    choiceInt=ConsoleAdapter.getInstance().promptInteger(title,choiceInt);
    if (choiceInt == 0) {
    }
 else     if (choiceInt == choices.length) {
      choice=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",null);
    }
 else     if (choiceInt <= 0 || choiceInt > choices.length) {
      Log.stdout(""String_Node_Str"");
    }
 else {
      choice=choices[choiceInt - 1];
    }
  }
  return choice;
}",0.6417736289381564
188995,"public RunInfo parseMiSecFile(String filepath) throws Exception {
  RunInfo run=null;
  File file=new File(filepath);
  try {
    BufferedReader freader=new BufferedReader(new FileReader(file));
    run=parseMiSecHeader(freader,filepath);
    Set<LaneInfo> lanes=parseMiSecData(freader);
    freader.close();
    run.setLanes(lanes);
  }
 catch (  FileNotFoundException e) {
    Log.error(filepath,e);
    ret.setExitStatus(ReturnValue.FILENOTREADABLE);
  }
catch (  IOException ex) {
    Log.error(filepath,ex);
    ret.setExitStatus(ReturnValue.FILENOTREADABLE);
  }
  return run;
}","public RunInfo parseMiSecFile(String filepath) throws Exception {
  RunInfo run=null;
  File file=new File(filepath);
  try {
    BufferedReader freader=new BufferedReader(new FileReader(file));
    run=parseMiSecHeader(freader,filepath);
    String runName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getRunName());
    String studyName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getStudyTitle());
    String expName=ConsoleAdapter.getInstance().promptString(""String_Node_Str"",run.getExperimentName());
    run.setRunName(runName);
    run.setStudyTitle(studyName);
    run.setExperimentName(expName);
    Set<LaneInfo> lanes=parseMiSecData(freader);
    freader.close();
    run.setLanes(lanes);
  }
 catch (  FileNotFoundException e) {
    Log.error(filepath,e);
    ret.setExitStatus(ReturnValue.FILENOTREADABLE);
  }
catch (  IOException ex) {
    Log.error(filepath,ex);
    ret.setExitStatus(ReturnValue.FILENOTREADABLE);
  }
  return run;
}",0.7425301970756516
188996,"public Set<LaneInfo> parseMiSecData(BufferedReader freader) throws IOException, Exception {
  Set<SampleInfo> samples=new HashSet<SampleInfo>();
  LaneInfo laneInfo=generateLaneInfo(""String_Node_Str"",4);
  laneInfo.setSamples(samples);
  String[] headerStrings=freader.readLine().split(""String_Node_Str"");
  List<String> header=Arrays.asList(headerStrings);
  String line;
  while ((line=freader.readLine()) != null) {
    String[] args=line.split(""String_Node_Str"");
    String[] sampleInfo=args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"");
    String prettyName=args[header.indexOf(""String_Node_Str"")];
    String projectName=sampleInfo[0];
    String individualNumber=sampleInfo[1];
    String librarySourceTemplateType=null;
    String tissueOrigin=null;
    String tissueType=null;
    String libraryType=null;
    String librarySizeCode=null;
    String targetedResequencing=null;
    String tissuePreparation=null;
    Integer organismId=findOrganismId(args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"")[0].replace('_',' '));
    String barcode=args[header.indexOf(""String_Node_Str"")];
    if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
      tissuePreparation=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else {
      Log.stdout(""String_Node_Str"" + prettyName);
    }
    SampleInfo info=generateSampleInfo(prettyName,projectName,individualNumber,librarySourceTemplateType,tissueOrigin,tissueType,libraryType,librarySizeCode,barcode,organismId,targetedResequencing,tissuePreparation);
    String tissueRegion=sampleInfo[2].substring(0,1);
    if (StringUtils.isNumeric(tissueRegion)) {
      info.addSampleAttribute(""String_Node_Str"",tissueRegion);
    }
    samples.add(info);
  }
  Set<LaneInfo> lanes=new HashSet<LaneInfo>();
  lanes.add(laneInfo);
  return lanes;
}","public Set<LaneInfo> parseMiSecData(BufferedReader freader) throws IOException, Exception {
  Set<SampleInfo> samples=new HashSet<SampleInfo>();
  LaneInfo laneInfo=generateLaneInfo(""String_Node_Str"",4);
  laneInfo.setSamples(samples);
  String[] headerStrings=freader.readLine().split(""String_Node_Str"");
  List<String> header=Arrays.asList(headerStrings);
  String line;
  while ((line=freader.readLine()) != null) {
    String[] args=line.split(""String_Node_Str"");
    String[] sampleInfo=args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"");
    String prettyName=args[header.indexOf(""String_Node_Str"")];
    String projectName=sampleInfo[0];
    String individualNumber=sampleInfo[1];
    String librarySourceTemplateType=null;
    String tissueOrigin=null;
    String tissueType=null;
    String libraryType=null;
    String librarySizeCode=null;
    String targetedResequencing=null;
    String tissuePreparation=null;
    Integer organismId=findOrganismId(args[header.indexOf(""String_Node_Str"")].split(""String_Node_Str"")[0].replace('_',' '));
    String barcode=args[header.indexOf(""String_Node_Str"")];
    if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
      tissuePreparation=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else     if (sampleInfo[2].contains(""String_Node_Str"")) {
      tissueType=""String_Node_Str"";
    }
 else {
      Log.stdout(""String_Node_Str"" + prettyName);
    }
    SampleInfo info=generateSampleInfo(prettyName,projectName,individualNumber,librarySourceTemplateType,tissueOrigin,tissueType,libraryType,librarySizeCode,barcode,organismId,targetedResequencing,tissuePreparation);
    info.setSampleDescription(info.getName());
    info.setIusName(info.getBarcode());
    info.setIusDescription(info.getBarcode());
    String tissueRegion=sampleInfo[2].substring(0,1);
    if (StringUtils.isNumeric(tissueRegion)) {
      info.addSampleAttribute(""String_Node_Str"",tissueRegion);
    }
    samples.add(info);
  }
  Set<LaneInfo> lanes=new HashSet<LaneInfo>();
  lanes.add(laneInfo);
  return lanes;
}",0.968019093078759
188997,"protected String promptString(String string,String deflt){
  String title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    title=ConsoleAdapter.getInstance().readLine(prompt);
    if (title.trim().isEmpty()) {
      title=deflt;
    }
  }
  fields.put(string,title);
  return title;
}","protected String promptString(String string,String deflt){
  String title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    System.out.println();
    title=ConsoleAdapter.getInstance().readLine(prompt);
    if (title.trim().isEmpty()) {
      title=deflt;
    }
  }
  fields.put(string,title);
  return title;
}",0.9696969696969696
188998,"protected void promptForExperiment(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    Platform p : metadata.getPlatforms()) {
      Log.stdout(p.toString());
    }
    promptInteger(""String_Node_Str"",20);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForExperiment(necessaryFields);
  }
}","protected void promptForExperiment(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    Platform p : metadata.getPlatforms()) {
      Log.stdout(p.toString());
    }
    promptInteger(""String_Node_Str"",20);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForExperiment(necessaryFields);
  }
}",0.9688995215311004
188999,"protected Boolean promptBoolean(String string,Boolean deflt){
  Boolean title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    String line=ConsoleAdapter.getInstance().readLine(prompt);
    if (line.trim().isEmpty()) {
      title=deflt;
    }
 else {
      try {
        title=Boolean.parseBoolean(line);
      }
 catch (      NumberFormatException e) {
        Log.stdout(string + ""String_Node_Str"");
      }
    }
  }
  fields.put(string,title.toString());
  return title;
}","protected Boolean promptBoolean(String string,Boolean deflt){
  Boolean title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    System.out.println();
    String line=ConsoleAdapter.getInstance().readLine(prompt);
    if (line.trim().isEmpty()) {
      title=deflt;
    }
 else {
      try {
        title=Boolean.parseBoolean(line);
      }
 catch (      NumberFormatException e) {
        Log.stdout(string + ""String_Node_Str"");
      }
    }
  }
  fields.put(string,title.toString());
  return title;
}",0.9790996784565916
189000,"private boolean notNullOrLessThanZero(String fieldName){
  boolean usable=true;
  String field=fields.get(fieldName);
  Log.stdout(field);
  if (field == null) {
    usable=false;
  }
 else   if (Integer.parseInt(field) <= 0) {
    usable=false;
  }
  return usable;
}","private boolean notNullOrLessThanZero(String fieldName){
  boolean usable=true;
  String field=fields.get(fieldName);
  if (field == null) {
    usable=false;
  }
 else   if (Integer.parseInt(field) <= 0) {
    usable=false;
  }
  return usable;
}",0.9592233009708738
