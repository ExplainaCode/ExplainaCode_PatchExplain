record_number,buggy_code,fixed_code,code_similarity
20001,"/** 
 * Read in the unigrams in the given DataInputStream.
 * @param stream the DataInputStream to read from
 * @param numberUnigrams the number of unigrams to read
 * @param bigEndian true if the DataInputStream is big-endian,false otherwise
 * @return an array of UnigramProbability index by the unigram ID
 */
private UnigramProbability[] readUnigrams(DataInputStream stream,int numberUnigrams,boolean bigEndian) throws IOException {
  UnigramProbability[] unigrams=new UnigramProbability[numberUnigrams];
  for (int i=0; i < numberUnigrams; i++) {
    int unigramID=readInt(stream,bigEndian);
    if (i != (numberUnigrams - 1)) {
      assert(unigramID == i);
    }
    float unigramProbability=readFloat(stream,bigEndian);
    float unigramBackoff=readFloat(stream,bigEndian);
    int firstBigramEntry=readInt(stream,bigEndian);
    float logProbability=logMath.log10ToLog(unigramProbability);
    float logBackoff=logMath.log10ToLog(unigramBackoff);
    unigrams[i]=new UnigramProbability(logProbability,logBackoff,firstBigramEntry);
    if (false) {
      System.out.println(""String_Node_Str"" + unigramID + ""String_Node_Str""+ unigramProbability+ ""String_Node_Str""+ unigramBackoff+ ""String_Node_Str""+ firstBigramEntry);
    }
  }
  return unigrams;
}","/** 
 * Read in the unigrams in the given DataInputStream.
 * @param stream the DataInputStream to read from
 * @param numberUnigrams the number of unigrams to read
 * @param bigEndian true if the DataInputStream is big-endian,false otherwise
 * @return an array of UnigramProbability index by the unigram ID
 */
private UnigramProbability[] readUnigrams(DataInputStream stream,int numberUnigrams,boolean bigEndian) throws IOException {
  UnigramProbability[] unigrams=new UnigramProbability[numberUnigrams];
  for (int i=0; i < numberUnigrams; i++) {
    int unigramID=readInt(stream,bigEndian);
    if (i != (numberUnigrams - 1)) {
      assert(unigramID == i);
    }
    float unigramProbability=readFloat(stream,bigEndian);
    float unigramBackoff=readFloat(stream,bigEndian);
    int firstBigramEntry=readInt(stream,bigEndian);
    float logProbability=logMath.log10ToLog(unigramProbability);
    float logBackoff=logMath.log10ToLog(unigramBackoff);
    unigrams[i]=new UnigramProbability(logProbability,logBackoff,firstBigramEntry);
  }
  return unigrams;
}",0.9025862068965518
20002,"/** 
 * Reads a string of the given length from the given DataInputStream. It is assumed that the DataInputStream contains 8-bit chars.
 * @param stream the DataInputStream to read from
 * @param length the number of characters in the returned string
 * @return a string of the given length from the given DataInputStream
 */
private String readString(DataInputStream stream,int length) throws IOException {
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < length; i++) {
    buffer.append((char)stream.readByte());
    bytesRead++;
  }
  return buffer.toString();
}","/** 
 * Reads a string of the given length from the given DataInputStream. It is assumed that the DataInputStream contains 8-bit chars.
 * @param stream the DataInputStream to read from
 * @param length the number of characters in the returned string
 * @return a string of the given length from the given DataInputStream
 */
private final String readString(DataInputStream stream,int length) throws IOException {
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < length; i++) {
    buffer.append((char)readByte(stream));
  }
  return buffer.toString();
}",0.9232111692844676
20003,"/** 
 * Loads the bigram followers of the given first word in a bigram from disk to memory.
 * @param firstWordID ID of the first word
 * @return the bigram followers of the given word
 */
private BigramFollowers loadBigramFollowers(int firstWordID){
  BigramFollowers followers=null;
  if ((followers=isBigramLoaded(firstWordID)) == null) {
    long position=(long)(bigramOffset + unigrams[firstWordID].firstBigramEntry);
    int numberFollowers=unigrams[firstWordID + 1].firstBigramEntry - unigrams[firstWordID].firstBigramEntry;
    long size=(long)(numberFollowers + 1) * 8;
    try {
      MappedByteBuffer buffer=fileChannel.map(FileChannel.MapMode.READ_ONLY,position,size);
      followers=new BigramFollowers(buffer,numberFollowers);
      followers.load();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
      throw new Error(""String_Node_Str"");
    }
    loadedBigramFollowers.put(new Integer(firstWordID),followers);
  }
  return followers;
}","/** 
 * Loads the bigram followers of the given first word in a bigram from disk to memory.
 * @param firstWordID ID of the first word
 * @return the bigram followers of the given word
 */
private BigramFollowers loadBigramFollowers(int firstWordID){
  BigramFollowers followers=null;
  if ((followers=isBigramLoaded(firstWordID)) == null) {
    long position=(long)(bigramOffset + unigrams[firstWordID].getFirstBigramEntry());
    int numberFollowers=unigrams[firstWordID + 1].getFirstBigramEntry() - unigrams[firstWordID].getFirstBigramEntry();
    long size=(long)(numberFollowers + 1) * 8;
    try {
      MappedByteBuffer buffer=fileChannel.map(FileChannel.MapMode.READ_ONLY,position,size);
      followers=new BigramFollowers(buffer,numberFollowers);
      followers.load();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
      throw new Error(""String_Node_Str"");
    }
    loadedBigramFollowers.put(new Integer(firstWordID),followers);
  }
  return followers;
}",0.9892802450229708
20004,"/** 
 * Returns the unigram probability of the given unigram.
 * @param wordSequence the unigram word sequence
 * @return the unigram probability
 */
private float getUnigramProbability(WordSequence wordSequence){
  String unigram=wordSequence.getWord(0);
  UnigramProbability probability=(UnigramProbability)unigramIDMap.get(unigram);
  if (probability == null) {
    throw new Error(""String_Node_Str"" + unigram);
  }
 else {
    return probability.logProbability;
  }
}","/** 
 * Returns the unigram probability of the given unigram.
 * @param wordSequence the unigram word sequence
 * @return the unigram probability
 */
private float getUnigramProbability(WordSequence wordSequence){
  String unigram=wordSequence.getWord(0);
  UnigramProbability probability=(UnigramProbability)unigramIDMap.get(unigram);
  if (probability == null) {
    throw new Error(""String_Node_Str"" + unigram);
  }
 else {
    return probability.getLogProbability();
  }
}",0.9926082365364308
20005,"/** 
 * Apply the unigram weight to the set of unigrams
 */
private void applyUnigramWeight(){
  float unigramWeight=props.getFloat(LanguageModel.PROP_UNIGRAM_WEIGHT,LanguageModel.PROP_UNIGRAM_WEIGHT_DEFAULT);
  float logUnigramWeight=logMath.linearToLog(unigramWeight);
  float logNotUnigramWeight=logMath.linearToLog(1.0f - unigrams.length);
  float logUniform=logMath.linearToLog(1.0f / (unigrams.length - 1));
  float p2=logUniform + logNotUnigramWeight;
  for (int i=0; i < unigrams.length; i++) {
    if (!words[i].equals(Dictionary.SENTENCE_START_SPELLING)) {
      float p1=unigrams[i].logProbability + logUnigramWeight;
      unigrams[i].logProbability=logMath.addAsLinear(p1,p2);
    }
  }
}","/** 
 * Apply the unigram weight to the set of unigrams
 */
private void applyUnigramWeight(){
  float unigramWeight=props.getFloat(LanguageModel.PROP_UNIGRAM_WEIGHT,LanguageModel.PROP_UNIGRAM_WEIGHT_DEFAULT);
  float logUnigramWeight=logMath.linearToLog(unigramWeight);
  float logNotUnigramWeight=logMath.linearToLog(1.0f - unigrams.length);
  float logUniform=logMath.linearToLog(1.0f / (unigrams.length - 1));
  float p2=logUniform + logNotUnigramWeight;
  for (int i=0; i < unigrams.length; i++) {
    if (!words[i].equals(Dictionary.SENTENCE_START_SPELLING)) {
      float p1=unigrams[i].getLogProbability() + logUnigramWeight;
      unigrams[i].setLogProbability(logMath.addAsLinear(p1,p2));
    }
  }
}",0.9893692416725728
20006,"/** 
 * Returns the unigram probability of the given unigram.
 * @param wordSequence the unigram word sequence
 * @return the unigram probability
 */
private float getBigramProbability(WordSequence wordSequence){
  String firstWord=wordSequence.getWord(0);
  if (numberBigrams == 0 || firstWord == null) {
    return getUnigramProbability(wordSequence.getNewest());
  }
  if (!hasUnigram(wordSequence.getWord(1))) {
    throw new Error(""String_Node_Str"" + wordSequence.getWord(1));
  }
  int firstWordID=getWordID(firstWord);
  int numberBigramFollowers=unigrams[firstWordID + 1].firstBigramEntry - unigrams[firstWordID].firstBigramEntry;
  int secondWordID=getWordID(wordSequence.getWord(1));
  BigramProbability bigram=null;
  if (numberBigramFollowers > 0) {
    BigramFollowers bigramFollowers=loadBigramFollowers(firstWordID);
    bigram=bigramFollowers.findBigram(secondWordID);
  }
  if (bigram != null) {
    return bigramProbTable[bigram.getProbabilityID()];
  }
 else {
    return (unigrams[firstWordID].logBackoff + unigrams[secondWordID].logProbability);
  }
}","/** 
 * Returns the unigram probability of the given unigram.
 * @param wordSequence the unigram word sequence
 * @return the unigram probability
 */
private float getBigramProbability(WordSequence wordSequence){
  String firstWord=wordSequence.getWord(0);
  if (numberBigrams == 0 || firstWord == null) {
    return getUnigramProbability(wordSequence.getNewest());
  }
  if (!hasUnigram(wordSequence.getWord(1))) {
    throw new Error(""String_Node_Str"" + wordSequence.getWord(1));
  }
  int firstWordID=getWordID(firstWord);
  int numberBigramFollowers=unigrams[firstWordID + 1].getFirstBigramEntry() - unigrams[firstWordID].getFirstBigramEntry();
  int secondWordID=getWordID(wordSequence.getWord(1));
  BigramProbability bigram=null;
  if (numberBigramFollowers > 0) {
    BigramFollowers bigramFollowers=loadBigramFollowers(firstWordID);
    bigram=bigramFollowers.findBigram(secondWordID);
  }
  if (bigram != null) {
    return bigramProbTable[bigram.getProbabilityID()];
  }
 else {
    return (unigrams[firstWordID].getLogBackoff() + unigrams[secondWordID].getLogProbability());
  }
}",0.9870609981515712
20007,"/** 
 * Returns the backoff probability for the give sequence of words
 * @param the sequence of words
 * @return the backoff probability in LogMath log base
 */
public float getBackoff(WordSequence wordSequence){
  float logBackoff=0.0f;
  UnigramProbability prob=null;
  if (prob != null) {
    logBackoff=prob.logBackoff;
  }
  return logBackoff;
}","/** 
 * Returns the backoff probability for the give sequence of words
 * @param the sequence of words
 * @return the backoff probability in LogMath log base
 */
public float getBackoff(WordSequence wordSequence){
  float logBackoff=0.0f;
  UnigramProbability prob=null;
  if (prob != null) {
    logBackoff=prob.getLogBackoff();
  }
  return logBackoff;
}",0.9646393210749646
20008,"/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there was a Feature available to scorefalse if there was no more Feature available to score
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    Feature feature;
    if (!hasFeatures(ff)) {
      return false;
    }
    feature=ff.getFeatures()[0];
    if (feature.getSignal() == Signal.UTTERANCE_START) {
      ff=frontEnd.getFeatureFrame(1,null);
      if (!hasFeatures(ff)) {
        return false;
      }
      feature=ff.getFeatures()[0];
    }
    if (feature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!feature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    float logMaxScore=-Float.MAX_VALUE;
    for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
      Scoreable scoreable=(Scoreable)i.next();
      if (scoreable.getFrameNumber() != curFeature.getID()) {
        throw new Error(""String_Node_Str"" + scoreable.getFrameNumber() + ""String_Node_Str""+ curFeature.getID());
      }
      float logScore=scoreable.calculateScore(feature);
      if (logScore > logMaxScore) {
        logMaxScore=logScore;
      }
    }
    if (normalizeScores) {
      for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
        Scoreable scoreable=(Scoreable)i.next();
        scoreable.normalizeScore(logMaxScore);
      }
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    return false;
  }
  return true;
}","/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there was a Feature available to scorefalse if there was no more Feature available to score
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    Feature feature;
    if (!hasFeatures(ff)) {
      return false;
    }
    feature=ff.getFeatures()[0];
    if (feature.getSignal() == Signal.UTTERANCE_START) {
      ff=frontEnd.getFeatureFrame(1,null);
      if (!hasFeatures(ff)) {
        return false;
      }
      feature=ff.getFeatures()[0];
    }
    if (feature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!feature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    float logMaxScore=-Float.MAX_VALUE;
    for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
      Scoreable scoreable=(Scoreable)i.next();
      if (scoreable.getFrameNumber() != feature.getID()) {
        throw new Error(""String_Node_Str"" + scoreable.getFrameNumber() + ""String_Node_Str""+ feature.getID());
      }
      float logScore=scoreable.calculateScore(feature);
      if (logScore > logMaxScore) {
        logMaxScore=logScore;
      }
    }
    if (normalizeScores) {
      for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
        Scoreable scoreable=(Scoreable)i.next();
        scoreable.normalizeScore(logMaxScore);
      }
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    return false;
  }
  return true;
}",0.9968847352024922
20009,"/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there are more features available
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    Feature feature;
    if (ff == null) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    if (ff.getFeatures() == null) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    feature=ff.getFeatures()[0];
    if (feature.getSignal() == Signal.UTTERANCE_START) {
      return true;
    }
    if (feature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!feature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    float logMaxScore=-Float.MAX_VALUE;
    for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
      Scoreable scoreable=(Scoreable)i.next();
      float logScore=scoreable.calculateScore(feature);
      if (logScore > logMaxScore) {
        logMaxScore=logScore;
      }
    }
    if (normalizeScores) {
      for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
        Scoreable scoreable=(Scoreable)i.next();
        scoreable.normalizeScore(logMaxScore);
      }
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    return false;
  }
  return true;
}","/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there was a Feature available to scorefalse if there was no more Feature available to score
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    Feature feature;
    if (!hasFeatures(ff)) {
      return false;
    }
    feature=ff.getFeatures()[0];
    if (feature.getSignal() == Signal.UTTERANCE_START) {
      ff=frontEnd.getFeatureFrame(1,null);
      if (!hasFeatures(ff)) {
        return false;
      }
      feature=ff.getFeatures()[0];
    }
    if (feature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!feature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    float logMaxScore=-Float.MAX_VALUE;
    for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
      Scoreable scoreable=(Scoreable)i.next();
      float logScore=scoreable.calculateScore(feature);
      if (logScore > logMaxScore) {
        logMaxScore=logScore;
      }
    }
    if (normalizeScores) {
      for (Iterator i=scoreableList.iterator(); i.hasNext(); ) {
        Scoreable scoreable=(Scoreable)i.next();
        scoreable.normalizeScore(logMaxScore);
      }
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    return false;
  }
  return true;
}",0.8584604469670096
20010,"/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there are more features available
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    if (ff == null) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    if (ff.getFeatures() == null) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    curFeature=ff.getFeatures()[0];
    if (curFeature.getSignal() == Signal.UTTERANCE_START) {
      return true;
    }
    if (curFeature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!curFeature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    Scoreable[] scoreables=(Scoreable[])scoreableList.toArray(new Scoreable[scoreableList.size()]);
    if (numThreads > 1) {
      int nThreads=numThreads;
      int scoreablesPerThread=(scoreables.length + (numThreads - 1)) / numThreads;
      if (scoreablesPerThread < minScoreablesPerThread) {
        scoreablesPerThread=minScoreablesPerThread;
        nThreads=(scoreables.length + (scoreablesPerThread - 1)) / scoreablesPerThread;
      }
      semaphore.setCount(nThreads);
      for (int i=0; i < nThreads; i++) {
        ScoreableJob job=new ScoreableJob(scoreables,i * scoreablesPerThread,scoreablesPerThread);
        mailbox.post(job);
      }
      semaphore.pend();
    }
 else {
      ScoreableJob job=new ScoreableJob(scoreables,0,scoreables.length);
      scoreScoreables(job);
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    ioe.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Scores the given set of states
 * @param scoreableList a list containing scoreable objects tobe scored
 * @return true if there was a Feature available to scorefalse if there was no more Feature available to score
 */
public boolean calculateScores(List scoreableList){
  FeatureFrame ff;
  try {
    ff=frontEnd.getFeatureFrame(1,null);
    if (!hasFeatures(ff)) {
      return false;
    }
    curFeature=ff.getFeatures()[0];
    if (curFeature.getSignal() == Signal.UTTERANCE_START) {
      ff=frontEnd.getFeatureFrame(1,null);
      if (!hasFeatures(ff)) {
        return false;
      }
      curFeature=ff.getFeatures()[0];
    }
    if (curFeature.getSignal() == Signal.UTTERANCE_END) {
      return false;
    }
    if (!curFeature.hasContent()) {
      throw new Error(""String_Node_Str"");
    }
    Scoreable[] scoreables=(Scoreable[])scoreableList.toArray(new Scoreable[scoreableList.size()]);
    if (numThreads > 1) {
      int nThreads=numThreads;
      int scoreablesPerThread=(scoreables.length + (numThreads - 1)) / numThreads;
      if (scoreablesPerThread < minScoreablesPerThread) {
        scoreablesPerThread=minScoreablesPerThread;
        nThreads=(scoreables.length + (scoreablesPerThread - 1)) / scoreablesPerThread;
      }
      semaphore.setCount(nThreads);
      for (int i=0; i < nThreads; i++) {
        ScoreableJob job=new ScoreableJob(scoreables,i * scoreablesPerThread,scoreablesPerThread);
        mailbox.post(job);
      }
      semaphore.pend();
    }
 else {
      ScoreableJob job=new ScoreableJob(scoreables,0,scoreables.length);
      scoreScoreables(job);
    }
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe);
    ioe.printStackTrace();
    return false;
  }
  return true;
}",0.8846815834767642
20011,"/** 
 * Given a linguist and an arc to the next token, determine a language probability for the next state
 * @param linguist  the linguist to use, null if there is nolinguist, in which case, the language probability for the SentenceHMMStateArc will be used.
 * @param arc the arc to the next state
 * @return the language probability for the transition to the nextstate (in LogMath log domain)
 */
private float getLanguageProbability(Token token,SentenceHMMStateArc arc){
  float logProbability=arc.getLanguageProbability();
  if (languageModel != null && arc.getNextState() instanceof WordState) {
    WordState state=(WordState)arc.getNextState();
    int depth=languageModel.getMaxDepth();
    String word=state.getWord().getSpelling();
    if (isWord(word)) {
      List wordList=new ArrayList(depth);
      wordList.add(word);
      while (token != null && wordList.size() < depth) {
        if (token.getSentenceHMMState() instanceof WordState) {
          WordState prevWord=(WordState)token.getSentenceHMMState();
          String prevSpelling=prevWord.getWord().getSpelling();
          if (isWord(prevSpelling)) {
            wordList.add(prevSpelling);
          }
        }
        token=token.getPredecessor();
      }
      if (token == null && wordList.size() < depth) {
        wordList.add(SENTENCE_START);
      }
      Collections.reverse(wordList);
      logProbability=(float)languageModel.getProbability(wordList);
    }
  }
  return logProbability * languageWeight;
}","/** 
 * Given a linguist and an arc to the next token, determine a language probability for the next state
 * @param linguist  the linguist to use, null if there is nolinguist, in which case, the language probability for the SentenceHMMStateArc will be used.
 * @param arc the arc to the next state
 * @return the language probability for the transition to the nextstate (in LogMath log domain)
 */
private float getLanguageProbability(Token token,SentenceHMMStateArc arc){
  float logProbability=arc.getLanguageProbability();
  if (languageModel != null && arc.getNextState() instanceof WordState) {
    WordState state=(WordState)arc.getNextState();
    int depth=languageModel.getMaxDepth();
    String word=state.getWord().getSpelling();
    if (isWord(word)) {
      List wordList=new ArrayList(depth);
      wordList.add(word);
      while (token != null && wordList.size() < depth) {
        if (token.getSentenceHMMState() instanceof WordState) {
          WordState prevWord=(WordState)token.getSentenceHMMState();
          String prevSpelling=prevWord.getWord().getSpelling();
          if (isWord(prevSpelling)) {
            wordList.add(prevSpelling);
          }
        }
        token=token.getPredecessor();
      }
      if (token == null && wordList.size() < depth) {
        wordList.add(SENTENCE_START);
      }
      Collections.reverse(wordList);
      logProbability=(float)languageModel.getProbability(wordList);
    }
  }
  return logProbability * getLanguageWeight();
}",0.9976580796252928
20012,"/** 
 * Initializes this BreadthFirstSearchManager with the given context, linguist, scorer and pruner.
 * @param context the context to use
 * @param linguist the Linguist to use
 * @param scorer the AcousticScorer to use
 * @param pruner the Pruner to use
 */
public void initialize(String context,Linguist linguist,AcousticScorer scorer,Pruner pruner){
  super.initialize(context,linguist,scorer,pruner);
  SphinxProperties props=getSphinxProperties();
  bushderbyEta=props.getDouble(PROP_BUSHDERBY_ETA,PROP_BUSHDERBY_ETA_DEFAULT);
  System.out.println(""String_Node_Str"" + enableBushderby);
  System.out.println(""String_Node_Str"" + bushderbyEta);
  filterSuccessors=props.getBoolean(PROP_FILTER_SUCCESSORS,PROP_FILTER_SUCCESSORS_DEFAULT);
  if (getLinguist() != null) {
    languageModel=getLinguist().getLanguageModel();
  }
}","/** 
 * Initializes this BreadthFirstSearchManager with the given context, linguist, scorer and pruner.
 * @param context the context to use
 * @param linguist the Linguist to use
 * @param scorer the AcousticScorer to use
 * @param pruner the Pruner to use
 */
public void initialize(String context,Linguist linguist,AcousticScorer scorer,Pruner pruner){
  super.initialize(context,linguist,scorer,pruner);
  SphinxProperties props=getSphinxProperties();
  bushderbyEta=props.getDouble(PROP_BUSHDERBY_ETA,PROP_BUSHDERBY_ETA_DEFAULT);
  System.out.println(""String_Node_Str"" + bushderbyEta);
  filterSuccessors=props.getBoolean(PROP_FILTER_SUCCESSORS,PROP_FILTER_SUCCESSORS_DEFAULT);
  if (getLinguist() != null) {
    languageModel=getLinguist().getLanguageModel();
  }
}",0.9631480324797002
20013,"/** 
 * Reads the cepstra of the entire Utterance into the cepstraList.
 * @return the number cepstra (with Data) read
 * @throws IOException if an error occurred reading the Cepstrum
 */
private int readUtterance() throws IOException {
  int count=0;
  Cepstrum input=null;
  do {
    input=predecessor.getCepstrum();
    if (input != null) {
      if (input.hasContent()) {
        count++;
        float[] cepstrumData=input.getCepstrumData();
        for (int j=0; j < cepstrumData.length; j++) {
          sums[j]+=cepstrumData[j];
        }
        cepstraList.add(input);
      }
 else       if (input.hasSignal(Signal.UTTERANCE_END)) {
        cepstraList.add(input);
        break;
      }
 else {
        cepstraList.add(input);
      }
    }
  }
 while (input != null);
  return count;
}","/** 
 * Reads the cepstra of the entire Utterance into the cepstraList.
 * @return the number cepstra (with Data) read
 * @throws IOException if an error occurred reading the Cepstrum
 */
private int readUtterance() throws IOException {
  Cepstrum input=null;
  do {
    input=predecessor.getCepstrum();
    if (input != null) {
      if (input.hasContent()) {
        numberDataCepstra++;
        float[] cepstrumData=input.getCepstrumData();
        for (int j=0; j < cepstrumData.length; j++) {
          sums[j]+=cepstrumData[j];
        }
        cepstraList.add(input);
      }
 else       if (input.hasSignal(Signal.UTTERANCE_END)) {
        cepstraList.add(input);
        break;
      }
 else {
        cepstraList.add(input);
      }
    }
  }
 while (input != null);
  return numberDataCepstra;
}",0.963239875389408
20014,"/** 
 * Normalizes the list of Cepstrum.
 */
private void normalizeList(){
  int numberCepstrum=cepstraList.size();
  for (int i=0; i < sums.length; i++) {
    sums[i]/=numberCepstrum;
  }
  for (Iterator iterator=cepstraList.iterator(); iterator.hasNext(); ) {
    Cepstrum cepstrumObject=(Cepstrum)iterator.next();
    if (cepstrumObject.hasContent()) {
      float[] cepstrum=cepstrumObject.getCepstrumData();
      for (int j=0; j < cepstrum.length; j++) {
        cepstrum[j]-=sums[j];
      }
    }
    if (getDump()) {
      System.out.println(""String_Node_Str"" + cepstrumObject.toString());
    }
  }
}","/** 
 * Normalizes the list of Cepstrum.
 */
private void normalizeList(){
  int numberCepstrum=cepstraList.size();
  for (int i=0; i < sums.length; i++) {
    sums[i]/=numberDataCepstra;
  }
  for (Iterator iterator=cepstraList.iterator(); iterator.hasNext(); ) {
    Cepstrum cepstrumObject=(Cepstrum)iterator.next();
    if (cepstrumObject.hasContent()) {
      float[] cepstrum=cepstrumObject.getCepstrumData();
      for (int j=0; j < cepstrum.length; j++) {
        cepstrum[j]-=sums[j];
      }
    }
    if (getDump()) {
      System.out.println(""String_Node_Str"" + cepstrumObject.toString());
    }
  }
}",0.9942763695829926
20015,"/** 
 * Initializes the sums array and clears the cepstra list.
 */
private void reset(){
  Arrays.fill(sums,0.0f);
  cepstraList.clear();
}","/** 
 * Initializes the sums array and clears the cepstra list.
 */
private void reset(){
  Arrays.fill(sums,0.0f);
  cepstraList.clear();
  numberDataCepstra=0;
}",0.924092409240924
20016,"/** 
 * Constructs a BatchDecoder.
 * @param context the context of this BatchDecoder
 * @param batchFile the file that contains a list of files to decode
 */
public BatchDecoder(String context,String batchFile) throws IOException {
  this.context=context;
  SphinxProperties props=SphinxProperties.getSphinxProperties(context);
  inputDataType=props.getString(PROP_INPUT_TYPE,""String_Node_Str"");
  int skip=props.getInt(PROP_SKIP,0);
  whichBatch=props.getInt(PROP_WHICH_BATCH,1);
  totalBatches=props.getInt(PROP_TOTAL_BATCHES,1);
  if (inputDataType.equals(""String_Node_Str"")) {
    dataSource=new StreamAudioSource(""String_Node_Str"",context,null,null);
  }
 else   if (inputDataType.equals(""String_Node_Str"")) {
    dataSource=new StreamCepstrumSource(""String_Node_Str"",context);
  }
 else {
    throw new Error(""String_Node_Str"" + inputDataType + ""String_Node_Str""+ ""String_Node_Str"");
  }
  decoder=new Decoder(context,dataSource);
  this.batchFile=batchFile;
}","/** 
 * Constructs a BatchDecoder.
 * @param context the context of this BatchDecoder
 * @param batchFile the file that contains a list of files to decode
 */
public BatchDecoder(String context,String batchFile) throws IOException {
  this.context=context;
  SphinxProperties props=SphinxProperties.getSphinxProperties(context);
  inputDataType=props.getString(PROP_INPUT_TYPE,""String_Node_Str"");
  skip=props.getInt(PROP_SKIP,0);
  whichBatch=props.getInt(PROP_WHICH_BATCH,0);
  totalBatches=props.getInt(PROP_TOTAL_BATCHES,1);
  if (inputDataType.equals(""String_Node_Str"")) {
    dataSource=new StreamAudioSource(""String_Node_Str"",context,null,null);
  }
 else   if (inputDataType.equals(""String_Node_Str"")) {
    dataSource=new StreamCepstrumSource(""String_Node_Str"",context);
  }
 else {
    throw new Error(""String_Node_Str"" + inputDataType + ""String_Node_Str""+ ""String_Node_Str"");
  }
  decoder=new Decoder(context,dataSource);
  this.batchFile=batchFile;
}",0.9968911917098444
20017,"/** 
 * Sets the current Decoder to the one with the given name.
 * @param decoderName name of the Decoder to use 
 */
public void setDecoder(String decoderName) throws IOException {
  String changeMessage=""String_Node_Str"" + decoderName + ""String_Node_Str"";
  info(changeMessage);
  liveFrame.setMessage(changeMessage);
  try {
    decoder=getDecoder(decoderName);
    if (!decoder.isInitialized()) {
      decoder.initialize(new Microphone(""String_Node_Str"",decoderName));
    }
  }
 catch (  LineUnavailableException lue) {
    String errorMessage=""String_Node_Str"" + decoderName;
    liveFrame.setMessage(errorMessage);
    lue.printStackTrace();
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  liveFrame.setTestFile(getDecoder().getTestFile());
  liveFrame.setReferenceLabel(getDecoder().getNextReference());
  liveFrame.setMessage(""String_Node_Str"" + decoderName + ""String_Node_Str"");
  info(""String_Node_Str"");
}","/** 
 * Sets the current Decoder to the one with the given name.
 * @param decoderName name of the Decoder to use 
 */
public void setDecoder(String decoderName) throws IOException {
  String changeMessage=""String_Node_Str"" + decoderName + ""String_Node_Str"";
  info(changeMessage);
  liveFrame.setMessage(changeMessage);
  try {
    decoder=getDecoder(decoderName);
    if (!decoder.isInitialized()) {
      decoder.initialize(new Microphone(""String_Node_Str"",decoderName,decoder.getSphinxProperties()));
    }
  }
 catch (  LineUnavailableException lue) {
    String errorMessage=""String_Node_Str"" + decoderName;
    liveFrame.setMessage(errorMessage);
    lue.printStackTrace();
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  liveFrame.setTestFile(getDecoder().getTestFile());
  liveFrame.setReferenceLabel(getDecoder().getNextReference());
  liveFrame.setMessage(""String_Node_Str"" + decoderName + ""String_Node_Str"");
  info(""String_Node_Str"");
}",0.9845201238390092
20018,"/** 
 * Returns the next Feature object produced by this DeltasFeatureExtractor.
 * @return the next available Feature object, returns null if noFeature object is available
 * @throws java.io.IOException if there is an error readingthe Feature objects
 * @see Feature
 * @see FeatureFrame
 */
public Feature getFeature() throws IOException {
  if (outputQueue.size() == 0) {
    if (segmentEnd) {
      segmentEnd=false;
      outputQueue.add(new Feature(Signal.UTTERANCE_END,IDGenerator.NON_ID));
    }
 else {
      Cepstrum input=predecessor.getCepstrum();
      if (input == null) {
        return null;
      }
 else {
        if (input.hasContent()) {
          int numberFeatures=readCepstra(featureBlockSize - 1,input);
          if (numberFeatures > 0) {
            computeFeatures(numberFeatures);
          }
        }
 else         if (input.getSignal().equals(Signal.UTTERANCE_START)) {
          segmentStart=true;
          outputQueue.add(new Feature(Signal.UTTERANCE_START,IDGenerator.NON_ID));
        }
      }
    }
  }
  if (outputQueue.size() > 0) {
    return (Feature)outputQueue.remove(0);
  }
 else {
    return null;
  }
}","/** 
 * Returns the next Feature object produced by this DeltasFeatureExtractor.
 * @return the next available Feature object, returns null if noFeature object is available
 * @throws java.io.IOException if there is an error readingthe Feature objects
 * @see Feature
 * @see FeatureFrame
 */
public Feature getFeature() throws IOException {
  if (outputQueue.size() == 0) {
    if (segmentEnd) {
      segmentEnd=false;
      outputQueue.add(new Feature(Signal.UTTERANCE_END,IDGenerator.NON_ID));
    }
 else {
      Cepstrum input=predecessor.getCepstrum();
      if (input == null) {
        return null;
      }
 else {
        if (input.hasContent()) {
          int numberFeatures=readCepstra(featureBlockSize - 1,input);
          if (numberFeatures > 0) {
            computeFeatures(numberFeatures);
          }
        }
 else         if (input.hasSignal(Signal.UTTERANCE_START)) {
          segmentStart=true;
          outputQueue.add(new Feature(Signal.UTTERANCE_START,IDGenerator.NON_ID));
        }
 else         if (input.hasSignal(Signal.UTTERANCE_END)) {
          segmentEnd=false;
          outputQueue.add(new Feature(Signal.UTTERANCE_END,IDGenerator.NON_ID));
        }
      }
    }
  }
  if (outputQueue.size() > 0) {
    Feature feature=(Feature)outputQueue.remove(0);
    return feature;
  }
 else {
    return null;
  }
}",0.9015212169735788
20019,"/** 
 * Dumps the Cepstra to the given binary output.
 * @param outputFile the binary output file
 */
public void dumpBinary(String outputFile) throws IOException {
  DataOutputStream outStream=new DataOutputStream(new FileOutputStream(outputFile));
  outStream.writeFloat((float)getNumberDataPoints());
  for (Iterator i=allFeatures.iterator(); i.hasNext(); ) {
    Feature feature=(Feature)i.next();
    float[] data=feature.getFeatureData();
    for (int d=0; d < data.length; d++) {
      outStream.writeFloat(data[d]);
    }
  }
  outStream.close();
}","/** 
 * Dumps the Cepstra to the given binary output.
 * @param outputFile the binary output file
 */
public void dumpBinary(String outputFile) throws IOException {
  DataOutputStream outStream=new DataOutputStream(new FileOutputStream(outputFile));
  outStream.writeInt(getNumberDataPoints());
  for (Iterator i=allFeatures.iterator(); i.hasNext(); ) {
    Feature feature=(Feature)i.next();
    float[] data=feature.getFeatureData();
    for (int d=0; d < data.length; d++) {
      outStream.writeFloat(data[d]);
    }
  }
  outStream.close();
}",0.9845874886672712
20020,"/** 
 * Initializes this DataProcessor.
 * @param name the name of this DataProcessor
 * @param context the context of this DataProcessor
 */
public void initialize(String name,String context){
  if (sphinxProperties == null) {
    this.name=name;
    this.context=context;
    this.timer=Timer.getTimer(context,name);
    this.sphinxProperties=SphinxProperties.getSphinxProperties(context);
  }
}","/** 
 * Initializes this DataProcessor.
 * @param name the name of this DataProcessor
 * @param context the context of this DataProcessor
 */
public void initialize(String name,String context){
  this.name=name;
  this.context=context;
  this.timer=Timer.getTimer(context,name);
  this.sphinxProperties=SphinxProperties.getSphinxProperties(context);
}",0.8422459893048129
20021,"/** 
 * Retrieve all Features from the frontend, and cache all those with actual feature data.
 */
private void getAllFeatures() throws IOException {
  Feature feature=null;
  FeatureFrame frame=frontend.getFeatureFrame(1);
  if (frame != null) {
    feature=frame.getFeatures()[0];
    if (feature.hasContent()) {
      allFeatures.add(feature);
    }
  }
}","/** 
 * Retrieve all Features from the frontend, and cache all those with actual feature data.
 */
private void getAllFeatures() throws IOException {
  Feature feature=null;
  FeatureFrame frame=null;
  while ((frame=frontend.getFeatureFrame(1)) != null) {
    feature=frame.getFeatures()[0];
    if (feature.hasContent()) {
      allFeatures.add(feature);
    }
  }
}",0.950413223140496
20022,"/** 
 * Constructs a CepstrumFileDumper.
 * @param propsFile the Sphinx properties file
 * @param inputAudioFile the input audio file
 */
public CepstrumFileDumper(String propsFile,String inputAudioFile) throws FileNotFoundException, IOException {
  try {
    String context=""String_Node_Str"";
    SphinxProperties.initContext(context,new URL(""String_Node_Str"" + propsFile));
    SphinxProperties props=SphinxProperties.getSphinxProperties(context);
    featureLength=props.getInt(FeatureExtractor.PROP_FEATURE_LENGTH,13);
    AudioSource audioSource=new StreamAudioSource(""String_Node_Str"",context,(new FileInputStream(inputAudioFile)),inputAudioFile);
    frontend=new FrontEnd(""String_Node_Str"",context,audioSource);
    allFeatures=new LinkedList();
    getAllFeatures();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Constructs a CepstrumFileDumper.
 * @param propsFile the Sphinx properties file
 * @param inputAudioFile the input audio file
 */
public CepstrumFileDumper(String propsFile,String inputAudioFile) throws FileNotFoundException, IOException {
  try {
    String context=""String_Node_Str"";
    String pwd=System.getProperty(""String_Node_Str"");
    SphinxProperties.initContext(context,new URL(""String_Node_Str"" + pwd + File.separatorChar+ propsFile));
    SphinxProperties props=SphinxProperties.getSphinxProperties(context);
    featureLength=props.getInt(FeatureExtractor.PROP_FEATURE_LENGTH,13);
    AudioSource audioSource=new StreamAudioSource(""String_Node_Str"",context,(new FileInputStream(inputAudioFile)),inputAudioFile);
    frontend=new FrontEnd(""String_Node_Str"",context,audioSource);
    allFeatures=new LinkedList();
    getAllFeatures();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9542857142857144
20023,"/** 
 * Function used by add() internally. It returns the difference between the highest number and the total summation of two numbers. Considering the expression (in which we assume natural log) <p><b>log(a + b) = log(a) + log(1 + exp(log(b) - log(a)))</b></p> the current function returns the second term of the right hand side of the equality above, generalized for the case of any log base. This function is contructed as a table lookup.
 * @param index the index into the addTable
 * @return the value pointed to by index
 */
private final double addTable(double index){
  return theAddTable[(int)(index)];
}","/** 
 * Function used by add() internally. It returns the difference between the highest number and the total summation of two numbers. Considering the expression (in which we assume natural log) <p><b>log(a + b) = log(a) + log(1 + exp(log(b) - log(a)))</b></p> the current function returns the second term of the right hand side of the equality above, generalized for the case of any log base. This function is contructed as a table lookup.
 * @param index the index into the addTable
 * @return the value pointed to by index
 */
private final double addTable(double index){
  if (OLD_AND_SLOW_ADD) {
    return addTableActualComputation(index);
  }
 else {
    return theAddTable[(int)(index)];
  }
}",0.932319391634981
20024,"/** 
 * Create a log math class. Also create the addTable table, which depends on the log base.
 * @param base the log base
 */
private LogMath(double base){
  logBase=base;
  naturalLogBase=Math.log(logBase);
  inverseNaturalLogBase=1.0 / naturalLogBase;
  logZero=-Double.MAX_VALUE;
  double innerSummation;
  int entriesInTheAddTable;
  final int veryLargeNumberOfEntries=150000;
  entriesInTheAddTable=linearToLog(Math.power(logbase,0.5) - 1);
  if (entriesInTheTable > veryLargeNumberOfEntries) {
    entriesInTheAddTable=veryLargeNumberOfEntries;
  }
  theAddTable=new double[entriesInTheAddTable];
  for (int index=0; index < entriesInTheAddTable; index++) {
    innerSummation=logToLinear(-index);
    innerSummation+=1.0f;
    theAddTable[index]=linearToLog(innerSummation);
  }
}","/** 
 * Create a log math class. Also create the addTable table, which depends on the log base.
 * @param base the log base
 */
private LogMath(double base){
  logBase=base;
  naturalLogBase=Math.log(logBase);
  inverseNaturalLogBase=1.0 / naturalLogBase;
  logZero=-Double.MAX_VALUE;
  double innerSummation;
  int entriesInTheAddTable;
  final int veryLargeNumberOfEntries=150000;
  entriesInTheAddTable=(int)-Math.rint(linearToLog(Math.pow(logBase,0.5) - 1));
  if (entriesInTheAddTable > veryLargeNumberOfEntries) {
    entriesInTheAddTable=veryLargeNumberOfEntries;
  }
  if (true) {
    System.out.println(""String_Node_Str"" + entriesInTheAddTable + ""String_Node_Str"");
  }
  theAddTable=new double[entriesInTheAddTable];
  for (int index=0; index < entriesInTheAddTable; index++) {
    innerSummation=logToLinear(-index);
    innerSummation+=1.0f;
    theAddTable[index]=linearToLog(innerSummation);
  }
}",0.9058823529411764
20025,"/** 
 * Constructs an EnergyEndpointer with the given name, context, and CepstrumSource predecessor.
 * @param name the name of this EnergyEndpointer
 * @param context the context of the SphinxProperties thisEnergyEndpointer uses
 * @param predecessor the CepstrumSource where this EnergyEndpointergets Cepstrum from
 */
public EnergyEndpointer(String name,String context,CepstrumSource predecessor) throws IOException {
  super(name,context);
  initSphinxProperties();
  this.predecessor=predecessor;
  this.inputBuffer=new LinkedList();
  reset();
}","/** 
 * Constructs an EnergyEndpointer with the given name, context, and CepstrumSource predecessor.
 * @param name the name of this EnergyEndpointer
 * @param context the context of the SphinxProperties thisEnergyEndpointer uses
 * @param predecessor the CepstrumSource where this EnergyEndpointergets Cepstrum from
 */
public EnergyEndpointer(String name,String context,CepstrumSource predecessor) throws IOException {
  super(name,context);
  initSphinxProperties();
  this.predecessor=predecessor;
  this.outputQueue=new LinkedList();
  reset();
}",0.9800362976406534
20026,"/** 
 * Reads a Cepstrum from the predecessor, and use it to do endpointing.
 * @return the Cepstrum read from the predecessor
 */
private Cepstrum readCepstrum() throws IOException {
  Cepstrum cepstrum=predecessor.getCepstrum();
  if (cepstrum != null) {
    numCepstra++;
    if (cepstrum.hasContent()) {
      if (cepstrum.getEnergy() < startLow || cepstrum.getEnergy() < endLow) {
        processLowEnergyCepstrum(cepstrum);
      }
 else       if (startLow < cepstrum.getEnergy() && cepstrum.getEnergy() <= startHigh) {
        processMediumEnergyCepstrum(cepstrum);
      }
 else       if (cepstrum.getEnergy() > startHigh) {
        processHighEnergyCepstrum(cepstrum);
      }
    }
  }
  return cepstrum;
}","/** 
 * Reads a Cepstrum from the predecessor, and use it to do endpointing.
 * @return the Cepstrum read from the predecessor
 */
private Cepstrum readCepstrum() throws IOException {
  Cepstrum cepstrum=predecessor.getCepstrum();
  if (cepstrum != null) {
    numCepstra++;
    if (cepstrum.hasContent()) {
      System.out.println(""String_Node_Str"" + cepstrum.getEnergy());
      if (cepstrum.getEnergy() < startLow || cepstrum.getEnergy() < endLow) {
        processLowEnergyCepstrum(cepstrum);
      }
 else       if (startLow < cepstrum.getEnergy() && cepstrum.getEnergy() <= startHigh) {
        processMediumEnergyCepstrum(cepstrum);
      }
 else       if (cepstrum.getEnergy() > startHigh) {
        processHighEnergyCepstrum(cepstrum);
      }
    }
  }
  return cepstrum;
}",0.9546666666666668
20027,"/** 
 * Inserts a SPEECH_END at the appropriate place.
 */
private void insertSpeechEnd(){
  int index=inputBuffer.indexOf(endOffsetFrame);
  endOffsetFrame=null;
  if (index < 0) {
    index=0;
  }
  lastSpeechEndFrame=new Cepstrum(Signal.SPEECH_END);
  inputBuffer.add(index,lastSpeechEndFrame);
}","/** 
 * Inserts a SPEECH_END at the appropriate place.
 */
private void insertSpeechEnd(){
  int index=outputQueue.indexOf(endOffsetFrame);
  endOffsetFrame=null;
  if (index < 0) {
    index=0;
  }
  lastSpeechEndFrame=new Cepstrum(Signal.SPEECH_END);
  outputQueue.add(index,lastSpeechEndFrame);
}",0.9264214046822744
20028,"/** 
 * Process the given high energy Cepstrum.
 * @param cepstrum the high energy Cepstrum to process
 */
private void processHighEnergyCepstrum(Cepstrum cepstrum){
  if (location == BELOW_START_LOW) {
    if (inputBuffer.size() > 0) {
      setLastStartLowFrame((Cepstrum)inputBuffer.getFirst());
    }
  }
  if (startHighFrames > startWindow) {
    if (!inSpeech) {
      speechStart();
    }
 else {
      endLowFrames=0;
      endOffsetFrame=null;
    }
  }
 else {
    startHighFrames++;
  }
  location=ABOVE_START_HIGH;
}","/** 
 * Process the given high energy Cepstrum.
 * @param cepstrum the high energy Cepstrum to process
 */
private void processHighEnergyCepstrum(Cepstrum cepstrum){
  if (location == BELOW_START_LOW) {
    if (outputQueue.size() > 0) {
      setLastStartLowFrame((Cepstrum)outputQueue.getFirst());
    }
  }
  if (startHighFrames > startWindow) {
    if (!inSpeech) {
      speechStart();
    }
 else {
      endLowFrames=0;
      endOffsetFrame=null;
    }
  }
 else {
    startHighFrames++;
  }
  location=ABOVE_START_HIGH;
}",0.9583333333333334
20029,"/** 
 * Inserts a SPEECH_START at the appropriate place.
 */
private void insertSpeechStart(){
  int index=inputBuffer.indexOf(lastStartLowFrame);
  if (index > -1) {
    int i=0;
    for (ListIterator iterator=inputBuffer.listIterator(index); i < startOffset && iterator.hasNext(); i++) {
      Cepstrum cepstrum=(Cepstrum)iterator.next();
      if (cepstrum.getSignal().equals(Signal.UTTERANCE_START)) {
        break;
      }
    }
    index+=i;
  }
  if (index >= inputBuffer.size()) {
    index=inputBuffer.size();
  }
 else   if (index < 0) {
    index=0;
    System.out.println(""String_Node_Str"");
    for (ListIterator i=inputBuffer.listIterator(); i.hasNext(); ) {
      Cepstrum cepstrum=(Cepstrum)i.next();
      if (cepstrum.getSignal().equals(Signal.UTTERANCE_START)) {
        index=inputBuffer.indexOf(cepstrum);
      }
    }
  }
  inputBuffer.add(index,(new Cepstrum(Signal.SPEECH_START)));
}","/** 
 * Inserts a SPEECH_START at the appropriate place.
 */
private void insertSpeechStart(){
  int index=outputQueue.indexOf(lastStartLowFrame);
  if (index > -1) {
    int i=0;
    for (ListIterator iterator=outputQueue.listIterator(index); i < startOffset && iterator.hasNext(); i++) {
      Cepstrum cepstrum=(Cepstrum)iterator.next();
      if (cepstrum.getSignal().equals(Signal.UTTERANCE_START)) {
        break;
      }
    }
    index+=i;
  }
  if (index >= outputQueue.size()) {
    index=outputQueue.size();
  }
 else   if (index < 0) {
    index=0;
    System.out.println(""String_Node_Str"");
    for (ListIterator i=outputQueue.listIterator(); i.hasNext(); ) {
      Cepstrum cepstrum=(Cepstrum)i.next();
      if (cepstrum.getSignal().equals(Signal.UTTERANCE_START)) {
        index=outputQueue.indexOf(cepstrum);
      }
    }
  }
  outputQueue.add(index,(new Cepstrum(Signal.SPEECH_START)));
}",0.9152915291529152
20030,"/** 
 * Process the given medium energy Cepstrum.
 * @param cepstrum the medium energy Cepstrum to process
 */
private void processMediumEnergyCepstrum(Cepstrum cepstrum){
  if (location == BELOW_START_LOW) {
    if (lastStartLowFrame != null) {
      if (maxDropout < startLowFrames && inputBuffer.size() > 0) {
        setLastStartLowFrame((Cepstrum)inputBuffer.getFirst());
      }
    }
 else {
      if (numCepstra == 1) {
        setLastStartLowFrame(cepstrum);
      }
 else       if (numCepstra > 1) {
        setLastStartLowFrame((Cepstrum)inputBuffer.getFirst());
      }
    }
  }
  startLowFrames=0;
  endLowFrames=0;
  location=BETWEEN_START_LOW_HIGH;
}","/** 
 * Process the given medium energy Cepstrum.
 * @param cepstrum the medium energy Cepstrum to process
 */
private void processMediumEnergyCepstrum(Cepstrum cepstrum){
  if (location == BELOW_START_LOW) {
    if (lastStartLowFrame != null) {
      if (maxDropout < startLowFrames && outputQueue.size() > 0) {
        setLastStartLowFrame((Cepstrum)outputQueue.getFirst());
      }
    }
 else {
      if (numCepstra == 1) {
        setLastStartLowFrame(cepstrum);
      }
 else       if (numCepstra > 1) {
        setLastStartLowFrame((Cepstrum)outputQueue.getFirst());
      }
    }
  }
  startLowFrames=0;
  endLowFrames=0;
  location=BETWEEN_START_LOW_HIGH;
}",0.9504504504504504
20031,"/** 
 * Returns the next Cepstrum, which can be either Cepstrum with data, or Cepstrum with a SPEECH_START or SPEECH_END signal.
 * @return the next Cepstrum, or null if no Cepstrum is available
 * @throws java.io.IOException if there is error reading theCepstrum object
 * @see Cepstrum
 */
public Cepstrum getCepstrum() throws IOException {
  Cepstrum cepstrum=readCepstrum();
  getTimer().start();
  if (cepstrum != null) {
    Signal signal=cepstrum.getSignal();
    if (signal != null && signal.equals(Signal.UTTERANCE_START)) {
      utteranceStart();
      inputBuffer.addFirst(cepstrum);
      while (cepstrum.getEnergy() < startHigh || startHighFrames <= startWindow) {
        cepstrum=readCepstrum();
        if (cepstrum != null) {
          inputBuffer.addFirst(cepstrum);
        }
      }
    }
 else     if (signal != null && signal.equals(Signal.UTTERANCE_END)) {
      if (inSpeech) {
        speechEnd();
      }
      inputBuffer.addFirst(cepstrum);
    }
 else {
      inputBuffer.addFirst(cepstrum);
    }
  }
  cepstrum=(Cepstrum)inputBuffer.removeLast();
  getTimer().stop();
  return cepstrum;
}","/** 
 * Returns the next Cepstrum, which can be either Cepstrum with data, or Cepstrum with a SPEECH_START or SPEECH_END signal.
 * @return the next Cepstrum, or null if no Cepstrum is available
 * @throws java.io.IOException if there is error reading theCepstrum object
 * @see Cepstrum
 */
public Cepstrum getCepstrum() throws IOException {
  Cepstrum cepstrum=readCepstrum();
  getTimer().start();
  if (cepstrum != null) {
    Signal signal=cepstrum.getSignal();
    if (signal != null && signal.equals(Signal.UTTERANCE_START)) {
      utteranceStart();
      outputQueue.addFirst(cepstrum);
      while (cepstrum.getEnergy() < startHigh || startHighFrames <= startWindow) {
        cepstrum=readCepstrum();
        if (cepstrum != null) {
          outputQueue.addFirst(cepstrum);
        }
 else {
          break;
        }
      }
    }
 else     if (signal != null && signal.equals(Signal.UTTERANCE_END)) {
      if (inSpeech) {
        speechEnd();
      }
      outputQueue.addFirst(cepstrum);
    }
 else {
      outputQueue.addFirst(cepstrum);
    }
  }
  if (outputQueue.size() > 0) {
    cepstrum=(Cepstrum)outputQueue.removeLast();
  }
 else {
    cepstrum=null;
  }
  getTimer().stop();
  return cepstrum;
}",0.8020477815699659
20032,"/** 
 * Removes the previous SPEECH_END Cepstrum.
 */
private void removeLastSpeechEnd(){
  if (lastSpeechEndFrame != null) {
    inputBuffer.remove(lastSpeechEndFrame);
  }
}","/** 
 * Removes the previous SPEECH_END Cepstrum.
 */
private void removeLastSpeechEnd(){
  if (lastSpeechEndFrame != null) {
    outputQueue.remove(lastSpeechEndFrame);
  }
}",0.9657142857142856
20033,"/** 
 * Returns the next Audio object from the current Utterance,  or null if there is none available.
 * @return an Audio object or null
 * @throws java.io.IOException
 */
private Audio readNextFrame() throws IOException {
  byte[] audioFrame=null;
  do {
    audioFrame=currentUtterance.getNext();
  }
 while (audioFrame == null && isRecording());
  if (audioFrame == null) {
    return null;
  }
  Audio audio=null;
  if (keepAudioReference) {
    audio=new Audio(Util.byteToDoubleArray(audioFrame,0,audioFrame.length),currentUtterance);
  }
 else {
    audio=new Audio(Util.byteToDoubleArray(audioFrame,0,audioFrame.length));
  }
  if (getDump()) {
    System.out.println(""String_Node_Str"" + audio.toString());
  }
  return audio;
}","/** 
 * Returns the next Audio object from the current Utterance,  or null if there is none available.
 * @return an Audio object or null
 * @throws java.io.IOException
 */
private Audio readNextFrame() throws IOException {
  byte[] audioFrame=null;
  do {
    audioFrame=currentUtterance.getNext();
  }
 while (audioFrame == null && getRecording());
  if (audioFrame == null) {
    return null;
  }
  Audio audio=null;
  if (keepAudioReference) {
    audio=new Audio(Util.byteToDoubleArray(audioFrame,0,audioFrame.length),currentUtterance);
  }
 else {
    audio=new Audio(Util.byteToDoubleArray(audioFrame,0,audioFrame.length));
  }
  if (getDump()) {
    System.out.println(""String_Node_Str"" + audio.toString());
  }
  return audio;
}",0.9966055668703326
20034,"/** 
 * Constructs a Microphone with the given InputStream.
 * @param name the name of this Microphone
 * @param context the context of this Microphone
 */
public Microphone(String name,String context) throws LineUnavailableException, IOException {
  super(name,context);
  initSphinxProperties();
  audioFormat=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);
  utteranceList=new UtteranceList();
  open();
}","/** 
 * Constructs a Microphone with the given InputStream.
 * @param name the name of this Microphone
 * @param context the context of this Microphone
 */
public Microphone(String name,String context) throws IOException {
  super(name,context);
  initSphinxProperties();
  audioFormat=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);
  utteranceList=new UtteranceList();
}",0.9565217391304348
20035,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void initSphinxProperties() throws IOException {
  sampleRate=(float)getIntAcousticProperty(FrontEnd.PROP_SAMPLE_RATE,8000);
  SphinxProperties properties=getSphinxProperties();
  frameSizeInBytes=properties.getInt(FrontEnd.PROP_BYTES_PER_AUDIO_FRAME,4096);
  if (frameSizeInBytes % 2 == 1) {
    frameSizeInBytes++;
  }
  keepAudioReference=properties.getBoolean(FrontEnd.PROP_KEEP_AUDIO_REFERENCE,true);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void initSphinxProperties() throws IOException {
  sampleRate=getIntAcousticProperty(FrontEnd.PROP_SAMPLE_RATE,16000);
  SphinxProperties properties=getSphinxProperties();
  frameSizeInBytes=properties.getInt(FrontEnd.PROP_BYTES_PER_AUDIO_FRAME,4096);
  if (frameSizeInBytes % 2 == 1) {
    frameSizeInBytes++;
  }
  keepAudioReference=properties.getBoolean(FrontEnd.PROP_KEEP_AUDIO_REFERENCE,true);
}",0.9898580121703854
20036,"/** 
 * Removes all the utterances in this UtteranceList.
 */
public void clear(){
  utterances.clear();
}","/** 
 * Remove all the Utterances in this UtteranceList.
 */
public void clear(){
  utterances.clear();
}",0.985781990521327
20037,"/** 
 * Implements update() method of LineListener interface. Responds to the START line event by waking up all the threads that are waiting on the Microphone's monitor.
 * @param event the LineEvent to handle
 */
public void update(LineEvent event){
  if (event.getType().equals(LineEvent.Type.START)) {
    setStarted(true);
synchronized (Microphone.this) {
      Microphone.this.notifyAll();
    }
  }
 else   if (event.getType().equals(LineEvent.Type.CLOSE)) {
    printMessage(""String_Node_Str"");
  }
}","/** 
 * Implements update() method of LineListener interface. Responds to the START line event by waking up all the threads that are waiting on the Microphone's monitor.
 * @param event the LineEvent to handle
 */
public void update(LineEvent event){
  if (event.getType().equals(LineEvent.Type.START)) {
    setStarted(true);
synchronized (Microphone.this) {
      Microphone.this.notifyAll();
    }
  }
}",0.8893756845564075
20038,"/** 
 * Implements the <code>run()</code> method of Runnable. It waits for instructions to record audio. The method <code>startRecording()</code> will cause it to start recording from the system audio capturing device. Once it starts recording, it will keep recording until it receives instruction to stop recording. The method <code>stopRecording()</code> will cause it to stop recording.
 */
public void run(){
  while (!isClosed()) {
    waitToRecord();
    if (!isClosed()) {
      record();
    }
  }
  printMessage(""String_Node_Str"");
}","/** 
 * Implements the run() method of the Thread class. Records audio, and cache them in the audio buffer.
 */
public void run(){
  if (audioLine != null && audioLine.isOpen()) {
    Utterance currentUtterance=new Utterance(""String_Node_Str"",getContext());
    utteranceList.add(currentUtterance);
    audioLine.start();
    printMessage(""String_Node_Str"");
    while (getRecording() && !getClosed()) {
      byte[] data=new byte[frameSizeInBytes];
      int numBytesRead=audioLine.read(data,0,data.length);
      if (numBytesRead == frameSizeInBytes) {
        currentUtterance.add(data);
      }
 else {
        numBytesRead=(numBytesRead % 2 == 0) ? numBytesRead + 2 : numBytesRead + 3;
        byte[] shrinked=new byte[numBytesRead];
        System.arraycopy(data,0,shrinked,0,numBytesRead);
        currentUtterance.add(shrinked);
      }
      printMessage(""String_Node_Str"" + numBytesRead + ""String_Node_Str"");
    }
    audioLine.stop();
    audioLine.close();
    printMessage(""String_Node_Str"");
  }
 else {
    printMessage(""String_Node_Str"");
  }
}",0.1634435433562071
20039,"/** 
 * Starts recording audio
 * @return true if the recording started successfully; false otherwise
 */
public synchronized boolean startRecording(){
  if (audioLine.isOpen()) {
    setRecording(true);
    notifyAll();
    while (!isStarted()) {
      try {
        wait();
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Starts recording audio. This method will return only when a START event is received, meaning that this Microphone has started capturing audio.
 * @return true if the recording started successfully; false otherwise
 */
public synchronized boolean startRecording(){
  if (open()) {
    setRecording(true);
    RecordingThread recorder=new RecordingThread();
    recorder.start();
    while (!getStarted()) {
      try {
        wait();
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.7162698412698413
20040,"/** 
 * Set this Microphone to whether it has started capturing audio.
 * @param started true if it has started capturing audio,false otherwise
 */
private synchronized void setStarted(boolean started){
  this.started=started;
}","private synchronized void setStarted(boolean started){
  this.started=started;
}",0.5194805194805194
20041,"/** 
 * Release all the system resources used by this Microphone, terminates this Microphone, and effectively terminates this thread of execution. Calling <code>startRecording()</code> will not work after call this method.
 */
public synchronized void terminate(){
  audioLine.close();
  setClosed(true);
  notify();
}","/** 
 * Terminates this Microphone. In this version, it currently does nothing.
 */
public void terminate(){
}",0.4158878504672897
20042,"/** 
 * Opens the audio capturing device so that it will be ready for capturing audio.
 * @throws LineUnavailableException if there is an error openingthe audio device
 * @return true if the audio capturing device is opened successfully;false otherwise
 */
private boolean open() throws LineUnavailableException {
  DataLine.Info info=new DataLine.Info(TargetDataLine.class,audioFormat);
  if (!AudioSystem.isLineSupported(info)) {
    logger.severe(audioFormat + ""String_Node_Str"");
    throw new LineUnavailableException();
  }
  try {
    audioLine=(TargetDataLine)AudioSystem.getLine(info);
    audioLine.addLineListener(lineListener);
    audioLine.open(audioFormat);
    return true;
  }
 catch (  LineUnavailableException ex) {
    audioLine=null;
    ex.printStackTrace();
    return false;
  }
}","/** 
 * Opens the audio capturing device so that it will be ready for capturing audio.
 * @return true if the audio capturing device is opened successfully;false otherwise
 */
private boolean open(){
  DataLine.Info info=new DataLine.Info(TargetDataLine.class,audioFormat);
  if (!AudioSystem.isLineSupported(info)) {
    logger.severe(audioFormat + ""String_Node_Str"");
    return false;
  }
  try {
    audioLine=(TargetDataLine)AudioSystem.getLine(info);
    audioLine.addLineListener(lineListener);
    audioLine.open(audioFormat);
    return true;
  }
 catch (  LineUnavailableException ex) {
    audioLine=null;
    ex.printStackTrace();
    return false;
  }
}",0.2653061224489796
20043,"/** 
 * Stops recording audio.
 */
public void stopRecording(){
  if (audioLine != null) {
    setRecording(false);
    setStarted(false);
  }
}","/** 
 * Stops recording audio.
 */
public synchronized void stopRecording(){
  if (audioLine != null) {
    setRecording(false);
    setStarted(false);
  }
}",0.956810631229236
20044,"public static void main(String[] argv){
  if (argv.length < 3) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String testName=argv[0];
    String propertiesFile=argv[1];
    String audioFile=argv[2];
    ProcessorTest fet=new ProcessorTest(testName,propertiesFile,audioFile);
    Preemphasizer preemphasizer=new Preemphasizer(""String_Node_Str"",testName,fet.getAudioSource());
    Windower windower=new Windower(""String_Node_Str"",testName,preemphasizer);
    SpectrumAnalyzer spectrumAnalyzer=new SpectrumAnalyzer(""String_Node_Str"",testName,windower);
    MelFilterbank melFilterbank=new MelFilterbank(""String_Node_Str"",testName,spectrumAnalyzer);
    MelCepstrumProducer melCepstrum=new MelCepstrumProducer(""String_Node_Str"",testName,melFilterbank);
    EnergyEndpointer endpointer=new EnergyEndpointer(""String_Node_Str"",testName,melCepstrum);
    NonSpeechFilter nonSpeechFilter=new NonSpeechFilter(""String_Node_Str"",testName,endpointer);
    CepstrumSource finalSource=endpointer;
    if (Boolean.getBoolean(""String_Node_Str"")) {
      finalSource=nonSpeechFilter;
    }
    CepstraViewer cepstraViewer=new CepstraViewer(""String_Node_Str"");
    cepstraViewer.show();
    List cepstraGroupList=new LinkedList();
    List cepstraList=new LinkedList();
    Cepstrum cepstrum=null;
    do {
      cepstrum=finalSource.getCepstrum();
      if (cepstrum != null) {
        cepstraList.add(cepstrum);
        Signal signal=cepstrum.getSignal();
        if (signal != null && signal.equals(Signal.UTTERANCE_END)) {
          Cepstrum[] cepstra=new Cepstrum[cepstraList.size()];
          cepstraList.toArray(cepstra);
          String name=""String_Node_Str"";
          Utterance utterance=cepstra[cepstra.length - 2].getUtterance();
          if (utterance != null) {
            name=utterance.getName();
          }
          CepstraGroup cepstraGroup=new CepstraGroup(cepstra,name);
          cepstraViewer.addCepstraGroup(cepstraGroup);
          cepstraList=new LinkedList();
        }
      }
    }
 while (cepstrum != null);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] argv){
  if (argv.length < 3) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String testName=argv[0];
    String propertiesFile=argv[1];
    String audioFile=argv[2];
    ProcessorTest fet=new ProcessorTest(testName,propertiesFile,audioFile);
    Preemphasizer preemphasizer=new Preemphasizer(""String_Node_Str"",testName,fet.getAudioSource());
    Windower windower=new Windower(""String_Node_Str"",testName,preemphasizer);
    SpectrumAnalyzer spectrumAnalyzer=new SpectrumAnalyzer(""String_Node_Str"",testName,windower);
    MelFilterbank melFilterbank=new MelFilterbank(""String_Node_Str"",testName,spectrumAnalyzer);
    MelCepstrumProducer melCepstrum=new MelCepstrumProducer(""String_Node_Str"",testName,melFilterbank);
    EnergyEndpointer endpointer=new EnergyEndpointer(""String_Node_Str"",testName,melCepstrum);
    NonSpeechFilter nonSpeechFilter=new NonSpeechFilter(""String_Node_Str"",testName,endpointer);
    CepstrumSource finalSource=endpointer;
    if (Boolean.getBoolean(""String_Node_Str"")) {
      finalSource=nonSpeechFilter;
    }
    CepstraViewer cepstraViewer=new CepstraViewer(""String_Node_Str"");
    cepstraViewer.show();
    List cepstraGroupList=new LinkedList();
    List cepstraList=new LinkedList();
    Cepstrum cepstrum=null;
    do {
      cepstrum=finalSource.getCepstrum();
      if (cepstrum != null) {
        cepstraList.add(cepstrum);
        Signal signal=cepstrum.getSignal();
        if (signal != null && signal.equals(Signal.UTTERANCE_END)) {
          Cepstrum[] cepstra=new Cepstrum[cepstraList.size()];
          cepstraList.toArray(cepstra);
          String name=""String_Node_Str"";
          for (int i=0; i < cepstra.length; i++) {
            if (cepstra[i].getUtterance() != null) {
              name=cepstra[i].getUtterance().getName();
              break;
            }
          }
          CepstraGroup cepstraGroup=new CepstraGroup(cepstra,name);
          cepstraViewer.addCepstraGroup(cepstraGroup);
          cepstraList=new LinkedList();
        }
      }
    }
 while (cepstrum != null);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9505946935041172
20045,"/** 
 * Implements update() method of LineListener interface. Responds to the START line event by waking up all the threads that are waiting on the Microphone's monitor.
 * @param event the LineEvent to handle
 */
public void update(LineEvent event){
  if (event.getType().equals(LineEvent.Type.START)) {
    setStarted(true);
synchronized (Microphone.this) {
      Microphone.this.notifyAll();
    }
  }
}","/** 
 * Implements update() method of LineListener interface. Responds to the START line event by waking up all the threads that are waiting on the Microphone's monitor.
 * @param event the LineEvent to handle
 */
public void update(LineEvent event){
  if (event.getType().equals(LineEvent.Type.START)) {
    setStarted(true);
synchronized (Microphone.this) {
      Microphone.this.notifyAll();
    }
  }
 else   if (event.getType().equals(LineEvent.Type.CLOSE)) {
    printMessage(""String_Node_Str"");
  }
}",0.8893756845564075
20046,"/** 
 * Records audio, and cache them in the audio buffer.
 */
private void record(){
  if (audioLine != null && audioLine.isOpen()) {
    Utterance currentUtterance=new Utterance(getContext());
    utteranceList.add(currentUtterance);
    printMessage(""String_Node_Str"");
    audioLine.start();
    while (getRecording() && !getClosed()) {
      byte[] data=new byte[frameSizeInBytes];
      int numBytesRead=audioLine.read(data,0,data.length);
      if (numBytesRead == frameSizeInBytes) {
        currentUtterance.add(data);
      }
 else {
        numBytesRead=(numBytesRead % 2 == 0) ? numBytesRead + 2 : numBytesRead + 3;
        byte[] shrinked=new byte[numBytesRead];
        System.arraycopy(data,0,shrinked,0,numBytesRead);
        currentUtterance.add(shrinked);
      }
      printMessage(""String_Node_Str"" + numBytesRead + ""String_Node_Str"");
    }
    audioLine.stop();
    audioLine.close();
    printMessage(""String_Node_Str"");
  }
 else {
    printMessage(""String_Node_Str"");
  }
}","/** 
 * Records audio, and cache them in the audio buffer.
 */
private void record(){
  if (audioLine != null && audioLine.isOpen()) {
    Utterance currentUtterance=new Utterance(getContext());
    utteranceList.add(currentUtterance);
    printMessage(""String_Node_Str"");
    audioLine.start();
    while (getRecording() && !getClosed()) {
      byte[] data=new byte[frameSizeInBytes];
      int numBytesRead=audioLine.read(data,0,data.length);
      if (numBytesRead == frameSizeInBytes) {
        currentUtterance.add(data);
      }
 else {
        numBytesRead=(numBytesRead % 2 == 0) ? numBytesRead + 2 : numBytesRead + 3;
        byte[] shrinked=new byte[numBytesRead];
        System.arraycopy(data,0,shrinked,0,numBytesRead);
        currentUtterance.add(shrinked);
      }
      printMessage(""String_Node_Str"" + numBytesRead + ""String_Node_Str"");
    }
    audioLine.drain();
    audioLine.stop();
    audioLine.close();
    printMessage(""String_Node_Str"");
  }
 else {
    printMessage(""String_Node_Str"");
  }
}",0.9886082218920258
20047,"/** 
 * Constructs a default Spectrum Analyzer with the given  SphinxProperties context.
 * @param name the name of this SpectrumAnalyzer
 * @param context the context of the SphinxProperties to use
 * @param predecessor the AudioSource from which to get Audio objects
 */
public SpectrumAnalyzer(String name,String context,AudioSource predecessor){
  super(name,context);
  initSphinxProperties();
  this.predecessor=predecessor;
  computeLogBase2(this.numberFftPoints);
  createWeightFft(numberFftPoints,false);
  initComplexArrays();
  weightFftTimesFrom2=new Complex();
}","/** 
 * Constructs a default Spectrum Analyzer with the given  SphinxProperties context.
 * @param name the name of this SpectrumAnalyzer
 * @param context the context of the SphinxProperties to use
 * @param predecessor the AudioSource from which to get Audio objects
 */
public SpectrumAnalyzer(String name,String context,AudioSource predecessor){
  super(name,context);
  initSphinxProperties();
  this.predecessor=predecessor;
  computeLogBase2(this.numberFftPoints);
  createWeightFft(numberFftPoints,false);
  initComplexArrays();
  weightFftTimesFrom2=new Complex();
  tempComplex=new Complex();
}",0.9754028837998304
20048,"/** 
 * Returns the next Audio from the input stream, or null if there is none available
 * @return a Audio or null
 * @throws java.io.IOException
 */
private Audio readNextFrame() throws IOException {
  int read=0;
  int totalRead=0;
  final int bytesToRead=frameSizeInBytes;
  byte[] samplesBuffer=new byte[frameSizeInBytes];
  do {
    read=audioStream.read(samplesBuffer,totalRead,bytesToRead - totalRead);
    if (read > 0) {
      totalRead+=read;
    }
  }
 while (read != -1 && totalRead < bytesToRead);
  if (totalRead <= 0) {
    streamEndReached=true;
    audioStream.close();
    return null;
  }
  if (totalRead < bytesToRead) {
    totalRead=(totalRead % 2 == 0) ? totalRead + 2 : totalRead + 3;
    streamEndReached=true;
    audioStream.close();
  }
  double[] doubleAudio=Util.byteToDoubleArray(samplesBuffer,0,totalRead);
  Audio audio=null;
  if (keepAudioReference) {
    currentUtterance.add(samplesBuffer);
    audio=new Audio(doubleAudio,currentUtterance);
  }
 else {
    audio=new Audio(doubleAudio);
  }
  if (getDump()) {
    System.out.println(""String_Node_Str"" + audio.toString());
  }
  return audio;
}","/** 
 * Returns the next Audio from the input stream, or null if there is none available
 * @return a Audio or null
 * @throws java.io.IOException
 */
private Audio readNextFrame() throws IOException {
  int read=0;
  int totalRead=0;
  final int bytesToRead=frameSizeInBytes;
  byte[] samplesBuffer=new byte[frameSizeInBytes];
  do {
    read=audioStream.read(samplesBuffer,totalRead,bytesToRead - totalRead);
    if (read > 0) {
      totalRead+=read;
    }
  }
 while (read != -1 && totalRead < bytesToRead);
  if (totalRead <= 0) {
    streamEndReached=true;
    audioStream.close();
    return null;
  }
  if (totalRead < bytesToRead) {
    totalRead=(totalRead % 2 == 0) ? totalRead + 2 : totalRead + 3;
    byte[] shrinkedBuffer=new byte[totalRead];
    System.arraycopy(samplesBuffer,0,shrinkedBuffer,0,totalRead);
    samplesBuffer=shrinkedBuffer;
    streamEndReached=true;
    audioStream.close();
  }
  double[] doubleAudio=Util.byteToDoubleArray(samplesBuffer,0,totalRead);
  Audio audio=null;
  if (keepAudioReference) {
    currentUtterance.add(samplesBuffer);
    audio=new Audio(doubleAudio,currentUtterance);
  }
 else {
    audio=new Audio(doubleAudio);
  }
  if (getDump()) {
    System.out.println(""String_Node_Str"" + audio.toString());
  }
  return audio;
}",0.8635420987142265
20049,"/** 
 * Constructs a default Utterance object.
 * @param context the context this Utterance is in
 */
public Utterance(String context){
  audioBuffer=new Vector();
  SphinxProperties properties=SphinxProperties.getSphinxProperties(context);
  sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
  float windowShiftInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SHIFT_MS,10.0F);
  windowSizeInBytes=Util.getSamplesPerWindow(sampleRate,windowSizeInMs) * 2;
  windowShiftInBytes=Util.getSamplesPerShift(sampleRate,windowShiftInMs) * 2;
}","/** 
 * Constructs a default Utterance object.
 * @param context the context this Utterance is in
 */
public Utterance(String context){
  audioBuffer=new Vector();
  SphinxProperties properties=SphinxProperties.getSphinxProperties(context);
  bitsPerSample=properties.getInt(FrontEnd.PROP_BITS_PER_SAMPLE,16);
  sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
  float windowShiftInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SHIFT_MS,10.0F);
  windowSizeInBytes=Util.getSamplesPerWindow(sampleRate,windowSizeInMs) * 2;
  windowShiftInBytes=Util.getSamplesPerShift(sampleRate,windowShiftInMs) * 2;
}",0.9476876421531464
20050,"private synchronized boolean isFlattened(){
  return flattened;
}","/** 
 * Returns true if all the audio data is flattened to one flat audio array.
 * @return true if all the audio data is flattened to one array
 */
private synchronized boolean isFlattened(){
  return flattened;
}",0.4659498207885305
20051,"/** 
 * Returns the total amount of audio time (in seconds) represented by the first frame to given frame.
 * @param frameNumber the given frame
 * @param properties the SphinxProperties object where informationabout window shift, window size, etc., can be retrieved
 * @return the total audio time in seconds
 */
public static float getAudioTime(int frameNumber,SphinxProperties properties){
  float audioTime=0.0f;
  if (frameNumber >= 1) {
    float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
    float windowShiftInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SHIFT_MS,10.0F);
    audioTime=(frameNumber - 1) * windowShiftInMs + windowSizeInMs;
    audioTime/=1000;
  }
  return audioTime;
}","/** 
 * Returns the total amount of audio time (in seconds) represented by the first frame to given frame. The first frame number is 0.
 * @param frameNumber the given frame
 * @param properties the SphinxProperties object where informationabout window shift, window size, etc., can be retrieved
 * @return the total audio time in seconds
 */
public static float getAudioTime(int frameNumber,SphinxProperties properties){
  float audioTime=0.0f;
  if (frameNumber >= 0) {
    float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
    float windowShiftInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SHIFT_MS,10.0F);
    audioTime=frameNumber * windowShiftInMs + windowSizeInMs;
    audioTime/=1000;
  }
  return audioTime;
}",0.9748811948404617
20052,"/** 
 * Returns the next Feature object, which is a FeatureFrame produced by this FeatureExtractor. It can also be other Feature type objects, such as EndPointSignal.FRAME_START.
 * @return the next available Feature object, returns null if noFeature object is available
 * @throws java.io.IOException if there is an error readingthe Feature objects
 * @see Feature
 * @see FeatureFrame
 */
public Feature getFeature() throws IOException {
  if (outputQueue.size() == 0) {
    Cepstrum input=(Cepstrum)peekableQueue.peekNext();
    if (input == null) {
      return null;
    }
 else {
      if (segmentEnd) {
        segmentEnd=false;
        outputQueue.add(new Feature(Signal.SEGMENT_END,getNextFeatureID()));
      }
 else       if (input.hasContent()) {
        int numberFeatures=readCepstra(featureBlockSize);
        if (numberFeatures > 0) {
          computeFeatures(numberFeatures);
        }
      }
 else       if (input.getSignal().equals(Signal.SEGMENT_START)) {
        input=(Cepstrum)peekableQueue.removeNext();
        segmentStart=true;
        outputQueue.add(new Feature(input.getSignal(),getNextFeatureID()));
      }
    }
  }
  if (outputQueue.size() > 0) {
    return (Feature)outputQueue.remove(0);
  }
 else {
    return null;
  }
}","/** 
 * Returns the next Feature object, which is a FeatureFrame produced by this FeatureExtractor. It can also be other Feature type objects, such as EndPointSignal.FRAME_START.
 * @return the next available Feature object, returns null if noFeature object is available
 * @throws java.io.IOException if there is an error readingthe Feature objects
 * @see Feature
 * @see FeatureFrame
 */
public Feature getFeature() throws IOException {
  if (outputQueue.size() == 0) {
    if (segmentEnd) {
      segmentEnd=false;
      outputQueue.add(new Feature(Signal.SEGMENT_END,getNextFeatureID()));
    }
 else {
      Cepstrum input=(Cepstrum)peekableQueue.peekNext();
      if (input == null) {
        return null;
      }
 else {
        if (input.hasContent()) {
          int numberFeatures=readCepstra(featureBlockSize);
          if (numberFeatures > 0) {
            computeFeatures(numberFeatures);
          }
        }
 else         if (input.getSignal().equals(Signal.SEGMENT_START)) {
          input=(Cepstrum)peekableQueue.removeNext();
          segmentStart=true;
          outputQueue.add(new Feature(input.getSignal(),getNextFeatureID()));
        }
      }
    }
  }
  if (outputQueue.size() > 0) {
    return (Feature)outputQueue.remove(0);
  }
 else {
    return null;
  }
}",0.8847962382445141
20053,"/** 
 * Returns a string representation of this AudioFrame.
 * @return a string representation of this AudioFrame
 */
public String toString(){
  return Util.doubleArrayToString(audioSamples);
}","/** 
 * Returns a string representation of this AudioFrame. The format of the string is: <pre>audioFrameLength data0 data1 ...</pre>
 * @return a string representation of this AudioFrame
 */
public String toString(){
  return Util.doubleArrayToString(audioSamples);
}",0.841648590021692
20054,"/** 
 * Returns the given Cepstrum, normalized.
 * @param input a Cepstrum
 * @return a normalized Cepstrum
 */
private Data process(Cepstrum cepstrumObject){
  getTimer().start();
  float[] cepstrum=cepstrumObject.getCepstrumData();
  for (int j=0; j < cepstrum.length; j++) {
    sum[j]+=cepstrum[j];
    cepstrum[j]-=currentMean[j];
  }
  numberFrame++;
  getTimer().stop();
  return cepstrumObject;
}","/** 
 * Returns the given Cepstrum, normalized.
 * @param input a Cepstrum
 * @return a normalized Cepstrum
 */
private Data process(Cepstrum cepstrumObject){
  getTimer().start();
  float[] cepstrum=cepstrumObject.getCepstrumData();
  for (int j=0; j < cepstrum.length; j++) {
    sum[j]+=cepstrum[j];
    cepstrum[j]-=currentMean[j];
  }
  numberFrame++;
  getTimer().stop();
  if (getDump()) {
    System.out.println(""String_Node_Str"" + cepstrumObject.toString());
  }
  return cepstrumObject;
}",0.8780487804878049
20055,"/** 
 * Returns the next Data object, which is a normalized Cepstrum produced by this class. However, it can also be other Data objects like a EndPointSignal.SEGMENT_START.
 * @return the next available Data object, returns null if noData object is available
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof Cepstrum) {
    return process((Cepstrum)input);
  }
 else   if (input instanceof EndPointSignal) {
    EndPointSignal signal=(EndPointSignal)input;
    if (signal.equals(EndPointSignal.FRAME_END)) {
      if (numberFrame > cmnShiftWindow) {
        updateMeanSumBuffers();
      }
    }
 else     if (signal.equals(EndPointSignal.SEGMENT_END)) {
      updateMeanSumBuffers();
    }
    return input;
  }
 else {
    return input;
  }
}","/** 
 * Returns the next Data object, which is a normalized Cepstrum produced by this class. However, it can also be other Data objects like a EndPointSignal.SEGMENT_START.
 * @return the next available Data object, returns null if noData object is available
 * @throws java.io.IOException if there is an error readingthe Data objects
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof Cepstrum) {
    return process((Cepstrum)input);
  }
 else   if (input instanceof EndPointSignal) {
    EndPointSignal signal=(EndPointSignal)input;
    if (signal.equals(EndPointSignal.FRAME_END)) {
      if (numberFrame > cmnShiftWindow) {
        updateMeanSumBuffers();
      }
    }
 else     if (signal.equals(EndPointSignal.SEGMENT_END)) {
      updateMeanSumBuffers();
    }
    return input;
  }
 else {
    return input;
  }
}",0.9543817527010804
20056,"/** 
 * Returns a string representation of this Cepstrum.
 * @return a string representation of this Cepstrum
 */
public String toString(){
  return (""String_Node_Str"" + Util.floatArrayToString(cepstrumData));
}","/** 
 * Returns a string representation of this Cepstrum. The format of the string is: <pre>cepstrumLength data0 data1 ...</pre>
 * @return a string representation of this Cepstrum
 */
public String toString(){
  return (Util.floatArrayToString(cepstrumData));
}",0.8076109936575053
20057,"/** 
 * Returns the name of this DataProcessor.
 * @return the name of this DataProcessor
 */
public String getName(){
  return name;
}","/** 
 * Returns the name of this DataProcessor.
 * @return the name of this DataProcessor
 */
public final String getName(){
  return name;
}",0.9782608695652174
20058,"/** 
 * Returns the SphinxProperties used by this DataProcessor.
 * @return the SphinxProperties
 */
public SphinxProperties getSphinxProperties(){
  return sphinxProperties;
}","/** 
 * Returns the SphinxProperties used by this DataProcessor.
 * @return the SphinxProperties
 */
public final SphinxProperties getSphinxProperties(){
  return sphinxProperties;
}",0.9832402234636872
20059,"/** 
 * Returns the context of this DataProcessor.
 * @return the context of this DataProcessor
 */
public String getContext(){
  return context;
}","/** 
 * Returns the context of this DataProcessor.
 * @return the context of this DataProcessor
 */
public final String getContext(){
  return context;
}",0.98
20060,"/** 
 * Returns a String representation of this Feature.
 * @return the String representation
 */
public String toString(){
  return ""String_Node_Str"" + Util.floatArrayToString(featureData);
}","/** 
 * Returns a String representation of this Feature. The format of the string is: <pre>featureLength data0 data1 ...</pre>
 * @return the String representation
 */
public String toString(){
  return Util.floatArrayToString(featureData);
}",0.7926267281105991
20061,"/** 
 * Computes the next feature. Advances the pointers as well.
 */
private Feature computeNextFeature(){
  float[] feature=new float[featureLength];
  float[] mfc3f=cepstraBuffer[jf3++];
  float[] mfc2f=cepstraBuffer[jf2++];
  float[] mfc1f=cepstraBuffer[jf1++];
  float[] current=cepstraBuffer[currentPosition++];
  float[] mfc1p=cepstraBuffer[jp1++];
  float[] mfc2p=cepstraBuffer[jp2++];
  float[] mfc3p=cepstraBuffer[jp3++];
  int j=cepstrumLength - 1;
  System.arraycopy(current,1,feature,0,j);
  for (int k=1; k < mfc2f.length; k++) {
    feature[j++]=(mfc2f[k] - mfc2p[k]);
  }
  feature[j++]=current[0];
  feature[j++]=mfc2f[0] - mfc2p[0];
  for (int k=0; k < mfc3f.length; k++) {
    feature[j++]=(mfc3f[k] - mfc1p[k]) - (mfc1f[k] - mfc3p[k]);
  }
  if (jp3 > BUFFER_EDGE) {
    jf3%=LIVEBUFBLOCKSIZE;
    jf2%=LIVEBUFBLOCKSIZE;
    jf1%=LIVEBUFBLOCKSIZE;
    currentPosition%=LIVEBUFBLOCKSIZE;
    jp1%=LIVEBUFBLOCKSIZE;
    jp2%=LIVEBUFBLOCKSIZE;
    jp3%=LIVEBUFBLOCKSIZE;
  }
  return (new Feature(feature));
}","/** 
 * Computes the next feature. Advances the pointers as well.
 */
private Feature computeNextFeature(){
  float[] feature=new float[featureLength];
  float[] mfc3f=cepstraBuffer[jf3++];
  float[] mfc2f=cepstraBuffer[jf2++];
  float[] mfc1f=cepstraBuffer[jf1++];
  float[] current=cepstraBuffer[currentPosition++];
  float[] mfc1p=cepstraBuffer[jp1++];
  float[] mfc2p=cepstraBuffer[jp2++];
  float[] mfc3p=cepstraBuffer[jp3++];
  int j=cepstrumLength - 1;
  System.arraycopy(current,1,feature,0,j);
  for (int k=1; k < mfc2f.length; k++) {
    feature[j++]=(mfc2f[k] - mfc2p[k]);
  }
  feature[j++]=current[0];
  feature[j++]=mfc2f[0] - mfc2p[0];
  for (int k=0; k < mfc3f.length; k++) {
    feature[j++]=(mfc3f[k] - mfc1p[k]) - (mfc1f[k] - mfc3p[k]);
  }
  if (jp3 > cepstraBufferEdge) {
    jf3%=cepstraBufferSize;
    jf2%=cepstraBufferSize;
    jf1%=cepstraBufferSize;
    currentPosition%=cepstraBufferSize;
    jp1%=cepstraBufferSize;
    jp2%=cepstraBufferSize;
    jp3%=cepstraBufferSize;
  }
  return (new Feature(feature));
}",0.8823244552058112
20062,"/** 
 * Replicate the last frame into the last window number of frames in the cepstraBuffer.
 */
private void replicateLastFrame(){
  if (bufferPosition >= 0) {
    float[] last=this.cepstraBuffer[bufferPosition - 1];
    if (bufferPosition + window < LIVEBUFBLOCKSIZE) {
      Arrays.fill(cepstraBuffer,bufferPosition,bufferPosition + window,last);
    }
 else {
      for (int i=0; i < window; i++) {
        this.cepstraBuffer[bufferPosition++]=last;
        bufferPosition%=LIVEBUFBLOCKSIZE;
      }
    }
  }
}","/** 
 * Replicate the last frame into the last window number of frames in the cepstraBuffer.
 */
private void replicateLastFrame(){
  if (bufferPosition >= 0) {
    float[] last=this.cepstraBuffer[bufferPosition - 1];
    if (bufferPosition + window < cepstraBufferSize) {
      Arrays.fill(cepstraBuffer,bufferPosition,bufferPosition + window,last);
    }
 else {
      for (int i=0; i < window; i++) {
        this.cepstraBuffer[bufferPosition++]=last;
        bufferPosition%=cepstraBufferSize;
      }
    }
  }
}",0.9437984496124032
20063,"/** 
 * Converts the Cepstrum data in the cepstraBuffer into a FeatureFrame.
 * @param the number of Features that will be produced
 * @return a FeatureFrame
 */
private FeatureFrame process(int totalFeatures){
  getTimer().start();
  assert(0 < totalFeatures && totalFeatures < LIVEBUFBLOCKSIZE);
  Feature[] features=new Feature[totalFeatures];
  for (int i=0; i < totalFeatures; i++) {
    features[i]=computeNextFeature();
  }
  FeatureFrame featureFrame=new FeatureFrame(features);
  getTimer().stop();
  if (getDump()) {
    System.out.println(featureFrame.toString());
  }
  return featureFrame;
}","/** 
 * Converts the Cepstrum data in the cepstraBuffer into a FeatureFrame.
 * @param the number of Features that will be produced
 * @return a FeatureFrame
 */
private FeatureFrame process(int totalFeatures){
  getTimer().start();
  assert(0 < totalFeatures && totalFeatures < cepstraBufferSize);
  Feature[] features=new Feature[totalFeatures];
  for (int i=0; i < totalFeatures; i++) {
    features[i]=computeNextFeature();
  }
  FeatureFrame featureFrame=new FeatureFrame(features);
  getTimer().stop();
  if (getDump()) {
    System.out.println(featureFrame.toString());
  }
  return featureFrame;
}",0.9760132340777502
20064,"/** 
 * Constructs a default FeatureExtractor.
 * @param context the context of the SphinxProperties to use
 */
public FeatureExtractor(String context){
  super(""String_Node_Str"",context);
  initSphinxProperties();
  cepstraBuffer=new float[LIVEBUFBLOCKSIZE][];
  inputQueue=new InputQueue();
}","/** 
 * Constructs a default FeatureExtractor.
 * @param context the context of the SphinxProperties to use
 */
public FeatureExtractor(String context){
  super(""String_Node_Str"",context);
  initSphinxProperties();
  cepstraBuffer=new float[cepstraBufferSize][];
  peekableQueue=new PeekableQueue();
}",0.9042016806722688
20065,"/** 
 * Returns the next Data object, which is a FeatureFrame produced by this FeatureExtractor.
 * @return the next available Data object, returns null if noData object is available
 * @see Feature
 * @see FeatureFrame
 */
public Data read() throws IOException {
  Data input=inputQueue.removeNext();
  if (input == null) {
    return null;
  }
 else {
    if (input instanceof EndPointSignal) {
      EndPointSignal signal=(EndPointSignal)input;
      if (signal.equals(EndPointSignal.FRAME_START)) {
        Data featureFrame=process(readCepstra());
        segmentStart=false;
        segmentEnd=false;
        return featureFrame;
      }
 else       if (signal.equals(EndPointSignal.SEGMENT_START)) {
        segmentStart=true;
        return input;
      }
 else {
        return input;
      }
    }
 else {
      return read();
    }
  }
}","/** 
 * Returns the next Data object, which is a FeatureFrame produced by this FeatureExtractor. It can also be other Data type objects, such as EndPointSignal.FRAME_START.
 * @return the next available Data object, returns null if noData object is available
 * @throws java.io.IOException if there is an error readingthe Data objects
 * @see Feature
 * @see FeatureFrame
 */
public Data read() throws IOException {
  Data input=peekableQueue.removeNext();
  if (input == null) {
    return null;
  }
 else {
    if (input instanceof EndPointSignal) {
      EndPointSignal signal=(EndPointSignal)input;
      if (signal.equals(EndPointSignal.FRAME_START)) {
        Data featureFrame=process(readCepstra());
        segmentStart=false;
        segmentEnd=false;
        return featureFrame;
      }
 else       if (signal.equals(EndPointSignal.SEGMENT_START)) {
        segmentStart=true;
        return input;
      }
 else {
        return input;
      }
    }
 else {
      return read();
    }
  }
}",0.2895732036736899
20066,"/** 
 * Replicate the given cepstrum into the last window number of frames in the cepstraBuffer.
 */
private void replicateFirstFrame(Cepstrum cepstrum){
  Arrays.fill(cepstraBuffer,0,window,cepstrum.getCepstrumData());
  bufferPosition=window;
  bufferPosition%=LIVEBUFBLOCKSIZE;
  currentPosition=bufferPosition;
  jp1=currentPosition - 1;
  jp2=currentPosition - 2;
  jp3=currentPosition - 3;
  jf1=currentPosition + 1;
  jf2=currentPosition + 2;
  jf3=currentPosition + 3;
  if (jp3 > BUFFER_EDGE) {
    jf3%=LIVEBUFBLOCKSIZE;
    jf2%=LIVEBUFBLOCKSIZE;
    jf1%=LIVEBUFBLOCKSIZE;
    jp1%=LIVEBUFBLOCKSIZE;
    jp2%=LIVEBUFBLOCKSIZE;
    jp3%=LIVEBUFBLOCKSIZE;
  }
}","/** 
 * Replicate the given cepstrum into the first window number of frames in the cepstraBuffer.
 * @param cepstrum the Cepstrum to replicate
 */
private void replicateFirstFrame(Cepstrum cepstrum){
  Arrays.fill(cepstraBuffer,0,window,cepstrum.getCepstrumData());
  bufferPosition=window;
  bufferPosition%=cepstraBufferSize;
  currentPosition=window;
  jp1=currentPosition - 1;
  jp2=currentPosition - 2;
  jp3=currentPosition - 3;
  jf1=currentPosition + 1;
  jf2=currentPosition + 2;
  jf3=currentPosition + 3;
  if (jp3 > cepstraBufferEdge) {
    jf3%=cepstraBufferSize;
    jf2%=cepstraBufferSize;
    jf1%=cepstraBufferSize;
    jp1%=cepstraBufferSize;
    jp2%=cepstraBufferSize;
    jp3%=cepstraBufferSize;
  }
}",0.4249820531227566
20067,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void initSphinxProperties(){
  SphinxProperties properties=getSphinxProperties();
  featureLength=properties.getInt(PROP_FEATURE_LENGTH,39);
  window=properties.getInt(PROP_FEATURE_WINDOW,3);
  cepstrumLength=properties.getInt(FrontEnd.PROP_CEPSTRUM_SIZE,13);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void initSphinxProperties(){
  SphinxProperties properties=getSphinxProperties();
  featureLength=properties.getInt(PROP_FEATURE_LENGTH,39);
  window=properties.getInt(PROP_FEATURE_WINDOW,3);
  cepstrumLength=properties.getInt(FrontEnd.PROP_CEPSTRUM_SIZE,13);
  cepstraBufferSize=properties.getInt(PROP_CEP_BUFFER_SIZE,256);
  cepstraBufferEdge=cepstraBufferSize - 8;
}",0.8663366336633663
20068,"/** 
 * Reads all the cepstra until we hit the next EndPointSignal. Returns the number of cepstra read. The last EndPointSignal is removed from the inputQueue.
 * @return the number of cepstra read
 * @throws java.io.IOException if error reading the cepstra
 */
private int readMiddleCepstra() throws IOException {
  int totalCepstra=0;
  Data nextFrame=null;
  while (!((nextFrame=inputQueue.removeNext()) instanceof EndPointSignal)) {
    if (nextFrame instanceof Cepstrum) {
      Cepstrum cepstrum=(Cepstrum)nextFrame;
      cepstraBuffer[bufferPosition++]=cepstrum.getCepstrumData();
      totalCepstra++;
      if (bufferPosition == LIVEBUFBLOCKSIZE) {
        bufferPosition=0;
      }
    }
  }
  return totalCepstra;
}","/** 
 * Reads all the cepstra until we hit the next EndPointSignal. Returns the number of cepstra read. The last EndPointSignal is removed from the peekableQueue.
 * @return the number of cepstra read
 * @throws java.io.IOException if error reading the cepstra
 */
private int readMiddleCepstra() throws IOException {
  int totalCepstra=0;
  Data nextFrame=null;
  while (!((nextFrame=peekableQueue.removeNext()) instanceof EndPointSignal)) {
    if (nextFrame instanceof Cepstrum) {
      Cepstrum cepstrum=(Cepstrum)nextFrame;
      cepstraBuffer[bufferPosition++]=cepstrum.getCepstrumData();
      totalCepstra++;
      if (bufferPosition == cepstraBufferSize) {
        bufferPosition=0;
      }
    }
  }
  return totalCepstra;
}",0.9623545516769336
20069,"/** 
 * Returns the total number of features that should result from the read Cepstra. This method is called after an EndPointSignal.FRAME_START is read. It will read all the Cepstrum in between the read EndPointSignal.FRAME_START and the next EndPointSignal.FRAME_END, and insert these Cepstrum into the cepstraBuffer.
 * @returns the number of features that should result from theread Cepstrum
 * @throws java.io.IOException if there is an error reading Cepstrum
 */
private int readCepstra() throws IOException {
  int totalFeatures=0;
  int residualVectors=0;
  Data firstFrame=inputQueue.peekNext();
  if (firstFrame instanceof Cepstrum) {
    if (segmentStart) {
      replicateFirstFrame((Cepstrum)inputQueue.removeNext());
      residualVectors-=window;
    }
    totalFeatures+=readMiddleCepstra();
    Data nextFrame=inputQueue.peekNext();
    if (nextFrame instanceof EndPointSignal) {
      EndPointSignal signal=(EndPointSignal)nextFrame;
      if (signal.equals(EndPointSignal.SEGMENT_END)) {
        replicateLastFrame();
        residualVectors+=window;
      }
    }
  }
  return totalFeatures + residualVectors;
}","/** 
 * Reads all the Cepstrum objects between the read EndPointSignal.FRAME_START and the next EndPointSignal.FRAME_END, and insert these Cepstrum into the cepstraBuffer. Returns the total number of features that should result from the read Cepstra. This method is called after an EndPointSignal.FRAME_START is read.
 * @returns the number of features that should result from theread Cepstrum
 * @throws java.io.IOException if there is an error reading Cepstrum
 */
private int readCepstra() throws IOException {
  int totalFeatures=0;
  int residualVectors=0;
  Data firstFrame=peekableQueue.peekNext();
  if (firstFrame instanceof Cepstrum) {
    if (segmentStart) {
      replicateFirstFrame((Cepstrum)firstFrame);
      residualVectors-=window;
    }
    totalFeatures+=readMiddleCepstra();
    Data nextFrame=peekableQueue.peekNext();
    if (nextFrame instanceof EndPointSignal) {
      EndPointSignal signal=(EndPointSignal)nextFrame;
      if (signal.equals(EndPointSignal.SEGMENT_END)) {
        replicateLastFrame();
        residualVectors+=window;
      }
    }
  }
  return totalFeatures + residualVectors;
}",0.7660896582334665
20070,"/** 
 * Process data, creating the mel cepstrum from an input audio frame.
 * @param input a MelSpectrum frame
 * @return a mel Cepstrum frame
 */
private Cepstrum process(MelSpectrum input) throws IllegalArgumentException {
  getTimer().start();
  double[] melspectrum=input.getMelSpectrumData();
  if (melspectrum.length != numberMelFilters) {
    throw new IllegalArgumentException(""String_Node_Str"" + melspectrum.length + ""String_Node_Str""+ numberMelFilters);
  }
  for (int i=0; i < melspectrum.length; ++i) {
    if (melspectrum[i] > 0) {
      melspectrum[i]=Math.log(melspectrum[i]);
    }
 else {
      melspectrum[i]=-1.0e+5;
    }
  }
  float[] cepstrumData=applyMelCosine(melspectrum);
  getTimer().stop();
  Cepstrum cepstrum=new Cepstrum(cepstrumData);
  if (getDump()) {
    System.out.println(cepstrum.toString());
  }
  return cepstrum;
}","/** 
 * Process data, creating the mel cepstrum from an input audio frame.
 * @param input a MelSpectrum frame
 * @return a mel Cepstrum frame
 */
private Cepstrum process(MelSpectrum input) throws IllegalArgumentException {
  getTimer().start();
  double[] melspectrum=input.getMelSpectrumData();
  if (melspectrum.length != numberMelFilters) {
    throw new IllegalArgumentException(""String_Node_Str"" + melspectrum.length + ""String_Node_Str""+ numberMelFilters);
  }
  for (int i=0; i < melspectrum.length; ++i) {
    if (melspectrum[i] > 0) {
      melspectrum[i]=Math.log(melspectrum[i]);
    }
 else {
      melspectrum[i]=-1.0e+5;
    }
  }
  float[] cepstrumData=applyMelCosine(melspectrum);
  getTimer().stop();
  Cepstrum cepstrum=new Cepstrum(cepstrumData);
  if (getDump()) {
    System.out.println(""String_Node_Str"" + cepstrum.toString());
  }
  return cepstrum;
}",0.9884393063583816
20071,"/** 
 * Returns the next Data object, which is the mel cepstrum of the input frame. However, it can also be other Data objects like a EndPointSignal.
 * @return the next available Data object, returns null if noData object is available
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof MelSpectrum) {
    input=process((MelSpectrum)input);
  }
  return input;
}","/** 
 * Returns the next Data object, which is the mel cepstrum of the input frame. However, it can also be other Data objects like a EndPointSignal.
 * @return the next available Data object, returns null if noData object is available
 * @throws java.io.IOException if there is an error readingthe Data objects
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof MelSpectrum) {
    input=process((MelSpectrum)input);
  }
  return input;
}",0.8685968819599109
20072,"/** 
 * Constructs a filter from the parameters. In the current implementation, the filter is a bandpass filter with a triangular shape.  We're given the left and right edges and the center frequency, so we can determine the right and left slopes, which could be not only assymmetric but completely different. We're also given the initial frequency, which may or may not coincide with the left edge, and the frequency step.
 * @param leftEdge the filter's lowest passing frequency
 * @param centerFreq the filter's center frequency
 * @param rightEdge the filter's highest passing frequency
 * @param initialFreq the first frequency bin in the pass band
 * @param deltaFreq the step in the frequency axis betweenfrequency bins
 * @param samplingRate sampling frequency
 */
public void createMelFilter(double leftEdge,double centerFreq,double rightEdge,double initialFreq,double deltaFreq,int samplingRate){
  double filterHeight;
  double leftSlope;
  double rightSlope;
  double currentFreq;
  int indexFilterWeight;
  int numberElementsWeightField;
  numberElementsWeightField=(int)Math.round((rightEdge - leftEdge) / deltaFreq + 1);
  weight=new double[numberElementsWeightField];
  filterHeight=2.0f / (rightEdge - leftEdge);
  leftSlope=filterHeight / (centerFreq - leftEdge);
  rightSlope=filterHeight / (rightEdge - centerFreq);
  for (currentFreq=initialFreq, indexFilterWeight=0; currentFreq <= rightEdge; currentFreq+=deltaFreq, indexFilterWeight++) {
    if (currentFreq < centerFreq) {
      weight[indexFilterWeight]=leftSlope * (currentFreq - leftEdge);
    }
 else {
      weight[indexFilterWeight]=filterHeight + rightSlope * (currentFreq - centerFreq);
    }
  }
  this.initialFreqIndex=(int)Math.round(initialFreq / deltaFreq);
}","/** 
 * Constructs a filter from the parameters. In the current implementation, the filter is a bandpass filter with a triangular shape.  We're given the left and right edges and the center frequency, so we can determine the right and left slopes, which could be not only assymmetric but completely different. We're also given the initial frequency, which may or may not coincide with the left edge, and the frequency step.
 * @param leftEdge the filter's lowest passing frequency
 * @param centerFreq the filter's center frequency
 * @param rightEdge the filter's highest passing frequency
 * @param initialFreq the first frequency bin in the pass band
 * @param deltaFreq the step in the frequency axis betweenfrequency bins
 * @param samplingRate sampling frequency
 */
public void createMelFilter(double leftEdge,double centerFreq,double rightEdge,double initialFreq,double deltaFreq,int samplingRate){
  double filterHeight;
  double leftSlope;
  double rightSlope;
  double currentFreq;
  int indexFilterWeight;
  int numberElementsWeightField;
  numberElementsWeightField=(int)Math.round((rightEdge - leftEdge) / deltaFreq + 1);
  weight=new double[numberElementsWeightField];
  filterHeight=2.0f / (rightEdge - leftEdge);
  leftSlope=filterHeight / (centerFreq - leftEdge);
  rightSlope=filterHeight / (centerFreq - rightEdge);
  for (currentFreq=initialFreq, indexFilterWeight=0; currentFreq <= rightEdge; currentFreq+=deltaFreq, indexFilterWeight++) {
    if (currentFreq < centerFreq) {
      weight[indexFilterWeight]=leftSlope * (currentFreq - leftEdge);
    }
 else {
      weight[indexFilterWeight]=filterHeight + rightSlope * (currentFreq - centerFreq);
    }
  }
  this.initialFreqIndex=(int)Math.round(initialFreq / deltaFreq);
}",0.9925586720091586
20073,"/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output+=spectrum[this.initialFreqIndex + i] * this.weight[i];
    }
  }
  return output;
}","/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output+=spectrum[indexSpectrum] * this.weight[i];
    }
  }
  return output;
}",0.9751655629139072
20074,"/** 
 * Compute mel frequency from linear frequency. Since we don't have <code>log10()</code>, we have to compute it using natural log: <b>log10(x) = ln(x) / ln(10)</b>
 * @param inputFreq the input frequency in linear scale
 * @return the frequency in a mel scale
 */
private double linToMelFreq(double inputFreq){
  return (2595.0 + (Math.log(1.0 + inputFreq / 700.0) / Math.log(10.0)));
}","/** 
 * Compute mel frequency from linear frequency. Since we don't have <code>log10()</code>, we have to compute it using natural log: <b>log10(x) = ln(x) / ln(10)</b>
 * @param inputFreq the input frequency in linear scale
 * @return the frequency in a mel scale
 */
private double linToMelFreq(double inputFreq){
  return (2595.0 * (Math.log(1.0 + inputFreq / 700.0) / Math.log(10.0)));
}",0.90537084398977
20075,"/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input Power Spectrum
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private MelSpectrum process(Spectrum input) throws IllegalArgumentException {
  MelSpectrum outputMelSpectrum;
  getTimer().start();
  double[] in=input.getSpectrumData();
  if (in.length != (NPoint >> 1)) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ NPoint);
  }
  double[] outputMelFilterbank=new double[numberFilters];
  for (int i=0; i < numberFilters; i++) {
    outputMelFilterbank[i]=filter[i].filterOutput(in);
  }
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputMelFilterbank,""String_Node_Str"",20,10));
  }
  outputMelSpectrum=new MelSpectrum(outputMelFilterbank);
  return outputMelSpectrum;
}","/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input Power Spectrum
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private MelSpectrum process(Spectrum input) throws IllegalArgumentException {
  MelSpectrum outputMelSpectrum;
  getTimer().start();
  double[] in=input.getSpectrumData();
  if (in.length != (NPoint >> 1)) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ NPoint);
  }
  double[] outputMelFilterbank=new double[numberFilters];
  for (int i=0; i < numberFilters; i++) {
    outputMelFilterbank[i]=filter[i].filterOutput(in);
  }
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputMelFilterbank,""String_Node_Str"",12,5));
  }
  outputMelSpectrum=new MelSpectrum(outputMelFilterbank);
  return outputMelSpectrum;
}",0.9971639251276234
20076,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 * @param context the context of the SphinxProperties used
 */
private void initSphinxProperties(String context){
  setSphinxProperties(context);
  SphinxProperties properties=getSphinxProperties();
  sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  NPoint=properties.getInt(PROP_NPOINT,512);
  numberFilters=properties.getInt(PROP_NUMBER_FILTERS,40);
  minFreq=properties.getDouble(PROP_MIN_FREQ,133.33334);
  maxFreq=properties.getDouble(PROP_MAX_FREQ,6855.4976);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 * @param context the context of the SphinxProperties used
 */
private void initSphinxProperties(String context){
  setSphinxProperties(context);
  SphinxProperties properties=getSphinxProperties();
  sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  NPoint=properties.getInt(PROP_NPOINT,512);
  numberFilters=properties.getInt(PROP_NUMBER_FILTERS,31);
  minFreq=properties.getDouble(PROP_MIN_FREQ,200);
  maxFreq=properties.getDouble(PROP_MAX_FREQ,3500);
}",0.975609756097561
20077,"/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param NPoint number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 */
private void buildFilterbank(int NPoint,int numberFilters,double minFreq,double maxFreq){
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double leftEdge;
  double centerFreq;
  double centerFreqMel;
  double rightEdge;
  double rightEdgeMel;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  deltaFreq=(double)sampleRate / NPoint;
  leftEdge=minFreq;
  centerFreqMel=minFreqMel + deltaFreqMel;
  centerFreq=melToLinFreq(centerFreqMel);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=Math.round((leftEdge / deltaFreq) * (sampleRate / 2));
    rightEdgeMel=centerFreqMel + deltaFreqMel;
    rightEdge=melToLinFreq(rightEdgeMel);
    this.filter[i]=new MelFilter();
    this.filter[i].createMelFilter(leftEdge,centerFreq,rightEdge,initialFreqBin,deltaFreq,(sampleRate >> 1));
    leftEdge=centerFreq;
    centerFreq=rightEdge;
  }
}","/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param NPoint number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 */
private void buildFilterbank(int NPoint,int numberFilters,double minFreq,double maxFreq){
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double leftEdge;
  double centerFreq;
  double centerFreqMel;
  double rightEdge;
  double rightEdgeMel;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  deltaFreq=(double)sampleRate / NPoint;
  leftEdge=minFreq;
  centerFreqMel=minFreqMel + deltaFreqMel;
  centerFreq=melToLinFreq(centerFreqMel);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=Math.round((leftEdge / deltaFreq)) * deltaFreq;
    rightEdgeMel=centerFreqMel + deltaFreqMel;
    rightEdge=melToLinFreq(rightEdgeMel);
    this.filter[i]=new MelFilter();
    this.filter[i].createMelFilter(leftEdge,centerFreq,rightEdge,initialFreqBin,deltaFreq,(sampleRate >> 1));
    leftEdge=centerFreq;
    centerFreq=rightEdge;
    centerFreqMel=rightEdgeMel;
  }
}",0.9811561801341424
20078,"/** 
 * Sets the given frequency to the nearest frequency bin from the DFT.  The DFT can be thought of as a sampling of the actual spectrum of a signal. We use this function to find the sampling point of the spectrum that is closest to the given frequency.
 * @param inFreq the input frequency
 * @param stepFreq the distance between frequency bins
 * @return the closest frequency bin
 * @throw IllegalArgumentException
 */
private double setToNearestFrequencyBin(double inFreq,double stepFreq) throws IllegalArgumentException {
  if (stepFreq == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return stepFreq * Math.round(inFreq / stepFreq);
}","/** 
 * Sets the given frequency to the nearest frequency bin from the DFT.  The DFT can be thought of as a sampling of the actual spectrum of a signal. We use this function to find the sampling point of the spectrum that is closest to the given frequency.
 * @param inFreq the input frequency
 * @param stepFreq the distance between frequency bins
 * @return the closest frequency bin
 * @throws IllegalArgumentException
 */
private double setToNearestFrequencyBin(double inFreq,double stepFreq) throws IllegalArgumentException {
  if (stepFreq == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return stepFreq * Math.round(inFreq / stepFreq);
}",0.99925205684368
20079,"/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param numberDftPoints number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 * @throw IllegalArgumentException
 */
private void buildFilterbank(int numberDftPoints,int numberFilters,double minFreq,double maxFreq) throws IllegalArgumentException {
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double[] leftEdge=new double[numberFilters];
  double[] centerFreq=new double[numberFilters];
  double[] rightEdge=new double[numberFilters];
  double nextEdgeMel;
  double nextEdge;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  if (numberDftPoints == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  deltaFreq=(double)sampleRate / numberDftPoints;
  if (numberFilters < 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + numberFilters);
  }
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  leftEdge[0]=setToNearestFrequencyBin(minFreq,deltaFreq);
  nextEdgeMel=minFreqMel;
  for (int i=0; i < numberFilters; i++) {
    nextEdgeMel+=deltaFreqMel;
    nextEdge=melToLinFreq(nextEdgeMel);
    centerFreq[i]=setToNearestFrequencyBin(nextEdge,deltaFreq);
    if (i > 0) {
      rightEdge[i - 1]=centerFreq[i];
    }
    if (i < numberFilters - 1) {
      leftEdge[i + 1]=centerFreq[i];
    }
  }
  nextEdgeMel=nextEdgeMel + deltaFreqMel;
  nextEdge=melToLinFreq(nextEdgeMel);
  rightEdge[numberFilters - 1]=setToNearestFrequencyBin(nextEdge,deltaFreq);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=setToNearestFrequencyBin(leftEdge[i],deltaFreq);
    if (initialFreqBin < leftEdge[i]) {
      initialFreqBin+=deltaFreq;
    }
    this.filter[i]=new MelFilter(leftEdge[i],centerFreq[i],rightEdge[i],initialFreqBin,deltaFreq);
  }
}","/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param numberDftPoints number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 * @throws IllegalArgumentException
 */
private void buildFilterbank(int numberDftPoints,int numberFilters,double minFreq,double maxFreq) throws IllegalArgumentException {
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double[] leftEdge=new double[numberFilters];
  double[] centerFreq=new double[numberFilters];
  double[] rightEdge=new double[numberFilters];
  double nextEdgeMel;
  double nextEdge;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  if (numberDftPoints == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  deltaFreq=(double)sampleRate / numberDftPoints;
  if (numberFilters < 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + numberFilters);
  }
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  leftEdge[0]=setToNearestFrequencyBin(minFreq,deltaFreq);
  nextEdgeMel=minFreqMel;
  for (int i=0; i < numberFilters; i++) {
    nextEdgeMel+=deltaFreqMel;
    nextEdge=melToLinFreq(nextEdgeMel);
    centerFreq[i]=setToNearestFrequencyBin(nextEdge,deltaFreq);
    if (i > 0) {
      rightEdge[i - 1]=centerFreq[i];
    }
    if (i < numberFilters - 1) {
      leftEdge[i + 1]=centerFreq[i];
    }
  }
  nextEdgeMel=nextEdgeMel + deltaFreqMel;
  nextEdge=melToLinFreq(nextEdgeMel);
  rightEdge[numberFilters - 1]=setToNearestFrequencyBin(nextEdge,deltaFreq);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=setToNearestFrequencyBin(leftEdge[i],deltaFreq);
    if (initialFreqBin < leftEdge[i]) {
      initialFreqBin+=deltaFreq;
    }
    this.filter[i]=new MelFilter(leftEdge[i],centerFreq[i],rightEdge[i],initialFreqBin,deltaFreq);
  }
}",0.99977939554379
20080,"/** 
 * Constructs a Spectrum with the given spectra data.
 * @params melSpectralData a vector containing a frame's mel spectrum
 */
public MelSpectrum(double[] melSpectralData){
  this.melSpectralData=melSpectralData;
}","/** 
 * Constructs a Spectrum with the given spectra data.
 * @param melSpectralData a vector containing a frame's mel spectrum
 */
public MelSpectrum(double[] melSpectralData){
  this.melSpectralData=melSpectralData;
}",0.9977220956719818
20081,"/** 
 * Constructs a Spectrum with the given spectra data.
 * @params spectraData a frame's spectral data
 */
public Spectrum(double[] spectraData){
  this.spectraData=spectraData;
}","/** 
 * Constructs a Spectrum with the given spectra data.
 * @param spectraData a frame's spectral data
 */
public Spectrum(double[] spectraData){
  this.spectraData=spectraData;
}",0.9972451790633609
20082,"/** 
 * Process data, creating the mel cepstrum from an input audio frame.
 * @param input a MelSpectrum frame
 * @return a mel Cepstrum frame
 */
private Cepstrum process(Spectrum input) throws IllegalArgumentException {
  getTimer().start();
  double[] melspectrum=input.getSpectrumData();
  if (melspectrum.length != numberMelFilters) {
    throw new IllegalArgumentException(""String_Node_Str"" + melspectrum.length + ""String_Node_Str""+ numberMelFilters);
  }
  for (int i=0; i < melspectrum.length; ++i) {
    if (melspectrum[i] > 0) {
      melspectrum[i]=Math.log(melspectrum[i]);
    }
 else {
      melspectrum[i]=-1.0e+5;
    }
  }
  float[] cepstrumData=applyMelCosine(melspectrum);
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpFloatArray(cepstrumData,""String_Node_Str""));
  }
  return (new Cepstrum(cepstrumData));
}","/** 
 * Process data, creating the mel cepstrum from an input audio frame.
 * @param input a MelSpectrum frame
 * @return a mel Cepstrum frame
 */
private Cepstrum process(MelSpectrum input) throws IllegalArgumentException {
  getTimer().start();
  double[] melspectrum=input.getMelSpectrumData();
  if (melspectrum.length != numberMelFilters) {
    throw new IllegalArgumentException(""String_Node_Str"" + melspectrum.length + ""String_Node_Str""+ numberMelFilters);
  }
  for (int i=0; i < melspectrum.length; ++i) {
    if (melspectrum[i] > 0) {
      melspectrum[i]=Math.log(melspectrum[i]);
    }
 else {
      melspectrum[i]=-1.0e+5;
    }
  }
  float[] cepstrumData=applyMelCosine(melspectrum);
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpFloatArray(cepstrumData,""String_Node_Str""));
  }
  return (new Cepstrum(cepstrumData));
}",0.9964953271028038
20083,"/** 
 * Returns the next Data object, which is the mel cepstrum of the input frame. However, it can also be other Data objects like a EndPointSignal.
 * @return the next available Data object, returns null if noData object is available
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof Spectrum) {
    input=process((Spectrum)input);
  }
  return input;
}","/** 
 * Returns the next Data object, which is the mel cepstrum of the input frame. However, it can also be other Data objects like a EndPointSignal.
 * @return the next available Data object, returns null if noData object is available
 */
public Data read() throws IOException {
  Data input=getSource().read();
  if (input instanceof MelSpectrum) {
    input=process((MelSpectrum)input);
  }
  return input;
}",0.9926470588235294
20084,"/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output=spectrum[indexSpectrum] * this.weight[i];
    }
  }
  return output;
}","/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output+=spectrum[indexSpectrum] * this.weight[i];
    }
  }
  return output;
}",0.999163179916318
20085,"public MelFilter(){
}","/** 
 * Constructs a filter from the parameters. In the current implementation, the filter is a bandpass filter with a triangular shape.  We're given the left and right edges and the center frequency, so we can determine the right and left slopes, which could be not only assymmetric but completely different. We're also given the initial frequency, which may or may not coincide with the left edge, and the frequency step.
 * @param leftEdge the filter's lowest passing frequency
 * @param centerFreq the filter's center frequency
 * @param rightEdge the filter's highest passing frequency
 * @param initialFreq the first frequency bin in the pass band
 * @param deltaFreq the step in the frequency axis betweenfrequency bins
 * @param samplingRate sampling frequency
 */
public MelFilter(double leftEdge,double centerFreq,double rightEdge,double initialFreq,double deltaFreq){
  double filterHeight;
  double leftSlope;
  double rightSlope;
  double currentFreq;
  int indexFilterWeight;
  int numberElementsWeightField;
  numberElementsWeightField=(int)Math.round((rightEdge - leftEdge) / deltaFreq + 1);
  weight=new double[numberElementsWeightField];
  filterHeight=2.0f / (rightEdge - leftEdge);
  leftSlope=filterHeight / (centerFreq - leftEdge);
  rightSlope=filterHeight / (centerFreq - rightEdge);
  for (currentFreq=initialFreq, indexFilterWeight=0; currentFreq <= rightEdge; currentFreq+=deltaFreq, indexFilterWeight++) {
    if (currentFreq < centerFreq) {
      weight[indexFilterWeight]=leftSlope * (currentFreq - leftEdge);
    }
 else {
      weight[indexFilterWeight]=filterHeight + rightSlope * (currentFreq - centerFreq);
    }
  }
  this.initialFreqIndex=(int)Math.round(initialFreq / deltaFreq);
}",0.0241379310344827
20086,"/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output+=spectrum[indexSpectrum] * this.weight[i];
    }
  }
  return output;
}","/** 
 * Compute the output of a filter. We're given a power spectrum, to which we apply the appropriate weights.
 * @param spectrum the input power spectrum to be filtered
 * @return the filtered value, in fact a weighted average of power inthe frequency range of the filter pass band
 */
public double filterOutput(double[] spectrum){
  double output=0.0f;
  int indexSpectrum;
  for (int i=0; i < this.weight.length; i++) {
    indexSpectrum=this.initialFreqIndex + i;
    if (indexSpectrum < spectrum.length) {
      output=spectrum[indexSpectrum] * this.weight[i];
    }
  }
  return output;
}",0.999163179916318
20087,"/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input Power Spectrum
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private MelSpectrum process(Spectrum input) throws IllegalArgumentException {
  MelSpectrum outputMelSpectrum;
  getTimer().start();
  double[] in=input.getSpectrumData();
  if (in.length != (NPoint >> 1)) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ NPoint);
  }
  double[] outputMelFilterbank=new double[numberFilters];
  for (int i=0; i < numberFilters; i++) {
    outputMelFilterbank[i]=filter[i].filterOutput(in);
  }
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputMelFilterbank,""String_Node_Str"",12,5));
  }
  outputMelSpectrum=new MelSpectrum(outputMelFilterbank);
  return outputMelSpectrum;
}","/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input Power Spectrum
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private MelSpectrum process(Spectrum input) throws IllegalArgumentException {
  MelSpectrum outputMelSpectrum;
  getTimer().start();
  double[] in=input.getSpectrumData();
  if (in.length != (NPoint >> 1)) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ NPoint);
  }
  double[] outputMelFilterbank=new double[numberFilters];
  for (int i=0; i < numberFilters; i++) {
    outputMelFilterbank[i]=filter[i].filterOutput(in);
  }
  getTimer().stop();
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputMelFilterbank,""String_Node_Str"",9,5));
  }
  outputMelSpectrum=new MelSpectrum(outputMelFilterbank);
  return outputMelSpectrum;
}",0.9982964224872232
20088,"/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param NPoint number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 */
private void buildFilterbank(int NPoint,int numberFilters,double minFreq,double maxFreq){
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double leftEdge;
  double centerFreq;
  double centerFreqMel;
  double rightEdge;
  double rightEdgeMel;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  deltaFreq=(double)sampleRate / NPoint;
  leftEdge=minFreq;
  centerFreqMel=minFreqMel + deltaFreqMel;
  centerFreq=melToLinFreq(centerFreqMel);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=Math.round((leftEdge / deltaFreq)) * deltaFreq;
    rightEdgeMel=centerFreqMel + deltaFreqMel;
    rightEdge=melToLinFreq(rightEdgeMel);
    this.filter[i]=new MelFilter();
    this.filter[i].createMelFilter(leftEdge,centerFreq,rightEdge,initialFreqBin,deltaFreq,(sampleRate >> 1));
    leftEdge=centerFreq;
    centerFreq=rightEdge;
    centerFreqMel=rightEdgeMel;
  }
}","/** 
 * Build a mel filterbank with the parameters given. Each filter will be shaped as a triangle. The triangles overlap so that they cover the whole frequency range requested. The edges of a given triangle will be by default at the center of the  neighboring triangles.
 * @param NPoint number of points in the power spectrum
 * @param numberFilters number of filters in the filterbank
 * @param minFreq lowest frequency in the range of interest
 * @param maxFreq highest frequency in the range of interest
 */
private void buildFilterbank(int NPoint,int numberFilters,double minFreq,double maxFreq){
  double minFreqMel;
  double maxFreqMel;
  double deltaFreqMel;
  double[] leftEdge=new double[numberFilters];
  double[] centerFreq=new double[numberFilters];
  double[] rightEdge=new double[numberFilters];
  double nextEdgeMel;
  double nextEdge;
  double initialFreqBin;
  double deltaFreq;
  this.filter=new MelFilter[numberFilters];
  deltaFreq=(double)sampleRate / NPoint;
  minFreqMel=linToMelFreq(minFreq);
  maxFreqMel=linToMelFreq(maxFreq);
  deltaFreqMel=(maxFreqMel - minFreqMel) / (numberFilters + 1);
  leftEdge[0]=setToNearestFrequencyBin(minFreq,deltaFreq);
  nextEdgeMel=minFreqMel;
  for (int i=0; i < numberFilters; i++) {
    nextEdgeMel+=deltaFreqMel;
    nextEdge=melToLinFreq(nextEdgeMel);
    centerFreq[i]=setToNearestFrequencyBin(nextEdge,deltaFreq);
    if (i > 0) {
      rightEdge[i - 1]=centerFreq[i];
    }
    if (i < numberFilters - 1) {
      leftEdge[i + 1]=centerFreq[i];
    }
  }
  nextEdgeMel=nextEdgeMel + deltaFreqMel;
  nextEdge=melToLinFreq(nextEdgeMel);
  rightEdge[numberFilters - 1]=setToNearestFrequencyBin(nextEdge,deltaFreq);
  for (int i=0; i < numberFilters; i++) {
    initialFreqBin=setToNearestFrequencyBin(leftEdge[i],deltaFreq);
    if (initialFreqBin < leftEdge[i]) {
      initialFreqBin+=deltaFreq;
    }
    this.filter[i]=new MelFilter(leftEdge[i],centerFreq[i],rightEdge[i],initialFreqBin,deltaFreq);
  }
}",0.5791549295774648
20089,"/** 
 * Returns a FeatureFrame, EndPointSignal.SEGMENT_START, or EndPointSignal.SEGMENT_END signals produced by this FrontEnd. Return null if no Data available
 * @return a Data object, which is usually a FeatureFrame, or nullif no Data available
 */
public Data read(){
synchronized (queue) {
    if (queue.size() == 0) {
      return null;
    }
 else {
      Object data=queue.get(0);
      if (data == null) {
        return null;
      }
 else {
        return (Data)data;
      }
    }
  }
}","/** 
 * Returns the next Data object produced by the FrontEnd, which can be a FeatureFrame, EndPointSignal.SEGMENT_START, or EndPointSignal.SEGMENT_END signals produced by this FrontEnd. Return null if no Data available
 * @return a Data object, which is usually a FeatureFrame, or nullif no Data available
 */
public Data read(){
synchronized (queue) {
    if (queue.size() == 0) {
      return null;
    }
 else {
      Object data=queue.remove(0);
      if (data == null) {
        return null;
      }
 else {
        return (Data)data;
      }
    }
  }
}",0.934720908230842
20090,"/** 
 * Initializes the <b>Wk[]</b> vector. <b>Wk[k] = w ^ k</b> where: <b>w = exp(-2 * PI * i / N)</b> <b>i</b> is a complex number such that <b>i * i = -1</b> and <b>N</b> is the number of points in the FFT. Since <b>w</b> is complex, this is the same as <b>Re(Wk[k]) = cos ( -2 * PI * k / N)</b> <b>Im(Wk[k]) = sin ( -2 * PI * k / N)</b>
 * @param N number of points in the FFT
 * @param invert whether it's direct (false) or inverse (true) FFT
 */
private void createWk(int N,boolean invert){
  Wk=new Complex[N >> 1];
  double w=-2 * Math.PI / N;
  if (invert == true) {
    w=-w;
  }
  for (int k=0; k < N / 2; k++) {
    Wk[k]=new Complex(Math.cos(w * k),Math.sin(w * k));
  }
}","/** 
 * Initializes the <b>Wk[]</b> vector. <b>Wk[k] = w ^ k</b> where: <b>w = exp(-2 * PI * i / N)</b> <b>i</b> is a complex number such that <b>i * i = -1</b> and <b>N</b> is the number of points in the FFT. Since <b>w</b> is complex, this is the same as <b>Re(Wk[k]) = cos ( -2 * PI * k / N)</b> <b>Im(Wk[k]) = sin ( -2 * PI * k / N)</b>
 * @param N number of points in the FFT
 * @param invert whether it's direct (false) or inverse (true) FFT
 */
private void createWk(int N,boolean invert){
  Wk=new Complex[N >> 1];
  double w=-2 * Math.PI / N;
  if (invert == true) {
    w=-w;
  }
  for (int k=0; k < (N / 2); k++) {
    Wk[k]=new Complex(Math.cos(w * k),Math.sin(w * k));
  }
}",0.998542274052478
20091,"/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input audio frame
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private Spectrum process(AudioFrame input) throws IllegalArgumentException {
  double[] in=input.getAudioSamples();
  if (in.length != windowSize) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ windowSize);
  }
  Complex[] inputSeq=new Complex[NPoint];
  if (NPoint < windowSize) {
    for (int i=0; i < NPoint; i++) {
      inputSeq[i]=new Complex((double)in[i]);
    }
    for (int i=NPoint; i < windowSize; i++) {
      inputSeq[i % NPoint].addComplex(inputSeq[i % NPoint],new Complex((double)in[i]));
    }
  }
 else {
    for (int i=0; i < windowSize; i++) {
      inputSeq[i]=new Complex((double)in[i]);
    }
    for (int i=windowSize; i < NPoint; i++) {
      inputSeq[i]=new Complex();
    }
  }
  double[] outputSpectrum=new double[NPoint];
  recurseFFT(inputSeq,outputSpectrum,NPoint,false);
  Spectrum output=new Spectrum(outputSpectrum);
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputSpectrum,""String_Node_Str""));
  }
  return output;
}","/** 
 * Process data, creating the power spectrum from an input audio frame.
 * @param input input audio frame
 * @return power spectrum
 * @throws java.lang.IllegalArgumentException
 */
private Spectrum process(AudioFrame input) throws IllegalArgumentException {
  double[] in=input.getAudioSamples();
  if (in.length != windowSize) {
    throw new IllegalArgumentException(""String_Node_Str"" + in.length + ""String_Node_Str""+ windowSize);
  }
  Complex[] inputSeq=new Complex[NPoint];
  if (NPoint < windowSize) {
    for (int i=0; i < NPoint; i++) {
      inputSeq[i]=new Complex(in[i]);
    }
    for (int i=NPoint; i < windowSize; i++) {
      inputSeq[i % NPoint].addComplex(inputSeq[i % NPoint],new Complex(in[i]));
    }
  }
 else {
    for (int i=0; i < windowSize; i++) {
      inputSeq[i]=new Complex(in[i]);
    }
    for (int i=windowSize; i < NPoint; i++) {
      inputSeq[i]=new Complex();
    }
  }
  double[] outputSpectrum=new double[NPoint >> 1];
  recurseFFT(inputSeq,outputSpectrum,NPoint,false);
  Spectrum output=new Spectrum(outputSpectrum);
  if (getDump()) {
    System.out.println(Util.dumpDoubleArray(outputSpectrum,""String_Node_Str""));
  }
  return output;
}",0.987861029719548
20092,"/** 
 * Make sure the number of points in the FFT is a power of 2 by computing its log base 2 and checking for remainders.
 * @throws java.lang.IllegalArgumentException
 */
private void computeLog2N() throws IllegalArgumentException {
  for (int k=NPoint, log2N=0; k > 1; k>>=1, log2N++) {
    if (((k % 2) != 0) || (NPoint < 0)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}","/** 
 * Make sure the number of points in the FFT is a power of 2 by computing its log base 2 and checking for remainders.
 * @throws java.lang.IllegalArgumentException
 */
private void computeLog2N() throws IllegalArgumentException {
  this.log2N=0;
  for (int k=this.NPoint; k > 1; k>>=1, this.log2N++) {
    if (((k % 2) != 0) || (this.NPoint < 0)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}",0.927710843373494
20093,"/** 
 * Establish the recursion. The FFT computation will be  computed by as a recursion. Each stage in the butterfly will be fully computed during recursion. In fact, we use the mechanism of recursion only because it's the simplest  way of switching the ""input"" and ""output"" vectors. The  output of a stage is the input to the next stage. The  butterfly computes elements in place, but we still need to switch the vectors. We could copy it (not very efficient...) or, in C, switch the pointers. We can avoid the pointers by using recursion.
 * @param input input sequence
 * @param output output sequence
 * @param NPoint number of points in the FFT
 * @param invert whether it's direct (false) or inverse (true) FFT
 */
private void recurseFFT(Complex[] input,double[] output,int NPoint,boolean invert){
  Complex[] from=new Complex[NPoint];
  Complex[] to=new Complex[NPoint];
  double divisor;
  if (invert == false) {
    divisor=1.0f;
  }
 else {
    divisor=(double)NPoint;
  }
  for (int i=0; i < NPoint; i++) {
    to[i]=new Complex();
    from[i]=new Complex();
    from[i].scaleComplex(input[i],divisor);
  }
  butterflyStage(from,to,NPoint,NPoint >> 1);
  if ((log2N & 1) == 0) {
    for (int i=0; i < NPoint; i++) {
      output[i]=to[i].squaredMagnitudeComplex();
    }
  }
 else {
    for (int i=0; i < NPoint; i++) {
      output[i]=from[i].squaredMagnitudeComplex();
    }
  }
  return;
}","/** 
 * Establish the recursion. The FFT computation will be  computed by as a recursion. Each stage in the butterfly will be fully computed during recursion. In fact, we use the mechanism of recursion only because it's the simplest  way of switching the ""input"" and ""output"" vectors. The  output of a stage is the input to the next stage. The  butterfly computes elements in place, but we still need to switch the vectors. We could copy it (not very efficient...) or, in C, switch the pointers. We can avoid the pointers by using recursion.
 * @param input input sequence
 * @param output output sequence
 * @param NPoint number of points in the FFT
 * @param invert whether it's direct (false) or inverse (true) FFT
 */
private void recurseFFT(Complex[] input,double[] output,int NPoint,boolean invert){
  Complex[] from=new Complex[NPoint];
  Complex[] to=new Complex[NPoint];
  double divisor;
  if (invert == false) {
    divisor=1.0f;
  }
 else {
    divisor=(double)NPoint;
  }
  for (int i=0; i < NPoint; i++) {
    to[i]=new Complex();
    from[i]=new Complex();
    from[i].scaleComplex(input[i],divisor);
  }
  butterflyStage(from,to,NPoint,NPoint >> 1);
  if ((this.log2N & 1) == 0) {
    for (int i=0; i < (NPoint >> 1); i++) {
      output[i]=from[i].squaredMagnitudeComplex();
    }
  }
 else {
    for (int i=0; i < (NPoint >> 1); i++) {
      output[i]=to[i].squaredMagnitudeComplex();
    }
  }
  return;
}",0.9890420643336868
20094,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  int sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
  windowSize=Util.getSamplesPerWindow(sampleRate,windowSizeInMs);
  NPoint=properties.getInt(FrontEnd.PROP_FFT_NPOINT,256);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  int sampleRate=properties.getInt(FrontEnd.PROP_SAMPLE_RATE,8000);
  float windowSizeInMs=properties.getFloat(FrontEnd.PROP_WINDOW_SIZE_MS,25.625F);
  windowSize=Util.getSamplesPerWindow(sampleRate,windowSizeInMs);
  NPoint=properties.getInt(FrontEnd.PROP_FFT_NPOINT,512);
}",0.9958246346555324
20095,"/** 
 * Compute one stage in the FFT butterfly. The name ""butterfly"" appears because this method computes elements in pairs, and a flowgraph of the computation (output ""0"" comes from input ""0"" and ""1"" and output ""1"" comes from input ""0"" and ""1"") resembles a butterfly. We repeat <code>butterflyStage</code> for <b>log_2(NPoint)</b> stages, by calling the recursion with the argument <code>currentDistance</code> divided by 2 at each call, and checking if it's still > 0.
 * @param from the input sequence at each stage
 * @param to the output sequence
 * @param NPoint the total number of points
 * @param currentDistance the ""distance"" between elements in the butterfly
 */
private void butterflyStage(Complex[] from,Complex[] to,int NPoint,int currentDistance){
  int ndx1From;
  int ndx2From;
  int ndx1To;
  int ndx2To;
  int ndxWk=0;
  Complex wkTimesF2=new Complex();
  if (currentDistance > 0) {
    for (int s=0; s < currentDistance; s++) {
      ndx1From=s;
      ndx2From=s + currentDistance;
      ndx1To=s;
      ndx2To=s + (NPoint >> 1);
      while (ndxWk < (NPoint >> 1)) {
        wkTimesF2.multiplyComplex(Wk[ndxWk],from[ndx2From]);
        to[ndx1To].addComplex(from[ndx1From],wkTimesF2);
        to[ndx2To].subtractComplex(from[ndx1From],wkTimesF2);
        ndx1From+=(2 * currentDistance);
        ndx2From+=(2 * currentDistance);
        ndx1To+=currentDistance;
        ndx2To+=currentDistance;
        ndxWk+=currentDistance;
      }
    }
    butterflyStage(to,from,NPoint,currentDistance >> 1);
  }
  return;
}","/** 
 * Compute one stage in the FFT butterfly. The name ""butterfly"" appears because this method computes elements in pairs, and a flowgraph of the computation (output ""0"" comes from input ""0"" and ""1"" and output ""1"" comes from input ""0"" and ""1"") resembles a butterfly. We repeat <code>butterflyStage</code> for <b>log_2(NPoint)</b> stages, by calling the recursion with the argument <code>currentDistance</code> divided by 2 at each call, and checking if it's still > 0.
 * @param from the input sequence at each stage
 * @param to the output sequence
 * @param NPoint the total number of points
 * @param currentDistance the ""distance"" between elements in the butterfly
 */
private void butterflyStage(Complex[] from,Complex[] to,int NPoint,int currentDistance){
  int ndx1From;
  int ndx2From;
  int ndx1To;
  int ndx2To;
  int ndxWk;
  Complex wkTimesF2=new Complex();
  if (currentDistance > 0) {
    for (int s=0; s < currentDistance; s++) {
      ndx1From=s;
      ndx2From=s + currentDistance;
      ndx1To=s;
      ndx2To=s + (NPoint >> 1);
      ndxWk=0;
      while (ndxWk < (NPoint >> 1)) {
        wkTimesF2.multiplyComplex(Wk[ndxWk],from[ndx2From]);
        to[ndx1To].addComplex(from[ndx1From],wkTimesF2);
        to[ndx2To].subtractComplex(from[ndx1From],wkTimesF2);
        ndx1From+=(2 * currentDistance);
        ndx2From+=(2 * currentDistance);
        ndx1To+=currentDistance;
        ndx2To+=currentDistance;
        ndxWk+=currentDistance;
      }
    }
    butterflyStage(to,from,NPoint,(currentDistance >> 1));
  }
  return;
}",0.9938411669367908
20096,"/** 
 * Method to scale a complex number by a real one. The input complex number is modified in place.
 * @param a the complex number
 * @param b the real scaling factor
 */
public void scaleComplex(Complex a,double b){
  this.real=a.real / b;
  this.imaginary=a.real / b;
}","/** 
 * Method to scale a complex number by a real one. The input complex number is modified in place.
 * @param a the complex number
 * @param b the real scaling factor
 */
public void scaleComplex(Complex a,double b){
  this.real=a.real / b;
  this.imaginary=a.imaginary / b;
}",0.976491862567812
20097,"/** 
 * Method to divide two complex numbers. To divide two complexes, we multiply by the complex conjugate of the denominator, thus resulting in a real number in the denominator.
 * @param a the numerator
 * @param b the denominator
 * @return the ratio between the complex numbers a and b
 */
public Complex divideComplex(complex a,complex b){
  Complex Div=new Complex();
  Div.re=a.re * b.re + a.im * b.im;
  Div.im=a.im * b.re - a.re * b.im;
  scaleComplex(Div,squaredMagnitudeComplex(b));
  return Div;
}","/** 
 * Method to divide two complex numbers. To divide two complexes, we multiply by the complex conjugate of the denominator, thus resulting in a real number in the denominator.
 * @param a the numerator
 * @param b the denominator
 * @return the ratio between the complex numbers a and b
 */
public Complex divideComplex(Complex a,Complex b){
  Complex Div=new Complex();
  Div.re=a.re * b.re + a.im * b.im;
  Div.im=a.im * b.re - a.re * b.im;
  scaleComplex(Div,squaredMagnitudeComplex(b));
  return Div;
}",0.996078431372549
20098,"/** 
 * Method to scale a complex number by a real one. The input complex number is modified in place.
 * @param a the complex number
 * @param b the real scaling factor
 */
public void scaleComplex(complex a,double b){
  a.re/=b;
  a.im/=b;
}","/** 
 * Method to scale a complex number by a real one. The input complex number is modified in place.
 * @param a the complex number
 * @param b the real scaling factor
 */
public void scaleComplex(Complex a,double b){
  a.re/=b;
  a.im/=b;
}",0.9958847736625516
20099,"/** 
 * Method to multiply two complex numbers.
 * @param a the first element to multiply
 * @param b the second element to multiply
 * @return the product the complex numbers a and b
 */
public Complex multiplyComplex(complex a,complex b){
  Complex Mult=new Complex();
  Mult.re=a.re * b.re - a.im * b.im;
  Mult.im=a.re * b.im + a.im * b.re;
  return Mult;
}","/** 
 * Method to multiply two complex numbers.
 * @param a the first element to multiply
 * @param b the second element to multiply
 * @return the product the complex numbers a and b
 */
public Complex multiplyComplex(Complex a,Complex b){
  Complex Mult=new Complex();
  Mult.re=a.re * b.re - a.im * b.im;
  Mult.im=a.re * b.im + a.im * b.re;
  return Mult;
}",0.994459833795014
20100,"/** 
 * Method to compute the squared magnitude of a complex number.
 * @param a the complex number
 * @return the squared magnitude of the complex number
 */
public Complex squaredMagnitudeComplex(complex a){
  double squaredMag;
  squaredMag=a.re * a.re + a.im * a.im;
  return squaredMag;
}","/** 
 * Method to compute the squared magnitude of a complex number.
 * @param a the complex number
 * @return the squared magnitude of the complex number
 */
public double squaredMagnitudeComplex(Complex a){
  double squaredMag;
  squaredMag=a.re * a.re + a.im * a.im;
  return squaredMag;
}",0.9162393162393162
20101,"/** 
 * Method to add two complex numbers.
 * @param a the first element to be added
 * @param b the second element to be added
 * @return the sum of the complex numbers a and b
 */
public Complex addComplex(complex a,complex b){
  Complex Sum=new Complex();
  Sum.re=a.re + b.re;
  Sum.im=a.im + b.im;
  return Sum;
}","/** 
 * Method to add two complex numbers.
 * @param a the first element to be added
 * @param b the second element to be added
 * @return the sum of the complex numbers a and b
 */
public Complex addComplex(Complex a,Complex b){
  Complex Sum=new Complex();
  Sum.re=a.re + b.re;
  Sum.im=a.im + b.im;
  return Sum;
}",0.9937106918238994
20102,"/** 
 * Method to subtract two complex numbers.
 * @param a the element we subtract from
 * @param b the element to be subtracted
 * @return the difference between the complex numbers a and b
 */
public Complex subtractComplex(complex a,complex b){
  Complex Diff=new Complex();
  Diff.re=a.re - b.re;
  Diff.im=a.im - b.im;
  return Diff;
}","/** 
 * Method to subtract two complex numbers.
 * @param a the element we subtract from
 * @param b the element to be subtracted
 * @return the difference between the complex numbers a and b
 */
public Complex subtractComplex(Complex a,Complex b){
  Complex Diff=new Complex();
  Diff.re=a.re - b.re;
  Diff.im=a.im - b.im;
  return Diff;
}",0.9941348973607038
20103,"/** 
 * Create a default complex number;
 */
private Complex(){
  this.re=0;
  this.im=0;
}","/** 
 * Create a default complex number;
 */
private Complex(){
  this.re=0.0f;
  this.im=0.0f;
}",0.9680851063829788
20104,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  initialMean=properties.getFloat(PROP_INITIAL_MEAN,12.0f);
  cepstrumLength=properties.getInt(CepstrumProducer.PROP_CEPSTRUM_SIZE,13);
  cmnWindow=properties.getInt(PROP_CMN_WINDOW,500);
  cmnShiftWindow=properties.getInt(PROP_CMN_SHIFT_WINDOW,800);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  initialMean=properties.getFloat(PROP_INITIAL_MEAN,12.0f);
  cepstrumLength=properties.getInt(FrontEnd.PROP_CEPSTRUM_SIZE,13);
  cmnWindow=properties.getInt(PROP_CMN_WINDOW,500);
  cmnShiftWindow=properties.getInt(PROP_CMN_SHIFT_WINDOW,800);
}",0.9734513274336284
20105,"/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  featureLength=properties.getInt(PROP_FEATURE_LENGTH,39);
  window=properties.getInt(PROP_FEATURE_WINDOW,3);
  cepstrumLength=properties.getInt(CepstrumProducer.PROP_CEPSTRUM_SIZE,13);
}","/** 
 * Reads the parameters needed from the static SphinxProperties object.
 */
private void getSphinxProperties(){
  SphinxProperties properties=SphinxProperties.getSphinxProperties(""String_Node_Str"");
  featureLength=properties.getInt(PROP_FEATURE_LENGTH,39);
  window=properties.getInt(PROP_FEATURE_WINDOW,3);
  cepstrumLength=properties.getInt(FrontEnd.PROP_CEPSTRUM_SIZE,13);
}",0.9689922480620154
20106,"/** 
 * Compute one stage in the FFT butterfly. The name ""butterfly"" appears because this method computes elements in pairs, and a flowgraph of the computation (output ""0"" comes from input ""0"" and ""1"" and output ""1"" comes from input ""0"" and ""1"") resembles a butterfly.
 * @param from the input sequence at each stage
 * @param to the output sequence
 * @param NPoint the total number of points
 * @param currentStage the ""distance"" between elements in the butterfly
 */
private void butterflyStage(Complex[] from,Complex[] to,int NPoint,int currentStage){
}","/** 
 * Compute one stage in the FFT butterfly. The name ""butterfly"" appears because this method computes elements in pairs, and a flowgraph of the computation (output ""0"" comes from input ""0"" and ""1"" and output ""1"" comes from input ""0"" and ""1"") resembles a butterfly.
 * @param from the input sequence at each stage
 * @param to the output sequence
 * @param NPoint the total number of points
 * @param currentStage the ""distance"" between elements in the butterfly
 */
private void butterflyStage(Complex[] from,Complex[] to,int NPoint,int currentStage){
  int ndx1From;
  int ndx2From;
  int ndx1To;
  int ndx2To;
  int ndxWk=0;
  Complex wkTimesF2=new Complex();
  if (currentStage > 0) {
    for (int s=0; s < currentStage; s++) {
      ndx1From=s;
      ndx2From=s + currentStage;
      ndx1To=s;
      ndx2To=s + (NPoint >> 1);
      while (ndxWk < (NPoint >> 1)) {
        wkTimesF2.multiplyComplex(Wk[ndxWk],from[ndx2From]);
        to[ndx1To].addComplex(from[ndx1From],wkTimesF2);
        to[ndx2To].subtractComplex(from[ndx1From],wkTimesF2);
        ndx1From+=(2 * currentStage);
        ndx2From+=(2 * currentStage);
        ndx1To+=currentStage;
        ndx2To+=currentStage;
        ndxWk+=currentStage;
      }
    }
    butterflyStage(to,from,NPoint,currentStage >> 1);
  }
  return;
}",0.5998922994076468
20107,"/** 
 * Constructs a default Spectrum Analyzer.
 */
public SpectrumAnalyzer(float[] input,float[] output){
  computeLog2N(NPoint);
  createWk(NPoint,false);
  Complex[] inputSeq=new Complex[NPoint];
  if (NPoint < windowSize) {
    for (int i=0; i < NPoint; i++) {
      inputSeq[i]=new Complex((double)input[i]);
    }
    for (int i=NPoint; i < windowSize; i++) {
      inputSeq[i % NPoint].addComplex(inputSeq[i % NPoint],new Complex((double)input[i]));
    }
  }
 else {
    for (int i=0; i < windowSize; i++) {
      inputSeq[i]=new Complex((double)input[i]);
    }
    for (int i=windowSize; i < NPoint; i++) {
      inputSeq[i]=new Complex();
    }
  }
  double[] outputSpectrum=new double[NPoint];
  recurseFFT(inputSeq,outputSpectrum,NPoint,false);
}","/** 
 * Constructs a default Spectrum Analyzer.
 */
public SpectrumAnalyzer(float[] input,float[] output){
  getSphinxProperties();
  computeLog2N(NPoint);
  createWk(NPoint,false);
  Complex[] inputSeq=new Complex[NPoint];
  if (NPoint < windowSize) {
    for (int i=0; i < NPoint; i++) {
      inputSeq[i]=new Complex((double)input[i]);
    }
    for (int i=NPoint; i < windowSize; i++) {
      inputSeq[i % NPoint].addComplex(inputSeq[i % NPoint],new Complex((double)input[i]));
    }
  }
 else {
    for (int i=0; i < windowSize; i++) {
      inputSeq[i]=new Complex((double)input[i]);
    }
    for (int i=windowSize; i < NPoint; i++) {
      inputSeq[i]=new Complex();
    }
  }
  double[] outputSpectrum=new double[NPoint];
  recurseFFT(inputSeq,outputSpectrum,NPoint,false);
}",0.983797796500324
20108,"private void scanForAssets(){
  int colorCount=0;
  int assetCount=0;
  if (this.selectedFile != null && this.selectedFile.getCanonicalPath() != null) {
    File assetRoot=new File(this.selectedFile.getCanonicalPath());
    final FilenameFilter systemFileNameFiler=new FilenameFilter(){
      @Override public boolean accept(      File file,      String s){
        return !s.startsWith(""String_Node_Str"");
      }
    }
;
    File[] colorDirs=assetRoot.listFiles(systemFileNameFiler);
    if (colorDirs != null) {
      for (      File file : colorDirs) {
        if (file.isDirectory()) {
          colorCount++;
        }
      }
      if (colorDirs.length >= 1) {
        File exColorDir=colorDirs[0];
        File[] densities=exColorDir.listFiles(systemFileNameFiler);
        if (densities != null && densities.length >= 1) {
          File exDensity=densities[0];
          File[] assets=exDensity.listFiles(systemFileNameFiler);
          for (          File asset : assets) {
            if (!asset.isDirectory()) {
              String extension=asset.getName().substring(asset.getName().lastIndexOf(""String_Node_Str"") + 1);
              if (extension.equalsIgnoreCase(""String_Node_Str"")) {
                assetCount++;
              }
            }
          }
        }
      }
    }
  }
  foundColorsText.setText(colorCount + ""String_Node_Str"");
  foundAssetsText.setText(assetCount + ""String_Node_Str"");
}","private void scanForAssets(){
  int colorCount=0;
  int assetCount=0;
  if (this.selectedFile != null && this.selectedFile.getCanonicalPath() != null) {
    File assetRoot=new File(this.selectedFile.getCanonicalPath());
    final FilenameFilter systemFileNameFiler=new FilenameFilter(){
      @Override public boolean accept(      File file,      String s){
        return !s.startsWith(""String_Node_Str"");
      }
    }
;
    File[] colorDirs=assetRoot.listFiles(systemFileNameFiler);
    if (colorDirs != null) {
      for (      File file : colorDirs) {
        if (file.isDirectory()) {
          colorCount++;
        }
      }
      if (colorDirs.length >= 1) {
        File exColorDir=colorDirs[0];
        File[] densities=exColorDir.listFiles(systemFileNameFiler);
        if (densities != null && densities.length >= 1) {
          File exDensity=densities[0];
          File[] assets=exDensity.listFiles(systemFileNameFiler);
          if (assets != null) {
            for (            File asset : assets) {
              if (!asset.isDirectory()) {
                String extension=asset.getName().substring(asset.getName().lastIndexOf(""String_Node_Str"") + 1);
                if (extension.equalsIgnoreCase(""String_Node_Str"")) {
                  assetCount++;
                }
              }
            }
          }
        }
      }
    }
  }
  foundColorsText.setText(colorCount + ""String_Node_Str"");
  foundAssetsText.setText(assetCount + ""String_Node_Str"");
}",0.975206611570248
20109,"@Nullable @Override public JComponent createComponent(){
  persistedFile=SettingsHelper.getAssetPathString();
  if (persistedFile != null) {
    VirtualFile loadedFile=VirtualFileManager.getInstance().findFileByUrl(persistedFile);
    if (loadedFile != null) {
      textFieldHome.setText(loadedFile.getCanonicalPath());
      selectedFile=loadedFile;
    }
    openBrowser.setVisible(false);
  }
  FileChooserDescriptor workingDirectoryChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  String title=""String_Node_Str"";
  workingDirectoryChooserDescriptor.setTitle(title);
  textFieldHome.addBrowseFolderListener(title,null,null,workingDirectoryChooserDescriptor);
  textFieldHome.addBrowseFolderListener(new TextBrowseFolderListener(workingDirectoryChooserDescriptor){
    @Override protected void onFileChosen(    @NotNull VirtualFile chosenFile){
      super.onFileChosen(chosenFile);
      selectionPerformed=true;
      selectedFile=chosenFile;
      scanForAssets();
    }
  }
);
  openBrowser.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      super.mouseClicked(e);
      BrowserUtil.browse(ANDROID_ICONS_URL);
    }
  }
);
  scanForAssets();
  return panel;
}","@Nullable @Override public JComponent createComponent(){
  persistedFile=SettingsHelper.getAssetPathString();
  if (persistedFile != null) {
    VirtualFile loadedFile=VirtualFileManager.getInstance().findFileByUrl(persistedFile);
    if (loadedFile != null) {
      textFieldHome.setText(loadedFile.getCanonicalPath());
      selectedFile=loadedFile;
    }
    openBrowser.setVisible(false);
  }
  FileChooserDescriptor workingDirectoryChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  String title=""String_Node_Str"";
  workingDirectoryChooserDescriptor.setTitle(title);
  textFieldHome.addBrowseFolderListener(title,null,null,workingDirectoryChooserDescriptor);
  textFieldHome.addBrowseFolderListener(new TextBrowseFolderListener(workingDirectoryChooserDescriptor){
    @Override protected void onFileChoosen(    @NotNull VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      selectionPerformed=true;
      selectedFile=chosenFile;
      scanForAssets();
    }
  }
);
  openBrowser.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      super.mouseClicked(e);
      BrowserUtil.browse(ANDROID_ICONS_URL);
    }
  }
);
  scanForAssets();
  return panel;
}",0.99919935948759
20110,"private void initBrowser(String resolution,final TextFieldWithBrowseButton browseButton){
  final FileChooserDescriptor imageDescriptor=FileChooserDescriptorFactory.createSingleFileDescriptor(ImageFileTypeManager.getInstance().getImageFileType());
  String title1=""String_Node_Str"" + resolution + ""String_Node_Str"";
  imageDescriptor.setTitle(title1);
  browseButton.addBrowseFolderListener(title1,null,project,imageDescriptor);
  browseButton.addBrowseFolderListener(new TextBrowseFolderListener(imageDescriptor){
    @Override protected void onFileChosen(    @NotNull VirtualFile chosenFile){
      super.onFileChosen(chosenFile);
      updateImage(chosenFile.getCanonicalPath());
      if (StringUtils.isEmpty(resExportName.getText().trim())) {
        resExportName.setText(chosenFile.getName());
      }
    }
  }
);
  browseButton.getTextField().addMouseListener(new SimpleMouseListener(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      updateImage(browseButton.getText());
    }
  }
);
  new FileDrop(browseButton.getTextField(),new FileDrop.Target(){
    @Override public FileChooserDescriptor getDescriptor(){
      return imageDescriptor;
    }
    @Override public boolean isHiddenShown(){
      return false;
    }
    @Override public void dropFiles(    List<VirtualFile> virtualFiles){
      if (virtualFiles != null) {
        if (virtualFiles.size() == 1) {
          VirtualFile chosenFile=virtualFiles.get(0);
          browseButton.setText(chosenFile.getCanonicalPath());
          updateImage(chosenFile.getCanonicalPath());
          if (StringUtils.isEmpty(resExportName.getText().trim())) {
            resExportName.setText(chosenFile.getName());
          }
        }
      }
    }
  }
);
}","private void initBrowser(String resolution,final TextFieldWithBrowseButton browseButton){
  final FileChooserDescriptor imageDescriptor=FileChooserDescriptorFactory.createSingleFileDescriptor(ImageFileTypeManager.getInstance().getImageFileType());
  String title1=""String_Node_Str"" + resolution + ""String_Node_Str"";
  imageDescriptor.setTitle(title1);
  browseButton.addBrowseFolderListener(title1,null,project,imageDescriptor);
  browseButton.addBrowseFolderListener(new TextBrowseFolderListener(imageDescriptor){
    @Override protected void onFileChoosen(    @NotNull VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      updateImage(chosenFile.getCanonicalPath());
      if (StringUtils.isEmpty(resExportName.getText().trim())) {
        resExportName.setText(chosenFile.getName());
      }
    }
  }
);
  browseButton.getTextField().addMouseListener(new SimpleMouseListener(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      updateImage(browseButton.getText());
    }
  }
);
  new FileDrop(browseButton.getTextField(),new FileDrop.Target(){
    @Override public FileChooserDescriptor getDescriptor(){
      return imageDescriptor;
    }
    @Override public boolean isHiddenShown(){
      return false;
    }
    @Override public void dropFiles(    List<VirtualFile> virtualFiles){
      if (virtualFiles != null) {
        if (virtualFiles.size() == 1) {
          VirtualFile chosenFile=virtualFiles.get(0);
          browseButton.setText(chosenFile.getCanonicalPath());
          updateImage(chosenFile.getCanonicalPath());
          if (StringUtils.isEmpty(resExportName.getText().trim())) {
            resExportName.setText(chosenFile.getName());
          }
        }
      }
    }
  }
);
}",0.9994259471871412
20111,"public AndroidScaleImporter(final Project project,Module module){
  super(project,true);
  this.project=project;
  setTitle(""String_Node_Str"");
  setResizable(false);
  AndroidResourcesHelper.initResourceBrowser(project,module,""String_Node_Str"",resRoot);
  final FileChooserDescriptor imageDescriptor=FileChooserDescriptorFactory.createSingleFileDescriptor(ImageFileTypeManager.getInstance().getImageFileType());
  String title1=""String_Node_Str"";
  imageDescriptor.setTitle(title1);
  assetBrowser.addBrowseFolderListener(title1,null,project,imageDescriptor);
  assetBrowser.addBrowseFolderListener(new TextBrowseFolderListener(imageDescriptor){
    @Override protected void onFileChosen(    @NotNull VirtualFile chosenFile){
      super.onFileChosen(chosenFile);
      selectedImage=chosenFile;
      isNinePatch=chosenFile.getName().endsWith(""String_Node_Str"");
      updateImage();
      fillImageInformation();
    }
  }
);
  new FileDrop(assetBrowser.getTextField(),new FileDrop.Target(){
    @Override public FileChooserDescriptor getDescriptor(){
      return imageDescriptor;
    }
    @Override public boolean isHiddenShown(){
      return false;
    }
    @Override public void dropFiles(    java.util.List<VirtualFile> virtualFiles){
      if (virtualFiles != null) {
        if (virtualFiles.size() == 1) {
          VirtualFile chosenFile=virtualFiles.get(0);
          assetBrowser.setText(chosenFile.getCanonicalPath());
          selectedImage=chosenFile;
          isNinePatch=chosenFile.getName().endsWith(""String_Node_Str"");
          updateImage();
          fillImageInformation();
        }
      }
    }
  }
);
  assetResolutionSpinner.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      String selectedItem=(String)assetResolutionSpinner.getSelectedItem();
      boolean setEnabled=selectedItem.equalsIgnoreCase(""String_Node_Str"");
      targetResolutionSpinner.setEnabled(setEnabled);
      targetWidth.setEnabled(setEnabled);
      targetHeight.setEnabled(setEnabled);
      if (!setEnabled) {
        updateScaleFactors();
        updateNewSizes();
      }
    }
  }
);
  assetResolutionSpinner.setSelectedIndex(3);
  targetResolutionSpinner.setSelectedIndex(3);
  targetResolutionSpinner.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      updateScaleFactors();
      updateNewSizes();
    }
  }
);
  targetHeight.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent keyEvent){
      super.keyReleased(keyEvent);
      updateNewSizes();
    }
  }
);
  targetWidth.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent keyEvent){
      super.keyReleased(keyEvent);
      updateNewSizes();
    }
  }
);
  init();
}","public AndroidScaleImporter(final Project project,Module module){
  super(project,true);
  this.project=project;
  setTitle(""String_Node_Str"");
  setResizable(false);
  AndroidResourcesHelper.initResourceBrowser(project,module,""String_Node_Str"",resRoot);
  final FileChooserDescriptor imageDescriptor=FileChooserDescriptorFactory.createSingleFileDescriptor(ImageFileTypeManager.getInstance().getImageFileType());
  String title1=""String_Node_Str"";
  imageDescriptor.setTitle(title1);
  assetBrowser.addBrowseFolderListener(title1,null,project,imageDescriptor);
  assetBrowser.addBrowseFolderListener(new TextBrowseFolderListener(imageDescriptor){
    @Override protected void onFileChoosen(    @NotNull VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      updateImageInformation(chosenFile);
    }
  }
);
  new FileDrop(assetBrowser.getTextField(),new FileDrop.Target(){
    @Override public FileChooserDescriptor getDescriptor(){
      return imageDescriptor;
    }
    @Override public boolean isHiddenShown(){
      return false;
    }
    @Override public void dropFiles(    java.util.List<VirtualFile> virtualFiles){
      if (virtualFiles != null) {
        if (virtualFiles.size() == 1) {
          VirtualFile chosenFile=virtualFiles.get(0);
          assetBrowser.setText(chosenFile.getCanonicalPath());
          updateImageInformation(chosenFile);
        }
      }
    }
  }
);
  assetResolutionSpinner.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      String selectedItem=(String)assetResolutionSpinner.getSelectedItem();
      boolean setEnabled=selectedItem.equalsIgnoreCase(""String_Node_Str"");
      targetResolutionSpinner.setEnabled(setEnabled);
      targetWidth.setEnabled(setEnabled);
      targetHeight.setEnabled(setEnabled);
      if (!setEnabled) {
        updateScaleFactors();
        updateNewSizes();
      }
    }
  }
);
  assetResolutionSpinner.setSelectedIndex(3);
  targetResolutionSpinner.setSelectedIndex(3);
  targetResolutionSpinner.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      updateScaleFactors();
      updateNewSizes();
    }
  }
);
  targetHeight.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent keyEvent){
      super.keyReleased(keyEvent);
      updateNewSizes();
    }
  }
);
  targetWidth.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent keyEvent){
      super.keyReleased(keyEvent);
      updateNewSizes();
    }
  }
);
  init();
}",0.3770310192023633
20112,"@Override public void dropFiles(java.util.List<VirtualFile> virtualFiles){
  if (virtualFiles != null) {
    if (virtualFiles.size() == 1) {
      VirtualFile chosenFile=virtualFiles.get(0);
      assetBrowser.setText(chosenFile.getCanonicalPath());
      selectedImage=chosenFile;
      isNinePatch=chosenFile.getName().endsWith(""String_Node_Str"");
      updateImage();
      fillImageInformation();
    }
  }
}","@Override public void dropFiles(java.util.List<VirtualFile> virtualFiles){
  if (virtualFiles != null) {
    if (virtualFiles.size() == 1) {
      VirtualFile chosenFile=virtualFiles.get(0);
      assetBrowser.setText(chosenFile.getCanonicalPath());
      updateImageInformation(chosenFile);
    }
  }
}",0.7972027972027972
20113,"public static void initResourceBrowser(final Project project,Module module,final String title,final TextFieldWithBrowseButton browser){
  final VirtualFile resRoot=SettingsHelper.getResRootForProject(project);
  if (resRoot == null) {
    getResRootFile(project,module,new ResourcesDialog.ResourceSelectionListener(){
      @Override public void onResourceSelected(      VirtualFile resDir){
        browser.setText(resDir.getCanonicalPath());
        SettingsHelper.saveResRootForProject(project,resDir.getUrl());
      }
    }
);
  }
 else {
    browser.setText(resRoot.getCanonicalPath());
  }
  FileChooserDescriptor workingDirectoryChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  workingDirectoryChooserDescriptor.setTitle(title);
  browser.addBrowseFolderListener(title,null,project,workingDirectoryChooserDescriptor);
  browser.addBrowseFolderListener(new TextBrowseFolderListener(workingDirectoryChooserDescriptor){
    @Override protected void onFileChosen(    @NotNull VirtualFile chosenFile){
      super.onFileChosen(chosenFile);
      SettingsHelper.saveResRootForProject(project,chosenFile.getUrl());
    }
  }
);
}","public static void initResourceBrowser(final Project project,Module module,final String title,final TextFieldWithBrowseButton browser){
  final VirtualFile resRoot=SettingsHelper.getResRootForProject(project);
  if (resRoot == null) {
    getResRootFile(project,module,new ResourcesDialog.ResourceSelectionListener(){
      @Override public void onResourceSelected(      VirtualFile resDir){
        browser.setText(resDir.getCanonicalPath());
        SettingsHelper.saveResRootForProject(project,resDir.getUrl());
      }
    }
);
  }
 else {
    browser.setText(resRoot.getCanonicalPath());
  }
  FileChooserDescriptor workingDirectoryChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  workingDirectoryChooserDescriptor.setTitle(title);
  browser.addBrowseFolderListener(title,null,project,workingDirectoryChooserDescriptor);
  browser.addBrowseFolderListener(new TextBrowseFolderListener(workingDirectoryChooserDescriptor){
    @Override protected void onFileChoosen(    @NotNull VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      SettingsHelper.saveResRootForProject(project,chosenFile.getUrl());
    }
  }
);
}",0.999140154772141
20114,"@Nullable @Override protected ValidationInfo doValidate(){
  if (StringUtils.isEmpty(resRoot.getText().trim())) {
    return new ValidationInfo(""String_Node_Str"",resRoot);
  }
  if (StringUtils.isEmpty(resExportName.getText().trim())) {
    return new ValidationInfo(""String_Node_Str"",resExportName);
  }
 else   if (resExportName.getText().matches(""String_Node_Str"")) {
    return new ValidationInfo(""String_Node_Str"",resExportName);
  }
  return null;
}","@Nullable @Override protected ValidationInfo doValidate(){
  if (StringUtils.isEmpty(resRoot.getText().trim())) {
    return new ValidationInfo(""String_Node_Str"",resRoot);
  }
  if (StringUtils.isEmpty(resExportName.getText().trim())) {
    return new ValidationInfo(""String_Node_Str"",resExportName);
  }
 else   if (!resExportName.getText().matches(""String_Node_Str"")) {
    return new ValidationInfo(""String_Node_Str"",resExportName);
  }
  return null;
}",0.9989023051591658
20115,"private void fillImageInformation(){
  if (selectedImage != null) {
    String canonicalPath=selectedImage.getCanonicalPath();
    if (canonicalPath != null) {
      File file=new File(canonicalPath);
      try {
        BufferedImage image=ImageIO.read(file);
        if (image != null) {
          int imageWidth=image.getWidth();
          int imageHeight=image.getHeight();
          targetHeight.setText(String.valueOf(imageHeight));
          targetWidth.setText(String.valueOf(imageWidth));
          resExportName.setText(selectedImage.getName());
          updateScaleFactors();
          updateNewSizes();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}","private void fillImageInformation(){
  if (selectedImage != null) {
    String canonicalPath=selectedImage.getCanonicalPath();
    if (canonicalPath != null) {
      File file=new File(canonicalPath);
      try {
        BufferedImage image=ImageIO.read(file);
        if (image != null) {
          imageWidth=image.getWidth();
          imageHeight=image.getHeight();
          targetHeight.setText(String.valueOf(imageHeight));
          targetWidth.setText(String.valueOf(imageWidth));
          resExportName.setText(selectedImage.getName());
          updateScaleFactors();
          updateNewSizes();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}",0.9941690962099126
20116,"/** 
 * Method used to construct value from tag and length
 * @param pTagAndLength tag and length value
 * @return tag value in byte
 */
public static byte[] constructValue(final TagAndLength pTagAndLength){
  byte ret[]=new byte[pTagAndLength.getLength()];
  byte val[]=null;
  if (pTagAndLength.getTag() == EmvTags.TERMINAL_TRANSACTION_QUALIFIERS) {
    TerminalTransactionQualifiers terminalQual=new TerminalTransactionQualifiers();
    terminalQual.setContactlessEMVmodeSupported(true);
    ret=terminalQual.getBytes();
  }
 else   if (pTagAndLength.getTag() == EmvTags.TERMINAL_COUNTRY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CountryCodeEnum.FR.getNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_CURRENCY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CurrencyEnum.EUR.getISOCodeNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_DATE) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    val=BytesUtils.fromString(sdf.format(new Date()));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_TYPE) {
    val=new byte[]{(byte)TransactionTypeEnum.PURCHASE.getKey()};
  }
 else   if (pTagAndLength.getTag() == EmvTags.AMOUNT_AUTHORISED_NUMERIC) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
 else   if (pTagAndLength.getTag() == EmvTags.UNPREDICTABLE_NUMBER) {
    random.nextBytes(ret);
  }
  if (val != null) {
    System.arraycopy(val,Math.max(0,val.length - ret.length),ret,Math.max(ret.length - val.length,0),Math.min(val.length,ret.length));
  }
  return ret;
}","/** 
 * Method used to construct value from tag and length
 * @param pTagAndLength tag and length value
 * @return tag value in byte
 */
public static byte[] constructValue(final TagAndLength pTagAndLength){
  byte ret[]=new byte[pTagAndLength.getLength()];
  byte val[]=null;
  if (pTagAndLength.getTag() == EmvTags.TERMINAL_TRANSACTION_QUALIFIERS) {
    TerminalTransactionQualifiers terminalQual=new TerminalTransactionQualifiers();
    terminalQual.setContactlessEMVmodeSupported(true);
    terminalQual.setReaderIsOfflineOnly(true);
    ret=terminalQual.getBytes();
  }
 else   if (pTagAndLength.getTag() == EmvTags.TERMINAL_COUNTRY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CountryCodeEnum.FR.getNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_CURRENCY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CurrencyEnum.EUR.getISOCodeNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_DATE) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    val=BytesUtils.fromString(sdf.format(new Date()));
  }
 else   if (pTagAndLength.getTag() == EmvTags.TRANSACTION_TYPE) {
    val=new byte[]{(byte)TransactionTypeEnum.PURCHASE.getKey()};
  }
 else   if (pTagAndLength.getTag() == EmvTags.AMOUNT_AUTHORISED_NUMERIC) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
 else   if (pTagAndLength.getTag() == EmvTags.UNPREDICTABLE_NUMBER) {
    random.nextBytes(ret);
  }
  if (val != null) {
    System.arraycopy(val,Math.max(0,val.length - ret.length),ret,Math.max(ret.length - val.length,0),Math.min(val.length,ret.length));
  }
  return ret;
}",0.986040986040986
20117,"/** 
 * Method used to extract log entry from card
 * @param pLogEntry log entry position
 */
protected List<EmvTransactionRecord> extractLogEntry(final byte[] pLogEntry) throws CommunicationException {
  List<EmvTransactionRecord> listRecord=new ArrayList<EmvTransactionRecord>();
  if (pLogEntry != null) {
    List<TagAndLength> tals=getLogFormat();
    for (int rec=1; rec <= pLogEntry[1]; rec++) {
      byte[] response=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,rec,pLogEntry[0] << 3 | 4,0).toBytes());
      if (ResponseUtils.isSucceed(response)) {
        EmvTransactionRecord record=new EmvTransactionRecord();
        record.parse(response,tals);
        if (record.getAmount() == null || record.getAmount() == 0) {
          continue;
        }
        if (record != null) {
          if (record.getCurrency() == null) {
            record.setCurrency(CurrencyEnum.XXX);
          }
          listRecord.add(record);
        }
      }
 else       if (SwEnum.getSW(response) == SwEnum.SW_6A83) {
        break;
      }
    }
  }
  return listRecord;
}","/** 
 * Method used to extract log entry from card
 * @param pLogEntry log entry position
 */
protected List<EmvTransactionRecord> extractLogEntry(final byte[] pLogEntry) throws CommunicationException {
  List<EmvTransactionRecord> listRecord=new ArrayList<EmvTransactionRecord>();
  if (pLogEntry != null) {
    List<TagAndLength> tals=getLogFormat();
    for (int rec=1; rec <= pLogEntry[1]; rec++) {
      byte[] response=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,rec,pLogEntry[0] << 3 | 4,0).toBytes());
      if (ResponseUtils.isSucceed(response)) {
        EmvTransactionRecord record=new EmvTransactionRecord();
        record.parse(response,tals);
        if (record.getAmount() >= 1500000000) {
          record.setAmount(record.getAmount() - 1500000000);
        }
        if (record.getAmount() == null || record.getAmount() == 0) {
          continue;
        }
        if (record != null) {
          if (record.getCurrency() == null) {
            record.setCurrency(CurrencyEnum.XXX);
          }
          listRecord.add(record);
        }
      }
 else {
        break;
      }
    }
  }
  return listRecord;
}",0.9230769230769232
20118,"/** 
 * Read EMV card with Payment System Environment or Proximity Payment System Environment
 * @return Read card
 */
protected EmvCard readWithPSE() throws CommunicationException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  EmvCard card=null;
  byte[] data=selectPaymentEnvironment();
  if (ResponseUtils.isSucceed(data)) {
    data=parseFCIProprietaryTemplate(data);
    if (ResponseUtils.isSucceed(data)) {
      String label=extractApplicationLabel(data);
      card=extractPublicData(TlvUtil.getValue(data,EmvTags.AID_CARD),label);
    }
  }
 else   if (LOGGER.isDebugEnabled()) {
    LOGGER.debug((contactLess ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  return card;
}","/** 
 * Read EMV card with Payment System Environment or Proximity Payment System Environment
 * @return Read card
 */
protected EmvCard readWithPSE() throws CommunicationException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  EmvCard card=null;
  byte[] data=selectPaymentEnvironment();
  if (ResponseUtils.isSucceed(data)) {
    data=parseFCIProprietaryTemplate(data);
    if (ResponseUtils.isSucceed(data)) {
      String label=extractApplicationLabel(data);
      card=extractPublicData(getAid(data),label);
    }
  }
 else   if (LOGGER.isDebugEnabled()) {
    LOGGER.debug((contactLess ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  return card;
}",0.9673384294649062
20119,"@Test public void testGetLogEntry() throws Exception {
  byte[] selectResponse=BytesUtils.fromString(""String_Node_Str"");
  System.out.println(TlvUtil.prettyPrintAPDUResponse(selectResponse));
  byte[] data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  selectResponse=BytesUtils.fromString(""String_Node_Str"");
  data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  Assertions.assertThat(BytesUtils.bytesToString(data)).isEqualTo(""String_Node_Str"");
}","@Test public void testGetLogEntry() throws Exception {
  byte[] selectResponse=BytesUtils.fromString(""String_Node_Str"");
  byte[] data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  selectResponse=BytesUtils.fromString(""String_Node_Str"");
  data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  Assertions.assertThat(BytesUtils.bytesToString(data)).isEqualTo(""String_Node_Str"");
}",0.931665062560154
20120,"/** 
 * Method to get the annotation set from the current class
 * @return An annotation set which contain all annotation data
 */
private Collection<AnnotationData> getAnnotationSet(final List<TagAndLength> pTags){
  Collection<AnnotationData> ret=null;
  if (pTags != null) {
    Map<ITag,AnnotationData> data=AnnotationUtils.getInstance().getMap().get(getClass().getName());
    ret=new ArrayList<AnnotationData>(data.size());
    for (    TagAndLength tal : pTags) {
      AnnotationData ann=data.get(tal.getTag());
      ann.setSize(tal.getLength() * BitUtils.BYTE_SIZE);
      ret.add(ann);
    }
  }
 else {
    ret=AnnotationUtils.getInstance().getMapSet().get(getClass().getName());
  }
  return ret;
}","/** 
 * Method to get the annotation set from the current class
 * @return An annotation set which contain all annotation data
 */
private Collection<AnnotationData> getAnnotationSet(final List<TagAndLength> pTags){
  Collection<AnnotationData> ret=null;
  if (pTags != null) {
    Map<ITag,AnnotationData> data=AnnotationUtils.getInstance().getMap().get(getClass().getName());
    ret=new ArrayList<AnnotationData>(data.size());
    for (    TagAndLength tal : pTags) {
      AnnotationData ann=data.get(tal.getTag());
      if (ann != null) {
        ann.setSize(tal.getLength() * BitUtils.BYTE_SIZE);
        ret.add(ann);
      }
    }
  }
 else {
    ret=AnnotationUtils.getInstance().getMapSet().get(getClass().getName());
  }
  return ret;
}",0.9746401644962304
20121,"/** 
 * Extract track 2 data (card number + expire date)
 * @param pData data
 */
protected EmvCard extractTrack2Data(final byte[] pData){
  EmvCard card=null;
  byte[] track2=TlvUtil.getValue(pData,EmvTags.TRACK_2_EQV_DATA);
  if (track2 != null) {
    card=new EmvCard();
    BitUtils bit=new BitUtils(track2);
    card.setCardNumber(bit.getNextHexaString(64));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    try {
      String date=bit.getNextHexaString(5 * 4);
      if (date.length() > 5) {
        date=date.substring(0,5);
      }
      card.setExpireDate(DateUtils.truncate(sdf.parse(date),Calendar.MONTH));
    }
 catch (    ParseException e) {
      LOGGER.error(""String_Node_Str"");
    }
    byte[] cardHolderByte=TlvUtil.getValue(pData,EmvTags.CARDHOLDER_NAME);
    if (cardHolderByte != null) {
      card.setHolderName(new String(cardHolderByte).trim());
    }
  }
  return card;
}","/** 
 * Extract track 2 data (card number + expire date)
 * @param pData data
 */
protected EmvCard extractTrack2Data(final byte[] pData){
  EmvCard card=null;
  byte[] track2=TlvUtil.getValue(pData,EmvTags.TRACK_2_EQV_DATA,EmvTags.TRACK2_DATA);
  if (track2 != null) {
    card=new EmvCard();
    BitUtils bit=new BitUtils(track2);
    card.setCardNumber(bit.getNextHexaString(64));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    try {
      String date=bit.getNextHexaString(5 * 4);
      if (date.length() > 5) {
        date=date.substring(0,5);
      }
      card.setExpireDate(DateUtils.truncate(sdf.parse(date),Calendar.MONTH));
    }
 catch (    ParseException e) {
      LOGGER.error(""String_Node_Str"");
    }
    byte[] cardHolderByte=TlvUtil.getValue(pData,EmvTags.CARDHOLDER_NAME);
    if (cardHolderByte != null) {
      card.setHolderName(new String(cardHolderByte).trim());
    }
  }
  return card;
}",0.989451476793249
20122,"/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    card=extractTrack2Data(pGpo);
    if (card == null) {
      data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
    }
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (ResponseUtils.isEquals(data,SwEnum.SW_6C)) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
  return card;
}","/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    card=extractTrack2Data(pGpo);
    if (card == null) {
      data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
    }
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (ResponseUtils.isEquals(info,SwEnum.SW_6C)) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
  return card;
}",0.9968823070927514
20123,"/** 
 * Method used to extract Log Entry from Select response
 * @param pSelectResponse select response
 * @return byte array
 */
protected byte[] getLogEntry(final byte[] pSelectResponse){
  byte[] ret=TlvUtil.getValue(pSelectResponse,EmvTags.LOG_ENTRY);
  if (ret == null) {
    ret=TlvUtil.getValue(pSelectResponse,EmvTags.VISA_LOG_ENTRY);
  }
  return ret;
}","/** 
 * Method used to extract Log Entry from Select response
 * @param pSelectResponse select response
 * @return byte array
 */
protected byte[] getLogEntry(final byte[] pSelectResponse){
  return TlvUtil.getValue(pSelectResponse,EmvTags.LOG_ENTRY,EmvTags.VISA_LOG_ENTRY);
}",0.8432601880877743
20124,"/** 
 * Method used to get Tag value
 * @param pData data
 * @param pTag tag to find
 * @return tag value or null
 */
public static byte[] getValue(final byte[] pData,final ITag pTag){
  byte[] ret=null;
  if (pData != null) {
    ByteArrayInputStream stream=new ByteArrayInputStream(pData);
    while (stream.available() > 0) {
      TLV tlv=TlvUtil.getNextTLV(stream);
      if (tlv.getTag() == pTag) {
        return tlv.getValueBytes();
      }
 else       if (tlv.getTag().isConstructed()) {
        ret=TlvUtil.getValue(tlv.getValueBytes(),pTag);
        if (ret != null) {
          break;
        }
      }
    }
  }
  return ret;
}","/** 
 * Method used to get Tag value
 * @param pData data
 * @param pTag tag to find
 * @return tag value or null
 */
public static byte[] getValue(final byte[] pData,final ITag... pTag){
  byte[] ret=null;
  if (pData != null) {
    ByteArrayInputStream stream=new ByteArrayInputStream(pData);
    while (stream.available() > 0) {
      TLV tlv=TlvUtil.getNextTLV(stream);
      if (ArrayUtils.contains(pTag,tlv.getTag())) {
        return tlv.getValueBytes();
      }
 else       if (tlv.getTag().isConstructed()) {
        ret=TlvUtil.getValue(tlv.getValueBytes(),pTag);
        if (ret != null) {
          break;
        }
      }
    }
  }
  return ret;
}",0.9531129900076863
20125,"@Test public void testGetLogEntry() throws Exception {
  byte[] selectResponse=BytesUtils.fromString(""String_Node_Str"");
  byte[] data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  Assertions.assertThat(BytesUtils.bytesToString(data)).isEqualTo(""String_Node_Str"");
  selectResponse=BytesUtils.fromString(""String_Node_Str"");
  data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  Assertions.assertThat(BytesUtils.bytesToString(data)).isEqualTo(""String_Node_Str"");
}","@Test public void testGetLogEntry() throws Exception {
  byte[] selectResponse=BytesUtils.fromString(""String_Node_Str"");
  System.out.println(TlvUtil.prettyPrintAPDUResponse(selectResponse));
  byte[] data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  selectResponse=BytesUtils.fromString(""String_Node_Str"");
  data=Whitebox.invokeMethod(new EmvParser(null,true),EmvParser.class,""String_Node_Str"",selectResponse);
  Assertions.assertThat(BytesUtils.bytesToString(data)).isEqualTo(""String_Node_Str"");
}",0.8604444444444445
20126,"@Override public byte[] transceive(final byte[] pCommand){
  String response=null;
  LOGGER.debug(""String_Node_Str"" + BytesUtils.bytesToString(pCommand));
switch (step++) {
case 0:
    response=""String_Node_Str"";
  break;
case 1:
response=""String_Node_Str"";
break;
case 2:
response=""String_Node_Str"";
break;
case 3:
response=""String_Node_Str"";
break;
case 4:
response=""String_Node_Str"";
break;
case 5:
response=""String_Node_Str"";
break;
default :
response=""String_Node_Str"";
}
if (BytesUtils.bytesToStringNoSpace(pCommand).equals(""String_Node_Str"")) {
response=""String_Node_Str"";
}
LOGGER.debug(""String_Node_Str"" + response);
byte[] ret=BytesUtils.fromString(response);
try {
LOGGER.debug(TlvUtil.prettyPrintAPDUResponse(ret));
}
 catch (Exception e) {
}
return ret;
}","@Override public byte[] transceive(final byte[] pCommand){
  String response=null;
  LOGGER.debug(""String_Node_Str"" + BytesUtils.bytesToString(pCommand));
switch (step++) {
case 0:
    response=""String_Node_Str"";
  break;
case 1:
response=""String_Node_Str"";
break;
case 2:
response=""String_Node_Str"";
break;
case 3:
response=""String_Node_Str"";
break;
case 4:
response=""String_Node_Str"";
break;
default :
response=""String_Node_Str"";
}
if (BytesUtils.bytesToStringNoSpace(pCommand).equals(""String_Node_Str"")) {
response=""String_Node_Str"";
}
LOGGER.debug(""String_Node_Str"" + response);
byte[] ret=BytesUtils.fromString(response);
try {
LOGGER.debug(TlvUtil.prettyPrintAPDUResponse(ret));
}
 catch (Exception e) {
}
return ret;
}",0.971198928332217
20127,"/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (ResponseUtils.isEquals(data,SwEnum.SW_6C)) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
 else {
    card=extractTrack2Data(pGpo);
  }
  return card;
}","/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    card=extractTrack2Data(pGpo);
    if (card == null) {
      data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
    }
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (ResponseUtils.isEquals(data,SwEnum.SW_6C)) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
  return card;
}",0.9450117831893166
20128,"/** 
 * Method used to get the number of pin try left
 * @return the number of pin try left
 * @throws CommunicationException
 */
protected int getLeftPinTry() throws CommunicationException {
  int ret=UNKNOW;
  if (LOGGER.isDebugEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
  byte[] data=provider.transceive(new CommandApdu(CommandEnum.GET_DATA,0x9F,0x17,0).toBytes());
  if (data != null) {
    byte[] val=TlvUtil.getValue(data,EmvTags.PIN_TRY_COUNTER);
    if (val != null) {
      ret=BytesUtils.byteArrayToInt(val);
    }
  }
  return ret;
}","/** 
 * Method used to get the number of pin try left
 * @return the number of pin try left
 * @throws CommunicationException
 */
protected int getLeftPinTry() throws CommunicationException {
  int ret=UNKNOW;
  if (LOGGER.isDebugEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
  byte[] data=provider.transceive(new CommandApdu(CommandEnum.GET_DATA,0x9F,0x17,0).toBytes());
  if (ResponseUtils.isSucceed(data)) {
    byte[] val=TlvUtil.getValue(data,EmvTags.PIN_TRY_COUNTER);
    if (val != null) {
      ret=BytesUtils.byteArrayToInt(val);
    }
  }
  return ret;
}",0.9635555555555556
20129,"/** 
 * Method used to parse FCI Proprietary Template
 * @param pData data to parse
 * @return
 * @throws CommunicationException
 */
protected byte[] parseFCIProprietaryTemplate(final byte[] pData) throws CommunicationException {
  byte[] data=TlvUtil.getValue(pData,EmvTags.SFI);
  if (data != null) {
    int sfi=BytesUtils.byteArrayToInt(data);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.info(""String_Node_Str"" + sfi);
    }
    data=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,sfi << 3 | 4,0).toBytes());
    if (data[data.length - 2] == (byte)0x6C) {
      data=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,sfi << 3 | 4,data[data.length - 1]).toBytes());
    }
    return data;
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
  return pData;
}","/** 
 * Method used to parse FCI Proprietary Template
 * @param pData data to parse
 * @return
 * @throws CommunicationException
 */
protected byte[] parseFCIProprietaryTemplate(final byte[] pData) throws CommunicationException {
  byte[] data=TlvUtil.getValue(pData,EmvTags.SFI);
  if (data != null) {
    int sfi=BytesUtils.byteArrayToInt(data);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.info(""String_Node_Str"" + sfi);
    }
    data=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,sfi << 3 | 4,0).toBytes());
    if (ResponseUtils.isEquals(data,SwEnum.SW_6C)) {
      data=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,sfi << 3 | 4,data[data.length - 1]).toBytes());
    }
    return data;
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
  return pData;
}",0.9563106796116504
20130,"/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (info[info.length - 2] == (byte)0x6C) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
 else {
    card=extractTrack2Data(pGpo);
  }
  return card;
}","/** 
 * Method used to extract commons card data
 * @param pCard Card data
 * @param pGpo global processing options response
 */
protected EmvCard extractCommonsCardData(final byte[] pGpo) throws CommunicationException {
  EmvCard card=null;
  byte data[]=TlvUtil.getValue(pGpo,EmvTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    data=TlvUtil.getValue(pGpo,EmvTags.APPLICATION_FILE_LOCATOR);
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (ResponseUtils.isEquals(data,SwEnum.SW_6C)) {
          info=provider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          card=extractTrack2Data(info);
          if (card != null) {
            break;
          }
        }
      }
      if (card != null) {
        break;
      }
    }
  }
 else {
    card=extractTrack2Data(pGpo);
  }
  return card;
}",0.9714285714285714
20131,"/** 
 * Method used to check if the last command return SW1SW2 == 9000
 * @param pByte response to the last command
 * @return true if the status is 9000 false otherwise
 */
public static boolean isSucceed(final byte[] pByte){
  SwEnum val=SwEnum.getSW(pByte);
  if (LOGGER.isDebugEnabled() && pByte != null) {
    LOGGER.debug(""String_Node_Str"" + BytesUtils.bytesToStringNoSpace(Arrays.copyOfRange(pByte,pByte.length - 2,pByte.length)) + ""String_Node_Str""+ (val != null ? val.getDetail() : ""String_Node_Str""));
  }
  return val != null && val == SwEnum.SW_9000;
}","/** 
 * Method used to check if the last command return SW1SW2 == 9000
 * @param pByte response to the last command
 * @return true if the status is 9000 false otherwise
 */
public static boolean isSucceed(final byte[] pByte){
  return isEquals(pByte,SwEnum.SW_9000);
}",0.60984393757503
20132,"@Test public void testgetLeftPinTry() throws Exception {
  ProviderSelectPaymentEnvTest prov=new ProviderSelectPaymentEnvTest();
  prov.setExpectedData(""String_Node_Str"");
  prov.setReturnedData(""String_Node_Str"");
  int val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(3);
  prov.setExpectedData(""String_Node_Str"");
  prov.setReturnedData(""String_Node_Str"");
  val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(EmvParser.UNKNOW);
  prov.setReturnedData(null);
  val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(EmvParser.UNKNOW);
}","@Test public void testgetLeftPinTry() throws Exception {
  ProviderSelectPaymentEnvTest prov=new ProviderSelectPaymentEnvTest();
  prov.setExpectedData(""String_Node_Str"");
  prov.setReturnedData(""String_Node_Str"");
  int val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(3);
  prov.setExpectedData(""String_Node_Str"");
  prov.setReturnedData(""String_Node_Str"");
  val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(EmvParser.UNKNOW);
  prov.setReturnedData(null);
  val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(EmvParser.UNKNOW);
  prov.setReturnedData(""String_Node_Str"");
  val=Whitebox.invokeMethod(new EmvParser(prov,true),EmvParser.class,""String_Node_Str"");
  Assertions.assertThat(val).isEqualTo(EmvParser.UNKNOW);
}",0.8891481913652275
20133,"@Test public void test() throws Exception {
  Assertions.assertThat(SwEnum.SW_61.getDetail()).isEqualTo(""String_Node_Str"");
  Assertions.assertThat(SwEnum.SW_61.getStatus()).isEqualTo(new byte[]{0x61});
}","@Test public void test() throws Exception {
  Assertions.assertThat(SwEnum.SW_61.getDetail()).isEqualTo(""String_Node_Str"");
  Assertions.assertThat(SwEnum.SW_61.getStatus()).isEqualTo(new byte[]{0x61});
  Assertions.assertThat(SwEnum.getSW(new byte[]{0x6C,67})).isEqualTo(SwEnum.SW_6C);
  Assertions.assertThat(SwEnum.getSW(new byte[]{0x6C,12})).isEqualTo(SwEnum.SW_6C);
  Assertions.assertThat(SwEnum.getSW(new byte[]{0x6C,00})).isEqualTo(SwEnum.SW_6C00);
}",0.6163141993957704
20134,"/** 
 * Method used to get the field atrDescription
 * @return the atrDescription
 */
public List<String> getAtrDescription(){
  return atrDescription;
}","/** 
 * Method used to get the field atrDescription
 * @return the atrDescription
 */
public Collection<String> getAtrDescription(){
  return atrDescription;
}",0.9615384615384616
20135,"/** 
 * Setter for the field atrDescription
 * @param atrDescription the atrDescription to set
 */
public void setAtrDescription(final List<String> atrDescription){
  this.atrDescription=atrDescription;
}","/** 
 * Setter for the field atrDescription
 * @param atrDescription the atrDescription to set
 */
public void setAtrDescription(final Collection<String> atrDescription){
  this.atrDescription=atrDescription;
}",0.966183574879227
20136,"/** 
 * Method used to parse EMV card
 */
public EMVCard parse(final byte[] pSelectResponse,final IProvider pProvider) throws CommunicationException {
  EMVCard card=null;
  byte[] logEntry=TLVUtil.getValue(pSelectResponse,EMVTags.LOG_ENTRY);
  byte[] pdol=TLVUtil.getValue(pSelectResponse,EMVTags.PDOL);
  byte[] gpo=getGetProcessingOptions(pdol,pProvider);
  if (!ResponseUtils.isSucceed(gpo)) {
    gpo=getGetProcessingOptions(null,pProvider);
  }
  card=extractCommonsCardData(gpo);
  card.setListPayment(extractLogEntry(logEntry));
  return card;
}","/** 
 * Method used to parse EMV card
 */
public EMVCard parse(final byte[] pSelectResponse,final IProvider pProvider) throws CommunicationException {
  EMVCard card=null;
  byte[] logEntry=TLVUtil.getValue(pSelectResponse,EMVTags.LOG_ENTRY);
  byte[] pdol=TLVUtil.getValue(pSelectResponse,EMVTags.PDOL);
  byte[] gpo=getGetProcessingOptions(pdol,pProvider);
  if (!ResponseUtils.isSucceed(gpo)) {
    gpo=getGetProcessingOptions(null,pProvider);
  }
  card=extractCommonsCardData(gpo);
  if (card != null) {
    card.setListPayment(extractLogEntry(logEntry));
  }
  return card;
}",0.9523809523809524
20137,"public static byte[] constructValue(final TagAndLength pTagAndLength){
  byte ret[]=new byte[pTagAndLength.getLength()];
  byte val[]=null;
  if (pTagAndLength.getTag() == EMVTags.TERMINAL_TRANSACTION_QUALIFIERS) {
    TerminalTransactionQualifiers terminalQual=new TerminalTransactionQualifiers();
    terminalQual.setContactlessEMVmodeSupported(true);
    ret=terminalQual.getBytes();
  }
 else   if (pTagAndLength.getTag() == EMVTags.TERMINAL_COUNTRY_CODE) {
    val=BytesUtils.toByteArray(CountryCodeEnum.FR.getNumeric());
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_CURRENCY_CODE) {
    val=BytesUtils.toByteArray(CurrencyEnum.EUR.getISOCodeNumeric());
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_DATE) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    val=BytesUtils.fromString(sdf.format(new Date()));
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_TYPE) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
 else   if (pTagAndLength.getTag() == EMVTags.AMOUNT_AUTHORISED_NUMERIC) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
  if (val != null) {
    System.arraycopy(val,Math.max(0,val.length - ret.length),ret,Math.max(ret.length - val.length,0),Math.min(val.length,ret.length));
  }
  return ret;
}","/** 
 * Method used to construct value from tag and length
 * @param pTagAndLength tag and length value
 * @return tag value in byte
 */
public static byte[] constructValue(final TagAndLength pTagAndLength){
  byte ret[]=new byte[pTagAndLength.getLength()];
  byte val[]=null;
  if (pTagAndLength.getTag() == EMVTags.TERMINAL_TRANSACTION_QUALIFIERS) {
    TerminalTransactionQualifiers terminalQual=new TerminalTransactionQualifiers();
    terminalQual.setContactlessEMVmodeSupported(true);
    ret=terminalQual.getBytes();
  }
 else   if (pTagAndLength.getTag() == EMVTags.TERMINAL_COUNTRY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CountryCodeEnum.FR.getNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_CURRENCY_CODE) {
    val=BytesUtils.fromString(StringUtils.leftPad(String.valueOf(CurrencyEnum.EUR.getISOCodeNumeric()),4,""String_Node_Str""));
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_DATE) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    val=BytesUtils.fromString(sdf.format(new Date()));
  }
 else   if (pTagAndLength.getTag() == EMVTags.TRANSACTION_TYPE) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
 else   if (pTagAndLength.getTag() == EMVTags.AMOUNT_AUTHORISED_NUMERIC) {
    val=BytesUtils.fromString(""String_Node_Str"");
  }
  if (val != null) {
    System.arraycopy(val,Math.max(0,val.length - ret.length),ret,Math.max(ret.length - val.length,0),Math.min(val.length,ret.length));
  }
  return ret;
}",0.8967946460021134
20138,"/** 
 * Method used to extract log entry from card
 * @param pProvider provider to used
 * @param pCard card data
 * @param pLogEntry log entry position
 */
private void extractLogEntry(final IProvider pProvider,final EMVCard pCard,final byte[] pLogEntry) throws CommunicationException {
  if (pLogEntry != null) {
    List<EMVPaymentRecord> listRecord=new ArrayList<EMVPaymentRecord>();
    for (int rec=1; rec < pLogEntry[1]; rec++) {
      byte[] response=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,rec,pLogEntry[0] << 3 | 4,0).toBytes());
      if (ResponseApdu.isSucceed(response) && response.length >= EMVPaymentRecord.DEFAULT_SIZE / BitUtils.BYTE_SIZE) {
        EMVPaymentRecord record=new EMVPaymentRecord();
        record.parse(response);
        listRecord.add(record);
      }
    }
    pCard.setListPayment(listRecord);
  }
}","/** 
 * Method used to extract log entry from card
 * @param pProvider provider to used
 * @param pCard card data
 * @param pLogEntry log entry position
 */
private void extractLogEntry(final IProvider pProvider,final EMVCard pCard,final byte[] pLogEntry) throws CommunicationException {
  if (pLogEntry != null) {
    List<EMVPaymentRecord> listRecord=new ArrayList<EMVPaymentRecord>();
    for (int rec=1; rec < pLogEntry[1]; rec++) {
      byte[] response=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,rec,pLogEntry[0] << 3 | 4,0).toBytes());
      if (ResponseApdu.isSucceed(response) && response.length >= EMVPaymentRecord.DEFAULT_SIZE / BitUtils.BYTE_SIZE) {
        EMVPaymentRecord record=new EMVPaymentRecord();
        record.parse(response);
        if (record != null) {
          if (record.getCurrency() == null) {
            record.setCurrency(CurrencyEnum.XXX);
          }
          listRecord.add(record);
        }
      }
    }
    pCard.setListPayment(listRecord);
  }
}",0.8969957081545065
20139,"@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  new SimpleAsyncTask(){
    /** 
 * Tag
 */
    private Tag mTag;
    /** 
 * Tag comm
 */
    private IsoDep mTagcomm;
    /** 
 * Emv Card
 */
    private EMVCard mCard;
    /** 
 * Boolean to indicate exception
 */
    private boolean mException;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      if (mDialog == null) {
        mDialog=ProgressDialog.show(HomeActivity.this,getString(R.string.card_reading),getString(R.string.card_reading_desc),true,false);
      }
 else {
        mDialog.show();
      }
    }
    @Override protected void doInBackground(){
      mTag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
      mTagcomm=IsoDep.get(mTag);
      if (mTagcomm == null) {
        display(getText(R.string.error_communication_nfc),false);
        return;
      }
      mException=false;
      try {
        mTagcomm.connect();
        IProvider prov=new Provider(mTagcomm);
        EMVParser parser=new EMVParser(prov,true);
        mCard=parser.readEmvCard();
      }
 catch (      IOException e) {
        mException=true;
      }
 finally {
        if (mTagcomm != null) {
          try {
            mTagcomm.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
    @Override protected void onPostExecute(    final Object result){
      if (mDialog != null) {
        mDialog.cancel();
      }
      if (!mException) {
        if (mCard != null && StringUtils.isNotBlank(mCard.getAid())) {
          if (!mList.contains(mCard)) {
            mList.add(mCard);
            mAdapter.notifyDataSetChanged();
            display(getText(R.string.card_added),true);
          }
 else {
            display(getText(R.string.error_card_already_added),false);
          }
        }
 else {
          display(getText(R.string.error_card_unknown),false);
        }
      }
 else {
        display(getResources().getText(R.string.error_communication_nfc),false);
      }
    }
  }
.execute();
}","@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  new SimpleAsyncTask(){
    /** 
 * Tag
 */
    private Tag mTag;
    /** 
 * Tag comm
 */
    private IsoDep mTagcomm;
    /** 
 * Emv Card
 */
    private EMVCard mCard;
    /** 
 * Boolean to indicate exception
 */
    private boolean mException;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      if (mDialog == null) {
        mDialog=ProgressDialog.show(HomeActivity.this,getString(R.string.card_reading),getString(R.string.card_reading_desc),true,false);
      }
 else {
        mDialog.show();
      }
    }
    @Override protected void doInBackground(){
      mTag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
      mTagcomm=IsoDep.get(mTag);
      if (mTagcomm == null) {
        display(getText(R.string.error_communication_nfc),false);
        return;
      }
      mException=false;
      try {
        mTagcomm.connect();
        IProvider prov=new Provider(mTagcomm);
        EMVParser parser=new EMVParser(prov,true);
        mCard=parser.readEmvCard();
      }
 catch (      IOException e) {
        mException=true;
      }
 finally {
        if (mTagcomm != null) {
          try {
            mTagcomm.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
    @Override protected void onPostExecute(    final Object result){
      if (mDialog != null) {
        mDialog.cancel();
      }
      if (!mException) {
        if (mCard != null && StringUtils.isNotBlank(mCard.getCardNumber())) {
          if (!mList.contains(mCard)) {
            mList.add(mCard);
            mAdapter.notifyDataSetChanged();
            display(getText(R.string.card_added),true);
          }
 else {
            display(getText(R.string.error_card_already_added),false);
          }
        }
 else {
          display(getText(R.string.error_card_unknown),false);
        }
      }
 else {
        display(getResources().getText(R.string.error_communication_nfc),false);
      }
    }
  }
.execute();
}",0.9968438941490652
20140,"@Override protected void onPostExecute(final Object result){
  if (mDialog != null) {
    mDialog.cancel();
  }
  if (!mException) {
    if (mCard != null && StringUtils.isNotBlank(mCard.getAid())) {
      if (!mList.contains(mCard)) {
        mList.add(mCard);
        mAdapter.notifyDataSetChanged();
        display(getText(R.string.card_added),true);
      }
 else {
        display(getText(R.string.error_card_already_added),false);
      }
    }
 else {
      display(getText(R.string.error_card_unknown),false);
    }
  }
 else {
    display(getResources().getText(R.string.error_communication_nfc),false);
  }
}","@Override protected void onPostExecute(final Object result){
  if (mDialog != null) {
    mDialog.cancel();
  }
  if (!mException) {
    if (mCard != null && StringUtils.isNotBlank(mCard.getCardNumber())) {
      if (!mList.contains(mCard)) {
        mList.add(mCard);
        mAdapter.notifyDataSetChanged();
        display(getText(R.string.card_added),true);
      }
 else {
        display(getText(R.string.error_card_already_added),false);
      }
    }
 else {
      display(getText(R.string.error_card_unknown),false);
    }
  }
 else {
    display(getResources().getText(R.string.error_communication_nfc),false);
  }
}",0.989558232931727
20141,"@Override public View getView(final int position,final View pConvertView,final ViewGroup parent){
  View v=pConvertView;
  if (pConvertView == null) {
    v=View.inflate(mContext,R.layout.event_item,null);
  }
  TextView date=ViewHolder.get(v,R.id.event_date);
  TextView amount=ViewHolder.get(v,R.id.event_price);
  TextView symbol=ViewHolder.get(v,R.id.event_symbol);
  EMVPaymentRecord event=(EMVPaymentRecord)getItem(position);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
  date.setText(format.format(event.getTransactionDate()));
  Currency currency=Currency.getInstance(event.getCurrency().getCode());
  if (currency != null) {
    symbol.setText(currency.getSymbol(Locale.getDefault()));
    amount.setText(event.getCurrency().format(event.getAmount().longValue()));
  }
 else {
    amount.setText(String.valueOf(event.getAmount().longValue()));
  }
  ViewUtils.setTypeFace(EmvApplication.sTypeface,date,amount,symbol);
  return v;
}","@Override public View getView(final int position,final View pConvertView,final ViewGroup parent){
  View v=pConvertView;
  if (pConvertView == null) {
    v=View.inflate(mContext,R.layout.event_item,null);
  }
  TextView date=ViewHolder.get(v,R.id.event_date);
  TextView amount=ViewHolder.get(v,R.id.event_price);
  TextView symbol=ViewHolder.get(v,R.id.event_symbol);
  EMVPaymentRecord event=(EMVPaymentRecord)getItem(position);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
  date.setText(format.format(event.getTransactionDate()));
  if (event.getCurrency() != CurrencyEnum.XXX) {
    Currency currency=Currency.getInstance(event.getCurrency().getCode());
    if (currency != null) {
      symbol.setText(currency.getSymbol(Locale.getDefault()));
      amount.setText(event.getCurrency().format(event.getAmount().longValue()));
    }
 else {
      amount.setText(String.valueOf(event.getAmount().longValue()));
    }
  }
 else {
    amount.setText(event.getCurrency().format(event.getAmount().longValue()));
  }
  ViewUtils.setTypeFace(EmvApplication.sTypeface,date,amount,symbol);
  return v;
}",0.9256120527306968
20142,"/** 
 * Extract card data (card number + expire date)
 * @param pCard card object
 * @param pData
 */
protected void extractCardData(final EMVCard pCard,final byte[] pData){
  byte[] track2=TLVUtil.getValue(pData,EMVTags.TRACK_2_EQV_DATA);
  if (track2 != null) {
    BitUtils bit=new BitUtils(track2);
    pCard.setCardNumber(bit.getNextHexaString(64));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    try {
      String date=bit.getNextHexaString(5 * 4);
      if (date.length() > 5) {
        date=date.substring(0,5);
      }
      pCard.setExpireDate(DateUtils.truncate(sdf.parse(date),Calendar.MONTH));
    }
 catch (    ParseException e) {
      LOGGER.error(""String_Node_Str"");
    }
  }
}","/** 
 * Extract card data (card number + expire date)
 * @param pCard card object
 * @param pData
 */
protected boolean extractCardData(final EMVCard pCard,final byte[] pData){
  boolean ret=false;
  byte[] track2=TLVUtil.getValue(pData,EMVTags.TRACK_2_EQV_DATA);
  if (track2 != null) {
    BitUtils bit=new BitUtils(track2);
    pCard.setCardNumber(bit.getNextHexaString(64));
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    try {
      String date=bit.getNextHexaString(5 * 4);
      if (date.length() > 5) {
        date=date.substring(0,5);
      }
      pCard.setExpireDate(DateUtils.truncate(sdf.parse(date),Calendar.MONTH));
      ret=true;
    }
 catch (    ParseException e) {
      LOGGER.error(""String_Node_Str"");
    }
  }
  return ret;
}",0.9595300261096604
20143,"/** 
 * Method used to extract commons card data
 * @param pProvider provider
 * @param pCard Card data
 * @param pGpo global processing options response
 */
private void extractCommonsCardData(final IProvider pProvider,final EMVCard pCard,final byte[] pGpo) throws CommunicationException {
  byte data[]=TLVUtil.getValue(pGpo,EMVTags.APPLICATION_FILE_LOCATOR);
  if (TLVUtil.startWith(pGpo,EMVTags.RESPONSE_MESSAGE_TEMPLATE_1) || data != null) {
    if (data == null) {
      data=pGpo;
    }
    List<Afl> listAfl=extractAfl(data);
    boolean found=false;
    for (    Afl afl : listAfl) {
      int sfi=afl.getSfi();
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,index << 3 | 4,0).toBytes());
        if (info[info.length - 2] == (byte)0x6C) {
          info=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,sfi,index << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          try {
            extractCardData(pCard,info);
            found=true;
            break;
          }
 catch (          Exception e) {
          }
        }
      }
      if (found) {
        break;
      }
    }
  }
 else {
    try {
      extractCardData(pCard,pGpo);
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Method used to extract commons card data
 * @param pProvider provider
 * @param pCard Card data
 * @param pGpo global processing options response
 */
private void extractCommonsCardData(final IProvider pProvider,final EMVCard pCard,final byte[] pGpo) throws CommunicationException {
  byte data[]=TLVUtil.getValue(pGpo,EMVTags.RESPONSE_MESSAGE_TEMPLATE_1);
  if (data != null) {
    data=ArrayUtils.subarray(data,2,data.length);
  }
 else {
    data=TLVUtil.getValue(pGpo,EMVTags.APPLICATION_FILE_LOCATOR);
  }
  if (data != null) {
    List<Afl> listAfl=extractAfl(data);
    boolean found=false;
    for (    Afl afl : listAfl) {
      for (int index=afl.getFirstRecord(); index <= afl.getLastRecord(); index++) {
        byte[] info=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,0).toBytes());
        if (info[info.length - 2] == (byte)0x6C) {
          info=pProvider.transceive(new CommandApdu(CommandEnum.READ_RECORD,index,afl.getSfi() << 3 | 4,info[info.length - 1]).toBytes());
        }
        if (ResponseUtils.isSucceed(info)) {
          try {
            if (found=extractCardData(pCard,info)) {
              break;
            }
          }
 catch (          Exception e) {
          }
        }
      }
      if (found) {
        break;
      }
    }
  }
 else {
    try {
      extractCardData(pCard,pGpo);
    }
 catch (    Exception e) {
    }
  }
}",0.8539807211710103
20144,"/** 
 * Extract list of application file locator from GPO response
 * @param pGpo GPO response
 * @return list of AFL
 */
protected List<Afl> extractAfl(final byte[] pGpo){
  List<Afl> list=new ArrayList<Afl>();
  if (pGpo.length - 4 > 0) {
    for (int i=0; i < (pGpo.length - 4) / 4; i++) {
      Afl afl=new Afl();
      afl.setSfi(pGpo[4 + i * 4] >> 3);
      afl.setFirstRecord(pGpo[5 + i * 4]);
      afl.setLastRecord(pGpo[6 + i * 4]);
      afl.setOfflineAuthentication(pGpo[7 + i * 4] == 1);
      list.add(afl);
    }
  }
  return list;
}","/** 
 * Extract list of application file locator from Afl response
 * @param pAfl AFL data
 * @return list of AFL
 */
protected List<Afl> extractAfl(final byte[] pAfl){
  List<Afl> list=new ArrayList<Afl>();
  ByteArrayInputStream bai=new ByteArrayInputStream(pAfl);
  while (bai.available() >= 4) {
    Afl afl=new Afl();
    afl.setSfi(bai.read() >> 3);
    afl.setFirstRecord(bai.read());
    afl.setLastRecord(bai.read());
    afl.setOfflineAuthentication(bai.read() == 1);
    list.add(afl);
  }
  return list;
}",0.5934272300469483
20145,"private static String getTagValueAsString(final ITag tag,final byte[] value){
  StringBuilder buf=new StringBuilder();
switch (tag.getTagValueType()) {
case TEXT:
    buf.append(""String_Node_Str"");
  buf.append(new String(value));
break;
case NUMERIC:
buf.append(""String_Node_Str"");
break;
case BINARY:
buf.append(""String_Node_Str"");
break;
case MIXED:
buf.append(""String_Node_Str"");
buf.append(getSafePrintChars(value));
break;
case DOL:
buf.append(""String_Node_Str"");
break;
}
return buf.toString();
}","private static String getTagValueAsString(final ITag tag,final byte[] value){
  StringBuilder buf=new StringBuilder();
switch (tag.getTagValueType()) {
case TEXT:
    buf.append(""String_Node_Str"");
  buf.append(new String(value));
break;
case NUMERIC:
buf.append(""String_Node_Str"");
break;
case BINARY:
buf.append(""String_Node_Str"");
break;
case MIXED:
buf.append(""String_Node_Str"");
buf.append(getSafePrintChars(value));
break;
case DOL:
buf.append(""String_Node_Str"");
break;
default :
break;
}
return buf.toString();
}",0.9833822091886608
20146,"public static int getLength(final List<TagAndLength> pList){
  int ret=0;
  if (pList != null) {
    for (    TagAndLength tl : pList) {
      ret+=tl.getLength();
    }
  }
  return ret;
}","/** 
 * Method used to get length of all Tags
 * @param pList tag length list
 * @return the sum of tag length
 */
public static int getLength(final List<TagAndLength> pList){
  int ret=0;
  if (pList != null) {
    for (    TagAndLength tl : pList) {
      ret+=tl.getLength();
    }
  }
  return ret;
}",0.7667342799188641
20147,"@Test public void testAfl() throws Exception {
  @SuppressWarnings(""String_Node_Str"") List<Afl> list=(List<Afl>)Whitebox.invokeMethod(DefaultEmvParser.getInstance(),DefaultEmvParser.class,""String_Node_Str"",BytesUtils.fromString(""String_Node_Str""));
  Assertions.assertThat(list.size()).isEqualTo(3);
  Assertions.assertThat(list.get(0).getSfi()).isEqualTo(1);
  Assertions.assertThat(list.get(0).getFirstRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(0).getLastRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(0).isOfflineAuthentication()).isEqualTo(false);
  Assertions.assertThat(list.get(1).getSfi()).isEqualTo(2);
  Assertions.assertThat(list.get(1).getFirstRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(1).getLastRecord()).isEqualTo(5);
  Assertions.assertThat(list.get(1).isOfflineAuthentication()).isEqualTo(false);
  Assertions.assertThat(list.get(2).getSfi()).isEqualTo(3);
  Assertions.assertThat(list.get(2).getFirstRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(2).getLastRecord()).isEqualTo(2);
  Assertions.assertThat(list.get(2).isOfflineAuthentication()).isEqualTo(true);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testAfl() throws Exception {
  List<Afl> list=(List<Afl>)Whitebox.invokeMethod(DefaultEmvParser.getInstance(),DefaultEmvParser.class,""String_Node_Str"",BytesUtils.fromString(""String_Node_Str""));
  Assertions.assertThat(list.size()).isEqualTo(3);
  Assertions.assertThat(list.get(0).getSfi()).isEqualTo(2);
  Assertions.assertThat(list.get(0).getFirstRecord()).isEqualTo(2);
  Assertions.assertThat(list.get(0).getLastRecord()).isEqualTo(3);
  Assertions.assertThat(list.get(0).isOfflineAuthentication()).isEqualTo(true);
  Assertions.assertThat(list.get(1).getSfi()).isEqualTo(3);
  Assertions.assertThat(list.get(1).getFirstRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(1).getLastRecord()).isEqualTo(5);
  Assertions.assertThat(list.get(1).isOfflineAuthentication()).isEqualTo(false);
  Assertions.assertThat(list.get(2).getSfi()).isEqualTo(4);
  Assertions.assertThat(list.get(2).getFirstRecord()).isEqualTo(1);
  Assertions.assertThat(list.get(2).getLastRecord()).isEqualTo(2);
  Assertions.assertThat(list.get(2).isOfflineAuthentication()).isEqualTo(false);
}",0.4973404255319149
20148,"@Test public void tesCardType() throws Exception {
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.VISA);
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.MASTER_CARD1);
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.UNIONPAY);
}","@Test public void tesCardType() throws Exception {
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.VISA);
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.MASTER_CARD1);
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(""String_Node_Str"")).isEqualTo(EMVCardTypeEnum.UNIONPAY);
  Assertions.assertThat(EMVCardTypeEnum.getCardTypeByCardNumber(null)).isEqualTo(null);
}",0.9041394335511984
20149,"@Override protected void doInBackground(){
  mTag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
  mTagcomm=IsoDep.get(mTag);
  if (mTagcomm == null) {
    display(getText(R.string.error_communication_nfc),false);
    return;
  }
  mException=false;
  try {
    mTagcomm.connect();
    IProvider prov=new Provider(mTagcomm);
    EMVParser parser=new EMVParser(prov,true);
    mCard=parser.readEmvCard();
  }
 catch (  IOException e) {
    mException=true;
  }
 finally {
    if (mTagcomm != null) {
      try {
        mTagcomm.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","@Override protected void doInBackground(){
  mTagcomm=IsoDep.get(mTag);
  if (mTagcomm == null) {
    display(getText(R.string.error_communication_nfc),false);
    return;
  }
  mException=false;
  try {
    mTagcomm.connect();
    IProvider prov=new Provider(mTagcomm);
    EMVParser parser=new EMVParser(prov,true);
    mCard=parser.readEmvCard();
  }
 catch (  IOException e) {
    mException=true;
  }
 finally {
    if (mTagcomm != null) {
      try {
        mTagcomm.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.9507908611599296
20150,"@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  new SimpleAsyncTask(){
    /** 
 * Tag
 */
    private Tag mTag;
    /** 
 * Tag comm
 */
    private IsoDep mTagcomm;
    /** 
 * Emv Card
 */
    private EMVCard mCard;
    /** 
 * Boolean to indicate exception
 */
    private boolean mException;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      if (mDialog == null) {
        mDialog=ProgressDialog.show(HomeActivity.this,getString(R.string.card_reading),getString(R.string.card_reading_desc),true,false);
      }
 else {
        mDialog.show();
      }
    }
    @Override protected void doInBackground(){
      mTag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
      mTagcomm=IsoDep.get(mTag);
      if (mTagcomm == null) {
        display(getText(R.string.error_communication_nfc),false);
        return;
      }
      mException=false;
      try {
        mTagcomm.connect();
        IProvider prov=new Provider(mTagcomm);
        EMVParser parser=new EMVParser(prov,true);
        mCard=parser.readEmvCard();
      }
 catch (      IOException e) {
        mException=true;
      }
 finally {
        if (mTagcomm != null) {
          try {
            mTagcomm.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
    @Override protected void onPostExecute(    final Object result){
      if (mDialog != null) {
        mDialog.cancel();
      }
      if (!mException) {
        if (mCard != null && StringUtils.isNotBlank(mCard.getCardNumber())) {
          if (!mList.contains(mCard)) {
            mList.add(mCard);
            mAdapter.notifyDataSetChanged();
            display(getText(R.string.card_added),true);
          }
 else {
            display(getText(R.string.error_card_already_added),false);
          }
        }
 else {
          display(getText(R.string.error_card_unknown),false);
        }
      }
 else {
        display(getResources().getText(R.string.error_communication_nfc),false);
      }
    }
  }
.execute();
}","@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  final Tag mTag=intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
  if (mTag != null) {
    new SimpleAsyncTask(){
      /** 
 * Tag comm
 */
      private IsoDep mTagcomm;
      /** 
 * Emv Card
 */
      private EMVCard mCard;
      /** 
 * Boolean to indicate exception
 */
      private boolean mException;
      @Override protected void onPreExecute(){
        super.onPreExecute();
        if (mDialog == null) {
          mDialog=ProgressDialog.show(HomeActivity.this,getString(R.string.card_reading),getString(R.string.card_reading_desc),true,false);
        }
 else {
          mDialog.show();
        }
      }
      @Override protected void doInBackground(){
        mTagcomm=IsoDep.get(mTag);
        if (mTagcomm == null) {
          display(getText(R.string.error_communication_nfc),false);
          return;
        }
        mException=false;
        try {
          mTagcomm.connect();
          IProvider prov=new Provider(mTagcomm);
          EMVParser parser=new EMVParser(prov,true);
          mCard=parser.readEmvCard();
        }
 catch (        IOException e) {
          mException=true;
        }
 finally {
          if (mTagcomm != null) {
            try {
              mTagcomm.close();
            }
 catch (            IOException e) {
            }
          }
        }
      }
      @Override protected void onPostExecute(      final Object result){
        if (mDialog != null) {
          mDialog.cancel();
        }
        if (!mException) {
          if (mCard != null && StringUtils.isNotBlank(mCard.getCardNumber())) {
            if (!mList.contains(mCard)) {
              mList.add(mCard);
              mAdapter.notifyDataSetChanged();
              display(getText(R.string.card_added),true);
            }
 else {
              display(getText(R.string.error_card_already_added),false);
            }
          }
 else {
            display(getText(R.string.error_card_unknown),false);
          }
        }
 else {
          display(getResources().getText(R.string.error_communication_nfc),false);
        }
      }
    }
.execute();
  }
}",0.689622641509434
20151,"/** 
 * Method used to get the resource Id for card type
 * @param pEnum card enum
 * @return resource id
 */
public static int getResourceIdCardType(final EMVCardTypeEnum pEnum){
  int ret=0;
switch (pEnum) {
case AMERICAN_EXPRESS:
    ret=R.drawable.amex;
  break;
case MASTER_CARD1:
case MASTER_CARD2:
ret=R.drawable.mastercard;
break;
case VISA:
ret=R.drawable.visa;
break;
default :
break;
}
return ret;
}","/** 
 * Method used to get the resource Id for card type
 * @param pEnum card enum
 * @return resource id
 */
public static int getResourceIdCardType(final EMVCardTypeEnum pEnum){
  int ret=0;
  if (pEnum != null) {
switch (pEnum) {
case AMERICAN_EXPRESS:
      ret=R.drawable.amex;
    break;
case MASTER_CARD1:
case MASTER_CARD2:
  ret=R.drawable.mastercard;
break;
case VISA:
ret=R.drawable.visa;
break;
default :
break;
}
}
return ret;
}",0.9353701527614572
20152,"/** 
 * Method used to format card number
 * @param pCardNumber card number to display
 * @param pType card type
 * @return the card number formated
 */
public static String formatCardNumber(final String pCardNumber,final EMVCardTypeEnum pType){
  String ret=StringUtils.EMPTY;
  if (StringUtils.isNotBlank(pCardNumber)) {
    if (pType != null && pType == EMVCardTypeEnum.AMERICAN_EXPRESS) {
      ret=StringUtils.deleteWhitespace(pCardNumber).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else {
      ret=StringUtils.deleteWhitespace(pCardNumber).replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
  }
  return ret;
}","/** 
 * Method used to format card number
 * @param pCardNumber card number to display
 * @param pType card type
 * @return the card number formated
 */
public static String formatCardNumber(final String pCardNumber,final EMVCardTypeEnum pType){
  String ret=StringUtils.EMPTY;
  if (StringUtils.isNotBlank(pCardNumber)) {
    if (pType != null && pType == EMVCardTypeEnum.AMERICAN_EXPRESS) {
      ret=StringUtils.deleteWhitespace(pCardNumber).replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
 else {
      ret=StringUtils.deleteWhitespace(pCardNumber).replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
  }
 else {
    ret=""String_Node_Str"";
  }
  return ret;
}",0.9603638726445743
20153,"public WeatherForecast getForecastWeather(String data) throws WeatherLibException {
  WeatherForecast forecast=new WeatherForecast();
  try {
    JSONObject jObj=new JSONObject(data);
    Location loc=new Location();
    JSONObject cObj=jObj.getJSONObject(""String_Node_Str"");
    loc.setCity(cObj.getString(""String_Node_Str""));
    JSONObject cooObj=cObj.getJSONObject(""String_Node_Str"");
    loc.setLatitude((float)cooObj.getDouble(""String_Node_Str""));
    loc.setLongitude((float)cooObj.getDouble(""String_Node_Str""));
    loc.setCountry(cObj.getString(""String_Node_Str""));
    loc.setPopulation(cObj.getLong(""String_Node_Str""));
    JSONArray jArr=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < jArr.length(); i++) {
      JSONObject jDayForecast=jArr.getJSONObject(i);
      DayForecast df=new DayForecast();
      df.timestamp=jDayForecast.getLong(""String_Node_Str"");
      df.weather.location=loc;
      df.weather.clouds.setPerc(jDayForecast.getInt(""String_Node_Str""));
      df.weather.wind.setSpeed(getFloat(""String_Node_Str"",jDayForecast));
      df.weather.wind.setDeg(getFloat(""String_Node_Str"",jDayForecast));
      JSONObject rObj=jObj.optJSONObject(""String_Node_Str"");
      if (rObj != null) {
        float amm1=(float)rObj.optDouble(""String_Node_Str"");
        if (amm1 > 0) {
          df.weather.rain[0].setAmmount(amm1);
          df.weather.rain[0].setTime(""String_Node_Str"");
        }
        float amm3=(float)rObj.optDouble(""String_Node_Str"");
        if (amm3 > 0) {
          df.weather.rain[1].setAmmount(amm3);
          df.weather.rain[1].setTime(""String_Node_Str"");
        }
      }
      JSONObject jTempObj=jDayForecast.getJSONObject(""String_Node_Str"");
      df.forecastTemp.day=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.min=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.max=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.night=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.eve=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.morning=(float)jTempObj.getDouble(""String_Node_Str"");
      df.weather.currentCondition.setPressure((float)jDayForecast.getDouble(""String_Node_Str""));
      df.weather.currentCondition.setHumidity((float)jDayForecast.getDouble(""String_Node_Str""));
      JSONArray jWeatherArr=jDayForecast.getJSONArray(""String_Node_Str"");
      JSONObject jWeatherObj=jWeatherArr.getJSONObject(0);
      df.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",jWeatherObj));
      if (codeProvider != null)       df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(df.weather.currentCondition.getWeatherId())));
      df.weather.currentCondition.setDescr(getString(""String_Node_Str"",jWeatherObj));
      df.weather.currentCondition.setCondition(getString(""String_Node_Str"",jWeatherObj));
      df.weather.currentCondition.setIcon(getString(""String_Node_Str"",jWeatherObj));
      forecast.addForecast(df);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  forecast.setUnit(units);
  return forecast;
}","public WeatherForecast getForecastWeather(String data) throws WeatherLibException {
  WeatherForecast forecast=new WeatherForecast();
  try {
    JSONObject jObj=new JSONObject(data);
    Location loc=new Location();
    JSONObject cObj=jObj.getJSONObject(""String_Node_Str"");
    loc.setCity(cObj.getString(""String_Node_Str""));
    JSONObject cooObj=cObj.getJSONObject(""String_Node_Str"");
    loc.setLatitude((float)cooObj.getDouble(""String_Node_Str""));
    loc.setLongitude((float)cooObj.getDouble(""String_Node_Str""));
    loc.setCountry(cObj.getString(""String_Node_Str""));
    loc.setPopulation(cObj.getLong(""String_Node_Str""));
    JSONArray jArr=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < jArr.length(); i++) {
      JSONObject jDayForecast=jArr.getJSONObject(i);
      DayForecast df=new DayForecast();
      df.timestamp=jDayForecast.getLong(""String_Node_Str"");
      df.weather.location=loc;
      df.weather.clouds.setPerc(jDayForecast.getInt(""String_Node_Str""));
      df.weather.wind.setSpeed(getFloat(""String_Node_Str"",jDayForecast));
      df.weather.wind.setDeg(getFloat(""String_Node_Str"",jDayForecast));
      JSONObject rObj=jObj.optJSONObject(""String_Node_Str"");
      if (rObj != null) {
        float amm1=(float)rObj.optDouble(""String_Node_Str"");
        if (amm1 > 0) {
          df.weather.rain[0].setAmmount(amm1);
          df.weather.rain[0].setTime(""String_Node_Str"");
        }
        float amm3=(float)rObj.optDouble(""String_Node_Str"");
        if (amm3 > 0) {
          df.weather.rain[1].setAmmount(amm3);
          df.weather.rain[1].setTime(""String_Node_Str"");
        }
      }
      JSONObject jTempObj=jDayForecast.getJSONObject(""String_Node_Str"");
      df.forecastTemp.day=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.min=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.max=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.night=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.eve=(float)jTempObj.getDouble(""String_Node_Str"");
      df.forecastTemp.morning=(float)jTempObj.getDouble(""String_Node_Str"");
      df.weather.currentCondition.setPressure((float)jDayForecast.getDouble(""String_Node_Str""));
      df.weather.currentCondition.setHumidity((float)jDayForecast.getDouble(""String_Node_Str""));
      JSONArray jWeatherArr=jDayForecast.getJSONArray(""String_Node_Str"");
      JSONObject jWeatherObj=jWeatherArr.getJSONObject(0);
      df.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",jWeatherObj));
      if (codeProvider != null) {
        try {
          df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(df.weather.currentCondition.getWeatherId())));
        }
 catch (        Throwable t) {
          df.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
        }
      }
      df.weather.currentCondition.setDescr(getString(""String_Node_Str"",jWeatherObj));
      df.weather.currentCondition.setCondition(getString(""String_Node_Str"",jWeatherObj));
      df.weather.currentCondition.setIcon(getString(""String_Node_Str"",jWeatherObj));
      forecast.addForecast(df);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  forecast.setUnit(units);
  return forecast;
}",0.975239863819251
20154,"@Override public WeatherHourForecast getHourForecastWeather(String data) throws WeatherLibException {
  WeatherHourForecast forecast=new WeatherHourForecast();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONArray wList=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      JSONObject jHour=wList.getJSONObject(i);
      HourForecast hourForecast=new HourForecast();
      hourForecast.timestamp=getLong(""String_Node_Str"",jHour);
      JSONObject jMain=jHour.getJSONObject(""String_Node_Str"");
      hourForecast.weather.temperature.setTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.temperature.setMinTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.temperature.setMaxTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressure(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressureSeaLevel(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressureGroundLevel(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setHumidity(getFloat(""String_Node_Str"",jMain));
      JSONArray jArr1=jHour.getJSONArray(""String_Node_Str"");
      JSONObject JSONWeather=jArr1.getJSONObject(0);
      hourForecast.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",JSONWeather));
      if (codeProvider != null)       hourForecast.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(hourForecast.weather.currentCondition.getWeatherId())));
      hourForecast.weather.currentCondition.setDescr(getString(""String_Node_Str"",JSONWeather));
      hourForecast.weather.currentCondition.setCondition(getString(""String_Node_Str"",JSONWeather));
      hourForecast.weather.currentCondition.setIcon(getString(""String_Node_Str"",JSONWeather));
      JSONObject cObj=getObject(""String_Node_Str"",jHour);
      hourForecast.weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
      JSONObject wObj=getObject(""String_Node_Str"",jHour);
      hourForecast.weather.wind.setSpeed(getFloat(""String_Node_Str"",wObj));
      hourForecast.weather.wind.setDeg(getFloat(""String_Node_Str"",wObj));
      hourForecast.weather.wind.setGust((float)wObj.optDouble(""String_Node_Str""));
      forecast.addForecast(hourForecast);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  forecast.setUnit(units);
  return forecast;
}","@Override public WeatherHourForecast getHourForecastWeather(String data) throws WeatherLibException {
  WeatherHourForecast forecast=new WeatherHourForecast();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONArray wList=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      JSONObject jHour=wList.getJSONObject(i);
      HourForecast hourForecast=new HourForecast();
      hourForecast.timestamp=getLong(""String_Node_Str"",jHour);
      JSONObject jMain=jHour.getJSONObject(""String_Node_Str"");
      hourForecast.weather.temperature.setTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.temperature.setMinTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.temperature.setMaxTemp(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressure(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressureSeaLevel(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setPressureGroundLevel(getFloat(""String_Node_Str"",jMain));
      hourForecast.weather.currentCondition.setHumidity(getFloat(""String_Node_Str"",jMain));
      JSONArray jArr1=jHour.getJSONArray(""String_Node_Str"");
      JSONObject JSONWeather=jArr1.getJSONObject(0);
      hourForecast.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",JSONWeather));
      if (codeProvider != null) {
        try {
          hourForecast.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(hourForecast.weather.currentCondition.getWeatherId())));
        }
 catch (        Throwable t) {
          hourForecast.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
        }
      }
      hourForecast.weather.currentCondition.setDescr(getString(""String_Node_Str"",JSONWeather));
      hourForecast.weather.currentCondition.setCondition(getString(""String_Node_Str"",JSONWeather));
      hourForecast.weather.currentCondition.setIcon(getString(""String_Node_Str"",JSONWeather));
      JSONObject cObj=getObject(""String_Node_Str"",jHour);
      hourForecast.weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
      JSONObject wObj=getObject(""String_Node_Str"",jHour);
      hourForecast.weather.wind.setSpeed(getFloat(""String_Node_Str"",wObj));
      hourForecast.weather.wind.setDeg(getFloat(""String_Node_Str"",wObj));
      hourForecast.weather.wind.setGust((float)wObj.optDouble(""String_Node_Str""));
      forecast.addForecast(hourForecast);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  forecast.setUnit(units);
  return forecast;
}",0.9667709147771696
20155,"public HistoricalWeather getHistoricalWeather(String data) throws WeatherLibException {
  HistoricalWeather histWeather=new HistoricalWeather();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONArray wList=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      JSONObject jHour=wList.getJSONObject(i);
      HistoricalHourWeather hhWeather=new HistoricalHourWeather();
      JSONObject cObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
      hhWeather.timestamp=jHour.getLong(""String_Node_Str"") * 1000;
      JSONObject mainObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.currentCondition.setPressure((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setTemp((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setMaxTemp((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setMinTemp((float)mainObj.getDouble(""String_Node_Str""));
      JSONObject wObj=jHour.getJSONArray(""String_Node_Str"").getJSONObject(0);
      hhWeather.weather.currentCondition.setDescr(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setIcon(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setCondition(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",wObj));
      String tmp=String.valueOf(hhWeather.weather.currentCondition.getWeatherId()) + ""String_Node_Str"";
      if (codeProvider != null)       hhWeather.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(hhWeather.weather.currentCondition.getWeatherId())));
      JSONObject windObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.wind.setSpeed((float)windObj.getDouble(""String_Node_Str""));
      hhWeather.weather.wind.setDeg((float)windObj.getDouble(""String_Node_Str""));
      histWeather.addHistoricalHourWeather(hhWeather);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  histWeather.setUnit(units);
  return histWeather;
}","public HistoricalWeather getHistoricalWeather(String data) throws WeatherLibException {
  HistoricalWeather histWeather=new HistoricalWeather();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONArray wList=jObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      JSONObject jHour=wList.getJSONObject(i);
      HistoricalHourWeather hhWeather=new HistoricalHourWeather();
      JSONObject cObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
      hhWeather.timestamp=jHour.getLong(""String_Node_Str"") * 1000;
      JSONObject mainObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.currentCondition.setPressure((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setTemp((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setMaxTemp((float)mainObj.getDouble(""String_Node_Str""));
      hhWeather.weather.temperature.setMinTemp((float)mainObj.getDouble(""String_Node_Str""));
      JSONObject wObj=jHour.getJSONArray(""String_Node_Str"").getJSONObject(0);
      hhWeather.weather.currentCondition.setDescr(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setIcon(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setCondition(wObj.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",wObj));
      String tmp=String.valueOf(hhWeather.weather.currentCondition.getWeatherId()) + ""String_Node_Str"";
      if (codeProvider != null) {
        try {
          hhWeather.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(hhWeather.weather.currentCondition.getWeatherId())));
        }
 catch (        Throwable t) {
          hhWeather.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
        }
      }
      JSONObject windObj=getObject(""String_Node_Str"",jHour);
      hhWeather.weather.wind.setSpeed((float)windObj.getDouble(""String_Node_Str""));
      hhWeather.weather.wind.setDeg((float)windObj.getDouble(""String_Node_Str""));
      histWeather.addHistoricalHourWeather(hhWeather);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  histWeather.setUnit(units);
  return histWeather;
}",0.9631427940851908
20156,"public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    JSONObject jObj=new JSONObject(data);
    Location loc=new Location();
    JSONObject coordObj=getObject(""String_Node_Str"",jObj);
    loc.setLatitude(getFloat(""String_Node_Str"",coordObj));
    loc.setLongitude(getFloat(""String_Node_Str"",coordObj));
    JSONObject sysObj=getObject(""String_Node_Str"",jObj);
    loc.setCountry(getString(""String_Node_Str"",sysObj));
    loc.setSunrise(getInt(""String_Node_Str"",sysObj));
    loc.setSunset(getInt(""String_Node_Str"",sysObj));
    loc.setCity(getString(""String_Node_Str"",jObj));
    weather.location=loc;
    JSONArray jArr=jObj.getJSONArray(""String_Node_Str"");
    JSONObject JSONWeather=jArr.getJSONObject(0);
    weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",JSONWeather));
    if (codeProvider != null)     weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(weather.currentCondition.getWeatherId())));
    weather.currentCondition.setDescr(getString(""String_Node_Str"",JSONWeather));
    weather.currentCondition.setCondition(getString(""String_Node_Str"",JSONWeather));
    weather.currentCondition.setIcon(getString(""String_Node_Str"",JSONWeather));
    JSONObject mainObj=getObject(""String_Node_Str"",jObj);
    weather.currentCondition.setHumidity(getInt(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressure(getFloat(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressureGroundLevel(getFloat(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressureSeaLevel(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setMaxTemp(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setMinTemp(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setTemp(getFloat(""String_Node_Str"",mainObj));
    JSONObject wObj=getObject(""String_Node_Str"",jObj);
    weather.wind.setSpeed(getFloat(""String_Node_Str"",wObj));
    weather.wind.setDeg(getFloat(""String_Node_Str"",wObj));
    weather.wind.setGust((float)wObj.optDouble(""String_Node_Str""));
    JSONObject cObj=getObject(""String_Node_Str"",jObj);
    weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
    JSONObject rObj=jObj.optJSONObject(""String_Node_Str"");
    if (rObj != null) {
      float amm1=(float)rObj.optDouble(""String_Node_Str"");
      if (amm1 > 0) {
        weather.rain[0].setAmmount(amm1);
        weather.rain[0].setTime(""String_Node_Str"");
      }
      float amm3=(float)rObj.optDouble(""String_Node_Str"");
      if (amm3 > 0) {
        weather.rain[1].setAmmount(amm3);
        weather.rain[1].setTime(""String_Node_Str"");
      }
    }
    JSONObject sObj=jObj.optJSONObject(""String_Node_Str"");
    if (sObj != null) {
      weather.snow.setAmmount((float)sObj.optDouble(""String_Node_Str""));
      weather.snow.setTime(""String_Node_Str"");
    }
  }
 catch (  JSONException json) {
    json.printStackTrace();
    throw new WeatherLibException(json);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}","public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    JSONObject jObj=new JSONObject(data);
    Location loc=new Location();
    JSONObject coordObj=getObject(""String_Node_Str"",jObj);
    loc.setLatitude(getFloat(""String_Node_Str"",coordObj));
    loc.setLongitude(getFloat(""String_Node_Str"",coordObj));
    JSONObject sysObj=getObject(""String_Node_Str"",jObj);
    loc.setCountry(getString(""String_Node_Str"",sysObj));
    loc.setSunrise(getInt(""String_Node_Str"",sysObj));
    loc.setSunset(getInt(""String_Node_Str"",sysObj));
    loc.setCity(getString(""String_Node_Str"",jObj));
    weather.location=loc;
    JSONArray jArr=jObj.getJSONArray(""String_Node_Str"");
    JSONObject JSONWeather=jArr.getJSONObject(0);
    weather.currentCondition.setWeatherId(getInt(""String_Node_Str"",JSONWeather));
    if (codeProvider != null) {
      try {
        weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(weather.currentCondition.getWeatherId())));
      }
 catch (      Throwable t) {
        weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
      }
    }
    weather.currentCondition.setDescr(getString(""String_Node_Str"",JSONWeather));
    weather.currentCondition.setCondition(getString(""String_Node_Str"",JSONWeather));
    weather.currentCondition.setIcon(getString(""String_Node_Str"",JSONWeather));
    JSONObject mainObj=getObject(""String_Node_Str"",jObj);
    weather.currentCondition.setHumidity(getInt(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressure(getFloat(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressureGroundLevel(getFloat(""String_Node_Str"",mainObj));
    weather.currentCondition.setPressureSeaLevel(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setMaxTemp(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setMinTemp(getFloat(""String_Node_Str"",mainObj));
    weather.temperature.setTemp(getFloat(""String_Node_Str"",mainObj));
    JSONObject wObj=getObject(""String_Node_Str"",jObj);
    weather.wind.setSpeed(getFloat(""String_Node_Str"",wObj));
    weather.wind.setDeg(getFloat(""String_Node_Str"",wObj));
    weather.wind.setGust((float)wObj.optDouble(""String_Node_Str""));
    JSONObject cObj=getObject(""String_Node_Str"",jObj);
    weather.clouds.setPerc(getInt(""String_Node_Str"",cObj));
    JSONObject rObj=jObj.optJSONObject(""String_Node_Str"");
    if (rObj != null) {
      float amm1=(float)rObj.optDouble(""String_Node_Str"");
      if (amm1 > 0) {
        weather.rain[0].setAmmount(amm1);
        weather.rain[0].setTime(""String_Node_Str"");
      }
      float amm3=(float)rObj.optDouble(""String_Node_Str"");
      if (amm3 > 0) {
        weather.rain[1].setAmmount(amm3);
        weather.rain[1].setTime(""String_Node_Str"");
      }
    }
    JSONObject sObj=jObj.optJSONObject(""String_Node_Str"");
    if (sObj != null) {
      weather.snow.setAmmount((float)sObj.optDouble(""String_Node_Str""));
      weather.snow.setTime(""String_Node_Str"");
    }
  }
 catch (  JSONException json) {
    json.printStackTrace();
    throw new WeatherLibException(json);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}",0.9773896772181506
20157,"private void parseForecast(JSONObject root,Weather weather) throws JSONException {
  JSONObject forecast1=getObject(""String_Node_Str"",root);
  JSONObject simpleForecast=getObject(""String_Node_Str"",forecast1);
  JSONArray jArr=simpleForecast.getJSONArray(""String_Node_Str"");
  for (int i=0; i < jArr.length(); i++) {
    JSONObject dayForecast=jArr.getJSONObject(i);
    DayForecast df=new DayForecast();
    JSONObject jsonDate=dayForecast.getJSONObject(""String_Node_Str"");
    df.timestamp=jsonDate.getLong(""String_Node_Str"");
    df.weather.currentCondition.setDescr(dayForecast.getString(""String_Node_Str""));
    df.weather.currentCondition.setIcon(dayForecast.getString(""String_Node_Str""));
    if (codeProvider != null)     df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(df.weather.currentCondition.getIcon()));
    if (WeatherUtility.isMetric(config.unitSystem)) {
      df.forecastTemp.max=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.forecastTemp.min=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.weather.wind.setSpeed(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.snow.setTime(""String_Node_Str"");
      df.weather.snow.setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.rain[0].setTime(""String_Node_Str"");
      df.weather.rain[0].setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    }
 else {
      df.forecastTemp.max=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.forecastTemp.min=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.weather.wind.setSpeed(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.snow.setTime(""String_Node_Str"");
      df.weather.snow.setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.rain[0].setTime(""String_Node_Str"");
      df.weather.rain[0].setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    }
    df.weather.wind.setDeg(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    if (i == 0 && weather != null) {
      weather.temperature.setMinTemp(df.forecastTemp.min);
      weather.temperature.setMaxTemp(df.forecastTemp.max);
    }
    forecast.addForecast(df);
  }
  forecast.setUnit(units);
}","private void parseForecast(JSONObject root,Weather weather) throws JSONException {
  JSONObject forecast1=getObject(""String_Node_Str"",root);
  JSONObject simpleForecast=getObject(""String_Node_Str"",forecast1);
  JSONArray jArr=simpleForecast.getJSONArray(""String_Node_Str"");
  for (int i=0; i < jArr.length(); i++) {
    JSONObject dayForecast=jArr.getJSONObject(i);
    DayForecast df=new DayForecast();
    JSONObject jsonDate=dayForecast.getJSONObject(""String_Node_Str"");
    df.timestamp=jsonDate.getLong(""String_Node_Str"");
    df.weather.currentCondition.setDescr(dayForecast.getString(""String_Node_Str""));
    df.weather.currentCondition.setIcon(dayForecast.getString(""String_Node_Str""));
    if (codeProvider != null) {
      try {
        df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(df.weather.currentCondition.getIcon()));
      }
 catch (      Throwable t) {
        df.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
      }
    }
    if (WeatherUtility.isMetric(config.unitSystem)) {
      df.forecastTemp.max=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.forecastTemp.min=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.weather.wind.setSpeed(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.snow.setTime(""String_Node_Str"");
      df.weather.snow.setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.rain[0].setTime(""String_Node_Str"");
      df.weather.rain[0].setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    }
 else {
      df.forecastTemp.max=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.forecastTemp.min=dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"");
      df.weather.wind.setSpeed(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.snow.setTime(""String_Node_Str"");
      df.weather.snow.setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
      df.weather.rain[0].setTime(""String_Node_Str"");
      df.weather.rain[0].setAmmount(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    }
    df.weather.wind.setDeg(dayForecast.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    if (i == 0 && weather != null) {
      weather.temperature.setMinTemp(df.forecastTemp.min);
      weather.temperature.setMaxTemp(df.forecastTemp.max);
    }
    forecast.addForecast(df);
  }
  forecast.setUnit(units);
}",0.9709576138147566
20158,"@Override public HistoricalWeather getHistoricalWeather(String data) throws WeatherLibException {
  HistoricalWeather histWeather=new HistoricalWeather();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONObject histObj=jObj.getJSONObject(""String_Node_Str"");
    JSONArray wList=histObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      HistoricalHourWeather hhWeather=new HistoricalHourWeather();
      JSONObject jHour=wList.getJSONObject(i);
      JSONObject utcObj=jHour.getJSONObject(""String_Node_Str"");
      int y=utcObj.getInt(""String_Node_Str"");
      int m=utcObj.getInt(""String_Node_Str"");
      int mday=utcObj.getInt(""String_Node_Str"");
      int h=utcObj.getInt(""String_Node_Str"");
      int min=utcObj.getInt(""String_Node_Str"");
      Calendar cal=GregorianCalendar.getInstance();
      cal.set(y,Calendar.JANUARY,mday,h,min);
      cal.add(Calendar.MONTH,m - 1);
      hhWeather.timestamp=cal.getTimeInMillis();
      String tag=null;
      if (WeatherUtility.isMetric(config.unitSystem))       tag=""String_Node_Str"";
 else       tag=""String_Node_Str"";
      hhWeather.weather.temperature.setTemp((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setDewPoint((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setHumidity((float)jHour.getInt(""String_Node_Str""));
      hhWeather.weather.wind.setSpeed((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.wind.setGust((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.wind.setDeg((float)jHour.getDouble(""String_Node_Str""));
      hhWeather.weather.wind.setChill((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setVisibility((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setPressure((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setHeatIndex(jHour.getString(""String_Node_Str"" + tag));
      hhWeather.weather.rain[0].setAmmount((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setDescr(jHour.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setIcon(jHour.getString(""String_Node_Str""));
      if (codeProvider != null)       hhWeather.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(hhWeather.weather.currentCondition.getIcon()));
      histWeather.addHistoricalHourWeather(hhWeather);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  histWeather.setUnit(units);
  return histWeather;
}","@Override public HistoricalWeather getHistoricalWeather(String data) throws WeatherLibException {
  HistoricalWeather histWeather=new HistoricalWeather();
  try {
    JSONObject jObj=new JSONObject(data);
    JSONObject histObj=jObj.getJSONObject(""String_Node_Str"");
    JSONArray wList=histObj.getJSONArray(""String_Node_Str"");
    for (int i=0; i < wList.length(); i++) {
      HistoricalHourWeather hhWeather=new HistoricalHourWeather();
      JSONObject jHour=wList.getJSONObject(i);
      JSONObject utcObj=jHour.getJSONObject(""String_Node_Str"");
      int y=utcObj.getInt(""String_Node_Str"");
      int m=utcObj.getInt(""String_Node_Str"");
      int mday=utcObj.getInt(""String_Node_Str"");
      int h=utcObj.getInt(""String_Node_Str"");
      int min=utcObj.getInt(""String_Node_Str"");
      Calendar cal=GregorianCalendar.getInstance();
      cal.set(y,Calendar.JANUARY,mday,h,min);
      cal.add(Calendar.MONTH,m - 1);
      hhWeather.timestamp=cal.getTimeInMillis();
      String tag=null;
      if (WeatherUtility.isMetric(config.unitSystem))       tag=""String_Node_Str"";
 else       tag=""String_Node_Str"";
      hhWeather.weather.temperature.setTemp((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setDewPoint((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setHumidity((float)jHour.getInt(""String_Node_Str""));
      hhWeather.weather.wind.setSpeed((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.wind.setGust((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.wind.setDeg((float)jHour.getDouble(""String_Node_Str""));
      hhWeather.weather.wind.setChill((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setVisibility((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setPressure((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setHeatIndex(jHour.getString(""String_Node_Str"" + tag));
      hhWeather.weather.rain[0].setAmmount((float)jHour.getDouble(""String_Node_Str"" + tag));
      hhWeather.weather.currentCondition.setDescr(jHour.getString(""String_Node_Str""));
      hhWeather.weather.currentCondition.setIcon(jHour.getString(""String_Node_Str""));
      if (codeProvider != null) {
        try {
          hhWeather.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(hhWeather.weather.currentCondition.getIcon()));
        }
 catch (        Throwable t) {
          hhWeather.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
        }
      }
      histWeather.addHistoricalHourWeather(hhWeather);
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  histWeather.setUnit(units);
  return histWeather;
}",0.9697299256842488
20159,"public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    JSONObject rootObj=new JSONObject(data);
    JSONObject jObj=getObject(""String_Node_Str"",rootObj);
    JSONObject dObj=getObject(""String_Node_Str"",jObj);
    Location loc=new Location();
    loc.setLatitude(getFloat(""String_Node_Str"",dObj));
    loc.setLongitude(getFloat(""String_Node_Str"",dObj));
    loc.setCountry(getString(""String_Node_Str"",dObj));
    loc.setCity(getString(""String_Node_Str"",dObj));
    weather.location=loc;
    weather.currentCondition.setDescr(getString(""String_Node_Str"",jObj));
    weather.currentCondition.setIcon(getString(""String_Node_Str"",jObj));
    if (codeProvider != null)     weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(weather.currentCondition.getIcon()));
    String relUm=getString(""String_Node_Str"",jObj);
    weather.currentCondition.setHumidity(Integer.parseInt(relUm.substring(0,relUm.length() - 1)));
    weather.wind.setDeg(getFloat(""String_Node_Str"",jObj));
    String trend=getString(""String_Node_Str"",jObj);
    int trendVal=-1;
    if (""String_Node_Str"".equals(trend))     trendVal=0;
 else     trendVal=Integer.parseInt(trend);
    weather.currentCondition.setPressureTrend(trendVal);
    weather.currentCondition.setUV(getFloat(""String_Node_Str"",jObj));
    weather.currentCondition.setSolarRadiation(getString(""String_Node_Str"",jObj));
    if (WeatherUtility.isMetric(config.unitSystem)) {
      weather.currentCondition.setPressure(getInt(""String_Node_Str"",jObj));
      weather.temperature.setTemp(getFloat(""String_Node_Str"",jObj));
      weather.wind.setGust(getFloat(""String_Node_Str"",jObj));
      weather.wind.setSpeed(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setVisibility(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setFeelsLike(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setDewPoint(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setHeatIndex(getString(""String_Node_Str"",jObj));
    }
 else {
      weather.currentCondition.setPressure(getInt(""String_Node_Str"",jObj));
      weather.temperature.setTemp(getFloat(""String_Node_Str"",jObj));
      weather.wind.setGust(getFloat(""String_Node_Str"",jObj));
      weather.wind.setSpeed(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setVisibility(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setFeelsLike(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setDewPoint(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setHeatIndex(getString(""String_Node_Str"",jObj));
    }
    parseForecast(rootObj,weather);
    JSONObject moonObj=getObject(""String_Node_Str"",rootObj);
    weather.location.getAstronomy().percIllum=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().moonAge=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().moonPhaseDescr=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().hemisphere=getString(""String_Node_Str"",moonObj);
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    JSONObject riseObj=getObject(""String_Node_Str"",moonObj);
    String d1=getString(""String_Node_Str"",riseObj) + ""String_Node_Str"" + getString(""String_Node_Str"",riseObj);
    try {
      weather.location.setSunrise(sdf.parse(d1).getTime());
    }
 catch (    ParseException e) {
    }
    JSONObject setObj=getObject(""String_Node_Str"",moonObj);
    String d2=getString(""String_Node_Str"",setObj) + ""String_Node_Str"" + getString(""String_Node_Str"",setObj);
    try {
      weather.location.setSunset(sdf.parse(d2).getTime());
    }
 catch (    ParseException e) {
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}","public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    JSONObject rootObj=new JSONObject(data);
    JSONObject jObj=getObject(""String_Node_Str"",rootObj);
    JSONObject dObj=getObject(""String_Node_Str"",jObj);
    Location loc=new Location();
    loc.setLatitude(getFloat(""String_Node_Str"",dObj));
    loc.setLongitude(getFloat(""String_Node_Str"",dObj));
    loc.setCountry(getString(""String_Node_Str"",dObj));
    loc.setCity(getString(""String_Node_Str"",dObj));
    weather.location=loc;
    weather.currentCondition.setDescr(getString(""String_Node_Str"",jObj));
    weather.currentCondition.setIcon(getString(""String_Node_Str"",jObj));
    if (codeProvider != null) {
      try {
        weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(weather.currentCondition.getIcon()));
      }
 catch (      Throwable t) {
        weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
      }
    }
    String relUm=getString(""String_Node_Str"",jObj);
    weather.currentCondition.setHumidity(Integer.parseInt(relUm.substring(0,relUm.length() - 1)));
    weather.wind.setDeg(getFloat(""String_Node_Str"",jObj));
    String trend=getString(""String_Node_Str"",jObj);
    int trendVal=-1;
    if (""String_Node_Str"".equals(trend))     trendVal=0;
 else     trendVal=Integer.parseInt(trend);
    weather.currentCondition.setPressureTrend(trendVal);
    weather.currentCondition.setUV(getFloat(""String_Node_Str"",jObj));
    weather.currentCondition.setSolarRadiation(getString(""String_Node_Str"",jObj));
    if (WeatherUtility.isMetric(config.unitSystem)) {
      weather.currentCondition.setPressure(getInt(""String_Node_Str"",jObj));
      weather.temperature.setTemp(getFloat(""String_Node_Str"",jObj));
      weather.wind.setGust(getFloat(""String_Node_Str"",jObj));
      weather.wind.setSpeed(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setVisibility(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setFeelsLike(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setDewPoint(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setHeatIndex(getString(""String_Node_Str"",jObj));
    }
 else {
      weather.currentCondition.setPressure(getInt(""String_Node_Str"",jObj));
      weather.temperature.setTemp(getFloat(""String_Node_Str"",jObj));
      weather.wind.setGust(getFloat(""String_Node_Str"",jObj));
      weather.wind.setSpeed(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setVisibility(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setFeelsLike(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setDewPoint(getFloat(""String_Node_Str"",jObj));
      weather.currentCondition.setHeatIndex(getString(""String_Node_Str"",jObj));
    }
    parseForecast(rootObj,weather);
    JSONObject moonObj=getObject(""String_Node_Str"",rootObj);
    weather.location.getAstronomy().percIllum=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().moonAge=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().moonPhaseDescr=getString(""String_Node_Str"",moonObj);
    weather.location.getAstronomy().hemisphere=getString(""String_Node_Str"",moonObj);
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    JSONObject riseObj=getObject(""String_Node_Str"",moonObj);
    String d1=getString(""String_Node_Str"",riseObj) + ""String_Node_Str"" + getString(""String_Node_Str"",riseObj);
    try {
      weather.location.setSunrise(sdf.parse(d1).getTime());
    }
 catch (    ParseException e) {
    }
    JSONObject setObj=getObject(""String_Node_Str"",moonObj);
    String d2=getString(""String_Node_Str"",setObj) + ""String_Node_Str"" + getString(""String_Node_Str"",setObj);
    try {
      weather.location.setSunset(sdf.parse(d2).getTime());
    }
 catch (    ParseException e) {
    }
  }
 catch (  JSONException json) {
    throw new WeatherLibException(json);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}",0.9820388950823732
20160,"@Override public WeatherForecast getForecastWeather(String data) throws WeatherLibException {
  WeatherForecast forecast=new WeatherForecast();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          DayForecast df=new DayForecast();
          df.forecastTemp.max=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
          df.forecastTemp.min=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
          df.weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          if (codeProvider != null)           df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(df.weather.currentCondition.getWeatherId())));
          df.weather.currentCondition.setCondition(parser.getAttributeValue(null,""String_Node_Str""));
          df.weather.currentCondition.setIcon(""String_Node_Str"" + df.weather.currentCondition.getWeatherId());
          forecast.addForecast(df);
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          units.tempUnit=""String_Node_Str"" + parser.getAttributeValue(null,""String_Node_Str"");
          units.pressureUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.distanceUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.speedUnit=parser.getAttributeValue(null,""String_Node_Str"");
          forecast.setUnit(units);
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  return forecast;
}","@Override public WeatherForecast getForecastWeather(String data) throws WeatherLibException {
  WeatherForecast forecast=new WeatherForecast();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          DayForecast df=new DayForecast();
          df.forecastTemp.max=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
          df.forecastTemp.min=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
          df.weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          if (codeProvider != null) {
            try {
              df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(df.weather.currentCondition.getWeatherId())));
            }
 catch (            Throwable t) {
              df.weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
            }
          }
          df.weather.currentCondition.setCondition(parser.getAttributeValue(null,""String_Node_Str""));
          df.weather.currentCondition.setIcon(""String_Node_Str"" + df.weather.currentCondition.getWeatherId());
          forecast.addForecast(df);
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          units.tempUnit=""String_Node_Str"" + parser.getAttributeValue(null,""String_Node_Str"");
          units.pressureUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.distanceUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.speedUnit=parser.getAttributeValue(null,""String_Node_Str"");
          forecast.setUnit(units);
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  return forecast;
}",0.9582008178100864
20161,"@Override public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          weather.wind.setChill(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setDeg(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setSpeed(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setHumidity(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setVisibility(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressure(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressureTrend(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          if (isFirstDayForecast) {
            weather.temperature.setMinTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            weather.temperature.setMaxTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            isFirstDayForecast=false;
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setIcon(""String_Node_Str"" + weather.currentCondition.getWeatherId());
          if (codeProvider != null)           weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(weather.currentCondition.getWeatherId())));
          weather.currentCondition.setCondition(parser.getAttributeValue(null,""String_Node_Str""));
          weather.temperature.setTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.location.setCity(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setRegion(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setCountry(parser.getAttributeValue(null,""String_Node_Str""));
        }
 else         if (tagName.equals(""String_Node_Str""))         currentTag=""String_Node_Str"";
 else         if (tagName.equals(""String_Node_Str"")) {
          if (currentTag == null) {
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          currentTag=""String_Node_Str"";
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          String val=parser.getAttributeValue(null,""String_Node_Str"");
          SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunrise(d.getTime());
          }
          val=parser.getAttributeValue(null,""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunset(d.getTime());
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}","@Override public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather cWeather=new CurrentWeather();
  Weather weather=new Weather();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          weather.wind.setChill(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setDeg(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setSpeed(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setHumidity(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setVisibility(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressure(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressureTrend(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          if (isFirstDayForecast) {
            weather.temperature.setMinTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            weather.temperature.setMaxTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            isFirstDayForecast=false;
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setIcon(""String_Node_Str"" + weather.currentCondition.getWeatherId());
          if (codeProvider != null) {
            try {
              weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(String.valueOf(weather.currentCondition.getWeatherId())));
            }
 catch (            Throwable t) {
              weather.currentCondition.setWeatherCode(WeatherCode.NOT_AVAILABLE);
            }
          }
          weather.currentCondition.setCondition(parser.getAttributeValue(null,""String_Node_Str""));
          weather.temperature.setTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.location.setCity(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setRegion(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setCountry(parser.getAttributeValue(null,""String_Node_Str""));
        }
 else         if (tagName.equals(""String_Node_Str""))         currentTag=""String_Node_Str"";
 else         if (tagName.equals(""String_Node_Str"")) {
          if (currentTag == null) {
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          currentTag=""String_Node_Str"";
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          String val=parser.getAttributeValue(null,""String_Node_Str"");
          SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunrise(d.getTime());
          }
          val=parser.getAttributeValue(null,""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunset(d.getTime());
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  cWeather.setUnit(units);
  cWeather.weather=weather;
  return cWeather;
}",0.9782843431313736
20162,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  setContentView(R.layout.main_activity);
  View v=findViewById(R.id.currentWeatherFrag);
  if (v != null)   isThereForecast=true;
  client=WeatherClientDefault.getInstance();
  client.init(getApplicationContext());
  Log.d(""String_Node_Str"",""String_Node_Str"" + client + ""String_Node_Str"");
  config=new WeatherConfig();
  config.unitSystem=WeatherConfig.UNIT_SYSTEM.M;
  IWeatherProvider provider=null;
  try {
    provider=WeatherProviderFactory.createProvider(new OpenweathermapProviderType(),config);
    client.setProvider(provider);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  setContentView(R.layout.main_activity);
  View v=findViewById(R.id.currentWeatherFrag);
  if (v != null)   isThereForecast=true;
  client=WeatherClientDefault.getInstance();
  client.init(getApplicationContext());
  Log.d(""String_Node_Str"",""String_Node_Str"" + client + ""String_Node_Str"");
  config=new WeatherConfig();
  config.unitSystem=WeatherConfig.UNIT_SYSTEM.M;
  IWeatherProvider provider=null;
  try {
    provider=WeatherProviderFactory.createProvider(new OpenweathermapProviderType(),config);
    client.setProvider(provider);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  setProgressBarIndeterminate(true);
  setProgressBarVisibility(true);
  if (!isThereForecast) {
    ActionBar bar=getActionBar();
    bar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
    createTab(R.string.tab_current,bar);
    createTab(R.string.tab_forecast,bar);
  }
 else {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    ft.setTransitionStyle(R.style.fragmentAnim);
    CurrentWeatherFragment cf=CurrentWeatherFragment.newInstance();
    ft.add(R.id.currentWeatherFrag,cf,""String_Node_Str"");
    ft.commit();
    FragmentTransaction ft1=getFragmentManager().beginTransaction();
    ft1.setTransitionStyle(R.style.fragmentAnim);
    ForecastWeatherFragment ff=ForecastWeatherFragment.newInstance();
    ft1.add(R.id.forecastWeatherFrag,ff,""String_Node_Str"");
    ft1.commit();
  }
}",0.6650246305418719
20163,"@Override public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather weather=new CurrentWeather();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          weather.wind.setChill(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setDeg(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setSpeed(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setHumidity(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setVisibility(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressure(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressureTrend(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          if (isFirstDayForecast) {
            weather.temperature.setMinTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            weather.temperature.setMaxTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            isFirstDayForecast=false;
          }
 else {
            DayForecast df=new DayForecast();
            df.forecastTemp.max=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
            df.forecastTemp.max=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
            df.weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            if (codeProvider != null)             df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(df.weather.currentCondition.getWeatherId()));
            df.weather.currentCondition.setDescr(parser.getAttributeValue(null,""String_Node_Str""));
            df.weather.currentCondition.setIcon(""String_Node_Str"" + df.weather.currentCondition.getWeatherId());
            forecast.addForecast(df);
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setIcon(""String_Node_Str"" + weather.currentCondition.getWeatherId());
          if (codeProvider != null)           weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(weather.currentCondition.getWeatherId()));
          weather.currentCondition.setDescr(parser.getAttributeValue(null,""String_Node_Str""));
          weather.temperature.setTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          units.tempUnit=""String_Node_Str"" + parser.getAttributeValue(null,""String_Node_Str"");
          units.pressureUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.distanceUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.speedUnit=parser.getAttributeValue(null,""String_Node_Str"");
          forecast.setUnit(units);
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.location.setCity(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setRegion(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setCountry(parser.getAttributeValue(null,""String_Node_Str""));
        }
 else         if (tagName.equals(""String_Node_Str""))         currentTag=""String_Node_Str"";
 else         if (tagName.equals(""String_Node_Str"")) {
          if (currentTag == null) {
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          currentTag=""String_Node_Str"";
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          String val=parser.getAttributeValue(null,""String_Node_Str"");
          SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunrise(d.getTime());
          }
          val=parser.getAttributeValue(null,""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunset(d.getTime());
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  weather.setUnit(units);
  return weather;
}","@Override public CurrentWeather getCurrentCondition(String data) throws WeatherLibException {
  CurrentWeather weather=new CurrentWeather();
  try {
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(new StringReader(data));
    String tagName=null;
    String currentTag=null;
    int event=parser.getEventType();
    boolean isFirstDayForecast=true;
    while (event != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (tagName.equals(""String_Node_Str"")) {
          weather.wind.setChill(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setDeg(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.wind.setSpeed(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setHumidity(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setVisibility(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressure(WeatherUtility.string2Float(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setPressureTrend(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          if (isFirstDayForecast) {
            weather.temperature.setMinTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            weather.temperature.setMaxTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            isFirstDayForecast=false;
          }
 else {
            DayForecast df=new DayForecast();
            df.forecastTemp.max=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
            df.forecastTemp.min=Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str""));
            df.weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
            if (codeProvider != null)             df.weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(df.weather.currentCondition.getWeatherId()));
            df.weather.currentCondition.setDescr(parser.getAttributeValue(null,""String_Node_Str""));
            df.weather.currentCondition.setIcon(""String_Node_Str"" + df.weather.currentCondition.getWeatherId());
            forecast.addForecast(df);
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.currentCondition.setWeatherId(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
          weather.currentCondition.setIcon(""String_Node_Str"" + weather.currentCondition.getWeatherId());
          if (codeProvider != null)           weather.currentCondition.setWeatherCode(codeProvider.getWeatherCode(weather.currentCondition.getWeatherId()));
          weather.currentCondition.setDescr(parser.getAttributeValue(null,""String_Node_Str""));
          weather.temperature.setTemp(Integer.parseInt(parser.getAttributeValue(null,""String_Node_Str"")));
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          units.tempUnit=""String_Node_Str"" + parser.getAttributeValue(null,""String_Node_Str"");
          units.pressureUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.distanceUnit=parser.getAttributeValue(null,""String_Node_Str"");
          units.speedUnit=parser.getAttributeValue(null,""String_Node_Str"");
          forecast.setUnit(units);
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          weather.location.setCity(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setRegion(parser.getAttributeValue(null,""String_Node_Str""));
          weather.location.setCountry(parser.getAttributeValue(null,""String_Node_Str""));
        }
 else         if (tagName.equals(""String_Node_Str""))         currentTag=""String_Node_Str"";
 else         if (tagName.equals(""String_Node_Str"")) {
          if (currentTag == null) {
          }
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          currentTag=""String_Node_Str"";
        }
 else         if (tagName.equals(""String_Node_Str"")) {
          String val=parser.getAttributeValue(null,""String_Node_Str"");
          SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunrise(d.getTime());
          }
          val=parser.getAttributeValue(null,""String_Node_Str"");
          if (val != null) {
            java.util.Date d=sdf.parse(val);
            weather.location.setSunset(d.getTime());
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (""String_Node_Str"".equals(currentTag)) {
          currentTag=null;
        }
      }
      event=parser.next();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new WeatherLibException(t);
  }
  weather.setUnit(units);
  return weather;
}",0.9996174445294568
20164,"private void refresh(){
  final WeatherClient client=WeatherClientDefault.getInstance();
  config=new WeatherConfig();
  String cityId=prefs.getString(""String_Node_Str"",null);
  Log.d(""String_Node_Str"",""String_Node_Str"" + cityId + ""String_Node_Str"");
  if (cityId == null) {
    getListener().requestCompleted();
    return;
  }
  config.lang=WeatherUtil.getLanguage(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  config.maxResult=5;
  config.numDays=5;
  String unit=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  if (unit.equals(""String_Node_Str""))   config.unitSystem=WeatherConfig.UNIT_SYSTEM.M;
 else   config.unitSystem=WeatherConfig.UNIT_SYSTEM.I;
  client.updateWeatherConfig(config);
  client.getCurrentCondition(cityId,new WeatherClient.WeatherEventListener(){
    @Override public void onWeatherRetrieved(    CurrentWeather weather){
      getListener().requestCompleted();
      cityText.setText(weather.location.getCity() + ""String_Node_Str"" + weather.location.getCountry());
      condDescr.setText(weather.currentCondition.getCondition() + ""String_Node_Str"" + weather.currentCondition.getDescr()+ ""String_Node_Str"");
      LogUtils.LOGD(""String_Node_Str"",""String_Node_Str"" + temp + ""String_Node_Str"");
      LogUtils.LOGD(""String_Node_Str"",""String_Node_Str"" + weather.temperature.getTemp() + ""String_Node_Str"");
      temp.setText(""String_Node_Str"" + ((int)weather.temperature.getTemp()));
      unitTemp.setText(weather.getUnit().tempUnit);
      colorTextLine.setBackgroundResource(WeatherUtil.getResource(weather.temperature.getTemp(),config));
      hum.setText(weather.currentCondition.getHumidity() + ""String_Node_Str"");
      tempMin.setText(weather.temperature.getMinTemp() + weather.getUnit().tempUnit);
      tempMax.setText(weather.temperature.getMaxTemp() + weather.getUnit().tempUnit);
      windSpeed.setText(weather.wind.getSpeed() + weather.getUnit().speedUnit);
      windDeg.setText((int)weather.wind.getDeg() + ""String_Node_Str"" + WindDirection.getDir((int)weather.wind.getDeg())+ ""String_Node_Str"");
      press.setText(weather.currentCondition.getPressure() + weather.getUnit().pressureUnit);
      sunrise.setText(WeatherUtil.convertDate(weather.location.getSunrise()));
      sunset.setText(WeatherUtil.convertDate(weather.location.getSunset()));
      imgView.setImageResource(WeatherIconMapper.getWeatherResource(weather.currentCondition.getIcon(),weather.currentCondition.getWeatherId()));
      cloud.setText(weather.clouds.getPerc() + ""String_Node_Str"");
      if (weather.rain.getTime() != null && weather.rain.getAmmount() != 0)       rain.setText(weather.rain.getTime() + ""String_Node_Str"" + weather.rain.getAmmount());
 else       rain.setText(""String_Node_Str"");
    }
    @Override public void onWeatherError(    WeatherLibException t){
      getListener().requestCompleted();
    }
    @Override public void onConnectionError(    Throwable t){
      getListener().requestCompleted();
    }
  }
);
}","private void refresh(){
  final WeatherClient client=WeatherClientDefault.getInstance();
  config=new WeatherConfig();
  String cityId=prefs.getString(""String_Node_Str"",null);
  Log.d(""String_Node_Str"",""String_Node_Str"" + cityId + ""String_Node_Str"");
  if (cityId == null) {
    getListener().requestCompleted();
    return;
  }
  config.lang=WeatherUtil.getLanguage(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  config.maxResult=5;
  config.numDays=5;
  String unit=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  if (unit.equals(""String_Node_Str""))   config.unitSystem=WeatherConfig.UNIT_SYSTEM.M;
 else   config.unitSystem=WeatherConfig.UNIT_SYSTEM.I;
  client.getHourForecastWeather(cityId,new WeatherClient.HourForecastWeatherEventListener(){
    /** 
 * This method is called to notify to the listener that the Weather information is ready
 * @param forecast {@link com.survivingwithandroid.weather.lib.model.WeatherHourForecast}
 */
    @Override public void onWeatherRetrieved(    WeatherHourForecast forecast){
    }
    /** 
 * This method is called when an error occured during the data parsing
 * @param wle {@link com.survivingwithandroid.weather.lib.exception.WeatherLibException}
 */
    @Override public void onWeatherError(    WeatherLibException wle){
    }
    /** 
 * This method is called when an error occured during the HTTP connection
 * @param t {@link Throwable}
 */
    @Override public void onConnectionError(    Throwable t){
    }
  }
);
  client.updateWeatherConfig(config);
  client.getCurrentCondition(cityId,new WeatherClient.WeatherEventListener(){
    @Override public void onWeatherRetrieved(    CurrentWeather weather){
      getListener().requestCompleted();
      cityText.setText(weather.location.getCity() + ""String_Node_Str"" + weather.location.getCountry());
      condDescr.setText(weather.currentCondition.getCondition() + ""String_Node_Str"" + weather.currentCondition.getDescr()+ ""String_Node_Str"");
      LogUtils.LOGD(""String_Node_Str"",""String_Node_Str"" + temp + ""String_Node_Str"");
      LogUtils.LOGD(""String_Node_Str"",""String_Node_Str"" + weather.temperature.getTemp() + ""String_Node_Str"");
      temp.setText(""String_Node_Str"" + ((int)weather.temperature.getTemp()));
      unitTemp.setText(weather.getUnit().tempUnit);
      colorTextLine.setBackgroundResource(WeatherUtil.getResource(weather.temperature.getTemp(),config));
      hum.setText(weather.currentCondition.getHumidity() + ""String_Node_Str"");
      tempMin.setText(weather.temperature.getMinTemp() + weather.getUnit().tempUnit);
      tempMax.setText(weather.temperature.getMaxTemp() + weather.getUnit().tempUnit);
      windSpeed.setText(weather.wind.getSpeed() + weather.getUnit().speedUnit);
      windDeg.setText((int)weather.wind.getDeg() + ""String_Node_Str"" + WindDirection.getDir((int)weather.wind.getDeg())+ ""String_Node_Str"");
      press.setText(weather.currentCondition.getPressure() + weather.getUnit().pressureUnit);
      sunrise.setText(WeatherUtil.convertDate(weather.location.getSunrise()));
      sunset.setText(WeatherUtil.convertDate(weather.location.getSunset()));
      imgView.setImageResource(WeatherIconMapper.getWeatherResource(weather.currentCondition.getIcon(),weather.currentCondition.getWeatherId()));
      cloud.setText(weather.clouds.getPerc() + ""String_Node_Str"");
      if (weather.rain.getTime() != null && weather.rain.getAmmount() != 0)       rain.setText(weather.rain.getTime() + ""String_Node_Str"" + weather.rain.getAmmount());
 else       rain.setText(""String_Node_Str"");
    }
    @Override public void onWeatherError(    WeatherLibException t){
      getListener().requestCompleted();
    }
    @Override public void onConnectionError(    Throwable t){
      getListener().requestCompleted();
    }
  }
);
}",0.8795020008892841
20165,"private SerialPipes createPipes(){
  List<Pipe> pipes=new ArrayList<>();
  pipes.add(new CharSequenceLowercase());
  pipes.add(new CharSequence2TokenSequence(CharSequenceLexer.LEX_WORDS));
  pipes.add(new TokenSequence2PorterStems());
  return new SerialPipes(pipes);
}","private SerialPipes createPipes(){
  List<Pipe> pipes=new ArrayList<Pipe>();
  pipes.add(new CharSequenceLowercase());
  pipes.add(new CharSequence2TokenSequence(CharSequenceLexer.LEX_WORDS));
  pipes.add(new TokenSequence2PorterStems());
  return new SerialPipes(pipes);
}",0.992619926199262
20166,"public Alphabet getAlphabet(){
  return (Alphabet)instancePipe.getDataAlphabet();
}","@Override public Alphabet getAlphabet(){
  return (Alphabet)instancePipe.getDataAlphabet();
}",0.9431818181818182
20167,"public Alphabet[] getAlphabets(){
  return new Alphabet[]{getAlphabet(),getLabelAlphabet()};
}","@Override public Alphabet[] getAlphabets(){
  return new Alphabet[]{getAlphabet(),getLabelAlphabet()};
}",0.9494949494949496
20168,"public void write(PrintWriter out){
  for (int word=0; word < numWords; word++) {
    Formatter buffer=new Formatter();
    buffer.format(""String_Node_Str"",vocabulary.lookupObject(word));
    for (int col=0; col < numColumns; col++) {
      buffer.format(""String_Node_Str"",weights[word * stride + col]);
    }
    out.println(buffer);
  }
}","public void write(PrintWriter out){
  for (int word=0; word < numWords; word++) {
    Formatter buffer=new Formatter(Locale.US);
    buffer.format(""String_Node_Str"",vocabulary.lookupObject(word));
    for (int col=0; col < numColumns; col++) {
      buffer.format(""String_Node_Str"",weights[word * stride + col]);
    }
    out.println(buffer);
  }
}",0.9869375907111756
20169,"public static void main(String[] args) throws Exception {
  InstanceList instances=InstanceList.load(new File(inputFile.value));
  WordEmbeddings matrix=new WordEmbeddings(instances.getDataAlphabet(),numDimensions.value,windowSizeOption.value);
  matrix.queryWord=exampleWord.value;
  matrix.countWords(instances);
  matrix.train(instances,numThreads.value,numSamples.value);
  PrintWriter out=new PrintWriter(outputFile.value);
  matrix.write(out);
  out.close();
}","public static void main(String[] args) throws Exception {
  CommandOption.setSummary(WordEmbeddings.class,""String_Node_Str"");
  CommandOption.process(WordEmbeddings.class,args);
  InstanceList instances=InstanceList.load(new File(inputFile.value));
  WordEmbeddings matrix=new WordEmbeddings(instances.getDataAlphabet(),numDimensions.value,windowSizeOption.value);
  matrix.queryWord=exampleWord.value;
  matrix.countWords(instances);
  matrix.train(instances,numThreads.value,numSamples.value);
  PrintWriter out=new PrintWriter(outputFile.value);
  matrix.write(out);
  out.close();
}",0.8859315589353612
20170,"public double getValue(){
  if (!cacheStale) {
    return cachedValue;
  }
  if (objWeight == 0) {
    return 0.0;
  }
  for (  MaxEntGEConstraint constraint : constraints) {
    constraint.zeroExpectations();
  }
  Arrays.fill(cachedGradient,0);
  int numFeatures=trainingList.getDataAlphabet().size() + 1;
  int numLabels=trainingList.getTargetAlphabet().size();
  double[][] scores=new double[trainingList.size()][numLabels];
  double[] constraintValue=new double[numLabels];
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    double instanceWeight=trainingList.getInstanceWeight(instance);
    if (instance.getTarget() != null) {
      continue;
    }
    FeatureVector fv=(FeatureVector)instance.getData();
    classifier.getClassificationScoresWithTemperature(instance,temperature,scores[ii]);
    for (    MaxEntGEConstraint constraint : constraints) {
      constraint.computeExpectations(fv,scores[ii],instanceWeight);
    }
  }
  double value=0;
  for (  MaxEntGEConstraint constraint : constraints) {
    value+=constraint.getValue();
  }
  value*=objWeight;
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    if (instance.getTarget() != null) {
      continue;
    }
    Arrays.fill(constraintValue,0);
    double instanceExpectation=0;
    double instanceWeight=trainingList.getInstanceWeight(instance);
    FeatureVector fv=(FeatureVector)instance.getData();
    for (    MaxEntGEConstraint constraint : constraints) {
      constraint.preProcess(fv);
      for (int label=0; label < numLabels; label++) {
        double val=constraint.getCompositeConstraintFeatureValue(fv,label);
        constraintValue[label]+=val;
        instanceExpectation+=val * scores[ii][label];
      }
    }
    for (int label=0; label < numLabels; label++) {
      if (scores[ii][label] == 0)       continue;
      assert(!Double.isInfinite(scores[ii][label]));
      double weight=objWeight * instanceWeight * scores[ii][label]* (constraintValue[label] - instanceExpectation) / temperature;
      assert(!Double.isNaN(weight));
      MatrixOps.rowPlusEquals(cachedGradient,numFeatures,label,fv,weight);
      cachedGradient[numFeatures * label + defaultFeatureIndex]+=weight;
    }
  }
  cachedValue=value;
  cacheStale=false;
  double reg=getRegularization();
  progressLogger.info(""String_Node_Str"" + value + ""String_Node_Str""+ reg+ ""String_Node_Str""+ cachedValue);
  return value;
}","public double getValue(){
  if (!cacheStale) {
    return cachedValue;
  }
  if (objWeight == 0) {
    return 0.0;
  }
  for (  MaxEntGEConstraint constraint : constraints) {
    constraint.zeroExpectations();
  }
  Arrays.fill(cachedGradient,0);
  int numFeatures=trainingList.getDataAlphabet().size() + 1;
  int numLabels=trainingList.getTargetAlphabet().size();
  double[][] scores=new double[trainingList.size()][numLabels];
  double[] constraintValue=new double[numLabels];
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    double instanceWeight=trainingList.getInstanceWeight(instance);
    if (instance.getTarget() != null) {
      continue;
    }
    FeatureVector fv=(FeatureVector)instance.getData();
    classifier.getClassificationScoresWithTemperature(instance,temperature,scores[ii]);
    for (    MaxEntGEConstraint constraint : constraints) {
      constraint.computeExpectations(fv,scores[ii],instanceWeight);
    }
  }
  double value=0;
  for (  MaxEntGEConstraint constraint : constraints) {
    value+=constraint.getValue();
  }
  value*=objWeight;
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    if (instance.getTarget() != null) {
      continue;
    }
    Arrays.fill(constraintValue,0);
    double instanceExpectation=0;
    double instanceWeight=trainingList.getInstanceWeight(instance);
    FeatureVector fv=(FeatureVector)instance.getData();
    for (    MaxEntGEConstraint constraint : constraints) {
      constraint.preProcess(fv);
      for (int label=0; label < numLabels; label++) {
        double val=constraint.getCompositeConstraintFeatureValue(fv,label);
        constraintValue[label]+=val;
        instanceExpectation+=val * scores[ii][label];
      }
    }
    for (int label=0; label < numLabels; label++) {
      if (scores[ii][label] == 0)       continue;
      assert(!Double.isInfinite(scores[ii][label]));
      double weight=objWeight * instanceWeight * scores[ii][label]* (constraintValue[label] - instanceExpectation) / temperature;
      assert(!Double.isNaN(weight));
      MatrixOps.rowPlusEquals(cachedGradient,numFeatures,label,fv,weight);
      cachedGradient[numFeatures * label + defaultFeatureIndex]+=weight;
    }
  }
  cachedValue=value;
  cacheStale=false;
  double reg=getRegularization();
  progressLogger.info(""String_Node_Str"" + value + ""String_Node_Str""+ reg+ ""String_Node_Str""+ cachedValue);
  return cachedValue;
}",0.9983864461476402
20171,"public void optimizeAlpha(WorkerRunnable[] runnables){
  Arrays.fill(docLengthCounts,0);
  for (int topic=0; topic < topicDocCounts.length; topic++) {
    Arrays.fill(topicDocCounts[topic],0);
  }
  for (int thread=0; thread < numThreads; thread++) {
    int[] sourceLengthCounts=runnables[thread].getDocLengthCounts();
    int[][] sourceTopicCounts=runnables[thread].getTopicDocCounts();
    for (int count=0; count < sourceLengthCounts.length; count++) {
      if (sourceLengthCounts[count] > 0) {
        docLengthCounts[count]+=sourceLengthCounts[count];
        sourceLengthCounts[count]=0;
      }
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (!usingSymmetricAlpha) {
        for (int count=0; count < sourceTopicCounts[topic].length; count++) {
          if (sourceTopicCounts[topic][count] > 0) {
            topicDocCounts[topic][count]+=sourceTopicCounts[topic][count];
            sourceTopicCounts[topic][count]=0;
          }
        }
      }
 else {
        for (int count=0; count < sourceTopicCounts[topic].length; count++) {
          if (sourceTopicCounts[topic][count] > 0) {
            topicDocCounts[0][count]+=sourceTopicCounts[topic][count];
            sourceTopicCounts[topic][count]=0;
          }
        }
      }
    }
  }
  if (usingSymmetricAlpha) {
    alphaSum=Dirichlet.learnSymmetricConcentration(topicDocCounts[0],docLengthCounts,numTopics,alphaSum);
    for (int topic=0; topic < numTopics; topic++) {
      alpha[topic]=alphaSum / numTopics;
    }
  }
 else {
    alphaSum=Dirichlet.learnParameters(alpha,topicDocCounts,docLengthCounts,1.001,1.0,1);
  }
}","public void optimizeAlpha(WorkerRunnable[] runnables){
  Arrays.fill(docLengthCounts,0);
  for (int topic=0; topic < topicDocCounts.length; topic++) {
    Arrays.fill(topicDocCounts[topic],0);
  }
  for (int thread=0; thread < numThreads; thread++) {
    int[] sourceLengthCounts=runnables[thread].getDocLengthCounts();
    int[][] sourceTopicCounts=runnables[thread].getTopicDocCounts();
    for (int count=0; count < sourceLengthCounts.length; count++) {
      if (sourceLengthCounts[count] > 0) {
        docLengthCounts[count]+=sourceLengthCounts[count];
        sourceLengthCounts[count]=0;
      }
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (!usingSymmetricAlpha) {
        for (int count=0; count < sourceTopicCounts[topic].length; count++) {
          if (sourceTopicCounts[topic][count] > 0) {
            topicDocCounts[topic][count]+=sourceTopicCounts[topic][count];
            sourceTopicCounts[topic][count]=0;
          }
        }
      }
 else {
        for (int count=0; count < sourceTopicCounts[topic].length; count++) {
          if (sourceTopicCounts[topic][count] > 0) {
            topicDocCounts[0][count]+=sourceTopicCounts[topic][count];
            sourceTopicCounts[topic][count]=0;
          }
        }
      }
    }
  }
  if (usingSymmetricAlpha) {
    alphaSum=Dirichlet.learnSymmetricConcentration(topicDocCounts[0],docLengthCounts,numTopics,alphaSum);
    for (int topic=0; topic < numTopics; topic++) {
      alpha[topic]=alphaSum / numTopics;
    }
  }
 else {
    try {
      alphaSum=Dirichlet.learnParameters(alpha,topicDocCounts,docLengthCounts,1.001,1.0,1);
    }
 catch (    RuntimeException e) {
      logger.warning(""String_Node_Str"");
      alphaSum=numTopics;
      for (int topic=0; topic < numTopics; topic++) {
        alpha[topic]=1.0;
      }
    }
  }
}",0.938207136640557
20172,"public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    topicCounts=typeTopicCounts[type];
    int index=0;
    while (index < topicCounts.length && topicCounts[index] > 0) {
      int topic=topicCounts[index] & topicMask;
      int count=topicCounts[index] >> topicBits;
      nonZeroTypeTopics++;
      logLikelihood+=Dirichlet.logGammaStirling(beta + count);
      if (Double.isNaN(logLikelihood)) {
        System.err.println(count);
        System.exit(1);
      }
      index++;
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTypes) + tokensPerTopic[topic]);
    if (Double.isNaN(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      System.exit(1);
    }
  }
  logLikelihood+=(Dirichlet.logGammaStirling(beta * numTypes)) - (Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics);
  if (Double.isNaN(logLikelihood)) {
    logger.info(""String_Node_Str"");
    System.exit(1);
  }
  return logLikelihood;
}","public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    topicCounts=typeTopicCounts[type];
    int index=0;
    while (index < topicCounts.length && topicCounts[index] > 0) {
      int topic=topicCounts[index] & topicMask;
      int count=topicCounts[index] >> topicBits;
      nonZeroTypeTopics++;
      logLikelihood+=Dirichlet.logGammaStirling(beta + count);
      if (Double.isNaN(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
 else       if (Double.isInfinite(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
      index++;
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTypes) + tokensPerTopic[topic]);
    if (Double.isNaN(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
 else     if (Double.isInfinite(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
  }
  logLikelihood+=(Dirichlet.logGammaStirling(beta * numTypes)) - (Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics);
  if (Double.isNaN(logLikelihood)) {
    logger.info(""String_Node_Str"");
  }
 else   if (Double.isInfinite(logLikelihood)) {
    logger.info(""String_Node_Str"" + beta + ""String_Node_Str""+ numTypes);
    return 0;
  }
  return logLikelihood;
}",0.8763693270735524
20173,"public static ParallelTopicModel read(File f) throws Exception {
  ParallelTopicModel topicModel=null;
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
  topicModel=(ParallelTopicModel)ois.readObject();
  ois.close();
  return topicModel;
}","public static ParallelTopicModel read(File f) throws Exception {
  ParallelTopicModel topicModel=null;
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
  topicModel=(ParallelTopicModel)ois.readObject();
  ois.close();
  topicModel.initializeHistograms();
  return topicModel;
}",0.9340463458110516
20174,"public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    topicCounts=typeTopicCounts[type];
    int index=0;
    while (index < topicCounts.length && topicCounts[index] > 0) {
      int topic=topicCounts[index] & topicMask;
      int count=topicCounts[index] >> topicBits;
      nonZeroTypeTopics++;
      logLikelihood+=Dirichlet.logGammaStirling(beta + count);
      if (Double.isNaN(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
 else       if (Double.isInfinite(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
      index++;
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTypes) + tokensPerTopic[topic]);
    if (Double.isNaN(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
 else     if (Double.isInfinite(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
  }
  logLikelihood+=(Dirichlet.logGammaStirling(beta * numTypes)) - (Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics);
  if (Double.isNaN(logLikelihood)) {
    logger.info(""String_Node_Str"");
  }
 else   if (Double.isInfinite(logLikelihood)) {
    logger.info(""String_Node_Str"" + beta + ""String_Node_Str""+ numTypes);
    return 0;
  }
  return logLikelihood;
}","public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    topicCounts=typeTopicCounts[type];
    int index=0;
    while (index < topicCounts.length && topicCounts[index] > 0) {
      int topic=topicCounts[index] & topicMask;
      int count=topicCounts[index] >> topicBits;
      nonZeroTypeTopics++;
      logLikelihood+=Dirichlet.logGammaStirling(beta + count);
      if (Double.isNaN(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
 else       if (Double.isInfinite(logLikelihood)) {
        logger.warning(""String_Node_Str"");
        return 0;
      }
      index++;
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTypes) + tokensPerTopic[topic]);
    if (Double.isNaN(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
 else     if (Double.isInfinite(logLikelihood)) {
      logger.info(""String_Node_Str"" + topic + ""String_Node_Str""+ tokensPerTopic[topic]);
      return 0;
    }
  }
  logLikelihood+=Dirichlet.logGammaStirling(beta * numTypes) * numTopics;
  logLikelihood-=Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics;
  if (Double.isNaN(logLikelihood)) {
    logger.info(""String_Node_Str"");
  }
 else   if (Double.isInfinite(logLikelihood)) {
    logger.info(""String_Node_Str"" + beta + ""String_Node_Str""+ numTypes);
    return 0;
  }
  return logLikelihood;
}",0.9926440539436044
20175,"public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(SvmLight2Classify.class,""String_Node_Str"");
  CommandOption.process(SvmLight2Classify.class,args);
  if (args.length == 0) {
    CommandOption.getList(SvmLight2Classify.class).printUsage(false);
    System.exit(-1);
  }
  if (inputFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Classifier classifier=null;
  try {
    ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(classifierFile.value)));
    classifier=(Classifier)ois.readObject();
    ois.close();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + classifierFile.value + ""String_Node_Str""+ e.getMessage());
  }
  Pipe instancePipe;
  ArrayList<Pipe> pipeList=new ArrayList<Pipe>();
  pipeList.add(new SvmLight2FeatureVectorAndLabel());
  instancePipe=new SerialPipes(pipeList);
  InstanceList instances=new InstanceList(instancePipe);
  Reader fileReader;
  if (inputFile.equals(""String_Node_Str"")) {
    fileReader=new InputStreamReader(System.in);
  }
 else {
    fileReader=new InputStreamReader(new FileInputStream(inputFile.value),encoding.value);
  }
  instances.addThruPipe(new SelectiveFileLineIterator(fileReader,""String_Node_Str""));
  Iterator<Instance> iterator=instances.iterator();
  PrintStream out=null;
  if (outputFile.value.toString().equals(""String_Node_Str"")) {
    out=System.out;
  }
 else {
    out=new PrintStream(outputFile.value,encoding.value);
  }
  classifier.getInstancePipe().getDataAlphabet().stopGrowth();
  classifier.getInstancePipe().getTargetAlphabet().stopGrowth();
  while (iterator.hasNext()) {
    Instance instance=iterator.next();
    Labeling labeling=classifier.classify(instance).getLabeling();
    StringBuilder output=new StringBuilder();
    output.append(instance.getName());
    for (int location=0; location < labeling.numLocations(); location++) {
      output.append(""String_Node_Str"" + labeling.labelAtLocation(location));
      output.append(""String_Node_Str"" + labeling.valueAtLocation(location));
    }
    out.println(output);
  }
  if (!outputFile.value.toString().equals(""String_Node_Str"")) {
    out.close();
  }
}","public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(SvmLight2Classify.class,""String_Node_Str"");
  CommandOption.process(SvmLight2Classify.class,args);
  if (args.length == 0) {
    CommandOption.getList(SvmLight2Classify.class).printUsage(false);
    System.exit(-1);
  }
  if (inputFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Classifier classifier=null;
  try {
    ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(classifierFile.value)));
    classifier=(Classifier)ois.readObject();
    ois.close();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + classifierFile.value + ""String_Node_Str""+ e.getMessage());
  }
  classifier.getInstancePipe().getDataAlphabet().stopGrowth();
  classifier.getInstancePipe().getTargetAlphabet().stopGrowth();
  InstanceList instances=new InstanceList(classifier.getInstancePipe());
  Reader fileReader;
  if (inputFile.equals(""String_Node_Str"")) {
    fileReader=new InputStreamReader(System.in);
  }
 else {
    fileReader=new InputStreamReader(new FileInputStream(inputFile.value),encoding.value);
  }
  instances.addThruPipe(new SelectiveFileLineIterator(fileReader,""String_Node_Str""));
  Iterator<Instance> iterator=instances.iterator();
  PrintStream out=null;
  if (outputFile.value.toString().equals(""String_Node_Str"")) {
    out=System.out;
  }
 else {
    out=new PrintStream(outputFile.value,encoding.value);
  }
  while (iterator.hasNext()) {
    Instance instance=iterator.next();
    Labeling labeling=classifier.classify(instance).getLabeling();
    StringBuilder output=new StringBuilder();
    output.append(instance.getName());
    for (int location=0; location < labeling.numLocations(); location++) {
      output.append(""String_Node_Str"" + labeling.labelAtLocation(location));
      output.append(""String_Node_Str"" + labeling.valueAtLocation(location));
    }
    out.println(output);
  }
  if (!outputFile.value.toString().equals(""String_Node_Str"")) {
    out.close();
  }
}",0.8873720136518771
20176,"public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(SvmLight2Vectors.class,""String_Node_Str"");
  CommandOption.process(SvmLight2Vectors.class,args);
  if (args.length == 0) {
    CommandOption.getList(SvmLight2Vectors.class).printUsage(false);
    System.exit(-1);
  }
  if (inputFiles == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Pipe instancePipe;
  InstanceList previousInstanceList=null;
  if (usePipeFromVectorsFile.wasInvoked()) {
    previousInstanceList=InstanceList.load(usePipeFromVectorsFile.value);
    instancePipe=previousInstanceList.getPipe();
  }
 else {
    ArrayList<Pipe> pipeList=new ArrayList<Pipe>();
    pipeList.add(new SvmLight2FeatureVectorAndLabel());
    if (printOutput.value) {
      pipeList.add(new PrintInputAndTarget());
    }
    instancePipe=new SerialPipes(pipeList);
  }
  if (inputFiles.value.length != outputFiles.value.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  for (int fileIndex=0; fileIndex < inputFiles.value.length; fileIndex++) {
    InstanceList instances=new InstanceList(instancePipe);
    Reader fileReader;
    if (inputFiles.value[fileIndex].equals(""String_Node_Str"")) {
      fileReader=new InputStreamReader(System.in);
    }
 else {
      fileReader=new InputStreamReader(new FileInputStream(inputFiles.value[fileIndex]),encoding.value);
    }
    instances.addThruPipe(new SelectiveFileLineIterator(fileReader,""String_Node_Str""));
    ObjectOutputStream oos;
    if (outputFiles.value[fileIndex].toString().equals(""String_Node_Str"")) {
      oos=new ObjectOutputStream(System.out);
    }
 else {
      oos=new ObjectOutputStream(new FileOutputStream(outputFiles.value[fileIndex]));
    }
    oos.writeObject(instances);
    oos.close();
  }
  if (usePipeFromVectorsFile.wasInvoked()) {
    System.out.println(""String_Node_Str"" + usePipeFromVectorsFile.value);
    System.out.println(""String_Node_Str"" + previousInstanceList.getPipe().getInstanceId());
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(usePipeFromVectorsFile.value));
    oos.writeObject(previousInstanceList);
    oos.close();
  }
}","public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(SvmLight2Vectors.class,""String_Node_Str"");
  CommandOption.process(SvmLight2Vectors.class,args);
  if (args.length == 0) {
    CommandOption.getList(SvmLight2Vectors.class).printUsage(false);
    System.exit(-1);
  }
  if (inputFiles == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Pipe instancePipe;
  InstanceList previousInstanceList=null;
  if (usePipeFromVectorsFile.wasInvoked()) {
    previousInstanceList=InstanceList.load(usePipeFromVectorsFile.value);
    instancePipe=previousInstanceList.getPipe();
  }
 else {
    ArrayList<Pipe> pipeList=new ArrayList<Pipe>();
    pipeList.add(new SvmLight2FeatureVectorAndLabel());
    if (printOutput.value) {
      pipeList.add(new PrintInputAndTarget());
    }
    instancePipe=new SerialPipes(pipeList);
  }
  if (inputFiles.value.length != outputFiles.value.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  InstanceList[] instances=new InstanceList[inputFiles.value.length];
  for (int fileIndex=0; fileIndex < inputFiles.value.length; fileIndex++) {
    instances[fileIndex]=new InstanceList(instancePipe);
    Reader fileReader;
    if (inputFiles.value[fileIndex].equals(""String_Node_Str"")) {
      fileReader=new InputStreamReader(System.in);
    }
 else {
      fileReader=new InputStreamReader(new FileInputStream(inputFiles.value[fileIndex]),encoding.value);
    }
    instances[fileIndex].addThruPipe(new SelectiveFileLineIterator(fileReader,""String_Node_Str""));
  }
  for (int fileIndex=0; fileIndex < inputFiles.value.length; fileIndex++) {
    instances[fileIndex].save(new File(outputFiles.value[fileIndex]));
  }
  if (usePipeFromVectorsFile.wasInvoked()) {
    logger.info(""String_Node_Str"" + usePipeFromVectorsFile.value);
    logger.info(""String_Node_Str"" + previousInstanceList.getPipe().getInstanceId());
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(usePipeFromVectorsFile.value));
    oos.writeObject(previousInstanceList);
    oos.close();
  }
}",0.685595567867036
20177,"@Override public Instance pipe(Instance carrier){
  String dataStr=(String)carrier.getData();
  if (dataStr.contains(""String_Node_Str"")) {
    dataStr=dataStr.substring(0,dataStr.indexOf('#'));
  }
  String[] terms=dataStr.split(""String_Node_Str"");
  String classStr=terms[0];
  if (classStr.equals(""String_Node_Str"")) {
    classStr=""String_Node_Str"";
  }
  Label label=((LabelAlphabet)getTargetAlphabet()).lookupLabel(classStr,true);
  carrier.setTarget(label);
  int numFeatures=terms.length - 1;
  int[] indices=new int[numFeatures];
  double[] values=new double[numFeatures];
  for (int termIndex=1; termIndex < terms.length; termIndex++) {
    if (!terms[termIndex].equals(""String_Node_Str"")) {
      String[] s=terms[termIndex].split(""String_Node_Str"");
      if (s.length != 2) {
        throw new RuntimeException(""String_Node_Str"" + terms[termIndex] + ""String_Node_Str"");
      }
      String feature=s[0];
      indices[termIndex - 1]=getDataAlphabet().lookupIndex(feature,true);
      values[termIndex - 1]=Double.parseDouble(s[1]);
    }
  }
  FeatureVector fv=new FeatureVector(getDataAlphabet(),indices,values);
  carrier.setData(fv);
  return carrier;
}","@Override public Instance pipe(Instance carrier){
  String dataStr=(String)carrier.getData();
  if (dataStr.contains(""String_Node_Str"")) {
    dataStr=dataStr.substring(0,dataStr.indexOf('#'));
  }
  String[] terms=dataStr.split(""String_Node_Str"");
  String classStr=terms[0];
  if (classStr.equals(""String_Node_Str"")) {
    classStr=""String_Node_Str"";
  }
  Label label=((LabelAlphabet)getTargetAlphabet()).lookupLabel(classStr,true);
  carrier.setTarget(label);
  ArrayList<Integer> indices=new ArrayList<Integer>();
  ArrayList<Double> values=new ArrayList<Double>();
  for (int termIndex=1; termIndex < terms.length; termIndex++) {
    if (!terms[termIndex].equals(""String_Node_Str"")) {
      String[] s=terms[termIndex].split(""String_Node_Str"");
      if (s.length != 2) {
        throw new RuntimeException(""String_Node_Str"" + terms[termIndex] + ""String_Node_Str"");
      }
      String feature=s[0];
      int index=getDataAlphabet().lookupIndex(feature,true);
      if (index >= 0) {
        indices.add(index);
        values.add(Double.parseDouble(s[1]));
      }
    }
  }
  assert(indices.size() == values.size());
  int[] indicesArr=new int[indices.size()];
  double[] valuesArr=new double[values.size()];
  for (int i=0; i < indicesArr.length; i++) {
    indicesArr[i]=indices.get(i);
    valuesArr[i]=values.get(i);
  }
  FeatureVector fv=new FeatureVector(getDataAlphabet(),indicesArr,valuesArr);
  carrier.setData(fv);
  return carrier;
}",0.7980182926829268
20178,"/** 
 * @param trainingList List with unlabeled training instances.
 * @param constraints Feature expectation constraints.
 * @param initClassifier Initial classifier.
 */
public MaxEntOptimizableByGE(InstanceList trainingList,HashMap<Integer,double[]> constraints,MaxEnt initClassifier){
  useValues=false;
  temperature=1.0;
  objWeight=1.0;
  gaussianPriorVariance=1.0;
  this.trainingList=trainingList;
  int numFeatures=trainingList.getDataAlphabet().size();
  defaultFeatureIndex=numFeatures;
  int numLabels=trainingList.getTargetAlphabet().size();
  parameters=new double[(numFeatures + 1) * numLabels];
  cachedGradient=new double[(numFeatures + 1) * numLabels];
  cachedValue=0;
  if (classifier != null) {
    this.classifier=initClassifier;
  }
 else {
    this.classifier=new MaxEnt(trainingList.getPipe(),parameters);
  }
  this.constraints=constraints;
}","/** 
 * @param trainingList List with unlabeled training instances.
 * @param constraints Feature expectation constraints.
 * @param initClassifier Initial classifier.
 */
public MaxEntOptimizableByGE(InstanceList trainingList,HashMap<Integer,double[]> constraints,MaxEnt initClassifier){
  useValues=false;
  temperature=1.0;
  objWeight=1.0;
  gaussianPriorVariance=1.0;
  this.trainingList=trainingList;
  int numFeatures=trainingList.getDataAlphabet().size();
  defaultFeatureIndex=numFeatures;
  int numLabels=trainingList.getTargetAlphabet().size();
  cachedGradient=new double[(numFeatures + 1) * numLabels];
  cachedValue=0;
  if (initClassifier != null) {
    this.parameters=initClassifier.parameters;
    this.classifier=initClassifier;
  }
 else {
    this.parameters=new double[(numFeatures + 1) * numLabels];
    this.classifier=new MaxEnt(trainingList.getPipe(),parameters);
  }
  this.constraints=constraints;
}",0.844097995545657
20179,"private void setProbs(double[] probArray){
  if (probArray.length != probs.numLocations()) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + probs.numLocations() + ""String_Node_Str""+ probArray.length);
  }
  for (int i=0; i < probArray.length; i++) {
    probs.setValueAtLocation(i,probArray[i]);
  }
}","private void setProbs(double[] probArray){
  if (probArray.length != probs.numLocations()) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + probs.numLocations() + ""String_Node_Str""+ probArray.length);
  }
  for (int i=0; i < probArray.length; i++) {
    int[] indicesAsPassed=new int[sizesAsPassed.length];
    Matrixn.singleToIndices(i,indicesAsPassed,sizesAsPassed);
    int[] indicesAsSorted=new int[sizesAsPassed.length];
    for (int j=0; j < sizesAsPassed.length; j++) {
      indicesAsSorted[j]=indicesAsPassed[reorderingMap[j]];
    }
    int singleIndexAsSorted=Matrixn.singleIndex(sizesAsSorted,indicesAsSorted);
    probs.setValueAtLocation(singleIndexAsSorted,probArray[i]);
  }
}",0.622478386167147
20180,"public Instance pipe(Instance carrier){
  CharSequence string=(CharSequence)carrier.getData();
  StringTokenization dataTokens=new StringTokenization(string);
  TokenSequence targetTokens=new TokenSequence();
  String tag=backgroundTag;
  String nextTag=backgroundTag;
  Matcher m=sgmlPattern.matcher(string);
  int textStart=0;
  int textEnd=0;
  int nextStart=0;
  boolean done=false;
  logger.fine(sgmlPattern.pattern());
  logger.finer(string.toString());
  while (!done) {
    done=!(m.find());
    if (done)     textEnd=string.length();
 else {
      String sgml=m.group();
      logger.finer(""String_Node_Str"" + sgml);
      int groupCount=m.groupCount();
      logger.finer(Integer.toString(groupCount));
      if (sgml.charAt(1) == '/')       nextTag=backgroundTag;
 else {
        nextTag=sgml.substring(1,sgml.length() - 1);
      }
      logger.finer(""String_Node_Str"" + nextTag);
      nextStart=m.end();
      textEnd=m.start();
      logger.finer(""String_Node_Str"" + textStart + ""String_Node_Str""+ textEnd);
    }
    if (textEnd - textStart > 0) {
      logger.finer(""String_Node_Str"" + tag);
      logger.finer(""String_Node_Str"" + string.subSequence(textStart,textEnd));
      lexer.setCharSequence(string.subSequence(textStart,textEnd));
      while (lexer.hasNext()) {
        lexer.next();
        int tokStart=textStart + lexer.getStartOffset();
        int tokEnd=textStart + lexer.getEndOffset();
        dataTokens.add(new StringSpan(string,tokStart,tokEnd));
        targetTokens.add(new Token(tag));
      }
    }
    textStart=nextStart;
    tag=nextTag;
  }
  carrier.setData(dataTokens);
  carrier.setTarget(targetTokens);
  if (saveSource)   carrier.setSource(dataTokens);
  return carrier;
}","public Instance pipe(Instance carrier){
  CharSequence string=(CharSequence)carrier.getData();
  StringTokenization dataTokens=new StringTokenization(string);
  TokenSequence targetTokens=new TokenSequence();
  String tag=backgroundTag;
  String nextTag=backgroundTag;
  Matcher m=sgmlPattern.matcher(string);
  int textStart=0;
  int textEnd=0;
  int nextStart=0;
  boolean done=false;
  logger.fine(sgmlPattern.pattern());
  logger.finer(string.toString());
  while (!done) {
    done=!(m.find());
    if (done)     textEnd=string.length();
 else {
      String sgml=m.group();
      logger.finer(""String_Node_Str"" + sgml);
      int groupCount=m.groupCount();
      logger.finer(Integer.toString(groupCount));
      if (sgml.charAt(1) == '/')       nextTag=backgroundTag;
 else {
        nextTag=sgml.substring(1,sgml.length() - 1);
      }
      logger.finer(""String_Node_Str"" + nextTag);
      nextStart=m.end();
      textEnd=m.start();
      logger.finer(""String_Node_Str"" + textStart + ""String_Node_Str""+ textEnd);
    }
    if (textEnd - textStart > 0) {
      logger.finer(""String_Node_Str"" + tag);
      logger.finer(""String_Node_Str"" + string.subSequence(textStart,textEnd));
      lexer.setCharSequence(string.subSequence(textStart,textEnd));
      while (lexer.hasNext()) {
        lexer.next();
        int tokStart=textStart + lexer.getStartOffset();
        int tokEnd=textStart + lexer.getEndOffset();
        dataTokens.add(new StringSpan(string,tokStart,tokEnd));
        targetTokens.add(new Token(tag));
      }
    }
    textStart=nextStart;
    tag=nextTag;
  }
  carrier.setData(dataTokens);
  carrier.setTarget(targetTokens);
  if (saveSource) {
    carrier.setSource(dataTokens);
  }
  return carrier;
}",0.9681344148319816
20181,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  int version=in.readInt();
  sgmlPattern=(Pattern)in.readObject();
  lexer=(CharSequenceLexer)in.readObject();
  backgroundTag=(String)in.readObject();
  if (version == 0)   saveSource=true;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  int version=in.readInt();
  sgmlPattern=(Pattern)in.readObject();
  lexer=(CharSequenceLexer)in.readObject();
  backgroundTag=(String)in.readObject();
  if (version == 0) {
    saveSource=true;
  }
 else {
    saveSource=in.readBoolean();
  }
}",0.8534621578099839
20182,"public Instance pipe(Instance carrier){
  if (carrier.getData() instanceof CharSequence)   carrier.setData(new TokenSequence(ngramify((CharSequence)carrier.getData())));
 else   if (carrier.getData() instanceof TokenSequence) {
    TokenSequence ts=(TokenSequence)carrier.getData();
    TokenSequence ret=new TokenSequence();
    for (int i=0; i < ts.size(); i++)     ret.add(ngramify(ts.get(i).getText()));
    carrier.setData(ret);
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + carrier.getData().getClass());
  return carrier;
}","public Instance pipe(Instance carrier){
  if (carrier.getData() instanceof CharSequence)   carrier.setData(new TokenSequence(ngramify((CharSequence)carrier.getData())));
 else   if (carrier.getData() instanceof TokenSequence) {
    TokenSequence ts=(TokenSequence)carrier.getData();
    TokenSequence ret=new TokenSequence();
    for (int i=0; i < ts.size(); i++)     ret.add(ngramify(ts.get(i).getText()).toString());
    carrier.setData(ret);
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + carrier.getData().getClass());
  return carrier;
}",0.9901168014375562
20183,"public void add(Object o){
  if (o instanceof Token)   add((Token)o);
 else   if (o instanceof TokenSequence)   add((TokenSequence)o);
 else   add(new Token(o.toString()));
}","public void add(String string){
  add(new Token(string));
}",0.4034334763948498
20184,"public boolean optimize(int numIterations){
  if (converged)   return true;
  int n=optimizable.getNumParameters();
  double prevStepSize=initialStepSize;
  boolean searchingGradient=true;
  if (xi == null) {
    fp=optimizable.getValue();
    xi=new double[n];
    g=new double[n];
    h=new double[n];
    optimizable.getValueGradient(xi);
    System.arraycopy(xi,0,g,0,n);
    System.arraycopy(xi,0,h,0,n);
    step=initialStepSize;
    iterations=0;
  }
  for (int iterationCount=0; iterationCount < numIterations; iterationCount++) {
    logger.info(""String_Node_Str"" + iterations + ""String_Node_Str""+ fp);
    try {
      prevStepSize=step;
      step=lineMaximizer.optimize(xi,step);
    }
 catch (    IllegalArgumentException e) {
      System.out.println(""String_Node_Str"" + e.toString());
      TestOptimizable.testValueAndGradientCurrentParameters(optimizable);
      TestOptimizable.testValueAndGradientInDirection(optimizable,xi);
    }
    if (step == 0) {
      if (searchingGradient) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + MatrixOps.absNorm(xi));
        converged=true;
        return true;
      }
 else       System.err.println(""String_Node_Str"" + ""String_Node_Str"" + MatrixOps.absNorm(xi));
      fp=optimizable.getValue();
      optimizable.getValueGradient(xi);
      searchingGradient=true;
      System.arraycopy(xi,0,g,0,n);
      System.arraycopy(xi,0,h,0,n);
      step=prevStepSize;
      continue;
    }
    fret=optimizable.getValue();
    if (2.0 * Math.abs(fret - fp) <= tolerance * (Math.abs(fret) + Math.abs(fp) + eps)) {
      System.out.println(""String_Node_Str"" + fp + ""String_Node_Str""+ fret+ ""String_Node_Str""+ tolerance);
      converged=true;
      return true;
    }
    fp=fret;
    optimizable.getValueGradient(xi);
    logger.info(""String_Node_Str"" + MatrixOps.infinityNorm(xi));
    if (MatrixOps.infinityNorm(xi) < tolerance) {
      System.err.println(""String_Node_Str"" + MatrixOps.infinityNorm(xi) + ""String_Node_Str""+ tolerance);
      converged=true;
      return true;
    }
    dgg=gg=0.0;
    double gj, xj;
    for (j=0; j < xi.length; j++) {
      gj=g[j];
      gg+=gj * gj;
      xj=-xi[j];
      dgg=(xj + gj) * xj;
    }
    if (gg == 0.0) {
      System.err.println(""String_Node_Str"");
      converged=true;
      return true;
    }
    gam=dgg / gg;
    double hj;
    for (j=0; j < xi.length; j++) {
      xj=xi[j];
      g[j]=xj;
      hj=h[j];
      hj=xj + gam * hj;
      h[j]=hj;
    }
    assert(!MatrixOps.isNaN(h));
    MatrixOps.set(xi,h);
    searchingGradient=false;
    iterations++;
    if (iterations > maxIterations) {
      System.err.println(""String_Node_Str"");
      converged=true;
      return true;
    }
    if (eval != null)     eval.evaluate(optimizable,iterations);
  }
  return false;
}","public boolean optimize(int numIterations){
  if (converged)   return true;
  int n=optimizable.getNumParameters();
  if (xi == null) {
    fp=optimizable.getValue();
    xi=new double[n];
    g=new double[n];
    h=new double[n];
    optimizable.getValueGradient(xi);
    System.arraycopy(xi,0,g,0,n);
    System.arraycopy(xi,0,h,0,n);
    step=initialStepSize;
    iterations=0;
  }
  for (int iterationCount=0; iterationCount < numIterations; iterationCount++) {
    logger.info(""String_Node_Str"" + iterations + ""String_Node_Str""+ fp);
    step=lineMaximizer.optimize(xi,step);
    fret=optimizable.getValue();
    optimizable.getValueGradient(xi);
    if (2.0 * Math.abs(fret - fp) <= tolerance * (Math.abs(fret) + Math.abs(fp) + eps)) {
      logger.info(""String_Node_Str"" + fp + ""String_Node_Str""+ fret+ ""String_Node_Str""+ tolerance);
      converged=true;
      return true;
    }
    fp=fret;
    double twoNorm=MatrixOps.twoNorm(xi);
    if (twoNorm < gradientTolerance) {
      logger.info(""String_Node_Str"" + twoNorm + ""String_Node_Str""+ gradientTolerance);
      converged=true;
      return true;
    }
    dgg=gg=0.0;
    for (j=0; j < xi.length; j++) {
      gg+=g[j] * g[j];
      dgg+=xi[j] * (xi[j] - g[j]);
    }
    gam=dgg / gg;
    for (j=0; j < xi.length; j++) {
      g[j]=xi[j];
      h[j]=xi[j] + gam * h[j];
    }
    assert(!MatrixOps.isNaN(h));
    if (MatrixOps.dotProduct(xi,h) > 0) {
      MatrixOps.set(xi,h);
    }
 else {
      logger.warning(""String_Node_Str"");
      MatrixOps.set(h,xi);
    }
    iterations++;
    if (iterations > maxIterations) {
      logger.info(""String_Node_Str"");
      converged=true;
      return true;
    }
    if (eval != null) {
      eval.evaluate(optimizable,iterations);
    }
  }
  return false;
}",0.4124207303739339
20185,"public boolean alphabetsMatch(AlphabetCarrying object){
  Alphabet[] oas=object.getAlphabets();
  return oas.length == 2 && oas[0].equals(getDataAlphabet()) && oas[1].equals(getDataAlphabet());
}","public boolean alphabetsMatch(AlphabetCarrying object){
  Alphabet[] oas=object.getAlphabets();
  return oas.length == 2 && oas[0].equals(getDataAlphabet()) && oas[1].equals(getTargetAlphabet());
}",0.9846938775510204
20186,"public TransitionIterator(State source,FeatureSequence inputSeq,int inputPosition,String output,HMM hmm){
  this.source=source;
  this.hmm=hmm;
  this.inputSequence=inputSeq;
  this.inputFeature=new Integer(inputSequence.getIndexAtPosition(inputPosition));
  this.inputPos=inputPosition;
  this.weights=new double[source.destinations.length];
  for (int transIndex=0; transIndex < source.destinations.length; transIndex++) {
    if (output == null || output.equals(source.labels[transIndex])) {
      weights[transIndex]=0;
      double logEmissionProb=hmm.emissionMultinomial[transIndex].logProbability(inputSeq.get(inputPosition));
      double logTransitionProb=hmm.transitionMultinomial[source.getIndex()].logProbability(source.destinationNames[transIndex]);
      weights[transIndex]=(logEmissionProb + logTransitionProb);
      assert(!Double.isNaN(weights[transIndex]));
    }
 else     weights[transIndex]=IMPOSSIBLE_WEIGHT;
  }
  nextIndex=0;
  while (nextIndex < source.destinations.length && weights[nextIndex] == IMPOSSIBLE_WEIGHT)   nextIndex++;
}","public TransitionIterator(State source,FeatureSequence inputSeq,int inputPosition,String output,HMM hmm){
  this.source=source;
  this.hmm=hmm;
  this.inputSequence=inputSeq;
  this.inputFeature=new Integer(inputSequence.getIndexAtPosition(inputPosition));
  this.inputPos=inputPosition;
  this.weights=new double[source.destinations.length];
  for (int transIndex=0; transIndex < source.destinations.length; transIndex++) {
    if (output == null || output.equals(source.labels[transIndex])) {
      weights[transIndex]=0;
      int destIndex=source.getDestinationState(transIndex).getIndex();
      double logEmissionProb=hmm.emissionMultinomial[destIndex].logProbability(inputSeq.get(inputPosition));
      double logTransitionProb=hmm.transitionMultinomial[source.getIndex()].logProbability(source.destinationNames[transIndex]);
      weights[transIndex]=(logEmissionProb + logTransitionProb);
      assert(!Double.isNaN(weights[transIndex]));
    }
 else     weights[transIndex]=IMPOSSIBLE_WEIGHT;
  }
  nextIndex=0;
  while (nextIndex < source.destinations.length && weights[nextIndex] == IMPOSSIBLE_WEIGHT)   nextIndex++;
}",0.9634703196347032
20187,"public Instance pipe(Instance carrier){
  Object inputData=carrier.getData();
  Alphabet features=getDataAlphabet();
  LabelAlphabet labels;
  LabelSequence target=null;
  String[][] tokens;
  if (inputData instanceof String)   tokens=parseSentence((String)inputData);
 else   if (inputData instanceof String[][])   tokens=(String[][])inputData;
 else   throw new IllegalArgumentException(""String_Node_Str"" + inputData);
  FeatureVector[] fvs=new FeatureVector[tokens.length];
  if (isTargetProcessing()) {
    labels=(LabelAlphabet)getTargetAlphabet();
    target=new LabelSequence(labels,tokens.length);
  }
  for (int l=0; l < tokens.length; l++) {
    int nFeatures;
    if (isTargetProcessing()) {
      if (tokens[l].length < 1)       throw new IllegalStateException(""String_Node_Str"" + l + ""String_Node_Str""+ carrier.getName());
      nFeatures=tokens[l].length - 1;
      target.add(tokens[l][nFeatures]);
    }
 else     nFeatures=tokens[l].length;
    int featureIndices[]=new int[nFeatures];
    for (int f=0; f < nFeatures; f++)     featureIndices[f]=features.lookupIndex(tokens[l][f]);
    fvs[l]=featureInductionOption.value ? new AugmentableFeatureVector(features,featureIndices,null,featureIndices.length) : new FeatureVector(features,featureIndices);
  }
  carrier.setData(new FeatureVectorSequence(fvs));
  if (isTargetProcessing())   carrier.setTarget(target);
 else   carrier.setTarget(new LabelSequence(getTargetAlphabet()));
  return carrier;
}","public Instance pipe(Instance carrier){
  Object inputData=carrier.getData();
  Alphabet features=getDataAlphabet();
  LabelAlphabet labels;
  LabelSequence target=null;
  String[][] tokens;
  if (inputData instanceof String)   tokens=parseSentence((String)inputData);
 else   if (inputData instanceof String[][])   tokens=(String[][])inputData;
 else   throw new IllegalArgumentException(""String_Node_Str"" + inputData);
  FeatureVector[] fvs=new FeatureVector[tokens.length];
  if (isTargetProcessing()) {
    labels=(LabelAlphabet)getTargetAlphabet();
    target=new LabelSequence(labels,tokens.length);
  }
  for (int l=0; l < tokens.length; l++) {
    int nFeatures;
    if (isTargetProcessing()) {
      if (tokens[l].length < 1)       throw new IllegalStateException(""String_Node_Str"" + l + ""String_Node_Str""+ carrier.getName());
      nFeatures=tokens[l].length - 1;
      target.add(tokens[l][nFeatures]);
    }
 else     nFeatures=tokens[l].length;
    ArrayList<Integer> featureIndices=new ArrayList<Integer>();
    for (int f=0; f < nFeatures; f++) {
      int featureIndex=features.lookupIndex(tokens[l][f]);
      if (featureIndex >= 0) {
        featureIndices.add(featureIndex);
      }
    }
    int[] featureIndicesArr=new int[featureIndices.size()];
    for (int index=0; index < featureIndices.size(); index++) {
      featureIndicesArr[index]=featureIndices.get(index);
    }
    fvs[l]=featureInductionOption.value ? new AugmentableFeatureVector(features,featureIndicesArr,null,featureIndicesArr.length) : new FeatureVector(features,featureIndicesArr);
  }
  carrier.setData(new FeatureVectorSequence(fvs));
  if (isTargetProcessing())   carrier.setTarget(target);
 else   carrier.setTarget(new LabelSequence(getTargetAlphabet()));
  return carrier;
}",0.871525633106856
20188,"/** 
 * Convert the data in the given <tt>Instance</tt> from a <tt>CharSequence</tt>  of sparse feature-value pairs to a <tt>FeatureVector</tt>
 * @throws IllegalStateException If <CODE>Instance.getTarget()</CODE> isnot a Labeling
 */
public Instance pipe(Instance carrier) throws IllegalStateException {
  CharSequence c=(CharSequence)carrier.getData();
  String[] pairs=c.toString().trim().split(""String_Node_Str"");
  String[] keys=new String[pairs.length];
  double[] values=new double[pairs.length];
  for (int i=0; i < pairs.length; i++) {
    int delimIndex=pairs[i].lastIndexOf(""String_Node_Str"");
    if (delimIndex <= 0 || delimIndex == (pairs[i].length() - 1))     throw new IllegalStateException(""String_Node_Str"" + pairs[i] + ""String_Node_Str""+ carrier.getName());
    keys[i]=pairs[i].substring(0,delimIndex);
    values[i]=Double.parseDouble(pairs[i].substring(delimIndex + 1));
    dataAlphabet.lookupIndex(keys[i],true);
  }
  int[] keyIndices=FeatureVector.getObjectIndices(keys,dataAlphabet,true);
  java.util.Arrays.sort(keyIndices);
  FeatureVector fv=new FeatureVector(dataAlphabet,keyIndices,values);
  if (targetAlphabet == null) {
    if (carrier.getTarget() instanceof Labeling)     targetAlphabet=((Labeling)carrier.getTarget()).getLabelAlphabet();
 else     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + carrier.getTarget().getClass().getName());
  }
  carrier.setData(fv);
  return carrier;
}","/** 
 * Convert the data in the given <tt>Instance</tt> from a <tt>CharSequence</tt>  of sparse feature-value pairs to a <tt>FeatureVector</tt>
 */
public Instance pipe(Instance carrier){
  CharSequence c=(CharSequence)carrier.getData();
  String[] pairs=c.toString().trim().split(""String_Node_Str"");
  int[] keys=new int[pairs.length];
  double[] values=new double[pairs.length];
  for (int i=0; i < pairs.length; i++) {
    int delimIndex=pairs[i].lastIndexOf(""String_Node_Str"");
    if (delimIndex <= 0 || delimIndex == (pairs[i].length() - 1)) {
      keys[i]=dataAlphabet.lookupIndex(pairs[i],true);
      values[i]=1.0;
    }
 else {
      keys[i]=dataAlphabet.lookupIndex(pairs[i].substring(0,delimIndex),true);
      values[i]=Double.parseDouble(pairs[i].substring(delimIndex + 1));
    }
  }
  FeatureVector fv=new FeatureVector(dataAlphabet,keys,values);
  carrier.setData(fv);
  return carrier;
}",0.6238844028899277
20189,"/** 
 * Only gets the parameter from the first group of parameters. 
 */
public double getParameter(int sourceStateIndex,int destStateIndex,int featureIndex){
  State source=(State)getState(sourceStateIndex);
  State dest=(State)getState(destStateIndex);
  int rowIndex;
  for (rowIndex=0; rowIndex < source.destinationNames.length; rowIndex++)   if (source.destinationNames[rowIndex].equals(dest.name))   break;
  if (rowIndex == source.destinationNames.length)   throw new IllegalArgumentException(""String_Node_Str"" + sourceStateIndex + ""String_Node_Str""+ destStateIndex+ ""String_Node_Str"");
  int weightsIndex=source.weightsIndices[rowIndex][0];
  if (featureIndex < 0)   return parameters.defaultWeights[weightsIndex];
  return parameters.weights[weightsIndex].value(featureIndex);
}","public double getParameter(int sourceStateIndex,int destStateIndex,int featureIndex,int weightIndex){
  State source=(State)getState(sourceStateIndex);
  State dest=(State)getState(destStateIndex);
  int rowIndex;
  for (rowIndex=0; rowIndex < source.destinationNames.length; rowIndex++)   if (source.destinationNames[rowIndex].equals(dest.name))   break;
  if (rowIndex == source.destinationNames.length)   throw new IllegalArgumentException(""String_Node_Str"" + sourceStateIndex + ""String_Node_Str""+ destStateIndex+ ""String_Node_Str"");
  int weightsIndex=source.weightsIndices[rowIndex][weightIndex];
  if (featureIndex < 0)   return parameters.defaultWeights[weightsIndex];
  return parameters.weights[weightsIndex].value(featureIndex);
}",0.704649639816634
20190,"/** 
 * Only sets the parameter from the first group of parameters. 
 */
public void setParameter(int sourceStateIndex,int destStateIndex,int featureIndex,double value){
  weightsValueChanged();
  State source=(State)getState(sourceStateIndex);
  State dest=(State)getState(destStateIndex);
  int rowIndex;
  for (rowIndex=0; rowIndex < source.destinationNames.length; rowIndex++)   if (source.destinationNames[rowIndex].equals(dest.name))   break;
  if (rowIndex == source.destinationNames.length)   throw new IllegalArgumentException(""String_Node_Str"" + sourceStateIndex + ""String_Node_Str""+ destStateIndex+ ""String_Node_Str"");
  int weightsIndex=source.weightsIndices[rowIndex][0];
  if (featureIndex < 0)   parameters.defaultWeights[weightsIndex]=value;
 else {
    parameters.weights[weightsIndex].setValue(featureIndex,value);
  }
}","public void setParameter(int sourceStateIndex,int destStateIndex,int featureIndex,int weightIndex,double value){
  weightsValueChanged();
  State source=(State)getState(sourceStateIndex);
  State dest=(State)getState(destStateIndex);
  int rowIndex;
  for (rowIndex=0; rowIndex < source.destinationNames.length; rowIndex++)   if (source.destinationNames[rowIndex].equals(dest.name))   break;
  if (rowIndex == source.destinationNames.length)   throw new IllegalArgumentException(""String_Node_Str"" + sourceStateIndex + ""String_Node_Str""+ destStateIndex+ ""String_Node_Str"");
  int weightsIndex=source.weightsIndices[rowIndex][weightIndex];
  if (featureIndex < 0)   parameters.defaultWeights[weightsIndex]=value;
 else {
    parameters.weights[weightsIndex].setValue(featureIndex,value);
  }
}",0.8717004297114794
20191,"/** 
 * Use Gibbs sampling to infer a topic distribution. Topics are initialized to the (or a) most probable topic for each token. Using zero iterations returns exactly this initial topic distribution.<p/> This code does not adjust type-topic counts: P(w|t) is clamped.
 */
public double[] getSampledDistribution(Instance instance,int numIterations,int thinning,int burnIn){
  FeatureSequence tokens=(FeatureSequence)instance.getData();
  int docLength=tokens.size();
  int[] topics=new int[docLength];
  int[] localTopicCounts=new int[numTopics];
  int[] localTopicIndex=new int[numTopics];
  int type;
  int[] currentTypeTopicCounts;
  for (int position=0; position < docLength; position++) {
    type=tokens.getIndexAtPosition(position);
    if (type < numTypes) {
      currentTypeTopicCounts=typeTopicCounts[type];
      topics[position]=currentTypeTopicCounts[0] & topicMask;
      localTopicCounts[topics[position]]++;
    }
  }
  int denseIndex=0;
  for (int topic=0; topic < numTopics; topic++) {
    if (localTopicCounts[topic] != 0) {
      localTopicIndex[denseIndex]=topic;
      denseIndex++;
    }
  }
  int nonZeroTopics=denseIndex;
  double topicBetaMass=0.0;
  for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
    int topic=localTopicIndex[denseIndex];
    int n=localTopicCounts[topic];
    topicBetaMass+=beta * n / (tokensPerTopic[topic] + betaSum);
    cachedCoefficients[topic]=(alpha[topic] + n) / (tokensPerTopic[topic] + betaSum);
  }
  double topicTermMass=0.0;
  double[] topicTermScores=new double[numTopics];
  int[] topicTermIndices;
  int[] topicTermValues;
  int i;
  double score;
  int oldTopic, newTopic;
  double[] result=new double[numTopics];
  double sum=0.0;
  for (int iteration=1; iteration <= numIterations; iteration++) {
    for (int position=0; position < docLength; position++) {
      type=tokens.getIndexAtPosition(position);
      if (type >= numTypes) {
        continue;
      }
      oldTopic=topics[position];
      currentTypeTopicCounts=typeTopicCounts[type];
      topicBetaMass-=beta * localTopicCounts[oldTopic] / (tokensPerTopic[oldTopic] + betaSum);
      localTopicCounts[oldTopic]--;
      if (localTopicCounts[oldTopic] == 0) {
        denseIndex=0;
        while (localTopicIndex[denseIndex] != oldTopic) {
          denseIndex++;
        }
        while (denseIndex < nonZeroTopics) {
          if (denseIndex < localTopicIndex.length - 1) {
            localTopicIndex[denseIndex]=localTopicIndex[denseIndex + 1];
          }
          denseIndex++;
        }
        nonZeroTopics--;
      }
      topicBetaMass+=beta * localTopicCounts[oldTopic] / (tokensPerTopic[oldTopic] + betaSum);
      cachedCoefficients[oldTopic]=(alpha[oldTopic] + localTopicCounts[oldTopic]) / (tokensPerTopic[oldTopic] + betaSum);
      if (cachedCoefficients[oldTopic] <= 0) {
        System.out.println(""String_Node_Str"" + oldTopic + ""String_Node_Str""+ alpha[oldTopic]+ ""String_Node_Str""+ localTopicCounts[oldTopic]+ ""String_Node_Str""+ tokensPerTopic[oldTopic]+ ""String_Node_Str""+ betaSum+ ""String_Node_Str"");
      }
      int index=0;
      int currentTopic, currentValue;
      boolean alreadyDecremented=false;
      topicTermMass=0.0;
      while (index < currentTypeTopicCounts.length && currentTypeTopicCounts[index] > 0) {
        currentTopic=currentTypeTopicCounts[index] & topicMask;
        currentValue=currentTypeTopicCounts[index] >> topicBits;
        score=cachedCoefficients[currentTopic] * currentValue;
        topicTermMass+=score;
        topicTermScores[index]=score;
        index++;
      }
      double sample=random.nextUniform() * (smoothingOnlyMass + topicBetaMass + topicTermMass);
      double origSample=sample;
      newTopic=-1;
      if (sample < topicTermMass) {
        i=-1;
        while (sample > 0) {
          i++;
          sample-=topicTermScores[i];
        }
        newTopic=currentTypeTopicCounts[i] & topicMask;
      }
 else {
        sample-=topicTermMass;
        if (sample < topicBetaMass) {
          sample/=beta;
          for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
            int topic=localTopicIndex[denseIndex];
            sample-=localTopicCounts[topic] / (tokensPerTopic[topic] + betaSum);
            if (sample <= 0.0) {
              newTopic=topic;
              break;
            }
          }
        }
 else {
          sample-=topicBetaMass;
          sample/=beta;
          newTopic=0;
          sample-=alpha[newTopic] / (tokensPerTopic[newTopic] + betaSum);
          while (sample > 0.0) {
            newTopic++;
            if (newTopic >= numTopics) {
              index=0;
              while (index < currentTypeTopicCounts.length && currentTypeTopicCounts[index] > 0) {
                currentTopic=currentTypeTopicCounts[index] & topicMask;
                currentValue=currentTypeTopicCounts[index] >> topicBits;
                System.out.println(currentTopic + ""String_Node_Str"" + currentValue+ ""String_Node_Str""+ topicTermScores[index]+ ""String_Node_Str""+ cachedCoefficients[currentTopic]);
                index++;
              }
            }
            sample-=alpha[newTopic] / (tokensPerTopic[newTopic] + betaSum);
          }
        }
      }
      topics[position]=newTopic;
      topicBetaMass-=beta * localTopicCounts[newTopic] / (tokensPerTopic[newTopic] + betaSum);
      localTopicCounts[newTopic]++;
      if (localTopicCounts[newTopic] == 1) {
        denseIndex=nonZeroTopics;
        while (denseIndex > 0 && localTopicIndex[denseIndex - 1] > newTopic) {
          localTopicIndex[denseIndex]=localTopicIndex[denseIndex - 1];
          denseIndex--;
        }
        localTopicIndex[denseIndex]=newTopic;
        nonZeroTopics++;
      }
      cachedCoefficients[newTopic]=(alpha[newTopic] + localTopicCounts[newTopic]) / (tokensPerTopic[newTopic] + betaSum);
      topicBetaMass+=beta * localTopicCounts[newTopic] / (tokensPerTopic[newTopic] + betaSum);
    }
    if (iteration > burnIn && (iteration - burnIn) % thinning == 0) {
      for (int topic=0; topic < numTopics; topic++) {
        result[topic]+=alpha[topic] + localTopicCounts[topic];
        sum+=alpha[topic] + localTopicCounts[topic];
      }
    }
  }
  for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
    int topic=localTopicIndex[denseIndex];
    cachedCoefficients[topic]=alpha[topic] / (tokensPerTopic[topic] + betaSum);
  }
  if (sum == 0.0) {
    for (int topic=0; topic < numTopics; topic++) {
      result[topic]=alpha[topic] + localTopicCounts[topic];
      sum+=result[topic];
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    result[topic]/=sum;
  }
  return result;
}","/** 
 * Use Gibbs sampling to infer a topic distribution. Topics are initialized to the (or a) most probable topic for each token. Using zero iterations returns exactly this initial topic distribution.<p/> This code does not adjust type-topic counts: P(w|t) is clamped.
 */
public double[] getSampledDistribution(Instance instance,int numIterations,int thinning,int burnIn){
  FeatureSequence tokens=(FeatureSequence)instance.getData();
  int docLength=tokens.size();
  int[] topics=new int[docLength];
  int[] localTopicCounts=new int[numTopics];
  int[] localTopicIndex=new int[numTopics];
  int type;
  int[] currentTypeTopicCounts;
  for (int position=0; position < docLength; position++) {
    type=tokens.getIndexAtPosition(position);
    if (type < numTypes && typeTopicCounts[type].length != 0) {
      currentTypeTopicCounts=typeTopicCounts[type];
      topics[position]=currentTypeTopicCounts[0] & topicMask;
      localTopicCounts[topics[position]]++;
    }
  }
  int denseIndex=0;
  for (int topic=0; topic < numTopics; topic++) {
    if (localTopicCounts[topic] != 0) {
      localTopicIndex[denseIndex]=topic;
      denseIndex++;
    }
  }
  int nonZeroTopics=denseIndex;
  double topicBetaMass=0.0;
  for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
    int topic=localTopicIndex[denseIndex];
    int n=localTopicCounts[topic];
    topicBetaMass+=beta * n / (tokensPerTopic[topic] + betaSum);
    cachedCoefficients[topic]=(alpha[topic] + n) / (tokensPerTopic[topic] + betaSum);
  }
  double topicTermMass=0.0;
  double[] topicTermScores=new double[numTopics];
  int[] topicTermIndices;
  int[] topicTermValues;
  int i;
  double score;
  int oldTopic, newTopic;
  double[] result=new double[numTopics];
  double sum=0.0;
  for (int iteration=1; iteration <= numIterations; iteration++) {
    for (int position=0; position < docLength; position++) {
      type=tokens.getIndexAtPosition(position);
      if (type >= numTypes || typeTopicCounts[type].length == 0) {
        continue;
      }
      oldTopic=topics[position];
      currentTypeTopicCounts=typeTopicCounts[type];
      topicBetaMass-=beta * localTopicCounts[oldTopic] / (tokensPerTopic[oldTopic] + betaSum);
      localTopicCounts[oldTopic]--;
      if (localTopicCounts[oldTopic] == 0) {
        denseIndex=0;
        while (localTopicIndex[denseIndex] != oldTopic) {
          denseIndex++;
        }
        while (denseIndex < nonZeroTopics) {
          if (denseIndex < localTopicIndex.length - 1) {
            localTopicIndex[denseIndex]=localTopicIndex[denseIndex + 1];
          }
          denseIndex++;
        }
        nonZeroTopics--;
      }
      topicBetaMass+=beta * localTopicCounts[oldTopic] / (tokensPerTopic[oldTopic] + betaSum);
      cachedCoefficients[oldTopic]=(alpha[oldTopic] + localTopicCounts[oldTopic]) / (tokensPerTopic[oldTopic] + betaSum);
      if (cachedCoefficients[oldTopic] <= 0) {
        System.out.println(""String_Node_Str"" + oldTopic + ""String_Node_Str""+ alpha[oldTopic]+ ""String_Node_Str""+ localTopicCounts[oldTopic]+ ""String_Node_Str""+ tokensPerTopic[oldTopic]+ ""String_Node_Str""+ betaSum+ ""String_Node_Str"");
      }
      int index=0;
      int currentTopic, currentValue;
      boolean alreadyDecremented=false;
      topicTermMass=0.0;
      while (index < currentTypeTopicCounts.length && currentTypeTopicCounts[index] > 0) {
        currentTopic=currentTypeTopicCounts[index] & topicMask;
        currentValue=currentTypeTopicCounts[index] >> topicBits;
        score=cachedCoefficients[currentTopic] * currentValue;
        topicTermMass+=score;
        topicTermScores[index]=score;
        index++;
      }
      double sample=random.nextUniform() * (smoothingOnlyMass + topicBetaMass + topicTermMass);
      double origSample=sample;
      newTopic=-1;
      if (sample < topicTermMass) {
        i=-1;
        while (sample > 0) {
          i++;
          sample-=topicTermScores[i];
        }
        newTopic=currentTypeTopicCounts[i] & topicMask;
      }
 else {
        sample-=topicTermMass;
        if (sample < topicBetaMass) {
          sample/=beta;
          for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
            int topic=localTopicIndex[denseIndex];
            sample-=localTopicCounts[topic] / (tokensPerTopic[topic] + betaSum);
            if (sample <= 0.0) {
              newTopic=topic;
              break;
            }
          }
        }
 else {
          sample-=topicBetaMass;
          sample/=beta;
          newTopic=0;
          sample-=alpha[newTopic] / (tokensPerTopic[newTopic] + betaSum);
          while (sample > 0.0) {
            newTopic++;
            if (newTopic >= numTopics) {
              index=0;
              while (index < currentTypeTopicCounts.length && currentTypeTopicCounts[index] > 0) {
                currentTopic=currentTypeTopicCounts[index] & topicMask;
                currentValue=currentTypeTopicCounts[index] >> topicBits;
                System.out.println(currentTopic + ""String_Node_Str"" + currentValue+ ""String_Node_Str""+ topicTermScores[index]+ ""String_Node_Str""+ cachedCoefficients[currentTopic]);
                index++;
              }
            }
            sample-=alpha[newTopic] / (tokensPerTopic[newTopic] + betaSum);
          }
        }
      }
      topics[position]=newTopic;
      topicBetaMass-=beta * localTopicCounts[newTopic] / (tokensPerTopic[newTopic] + betaSum);
      localTopicCounts[newTopic]++;
      if (localTopicCounts[newTopic] == 1) {
        denseIndex=nonZeroTopics;
        while (denseIndex > 0 && localTopicIndex[denseIndex - 1] > newTopic) {
          localTopicIndex[denseIndex]=localTopicIndex[denseIndex - 1];
          denseIndex--;
        }
        localTopicIndex[denseIndex]=newTopic;
        nonZeroTopics++;
      }
      cachedCoefficients[newTopic]=(alpha[newTopic] + localTopicCounts[newTopic]) / (tokensPerTopic[newTopic] + betaSum);
      topicBetaMass+=beta * localTopicCounts[newTopic] / (tokensPerTopic[newTopic] + betaSum);
    }
    if (iteration > burnIn && (iteration - burnIn) % thinning == 0) {
      for (int topic=0; topic < numTopics; topic++) {
        result[topic]+=alpha[topic] + localTopicCounts[topic];
        sum+=alpha[topic] + localTopicCounts[topic];
      }
    }
  }
  for (denseIndex=0; denseIndex < nonZeroTopics; denseIndex++) {
    int topic=localTopicIndex[denseIndex];
    cachedCoefficients[topic]=alpha[topic] / (tokensPerTopic[topic] + betaSum);
  }
  if (sum == 0.0) {
    for (int topic=0; topic < numTopics; topic++) {
      result[topic]=alpha[topic] + localTopicCounts[topic];
      sum+=result[topic];
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    result[topic]/=sum;
  }
  return result;
}",0.9944825529376676
20192,"public InvertedIndex(InstanceList ilist){
  int numFeatures=ilist.getDataAlphabet().size();
  ii=new ArrayList[numFeatures];
  for (int i=0; i < ilist.size(); i++) {
    Instance inst=ilist.get(i);
    if (!(inst.getData() instanceof FeatureVector))     throw new IllegalArgumentException(this.getClass().getName() + ""String_Node_Str"");
    FeatureVector fv=(FeatureVector)inst.getData();
    for (int fl=0; fl < fv.numLocations(); fl++) {
      if (fv.valueAtLocation(fl) != 0)       addEntry(fv.indexAtLocation(fl),inst);
    }
  }
}","public InvertedIndex(InstanceList ilist){
  this.ilist=ilist;
  int numFeatures=ilist.getDataAlphabet().size();
  ii=new ArrayList[numFeatures];
  for (int i=0; i < ilist.size(); i++) {
    Instance inst=ilist.get(i);
    if (!(inst.getData() instanceof FeatureVector))     throw new IllegalArgumentException(this.getClass().getName() + ""String_Node_Str"");
    FeatureVector fv=(FeatureVector)inst.getData();
    for (int fl=0; fl < fv.numLocations(); fl++) {
      if (fv.valueAtLocation(fl) != 0)       addEntry(fv.indexAtLocation(fl),inst);
    }
  }
}",0.981651376146789
20193,"public double getValue(){
  if (!cacheStale) {
    return cachedValue;
  }
  if (objWeight == 0) {
    return 0.0;
  }
  Arrays.fill(cachedGradient,0);
  int numRefDist=constraints.size();
  int numFeatures=trainingList.getDataAlphabet().size() + 1;
  int numLabels=trainingList.getTargetAlphabet().size();
  double scalingFactor=objWeight;
  if (mapping == null) {
    setMapping();
  }
  double[][] modelExpectations=new double[numRefDist][numLabels];
  double[][] ratio=new double[numRefDist][numLabels];
  double[] featureCounts=new double[numRefDist];
  double[][] scores=new double[trainingList.size()][numLabels];
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    double instanceWeight=trainingList.getInstanceWeight(instance);
    if (instance.getTarget() != null) {
      continue;
    }
    FeatureVector fv=(FeatureVector)instance.getData();
    classifier.getClassificationScoresWithTemperature(instance,temperature,scores[ii]);
    for (int loc=0; loc < fv.numLocations(); loc++) {
      int featureIndex=fv.indexAtLocation(loc);
      if (constraints.containsKey(featureIndex)) {
        int cIndex=mapping.get(featureIndex);
        double val;
        if (!useValues) {
          val=1.;
        }
 else {
          val=fv.valueAtLocation(loc);
        }
        featureCounts[cIndex]+=val;
        for (int l=0; l < numLabels; l++) {
          modelExpectations[cIndex][l]+=scores[ii][l] * val * instanceWeight;
        }
      }
    }
    if (constraints.containsKey(defaultFeatureIndex)) {
      int cIndex=mapping.get(defaultFeatureIndex);
      featureCounts[cIndex]+=1;
      for (int l=0; l < numLabels; l++) {
        modelExpectations[cIndex][l]+=scores[ii][l] * instanceWeight;
      }
    }
  }
  double value=0;
  for (  int featureIndex : constraints.keySet()) {
    int cIndex=mapping.get(featureIndex);
    if (featureCounts[cIndex] > 0) {
      for (int label=0; label < numLabels; label++) {
        double cProb=constraints.get(featureIndex)[label];
        modelExpectations[cIndex][label]/=featureCounts[cIndex];
        ratio[cIndex][label]=cProb / modelExpectations[cIndex][label];
        value+=scalingFactor * cProb * Math.log(modelExpectations[cIndex][label]);
        value-=scalingFactor * cProb * Math.log(cProb);
      }
      assert(Maths.almostEquals(MatrixOps.sum(modelExpectations[cIndex]),1));
    }
  }
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    if (instance.getTarget() != null) {
      continue;
    }
    double instanceWeight=trainingList.getInstanceWeight(instance);
    FeatureVector fv=(FeatureVector)instance.getData();
    for (int loc=0; loc < fv.numLocations() + 1; loc++) {
      int featureIndex;
      if (loc == fv.numLocations()) {
        featureIndex=defaultFeatureIndex;
      }
 else {
        featureIndex=fv.indexAtLocation(loc);
      }
      if (constraints.containsKey(featureIndex)) {
        int cIndex=mapping.get(featureIndex);
        if (featureCounts[cIndex] == 0) {
          continue;
        }
        double val;
        if ((featureIndex == defaultFeatureIndex) || (!useValues)) {
          val=1;
        }
 else {
          val=fv.valueAtLocation(loc);
        }
        double instanceExpectation=0;
        for (int label=0; label < numLabels; label++) {
          instanceExpectation+=ratio[cIndex][label] * scores[ii][label];
        }
        for (int label=0; label < numLabels; label++) {
          if (scores[ii][label] == 0)           continue;
          assert(!Double.isInfinite(scores[ii][label]));
          double weight=scalingFactor * instanceWeight * temperature* (val / featureCounts[cIndex])* scores[ii][label]* (ratio[cIndex][label] - instanceExpectation);
          MatrixOps.rowPlusEquals(cachedGradient,numFeatures,label,fv,weight);
          cachedGradient[numFeatures * label + defaultFeatureIndex]+=weight;
        }
      }
    }
  }
  cachedValue=value;
  cacheStale=false;
  double reg=getRegularization();
  progressLogger.info(""String_Node_Str"" + value + ""String_Node_Str""+ reg+ ""String_Node_Str""+ cachedValue);
  return value;
}","public double getValue(){
  if (!cacheStale) {
    return cachedValue;
  }
  if (objWeight == 0) {
    return 0.0;
  }
  Arrays.fill(cachedGradient,0);
  int numRefDist=constraints.size();
  int numFeatures=trainingList.getDataAlphabet().size() + 1;
  int numLabels=trainingList.getTargetAlphabet().size();
  double scalingFactor=objWeight;
  if (mapping == null) {
    setMapping();
  }
  double[][] modelExpectations=new double[numRefDist][numLabels];
  double[][] ratio=new double[numRefDist][numLabels];
  double[] featureCounts=new double[numRefDist];
  double[][] scores=new double[trainingList.size()][numLabels];
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    double instanceWeight=trainingList.getInstanceWeight(instance);
    if (instance.getTarget() != null) {
      continue;
    }
    FeatureVector fv=(FeatureVector)instance.getData();
    classifier.getClassificationScoresWithTemperature(instance,temperature,scores[ii]);
    for (int loc=0; loc < fv.numLocations(); loc++) {
      int featureIndex=fv.indexAtLocation(loc);
      if (constraints.containsKey(featureIndex)) {
        int cIndex=mapping.get(featureIndex);
        double val;
        if (!useValues) {
          val=1.;
        }
 else {
          val=fv.valueAtLocation(loc);
        }
        featureCounts[cIndex]+=val;
        for (int l=0; l < numLabels; l++) {
          modelExpectations[cIndex][l]+=scores[ii][l] * val * instanceWeight;
        }
      }
    }
    if (constraints.containsKey(defaultFeatureIndex)) {
      int cIndex=mapping.get(defaultFeatureIndex);
      featureCounts[cIndex]+=1;
      for (int l=0; l < numLabels; l++) {
        modelExpectations[cIndex][l]+=scores[ii][l] * instanceWeight;
      }
    }
  }
  double value=0;
  for (  int featureIndex : constraints.keySet()) {
    int cIndex=mapping.get(featureIndex);
    if (featureCounts[cIndex] > 0) {
      for (int label=0; label < numLabels; label++) {
        double cProb=constraints.get(featureIndex)[label];
        modelExpectations[cIndex][label]/=featureCounts[cIndex];
        ratio[cIndex][label]=cProb / modelExpectations[cIndex][label];
        value+=scalingFactor * cProb * Math.log(modelExpectations[cIndex][label]);
        if (cProb > 0) {
          value-=scalingFactor * cProb * Math.log(cProb);
        }
      }
      assert(Maths.almostEquals(MatrixOps.sum(modelExpectations[cIndex]),1));
    }
  }
  for (int ii=0; ii < trainingList.size(); ii++) {
    Instance instance=trainingList.get(ii);
    if (instance.getTarget() != null) {
      continue;
    }
    double instanceWeight=trainingList.getInstanceWeight(instance);
    FeatureVector fv=(FeatureVector)instance.getData();
    for (int loc=0; loc < fv.numLocations() + 1; loc++) {
      int featureIndex;
      if (loc == fv.numLocations()) {
        featureIndex=defaultFeatureIndex;
      }
 else {
        featureIndex=fv.indexAtLocation(loc);
      }
      if (constraints.containsKey(featureIndex)) {
        int cIndex=mapping.get(featureIndex);
        if (featureCounts[cIndex] == 0) {
          continue;
        }
        double val;
        if ((featureIndex == defaultFeatureIndex) || (!useValues)) {
          val=1;
        }
 else {
          val=fv.valueAtLocation(loc);
        }
        double instanceExpectation=0;
        for (int label=0; label < numLabels; label++) {
          instanceExpectation+=ratio[cIndex][label] * scores[ii][label];
        }
        for (int label=0; label < numLabels; label++) {
          if (scores[ii][label] == 0)           continue;
          assert(!Double.isInfinite(scores[ii][label]));
          double weight=scalingFactor * instanceWeight * temperature* (val / featureCounts[cIndex])* scores[ii][label]* (ratio[cIndex][label] - instanceExpectation);
          MatrixOps.rowPlusEquals(cachedGradient,numFeatures,label,fv,weight);
          cachedGradient[numFeatures * label + defaultFeatureIndex]+=weight;
        }
      }
    }
  }
  cachedValue=value;
  cacheStale=false;
  double reg=getRegularization();
  progressLogger.info(""String_Node_Str"" + value + ""String_Node_Str""+ reg+ ""String_Node_Str""+ cachedValue);
  return value;
}",0.995568331536711
20194,"public double getInstanceWeight(int index){
  if (index > this.size())   throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str""+ this.size());
  if (instWeights == null)   return 1.0;
  return instWeights.get(get(index));
}","public double getInstanceWeight(int index){
  if (index > this.size()) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str""+ this.size());
  }
  if (instWeights != null) {
    Double value=instWeights.get(get(index));
    if (value != null) {
      return value;
    }
  }
  return 1.0;
}",0.7145359019264448
20195,"public void setInstanceWeight(int index,double weight){
  if (weight != getInstanceWeight(index)) {
    if (instWeights == null)     instWeights=new HashMap<Instance,Double>();
    instWeights.put(get(index),weight);
  }
}","public void setInstanceWeight(int index,double weight){
  if (weight == 1.0) {
    if (instWeights == null) {
      return;
    }
    Instance instance=get(index);
    Double value=instWeights.get(instance);
    if (value == null || value.doubleValue() == weight) {
      return;
    }
    instWeights.remove(instance);
  }
 else {
    if (instWeights == null) {
      instWeights=new HashMap<Instance,Double>();
    }
    instWeights.put(get(index),weight);
  }
}",0.5481049562682215
20196,"/** 
 * Select top features in LDA topics.
 * @param numSelFeatures Number of features to select.
 * @param ldaEst LDAEstimatePr which provides an interface to an LDA model.
 * @param seqAlphabet The alphabet for the sequence dataset, which may be different from the vector dataset alphabet.
 * @param alphabet The vector dataset alphabet.
 * @return ArrayList with the int indices of the selected features.
 */
public static ArrayList<Integer> selectTopLDAFeatures(int numSelFeatures,ParallelTopicModel lda,Alphabet alphabet){
  ArrayList<Integer> features=new ArrayList<Integer>();
  Alphabet seqAlphabet=lda.getAlphabet();
  int numTopics=lda.getNumTopics();
  Object[][] sorted=lda.getTopWords(seqAlphabet.size());
  for (int pos=0; pos < seqAlphabet.size(); pos++) {
    for (int ti=0; ti < numTopics; ti++) {
      Object feat=sorted[ti][pos].toString();
      int fi=alphabet.lookupIndex(feat,false);
      if ((fi >= 0) && (!features.contains(fi))) {
        System.err.println(feat);
        features.add(fi);
        if (features.size() == numSelFeatures) {
          return features;
        }
      }
    }
  }
  return features;
}","/** 
 * Select top features in LDA topics.
 * @param numSelFeatures Number of features to select.
 * @param ldaEst LDAEstimatePr which provides an interface to an LDA model.
 * @param seqAlphabet The alphabet for the sequence dataset, which may be different from the vector dataset alphabet.
 * @param alphabet The vector dataset alphabet.
 * @return ArrayList with the int indices of the selected features.
 */
public static ArrayList<Integer> selectTopLDAFeatures(int numSelFeatures,ParallelTopicModel lda,Alphabet alphabet){
  ArrayList<Integer> features=new ArrayList<Integer>();
  Alphabet seqAlphabet=lda.getAlphabet();
  int numTopics=lda.getNumTopics();
  Object[][] sorted=lda.getTopWords(seqAlphabet.size());
  for (int pos=0; pos < seqAlphabet.size(); pos++) {
    for (int ti=0; ti < numTopics; ti++) {
      Object feat=sorted[ti][pos].toString();
      int fi=alphabet.lookupIndex(feat,false);
      if ((fi >= 0) && (!features.contains(fi))) {
        System.err.println(""String_Node_Str"" + feat);
        features.add(fi);
        if (features.size() == numSelFeatures) {
          return features;
        }
      }
    }
  }
  return features;
}",0.9913269731136166
20197,"/** 
 * Label features using heuristic described in  ""Learning from Labeled Features using Generalized Expectation Criteria"" Gregory Druck, Gideon Mann, Andrew McCallum.
 * @param list InstanceList used to compute statistics for labeling features.
 * @param features List of features to label.
 * @return Labeled features, HashMap mapping feature indices to list of labels.
 */
public static HashMap<Integer,ArrayList<Integer>> labelFeatures(InstanceList list,ArrayList<Integer> features){
  HashMap<Integer,ArrayList<Integer>> labeledFeatures=new HashMap<Integer,ArrayList<Integer>>();
  double[][] featureLabelCounts=getFeatureLabelCounts(list);
  int numLabels=list.getTargetAlphabet().size();
  int minRank=100 * numLabels;
  InfoGain infogain=new InfoGain(list);
  double sum=0;
  for (int rank=0; rank < minRank; rank++) {
    sum+=infogain.getValueAtRank(rank);
  }
  double mean=sum / minRank;
  for (int i=0; i < features.size(); i++) {
    int fi=features.get(i);
    if (infogain.value(fi) < mean) {
      continue;
    }
    double[] prob=featureLabelCounts[fi];
    MatrixOps.plusEquals(prob,1e-8);
    MatrixOps.timesEquals(prob,1. / MatrixOps.sum(prob));
    int[] sortedIndices=getMaxIndices(prob);
    ArrayList<Integer> labels=new ArrayList<Integer>();
    if (numLabels > 2) {
      boolean discard=false;
      double threshold=prob[sortedIndices[0]] / 2;
      for (int li=0; li < numLabels; li++) {
        if (prob[li] > threshold) {
          labels.add(li);
        }
        if (labels.size() > (numLabels / 2)) {
          discard=true;
          break;
        }
      }
      if (discard) {
        continue;
      }
    }
 else {
      labels.add(sortedIndices[0]);
    }
    labeledFeatures.put(fi,labels);
  }
  return labeledFeatures;
}","/** 
 * Label features using heuristic described in  ""Learning from Labeled Features using Generalized Expectation Criteria"" Gregory Druck, Gideon Mann, Andrew McCallum.
 * @param list InstanceList used to compute statistics for labeling features.
 * @param features List of features to label.
 * @return Labeled features, HashMap mapping feature indices to list of labels.
 */
public static HashMap<Integer,ArrayList<Integer>> labelFeatures(InstanceList list,ArrayList<Integer> features){
  HashMap<Integer,ArrayList<Integer>> labeledFeatures=new HashMap<Integer,ArrayList<Integer>>();
  double[][] featureLabelCounts=getFeatureLabelCounts(list);
  int numLabels=list.getTargetAlphabet().size();
  int minRank=100 * numLabels;
  InfoGain infogain=new InfoGain(list);
  double sum=0;
  for (int rank=0; rank < minRank; rank++) {
    sum+=infogain.getValueAtRank(rank);
  }
  double mean=sum / minRank;
  for (int i=0; i < features.size(); i++) {
    int fi=features.get(i);
    if (infogain.value(fi) < mean) {
      System.err.println(""String_Node_Str"" + list.getDataAlphabet().lookupObject(fi));
      continue;
    }
    double[] prob=featureLabelCounts[fi];
    MatrixOps.plusEquals(prob,1e-8);
    MatrixOps.timesEquals(prob,1. / MatrixOps.sum(prob));
    int[] sortedIndices=getMaxIndices(prob);
    ArrayList<Integer> labels=new ArrayList<Integer>();
    if (numLabels > 2) {
      boolean discard=false;
      double threshold=prob[sortedIndices[0]] / 2;
      for (int li=0; li < numLabels; li++) {
        if (prob[li] > threshold) {
          labels.add(li);
        }
        if (labels.size() > (numLabels / 2)) {
          discard=true;
          break;
        }
      }
      if (discard) {
        continue;
      }
    }
 else {
      labels.add(sortedIndices[0]);
    }
    labeledFeatures.put(fi,labels);
  }
  return labeledFeatures;
}",0.976
20198,"private static void writeConstraints(HashMap<Integer,double[]> constraints,File constraintsFile,Alphabet dataAlphabet,Alphabet targetAlphabet){
  try {
    FileWriter writer=new FileWriter(constraintsFile);
    for (    int fi : constraints.keySet()) {
      writer.write(dataAlphabet.lookupObject(fi) + ""String_Node_Str"");
      double[] p=constraints.get(fi);
      if (p != null) {
        for (int li=0; li < p.length; li++) {
          writer.write(targetAlphabet.lookupObject(li) + ""String_Node_Str"" + p[li]+ ""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}","private static void writeConstraints(HashMap<Integer,double[]> constraints,File constraintsFile,Alphabet dataAlphabet,Alphabet targetAlphabet){
  if (constraints.size() == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    FileWriter writer=new FileWriter(constraintsFile);
    for (    int fi : constraints.keySet()) {
      writer.write(dataAlphabet.lookupObject(fi) + ""String_Node_Str"");
      double[] p=constraints.get(fi);
      if (p != null) {
        for (int li=0; li < p.length; li++) {
          writer.write(targetAlphabet.lookupObject(li) + ""String_Node_Str"" + p[li]+ ""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}",0.9380888290713324
20199,"public static void main(String[] args){
  CommandOption.process(Vectors2FeatureConstraints.class,args);
  InstanceList list=InstanceList.load(vectorsFile.value);
  ArrayList<Integer> features=null;
  HashMap<Integer,ArrayList<Integer>> featuresAndLabels=null;
  if (featuresFile.wasInvoked()) {
    if (fileContainsLabels(featuresFile.value)) {
      featuresAndLabels=readFeaturesAndLabelsFromFile(featuresFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
    }
 else {
      features=readFeaturesFromFile(featuresFile.value,list.getDataAlphabet());
    }
  }
 else {
    if (featureSelection.value.equals(""String_Node_Str"")) {
      features=FeatureConstraintUtil.selectFeaturesByInfoGain(list,numConstraints.value);
    }
 else     if (featureSelection.value.equals(""String_Node_Str"")) {
      try {
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(ldaFile.value));
        ParallelTopicModel lda=(ParallelTopicModel)ois.readObject();
        features=FeatureConstraintUtil.selectTopLDAFeatures(numConstraints.value,lda,list.getDataAlphabet());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  HashMap<Integer,double[]> constraints=null;
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=new HashMap<Integer,double[]>();
    for (    int fi : features) {
      constraints.put(fi,null);
    }
  }
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=FeatureConstraintUtil.setTargetsUsingData(list,features);
  }
 else {
    if (featuresAndLabels == null) {
      featuresAndLabels=FeatureConstraintUtil.labelFeatures(list,features);
    }
    if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingHeuristic(featuresAndLabels,list.getTargetAlphabet().size(),majorityProb.value);
    }
 else     if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingFeatureVoting(featuresAndLabels,list);
    }
  }
  writeConstraints(constraints,constraintsFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
}","public static void main(String[] args){
  CommandOption.process(Vectors2FeatureConstraints.class,args);
  InstanceList list=InstanceList.load(vectorsFile.value);
  ArrayList<Integer> features=null;
  HashMap<Integer,ArrayList<Integer>> featuresAndLabels=null;
  if (featuresFile.wasInvoked()) {
    if (fileContainsLabels(featuresFile.value)) {
      featuresAndLabels=readFeaturesAndLabelsFromFile(featuresFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
    }
 else {
      features=readFeaturesFromFile(featuresFile.value,list.getDataAlphabet());
    }
  }
 else {
    if (featureSelection.value.equals(""String_Node_Str"")) {
      features=FeatureConstraintUtil.selectFeaturesByInfoGain(list,numConstraints.value);
    }
 else     if (featureSelection.value.equals(""String_Node_Str"")) {
      try {
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(ldaFile.value));
        ParallelTopicModel lda=(ParallelTopicModel)ois.readObject();
        features=FeatureConstraintUtil.selectTopLDAFeatures(numConstraints.value,lda,list.getDataAlphabet());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + featureSelection.value);
    }
  }
  HashMap<Integer,double[]> constraints=null;
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=new HashMap<Integer,double[]>();
    for (    int fi : features) {
      constraints.put(fi,null);
    }
  }
 else   if (targets.value.equals(""String_Node_Str"")) {
    constraints=FeatureConstraintUtil.setTargetsUsingData(list,features);
  }
 else {
    if (featuresAndLabels == null) {
      featuresAndLabels=FeatureConstraintUtil.labelFeatures(list,features);
      for (      int fi : featuresAndLabels.keySet()) {
        System.err.print(list.getDataAlphabet().lookupObject(fi) + ""String_Node_Str"");
        for (        int li : featuresAndLabels.get(fi)) {
          System.err.println(list.getTargetAlphabet().lookupObject(li) + ""String_Node_Str"");
        }
      }
    }
    if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingHeuristic(featuresAndLabels,list.getTargetAlphabet().size(),majorityProb.value);
    }
 else     if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingFeatureVoting(featuresAndLabels,list);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + targets.value);
    }
  }
  writeConstraints(constraints,constraintsFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
}",0.8814498933901919
20200,"private static ArrayList<Integer> readFeaturesFromFile(File file,Alphabet dataAlphabet){
  ArrayList<Integer> features=new ArrayList<Integer>();
  try {
    BufferedReader reader=new BufferedReader(new FileReader(file));
    String line=reader.readLine().trim();
    while (line != null) {
      int featureIndex=dataAlphabet.lookupIndex(line,false);
      features.add(featureIndex);
      line=reader.readLine().trim();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
  return features;
}","private static ArrayList<Integer> readFeaturesFromFile(File file,Alphabet dataAlphabet){
  ArrayList<Integer> features=new ArrayList<Integer>();
  try {
    BufferedReader reader=new BufferedReader(new FileReader(file));
    String line=reader.readLine();
    while (line != null) {
      line=line.trim();
      int featureIndex=dataAlphabet.lookupIndex(line,false);
      features.add(featureIndex);
      line=reader.readLine();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
  return features;
}",0.9642184557438794
20201,"public static void main(String[] args){
  CommandOption.process(Vectors2FeatureConstraints.class,args);
  InstanceList list=InstanceList.load(vectorsFile.value);
  ArrayList<Integer> features=null;
  HashMap<Integer,ArrayList<Integer>> featuresAndLabels=null;
  if (featuresFile.wasInvoked()) {
    if (fileContainsLabels(featuresFile.value)) {
      featuresAndLabels=readFeaturesAndLabelsFromFile(featuresFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
    }
 else {
      features=readFeaturesFromFile(featuresFile.value,list.getDataAlphabet());
    }
  }
 else {
    if (featureSelection.value.equals(""String_Node_Str"")) {
      features=FeatureConstraintUtil.selectFeaturesByInfoGain(list,numConstraints.value);
    }
 else     if (featureSelection.value.equals(""String_Node_Str"")) {
      try {
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(ldaFile.value));
        LDAHyper lda=(LDAHyper)ois.readObject();
        features=FeatureConstraintUtil.selectTopLDAFeatures(numConstraints.value,lda,list.getDataAlphabet());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  HashMap<Integer,double[]> constraints=null;
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=new HashMap<Integer,double[]>();
    for (    int fi : features) {
      constraints.put(fi,null);
    }
  }
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=FeatureConstraintUtil.setTargetsUsingData(list,features);
  }
 else {
    if (featuresAndLabels == null) {
      FeatureConstraintUtil.labelFeatures(list,features);
    }
    if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingHeuristic(featuresAndLabels,list.getTargetAlphabet().size(),majorityProb.value);
    }
 else     if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingFeatureVoting(featuresAndLabels,list);
    }
  }
  writeConstraints(constraints,constraintsFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
}","public static void main(String[] args){
  CommandOption.process(Vectors2FeatureConstraints.class,args);
  InstanceList list=InstanceList.load(vectorsFile.value);
  ArrayList<Integer> features=null;
  HashMap<Integer,ArrayList<Integer>> featuresAndLabels=null;
  if (featuresFile.wasInvoked()) {
    if (fileContainsLabels(featuresFile.value)) {
      featuresAndLabels=readFeaturesAndLabelsFromFile(featuresFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
    }
 else {
      features=readFeaturesFromFile(featuresFile.value,list.getDataAlphabet());
    }
  }
 else {
    if (featureSelection.value.equals(""String_Node_Str"")) {
      features=FeatureConstraintUtil.selectFeaturesByInfoGain(list,numConstraints.value);
    }
 else     if (featureSelection.value.equals(""String_Node_Str"")) {
      try {
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(ldaFile.value));
        LDAHyper lda=(LDAHyper)ois.readObject();
        features=FeatureConstraintUtil.selectTopLDAFeatures(numConstraints.value,lda,list.getDataAlphabet());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  HashMap<Integer,double[]> constraints=null;
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=new HashMap<Integer,double[]>();
    for (    int fi : features) {
      constraints.put(fi,null);
    }
  }
  if (targets.value.equals(""String_Node_Str"")) {
    constraints=FeatureConstraintUtil.setTargetsUsingData(list,features);
  }
 else {
    if (featuresAndLabels == null) {
      featuresAndLabels=FeatureConstraintUtil.labelFeatures(list,features);
    }
    if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingHeuristic(featuresAndLabels,list.getTargetAlphabet().size(),majorityProb.value);
    }
 else     if (targets.value.equals(""String_Node_Str"")) {
      constraints=FeatureConstraintUtil.setTargetsUsingFeatureVoting(featuresAndLabels,list);
    }
  }
  writeConstraints(constraints,constraintsFile.value,list.getDataAlphabet(),list.getTargetAlphabet());
}",0.9956500724987916
20202,"public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(Vectors2Vectors.class,""String_Node_Str"");
  CommandOption.process(Vectors2Vectors.class,args);
  if (args.length == 0) {
    CommandOption.getList(Vectors2Vectors.class).printUsage(false);
    System.exit(-1);
  }
  if (false && !inputFile.wasInvoked()) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  Random r=randomSeed.wasInvoked() ? new Random(randomSeed.value) : new Random();
  double t=trainingProportion.value;
  double v=validationProportion.value;
  logger.info(""String_Node_Str"" + t);
  logger.info(""String_Node_Str"" + v);
  logger.info(""String_Node_Str"" + (1 - v - t));
  logger.info(""String_Node_Str"" + pruneInfogain.value);
  logger.info(""String_Node_Str"" + pruneCount.value);
  InstanceList instances=InstanceList.load(inputFile.value);
  if (t == 1.0 && !(pruneInfogain.wasInvoked() || pruneCount.wasInvoked()) && !(hideTargets.wasInvoked() || revealTargets.wasInvoked())) {
    System.err.println(""String_Node_Str"");
    instances.save(trainingFile.value());
    System.exit(0);
  }
  if (pruneInfogain.wasInvoked() || pruneCount.wasInvoked()) {
    if (t != 1.0) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    if (pruneCount.value > 0) {
      Instance firstInstance=instances.get(0);
      if (firstInstance.getData() instanceof FeatureSequence) {
        Alphabet oldAlphabet=instances.getDataAlphabet();
        Alphabet newAlphabet=new Alphabet();
        Noop newPipe=new Noop(newAlphabet,instances.getTargetAlphabet());
        InstanceList newInstanceList=new InstanceList(newPipe);
        int numFeatures=oldAlphabet.size();
        double[] counts=new double[numFeatures];
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureSequence fs=(FeatureSequence)instance.getData();
          fs.addFeatureWeightsTo(counts);
        }
        Instance instance, newInstance;
        while (instances.size() > 0) {
          instance=instances.get(0);
          FeatureSequence fs=(FeatureSequence)instance.getData();
          fs.prune(counts,newAlphabet,pruneCount.value);
          newInstanceList.add(newPipe.instanceFrom(new Instance(fs,instance.getTarget(),instance.getName(),instance.getSource())));
          instances.remove(0);
        }
        logger.info(""String_Node_Str"" + oldAlphabet.size() + ""String_Node_Str""+ newAlphabet.size());
        instances=newInstanceList;
      }
 else       if (firstInstance.getData() instanceof FeatureVector) {
        Alphabet alpha2=new Alphabet();
        Noop pipe2=new Noop(alpha2,instances.getTargetAlphabet());
        InstanceList instances2=new InstanceList(pipe2);
        int numFeatures=instances.getDataAlphabet().size();
        double[] counts=new double[numFeatures];
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureVector fv=(FeatureVector)instance.getData();
          fv.addTo(counts);
        }
        BitSet bs=new BitSet(numFeatures);
        for (int fi=0; fi < numFeatures; fi++) {
          if (counts[fi] > pruneCount.value) {
            bs.set(fi);
          }
        }
        logger.info(""String_Node_Str"" + (numFeatures - bs.cardinality()) + ""String_Node_Str""+ numFeatures+ ""String_Node_Str""+ (bs.cardinality())+ ""String_Node_Str"");
        FeatureSelection fs=new FeatureSelection(instances.getDataAlphabet(),bs);
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureVector fv=(FeatureVector)instance.getData();
          FeatureVector fv2=FeatureVector.newFeatureVector(fv,alpha2,fs);
          instances2.add(new Instance(fv2,instance.getTarget(),instance.getName(),instance.getSource()),instances.getInstanceWeight(ii));
          instance.unLock();
          instance.setData(null);
        }
        instances=instances2;
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + firstInstance.getClass().getName() + ""String_Node_Str"");
      }
    }
    if (pruneInfogain.value > 0) {
      Alphabet alpha2=new Alphabet();
      Noop pipe2=new Noop(alpha2,instances.getTargetAlphabet());
      InstanceList instances2=new InstanceList(pipe2);
      InfoGain ig=new InfoGain(instances);
      FeatureSelection fs=new FeatureSelection(ig,pruneInfogain.value);
      for (int ii=0; ii < instances.size(); ii++) {
        Instance instance=instances.get(ii);
        FeatureVector fv=(FeatureVector)instance.getData();
        FeatureVector fv2=FeatureVector.newFeatureVector(fv,alpha2,fs);
        instance.unLock();
        instance.setData(null);
        instances2.add(pipe2.instanceFrom(new Instance(fv2,instance.getTarget(),instance.getName(),instance.getSource())),instances.getInstanceWeight(ii));
      }
      instances=instances2;
    }
    if (vectorToSequence.value) {
      Alphabet alpha=instances.getDataAlphabet();
      Noop pipe2=new Noop(alpha,instances.getTargetAlphabet());
      InstanceList instances2=new InstanceList(pipe2);
      for (int ii=0; ii < instances.size(); ii++) {
        Instance instance=instances.get(ii);
        FeatureVector fv=(FeatureVector)instance.getData();
        ArrayList seq=new ArrayList();
        for (int loc=0; loc < fv.numLocations(); loc++)         for (int count=0; count < fv.valueAtLocation(loc); count++)         seq.add(new Integer(fv.indexAtLocation(loc)));
        Collections.shuffle(seq);
        int[] indices=new int[seq.size()];
        for (int i=0; i < indices.length; i++)         indices[i]=((Integer)seq.get(i)).intValue();
        FeatureSequence fs=new FeatureSequence(alpha,indices);
        instance.unLock();
        instance.setData(null);
        instances2.add(pipe2.instanceFrom(new Instance(fs,instance.getTarget(),instance.getName(),instance.getSource())),instances.getInstanceWeight(ii));
      }
      instances=instances2;
    }
    if (outputFile.wasInvoked()) {
      writeInstanceList(instances,outputFile.value());
    }
 else     if (trainingFile.wasInvoked()) {
      writeInstanceList(instances,trainingFile.value());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (trainingProportion.wasInvoked() || validationProportion.wasInvoked()) {
    InstanceList[] instanceLists=instances.split(r,new double[]{t,1 - t - v,v});
    if (instanceLists[0].size() > 0)     writeInstanceList(instanceLists[0],trainingFile.value());
    if (instanceLists[1].size() > 0)     writeInstanceList(instanceLists[1],testFile.value());
    if (instanceLists[2].size() > 0)     writeInstanceList(instanceLists[2],validationFile.value());
  }
 else   if (hideTargets.wasInvoked()) {
    Iterator<Instance> iter=instances.iterator();
    while (iter.hasNext()) {
      Instance instance=iter.next();
      instance.unLock();
      instance.setProperty(""String_Node_Str"",instance.getTarget());
      instance.setTarget(null);
      instance.lock();
    }
    writeInstanceList(instances,outputFile.value());
  }
 else   if (revealTargets.wasInvoked()) {
    Iterator<Instance> iter=instances.iterator();
    while (iter.hasNext()) {
      Instance instance=iter.next();
      instance.unLock();
      instance.setTarget(instance.getProperty(""String_Node_Str""));
      instance.lock();
    }
    writeInstanceList(instances,outputFile.value());
  }
}","public static void main(String[] args) throws FileNotFoundException, IOException {
  CommandOption.setSummary(Vectors2Vectors.class,""String_Node_Str"");
  CommandOption.process(Vectors2Vectors.class,args);
  if (args.length == 0) {
    CommandOption.getList(Vectors2Vectors.class).printUsage(false);
    System.exit(-1);
  }
  if (false && !inputFile.wasInvoked()) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  Random r=randomSeed.wasInvoked() ? new Random(randomSeed.value) : new Random();
  double t=trainingProportion.value;
  double v=validationProportion.value;
  logger.info(""String_Node_Str"" + t);
  logger.info(""String_Node_Str"" + v);
  logger.info(""String_Node_Str"" + (1 - v - t));
  logger.info(""String_Node_Str"" + pruneInfogain.value);
  logger.info(""String_Node_Str"" + pruneCount.value);
  InstanceList instances=InstanceList.load(inputFile.value);
  if (t == 1.0 && !vectorToSequence.value && !(pruneInfogain.wasInvoked() || pruneCount.wasInvoked()) && !(hideTargets.wasInvoked() || revealTargets.wasInvoked())) {
    System.err.println(""String_Node_Str"");
    instances.save(trainingFile.value());
    System.exit(0);
  }
  if (pruneInfogain.wasInvoked() || pruneCount.wasInvoked()) {
    if (t != 1.0) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    if (pruneCount.value > 0) {
      Instance firstInstance=instances.get(0);
      if (firstInstance.getData() instanceof FeatureSequence) {
        Alphabet oldAlphabet=instances.getDataAlphabet();
        Alphabet newAlphabet=new Alphabet();
        Noop newPipe=new Noop(newAlphabet,instances.getTargetAlphabet());
        InstanceList newInstanceList=new InstanceList(newPipe);
        int numFeatures=oldAlphabet.size();
        double[] counts=new double[numFeatures];
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureSequence fs=(FeatureSequence)instance.getData();
          fs.addFeatureWeightsTo(counts);
        }
        Instance instance, newInstance;
        while (instances.size() > 0) {
          instance=instances.get(0);
          FeatureSequence fs=(FeatureSequence)instance.getData();
          fs.prune(counts,newAlphabet,pruneCount.value);
          newInstanceList.add(newPipe.instanceFrom(new Instance(fs,instance.getTarget(),instance.getName(),instance.getSource())));
          instances.remove(0);
        }
        logger.info(""String_Node_Str"" + oldAlphabet.size() + ""String_Node_Str""+ newAlphabet.size());
        instances=newInstanceList;
      }
 else       if (firstInstance.getData() instanceof FeatureVector) {
        Alphabet alpha2=new Alphabet();
        Noop pipe2=new Noop(alpha2,instances.getTargetAlphabet());
        InstanceList instances2=new InstanceList(pipe2);
        int numFeatures=instances.getDataAlphabet().size();
        double[] counts=new double[numFeatures];
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureVector fv=(FeatureVector)instance.getData();
          fv.addTo(counts);
        }
        BitSet bs=new BitSet(numFeatures);
        for (int fi=0; fi < numFeatures; fi++) {
          if (counts[fi] > pruneCount.value) {
            bs.set(fi);
          }
        }
        logger.info(""String_Node_Str"" + (numFeatures - bs.cardinality()) + ""String_Node_Str""+ numFeatures+ ""String_Node_Str""+ (bs.cardinality())+ ""String_Node_Str"");
        FeatureSelection fs=new FeatureSelection(instances.getDataAlphabet(),bs);
        for (int ii=0; ii < instances.size(); ii++) {
          Instance instance=instances.get(ii);
          FeatureVector fv=(FeatureVector)instance.getData();
          FeatureVector fv2=FeatureVector.newFeatureVector(fv,alpha2,fs);
          instances2.add(new Instance(fv2,instance.getTarget(),instance.getName(),instance.getSource()),instances.getInstanceWeight(ii));
          instance.unLock();
          instance.setData(null);
        }
        instances=instances2;
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + firstInstance.getClass().getName() + ""String_Node_Str"");
      }
    }
    if (pruneInfogain.value > 0) {
      Alphabet alpha2=new Alphabet();
      Noop pipe2=new Noop(alpha2,instances.getTargetAlphabet());
      InstanceList instances2=new InstanceList(pipe2);
      InfoGain ig=new InfoGain(instances);
      FeatureSelection fs=new FeatureSelection(ig,pruneInfogain.value);
      for (int ii=0; ii < instances.size(); ii++) {
        Instance instance=instances.get(ii);
        FeatureVector fv=(FeatureVector)instance.getData();
        FeatureVector fv2=FeatureVector.newFeatureVector(fv,alpha2,fs);
        instance.unLock();
        instance.setData(null);
        instances2.add(pipe2.instanceFrom(new Instance(fv2,instance.getTarget(),instance.getName(),instance.getSource())),instances.getInstanceWeight(ii));
      }
      instances=instances2;
    }
    if (vectorToSequence.value) {
      System.out.println(""String_Node_Str"");
      Alphabet alpha=instances.getDataAlphabet();
      Noop pipe2=new Noop(alpha,instances.getTargetAlphabet());
      InstanceList instances2=new InstanceList(pipe2);
      for (int ii=0; ii < instances.size(); ii++) {
        Instance instance=instances.get(ii);
        FeatureVector fv=(FeatureVector)instance.getData();
        ArrayList seq=new ArrayList();
        for (int loc=0; loc < fv.numLocations(); loc++)         for (int count=0; count < fv.valueAtLocation(loc); count++)         seq.add(new Integer(fv.indexAtLocation(loc)));
        Collections.shuffle(seq);
        int[] indices=new int[seq.size()];
        for (int i=0; i < indices.length; i++)         indices[i]=((Integer)seq.get(i)).intValue();
        FeatureSequence fs=new FeatureSequence(alpha,indices);
        instance.unLock();
        instance.setData(null);
        instances2.add(pipe2.instanceFrom(new Instance(fs,instance.getTarget(),instance.getName(),instance.getSource())),instances.getInstanceWeight(ii));
      }
      instances=instances2;
    }
    if (outputFile.wasInvoked()) {
      writeInstanceList(instances,outputFile.value());
    }
 else     if (trainingFile.wasInvoked()) {
      writeInstanceList(instances,trainingFile.value());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (vectorToSequence.value) {
    Alphabet alpha=instances.getDataAlphabet();
    Noop pipe2=new Noop(alpha,instances.getTargetAlphabet());
    InstanceList instances2=new InstanceList(pipe2);
    for (int ii=0; ii < instances.size(); ii++) {
      Instance instance=instances.get(ii);
      FeatureVector fv=(FeatureVector)instance.getData();
      ArrayList seq=new ArrayList();
      for (int loc=0; loc < fv.numLocations(); loc++)       for (int count=0; count < fv.valueAtLocation(loc); count++)       seq.add(new Integer(fv.indexAtLocation(loc)));
      Collections.shuffle(seq);
      int[] indices=new int[seq.size()];
      for (int i=0; i < indices.length; i++)       indices[i]=((Integer)seq.get(i)).intValue();
      FeatureSequence fs=new FeatureSequence(alpha,indices);
      instance.unLock();
      instance.setData(null);
      instances2.add(pipe2.instanceFrom(new Instance(fs,instance.getTarget(),instance.getName(),instance.getSource())),instances.getInstanceWeight(ii));
    }
    instances=instances2;
    if (outputFile.wasInvoked()) {
      writeInstanceList(instances,outputFile.value());
    }
  }
 else   if (trainingProportion.wasInvoked() || validationProportion.wasInvoked()) {
    InstanceList[] instanceLists=instances.split(r,new double[]{t,1 - t - v,v});
    if (instanceLists[0].size() > 0)     writeInstanceList(instanceLists[0],trainingFile.value());
    if (instanceLists[1].size() > 0)     writeInstanceList(instanceLists[1],testFile.value());
    if (instanceLists[2].size() > 0)     writeInstanceList(instanceLists[2],validationFile.value());
  }
 else   if (hideTargets.wasInvoked()) {
    Iterator<Instance> iter=instances.iterator();
    while (iter.hasNext()) {
      Instance instance=iter.next();
      instance.unLock();
      instance.setProperty(""String_Node_Str"",instance.getTarget());
      instance.setTarget(null);
      instance.lock();
    }
    if (outputFile.wasInvoked()) {
      writeInstanceList(instances,outputFile.value());
    }
  }
 else   if (revealTargets.wasInvoked()) {
    Iterator<Instance> iter=instances.iterator();
    while (iter.hasNext()) {
      Instance instance=iter.next();
      instance.unLock();
      instance.setTarget(instance.getProperty(""String_Node_Str""));
      instance.lock();
    }
    if (outputFile.wasInvoked()) {
      writeInstanceList(instances,outputFile.value());
    }
  }
}",0.9194920478362716
20203,"/** 
 * Return an array (one element for each topic) of arrays of words, which are the most probable words for that topic in descending order. These are returned as Objects, but will probably be Strings.
 * @param numWords The maximum length of each topic's array of words (may be less).
 */
public Object[][] getTopWords(int numWords){
  TreeSet[] topicSortedWords=getSortedWords();
  Object[][] result=new Object[numTopics][];
  for (int topic=0; topic < numTopics; topic++) {
    TreeSet<IDSorter> sortedWords=topicSortedWords[topic];
    int limit=numWords;
    if (sortedWords.size() < numWords) {
      numWords=sortedWords.size();
    }
    result[topic]=new Object[limit];
    Iterator<IDSorter> iterator=sortedWords.iterator();
    for (int i=0; i < limit; i++) {
      IDSorter info=iterator.next();
      result[topic][i]=alphabet.lookupObject(info.getID());
    }
  }
  return result;
}","/** 
 * Return an array (one element for each topic) of arrays of words, which are the most probable words for that topic in descending order. These are returned as Objects, but will probably be Strings.
 * @param numWords The maximum length of each topic's array of words (may be less).
 */
public Object[][] getTopWords(int numWords){
  TreeSet[] topicSortedWords=getSortedWords();
  Object[][] result=new Object[numTopics][];
  for (int topic=0; topic < numTopics; topic++) {
    TreeSet<IDSorter> sortedWords=topicSortedWords[topic];
    int limit=numWords;
    if (sortedWords.size() < numWords) {
      limit=sortedWords.size();
    }
    result[topic]=new Object[limit];
    Iterator<IDSorter> iterator=sortedWords.iterator();
    for (int i=0; i < limit; i++) {
      IDSorter info=iterator.next();
      result[topic][i]=alphabet.lookupObject(info.getID());
    }
  }
  return result;
}",0.992749581706637
20204,"public Instance next(){
  AgglomerativeNeighbor neighbor=null;
  if (positiveCount < positiveTarget) {
    positiveCount++;
    int label=nonsingletonClusters[random.nextInt(nonsingletonClusters.length)];
    int[] instances=clustering.getIndicesWithLabel(label);
    int[] subcluster=sampleFromArray(instances,random,2);
    int[] cluster1=new int[]{subcluster[random.nextInt(subcluster.length)]};
    int[] cluster2=new int[subcluster.length - 1];
    int nadded=0;
    for (int i=0; i < subcluster.length; i++)     if (subcluster[i] != cluster1[0])     cluster2[nadded++]=subcluster[i];
    neighbor=new AgglomerativeNeighbor(clustering,clustering,cluster1,cluster2);
  }
 else {
    int labeli=random.nextInt(clustering.getNumClusters());
    int labelj=random.nextInt(clustering.getNumClusters());
    while (labeli == labelj)     labelj=random.nextInt(clustering.getNumClusters());
    int[] ii=sampleFromArray(clustering.getIndicesWithLabel(labeli),random,1);
    int[] ij=sampleFromArray(clustering.getIndicesWithLabel(labelj),random,1);
    neighbor=new AgglomerativeNeighbor(clustering,ClusterUtils.copyAndMergeClusters(clustering,labeli,labelj),ii,new int[]{ij[random.nextInt(ij.length)]});
  }
  totalCount++;
  return new Instance(neighbor,null,null,null);
}","public Instance next(){
  AgglomerativeNeighbor neighbor=null;
  if (positiveCount < positiveTarget && nonsingletonClusters.length > 0) {
    positiveCount++;
    int label=nonsingletonClusters[random.nextInt(nonsingletonClusters.length)];
    int[] instances=clustering.getIndicesWithLabel(label);
    int[] subcluster=sampleFromArray(instances,random,2);
    int[] cluster1=new int[]{subcluster[random.nextInt(subcluster.length)]};
    int[] cluster2=new int[subcluster.length - 1];
    int nadded=0;
    for (int i=0; i < subcluster.length; i++)     if (subcluster[i] != cluster1[0])     cluster2[nadded++]=subcluster[i];
    neighbor=new AgglomerativeNeighbor(clustering,clustering,cluster1,cluster2);
  }
 else {
    int labeli=random.nextInt(clustering.getNumClusters());
    int labelj=random.nextInt(clustering.getNumClusters());
    while (labeli == labelj)     labelj=random.nextInt(clustering.getNumClusters());
    int[] ii=sampleFromArray(clustering.getIndicesWithLabel(labeli),random,1);
    int[] ij=sampleFromArray(clustering.getIndicesWithLabel(labelj),random,1);
    neighbor=new AgglomerativeNeighbor(clustering,ClusterUtils.copyAndMergeClusters(clustering,labeli,labelj),ii,new int[]{ij[random.nextInt(ij.length)]});
  }
  totalCount++;
  return new Instance(neighbor,null,null,null);
}",0.986418315871168
20205,"/** 
 * @param clustering True clustering.
 * @param random Source of randomness.
 * @param positiveProportion Proportion of Instances that should be positive examples.
 * @param numberSamples Total number of samples to generate.
 * @return
 */
public NodeClusterSampleIterator(Clustering clustering,Randoms random,double positiveProportion,int numberSamples){
  super(clustering,random,positiveProportion,numberSamples);
}","/** 
 * @param clustering True clustering.
 * @param random Source of randomness.
 * @param positiveProportion Proportion of Instances that should be positive examples.
 * @param numberSamples Total number of samples to generate.
 * @return
 */
public NodeClusterSampleIterator(Clustering clustering,Randoms random,double positiveProportion,int numberSamples){
  super(clustering,random,positiveProportion,numberSamples);
  this.random=random;
  this.positiveProportion=positiveProportion;
  this.numberSamples=numberSamples;
}",0.8905263157894737
20206,"/** 
 * Trains a HMM, <tt>validation, testing, eval</tt> can be null.
 */
public boolean train(InstanceList ilist,InstanceList validation,InstanceList testing,TransducerEvaluator eval){
  assert(ilist.size() > 0);
  if (emissionEstimator == null) {
    emissionEstimator=new Multinomial.LaplaceEstimator[numStates()];
    transitionEstimator=new Multinomial.LaplaceEstimator[numStates()];
    emissionMultinomial=new Multinomial[numStates()];
    transitionMultinomial=new Multinomial[numStates()];
    Alphabet transitionAlphabet=new Alphabet();
    for (int i=0; i < numStates(); i++)     transitionAlphabet.lookupIndex(((State)states.get(i)).getName(),true);
    for (int i=0; i < numStates(); i++) {
      emissionEstimator[i]=new Multinomial.LaplaceEstimator(inputAlphabet);
      transitionEstimator[i]=new Multinomial.LaplaceEstimator(transitionAlphabet);
      emissionMultinomial[i]=new Multinomial(getUniformArray(inputAlphabet.size()),inputAlphabet);
      transitionMultinomial[i]=new Multinomial(getUniformArray(transitionAlphabet.size()),transitionAlphabet);
    }
    initialEstimator=new Multinomial.LaplaceEstimator(transitionAlphabet);
  }
  for (  Instance instance : ilist) {
    FeatureSequence input=(FeatureSequence)instance.getData();
    FeatureSequence output=(FeatureSequence)instance.getTarget();
    new SumLatticeDefault(this,input,output,new Transducer.Incrementor(){
      public void incrementTransition(      Transducer.TransitionIterator ti,      double count){
        State source=(HMM.State)ti.getSourceState();
        Integer inputFeature=(Integer)ti.getInput();
        int index=ti.getIndex();
        emissionEstimator[index].increment(inputAlphabet.lookupIndex(inputFeature.intValue(),false),count);
        transitionEstimator[source.getIndex()].increment(source.destinationNames[index],count);
      }
      public void incrementInitialState(      Transducer.State s,      double count){
      }
      public void incrementFinalState(      Transducer.State s,      double count){
      }
    }
);
  }
  initialMultinomial=initialEstimator.estimate();
  for (int i=0; i < numStates(); i++) {
    emissionMultinomial[i]=emissionEstimator[i].estimate();
    transitionMultinomial[i]=transitionEstimator[i].estimate();
    getState(i).setInitialWeight(initialMultinomial.logProbability(getState(i).getName()));
  }
  return true;
}","/** 
 * Trains a HMM, <tt>validation, testing, eval</tt> can be null.
 */
public boolean train(InstanceList ilist,InstanceList validation,InstanceList testing,TransducerEvaluator eval){
  assert(ilist.size() > 0);
  if (emissionEstimator == null) {
    emissionEstimator=new Multinomial.LaplaceEstimator[numStates()];
    transitionEstimator=new Multinomial.LaplaceEstimator[numStates()];
    emissionMultinomial=new Multinomial[numStates()];
    transitionMultinomial=new Multinomial[numStates()];
    Alphabet transitionAlphabet=new Alphabet();
    for (int i=0; i < numStates(); i++)     transitionAlphabet.lookupIndex(((State)states.get(i)).getName(),true);
    for (int i=0; i < numStates(); i++) {
      emissionEstimator[i]=new Multinomial.LaplaceEstimator(inputAlphabet);
      transitionEstimator[i]=new Multinomial.LaplaceEstimator(transitionAlphabet);
      emissionMultinomial[i]=new Multinomial(getUniformArray(inputAlphabet.size()),inputAlphabet);
      transitionMultinomial[i]=new Multinomial(getUniformArray(transitionAlphabet.size()),transitionAlphabet);
    }
    initialEstimator=new Multinomial.LaplaceEstimator(transitionAlphabet);
  }
  for (  Instance instance : ilist) {
    FeatureSequence input=(FeatureSequence)instance.getData();
    FeatureSequence output=(FeatureSequence)instance.getTarget();
    new SumLatticeDefault(this,input,output,new Transducer.Incrementor(){
      public void incrementTransition(      Transducer.TransitionIterator ti,      double count){
        State source=(HMM.State)ti.getSourceState();
        Integer inputFeature=(Integer)ti.getInput();
        int index=ti.getIndex();
        emissionEstimator[index].increment(inputFeature.intValue(),count);
        transitionEstimator[source.getIndex()].increment(source.destinationNames[index],count);
      }
      public void incrementInitialState(      Transducer.State s,      double count){
      }
      public void incrementFinalState(      Transducer.State s,      double count){
      }
    }
);
  }
  initialMultinomial=initialEstimator.estimate();
  for (int i=0; i < numStates(); i++) {
    emissionMultinomial[i]=emissionEstimator[i].estimate();
    transitionMultinomial[i]=transitionEstimator[i].estimate();
    getState(i).setInitialWeight(initialMultinomial.logProbability(getState(i).getName()));
  }
  return true;
}",0.9929980903882876
20207,"public void incrementTransition(Transducer.TransitionIterator ti,double count){
  State source=(HMM.State)ti.getSourceState();
  Integer inputFeature=(Integer)ti.getInput();
  int index=ti.getIndex();
  emissionEstimator[index].increment(inputAlphabet.lookupIndex(inputFeature.intValue(),false),count);
  transitionEstimator[source.getIndex()].increment(source.destinationNames[index],count);
}","public void incrementTransition(Transducer.TransitionIterator ti,double count){
  State source=(HMM.State)ti.getSourceState();
  Integer inputFeature=(Integer)ti.getInput();
  int index=ti.getIndex();
  emissionEstimator[index].increment(inputFeature.intValue(),count);
  transitionEstimator[source.getIndex()].increment(source.destinationNames[index],count);
}",0.913907284768212
20208,"private void normalizeCosts(){
  sum=Transducer.IMPOSSIBLE_WEIGHT;
  for (int i=0; i < weights.length; i++)   sum=sumLogProb(sum,weights[i]);
  assert(!Double.isNaN(sum));
  if (!Double.isInfinite(sum)) {
    for (int i=0; i < weights.length; i++)     weights[i]=sum;
  }
}","private void normalizeCosts(){
  sum=Transducer.IMPOSSIBLE_WEIGHT;
  for (int i=0; i < weights.length; i++)   sum=sumLogProb(sum,weights[i]);
  assert(!Double.isNaN(sum));
  if (!Double.isInfinite(sum)) {
    for (int i=0; i < weights.length; i++)     weights[i]-=sum;
  }
}",0.9981718464351006
20209,"public static void main(String[] args) throws IOException {
  InstanceList training=InstanceList.load(new File(args[0]));
  int numTopics=args.length > 1 ? Integer.parseInt(args[1]) : 200;
  InstanceList testing=args.length > 2 ? InstanceList.load(new File(args[2])) : null;
  LDAHyper lda=new LDAHyper(numTopics,50.0,0.01);
  lda.addInstances(training);
  lda.estimate();
}","public static void main(String[] args) throws IOException {
  InstanceList training=InstanceList.load(new File(args[0]));
  int numTopics=args.length > 1 ? Integer.parseInt(args[1]) : 200;
  InstanceList testing=args.length > 2 ? InstanceList.load(new File(args[2])) : null;
  LDAHyper lda=new LDAHyper(numTopics,50.0,0.01);
  lda.printLogLikelihood=true;
  lda.setTopicDisplay(50,7);
  lda.addInstances(training);
  lda.estimate();
}",0.9257425742574258
20210,"public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        nonZeroTypeTopics++;
        logLikelihood+=Dirichlet.logGammaStirling(beta + typeTopicCounts[type].get(topic));
      }
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTopics) + tokensPerTopic[topic]);
  }
  logLikelihood+=(Dirichlet.logGammaStirling(beta * numTopics)) - (Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics);
  return logLikelihood;
}","public double modelLogLikelihood(){
  double logLikelihood=0.0;
  int nonZeroTopics;
  int[] topicCounts=new int[numTopics];
  double[] topicLogGammas=new double[numTopics];
  int[] docTopics;
  for (int topic=0; topic < numTopics; topic++) {
    topicLogGammas[topic]=Dirichlet.logGammaStirling(alpha[topic]);
  }
  for (int doc=0; doc < data.size(); doc++) {
    LabelSequence topicSequence=(LabelSequence)data.get(doc).topicSequence;
    docTopics=topicSequence.getFeatures();
    for (int token=0; token < docTopics.length; token++) {
      topicCounts[docTopics[token]]++;
    }
    for (int topic=0; topic < numTopics; topic++) {
      if (topicCounts[topic] > 0) {
        logLikelihood+=(Dirichlet.logGammaStirling(alpha[topic] + topicCounts[topic]) - topicLogGammas[topic]);
      }
    }
    logLikelihood-=Dirichlet.logGammaStirling(alphaSum + docTopics.length);
    Arrays.fill(topicCounts,0);
  }
  logLikelihood+=data.size() * Dirichlet.logGammaStirling(alphaSum);
  int nonZeroTypeTopics=0;
  for (int type=0; type < numTypes; type++) {
    int[] usedTopics=typeTopicCounts[type].keys();
    for (    int topic : usedTopics) {
      int count=typeTopicCounts[type].get(topic);
      if (count > 0) {
        nonZeroTypeTopics++;
        logLikelihood+=Dirichlet.logGammaStirling(beta + count);
      }
    }
  }
  for (int topic=0; topic < numTopics; topic++) {
    logLikelihood-=Dirichlet.logGammaStirling((beta * numTopics) + tokensPerTopic[topic]);
  }
  logLikelihood+=(Dirichlet.logGammaStirling(beta * numTopics)) - (Dirichlet.logGammaStirling(beta) * nonZeroTypeTopics);
  return logLikelihood;
}",0.7134796238244514
20211,"public void estimate(int iterationsThisRound) throws IOException {
  long startTime=System.currentTimeMillis();
  int maxIteration=iterationsSoFar + iterationsThisRound;
  for (; iterationsSoFar <= maxIteration; iterationsSoFar++) {
    long iterationStart=System.currentTimeMillis();
    if (showTopicsInterval != 0 && iterationsSoFar != 0 && iterationsSoFar % showTopicsInterval == 0) {
      System.out.println();
      printTopWords(System.out,wordsPerTopic,false);
    }
    if (saveStateInterval != 0 && iterationsSoFar % saveStateInterval == 0) {
      this.printState(new File(stateFilename + '.' + iterationsSoFar));
    }
    if (iterationsSoFar > burninPeriod && optimizeInterval != 0 && iterationsSoFar % optimizeInterval == 0) {
      alphaSum=Dirichlet.learnParameters(alpha,topicDocCounts,docLengthCounts);
      smoothingOnlyMass=0.0;
      for (int topic=0; topic < numTopics; topic++) {
        smoothingOnlyMass+=alpha[topic] * beta / (tokensPerTopic[topic] + betaSum);
        cachedCoefficients[topic]=alpha[topic] / (tokensPerTopic[topic] + betaSum);
      }
      clearHistograms();
    }
    topicTermCount=betaTopicCount=smoothingOnlyCount=0;
    int numDocs=data.size();
    for (int di=0; di < numDocs; di++) {
      FeatureSequence tokenSequence=(FeatureSequence)data.get(di).instance.getData();
      LabelSequence topicSequence=(LabelSequence)data.get(di).topicSequence;
      sampleTopicsForOneDoc(tokenSequence,topicSequence,iterationsSoFar >= burninPeriod && iterationsSoFar % saveSampleInterval == 0,true);
    }
    System.out.print((System.currentTimeMillis() - iterationStart) / 1000 + ""String_Node_Str"");
    if (iterationsSoFar % 10 == 0) {
      System.out.println(""String_Node_Str"" + iterationsSoFar + ""String_Node_Str"");
      if (printLogLikelihood)       System.out.println(modelLogLikelihood());
    }
    System.out.flush();
  }
  long seconds=Math.round((System.currentTimeMillis() - startTime) / 1000.0);
  long minutes=seconds / 60;
  seconds%=60;
  long hours=minutes / 60;
  minutes%=60;
  long days=hours / 24;
  hours%=24;
  System.out.print(""String_Node_Str"");
  if (days != 0) {
    System.out.print(days);
    System.out.print(""String_Node_Str"");
  }
  if (hours != 0) {
    System.out.print(hours);
    System.out.print(""String_Node_Str"");
  }
  if (minutes != 0) {
    System.out.print(minutes);
    System.out.print(""String_Node_Str"");
  }
  System.out.print(seconds);
  System.out.println(""String_Node_Str"");
}","public void estimate(int iterationsThisRound) throws IOException {
  long startTime=System.currentTimeMillis();
  int maxIteration=iterationsSoFar + iterationsThisRound;
  for (; iterationsSoFar <= maxIteration; iterationsSoFar++) {
    long iterationStart=System.currentTimeMillis();
    if (showTopicsInterval != 0 && iterationsSoFar != 0 && iterationsSoFar % showTopicsInterval == 0) {
      System.out.println();
      printTopWords(System.out,wordsPerTopic,false);
    }
    if (saveStateInterval != 0 && iterationsSoFar % saveStateInterval == 0) {
      this.printState(new File(stateFilename + '.' + iterationsSoFar));
    }
    if (iterationsSoFar > burninPeriod && optimizeInterval != 0 && iterationsSoFar % optimizeInterval == 0) {
      alphaSum=Dirichlet.learnParameters(alpha,topicDocCounts,docLengthCounts);
      smoothingOnlyMass=0.0;
      for (int topic=0; topic < numTopics; topic++) {
        smoothingOnlyMass+=alpha[topic] * beta / (tokensPerTopic[topic] + betaSum);
        cachedCoefficients[topic]=alpha[topic] / (tokensPerTopic[topic] + betaSum);
      }
      clearHistograms();
    }
    topicTermCount=betaTopicCount=smoothingOnlyCount=0;
    int numDocs=data.size();
    for (int di=0; di < numDocs; di++) {
      FeatureSequence tokenSequence=(FeatureSequence)data.get(di).instance.getData();
      LabelSequence topicSequence=(LabelSequence)data.get(di).topicSequence;
      sampleTopicsForOneDoc(tokenSequence,topicSequence,iterationsSoFar >= burninPeriod && iterationsSoFar % saveSampleInterval == 0,true);
    }
    long elapsedMillis=System.currentTimeMillis() - iterationStart;
    if (elapsedMillis < 1000) {
      System.out.print(elapsedMillis + ""String_Node_Str"");
    }
 else {
      System.out.print((elapsedMillis / 1000) + ""String_Node_Str"");
    }
    if (iterationsSoFar % 10 == 0) {
      System.out.println(""String_Node_Str"" + iterationsSoFar + ""String_Node_Str"");
      if (printLogLikelihood)       System.out.println(modelLogLikelihood());
    }
    System.out.flush();
  }
  long seconds=Math.round((System.currentTimeMillis() - startTime) / 1000.0);
  long minutes=seconds / 60;
  seconds%=60;
  long hours=minutes / 60;
  minutes%=60;
  long days=hours / 24;
  hours%=24;
  System.out.print(""String_Node_Str"");
  if (days != 0) {
    System.out.print(days);
    System.out.print(""String_Node_Str"");
  }
  if (hours != 0) {
    System.out.print(hours);
    System.out.print(""String_Node_Str"");
  }
  if (minutes != 0) {
    System.out.print(minutes);
    System.out.print(""String_Node_Str"");
  }
  System.out.print(seconds);
  System.out.println(""String_Node_Str"");
}",0.7727362011392653
20212,"public int getIteration(){
  if (ome == null)   return 0;
 else   return opt.getIteration();
}","public int getIteration(){
  if (ome == null)   return 0;
 else   return Integer.MAX_VALUE;
}",0.8556149732620321
20213,"public MaxEnt train(InstanceList trainingSet,int numIterations){
  logger.fine(""String_Node_Str"" + trainingSet.size());
  boolean converged;
  getOptimizer(trainingSet);
  for (int i=0; i < numIterations; i++) {
    try {
      converged=opt.optimize(1);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      logger.info(""String_Node_Str"");
      converged=true;
    }
    if (converged)     break;
  }
  if (numIterations == Integer.MAX_VALUE) {
    opt.reset();
    try {
      opt.optimize();
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      logger.info(""String_Node_Str"");
    }
  }
  progressLogger.info(""String_Node_Str"");
  return ome.getClassifier();
}","public MaxEnt train(InstanceList trainingSet,int numIterations){
  logger.fine(""String_Node_Str"" + trainingSet.size());
  boolean converged;
  getOptimizer(trainingSet);
  for (int i=0; i < numIterations; i++) {
    try {
      converged=opt.optimize(1);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      logger.info(""String_Node_Str"");
      converged=true;
    }
    if (converged)     break;
  }
  if (numIterations == Integer.MAX_VALUE) {
    opt=null;
    getOptimizer();
    try {
      opt.optimize();
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      logger.info(""String_Node_Str"");
    }
  }
  progressLogger.info(""String_Node_Str"");
  return ome.getClassifier();
}",0.9800687285223368
20214,"public void postParsing(CommandOption.List list){
  assert(this.value instanceof ClassifierTrainer);
  classifierTrainers.add(this.value);
}","public void postParsing(CommandOption.List list){
  assert(this.value instanceof ClassifierTrainer);
  classifierTrainers.add((ClassifierTrainer)this.value);
}",0.9364548494983278
20215,"public static void main(String[] args) throws bsh.EvalError, java.io.IOException {
  CommandOption.setSummary(Vectors2Classify.class,""String_Node_Str"");
  CommandOption.process(Vectors2Classify.class,args);
  if (!trainerConstructor.wasInvoked()) {
    classifierTrainers.add(new NaiveBayesTrainer());
  }
  if (!report.wasInvoked()) {
    report.postParsing(null);
  }
  int verbosity=verbosityOption.value;
  Logger rootLogger=((MalletLogger)progressLogger).getRootLogger();
  if (verbosityOption.wasInvoked()) {
    rootLogger.setLevel(MalletLogger.LoggingLevels[verbosity]);
  }
  if (noOverwriteProgressMessagesOption.value == false) {
    Handler[] handlers=rootLogger.getHandlers();
    for (int i=0; i < handlers.length; i++) {
      if (handlers[i] instanceof ConsoleHandler) {
        handlers[i].setFormatter(new ProgressMessageLogFormatter());
      }
    }
  }
  boolean separateIlists=testFile.wasInvoked() || trainingFile.wasInvoked() || validationFile.wasInvoked();
  InstanceList ilist=null;
  InstanceList testFileIlist=null;
  InstanceList trainingFileIlist=null;
  InstanceList validationFileIlist=null;
  if (!separateIlists) {
    ilist=InstanceList.load(new File(inputFile.value));
  }
 else {
    trainingFileIlist=InstanceList.load(new File(trainingFile.value));
    logger.info(""String_Node_Str"" + trainingFile.value);
    if (testFile.wasInvoked()) {
      testFileIlist=InstanceList.load(new File(testFile.value));
      logger.info(""String_Node_Str"" + testFile.value);
    }
    if (validationFile.wasInvoked()) {
      validationFileIlist=InstanceList.load(new File(validationFile.value));
      logger.info(""String_Node_Str"" + validationFile.value);
    }
  }
  int numTrials=numTrialsOption.value;
  Random r=randomSeedOption.wasInvoked() ? new Random(randomSeedOption.value) : new Random();
  ClassifierTrainer[] trainers=new ClassifierTrainer[classifierTrainers.size()];
  for (int i=0; i < classifierTrainers.size(); i++) {
    trainers[i]=(ClassifierTrainer)classifierTrainers.get(i);
    logger.fine(""String_Node_Str"" + trainers[i].toString());
  }
  double trainAccuracy[][]=new double[trainers.length][numTrials];
  double testAccuracy[][]=new double[trainers.length][numTrials];
  double validationAccuracy[][]=new double[trainers.length][numTrials];
  String trainConfusionMatrix[][]=new String[trainers.length][numTrials];
  String testConfusionMatrix[][]=new String[trainers.length][numTrials];
  String validationConfusionMatrix[][]=new String[trainers.length][numTrials];
  double t=trainingProportionOption.value;
  double v=validationProportionOption.value;
  if (!separateIlists) {
    logger.info(""String_Node_Str"" + t);
    logger.info(""String_Node_Str"" + unlabeledProportionOption.value);
    logger.info(""String_Node_Str"" + v);
    logger.info(""String_Node_Str"" + (1 - v - t));
  }
  for (int trialIndex=0; trialIndex < numTrials; trialIndex++) {
    System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str"");
    InstanceList[] ilists;
    BitSet unlabeledIndices=null;
    if (!separateIlists) {
      ilists=ilist.split(r,new double[]{t,1 - t - v,v});
    }
 else {
      ilists=new InstanceList[3];
      ilists[0]=trainingFileIlist;
      ilists[1]=testFileIlist;
      ilists[2]=testFileIlist;
    }
    if (unlabeledProportionOption.value > 0)     unlabeledIndices=new cc.mallet.util.Randoms(r.nextInt()).nextBitSet(ilists[0].size(),unlabeledProportionOption.value);
    long time[]=new long[trainers.length];
    for (int c=0; c < trainers.length; c++) {
      time[c]=System.currentTimeMillis();
      System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ ilists[0].size()+ ""String_Node_Str"");
      if (unlabeledProportionOption.value > 0)       ilists[0].hideSomeLabels(unlabeledIndices);
      trainers[c].setValidationInstances(ilists[2]);
      Classifier classifier=trainers[c].train(ilists[0]);
      if (unlabeledProportionOption.value > 0)       ilists[0].unhideAllLabels();
      System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
      time[c]=System.currentTimeMillis() - time[c];
      Trial trainTrial=new Trial(classifier,ilists[0]);
      Trial testTrial=new Trial(classifier,ilists[1]);
      Trial validationTrial=new Trial(classifier,ilists[2]);
      if (ilists[0].size() > 0)       trainConfusionMatrix[c][trialIndex]=new ConfusionMatrix(trainTrial).toString();
      if (ilists[1].size() > 0)       testConfusionMatrix[c][trialIndex]=new ConfusionMatrix(testTrial).toString();
      if (ilists[2].size() > 0)       validationConfusionMatrix[c][trialIndex]=new ConfusionMatrix(validationTrial).toString();
      trainAccuracy[c][trialIndex]=trainTrial.getAccuracy();
      testAccuracy[c][trialIndex]=testTrial.getAccuracy();
      validationAccuracy[c][trialIndex]=validationTrial.getAccuracy();
      if (outputFile.wasInvoked()) {
        String filename=outputFile.value;
        if (trainers.length > 1)         filename=filename + trainers[c].toString();
        if (numTrials > 1)         filename=filename + ""String_Node_Str"" + trialIndex;
        try {
          ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(filename));
          oos.writeObject(classifier);
          oos.close();
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new IllegalArgumentException(""String_Node_Str"" + filename);
        }
      }
      if (ReportOptions[ReportOption.train][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(trainTrial);
      }
      if (ReportOptions[ReportOption.test][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(testTrial);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(validationTrial);
      }
      if (ReportOptions[ReportOption.train][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[0].size() > 0)         System.out.println(trainConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.train][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ trainAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.train][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.train][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ trainTrial.getF1(label));
      }
      if (ReportOptions[ReportOption.validation][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[2].size() > 0)         System.out.println(validationConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ validationAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.validation][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ validationTrial.getF1(label));
      }
      if (ReportOptions[ReportOption.test][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[1].size() > 0)         System.out.println(testConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.test][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ testAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.test][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.test][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ testTrial.getF1(label));
      }
    }
  }
  for (int c=0; c < trainers.length; c++) {
    System.out.println(""String_Node_Str"" + trainers[c].toString());
    if (ReportOptions[ReportOption.train][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(trainAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(trainAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(trainAccuracy[c]));
    if (ReportOptions[ReportOption.validation][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(validationAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(validationAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(validationAccuracy[c]));
    if (ReportOptions[ReportOption.test][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(testAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(testAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(testAccuracy[c]));
  }
}","public static void main(String[] args) throws bsh.EvalError, java.io.IOException {
  CommandOption.setSummary(Vectors2Classify.class,""String_Node_Str"");
  CommandOption.process(Vectors2Classify.class,args);
  if (!trainerConstructor.wasInvoked()) {
    classifierTrainers.add(new NaiveBayesTrainer());
  }
  if (!report.wasInvoked()) {
    report.postParsing(null);
  }
  int verbosity=verbosityOption.value;
  Logger rootLogger=((MalletLogger)progressLogger).getRootLogger();
  if (verbosityOption.wasInvoked()) {
    rootLogger.setLevel(MalletLogger.LoggingLevels[verbosity]);
  }
  if (noOverwriteProgressMessagesOption.value == false) {
    Handler[] handlers=rootLogger.getHandlers();
    for (int i=0; i < handlers.length; i++) {
      if (handlers[i] instanceof ConsoleHandler) {
        handlers[i].setFormatter(new ProgressMessageLogFormatter());
      }
    }
  }
  boolean separateIlists=testFile.wasInvoked() || trainingFile.wasInvoked() || validationFile.wasInvoked();
  InstanceList ilist=null;
  InstanceList testFileIlist=null;
  InstanceList trainingFileIlist=null;
  InstanceList validationFileIlist=null;
  if (!separateIlists) {
    ilist=InstanceList.load(new File(inputFile.value));
  }
 else {
    trainingFileIlist=InstanceList.load(new File(trainingFile.value));
    logger.info(""String_Node_Str"" + trainingFile.value);
    if (testFile.wasInvoked()) {
      testFileIlist=InstanceList.load(new File(testFile.value));
      logger.info(""String_Node_Str"" + testFile.value);
    }
    if (validationFile.wasInvoked()) {
      validationFileIlist=InstanceList.load(new File(validationFile.value));
      logger.info(""String_Node_Str"" + validationFile.value);
    }
  }
  int numTrials=numTrialsOption.value;
  Random r=randomSeedOption.wasInvoked() ? new Random(randomSeedOption.value) : new Random();
  ClassifierTrainer[] trainers=new ClassifierTrainer[classifierTrainers.size()];
  for (int i=0; i < classifierTrainers.size(); i++) {
    trainers[i]=classifierTrainers.get(i);
    logger.fine(""String_Node_Str"" + trainers[i].toString());
  }
  double trainAccuracy[][]=new double[trainers.length][numTrials];
  double testAccuracy[][]=new double[trainers.length][numTrials];
  double validationAccuracy[][]=new double[trainers.length][numTrials];
  String trainConfusionMatrix[][]=new String[trainers.length][numTrials];
  String testConfusionMatrix[][]=new String[trainers.length][numTrials];
  String validationConfusionMatrix[][]=new String[trainers.length][numTrials];
  double t=trainingProportionOption.value;
  double v=validationProportionOption.value;
  if (!separateIlists) {
    logger.info(""String_Node_Str"" + t);
    logger.info(""String_Node_Str"" + unlabeledProportionOption.value);
    logger.info(""String_Node_Str"" + v);
    logger.info(""String_Node_Str"" + (1 - v - t));
  }
  for (int trialIndex=0; trialIndex < numTrials; trialIndex++) {
    System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str"");
    InstanceList[] ilists;
    BitSet unlabeledIndices=null;
    if (!separateIlists) {
      ilists=ilist.split(r,new double[]{t,1 - t - v,v});
    }
 else {
      ilists=new InstanceList[3];
      ilists[0]=trainingFileIlist;
      ilists[1]=testFileIlist;
      ilists[2]=validationFileIlist;
    }
    if (unlabeledProportionOption.value > 0)     unlabeledIndices=new cc.mallet.util.Randoms(r.nextInt()).nextBitSet(ilists[0].size(),unlabeledProportionOption.value);
    long time[]=new long[trainers.length];
    for (int c=0; c < trainers.length; c++) {
      time[c]=System.currentTimeMillis();
      System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ ilists[0].size()+ ""String_Node_Str"");
      if (unlabeledProportionOption.value > 0)       ilists[0].hideSomeLabels(unlabeledIndices);
      trainers[c].setValidationInstances(ilists[2]);
      Classifier classifier=trainers[c].train(ilists[0]);
      if (unlabeledProportionOption.value > 0)       ilists[0].unhideAllLabels();
      System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
      time[c]=System.currentTimeMillis() - time[c];
      Trial trainTrial=new Trial(classifier,ilists[0]);
      Trial testTrial=new Trial(classifier,ilists[1]);
      Trial validationTrial=new Trial(classifier,ilists[2]);
      if (ilists[0].size() > 0)       trainConfusionMatrix[c][trialIndex]=new ConfusionMatrix(trainTrial).toString();
      if (ilists[1].size() > 0)       testConfusionMatrix[c][trialIndex]=new ConfusionMatrix(testTrial).toString();
      if (ilists[2].size() > 0)       validationConfusionMatrix[c][trialIndex]=new ConfusionMatrix(validationTrial).toString();
      trainAccuracy[c][trialIndex]=trainTrial.getAccuracy();
      testAccuracy[c][trialIndex]=testTrial.getAccuracy();
      validationAccuracy[c][trialIndex]=validationTrial.getAccuracy();
      if (outputFile.wasInvoked()) {
        String filename=outputFile.value;
        if (trainers.length > 1)         filename=filename + trainers[c].toString();
        if (numTrials > 1)         filename=filename + ""String_Node_Str"" + trialIndex;
        try {
          ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(filename));
          oos.writeObject(classifier);
          oos.close();
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new IllegalArgumentException(""String_Node_Str"" + filename);
        }
      }
      if (ReportOptions[ReportOption.train][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(trainTrial);
      }
      if (ReportOptions[ReportOption.test][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(testTrial);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.raw]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString());
        System.out.println(""String_Node_Str"");
        printTrialClassification(validationTrial);
      }
      if (ReportOptions[ReportOption.train][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[0].size() > 0)         System.out.println(trainConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.train][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ trainAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.train][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.train][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ trainTrial.getF1(label));
      }
      if (ReportOptions[ReportOption.validation][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[2].size() > 0)         System.out.println(validationConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ validationAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.validation][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.validation][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ validationTrial.getF1(label));
      }
      if (ReportOptions[ReportOption.test][ReportOption.confusion]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str"");
        if (ilists[1].size() > 0)         System.out.println(testConfusionMatrix[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.test][ReportOption.accuracy]) {
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ testAccuracy[c][trialIndex]);
      }
      if (ReportOptions[ReportOption.test][ReportOption.f1]) {
        String label=ReportOptionArgs[ReportOption.test][ReportOption.f1];
        System.out.println(""String_Node_Str"" + trialIndex + ""String_Node_Str""+ trainers[c].toString()+ ""String_Node_Str""+ label+ ""String_Node_Str""+ testTrial.getF1(label));
      }
    }
  }
  for (int c=0; c < trainers.length; c++) {
    System.out.println(""String_Node_Str"" + trainers[c].toString());
    if (ReportOptions[ReportOption.train][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(trainAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(trainAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(trainAccuracy[c]));
    if (ReportOptions[ReportOption.validation][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(validationAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(validationAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(validationAccuracy[c]));
    if (ReportOptions[ReportOption.test][ReportOption.accuracy])     System.out.println(""String_Node_Str"" + MatrixOps.mean(testAccuracy[c]) + ""String_Node_Str""+ MatrixOps.stddev(testAccuracy[c])+ ""String_Node_Str""+ MatrixOps.stderr(testAccuracy[c]));
  }
}",0.9983176140708642
20216,"public void estimate() throws IOException {
  long startTime=System.currentTimeMillis();
  WorkerRunnable[] runnables=new WorkerRunnable[numThreads];
  int docsPerThread=data.size() / numThreads;
  int offset=0;
  for (int thread=0; thread < numThreads; thread++) {
    int[] runnableTotals=new int[numTopics];
    System.arraycopy(tokensPerTopic,0,runnableTotals,0,numTopics);
    int[][] runnableCounts=new int[numTypes][];
    for (int type=0; type < numTypes; type++) {
      int[] counts=new int[typeTopicCounts[type].length];
      System.arraycopy(typeTopicCounts[type],0,counts,0,counts.length);
      runnableCounts[type]=counts;
    }
    runnables[thread]=new WorkerRunnable(numTopics,alpha,alphaSum,beta,new Randoms(),data,runnableCounts,runnableTotals,offset,docsPerThread);
    runnables[thread].initializeAlphaStatistics(docLengthCounts.length);
    offset+=docsPerThread;
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  for (int iteration=1; iteration <= numIterations; iteration++) {
    long iterationStart=System.currentTimeMillis();
    if (showTopicsInterval != 0 && iteration != 0 && iteration % showTopicsInterval == 0) {
      System.out.println();
      printTopWords(System.out,wordsPerTopic,false);
    }
    if (saveStateInterval != 0 && iteration % saveStateInterval == 0) {
      this.printState(new File(stateFilename + '.' + iteration));
    }
    for (int thread=0; thread < numThreads; thread++) {
      if (iteration > burninPeriod && optimizeInterval != 0 && iteration % saveSampleInterval == 0) {
        runnables[thread].collectAlphaStatistics();
      }
      executor.submit(runnables[thread]);
    }
    try {
      Thread.sleep(20);
    }
 catch (    InterruptedException e) {
    }
    boolean finished=false;
    while (!finished) {
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
      finished=true;
      for (int thread=0; thread < numThreads; thread++) {
        finished=finished && runnables[thread].isFinished;
      }
    }
    if (iteration > burninPeriod && optimizeInterval != 0 && iteration % optimizeInterval == 0) {
      optimizeAlpha(runnables);
      System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    }
    System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    sumTypeTopicCounts(runnables);
    System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    for (int thread=0; thread < numThreads; thread++) {
      int[] runnableTotals=runnables[thread].getTokensPerTopic();
      System.arraycopy(tokensPerTopic,0,runnableTotals,0,numTopics);
      int[][] runnableCounts=runnables[thread].getTypeTopicCounts();
      for (int type=0; type < numTypes; type++) {
        int[] targetCounts=runnableCounts[type];
        int[] sourceCounts=typeTopicCounts[type];
        int index=0;
        while (index < sourceCounts.length) {
          if (sourceCounts[index] != 0) {
            targetCounts[index]=sourceCounts[index];
          }
 else           if (targetCounts[index] != 0) {
            targetCounts[index]=0;
          }
 else {
            break;
          }
          index++;
        }
      }
    }
    long elapsedMillis=System.currentTimeMillis() - iterationStart;
    if (elapsedMillis < 1000) {
      System.out.print(elapsedMillis + ""String_Node_Str"");
    }
 else {
      System.out.print((elapsedMillis / 1000) + ""String_Node_Str"");
    }
    if (iteration % 10 == 0) {
      System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str"");
      if (printLogLikelihood)       System.out.println(modelLogLikelihood());
    }
    System.out.flush();
  }
  executor.shutdownNow();
  long seconds=Math.round((System.currentTimeMillis() - startTime) / 1000.0);
  long minutes=seconds / 60;
  seconds%=60;
  long hours=minutes / 60;
  minutes%=60;
  long days=hours / 24;
  hours%=24;
  System.out.print(""String_Node_Str"");
  if (days != 0) {
    System.out.print(days);
    System.out.print(""String_Node_Str"");
  }
  if (hours != 0) {
    System.out.print(hours);
    System.out.print(""String_Node_Str"");
  }
  if (minutes != 0) {
    System.out.print(minutes);
    System.out.print(""String_Node_Str"");
  }
  System.out.print(seconds);
  System.out.println(""String_Node_Str"");
}","public void estimate() throws IOException {
  long startTime=System.currentTimeMillis();
  WorkerRunnable[] runnables=new WorkerRunnable[numThreads];
  int docsPerThread=data.size() / numThreads;
  int offset=0;
  for (int thread=0; thread < numThreads; thread++) {
    int[] runnableTotals=new int[numTopics];
    System.arraycopy(tokensPerTopic,0,runnableTotals,0,numTopics);
    int[][] runnableCounts=new int[numTypes][];
    for (int type=0; type < numTypes; type++) {
      int[] counts=new int[typeTopicCounts[type].length];
      System.arraycopy(typeTopicCounts[type],0,counts,0,counts.length);
      runnableCounts[type]=counts;
    }
    if (thread == numThreads - 1) {
      docsPerThread=data.size() - offset;
    }
    runnables[thread]=new WorkerRunnable(numTopics,alpha,alphaSum,beta,new Randoms(),data,runnableCounts,runnableTotals,offset,docsPerThread);
    runnables[thread].initializeAlphaStatistics(docLengthCounts.length);
    offset+=docsPerThread;
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  for (int iteration=1; iteration <= numIterations; iteration++) {
    long iterationStart=System.currentTimeMillis();
    if (showTopicsInterval != 0 && iteration != 0 && iteration % showTopicsInterval == 0) {
      System.out.println();
      printTopWords(System.out,wordsPerTopic,false);
    }
    if (saveStateInterval != 0 && iteration % saveStateInterval == 0) {
      this.printState(new File(stateFilename + '.' + iteration));
    }
    for (int thread=0; thread < numThreads; thread++) {
      if (iteration > burninPeriod && optimizeInterval != 0 && iteration % saveSampleInterval == 0) {
        runnables[thread].collectAlphaStatistics();
      }
      executor.submit(runnables[thread]);
    }
    try {
      Thread.sleep(20);
    }
 catch (    InterruptedException e) {
    }
    boolean finished=false;
    while (!finished) {
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
      finished=true;
      for (int thread=0; thread < numThreads; thread++) {
        finished=finished && runnables[thread].isFinished;
      }
    }
    if (iteration > burninPeriod && optimizeInterval != 0 && iteration % optimizeInterval == 0) {
      optimizeAlpha(runnables);
      System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    }
    System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    sumTypeTopicCounts(runnables);
    System.out.print(""String_Node_Str"" + (System.currentTimeMillis() - iterationStart) + ""String_Node_Str"");
    for (int thread=0; thread < numThreads; thread++) {
      int[] runnableTotals=runnables[thread].getTokensPerTopic();
      System.arraycopy(tokensPerTopic,0,runnableTotals,0,numTopics);
      int[][] runnableCounts=runnables[thread].getTypeTopicCounts();
      for (int type=0; type < numTypes; type++) {
        int[] targetCounts=runnableCounts[type];
        int[] sourceCounts=typeTopicCounts[type];
        int index=0;
        while (index < sourceCounts.length) {
          if (sourceCounts[index] != 0) {
            targetCounts[index]=sourceCounts[index];
          }
 else           if (targetCounts[index] != 0) {
            targetCounts[index]=0;
          }
 else {
            break;
          }
          index++;
        }
      }
    }
    long elapsedMillis=System.currentTimeMillis() - iterationStart;
    if (elapsedMillis < 1000) {
      System.out.print(elapsedMillis + ""String_Node_Str"");
    }
 else {
      System.out.print((elapsedMillis / 1000) + ""String_Node_Str"");
    }
    if (iteration % 10 == 0) {
      System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str"");
      if (printLogLikelihood)       System.out.println(modelLogLikelihood());
    }
    System.out.flush();
  }
  executor.shutdownNow();
  long seconds=Math.round((System.currentTimeMillis() - startTime) / 1000.0);
  long minutes=seconds / 60;
  seconds%=60;
  long hours=minutes / 60;
  minutes%=60;
  long days=hours / 24;
  hours%=24;
  System.out.print(""String_Node_Str"");
  if (days != 0) {
    System.out.print(days);
    System.out.print(""String_Node_Str"");
  }
  if (hours != 0) {
    System.out.print(hours);
    System.out.print(""String_Node_Str"");
  }
  if (minutes != 0) {
    System.out.print(minutes);
    System.out.print(""String_Node_Str"");
  }
  System.out.print(seconds);
  System.out.println(""String_Node_Str"");
}",0.9905426705696916
20217,"public void printState(PrintStream out){
  out.println(""String_Node_Str"");
  for (int di=0; di < data.size(); di++) {
    FeatureSequence tokenSequence=(FeatureSequence)data.get(di).instance.getData();
    LabelSequence topicSequence=(LabelSequence)data.get(di).topicSequence;
    String source=data.get(di).instance.getSource().toString();
    for (int pi=0; pi < topicSequence.getLength(); pi++) {
      int type=tokenSequence.getIndexAtPosition(pi);
      int topic=topicSequence.getIndexAtPosition(pi);
      out.print(di);
      out.print(' ');
      out.print(source);
      out.print(' ');
      out.print(pi);
      out.print(' ');
      out.print(type);
      out.print(' ');
      out.print(alphabet.lookupObject(type));
      out.print(' ');
      out.print(topic);
      out.println();
    }
  }
}","public void printState(PrintStream out){
  out.println(""String_Node_Str"");
  for (int di=0; di < data.size(); di++) {
    FeatureSequence tokenSequence=(FeatureSequence)data.get(di).instance.getData();
    LabelSequence topicSequence=(LabelSequence)data.get(di).topicSequence;
    String source=""String_Node_Str"";
    if (data.get(di).instance.getSource() != null) {
      source=data.get(di).instance.getSource().toString();
    }
    for (int pi=0; pi < topicSequence.getLength(); pi++) {
      int type=tokenSequence.getIndexAtPosition(pi);
      int topic=topicSequence.getIndexAtPosition(pi);
      out.print(di);
      out.print(' ');
      out.print(source);
      out.print(' ');
      out.print(pi);
      out.print(' ');
      out.print(type);
      out.print(' ');
      out.print(alphabet.lookupObject(type));
      out.print(' ');
      out.print(topic);
      out.println();
    }
  }
}",0.9327091866588648
20218,"private void writeObject(ObjectOutputStream out) throws IOException {
  out.writeInt(CURRENT_SERIAL_VERSION);
  out.writeObject(prefix);
}","private void writeObject(ObjectOutputStream out) throws IOException {
  out.writeInt(CURRENT_SERIAL_VERSION);
  out.writeObject(prefix);
  out.writeObject(matchingRegex);
}",0.8903225806451613
20219,"public Instance pipe(Instance carrier){
  TokenSequence ts=(TokenSequence)carrier.getData();
  for (int i=0; i < ts.size(); i++) {
    Token t=ts.get(i);
    if (matchingRegex != null && matchingRegex.matcher(t.getText()).matches())     t.setFeatureValue(prefix == null ? t.getText().intern() : (prefix + t.getText()).intern(),1.0);
  }
  return carrier;
}","public Instance pipe(Instance carrier){
  TokenSequence ts=(TokenSequence)carrier.getData();
  for (int i=0; i < ts.size(); i++) {
    Token t=ts.get(i);
    if (matchingRegex == null || matchingRegex.matcher(t.getText()).matches()) {
      t.setFeatureValue(prefix == null ? t.getText().intern() : (prefix + t.getText()).intern(),1.0);
    }
  }
  return carrier;
}",0.9141274238227148
20220,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  int version=in.readInt();
  prefix=(String)in.readObject();
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  int version=in.readInt();
  prefix=(String)in.readObject();
  if (version > 0)   matchingRegex=(Pattern)in.readObject();
}",0.8346883468834688
20221,"public RankedFeatureVector toRankedFeatureVector(){
  int[] indices=featureCounts.keys();
  double[] values=new double[indices.length];
  return new RankedFeatureVector(alphabet,indices,values);
}","public RankedFeatureVector toRankedFeatureVector(){
  int[] indices=featureCounts.keys();
  double[] values=new double[indices.length];
  for (int i=0; i < indices.length; i++)   values[i]=featureCounts.get(indices[i]);
  return new RankedFeatureVector(alphabet,indices,values);
}",0.8235294117647058
20222,"public FeatureVector toFeatureVector(){
  int[] indices=featureCounts.keys();
  double[] values=new double[indices.length];
  return new FeatureVector(alphabet,indices,values);
}","public FeatureVector toFeatureVector(){
  int[] indices=featureCounts.keys();
  double[] values=new double[indices.length];
  for (int i=0; i < indices.length; i++)   values[i]=featureCounts.get(indices[i]);
  return new FeatureVector(alphabet,indices,values);
}",0.8090909090909091
20223,"public boolean expandGroupWithAnimation(int groupPos){
  int childPos=getPackedPositionChild(getExpandableListPosition(getFirstVisiblePosition()));
  childPos=childPos == -1 ? 0 : childPos;
  adapter.startExpandAnimation(groupPos,childPos);
  return expandGroup(groupPos);
}","public boolean expandGroupWithAnimation(int groupPos){
  if (groupPos + 1 == adapter.getGroupCount()) {
    return expandGroup(groupPos);
  }
  int childPos=getPackedPositionChild(getExpandableListPosition(getFirstVisiblePosition()));
  childPos=childPos == -1 ? 0 : childPos;
  adapter.startExpandAnimation(groupPos,childPos);
  return expandGroup(groupPos);
}",0.862992125984252
20224,"public boolean collapseGroupWithAnimation(int groupPos){
  int childPos=getPackedPositionChild(getExpandableListPosition(getFirstVisiblePosition()));
  childPos=childPos == -1 ? 0 : childPos;
  adapter.startCollapseAnimation(groupPos,childPos);
  adapter.notifyDataSetChanged();
  return isGroupExpanded(groupPos);
}","public boolean collapseGroupWithAnimation(int groupPos){
  int groupFlatPos=getFlatListPosition(getPackedPositionForGroup(groupPos));
  if (groupFlatPos != -1) {
    View v=getChildAt(groupFlatPos - getFirstVisiblePosition());
    if (v.getBottom() >= getBottom()) {
      return collapseGroup(groupPos);
    }
  }
  int childPos=getPackedPositionChild(getExpandableListPosition(getFirstVisiblePosition()));
  childPos=childPos == -1 ? 0 : childPos;
  adapter.startCollapseAnimation(groupPos,childPos);
  adapter.notifyDataSetChanged();
  return isGroupExpanded(groupPos);
}",0.7101123595505618
20225,"@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,1,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.9996659986639946
20226,"/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.9932279909706546
20227,"/** 
 * Expands the given group with an animation.
 * @param groupPos The position of the group to expand
 * @return  Returns true if the group was expanded. False if the group wasalready expanded.
 */
public boolean expandGroupWithAnimation(int groupPos){
  int groupFlatPos=getFlatListPosition(getPackedPositionForGroup(groupPos));
  if (groupFlatPos != -1) {
    int childIndex=groupFlatPos - getFirstVisiblePosition();
    if (childIndex < getChildCount()) {
      View v=getChildAt(childIndex);
      if (v.getBottom() >= getBottom()) {
        return expandGroup(groupPos);
      }
    }
  }
  adapter.startExpandAnimation(groupPos,0);
  return expandGroup(groupPos);
}","/** 
 * Expands the given group with an animation.
 * @param groupPos The position of the group to expand
 * @return  Returns true if the group was expanded. False if the group wasalready expanded.
 */
public boolean expandGroupWithAnimation(int groupPos){
  int groupFlatPos=getFlatListPosition(getPackedPositionForGroup(groupPos));
  if (groupFlatPos != -1) {
    int childIndex=groupFlatPos - getFirstVisiblePosition();
    if (childIndex < getChildCount()) {
      View v=getChildAt(childIndex);
      if (v.getBottom() >= getBottom()) {
        adapter.notifyGroupExpanded(groupPos);
        return expandGroup(groupPos);
      }
    }
  }
  adapter.startExpandAnimation(groupPos,0);
  return expandGroup(groupPos);
}",0.9663564781675018
20228,"@Override public void onAnimationEnd(Animation animation){
  stopAnimation(groupPosition);
  listView.collapseGroup(groupPosition);
  notifyDataSetChanged();
  info.dummyHeight=-1;
}","@Override public void onAnimationEnd(Animation animation){
  stopAnimation(groupPosition);
  listView.collapseGroup(groupPosition);
  notifyDataSetChanged();
  info.dummyHeight=-1;
  dummyView.setTag(STATE_IDLE);
}",0.9191919191919192
20229,"/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  final GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new AbsListView.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
          info.dummyHeight=-1;
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  final GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new AbsListView.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    final DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    Object o;
    int state=(o=dummyView.getTag()) == null ? STATE_IDLE : (Integer)o;
    if (info.expanding && state != STATE_EXPANDING) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
          dummyView.setTag(STATE_IDLE);
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
      dummyView.setTag(STATE_EXPANDING);
    }
 else     if (!info.expanding && state != STATE_COLLAPSING) {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
          info.dummyHeight=-1;
          dummyView.setTag(STATE_IDLE);
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
      dummyView.setTag(STATE_COLLAPSING);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.9493918005706564
20230,"@Override public void onAnimationEnd(Animation animation){
  stopAnimation(groupPosition);
  listView.collapseGroup(groupPosition);
  notifyDataSetChanged();
}","@Override public void onAnimationEnd(Animation animation){
  stopAnimation(groupPosition);
  listView.collapseGroup(groupPosition);
  notifyDataSetChanged();
  info.dummyHeight=-1;
}",0.9325513196480938
20231,"/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  final GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
          info.dummyHeight=-1;
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.9941092182773444
20232,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  final int len=views.size();
  for (int i=0; i < len; i++) {
    View v=views.get(i);
    v.layout(left,top,right,bottom);
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  final int len=views.size();
  for (int i=0; i < len; i++) {
    View v=views.get(i);
    v.layout(left,top,left + v.getMeasuredWidth(),top + v.getMeasuredHeight());
  }
}",0.8842832469775475
20233,"/** 
 * Add a view for the DummyView to draw.
 * @param childView View to draw
 */
public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),getHeight());
  views.add(childView);
}","/** 
 * Add a view for the DummyView to draw.
 * @param childView View to draw
 */
public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}",0.9563106796116504
20234,"@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,1,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.985777175753471
20235,"/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}","/** 
 * Override   {@link #getChildView(int,int,boolean,View,ViewGroup)} instead.
 */
@Override public final View getChildView(final int groupPosition,int childPosition,boolean isLastChild,View convertView,final ViewGroup parent){
  GroupInfo info=getGroupInfo(groupPosition);
  if (info.animating) {
    if (convertView == null) {
      convertView=new DummyView(parent.getContext());
      convertView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,0));
    }
    if (childPosition < info.firstChildPosition) {
      convertView.getLayoutParams().height=0;
      return convertView;
    }
    final ExpandableListView listView=(ExpandableListView)parent;
    DummyView dummyView=(DummyView)convertView;
    dummyView.clearViews();
    dummyView.setDivider(listView.getDivider(),parent.getMeasuredWidth(),listView.getDividerHeight());
    final int measureSpecW=MeasureSpec.makeMeasureSpec(parent.getWidth(),MeasureSpec.EXACTLY);
    final int measureSpecH=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int totalHeight=0;
    int clipHeight=parent.getHeight();
    final int len=getRealChildrenCount(groupPosition);
    for (int i=info.firstChildPosition; i < len; i++) {
      View childView=getRealChildView(groupPosition,i,(i == len - 1),null,parent);
      childView.measure(measureSpecW,measureSpecH);
      totalHeight+=childView.getMeasuredHeight();
      if (totalHeight < clipHeight) {
        dummyView.addFakeView(childView);
      }
 else {
        dummyView.addFakeView(childView);
        int averageHeight=totalHeight / (i + 1);
        totalHeight+=(len - i - 1) * averageHeight;
        break;
      }
    }
    if (info.expanding) {
      ExpandAnimation ani=new ExpandAnimation(dummyView,0,totalHeight,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
 else {
      if (info.dummyHeight == -1) {
        info.dummyHeight=totalHeight;
      }
      ExpandAnimation ani=new ExpandAnimation(dummyView,info.dummyHeight,0,info);
      ani.setDuration(this.parent.getAnimationDuration());
      ani.setAnimationListener(new AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          stopAnimation(groupPosition);
          listView.collapseGroup(groupPosition);
          notifyDataSetChanged();
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
        @Override public void onAnimationStart(        Animation animation){
        }
      }
);
      dummyView.startAnimation(ani);
    }
    return convertView;
  }
 else {
    return getRealChildView(groupPosition,childPosition,isLastChild,convertView,parent);
  }
}",0.9932279909706546
20236,"public Capabilities getCapabilities(){
  MutableCapabilities capabilities=(MutableCapabilities)super.getCapabilities();
  capabilities.setCapability(PLATFORM_NAME,ANDROID_PLATFORM);
  return capabilities;
}","/** 
 * Returns capabilities that were provided on instantiation.
 * @return given {@link Capabilities}
 */
public Capabilities getCapabilities(){
  MutableCapabilities capabilities=(MutableCapabilities)super.getCapabilities();
  capabilities.setCapability(PLATFORM_NAME,ANDROID_PLATFORM);
  return capabilities;
}",0.7923076923076923
20237,"public Capabilities getCapabilities(){
  MutableCapabilities capabilities=(MutableCapabilities)super.getCapabilities();
  capabilities.setCapability(PLATFORM_NAME,IOS_PLATFORM);
  return capabilities;
}","/** 
 * Returns capabilities that were provided on instantiation.
 * @return given {@link Capabilities}
 */
public Capabilities getCapabilities(){
  MutableCapabilities capabilities=(MutableCapabilities)super.getCapabilities();
  capabilities.setCapability(PLATFORM_NAME,IOS_PLATFORM);
  return capabilities;
}",0.7890625
20238,"@Test @Ignore public void whenIOSHybridAppIsLaunched(){
  assertTrue(check(serverAppCapabilitiesSupplier,appFileSupplierFunction.apply(webViewApp),(by,aClass) -> {
    new WebDriverWait(driver,30).until(ExpectedConditions.presenceOfElementLocated(id(""String_Node_Str""))).click();
    driver.findElementByAccessibilityId(""String_Node_Str"").click();
    new WebDriverWait(driver,30).until(ExpectedConditions.presenceOfElementLocated(AccessibilityId(""String_Node_Str"")));
    try {
      Thread.sleep(10000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    driver.getContextHandles().forEach((handle) -> {
      if (handle.contains(""String_Node_Str"")) {
        driver.context(handle);
      }
    }
);
    return commonPredicate.test(by,aClass);
  }
,partialLinkText(""String_Node_Str""),IOSElement.class));
}","@Ignore @Test public void whenIOSHybridAppIsLaunched(){
  assertTrue(check(serverAppCapabilitiesSupplier,appFileSupplierFunction.apply(webViewApp),(by,aClass) -> {
    new WebDriverWait(driver,30).until(ExpectedConditions.presenceOfElementLocated(id(""String_Node_Str""))).click();
    driver.findElementByAccessibilityId(""String_Node_Str"").click();
    new WebDriverWait(driver,30).until(ExpectedConditions.presenceOfElementLocated(AccessibilityId(""String_Node_Str"")));
    try {
      Thread.sleep(10000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    driver.getContextHandles().forEach((handle) -> {
      if (handle.contains(""String_Node_Str"")) {
        driver.context(handle);
      }
    }
);
    return commonPredicate.test(by,aClass);
  }
,partialLinkText(""String_Node_Str""),IOSElement.class));
}",0.9928400954653938
20239,"@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  String ipAddress=startAppiumServer();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.IOS_XCUI_TEST);
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}","@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.IOS_XCUI_TEST);
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + startAppiumServer() + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}",0.9672447013487476
20240,"public static String startAppiumServer() throws UnknownHostException {
  service=new AppiumServiceBuilder().usingPort(PORT).build();
  service.start();
  InetAddress inetAddress=InetAddress.getLocalHost();
  return inetAddress.getHostAddress();
}","/** 
 * Starts a local server.
 * @return ip of a local host
 * @throws UnknownHostException when it is impossible to get ip address of a local host
 */
public static String startAppiumServer() throws UnknownHostException {
  service=new AppiumServiceBuilder().usingPort(PORT).build();
  service.start();
  InetAddress inetAddress=InetAddress.getLocalHost();
  return inetAddress.getHostAddress();
}",0.7627906976744186
20241,"@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  String ipAddress=startAppiumServer();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}","@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + startAppiumServer() + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}",0.9649309245483528
20242,"@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  String ipAddress=startAppiumServer();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.IOS_XCUI_TEST);
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}","@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.IOS_XCUI_TEST);
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + startAppiumServer() + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}",0.960919540229885
20243,"@Test @Ignore public void geolocationTest(){
  Location location=new Location(45,45,100);
  try {
    driver.setLocation(location);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","@Ignore @Test public void geolocationTest(){
  Location location=new Location(45,45,100);
  try {
    driver.setLocation(location);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9692307692307692
20244,"@Test @Ignore public void touchIdTest(){
  driver.toggleTouchIDEnrollment(true);
  driver.performTouchID(true);
  driver.performTouchID(false);
  assertEquals(true,true);
}","@Ignore @Test public void touchIdTest(){
  driver.toggleTouchIDEnrollment(true);
  driver.performTouchID(true);
  driver.performTouchID(false);
  assertEquals(true,true);
}",0.9651162790697676
20245,"@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  String ipAddress=startAppiumServer();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}","@BeforeClass public static void beforeClass() throws UnknownHostException, MalformedURLException {
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(new URL(""String_Node_Str"" + startAppiumServer() + ""String_Node_Str""+ PORT+ ""String_Node_Str""),capabilities);
}",0.9649309245483528
20246,"@SuppressWarnings(""String_Node_Str"") public Result createSession(HttpClient client,Command command) throws IOException {
  Capabilities desired=(Capabilities)command.getParameters().get(""String_Node_Str"");
  desired=desired == null ? new ImmutableCapabilities() : desired;
  int threshold=(int)Math.min(Runtime.getRuntime().freeMemory() / 10,Integer.MAX_VALUE);
  FileBackedOutputStream os=new FileBackedOutputStream(threshold);
  try (CountingOutputStream counter=new CountingOutputStream(os);Writer writer=new OutputStreamWriter(counter,UTF_8);NewAppiumSessionPayload payload=NewAppiumSessionPayload.create(desired)){
    payload.writeTo(writer);
    try (InputStream rawIn=os.asByteSource().openBufferedStream();BufferedInputStream contentStream=new BufferedInputStream(rawIn)){
      Method createSessionMethod=this.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",HttpClient.class,InputStream.class,long.class);
      createSessionMethod.setAccessible(true);
      Optional<Result> result=(Optional<Result>)createSessionMethod.invoke(this,client,contentStream,counter.getCount());
      if (result.isPresent()) {
        Result toReturn=result.get();
        System.out.print(format(""String_Node_Str"",toReturn.getDialect()));
        return toReturn;
      }
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      throw new WebDriverException(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",HttpClient.class.getSimpleName(),InputStream.class.getSimpleName(),long.class.getSimpleName()),e);
    }
  }
  finally {
    os.reset();
  }
  throw new SessionNotCreatedException(format(""String_Node_Str"" + ""String_Node_Str"",desired));
}","@SuppressWarnings(""String_Node_Str"") public Result createSession(HttpClient client,Command command) throws IOException {
  Capabilities desiredCapabilities=(Capabilities)command.getParameters().get(""String_Node_Str"");
  Capabilities desired=desiredCapabilities == null ? new ImmutableCapabilities() : desiredCapabilities;
  int threshold=(int)Math.min(Runtime.getRuntime().freeMemory() / 10,Integer.MAX_VALUE);
  FileBackedOutputStream os=new FileBackedOutputStream(threshold);
  try {
    CountingOutputStream counter=new CountingOutputStream(os);
    Writer writer=new OutputStreamWriter(counter,UTF_8);
    NewAppiumSessionPayload payload=NewAppiumSessionPayload.create(desired);
    payload.writeTo(writer);
    try (InputStream rawIn=os.asByteSource().openBufferedStream();BufferedInputStream contentStream=new BufferedInputStream(rawIn)){
      Method createSessionMethod=this.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",HttpClient.class,InputStream.class,long.class);
      createSessionMethod.setAccessible(true);
      Optional<Result> result=(Optional<Result>)createSessionMethod.invoke(this,client,contentStream,counter.getCount());
      return result.map(result1 -> {
        Result toReturn=result.get();
        System.out.print(format(""String_Node_Str"",toReturn.getDialect()));
        return toReturn;
      }
).orElseThrow(() -> new SessionNotCreatedException(format(""String_Node_Str"",desired)));
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      throw new WebDriverException(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",HttpClient.class.getSimpleName(),InputStream.class.getSimpleName(),long.class.getSimpleName()),e);
    }
  }
  finally {
    os.reset();
  }
}",0.912906007473412
20247,"@Override public Response execute(Command command) throws WebDriverException, IOException {
  if (DriverCommand.NEW_SESSION.equals(command.getName())) {
    serviceOptional.ifPresent(driverService -> {
      try {
        driverService.start();
      }
 catch (      IOException e) {
        throw new WebDriverException(e.getMessage(),e);
      }
    }
);
  }
  Response response;
  try {
    if (!NEW_SESSION.equals(command.getName())) {
      response=super.execute(command);
    }
 else {
      response=createSession(command);
    }
  }
 catch (  Throwable t) {
    Throwable rootCause=Throwables.getRootCause(t);
    if (rootCause instanceof ConnectException && rootCause.getMessage().contains(""String_Node_Str"")) {
      throw serviceOptional.map(service -> {
        if (service.isRunning()) {
          return new WebDriverException(""String_Node_Str"",rootCause);
        }
        return new WebDriverException(""String_Node_Str"",rootCause);
      }
).orElseGet((Supplier<WebDriverException>)() -> new WebDriverException(rootCause.getMessage(),rootCause));
    }
    throwIfUnchecked(t);
    throw new WebDriverException(t);
  }
 finally {
    if (DriverCommand.QUIT.equals(command.getName())) {
      serviceOptional.ifPresent(DriverService::stop);
    }
  }
  if (DriverCommand.NEW_SESSION.equals(command.getName()) && getCommandCodec() instanceof W3CHttpCommandCodec) {
    setCommandCodec(new AppiumW3CHttpCommandCodec());
    getAdditionalCommands().forEach(this::defineCommand);
  }
  return response;
}","@Override public Response execute(Command command) throws WebDriverException, IOException {
  if (DriverCommand.NEW_SESSION.equals(command.getName())) {
    serviceOptional.ifPresent(driverService -> {
      try {
        driverService.start();
      }
 catch (      IOException e) {
        throw new WebDriverException(e.getMessage(),e);
      }
    }
);
  }
  Response response;
  try {
    response=NEW_SESSION.equals(command.getName()) ? createSession(command) : super.execute(command);
  }
 catch (  Throwable t) {
    Throwable rootCause=Throwables.getRootCause(t);
    if (rootCause instanceof ConnectException && rootCause.getMessage().contains(""String_Node_Str"")) {
      throw serviceOptional.map(service -> {
        if (service.isRunning()) {
          return new WebDriverException(""String_Node_Str"",rootCause);
        }
        return new WebDriverException(""String_Node_Str"",rootCause);
      }
).orElseGet((Supplier<WebDriverException>)() -> new WebDriverException(rootCause.getMessage(),rootCause));
    }
    throwIfUnchecked(t);
    throw new WebDriverException(t);
  }
 finally {
    if (DriverCommand.QUIT.equals(command.getName())) {
      serviceOptional.ifPresent(DriverService::stop);
    }
  }
  if (DriverCommand.NEW_SESSION.equals(command.getName()) && getCommandCodec() instanceof W3CHttpCommandCodec) {
    setCommandCodec(new AppiumW3CHttpCommandCodec());
    getAdditionalCommands().forEach(this::defineCommand);
  }
  return response;
}",0.9598393574297188
20248,"public void writeTo(Appendable appendable) throws IOException {
  try (JsonOutput json=new Json().newOutput(appendable)){
    json.beginObject();
    Map<String,Object> first=getOss();
    if (first == null) {
      first=(Map<String,Object>)stream().findFirst().orElse(new ImmutableCapabilities()).asMap();
    }
    json.name(DESIRED_CAPABILITIES);
    json.write(first);
    json.name(CAPABILITIES);
    json.beginObject();
    json.name(DESIRED_CAPABILITIES);
    json.write(first);
    json.name(FIRST_MATCH);
    json.beginArray();
    getW3C().forEach(json::write);
    json.endArray();
    json.endObject();
    writeMetaData(json);
    json.endObject();
  }
 }","/** 
 * Writes json capabilities to some appendable object.
 * @param appendable to write a json
 */
public void writeTo(Appendable appendable) throws IOException {
  try (JsonOutput json=new Json().newOutput(appendable)){
    json.beginObject();
    Map<String,Object> first=getOss();
    if (first == null) {
      first=(Map<String,Object>)stream().findFirst().orElse(new ImmutableCapabilities()).asMap();
    }
    json.name(DESIRED_CAPABILITIES);
    json.write(first);
    json.name(CAPABILITIES);
    json.beginObject();
    json.name(DESIRED_CAPABILITIES);
    json.write(first);
    json.name(FIRST_MATCH);
    json.beginArray();
    getW3C().forEach(json::write);
    json.endArray();
    json.endObject();
    writeMetaData(json);
    json.endObject();
  }
 }",0.9298123697011814
20249,"public static NewAppiumSessionPayload create(Capabilities caps) throws IOException {
  boolean forceMobileJSONWP=ofNullable(caps.getCapability(FORCE_MJSONWP)).map(o -> Boolean.class.isAssignableFrom(o.getClass()) && Boolean.class.cast(o)).orElse(false);
  HashMap<String,?> capabilityMap=new HashMap<>(caps.asMap());
  capabilityMap.remove(FORCE_MJSONWP);
  Map<String,?> source=of(DESIRED_CAPABILITIES,capabilityMap);
  String json=new Json().toJson(source);
  return new NewAppiumSessionPayload(new StringReader(json),forceMobileJSONWP);
}","/** 
 * Creates instance of   {@link NewAppiumSessionPayload}.
 * @param caps capabilities to create a new session
 * @return instance of {@link NewAppiumSessionPayload}
 */
public static NewAppiumSessionPayload create(Capabilities caps) throws IOException {
  boolean forceMobileJSONWP=ofNullable(caps.getCapability(FORCE_MJSONWP)).map(o -> Boolean.class.isAssignableFrom(o.getClass()) && Boolean.class.cast(o)).orElse(false);
  HashMap<String,?> capabilityMap=new HashMap<>(caps.asMap());
  capabilityMap.remove(FORCE_MJSONWP);
  Map<String,?> source=of(DESIRED_CAPABILITIES,capabilityMap);
  String json=new Json().toJson(source);
  return new NewAppiumSessionPayload(new StringReader(json),forceMobileJSONWP);
}",0.8614649681528662
20250,"/** 
 * The starting.
 */
@BeforeClass public static void beforeClass(){
  firefoxdriver().setup();
}","/** 
 * The starting.
 */
@BeforeClass public static void beforeClass(){
  chromedriver().setup();
}",0.9552238805970148
20251,"/** 
 * @return true if airplane mode is enabled.
 */
public boolean isAirplaneModeEnabled(){
  return (bitMask & AIRPLANE_MODE_MASK) != 0;
}","/** 
 * Is airplane mode enabled or not.
 * @return true if airplane mode is enabled.
 */
public boolean isAirplaneModeEnabled(){
  return (bitMask & AIRPLANE_MODE_MASK) != 0;
}",0.8867924528301887
20252,"/** 
 * @return true if data connection is enabled.
 */
public boolean isDataEnabled(){
  return (bitMask & DATA_MASK) != 0;
}","/** 
 * Is data connection enabled or not.
 * @return true if data connection is enabled.
 */
public boolean isDataEnabled(){
  return (bitMask & DATA_MASK) != 0;
}",0.8689655172413793
20253,"/** 
 * @return true if Wi-Fi connection is enabled.
 */
public boolean isWiFiEnabled(){
  return (bitMask & WIFI_MASK) != 0;
}","/** 
 * Is Wi-Fi connection enabled or not.
 * @return true if Wi-Fi connection is enabled.
 */
public boolean isWiFiEnabled(){
  return (bitMask & WIFI_MASK) != 0;
}",0.8668941979522184
20254,"/** 
 * Get an image from the clipboard
 * @return the actual image instance.
 * @throws IOException If the returned image cannot be decoded or if the clipboard is empty.
 */
default BufferedImage getClipboardImage() throws IOException {
  final byte[] base64decodedBytes=Base64.getMimeDecoder().decode(getClipboard(ClipboardContentType.IMAGE));
  return ImageIO.read(new ByteArrayInputStream(base64decodedBytes));
}","/** 
 * Get an image from the clipboard.
 * @return the actual image instance.
 * @throws IOException If the returned image cannot be decoded or if the clipboard is empty.
 */
default BufferedImage getClipboardImage() throws IOException {
  final byte[] base64decodedBytes=Base64.getMimeDecoder().decode(getClipboard(ClipboardContentType.IMAGE));
  return ImageIO.read(new ByteArrayInputStream(base64decodedBytes));
}",0.9987995198079233
20255,"/** 
 * Get an URL from the clipboard
 * @return the actual URL instance.
 * @throws MalformedURLException if the URL in the clipboard is not valid or if the clipboard is empty.
 */
default URL getClipboardUrl() throws MalformedURLException {
  final byte[] base64decodedBytes=Base64.getMimeDecoder().decode(getClipboard(ClipboardContentType.URL));
  return new URL(new String(base64decodedBytes,StandardCharsets.UTF_8));
}","/** 
 * Get an URL from the clipboard.
 * @return the actual URL instance.
 * @throws MalformedURLException if the URL in the clipboard is not valid or if the clipboard is empty.
 */
default URL getClipboardUrl() throws MalformedURLException {
  final byte[] base64decodedBytes=Base64.getMimeDecoder().decode(getClipboard(ClipboardContentType.URL));
  return new URL(new String(base64decodedBytes,StandardCharsets.UTF_8));
}",0.998819362455726
20256,"/** 
 * @return The list of web socket connection handlers.
 */
List<Runnable> getConnectionHandlers();","/** 
 * Returns a list of all registered web socket connection handlers.
 * @return The list of web socket connection handlers.
 */
List<Runnable> getConnectionHandlers();",0.7518248175182481
20257,"/** 
 * @return The list of web socket disconnection handlers.
 */
List<Runnable> getDisconnectionHandlers();","/** 
 * Returns a list of all registered web socket disconnection handlers.
 * @return The list of web socket disconnection handlers.
 */
List<Runnable> getDisconnectionHandlers();",0.754325259515571
20258,"/** 
 * @return The list of web socket error handlers.
 */
List<Consumer<Throwable>> getErrorHandlers();","/** 
 * Returns a list of all registered web socket error handlers.
 * @return The list of web socket error handlers.
 */
List<Consumer<Throwable>> getErrorHandlers();",0.7675276752767528
20259,"/** 
 * @return The list of web socket message handlers.
 */
List<Consumer<T>> getMessageHandlers();","/** 
 * Returns a list of all registered web socket messages handlers.
 * @return The list of web socket message handlers.
 */
List<Consumer<T>> getMessageHandlers();",0.7518796992481203
20260,"/** 
 * @return The list of all registered web socket disconnection handlers.
 */
@Override public List<Runnable> getDisconnectionHandlers(){
  return disconnectHandlers;
}","@Override public List<Runnable> getDisconnectionHandlers(){
  return disconnectHandlers;
}",0.6870229007633588
20261,"/** 
 * @return The list of all registered web socket error handlers.
 */
@Override public List<Consumer<Throwable>> getErrorHandlers(){
  return errorHandlers;
}","@Override public List<Consumer<Throwable>> getErrorHandlers(){
  return errorHandlers;
}",0.704
20262,"/** 
 * @return The list of all registered web socket connection handlers.
 */
@Override public List<Runnable> getConnectionHandlers(){
  return connectHandlers;
}","@Override public List<Runnable> getConnectionHandlers(){
  return connectHandlers;
}",0.680161943319838
20263,"/** 
 * @return The list of all registered web socket messages handlers.
 */
@Override public List<Consumer<String>> getMessageHandlers(){
  return messageHandlers;
}","@Override public List<Consumer<String>> getMessageHandlers(){
  return messageHandlers;
}",0.6980392156862745
20264,"/** 
 * @return Battery level in range [0.0, 1.0], where 1.0 means 100% charge.
 */
public double getLevel(){
  final Object value=getInput().get(""String_Node_Str"");
  if (value instanceof Long) {
    return ((Long)value).doubleValue();
  }
  return (double)value;
}","/** 
 * Returns battery level.
 * @return Battery level in range [0.0, 1.0], where 1.0 means 100% charge.
 */
public double getLevel(){
  final Object value=getInput().get(""String_Node_Str"");
  if (value instanceof Long) {
    return ((Long)value).doubleValue();
  }
  return (double)value;
}",0.953405017921147
20265,"/** 
 * @return Battery state value.
 */
public abstract <T>T getState();","/** 
 * Returns battery state.
 * @return Battery state value.
 */
public abstract <T>T getState();",0.8488372093023255
20266,"@Test public void checkAbilityToStartServiceUsingCapabilities(){
  File app=ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  DesiredCapabilities caps=new DesiredCapabilities();
  caps.setCapability(PLATFORM_NAME,""String_Node_Str"");
  caps.setCapability(FULL_RESET,true);
  caps.setCapability(NEW_COMMAND_TIMEOUT,60);
  caps.setCapability(APP_PACKAGE,""String_Node_Str"");
  caps.setCapability(APP_ACTIVITY,""String_Node_Str"");
  caps.setCapability(APP,app.getAbsolutePath());
  caps.setCapability(CHROMEDRIVER_EXECUTABLE,getPathToChromeDriverBinary());
  service=new AppiumServiceBuilder().withCapabilities(caps).build();
  service.start();
  assertTrue(service.isRunning());
}","@Test public void checkAbilityToStartServiceUsingCapabilities(){
  File app=ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  DesiredCapabilities caps=new DesiredCapabilities();
  caps.setCapability(PLATFORM_NAME,""String_Node_Str"");
  caps.setCapability(FULL_RESET,true);
  caps.setCapability(NEW_COMMAND_TIMEOUT,60);
  caps.setCapability(APP_PACKAGE,""String_Node_Str"");
  caps.setCapability(APP_ACTIVITY,""String_Node_Str"");
  caps.setCapability(APP,app.getAbsolutePath());
  caps.setCapability(CHROMEDRIVER_EXECUTABLE,chromeManager.getBinaryPath());
  service=new AppiumServiceBuilder().withCapabilities(caps).build();
  service.start();
  assertTrue(service.isRunning());
}",0.8276877761413843
20267,"/** 
 * initialization.
 */
@BeforeClass public static void beforeClass() throws Exception {
  for (Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
    NetworkInterface intf=en.nextElement();
    if ((testIP=getLocalIP(intf)) != null) {
      break;
    }
  }
}","/** 
 * initialization.
 */
@BeforeClass public static void beforeClass() throws Exception {
  for (Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
    NetworkInterface intf=en.nextElement();
    if ((testIP=getLocalIP(intf)) != null) {
      break;
    }
  }
  chromeManager=chromedriver();
  chromeManager.setup();
}",0.9165446559297218
20268,"@Test public void checkAbilityToStartServiceUsingCapabilitiesAndFlags(){
  File app=ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  DesiredCapabilities caps=new DesiredCapabilities();
  caps.setCapability(PLATFORM_NAME,""String_Node_Str"");
  caps.setCapability(FULL_RESET,true);
  caps.setCapability(NEW_COMMAND_TIMEOUT,60);
  caps.setCapability(APP_PACKAGE,""String_Node_Str"");
  caps.setCapability(APP_ACTIVITY,""String_Node_Str"");
  caps.setCapability(APP,app.getAbsolutePath());
  caps.setCapability(CHROMEDRIVER_EXECUTABLE,getPathToChromeDriverBinary());
  service=new AppiumServiceBuilder().withArgument(CALLBACK_ADDRESS,testIP).withArgument(SESSION_OVERRIDE).withArgument(PRE_LAUNCH).withCapabilities(caps).build();
  service.start();
  assertTrue(service.isRunning());
}","@Test public void checkAbilityToStartServiceUsingCapabilitiesAndFlags(){
  File app=ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  DesiredCapabilities caps=new DesiredCapabilities();
  caps.setCapability(PLATFORM_NAME,""String_Node_Str"");
  caps.setCapability(FULL_RESET,true);
  caps.setCapability(NEW_COMMAND_TIMEOUT,60);
  caps.setCapability(APP_PACKAGE,""String_Node_Str"");
  caps.setCapability(APP_ACTIVITY,""String_Node_Str"");
  caps.setCapability(APP,app.getAbsolutePath());
  caps.setCapability(CHROMEDRIVER_EXECUTABLE,chromeManager.getBinaryPath());
  service=new AppiumServiceBuilder().withArgument(CALLBACK_ADDRESS,testIP).withArgument(SESSION_OVERRIDE).withArgument(PRE_LAUNCH).withCapabilities(caps).build();
  service.start();
  assertTrue(service.isRunning());
}",0.967989756722151
20269,"@Test public void startingAndroidAppWithCapabilitiesAndFlagsOnServerSideTest(){
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  WebDriverManager chromeManager=chromedriver();
  chromeManager.setup();
  DesiredCapabilities serverCapabilities=new DesiredCapabilities();
  serverCapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,""String_Node_Str"");
  serverCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  serverCapabilities.setCapability(MobileCapabilityType.FULL_RESET,true);
  serverCapabilities.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT,60);
  serverCapabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  serverCapabilities.setCapability(AndroidMobileCapabilityType.CHROMEDRIVER_EXECUTABLE,chromeManager.getBinaryPath());
  AppiumServiceBuilder builder=new AppiumServiceBuilder().withArgument(GeneralServerFlag.SESSION_OVERRIDE).withArgument(GeneralServerFlag.STRICT_CAPS).withCapabilities(serverCapabilities);
  DesiredCapabilities clientCapabilities=new DesiredCapabilities();
  clientCapabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE,""String_Node_Str"");
  clientCapabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY,""String_Node_Str"");
  AndroidDriver<?> driver=new AndroidDriver<>(builder,clientCapabilities);
  try {
    Capabilities caps=driver.getCapabilities();
    assertEquals(true,caps.getCapability(MobileCapabilityType.PLATFORM_NAME).equals(MobilePlatform.ANDROID));
    assertNotEquals(null,caps.getCapability(MobileCapabilityType.DEVICE_NAME));
  }
  finally {
    driver.quit();
  }
}","@Test public void startingAndroidAppWithCapabilitiesAndFlagsOnServerSideTest(){
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities serverCapabilities=new DesiredCapabilities();
  serverCapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,""String_Node_Str"");
  serverCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  serverCapabilities.setCapability(MobileCapabilityType.FULL_RESET,true);
  serverCapabilities.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT,60);
  serverCapabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  WebDriverManager chromeManager=chromedriver();
  chromeManager.setup();
  serverCapabilities.setCapability(AndroidMobileCapabilityType.CHROMEDRIVER_EXECUTABLE,chromeManager.getBinaryPath());
  AppiumServiceBuilder builder=new AppiumServiceBuilder().withArgument(GeneralServerFlag.SESSION_OVERRIDE).withArgument(GeneralServerFlag.STRICT_CAPS).withCapabilities(serverCapabilities);
  DesiredCapabilities clientCapabilities=new DesiredCapabilities();
  clientCapabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE,""String_Node_Str"");
  clientCapabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY,""String_Node_Str"");
  AndroidDriver<?> driver=new AndroidDriver<>(builder,clientCapabilities);
  try {
    Capabilities caps=driver.getCapabilities();
    assertEquals(true,caps.getCapability(MobileCapabilityType.PLATFORM_NAME).equals(MobilePlatform.ANDROID));
    assertNotEquals(null,caps.getCapability(MobileCapabilityType.DEVICE_NAME));
  }
  finally {
    driver.quit();
  }
}",0.9553409776704888
20270,"@SuppressWarnings(""String_Node_Str"") public Result createSession(HttpClient client,Command command) throws IOException {
  Capabilities desiredCapabilities=(Capabilities)command.getParameters().get(""String_Node_Str"");
  Capabilities desired=desiredCapabilities == null ? new ImmutableCapabilities() : desiredCapabilities;
  int threshold=(int)Math.min(Runtime.getRuntime().freeMemory() / 10,Integer.MAX_VALUE);
  FileBackedOutputStream os=new FileBackedOutputStream(threshold);
  try {
    CountingOutputStream counter=new CountingOutputStream(os);
    Writer writer=new OutputStreamWriter(counter,UTF_8);
    NewAppiumSessionPayload payload=NewAppiumSessionPayload.create(desired);
    payload.writeTo(writer);
    try (InputStream rawIn=os.asByteSource().openBufferedStream();BufferedInputStream contentStream=new BufferedInputStream(rawIn)){
      Method createSessionMethod=this.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",HttpClient.class,InputStream.class,long.class);
      createSessionMethod.setAccessible(true);
      Optional<Result> result=(Optional<Result>)createSessionMethod.invoke(this,client,contentStream,counter.getCount());
      return result.map(result1 -> {
        Result toReturn=result.get();
        System.out.print(format(""String_Node_Str"",toReturn.getDialect()));
        return toReturn;
      }
).orElseThrow(() -> new SessionNotCreatedException(format(""String_Node_Str"",desired)));
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      throw new WebDriverException(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",HttpClient.class.getSimpleName(),InputStream.class.getSimpleName(),long.class.getSimpleName()),e);
    }
  }
  finally {
    os.reset();
  }
}","@SuppressWarnings(""String_Node_Str"") public Result createSession(HttpClient client,Command command) throws IOException {
  Capabilities desiredCapabilities=(Capabilities)command.getParameters().get(""String_Node_Str"");
  Capabilities desired=desiredCapabilities == null ? new ImmutableCapabilities() : desiredCapabilities;
  int threshold=(int)Math.min(Runtime.getRuntime().freeMemory() / 10,Integer.MAX_VALUE);
  FileBackedOutputStream os=new FileBackedOutputStream(threshold);
  try {
    CountingOutputStream counter=new CountingOutputStream(os);
    Writer writer=new OutputStreamWriter(counter,UTF_8);
    NewAppiumSessionPayload payload=NewAppiumSessionPayload.create(desired);
    payload.writeTo(writer);
    try (InputStream rawIn=os.asByteSource().openBufferedStream();BufferedInputStream contentStream=new BufferedInputStream(rawIn)){
      Method createSessionMethod=this.getClass().getSuperclass().getDeclaredMethod(""String_Node_Str"",HttpClient.class,InputStream.class,long.class);
      createSessionMethod.setAccessible(true);
      Optional<Result> result=(Optional<Result>)createSessionMethod.invoke(this,client,contentStream,counter.getCount());
      return result.map(result1 -> {
        Result toReturn=result.get();
        getLogger(ProtocolHandshake.class.getName()).info(format(""String_Node_Str"",toReturn.getDialect()));
        return toReturn;
      }
).orElseThrow(() -> new SessionNotCreatedException(format(""String_Node_Str"",desired)));
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      throw new WebDriverException(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",HttpClient.class.getSimpleName(),InputStream.class.getSimpleName(),long.class.getSimpleName()),e);
    }
  }
  finally {
    os.reset();
  }
}",0.9818080044780296
20271,"@Override public Response execute(Command command) throws WebDriverException, IOException {
  if (DriverCommand.NEW_SESSION.equals(command.getName())) {
    serviceOptional.ifPresent(driverService -> {
      try {
        driverService.start();
      }
 catch (      IOException e) {
        throw new WebDriverException(e.getMessage(),e);
      }
    }
);
  }
  Response response;
  try {
    response=NEW_SESSION.equals(command.getName()) ? createSession(command) : super.execute(command);
  }
 catch (  Throwable t) {
    Throwable rootCause=Throwables.getRootCause(t);
    if (rootCause instanceof ConnectException && rootCause.getMessage().contains(""String_Node_Str"")) {
      throw serviceOptional.map(service -> {
        if (service.isRunning()) {
          return new WebDriverException(""String_Node_Str"",rootCause);
        }
        return new WebDriverException(""String_Node_Str"",rootCause);
      }
).orElseGet((Supplier<WebDriverException>)() -> new WebDriverException(rootCause.getMessage(),rootCause));
    }
    throwIfUnchecked(t);
    throw new WebDriverException(t);
  }
 finally {
    if (DriverCommand.QUIT.equals(command.getName())) {
      serviceOptional.ifPresent(DriverService::stop);
    }
  }
  if (DriverCommand.NEW_SESSION.equals(command.getName()) && getCommandCodec() instanceof W3CHttpCommandCodec) {
    setCommandCodec(new AppiumW3CHttpCommandCodec());
    getAdditionalCommands().forEach(this::defineCommand);
  }
  return response;
}","@Override public Response execute(Command command) throws WebDriverException {
  if (DriverCommand.NEW_SESSION.equals(command.getName())) {
    serviceOptional.ifPresent(driverService -> {
      try {
        driverService.start();
      }
 catch (      IOException e) {
        throw new WebDriverException(e.getMessage(),e);
      }
    }
);
  }
  Response response;
  try {
    response=NEW_SESSION.equals(command.getName()) ? createSession(command) : super.execute(command);
  }
 catch (  Throwable t) {
    Throwable rootCause=Throwables.getRootCause(t);
    if (rootCause instanceof ConnectException && rootCause.getMessage().contains(""String_Node_Str"")) {
      throw serviceOptional.map(service -> {
        if (service.isRunning()) {
          return new WebDriverException(""String_Node_Str"",rootCause);
        }
        return new WebDriverException(""String_Node_Str"",rootCause);
      }
).orElseGet((Supplier<WebDriverException>)() -> new WebDriverException(rootCause.getMessage(),rootCause));
    }
    throwIfUnchecked(t);
    throw new WebDriverException(t);
  }
 finally {
    if (DriverCommand.QUIT.equals(command.getName())) {
      serviceOptional.ifPresent(DriverService::stop);
    }
  }
  if (DriverCommand.NEW_SESSION.equals(command.getName()) && getCommandCodec() instanceof W3CHttpCommandCodec) {
    setCommandCodec(new AppiumW3CHttpCommandCodec());
    getAdditionalCommands().forEach(this::defineCommand);
  }
  return response;
}",0.99556162512803
20272,"/** 
 * initialization.
 */
@BeforeClass public static void beforeClass(){
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.APPIUM);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new AndroidDriver<>(service.getUrl(),capabilities);
}","/** 
 * initialization.
 */
@BeforeClass public static void beforeClass(){
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.ANDROID_UIAUTOMATOR2);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new AndroidDriver<>(service.getUrl(),capabilities);
}",0.988095238095238
20273,"/** 
 * It creates a built instance of   {@link PointOption} which takes x and y coordinates.This is offset from the upper left corner of the screen.
 * @param xOffset is x value.
 * @param yOffset is y value.
 * @return a built option
 */
public static PointOption point(int xOffset,int yOffset){
  return new PointOption().coordinates(xOffset,yOffset);
}","/** 
 * It creates a built instance of   {@link PointOption} which takes x and y coordinates.This is offset from the upper left corner of the screen.
 * @param xOffset is x value.
 * @param yOffset is y value.
 * @return a built option
 */
public static PointOption point(int xOffset,int yOffset){
  return new PointOption().withCoordinates(xOffset,yOffset);
}",0.9916201117318436
20274,"@Test public void invalidOptionsArgumentsShouldFailOnAltering() throws Exception {
  final List<Runnable> invalidOptions=new ArrayList<>();
  invalidOptions.add(() -> waitOptions(ofMillis(-1)));
  invalidOptions.add(() -> new ElementOption().coordinates(0,0).withElement(null));
  invalidOptions.add(() -> new PointOption().coordinates(0,-1));
  invalidOptions.add(() -> new PointOption().coordinates(-1,0));
  invalidOptions.add(() -> new WaitOptions().withDuration(null));
  invalidOptions.add(() -> tapOptions().withTapsCount(-1));
  invalidOptions.add(() -> longPressOptions().withDuration(null));
  invalidOptions.add(() -> longPressOptions().withDuration(ofMillis(-1)));
  for (  Runnable item : invalidOptions) {
    assertThat(item,failsWith(RuntimeException.class));
  }
}","@Test public void invalidOptionsArgumentsShouldFailOnAltering() throws Exception {
  final List<Runnable> invalidOptions=new ArrayList<>();
  invalidOptions.add(() -> waitOptions(ofMillis(-1)));
  invalidOptions.add(() -> new ElementOption().withCoordinates(0,0).withElement(null));
  invalidOptions.add(() -> new PointOption().withCoordinates(0,-1));
  invalidOptions.add(() -> new PointOption().withCoordinates(-1,0));
  invalidOptions.add(() -> new WaitOptions().withDuration(null));
  invalidOptions.add(() -> tapOptions().withTapsCount(-1));
  invalidOptions.add(() -> longPressOptions().withDuration(null));
  invalidOptions.add(() -> longPressOptions().withDuration(ofMillis(-1)));
  for (  Runnable item : invalidOptions) {
    assertThat(item,failsWith(RuntimeException.class));
  }
}",0.98856416772554
20275,"@Test public void longPressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=longPressOptions().withElement(element(DUMMY_ELEMENT).coordinates(0,0)).withDuration(ofMillis(1)).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)DUMMY_ELEMENT).getId());
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",1L);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}","@Test public void longPressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=longPressOptions().withElement(element(DUMMY_ELEMENT).withCoordinates(0,0)).withDuration(ofMillis(1)).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)DUMMY_ELEMENT).getId());
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",1L);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}",0.9952830188679244
20276,"/** 
 * Press and hold the at an elements upper-left corner, offset by the given amount, until the contextmenu event has fired.
 * @param el       element to long-press.
 * @param x        x offset.
 * @param y        y offset.
 * @param duration of the long-press. Minimum time resolution unit is one millisecond.
 * @return this TouchAction, for chaining.
 * @deprecated use {@link #longPress(LongPressOptions)} instead
 */
@Deprecated public TouchAction longPress(WebElement el,int x,int y,Duration duration){
  return longPress(longPressOptions().withOffset(WebElementOption.element(el,x,y)).withDuration(duration));
}","/** 
 * Press and hold the at an elements upper-left corner, offset by the given amount, until the contextmenu event has fired.
 * @param el       element to long-press.
 * @param x        x offset.
 * @param y        y offset.
 * @param duration of the long-press. Minimum time resolution unit is one millisecond.
 * @return this TouchAction, for chaining.
 * @deprecated use {@link #longPress(LongPressOptions)} instead
 */
@Deprecated public T longPress(WebElement el,int x,int y,Duration duration){
  return longPress(longPressOptions().withOffset(WebElementOption.element(el,x,y)).withDuration(duration));
}",0.9918962722852512
20277,"/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext     The context to use when finding the element
 * @param by                a By locator strategy
 * @param shouldCache       is the flag that signalizes that elements whichare found once should be cached
 * @param duration          is a POJO which contains timeout parameters for the element to be searched
 * @param originalDuration  is a POJO which contains timeout parameters from page object which contains the element
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration,TimeOutDuration originalDuration){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.timeOutDuration=duration;
  this.originalTimeOutDuration=originalDuration;
  this.by=by;
  this.exceptionMessageIfElementNotFound=""String_Node_Str"" + by.toString();
}","/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext     The context to use when finding the element
 * @param by                a By locator strategy
 * @param shouldCache       is the flag that signalizes that elements whichare found once should be cached
 * @param duration          is a POJO which contains timeout parameters for the element to be searched
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.duration=duration;
  this.by=by;
  this.exceptionMessageIfElementNotFound=""String_Node_Str"" + by.toString();
}",0.8837731611454239
20278,"private <T extends Object>T waitFor(Supplier<T> supplier){
  WaitingFunction<T> function=new WaitingFunction<>();
  try {
    FluentWait<Supplier<T>> wait=new FluentWait<>(supplier).ignoring(NoSuchElementException.class);
    wait.withTimeout(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
    return wait.until(function);
  }
 catch (  TimeoutException e) {
    if (function.foundStaleElementReferenceException != null) {
      throw StaleElementReferenceException.class.cast(function.foundStaleElementReferenceException);
    }
    throw e;
  }
}","private <T>T waitFor(Supplier<T> supplier){
  WaitingFunction<T> function=new WaitingFunction<>();
  try {
    FluentWait<Supplier<T>> wait=new FluentWait<>(supplier).ignoring(NoSuchElementException.class);
    wait.withTimeout(duration.getTime(),duration.getTimeUnit());
    return wait.until(function);
  }
 catch (  TimeoutException e) {
    if (function.foundStaleElementReferenceException != null) {
      throw StaleElementReferenceException.class.cast(function.foundStaleElementReferenceException);
    }
    throw e;
  }
}",0.9696969696969696
20279,"@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=timeOutDuration;
  }
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null) {
    return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,timeOutDuration);
  }
  return null;
}","@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=duration;
  }
  builder.setAnnotated(annotatedElement);
  By byResult=builder.buildBy();
  return ofNullable(byResult).map(by -> new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration)).orElse(null);
}",0.9002473206924979
20280,"/** 
 * Creates a new mobile element locator factory.
 * @param searchContext     The context to use when finding the element
 * @param timeOutDuration   is a POJO which contains timeout parameters for the element to be searched
 * @param builder           is handler of Appium-specific page object annotations
 */
public AppiumElementLocatorFactory(SearchContext searchContext,TimeOutDuration timeOutDuration,AppiumByBuilder builder){
  this.searchContext=searchContext;
  this.timeOutDuration=timeOutDuration;
  this.builder=builder;
}","/** 
 * Creates a new mobile element locator factory.
 * @param searchContext     The context to use when finding the element
 * @param duration   is a POJO which contains timeout parameters for the element to be searched
 * @param builder    is handler of Appium-specific page object annotations
 */
public AppiumElementLocatorFactory(SearchContext searchContext,TimeOutDuration duration,AppiumByBuilder builder){
  this.searchContext=searchContext;
  this.duration=duration;
  this.builder=builder;
}",0.958614051973051
20281,"@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type)) {
    return null;
  }
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass())) {
      listType=((ParameterizedType)listType).getRawType();
    }
    if (listType instanceof Class) {
      if (!Widget.class.isAssignableFrom((Class)listType)) {
        return null;
      }
      widgetType=Class.class.cast(listType);
    }
 else {
      return null;
    }
  }
 else {
    widgetType=(Class<? extends Widget>)field.getType();
  }
  CacheableLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist) {
    return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,timeOutDuration));
  }
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,timeOutDuration));
}","@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type)) {
    return null;
  }
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass())) {
      listType=((ParameterizedType)listType).getRawType();
    }
    if (listType instanceof Class) {
      if (!Widget.class.isAssignableFrom((Class)listType)) {
        return null;
      }
      widgetType=Class.class.cast(listType);
    }
 else {
      return null;
    }
  }
 else {
    widgetType=(Class<? extends Widget>)field.getType();
  }
  CacheableLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist) {
    return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,duration));
  }
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,duration));
}",0.9943890274314214
20282,"/** 
 * @return the choromedriver file which depends on platform.
 */
public static File getChromeDriver(){
  Path resultPath;
  Platform current=getCurrent();
  if (current.is(WINDOWS)) {
    resultPath=ROOT_TEST_PATH.resolve(""String_Node_Str"");
  }
 else   if (current.is(MAC)) {
    resultPath=ROOT_TEST_PATH.resolve(""String_Node_Str"");
  }
 else {
    resultPath=ROOT_TEST_PATH.resolve(""String_Node_Str"");
  }
  return resultPath.toFile();
}","/** 
 * @return the choromedriver file which depends on platform.
 */
public static File getChromeDriver(){
  Platform current=getCurrent();
  if (current.is(WINDOWS)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
 else   if (current.is(MAC)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
 else {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
}",0.8621495327102804
20283,"@Test public void test(){
  driver.get(""String_Node_Str"");
  searchTextField.sendKeys(""String_Node_Str"");
  btnK.click();
  Assert.assertNotEquals(0,foundLinks.size());
}","@Test public void test(){
  driver.get(""String_Node_Str"");
  searchTextField.sendKeys(""String_Node_Str"");
  btnG.click();
  Assert.assertNotEquals(0,foundLinks.size());
}",0.9941176470588236
20284,"@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=duration;
  }
  builder.setAnnotated(annotatedElement);
  By byResult=builder.buildBy();
  return ofNullable(byResult).map(by -> new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration)).orElse(null);
}","@Override public @Nullable CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=duration;
  }
  builder.setAnnotated(annotatedElement);
  By byResult=builder.buildBy();
  return ofNullable(byResult).map(by -> new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration)).orElse(null);
}",0.9917355371900828
20285,"/** 
 * @return the choromedriver file which depends on platform.
 */
public static File getChromeDriver(){
  Platform current=getCurrent();
  if (current.is(WINDOWS)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
 else   if (current.is(MAC)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
 else {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
}","/** 
 * @return the choromedriver file which depends on platform.
 */
public static File getChromeDriver(){
  Platform current=getCurrent();
  if (current.is(WINDOWS)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
 else   if (current.is(MAC)) {
    return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
  }
  return ROOT_TEST_PATH.resolve(""String_Node_Str"").toFile();
}",0.9826732673267328
20286,"@Test public void defaultTimeOutTest(){
  assertThat(format(MESSAGE,DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),abs(getExpectedMillis(DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT) - getBenchmark(() -> stubElements.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
  timeOutDuration.setTime(15500000,MICROSECONDS);
  assertThat(format(MESSAGE,15500000,MICROSECONDS),abs(getExpectedMillis(15500000,MICROSECONDS) - getBenchmark(() -> stubElements.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
  timeOutDuration.setTime(3,SECONDS);
  assertThat(format(MESSAGE,3,SECONDS),abs(getExpectedMillis(3,SECONDS) - getBenchmark(() -> stubElements.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
}","@Test public void defaultTimeOutTest(){
  assertThat(format(MESSAGE,DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),getPerformanceDiff(getExpectedMillis(DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),() -> stubElements.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
  timeOutDuration.setTime(15500000,MICROSECONDS);
  assertThat(format(MESSAGE,15500000,MICROSECONDS),getPerformanceDiff(getExpectedMillis(15500000,MICROSECONDS),() -> stubElements.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
  timeOutDuration.setTime(3,SECONDS);
  assertThat(format(MESSAGE,3,SECONDS),getPerformanceDiff(getExpectedMillis(3,SECONDS),() -> stubElements.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
}",0.9063893016344724
20287,"@Test public void withCustomizedTimeOutTest(){
  assertThat(format(MESSAGE,DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),abs(getExpectedMillis(DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT) - getBenchmark(() -> stubElements.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
  assertThat(format(MESSAGE,5,SECONDS),abs(getExpectedMillis(5,SECONDS) - getBenchmark(() -> stubElements2.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
  timeOutDuration.setTime(15500000,MICROSECONDS);
  assertThat(format(MESSAGE,15500000,MICROSECONDS),abs(getExpectedMillis(15500000,MICROSECONDS) - getBenchmark(() -> stubElements.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
  assertThat(format(MESSAGE,5,SECONDS),abs(getExpectedMillis(5,SECONDS) - getBenchmark(() -> stubElements2.size())),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF));
}","@Test public void withCustomizedTimeOutTest(){
  assertThat(format(MESSAGE,DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),getPerformanceDiff(getExpectedMillis(DEFAULT_TIMEOUT,DEFAULT_TIMEUNIT),() -> stubElements.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
  assertThat(format(MESSAGE,5,SECONDS),getPerformanceDiff(getExpectedMillis(5,SECONDS),() -> stubElements2.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
  timeOutDuration.setTime(15500000,MICROSECONDS);
  assertThat(format(MESSAGE,15500000,MICROSECONDS),getPerformanceDiff(getExpectedMillis(15500000,MICROSECONDS),() -> stubElements.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
  assertThat(format(MESSAGE,5,SECONDS),getPerformanceDiff(getExpectedMillis(5,SECONDS),() -> stubElements2.size()),lessThanOrEqualTo(ACCEPTABLE_TIME_DIFF_MS));
}",0.8952618453865336
20288,"default String getPlatformName(){
  Object platformName=ofNullable(getSessionDetail(""String_Node_Str"")).orElseGet(() -> getSessionDetail(""String_Node_Str""));
  return ofNullable(platformName).map(Object::toString).orElse(null);
}","/** 
 * @return name of the current mobile platform.
 */
default String getPlatformName(){
  Object platformName=ofNullable(getSessionDetail(""String_Node_Str"")).orElseGet(() -> getSessionDetail(""String_Node_Str""));
  return ofNullable(platformName).map(Object::toString).orElse(null);
}",0.8893203883495145
20289,"default String getAutomationName(){
  return ofNullable(getSessionDetail(""String_Node_Str"")).map(Object::toString).orElse(null);
}","/** 
 * @return current automation name.
 */
default String getAutomationName(){
  return ofNullable(getSessionDetail(""String_Node_Str"")).map(Object::toString).orElse(null);
}",0.8524590163934426
20290,"public static <Ex extends Throwable>Matcher<IThrowingRunnable<Ex>> failsWith(final Class<Ex> throwableType,final Matcher<? super Ex> throwableMatcher){
  return new FailsWithMatcher<>(allOf(instanceOf(throwableType),throwableMatcher));
}","public static <E extends Throwable>Matcher<IThrowingRunnable<E>> failsWith(final Class<E> throwableType,final Matcher<? super E> throwableMatcher){
  return new FailsWithMatcher<>(allOf(instanceOf(throwableType),throwableMatcher));
}",0.9914893617021276
20291,"@Override protected boolean matchesSafely(final IThrowingRunnable<Ex> runnable){
  try {
    runnable.run();
    return false;
  }
 catch (  final Throwable ex) {
    return matcher.matches(ex);
  }
}","@Override protected boolean matchesSafely(final IThrowingRunnable<E> runnable){
  try {
    runnable.run();
    return false;
  }
 catch (  final Throwable ex) {
    return matcher.matches(ex);
  }
}",0.9974937343358397
20292,"private FailsWithMatcher(final Matcher<? super Ex> matcher){
  this.matcher=matcher;
}","private FailsWithMatcher(final Matcher<? super E> matcher){
  this.matcher=matcher;
}",0.9941520467836256
20293,"@Test public void moveToOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new MoveToOptions().withElement(dummyElement).withRelativeOffset(-1,-1).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)dummyElement).getId());
  expectedOpts.put(""String_Node_Str"",-1);
  expectedOpts.put(""String_Node_Str"",-1);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}","@Test public void moveToOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new MoveToOptions().withElement(DUMMY_ELEMENT).withRelativeOffset(-1,-1).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)DUMMY_ELEMENT).getId());
  expectedOpts.put(""String_Node_Str"",-1);
  expectedOpts.put(""String_Node_Str"",-1);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}",0.9557522123893806
20294,"@Test public void invalidRelativePositionOptionsShouldFailOnBuild() throws Exception {
  final List<ActionOptions> invalidOptions=new ArrayList<>();
  invalidOptions.add(new MoveToOptions());
  invalidOptions.forEach(opts -> assertThat(opts::build,failsWith(IllegalArgumentException.class)));
}","@Test public void invalidRelativePositionOptionsShouldFailOnBuild() throws Exception {
  final List<ActionOptions> invalidOptions=new ArrayList<>();
  invalidOptions.add(new MoveToOptions());
  for (  ActionOptions opts : invalidOptions) {
    assertThat(opts::build,failsWith(IllegalArgumentException.class));
  }
}",0.8721311475409836
20295,"@Test public void pressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new PressOptions().withElement(dummyElement).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)dummyElement).getId());
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}","@Test public void pressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new PressOptions().withElement(DUMMY_ELEMENT).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)DUMMY_ELEMENT).getId());
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}",0.58719646799117
20296,"@Test public void invalidAbsolutePositionOptionsShouldFailOnBuild() throws Exception {
  final List<ActionOptions> invalidOptions=new ArrayList<>();
  invalidOptions.add(new PressOptions().withElement(dummyElement).withAbsoluteOffset(0,0));
  invalidOptions.add(new LongPressOptions().withRelativeOffset(0,0));
  invalidOptions.add(new TapOptions());
  invalidOptions.add(new TapOptions().withAbsoluteOffset(0,0).withRelativeOffset(0,0));
  invalidOptions.forEach(opts -> assertThat(opts::build,failsWith(IllegalArgumentException.class)));
}","@Test public void invalidAbsolutePositionOptionsShouldFailOnBuild() throws Exception {
  final List<ActionOptions> invalidOptions=new ArrayList<>();
  invalidOptions.add(new PressOptions().withElement(DUMMY_ELEMENT).withAbsoluteOffset(0,0));
  invalidOptions.add(new LongPressOptions().withRelativeOffset(0,0));
  invalidOptions.add(new TapOptions());
  invalidOptions.add(new TapOptions().withAbsoluteOffset(0,0).withRelativeOffset(0,0));
  for (  ActionOptions opts : invalidOptions) {
    assertThat(opts::build,failsWith(IllegalArgumentException.class));
  }
}",0.9049773755656108
20297,"@Test public void longPressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new LongPressOptions().withElement(dummyElement).withRelativeOffset(0,0).withDuration(Duration.ofMillis(1)).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)dummyElement).getId());
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",1L);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}","@Test public void longPressOptionsShouldBuildProperly() throws Exception {
  final Map<String,Object> actualOpts=new LongPressOptions().withElement(DUMMY_ELEMENT).withRelativeOffset(0,0).withDuration(Duration.ofMillis(1)).build();
  final Map<String,Object> expectedOpts=new HashMap<>();
  expectedOpts.put(""String_Node_Str"",((HasIdentity)DUMMY_ELEMENT).getId());
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",0);
  expectedOpts.put(""String_Node_Str"",1L);
  assertThat(actualOpts.entrySet(),everyItem(isIn(expectedOpts.entrySet())));
  assertThat(expectedOpts.entrySet(),everyItem(isIn(actualOpts.entrySet())));
}",0.9611801242236024
20298,"/** 
 * @param bys is a set of {@link org.openqa.selenium.By} which forms the all possible searching.
 */
public ByAll(By[] bys){
  super(bys);
  checkNotNull(bys);
  this.bys=Arrays.asList(bys);
  checkArgument(this.bys.isEmpty(),""String_Node_Str"");
}","/** 
 * @param bys is a set of {@link org.openqa.selenium.By} which forms the all possible searching.
 */
public ByAll(By[] bys){
  super(bys);
  checkNotNull(bys);
  this.bys=Arrays.asList(bys);
  checkArgument(!this.bys.isEmpty(),""String_Node_Str"");
}",0.998019801980198
20299,"public AppiumCommandInfo(String url,HttpMethod method){
  super(url,method);
  this.url=url;
  this.method=method;
}","/** 
 * It conntains method and URL of the command.
 * @param url command URL
 * @param method is http-method
 */
public AppiumCommandInfo(String url,HttpMethod method){
  super(url,method);
  this.url=url;
  this.method=method;
}",0.6705202312138728
20300,"/** 
 * @return is focus on browser or on native content.
 */
default boolean isBrowser(){
  Object browserName=getSessionDetail(""String_Node_Str"");
  return ofNullable(browserName != null ? String.valueOf(browserName) : null).orElse(null) != null;
}","/** 
 * @return is focus on browser or on native content.
 */
default boolean isBrowser(){
  Object browserName=getSessionDetail(""String_Node_Str"");
  return browserName != null && !isBlank(String.valueOf(browserName));
}",0.8832271762208068
20301,"@Override public WebDriver context(String name){
  checkNotNull(name,""String_Node_Str"");
  execute(DriverCommand.SWITCH_TO_CONTEXT,ImmutableMap.of(""String_Node_Str"",name));
  return this;
}","@Override public WebDriver context(String name){
  checkNotNull(name,""String_Node_Str"");
  execute(DriverCommand.SWITCH_TO_CONTEXT,ImmutableMap.of(""String_Node_Str"",name));
  currentContext=name;
  return this;
}",0.942643391521197
20302,"@Test public void listenableObjectSample(){
  try {
    EmptyWebDriver emptyWebDriver=new EmptyWebDriver();
    ContextAware contextAware=new ContextAware(){
      @Override public WebDriver context(      String name){
        return emptyWebDriver;
      }
      @Override public Set<String> getContextHandles(){
        return of(EMPTY);
      }
      @Override public String getContext(){
        return EMPTY;
      }
    }
;
    ContextListener2 contextListener=new ContextListener2();
    AlertListener2 alertListener=new AlertListener2();
    contextAware=getEventFiringObject(contextAware,emptyWebDriver,contextListener,alertListener);
    EmptyWebDriver webDriver=(EmptyWebDriver)contextAware.context(""String_Node_Str"");
    contextAware.context(""String_Node_Str"");
    assertNotNull(webDriver);
    assertThat(contextListener.messages,hasItems(PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str""));
    assertThat(contextListener.messages.size(),is(4));
    ContextListener singleContextListener=(ContextListener)listeners.get(ContextListener.class);
    assertThat(singleContextListener.messages,hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    assertThat(singleContextListener.messages.size(),is(4));
    Alert alert=webDriver.switchTo().alert();
    alert.accept();
    alert.dismiss();
    alert.sendKeys(""String_Node_Str"");
    Credentials credentials=new Credentials(){
      @Override public int hashCode(){
        return super.hashCode();
      }
      @Override public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    Credentials credentials2=new Credentials(){
      @Override public int hashCode(){
        return super.hashCode();
      }
      @Override public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    alert.setCredentials(credentials);
    alert.authenticateUsing(credentials2);
    assertThat(alertListener.messages,hasItems(PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"" + credentials.toString()+ ""String_Node_Str"",PREFIX + ""String_Node_Str"" + credentials.toString()+ ""String_Node_Str"",PREFIX + ""String_Node_Str"" + credentials2.toString()+ ""String_Node_Str"",PREFIX + ""String_Node_Str"" + credentials2.toString()+ ""String_Node_Str""));
    assertThat(alertListener.messages.size(),is(10));
    AlertListener singleAlertListener=(AlertListener)listeners.get(AlertListener.class);
    assertThat(singleAlertListener.messages,hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + credentials.toString() + ""String_Node_Str"",""String_Node_Str"" + credentials.toString() + ""String_Node_Str"",""String_Node_Str"" + credentials2.toString() + ""String_Node_Str"",""String_Node_Str"" + credentials2.toString() + ""String_Node_Str""));
    assertThat(singleAlertListener.messages.size(),is(10));
    SearchingListener2 searchingListener=new SearchingListener2();
    webDriver=getEventFiringWebDriver(webDriver,searchingListener);
    webDriver.findElement(By.id(""String_Node_Str""));
    assertThat(searchingListener.messages,hasItems(PREFIX + ""String_Node_Str"",PREFIX + ""String_Node_Str"" + ""String_Node_Str""));
    assertThat(searchingListener.messages.size(),is(2));
    SearchingListener singleSearchingListener=(SearchingListener)listeners.get(SearchingListener.class);
    assertThat(singleSearchingListener.messages,hasItems(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    assertThat(singleSearchingListener.messages.size(),is(2));
  }
  finally {
    listeners.get(ContextListener.class).messages.clear();
    listeners.get(AlertListener.class).messages.clear();
    listeners.get(SearchingListener.class).messages.clear();
  }
}","@Test public void listenableObjectSample(){
  try {
    ContextAware listenableContextAware=getEventFiringObject(contextAware,emptyWebDriver,contextListener,alertListener);
    WebDriver webDriver=listenableContextAware.context(""String_Node_Str"");
    assertTrue(contextAwarePredicate.test(listenableContextAware));
    Alert alert=webDriver.switchTo().alert();
    assertTrue(alertPredicate.test(alert));
    assertTrue(webDriverPredicate.test(getEventFiringWebDriver(webDriver,searchingListener)));
  }
  finally {
    listeners.get(ContextListener.class).messages.clear();
    listeners.get(AlertListener.class).messages.clear();
    listeners.get(SearchingListener.class).messages.clear();
  }
}",0.0855661192739844
20303,"default boolean isBrowser(){
  Object browserName=getSessionDetail(""String_Node_Str"");
  return ofNullable(browserName != null ? String.valueOf(browserName) : null).orElse(null) != null;
}","/** 
 * @return is focus on browser or on native content.
 */
default boolean isBrowser(){
  Object browserName=getSessionDetail(""String_Node_Str"");
  return ofNullable(browserName != null ? String.valueOf(browserName) : null).orElse(null) != null;
}",0.8584474885844748
20304,"protected boolean check(Supplier<DesiredCapabilities> serverCapabilitiesSupplier,Supplier<Capabilities> clientCapabilitiesSupplier,BiPredicate<By,Class<? extends WebElement>> filter,By by,Class<? extends WebElement> clazz){
  AppiumServiceBuilder builder=new AppiumServiceBuilder().withCapabilities(serverCapabilitiesSupplier.get());
  driver=new AppiumDriver<>(builder,clientCapabilitiesSupplier.get());
  ;
  return filter.test(by,clazz);
}","protected boolean check(Supplier<DesiredCapabilities> serverCapabilitiesSupplier,Supplier<Capabilities> clientCapabilitiesSupplier,BiPredicate<By,Class<? extends WebElement>> filter,By by,Class<? extends WebElement> clazz){
  AppiumServiceBuilder builder=new AppiumServiceBuilder().withCapabilities(serverCapabilitiesSupplier.get());
  driver=new AppiumDriver<>(builder,clientCapabilitiesSupplier.get());
  return filter.test(by,clazz);
}",0.9954545454545456
20305,"@Test public void swipeTest(){
  MobileElement slider=driver.findElementByClassName(""String_Node_Str"");
  Dimension size=slider.getSize();
  TouchAction swipe=new TouchAction(driver).press(slider,size.width / 2,size.height / 2).waitAction(2000).moveTo(slider).release();
  swipe.perform();
  assertEquals(""String_Node_Str"",slider.getAttribute(""String_Node_Str""));
}","@Test public void swipeTest(){
  MobileElement slider=driver.findElementByClassName(""String_Node_Str"");
  Dimension size=slider.getSize();
  TouchAction swipe=new TouchAction(driver).press(slider,size.width / 2 + 2,size.height / 2).waitAction(2000).moveTo(slider,1,size.height / 2).release();
  swipe.perform();
  assertEquals(""String_Node_Str"",slider.getAttribute(""String_Node_Str""));
}",0.9707446808510638
20306,"@Test public void multiTouchTest(){
  driver.findElementById(""String_Node_Str"").sendKeys(""String_Node_Str"");
  driver.findElementById(""String_Node_Str"").sendKeys(""String_Node_Str"");
  MobileElement e=driver.findElementByAccessibilityId(""String_Node_Str"");
  TouchAction tap=new TouchAction(driver).tap(e).perform();
  MobileElement slider=driver.findElementByClassName(""String_Node_Str"");
  Dimension size=slider.getSize();
  TouchAction swipe=new TouchAction(driver).press(slider,size.width / 2,size.height / 2).waitAction(2000).moveTo(slider).release();
  new MultiTouchAction(driver).add(tap).add(swipe).perform();
  assertEquals(driver.findElementByXPath(""String_Node_Str"").getText(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",slider.getAttribute(""String_Node_Str""));
}","@Test public void multiTouchTest(){
  MobileElement e=driver.findElementByAccessibilityId(""String_Node_Str"");
  TouchAction tap1=new TouchAction(driver).tap(e);
  TouchAction tap2=new TouchAction(driver).tap(driver.findElement(MobileBy.IosUIAutomation(""String_Node_Str"")));
  new MultiTouchAction(driver).add(tap1).add(tap2).perform();
  WebDriverWait waiting=new WebDriverWait(driver,10000);
  assertNotNull(waiting.until(alertIsPresent()));
  driver.switchTo().alert().accept();
}",0.183399209486166
20307,"@Test public void tapTest(){
  driver.findElementById(""String_Node_Str"").sendKeys(""String_Node_Str"");
  driver.findElementById(""String_Node_Str"").sendKeys(""String_Node_Str"");
  MobileElement e=driver.findElementByAccessibilityId(""String_Node_Str"");
  new TouchAction(driver).tap(e).perform();
  assertEquals(driver.findElementByXPath(""String_Node_Str"").getText(),""String_Node_Str"");
}","@Test public void tapTest(){
  IOSElement intA=driver.findElementById(""String_Node_Str"");
  IOSElement intB=driver.findElementById(""String_Node_Str"");
  intA.clear();
  intB.clear();
  intA.sendKeys(""String_Node_Str"");
  intB.sendKeys(""String_Node_Str"");
  MobileElement e=driver.findElementByAccessibilityId(""String_Node_Str"");
  new TouchAction(driver).tap(e).perform();
  assertEquals(driver.findElementByXPath(""String_Node_Str"").getText(),""String_Node_Str"");
}",0.8089622641509434
20308,"/** 
 * Get settings stored for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to read.
 * @return JsonObject, a straight-up hash of settings.
 */
default JsonObject getSettings(){
  Map.Entry<String,Map<String,?>> keyValuePair=getSettingsCommand();
  Response response=execute(keyValuePair.getKey(),keyValuePair.getValue());
  JsonParser parser=new JsonParser();
  return (JsonObject)parser.parse(response.getValue().toString());
}","/** 
 * Get settings stored for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to read.
 * @return JsonObject, a straight-up hash of settings.
 */
@SuppressAjWarnings(""String_Node_Str"") default Map<String,Object> getSettings(){
  Map.Entry<String,Map<String,?>> keyValuePair=getSettingsCommand();
  Response response=execute(keyValuePair.getKey(),keyValuePair.getValue());
  return (Map<String,Object>)response.getValue();
}",0.8467153284671532
20309,"protected MobileElement newMobileElement(){
  Class<? extends MobileElement> target=mobileElementMap.get(automation);
  if (target == null) {
    target=mobileElementMap.get(platform);
  }
  if (target == null) {
    throw new RuntimeException(new ClassNotFoundException(""String_Node_Str"" + ""String_Node_Str""));
  }
  try {
    Constructor<? extends MobileElement> constructor=target.getDeclaredConstructor();
    constructor.setAccessible(true);
    MobileElement result=constructor.newInstance();
    result.setParent(driver);
    return result;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","protected MobileElement newMobileElement(){
  Class<? extends MobileElement> target=mobileElementMap.get(automation);
  if (target == null) {
    target=mobileElementMap.get(platform);
  }
  if (target == null) {
    throw new WebDriverException(new ClassNotFoundException(""String_Node_Str"" + ""String_Node_Str""));
  }
  try {
    Constructor<? extends MobileElement> constructor=target.getDeclaredConstructor();
    constructor.setAccessible(true);
    MobileElement result=constructor.newInstance();
    result.setParent(driver);
    return result;
  }
 catch (  Exception e) {
    throw new WebDriverException(e);
  }
}",0.974151857835218
20310,"@Test public void openNotification() throws Exception {
  driver.closeApp();
  driver.openNotifications();
  WebDriverWait wait=new WebDriverWait(driver,20000);
  assertNotEquals(0,wait.until(new Function<WebDriver,List<AndroidElement>>(){
    @Override public List<AndroidElement> apply(    WebDriver input){
      List<AndroidElement> result=driver.findElementsById(""String_Node_Str"");
      if (result.size() == 0) {
        return null;
      }
      return result;
    }
  }
).size());
}","@Test public void openNotification() throws Exception {
  driver.closeApp();
  driver.openNotifications();
  WebDriverWait wait=new WebDriverWait(driver,20);
  assertNotEquals(0,wait.until(new Function<WebDriver,List<AndroidElement>>(){
    @Override public List<AndroidElement> apply(    WebDriver input){
      List<AndroidElement> result=driver.findElementsById(""String_Node_Str"");
      if (result.size() == 0) {
        return null;
      }
      return result;
    }
  }
).size());
}",0.9969418960244648
20311,"@Test public void ignoreUnimportantViewsTest(){
  driver.ignoreUnimportantViews(true);
  boolean ignoreViews=driver.getSettings().get(Setting.IGNORE_UNIMPORTANT_VIEWS.toString()).getAsBoolean();
  assertTrue(ignoreViews);
  driver.ignoreUnimportantViews(false);
  ignoreViews=driver.getSettings().get(Setting.IGNORE_UNIMPORTANT_VIEWS.toString()).getAsBoolean();
  assertFalse(ignoreViews);
}","@Test public void ignoreUnimportantViewsTest(){
  driver.ignoreUnimportantViews(true);
  assertEquals(true,driver.getSettings().get(Setting.IGNORE_UNIMPORTANT_VIEWS.toString()));
  driver.ignoreUnimportantViews(false);
  assertEquals(false,driver.getSettings().get(Setting.IGNORE_UNIMPORTANT_VIEWS.toString()));
}",0.7840909090909091
20312,"private void assertJSONElementContains(Setting setting,int value){
  assertEquals(driver.getSettings().get(setting.toString()).getAsInt(),value);
}","private void assertJSONElementContains(Setting setting,long value){
  assertEquals(driver.getSettings().get(setting.toString()),value);
}",0.943661971830986
20313,"/** 
 * initialization.
 */
@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,MobilePlatform.IOS);
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new AppiumDriver<>(service.getUrl(),capabilities);
}","/** 
 * initialization.
 */
@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,MobilePlatform.IOS);
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new AppiumDriver<>(service.getUrl(),capabilities);
}",0.980372420734776
20314,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 * @throws {@link org.openqa.selenium.NoSuchElementException} when no one element is found
 */
default T findElementByAccessibilityId(String using){
  return findElement(MobileSelector.ACCESSIBILITY.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 * @throws NoSuchElementException when no one element is found
 */
default T findElementByAccessibilityId(String using){
  return findElement(MobileSelector.ACCESSIBILITY.toString(),using);
}",0.5964343598055105
20315,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 */
default List<T> findElementsByAccessibilityId(String using){
  return findElements(MobileSelector.ACCESSIBILITY.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 */
default List<T> findElementsByAccessibilityId(String using){
  return findElements(MobileSelector.ACCESSIBILITY.toString(),using);
}",0.7933194154488518
20316,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 */
default List<T> findElementsByAndroidUIAutomator(String using){
  return findElements(MobileSelector.ANDROID_UI_AUTOMATOR.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 */
default List<T> findElementsByAndroidUIAutomator(String using){
  return findElements(MobileSelector.ANDROID_UI_AUTOMATOR.toString(),using);
}",0.8657314629258517
20317,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 * @throws {@link org.openqa.selenium.NoSuchElementException} when no one element is found
 */
default T findElementByAndroidUIAutomator(String using){
  return findElement(MobileSelector.ANDROID_UI_AUTOMATOR.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 * @throws NoSuchElementException when no one element is found
 */
default T findElementByAndroidUIAutomator(String using){
  return findElement(MobileSelector.ANDROID_UI_AUTOMATOR.toString(),using);
}",0.609105180533752
20318,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException}This method is not applicable with browser/webview UI.
 * @throws {@link org.openqa.selenium.NoSuchElementException} when no one element is found
 */
default T findElementByIosUIAutomation(String using){
  return findElement(MobileSelector.IOS_UI_AUTOMATION.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 * @throws NoSuchElementException when no one element is found
 */
default T findElementByIosUIAutomation(String using){
  return findElement(MobileSelector.IOS_UI_AUTOMATION.toString(),using);
}",0.6016
20319,"/** 
 * @throws {@link org.openqa.selenium.WebDriverException}This method is not applicable with browser/webview UI.
 */
default List<T> findElementsByIosUIAutomation(String using){
  return findElements(MobileSelector.IOS_UI_AUTOMATION.toString(),using);
}","/** 
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 */
default List<T> findElementsByIosUIAutomation(String using){
  return findElements(MobileSelector.IOS_UI_AUTOMATION.toString(),using);
}",0.9404517453798767
20320,"/** 
 * Finds the first of elements that match the Windows UIAutomation selector supplied.
 * @param selector a Windows UIAutomation selector
 * @return The first element that matches the given selector
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 * @throws {@link org.openqa.selenium.NoSuchElementException} when no one element is found
 */
default T findElementByWindowsUIAutomation(String selector){
  return findElement(MobileSelector.WINDOWS_UI_AUTOMATION.toString(),selector);
}","/** 
 * Finds the first of elements that match the Windows UIAutomation selector supplied.
 * @param selector a Windows UIAutomation selector
 * @return The first element that matches the given selector
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 * @throws NoSuchElementException when no one element is found
 */
default T findElementByWindowsUIAutomation(String selector){
  return findElement(MobileSelector.WINDOWS_UI_AUTOMATION.toString(),selector);
}",0.9456625357483316
20321,"/** 
 * Finds a list of elements that match the Windows UIAutomation selector supplied.
 * @param selector a Windows UIAutomation selector
 * @return a list of elements that match the given selector
 * @throws {@link org.openqa.selenium.WebDriverException} This method is notapplicable with browser/webview UI.
 */
default List<T> findElementsByWindowsUIAutomation(String selector){
  return findElements(MobileSelector.WINDOWS_UI_AUTOMATION.toString(),selector);
}","/** 
 * Finds a list of elements that match the Windows UIAutomation selector supplied.
 * @param selector a Windows UIAutomation selector
 * @return a list of elements that match the given selector
 * @throws WebDriverException This method is not applicable with browser/webview UI.
 */
default List<T> findElementsByWindowsUIAutomation(String selector){
  return findElements(MobileSelector.WINDOWS_UI_AUTOMATION.toString(),selector);
}",0.9678848283499446
20322,"@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(service.getUrl(),capabilities);
}","@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(service.getUrl(),capabilities);
}",0.9777777777777776
20323,"@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(service.getUrl(),capabilities);
}","@BeforeClass public static void beforeClass() throws Exception {
  service=AppiumDriverLocalService.buildDefaultService();
  service.start();
  if (service == null || !service.isRunning()) {
    throw new AppiumServerHasNotBeenStartedLocallyException(""String_Node_Str"");
  }
  File appDir=new File(""String_Node_Str"");
  File app=new File(appDir,""String_Node_Str"");
  DesiredCapabilities capabilities=new DesiredCapabilities();
  capabilities.setCapability(MobileCapabilityType.BROWSER_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,""String_Node_Str"");
  capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,500000);
  capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,""String_Node_Str"");
  capabilities.setCapability(MobileCapabilityType.APP,app.getAbsolutePath());
  driver=new IOSDriver<>(service.getUrl(),capabilities);
}",0.9777777777777776
20324,"@Test public void acceptAlertTest(){
  driver.findElement(MobileBy.IosUIAutomation(iOSAutomationText)).click();
  waiting.until(alertIsPresent());
  driver.switchTo().alert().accept();
}","@Test public void acceptAlertTest(){
  Supplier<Boolean> acceptAlert=() -> {
    driver.findElement(MobileBy.IosUIAutomation(iOSAutomationText)).click();
    waiting.until(alertIsPresent());
    driver.switchTo().alert().accept();
    return true;
  }
;
  assertTrue(acceptAlert.get());
}",0.7848101265822784
20325,"@Test public void dismissAlertTest(){
  driver.findElement(MobileBy.IosUIAutomation(iOSAutomationText)).click();
  waiting.until(alertIsPresent());
  driver.switchTo().alert().dismiss();
}","@Test public void dismissAlertTest(){
  Supplier<Boolean> dismissAlert=() -> {
    driver.findElement(MobileBy.IosUIAutomation(iOSAutomationText)).click();
    waiting.until(alertIsPresent());
    driver.switchTo().alert().dismiss();
    return true;
  }
;
  assertTrue(dismissAlert.get());
}",0.7833333333333333
20326,"@Test public void lockTest(){
  driver.lockDevice(20);
}","@Test public void lockTest(){
  Supplier<Boolean> lock=() -> {
    driver.lockDevice(20);
    return true;
  }
;
  assertTrue(lock.get());
}",0.5714285714285714
20327,"@Test public void whenFewTreadsDoDifferentWork() throws Throwable {
  TestThread runTestThread=new TestThread(run);
  TestThread runTestThread2=new TestThread(run2);
  TestThread isRunningTestThread=new TestThread(isRunning);
  TestThread isRunningTestThread2=new TestThread(isRunning2);
  TestThread stopTestThread=new TestThread(stop);
  TestThread stopTestThread2=new TestThread(stop2);
  Thread runThread=new Thread(runTestThread);
  Thread runThread2=new Thread(runTestThread2);
  Thread isRunningThread=new Thread(isRunningTestThread);
  Thread isRunningThread2=new Thread(isRunningTestThread2);
  Thread stopThread=new Thread(stopTestThread);
  Thread stopThread2=new Thread(stopTestThread2);
  try {
    runThread.start();
    Thread.sleep(10);
    isRunningThread.start();
    Thread.sleep(10);
    stopThread.start();
    while (runThread.isAlive() || isRunningThread.isAlive() || stopThread.isAlive()) {
    }
    if (runTestThread.throwable != null) {
      throw runTestThread.throwable;
    }
    if (isRunningTestThread.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (stopTestThread.throwable != null) {
      throw stopTestThread.throwable;
    }
    assertTrue(runTestThread.result.equals(""String_Node_Str""));
    assertTrue(isRunningTestThread.result.equals(true));
    assertTrue(stopTestThread.result.equals(""String_Node_Str""));
    assertTrue(!service.isRunning());
    isRunningThread2.start();
    Thread.sleep(10);
    stopThread2.start();
    Thread.sleep(10);
    runThread2.start();
    while (runThread2.isAlive() || isRunningThread2.isAlive() || stopThread2.isAlive()) {
    }
    if (runTestThread2.throwable != null) {
      throw runTestThread.throwable;
    }
    if (isRunningTestThread2.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (stopTestThread2.throwable != null) {
      throw stopTestThread.throwable;
    }
    assertTrue(isRunningTestThread2.result.equals(false));
    assertTrue(stopTestThread2.result.equals(""String_Node_Str""));
    assertTrue(runTestThread2.result.equals(""String_Node_Str""));
    assertTrue(service.isRunning());
  }
  finally {
    if (service.isRunning()) {
      service.stop();
    }
  }
}","@Test public void whenFewTreadsDoDifferentWork() throws Throwable {
  TestThread runTestThread=new TestThread(run);
  TestThread runTestThread2=new TestThread(run2);
  TestThread isRunningTestThread=new TestThread(isRunning);
  TestThread isRunningTestThread2=new TestThread(isRunning2);
  TestThread stopTestThread=new TestThread(stop);
  TestThread stopTestThread2=new TestThread(stop2);
  Thread runThread=new Thread(runTestThread);
  Thread runThread2=new Thread(runTestThread2);
  Thread isRunningThread=new Thread(isRunningTestThread);
  Thread isRunningThread2=new Thread(isRunningTestThread2);
  Thread stopThread=new Thread(stopTestThread);
  Thread stopThread2=new Thread(stopTestThread2);
  try {
    runThread.start();
    Thread.sleep(10);
    isRunningThread.start();
    Thread.sleep(10);
    stopThread.start();
    while (runThread.isAlive() || isRunningThread.isAlive() || stopThread.isAlive()) {
    }
    if (runTestThread.throwable != null) {
      throw runTestThread.throwable;
    }
    if (isRunningTestThread.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (stopTestThread.throwable != null) {
      throw stopTestThread.throwable;
    }
    assertTrue(""String_Node_Str"".equals(runTestThread.result));
    assertTrue(Boolean.TRUE.equals(isRunningTestThread.result));
    assertTrue(""String_Node_Str"".equals(stopTestThread.result));
    assertFalse(service.isRunning());
    isRunningThread2.start();
    Thread.sleep(10);
    stopThread2.start();
    Thread.sleep(10);
    runThread2.start();
    while (runThread2.isAlive() || isRunningThread2.isAlive() || stopThread2.isAlive()) {
    }
    if (runTestThread2.throwable != null) {
      throw runTestThread.throwable;
    }
    if (isRunningTestThread2.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (stopTestThread2.throwable != null) {
      throw stopTestThread.throwable;
    }
    assertTrue(Boolean.FALSE.equals(isRunningTestThread2.result));
    assertTrue(""String_Node_Str"".equals(stopTestThread2.result));
    assertTrue(""String_Node_Str"".equals(runTestThread2.result));
    assertTrue(service.isRunning());
  }
  finally {
    if (service.isRunning()) {
      service.stop();
    }
  }
}",0.8867924528301887
20328,"@Test public void whenFewTreadsDoTheSameWork() throws Throwable {
  TestThread runTestThread=new TestThread(run);
  TestThread runTestThread2=new TestThread(run2);
  TestThread isRunningTestThread=new TestThread(isRunning);
  TestThread isRunningTestThread2=new TestThread(isRunning2);
  TestThread stopTestThread=new TestThread(stop);
  TestThread stopTestThread2=new TestThread(stop2);
  Thread runThread=new Thread(runTestThread);
  Thread runThread2=new Thread(runTestThread2);
  Thread isRunningThread=new Thread(isRunningTestThread);
  Thread isRunningThread2=new Thread(isRunningTestThread2);
  Thread stopThread=new Thread(stopTestThread);
  Thread stopThread2=new Thread(stopTestThread2);
  try {
    runThread.start();
    runThread2.start();
    while (runThread.isAlive() || runThread2.isAlive()) {
    }
    if (runTestThread.throwable != null) {
      throw runTestThread.throwable;
    }
    if (runTestThread2.throwable != null) {
      throw runTestThread2.throwable;
    }
    assertTrue(runTestThread.result.equals(""String_Node_Str""));
    assertTrue(runTestThread2.result.equals(""String_Node_Str""));
    assertTrue(service.isRunning());
    isRunningThread.start();
    isRunningThread2.start();
    while (isRunningThread.isAlive() || isRunningThread2.isAlive()) {
    }
    if (isRunningTestThread.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (isRunningTestThread2.throwable != null) {
      throw isRunningTestThread2.throwable;
    }
    assertTrue(isRunningTestThread.result.equals(true));
    assertTrue(isRunningTestThread2.result.equals(true));
    stopThread.start();
    stopThread2.start();
    while (stopThread.isAlive() || stopThread2.isAlive()) {
    }
    if (stopTestThread.throwable != null) {
      throw stopTestThread.throwable;
    }
    if (stopTestThread2.throwable != null) {
      throw stopTestThread2.throwable;
    }
    assertTrue(stopTestThread.result.equals(""String_Node_Str""));
    assertTrue(stopTestThread2.result.equals(""String_Node_Str""));
    assertTrue(!service.isRunning());
  }
  finally {
    if (service.isRunning()) {
      service.stop();
    }
  }
}","@Test public void whenFewTreadsDoTheSameWork() throws Throwable {
  TestThread runTestThread=new TestThread(run);
  TestThread runTestThread2=new TestThread(run2);
  TestThread isRunningTestThread=new TestThread(isRunning);
  TestThread isRunningTestThread2=new TestThread(isRunning2);
  TestThread stopTestThread=new TestThread(stop);
  TestThread stopTestThread2=new TestThread(stop2);
  Thread runThread=new Thread(runTestThread);
  Thread runThread2=new Thread(runTestThread2);
  Thread isRunningThread=new Thread(isRunningTestThread);
  Thread isRunningThread2=new Thread(isRunningTestThread2);
  Thread stopThread=new Thread(stopTestThread);
  Thread stopThread2=new Thread(stopTestThread2);
  try {
    runThread.start();
    runThread2.start();
    while (runThread.isAlive() || runThread2.isAlive()) {
    }
    if (runTestThread.throwable != null) {
      throw runTestThread.throwable;
    }
    if (runTestThread2.throwable != null) {
      throw runTestThread2.throwable;
    }
    assertTrue(""String_Node_Str"".equals(runTestThread.result));
    assertTrue(""String_Node_Str"".equals(runTestThread2.result));
    assertTrue(service.isRunning());
    isRunningThread.start();
    isRunningThread2.start();
    while (isRunningThread.isAlive() || isRunningThread2.isAlive()) {
    }
    if (isRunningTestThread.throwable != null) {
      throw isRunningTestThread.throwable;
    }
    if (isRunningTestThread2.throwable != null) {
      throw isRunningTestThread2.throwable;
    }
    assertTrue(isRunningTestThread.result.equals(true));
    assertTrue(isRunningTestThread2.result.equals(true));
    stopThread.start();
    stopThread2.start();
    while (stopThread.isAlive() || stopThread2.isAlive()) {
    }
    if (stopTestThread.throwable != null) {
      throw stopTestThread.throwable;
    }
    if (stopTestThread2.throwable != null) {
      throw stopTestThread2.throwable;
    }
    assertTrue(""String_Node_Str"".equals(stopTestThread.result));
    assertTrue(""String_Node_Str"".equals(stopTestThread2.result));
    assertFalse(service.isRunning());
  }
  finally {
    if (service.isRunning()) {
      service.stop();
    }
  }
}",0.9301350721937588
20329,"@Test public void checkThatTestWillNotBeFailedBecauseOfInvalidFindBy(){
  try {
    assertNotEquals(null,elementWhenAndroidLocatorIsNotDefinedAndThereIsInvalidFindBy.getAttribute(""String_Node_Str""));
  }
 catch (  NoSuchElementException ignored) {
    return;
  }
  throw new RuntimeException(NoSuchElementException.class.getName() + ""String_Node_Str"");
}","@Test(expected=NoSuchElementException.class) public void checkThatTestWillNotBeFailedBecauseOfInvalidFindBy(){
  assertNotNull(elementWhenAndroidLocatorIsNotDefinedAndThereIsInvalidFindBy.getAttribute(""String_Node_Str""));
}",0.5882352941176471
20330,"@Test public void checkThatElementWasNotFoundByIOSUIAutomator(){
  NoSuchElementException nsee=null;
  try {
    iosTextView.getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    nsee=(NoSuchElementException)e;
  }
  assertNotNull(nsee);
}","@Test(expected=NoSuchElementException.class) public void checkThatElementWasNotFoundByIOSUIAutomator(){
  assertNotNull(iosTextView.getAttribute(""String_Node_Str""));
}",0.5741626794258373
20331,"@Test public void checkThatElementWasNotFoundByIOSUIAutomatorChain(){
  NoSuchElementException nsee=null;
  try {
    iosChainTextView.getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    nsee=(NoSuchElementException)e;
  }
  assertNotNull(nsee);
}","@Test(expected=NoSuchElementException.class) public void checkThatElementWasNotFoundByIOSUIAutomatorChain(){
  assertNotNull(iosChainTextView.getAttribute(""String_Node_Str""));
}",0.593607305936073
20332,"@Test public void chromeTest(){
  setUp();
  test();
}","@Test public void chromeTest(){
  WebDriver driver=new ChromeDriver();
  try {
    PageFactory.initElements(new AppiumFieldDecorator(driver,15,TimeUnit.SECONDS),this);
    driver.get(new File(""String_Node_Str"").toURI().toString());
    assertNotEquals(0,foundLinks.size());
    assertNotEquals(0,main.size());
    assertEquals(null,trap1);
    assertEquals(null,trap2);
  }
  finally {
    driver.quit();
  }
}",0.1594827586206896
20333,"@Test public void genericTestCse(){
  PageFactory.initElements(new AppiumFieldDecorator(new MockWebDriver()),new TempGenericPage<>());
}","@Test public void genericTestCse(){
  Supplier<Boolean> result=() -> {
    PageFactory.initElements(new AppiumFieldDecorator(new MockWebDriver()),new TempGenericPage<>());
    return true;
  }
;
  assertTrue(result.get());
}",0.7555555555555555
20334,"@Test public void checkThatTestWillNotBeFailedBecauseOfInvalidFindBy(){
  try {
    assertNotEquals(null,elementWhenAndroidLocatorIsNotDefinedAndThereIsInvalidFindBy.getAttribute(""String_Node_Str""));
  }
 catch (  NoSuchElementException ignored) {
    return;
  }
  throw new RuntimeException(NoSuchElementException.class.getName() + ""String_Node_Str"");
}","@Test(expected=NoSuchElementException.class) public void checkThatTestWillNotBeFailedBecauseOfInvalidFindBy(){
  assertNotNull(elementWhenAndroidLocatorIsNotDefinedAndThereIsInvalidFindBy.getAttribute(""String_Node_Str""));
}",0.5882352941176471
20335,"@Test public void checkThatElementWasNotFoundByAndroidUIAutomator(){
  NoSuchElementException nsee=null;
  try {
    androidUIAutomatorView.getText();
  }
 catch (  Exception e) {
    nsee=(NoSuchElementException)e;
  }
  assertNotNull(nsee);
}","@Test(expected=NoSuchElementException.class) public void checkThatElementWasNotFoundByAndroidUIAutomator(){
  assertNotNull(androidUIAutomatorView.getText());
}",0.5594059405940595
20336,"@Test public void checkThatElementWasNotFoundByAndroidUIAutomatorChain(){
  NoSuchElementException nsee=null;
  try {
    chainElementView.getText();
  }
 catch (  Exception e) {
    nsee=(NoSuchElementException)e;
  }
  assertNotNull(nsee);
}","@Test(expected=NoSuchElementException.class) public void checkThatElementWasNotFoundByAndroidUIAutomatorChain(){
  assertNotNull(chainElementView.getText());
}",0.5572139303482587
20337,"/** 
 * Method performs the searching for a single element by some selector defined by string and value of the given selector
 * @param by is a string selector
 * @param using is a value of the given selector
 * @return the first found element
 * @throws {@link org.openqa.selenium.WebDriverException} when current session doesn'tsupport the given selector or when value of the selector is not consistent.
 * @throws {@link org.openqa.selenium.NoSuchElementException} when no one element is found
 */
T findElement(String by,String using) throws WebDriverException ;","/** 
 * Method performs the searching for a single element by some selector defined by string and value of the given selector
 * @param by is a string selector
 * @param using is a value of the given selector
 * @return the first found element
 * @throws org.openqa.selenium.WebDriverException when current session doesn'tsupport the given selector or when value of the selector is not consistent.
 * @throws org.openqa.selenium.NoSuchElementException when no one element is found
 */
T findElement(String by,String using);",0.960514233241506
20338,"/** 
 * Method performs the searching for a list of elements by some selector defined by string and value of the given selector
 * @param by is a string selector
 * @param using is a value of the given selector
 * @return a list of elements
 * @throws {@link org.openqa.selenium.WebDriverException} when current session doesn't supportthe given selector or when value of the selector is not consistent.
 */
List<T> findElements(String by,String using) throws WebDriverException ;","/** 
 * Method performs the searching for a list of elements by some selector defined by string and value of the given selector
 * @param by is a string selector
 * @param using is a value of the given selector
 * @return a list of elements
 * @throws org.openqa.selenium.WebDriverException when current session doesn't supportthe given selector or when value of the selector is not consistent.
 */
List<T> findElements(String by,String using);",0.962080173347779
20339,"/** 
 * This method was moved to   {@link MobileCommand#hideKeyboardCommand(String,String)}
 */
@Deprecated public static Map.Entry<String,Map<String,?>> lockDeviceCommand(){
  return new AbstractMap.SimpleEntry<>(LOCK,prepareArguments(""String_Node_Str"",0));
}","/** 
 * This method was moved to   {@link MobileCommand#hideKeyboardCommand(String,String)}.
 */
@Deprecated public static Map.Entry<String,Map<String,?>> lockDeviceCommand(){
  return new AbstractMap.SimpleEntry<>(LOCK,prepareArguments(""String_Node_Str"",0));
}",0.9980806142034548
20340,"public JsonToMobileElementConverter(RemoteWebDriver driver,Map<String,Object> sessionParameters){
  super(driver);
  this.driver=driver;
  automation=String.valueOf(sessionParameters.get(AUTOMATION_NAME_PARAMETER)).toLowerCase();
  platform=String.valueOf(sessionParameters.get(PLATFORM_NAME_PARAMETER)).toLowerCase();
}","/** 
 * @param driver an instance of {@link org.openqa.selenium.remote.RemoteWebDriver} subclass
 * @param sessionParameters the map of current session parameters
 */
public JsonToMobileElementConverter(RemoteWebDriver driver,Map<String,Object> sessionParameters){
  super(driver);
  this.driver=driver;
  automation=String.valueOf(sessionParameters.get(AUTOMATION_NAME_PARAMETER)).toLowerCase();
  platform=String.valueOf(sessionParameters.get(PLATFORM_NAME_PARAMETER)).toLowerCase();
}",0.7930607187112764
20341,"/** 
 * This method was moved to   {@link MobileCommand#hideKeyboardCommand(String,String)}
 */
@Deprecated public static Map.Entry<String,Map<String,?>> hideKeyboardCommand(String strategy,String keyName){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{strategy,keyName};
  return new AbstractMap.SimpleEntry<>(HIDE_KEYBOARD,prepareArguments(parameters,values));
}","/** 
 * This method was moved to   {@link MobileCommand#hideKeyboardCommand(String,String)}.
 */
@Deprecated public static Map.Entry<String,Map<String,?>> hideKeyboardCommand(String strategy,String keyName){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{strategy,keyName};
  return new AbstractMap.SimpleEntry<>(HIDE_KEYBOARD,prepareArguments(parameters,values));
}",0.9988165680473372
20342,"/** 
 * This method was moved to   {@link MobileCommand#lockDeviceCommand(int)}
 */
@Deprecated public static Map.Entry<String,Map<String,?>> lockDeviceCommand(int seconds){
  return new AbstractMap.SimpleEntry<>(LOCK,prepareArguments(""String_Node_Str"",seconds));
}","/** 
 * This method was moved to   {@link MobileCommand#lockDeviceCommand(int)}.
 */
@Deprecated public static Map.Entry<String,Map<String,?>> lockDeviceCommand(int seconds){
  return new AbstractMap.SimpleEntry<>(LOCK,prepareArguments(""String_Node_Str"",seconds));
}",0.9981167608286252
20343,"@Deprecated public void pinch(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=this.manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y - yOffset).moveTo(x,y).release();
  TouchAction action1=new TouchAction(this).press(x,y + yOffset).moveTo(x,y).release();
  multiTouch.add(action0).add(action1).perform();
}","/** 
 * This method is deprecated and it is going to be removed soon. Please use   {@link MultiTouchAction#pinch(int,int,int,int)} or{@link MultiTouchAction#pinch(int,int,int)}
 */
@Deprecated public void pinch(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=this.manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y - yOffset).moveTo(x,y).release();
  TouchAction action1=new TouchAction(this).press(x,y + yOffset).moveTo(x,y).release();
  multiTouch.add(action0).add(action1).perform();
}",0.8507831821929102
20344,"@Deprecated public void tap(int fingers,int x,int y,int duration){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  for (int i=0; i < fingers; i++) {
    multiTouch.add(createTap(x,y,duration));
  }
  multiTouch.perform();
}","/** 
 * This method is deprecated and it is going to be removed soon. Please use   {@link MultiTouchAction#tap(int,int,int,int)}.
 */
@Deprecated public void tap(int fingers,int x,int y,int duration){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  for (int i=0; i < fingers; i++) {
    multiTouch.add(createTap(x,y,duration));
  }
  multiTouch.perform();
}",0.7781456953642384
20345,"@Deprecated public void zoom(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=this.manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y).moveTo(0,-yOffset).release();
  TouchAction action1=new TouchAction(this).press(x,y).moveTo(0,yOffset).release();
  multiTouch.add(action0).add(action1).perform();
}","/** 
 * This method is deprecated and it is going to be removed soon. Please use   {@link MultiTouchAction#zoom(int,int,int,int)} or{@link MultiTouchAction#zoom(int,int,int)}.
 */
@Deprecated public void zoom(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=this.manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y).moveTo(0,-yOffset).release();
  TouchAction action1=new TouchAction(this).press(x,y).moveTo(0,yOffset).release();
  multiTouch.add(action0).add(action1).perform();
}",0.8494983277591973
20346,"@Deprecated public void swipe(int startx,int starty,int endx,int endy,int duration){
}","/** 
 * This method is deprecated. It was moved to   {@link CreatesSwipeAction#swipe(int,int,int,int,int)}.
 */
@Deprecated public void swipe(int startx,int starty,int endx,int endy,int duration){
}",0.6056338028169014
20347,"/** 
 * Get the mjsonwp parameters for this Action.
 * @return A map of parameters for this touch action to pass as part of mjsonwp.
 */
protected ImmutableMap<String,ImmutableList<Object>> getParameters(){
  ImmutableList.Builder<Object> parameters=ImmutableList.builder();
  ImmutableList<ActionParameter> actionList=parameterBuilder.build();
  actionList.forEach(action -> {
    parameters.add(action.getParameterMap());
  }
);
  return ImmutableMap.of(""String_Node_Str"",parameters.build());
}","/** 
 * Get the mjsonwp parameters for this Action.
 * @return A map of parameters for this touch action to pass as part of mjsonwp.
 */
protected ImmutableMap<String,ImmutableList<Object>> getParameters(){
  ImmutableList.Builder<Object> parameters=ImmutableList.builder();
  ImmutableList<ActionParameter> actionList=parameterBuilder.build();
  actionList.forEach(action -> parameters.add(action.getParameterMap()));
  return ImmutableMap.of(""String_Node_Str"",parameters.build());
}",0.9877551020408164
20348,"@Deprecated public static Map.Entry<String,Map<String,?>> pressKeyCodeCommand(int key,Integer metastate){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{key,metastate};
  return new AbstractMap.SimpleEntry<>(PRESS_KEY_CODE,prepareArguments(parameters,values));
}","/** 
 * It is deprecated. Please use   {@link MobileCommand#pressKeyCodeCommand(int,Integer)} instead.
 */
@Deprecated public static Map.Entry<String,Map<String,?>> pressKeyCodeCommand(int key,Integer metastate){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{key,metastate};
  return new AbstractMap.SimpleEntry<>(PRESS_KEY_CODE,prepareArguments(parameters,values));
}",0.8563758389261745
20349,"@Deprecated public static Map.Entry<String,Map<String,?>> longPressKeyCodeCommand(int key,Integer metastate){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{key,metastate};
  return new AbstractMap.SimpleEntry<>(LONG_PRESS_KEY_CODE,prepareArguments(parameters,values));
}","/** 
 * It is deprecated. Please use   {@link MobileCommand#longPressKeyCodeCommand(int,Integer)} instead.
 */
@Deprecated public static Map.Entry<String,Map<String,?>> longPressKeyCodeCommand(int key,Integer metastate){
  String[] parameters=new String[]{""String_Node_Str"",""String_Node_Str""};
  Object[] values=new Object[]{key,metastate};
  return new AbstractMap.SimpleEntry<>(LONG_PRESS_KEY_CODE,prepareArguments(parameters,values));
}",0.8552803129074316
20350,"/** 
 * Executes JSONWP command and returns a response
 * @param driverCommand a JSONWP command
 * @return a result response
 */
Response execute(String driverCommand);","/** 
 * Executes JSONWP command and returns a response.
 * @param driverCommand a JSONWP command
 * @return a result response
 */
Response execute(String driverCommand);",0.9970326409495548
20351,"/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext     The context to use when finding the element
 * @param by                a By locator strategy
 * @param shouldCache       is the flag that signalizes that elements whichare found once should be cached
 * @param duration          is a POJO which contains timeout parameters
 * @param originalWebDriver is an instance of WebDriver that is going to beused by a proxied element
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration,WebDriver originalWebDriver){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.timeOutDuration=duration;
  this.by=by;
  this.originalWebDriver=originalWebDriver;
  waitingFunction=new WaitingFunction(this.searchContext);
}","/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext     The context to use when finding the element
 * @param by                a By locator strategy
 * @param shouldCache       is the flag that signalizes that elements whichare found once should be cached
 * @param duration          is a POJO which contains timeout parameters for the element to be searched
 * @param originalDuration  is a POJO which contains timeout parameters from page object which contains the element
 * @param originalWebDriver is an instance of WebDriver that is going to beused by a proxied element
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration,TimeOutDuration originalDuration,WebDriver originalWebDriver){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.timeOutDuration=duration;
  this.originalTimeOutDuration=originalDuration;
  this.by=by;
  this.originalWebDriver=originalWebDriver;
  waitingFunction=new WaitingFunction(this.searchContext);
}",0.889318511358144
20352,"private List<WebElement> waitFor(){
  try {
    changeImplicitlyWaitTimeOut(0,TimeUnit.SECONDS);
    FluentWait<By> wait=new FluentWait<>(by);
    wait.withTimeout(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
    return wait.until(waitingFunction);
  }
 catch (  TimeoutException e) {
    return new ArrayList<>();
  }
 finally {
    changeImplicitlyWaitTimeOut(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
  }
}","private List<WebElement> waitFor(){
  try {
    changeImplicitlyWaitTimeOut(0,TimeUnit.SECONDS);
    FluentWait<By> wait=new FluentWait<>(by);
    wait.withTimeout(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
    return wait.until(waitingFunction);
  }
 catch (  TimeoutException e) {
    return new ArrayList<>();
  }
 finally {
    changeImplicitlyWaitTimeOut(originalTimeOutDuration.getTime(),originalTimeOutDuration.getTimeUnit());
  }
}",0.9775784753363228
20353,"@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=timeOutDuration;
  }
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null) {
    return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,originalWebDriver);
  }
  return null;
}","@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=timeOutDuration;
  }
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null) {
    return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,timeOutDuration,originalWebDriver);
  }
  return null;
}",0.9871589085072232
20354,"/** 
 * Set a setting for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to change.
 * @param setting AppiumSetting you wish to set.
 * @param value   value of the setting.
 */
protected void setSetting(AppiumSetting setting,Object value){
  setSettings(MobileCommand.prepareArguments(setting.toString(),value));
}","/** 
 * Set a setting for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to change.
 * @param setting AppiumSetting you wish to set.
 * @param value   value of the setting.
 */
protected void setSetting(AppiumSetting setting,Object value){
  setSettings(prepareArguments(setting.toString(),value));
}",0.9836065573770492
20355,"/** 
 * Set settings for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to change.
 * @param settings Map of setting keys and values.
 */
private void setSettings(ImmutableMap<?,?> settings){
  execute(SET_SETTINGS,MobileCommand.prepareArguments(""String_Node_Str"",settings));
}","/** 
 * Set settings for this test session It's probably better to use a convenience function, rather than use this function directly. Try finding the method for the specific setting you want to change.
 * @param settings Map of setting keys and values.
 */
private void setSettings(ImmutableMap<?,?> settings){
  execute(SET_SETTINGS,prepareArguments(""String_Node_Str"",settings));
}",0.982051282051282
20356,"/** 
 * This method forms a   {@link java.util.Map} of parameters for theactivity starting.
 * @param appPackage      The package containing the activity. [Required]
 * @param appActivity     The activity to start. [Required]
 * @param appWaitPackage  Automation will begin after this package starts. [Optional]
 * @param appWaitActivity Automation will begin after this activity starts. [Optional]
 * @param intentAction  Intent action which will be used to start activity [Optional]
 * @param intentCategory  Intent category which will be used to start activity [Optional]
 * @param intentFlags  Flags that will be used to start activity [Optional]
 * @param optionalIntentArguments Additional intent arguments that will be used tostart activity [Optional]
 * @return a key-value pair. The key is the command name. The value is a{@link java.util.Map} command arguments.
 * @throws IllegalArgumentException when any required argument is empty
 */
public static Map.Entry<String,Map<String,?>> startActivityCommand(String appPackage,String appActivity,String appWaitPackage,String appWaitActivity,String intentAction,String intentCategory,String intentFlags,String optionalIntentArguments,boolean stopApp) throws IllegalArgumentException {
  checkArgument((!StringUtils.isBlank(appPackage) && !StringUtils.isBlank(appActivity)),String.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  appWaitPackage=!StringUtils.isBlank(appWaitPackage) ? appWaitPackage : ""String_Node_Str"";
  appWaitActivity=!StringUtils.isBlank(appWaitActivity) ? appWaitActivity : ""String_Node_Str"";
  intentAction=!StringUtils.isBlank(intentAction) ? intentAction : ""String_Node_Str"";
  intentCategory=!StringUtils.isBlank(intentCategory) ? intentCategory : ""String_Node_Str"";
  intentFlags=!StringUtils.isBlank(intentFlags) ? intentFlags : ""String_Node_Str"";
  optionalIntentArguments=!StringUtils.isBlank(optionalIntentArguments) ? optionalIntentArguments : ""String_Node_Str"";
  ImmutableMap<String,?> parameters=ImmutableMap.<String,Object>builder().put(""String_Node_Str"",appPackage).put(""String_Node_Str"",appActivity).put(""String_Node_Str"",appWaitPackage).put(""String_Node_Str"",appWaitActivity).put(""String_Node_Str"",!stopApp).put(""String_Node_Str"",intentAction).put(""String_Node_Str"",intentCategory).put(""String_Node_Str"",intentFlags).put(""String_Node_Str"",optionalIntentArguments).build();
  return new AbstractMap.SimpleEntry<String,Map<String,?>>(START_ACTIVITY,parameters);
}","/** 
 * This method forms a   {@link java.util.Map} of parameters for theactivity starting.
 * @param appPackage      The package containing the activity. [Required]
 * @param appActivity     The activity to start. [Required]
 * @param appWaitPackage  Automation will begin after this package starts. [Optional]
 * @param appWaitActivity Automation will begin after this activity starts. [Optional]
 * @param intentAction  Intent action which will be used to start activity [Optional]
 * @param intentCategory  Intent category which will be used to start activity [Optional]
 * @param intentFlags  Flags that will be used to start activity [Optional]
 * @param optionalIntentArguments Additional intent arguments that will be used tostart activity [Optional]
 * @return a key-value pair. The key is the command name. The value is a{@link java.util.Map} command arguments.
 * @throws IllegalArgumentException when any required argument is empty
 */
public static Map.Entry<String,Map<String,?>> startActivityCommand(String appPackage,String appActivity,String appWaitPackage,String appWaitActivity,String intentAction,String intentCategory,String intentFlags,String optionalIntentArguments,boolean stopApp) throws IllegalArgumentException {
  checkArgument((!StringUtils.isBlank(appPackage) && !StringUtils.isBlank(appActivity)),String.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  String targetWaitPackage=!StringUtils.isBlank(appWaitPackage) ? appWaitPackage : ""String_Node_Str"";
  String targetWaitActivity=!StringUtils.isBlank(appWaitActivity) ? appWaitActivity : ""String_Node_Str"";
  String targetIntentAction=!StringUtils.isBlank(intentAction) ? intentAction : ""String_Node_Str"";
  String targetIntentCategory=!StringUtils.isBlank(intentCategory) ? intentCategory : ""String_Node_Str"";
  String targetIntentFlags=!StringUtils.isBlank(intentFlags) ? intentFlags : ""String_Node_Str"";
  String targetOptionalIntentArguments=!StringUtils.isBlank(optionalIntentArguments) ? optionalIntentArguments : ""String_Node_Str"";
  ImmutableMap<String,?> parameters=ImmutableMap.<String,Object>builder().put(""String_Node_Str"",appPackage).put(""String_Node_Str"",appActivity).put(""String_Node_Str"",targetWaitPackage).put(""String_Node_Str"",targetWaitActivity).put(""String_Node_Str"",!stopApp).put(""String_Node_Str"",targetIntentAction).put(""String_Node_Str"",targetIntentCategory).put(""String_Node_Str"",targetIntentFlags).put(""String_Node_Str"",targetOptionalIntentArguments).build();
  return new AbstractMap.SimpleEntry<String,Map<String,?>>(START_ACTIVITY,parameters);
}",0.971847739888977
20357,"@After(""String_Node_Str"" + ""String_Node_Str"") public void afterNavigateTo(JoinPoint joinPoint) throws Throwable {
  try {
    String url=String.valueOf(joinPoint.getArgs()[0]);
    listener.afterNavigateTo(url,driver);
  }
 catch (  Throwable t) {
    throw getRootCause(t);
  }
}","@After(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") public void afterNavigateTo(JoinPoint joinPoint) throws Throwable {
  try {
    Object url=String.valueOf(joinPoint.getArgs()[0]);
    listener.afterNavigateTo(String.valueOf(url),driver);
  }
 catch (  Throwable t) {
    throw getRootCause(t);
  }
}",0.9093959731543624
20358,"@Before(""String_Node_Str"" + ""String_Node_Str"") public void beforeNavigateTo(JoinPoint joinPoint) throws Throwable {
  try {
    String url=String.valueOf(joinPoint.getArgs()[0]);
    listener.beforeNavigateTo(url,driver);
  }
 catch (  Throwable t) {
    throw getRootCause(t);
  }
}","@Before(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") public void beforeNavigateTo(JoinPoint joinPoint) throws Throwable {
  try {
    Object url=String.valueOf(joinPoint.getArgs()[0]);
    listener.beforeNavigateTo(String.valueOf(url),driver);
  }
 catch (  Throwable t) {
    throw getRootCause(t);
  }
}",0.9102990033222592
20359,"@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=""String_Node_Str"",destroyMethod=""String_Node_Str"") DefaultAspect getAspect(){
  DefaultAspect aspect=new DefaultAspect(context,driver);
  aspect.add(listeners);
  return aspect;
}","@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=""String_Node_Str"") DefaultAspect getAspect(){
  DefaultAspect aspect=new DefaultAspect(context,driver);
  aspect.add(listeners);
  return aspect;
}",0.5921052631578947
20360,"@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=COMPONENT_BEAN,destroyMethod=""String_Node_Str"") Object getComponent(Object component){
  return component;
}","@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=COMPONENT_BEAN) Object getComponent(Object component){
  return component;
}",0.8980891719745223
20361,"@Override public void afterFindBy(By by,WebElement element,WebDriver driver){
  ((SearchingEventListener)driver).afterFindBy(by,element,driver);
}","@Override public void afterFindBy(By by,WebElement element,WebDriver driver){
  ((SearchingEventListener)dispatcher).afterFindBy(by,element,driver);
}",0.972972972972973
20362,"@Override public void beforeFindBy(By by,WebElement element,WebDriver driver){
  ((SearchingEventListener)driver).beforeFindBy(by,element,driver);
}","@Override public void beforeFindBy(By by,WebElement element,WebDriver driver){
  ((SearchingEventListener)dispatcher).beforeFindBy(by,element,driver);
}",0.9733333333333334
20363,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
    }
  }
  return null;
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
      return null;
    }
    Method webDriverEventListenerMethod=findElementInWebDriverEventListener(method);
    if (webDriverEventListenerMethod != null && WebDriverEventListener.class.isAssignableFrom(l.getClass())) {
      webDriverEventListenerMethod.invoke(l,args);
      return null;
    }
  }
  return null;
}",0.6330390920554855
20364,"/** 
 * This method forms a   {@link java.util.Map} of parameters for theactivity starting.
 * @param appPackage      The package containing the activity. [Required]
 * @param appActivity     The activity to start. [Required]
 * @param appWaitPackage  Automation will begin after this package starts. [Optional]
 * @param appWaitActivity Automation will begin after this activity starts. [Optional]
 * @param intentAction  Intent action which will be used to start activity [Optional]
 * @param intentCategory  Intent category which will be used to start activity [Optional]
 * @param intentFlags  Flags that will be used to start activity [Optional]
 * @param optionalIntentArguments Additional intent arguments that will be used tostart activity [Optional]
 * @return a key-value pair. The key is the command name. The value is a{@link java.util.Map} command arguments.
 * @throws IllegalArgumentException
 */
public static Map.Entry<String,Map<String,?>> startActivityCommand(String appPackage,String appActivity,String appWaitPackage,String appWaitActivity,String intentAction,String intentCategory,String intentFlags,String optionalIntentArguments,boolean stopApp) throws IllegalArgumentException {
  checkArgument((!StringUtils.isBlank(appPackage) && !StringUtils.isBlank(appActivity)),String.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  appWaitPackage=!StringUtils.isBlank(appWaitPackage) ? appWaitPackage : ""String_Node_Str"";
  appWaitActivity=!StringUtils.isBlank(appWaitActivity) ? appWaitActivity : ""String_Node_Str"";
  intentAction=!StringUtils.isBlank(intentAction) ? intentAction : ""String_Node_Str"";
  intentCategory=!StringUtils.isBlank(intentCategory) ? intentCategory : ""String_Node_Str"";
  intentFlags=!StringUtils.isBlank(intentFlags) ? intentFlags : ""String_Node_Str"";
  optionalIntentArguments=!StringUtils.isBlank(optionalIntentArguments) ? optionalIntentArguments : ""String_Node_Str"";
  ImmutableMap<String,?> parameters=ImmutableMap.<String,Object>builder().put(""String_Node_Str"",appPackage).put(""String_Node_Str"",appActivity).put(""String_Node_Str"",appWaitPackage).put(""String_Node_Str"",appWaitActivity).put(""String_Node_Str"",!stopApp).put(""String_Node_Str"",intentAction).put(""String_Node_Str"",intentCategory).put(""String_Node_Str"",intentFlags).put(""String_Node_Str"",optionalIntentArguments).build();
  return new AbstractMap.SimpleEntry<String,Map<String,?>>(START_ACTIVITY,parameters);
}","/** 
 * This method forms a   {@link java.util.Map} of parameters for theactivity starting.
 * @param appPackage      The package containing the activity. [Required]
 * @param appActivity     The activity to start. [Required]
 * @param appWaitPackage  Automation will begin after this package starts. [Optional]
 * @param appWaitActivity Automation will begin after this activity starts. [Optional]
 * @param intentAction  Intent action which will be used to start activity [Optional]
 * @param intentCategory  Intent category which will be used to start activity [Optional]
 * @param intentFlags  Flags that will be used to start activity [Optional]
 * @param optionalIntentArguments Additional intent arguments that will be used tostart activity [Optional]
 * @return a key-value pair. The key is the command name. The value is a{@link java.util.Map} command arguments.
 * @throws IllegalArgumentException when any required argument is empty
 */
public static Map.Entry<String,Map<String,?>> startActivityCommand(String appPackage,String appActivity,String appWaitPackage,String appWaitActivity,String intentAction,String intentCategory,String intentFlags,String optionalIntentArguments,boolean stopApp) throws IllegalArgumentException {
  checkArgument((!StringUtils.isBlank(appPackage) && !StringUtils.isBlank(appActivity)),String.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  appWaitPackage=!StringUtils.isBlank(appWaitPackage) ? appWaitPackage : ""String_Node_Str"";
  appWaitActivity=!StringUtils.isBlank(appWaitActivity) ? appWaitActivity : ""String_Node_Str"";
  intentAction=!StringUtils.isBlank(intentAction) ? intentAction : ""String_Node_Str"";
  intentCategory=!StringUtils.isBlank(intentCategory) ? intentCategory : ""String_Node_Str"";
  intentFlags=!StringUtils.isBlank(intentFlags) ? intentFlags : ""String_Node_Str"";
  optionalIntentArguments=!StringUtils.isBlank(optionalIntentArguments) ? optionalIntentArguments : ""String_Node_Str"";
  ImmutableMap<String,?> parameters=ImmutableMap.<String,Object>builder().put(""String_Node_Str"",appPackage).put(""String_Node_Str"",appActivity).put(""String_Node_Str"",appWaitPackage).put(""String_Node_Str"",appWaitActivity).put(""String_Node_Str"",!stopApp).put(""String_Node_Str"",intentAction).put(""String_Node_Str"",intentCategory).put(""String_Node_Str"",intentFlags).put(""String_Node_Str"",optionalIntentArguments).build();
  return new AbstractMap.SimpleEntry<String,Map<String,?>>(START_ACTIVITY,parameters);
}",0.9926620464737056
20365,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
    }
    Method webDriverEventListenerMethod=findElementInWebDriverEventListener(method);
    if (webDriverEventListenerMethod != null && WebDriverEventListener.class.isAssignableFrom(l.getClass())) {
      webDriverEventListenerMethod.invoke(l,args);
    }
  }
  return null;
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    boolean isInvoked=false;
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
      isInvoked=true;
    }
    if (isInvoked) {
      continue;
    }
    Method webDriverEventListenerMethod=findElementInWebDriverEventListener(method);
    if (webDriverEventListenerMethod != null && WebDriverEventListener.class.isAssignableFrom(l.getClass())) {
      webDriverEventListenerMethod.invoke(l,args);
    }
  }
  return null;
}",0.6733212341197822
20366,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
      return null;
    }
    Method webDriverEventListenerMethod=findElementInWebDriverEventListener(method);
    if (webDriverEventListenerMethod != null && WebDriverEventListener.class.isAssignableFrom(l.getClass())) {
      webDriverEventListenerMethod.invoke(l,args);
      return null;
    }
  }
  return null;
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  for (  Listener l : listeners) {
    if (method.getDeclaringClass().isAssignableFrom(l.getClass())) {
      method.invoke(l,args);
    }
    Method webDriverEventListenerMethod=findElementInWebDriverEventListener(method);
    if (webDriverEventListenerMethod != null && WebDriverEventListener.class.isAssignableFrom(l.getClass())) {
      webDriverEventListenerMethod.invoke(l,args);
    }
  }
  return null;
}",0.9521988527724664
20367,"/** 
 * Returns the interface for controlling IME engines to generate complex-script input.
 */
ImeHandler ime();","/** 
 * @return the interface for controlling IME engines to generate complex-script input.
 */
ImeHandler ime();",0.9823008849557522
20368,"/** 
 * Return an opaque handle to this window that uniquely identifies it within this driver instance. This can be used to switch to this window at a later date
 */
String getWindowHandle();","/** 
 * Return an opaque handle to this window that uniquely identifies it within this driver instance. This can be used to switch to this window at a later date
 * @return the current window handle
 */
String getWindowHandle();",0.9116945107398567
20369,"/** 
 * Returns the interface for managing driver timeouts.
 */
Timeouts timeouts();","/** 
 * @return the interface for managing driver timeouts.
 */
Timeouts timeouts();",0.9761904761904762
20370,"/** 
 * Delete a cookie from the browser's ""cookie jar"". The domain of the cookie will be ignored.
 * @param cookie
 */
void deleteCookie(Cookie cookie);","/** 
 * Delete a cookie from the browser's ""cookie jar"". The domain of the cookie will be ignored.
 * @param cookie nom nom nom
 */
void deleteCookie(Cookie cookie);",0.9622641509433962
20371,"/** 
 * Overloaded version of   {@link #to(String)} that makes it easy to pass in a URL.
 * @param url
 */
void to(URL url);","/** 
 * Overloaded version of   {@link #to(String)} that makes it easy to pass in a URL.
 * @param url URL
 */
void to(URL url);",0.984126984126984
20372,"/** 
 * Specifies the amount of time the driver should wait when searching for an element if it is not immediately present. <p/> When searching for a single element, the driver should poll the page until the element has been found, or this timeout expires before throwing a   {@link NoSuchElementException}. When searching for multiple elements, the driver should poll the page until at least one element has been found or this timeout has expired. <p/> Increasing the implicit wait timeout should be used judiciously as it will have an adverse effect on test run time, especially when used with slower location strategies like XPath.
 * @param time The amount of time to wait.
 * @param unit The unit of measure for {@code time}.
 * @return A self reference.
 */
Timeouts implicitlyWait(long time,TimeUnit unit);","/** 
 * Specifies the amount of time the driver should wait when searching for an element if it is not immediately present. <p> When searching for a single element, the driver should poll the page until the element has been found, or this timeout expires before throwing a   {@link NoSuchElementException}. When searching for multiple elements, the driver should poll the page until at least one element has been found or this timeout has expired. <p> Increasing the implicit wait timeout should be used judiciously as it will have an adverse effect on test run time, especially when used with slower location strategies like XPath.
 * @param time The amount of time to wait.
 * @param unit The unit of measure for {@code time}.
 * @return A self reference.
 */
Timeouts implicitlyWait(long time,TimeUnit unit);",0.998768472906404
20373,"/** 
 * Get the value of a the given attribute of the element. Will return the current value, even if this has been modified after the page has been loaded. More exactly, this method will return the value of the given attribute, unless that attribute is not present, in which case the value of the property with the same name is returned. If neither value is set, null is returned. The ""style"" attribute is converted as best can be to a text representation with a trailing semi-colon. The following are deemed to be ""boolean"" attributes, and will return either ""true"" or null: async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked, defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless, seeking, selected, spellcheck, truespeed, willvalidate Finally, the following commonly mis-capitalized attribute/property names are evaluated as expected: <ul> <li>""class"" <li>""readonly"" </ul>
 * @param name The name of the attribute.
 * @return The attribute's current value or null if the value is not set.
 */
String getAttribute(String name);","/** 
 * Get the value of a the given attribute of the element. Will return the current value, even if this has been modified after the page has been loaded. More exactly, this method will return the value of the given attribute, unless that attribute is not present, in which case the value of the property with the same name is returned (for example for the ""value"" property of a textarea element). If neither value is set, null is returned. The ""style"" attribute is converted as best can be to a text representation with a trailing semi-colon. The following are deemed to be ""boolean"" attributes, and will return either ""true"" or null: async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked, defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless, seeking, selected, spellcheck, truespeed, willvalidate Finally, the following commonly mis-capitalized attribute/property names are evaluated as expected: <ul> <li>""class"" <li>""readonly"" </ul>
 * @param name The name of the attribute.
 * @return The attribute/property's current value or null if the value is not set.
 */
String getAttribute(String name);",0.973444613050076
20374,"/** 
 * Click this element. If this causes a new page to load, this method will attempt to block until  the page has loaded. At this point, you should discard all references to this element and any  further operations performed on this element will throw a StaleElementReferenceException unless you know the element and the page will still be present. If click() causes a new page to be  loaded via an event or is done by sending a native event then the method will *not* wait for it to be loaded and the caller should verify that a new page has been loaded. <p/> There are some preconditions for an element to be clicked.  The element must be visible and  it must have a height and width greater then 0.
 * @throws StaleElementReferenceException If the element no longer exists as initially defined
 */
void click();","/** 
 * Click this element. If this causes a new page to load, this method will attempt to block until  the page has loaded. At this point, you should discard all references to this element and any  further operations performed on this element will throw a StaleElementReferenceException unless you know the element and the page will still be present. If click() causes a new page to be  loaded via an event or is done by sending a native event then the method will *not* wait for it to be loaded and the caller should verify that a new page has been loaded. <p> There are some preconditions for an element to be clicked.  The element must be visible and  it must have a height and width greater then 0.
 * @throws StaleElementReferenceException If the element no longer exists as initially defined
 */
void click();",0.9993876301285975
20375,"/** 
 * Get the value of a given CSS property. Color values should be returned as rgba strings, so, for example if the ""background-color"" property is set as ""green"" in the HTML source, the returned value will be ""rgba(0, 255, 0, 1)"". Note that shorthand CSS properties (e.g. background, font, border, border-top, margin, margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned, in accordance with the <a href=""http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration"">DOM CSS2 specification</a> - you should directly access the longhand properties (e.g. background-color) to access the desired values.
 * @return The current, computed value of the property.
 */
String getCssValue(String propertyName);","/** 
 * Get the value of a given CSS property. Color values should be returned as rgba strings, so, for example if the ""background-color"" property is set as ""green"" in the HTML source, the returned value will be ""rgba(0, 255, 0, 1)"". Note that shorthand CSS properties (e.g. background, font, border, border-top, margin, margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned, in accordance with the <a href=""http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration"">DOM CSS2 specification</a> - you should directly access the longhand properties (e.g. background-color) to access the desired values.
 * @param propertyName the css property name of the element
 * @return The current, computed value of the property.
 */
String getCssValue(String propertyName);",0.9612903225806452
20376,"/** 
 * Use this method to simulate typing into an element, which may set its value.
 */
void sendKeys(CharSequence... keysToSend);","/** 
 * Use this method to simulate typing into an element, which may set its value.
 * @param keysToSend character sequence to send to the element
 */
void sendKeys(CharSequence... keysToSend);",0.8061538461538461
20377,"/** 
 * Convenience method for ""zooming in"" on an element on the screen. ""zooming in"" refers to the action of two appendages pressing the screen and sliding away from each other. NOTE: This convenience method slides touches away from the element, if this would happen to place one of them off the screen, appium will return an outOfBounds error. In this case, revert to using the MultiTouchAction api instead of this method.
 * @param x x coordinate to start zoom on
 * @param y y coordinate to start zoom on
 */
public void zoom(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y).moveTo(x,y - yOffset).release();
  TouchAction action1=new TouchAction(this).press(x,y).moveTo(x,y + yOffset).release();
  multiTouch.add(action0).add(action1);
  multiTouch.perform();
}","/** 
 * Convenience method for ""zooming in"" on an element on the screen. ""zooming in"" refers to the action of two appendages pressing the screen and sliding away from each other. NOTE: This convenience method slides touches away from the element, if this would happen to place one of them off the screen, appium will return an outOfBounds error. In this case, revert to using the MultiTouchAction api instead of this method.
 * @param x x coordinate to start zoom on
 * @param y y coordinate to start zoom on
 */
public void zoom(int x,int y){
  MultiTouchAction multiTouch=new MultiTouchAction(this);
  int scrHeight=manage().window().getSize().getHeight();
  int yOffset=100;
  if (y - 100 < 0) {
    yOffset=y;
  }
 else   if (y + 100 > scrHeight) {
    yOffset=scrHeight - y;
  }
  TouchAction action0=new TouchAction(this).press(x,y).moveTo(0,-yOffset).release();
  TouchAction action1=new TouchAction(this).press(x,y).moveTo(0,yOffset).release();
  multiTouch.add(action0).add(action1);
  multiTouch.perform();
}",0.8790993636808615
20378,"/** 
 * Hides the keyboard if it is showing. On iOS, there are multiple strategies for hiding the keyboard. Defaults to the ""tapOutside"" strategy (taps outside the keyboard). Switch to using hideKeyboard(HideKeyboardStrategy.PRESS_KEY, ""Done"") if this doesn't work.
 */
public void hideKeyboard();","/** 
 * Hides the keyboard if it is showing. On iOS, there are multiple strategies for hiding the keyboard. Defaults to the ""tapOutside"" strategy (taps outside the keyboard). Switch to using hideKeyboard(HideKeyboardStrategy.PRESS_KEY, ""Done"") if this doesn't work.
 */
void hideKeyboard();",0.9880749574105622
20379,"/** 
 * Get all defined Strings from an app for the specified language
 * @param language strings language code
 * @return a string of all the localized strings defined in the app
 */
public String getAppStrings(String language);","/** 
 * Get all defined Strings from an app for the specified language
 * @param language strings language code
 * @return a string of all the localized strings defined in the app
 */
String getAppStrings(String language);",0.984478935698448
20380,"/** 
 * Remove the specified app from the device (uninstall)
 * @param bundleId the bunble identifier (or app id) of the app to remove
 */
public void removeApp(String bundleId);","/** 
 * Remove the specified app from the device (uninstall)
 * @param bundleId the bunble identifier (or app id) of the app to remove
 */
void removeApp(String bundleId);",0.9799426934097422
20381,"/** 
 * Runs the current app as a background app for the number of seconds requested. This is a synchronous method, it returns after the back has been returned to the foreground.
 * @param seconds Number of seconds to run App in background
 */
public void runAppInBackground(int seconds);","/** 
 * Runs the current app as a background app for the number of seconds requested. This is a synchronous method, it returns after the back has been returned to the foreground.
 * @param seconds Number of seconds to run App in background
 */
void runAppInBackground(int seconds);",0.9876977152899824
20382,"/** 
 * Checks if an app is installed on the device
 * @param bundleId bundleId of the app
 * @return True if app is installed, false otherwise
 */
public boolean isAppInstalled(String bundleId);","/** 
 * Checks if an app is installed on the device
 * @param bundleId bundleId of the app
 * @return True if app is installed, false otherwise
 */
boolean isAppInstalled(String bundleId);",0.9817232375979112
20383,"/** 
 * Close the app which was provided in the capabilities at session creation
 */
public void closeApp();","/** 
 * Close the app which was provided in the capabilities at session creation
 */
void closeApp();",0.9665071770334928
20384,"/** 
 * Launch the app which was provided in the capabilities at session creation
 */
public void launchApp();","/** 
 * Launch the app which was provided in the capabilities at session creation
 */
void launchApp();",0.9671361502347418
20385,"/** 
 * Install an app on the mobile device
 * @param appPath path to app to install
 */
public void installApp(String appPath);","/** 
 * Install an app on the mobile device
 * @param appPath path to app to install
 */
void installApp(String appPath);",0.9718875502008032
20386,"/** 
 * Reset the currently running app for this session
 */
public void resetApp();","/** 
 * Reset the currently running app for this session
 */
void resetApp();",0.9565217391304348
20387,"/** 
 * Pull a folder from the simulator/device. Does not work on iOS Real Devices, but works on simulators
 * @param remotePath On Android and iOS, this is either the path to the file (relative to the root of the app's file system). On iOS only, if path starts with /AppName.app, which will be replaced with the application's .app directory
 * @return A byte array of Base64 encoded data, representing a ZIP ARCHIVEof the contents of the requested folder.
 */
public byte[] pullFolder(String remotePath);","/** 
 * Pull a folder from the simulator/device. Does not work on iOS Real Devices, but works on simulators
 * @param remotePath On Android and iOS, this is either the path to the file (relative to the root of the app's file system). On iOS only, if path starts with /AppName.app, which will be replaced with the application's .app directory
 * @return A byte array of Base64 encoded data, representing a ZIP ARCHIVEof the contents of the requested folder.
 */
byte[] pullFolder(String remotePath);",0.9930209371884346
20388,"/** 
 * @param remotePath On Android and iOS, this is either the path to the file (relative to the root of the app's file system). On iOS only, if path starts with /AppName.app, which will be replaced with the application's .app directory
 * @return A byte array of Base64 encoded data.
 */
public byte[] pullFile(String remotePath);","/** 
 * @param remotePath On Android and iOS, this is either the path to the file (relative to the root of the app's file system). On iOS only, if path starts with /AppName.app, which will be replaced with the application's .app directory
 * @return A byte array of Base64 encoded data.
 */
byte[] pullFile(String remotePath);",0.9893778452200304
20389,"public Response execute(String driverCommand,Map<String,?> parameters);","Response execute(String driverCommand,Map<String,?> parameters);",0.9481481481481482
20390,"@Override protected File findDefaultExecutable(){
  Process p;
  try {
    if (Platform.getCurrent().is(Platform.WINDOWS)) {
      p=getSearchingProcess(ArrayUtils.add(CMD_EXE,NODE));
    }
 else {
      p=getSearchingProcess(ArrayUtils.add(BIN_BASH,NODE));
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
  try {
    OutputStream outputStream=p.getOutputStream();
    PrintStream out=new PrintStream(outputStream);
    out.println(""String_Node_Str"");
    out.close();
    return new File(getTheLastStringFromsOutput(p.getInputStream()));
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
 finally {
    p.destroy();
  }
}","@Override protected File findDefaultExecutable(){
  Process p;
  try {
    if (Platform.getCurrent().is(Platform.WINDOWS)) {
      p=getSearchingProcess(ArrayUtils.add(CMD_EXE,NODE));
    }
 else {
      p=getSearchingProcess(BIN_BASH,""String_Node_Str"",""String_Node_Str"",NODE);
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
  try {
    OutputStream outputStream=p.getOutputStream();
    PrintStream out=new PrintStream(outputStream);
    out.println(""String_Node_Str"");
    out.close();
    return new File(getTheLastStringFromsOutput(p.getInputStream()));
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
 finally {
    p.destroy();
  }
}",0.9615384615384616
20391,"private File findNodeInCurrentFileSystem(){
  setUpNPMScript();
  String instancePath;
  Process p=null;
  try {
    if (Platform.getCurrent().is(Platform.WINDOWS)) {
      p=getSearchingProcess(ArrayUtils.add(CMD_EXE,npmScript.getAbsolutePath()));
    }
 else {
      p=getSearchingProcess(ArrayUtils.add(BIN_BASH,npmScript.getAbsolutePath()));
    }
    p.waitFor();
    instancePath=getTheLastStringFromsOutput(p.getInputStream());
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
 finally {
    if (p != null)     p.destroy();
  }
  File result;
  if (StringUtils.isBlank(instancePath) || !(result=new File(instancePath + File.separator + APPIUM_NODE_MASK)).exists()) {
    throw new InvalidServerInstanceException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new IOException(""String_Node_Str""));
  }
  return result;
}","private File findNodeInCurrentFileSystem(){
  setUpNPMScript();
  String instancePath;
  Process p=null;
  try {
    if (Platform.getCurrent().is(Platform.WINDOWS)) {
      p=getSearchingProcess(ArrayUtils.add(CMD_EXE,npmScript.getAbsolutePath()));
      p.waitFor();
    }
 else {
      p=getSearchingProcess(BIN_SH,npmScript.getAbsolutePath());
    }
    instancePath=getTheLastStringFromsOutput(p.getInputStream());
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
 finally {
    if (p != null)     p.destroy();
  }
  File result;
  if (StringUtils.isBlank(instancePath) || !(result=new File(instancePath + File.separator + APPIUM_NODE_MASK)).exists()) {
    throw new InvalidServerInstanceException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new IOException(""String_Node_Str""));
  }
  return result;
}",0.9681227863046044
20392,"private static Process getSearchingProcess(String... command) throws Throwable {
  ProcessBuilder processBuilder=new ProcessBuilder(command);
  if (!StringUtils.isBlank(PATH_NAME)) {
    String path=System.getenv().get(PATH_NAME);
    processBuilder.environment().put(PATH_NAME,path);
  }
  return processBuilder.start();
}","private static Process getSearchingProcess(String... command) throws Throwable {
  ProcessBuilder processBuilder=new ProcessBuilder(command);
  processBuilder.redirectErrorStream(true);
  if (!StringUtils.isBlank(PATH_NAME)) {
    String path=System.getenv().get(PATH_NAME);
    processBuilder.environment().put(PATH_NAME,path);
  }
  return processBuilder.start();
}",0.936231884057971
20393,"private static String getTheLastStringFromsOutput(InputStream stream) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(stream));
  String current;
  String result=null;
  while ((current=reader.readLine()) != null) {
    result=current;
  }
  reader.close();
  return result;
}","private static String getTheLastStringFromsOutput(InputStream stream) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,Charset.forName(""String_Node_Str"")));
  String current;
  String result=null;
  while ((current=reader.readLine()) != null) {
    if (StringUtils.isBlank(current)) {
      continue;
    }
    result=current;
  }
  reader.close();
  return result;
}",0.8662068965517241
20394,"/** 
 * Find the element.
 */
public WebElement findElement(){
  if (cachedElement != null && shouldCache) {
    return cachedElement;
  }
  List<WebElement> result=waitFor();
  if (result.size() == 0) {
    String message=""String_Node_Str"" + by.toString();
    if (waitingFunction.foundStaleElementReferenceException != null)     throw new NoSuchElementException(message,waitingFunction.foundStaleElementReferenceException);
    throw new NoSuchElementException(message);
  }
  if (shouldCache) {
    cachedElement=result.get(0);
  }
  return result.get(0);
}","/** 
 * Find the element.
 */
public WebElement findElement(){
  if (cachedElement != null && shouldCache) {
    return cachedElement;
  }
  List<WebElement> result=waitFor();
  if (result.size() == 0) {
    String message=""String_Node_Str"" + by.toString();
    if (waitingFunction.foundStaleElementReferenceException != null) {
      throw new NoSuchElementException(message,waitingFunction.foundStaleElementReferenceException);
    }
    throw new NoSuchElementException(message);
  }
  if (shouldCache) {
    cachedElement=result.get(0);
  }
  return result.get(0);
}",0.991150442477876
20395,"public List<WebElement> apply(By by){
  List<WebElement> result=new ArrayList<>();
  Throwable shouldBeThrown=null;
  boolean isRootCauseInvalidSelector;
  boolean isRootCauseStaleElementReferenceException=false;
  foundStaleElementReferenceException=null;
  try {
    result.addAll(searchContext.findElements(by));
  }
 catch (  Throwable e) {
    isRootCauseInvalidSelector=isInvalidSelectorRootCause(e);
    if (!isRootCauseInvalidSelector)     isRootCauseStaleElementReferenceException=isStaleElementReferenceException(e);
    if (isRootCauseStaleElementReferenceException)     foundStaleElementReferenceException=extractReadableException(e);
    if (!isRootCauseInvalidSelector & !isRootCauseStaleElementReferenceException)     shouldBeThrown=extractReadableException(e);
  }
  if (shouldBeThrown != null) {
    if (RuntimeException.class.isAssignableFrom(shouldBeThrown.getClass()))     throw (RuntimeException)shouldBeThrown;
    throw new RuntimeException(shouldBeThrown);
  }
  if (result.size() > 0) {
    return result;
  }
 else {
    return null;
  }
}","public List<WebElement> apply(By by){
  List<WebElement> result=new ArrayList<>();
  Throwable shouldBeThrown=null;
  boolean isRootCauseInvalidSelector;
  boolean isRootCauseStaleElementReferenceException=false;
  foundStaleElementReferenceException=null;
  try {
    result.addAll(searchContext.findElements(by));
  }
 catch (  Throwable e) {
    isRootCauseInvalidSelector=isInvalidSelectorRootCause(e);
    if (!isRootCauseInvalidSelector) {
      isRootCauseStaleElementReferenceException=isStaleElementReferenceException(e);
    }
    if (isRootCauseStaleElementReferenceException) {
      foundStaleElementReferenceException=extractReadableException(e);
    }
    if (!isRootCauseInvalidSelector & !isRootCauseStaleElementReferenceException) {
      shouldBeThrown=extractReadableException(e);
    }
  }
  if (shouldBeThrown != null) {
    if (RuntimeException.class.isAssignableFrom(shouldBeThrown.getClass())) {
      throw (RuntimeException)shouldBeThrown;
    }
    throw new RuntimeException(shouldBeThrown);
  }
  if (result.size() > 0) {
    return result;
  }
 else {
    return null;
  }
}",0.9815668202764976
20396,"@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else   customDuration=timeOutDuration;
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null)   return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,originalWebDriver);
  return null;
}","@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else {
    customDuration=timeOutDuration;
  }
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null)   return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,originalWebDriver);
  return null;
}",0.9933665008291874
20397,"public Object decorate(ClassLoader ignored,Field field){
  Object result=defaultElementFieldDecoracor.decorate(ignored,field);
  if (result != null)   return result;
  return decorateWidget(field);
}","public Object decorate(ClassLoader ignored,Field field){
  Object result=defaultElementFieldDecoracor.decorate(ignored,field);
  if (result != null) {
    return result;
  }
  return decorateWidget(field);
}",0.9802955665024632
20398,"private Class<?> getTypeForProxy(){
  Class<? extends SearchContext> driverClass=originalDriver.getClass();
  Iterable<Map.Entry<Class<? extends SearchContext>,Class<? extends WebElement>>> rules=elementRuleMap.entrySet();
  for (  Map.Entry<Class<? extends SearchContext>,Class<? extends WebElement>> e : rules) {
    if (e.getKey().isAssignableFrom(driverClass))     return e.getValue();
  }
  return RemoteWebElement.class;
}","private Class<?> getTypeForProxy(){
  Class<? extends SearchContext> driverClass=originalDriver.getClass();
  Iterable<Map.Entry<Class<? extends SearchContext>,Class<? extends WebElement>>> rules=elementRuleMap.entrySet();
  for (  Map.Entry<Class<? extends SearchContext>,Class<? extends WebElement>> e : rules) {
    if (e.getKey().isAssignableFrom(driverClass)) {
      return e.getValue();
    }
  }
  return RemoteWebElement.class;
}",0.9884526558891455
20399,"@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type))   return null;
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass()))     listType=((ParameterizedType)listType).getRawType();
    if (!Widget.class.isAssignableFrom((Class)listType))     return null;
    widgetType=Class.class.cast(listType);
  }
 else   widgetType=(Class<? extends Widget>)field.getType();
  CacheableLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist)   return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,timeOutDuration));
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,timeOutDuration));
}","@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type)) {
    return null;
  }
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass())) {
      listType=((ParameterizedType)listType).getRawType();
    }
    if (!Widget.class.isAssignableFrom((Class)listType)) {
      return null;
    }
    widgetType=Class.class.cast(listType);
  }
 else {
    widgetType=(Class<? extends Widget>)field.getType();
  }
  CacheableLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist) {
    return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,timeOutDuration));
  }
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,timeOutDuration));
}",0.9654485049833889
20400,"@Override protected By buildDefaultBy(){
  AnnotatedElement annotatedElement=annotatedElementContainer.getAnnotated();
  By defaultBy=null;
  FindBy findBy=annotatedElement.getAnnotation(FindBy.class);
  if (findBy != null)   defaultBy=super.buildByFromFindBy(findBy);
  if (defaultBy == null) {
    FindBys findBys=annotatedElement.getAnnotation(FindBys.class);
    if (findBys != null)     defaultBy=super.buildByFromFindBys(findBys);
  }
  if (defaultBy == null) {
    FindAll findAll=annotatedElement.getAnnotation(FindAll.class);
    if (findAll != null)     defaultBy=super.buildBysFromFindByOneOf(findAll);
  }
  return defaultBy;
}","@Override protected By buildDefaultBy(){
  AnnotatedElement annotatedElement=annotatedElementContainer.getAnnotated();
  By defaultBy=null;
  FindBy findBy=annotatedElement.getAnnotation(FindBy.class);
  if (findBy != null) {
    defaultBy=super.buildByFromFindBy(findBy);
  }
  if (defaultBy == null) {
    FindBys findBys=annotatedElement.getAnnotation(FindBys.class);
    if (findBys != null) {
      defaultBy=super.buildByFromFindBys(findBys);
    }
  }
  if (defaultBy == null) {
    FindAll findAll=annotatedElement.getAnnotation(FindAll.class);
    if (findAll != null) {
      defaultBy=super.buildBysFromFindByOneOf(findAll);
    }
  }
  return defaultBy;
}",0.9509954058192956
20401,"@Override public By buildBy(){
  assertValidAnnotations();
  By defaultBy=buildDefaultBy();
  By mobileNativeBy=buildMobileNativeBy();
  if (defaultBy == null)   defaultBy=new ByIdOrName(((Field)annotatedElementContainer.getAnnotated()).getName());
  if (mobileNativeBy == null)   mobileNativeBy=defaultBy;
  Map<ContentType,By> contentMap=new HashMap<>();
  contentMap.put(ContentType.HTML_OR_DEFAULT,defaultBy);
  contentMap.put(ContentType.NATIVE_MOBILE_SPECIFIC,mobileNativeBy);
  return new ContentMappedBy(contentMap);
}","@Override public By buildBy(){
  assertValidAnnotations();
  By defaultBy=buildDefaultBy();
  By mobileNativeBy=buildMobileNativeBy();
  if (defaultBy == null) {
    defaultBy=new ByIdOrName(((Field)annotatedElementContainer.getAnnotated()).getName());
  }
  if (mobileNativeBy == null) {
    mobileNativeBy=defaultBy;
  }
  Map<ContentType,By> contentMap=new HashMap<>();
  contentMap.put(ContentType.HTML_OR_DEFAULT,defaultBy);
  contentMap.put(ContentType.NATIVE_MOBILE_SPECIFIC,mobileNativeBy);
  return new ContentMappedBy(contentMap);
}",0.9850187265917604
20402,"@Override protected By buildMobileNativeBy(){
  AnnotatedElement annotatedElement=annotatedElementContainer.getAnnotated();
  if (ANDROID.toUpperCase().equals(platform) && SELENDROID.toUpperCase().equals(automation)) {
    SelendroidFindBy selendroidFindBy=annotatedElement.getAnnotation(SelendroidFindBy.class);
    SelendroidFindBys selendroidFindBys=annotatedElement.getAnnotation(SelendroidFindBys.class);
    SelendroidFindAll selendroidFindByAll=annotatedElement.getAnnotation(SelendroidFindAll.class);
    if (selendroidFindBy != null)     return createBy(new Annotation[]{selendroidFindBy},HowToUseSelectors.USE_ONE);
    if (selendroidFindBys != null)     return createBy(selendroidFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    if (selendroidFindByAll != null)     return createBy(selendroidFindByAll.value(),HowToUseSelectors.USE_ANY);
  }
  if (ANDROID.toUpperCase().equals(platform)) {
    AndroidFindBy androidFindBy=annotatedElement.getAnnotation(AndroidFindBy.class);
    AndroidFindBys androidFindBys=annotatedElement.getAnnotation(AndroidFindBys.class);
    AndroidFindAll androidFindAll=annotatedElement.getAnnotation(AndroidFindAll.class);
    if (androidFindBy != null)     return createBy(new Annotation[]{androidFindBy},HowToUseSelectors.USE_ONE);
    if (androidFindBys != null)     return createBy(androidFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    if (androidFindAll != null)     return createBy(androidFindAll.value(),HowToUseSelectors.USE_ANY);
  }
  if (IOS.toUpperCase().equals(platform)) {
    iOSFindBy iOSFindBy=annotatedElement.getAnnotation(iOSFindBy.class);
    iOSFindBys iOSFindBys=annotatedElement.getAnnotation(iOSFindBys.class);
    iOSFindAll iOSFindAll=annotatedElement.getAnnotation(iOSFindAll.class);
    if (iOSFindBy != null)     return createBy(new Annotation[]{iOSFindBy},HowToUseSelectors.USE_ONE);
    if (iOSFindBys != null)     return createBy(iOSFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    if (iOSFindAll != null)     return createBy(iOSFindAll.value(),HowToUseSelectors.USE_ANY);
  }
  return null;
}","@Override protected By buildMobileNativeBy(){
  AnnotatedElement annotatedElement=annotatedElementContainer.getAnnotated();
  if (ANDROID.toUpperCase().equals(platform) && SELENDROID.toUpperCase().equals(automation)) {
    SelendroidFindBy selendroidFindBy=annotatedElement.getAnnotation(SelendroidFindBy.class);
    SelendroidFindBys selendroidFindBys=annotatedElement.getAnnotation(SelendroidFindBys.class);
    SelendroidFindAll selendroidFindByAll=annotatedElement.getAnnotation(SelendroidFindAll.class);
    if (selendroidFindBy != null) {
      return createBy(new Annotation[]{selendroidFindBy},HowToUseSelectors.USE_ONE);
    }
    if (selendroidFindBys != null) {
      return createBy(selendroidFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    }
    if (selendroidFindByAll != null) {
      return createBy(selendroidFindByAll.value(),HowToUseSelectors.USE_ANY);
    }
  }
  if (ANDROID.toUpperCase().equals(platform)) {
    AndroidFindBy androidFindBy=annotatedElement.getAnnotation(AndroidFindBy.class);
    AndroidFindBys androidFindBys=annotatedElement.getAnnotation(AndroidFindBys.class);
    AndroidFindAll androidFindAll=annotatedElement.getAnnotation(AndroidFindAll.class);
    if (androidFindBy != null) {
      return createBy(new Annotation[]{androidFindBy},HowToUseSelectors.USE_ONE);
    }
    if (androidFindBys != null) {
      return createBy(androidFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    }
    if (androidFindAll != null) {
      return createBy(androidFindAll.value(),HowToUseSelectors.USE_ANY);
    }
  }
  if (IOS.toUpperCase().equals(platform)) {
    iOSFindBy iOSFindBy=annotatedElement.getAnnotation(iOSFindBy.class);
    iOSFindBys iOSFindBys=annotatedElement.getAnnotation(iOSFindBys.class);
    iOSFindAll iOSFindAll=annotatedElement.getAnnotation(iOSFindAll.class);
    if (iOSFindBy != null) {
      return createBy(new Annotation[]{iOSFindBy},HowToUseSelectors.USE_ONE);
    }
    if (iOSFindBys != null) {
      return createBy(iOSFindBys.value(),HowToUseSelectors.BUILD_CHAINED);
    }
    if (iOSFindAll != null) {
      return createBy(iOSFindAll.value(),HowToUseSelectors.USE_ANY);
    }
  }
  return null;
}",0.9788434414668548
20403,"/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext The context to use when finding the element
 * @param by a By locator strategy
 * @param shouldCache is the flag that signalizes that elements which are found once should be cached
 * @param duration is a POJO which contains timeout parameters
 * @param originalWebDriver
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration,WebDriver originalWebDriver){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.timeOutDuration=duration;
  this.by=by;
  this.originalWebDriver=originalWebDriver;
}","/** 
 * Creates a new mobile element locator. It instantiates   {@link WebElement}using @AndroidFindBy (-s), @iOSFindBy (-s) and @FindBy (-s) annotation sets
 * @param searchContext The context to use when finding the element
 * @param by a By locator strategy
 * @param shouldCache is the flag that signalizes that elements which are found once should be cached
 * @param duration is a POJO which contains timeout parameters
 * @param originalWebDriver
 */
public AppiumElementLocator(SearchContext searchContext,By by,boolean shouldCache,TimeOutDuration duration,WebDriver originalWebDriver){
  this.searchContext=searchContext;
  this.shouldCache=shouldCache;
  this.timeOutDuration=duration;
  this.by=by;
  this.originalWebDriver=originalWebDriver;
  waitingFunction=new WaitingFunction(this.searchContext);
}",0.9623964308476736
20404,"/** 
 * Find the element.
 */
public WebElement findElement(){
  if (cachedElement != null && shouldCache) {
    return cachedElement;
  }
  List<WebElement> result=waitFor();
  if (result.size() == 0) {
    String message=""String_Node_Str"" + by.toString();
    throw new NoSuchElementException(message);
  }
  if (shouldCache) {
    cachedElement=result.get(0);
  }
  return result.get(0);
}","/** 
 * Find the element.
 */
public WebElement findElement(){
  if (cachedElement != null && shouldCache) {
    return cachedElement;
  }
  List<WebElement> result=waitFor();
  if (result.size() == 0) {
    String message=""String_Node_Str"" + by.toString();
    if (waitingFunction.foundStaleElementReferenceException != null)     throw new NoSuchElementException(message,waitingFunction.foundStaleElementReferenceException);
    throw new NoSuchElementException(message);
  }
  if (shouldCache) {
    cachedElement=result.get(0);
  }
  return result.get(0);
}",0.8235294117647058
20405,"public List<WebElement> apply(By by){
  List<WebElement> result=new ArrayList<WebElement>();
  try {
    result.addAll(searchContext.findElements(by));
  }
 catch (  StaleElementReferenceException ignored) {
  }
catch (  RuntimeException e) {
    if (!isInvalidSelectorRootCause(e))     throw e;
  }
  if (result.size() > 0) {
    return result;
  }
 else {
    return null;
  }
}","public List<WebElement> apply(By by){
  List<WebElement> result=new ArrayList<>();
  Throwable shouldBeThrown=null;
  boolean isRootCauseInvalidSelector;
  boolean isRootCauseStaleElementReferenceException=false;
  foundStaleElementReferenceException=null;
  try {
    result.addAll(searchContext.findElements(by));
  }
 catch (  Throwable e) {
    isRootCauseInvalidSelector=isInvalidSelectorRootCause(e);
    if (!isRootCauseInvalidSelector)     isRootCauseStaleElementReferenceException=isStaleElementReferenceException(e);
    if (isRootCauseStaleElementReferenceException)     foundStaleElementReferenceException=extractReadableException(e);
    if (!isRootCauseInvalidSelector & !isRootCauseStaleElementReferenceException)     shouldBeThrown=extractReadableException(e);
  }
  if (shouldBeThrown != null) {
    if (RuntimeException.class.isAssignableFrom(shouldBeThrown.getClass()))     throw (RuntimeException)shouldBeThrown;
    throw new RuntimeException(shouldBeThrown);
  }
  if (result.size() > 0) {
    return result;
  }
 else {
    return null;
  }
}",0.2505190311418685
20406,"private List<WebElement> waitFor(){
  try {
    changeImplicitlyWaitTimeOut(0,TimeUnit.SECONDS);
    FluentWait<By> wait=new FluentWait<By>(by);
    wait.withTimeout(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
    return wait.until(new WaitingFunction(searchContext));
  }
 catch (  TimeoutException e) {
    return new ArrayList<WebElement>();
  }
 finally {
    changeImplicitlyWaitTimeOut(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
  }
}","private List<WebElement> waitFor(){
  try {
    changeImplicitlyWaitTimeOut(0,TimeUnit.SECONDS);
    FluentWait<By> wait=new FluentWait<>(by);
    wait.withTimeout(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
    return wait.until(waitingFunction);
  }
 catch (  TimeoutException e) {
    return new ArrayList<>();
  }
 finally {
    changeImplicitlyWaitTimeOut(timeOutDuration.getTime(),timeOutDuration.getTimeUnit());
  }
}",0.7298787210584344
20407,"public ElementLocator createLocator(Field field){
  TimeOutDuration customDuration;
  if (field.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=field.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else   customDuration=timeOutDuration;
  builder.setAnnotated(field);
  By by=builder.buildBy();
  if (by != null)   return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,originalWebDriver);
  return null;
}","@Override public CacheableLocator createLocator(AnnotatedElement annotatedElement){
  TimeOutDuration customDuration;
  if (annotatedElement.isAnnotationPresent(WithTimeout.class)) {
    WithTimeout withTimeout=annotatedElement.getAnnotation(WithTimeout.class);
    customDuration=new TimeOutDuration(withTimeout.time(),withTimeout.unit());
  }
 else   customDuration=timeOutDuration;
  builder.setAnnotated(annotatedElement);
  By by=builder.buildBy();
  if (by != null)   return new AppiumElementLocator(searchContext,by,builder.isLookupCached(),customDuration,originalWebDriver);
  return null;
}",0.7055702917771883
20408,"@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type))   return null;
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass()))     listType=((ParameterizedType)listType).getRawType();
    if (!Widget.class.isAssignableFrom((Class)listType))     return null;
    widgetType=Class.class.cast(listType);
  }
 else   widgetType=(Class<? extends Widget>)field.getType();
  ElementLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist)   return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,timeOutDuration));
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,timeOutDuration));
}","@SuppressWarnings(""String_Node_Str"") private Object decorateWidget(Field field){
  Class<?> type=field.getType();
  if (!Widget.class.isAssignableFrom(type) && !List.class.isAssignableFrom(type))   return null;
  Class<? extends Widget> widgetType;
  boolean isAlist=false;
  if (List.class.isAssignableFrom(type)) {
    isAlist=true;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      return null;
    }
    Type listType=((ParameterizedType)genericType).getActualTypeArguments()[0];
    if (ParameterizedType.class.isAssignableFrom(listType.getClass()))     listType=((ParameterizedType)listType).getRawType();
    if (!Widget.class.isAssignableFrom((Class)listType))     return null;
    widgetType=Class.class.cast(listType);
  }
 else   widgetType=(Class<? extends Widget>)field.getType();
  CacheableLocator locator=widgetLocatorFactory.createLocator(field);
  Map<ContentType,Constructor<? extends Widget>> map=OverrideWidgetReader.read(widgetType,field,platform,automation);
  if (isAlist)   return getEnhancedProxy(ArrayList.class,new WidgetListInterceptor(locator,originalDriver,map,widgetType,timeOutDuration));
  Constructor<? extends Widget> constructor=WidgetConstructorUtil.findConvenientConstructor(widgetType);
  return getEnhancedProxy(widgetType,new Class[]{constructor.getParameterTypes()[0]},new Object[]{proxyForAnElement(locator)},new WidgetInterceptor(locator,originalDriver,null,map,timeOutDuration));
}",0.9946018893387314
20409,"@Override public WebElement getWrappedElement(){
  return element;
}","@Override public WebElement getWrappedElement(){
  return (WebElement)element;
}",0.918918918918919
20410,"@Override protected Object getObject(WebElement element,Method method,Object[] args) throws InvocationTargetException, IllegalAccessException, InstantiationException {
  ContentType type=getCurrentContentType(element);
  if (cachedElement == null || cachedElement.hashCode() != element.hashCode()) {
    cachedElement=element;
    Widget widget=instantiationMap.get(type).newInstance(cachedElement);
    cachedInstances.put(type,widget);
    PageFactory.initElements(new AppiumFieldDecorator(widget,duration),widget);
  }
  return method.invoke(cachedInstances.get(type),args);
}","@Override protected Object getObject(WebElement element,Method method,Object[] args) throws InvocationTargetException, IllegalAccessException, InstantiationException {
  ContentType type=getCurrentContentType(element);
  if (cachedElement == null || (locator != null && !((CacheableLocator)locator).isLookUpCached()) || cachedInstances.size() == 0) {
    cachedElement=element;
    Widget widget=instantiationMap.get(type).newInstance(cachedElement);
    cachedInstances.put(type,widget);
    PageFactory.initElements(new AppiumFieldDecorator(widget,duration),widget);
  }
  return method.invoke(cachedInstances.get(type),args);
}",0.8850289495450786
20411,"WidgetInterceptor(ElementLocator locator,WebDriver driver,WebElement cachedElement,Map<ContentType,Constructor<? extends Widget>> instantiationMap,TimeOutDuration duration){
  super(locator,driver);
  this.cachedElement=cachedElement;
  this.instantiationMap=instantiationMap;
  this.duration=duration;
}","WidgetInterceptor(CacheableLocator locator,WebDriver driver,WebElement cachedElement,Map<ContentType,Constructor<? extends Widget>> instantiationMap,TimeOutDuration duration){
  super(locator,driver);
  this.cachedElement=cachedElement;
  this.instantiationMap=instantiationMap;
  this.duration=duration;
}",0.9737704918032788
20412,"@Override protected Object getObject(List<WebElement> elements,Method method,Object[] args) throws InvocationTargetException, IllegalAccessException, InstantiationException {
  if (cachedElements == null || cachedElements.hashCode() != elements.hashCode()) {
    cachedElements=elements;
    cachedWidgets.clear();
    for (    WebElement element : cachedElements) {
      ContentType type=getCurrentContentType(element);
      Class<?>[] params=new Class<?>[]{instantiationMap.get(type).getParameterTypes()[0]};
      cachedWidgets.add(ProxyFactory.getEnhancedProxy(declaredType,params,new Object[]{element},new WidgetInterceptor(null,driver,element,instantiationMap,duration)));
    }
  }
  return method.invoke(cachedWidgets,args);
}","@Override protected Object getObject(List<WebElement> elements,Method method,Object[] args) throws InvocationTargetException, IllegalAccessException, InstantiationException {
  if (cachedElements == null || (locator != null && !((CacheableLocator)locator).isLookUpCached())) {
    cachedElements=elements;
    cachedWidgets.clear();
    for (    WebElement element : cachedElements) {
      ContentType type=getCurrentContentType(element);
      Class<?>[] params=new Class<?>[]{instantiationMap.get(type).getParameterTypes()[0]};
      cachedWidgets.add(ProxyFactory.getEnhancedProxy(declaredType,params,new Object[]{element},new WidgetInterceptor(null,driver,element,instantiationMap,duration)));
    }
  }
  return method.invoke(cachedWidgets,args);
}",0.9328859060402684
20413,"WidgetListInterceptor(ElementLocator locator,WebDriver driver,Map<ContentType,Constructor<? extends Widget>> instantiationMap,Class<? extends Widget> declaredType,TimeOutDuration duration){
  super(locator);
  this.instantiationMap=instantiationMap;
  this.declaredType=declaredType;
  this.duration=duration;
  this.driver=driver;
}","WidgetListInterceptor(CacheableLocator locator,WebDriver driver,Map<ContentType,Constructor<? extends Widget>> instantiationMap,Class<? extends Widget> declaredType,TimeOutDuration duration){
  super(locator);
  this.instantiationMap=instantiationMap;
  this.declaredType=declaredType;
  this.duration=duration;
  this.driver=driver;
}",0.9760479041916168
20414,"public AppiumDriver(URL remoteAddress,Capabilities desiredCapabilities){
  super(remoteAddress,desiredCapabilities);
  this.executeMethod=new AppiumExecutionMethod(this);
  this.remoteAddress=remoteAddress;
  locationContext=new RemoteLocationContext(executeMethod);
  ImmutableMap.Builder<String,CommandInfo> builder=ImmutableMap.builder();
  builder.put(RESET,postC(""String_Node_Str"")).put(GET_STRINGS,postC(""String_Node_Str"")).put(KEY_EVENT,postC(""String_Node_Str"")).put(CURRENT_ACTIVITY,getC(""String_Node_Str"")).put(SET_VALUE,postC(""String_Node_Str"")).put(PULL_FILE,postC(""String_Node_Str"")).put(PULL_FOLDER,postC(""String_Node_Str"")).put(HIDE_KEYBOARD,postC(""String_Node_Str"")).put(PUSH_FILE,postC(""String_Node_Str"")).put(RUN_APP_IN_BACKGROUND,postC(""String_Node_Str"")).put(PERFORM_TOUCH_ACTION,postC(""String_Node_Str"")).put(PERFORM_MULTI_TOUCH,postC(""String_Node_Str"")).put(IS_APP_INSTALLED,postC(""String_Node_Str"")).put(INSTALL_APP,postC(""String_Node_Str"")).put(REMOVE_APP,postC(""String_Node_Str"")).put(LAUNCH_APP,postC(""String_Node_Str"")).put(CLOSE_APP,postC(""String_Node_Str"")).put(END_TEST_COVERAGE,postC(""String_Node_Str"")).put(LOCK,postC(""String_Node_Str"")).put(IS_LOCKED,postC(""String_Node_Str"")).put(SHAKE,postC(""String_Node_Str"")).put(COMPLEX_FIND,postC(""String_Node_Str"")).put(OPEN_NOTIFICATIONS,postC(""String_Node_Str"")).put(GET_NETWORK_CONNECTION,getC(""String_Node_Str"")).put(SET_NETWORK_CONNECTION,postC(""String_Node_Str"")).put(GET_SETTINGS,getC(""String_Node_Str"")).put(SET_SETTINGS,postC(""String_Node_Str"")).put(START_ACTIVITY,postC(""String_Node_Str"")).put(TOGGLE_LOCATION_SERVICES,postC(""String_Node_Str""));
  ImmutableMap<String,CommandInfo> mobileCommands=builder.build();
  HttpCommandExecutor mobileExecutor=new HttpCommandExecutor(mobileCommands,remoteAddress);
  super.setCommandExecutor(mobileExecutor);
  super.setErrorHandler(errorHandler);
}","public AppiumDriver(URL remoteAddress,Capabilities desiredCapabilities){
  super(remoteAddress,desiredCapabilities);
  this.executeMethod=new AppiumExecutionMethod(this);
  this.remoteAddress=remoteAddress;
  locationContext=new RemoteLocationContext(executeMethod);
  ImmutableMap.Builder<String,CommandInfo> builder=ImmutableMap.builder();
  builder.put(RESET,postC(""String_Node_Str"")).put(GET_STRINGS,postC(""String_Node_Str"")).put(PRESS_KEY_CODE,postC(""String_Node_Str"")).put(LONG_PRESS_KEY_CODE,postC(""String_Node_Str"")).put(CURRENT_ACTIVITY,getC(""String_Node_Str"")).put(SET_VALUE,postC(""String_Node_Str"")).put(PULL_FILE,postC(""String_Node_Str"")).put(PULL_FOLDER,postC(""String_Node_Str"")).put(HIDE_KEYBOARD,postC(""String_Node_Str"")).put(PUSH_FILE,postC(""String_Node_Str"")).put(RUN_APP_IN_BACKGROUND,postC(""String_Node_Str"")).put(PERFORM_TOUCH_ACTION,postC(""String_Node_Str"")).put(PERFORM_MULTI_TOUCH,postC(""String_Node_Str"")).put(IS_APP_INSTALLED,postC(""String_Node_Str"")).put(INSTALL_APP,postC(""String_Node_Str"")).put(REMOVE_APP,postC(""String_Node_Str"")).put(LAUNCH_APP,postC(""String_Node_Str"")).put(CLOSE_APP,postC(""String_Node_Str"")).put(END_TEST_COVERAGE,postC(""String_Node_Str"")).put(LOCK,postC(""String_Node_Str"")).put(IS_LOCKED,postC(""String_Node_Str"")).put(SHAKE,postC(""String_Node_Str"")).put(COMPLEX_FIND,postC(""String_Node_Str"")).put(OPEN_NOTIFICATIONS,postC(""String_Node_Str"")).put(GET_NETWORK_CONNECTION,getC(""String_Node_Str"")).put(SET_NETWORK_CONNECTION,postC(""String_Node_Str"")).put(GET_SETTINGS,getC(""String_Node_Str"")).put(SET_SETTINGS,postC(""String_Node_Str"")).put(START_ACTIVITY,postC(""String_Node_Str"")).put(TOGGLE_LOCATION_SERVICES,postC(""String_Node_Str""));
  ImmutableMap<String,CommandInfo> mobileCommands=builder.build();
  HttpCommandExecutor mobileExecutor=new HttpCommandExecutor(mobileCommands,remoteAddress);
  super.setCommandExecutor(mobileExecutor);
  super.setErrorHandler(errorHandler);
}",0.9828812220173822
20415,"@Test public void elementGestureTest(){
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  MobileElement e=driver.findElement(MobileBy.AccessibilityId(""String_Node_Str""));
  e.tap(1,1500);
  System.out.println(""String_Node_Str"");
  MobileElement e2=driver.findElementByClassName(""String_Node_Str"");
  e2.zoom();
  System.out.println(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.RIGHT,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.RIGHT,10,20,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.LEFT,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.LEFT,10,20,1000);
  System.out.println(""String_Node_Str"");
  driver.sendKeyEvent(AndroidKeyCode.BACK);
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.DOWN,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.DOWN,10,20,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.UP,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.UP,10,20,1000);
  System.out.println(""String_Node_Str"");
}","@Test public void elementGestureTest(){
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  MobileElement e=driver.findElement(MobileBy.AccessibilityId(""String_Node_Str""));
  e.tap(1,1500);
  System.out.println(""String_Node_Str"");
  MobileElement e2=driver.findElementByClassName(""String_Node_Str"");
  e2.zoom();
  System.out.println(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.RIGHT,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.RIGHT,10,20,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.LEFT,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.LEFT,10,20,1000);
  System.out.println(""String_Node_Str"");
  driver.pressKeyCode(AndroidKeyCode.BACK);
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.DOWN,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.DOWN,10,20,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.UP,1000);
  System.out.println(""String_Node_Str"");
  e2=driver.findElementByClassName(""String_Node_Str"");
  e2.swipe(SwipeElementDirection.UP,10,20,1000);
  System.out.println(""String_Node_Str"");
}",0.9940357852882704
20416,"private void assertValidAnnotations(){
  AndroidFindBy androidBy=mobileField.getAnnotation(AndroidFindBy.class);
  AndroidFindBys androidBys=mobileField.getAnnotation(AndroidFindBys.class);
  AndroidFindAll androidFindAll=mobileField.getAnnotation(AndroidFindAll.class);
  SelendroidFindBy selendroidBy=mobileField.getAnnotation(SelendroidFindBy.class);
  SelendroidFindBys selendroidBys=mobileField.getAnnotation(SelendroidFindBys.class);
  SelendroidFindAll selendroidFindAll=mobileField.getAnnotation(SelendroidFindAll.class);
  iOSFindBy iOSBy=mobileField.getAnnotation(iOSFindBy.class);
  iOSFindBys iOSBys=mobileField.getAnnotation(iOSFindBys.class);
  iOSFindAll iOSFindAll=mobileField.getAnnotation(iOSFindAll.class);
  checkDisallowedAnnotationPairs(androidBy,androidBys);
  checkDisallowedAnnotationPairs(androidBy,selendroidBys);
  checkDisallowedAnnotationPairs(androidBy,androidFindAll);
  checkDisallowedAnnotationPairs(androidBy,selendroidFindAll);
  checkDisallowedAnnotationPairs(androidBys,androidFindAll);
  checkDisallowedAnnotationPairs(androidBys,selendroidFindAll);
  checkDisallowedAnnotationPairs(selendroidBy,androidBys);
  checkDisallowedAnnotationPairs(selendroidBy,selendroidBys);
  checkDisallowedAnnotationPairs(selendroidBy,androidFindAll);
  checkDisallowedAnnotationPairs(selendroidBy,selendroidFindAll);
  checkDisallowedAnnotationPairs(selendroidBys,androidFindAll);
  checkDisallowedAnnotationPairs(selendroidBys,selendroidFindAll);
  checkDisallowedAnnotationPairs(iOSBy,iOSBys);
  checkDisallowedAnnotationPairs(iOSBy,iOSFindAll);
  checkDisallowedAnnotationPairs(iOSBys,iOSFindAll);
}","private void assertValidAnnotations(){
  AndroidFindBy androidBy=mobileField.getAnnotation(AndroidFindBy.class);
  AndroidFindBys androidBys=mobileField.getAnnotation(AndroidFindBys.class);
  AndroidFindAll androidFindAll=mobileField.getAnnotation(AndroidFindAll.class);
  SelendroidFindBy selendroidBy=mobileField.getAnnotation(SelendroidFindBy.class);
  SelendroidFindBys selendroidBys=mobileField.getAnnotation(SelendroidFindBys.class);
  SelendroidFindAll selendroidFindAll=mobileField.getAnnotation(SelendroidFindAll.class);
  iOSFindBy iOSBy=mobileField.getAnnotation(iOSFindBy.class);
  iOSFindBys iOSBys=mobileField.getAnnotation(iOSFindBys.class);
  iOSFindAll iOSFindAll=mobileField.getAnnotation(iOSFindAll.class);
  checkDisallowedAnnotationPairs(androidBy,androidBys);
  checkDisallowedAnnotationPairs(androidBy,androidFindAll);
  checkDisallowedAnnotationPairs(androidBys,androidFindAll);
  checkDisallowedAnnotationPairs(selendroidBy,selendroidBys);
  checkDisallowedAnnotationPairs(selendroidBy,selendroidFindAll);
  checkDisallowedAnnotationPairs(selendroidBys,selendroidFindAll);
  checkDisallowedAnnotationPairs(iOSBy,iOSBys);
  checkDisallowedAnnotationPairs(iOSBy,iOSFindAll);
  checkDisallowedAnnotationPairs(iOSBys,iOSFindAll);
}",0.8240611961057024
20417,"@Override public By buildBy(){
  assertValidAnnotations();
  SelendroidFindBy selendroidBy=mobileField.getAnnotation(SelendroidFindBy.class);
  if (selendroidBy != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getMobileBy(selendroidBy,getFilledValue(selendroidBy));
  }
  SelendroidFindBys selendroidBys=mobileField.getAnnotation(SelendroidFindBys.class);
  if (selendroidBys != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getMobileBy(selendroidBys,getFilledValue(selendroidBys));
  }
  SelendroidFindAll selendroidAll=mobileField.getAnnotation(SelendroidFindAll.class);
  if (selendroidAll != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getMobileBy(selendroidAll,getFilledValue(selendroidAll));
  }
  AndroidFindBy androidBy=mobileField.getAnnotation(AndroidFindBy.class);
  if (androidBy != null && ANDROID.toUpperCase().equals(platform)) {
    return getMobileBy(androidBy,getFilledValue(androidBy));
  }
  AndroidFindBys androidBys=mobileField.getAnnotation(AndroidFindBys.class);
  if (androidBys != null && ANDROID.toUpperCase().equals(platform)) {
    return getComplexMobileBy(androidBys.value(),ByChained.class);
  }
  AndroidFindAll androidFindAll=mobileField.getAnnotation(AndroidFindAll.class);
  if (androidFindAll != null && ANDROID.toUpperCase().equals(platform)) {
    return getComplexMobileBy(androidFindAll.value(),ByAll.class);
  }
  iOSFindBy iOSBy=mobileField.getAnnotation(iOSFindBy.class);
  if (iOSBy != null && IOS.toUpperCase().equals(platform)) {
    return getMobileBy(iOSBy,getFilledValue(iOSBy));
  }
  iOSFindBys iOSBys=mobileField.getAnnotation(iOSFindBys.class);
  if (iOSBys != null && IOS.toUpperCase().equals(platform)) {
    return getComplexMobileBy(iOSBys.value(),ByChained.class);
  }
  iOSFindAll iOSFindAll=mobileField.getAnnotation(iOSFindAll.class);
  if (iOSFindAll != null && IOS.toUpperCase().equals(platform)) {
    return getComplexMobileBy(iOSFindAll.value(),ByAll.class);
  }
  return super.buildBy();
}","@Override public By buildBy(){
  assertValidAnnotations();
  SelendroidFindBy selendroidBy=mobileField.getAnnotation(SelendroidFindBy.class);
  if (selendroidBy != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getMobileBy(selendroidBy,getFilledValue(selendroidBy));
  }
  SelendroidFindBys selendroidBys=mobileField.getAnnotation(SelendroidFindBys.class);
  if (selendroidBys != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getComplexMobileBy(selendroidBys.value(),ByChained.class);
  }
  SelendroidFindAll selendroidAll=mobileField.getAnnotation(SelendroidFindAll.class);
  if (selendroidAll != null && ANDROID.toUpperCase().equals(platform) && ""String_Node_Str"".toUpperCase().equals(automation)) {
    return getComplexMobileBy(selendroidAll.value(),ByAll.class);
  }
  AndroidFindBy androidBy=mobileField.getAnnotation(AndroidFindBy.class);
  if (androidBy != null && ANDROID.toUpperCase().equals(platform)) {
    return getMobileBy(androidBy,getFilledValue(androidBy));
  }
  AndroidFindBys androidBys=mobileField.getAnnotation(AndroidFindBys.class);
  if (androidBys != null && ANDROID.toUpperCase().equals(platform)) {
    return getComplexMobileBy(androidBys.value(),ByChained.class);
  }
  AndroidFindAll androidFindAll=mobileField.getAnnotation(AndroidFindAll.class);
  if (androidFindAll != null && ANDROID.toUpperCase().equals(platform)) {
    return getComplexMobileBy(androidFindAll.value(),ByAll.class);
  }
  iOSFindBy iOSBy=mobileField.getAnnotation(iOSFindBy.class);
  if (iOSBy != null && IOS.toUpperCase().equals(platform)) {
    return getMobileBy(iOSBy,getFilledValue(iOSBy));
  }
  iOSFindBys iOSBys=mobileField.getAnnotation(iOSFindBys.class);
  if (iOSBys != null && IOS.toUpperCase().equals(platform)) {
    return getComplexMobileBy(iOSBys.value(),ByChained.class);
  }
  iOSFindAll iOSFindAll=mobileField.getAnnotation(iOSFindAll.class);
  if (iOSFindAll != null && IOS.toUpperCase().equals(platform)) {
    return getComplexMobileBy(iOSFindAll.value(),ByAll.class);
  }
  return super.buildBy();
}",0.9736720554272518
20418,"@Test public void dragNDropTest(){
  driver.findElement(MobileBy.AndroidUIAutomator(""String_Node_Str"")).click();
  WebElement actionBarTitle=driver.findElement(By.id(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",actionBarTitle.getText());
  WebElement dragDot1=driver.findElement(By.id(""String_Node_Str""));
  WebElement dragDot3=driver.findElement(By.id(""String_Node_Str""));
  WebElement dragText=driver.findElement(By.id(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dragText.getText());
  TouchAction dragNDrop=new TouchAction(driver).longPress(dragDot1).moveTo(dragDot3).release();
  dragNDrop.perform();
  assertNotEquals(""String_Node_Str"",""String_Node_Str"",dragText.getText());
}","@Test public void dragNDropTest(){
  driver.findElementByAndroidUIAutomator(""String_Node_Str"");
  driver.findElementByAccessibilityId(""String_Node_Str"").click();
  driver.findElement(MobileBy.AndroidUIAutomator(""String_Node_Str"")).click();
  WebElement actionBarTitle=driver.findElement(By.id(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",actionBarTitle.getText());
  WebElement dragDot1=driver.findElement(By.id(""String_Node_Str""));
  WebElement dragDot3=driver.findElement(By.id(""String_Node_Str""));
  WebElement dragText=driver.findElement(By.id(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dragText.getText());
  TouchAction dragNDrop=new TouchAction(driver).longPress(dragDot1).moveTo(dragDot3).release();
  dragNDrop.perform();
  assertNotEquals(""String_Node_Str"",""String_Node_Str"",dragText.getText());
}",0.8605378361475923
20419,"public boolean equals(Object obj){
  if (obj instanceof Integer) {
    return value == obj;
  }
  if (obj instanceof NetworkConnectionSetting) {
    return value == ((NetworkConnectionSetting)obj).value;
  }
 else {
    return false;
  }
}","public boolean equals(Object obj){
  if (obj instanceof Integer) {
    return value == (Integer)obj;
  }
  if (obj instanceof NetworkConnectionSetting) {
    return value == ((NetworkConnectionSetting)obj).value;
  }
 else {
    return false;
  }
}",0.9815195071868584
20420,"private boolean copyToDestination(File source){
  boolean result=false;
  InputStream is=null;
  OutputStream os=null;
  try {
    File parent=destination.getParentFile();
    if (!parent.mkdirs() && !parent.isDirectory()) {
      throw new IOException(""String_Node_Str"");
    }
    if (destination.isDirectory()) {
      throw new IOException(""String_Node_Str"");
    }
    is=new FileInputStream(source);
    os=new FileOutputStream(destination);
    IOUtils.copy(is,os);
    result=true;
  }
 catch (  IOException e) {
    Logger.e(TAG,""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(is);
    IOUtils.closeQuietly(os);
  }
  return result;
}","private boolean copyToDestination(File source){
  boolean result=false;
  try {
    File parent=destination.getParentFile();
    if (!parent.mkdirs() && !parent.isDirectory()) {
      throw new IOException(""String_Node_Str"");
    }
    if (destination.isDirectory()) {
      throw new IOException(""String_Node_Str"");
    }
    IOUtils.copyFile(source,destination);
    result=true;
  }
 catch (  IOException e) {
    Logger.e(TAG,""String_Node_Str"",e);
  }
  return result;
}",0.770999115826702
20421,"public ThumbDrawable(){
  width=dp(40);
  height=dp(40);
  paint.setStrokeWidth(dp(2));
  paint.setStyle(Paint.Style.STROKE);
  paint.setStrokeCap(Paint.Cap.ROUND);
  paint.setColor(0xff757575);
  path.reset();
  for (int i=0; i < 3; i++) {
    int top=(int)(getMinimumHeight() / 2f + (i - 1) * dp(6));
    path.moveTo(dp(8),top);
    path.lineTo(getMinimumWidth() - dp(8),top);
  }
  path.moveTo(0f,0f);
  path.close();
}","public ThumbDrawable(){
  width=dp(40);
  height=dp(40);
  paint.setStrokeWidth(dp(2));
  paint.setStyle(Paint.Style.STROKE);
  paint.setStrokeCap(Paint.Cap.BUTT);
  paint.setColor(0xff757575);
  path.reset();
  for (int i=0; i < 3; i++) {
    int top=(int)(getMinimumHeight() / 2f + (i - 1) * dp(6));
    path.moveTo(dp(8),top);
    path.lineTo(getMinimumWidth() - dp(8),top);
  }
  path.close();
}",0.9646772228989038
20422,"private CharSequence parseNode(Theme theme,Post post,Node node){
  if (node instanceof TextNode) {
    String text=((TextNode)node).text();
    SpannableString spannable=new SpannableString(text);
    detectLinks(theme,post,text,spannable);
    return spannable;
  }
 else {
switch (node.nodeName()) {
case ""String_Node_Str"":
{
        return ""String_Node_Str"";
      }
case ""String_Node_Str"":
{
      Element span=(Element)node;
      SpannableString quote;
      Set<String> classes=span.classNames();
      if (classes.contains(""String_Node_Str"")) {
        quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpan(theme.quoteColor),0,quote.length(),0);
        quote.setSpan(new StrikethroughSpan(),0,quote.length(),0);
      }
 else       if (classes.contains(""String_Node_Str"")) {
        quote=new SpannableString(""String_Node_Str"" + span.text());
        String style=span.attr(""String_Node_Str"");
        if (!TextUtils.isEmpty(style)) {
          style=style.replace(""String_Node_Str"",""String_Node_Str"");
          Matcher matcher=colorPattern.matcher(style);
          int hexColor=0xff0000;
          if (matcher.find()) {
            String group=matcher.group(1);
            if (!TextUtils.isEmpty(group)) {
              try {
                hexColor=Integer.parseInt(group,16);
              }
 catch (              NumberFormatException ignored) {
              }
            }
          }
          if (hexColor >= 0 && hexColor <= 0xffffff) {
            quote.setSpan(new ForegroundColorSpan(0xff000000 + hexColor),0,quote.length(),0);
            quote.setSpan(new StyleSpan(Typeface.BOLD),0,quote.length(),0);
          }
        }
      }
 else       if (classes.contains(""String_Node_Str"")) {
        return null;
      }
 else {
        quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpan(theme.inlineQuoteColor),0,quote.length(),0);
        detectLinks(theme,post,span.text(),quote);
      }
      return quote;
    }
case ""String_Node_Str"":
{
    Element table=(Element)node;
    List<CharSequence> parts=new ArrayList<>();
    Elements tableRows=table.getElementsByTag(""String_Node_Str"");
    for (int i=0; i < tableRows.size(); i++) {
      Element tableRow=tableRows.get(i);
      if (tableRow.text().length() > 0) {
        Elements tableDatas=tableRow.getElementsByTag(""String_Node_Str"");
        for (int j=0; j < tableDatas.size(); j++) {
          Element tableData=tableDatas.get(j);
          SpannableString tableDataPart=new SpannableString(tableData.text());
          if (tableData.getElementsByTag(""String_Node_Str"").size() > 0) {
            tableDataPart.setSpan(new StyleSpan(Typeface.BOLD),0,tableDataPart.length(),0);
            tableDataPart.setSpan(new UnderlineSpan(),0,tableDataPart.length(),0);
          }
          parts.add(tableDataPart);
          if (j < tableDatas.size() - 1) {
            parts.add(""String_Node_Str"");
          }
        }
        if (i < tableRows.size() - 1) {
          parts.add(""String_Node_Str"");
        }
      }
    }
    SpannableString tableTotal=new SpannableString(TextUtils.concat(parts.toArray(new CharSequence[parts.size()])));
    tableTotal.setSpan(new ForegroundColorSpan(theme.inlineQuoteColor),0,tableTotal.length(),0);
    tableTotal.setSpan(new AbsoluteSizeSpan(sp(12f)),0,tableTotal.length(),0);
    return tableTotal;
  }
case ""String_Node_Str"":
{
  Element strong=(Element)node;
  SpannableString red=new SpannableString(strong.text());
  red.setSpan(new ForegroundColorSpan(theme.quoteColor),0,red.length(),0);
  red.setSpan(new StyleSpan(Typeface.BOLD),0,red.length(),0);
  return red;
}
case ""String_Node_Str"":
{
CharSequence anchor=parseAnchor(theme,post,(Element)node);
if (anchor != null) {
  return anchor;
}
 else {
  return ((Element)node).text();
}
}
case ""String_Node_Str"":
{
Element spoiler=(Element)node;
SpannableString link=new SpannableString(spoiler.text());
PostLinkable pl=new PostLinkable(theme,post,spoiler.text(),spoiler.text(),PostLinkable.Type.SPOILER);
link.setSpan(pl,0,link.length(),0);
post.linkables.add(pl);
return link;
}
case ""String_Node_Str"":
{
Element pre=(Element)node;
Set<String> classes=pre.classNames();
if (classes.contains(""String_Node_Str"")) {
String text=getNodeText(pre);
SpannableString monospace=new SpannableString(text);
monospace.setSpan(new TypefaceSpan(""String_Node_Str""),0,monospace.length(),0);
monospace.setSpan(new AbsoluteSizeSpan(sp(12f)),0,monospace.length(),0);
return monospace;
}
 else {
return pre.text();
}
}
default :
{
if (node instanceof Element) {
return ((Element)node).text();
}
 else {
return null;
}
}
}
}
}","private CharSequence parseNode(Theme theme,Post post,Node node){
  if (node instanceof TextNode) {
    String text=((TextNode)node).text();
    SpannableString spannable=new SpannableString(text);
    detectLinks(theme,post,text,spannable);
    return spannable;
  }
 else {
switch (node.nodeName()) {
case ""String_Node_Str"":
{
        return ""String_Node_Str"";
      }
case ""String_Node_Str"":
{
      Element span=(Element)node;
      SpannableString quote;
      Set<String> classes=span.classNames();
      if (classes.contains(""String_Node_Str"")) {
        quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpanHashed(theme.quoteColor),0,quote.length(),0);
        quote.setSpan(new StrikethroughSpan(),0,quote.length(),0);
      }
 else       if (classes.contains(""String_Node_Str"")) {
        quote=new SpannableString(""String_Node_Str"" + span.text());
        String style=span.attr(""String_Node_Str"");
        if (!TextUtils.isEmpty(style)) {
          style=style.replace(""String_Node_Str"",""String_Node_Str"");
          Matcher matcher=colorPattern.matcher(style);
          int hexColor=0xff0000;
          if (matcher.find()) {
            String group=matcher.group(1);
            if (!TextUtils.isEmpty(group)) {
              try {
                hexColor=Integer.parseInt(group,16);
              }
 catch (              NumberFormatException ignored) {
              }
            }
          }
          if (hexColor >= 0 && hexColor <= 0xffffff) {
            quote.setSpan(new ForegroundColorSpanHashed(0xff000000 + hexColor),0,quote.length(),0);
            quote.setSpan(new StyleSpan(Typeface.BOLD),0,quote.length(),0);
          }
        }
      }
 else       if (classes.contains(""String_Node_Str"")) {
        return null;
      }
 else {
        quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpanHashed(theme.inlineQuoteColor),0,quote.length(),0);
        detectLinks(theme,post,span.text(),quote);
      }
      return quote;
    }
case ""String_Node_Str"":
{
    Element table=(Element)node;
    List<CharSequence> parts=new ArrayList<>();
    Elements tableRows=table.getElementsByTag(""String_Node_Str"");
    for (int i=0; i < tableRows.size(); i++) {
      Element tableRow=tableRows.get(i);
      if (tableRow.text().length() > 0) {
        Elements tableDatas=tableRow.getElementsByTag(""String_Node_Str"");
        for (int j=0; j < tableDatas.size(); j++) {
          Element tableData=tableDatas.get(j);
          SpannableString tableDataPart=new SpannableString(tableData.text());
          if (tableData.getElementsByTag(""String_Node_Str"").size() > 0) {
            tableDataPart.setSpan(new StyleSpan(Typeface.BOLD),0,tableDataPart.length(),0);
            tableDataPart.setSpan(new UnderlineSpan(),0,tableDataPart.length(),0);
          }
          parts.add(tableDataPart);
          if (j < tableDatas.size() - 1) {
            parts.add(""String_Node_Str"");
          }
        }
        if (i < tableRows.size() - 1) {
          parts.add(""String_Node_Str"");
        }
      }
    }
    SpannableString tableTotal=new SpannableString(TextUtils.concat(parts.toArray(new CharSequence[parts.size()])));
    tableTotal.setSpan(new ForegroundColorSpanHashed(theme.inlineQuoteColor),0,tableTotal.length(),0);
    tableTotal.setSpan(new AbsoluteSizeSpanHashed(sp(12f)),0,tableTotal.length(),0);
    return tableTotal;
  }
case ""String_Node_Str"":
{
  Element strong=(Element)node;
  SpannableString red=new SpannableString(strong.text());
  red.setSpan(new ForegroundColorSpanHashed(theme.quoteColor),0,red.length(),0);
  red.setSpan(new StyleSpan(Typeface.BOLD),0,red.length(),0);
  return red;
}
case ""String_Node_Str"":
{
CharSequence anchor=parseAnchor(theme,post,(Element)node);
if (anchor != null) {
  return anchor;
}
 else {
  return ((Element)node).text();
}
}
case ""String_Node_Str"":
{
Element spoiler=(Element)node;
SpannableString link=new SpannableString(spoiler.text());
PostLinkable pl=new PostLinkable(theme,post,spoiler.text(),spoiler.text(),PostLinkable.Type.SPOILER);
link.setSpan(pl,0,link.length(),0);
post.linkables.add(pl);
return link;
}
case ""String_Node_Str"":
{
Element pre=(Element)node;
Set<String> classes=pre.classNames();
if (classes.contains(""String_Node_Str"")) {
String text=getNodeText(pre);
SpannableString monospace=new SpannableString(text);
monospace.setSpan(new TypefaceSpan(""String_Node_Str""),0,monospace.length(),0);
monospace.setSpan(new AbsoluteSizeSpanHashed(sp(12f)),0,monospace.length(),0);
return monospace;
}
 else {
return pre.text();
}
}
default :
{
if (node instanceof Element) {
return ((Element)node).text();
}
 else {
return null;
}
}
}
}
}",0.995504174694926
20423,"/** 
 * Parse the comment, subject, tripcodes, names etc. as spannables.<br> This is done on a background thread for performance, even when it is UI code.<br> The results will be placed on the Post.*Span members.
 * @param theme Theme to use for parsing
 * @param post  Post to get data from
 */
private void parseSpans(Theme theme,Post post){
  boolean anonymize=ChanSettings.anonymize.get();
  boolean anonymizeIds=ChanSettings.anonymizeIds.get();
  if (anonymize) {
    post.name=""String_Node_Str"";
    post.tripcode=""String_Node_Str"";
  }
  if (anonymizeIds) {
    post.id=""String_Node_Str"";
  }
  int detailsSizePx=sp(Integer.parseInt(ChanSettings.fontSize.get()) - 4);
  if (!TextUtils.isEmpty(post.subject)) {
    post.subjectSpan=new SpannableString(post.subject);
    if (!post.filterStub) {
      post.subjectSpan.setSpan(new ForegroundColorSpan(theme.subjectColor),0,post.subjectSpan.length(),0);
    }
  }
  if (!TextUtils.isEmpty(post.name) && !post.name.equals(""String_Node_Str"")) {
    post.nameSpan=new SpannableString(post.name);
    post.nameSpan.setSpan(new ForegroundColorSpan(theme.nameColor),0,post.nameSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.tripcode)) {
    post.tripcodeSpan=new SpannableString(post.tripcode);
    post.tripcodeSpan.setSpan(new ForegroundColorSpan(theme.nameColor),0,post.tripcodeSpan.length(),0);
    post.tripcodeSpan.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,post.tripcodeSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.id)) {
    post.idSpan=new SpannableString(""String_Node_Str"" + post.id + ""String_Node_Str"");
    int hash=post.id.hashCode();
    int r=(hash >> 24) & 0xff;
    int g=(hash >> 16) & 0xff;
    int b=(hash >> 8) & 0xff;
    int idColor=(0xff << 24) + (r << 16) + (g << 8)+ b;
    boolean lightColor=(r * 0.299f) + (g * 0.587f) + (b * 0.114f) > 125f;
    int idBgColor=lightColor ? theme.idBackgroundLight : theme.idBackgroundDark;
    post.idSpan.setSpan(new ForegroundColorSpan(idColor),0,post.idSpan.length(),0);
    post.idSpan.setSpan(new BackgroundColorSpan(idBgColor),0,post.idSpan.length(),0);
    post.idSpan.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,post.idSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.capcode)) {
    post.capcodeSpan=new SpannableString(""String_Node_Str"" + post.capcode);
    post.capcodeSpan.setSpan(new ForegroundColorSpan(theme.capcodeColor),0,post.capcodeSpan.length(),0);
    post.capcodeSpan.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,post.capcodeSpan.length(),0);
  }
  post.nameTripcodeIdCapcodeSpan=new SpannableString(""String_Node_Str"");
  if (post.nameSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.nameSpan,""String_Node_Str"");
  }
  if (post.tripcodeSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.tripcodeSpan,""String_Node_Str"");
  }
  if (post.idSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.idSpan,""String_Node_Str"");
  }
  if (post.capcodeSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.capcodeSpan,""String_Node_Str"");
  }
}","/** 
 * Parse the comment, subject, tripcodes, names etc. as spannables.<br> This is done on a background thread for performance, even when it is UI code.<br> The results will be placed on the Post.*Span members.
 * @param theme Theme to use for parsing
 * @param post  Post to get data from
 */
private void parseSpans(Theme theme,Post post){
  boolean anonymize=ChanSettings.anonymize.get();
  boolean anonymizeIds=ChanSettings.anonymizeIds.get();
  if (anonymize) {
    post.name=""String_Node_Str"";
    post.tripcode=""String_Node_Str"";
  }
  if (anonymizeIds) {
    post.id=""String_Node_Str"";
  }
  int detailsSizePx=sp(Integer.parseInt(ChanSettings.fontSize.get()) - 4);
  if (!TextUtils.isEmpty(post.subject)) {
    post.subjectSpan=new SpannableString(post.subject);
    if (!post.filterStub) {
      post.subjectSpan.setSpan(new ForegroundColorSpanHashed(theme.subjectColor),0,post.subjectSpan.length(),0);
    }
  }
  if (!TextUtils.isEmpty(post.name) && !post.name.equals(""String_Node_Str"")) {
    post.nameSpan=new SpannableString(post.name);
    post.nameSpan.setSpan(new ForegroundColorSpanHashed(theme.nameColor),0,post.nameSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.tripcode)) {
    post.tripcodeSpan=new SpannableString(post.tripcode);
    post.tripcodeSpan.setSpan(new ForegroundColorSpanHashed(theme.nameColor),0,post.tripcodeSpan.length(),0);
    post.tripcodeSpan.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,post.tripcodeSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.id)) {
    post.idSpan=new SpannableString(""String_Node_Str"" + post.id + ""String_Node_Str"");
    int hash=post.id.hashCode();
    int r=(hash >> 24) & 0xff;
    int g=(hash >> 16) & 0xff;
    int b=(hash >> 8) & 0xff;
    int idColor=(0xff << 24) + (r << 16) + (g << 8)+ b;
    boolean lightColor=(r * 0.299f) + (g * 0.587f) + (b * 0.114f) > 125f;
    int idBgColor=lightColor ? theme.idBackgroundLight : theme.idBackgroundDark;
    post.idSpan.setSpan(new ForegroundColorSpanHashed(idColor),0,post.idSpan.length(),0);
    post.idSpan.setSpan(new BackgroundColorSpan(idBgColor),0,post.idSpan.length(),0);
    post.idSpan.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,post.idSpan.length(),0);
  }
  if (!TextUtils.isEmpty(post.capcode)) {
    post.capcodeSpan=new SpannableString(""String_Node_Str"" + post.capcode);
    post.capcodeSpan.setSpan(new ForegroundColorSpanHashed(theme.capcodeColor),0,post.capcodeSpan.length(),0);
    post.capcodeSpan.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,post.capcodeSpan.length(),0);
  }
  post.nameTripcodeIdCapcodeSpan=new SpannableString(""String_Node_Str"");
  if (post.nameSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.nameSpan,""String_Node_Str"");
  }
  if (post.tripcodeSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.tripcodeSpan,""String_Node_Str"");
  }
  if (post.idSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.idSpan,""String_Node_Str"");
  }
  if (post.capcodeSpan != null) {
    post.nameTripcodeIdCapcodeSpan=TextUtils.concat(post.nameTripcodeIdCapcodeSpan,post.capcodeSpan,""String_Node_Str"");
  }
}",0.9925349922239504
20424,"private void bindPost(Theme theme,Post post){
  bound=true;
  threadMode=callback.getLoadable().isThreadMode();
  setPostLinkableListener(post,this);
  replies.setClickable(threadMode);
  if (!threadMode) {
    replies.setBackgroundResource(0);
  }
  if (highlighted) {
    setBackgroundColor(theme.highlightedColor);
  }
 else   if (post.isSavedReply) {
    setBackgroundColor(theme.savedReplyColor);
  }
 else   if (selected) {
    setBackgroundColor(theme.selectedColor);
  }
 else   if (threadMode) {
    setBackgroundResource(0);
  }
 else {
    setBackgroundResource(R.drawable.item_background);
  }
  if (post.filterHighlightedColor != 0) {
    filterMatchColor.setVisibility(View.VISIBLE);
    filterMatchColor.setBackgroundColor(post.filterHighlightedColor);
  }
 else {
    filterMatchColor.setVisibility(View.GONE);
  }
  if (post.hasImage) {
    thumbnailView.setVisibility(View.VISIBLE);
    thumbnailView.setUrl(post.thumbnailUrl,thumbnailView.getLayoutParams().width,thumbnailView.getLayoutParams().height);
  }
 else {
    thumbnailView.setVisibility(View.GONE);
    thumbnailView.setUrl(null,0,0);
  }
  List<CharSequence> titleParts=new ArrayList<>(5);
  if (post.subjectSpan != null) {
    titleParts.add(post.subjectSpan);
    titleParts.add(""String_Node_Str"");
  }
  titleParts.add(post.nameTripcodeIdCapcodeSpan);
  CharSequence time;
  if (ChanSettings.postFullDate.get()) {
    time=post.date;
  }
 else {
    time=DateUtils.getRelativeTimeSpanString(post.time * 1000L,Time.get(),DateUtils.SECOND_IN_MILLIS,0);
  }
  String noText=""String_Node_Str"" + post.no;
  SpannableString date=new SpannableString(noText + ""String_Node_Str"" + time);
  date.setSpan(new ForegroundColorSpan(theme.detailsColor),0,date.length(),0);
  date.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,date.length(),0);
  boolean noClickable=ChanSettings.tapNoReply.get();
  if (noClickable) {
    date.setSpan(new NoClickableSpan(),0,noText.length(),0);
  }
  titleParts.add(date);
  if (post.hasImage) {
    PostImage image=post.image;
    boolean postFileName=ChanSettings.postFilename.get();
    if (postFileName) {
      String filename=image.spoiler ? getString(R.string.image_spoiler_filename) : image.filename + ""String_Node_Str"" + image.extension;
      SpannableString fileInfo=new SpannableString(""String_Node_Str"" + filename);
      fileInfo.setSpan(new ForegroundColorSpan(theme.detailsColor),0,fileInfo.length(),0);
      fileInfo.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,fileInfo.length(),0);
      fileInfo.setSpan(new UnderlineSpan(),0,fileInfo.length(),0);
      titleParts.add(fileInfo);
    }
    if (ChanSettings.postFileInfo.get()) {
      SpannableString fileInfo=new SpannableString((postFileName ? ""String_Node_Str"" : ""String_Node_Str"") + image.extension.toUpperCase() + ""String_Node_Str""+ AndroidUtils.getReadableFileSize(image.size,false)+ ""String_Node_Str""+ image.imageWidth+ ""String_Node_Str""+ image.imageHeight);
      fileInfo.setSpan(new ForegroundColorSpan(theme.detailsColor),0,fileInfo.length(),0);
      fileInfo.setSpan(new AbsoluteSizeSpan(detailsSizePx),0,fileInfo.length(),0);
      titleParts.add(fileInfo);
    }
  }
  title.setText(TextUtils.concat(titleParts.toArray(new CharSequence[titleParts.size()])));
  icons.edit();
  icons.set(PostIcons.STICKY,post.sticky);
  icons.set(PostIcons.CLOSED,post.closed);
  icons.set(PostIcons.DELETED,post.deleted.get());
  icons.set(PostIcons.ARCHIVED,post.archived);
  if (!isEmpty(post.country)) {
    icons.set(PostIcons.COUNTRY,true);
    icons.showCountry(post,theme,countrySizePx);
  }
 else {
    icons.set(PostIcons.COUNTRY,false);
  }
  icons.apply();
  CharSequence commentText;
  if (post.comment.length() > COMMENT_MAX_LENGTH_BOARD && !threadMode) {
    commentText=post.comment.subSequence(0,COMMENT_MAX_LENGTH_BOARD);
  }
 else {
    commentText=post.comment;
  }
  comment.setText(commentText);
  comment.setVisibility(isEmpty(commentText) && !post.hasImage ? GONE : VISIBLE);
  if (commentClickable != threadMode) {
    commentClickable=threadMode;
    if (commentClickable) {
      comment.setMovementMethod(commentMovementMethod);
      comment.setOnClickListener(selfClicked);
      if (noClickable) {
        title.setMovementMethod(titleMovementMethod);
      }
    }
 else {
      comment.setOnClickListener(null);
      comment.setClickable(false);
      comment.setMovementMethod(null);
      title.setMovementMethod(null);
    }
  }
  int repliesFromSize;
synchronized (post.repliesFrom) {
    repliesFromSize=post.repliesFrom.size();
  }
  if ((!threadMode && post.replies > 0) || (repliesFromSize > 0)) {
    replies.setVisibility(View.VISIBLE);
    int replyCount=threadMode ? repliesFromSize : post.replies;
    String text=getResources().getQuantityString(R.plurals.reply,replyCount,replyCount);
    if (!threadMode && post.images > 0) {
      text+=""String_Node_Str"" + getResources().getQuantityString(R.plurals.image,post.images,post.images);
    }
    replies.setText(text);
    comment.setPadding(comment.getPaddingLeft(),comment.getPaddingTop(),comment.getPaddingRight(),0);
    replies.setPadding(replies.getPaddingLeft(),paddingPx,replies.getPaddingRight(),replies.getPaddingBottom());
  }
 else {
    replies.setVisibility(View.GONE);
    comment.setPadding(comment.getPaddingLeft(),comment.getPaddingTop(),comment.getPaddingRight(),paddingPx);
    replies.setPadding(replies.getPaddingLeft(),0,replies.getPaddingRight(),replies.getPaddingBottom());
  }
  divider.setVisibility(showDivider ? VISIBLE : GONE);
}","private void bindPost(Theme theme,Post post){
  bound=true;
  threadMode=callback.getLoadable().isThreadMode();
  setPostLinkableListener(post,this);
  replies.setClickable(threadMode);
  if (!threadMode) {
    replies.setBackgroundResource(0);
  }
  if (highlighted) {
    setBackgroundColor(theme.highlightedColor);
  }
 else   if (post.isSavedReply) {
    setBackgroundColor(theme.savedReplyColor);
  }
 else   if (selected) {
    setBackgroundColor(theme.selectedColor);
  }
 else   if (threadMode) {
    setBackgroundResource(0);
  }
 else {
    setBackgroundResource(R.drawable.item_background);
  }
  if (post.filterHighlightedColor != 0) {
    filterMatchColor.setVisibility(View.VISIBLE);
    filterMatchColor.setBackgroundColor(post.filterHighlightedColor);
  }
 else {
    filterMatchColor.setVisibility(View.GONE);
  }
  if (post.hasImage) {
    thumbnailView.setVisibility(View.VISIBLE);
    thumbnailView.setUrl(post.thumbnailUrl,thumbnailView.getLayoutParams().width,thumbnailView.getLayoutParams().height);
  }
 else {
    thumbnailView.setVisibility(View.GONE);
    thumbnailView.setUrl(null,0,0);
  }
  List<CharSequence> titleParts=new ArrayList<>(5);
  if (post.subjectSpan != null) {
    titleParts.add(post.subjectSpan);
    titleParts.add(""String_Node_Str"");
  }
  titleParts.add(post.nameTripcodeIdCapcodeSpan);
  CharSequence time;
  if (ChanSettings.postFullDate.get()) {
    time=post.date;
  }
 else {
    time=DateUtils.getRelativeTimeSpanString(post.time * 1000L,Time.get(),DateUtils.SECOND_IN_MILLIS,0);
  }
  String noText=""String_Node_Str"" + post.no;
  SpannableString date=new SpannableString(noText + ""String_Node_Str"" + time);
  date.setSpan(new ForegroundColorSpanHashed(theme.detailsColor),0,date.length(),0);
  date.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,date.length(),0);
  boolean noClickable=ChanSettings.tapNoReply.get();
  if (noClickable) {
    date.setSpan(new NoClickableSpan(),0,noText.length(),0);
  }
  titleParts.add(date);
  if (post.hasImage) {
    PostImage image=post.image;
    boolean postFileName=ChanSettings.postFilename.get();
    if (postFileName) {
      String filename=image.spoiler ? getString(R.string.image_spoiler_filename) : image.filename + ""String_Node_Str"" + image.extension;
      SpannableString fileInfo=new SpannableString(""String_Node_Str"" + filename);
      fileInfo.setSpan(new ForegroundColorSpanHashed(theme.detailsColor),0,fileInfo.length(),0);
      fileInfo.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,fileInfo.length(),0);
      fileInfo.setSpan(new UnderlineSpan(),0,fileInfo.length(),0);
      titleParts.add(fileInfo);
    }
    if (ChanSettings.postFileInfo.get()) {
      SpannableString fileInfo=new SpannableString((postFileName ? ""String_Node_Str"" : ""String_Node_Str"") + image.extension.toUpperCase() + ""String_Node_Str""+ AndroidUtils.getReadableFileSize(image.size,false)+ ""String_Node_Str""+ image.imageWidth+ ""String_Node_Str""+ image.imageHeight);
      fileInfo.setSpan(new ForegroundColorSpanHashed(theme.detailsColor),0,fileInfo.length(),0);
      fileInfo.setSpan(new AbsoluteSizeSpanHashed(detailsSizePx),0,fileInfo.length(),0);
      titleParts.add(fileInfo);
    }
  }
  title.setText(TextUtils.concat(titleParts.toArray(new CharSequence[titleParts.size()])));
  icons.edit();
  icons.set(PostIcons.STICKY,post.sticky);
  icons.set(PostIcons.CLOSED,post.closed);
  icons.set(PostIcons.DELETED,post.deleted.get());
  icons.set(PostIcons.ARCHIVED,post.archived);
  if (!isEmpty(post.country)) {
    icons.set(PostIcons.COUNTRY,true);
    icons.showCountry(post,theme,countrySizePx);
  }
 else {
    icons.set(PostIcons.COUNTRY,false);
  }
  icons.apply();
  CharSequence commentText;
  if (post.comment.length() > COMMENT_MAX_LENGTH_BOARD && !threadMode) {
    commentText=post.comment.subSequence(0,COMMENT_MAX_LENGTH_BOARD);
  }
 else {
    commentText=post.comment;
  }
  comment.setText(commentText);
  comment.setVisibility(isEmpty(commentText) && !post.hasImage ? GONE : VISIBLE);
  if (commentClickable != threadMode) {
    commentClickable=threadMode;
    if (commentClickable) {
      comment.setMovementMethod(commentMovementMethod);
      comment.setOnClickListener(selfClicked);
      if (noClickable) {
        title.setMovementMethod(titleMovementMethod);
      }
    }
 else {
      comment.setOnClickListener(null);
      comment.setClickable(false);
      comment.setMovementMethod(null);
      title.setMovementMethod(null);
    }
  }
  int repliesFromSize;
synchronized (post.repliesFrom) {
    repliesFromSize=post.repliesFrom.size();
  }
  if ((!threadMode && post.replies > 0) || (repliesFromSize > 0)) {
    replies.setVisibility(View.VISIBLE);
    int replyCount=threadMode ? repliesFromSize : post.replies;
    String text=getResources().getQuantityString(R.plurals.reply,replyCount,replyCount);
    if (!threadMode && post.images > 0) {
      text+=""String_Node_Str"" + getResources().getQuantityString(R.plurals.image,post.images,post.images);
    }
    replies.setText(text);
    comment.setPadding(comment.getPaddingLeft(),comment.getPaddingTop(),comment.getPaddingRight(),0);
    replies.setPadding(replies.getPaddingLeft(),paddingPx,replies.getPaddingRight(),replies.getPaddingBottom());
  }
 else {
    replies.setVisibility(View.GONE);
    comment.setPadding(comment.getPaddingLeft(),comment.getPaddingTop(),comment.getPaddingRight(),paddingPx);
    replies.setPadding(replies.getPaddingLeft(),0,replies.getPaddingRight(),replies.getPaddingBottom());
  }
  divider.setVisibility(showDivider ? VISIBLE : GONE);
}",0.9967550027041644
20425,"private void updateLayout(){
  if (!TextUtils.isEmpty(text)) {
    if (update) {
      int layoutWidth=width - getPaddingLeft() - getPaddingRight();
      if (layoutWidth > 0) {
        long cacheKey=text.toString().hashCode();
        cacheKey=31 * cacheKey + paint.getColor();
        cacheKey=31 * cacheKey + Float.floatToIntBits(paint.getTextSize());
        cacheKey=31 * cacheKey + layoutWidth;
        StaticLayout cached=textCache.get(cacheKey);
        if (cached == null) {
          cached=getStaticLayout(layoutWidth);
          textCache.put(cacheKey,cached);
        }
 else {
          Paint cachedPaint=cached.getPaint();
          if (!text.toString().equals(cached.getText().toString()) || cachedPaint.getColor() != paint.getColor() || cachedPaint.getTextSize() != paint.getTextSize() || cached.getWidth() != layoutWidth) {
            Logger.w(TAG,""String_Node_Str"",cacheKey,text.toString(),cached.getText().toString());
            cached=getStaticLayout(layoutWidth);
          }
        }
        layout=cached;
      }
 else {
        layout=null;
      }
    }
  }
 else {
    layout=null;
  }
  update=false;
}","private void updateLayout(){
  if (!TextUtils.isEmpty(text)) {
    if (update) {
      int layoutWidth=width - getPaddingLeft() - getPaddingRight();
      if (layoutWidth > 0) {
        FastTextViewItem item=new FastTextViewItem(text,paint,layoutWidth);
        StaticLayout cached=textCache.get(item);
        if (cached == null) {
          cached=getStaticLayout(layoutWidth);
          textCache.put(item,cached);
        }
        layout=cached;
      }
 else {
        layout=null;
      }
    }
  }
 else {
    layout=null;
  }
  update=false;
}",0.2264374629519857
20426,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if ((widthMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) && !singleLine) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int width=0;
  if (widthMode == MeasureSpec.EXACTLY) {
    width=widthSize;
  }
 else   if ((widthMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) && !TextUtils.isEmpty(text)) {
    width=(int)Layout.getDesiredWidth(text,paint) + getPaddingLeft() + getPaddingRight();
    if (widthMode == MeasureSpec.AT_MOST) {
      width=Math.min(width,widthSize);
    }
  }
  if (width > 0) {
    if (this.width != width) {
      this.width=width;
      update=true;
    }
    updateLayout();
    if (layout != null) {
      int height;
      if (heightMode == MeasureSpec.EXACTLY) {
        height=heightSize;
      }
 else {
        height=layout.getHeight() + getPaddingTop() + getPaddingBottom();
        if (heightMode == MeasureSpec.AT_MOST) {
          height=Math.min(height,heightSize);
        }
      }
      setMeasuredDimension(width,height);
    }
 else {
      int height;
      if (heightMode == MeasureSpec.EXACTLY) {
        height=heightSize;
      }
 else {
        height=0;
      }
      setMeasuredDimension(width,height);
    }
  }
 else {
    Logger.w(TAG,""String_Node_Str"");
    setMeasuredDimension(0,0);
  }
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if ((widthMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) && !singleLine) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int width=0;
  if (widthMode == MeasureSpec.EXACTLY) {
    width=widthSize;
  }
 else   if ((widthMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) && !TextUtils.isEmpty(text)) {
    width=Math.round(Layout.getDesiredWidth(text,paint) + getPaddingLeft() + getPaddingRight());
    if (widthMode == MeasureSpec.AT_MOST) {
      width=Math.min(width,widthSize);
    }
  }
  if (width > 0) {
    if (this.width != width) {
      this.width=width;
      update=true;
    }
    updateLayout();
    if (layout != null) {
      int height;
      if (heightMode == MeasureSpec.EXACTLY) {
        height=heightSize;
      }
 else {
        height=layout.getHeight() + getPaddingTop() + getPaddingBottom();
        if (heightMode == MeasureSpec.AT_MOST) {
          height=Math.min(height,heightSize);
        }
      }
      setMeasuredDimension(width,height);
    }
 else {
      int height;
      if (heightMode == MeasureSpec.EXACTLY) {
        height=heightSize;
      }
 else {
        height=0;
      }
      setMeasuredDimension(width,height);
    }
  }
 else {
    Logger.w(TAG,""String_Node_Str"");
    setMeasuredDimension(0,0);
  }
}",0.9947384710615907
20427,"@Override public boolean onMeasured(View view){
  Animator fromAlpha=ObjectAnimator.ofFloat(from.view,View.ALPHA,1f,0.7f);
  fromAlpha.setDuration(217);
  fromAlpha.setInterpolator(new AccelerateDecelerateInterpolator());
  Animator toAlpha=ObjectAnimator.ofFloat(to.view,View.ALPHA,0f,1f);
  toAlpha.setDuration(200);
  toAlpha.setInterpolator(new DecelerateInterpolator(2f));
  Animator toY=ObjectAnimator.ofFloat(to.view,View.TRANSLATION_Y,to.view.getHeight() * 0.08f,0f);
  toY.setDuration(350);
  toY.setInterpolator(new DecelerateInterpolator(2.5f));
  toY.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      onCompleted();
    }
  }
);
  AnimatorSet set=new AnimatorSet();
  set.playTogether(toAlpha,toY);
  set.start();
  return false;
}","@Override public boolean onMeasured(View view){
  Animator toAlpha=ObjectAnimator.ofFloat(to.view,View.ALPHA,0f,1f);
  toAlpha.setDuration(200);
  toAlpha.setInterpolator(new DecelerateInterpolator(2f));
  Animator toY=ObjectAnimator.ofFloat(to.view,View.TRANSLATION_Y,to.view.getHeight() * 0.08f,0f);
  toY.setDuration(350);
  toY.setInterpolator(new DecelerateInterpolator(2.5f));
  toY.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      onCompleted();
    }
  }
);
  AnimatorSet set=new AnimatorSet();
  set.playTogether(toAlpha,toY);
  set.start();
  return true;
}",0.8743927827897293
20428,"@Override public void perform(){
  AndroidUtils.waitForMeasure(to.view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      Animator fromAlpha=ObjectAnimator.ofFloat(from.view,View.ALPHA,1f,0.7f);
      fromAlpha.setDuration(217);
      fromAlpha.setInterpolator(new AccelerateDecelerateInterpolator());
      Animator toAlpha=ObjectAnimator.ofFloat(to.view,View.ALPHA,0f,1f);
      toAlpha.setDuration(200);
      toAlpha.setInterpolator(new DecelerateInterpolator(2f));
      Animator toY=ObjectAnimator.ofFloat(to.view,View.TRANSLATION_Y,to.view.getHeight() * 0.08f,0f);
      toY.setDuration(350);
      toY.setInterpolator(new DecelerateInterpolator(2.5f));
      toY.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          onCompleted();
        }
      }
);
      AnimatorSet set=new AnimatorSet();
      set.playTogether(toAlpha,toY);
      set.start();
      return false;
    }
  }
);
}","@Override public void perform(){
  AndroidUtils.waitForMeasure(to.view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      Animator toAlpha=ObjectAnimator.ofFloat(to.view,View.ALPHA,0f,1f);
      toAlpha.setDuration(200);
      toAlpha.setInterpolator(new DecelerateInterpolator(2f));
      Animator toY=ObjectAnimator.ofFloat(to.view,View.TRANSLATION_Y,to.view.getHeight() * 0.08f,0f);
      toY.setDuration(350);
      toY.setInterpolator(new DecelerateInterpolator(2.5f));
      toY.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          onCompleted();
        }
      }
);
      AnimatorSet set=new AnimatorSet();
      set.playTogether(toAlpha,toY);
      set.start();
      return true;
    }
  }
);
}",0.8952794357026587
20429,"@Override public void onCreate(){
  super.onCreate();
  watchManager=Chan.getWatchManager();
  EventBus.getDefault().register(this);
  view=inflateRes(R.layout.controller_navigation_drawer);
  container=(FrameLayout)view.findViewById(R.id.container);
  drawerLayout=(DrawerLayout)view.findViewById(R.id.drawer_layout);
  drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,Gravity.LEFT);
  drawer=(LinearLayout)view.findViewById(R.id.drawer);
  recyclerView=(RecyclerView)view.findViewById(R.id.drawer_recycler_view);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(context));
  settings=(LinearLayout)view.findViewById(R.id.settings);
  settings.setOnClickListener(this);
  theme().settingsDrawable.apply((ImageView)settings.findViewById(R.id.image));
  ((TextView)settings.findViewById(R.id.text)).setTypeface(ROBOTO_MEDIUM);
  pinAdapter=new PinAdapter(this);
  recyclerView.setAdapter(pinAdapter);
  pinAdapter.onPinsChanged(watchManager.getPins());
  ItemTouchHelper itemTouchHelper=new ItemTouchHelper(pinAdapter.getItemTouchHelperCallback());
  itemTouchHelper.attachToRecyclerView(recyclerView);
  updateBadge();
  AndroidUtils.waitForMeasure(drawer,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      return setDrawerWidth();
    }
  }
);
}","@Override public void onCreate(){
  super.onCreate();
  watchManager=Chan.getWatchManager();
  EventBus.getDefault().register(this);
  view=inflateRes(R.layout.controller_navigation_drawer);
  container=(FrameLayout)view.findViewById(R.id.container);
  drawerLayout=(DrawerLayout)view.findViewById(R.id.drawer_layout);
  drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,Gravity.LEFT);
  drawer=(LinearLayout)view.findViewById(R.id.drawer);
  recyclerView=(RecyclerView)view.findViewById(R.id.drawer_recycler_view);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(context));
  settings=(LinearLayout)view.findViewById(R.id.settings);
  settings.setOnClickListener(this);
  theme().settingsDrawable.apply((ImageView)settings.findViewById(R.id.image));
  ((TextView)settings.findViewById(R.id.text)).setTypeface(ROBOTO_MEDIUM);
  pinAdapter=new PinAdapter(this);
  recyclerView.setAdapter(pinAdapter);
  pinAdapter.onPinsChanged(watchManager.getPins());
  ItemTouchHelper itemTouchHelper=new ItemTouchHelper(pinAdapter.getItemTouchHelperCallback());
  itemTouchHelper.attachToRecyclerView(recyclerView);
  updateBadge();
}",0.9300476947535772
20430,"@Override public void onCreate(){
  super.onCreate();
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  navigationItem.subtitle=""String_Node_Str"";
  navigationItem.menu=new ToolbarMenu(context);
  navigationItem.menu.addItem(new ToolbarMenuItem(context,this,SAVE_ID,R.drawable.ic_file_download_white_24dp));
  overflowMenuItem=navigationItem.createOverflow(context,this,Arrays.asList(new FloatingMenuItem(OPEN_BROWSER_ID,R.string.action_open_browser),new FloatingMenuItem(SHARE_ID,R.string.action_share),new FloatingMenuItem(SEARCH_ID,R.string.action_search_image),new FloatingMenuItem(SAVE_ALBUM,R.string.action_download_album)));
  view=inflateRes(R.layout.controller_image_viewer);
  previewImage=(TransitionImageView)view.findViewById(R.id.preview_image);
  pager=(OptionalSwipeViewPager)view.findViewById(R.id.pager);
  pager.addOnPageChangeListener(presenter);
  loadingBar=(LoadingBar)view.findViewById(R.id.loading_bar);
  AndroidUtils.waitForMeasure(view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      presenter.onViewMeasured();
      return true;
    }
  }
);
}","@Override public void onCreate(){
  super.onCreate();
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  navigationItem.subtitle=""String_Node_Str"";
  navigationItem.menu=new ToolbarMenu(context);
  navigationItem.menu.addItem(new ToolbarMenuItem(context,this,SAVE_ID,R.drawable.ic_file_download_white_24dp));
  overflowMenuItem=navigationItem.createOverflow(context,this,Arrays.asList(new FloatingMenuItem(OPEN_BROWSER_ID,R.string.action_open_browser),new FloatingMenuItem(SHARE_ID,R.string.action_share),new FloatingMenuItem(SEARCH_ID,R.string.action_search_image),new FloatingMenuItem(SAVE_ALBUM,R.string.action_download_album)));
  view=inflateRes(R.layout.controller_image_viewer);
  previewImage=(TransitionImageView)view.findViewById(R.id.preview_image);
  pager=(OptionalSwipeViewPager)view.findViewById(R.id.pager);
  pager.addOnPageChangeListener(presenter);
  loadingBar=(LoadingBar)view.findViewById(R.id.loading_bar);
  if (parentController.view.getWindowToken() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AndroidUtils.waitForLayout(parentController.view.getViewTreeObserver(),view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      presenter.onViewMeasured();
      return true;
    }
  }
);
}",0.9277010560519904
20431,"@Override public void onCreate(){
  super.onCreate();
  navigationItem.setTitle(R.string.settings_screen_pass);
  view=inflateRes(R.layout.controller_pass);
  container=(LinearLayout)view.findViewById(R.id.container);
  crossfadeView=(CrossfadeView)view.findViewById(R.id.crossfade);
  errors=(TextView)view.findViewById(R.id.errors);
  button=(Button)view.findViewById(R.id.button);
  bottomDescription=(TextView)view.findViewById(R.id.bottom_description);
  inputToken=(EditText)view.findViewById(R.id.input_token);
  inputPin=(EditText)view.findViewById(R.id.input_pin);
  authenticated=(TextView)view.findViewById(R.id.authenticated);
  AnimationUtils.setHeight(errors,false,false);
  final boolean loggedIn=loggedIn();
  button.setText(loggedIn ? R.string.setting_pass_logout : R.string.setting_pass_login);
  button.setOnClickListener(this);
  bottomDescription.setText(Html.fromHtml(getString(R.string.setting_pass_bottom_description)));
  bottomDescription.setMovementMethod(LinkMovementMethod.getInstance());
  inputToken.setText(ChanSettings.passToken.get());
  inputPin.setText(ChanSettings.passPin.get());
  AndroidUtils.waitForLayout(view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      crossfadeView.getLayoutParams().height=crossfadeView.getHeight();
      crossfadeView.requestLayout();
      crossfadeView.toggle(!loggedIn,false);
      return true;
    }
  }
);
}","@Override public void onCreate(){
  super.onCreate();
  navigationItem.setTitle(R.string.settings_screen_pass);
  view=inflateRes(R.layout.controller_pass);
  container=(LinearLayout)view.findViewById(R.id.container);
  crossfadeView=(CrossfadeView)view.findViewById(R.id.crossfade);
  errors=(TextView)view.findViewById(R.id.errors);
  button=(Button)view.findViewById(R.id.button);
  bottomDescription=(TextView)view.findViewById(R.id.bottom_description);
  inputToken=(EditText)view.findViewById(R.id.input_token);
  inputPin=(EditText)view.findViewById(R.id.input_pin);
  authenticated=(TextView)view.findViewById(R.id.authenticated);
  AnimationUtils.setHeight(errors,false,false);
  final boolean loggedIn=loggedIn();
  button.setText(loggedIn ? R.string.setting_pass_logout : R.string.setting_pass_login);
  button.setOnClickListener(this);
  bottomDescription.setText(Html.fromHtml(getString(R.string.setting_pass_bottom_description)));
  bottomDescription.setMovementMethod(LinkMovementMethod.getInstance());
  inputToken.setText(ChanSettings.passToken.get());
  inputPin.setText(ChanSettings.passPin.get());
  if (parentController.view.getWindowToken() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AndroidUtils.waitForLayout(parentController.view.getViewTreeObserver(),view,new AndroidUtils.OnMeasuredCallback(){
    @Override public boolean onMeasured(    View view){
      crossfadeView.getLayoutParams().height=crossfadeView.getHeight();
      crossfadeView.requestLayout();
      crossfadeView.toggle(!loggedIn,false);
      return false;
    }
  }
);
}",0.9439313984168866
20432,"@Override public boolean onMeasured(View view){
  crossfadeView.getLayoutParams().height=crossfadeView.getHeight();
  crossfadeView.requestLayout();
  crossfadeView.toggle(!loggedIn,false);
  return true;
}","@Override public boolean onMeasured(View view){
  crossfadeView.getLayoutParams().height=crossfadeView.getHeight();
  crossfadeView.requestLayout();
  crossfadeView.toggle(!loggedIn,false);
  return false;
}",0.9830508474576272
20433,"@Override public boolean onMeasured(View view){
  setMargins();
  return true;
}","@Override public boolean onMeasured(View view){
  setMargins();
  return false;
}",0.9565217391304348
20434,"private LinearLayout createNavigationItemView(final NavigationItem item){
  if (item.search) {
    SearchLayout searchLayout=new SearchLayout(getContext());
    searchLayout.setCallback(new SearchLayout.SearchLayoutCallback(){
      @Override public void onSearchEntered(      String entered){
        item.searchText=entered;
        callback.onSearchEntered(item,entered);
      }
    }
);
    if (item.searchText != null) {
      searchLayout.setText(item.searchText);
    }
    searchLayout.setHint(callback.getSearchHint(item));
    if (openKeyboardAfterSearchViewCreated) {
      openKeyboardAfterSearchViewCreated=false;
      searchLayout.openKeyboard();
    }
    searchLayout.setPadding(dp(16),searchLayout.getPaddingTop(),searchLayout.getPaddingRight(),searchLayout.getPaddingBottom());
    return searchLayout;
  }
 else {
    @SuppressLint(""String_Node_Str"") LinearLayout menu=(LinearLayout)LayoutInflater.from(getContext()).inflate(R.layout.toolbar_menu,null);
    menu.setGravity(Gravity.CENTER_VERTICAL);
    FrameLayout titleContainer=(FrameLayout)menu.findViewById(R.id.title_container);
    final TextView titleView=(TextView)menu.findViewById(R.id.title);
    titleView.setTypeface(AndroidUtils.ROBOTO_MEDIUM);
    titleView.setText(item.title);
    titleView.setTextColor(0xffffffff);
    if (item.middleMenu != null) {
      item.middleMenu.setAnchor(titleView,Gravity.LEFT,dp(5),dp(5));
      Drawable drawable=new DropdownArrowDrawable(dp(12),dp(12),true,getAttrColor(getContext(),R.attr.dropdown_light_color),getAttrColor(getContext(),R.attr.dropdown_light_pressed_color));
      titleView.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);
      titleView.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          item.middleMenu.show();
        }
      }
);
    }
    TextView subtitleView=(TextView)menu.findViewById(R.id.subtitle);
    if (!TextUtils.isEmpty(item.subtitle)) {
      ViewGroup.LayoutParams titleParams=titleView.getLayoutParams();
      titleParams.height=ViewGroup.LayoutParams.WRAP_CONTENT;
      titleView.setLayoutParams(titleParams);
      subtitleView.setText(item.subtitle);
      subtitleView.setTextColor(0xffffffff);
      titleView.setPadding(titleView.getPaddingLeft(),dp(5f),titleView.getPaddingRight(),titleView.getPaddingBottom());
    }
 else {
      titleContainer.removeView(subtitleView);
    }
    if (item.rightView != null) {
      item.rightView.setPadding(0,0,dp(16),0);
      menu.addView(item.rightView,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
    }
    if (item.menu != null) {
      menu.addView(item.menu,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
    }
    AndroidUtils.waitForMeasure(titleView,new AndroidUtils.OnMeasuredCallback(){
      @Override public boolean onMeasured(      View view){
        if (item.middleMenu != null) {
          item.middleMenu.setPopupWidth(Math.max(dp(200),titleView.getWidth()));
        }
        return false;
      }
    }
);
    return menu;
  }
}","private LinearLayout createNavigationItemView(final NavigationItem item){
  if (item.search) {
    SearchLayout searchLayout=new SearchLayout(getContext());
    searchLayout.setCallback(new SearchLayout.SearchLayoutCallback(){
      @Override public void onSearchEntered(      String entered){
        item.searchText=entered;
        callback.onSearchEntered(item,entered);
      }
    }
);
    if (item.searchText != null) {
      searchLayout.setText(item.searchText);
    }
    searchLayout.setHint(callback.getSearchHint(item));
    if (openKeyboardAfterSearchViewCreated) {
      openKeyboardAfterSearchViewCreated=false;
      searchLayout.openKeyboard();
    }
    searchLayout.setPadding(dp(16),searchLayout.getPaddingTop(),searchLayout.getPaddingRight(),searchLayout.getPaddingBottom());
    return searchLayout;
  }
 else {
    @SuppressLint(""String_Node_Str"") LinearLayout menu=(LinearLayout)LayoutInflater.from(getContext()).inflate(R.layout.toolbar_menu,null);
    menu.setGravity(Gravity.CENTER_VERTICAL);
    FrameLayout titleContainer=(FrameLayout)menu.findViewById(R.id.title_container);
    final TextView titleView=(TextView)menu.findViewById(R.id.title);
    titleView.setTypeface(AndroidUtils.ROBOTO_MEDIUM);
    titleView.setText(item.title);
    titleView.setTextColor(0xffffffff);
    if (item.middleMenu != null) {
      item.middleMenu.setAnchor(titleView,Gravity.LEFT,dp(5),dp(5));
      Drawable drawable=new DropdownArrowDrawable(dp(12),dp(12),true,getAttrColor(getContext(),R.attr.dropdown_light_color),getAttrColor(getContext(),R.attr.dropdown_light_pressed_color));
      titleView.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);
      titleView.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          item.middleMenu.show();
        }
      }
);
    }
    TextView subtitleView=(TextView)menu.findViewById(R.id.subtitle);
    if (!TextUtils.isEmpty(item.subtitle)) {
      ViewGroup.LayoutParams titleParams=titleView.getLayoutParams();
      titleParams.height=ViewGroup.LayoutParams.WRAP_CONTENT;
      titleView.setLayoutParams(titleParams);
      subtitleView.setText(item.subtitle);
      subtitleView.setTextColor(0xffffffff);
      titleView.setPadding(titleView.getPaddingLeft(),dp(5f),titleView.getPaddingRight(),titleView.getPaddingBottom());
    }
 else {
      titleContainer.removeView(subtitleView);
    }
    if (item.rightView != null) {
      item.rightView.setPadding(0,0,dp(16),0);
      menu.addView(item.rightView,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
    }
    if (item.menu != null) {
      menu.addView(item.menu,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
    }
    if (item.middleMenu != null) {
      item.middleMenu.setPopupWidth(FloatingMenu.POPUP_WIDTH_ANCHOR);
    }
    return menu;
  }
}",0.9515831797621042
20435,"public void show(){
  popupWindow=new ListPopupWindow(context);
  popupWindow.setAnchorView(anchor);
  popupWindow.setModal(true);
  popupWindow.setDropDownGravity(anchorGravity);
  popupWindow.setVerticalOffset(-anchor.getHeight() + anchorOffsetY);
  popupWindow.setHorizontalOffset(anchorOffsetX);
  if (popupWidth == POPUP_WIDTH_ANCHOR) {
    popupWindow.setContentWidth(Math.min(dp(4 * 56),anchor.getWidth()));
  }
 else   if (popupWidth == POPUP_WIDTH_AUTO) {
    popupWindow.setContentWidth(dp(3 * 56));
  }
 else {
    popupWindow.setContentWidth(popupWidth);
  }
  List<String> stringItems=new ArrayList<>(items.size());
  int selectedPosition=0;
  for (int i=0; i < items.size(); i++) {
    stringItems.add(items.get(i).getText());
    if (items.get(i) == selectedItem) {
      selectedPosition=i;
    }
  }
  if (adapter != null) {
    popupWindow.setAdapter(adapter);
  }
 else {
    popupWindow.setAdapter(new FloatingMenuArrayAdapter(context,R.layout.toolbar_menu_item,stringItems));
  }
  popupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position >= 0 && position < items.size()) {
        callback.onFloatingMenuItemClicked(FloatingMenu.this,items.get(position));
        popupWindow.dismiss();
      }
 else {
        callback.onFloatingMenuItemClicked(FloatingMenu.this,null);
      }
    }
  }
);
  globalLayoutListener=new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (popupWindow == null) {
        Logger.w(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        if (popupWindow.isShowing()) {
          popupWindow.show();
        }
      }
    }
  }
;
  anchor.getViewTreeObserver().addOnGlobalLayoutListener(globalLayoutListener);
  popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener(){
    @Override public void onDismiss(){
      if (anchor.getViewTreeObserver().isAlive()) {
        anchor.getViewTreeObserver().removeGlobalOnLayoutListener(globalLayoutListener);
      }
      globalLayoutListener=null;
      popupWindow=null;
      callback.onFloatingMenuDismissed(FloatingMenu.this);
    }
  }
);
  popupWindow.show();
  popupWindow.setSelection(selectedPosition);
}","public void show(){
  popupWindow=new ListPopupWindow(context);
  popupWindow.setAnchorView(anchor);
  popupWindow.setModal(true);
  popupWindow.setDropDownGravity(anchorGravity);
  popupWindow.setVerticalOffset(-anchor.getHeight() + anchorOffsetY);
  popupWindow.setHorizontalOffset(anchorOffsetX);
  if (popupWidth == POPUP_WIDTH_ANCHOR) {
    popupWindow.setContentWidth(Math.min(dp(8 * 56),Math.max(dp(4 * 56),anchor.getWidth())));
  }
 else   if (popupWidth == POPUP_WIDTH_AUTO) {
    popupWindow.setContentWidth(dp(3 * 56));
  }
 else {
    popupWindow.setContentWidth(popupWidth);
  }
  List<String> stringItems=new ArrayList<>(items.size());
  int selectedPosition=0;
  for (int i=0; i < items.size(); i++) {
    stringItems.add(items.get(i).getText());
    if (items.get(i) == selectedItem) {
      selectedPosition=i;
    }
  }
  if (adapter != null) {
    popupWindow.setAdapter(adapter);
  }
 else {
    popupWindow.setAdapter(new FloatingMenuArrayAdapter(context,R.layout.toolbar_menu_item,stringItems));
  }
  popupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position >= 0 && position < items.size()) {
        callback.onFloatingMenuItemClicked(FloatingMenu.this,items.get(position));
        popupWindow.dismiss();
      }
 else {
        callback.onFloatingMenuItemClicked(FloatingMenu.this,null);
      }
    }
  }
);
  globalLayoutListener=new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (popupWindow == null) {
        Logger.w(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        if (popupWindow.isShowing()) {
          popupWindow.show();
        }
      }
    }
  }
;
  anchor.getViewTreeObserver().addOnGlobalLayoutListener(globalLayoutListener);
  popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener(){
    @Override public void onDismiss(){
      if (anchor.getViewTreeObserver().isAlive()) {
        anchor.getViewTreeObserver().removeGlobalOnLayoutListener(globalLayoutListener);
      }
      globalLayoutListener=null;
      popupWindow=null;
      callback.onFloatingMenuDismissed(FloatingMenu.this);
    }
  }
);
  popupWindow.show();
  popupWindow.setSelection(selectedPosition);
}",0.98816949881695
20436,"@Override public boolean onMeasured(View view){
switch (newMode) {
case LOWRES:
    setThumbnail(postImage.thumbnailUrl);
  break;
case BIGIMAGE:
setBigImage(postImage.imageUrl);
break;
case GIF:
setGif(postImage.imageUrl);
break;
case MOVIE:
setVideo(postImage.imageUrl);
break;
}
return false;
}","@Override public boolean onMeasured(View view){
switch (newMode) {
case LOWRES:
    setThumbnail(postImage.thumbnailUrl);
  break;
case BIGIMAGE:
setBigImage(postImage.imageUrl);
break;
case GIF:
setGif(postImage.imageUrl);
break;
case MOVIE:
setVideo(postImage.imageUrl);
break;
}
return true;
}",0.988195615514334
20437,"public void setMode(final Mode newMode){
  if (this.mode != newMode) {
    Logger.d(TAG,""String_Node_Str"" + this.mode + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ postImage.thumbnailUrl);
    Mode oldMode=this.mode;
    this.mode=newMode;
    AndroidUtils.waitForMeasure(this,new AndroidUtils.OnMeasuredCallback(){
      @Override public boolean onMeasured(      View view){
switch (newMode) {
case LOWRES:
          setThumbnail(postImage.thumbnailUrl);
        break;
case BIGIMAGE:
      setBigImage(postImage.imageUrl);
    break;
case GIF:
  setGif(postImage.imageUrl);
break;
case MOVIE:
setVideo(postImage.imageUrl);
break;
}
return false;
}
}
);
}
}","public void setMode(final Mode newMode){
  if (this.mode != newMode) {
    Logger.d(TAG,""String_Node_Str"" + this.mode + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ postImage.thumbnailUrl);
    Mode oldMode=this.mode;
    this.mode=newMode;
    AndroidUtils.waitForMeasure(this,new AndroidUtils.OnMeasuredCallback(){
      @Override public boolean onMeasured(      View view){
switch (newMode) {
case LOWRES:
          setThumbnail(postImage.thumbnailUrl);
        break;
case BIGIMAGE:
      setBigImage(postImage.imageUrl);
    break;
case GIF:
  setGif(postImage.imageUrl);
break;
case MOVIE:
setVideo(postImage.imageUrl);
break;
}
return true;
}
}
);
}
}",0.9947009841029524
20438,"private static void waitForMeasure(boolean returnIfNotZero,final View view,final OnMeasuredCallback callback){
  int width=view.getWidth();
  int height=view.getHeight();
  if (returnIfNotZero && width > 0 && height > 0) {
    callback.onMeasured(view);
  }
 else {
    view.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        final ViewTreeObserver observer=view.getViewTreeObserver();
        if (observer.isAlive()) {
          observer.removeOnPreDrawListener(this);
        }
        boolean ret;
        try {
          ret=callback.onMeasured(view);
        }
 catch (        Exception e) {
          Log.i(""String_Node_Str"",""String_Node_Str"",e);
          throw e;
        }
        return ret;
      }
    }
);
  }
}","/** 
 * Waits for a measure. Calls callback immediately if the view width and height are more than 0. Otherwise it registers an onpredrawlistener. <b>Warning: the view you give must be attached to the view root!</b>
 */
public static void waitForMeasure(final View view,final OnMeasuredCallback callback){
  if (view.getWindowToken() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  waitForLayoutInternal(true,view.getViewTreeObserver(),view,callback);
}",0.1223857474825716
20439,boolean onMeasured(View view);,"/** 
 * Called when the layout is done.
 * @param view same view as the argument.
 * @return true to continue with rendering, false to cancel and redo the layout.
 */
boolean onMeasured(View view);",0.2643171806167401
20440,"@Override public boolean onPreDraw(){
  final ViewTreeObserver observer=view.getViewTreeObserver();
  if (observer.isAlive()) {
    observer.removeOnPreDrawListener(this);
  }
  boolean ret;
  try {
    ret=callback.onMeasured(view);
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  return ret;
}","@Override public boolean onPreDraw(){
  Logger.d(TAG,""String_Node_Str"");
  ViewTreeObserver usingViewTreeObserver=viewTreeObserver;
  if (viewTreeObserver != view.getViewTreeObserver()) {
    Logger.e(TAG,""String_Node_Str"");
    usingViewTreeObserver=view.getViewTreeObserver();
  }
  if (usingViewTreeObserver.isAlive()) {
    usingViewTreeObserver.removeOnPreDrawListener(this);
  }
 else {
    Logger.w(TAG,""String_Node_Str"");
  }
  boolean ret;
  try {
    ret=callback.onMeasured(view);
  }
 catch (  Exception e) {
    Logger.i(TAG,""String_Node_Str"",e);
    throw e;
  }
  if (!ret) {
    Logger.w(TAG,""String_Node_Str"");
  }
  return ret;
}",0.6391129032258065
20441,"public static void waitForLayout(final View view,final OnMeasuredCallback callback){
  waitForMeasure(false,view,callback);
}","/** 
 * Always registers an onpredrawlistener. The given ViewTreeObserver will be used.
 */
public static void waitForLayout(final ViewTreeObserver viewTreeObserver,final View view,final OnMeasuredCallback callback){
  waitForLayoutInternal(false,viewTreeObserver,view,callback);
}",0.5812807881773399
20442,"public Pattern compile(String rawPattern){
  Pattern pattern;
  if (TextUtils.isEmpty(rawPattern)) {
    return null;
  }
  Matcher isRegex=isRegexPattern.matcher(rawPattern);
  if (isRegex.matches()) {
    String flagsGroup=isRegex.group(2);
    int flags=0;
    if (flagsGroup.contains(""String_Node_Str"")) {
      flags|=Pattern.CASE_INSENSITIVE;
    }
    try {
      pattern=Pattern.compile(isRegex.group(1),flags);
    }
 catch (    PatternSyntaxException e) {
      return null;
    }
  }
 else   if (rawPattern.charAt(0) == '""' && rawPattern.charAt(rawPattern.length() - 1) == '""') {
    pattern=Pattern.compile(escapeRegex(rawPattern).substring(1,rawPattern.length() - 1));
  }
 else {
    String[] words=rawPattern.split(""String_Node_Str"");
    String text=""String_Node_Str"";
    for (int i=0, wordsLength=words.length; i < wordsLength; i++) {
      String word=words[i];
      text+=""String_Node_Str"" + (wildcardPattern.matcher(escapeRegex(word)).replaceAll(""String_Node_Str"")) + ""String_Node_Str"";
      if (i < words.length - 1) {
        text+=""String_Node_Str"";
      }
    }
    pattern=Pattern.compile(text,Pattern.CASE_INSENSITIVE);
  }
  return pattern;
}","public Pattern compile(String rawPattern){
  Pattern pattern;
  if (TextUtils.isEmpty(rawPattern)) {
    return null;
  }
  Matcher isRegex=isRegexPattern.matcher(rawPattern);
  if (isRegex.matches()) {
    String flagsGroup=isRegex.group(2);
    int flags=0;
    if (flagsGroup.contains(""String_Node_Str"")) {
      flags|=Pattern.CASE_INSENSITIVE;
    }
    try {
      pattern=Pattern.compile(isRegex.group(1),flags);
    }
 catch (    PatternSyntaxException e) {
      return null;
    }
  }
 else   if (rawPattern.length() >= 2 && rawPattern.charAt(0) == '""' && rawPattern.charAt(rawPattern.length() - 1) == '""') {
    pattern=Pattern.compile(escapeRegex(rawPattern).substring(1,rawPattern.length() - 1));
  }
 else {
    String[] words=rawPattern.split(""String_Node_Str"");
    String text=""String_Node_Str"";
    for (int i=0, wordsLength=words.length; i < wordsLength; i++) {
      String word=words[i];
      text+=""String_Node_Str"" + (wildcardPattern.matcher(escapeRegex(word)).replaceAll(""String_Node_Str"")) + ""String_Node_Str"";
      if (i < words.length - 1) {
        text+=""String_Node_Str"";
      }
    }
    pattern=Pattern.compile(text,Pattern.CASE_INSENSITIVE);
  }
  return pattern;
}",0.9882055602358888
20443,"private void setPostLinkableListener(Post post,PostLinkable.Callback callback){
  if (post.comment instanceof SpannedString) {
    SpannedString commentSpannable=(SpannedString)post.comment;
    PostLinkable[] linkables=commentSpannable.getSpans(0,commentSpannable.length(),PostLinkable.class);
    for (    PostLinkable linkable : linkables) {
      if (callback == null) {
        if (linkable.hasCallback(this)) {
          linkable.removeCallback(this);
        }
      }
 else {
        linkable.addCallback(callback);
      }
    }
  }
}","private void setPostLinkableListener(Post post,PostLinkable.Callback callback){
  if (post.comment instanceof Spanned) {
    Spanned commentSpannable=(Spanned)post.comment;
    PostLinkable[] linkables=commentSpannable.getSpans(0,commentSpannable.length(),PostLinkable.class);
    for (    PostLinkable linkable : linkables) {
      if (callback == null) {
        if (linkable.hasCallback(this)) {
          linkable.removeCallback(this);
        }
      }
 else {
        linkable.addCallback(callback);
      }
    }
  }
}",0.9831460674157304
20444,"private void cancelDueToCancellation(Exception e){
  if (cancelled)   return;
  cancelled=true;
  Log.d(TAG,""String_Node_Str"");
  purgeOutput();
  finish();
}","private void cancelDueToCancellation(Exception e){
  if (cancelled)   return;
  cancelled=true;
  Log.d(TAG,""String_Node_Str"");
  purgeOutput();
}",0.9605263157894736
20445,"@Override public void run(){
  callback.onProgress(0,0,true);
  callback.onSuccess(output);
}","@Override public void run(){
  callback.onProgress(progressDownloaded,progressTotal,progressDone);
}",0.6113989637305699
20446,"private void cancelDueToHttpError(final int code){
  if (cancelled)   return;
  cancelled=true;
  Log.w(TAG,""String_Node_Str"" + code);
  purgeOutput();
  finish();
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onFail(code == 404);
    }
  }
);
}","private void cancelDueToHttpError(final int code){
  if (cancelled)   return;
  cancelled=true;
  Log.w(TAG,""String_Node_Str"" + code);
  purgeOutput();
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onFail(code == 404);
    }
  }
);
}",0.9800664451827242
20447,"private void execute() throws Exception {
  Request request=new Request.Builder().url(url).build();
  call=fileCache.httpClient.newCall(request);
  Response response=call.execute();
  if (!response.isSuccessful()) {
    cancelDueToHttpError(response.code());
    return;
  }
  body=response.body();
  long contentLength=body.contentLength();
  BufferedSource source=body.source();
  OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(output));
  downloadInput=source;
  downloadOutput=outputStream;
  int read;
  long total=0;
  long totalLast=0;
  byte[] buffer=new byte[4096];
  while ((read=source.read(buffer)) != -1) {
    outputStream.write(buffer,0,read);
    total+=read;
    if (total >= totalLast + 16384) {
      totalLast=total;
      progress(total,contentLength,false);
    }
    if (Thread.currentThread().isInterrupted())     throw new InterruptedIOException();
  }
}","private void execute() throws Exception {
  Request request=new Request.Builder().url(url).build();
  call=fileCache.httpClient.newCall(request);
  Response response=call.execute();
  if (!response.isSuccessful()) {
    cancelDueToHttpError(response.code());
    return;
  }
  body=response.body();
  long contentLength=body.contentLength();
  BufferedSource source=body.source();
  OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(output));
  downloadInput=source;
  downloadOutput=outputStream;
  int read;
  long total=0;
  long totalLast=0;
  byte[] buffer=new byte[4096];
  while ((read=source.read(buffer)) != -1) {
    outputStream.write(buffer,0,read);
    total+=read;
    if (total >= totalLast + 16384) {
      totalLast=total;
      progress(total,contentLength,false);
    }
  }
  if (Thread.currentThread().isInterrupted())   throw new InterruptedIOException();
  success();
}",0.9906439185470556
20448,"private void cancelDueToException(Exception e){
  if (cancelled)   return;
  cancelled=true;
  Log.w(TAG,""String_Node_Str"",e);
  purgeOutput();
  finish();
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onFail(false);
    }
  }
);
}","private void cancelDueToException(Exception e){
  if (cancelled)   return;
  cancelled=true;
  Log.w(TAG,""String_Node_Str"",e);
  purgeOutput();
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onFail(false);
    }
  }
);
}",0.9790940766550522
20449,"private void success(){
  fileCache.put(output);
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onSuccess(output);
    }
  }
);
}","private void success(){
  fileCache.put(output);
  post(new Runnable(){
    @Override public void run(){
      callback.onProgress(0,0,true);
      callback.onSuccess(output);
    }
  }
);
  call=null;
}",0.9669211195928752
20450,"private void finish(){
  Util.closeQuietly(downloadInput);
  Util.closeQuietly(downloadOutput);
  if (call != null) {
    call.cancel();
  }
  if (body != null) {
    Util.closeQuietly(body);
  }
}","private void finish(){
  Util.closeQuietly(downloadInput);
  Util.closeQuietly(downloadOutput);
  if (call != null) {
    call.cancel();
    call=null;
  }
  if (body != null) {
    Util.closeQuietly(body);
    body=null;
  }
}",0.929245283018868
20451,"private RelativeLayout createView(){
  RelativeLayout compound=new RelativeLayout(getActivity());
  LinearLayout listViewContainer=new LinearLayout(getActivity());
  listViewContainer.setOrientation(LinearLayout.VERTICAL);
  filterView=new FilterView(getActivity());
  filterView.setVisibility(View.GONE);
  listViewContainer.addView(filterView,Utils.MATCH_WRAP_PARAMS);
  if (viewMode == ThreadManager.ViewMode.LIST) {
    ListView list=new ListView(getActivity());
    listView=list;
    postAdapter=new PostAdapter(getActivity(),threadManager,listView,this);
    listView.setAdapter(postAdapter);
    list.setSelectionFromTop(loadable.listViewIndex,loadable.listViewTop);
  }
 else   if (viewMode == ThreadManager.ViewMode.GRID) {
    GridView grid=new GridView(getActivity());
    grid.setNumColumns(GridView.AUTO_FIT);
    int postGridWidth=baseActivity.getResources().getDimensionPixelSize(R.dimen.post_grid_width);
    grid.setColumnWidth(postGridWidth);
    listView=grid;
    postAdapter=new PostAdapter(getActivity(),threadManager,listView,this);
    listView.setAdapter(postAdapter);
    listView.setSelection(loadable.listViewIndex);
  }
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
      if (!isFiltering) {
        if (skipLogic != null) {
          skipLogic.onScrollStateChanged(view,scrollState);
        }
      }
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (!isFiltering) {
        if (loadable != null) {
          int index=view.getFirstVisiblePosition();
          View v=view.getChildAt(0);
          int top=v == null ? 0 : v.getTop();
          if (index != 0 || top != 0) {
            loadable.listViewIndex=index;
            loadable.listViewTop=top;
          }
        }
        if (skipLogic != null) {
          skipLogic.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
        }
      }
    }
  }
);
  listViewContainer.addView(listView,Utils.MATCH_PARAMS);
  compound.addView(listViewContainer,Utils.MATCH_PARAMS);
  if (loadable.isThreadMode()) {
    skip=new ImageView(getActivity());
    skip.setImageResource(R.drawable.skip_arrow_down);
    skip.setVisibility(View.GONE);
    compound.addView(skip,Utils.WRAP_PARAMS);
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)skip.getLayoutParams();
    params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
    params.setMargins(0,0,Utils.dp(8),Utils.dp(8));
    skip.setLayoutParams(params);
    skipLogic=new SkipLogic(skip,listView);
  }
  return compound;
}","private RelativeLayout createView(){
  RelativeLayout compound=new RelativeLayout(getActivity());
  LinearLayout listViewContainer=new LinearLayout(getActivity());
  listViewContainer.setOrientation(LinearLayout.VERTICAL);
  filterView=new FilterView(getActivity());
  filterView.setVisibility(View.GONE);
  listViewContainer.addView(filterView,Utils.MATCH_WRAP_PARAMS);
  if (viewMode == ThreadManager.ViewMode.LIST) {
    ListView list=new ListView(getActivity());
    listView=list;
    postAdapter=new PostAdapter(getActivity(),threadManager,listView,this);
    listView.setAdapter(postAdapter);
    list.setSelectionFromTop(loadable.listViewIndex,loadable.listViewTop);
  }
 else   if (viewMode == ThreadManager.ViewMode.GRID) {
    GridView grid=new GridView(getActivity());
    grid.setNumColumns(GridView.AUTO_FIT);
    int postGridWidth=getActivity().getResources().getDimensionPixelSize(R.dimen.post_grid_width);
    grid.setColumnWidth(postGridWidth);
    listView=grid;
    postAdapter=new PostAdapter(getActivity(),threadManager,listView,this);
    listView.setAdapter(postAdapter);
    listView.setSelection(loadable.listViewIndex);
  }
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
      if (!isFiltering) {
        if (skipLogic != null) {
          skipLogic.onScrollStateChanged(view,scrollState);
        }
      }
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (!isFiltering) {
        if (loadable != null) {
          int index=view.getFirstVisiblePosition();
          View v=view.getChildAt(0);
          int top=v == null ? 0 : v.getTop();
          if (index != 0 || top != 0) {
            loadable.listViewIndex=index;
            loadable.listViewTop=top;
          }
        }
        if (skipLogic != null) {
          skipLogic.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
        }
      }
    }
  }
);
  listViewContainer.addView(listView,Utils.MATCH_PARAMS);
  compound.addView(listViewContainer,Utils.MATCH_PARAMS);
  if (loadable.isThreadMode()) {
    skip=new ImageView(getActivity());
    skip.setImageResource(R.drawable.skip_arrow_down);
    skip.setVisibility(View.GONE);
    compound.addView(skip,Utils.WRAP_PARAMS);
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)skip.getLayoutParams();
    params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
    params.setMargins(0,0,Utils.dp(8),Utils.dp(8));
    skip.setLayoutParams(params);
    skipLogic=new SkipLogic(skip,listView);
  }
  return compound;
}",0.9983543609434996
20452,"@Override public void onCreate(){
  super.onCreate();
  try {
    ViewConfiguration config=ViewConfiguration.get(this);
    Field menuKeyField=ViewConfiguration.class.getDeclaredField(""String_Node_Str"");
    if (menuKeyField != null) {
      menuKeyField.setAccessible(true);
      menuKeyField.setBoolean(config,false);
    }
  }
 catch (  Exception e) {
  }
  if (ChanBuild.DEVELOPER_MODE) {
  }
  IconCache.createIcons(this);
  Ion.getDefault(this).getCache().setMaxSize(1 * 1024 * 1024);
  File cacheDir=getExternalCacheDir() != null ? getExternalCacheDir() : getCacheDir();
  volleyRequestQueue=Volley.newRequestQueue(this,null,new File(cacheDir,Volley.DEFAULT_CACHE_DIR),VOLLEY_CACHE_SIZE);
  imageLoader=new ImageLoader(volleyRequestQueue,new BitmapLruImageCache(VOLLEY_LRU_CACHE_SIZE));
  fileCache=new FileCache(new File(cacheDir,FILE_CACHE_NAME),FILE_CACHE_DISK_SIZE);
  databaseManager=new DatabaseManager(this);
  boardManager=new BoardManager();
  watchManager=new WatchManager(this);
  replyManager=new ReplyManager(this);
}","@Override public void onCreate(){
  super.onCreate();
  try {
    ViewConfiguration config=ViewConfiguration.get(this);
    Field menuKeyField=ViewConfiguration.class.getDeclaredField(""String_Node_Str"");
    if (menuKeyField != null) {
      menuKeyField.setAccessible(true);
      menuKeyField.setBoolean(config,false);
    }
  }
 catch (  Exception e) {
  }
  if (ChanBuild.DEVELOPER_MODE) {
  }
  IconCache.createIcons(this);
  Ion.getDefault(getInstance()).getCache().clear();
  Ion.getDefault(getInstance()).getCache().setMaxSize(1 * 1024 * 1024);
  File cacheDir=getExternalCacheDir() != null ? getExternalCacheDir() : getCacheDir();
  volleyRequestQueue=Volley.newRequestQueue(this,null,new File(cacheDir,Volley.DEFAULT_CACHE_DIR),VOLLEY_CACHE_SIZE);
  imageLoader=new ImageLoader(volleyRequestQueue,new BitmapLruImageCache(VOLLEY_LRU_CACHE_SIZE));
  fileCache=new FileCache(new File(cacheDir,FILE_CACHE_NAME),FILE_CACHE_DISK_SIZE);
  databaseManager=new DatabaseManager(this);
  boardManager=new BoardManager();
  watchManager=new WatchManager(this);
  replyManager=new ReplyManager(this);
}",0.9677117454375292
20453,"public FileCache(File directory,long maxSize){
  this.directory=directory;
  this.maxSize=maxSize;
  makeDir();
}","public FileCache(File directory,long maxSize){
  this.directory=directory;
  this.maxSize=maxSize;
  makeDir();
  calculateSize();
}",0.9224489795918368
20454,"public Future<Response<File>> downloadFile(Context context,String url,final DownloadedCallback callback){
  File file=get(url);
  if (file.exists()) {
    file.setLastModified(Time.get());
    callback.onProgress(0,0,true);
    callback.onSuccess(file);
    return null;
  }
 else {
    return Ion.with(context).load(url).progress(new ProgressCallback(){
      @Override public void onProgress(      final long downloaded,      final long total){
        Utils.runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onProgress(downloaded,total,false);
          }
        }
);
      }
    }
).write(file).withResponse().setCallback(new FutureCallback<Response<File>>(){
      @Override public void onCompleted(      Exception e,      Response<File> result){
        callback.onProgress(0,0,true);
        if (result != null && result.getHeaders() != null && result.getHeaders().getResponseCode() / 100 != 2) {
          if (result.getResult() != null) {
            delete(result.getResult());
          }
          callback.onFail(true);
          return;
        }
        if (e != null && !(e instanceof CancellationException)) {
          e.printStackTrace();
          if (result != null && result.getResult() != null) {
            delete(result.getResult());
          }
          callback.onFail(false);
          return;
        }
        if (result != null && result.getResult() != null) {
          put(result.getResult());
          callback.onSuccess(result.getResult());
        }
      }
    }
);
  }
}","public Future<Response<File>> downloadFile(Context context,String url,final DownloadedCallback callback){
  File file=get(url);
  if (file.exists()) {
    file.setLastModified(Time.get());
    callback.onProgress(0,0,true);
    callback.onSuccess(file);
    return null;
  }
 else {
    return ChanApplication.getIon().load(url).progress(new ProgressCallback(){
      @Override public void onProgress(      final long downloaded,      final long total){
        Utils.runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onProgress(downloaded,total,false);
          }
        }
);
      }
    }
).write(file).withResponse().setCallback(new FutureCallback<Response<File>>(){
      @Override public void onCompleted(      Exception e,      Response<File> result){
        callback.onProgress(0,0,true);
        if (result != null && result.getHeaders() != null && result.getHeaders().getResponseCode() / 100 != 2) {
          if (result.getResult() != null) {
            delete(result.getResult());
          }
          callback.onFail(true);
          return;
        }
        if (e != null && !(e instanceof CancellationException)) {
          e.printStackTrace();
          if (result != null && result.getResult() != null) {
            delete(result.getResult());
          }
          callback.onFail(false);
          return;
        }
        if (result != null && result.getResult() != null) {
          put(result.getResult());
          callback.onSuccess(result.getResult());
        }
      }
    }
);
  }
}",0.9893924783027964
20455,"private void makeDir(){
  if (!directory.exists()) {
    calculateSize();
    if (!directory.mkdirs()) {
      Logger.e(TAG,""String_Node_Str"" + directory.getAbsolutePath());
    }
  }
}","private void makeDir(){
  if (!directory.exists()) {
    if (!directory.mkdirs()) {
      Logger.e(TAG,""String_Node_Str"" + directory.getAbsolutePath());
    }
 else {
      calculateSize();
    }
  }
}",0.8290155440414507
20456,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.setType(""String_Node_Str"");
  try {
    startActivityForResult(intent,IMAGE_RESULT);
  }
 catch (  ActivityNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(this,R.string.image_open_failed,Toast.LENGTH_LONG).show();
    finish();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.addCategory(Intent.CATEGORY_OPENABLE);
  intent.setType(""String_Node_Str"");
  try {
    startActivityForResult(intent,IMAGE_RESULT);
  }
 catch (  ActivityNotFoundException e) {
    e.printStackTrace();
    Toast.makeText(this,R.string.file_open_failed,Toast.LENGTH_LONG).show();
    finish();
  }
}",0.9186712485681556
20457,"@Override public void run(){
  ChanApplication.getReplyManager()._onPickedFile(finalName,cacheFile);
}","@Override public void run(){
  ChanApplication.getReplyManager()._onPickedFile(""String_Node_Str"",null);
  Toast.makeText(ImagePickActivity.this,R.string.file_open_failed,Toast.LENGTH_LONG).show();
}",0.62
20458,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  finish();
  if (requestCode == IMAGE_RESULT && resultCode == Activity.RESULT_OK) {
    if (data != null) {
      final Uri uri=data.getData();
      Cursor returnCursor=getContentResolver().query(uri,null,null,null,null);
      if (returnCursor != null) {
        int nameIndex=returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
        returnCursor.moveToFirst();
        String name=""String_Node_Str"";
        if (nameIndex > -1) {
          name=returnCursor.getString(nameIndex);
        }
        returnCursor.close();
        final String finalName=name;
        ChanApplication.getReplyManager()._onPickedFileLoading();
        new Thread(new Runnable(){
          @Override public void run(){
            try {
              final File cacheFile=new File(getCacheDir() + File.separator + ""String_Node_Str"");
              if (cacheFile.exists()) {
                cacheFile.delete();
              }
              InputStream is=getContentResolver().openInputStream(uri);
              FileOutputStream fos=new FileOutputStream(cacheFile);
              IOUtils.copy(is,fos);
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  ChanApplication.getReplyManager()._onPickedFile(finalName,cacheFile);
                }
              }
);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
).start();
      }
 else {
        Toast.makeText(this,R.string.image_open_failed,Toast.LENGTH_LONG).show();
      }
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  finish();
  if (requestCode == IMAGE_RESULT && resultCode == Activity.RESULT_OK) {
    if (data != null) {
      final Uri uri=data.getData();
      String name=""String_Node_Str"";
      Cursor returnCursor=getContentResolver().query(uri,null,null,null,null);
      if (returnCursor != null) {
        int nameIndex=returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
        returnCursor.moveToFirst();
        if (nameIndex > -1) {
          name=returnCursor.getString(nameIndex);
        }
        returnCursor.close();
      }
      ChanApplication.getReplyManager()._onPickedFileLoading();
      final String finalName=name;
      new Thread(new Runnable(){
        @Override public void run(){
          try {
            final File cacheFile=new File(getCacheDir() + File.separator + ""String_Node_Str"");
            if (cacheFile.exists()) {
              cacheFile.delete();
            }
            ParcelFileDescriptor fileDescriptor=getContentResolver().openFileDescriptor(uri,""String_Node_Str"");
            FileInputStream is=new FileInputStream(fileDescriptor.getFileDescriptor());
            FileOutputStream os=new FileOutputStream(cacheFile);
            IOUtils.copy(is,os);
            runOnUiThread(new Runnable(){
              @Override public void run(){
                ChanApplication.getReplyManager()._onPickedFile(finalName,cacheFile);
              }
            }
);
          }
 catch (          IOException e) {
            e.printStackTrace();
            Utils.runOnUiThread(new Runnable(){
              @Override public void run(){
                ChanApplication.getReplyManager()._onPickedFile(""String_Node_Str"",null);
                Toast.makeText(ImagePickActivity.this,R.string.file_open_failed,Toast.LENGTH_LONG).show();
              }
            }
);
          }
        }
      }
).start();
    }
  }
}",0.7992191857222533
20459,"private void deletePost(final Post post){
  final CheckBox view=new CheckBox(activity);
  view.setText(R.string.delete_image_only);
  int padding=Utils.dp(12f);
  view.setPadding(padding,padding,padding,padding);
  new AlertDialog.Builder(activity).setTitle(R.string.delete_confirm).setView(view).setPositiveButton(R.string.delete,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      doDeletePost(post,view.isChecked());
    }
  }
).setNegativeButton(R.string.cancel,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
).show();
}","private void deletePost(final Post post){
  final CheckBox checkBox=new CheckBox(activity);
  checkBox.setText(R.string.delete_image_only);
  LinearLayout wrapper=new LinearLayout(activity);
  wrapper.addView(checkBox);
  int padding=Utils.dp(8f);
  wrapper.setPadding(padding,padding,padding,padding);
  new AlertDialog.Builder(activity).setTitle(R.string.delete_confirm).setView(wrapper).setPositiveButton(R.string.delete,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      doDeletePost(post,checkBox.isChecked());
    }
  }
).setNegativeButton(R.string.cancel,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
).show();
}",0.8977519941986947
20460,"@Override public View getView(final int position,View convertView,final ViewGroup parent){
switch (getItemViewType(position)) {
case VIEW_TYPE_ITEM:
{
      if (convertView == null) {
        convertView=LayoutInflater.from(context).inflate(R.layout.board_select_spinner,null);
      }
      TextView textView=(TextView)convertView;
      textView.setText(getItem(position));
      return textView;
    }
case VIEW_TYPE_ADD:
{
    if (convertView == null) {
      convertView=LayoutInflater.from(context).inflate(R.layout.board_select_add,null);
    }
    TextView textView=(TextView)convertView;
    textView.setText(getItem(position));
    return textView;
  }
}
return null;
}","@Override public View getView(final int position,View convertView,final ViewGroup parent){
switch (getItemViewType(position)) {
case VIEW_TYPE_ITEM:
{
      if (convertView == null || (Integer)convertView.getTag() != VIEW_TYPE_ITEM) {
        convertView=LayoutInflater.from(context).inflate(R.layout.board_select_spinner,null);
        convertView.setTag(VIEW_TYPE_ITEM);
      }
      TextView textView=(TextView)convertView;
      textView.setText(getItem(position));
      return textView;
    }
case VIEW_TYPE_ADD:
{
    if (convertView == null || (Integer)convertView.getTag() != VIEW_TYPE_ADD) {
      convertView=LayoutInflater.from(context).inflate(R.layout.board_select_add,null);
      convertView.setTag(VIEW_TYPE_ADD);
    }
    TextView textView=(TextView)convertView;
    textView.setText(getItem(position));
    return textView;
  }
}
return null;
}",0.8795336787564767
20461,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  boardSpinner=new Spinner(actionBar.getThemedContext());
  boardSpinner.setAdapter(new BoardSpinnerAdapter(this));
  boardSpinner.setOnItemSelectedListener(this);
  actionBar.setCustomView(boardSpinner);
  actionBar.setDisplayShowCustomEnabled(true);
  updatePaneState();
  updateActionBarState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
  Bundle extras=startIntent.getExtras();
  if (extras != null) {
    int pinId=extras.getInt(""String_Node_Str"",-2);
    if (pinId != -2) {
      if (pinId == -1) {
        pinDrawer.openDrawer(pinDrawerView);
      }
 else {
        Pin pin=ChanApplication.getPinnedManager().findPinById(pinId);
        if (pin != null) {
          startLoadingThread(pin.loadable);
        }
      }
    }
  }
  ignoreNextOnItemSelected=true;
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  boardSpinner=new Spinner(actionBar.getThemedContext());
  boardSpinner.setAdapter(new BoardSpinnerAdapter(this));
  boardSpinner.setOnItemSelectedListener(this);
  actionBar.setCustomView(boardSpinner);
  actionBar.setDisplayShowCustomEnabled(true);
  updatePaneState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
  Bundle extras=startIntent.getExtras();
  if (extras != null) {
    int pinId=extras.getInt(""String_Node_Str"",-2);
    if (pinId != -2) {
      if (pinId == -1) {
        pinDrawer.openDrawer(pinDrawerView);
      }
 else {
        Pin pin=ChanApplication.getPinnedManager().findPinById(pinId);
        if (pin != null) {
          startLoadingThread(pin.loadable);
        }
      }
    }
  }
  ignoreNextOnItemSelected=true;
}",0.9930666666666668
20462,"private void updatePaneState(){
  DisplayMetrics metrics=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int width=metrics.widthPixels;
  FrameLayout left=(FrameLayout)findViewById(R.id.left_pane);
  FrameLayout right=(FrameLayout)findViewById(R.id.right_pane);
  LayoutParams leftParams=left.getLayoutParams();
  LayoutParams rightParams=right.getLayoutParams();
  if (width < Utils.dp(800)) {
    if (width < Utils.dp(400)) {
      leftParams.width=width - Utils.dp(30);
    }
 else {
      leftParams.width=width - Utils.dp(150);
    }
    rightParams.width=width;
  }
 else {
    leftParams.width=Utils.dp(300);
    rightParams.width=width - Utils.dp(300);
  }
  left.setLayoutParams(leftParams);
  right.setLayoutParams(rightParams);
  threadPane.requestLayout();
  left.requestLayout();
  right.requestLayout();
}","private void updatePaneState(){
  DisplayMetrics metrics=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int width=metrics.widthPixels;
  FrameLayout left=(FrameLayout)findViewById(R.id.left_pane);
  FrameLayout right=(FrameLayout)findViewById(R.id.right_pane);
  LayoutParams leftParams=left.getLayoutParams();
  LayoutParams rightParams=right.getLayoutParams();
  boolean wasSlidable=threadPane.isSlideable();
  boolean isSlidable;
  if (width < Utils.dp(400)) {
    leftParams.width=width - Utils.dp(30);
    rightParams.width=width;
    isSlidable=true;
  }
 else   if (width < Utils.dp(800)) {
    leftParams.width=width - Utils.dp(60);
    rightParams.width=width;
    isSlidable=true;
  }
 else   if (width < Utils.dp(1000)) {
    leftParams.width=Utils.dp(300);
    rightParams.width=width - Utils.dp(300);
    isSlidable=false;
  }
 else {
    leftParams.width=Utils.dp(400);
    rightParams.width=width - Utils.dp(400);
    isSlidable=false;
  }
  left.setLayoutParams(leftParams);
  right.setLayoutParams(rightParams);
  threadPane.requestLayout();
  left.requestLayout();
  right.requestLayout();
  updateActionBarState();
  if (isSlidable != wasSlidable) {
    threadPane.postDelayed(new Runnable(){
      @Override public void run(){
        updateActionBarState();
      }
    }
,1000);
  }
}",0.438692098092643
20463,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  pinDrawerListener.onConfigurationChanged(newConfig);
  updateActionBarState();
  updatePaneState();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  pinDrawerListener.onConfigurationChanged(newConfig);
  updatePaneState();
}",0.9362745098039216
20464,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeHelper.setTheme(this);
  ThemeHelper.getInstance().reloadPostViewColors(this);
  setContentView(R.layout.activity_base);
  pinDrawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  initDrawer();
  threadPane=(SlidingPaneLayout)findViewById(R.id.pane_container);
  initPane();
  ChanApplication.getPinnedManager().addPinListener(this);
  updateIcon();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!isTaskRoot()) {
    final Intent intent=getIntent();
    final String intentAction=intent.getAction();
    if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) && intentAction != null && intentAction.equals(Intent.ACTION_MAIN)) {
      Log.w(TAG,""String_Node_Str"");
      finish();
      wasFinished=true;
      return;
    }
  }
  ThemeHelper.setTheme(this);
  ThemeHelper.getInstance().reloadPostViewColors(this);
  setContentView(R.layout.activity_base);
  pinDrawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  initDrawer();
  threadPane=(SlidingPaneLayout)findViewById(R.id.pane_container);
  initPane();
  ChanApplication.getPinnedManager().addPinListener(this);
  updateIcon();
}",0.7346613545816733
20465,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  actionBarSetToListNavigation=false;
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  actionBar.setListNavigationCallbacks(new ArrayAdapter<String>(actionBar.getThemedContext(),R.layout.board_select_spinner,android.R.id.text1,ChanApplication.getBoardManager().getSavedKeys()),this);
  updatePaneState();
  updateActionBarState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (wasFinished)   return;
  actionBarSetToListNavigation=false;
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  actionBar.setListNavigationCallbacks(new ArrayAdapter<String>(actionBar.getThemedContext(),R.layout.board_select_spinner,android.R.id.text1,ChanApplication.getBoardManager().getSavedKeys()),this);
  updatePaneState();
  updateActionBarState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
}",0.9900650907845152
20466,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!isTaskRoot()) {
    final Intent intent=getIntent();
    final String intentAction=intent.getAction();
    if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) && intentAction != null && intentAction.equals(Intent.ACTION_MAIN)) {
      Log.w(TAG,""String_Node_Str"");
      finish();
      wasFinished=true;
      return;
    }
  }
  ThemeHelper.setTheme(this);
  ThemeHelper.getInstance().reloadPostViewColors(this);
  setContentView(R.layout.activity_base);
  pinDrawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  initDrawer();
  threadPane=(SlidingPaneLayout)findViewById(R.id.pane_container);
  initPane();
  ChanApplication.getPinnedManager().addPinListener(this);
  updateIcon();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeHelper.setTheme(this);
  ThemeHelper.getInstance().reloadPostViewColors(this);
  setContentView(R.layout.activity_base);
  pinDrawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  initDrawer();
  threadPane=(SlidingPaneLayout)findViewById(R.id.pane_container);
  initPane();
  ChanApplication.getPinnedManager().addPinListener(this);
  updateIcon();
}",0.7346613545816733
20467,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (wasFinished)   return;
  actionBarSetToListNavigation=false;
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  actionBar.setListNavigationCallbacks(new ArrayAdapter<String>(actionBar.getThemedContext(),R.layout.board_select_spinner,android.R.id.text1,ChanApplication.getBoardManager().getSavedKeys()),this);
  updatePaneState();
  updateActionBarState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  actionBarSetToListNavigation=false;
  boardLoadable=new Loadable();
  threadLoadable=new Loadable();
  boardFragment=ThreadFragment.newInstance(this);
  threadFragment=ThreadFragment.newInstance(this);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.replace(R.id.left_pane,boardFragment);
  ft.replace(R.id.right_pane,threadFragment);
  ft.commitAllowingStateLoss();
  final ActionBar actionBar=getActionBar();
  actionBar.setListNavigationCallbacks(new ArrayAdapter<String>(actionBar.getThemedContext(),R.layout.board_select_spinner,android.R.id.text1,ChanApplication.getBoardManager().getSavedKeys()),this);
  updatePaneState();
  updateActionBarState();
  Intent startIntent=getIntent();
  Uri startUri=startIntent.getData();
  if (savedInstanceState != null) {
    threadLoadable.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    startLoadingThread(threadLoadable);
    Loadable tmp=new Loadable();
    tmp.readFromBundle(this,""String_Node_Str"",savedInstanceState);
    loadBoard(tmp.board);
  }
 else {
    if (startUri != null) {
      handleIntentURI(startUri);
    }
    if (boardLoadable.mode == Loadable.Mode.INVALID) {
      List<String> savedValues=ChanApplication.getBoardManager().getSavedValues();
      if (savedValues.size() > 0) {
        loadBoard(savedValues.get(0));
      }
    }
  }
}",0.9900650907845152
20468,"private void showPostInfo(Post post){
  String text=""String_Node_Str"";
  if (post.hasImage) {
    text+=""String_Node_Str"" + post.filename + ""String_Node_Str""+ post.ext+ ""String_Node_Str""+ post.imageWidth+ ""String_Node_Str""+ post.imageHeight+ ""String_Node_Str"";
  }
  text+=""String_Node_Str"" + post.date;
  if (!TextUtils.isEmpty(post.id)) {
    text+=""String_Node_Str"" + post.id;
  }
  if (!TextUtils.isEmpty(post.email)) {
    text+=""String_Node_Str"" + post.email;
  }
  if (!TextUtils.isEmpty(post.tripcode)) {
    text+=""String_Node_Str"" + post.tripcode;
  }
  if (!TextUtils.isEmpty(post.countryName)) {
    text+=""String_Node_Str"" + post.countryName;
  }
  if (!TextUtils.isEmpty(post.capcode)) {
    text+=""String_Node_Str"" + post.capcode;
  }
  AlertDialog dialog=new AlertDialog.Builder(activity).setTitle(R.string.post_info).setMessage(text).setNeutralButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
).create();
  dialog.show();
}","private void showPostInfo(Post post){
  String text=""String_Node_Str"";
  if (post.hasImage) {
    text+=""String_Node_Str"" + post.filename + ""String_Node_Str""+ post.ext+ ""String_Node_Str""+ post.imageWidth+ ""String_Node_Str""+ post.imageHeight+ ""String_Node_Str""+ Utils.getReadableFileSize(post.fileSize,false)+ ""String_Node_Str"";
  }
  text+=""String_Node_Str"" + post.date;
  if (!TextUtils.isEmpty(post.id)) {
    text+=""String_Node_Str"" + post.id;
  }
  if (!TextUtils.isEmpty(post.email)) {
    text+=""String_Node_Str"" + post.email;
  }
  if (!TextUtils.isEmpty(post.tripcode)) {
    text+=""String_Node_Str"" + post.tripcode;
  }
  if (!TextUtils.isEmpty(post.countryName)) {
    text+=""String_Node_Str"" + post.countryName;
  }
  if (!TextUtils.isEmpty(post.capcode)) {
    text+=""String_Node_Str"" + post.capcode;
  }
  AlertDialog dialog=new AlertDialog.Builder(activity).setTitle(R.string.post_info).setMessage(text).setNeutralButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
).create();
  dialog.show();
}",0.9689095127610208
20469,"private Post readPostObject(JsonReader reader) throws IllegalStateException, NumberFormatException, IOException {
  Post post=new Post();
  post.board=loadable.board;
  reader.beginObject();
  while (reader.hasNext()) {
    String key=reader.nextName();
    if (key.equals(""String_Node_Str"")) {
      post.no=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.date=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.name=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.setComment(reader.nextString());
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.tim=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.time=reader.nextLong();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.email=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.ext=reader.nextString().replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.resto=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.imageWidth=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.imageHeight=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.subject=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.replies=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.filename=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.sticky=reader.nextInt() == 1;
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.closed=reader.nextInt() == 1;
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.tripcode=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.country=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.countryName=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.id=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.capcode=reader.nextString();
    }
 else {
      reader.skipValue();
    }
  }
  reader.endObject();
  Post cachedResult=null;
  for (  Post possibleCached : cached) {
    if (possibleCached.no == post.no) {
      cachedResult=possibleCached;
      break;
    }
  }
  if (cachedResult != null) {
    return cachedResult;
  }
 else {
    if (!post.finish(loadable)) {
      throw new IOException(""String_Node_Str"");
    }
    return post;
  }
}","private Post readPostObject(JsonReader reader) throws IllegalStateException, NumberFormatException, IOException {
  Post post=new Post();
  post.board=loadable.board;
  reader.beginObject();
  while (reader.hasNext()) {
    String key=reader.nextName();
    if (key.equals(""String_Node_Str"")) {
      post.no=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.date=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.name=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.setComment(reader.nextString());
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.tim=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.time=reader.nextLong();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.email=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.ext=reader.nextString().replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.resto=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.imageWidth=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.imageHeight=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.fileSize=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.subject=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.replies=reader.nextInt();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.filename=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.sticky=reader.nextInt() == 1;
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.closed=reader.nextInt() == 1;
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.tripcode=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.country=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.countryName=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.id=reader.nextString();
    }
 else     if (key.equals(""String_Node_Str"")) {
      post.capcode=reader.nextString();
    }
 else {
      reader.skipValue();
    }
  }
  reader.endObject();
  Post cachedResult=null;
  for (  Post possibleCached : cached) {
    if (possibleCached.no == post.no) {
      cachedResult=possibleCached;
      break;
    }
  }
  if (cachedResult != null) {
    return cachedResult;
  }
 else {
    if (!post.finish(loadable)) {
      throw new IOException(""String_Node_Str"");
    }
    return post;
  }
}",0.982961992136304
20470,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (post == null) {
  }
 else {
    if (!post.hasImage) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    imageView.setThumbnail(post.thumbnailUrl);
    if (post.ext.equals(""String_Node_Str"")) {
      imageView.setGif(post.imageUrl);
    }
 else     if (post.ext.equals(""String_Node_Str"")) {
      isVideo=true;
      activity.invalidateActionBar();
      showProgressBar(false);
      if (ChanPreferences.getVideoAutoPlay()) {
        startVideo();
      }
    }
 else {
      imageView.setBigImage(post.imageUrl);
    }
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (post == null) {
  }
 else {
    if (!post.hasImage) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    imageView.post(new Runnable(){
      @Override public void run(){
        if (imageView.getWidth() == 0 || imageView.getHeight() == 0)         return;
        imageView.setThumbnail(post.thumbnailUrl);
        if (post.ext.equals(""String_Node_Str"")) {
          imageView.setGif(post.imageUrl);
        }
 else         if (post.ext.equals(""String_Node_Str"")) {
          isVideo=true;
          activity.invalidateActionBar();
          showProgressBar(false);
          if (ChanPreferences.getVideoAutoPlay()) {
            startVideo();
          }
        }
 else {
          imageView.setBigImage(post.imageUrl);
        }
      }
    }
);
  }
}",0.8156209987195903
20471,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (post == null) {
    return null;
  }
 else {
    context=inflater.getContext();
    imageView=new ThumbnailImageView(context);
    imageView.setCallback(this);
    int padding=(int)context.getResources().getDimension(R.dimen.image_view_padding);
    imageView.setPadding(padding,padding,padding,padding);
    return imageView;
  }
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (post == null) {
    return null;
  }
 else {
    context=inflater.getContext();
    imageView=new ThumbnailImageView(context);
    imageView.setCallback(this);
    imageView.setLayoutParams(Utils.MATCH_PARAMS);
    int padding=(int)context.getResources().getDimension(R.dimen.image_view_padding);
    imageView.setPadding(padding,padding,padding,padding);
    return imageView;
  }
}",0.9458023379383634
20472,"public void setGif(String gifUrl){
  callback.setProgress(true);
  imageRequest=ChanApplication.getVolleyRequestQueue().add(new GIFRequest(gifUrl,new Response.Listener<GIFView>(){
    @Override public void onResponse(    GIFView view){
      view.setLayoutParams(Utils.MATCH_PARAMS);
      setView(view,false);
      callback.setProgress(false);
      thumbnailNeeded=false;
      tapDismiss=true;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
  }
,getContext()));
}","public void setGif(String gifUrl){
  if (getWidth() == 0 || getHeight() == 0) {
    Logger.e(TAG,""String_Node_Str"");
    return;
  }
  callback.setProgress(true);
  imageRequest=ChanApplication.getVolleyRequestQueue().add(new GIFRequest(gifUrl,new Response.Listener<GIFView>(){
    @Override public void onResponse(    GIFView view){
      view.setLayoutParams(Utils.MATCH_PARAMS);
      setView(view,false);
      callback.setProgress(false);
      thumbnailNeeded=false;
      tapDismiss=true;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
  }
,getContext()));
}",0.9181969949916527
20473,"public void setThumbnail(String thumbnailUrl){
  ChanApplication.getImageLoader().get(thumbnailUrl,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() != null && thumbnailNeeded) {
        ImageView thumbnail=new ImageView(getContext());
        thumbnail.setImageBitmap(response.getBitmap());
        thumbnail.setLayoutParams(Utils.MATCH_PARAMS);
        setView(thumbnail,false);
      }
    }
  }
,getWidth(),getHeight());
}","public void setThumbnail(String thumbnailUrl){
  if (getWidth() == 0 || getHeight() == 0) {
    Logger.e(TAG,""String_Node_Str"");
    return;
  }
  ChanApplication.getImageLoader().get(thumbnailUrl,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() != null && thumbnailNeeded) {
        ImageView thumbnail=new ImageView(getContext());
        thumbnail.setImageBitmap(response.getBitmap());
        thumbnail.setLayoutParams(Utils.MATCH_PARAMS);
        setView(thumbnail,false);
      }
    }
  }
,getWidth(),getHeight());
}",0.9254185692541856
20474,"public void setBigImage(String imageUrl){
  callback.setProgress(true);
  imageContainerRequest=ChanApplication.getImageLoader().get(imageUrl,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() != null) {
        CleanupImageView image=new CleanupImageView(getContext());
        image.setImageBitmap(response.getBitmap());
        PhotoViewAttacher attacher=new PhotoViewAttacher(image);
        attacher.setOnViewTapListener(ThumbnailImageView.this);
        attacher.setMaximumScale(maxScale);
        image.setAttacher(attacher);
        setView(image,!isImmediate);
        callback.setProgress(false);
        thumbnailNeeded=false;
        tapDismiss=true;
      }
    }
  }
,(int)(getWidth() * maxScale),(int)(getHeight() * maxScale));
}","public void setBigImage(String imageUrl){
  if (getWidth() == 0 || getHeight() == 0) {
    Logger.e(TAG,""String_Node_Str"");
    return;
  }
  callback.setProgress(true);
  int maxWidth=Math.min((int)(getWidth() * maxScale),4096);
  int maxHeight=Math.min((int)(getHeight() * maxScale),4096);
  imageContainerRequest=ChanApplication.getImageLoader().get(imageUrl,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      onError();
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() != null) {
        CleanupImageView image=new CleanupImageView(getContext());
        image.setImageBitmap(response.getBitmap());
        PhotoViewAttacher attacher=new PhotoViewAttacher(image);
        attacher.setOnViewTapListener(ThumbnailImageView.this);
        attacher.setMaximumScale(maxScale);
        image.setAttacher(attacher);
        setView(image,!isImmediate);
        callback.setProgress(false);
        thumbnailNeeded=false;
        tapDismiss=true;
      }
    }
  }
,maxWidth,maxHeight);
}",0.8679802955665025
20475,"/** 
 * Reads the contents of HttpEntity into a byte[]. 
 */
private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {
  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] buffer=null;
  try {
    InputStream in=entity.getContent();
    if (in == null) {
      throw new ServerError();
    }
    buffer=mPool.getBuf(1024);
    int count;
    while ((count=in.read(buffer)) != -1) {
      bytes.write(buffer,0,count);
    }
    return bytes.toByteArray();
  }
  finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VolleyLog.v(""String_Node_Str"");
    }
    mPool.returnBuf(buffer);
    bytes.close();
  }
}","/** 
 * Reads the contents of HttpEntity into a byte[]. 
 */
private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {
  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] buffer=null;
  try {
    InputStream in=entity.getContent();
    if (in == null) {
      throw new ServerError();
    }
    buffer=mPool.getBuf(1024);
    int count;
    while ((count=in.read(buffer)) != -1) {
      bytes.write(buffer,0,count);
    }
    return bytes.toByteArray();
  }
 catch (  OutOfMemoryError e) {
    Logger.e(""String_Node_Str"",""String_Node_Str"",e);
    return new byte[0];
  }
 finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VolleyLog.v(""String_Node_Str"");
    }
    mPool.returnBuf(buffer);
    bytes.close();
  }
}",0.929024081115336
20476,"private void prepareNotification(){
  List<Pin> watchingPins=ChanApplication.getPinnedManager().getWatchingPins();
  List<Pin> pins=new ArrayList<Pin>();
  int newPostsCount=0;
  int newQuotesCount=0;
  List<Post> posts=new ArrayList<Post>();
  boolean makeSound=false;
  boolean show=true;
  for (  Pin pin : watchingPins) {
    PinWatcher watcher=pin.getPinWatcher();
    if (watcher == null || watcher.isError())     continue;
    boolean add=false;
    if (watcher.getNewPostsCount() > 0) {
      newPostsCount+=watcher.getNewPostsCount();
      for (      Post p : watcher.getNewPosts()) {
        p.title=pin.loadable.title;
        posts.add(p);
      }
      show=true;
      add=true;
    }
    if (watcher.getNewQuoteCount() > 0) {
      newQuotesCount+=watcher.getNewQuoteCount();
      show=true;
      add=true;
    }
    if (watcher.getWereNewQuotes()) {
      makeSound=true;
    }
    if (add) {
      pins.add(pin);
    }
  }
  if (show) {
    String title=newPostsCount + ""String_Node_Str"";
    if (newQuotesCount > 0) {
      title+=""String_Node_Str"" + newQuotesCount + ""String_Node_Str"";
    }
    String descriptor;
    if (pins.size() == 1) {
      descriptor=pins.get(0).loadable.title;
    }
 else {
      descriptor=pins.size() + ""String_Node_Str"";
    }
    String content=newPostsCount + ""String_Node_Str"" + descriptor;
    Collections.sort(posts,new PostAgeComparer());
    List<CharSequence> lines=new ArrayList<CharSequence>();
    for (    Post post : posts) {
      if (pins.size() > 1) {
        lines.add(post.title + ""String_Node_Str"" + post.comment);
      }
 else {
        lines.add(post.comment);
      }
    }
    showNotification(content,title,content,Integer.toString(newPostsCount),lines,makeSound);
  }
}","private void prepareNotification(){
  List<Pin> watchingPins=ChanApplication.getPinnedManager().getWatchingPins();
  List<Pin> pins=new ArrayList<Pin>();
  int newPostsCount=0;
  int newQuotesCount=0;
  List<Post> posts=new ArrayList<Post>();
  boolean makeSound=false;
  boolean show=false;
  for (  Pin pin : watchingPins) {
    PinWatcher watcher=pin.getPinWatcher();
    if (watcher == null || watcher.isError())     continue;
    boolean add=false;
    if (watcher.getNewPostsCount() > 0) {
      newPostsCount+=watcher.getNewPostsCount();
      for (      Post p : watcher.getNewPosts()) {
        p.title=pin.loadable.title;
        posts.add(p);
      }
      show=true;
      add=true;
    }
    if (watcher.getNewQuoteCount() > 0) {
      newQuotesCount+=watcher.getNewQuoteCount();
      show=true;
      add=true;
    }
    if (watcher.getWereNewQuotes()) {
      makeSound=true;
    }
    if (add) {
      pins.add(pin);
    }
  }
  if (show) {
    String title=newPostsCount + ""String_Node_Str"";
    if (newQuotesCount > 0) {
      title+=""String_Node_Str"" + newQuotesCount + ""String_Node_Str"";
    }
    String descriptor;
    if (pins.size() == 1) {
      descriptor=pins.get(0).loadable.title;
    }
 else {
      descriptor=pins.size() + ""String_Node_Str"";
    }
    String content=newPostsCount + ""String_Node_Str"" + descriptor;
    Collections.sort(posts,new PostAgeComparer());
    List<CharSequence> lines=new ArrayList<CharSequence>();
    for (    Post post : posts) {
      if (pins.size() > 1) {
        lines.add(post.title + ""String_Node_Str"" + post.comment);
      }
 else {
        lines.add(post.comment);
      }
    }
    showNotification(content,title,content,Integer.toString(newPostsCount),lines,makeSound);
  }
}",0.9979982842436376
20477,"private View createThreadEndView(){
  if (false) {
    ThreadWatchCounterView view=new ThreadWatchCounterView(context);
    Utils.setPressedDrawable(view);
    view.init(threadManager,listView,this);
    int padding=context.getResources().getDimensionPixelSize(R.dimen.general_padding);
    view.setPadding(padding,padding,padding,padding);
    int height=context.getResources().getDimensionPixelSize(R.dimen.dp48);
    view.setHeight(height);
    view.setGravity(Gravity.CENTER);
    return view;
  }
 else {
    if (endOfLine) {
      TextView textView=new TextView(context);
      textView.setText(context.getString(R.string.thread_load_end_of_line));
      int padding=context.getResources().getDimensionPixelSize(R.dimen.general_padding);
      textView.setPadding(padding,padding,padding,padding);
      return textView;
    }
 else {
      return new ProgressBar(context);
    }
  }
}","private View createThreadEndView(){
  if (threadManager.getLoadable().isThreadMode()) {
    ThreadWatchCounterView view=new ThreadWatchCounterView(context);
    Utils.setPressedDrawable(view);
    view.init(threadManager,listView,this);
    int padding=context.getResources().getDimensionPixelSize(R.dimen.general_padding);
    view.setPadding(padding,padding,padding,padding);
    int height=context.getResources().getDimensionPixelSize(R.dimen.dp48);
    view.setHeight(height);
    view.setGravity(Gravity.CENTER);
    return view;
  }
 else {
    if (endOfLine) {
      TextView textView=new TextView(context);
      textView.setText(context.getString(R.string.thread_load_end_of_line));
      int padding=context.getResources().getDimensionPixelSize(R.dimen.general_padding);
      textView.setPadding(padding,padding,padding,padding);
      return textView;
    }
 else {
      return new ProgressBar(context);
    }
  }
}",0.9741616272677296
20478,"@Override public void onThreadLoaded(List<Post> posts){
  if (postAdapter == null) {
    listView=new ListView(baseActivity);
    postAdapter=new PostAdapter(baseActivity,threadManager,listView);
    listView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
    listView.setAdapter(postAdapter);
    listView.setSelectionFromTop(loadable.listViewIndex,loadable.listViewTop);
    if (threadManager.getLoadable().isThreadMode()) {
      listView.setOnScrollListener(new OnScrollListener(){
        @Override public void onScrollStateChanged(        AbsListView view,        int scrollState){
        }
        @Override public void onScroll(        AbsListView view,        int firstVisibleItem,        int visibleItemCount,        int totalItemCount){
          if (loadable != null) {
            loadable.listViewIndex=view.getFirstVisiblePosition();
            View v=view.getChildAt(0);
            loadable.listViewTop=(v == null) ? 0 : v.getTop();
          }
        }
      }
);
    }
    if (container != null) {
      container.setView(listView);
    }
  }
  if (loadable.isBoardMode()) {
    postAdapter.addList(posts);
  }
 else {
    postAdapter.setList(posts);
  }
}","@Override public void onThreadLoaded(List<Post> posts,boolean append){
  if (postAdapter == null) {
    listView=new ListView(baseActivity);
    postAdapter=new PostAdapter(baseActivity,threadManager,listView);
    listView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
    listView.setAdapter(postAdapter);
    listView.setSelectionFromTop(loadable.listViewIndex,loadable.listViewTop);
    if (threadManager.getLoadable().isThreadMode()) {
      listView.setOnScrollListener(new OnScrollListener(){
        @Override public void onScrollStateChanged(        AbsListView view,        int scrollState){
        }
        @Override public void onScroll(        AbsListView view,        int firstVisibleItem,        int visibleItemCount,        int totalItemCount){
          if (loadable != null) {
            loadable.listViewIndex=view.getFirstVisiblePosition();
            View v=view.getChildAt(0);
            loadable.listViewTop=(v == null) ? 0 : v.getTop();
          }
        }
      }
);
    }
    if (container != null) {
      container.setView(listView);
    }
  }
  if (append) {
    postAdapter.addList(posts);
  }
 else {
    postAdapter.setList(posts);
  }
}",0.982355354944604
20479,public void onData(List<Post> result);,"public void onData(List<Post> result,boolean append);",0.8351648351648352
20480,"public void requestNextData(){
  if (loadable.isBoardMode()) {
    loadable.no++;
    if (request != null) {
      request.cancel();
    }
    request=getData(loadable);
  }
}","public void requestNextData(){
  if (loadable.isBoardMode()) {
    loadable.no++;
    if (request != null) {
      request.cancel();
    }
    request=getData(loadable);
  }
 else   if (loadable.isThreadMode()) {
    if (request != null) {
      return;
    }
    request=getData(loadable);
  }
}",0.7388535031847133
20481,"public void release(Loader loader,Loader.LoaderListener listener){
  if (!loaders.containsValue(loader)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (loader.removeListener(listener)) {
    loaders.remove(loader);
  }
}","public void release(Loader loader,Loader.LoaderListener listener){
  if (!loaders.containsValue(loader)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (loader.removeListener(listener)) {
    loaders.remove(loader.getLoadable());
  }
}",0.97119341563786
20482,"@Override public void onData(List<Post> result){
  threadManagerListener.onThreadLoaded(result);
}","@Override public void onData(List<Post> result,boolean append){
  threadManagerListener.onThreadLoaded(result,append);
}",0.8990825688073395
20483,public void onThreadLoaded(List<Post> result);,"public void onThreadLoaded(List<Post> result,boolean append);",0.8598130841121495
20484,"@Override public void onData(List<Post> result){
  int count=result.size();
  Logger.test(""String_Node_Str"");
  Logger.test(""String_Node_Str"" + count);
  if (pin.watchLastCount <= 0) {
    pin.watchLastCount=pin.watchNewCount;
  }
  pin.watchNewCount=count;
  watchLogic.onLoaded(count,false);
  Logger.test(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  PinnedService.callOnPinsChanged();
}","@Override public void onData(List<Post> result,boolean append){
  int count=result.size();
  Logger.test(""String_Node_Str"");
  Logger.test(""String_Node_Str"" + count);
  if (pin.watchLastCount <= 0) {
    pin.watchLastCount=pin.watchNewCount;
  }
  pin.watchNewCount=count;
  watchLogic.onLoaded(count,false);
  Logger.test(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  PinnedService.callOnPinsChanged();
}",0.9828178694158076
20485,"private CharSequence parseComment(String commentRaw,boolean simpleMode){
  if (simpleMode)   return ""String_Node_Str"";
  CharSequence total=new SpannableString(""String_Node_Str"");
  try {
    String comment=commentRaw.replace(""String_Node_Str"",""String_Node_Str"");
    Document document=Jsoup.parseBodyFragment(comment);
    List<Node> nodes=document.body().childNodes();
    for (    Node node : nodes) {
      String nodeName=node.nodeName();
      if (node instanceof TextNode) {
        String text=((TextNode)node).text();
        if (text.contains(""String_Node_Str"")) {
          String[] parts=text.split(""String_Node_Str"");
          for (          String item : parts) {
            if (item.contains(""String_Node_Str"")) {
              try {
                URL url=new URL(item);
                SpannableString link=new SpannableString(url.toString());
                PostLinkable pl=new PostLinkable(this,item,item,PostLinkable.Type.LINK);
                link.setSpan(pl,0,link.length(),0);
                linkables.add(pl);
                total=TextUtils.concat(total,link,""String_Node_Str"");
              }
 catch (              Exception e) {
                total=TextUtils.concat(total,item,""String_Node_Str"");
              }
            }
          }
        }
 else {
          total=TextUtils.concat(total,text);
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        total=TextUtils.concat(total,""String_Node_Str"");
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        Element span=(Element)node;
        SpannableString quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpan(Color.argb(255,120,153,34)),0,quote.length(),0);
        total=TextUtils.concat(total,quote);
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        Element anchor=(Element)node;
        SpannableString link=new SpannableString(anchor.text());
        Type t=anchor.text().contains(""String_Node_Str"") ? Type.LINK : Type.QUOTE;
        PostLinkable pl=new PostLinkable(this,anchor.text(),anchor.attr(""String_Node_Str""),t);
        link.setSpan(pl,0,link.length(),0);
        linkables.add(pl);
        if (t == Type.QUOTE) {
          try {
            String[] splitted=anchor.attr(""String_Node_Str"").split(""String_Node_Str"");
            if (splitted.length == 2) {
              int id=Integer.parseInt(splitted[1]);
              repliesTo.add(id);
            }
          }
 catch (          NumberFormatException e) {
          }
        }
        total=TextUtils.concat(total,link);
      }
 else {
        if (node instanceof Element) {
          total=TextUtils.concat(total,((Element)node).text());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return total;
}","private CharSequence parseComment(String commentRaw,boolean simpleMode){
  if (simpleMode)   return ""String_Node_Str"";
  CharSequence total=new SpannableString(""String_Node_Str"");
  try {
    String comment=commentRaw.replace(""String_Node_Str"",""String_Node_Str"");
    Document document=Jsoup.parseBodyFragment(comment);
    List<Node> nodes=document.body().childNodes();
    for (    Node node : nodes) {
      String nodeName=node.nodeName();
      if (node instanceof TextNode) {
        String text=((TextNode)node).text();
        if (text.contains(""String_Node_Str"")) {
          String[] parts=text.split(""String_Node_Str"");
          for (          String item : parts) {
            if (item.contains(""String_Node_Str"")) {
              try {
                URL url=new URL(item);
                SpannableString link=new SpannableString(url.toString());
                PostLinkable pl=new PostLinkable(this,item,item,PostLinkable.Type.LINK);
                link.setSpan(pl,0,link.length(),0);
                linkables.add(pl);
                total=TextUtils.concat(total,link,""String_Node_Str"");
              }
 catch (              Exception e) {
                total=TextUtils.concat(total,item,""String_Node_Str"");
              }
            }
 else {
              total=TextUtils.concat(total,item,""String_Node_Str"");
            }
          }
        }
 else {
          total=TextUtils.concat(total,text);
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        total=TextUtils.concat(total,""String_Node_Str"");
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        Element span=(Element)node;
        SpannableString quote=new SpannableString(span.text());
        quote.setSpan(new ForegroundColorSpan(Color.argb(255,120,153,34)),0,quote.length(),0);
        total=TextUtils.concat(total,quote);
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        Element anchor=(Element)node;
        SpannableString link=new SpannableString(anchor.text());
        Type t=anchor.text().contains(""String_Node_Str"") ? Type.LINK : Type.QUOTE;
        PostLinkable pl=new PostLinkable(this,anchor.text(),anchor.attr(""String_Node_Str""),t);
        link.setSpan(pl,0,link.length(),0);
        linkables.add(pl);
        if (t == Type.QUOTE) {
          try {
            String[] splitted=anchor.attr(""String_Node_Str"").split(""String_Node_Str"");
            if (splitted.length == 2) {
              int id=Integer.parseInt(splitted[1]);
              repliesTo.add(id);
            }
          }
 catch (          NumberFormatException e) {
          }
        }
        total=TextUtils.concat(total,link);
      }
 else {
        if (node instanceof Element) {
          total=TextUtils.concat(total,((Element)node).text());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return total;
}",0.984171649665846
20486,"/** 
 * Sets the superstate that the configured state is a substate of <p/> Substates inherit the allowed transitions of their superstate. When entering directly into a substate from outside of the superstate, entry actions for the superstate are executed. Likewise when leaving from the substate to outside the supserstate, exit actions for the superstate will execute.
 * @param superstate The superstate
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> substateOf(TState superstate){
  StateRepresentation<TState,TTrigger> superRepresentation=lookup.call(superstate);
  representation.setSuperstate(superRepresentation);
  superRepresentation.addSubstate(representation);
  return this;
}","/** 
 * Sets the superstate that the configured state is a substate of <p> Substates inherit the allowed transitions of their superstate. When entering directly into a substate from outside of the superstate, entry actions for the superstate are executed. Likewise when leaving from the substate to outside the supserstate, exit actions for the superstate will execute.
 * @param superstate The superstate
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> substateOf(TState superstate){
  StateRepresentation<TState,TTrigger> superRepresentation=lookup.call(superstate);
  representation.setSuperstate(superRepresentation);
  superRepresentation.addSubstate(representation);
  return this;
}",0.9992982456140352
20487,"/** 
 * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state <p/> Applies to the current state only. Will not re-execute superstate actions, or  cause actions to execute transitioning between super- and sub-states
 * @param trigger The accepted trigger
 * @param guard   Function that must return true in order for the trigger to be accepted
 * @return The reciever
 */
public StateConfiguration<TState,TTrigger> permitReentryIf(TTrigger trigger,FuncBoolean guard){
  return publicPermitIf(trigger,representation.getUnderlyingState(),guard);
}","/** 
 * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state <p> Applies to the current state only. Will not re-execute superstate actions, or  cause actions to execute transitioning between super- and sub-states
 * @param trigger The accepted trigger
 * @param guard   Function that must return true in order for the trigger to be accepted
 * @return The reciever
 */
public StateConfiguration<TState,TTrigger> permitReentryIf(TTrigger trigger,FuncBoolean guard){
  return publicPermitIf(trigger,representation.getUnderlyingState(),guard);
}",0.9992418498862776
20488,"/** 
 * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state <p/> Applies to the current state only. Will not re-execute superstate actions, or  cause actions to execute transitioning between super- and sub-states
 * @param trigger The accepted trigger
 * @return The reciever
 */
public StateConfiguration<TState,TTrigger> permitReentry(TTrigger trigger){
  return publicPermit(trigger,representation.getUnderlyingState());
}","/** 
 * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the configured state transitions to an identical sibling state <p> Applies to the current state only. Will not re-execute superstate actions, or  cause actions to execute transitioning between super- and sub-states
 * @param trigger The accepted trigger
 * @return The reciever
 */
public StateConfiguration<TState,TTrigger> permitReentry(TTrigger trigger){
  return publicPermit(trigger,representation.getUnderlyingState());
}",0.9990783410138248
20489,"private void saveTriggerConfiguration(TriggerWithParameters<TState,TTrigger> trigger){
  if (triggerConfiguration.containsKey(trigger.getTrigger())) {
    throw new IllegalStateException(String.format(""String_Node_Str"",trigger));
  }
  triggerConfiguration.put(trigger.getTrigger(),trigger);
}","private void saveTriggerConfiguration(TriggerWithParameters<TState,TTrigger> trigger){
  if (triggerConfiguration.containsKey(trigger.getTrigger())) {
    throw new IllegalStateException(""String_Node_Str"" + trigger + ""String_Node_Str"");
  }
  triggerConfiguration.put(trigger.getTrigger(),trigger);
}",0.9106239460370996
20490,"public void generateDotFileInto(OutputStream dotFile){
  try (OutputStreamWriter w=new OutputStreamWriter(dotFile,""String_Node_Str"")){
    PrintWriter writer=new PrintWriter(w);
    writer.write(""String_Node_Str"");
    for (    Entry<TState,StateRepresentation<TState,TTrigger>> entry : this.stateConfiguration.entrySet()) {
      Map<TTrigger,List<TriggerBehaviour<TState,TTrigger>>> behaviours=entry.getValue().getTriggerBehaviours();
      for (      Entry<TTrigger,List<TriggerBehaviour<TState,TTrigger>>> behaviour : behaviours.entrySet()) {
        for (        TriggerBehaviour<TState,TTrigger> triggerBehaviour : behaviour.getValue()) {
          if (triggerBehaviour instanceof TransitioningTriggerBehaviour) {
            writer.write(String.format(""String_Node_Str"",entry.getKey(),triggerBehaviour.resultsInTransitionFrom(null)));
          }
        }
      }
    }
    writer.write(""String_Node_Str"");
  }
 catch (  IOException ie) {
  }
}","public void generateDotFileInto(final OutputStream dotFile) throws IOException {
  try (OutputStreamWriter w=new OutputStreamWriter(dotFile,""String_Node_Str"")){
    PrintWriter writer=new PrintWriter(w);
    writer.write(""String_Node_Str"");
    OutVar<TState> destination=new OutVar<>();
    for (    Entry<TState,StateRepresentation<TState,TTrigger>> entry : this.stateConfiguration.entrySet()) {
      Map<TTrigger,List<TriggerBehaviour<TState,TTrigger>>> behaviours=entry.getValue().getTriggerBehaviours();
      for (      Entry<TTrigger,List<TriggerBehaviour<TState,TTrigger>>> behaviour : behaviours.entrySet()) {
        for (        TriggerBehaviour<TState,TTrigger> triggerBehaviour : behaviour.getValue()) {
          if (triggerBehaviour instanceof TransitioningTriggerBehaviour) {
            destination.set(null);
            triggerBehaviour.resultsInTransitionFrom(null,null,destination);
            writer.write(String.format(""String_Node_Str"",entry.getKey(),destination));
          }
        }
      }
    }
    writer.write(""String_Node_Str"");
  }
 catch (  IOException ex) {
    throw ex;
  }
}",0.0705996131528046
20491,"protected void publicFire(TTrigger trigger,Object... args){
  TriggerWithParameters<TState,TTrigger> configuration;
  if (triggerConfiguration.containsKey(trigger)) {
    configuration=triggerConfiguration.get(trigger);
    configuration.validateParameters(args);
  }
  TriggerBehaviour<TState,TTrigger> triggerBehaviour;
  try {
    triggerBehaviour=getCurrentRepresentation().tryFindHandler(trigger);
  }
 catch (  Exception e) {
    unhandledTriggerAction.doIt(getCurrentRepresentation().getUnderlyingState(),trigger);
    return;
  }
  TState source=getState();
  TState destination;
  try {
    destination=triggerBehaviour.resultsInTransitionFrom(source,args);
    Transition<TState,TTrigger> transition=new Transition<>(source,destination,trigger);
    getCurrentRepresentation().exit(transition);
    setState(destination);
    getCurrentRepresentation().enter(transition,args);
  }
 catch (  Exception e) {
  }
}","protected void publicFire(TTrigger trigger,Object... args){
  TriggerWithParameters<TState,TTrigger> configuration=triggerConfiguration.get(trigger);
  if (configuration != null) {
    configuration.validateParameters(args);
  }
  TriggerBehaviour<TState,TTrigger> triggerBehaviour=getCurrentRepresentation().tryFindHandler(trigger);
  if (triggerBehaviour == null) {
    unhandledTriggerAction.doIt(getCurrentRepresentation().getUnderlyingState(),trigger);
    return;
  }
  TState source=getState();
  OutVar<TState> destination=new OutVar<>();
  if (triggerBehaviour.resultsInTransitionFrom(source,args,destination)) {
    Transition<TState,TTrigger> transition=new Transition<>(source,destination.get(),trigger);
    getCurrentRepresentation().exit(transition);
    setState(destination.get());
    getCurrentRepresentation().enter(transition,args);
  }
}",0.497752808988764
20492,"/** 
 * A human-readable representation of the state machine
 * @return A description of the current state and permitted triggers
 */
public String toString(){
  List<TTrigger> permittedTriggers=getPermittedTriggers();
  List<String> parameters=new ArrayList<>();
  for (  TTrigger tTrigger : permittedTriggers) {
    parameters.add(tTrigger.toString());
  }
  StringBuilder params=new StringBuilder();
  String delim=""String_Node_Str"";
  for (  String param : parameters) {
    params.append(delim);
    params.append(param);
    delim=""String_Node_Str"";
  }
  return String.format(""String_Node_Str"",getState(),params.toString());
}","/** 
 * A human-readable representation of the state machine
 * @return A description of the current state and permitted triggers
 */
@Override public String toString(){
  List<TTrigger> permittedTriggers=getPermittedTriggers();
  List<String> parameters=new ArrayList<>();
  for (  TTrigger tTrigger : permittedTriggers) {
    parameters.add(tTrigger.toString());
  }
  StringBuilder params=new StringBuilder();
  String delim=""String_Node_Str"";
  for (  String param : parameters) {
    params.append(delim);
    params.append(param);
    delim=""String_Node_Str"";
  }
  return String.format(""String_Node_Str"",getState(),params.toString());
}",0.9921630094043888
20493,"protected StateRepresentation<TState,TTrigger> getRepresentation(TState state){
  if (!stateConfiguration.containsKey(state)) {
    StateRepresentation<TState,TTrigger> result=new StateRepresentation<>(state);
    stateConfiguration.put(state,result);
  }
  return stateConfiguration.get(state);
}","protected StateRepresentation<TState,TTrigger> getRepresentation(TState state){
  StateRepresentation<TState,TTrigger> result=stateConfiguration.get(state);
  if (result == null) {
    result=new StateRepresentation<>(state);
    stateConfiguration.put(state,result);
  }
  return result;
}",0.6507666098807495
20494,"public TState resultsInTransitionFrom(TState source,Object... args){
  return destination;
}","@Override public boolean resultsInTransitionFrom(TState source,Object[] args,OutVar<TState> dest){
  dest.set(destination);
  return true;
}",0.6810344827586207
20495,"@Override public TState resultsInTransitionFrom(TState source,Object... args){
  return destination.call(args);
}","public boolean resultsInTransitionFrom(TState source,Object[] args,OutVar<TState> dest){
  dest.set(destination.call(args));
  return true;
}",0.7086614173228346
20496,"@Override public TState resultsInTransitionFrom(TState source,Object... args){
  throw new IllegalStateException();
}","@Override public boolean resultsInTransitionFrom(TState source,Object[] args,OutVar<TState> dest){
  return false;
}",0.703862660944206
20497,"public abstract TState resultsInTransitionFrom(TState source,Object... args);","public abstract boolean resultsInTransitionFrom(TState source,Object[] args,OutVar<TState> dest);",0.7931034482758621
20498,"StateConfiguration<TState,TTrigger> publicPermitDynamicIf(TTrigger trigger,Func2<Object[],TState> destinationStateSelector,Func<Boolean> guard){
}","StateConfiguration<TState,TTrigger> publicPermitDynamicIf(TTrigger trigger,Func2<Object[],TState> destinationStateSelector,FuncBoolean guard){
}",0.993103448275862
20499,"StateConfiguration<TState,TTrigger> publicPermitIf(TTrigger trigger,TState destinationState,Func<Boolean> guard){
}","StateConfiguration<TState,TTrigger> publicPermitIf(TTrigger trigger,TState destinationState,FuncBoolean guard){
}",0.9912280701754386
20500,"/** 
 * ignore the specified trigger when in the configured state, if the guard returns true
 * @param trigger The trigger to ignore
 * @param guard   Function that must return true in order for the trigger to be ignored
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> ignoreIf(TTrigger trigger,Func<Boolean> guard){
}","/** 
 * ignore the specified trigger when in the configured state, if the guard returns true
 * @param trigger The trigger to ignore
 * @param guard   Function that must return true in order for the trigger to be ignored
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> ignoreIf(TTrigger trigger,FuncBoolean guard){
}",0.9970588235294118
20501,"public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Func4<TArg0,TArg1,TArg2,TState> destinationStateSelector,Func<Boolean> guard){
}","/** 
 * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function
 * @param trigger                  The accepted trigger
 * @param destinationStateSelector Function to calculate the state that the trigger will cause a transition to
 * @param guard                    Function that must return true in order for the  trigger to be accepted
 * @param < TArg0 >                  Type of the first trigger argument
 * @param < TArg1 >                  Type of the second trigger argument
 * @param < TArg2 >                  Type of the third trigger argument
 * @return The reciever
 */
public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Func4<TArg0,TArg1,TArg2,TState> destinationStateSelector,FuncBoolean guard){
}",0.4134179510426111
20502,"/** 
 * Specify an action that will execute when transitioning from the configured state
 * @param exitAction Action to execute
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> onExit(Action1<Transition<TState,TTrigger>> exitAction){
  Enforce.argumentNotNull(exitAction,""String_Node_Str"");
  representation.addExitAction(exitAction);
  return this;
}","/** 
 * Specify an action that will execute when transitioning from the configured state
 * @param exitAction Action to execute
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> onExit(Action1<Transition<TState,TTrigger>> exitAction){
}",0.8158730158730159
20503,"StateConfiguration<TState,TTrigger> publicPermitDynamicIf(TTrigger trigger,Func2<Object[],TState> destinationStateSelector,FuncBoolean guard){
  Enforce.argumentNotNull(destinationStateSelector,""String_Node_Str"");
  Enforce.argumentNotNull(guard,""String_Node_Str"");
  representation.addTriggerBehaviour(new DynamicTriggerBehaviour<>(trigger,destinationStateSelector,guard));
  return this;
}","StateConfiguration<TState,TTrigger> publicPermitDynamicIf(TTrigger trigger,Func2<Object[],TState> destinationStateSelector,Func<Boolean> guard){
}",0.5363128491620112
20504,"StateConfiguration<TState,TTrigger> publicPermitIf(TTrigger trigger,TState destinationState,FuncBoolean guard){
  Enforce.argumentNotNull(guard,""String_Node_Str"");
  representation.addTriggerBehaviour(new TransitioningTriggerBehaviour<>(trigger,destinationState,guard));
  return this;
}","StateConfiguration<TState,TTrigger> publicPermitIf(TTrigger trigger,TState destinationState,Func<Boolean> guard){
}",0.5621890547263682
20505,"public StateConfiguration(StateRepresentation<TState,TTrigger> representation,Func2<TState,StateRepresentation<TState,TTrigger>> lookup){
  this.representation=Enforce.argumentNotNull(representation,""String_Node_Str"");
  this.lookup=Enforce.argumentNotNull(lookup,""String_Node_Str"");
}","public StateConfiguration(final StateRepresentation<TState,TTrigger> representation,final Func2<TState,StateRepresentation<TState,TTrigger>> lookup){
}",0.6376146788990825
20506,"/** 
 * ignore the specified trigger when in the configured state, if the guard returns true
 * @param trigger The trigger to ignore
 * @param guard   Function that must return true in order for the trigger to be ignored
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> ignoreIf(TTrigger trigger,FuncBoolean guard){
  Enforce.argumentNotNull(guard,""String_Node_Str"");
  representation.addTriggerBehaviour(new IgnoredTriggerBehaviour<TState,TTrigger>(trigger,guard));
  return this;
}","/** 
 * ignore the specified trigger when in the configured state, if the guard returns true
 * @param trigger The trigger to ignore
 * @param guard   Function that must return true in order for the trigger to be ignored
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> ignoreIf(TTrigger trigger,Func<Boolean> guard){
}",0.8014184397163121
20507,"/** 
 * Specify an action that will execute when transitioning into the configured state
 * @param trigger     The trigger by which the state must be entered in order for the action to execute
 * @param entryAction Action to execute, providing details of the transition
 * @param classe0     Class argument
 * @param classe1     Class argument
 * @param classe2     Class argument
 * @param < TArg0 >     Type of the first trigger argument
 * @param < TArg1 >     Type of the second trigger argument
 * @param < TArg2 >     Type of the third trigger argument
 * @return The receiver
 */
public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> onEntryFrom(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Action4<TArg0,TArg1,TArg2,Transition<TState,TTrigger>> entryAction,final Class<TArg0> classe0,final Class<TArg1> classe1,final Class<TArg2> classe2){
  Enforce.argumentNotNull(entryAction,""String_Node_Str"");
  Enforce.argumentNotNull(trigger,""String_Node_Str"");
  representation.addEntryAction(trigger.getTrigger(),new Action2<Transition<TState,TTrigger>,Object[]>(){
    @SuppressWarnings(""String_Node_Str"") public void doIt(    Transition<TState,TTrigger> t,    Object[] args){
      entryAction.doIt((TArg0)args[0],(TArg1)args[1],(TArg2)args[2],t);
    }
  }
);
  return this;
}","/** 
 * Specify an action that will execute when transitioning into the configured state
 * @param trigger     The trigger by which the state must be entered in order for the action to execute
 * @param entryAction Action to execute, providing details of the transition
 * @param classe0     Class argument
 * @param classe1     Class argument
 * @param classe2     Class argument
 * @param < TArg0 >     Type of the first trigger argument
 * @param < TArg1 >     Type of the second trigger argument
 * @param < TArg2 >     Type of the third trigger argument
 * @return The receiver
 */
public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> onEntryFrom(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Action4<TArg0,TArg1,TArg2,Transition<TState,TTrigger>> entryAction,final Class<TArg0> classe0,final Class<TArg1> classe1,final Class<TArg2> classe2){
}",0.8043676069153776
20508,"/** 
 * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied function
 * @param trigger                  The accepted trigger
 * @param destinationStateSelector Function to calculate the state that the trigger will cause a transition to
 * @param guard                    Function that must return true in order for the  trigger to be accepted
 * @param < TArg0 >                  Type of the first trigger argument
 * @param < TArg1 >                  Type of the second trigger argument
 * @param < TArg2 >                  Type of the third trigger argument
 * @return The reciever
 */
public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Func4<TArg0,TArg1,TArg2,TState> destinationStateSelector,FuncBoolean guard){
  Enforce.argumentNotNull(trigger,""String_Node_Str"");
  Enforce.argumentNotNull(destinationStateSelector,""String_Node_Str"");
  return publicPermitDynamicIf(trigger.getTrigger(),new Func2<Object[],TState>(){
    @SuppressWarnings(""String_Node_Str"") public TState call(    Object[] args){
      return destinationStateSelector.call((TArg0)args[0],(TArg1)args[1],(TArg2)args[2]);
    }
  }
,guard);
}","public <TArg0,TArg1,TArg2>StateConfiguration<TState,TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,final Func4<TArg0,TArg1,TArg2,TState> destinationStateSelector,Func<Boolean> guard){
}",0.3042028018679119
20509,"/** 
 * Specify an action that will execute when transitioning into the configured state
 * @param entryAction Action to execute, providing details of the transition
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> onEntry(final Action1<Transition<TState,TTrigger>> entryAction){
  Enforce.argumentNotNull(entryAction,""String_Node_Str"");
  representation.addEntryAction(new Action2<Transition<TState,TTrigger>,Object[]>(){
    public void doIt(    Transition<TState,TTrigger> arg1,    Object[] arg2){
      entryAction.doIt(arg1);
    }
  }
);
  return this;
}","/** 
 * Specify an action that will execute when transitioning into the configured state
 * @param entryAction Action to execute, providing details of the transition
 * @return The receiver
 */
public StateConfiguration<TState,TTrigger> onEntry(final Action1<Transition<TState,TTrigger>> entryAction){
}",0.6847457627118644
20510,"/** 
 * Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked.
 * @param trigger The trigger to fire
 * @param arg0    The first argument
 * @param arg1    The second argument
 * @param arg2    The third argument
 * @param < TArg0 > Type of the first trigger argument
 * @param < TArg1 > Type of the second trigger argument
 * @param < TArg2 > Type of the third trigger argument
 * @The current state does not allow the trigger to be fired
 */
public <TArg0,TArg1,TArg2>void fire(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,TArg0 arg0,TArg1 arg1,TArg2 arg2){
  Enforce.argumentNotNull(trigger,""String_Node_Str"");
  publicFire(trigger.getTrigger(),arg0,arg1,arg2);
}","/** 
 * Transition from the current state via the specified trigger. The target state is determined by the configuration of the current state. Actions associated with leaving the current state and entering the new one will be invoked.
 * @param trigger The trigger to fire
 * @param arg0    The first argument
 * @param arg1    The second argument
 * @param arg2    The third argument
 * @param < TArg0 > Type of the first trigger argument
 * @param < TArg1 > Type of the second trigger argument
 * @param < TArg2 > Type of the third trigger argument
 * @The current state does not allow the trigger to be fired
 */
public <TArg0,TArg1,TArg2>void fire(TriggerWithParameters3<TArg0,TArg1,TArg2,TState,TTrigger> trigger,TArg0 arg0,TArg1 arg1,TArg2 arg2){
}",0.934903905765654
20511,"@SuppressWarnings(""String_Node_Str"") public List<TTrigger> getPermittedTriggers() throws Exception {
  List<TTrigger> result=new ArrayList<>();
  for (  TTrigger t : triggerBehaviours.keySet()) {
    Boolean isOk=false;
    for (    TriggerBehaviour<TState,TTrigger> v : triggerBehaviours.get(t)) {
      if (v.isGuardConditionMet()) {
        isOk=true;
      }
    }
    if (isOk) {
      result.add(t);
    }
  }
  if (getSuperstate() != null) {
    result.addAll(getSuperstate().getPermittedTriggers());
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") public List<TTrigger> getPermittedTriggers() throws Exception {
  Set<TTrigger> result=new HashSet<>();
  for (  TTrigger t : triggerBehaviours.keySet()) {
    boolean isOk=false;
    for (    TriggerBehaviour<TState,TTrigger> v : triggerBehaviours.get(t)) {
      if (v.isGuardConditionMet()) {
        isOk=true;
      }
    }
    if (isOk) {
      result.add(t);
    }
  }
  if (getSuperstate() != null) {
    result.addAll(getSuperstate().getPermittedTriggers());
  }
  return new ArrayList<>(result);
}",0.9534450651769087
20512,"@Test public void PermittedTriggersAreDistinctValues() throws Exception {
  StateMachine<State,Trigger> sm=new StateMachine<State,Trigger>(State.B);
  sm.configure(State.B).substateOf(State.C).permit(Trigger.X,State.A);
  sm.configure(State.C).permit(Trigger.X,State.B);
  List<Trigger> permitted=sm.getPermittedTriggers();
  assertEquals(1,permitted.size());
  assertEquals(Trigger.X,permitted.get(0));
}","@Test public void PermittedTriggersAreDistinctValues() throws Exception {
  StateMachine<State,Trigger> sm=new StateMachine<>(State.B);
  sm.configure(State.B).substateOf(State.C).permit(Trigger.X,State.A);
  sm.configure(State.C).permit(Trigger.X,State.B);
  List<Trigger> permitted=sm.getPermittedTriggers();
  assertEquals(1,permitted.size());
  assertEquals(Trigger.X,permitted.get(0));
}",0.9836888331242158
20513,"private static Cursor getCursorForConstruction(final Context context,final long contactId,final int queryType){
  final Cursor cursor;
  if (queryType == QUERY_TYPE_EMAIL)   cursor=context.getContentResolver().query(Queries.EMAIL.getContentUri(),Queries.EMAIL.getProjection(),Queries.EMAIL.getProjection()[Queries.Query.CONTACT_ID] + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null);
 else   cursor=context.getContentResolver().query(Queries.PHONE.getContentUri(),Queries.PHONE.getProjection(),Queries.PHONE.getProjection()[Queries.Query.CONTACT_ID] + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null);
  return removeDuplicateDestinations(cursor);
}","protected static Cursor getCursorForConstruction(final Context context,final long contactId,final int queryType){
  final Cursor cursor;
  if (queryType == QUERY_TYPE_EMAIL)   cursor=context.getContentResolver().query(Queries.EMAIL.getContentUri(),Queries.EMAIL.getProjection(),Queries.EMAIL.getProjection()[Queries.Query.CONTACT_ID] + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null);
 else   cursor=context.getContentResolver().query(Queries.PHONE.getContentUri(),Queries.PHONE.getProjection(),Queries.PHONE.getProjection()[Queries.Query.CONTACT_ID] + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null);
  return removeDuplicateDestinations(cursor);
}",0.9911764705882352
20514,"public RecipientAlternatesAdapter(final Context context,final long contactId,final long currentId,final int queryMode,final OnCheckedItemChangedListener listener){
  super(context,getCursorForConstruction(context,contactId,queryMode),0);
  mLayoutInflater=LayoutInflater.from(context);
  mCurrentId=currentId;
  mCheckedItemChangedListener=listener;
  if (queryMode == QUERY_TYPE_EMAIL)   mQuery=Queries.EMAIL;
 else   if (queryMode == QUERY_TYPE_PHONE)   mQuery=Queries.PHONE;
 else {
    mQuery=Queries.EMAIL;
    Log.e(TAG,""String_Node_Str"" + queryMode);
  }
}","public RecipientAlternatesAdapter(final Context context,final Cursor c,final long currentId,final int queryMode,final OnCheckedItemChangedListener listener){
  super(context,c,0);
  mLayoutInflater=LayoutInflater.from(context);
  mCurrentId=currentId;
  mCheckedItemChangedListener=listener;
  if (queryMode == QUERY_TYPE_EMAIL)   mQuery=Queries.EMAIL;
 else   if (queryMode == QUERY_TYPE_PHONE)   mQuery=Queries.PHONE;
 else {
    mQuery=Queries.EMAIL;
    Log.e(TAG,""String_Node_Str"" + queryMode);
  }
}",0.9288389513108616
20515,"private void shrink(){
  if (mTokenizer == null)   return;
  final long contactId=mSelectedChip != null ? mSelectedChip.getEntry().getContactId() : -1;
  if (mSelectedChip != null && contactId != RecipientEntry.INVALID_CONTACT && !isPhoneQuery() && contactId != RecipientEntry.GENERATED_CONTACT)   clearSelectedChip();
 else {
    if (getWidth() <= 0) {
      mHandler.removeCallbacks(mDelayedShrink);
      mHandler.post(mDelayedShrink);
      return;
    }
    if (mPendingChipsCount > 0)     postHandlePendingChips();
 else {
      final Editable editable=getText();
      final int end=getSelectionEnd();
      final int start=mTokenizer.findTokenStart(editable,end);
      final DrawableRecipientChip[] chips=getSpannable().getSpans(start,end,DrawableRecipientChip.class);
      if (chips == null || chips.length == 0) {
        final Editable text=getText();
        int whatEnd=mTokenizer.findTokenEnd(text,start);
        if (whatEnd < text.length() && text.charAt(whatEnd) == ',')         whatEnd=movePastTerminators(whatEnd);
        final int selEnd=getSelectionEnd();
        if (whatEnd != selEnd)         handleEdit(start,whatEnd);
 else         commitChip(start,end,editable);
      }
    }
    mHandler.post(mAddTextWatcher);
  }
  createMoreChip();
}","private void shrink(){
  if (mTokenizer == null)   return;
  final long contactId=mSelectedChip != null ? mSelectedChip.getEntry().getContactId() : -1;
  if (mSelectedChip != null && contactId != RecipientEntry.INVALID_CONTACT && !isPhoneQuery() && contactId != RecipientEntry.GENERATED_CONTACT)   clearSelectedChip();
 else {
    if (getWidth() <= 0) {
      mHandler.removeCallbacks(mDelayedShrink);
      mHandler.post(mDelayedShrink);
      return;
    }
    if (mPendingChipsCount > 0)     postHandlePendingChips();
 else {
      final Editable editable=getText();
      final int end=getSelectionEnd();
      final int start=mTokenizer.findTokenStart(editable,end);
      final DrawableRecipientChip[] chips=getSpannable().getSpans(start,end,DrawableRecipientChip.class);
      if (chips == null || chips.length == 0 && start >= 0) {
        final Editable text=getText();
        int whatEnd=mTokenizer.findTokenEnd(text,start);
        if (whatEnd < text.length() && text.charAt(whatEnd) == ',')         whatEnd=movePastTerminators(whatEnd);
        final int selEnd=getSelectionEnd();
        if (whatEnd != selEnd)         handleEdit(start,whatEnd);
 else         commitChip(start,end,editable);
      }
    }
    mHandler.post(mAddTextWatcher);
  }
  createMoreChip();
}",0.9945054945054944
20516,"private void handleMethodConsumer(MethodSpec.Builder methodSpec,Multimap<String,String> ramlTypeToMediaType,GType typeDeclaration){
  Collection<String> mediaTypes=ramlTypeToMediaType.get(typeDeclaration == null ? null : typeDeclaration.name());
  AnnotationSpec.Builder ann=buildAnnotation(mediaTypes,Consumes.class);
  methodSpec.addAnnotation(ann.build());
}","private void handleMethodConsumer(MethodSpec.Builder methodSpec,Multimap<String,String> ramlTypeToMediaType,GType typeDeclaration){
  Collection<String> mediaTypes=ramlTypeToMediaType.get(typeDeclaration == null ? null : typeDeclaration.name());
  if (mediaTypes.size() > 0) {
    AnnotationSpec.Builder ann=buildAnnotation(mediaTypes,Consumes.class);
    methodSpec.addAnnotation(ann.build());
  }
}",0.9487516425755584
20517,"private void createMethodWithBody(TypeSpec.Builder typeSpec,GMethod gMethod,Multimap<String,String> ramlTypeToMediaType,String methodName,GRequest gRequest,Map<String,TypeSpec.Builder> responseSpec){
  MethodSpec.Builder methodSpec=createMethodBuilder(gMethod,methodName,new HashSet<String>(),responseSpec);
  createParamteter(methodSpec,gRequest,gMethod);
  handleMethodConsumer(methodSpec,ramlTypeToMediaType,gRequest.type());
  methodSpec=build.pluginsForResourceMethod(new Function<Collection<ResourceMethodExtension<GMethod>>,ResourceMethodExtension<GMethod>>(){
    @Nullable @Override public ResourceMethodExtension<GMethod> apply(    @Nullable Collection<ResourceMethodExtension<GMethod>> resourceMethodExtensions){
      return new ResourceMethodExtension.Composite(resourceMethodExtensions);
    }
  }
,gMethod).onMethod(new ResourceContextImpl(build),gMethod,gRequest,methodSpec);
  if (methodSpec != null) {
    typeSpec.addMethod(methodSpec.build());
  }
}","private void createMethodWithBody(TypeSpec.Builder typeSpec,GMethod gMethod,Multimap<String,String> ramlTypeToMediaType,String methodName,GRequest gRequest,Map<String,TypeSpec.Builder> responseSpec,Set<String> mediaTypesForMethod){
  MethodSpec.Builder methodSpec=createMethodBuilder(gMethod,methodName,mediaTypesForMethod,responseSpec);
  createParamteter(methodSpec,gRequest,gMethod);
  handleMethodConsumer(methodSpec,ramlTypeToMediaType,gRequest.type());
  methodSpec=build.pluginsForResourceMethod(new Function<Collection<ResourceMethodExtension<GMethod>>,ResourceMethodExtension<GMethod>>(){
    @Nullable @Override public ResourceMethodExtension<GMethod> apply(    @Nullable Collection<ResourceMethodExtension<GMethod>> resourceMethodExtensions){
      return new ResourceMethodExtension.Composite(resourceMethodExtensions);
    }
  }
,gMethod).onMethod(new ResourceContextImpl(build),gMethod,gRequest,methodSpec);
  if (methodSpec != null) {
    typeSpec.addMethod(methodSpec.build());
  }
}",0.9634146341463414
20518,"private void buildResource(TypeSpec.Builder typeSpec,GResource currentResource){
  Multimap<GMethod,GRequest> incomingBodies=ArrayListMultimap.create();
  Multimap<GMethod,GResponse> responses=ArrayListMultimap.create();
  ResourceUtils.fillInBodiesAndResponses(currentResource,incomingBodies,responses);
  Map<String,TypeSpec.Builder> responseSpecs=createResponseClass(typeSpec,incomingBodies,responses);
  for (  GMethod gMethod : currentResource.methods()) {
    String methodName=Names.resourceMethodName(gMethod.resource(),gMethod);
    Set<String> mediaTypesForMethod=fetchAllMediaTypesForMethodResponses(gMethod);
    if (gMethod.body().size() == 0) {
      createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,HashMultimap.<String,String>create(),methodName,responseSpecs);
    }
 else {
      Multimap<String,String> ramlTypeToMediaType=accumulateMediaTypesPerType(incomingBodies,gMethod);
      for (      GRequest gRequest : gMethod.body()) {
        if (gRequest.type() == null) {
          createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,ramlTypeToMediaType,methodName,responseSpecs);
          continue;
        }
        if (ramlTypeToMediaType.containsKey(gRequest.type().name())) {
          createMethodWithBody(typeSpec,gMethod,ramlTypeToMediaType,methodName,gRequest,responseSpecs);
          ramlTypeToMediaType.removeAll(gRequest.type().name());
        }
      }
    }
  }
}","private void buildResource(TypeSpec.Builder typeSpec,GResource currentResource){
  Multimap<GMethod,GRequest> incomingBodies=ArrayListMultimap.create();
  Multimap<GMethod,GResponse> responses=ArrayListMultimap.create();
  ResourceUtils.fillInBodiesAndResponses(currentResource,incomingBodies,responses);
  Map<String,TypeSpec.Builder> responseSpecs=createResponseClass(typeSpec,incomingBodies,responses);
  for (  GMethod gMethod : currentResource.methods()) {
    String methodName=Names.resourceMethodName(gMethod.resource(),gMethod);
    Set<String> mediaTypesForMethod=fetchAllMediaTypesForMethodResponses(gMethod);
    if (gMethod.body().size() == 0) {
      createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,HashMultimap.<String,String>create(),methodName,responseSpecs);
    }
 else {
      Multimap<String,String> ramlTypeToMediaType=accumulateMediaTypesPerType(incomingBodies,gMethod);
      for (      GRequest gRequest : gMethod.body()) {
        if (gRequest.type() == null) {
          createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,ramlTypeToMediaType,methodName,responseSpecs);
          continue;
        }
        if (ramlTypeToMediaType.containsKey(gRequest.type().name())) {
          createMethodWithBody(typeSpec,gMethod,ramlTypeToMediaType,methodName,gRequest,responseSpecs,mediaTypesForMethod);
          ramlTypeToMediaType.removeAll(gRequest.type().name());
        }
      }
    }
  }
}",0.9929971988795518
20519,"@Test public void build_simple_response() throws Exception {
  RamlV10.buildResourceV10(this,""String_Node_Str"",new CodeContainer<TypeSpec>(){
    @Override public void into(    TypeSpec g) throws IOException {
      assertEquals(""String_Node_Str"",g.name);
      assertEquals(1,g.methodSpecs.size());
      MethodSpec methodSpec=g.methodSpecs.get(0);
      assertEquals(""String_Node_Str"",methodSpec.name);
      assertEquals(ClassName.get(""String_Node_Str"",""String_Node_Str""),methodSpec.returnType);
      assertEquals(1,g.typeSpecs.size());
      AnnotationSpec mediaTypeSpec=methodSpec.annotations.get(1);
      assertEquals(ClassName.get(Produces.class),mediaTypeSpec.type);
      assertEquals(1,mediaTypeSpec.members.get(""String_Node_Str"").size());
      assertEquals(""String_Node_Str"",mediaTypeSpec.members.get(""String_Node_Str"").get(0).toString());
      TypeSpec response=g.typeSpecs.get(0);
      assertEquals(""String_Node_Str"",response.name);
      assertEquals(3,response.methodSpecs.size());
      assertTrue(response.methodSpecs.get(0).isConstructor());
      assertTrue(response.methodSpecs.get(1).isConstructor());
      MethodSpec responseMethod=response.methodSpecs.get(2);
      assertEquals(""String_Node_Str"",responseMethod.name);
      assertEquals(""String_Node_Str"",responseMethod.parameters.get(0).type.toString());
      assertTrue(responseMethod.hasModifier(Modifier.PUBLIC));
      assertTrue(responseMethod.hasModifier(Modifier.STATIC));
      assertTrue(responseMethod.code.toString().contains(""String_Node_Str""));
    }
  }
,""String_Node_Str"",""String_Node_Str"");
}","@Test public void build_simple_response() throws Exception {
  RamlV10.buildResourceV10(this,""String_Node_Str"",new CodeContainer<TypeSpec>(){
    @Override public void into(    TypeSpec g) throws IOException {
      assertEquals(""String_Node_Str"",g.name);
      assertEquals(1,g.methodSpecs.size());
      MethodSpec methodSpec=g.methodSpecs.get(0);
      assertEquals(""String_Node_Str"",methodSpec.name);
      assertEquals(ClassName.get(""String_Node_Str"",""String_Node_Str""),methodSpec.returnType);
      assertEquals(1,g.typeSpecs.size());
      assertEquals(2,methodSpec.annotations.size());
      AnnotationSpec mediaTypeSpec=methodSpec.annotations.get(1);
      assertEquals(ClassName.get(Produces.class),mediaTypeSpec.type);
      assertEquals(1,mediaTypeSpec.members.get(""String_Node_Str"").size());
      assertEquals(""String_Node_Str"",mediaTypeSpec.members.get(""String_Node_Str"").get(0).toString());
      TypeSpec response=g.typeSpecs.get(0);
      assertEquals(""String_Node_Str"",response.name);
      assertEquals(3,response.methodSpecs.size());
      assertTrue(response.methodSpecs.get(0).isConstructor());
      assertTrue(response.methodSpecs.get(1).isConstructor());
      MethodSpec responseMethod=response.methodSpecs.get(2);
      assertEquals(""String_Node_Str"",responseMethod.name);
      assertEquals(""String_Node_Str"",responseMethod.parameters.get(0).type.toString());
      assertTrue(responseMethod.hasModifier(Modifier.PUBLIC));
      assertTrue(responseMethod.hasModifier(Modifier.STATIC));
      assertTrue(responseMethod.code.toString().contains(""String_Node_Str""));
    }
  }
,""String_Node_Str"",""String_Node_Str"");
}",0.9836065573770492
20520,"@Override public void scanType(TypeRegistry typeRegistry,RamlEntity type,RamlType ramlType){
  Class c=(Class)type.getType();
  for (  Field field : c.getDeclaredFields()) {
    Type genericType=field.getGenericType();
    RamlType fieldRamlType;
    fieldRamlType=PluginUtilities.getRamlType(typeRegistry,this,c.getSimpleName(),type.createDependent(genericType));
    XmlElement elem=field.getAnnotation(XmlElement.class);
    if (elem != null) {
      String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
      ramlType.addProperty(RamlProperty.createProperty(new FieldAnnotable(field),name,fieldRamlType));
    }
 else {
      XmlAttribute attribute=field.getAnnotation(XmlAttribute.class);
      if (attribute != null) {
        String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
        ramlType.addProperty(RamlProperty.createProperty(new FieldAnnotable(field),name,fieldRamlType));
      }
    }
  }
}","@Override public void scanType(TypeRegistry typeRegistry,RamlEntity type,RamlType ramlType){
  Class c=(Class)type.getType();
  for (  Field field : c.getDeclaredFields()) {
    Type genericType=field.getGenericType();
    RamlType fieldRamlType;
    fieldRamlType=PluginUtilities.getRamlType(typeRegistry,this,field.getType().getSimpleName(),type.createDependent(genericType));
    XmlElement elem=field.getAnnotation(XmlElement.class);
    if (elem != null) {
      String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
      ramlType.addProperty(RamlProperty.createProperty(new FieldAnnotable(field),name,fieldRamlType));
    }
 else {
      XmlAttribute attribute=field.getAnnotation(XmlAttribute.class);
      if (attribute != null) {
        String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
        ramlType.addProperty(RamlProperty.createProperty(new FieldAnnotable(field),name,fieldRamlType));
      }
    }
  }
}",0.9918116683725692
20521,"public void writeExample(IndentedAppendable writer) throws IOException {
  Optional<Example> e=source.getAnnotation(Example.class);
  if (!e.isPresent()) {
    return;
  }
  writer.appendLine(name + ""String_Node_Str"" + e.get().value());
}","public void writeExample(IndentedAppendable writer) throws IOException {
  if (!ramlType.isRamlType()) {
    writer.appendLine(name + ""String_Node_Str"");
    writer.indent();
    ramlType.writeExample(writer);
    writer.outdent();
  }
 else {
    Optional<Example> e=source.getAnnotation(Example.class);
    if (!e.isPresent()) {
      return;
    }
    writer.appendLine(name + ""String_Node_Str"" + e.get().value());
  }
}",0.7201210287443268
20522,"public void write(AnnotationInstanceEmitter emitter,IndentedAppendable writer) throws IOException {
  Class c=(Class)type.getType();
  writer.appendLine(c.getSimpleName() + ""String_Node_Str"");
  writer.indent();
  if (superTypes != null && superTypes.size() > 0) {
    writer.appendList(""String_Node_Str"",Collections2.transform(superTypes,new Function<RamlType,String>(){
      @Override public String apply(      RamlType input){
        return input.getTypeName();
      }
    }
).toArray(new String[]{}));
  }
  emitter.emitAnnotations(type);
  emitExample(writer);
  if (type.getDescription().isPresent()) {
    writer.appendLine(""String_Node_Str"" + type.getDescription().get());
  }
  writer.appendLine(""String_Node_Str"");
  writer.indent();
  for (  RamlProperty ramlProperty : properties.values()) {
    ramlProperty.write(emitter,writer);
  }
  writer.outdent();
  writer.outdent();
}","public void write(AnnotationInstanceEmitter emitter,IndentedAppendable writer) throws IOException {
  Class c=(Class)type.getType();
  writer.appendLine(c.getSimpleName() + ""String_Node_Str"");
  writer.indent();
  if (superTypes != null && superTypes.size() > 0) {
    writer.appendList(""String_Node_Str"",Collections2.transform(superTypes,new Function<RamlType,String>(){
      @Override public String apply(      RamlType input){
        return input.getTypeName();
      }
    }
).toArray(new String[]{}));
  }
  emitter.emitAnnotations(type);
  writeExample(writer);
  if (type.getDescription().isPresent()) {
    writer.appendLine(""String_Node_Str"" + type.getDescription().get());
  }
  writer.appendLine(""String_Node_Str"");
  writer.indent();
  for (  RamlProperty ramlProperty : properties.values()) {
    ramlProperty.write(emitter,writer);
  }
  writer.outdent();
  writer.outdent();
}",0.9949579831932772
20523,"public void emitAnnotations(Annotable annotable) throws IOException {
  for (  RamlSupportedAnnotation suportedAnnotation : suportedAnnotations) {
    Optional<Annotation> annotationOptional=suportedAnnotation.getAnnotationInstance(annotable);
    if (annotationOptional.isPresent() == false) {
      continue;
    }
    Annotation annotation=annotationOptional.get();
    if (annotation.annotationType().getDeclaredMethods().length == 0) {
      writer.appendLine(""String_Node_Str"" + annotation.annotationType().getSimpleName() + ""String_Node_Str"");
    }
 else {
      writer.appendLine(""String_Node_Str"" + annotation.annotationType().getSimpleName() + ""String_Node_Str"");
      writer.indent();
      writer.appendLine(""String_Node_Str"");
      writer.indent();
      try {
        for (        Method method : annotation.annotationType().getDeclaredMethods()) {
          Object value=method.invoke(annotation);
          if (value.getClass().isArray()) {
            List<Object> list=new ArrayList<>();
            for (int i=0; i < Array.getLength(value); i++) {
              list.add(Array.get(value,i));
            }
            String listString=Joiner.on(""String_Node_Str"").join(FluentIterable.from(list).transform(new Function<Object,String>(){
              @Override public String apply(              Object input){
                return toValue(input);
              }
            }
));
            writer.appendLine(method.getName() + ""String_Node_Str"" + listString+ ""String_Node_Str"");
          }
 else {
            writer.appendLine(method.getName() + ""String_Node_Str"" + toValue(value));
          }
        }
        writer.outdent();
        writer.outdent();
      }
 catch (      Exception e) {
        throw new IOException(""String_Node_Str"",e);
      }
    }
  }
}","public void emitAnnotations(Annotable annotable) throws IOException {
  for (  RamlSupportedAnnotation suportedAnnotation : suportedAnnotations) {
    Optional<Annotation> annotationOptional=suportedAnnotation.getAnnotationInstance(annotable);
    if (annotationOptional.isPresent() == false) {
      continue;
    }
    Annotation annotation=annotationOptional.get();
    if (annotation.annotationType().getDeclaredMethods().length == 0) {
      writer.appendLine(""String_Node_Str"" + annotation.annotationType().getSimpleName() + ""String_Node_Str"");
    }
 else {
      writer.appendLine(""String_Node_Str"" + annotation.annotationType().getSimpleName() + ""String_Node_Str"");
      writer.indent();
      try {
        for (        Method method : annotation.annotationType().getDeclaredMethods()) {
          Object value=method.invoke(annotation);
          if (value.getClass().isArray()) {
            List<Object> list=new ArrayList<>();
            for (int i=0; i < Array.getLength(value); i++) {
              list.add(Array.get(value,i));
            }
            String listString=Joiner.on(""String_Node_Str"").join(FluentIterable.from(list).transform(new Function<Object,String>(){
              @Override public String apply(              Object input){
                return toValue(input);
              }
            }
));
            writer.appendLine(method.getName() + ""String_Node_Str"" + listString+ ""String_Node_Str"");
          }
 else {
            writer.appendLine(method.getName() + ""String_Node_Str"" + toValue(value));
          }
        }
        writer.outdent();
      }
 catch (      Exception e) {
        throw new IOException(""String_Node_Str"",e);
      }
    }
  }
}",0.973390557939914
20524,"private void writeMethod(RamlResourceMethod method,List<RamlSupportedAnnotation> supportedAnnotation) throws IOException {
  writer.appendLine(format(""String_Node_Str"",method.getHttpMethod()));
  writer.indent();
  annotationInstanceEmitter.emitAnnotations(method);
  Optional<String> description=method.getDescription();
  if (description.isPresent() && !description.get().isEmpty()) {
    writeDescription(description.get());
  }
  if (!method.getConsumedMediaTypes().isEmpty() && (method.getConsumedType().isPresent() || !method.getFormParameters().isEmpty())) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    for (    RamlMediaType ramlMediaType : method.getConsumedMediaTypes()) {
      if (ramlMediaType.toStringRepresentation().equals(""String_Node_Str"")) {
        writer.appendLine(ramlMediaType.toStringRepresentation());
        writer.indent();
        writeFormParam(method);
        writer.outdent();
      }
 else {
        Type type=method.getConsumedType().get().getType();
        TypeHandler typeHandler=pickTypeHandler(method,ramlMediaType,type);
        typeHandler.writeType(typeRegistry,writer,ramlMediaType,method,method.getConsumedType().get());
      }
    }
    writer.outdent();
  }
  ResponseHandler handler=pickResponseHandler(method);
  TypeSelector selector=new TypeSelector(){
    @Override public TypeHandler pickTypeWriter(    RamlResourceMethod method,    RamlMediaType producedMediaType){
      return pickTypeHandler(method,producedMediaType,method.getProducedType().get().getType());
    }
  }
;
  if (!method.getProducedMediaTypes().isEmpty()) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    handler.writeResponses(typeRegistry,writer,method,selector);
    writer.outdent();
  }
  if (!method.getHeaderParameters().isEmpty()) {
    writeHeaderParameters(method.getHeaderParameters());
  }
  if (!method.getQueryParameters().isEmpty()) {
    writeQueryParameters(method.getQueryParameters());
  }
  writer.outdent();
}","private void writeMethod(RamlResourceMethod method,List<RamlSupportedAnnotation> supportedAnnotation) throws IOException {
  writer.appendLine(format(""String_Node_Str"",method.getHttpMethod()));
  writer.indent();
  annotationInstanceEmitter.emitAnnotations(method);
  Optional<String> description=method.getDescription();
  if (description.isPresent() && !description.get().isEmpty()) {
    writeDescription(description.get());
  }
  if (!method.getConsumedMediaTypes().isEmpty() && (method.getConsumedType().isPresent() || !method.getFormParameters().isEmpty())) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    for (    RamlMediaType ramlMediaType : method.getConsumedMediaTypes()) {
      if (ramlMediaType.toStringRepresentation().equals(""String_Node_Str"")) {
        writer.appendLine(ramlMediaType.toStringRepresentation() + ""String_Node_Str"");
        writer.indent();
        writeFormParam(method);
        writer.outdent();
      }
 else {
        Type type=method.getConsumedType().get().getType();
        TypeHandler typeHandler=pickTypeHandler(method,ramlMediaType,type);
        typeHandler.writeType(typeRegistry,writer,ramlMediaType,method,method.getConsumedType().get());
      }
    }
    writer.outdent();
  }
  ResponseHandler handler=pickResponseHandler(method);
  TypeSelector selector=new TypeSelector(){
    @Override public TypeHandler pickTypeWriter(    RamlResourceMethod method,    RamlMediaType producedMediaType){
      return pickTypeHandler(method,producedMediaType,method.getProducedType().get().getType());
    }
  }
;
  if (!method.getProducedMediaTypes().isEmpty()) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    handler.writeResponses(typeRegistry,writer,method,selector);
    writer.outdent();
  }
  if (!method.getHeaderParameters().isEmpty()) {
    writeHeaderParameters(method.getHeaderParameters());
  }
  if (!method.getQueryParameters().isEmpty()) {
    writeQueryParameters(method.getQueryParameters());
  }
  writer.outdent();
}",0.9950174389636272
20525,"@Test @Listed(one={1,2,3},two={AnnotationInstanceEmitter.class,AnnotationInstanceEmitterTest.class},three={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void listed() throws Exception {
  Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Listed.class);
  ramlAnnotationOfType(Listed.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(wrap(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}","@Test @Listed(one={1,2,3},two={AnnotationInstanceEmitter.class,AnnotationInstanceEmitterTest.class},three={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void listed() throws Exception {
  Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Listed.class);
  ramlAnnotationOfType(Listed.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(wrap(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}",0.9682959048877148
20526,"@Test @Classed(one=AnnotationInstanceEmitterTest.class) public void classed() throws Exception {
  Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Classed.class);
  ramlAnnotationOfType(Classed.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(wrap(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}","@Test @Classed(one=AnnotationInstanceEmitterTest.class) public void classed() throws Exception {
  Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Classed.class);
  ramlAnnotationOfType(Classed.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(wrap(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}",0.9569120287253142
20527,"@Test @Simple(one=""String_Node_Str"") public void simple() throws Exception {
  final Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Simple.class);
  ramlAnnotationOfType(Simple.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(new SimpleAnnotable(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}","@Test @Simple(one=""String_Node_Str"") public void simple() throws Exception {
  final Annotation annotation=AnnotationInstanceEmitterTest.class.getDeclaredMethod(""String_Node_Str"").getAnnotation(Simple.class);
  ramlAnnotationOfType(Simple.class,annotation);
  AnnotationInstanceEmitter emitter=new AnnotationInstanceEmitter(writer,Collections.singletonList(ramlAnnotation));
  emitter.emitAnnotations(new SimpleAnnotable(annotation));
  verify(writer).appendLine(""String_Node_Str"");
  verify(writer).appendLine(""String_Node_Str"");
}",0.9568345323741008
20528,"private void writeMethod(RamlResourceMethod method) throws IOException {
  writer.appendLine(format(""String_Node_Str"",method.getHttpMethod()));
  writer.indent();
  Optional<String> description=method.getDescription();
  if (description.isPresent()) {
    writeDescription(description.get());
  }
  if (!method.getConsumedMediaTypes().isEmpty() && method.getConsumedType().isPresent()) {
    Type type=method.getConsumedType().get().getType();
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    for (    RamlMediaType ramlMediaType : method.getConsumedMediaTypes()) {
      TypeHandler typeHandler=pickTypeHandler(method,ramlMediaType,type);
      typeHandler.writeType(typeRegistry,writer,ramlMediaType,method,method.getConsumedType().get());
    }
  }
  ResponseHandler handler=pickResponseHandler(method);
  TypeSelector selector=new TypeSelector(){
    @Override public TypeHandler pickTypeWriter(    RamlResourceMethod method,    RamlMediaType producedMediaType){
      return pickTypeHandler(method,producedMediaType,method.getProducedType().get().getType());
    }
  }
;
  if (!method.getProducedMediaTypes().isEmpty()) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    handler.writeResponses(typeRegistry,writer,method,selector);
  }
  if (!method.getHeaderParameters().isEmpty()) {
    writeHeaderParameters(method.getHeaderParameters());
  }
  if (!method.getQueryParameters().isEmpty()) {
    writeQueryParameters(method.getQueryParameters());
  }
  writer.outdent();
}","private void writeMethod(RamlResourceMethod method) throws IOException {
  writer.appendLine(format(""String_Node_Str"",method.getHttpMethod()));
  writer.indent();
  Optional<String> description=method.getDescription();
  if (description.isPresent()) {
    writeDescription(description.get());
  }
  if (!method.getConsumedMediaTypes().isEmpty() && method.getConsumedType().isPresent()) {
    Type type=method.getConsumedType().get().getType();
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    for (    RamlMediaType ramlMediaType : method.getConsumedMediaTypes()) {
      TypeHandler typeHandler=pickTypeHandler(method,ramlMediaType,type);
      typeHandler.writeType(typeRegistry,writer,ramlMediaType,method,method.getConsumedType().get());
    }
    writer.outdent();
  }
  ResponseHandler handler=pickResponseHandler(method);
  TypeSelector selector=new TypeSelector(){
    @Override public TypeHandler pickTypeWriter(    RamlResourceMethod method,    RamlMediaType producedMediaType){
      return pickTypeHandler(method,producedMediaType,method.getProducedType().get().getType());
    }
  }
;
  if (!method.getProducedMediaTypes().isEmpty()) {
    writer.appendLine(""String_Node_Str"");
    writer.indent();
    handler.writeResponses(typeRegistry,writer,method,selector);
    writer.outdent();
  }
  if (!method.getHeaderParameters().isEmpty()) {
    writeHeaderParameters(method.getHeaderParameters());
  }
  if (!method.getQueryParameters().isEmpty()) {
    writeQueryParameters(method.getQueryParameters());
  }
  writer.outdent();
}",0.985686402081978
20529,"@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity type) throws IOException {
  List<RamlMediaType> mediaTypes=method.getConsumedMediaTypes();
  writeBody(registry,writer,mediaTypes,type);
}","@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity type) throws IOException {
  writeBody(registry,writer,ramlMediaType,type);
}",0.7272727272727273
20530,"private void writeBody(final TypeRegistry registry,IndentedAppendable writer,List<RamlMediaType> mediaTypes,final RamlEntity bodyType) throws IOException {
  final Class topInterface=(Class)bodyType.getType();
  writer.appendLine(""String_Node_Str"" + topInterface.getSimpleName());
  writer.outdent();
  TypeScanner scanner=new TypeScanner(){
    @Override public void scanType(    TypeRegistry typeRegistry,    RamlEntity typeClass,    RamlType ramlType){
      rebuildType(typeRegistry,typeClass,this);
    }
  }
;
  scanner.scanType(registry,bodyType,null);
}","private void writeBody(final TypeRegistry registry,IndentedAppendable writer,RamlMediaType mediaTypes,final RamlEntity bodyType) throws IOException {
  final Class topInterface=(Class)bodyType.getType();
  writer.appendLine(""String_Node_Str"" + topInterface.getSimpleName());
  TypeScanner scanner=new TypeScanner(){
    @Override public void scanType(    TypeRegistry typeRegistry,    RamlEntity typeClass,    RamlType ramlType){
      rebuildType(typeRegistry,typeClass,this);
    }
  }
;
  scanner.scanType(registry,bodyType,null);
}",0.9762773722627736
20531,"@Override public void writeResponses(TypeRegistry typeRegistry,IndentedAppendable writer,RamlResourceMethod method,TypeSelector selector) throws IOException {
  if (!method.getProducedType().isPresent()) {
    return;
  }
  writer.appendLine(""String_Node_Str"");
  writer.indent();
  writer.appendLine(""String_Node_Str"");
  for (  RamlMediaType producedMediaType : method.getProducedMediaTypes()) {
    writer.indent();
    TypeHandler typeHandler=selector.pickTypeWriter(method,producedMediaType);
    typeHandler.writeType(typeRegistry,writer,producedMediaType,method,method.getProducedType().get());
    writer.outdent();
  }
  writer.outdent();
}","@Override public void writeResponses(TypeRegistry typeRegistry,IndentedAppendable writer,RamlResourceMethod method,TypeSelector selector) throws IOException {
  if (!method.getProducedType().isPresent()) {
    return;
  }
  writer.appendLine(""String_Node_Str"");
  writer.indent();
  writer.appendLine(""String_Node_Str"");
  for (  RamlMediaType producedMediaType : method.getProducedMediaTypes()) {
    writer.indent();
    writer.appendLine(producedMediaType.toStringRepresentation() + ""String_Node_Str"");
    writer.indent();
    TypeHandler typeHandler=selector.pickTypeWriter(method,producedMediaType);
    typeHandler.writeType(typeRegistry,writer,producedMediaType,method,method.getProducedType().get());
    writer.outdent();
    writer.outdent();
  }
  writer.outdent();
}",0.9089635854341735
20532,"@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity bodyType) throws IOException {
  writer.appendLine(format(""String_Node_Str"",ramlMediaType.toStringRepresentation()));
  if (ScalarType.fromType(bodyType.getType()).isPresent()) {
    writer.indent();
    writer.appendLine(""String_Node_Str"" + ScalarType.fromType(bodyType.getType()).get().getRamlSyntax());
    writer.outdent();
  }
 else {
    throw new IOException(bodyType + ""String_Node_Str"");
  }
  writer.outdent();
}","@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity bodyType) throws IOException {
  if (ScalarType.fromType(bodyType.getType()).isPresent()) {
    writer.appendLine(""String_Node_Str"" + ScalarType.fromType(bodyType.getType()).get().getRamlSyntax());
  }
 else {
    throw new IOException(bodyType + ""String_Node_Str"");
  }
}",0.6910569105691057
20533,"@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity type) throws IOException {
  List<RamlMediaType> mediaTypes=method.getConsumedMediaTypes();
  writeBody(registry,writer,mediaTypes,type);
}","@Override public void writeType(TypeRegistry registry,IndentedAppendable writer,RamlMediaType ramlMediaType,RamlResourceMethod method,RamlEntity type) throws IOException {
  writeBody(registry,writer,ramlMediaType,type);
}",0.7272727272727273
20534,"private void writeBody(TypeRegistry registry,IndentedAppendable writer,List<RamlMediaType> mediaTypes,RamlEntity bodyType) throws IOException {
  Class type=(Class)bodyType.getType();
  for (  RamlMediaType mediaType : mediaTypes) {
    writer.appendLine(format(""String_Node_Str"",mediaType.toStringRepresentation()));
    writer.indent();
    writer.appendLine(""String_Node_Str"" + type.getSimpleName());
    writer.outdent();
    registry.registerType(type.getSimpleName(),bodyType,new TypeScanner(){
      @Override public void scanType(      TypeRegistry typeRegistry,      RamlEntity type,      RamlType ramlType){
        Class c=(Class)type.getType();
        for (        Field field : c.getDeclaredFields()) {
          Type genericType=field.getGenericType();
          RamlType fieldRamlType;
          fieldRamlType=PluginUtilities.getRamlType(c.getSimpleName(),typeRegistry,type.createDependent(genericType),this);
          XmlElement elem=field.getAnnotation(XmlElement.class);
          if (elem != null) {
            String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
            ramlType.addProperty(RamlProperty.createProperty(name,fieldRamlType));
          }
 else {
            XmlAttribute attribute=field.getAnnotation(XmlAttribute.class);
            if (attribute != null) {
              String name=elem.name().equals(""String_Node_Str"") ? field.getName() : elem.name();
              ramlType.addProperty(RamlProperty.createProperty(name,fieldRamlType));
            }
          }
        }
      }
    }
);
  }
  writer.outdent();
}","private void writeBody(TypeRegistry registry,IndentedAppendable writer,RamlMediaType mediaTypes,RamlEntity bodyType) throws IOException {
  Class type=(Class)bodyType.getType();
  writer.appendLine(""String_Node_Str"" + type.getSimpleName());
  registry.registerType(type.getSimpleName(),bodyType,new SimpleJaxbTypeScanner());
}",0.2492179353493222
20535,"private void handleMethodConsumer(MethodSpec.Builder methodSpec,Multimap<String,String> ramlTypeToMediaType,GType typeDeclaration){
  Collection<String> mediaTypes=ramlTypeToMediaType.get(typeDeclaration.type());
  AnnotationSpec.Builder ann=buildAnnotation(mediaTypes,Consumes.class);
  methodSpec.addAnnotation(ann.build());
}","private void handleMethodConsumer(MethodSpec.Builder methodSpec,Multimap<String,String> ramlTypeToMediaType,GType typeDeclaration){
  Collection<String> mediaTypes=ramlTypeToMediaType.get(typeDeclaration.name());
  AnnotationSpec.Builder ann=buildAnnotation(mediaTypes,Consumes.class);
  methodSpec.addAnnotation(ann.build());
}",0.9908536585365854
20536,"private MethodSpec.Builder createMethodBuilder(GMethod gMethod,String methodName,Set<String> mediaTypesForMethod,Map<String,TypeSpec.Builder> responseSpec){
  MethodSpec.Builder methodSpec=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.ABSTRACT,Modifier.PUBLIC);
  methodSpec=build.getResourceMethodExtension(Annotations.ON_METHOD_CREATION,gMethod).onMethod(new ResourceContextImpl(build),gMethod,methodSpec);
  for (  GParameter typeDeclaration : gMethod.resource().uriParameters()) {
    if (TypeUtils.isComposite(typeDeclaration)) {
      throw new GenerationException(""String_Node_Str"" + typeDeclaration);
    }
    methodSpec.addParameter(ParameterSpec.builder(typeDeclaration.type().defaultJavaTypeName(build.getModelPackage()),Names.methodName(typeDeclaration.name())).addAnnotation(AnnotationSpec.builder(PathParam.class).addMember(""String_Node_Str"",""String_Node_Str"",typeDeclaration.name()).build()).build());
  }
  for (  GParameter typeDeclaration : gMethod.queryParameters()) {
    if (TypeUtils.isComposite(typeDeclaration)) {
      throw new GenerationException(""String_Node_Str"" + typeDeclaration);
    }
    methodSpec.addParameter(ParameterSpec.builder(typeDeclaration.type().defaultJavaTypeName(build.getModelPackage()),Names.methodName(typeDeclaration.name())).addAnnotation(AnnotationSpec.builder(QueryParam.class).addMember(""String_Node_Str"",""String_Node_Str"",typeDeclaration.name()).build()).build());
  }
  buildNewWebMethod(gMethod,methodSpec);
  if (gMethod.resource().parentResource() != null) {
    methodSpec.addAnnotation(AnnotationSpec.builder(Path.class).addMember(""String_Node_Str"",""String_Node_Str"",gMethod.resource().resourcePath()).build());
  }
  if (gMethod.responses().size() != 0) {
    TypeSpec.Builder responseSpecForMethod=responseSpec.get(Names.responseClassName(gMethod.resource(),gMethod));
    if (responseSpecForMethod == null) {
      methodSpec.returns(ClassName.get(Response.class));
    }
 else {
      methodSpec.returns(ClassName.get(""String_Node_Str"",responseSpecForMethod.build().name));
    }
  }
 else {
    methodSpec.returns(ClassName.VOID);
  }
  if (mediaTypesForMethod.size() > 0) {
    AnnotationSpec.Builder ann=buildAnnotation(mediaTypesForMethod,Produces.class);
    methodSpec.addAnnotation(ann.build());
  }
  return methodSpec;
}","private MethodSpec.Builder createMethodBuilder(GMethod gMethod,String methodName,Set<String> mediaTypesForMethod,Map<String,TypeSpec.Builder> responseSpec){
  MethodSpec.Builder methodSpec=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.ABSTRACT,Modifier.PUBLIC);
  methodSpec=build.getResourceMethodExtension(Annotations.ON_METHOD_CREATION,gMethod).onMethod(new ResourceContextImpl(build),gMethod,methodSpec);
  for (  GParameter typeDeclaration : gMethod.resource().uriParameters()) {
    if (TypeUtils.isComposite(typeDeclaration)) {
      throw new GenerationException(""String_Node_Str"" + typeDeclaration);
    }
    methodSpec.addParameter(ParameterSpec.builder(typeDeclaration.type().defaultJavaTypeName(build.getModelPackage()),Names.methodName(typeDeclaration.name())).addAnnotation(AnnotationSpec.builder(PathParam.class).addMember(""String_Node_Str"",""String_Node_Str"",typeDeclaration.name()).build()).build());
  }
  for (  GParameter typeDeclaration : gMethod.queryParameters()) {
    if (TypeUtils.isComposite(typeDeclaration)) {
      throw new GenerationException(""String_Node_Str"" + typeDeclaration);
    }
    methodSpec.addParameter(ParameterSpec.builder(typeDeclaration.type().defaultJavaTypeName(build.getModelPackage()),Names.methodName(typeDeclaration.name())).addAnnotation(AnnotationSpec.builder(QueryParam.class).addMember(""String_Node_Str"",""String_Node_Str"",typeDeclaration.name()).build()).build());
  }
  buildNewWebMethod(gMethod,methodSpec);
  if (gMethod.resource().parentResource() != null) {
    methodSpec.addAnnotation(AnnotationSpec.builder(Path.class).addMember(""String_Node_Str"",""String_Node_Str"",gMethod.resource().relativePath()).build());
  }
  if (gMethod.responses().size() != 0) {
    TypeSpec.Builder responseSpecForMethod=responseSpec.get(Names.responseClassName(gMethod.resource(),gMethod));
    if (responseSpecForMethod == null) {
      methodSpec.returns(ClassName.get(Response.class));
    }
 else {
      methodSpec.returns(ClassName.get(""String_Node_Str"",responseSpecForMethod.build().name));
    }
  }
 else {
    methodSpec.returns(ClassName.VOID);
  }
  if (mediaTypesForMethod.size() > 0) {
    AnnotationSpec.Builder ann=buildAnnotation(mediaTypesForMethod,Produces.class);
    methodSpec.addAnnotation(ann.build());
  }
  return methodSpec;
}",0.997835497835498
20537,"private static Map<String,String> parseString(String configString){
  Map<String,String> props=new HashMap<>();
  String[] propArray=configString.split(""String_Node_Str"");
  for (  String prop : propArray) {
    String[] pair=prop.split(""String_Node_Str"");
    if (pair.length == 1) {
      props.put(pair[0],""String_Node_Str"");
    }
 else {
      props.put(pair[0],pair[1]);
    }
  }
  return props;
}","private static Map<String,String> parseString(String configString){
  Map<String,String> props=new HashMap<>();
  if (configString == null) {
    return props;
  }
  String[] propArray=configString.split(""String_Node_Str"");
  for (  String prop : propArray) {
    String[] pair=prop.split(""String_Node_Str"");
    if (pair.length == 1) {
      props.put(pair[0],""String_Node_Str"");
    }
 else {
      props.put(pair[0],pair[1]);
    }
  }
  return props;
}",0.9395348837209302
20538,"private void buildResource(TypeSpec.Builder typeSpec,GResource currentResource){
  Multimap<GMethod,GRequest> incomingBodies=ArrayListMultimap.create();
  Multimap<GMethod,GResponse> responses=ArrayListMultimap.create();
  ResourceUtils.fillInBodiesAndResponses(currentResource,incomingBodies,responses);
  createResponseClass(typeSpec,incomingBodies,responses);
  for (  GMethod gMethod : incomingBodies.keySet()) {
    Set<String> mediaTypesForMethod=fetchAllMediaTypesForMethodResponses(gMethod);
    Multimap<String,String> ramlTypeToMediaType=accumulateMediaTypesPerType(incomingBodies,gMethod);
    String methodName=Names.resourceMethodName(gMethod.resource(),gMethod);
    if (gMethod.body().size() == 0) {
      createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,methodName);
    }
 else {
      for (      GRequest gRequest : gMethod.body()) {
        if (gRequest.type() == null) {
          createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,methodName);
        }
 else {
          createMethodWithBody(typeSpec,gMethod,ramlTypeToMediaType,methodName,gRequest);
        }
      }
    }
  }
}","private void buildResource(TypeSpec.Builder typeSpec,GResource currentResource){
  Multimap<GMethod,GRequest> incomingBodies=ArrayListMultimap.create();
  Multimap<GMethod,GResponse> responses=ArrayListMultimap.create();
  ResourceUtils.fillInBodiesAndResponses(currentResource,incomingBodies,responses);
  createResponseClass(typeSpec,incomingBodies,responses);
  for (  GMethod gMethod : currentResource.methods()) {
    String methodName=Names.resourceMethodName(gMethod.resource(),gMethod);
    Set<String> mediaTypesForMethod=fetchAllMediaTypesForMethodResponses(gMethod);
    if (gMethod.body().size() == 0) {
      createMethodWithoutBody(typeSpec,gMethod,mediaTypesForMethod,methodName);
    }
 else {
      Multimap<String,String> ramlTypeToMediaType=accumulateMediaTypesPerType(incomingBodies,gMethod);
      for (      GRequest gRequest : gMethod.body()) {
        if (ramlTypeToMediaType.containsKey(gRequest.type().name())) {
          createMethodWithBody(typeSpec,gMethod,ramlTypeToMediaType,methodName,gRequest);
          ramlTypeToMediaType.removeAll(gRequest.type().name());
        }
      }
    }
  }
}",0.5571873609256787
20539,"/** 
 * <p>getFullyQualifiedName.</p>
 * @return a {@link java.lang.String} object.
 */
public String getFullyQualifiedName(){
  return null;
}","/** 
 * <p>getFullyQualifiedName.</p>
 * @return a {@link java.lang.String} object.
 */
public String getFullyQualifiedName(){
  return this.element.getQualifiedName().toString();
}",0.8765432098765432
20540,"@Override protected IStatus run(IProgressMonitor monitor){
  monitor.beginTask(""String_Node_Str"",selectionObject.size() + 1);
  monitor.worked(1);
  visitor=new JDTResourceVisitor(_outputFile,classLoader);
  visitor.setPreferences(new PreferencesConfig());
  for (  Object q : selectionObject) {
    monitor.worked(1);
    if (!(q instanceof IJavaElement)) {
      continue;
    }
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    GenerationException e) {
      MessageDialog.openError(shell,e.getShortMessage(),e.getDetailMessage());
    }
catch (    Exception e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  if (_project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(_outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return Status.OK_STATUS;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      _project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  GenerateRAML.this.monitor=monitor;
  monitor.beginTask(""String_Node_Str"",count[0] + 1);
  monitor.worked(1);
  visitor=new JDTResourceVisitor(_outputFile,classLoader);
  visitor.setPreferences(new PreferencesConfig());
  for (  Object q : selectionObject) {
    sourceVisitor.visitObject(q);
  }
  if (_project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(_outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return Status.OK_STATUS;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      _project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  return Status.OK_STATUS;
}",0.7248407643312101
20541,"private void visitType(IType q){
  if (!types.add(q)) {
    return;
  }
  IFile file=container.getFile(new Path(q.getElementName() + ""String_Node_Str""));
  if (separateFiles) {
    visitor=new JDTResourceVisitor(file.getLocation().toFile(),classLoader).createResourceVisitor();
    visitor.clear();
  }
  visitor.visit(new JDTType(q));
  if (separateFiles && !visitor.isEmpty()) {
    if (isSingle()) {
      String raml=visitor.getRaml();
      Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(container.getLocation().toFile()));
      RamlEmitterV2 emmitter=new RamlEmitterV2();
      emmitter.setSingle(true);
      String dump=emmitter.dump(build);
      try {
        save(dump,file);
      }
 catch (      Exception e) {
        MessageDialog.openError(shell,e.getMessage(),e.getMessage());
      }
      return;
    }
 else {
      saveResult(visitor,file);
    }
  }
}","private void visitType(IType q){
  if (!types.add(q)) {
    return;
  }
  IFile file=container.getFile(new Path(q.getElementName() + ""String_Node_Str""));
  if (separateFiles) {
    visitor=new JDTResourceVisitor(file.getLocation().toFile(),classLoader).createResourceVisitor();
    visitor.clear();
  }
  visitor.visit(new JDTType(q));
  if (separateFiles && !visitor.isEmpty()) {
    if (isSingle()) {
      String raml=visitor.getRaml();
      Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(container.getLocation().toFile()));
      RamlEmitterV2 emmitter=new RamlEmitterV2();
      emmitter.setSingle(true);
      String dump=emmitter.dump(build);
      try {
        save(dump,file);
      }
 catch (      Exception e) {
        MessageDialog.openError(shell,e.getMessage(),e.getMessage());
      }
      return;
    }
 else {
      saveResult(visitor,file);
    }
  }
  this.monitor.worked(1);
}",0.9859154929577464
20542,"/** 
 * <p>gatherNamespaces.</p>
 * @return a {@link java.util.HashMap} object.
 */
public HashMap<String,String> gatherNamespaces(){
  int n=0;
  HashMap<String,String> map=new HashMap<String,String>();
  fillNamespaceMap(map,n);
  return map;
}","/** 
 * <p>gatherNamespaces.</p>
 * @return a {@link java.util.HashMap} object.
 */
public HashMap<String,String> gatherNamespaces(){
  int n=0;
  HashMap<String,String> map=new HashMap<String,String>();
  fillNamespaceMap(map,n,null);
  return map;
}",0.9899396378269618
20543,"private int fillNamespaceMap(HashMap<String,String> map,int n){
  for (  JAXBProperty p : properties) {
    if (p.namespace != null) {
      map.put(p.namespace,""String_Node_Str"" + (n++));
    }
    JAXBType type=p.getType();
    if (type != null) {
      n=type.fillNamespaceMap(map,n);
    }
  }
  return n;
}","private int fillNamespaceMap(HashMap<String,String> map,int n,Set<String> processed){
  if (processed == null) {
    processed=new HashSet<String>();
  }
  for (  JAXBProperty p : properties) {
    if (p.namespace != null) {
      map.put(p.namespace,""String_Node_Str"" + (n++));
    }
    JAXBType type=p.getType();
    String qName=((ITypeModel)type.originalType).getFullyQualifiedName();
    if (!processed.contains(qName)) {
      processed.add(qName);
      if (type != null) {
        n=type.fillNamespaceMap(map,n,processed);
      }
      processed.remove(qName);
    }
  }
  return n;
}",0.625414364640884
20544,"@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode){
  ISchemaType propType=prop.getType();
  if (prop.isAttribute()) {
    this.element.setAttribute(type.getQualifiedPropertyName(prop),DefaultValueFactory.getDefaultValue(prop).toString());
    return;
  }
 else {
    if (prop.getStructureType() == StructureType.MAP) {
      ISchemaType keyType=SimpleType.STRING;
      ISchemaType valueType=new TypeModelImpl(""String_Node_Str"",""String_Node_Str"",null,StructureType.COMMON);
      if (prop instanceof IMapSchemaProperty) {
        IMapSchemaProperty msp=(IMapSchemaProperty)prop;
        keyType=msp.getKeyType();
        valueType=msp.getValueType();
      }
      String name=getPropertyName(type,prop);
      Element mapElement=document.createElement(name);
      if (this.element != null) {
        this.element.appendChild(mapElement);
      }
 else {
        this.document.appendChild(mapElement);
      }
      Element entryElement=this.document.createElement(""String_Node_Str"");
      mapElement.appendChild(entryElement);
      if (keyType != null && keyType.isSimple()) {
        Element keyElement=this.document.createElement(""String_Node_Str"");
        keyElement.setTextContent(DefaultValueFactory.getDefaultValue(keyType).toString());
        entryElement.appendChild(keyElement);
      }
 else {
        Node keyNode=new Node(""String_Node_Str"",this.document);
        XMLModelSerializer.this.process(keyType,keyNode);
        entryElement.appendChild(keyNode.element);
      }
      if (valueType != null && valueType.isSimple()) {
        Element valueElement=this.document.createElement(""String_Node_Str"");
        valueElement.setTextContent(DefaultValueFactory.getDefaultValue(valueType).toString());
        entryElement.appendChild(valueElement);
      }
 else {
        Node valueNode=new Node(""String_Node_Str"",this.document);
        XMLModelSerializer.this.process(valueType,valueNode);
        entryElement.appendChild(valueNode.element);
      }
    }
 else {
      Element childElement=((Node)childNode).element;
      if (propType != null && propType.isSimple() || prop.isGeneric()) {
        childElement.setTextContent(DefaultValueFactory.getDefaultValue(prop).toString());
      }
      this.element.appendChild(childElement);
      if (prop.getStructureType() == StructureType.COLLECTION) {
        this.element.appendChild(childElement.cloneNode(true));
      }
    }
  }
}","@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  ISchemaType propType=prop.getType();
  if (prop.isAttribute()) {
    this.element.setAttribute(type.getQualifiedPropertyName(prop),DefaultValueFactory.getDefaultValue(prop).toString());
    return;
  }
 else {
    if (prop.getStructureType() == StructureType.MAP) {
      ISchemaType keyType=SimpleType.STRING;
      ISchemaType valueType=new TypeModelImpl(""String_Node_Str"",""String_Node_Str"",null,StructureType.COMMON);
      if (prop instanceof IMapSchemaProperty) {
        IMapSchemaProperty msp=(IMapSchemaProperty)prop;
        keyType=msp.getKeyType();
        valueType=msp.getValueType();
      }
      String name=getPropertyName(type,prop);
      Element mapElement=document.createElement(name);
      if (this.element != null) {
        this.element.appendChild(mapElement);
      }
 else {
        this.document.appendChild(mapElement);
      }
      Element entryElement=this.document.createElement(""String_Node_Str"");
      mapElement.appendChild(entryElement);
      if (keyType != null && keyType.isSimple()) {
        Element keyElement=this.document.createElement(""String_Node_Str"");
        keyElement.setTextContent(DefaultValueFactory.getDefaultValue(keyType).toString());
        entryElement.appendChild(keyElement);
      }
 else {
        Node keyNode=new Node(""String_Node_Str"",this.document);
        String qName=keyType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(keyType,keyNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(keyNode.element);
      }
      if (valueType != null && valueType.isSimple()) {
        Element valueElement=this.document.createElement(""String_Node_Str"");
        valueElement.setTextContent(DefaultValueFactory.getDefaultValue(valueType).toString());
        entryElement.appendChild(valueElement);
      }
 else {
        Node valueNode=new Node(""String_Node_Str"",this.document);
        String qName=valueType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(valueType,valueNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(valueNode.element);
      }
    }
 else {
      Element childElement=((Node)childNode).element;
      if (propType != null && propType.isSimple() || prop.isGeneric()) {
        childElement.setTextContent(DefaultValueFactory.getDefaultValue(prop).toString());
      }
      this.element.appendChild(childElement);
      if (prop.getStructureType() == StructureType.COLLECTION) {
        this.element.appendChild(childElement.cloneNode(true));
      }
    }
  }
}",0.916651128099944
20545,"@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode){
  if (this.structureType == StructureType.COLLECTION) {
    int l=this.array.length();
    for (int i=0; i < l; i++) {
      JSONObject item;
      try {
        item=(JSONObject)this.array.get(i);
        appendProperty(item,type,prop,childNode);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (this.structureType == StructureType.MAP) {
    try {
      for (Iterator<?> iter=this.object.keys(); iter.hasNext(); ) {
        String key=iter.next().toString();
        JSONObject value=this.object.getJSONObject(key);
        appendProperty(value,type,prop,childNode);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    appendProperty(this.object,type,prop,childNode);
  }
}","@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  if (this.structureType == StructureType.COLLECTION) {
    int l=this.array.length();
    for (int i=0; i < l; i++) {
      JSONObject item;
      try {
        item=(JSONObject)this.array.get(i);
        appendProperty(item,type,prop,childNode);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (this.structureType == StructureType.MAP) {
    try {
      for (Iterator<?> iter=this.object.keys(); iter.hasNext(); ) {
        String key=iter.next().toString();
        JSONObject value=this.object.getJSONObject(key);
        appendProperty(value,type,prop,childNode);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    appendProperty(this.object,type,prop,childNode);
  }
}",0.9848058525604952
20546,"@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode){
  if (this.isGeneric) {
    return;
  }
  String propName=type.getQualifiedPropertyName(prop);
  if (prop.isAttribute()) {
    propName=""String_Node_Str"" + propName;
  }
  try {
    JSONObject childObject=((Node)childNode).object;
    StructureType st=prop.getStructureType();
    JSONObject actualObject=null;
    if (this.isRootArray) {
      JSONObject item=null;
      JSONArray items=null;
      try {
        items=this.object.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        this.object.put(ITEMS,items);
      }
      try {
        item=items.getJSONObject(0);
      }
 catch (      JSONException ex) {
        item=new JSONObject();
        items.put(item);
      }
      actualObject=item;
    }
 else     if (this.isRootMap) {
      JSONObject patternProperties=null;
      try {
        patternProperties=this.object.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        this.object.put(PATTERN_PROPERTIES,patternProperties);
      }
      JSONObject property=null;
      try {
        property=patternProperties.getJSONObject(DEFAULT_REGEXP);
      }
 catch (      JSONException ex) {
        property=new JSONObject();
        property.put(""String_Node_Str"",""String_Node_Str"");
        property.put(""String_Node_Str"",false);
        patternProperties.put(DEFAULT_REGEXP,property);
      }
      actualObject=property;
    }
 else {
      actualObject=this.object;
    }
    actualObject.put(""String_Node_Str"",""String_Node_Str"");
    JSONObject properties=null;
    try {
      properties=actualObject.getJSONObject(PROPERTIES);
    }
 catch (    JSONException ex) {
      properties=new JSONObject();
      actualObject.put(PROPERTIES,properties);
    }
    if (st == StructureType.COLLECTION) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONArray items=null;
      try {
        items=propObject.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        propObject.put(ITEMS,items);
      }
      items.put(childObject);
    }
 else     if (st == StructureType.MAP) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONObject patternProperties=null;
      try {
        patternProperties=propObject.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        propObject.put(PATTERN_PROPERTIES,patternProperties);
      }
      patternProperties.put(DEFAULT_REGEXP,childObject);
    }
 else {
      properties.put(propName,childObject);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}","@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  if (this.isGeneric) {
    return;
  }
  String propName=type.getQualifiedPropertyName(prop);
  if (prop.isAttribute()) {
    propName=""String_Node_Str"" + propName;
  }
  try {
    JSONObject childObject=((Node)childNode).object;
    StructureType st=prop.getStructureType();
    JSONObject actualObject=null;
    if (this.isRootArray) {
      JSONObject item=null;
      JSONArray items=null;
      try {
        items=this.object.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        this.object.put(ITEMS,items);
      }
      try {
        item=items.getJSONObject(0);
      }
 catch (      JSONException ex) {
        item=new JSONObject();
        items.put(item);
      }
      actualObject=item;
    }
 else     if (this.isRootMap) {
      JSONObject patternProperties=null;
      try {
        patternProperties=this.object.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        this.object.put(PATTERN_PROPERTIES,patternProperties);
      }
      JSONObject property=null;
      try {
        property=patternProperties.getJSONObject(DEFAULT_REGEXP);
      }
 catch (      JSONException ex) {
        property=new JSONObject();
        property.put(""String_Node_Str"",""String_Node_Str"");
        property.put(""String_Node_Str"",false);
        patternProperties.put(DEFAULT_REGEXP,property);
      }
      actualObject=property;
    }
 else {
      actualObject=this.object;
    }
    actualObject.put(""String_Node_Str"",""String_Node_Str"");
    JSONObject properties=null;
    try {
      properties=actualObject.getJSONObject(PROPERTIES);
    }
 catch (    JSONException ex) {
      properties=new JSONObject();
      actualObject.put(PROPERTIES,properties);
    }
    if (st == StructureType.COLLECTION) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONArray items=null;
      try {
        items=propObject.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        propObject.put(ITEMS,items);
      }
      items.put(childObject);
    }
 else     if (st == StructureType.MAP) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONObject patternProperties=null;
      try {
        patternProperties=propObject.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        propObject.put(PATTERN_PROPERTIES,patternProperties);
      }
      patternProperties.put(DEFAULT_REGEXP,childObject);
    }
 else {
      properties.put(propName,childObject);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}",0.9960041438508214
20547,"void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode);","void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes);",0.8682926829268293
20548,"@Override public String serialize(ISchemaType type){
  if (type.isSimple()) {
    return null;
  }
  ISerializationNode node=createNode(type,null,null);
  process(type,node);
  return node.getStringValue();
}","@Override public String serialize(ISchemaType type){
  if (type.isSimple()) {
    return null;
  }
  ISerializationNode node=createNode(type,null,null);
  process(type,node,null);
  return node.getStringValue();
}",0.98812351543943
20549,"public void process(ISchemaType type,ISerializationNode node){
  List<ISchemaProperty> properties=type.getProperties();
  if (properties == null) {
    return;
  }
  for (  ISchemaProperty prop : properties) {
    ISchemaType childType=prop instanceof IMapSchemaProperty ? ((IMapSchemaProperty)prop).getValueType() : prop.getType();
    ISerializationNode childNode=createNode(childType,prop,node);
    if (childNode != null) {
      process(childType,childNode);
    }
    node.processProperty(type,prop,childNode);
  }
}","protected void process(ISchemaType type,ISerializationNode node,Set<String> processedTypes){
  List<ISchemaProperty> properties=type.getProperties();
  if (properties == null) {
    return;
  }
  if (processedTypes == null) {
    processedTypes=new HashSet<String>();
  }
  for (  ISchemaProperty prop : properties) {
    ISchemaType childType=prop instanceof IMapSchemaProperty ? ((IMapSchemaProperty)prop).getValueType() : prop.getType();
    String qName=childType.getClassQualifiedName();
    ISerializationNode childNode=createNode(childType,prop,node);
    if (!processedTypes.contains(qName)) {
      processedTypes.add(qName);
      if (childNode != null) {
        process(childType,childNode,processedTypes);
      }
      processedTypes.remove(qName);
    }
    node.processProperty(type,prop,childNode,processedTypes);
  }
}",0.7363770250368189
20550,"public boolean AddParameterFilter(String name,AbstractParam parameter,Class<? extends Annotation> annotationClass,JMethod method){
  return false;
}","public boolean AddParameterFilter(String name,AbstractParam parameter,Class<? extends Annotation> annotationClass,JMethod method){
  return true;
}",0.976271186440678
20551,"private ITypeModel getJAXBType(String typeName,IType ownerType) throws JavaModelException {
  Class<?> basicJavaType=getBasicJavaType(typeName);
  if (basicJavaType != null) {
    return new ReflectionType(getClass());
  }
  IType resolveType=resolveType(ownerType,typeName);
  if (resolveType == null) {
    return null;
  }
  return new JDTType(resolveType);
}","private ITypeModel getJAXBType(String typeName,IType ownerType) throws JavaModelException {
  Class<?> basicJavaType=getBasicJavaType(typeName);
  if (basicJavaType != null) {
    return new ReflectionType(basicJavaType);
  }
  IType resolveType=resolveType(ownerType,typeName);
  if (resolveType == null) {
    return null;
  }
  return new JDTType(resolveType);
}",0.968363136176066
20552,"/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  types.clear();
  boolean cpInited=false;
  IProject project=null;
  classLoader=null;
  try {
    for (    Object q : selectionObject) {
      if (!(q instanceof IJavaElement)) {
        continue;
      }
      if (!cpInited) {
        IJavaElement el=(IJavaElement)q;
        IResource resource=el.getResource();
        if (project != null && !project.equals(resource.getProject())) {
          MessageDialog.openInformation(shell,""String_Node_Str"",""String_Node_Str"");
          return;
        }
        project=resource.getProject();
        Collection<String> constructProjectClassPath=new ClassPathCollector().constructProjectClassPath(project,true);
        URL[] urls=new URL[constructProjectClassPath.size()];
        int a=0;
        for (        String s : constructProjectClassPath) {
          urls[a++]=new File(s).toURL();
        }
        classLoader=new URLClassLoader(urls);
        cpInited=true;
      }
    }
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  if (project == null) {
    MessageDialog.openInformation(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IFile file=getNewRAMLFile(project);
  boolean doSingle=isSingle();
  if (file == null) {
    return;
  }
  File outputFile=file.getLocation().toFile();
  File actualFile=outputFile;
  if (doSingle) {
    File createTempFile;
    try {
      createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      outputFile=createTempFile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  visitor=new JDTResourceVisitor(outputFile,classLoader);
  visitor.setPreferences(new PreferencesConfig());
  for (  Object q : selectionObject) {
    if (!(q instanceof IJavaElement)) {
      continue;
    }
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    GenerationException e) {
      MessageDialog.openError(shell,e.getShortMessage(),e.getDetailMessage());
    }
catch (    Exception e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  if (project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
}","@Override protected IStatus run(IProgressMonitor monitor){
  monitor.beginTask(""String_Node_Str"",selectionObject.size() + 1);
  monitor.worked(1);
  visitor=new JDTResourceVisitor(_outputFile,classLoader);
  visitor.setPreferences(new PreferencesConfig());
  for (  Object q : selectionObject) {
    monitor.worked(1);
    if (!(q instanceof IJavaElement)) {
      continue;
    }
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    GenerationException e) {
      MessageDialog.openError(shell,e.getShortMessage(),e.getDetailMessage());
    }
catch (    Exception e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  if (_project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(_outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return Status.OK_STATUS;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      _project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  return Status.OK_STATUS;
}",0.6525998492840994
20553,"/** 
 * <p>Constructor for JAXBType.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 */
public JAXBType(ITypeModel model,JAXBRegistry r){
  super(model,r);
  IMethodModel[] methods=model.getMethods();
  String value=value(XmlAccessorType.class,""String_Node_Str"");
  XmlAccessType type=XmlAccessType.PUBLIC_MEMBER;
  this.className=model.getFullyQualifiedName();
  if (value != null) {
    type=extractType(value);
  }
  if (this.className.equals(""String_Node_Str"")) {
    return;
  }
  for (  IMethodModel m : methods) {
    boolean needToConsume=needToConsume(type,m);
    if (!needToConsume) {
      continue;
    }
    boolean get=m.getName().startsWith(""String_Node_Str"");
    boolean is=m.getName().startsWith(""String_Node_Str"");
    if (get || is) {
      properties.add(createProperty(get ? m.getName().substring(3) : m.getName().substring(2),m));
    }
  }
  for (  IFieldModel f : model.getFields()) {
    if (!f.isStatic()) {
      boolean needToConsume=needToConsume(type,f);
      if (!needToConsume) {
        continue;
      }
      properties.add(createProperty(f.getName(),f));
    }
  }
}","/** 
 * <p>Constructor for JAXBType.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 */
public JAXBType(ITypeModel model,JAXBRegistry r){
  super(model,r);
  IMethodModel[] methods=model.getMethods();
  String value=value(XmlAccessorType.class,""String_Node_Str"");
  XmlAccessType type=XmlAccessType.PUBLIC_MEMBER;
  this.className=model.getFullyQualifiedName();
  if (value != null) {
    type=extractType(value);
  }
  if (this.className.equals(""String_Node_Str"")) {
    return;
  }
  for (  IMethodModel m : methods) {
    boolean needToConsume=needToConsume(type,m);
    if (!needToConsume) {
      continue;
    }
    boolean get=m.getName().startsWith(""String_Node_Str"");
    boolean is=m.getName().startsWith(""String_Node_Str"");
    if (get || is) {
      String methodName=get ? m.getName().substring(3) : m.getName().substring(2);
      if (!methodName.isEmpty()) {
        properties.add(createProperty(methodName,m));
      }
    }
  }
  for (  IFieldModel f : model.getFields()) {
    if (!f.isStatic()) {
      boolean needToConsume=needToConsume(type,f);
      if (!needToConsume) {
        continue;
      }
      properties.add(createProperty(f.getName(),f));
    }
  }
}",0.9226497421658072
20554,"private int fillNamespaceMap(HashMap<String,String> map,int n,Set<String> processed){
  if (processed == null) {
    processed=new HashSet<String>();
  }
  for (  JAXBProperty p : properties) {
    if (p.namespace != null) {
      map.put(p.namespace,""String_Node_Str"" + (n++));
    }
    JAXBType type=p.getType();
    String qName=((ITypeModel)type.originalType).getFullyQualifiedName();
    if (!processed.contains(qName)) {
      processed.add(qName);
      if (type != null) {
        n=type.fillNamespaceMap(map,n,processed);
      }
      processed.remove(qName);
    }
  }
  return n;
}","private int fillNamespaceMap(HashMap<String,String> map,int n,Set<String> processed){
  if (processed == null) {
    processed=new HashSet<String>();
  }
  for (  JAXBProperty p : properties) {
    if (p.namespace != null) {
      map.put(p.namespace,""String_Node_Str"" + (n++));
    }
    JAXBType type=p.getType();
    String qName=type.getClassName();
    if (!processed.contains(qName)) {
      processed.add(qName);
      if (type != null) {
        n=type.fillNamespaceMap(map,n,processed);
      }
      processed.remove(qName);
    }
  }
  return n;
}",0.5850694444444444
20555,"/** 
 * <p>afterSchemaGen.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param st 
 * @param gotXSD 
 */
protected void afterSchemaGen(ITypeModel t,StructureType st){
  JAXBRegistry rs=new JAXBRegistry();
  JAXBType jaxbModel=rs.getJAXBModel(t);
  if (jaxbModel == null) {
    return;
  }
  ISchemaType schemaModel=null;
  try {
    schemaModel=new SchemaModelBuilder().buildSchemaModel(jaxbModel,st);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (schemaModel == null) {
    return;
  }
  try {
    if (st == null || st == StructureType.COMMON) {
      String xmlExample=new XMLModelSerializer().serialize(schemaModel);
      writeString(xmlExample,constructFileLocation(t.getName(),EXAMPLE,XML,st));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    String jsonExample=new JsonModelSerializer().serialize(schemaModel);
    writeString(jsonExample,constructFileLocation(t.getName(),EXAMPLE,JSON,st));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    String jsonSchema=new JsonSchemaModelSerializer().serialize(schemaModel);
    spec.getCoreRaml().addGlobalSchema(firstLetterToLowerCase(t.getName()),jsonSchema,true,true);
    writeString(jsonSchema,constructFileLocation(t.getName(),SCHEMA,JSON,st));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * <p>afterSchemaGen.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param st 
 * @param gotXSD 
 */
protected void afterSchemaGen(ITypeModel t,StructureType st){
  JAXBRegistry rs=new JAXBRegistry();
  JAXBType jaxbModel=rs.getJAXBModel(t);
  if (jaxbModel == null) {
    return;
  }
  ISchemaType schemaModel=null;
  try {
    schemaModel=new SchemaModelBuilder(rs).buildSchemaModel(jaxbModel,st);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (schemaModel == null) {
    return;
  }
  try {
    if (st == null || st == StructureType.COMMON) {
      String xmlExample=new XMLModelSerializer().serialize(schemaModel);
      writeString(xmlExample,constructFileLocation(t.getName(),EXAMPLE,XML,st));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    String jsonExample=new JsonModelSerializer().serialize(schemaModel);
    writeString(jsonExample,constructFileLocation(t.getName(),EXAMPLE,JSON,st));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    String jsonSchema=new JsonSchemaModelSerializer().serialize(schemaModel);
    spec.getCoreRaml().addGlobalSchema(firstLetterToLowerCase(t.getName()),jsonSchema,true,true);
    writeString(jsonSchema,constructFileLocation(t.getName(),SCHEMA,JSON,st));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9992700729927008
20556,"/** 
 * <p>Constructor for JAXBAttributeProperty.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.IBasicModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 * @param name a {@link java.lang.String} object.
 */
public JAXBAttributeProperty(IMember model,JAXBRegistry r,String name){
  super(model,r,name);
}","/** 
 * <p>Constructor for JAXBAttributeProperty.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.IBasicModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 * @param name a {@link java.lang.String} object.
 */
public JAXBAttributeProperty(IMember model,JAXBRegistry r,String name){
  super(model,r,name);
  this.isAnyAttribute=model.hasAnnotation(XmlAnyAttribute.class.getSimpleName());
}",0.8985148514851485
20557,"/** 
 * <p>getJAXBType.</p>
 * @return a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBType} object.
 */
public List<JAXBType> getJAXBTypes(){
  if (this.originalType.hasAnnotation(XmlJavaTypeAdapter.class.getSimpleName())) {
    ArrayList<JAXBType> list=new ArrayList<JAXBType>();
    if (this.getStructureType() == StructureType.MAP) {
      list.add(registry.getJAXBModel(new ReflectionType(String.class)));
      list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    }
 else {
      list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    }
    return list;
  }
 else   if (this.originalType.hasAnnotation(XmlAnyAttribute.class.getSimpleName())) {
    ArrayList<JAXBType> list=new ArrayList<JAXBType>();
    list.add(registry.getJAXBModel(new ReflectionType(String.class)));
    list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    return list;
  }
 else   if (this.originalType.hasAnnotation(XmlAnyElement.class.getSimpleName())) {
    ArrayList<JAXBType> list=new ArrayList<JAXBType>();
    list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    return list;
  }
  return registry.getJAXBModels(((IMember)originalType).getJAXBTypes());
}","/** 
 * <p>getJAXBType.</p>
 * @return a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBType} object.
 */
public List<JAXBType> getJAXBTypes(){
  if (this.originalType.hasAnnotation(XmlJavaTypeAdapter.class.getSimpleName())) {
    ArrayList<JAXBType> list=new ArrayList<JAXBType>();
    if (this.getStructureType() == StructureType.MAP) {
      list.add(registry.getJAXBModel(new ReflectionType(String.class)));
      list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    }
 else {
      list.add(registry.getJAXBModel(new ReflectionType(Object.class)));
    }
    return list;
  }
  return registry.getJAXBModels(((IMember)originalType).getJAXBTypes());
}",0.7126805778491172
20558,"private JAXBProperty createProperty(String string,IMember m){
  boolean isElement=m.hasAnnotation(XmlElement.class.getSimpleName());
  boolean isAttribute=m.hasAnnotation(XmlAttribute.class.getSimpleName());
  boolean isValue=m.hasAnnotation(javax.xml.bind.annotation.XmlValue.class.getSimpleName());
  if (isElement) {
    return new JAXBElementProperty(m,registry,string);
  }
  if (isAttribute) {
    return new JAXBAttributeProperty(m,registry,string);
  }
  if (isValue) {
    return new JAXBAttributeProperty(m,registry,string);
  }
  return new JAXBElementProperty(m,registry,string);
}","private JAXBProperty createProperty(String string,IMember m){
  boolean isElement=m.hasAnnotation(XmlElement.class.getSimpleName());
  boolean isAttribute=m.hasAnnotation(XmlAttribute.class.getSimpleName()) || m.hasAnnotation(XmlAnyAttribute.class.getSimpleName());
  ;
  boolean isValue=m.hasAnnotation(javax.xml.bind.annotation.XmlValue.class.getSimpleName());
  if (isElement) {
    return new JAXBElementProperty(m,registry,string);
  }
  if (isAttribute) {
    return new JAXBAttributeProperty(m,registry,string);
  }
  if (isValue) {
    return new JAXBAttributeProperty(m,registry,string);
  }
  return new JAXBElementProperty(m,registry,string);
}",0.9503205128205128
20559,"private void writeProperty(TypeModelImpl typeModel,JAXBProperty p,HashMap<String,String> prefixes){
  String name=p.name();
  if (name == null || name.length() == 0) {
    return;
  }
  PropertyModelImpl prop=null;
  String namespace=p.namespace;
  StructureType st=p.getStructureType();
  if (p instanceof JAXBAttributeProperty) {
    prop=new PropertyModelImpl(name,getType(p),p.required,true,st,namespace);
  }
 else   if (p instanceof JAXBValueProperty) {
    prop=new PropertyModelImpl(name,getType(p),p.required,false,st,namespace);
  }
 else   if (p instanceof JAXBElementProperty) {
    JAXBElementProperty el=(JAXBElementProperty)p;
    List<JAXBType> jaxbTypes=p.isGeneric() ? null : el.getJAXBTypes();
    if (jaxbTypes != null && !jaxbTypes.isEmpty()) {
      if (st == StructureType.MAP) {
        ArrayList<ISchemaType> list=new ArrayList<ISchemaType>();
        for (        JAXBType t : jaxbTypes) {
          list.add(generateType(t,StructureType.COMMON));
        }
        prop=new MapPropertyImpl(name,list,p.required,false,StructureType.MAP,namespace);
      }
 else {
        ISchemaType propertyType=generateType(jaxbTypes.get(0),st);
        prop=new PropertyModelImpl(name,propertyType,p.required,false,st,namespace);
      }
    }
 else {
      prop=new PropertyModelImpl(name,getType(p),p.required,false,st,namespace);
    }
  }
  if (prop != null) {
    prop.setGeneric(p.isGeneric());
    typeModel.addProperty(prop);
  }
}","private void writeProperty(TypeModelImpl typeModel,JAXBProperty p,HashMap<String,String> prefixes){
  String name=p.name();
  if (name == null || name.length() == 0) {
    return;
  }
  PropertyModelImpl prop=null;
  String namespace=p.namespace;
  StructureType st=p.getStructureType();
  if (p instanceof JAXBAttributeProperty) {
    if (((JAXBAttributeProperty)p).isAnyAttribute()) {
      ISchemaType strType=generateType(registry.getJAXBModel(new ReflectionType(String.class)),StructureType.COMMON);
      List<ISchemaType> list=Arrays.asList(strType,strType);
      prop=new MapPropertyImpl(name,list,p.required,true,namespace);
    }
 else {
      prop=new PropertyModelImpl(name,getType(p),p.required,true,st,namespace);
    }
  }
 else   if (p instanceof JAXBValueProperty) {
    prop=new PropertyModelImpl(name,getType(p),p.required,false,st,namespace);
  }
 else   if (p instanceof JAXBElementProperty) {
    JAXBElementProperty el=(JAXBElementProperty)p;
    List<JAXBType> jaxbTypes=p.isGeneric() ? null : el.getJAXBTypes();
    if (jaxbTypes != null && !jaxbTypes.isEmpty()) {
      if (st == StructureType.MAP) {
        ArrayList<ISchemaType> list=new ArrayList<ISchemaType>();
        for (        JAXBType t : jaxbTypes) {
          list.add(generateType(t,StructureType.COMMON));
        }
        prop=new MapPropertyImpl(name,list,p.required,false,namespace);
      }
 else {
        ISchemaType propertyType=generateType(jaxbTypes.get(0),st);
        prop=new PropertyModelImpl(name,propertyType,p.required,false,st,namespace);
      }
    }
 else {
      prop=new PropertyModelImpl(name,getType(p),p.required,false,st,namespace);
    }
  }
  if (prop != null) {
    prop.setGeneric(p.isGeneric());
    typeModel.addProperty(prop);
  }
}",0.4484584241669262
20560,"public SchemaModelBuilder(){
  super();
}","public SchemaModelBuilder(JAXBRegistry registry){
  super();
  this.registry=registry;
}",0.6356589147286822
20561,"@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  ISchemaType propType=prop.getType();
  if (prop.isAttribute()) {
    this.element.setAttribute(type.getQualifiedPropertyName(prop),DefaultValueFactory.getDefaultValue(prop).toString());
    return;
  }
 else {
    if (prop.getStructureType() == StructureType.MAP) {
      ISchemaType keyType=SimpleType.STRING;
      ISchemaType valueType=new TypeModelImpl(""String_Node_Str"",""String_Node_Str"",null,StructureType.COMMON);
      if (prop instanceof IMapSchemaProperty) {
        IMapSchemaProperty msp=(IMapSchemaProperty)prop;
        keyType=msp.getKeyType();
        valueType=msp.getValueType();
      }
      String name=getPropertyName(type,prop);
      Element mapElement=document.createElement(name);
      if (this.element != null) {
        this.element.appendChild(mapElement);
      }
 else {
        this.document.appendChild(mapElement);
      }
      Element entryElement=this.document.createElement(""String_Node_Str"");
      mapElement.appendChild(entryElement);
      if (keyType != null && keyType.isSimple()) {
        Element keyElement=this.document.createElement(""String_Node_Str"");
        keyElement.setTextContent(DefaultValueFactory.getDefaultValue(keyType).toString());
        entryElement.appendChild(keyElement);
      }
 else {
        Node keyNode=new Node(""String_Node_Str"",this.document);
        String qName=keyType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(keyType,keyNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(keyNode.element);
      }
      if (valueType != null && valueType.isSimple()) {
        Element valueElement=this.document.createElement(""String_Node_Str"");
        valueElement.setTextContent(DefaultValueFactory.getDefaultValue(valueType).toString());
        entryElement.appendChild(valueElement);
      }
 else {
        Node valueNode=new Node(""String_Node_Str"",this.document);
        String qName=valueType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(valueType,valueNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(valueNode.element);
      }
    }
 else {
      Element childElement=((Node)childNode).element;
      if (propType != null && propType.isSimple() || prop.isGeneric()) {
        childElement.setTextContent(DefaultValueFactory.getDefaultValue(prop).toString());
      }
      this.element.appendChild(childElement);
      if (prop.getStructureType() == StructureType.COLLECTION) {
        this.element.appendChild(childElement.cloneNode(true));
      }
    }
  }
}","@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  ISchemaType propType=prop.getType();
  if (prop.isAttribute()) {
    String propName=type.getQualifiedPropertyName(prop);
    if (prop.getStructureType() == StructureType.MAP) {
      String defaultValue=DefaultValueFactory.DEFAULT_STRING_VALUE;
      this.element.setAttribute(propName + ""String_Node_Str"",defaultValue + ""String_Node_Str"");
      this.element.setAttribute(propName + ""String_Node_Str"",defaultValue + ""String_Node_Str"");
    }
 else {
      String defaultValue=DefaultValueFactory.getDefaultValue(prop).toString();
      this.element.setAttribute(propName,defaultValue);
    }
    return;
  }
 else {
    if (prop.getStructureType() == StructureType.MAP) {
      ISchemaType keyType=SimpleType.STRING;
      ISchemaType valueType=new TypeModelImpl(""String_Node_Str"",""String_Node_Str"",null,StructureType.COMMON);
      if (prop instanceof IMapSchemaProperty) {
        IMapSchemaProperty msp=(IMapSchemaProperty)prop;
        keyType=msp.getKeyType();
        valueType=msp.getValueType();
      }
      String name=getPropertyName(type,prop);
      Element mapElement=document.createElement(name);
      if (this.element != null) {
        this.element.appendChild(mapElement);
      }
 else {
        this.document.appendChild(mapElement);
      }
      Element entryElement=this.document.createElement(""String_Node_Str"");
      mapElement.appendChild(entryElement);
      if (keyType != null && keyType.isSimple()) {
        Element keyElement=this.document.createElement(""String_Node_Str"");
        keyElement.setTextContent(DefaultValueFactory.getDefaultValue(keyType).toString());
        entryElement.appendChild(keyElement);
      }
 else {
        Node keyNode=new Node(""String_Node_Str"",this.document);
        String qName=keyType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(keyType,keyNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(keyNode.element);
      }
      if (valueType != null && valueType.isSimple()) {
        Element valueElement=this.document.createElement(""String_Node_Str"");
        valueElement.setTextContent(DefaultValueFactory.getDefaultValue(valueType).toString());
        entryElement.appendChild(valueElement);
      }
 else {
        Node valueNode=new Node(""String_Node_Str"",this.document);
        String qName=valueType.getClassQualifiedName();
        if (!processedTypes.contains(qName)) {
          processedTypes.add(qName);
          XMLModelSerializer.this.process(valueType,valueNode,processedTypes);
          processedTypes.remove(qName);
        }
        entryElement.appendChild(valueNode.element);
      }
    }
 else {
      Element childElement=((Node)childNode).element;
      if (propType != null && propType.isSimple() || prop.isGeneric()) {
        childElement.setTextContent(DefaultValueFactory.getDefaultValue(prop).toString());
      }
      this.element.appendChild(childElement);
      if (prop.getStructureType() == StructureType.COLLECTION) {
        this.element.appendChild(childElement.cloneNode(true));
      }
    }
  }
}",0.9175523349436392
20562,"private void appendProperty(JSONObject item,ISchemaType type,ISchemaProperty prop,ISerializationNode childNode){
  Node n=(Node)childNode;
  ISchemaType propType=prop.getType();
  String propName=type.getQualifiedPropertyName(prop);
  try {
    if (prop.getStructureType() == StructureType.COLLECTION) {
      item.put(propName,n.array);
    }
 else     if (propType == null || propType.isComplex()) {
      item.put(propName,n.object);
    }
 else {
      if (prop.isAttribute()) {
        propName=""String_Node_Str"" + propName;
      }
      item.put(propName,DefaultValueFactory.getDefaultValue(prop));
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}","private void appendProperty(JSONObject item,ISchemaType type,ISchemaProperty prop,ISerializationNode childNode){
  Node n=(Node)childNode;
  ISchemaType propType=prop.getType();
  String propName=type.getQualifiedPropertyName(prop);
  try {
    if (prop.isAttribute()) {
      propName=""String_Node_Str"" + propName;
      Object defaultValue=DefaultValueFactory.DEFAULT_STRING_VALUE;
      if (prop.getStructureType() == StructureType.MAP) {
        item.put(propName + ""String_Node_Str"",defaultValue + ""String_Node_Str"");
        item.put(propName + ""String_Node_Str"",defaultValue + ""String_Node_Str"");
      }
 else {
        item.put(propName,defaultValue);
      }
    }
 else     if (prop.getStructureType() == StructureType.COLLECTION) {
      item.put(propName,n.array);
    }
 else     if (propType == null || propType.isComplex()) {
      item.put(propName,n.object);
    }
 else {
      Object defaultValue=DefaultValueFactory.getDefaultValue(prop);
      item.put(propName,defaultValue);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}",0.6506024096385542
20563,"@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  if (this.isGeneric) {
    return;
  }
  String propName=type.getQualifiedPropertyName(prop);
  if (prop.isAttribute()) {
    propName=""String_Node_Str"" + propName;
  }
  try {
    JSONObject childObject=((Node)childNode).object;
    StructureType st=prop.getStructureType();
    JSONObject actualObject=null;
    if (this.isRootArray) {
      JSONObject item=null;
      JSONArray items=null;
      try {
        items=this.object.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        this.object.put(ITEMS,items);
      }
      try {
        item=items.getJSONObject(0);
      }
 catch (      JSONException ex) {
        item=new JSONObject();
        items.put(item);
      }
      actualObject=item;
    }
 else     if (this.isRootMap) {
      JSONObject patternProperties=null;
      try {
        patternProperties=this.object.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        this.object.put(PATTERN_PROPERTIES,patternProperties);
      }
      JSONObject property=null;
      try {
        property=patternProperties.getJSONObject(DEFAULT_REGEXP);
      }
 catch (      JSONException ex) {
        property=new JSONObject();
        property.put(""String_Node_Str"",""String_Node_Str"");
        property.put(""String_Node_Str"",false);
        patternProperties.put(DEFAULT_REGEXP,property);
      }
      actualObject=property;
    }
 else {
      actualObject=this.object;
    }
    actualObject.put(""String_Node_Str"",""String_Node_Str"");
    JSONObject properties=null;
    try {
      properties=actualObject.getJSONObject(PROPERTIES);
    }
 catch (    JSONException ex) {
      properties=new JSONObject();
      actualObject.put(PROPERTIES,properties);
    }
    if (st == StructureType.COLLECTION) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONArray items=null;
      try {
        items=propObject.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        propObject.put(ITEMS,items);
      }
      items.put(childObject);
    }
 else     if (st == StructureType.MAP) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONObject patternProperties=null;
      try {
        patternProperties=propObject.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        propObject.put(PATTERN_PROPERTIES,patternProperties);
      }
      patternProperties.put(DEFAULT_REGEXP,childObject);
    }
 else {
      properties.put(propName,childObject);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}","@Override public void processProperty(ISchemaType type,ISchemaProperty prop,ISerializationNode childNode,Set<String> processedTypes){
  if (this.isGeneric) {
    return;
  }
  if (prop.isAttribute() && prop.getStructureType() == StructureType.MAP) {
    try {
      this.object.getJSONObject(PATTERN_PROPERTIES);
      return;
    }
 catch (    JSONException e) {
    }
    JSONObject patternProperties=new JSONObject();
    try {
      this.object.put(PATTERN_PROPERTIES,patternProperties);
      JSONObject property=new JSONObject();
      property.put(""String_Node_Str"",""String_Node_Str"");
      property.put(""String_Node_Str"",false);
      patternProperties.put(""String_Node_Str"" + DEFAULT_REGEXP,property);
    }
 catch (    JSONException e) {
    }
    return;
  }
  String propName=type.getQualifiedPropertyName(prop);
  if (prop.isAttribute()) {
    propName=""String_Node_Str"" + propName;
  }
  try {
    JSONObject childObject=((Node)childNode).object;
    StructureType st=prop.getStructureType();
    JSONObject actualObject=null;
    if (this.isRootArray) {
      JSONObject item=null;
      JSONArray items=null;
      try {
        items=this.object.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        this.object.put(ITEMS,items);
      }
      try {
        item=items.getJSONObject(0);
      }
 catch (      JSONException ex) {
        item=new JSONObject();
        items.put(item);
      }
      actualObject=item;
    }
 else     if (this.isRootMap) {
      JSONObject patternProperties=null;
      try {
        patternProperties=this.object.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        this.object.put(PATTERN_PROPERTIES,patternProperties);
      }
      JSONObject property=null;
      try {
        property=patternProperties.getJSONObject(DEFAULT_REGEXP);
      }
 catch (      JSONException ex) {
        property=new JSONObject();
        property.put(""String_Node_Str"",""String_Node_Str"");
        property.put(""String_Node_Str"",false);
        patternProperties.put(DEFAULT_REGEXP,property);
      }
      actualObject=property;
    }
 else {
      actualObject=this.object;
    }
    actualObject.put(""String_Node_Str"",""String_Node_Str"");
    JSONObject properties=null;
    try {
      properties=actualObject.getJSONObject(PROPERTIES);
    }
 catch (    JSONException ex) {
      properties=new JSONObject();
      actualObject.put(PROPERTIES,properties);
    }
    if (st == StructureType.COLLECTION) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONArray items=null;
      try {
        items=propObject.getJSONArray(ITEMS);
      }
 catch (      JSONException ex) {
        items=new JSONArray();
        propObject.put(ITEMS,items);
      }
      items.put(childObject);
    }
 else     if (st == StructureType.MAP) {
      JSONObject propObject;
      try {
        propObject=properties.getJSONObject(propName);
      }
 catch (      JSONException e) {
        propObject=new JSONObject();
        propObject.put(""String_Node_Str"",""String_Node_Str"");
        propObject.put(""String_Node_Str"",false);
        properties.put(propName,propObject);
      }
      JSONObject patternProperties=null;
      try {
        patternProperties=propObject.getJSONObject(PATTERN_PROPERTIES);
      }
 catch (      JSONException ex) {
        patternProperties=new JSONObject();
        propObject.put(PATTERN_PROPERTIES,patternProperties);
      }
      patternProperties.put(DEFAULT_REGEXP,childObject);
    }
 else {
      properties.put(propName,childObject);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
}",0.2043083593009077
20564,"public MapPropertyImpl(String name,List<ISchemaType> types,boolean required,boolean isAttribute,StructureType structureType,String namespace){
  super(name,null,required,isAttribute,structureType,namespace);
  if (types != null) {
    if (types.size() > 0) {
      this.keyType=types.get(0);
    }
    if (types.size() > 1) {
      this.valueType=types.get(1);
    }
  }
}","public MapPropertyImpl(String name,List<ISchemaType> types,boolean required,boolean isAttribute,String namespace){
  super(name,null,required,isAttribute,StructureType.MAP,namespace);
  if (types != null) {
    if (types.size() > 0) {
      this.keyType=types.get(0);
    }
    if (types.size() > 1) {
      this.valueType=types.get(1);
    }
  }
}",0.7972222222222223
20565,"protected IType resolveType(IType ownerType,String typeName) throws JavaModelException {
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    return null;
  }
  if (!typeName.endsWith(""String_Node_Str"")) {
    int ind=typeName.indexOf(""String_Node_Str"");
    if (ind >= 0) {
      typeName=""String_Node_Str"" + typeName.substring(0,ind);
    }
    IType type=ownerType.getJavaProject().findType(typeName);
    if (type == null) {
      String[][] resolveType=ownerType.resolveType(typeName);
      if (resolveType == null) {
        throw new GenerationException(""String_Node_Str"" + typeName + ""String_Node_Str"",""String_Node_Str"" + typeName + ""String_Node_Str"");
      }
      if (resolveType.length == 1) {
        type=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
      }
    }
    return type;
  }
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    typeName=Signature.getTypeErasure(typeName);
    typeName=typeName.substring(1,typeName.length() - 1);
    IType type=ownerType.getJavaProject().findType(typeName);
    return type;
  }
  String tn;
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    tn=Signature.getTypeErasure(typeName);
  }
 else {
    tn=typeName;
  }
  tn=tn.substring(1,tn.length() - 1);
  String[][] resolveType=ownerType.resolveType(tn);
  if (resolveType == null) {
    throw new GenerationException(""String_Node_Str"" + typeName + ""String_Node_Str"",""String_Node_Str"" + typeName + ""String_Node_Str"");
  }
  IType findType=null;
  if (resolveType.length == 1) {
    findType=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
  }
  return findType;
}","protected IType resolveType(IType ownerType,String typeName) throws JavaModelException {
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    return null;
  }
  if (!typeName.endsWith(""String_Node_Str"")) {
    typeName=Signature.getTypeErasure(typeName);
    IType type=ownerType.getJavaProject().findType(typeName);
    if (type == null) {
      String[][] resolveType=ownerType.resolveType(typeName);
      if (resolveType == null) {
        throw new GenerationException(""String_Node_Str"" + typeName + ""String_Node_Str"",""String_Node_Str"" + typeName + ""String_Node_Str"");
      }
      if (resolveType.length == 1) {
        type=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
      }
    }
    return type;
  }
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    typeName=Signature.getTypeErasure(typeName);
    typeName=typeName.substring(1,typeName.length() - 1);
    IType type=ownerType.getJavaProject().findType(typeName);
    return type;
  }
  String tn;
  if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
    tn=Signature.getTypeErasure(typeName);
  }
 else {
    tn=typeName;
  }
  tn=tn.substring(1,tn.length() - 1);
  String[][] resolveType=ownerType.resolveType(tn);
  if (resolveType == null) {
    throw new GenerationException(""String_Node_Str"" + typeName + ""String_Node_Str"",""String_Node_Str"" + typeName + ""String_Node_Str"");
  }
  IType findType=null;
  if (resolveType.length == 1) {
    findType=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
  }
  return findType;
}",0.949389179755672
20566,"private void save(String raml,IFile file) throws CoreException, UnsupportedEncodingException {
  if (!file.exists()) {
    file.create(new ByteArrayInputStream(raml.getBytes(""String_Node_Str"")),true,new NullProgressMonitor());
  }
 else {
    file.setContents(new ByteArrayInputStream(raml.getBytes(""String_Node_Str"")),0,new NullProgressMonitor());
  }
}","private void save(String raml,IFile file) throws CoreException, UnsupportedEncodingException {
  if (!file.exists()) {
    createFolder(file.getParent());
    file.create(new ByteArrayInputStream(raml.getBytes(""String_Node_Str"")),true,new NullProgressMonitor());
  }
 else {
    file.setContents(new ByteArrayInputStream(raml.getBytes(""String_Node_Str"")),0,new NullProgressMonitor());
  }
}",0.9516129032258064
20567,"private IFile getNewRAMLFile(IProject project){
  container=project;
  InputDialog inputDialog=new RAMLConfigurationDialog(shell,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  int open=inputDialog.open();
  if (open == Dialog.OK) {
    return container.getFile(new Path(inputDialog.getValue()));
  }
  return null;
}","private IFile getNewRAMLFile(IProject project){
  container=project.getFolder(new Path(""String_Node_Str""));
  InputDialog inputDialog=new RAMLConfigurationDialog(shell,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  int open=inputDialog.open();
  if (open == Dialog.OK) {
    return container.getFile(new Path(inputDialog.getValue()));
  }
  return null;
}",0.9445234708392604
20568,"private void fillJAXBType(BasicModel fm,CtTypeReference<?> type){
  if (type == null) {
    return;
  }
  Class<?> actualClass=type.getActualClass();
  fm.setJavaClass(actualClass);
  if (actualClass != null && Collection.class.isAssignableFrom(actualClass)) {
    List<CtTypeReference<?>> actualTypeArguments=type.getActualTypeArguments();
    if (actualTypeArguments.size() == 1) {
      CtTypeReference<?> ctTypeReference=actualTypeArguments.get(0);
      ITypeModel processTypeReference=processTypeReference(ctTypeReference);
      fm.setJaxbType(processTypeReference);
    }
  }
}","private void fillJAXBType(BasicModel fm,CtTypeReference<?> type){
  if (type == null) {
    return;
  }
  CtTypeReference<?> actualType=type;
  Class<?> actualClass=type.getActualClass();
  fm.setJavaClass(actualClass);
  if (actualClass != null && Collection.class.isAssignableFrom(actualClass)) {
    List<CtTypeReference<?>> actualTypeArguments=type.getActualTypeArguments();
    if (actualTypeArguments.size() == 1) {
      actualType=actualTypeArguments.get(0);
    }
  }
  ITypeModel processTypeReference=processTypeReference(actualType);
  fm.setJaxbType(processTypeReference);
}",0.7805294619982921
20569,"private IAnnotationModel processAnnotation(CtAnnotation<? extends Annotation> annotation){
  String simpleName=annotation.getActualAnnotation().annotationType().getSimpleName();
  AnnotationModel annotationModel=new AnnotationModel();
  annotationModel.setName(simpleName);
  Map<String,Object> elementValues=annotation.getElementValues();
  for (  Map.Entry<String,Object> entry : elementValues.entrySet()) {
    String key=entry.getKey();
    if (key == null) {
      continue;
    }
    Object value=entry.getValue();
    ArrayList<CtAnnotation<?>> annotationList=toCtAnnotationList(value);
    if (annotationList != null) {
      int size=annotationList.size();
      IAnnotationModel[] annotationModels=new IAnnotationModel[size];
      for (int i=0; i < size; i++) {
        CtAnnotation<?> subAnnotation=annotationList.get(i);
        IAnnotationModel subAnnotationModel=processAnnotation(subAnnotation);
        annotationModels[i]=subAnnotationModel;
      }
      annotationModel.addValue(key,annotationModels);
    }
 else     if (value instanceof String[]) {
      annotationModel.addValue(key,value);
    }
 else {
      if (value instanceof CtNewArray<?>) {
        List<?> elements=((CtNewArray<?>)value).getElements();
        int size=elements.size();
        Object[] arr=new Object[size];
        for (int i=0; i < size; i++) {
          Object elem=elements.get(i);
          if (elem instanceof CtCodeElement) {
            PartialEvaluator eval=factory.Eval().createPartialEvaluator();
            arr[i]=eval.evaluate(null,(CtCodeElement)elem);
          }
 else {
            arr[i]=elem;
          }
        }
        value=arr;
      }
      if (value instanceof CtCodeElement) {
        PartialEvaluator eval=factory.Eval().createPartialEvaluator();
        value=eval.evaluate(null,(CtCodeElement)value);
      }
      if (value instanceof CtLiteral<?>) {
        value=((CtLiteral<?>)value).getValue().toString();
      }
 else       if (value instanceof CtFieldReference<?>) {
        Member member=((CtFieldReference<?>)value).getActualField();
        if (member instanceof Field) {
          Field field=(Field)member;
          int mod=field.getModifiers();
          if (Modifier.isStatic(mod) && Modifier.isFinal(mod) && field.getType().equals(String.class)) {
            try {
              value=field.get(null);
            }
 catch (            Throwable t) {
              value=member.getName();
            }
          }
 else {
            value=member.getName();
          }
        }
      }
 else       if (value.getClass().isArray()) {
        int length=Array.getLength(value);
        String[] arr=new String[length];
        for (int i=0; i < length; i++) {
          Object elem=Array.get(value,i);
          String sVal=elem.toString();
          if (elem instanceof CtLiteral<?>) {
            sVal=((CtLiteral<?>)elem).getValue().toString();
          }
 else           if (elem instanceof CtFieldReference<?>) {
            sVal=((CtFieldReference<?>)elem).getActualField().getName();
          }
          arr[i]=sVal;
        }
        value=arr;
      }
 else {
        value=value.toString();
      }
      if (value == null) {
        value=""String_Node_Str"";
      }
      annotationModel.addValue(key,value);
    }
  }
  return annotationModel;
}","private IAnnotationModel processAnnotation(CtAnnotation<? extends Annotation> annotation){
  String simpleName=annotation.getActualAnnotation().annotationType().getSimpleName();
  AnnotationModel annotationModel=new AnnotationModel();
  annotationModel.setName(simpleName);
  Map<String,Object> elementValues=annotation.getElementValues();
  for (  Map.Entry<String,Object> entry : elementValues.entrySet()) {
    String key=entry.getKey();
    if (key == null) {
      continue;
    }
    Object value=entry.getValue();
    ArrayList<CtAnnotation<?>> annotationList=toCtAnnotationList(value);
    if (annotationList != null) {
      int size=annotationList.size();
      IAnnotationModel[] annotationModels=new IAnnotationModel[size];
      for (int i=0; i < size; i++) {
        CtAnnotation<?> subAnnotation=annotationList.get(i);
        IAnnotationModel subAnnotationModel=processAnnotation(subAnnotation);
        annotationModels[i]=subAnnotationModel;
      }
      annotationModel.addValue(key,annotationModels);
    }
 else     if (value instanceof String[]) {
      annotationModel.addValue(key,value);
    }
 else {
      if (value instanceof CtNewArray<?>) {
        List<?> elements=((CtNewArray<?>)value).getElements();
        int size=elements.size();
        Object[] arr=new Object[size];
        for (int i=0; i < size; i++) {
          Object elem=elements.get(i);
          if (elem instanceof CtCodeElement) {
            PartialEvaluator eval=factory.Eval().createPartialEvaluator();
            arr[i]=eval.evaluate(null,(CtCodeElement)elem);
          }
 else {
            arr[i]=elem;
          }
        }
        value=arr;
      }
      if (value instanceof CtCodeElement) {
        PartialEvaluator eval=factory.Eval().createPartialEvaluator();
        value=eval.evaluate(null,(CtCodeElement)value);
      }
      if (value instanceof CtLiteral<?>) {
        value=((CtLiteral<?>)value).getValue().toString();
      }
 else       if (value instanceof CtFieldReference<?>) {
        Member member=((CtFieldReference<?>)value).getActualField();
        if (member instanceof Field) {
          Field field=(Field)member;
          int mod=field.getModifiers();
          if (Modifier.isStatic(mod) && Modifier.isFinal(mod)) {
            field.setAccessible(true);
            try {
              value=field.get(null).toString();
            }
 catch (            Throwable t) {
              value=member.getName();
            }
          }
 else {
            value=member.getName();
          }
        }
      }
 else       if (value.getClass().isArray()) {
        int length=Array.getLength(value);
        String[] arr=new String[length];
        for (int i=0; i < length; i++) {
          Object elem=Array.get(value,i);
          String sVal=elem.toString();
          if (elem instanceof CtLiteral<?>) {
            sVal=((CtLiteral<?>)elem).getValue().toString();
          }
 else           if (elem instanceof CtFieldReference<?>) {
            sVal=((CtFieldReference<?>)elem).getActualField().getName();
          }
          arr[i]=sVal;
        }
        value=arr;
      }
 else {
        value=value.toString();
      }
      if (value == null) {
        value=""String_Node_Str"";
      }
      annotationModel.addValue(key,value);
    }
  }
  return annotationModel;
}",0.9716440422322776
20570,"/** 
 * {@inheritDoc} 
 */
@Override public ITypeModel getJAXBType(){
  return null;
}","/** 
 * {@inheritDoc} 
 */
@Override public ITypeModel getJAXBType(){
  Class<?> type=null;
  if (Utils.isCollection(element.getReturnType())) {
    Type gType=element.getGenericReturnType();
    if (gType instanceof ParameterizedType) {
      Type[] args=((ParameterizedType)gType).getActualTypeArguments();
      if (args != null && args.length != 0) {
        type=(Class<?>)args[0];
      }
    }
  }
 else {
    type=element.getReturnType();
  }
  if (type == null) {
    return null;
  }
  ITypeModel model=new ReflectionType(type);
  if (Utils.isJAXBType(model)) {
    return model;
  }
  return null;
}",0.2068965517241379
20571,"/** 
 * {@inheritDoc} 
 */
@Override protected void generateXMLSchema(ITypeModel t){
  super.generateXMLSchema(t);
}","/** 
 * {@inheritDoc} 
 */
@Override protected void generateXMLSchema(ITypeModel t,String collectionTag){
  super.generateXMLSchema(t,collectionTag);
}",0.8689138576779026
20572,"private IMethodModel processMethod(CtMethod<?> m){
  MethodModel methodModel=new MethodModel();
  fillBasic(methodModel,m);
  CtTypeReference<?> returnedType=m.getType();
  ITypeModel returnedTypeModel=processTypeReference(returnedType);
  methodModel.setReturnedType(returnedTypeModel);
  List<CtParameter<?>> parameters=m.getParameters();
  for (  CtParameter<?> p : parameters) {
    IParameterModel parameterModel=processParameter(p);
    methodModel.addParameter(parameterModel);
  }
  return methodModel;
}","private IMethodModel processMethod(CtMethod<?> m){
  MethodModel methodModel=new MethodModel();
  fillBasic(methodModel,m);
  CtTypeReference<?> returnedType=m.getType();
  ITypeModel returnedTypeModel=processTypeReference(returnedType);
  methodModel.setReturnedType(returnedTypeModel);
  fillJAXBType(methodModel,returnedType);
  List<CtParameter<?>> parameters=m.getParameters();
  for (  CtParameter<?> p : parameters) {
    IParameterModel parameterModel=processParameter(p);
    methodModel.addParameter(parameterModel);
  }
  return methodModel;
}",0.9606003752345216
20573,"@Override protected void generateXMLSchema(ITypeModel t){
  super.generateXMLSchema(t);
  String generateXMLExampleJAXB=generateXMLExampleJAXB(t);
  if (generateXMLExampleJAXB != null) {
    File file=outputFile;
    File parentDir=file.getParentFile();
    File examplesDir=new File(parentDir,""String_Node_Str"");
    if (!examplesDir.exists()) {
      examplesDir.mkdir();
    }
    writeString(generateXMLExampleJAXB,new File(examplesDir,t.getName() + ""String_Node_Str""));
    String jsonText=getProperJSONExampleFromXML(generateXMLExampleJAXB);
    writeString(jsonText,new File(examplesDir,t.getName() + ""String_Node_Str""));
  }
}","@Override protected void generateXMLSchema(ITypeModel t,String collectionTag){
  super.generateXMLSchema(t,collectionTag);
  String generateXMLExampleJAXB=generateXMLExampleJAXB(t);
  if (generateXMLExampleJAXB != null) {
    File file=outputFile;
    File parentDir=file.getParentFile();
    File examplesDir=new File(parentDir,""String_Node_Str"");
    if (!examplesDir.exists()) {
      examplesDir.mkdir();
    }
    writeString(generateXMLExampleJAXB,new File(examplesDir,t.getName() + ""String_Node_Str""));
    String jsonText=getProperJSONExampleFromXML(generateXMLExampleJAXB);
    writeString(jsonText,new File(examplesDir,t.getName() + ""String_Node_Str""));
  }
}",0.973138910207214
20574,"private void processResponses(IMethodModel m,Action action,IDocInfo documentation,String returnName){
  HashMap<String,ResponseModel> responses=new HashMap<String,ResponseModel>();
  String mainResponseCode=DEFAULT_RESPONSE;
  if (config != null) {
    ActionType actionType=action.getType();
    mainResponseCode=config.getResponseCode(actionType);
  }
  ResponseModel mainResponse=new ResponseModel(mainResponseCode,null,returnName);
  responses.put(mainResponseCode,mainResponse);
  IAnnotationModel apiResponse=m.getAnnotation(ResourceVisitor.API_RESPONSE);
  if (apiResponse != null) {
    String code=apiResponse.getValue(ResourceVisitor.CODE);
    String message=apiResponse.getValue(ResourceVisitor.MESSAGE);
    ResponseModel response=new ResponseModel(code,message,returnName);
    responses.put(code,response);
  }
  IAnnotationModel apiResponses=m.getAnnotation(ResourceVisitor.API_RESPONSES);
  if (apiResponses != null) {
    IAnnotationModel[] subAnnotations=apiResponses.getSubAnnotations(""String_Node_Str"");
    if (subAnnotations != null) {
      for (      IAnnotationModel subAnn : subAnnotations) {
        String code=subAnn.getValue(ResourceVisitor.CODE);
        String message=subAnn.getValue(ResourceVisitor.MESSAGE);
        String adjustedReturnName=returnName;
        String responseQualifiedName=subAnn.getValue(RESPONSE);
        if (responseQualifiedName != null) {
          try {
            Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
            ReflectionType rt=new ReflectionType(responseClass);
            generateXMLSchema(rt);
          }
 catch (          ClassNotFoundException e) {
            e.printStackTrace();
          }
          adjustedReturnName=getSimpleName(responseQualifiedName).toLowerCase();
        }
        ResponseModel response=responses.get(code);
        if (response == null) {
          response=new ResponseModel(code,message,adjustedReturnName);
          responses.put(code,response);
        }
 else {
          response.setMessage(message);
          response.setReturnTypeName(adjustedReturnName);
        }
      }
    }
  }
  boolean returnsValue=!m.getReturnedType().getName().toLowerCase().equals(""String_Node_Str"");
  String[] producesValues=extractMediaTypes(m,PRODUCES,classProduces,returnsValue,null);
  if (producesValues != null) {
    for (    ResponseModel responseModel : responses.values()) {
      responseModel.setProduces(producesValues);
    }
  }
  IAnnotationModel apiOperation=m.getAnnotation(API_OPERATION);
  if (apiOperation != null) {
    String responseQualifiedName=apiOperation.getValue(RESPONSE);
    if (responseQualifiedName != null) {
      try {
        Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
        ReflectionType rt=new ReflectionType(responseClass);
        generateXMLSchema(rt);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
      String adjustedReturnType=getSimpleName(responseQualifiedName).toLowerCase();
      mainResponse.setReturnTypeName(adjustedReturnType);
    }
  }
  for (  ResponseModel rm : responses.values()) {
    Response response=new Response();
    String description=rm.getMessage();
    if (description == null || description.trim().isEmpty()) {
      description=documentation.getReturnInfo();
    }
    if (description != null && !description.trim().isEmpty()) {
      response.setDescription(description);
    }
    String[] produces=rm.getProduces();
    if (produces != null) {
      String returnTypeName=rm.getReturnTypeName();
      for (      String mediaType : producesValues) {
        mediaType=sanitizeMediaType(mediaType);
        MimeType mimeType=new MimeType();
        if (returnTypeName != null) {
          if (mediaType.contains(XML)) {
            mimeType.setSchema(returnTypeName);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
          }
          if (mediaType.contains(JSON)) {
            mimeType.setSchema(returnTypeName + ResourceVisitor.JSONSCHEMA);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
          }
        }
        mimeType.setType(mediaType);
        response.getBody().put(mediaType,mimeType);
      }
    }
    String code=rm.getCode();
    action.getResponses().put(code,response);
  }
}","private void processResponses(IMethodModel m,Action action,IDocInfo documentation,String returnName){
  HashMap<String,ResponseModel> responses=new HashMap<String,ResponseModel>();
  String mainResponseCode=DEFAULT_RESPONSE;
  if (config != null) {
    ActionType actionType=action.getType();
    mainResponseCode=config.getResponseCode(actionType);
  }
  ResponseModel mainResponse=new ResponseModel(mainResponseCode,null,returnName);
  responses.put(mainResponseCode,mainResponse);
  IAnnotationModel apiResponse=m.getAnnotation(ResourceVisitor.API_RESPONSE);
  if (apiResponse != null) {
    String code=apiResponse.getValue(ResourceVisitor.CODE);
    String message=apiResponse.getValue(ResourceVisitor.MESSAGE);
    ResponseModel response=new ResponseModel(code,message,returnName);
    responses.put(code,response);
  }
  IAnnotationModel apiResponses=m.getAnnotation(ResourceVisitor.API_RESPONSES);
  if (apiResponses != null) {
    IAnnotationModel[] subAnnotations=apiResponses.getSubAnnotations(""String_Node_Str"");
    if (subAnnotations != null) {
      for (      IAnnotationModel subAnn : subAnnotations) {
        String code=subAnn.getValue(ResourceVisitor.CODE);
        String message=subAnn.getValue(ResourceVisitor.MESSAGE);
        String adjustedReturnName=returnName;
        String responseQualifiedName=subAnn.getValue(RESPONSE);
        if (responseQualifiedName != null) {
          try {
            Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
            ReflectionType rt=new ReflectionType(responseClass);
            generateXMLSchema(rt,null);
          }
 catch (          ClassNotFoundException e) {
            e.printStackTrace();
          }
          adjustedReturnName=getSimpleName(responseQualifiedName).toLowerCase();
        }
        ResponseModel response=responses.get(code);
        if (response == null) {
          response=new ResponseModel(code,message,adjustedReturnName);
          responses.put(code,response);
        }
 else {
          response.setMessage(message);
          response.setReturnTypeName(adjustedReturnName);
        }
      }
    }
  }
  boolean returnsValue=!m.getReturnedType().getName().toLowerCase().equals(""String_Node_Str"");
  String[] producesValues=extractMediaTypes(m,PRODUCES,classProduces,returnsValue,null);
  if (producesValues != null) {
    for (    ResponseModel responseModel : responses.values()) {
      responseModel.setProduces(producesValues);
    }
  }
  IAnnotationModel apiOperation=m.getAnnotation(API_OPERATION);
  if (apiOperation != null) {
    String responseContainer=apiOperation.getValue(""String_Node_Str"");
    String responseQualifiedName=apiOperation.getValue(RESPONSE);
    if (responseQualifiedName != null) {
      try {
        Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
        ReflectionType rt=new ReflectionType(responseClass);
        generateXMLSchema(rt,responseContainer);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
      String adjustedReturnType=getSimpleName(responseQualifiedName).toLowerCase();
      mainResponse.setReturnTypeName(adjustedReturnType);
    }
  }
  for (  ResponseModel rm : responses.values()) {
    Response response=new Response();
    String description=rm.getMessage();
    if (description == null || description.trim().isEmpty()) {
      description=documentation.getReturnInfo();
    }
    if (description != null && !description.trim().isEmpty()) {
      response.setDescription(description);
    }
    String[] produces=rm.getProduces();
    if (produces != null) {
      String returnTypeName=rm.getReturnTypeName();
      for (      String mediaType : producesValues) {
        mediaType=sanitizeMediaType(mediaType);
        MimeType mimeType=new MimeType();
        if (returnTypeName != null) {
          if (mediaType.contains(XML)) {
            mimeType.setSchema(returnTypeName);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
          }
          if (mediaType.contains(JSON)) {
            mimeType.setSchema(returnTypeName + ResourceVisitor.JSONSCHEMA);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
          }
        }
        mimeType.setType(mediaType);
        response.getBody().put(mediaType,mimeType);
      }
    }
    String code=rm.getCode();
    action.getResponses().put(code,response);
  }
}",0.9897177860424414
20575,"/** 
 * <p>generateXMLSchema.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 */
protected void generateXMLSchema(ITypeModel t){
}","/** 
 * <p>generateXMLSchema.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 */
protected void generateXMLSchema(ITypeModel t,String collectionTag){
}",0.9415041782729804
20576,"private void visit(IMethodModel m,String path){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String localPath=m.getAnnotationValue(PATH);
    if (path.endsWith(""String_Node_Str"")) {
      if (localPath.startsWith(""String_Node_Str"")) {
        localPath=localPath.substring(1);
      }
    }
    path+=localPath;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=getDocumentation(m);
    String returnName=null;
    String parameterName=null;
    ITypeModel returnedType=m.getReturnedType();
    if (returnedType != null) {
      if (returnedType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(returnedType);
        returnName=returnedType.getName().toLowerCase();
      }
      if (hasPath) {
        if (consumedTypes.add(returnedType)) {
          ResourceVisitor resourceVisitor=createResourceVisitor();
          resourceVisitor.consumedTypes.addAll(this.consumedTypes);
          resourceVisitor.basePath=path;
          resourceVisitor.spec=this.spec;
          resourceVisitor.visit(returnedType);
        }
      }
    }
    ITypeModel bodyType=m.getBodyType();
    if (bodyType != null) {
      if (bodyType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(bodyType);
        parameterName=bodyType.getName().toLowerCase();
      }
    }
    if (path.endsWith(""String_Node_Str"")) {
      res.setRelativeUri(path.substring(0,path.length() - 1));
    }
 else {
      res.setRelativeUri(path);
    }
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation,returnName,parameterName);
      }
    }
    spec.addResource(res);
  }
}","private void visit(IMethodModel m,String path){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String localPath=m.getAnnotationValue(PATH);
    if (path.endsWith(""String_Node_Str"")) {
      if (localPath.startsWith(""String_Node_Str"")) {
        localPath=localPath.substring(1);
      }
    }
    path+=localPath;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=getDocumentation(m);
    String returnName=null;
    String parameterName=null;
    ITypeModel returnedType=m.getReturnedType();
    if (returnedType != null) {
      if (returnedType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(returnedType,null);
        returnName=returnedType.getName().toLowerCase();
      }
      if (hasPath) {
        if (consumedTypes.add(returnedType)) {
          ResourceVisitor resourceVisitor=createResourceVisitor();
          resourceVisitor.consumedTypes.addAll(this.consumedTypes);
          resourceVisitor.basePath=path;
          resourceVisitor.spec=this.spec;
          resourceVisitor.visit(returnedType);
        }
      }
    }
    ITypeModel bodyType=m.getBodyType();
    if (bodyType != null) {
      if (bodyType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(bodyType,null);
        parameterName=bodyType.getName().toLowerCase();
      }
    }
    if (path.endsWith(""String_Node_Str"")) {
      res.setRelativeUri(path.substring(0,path.length() - 1));
    }
 else {
      res.setRelativeUri(path);
    }
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation,returnName,parameterName);
      }
    }
    spec.addResource(res);
  }
}",0.9973432518597236
20577,"/** 
 * {@inheritDoc} 
 */
@Override public ITypeModel getJAXBType(){
  ITypeModel type=getType();
  if (ResourceVisitor.isJAXBType(type)) {
    return type;
  }
  return null;
}","/** 
 * {@inheritDoc} 
 */
@Override public ITypeModel getJAXBType(){
  Class<?> type=null;
  if (Utils.isCollection(element.getType())) {
    Type gType=element.getGenericType();
    if (gType instanceof ParameterizedType) {
      Type[] args=((ParameterizedType)gType).getActualTypeArguments();
      if (args != null && args.length != 0) {
        type=(Class<?>)args[0];
      }
    }
  }
 else {
    type=element.getType();
  }
  if (type == null) {
    return null;
  }
  ITypeModel model=new ReflectionType(type);
  if (Utils.isJAXBType(model)) {
    return model;
  }
  return null;
}",0.2519480519480519
20578,"/** 
 * {@inheritDoc} 
 */
protected void generateXMLSchema(ITypeModel t){
  if (t instanceof ReflectionType) {
    Class<?> element=((ReflectionType)t).getElement();
    generateXSDForClass(element);
  }
 else   if (t.getFullyQualifiedName() != null && classLoader != null) {
    try {
      Class<?> element=classLoader.loadClass(t.getFullyQualifiedName());
      generateXSDForClass(element);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  afterSchemaGen(t);
}","/** 
 * {@inheritDoc} 
 */
protected void generateXMLSchema(ITypeModel t,String collectionTag){
  if (t instanceof ReflectionType) {
    Class<?> element=((ReflectionType)t).getElement();
    generateXSDForClass(element);
  }
 else   if (t.getFullyQualifiedName() != null && classLoader != null) {
    try {
      Class<?> element=classLoader.loadClass(t.getFullyQualifiedName());
      generateXSDForClass(element);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  afterSchemaGen(t,collectionTag);
}",0.9662487945998072
20579,"/** 
 * <p>afterSchemaGen.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 */
protected void afterSchemaGen(ITypeModel t){
  String generateXMLExampleJAXB=generateXMLExampleJAXB(t);
  if (generateXMLExampleJAXB != null) {
    File file=outputFile;
    File parentDir=file.getParentFile();
    File examplesDir=new File(parentDir,""String_Node_Str"");
    File schemaFile=new File(parentDir,""String_Node_Str"");
    if (!examplesDir.exists()) {
      examplesDir.mkdir();
    }
    writeString(generateXMLExampleJAXB,new File(examplesDir,t.getName() + ""String_Node_Str""));
    String jsonText=getProperJSONExampleFromXML(generateXMLExampleJAXB);
    writeString(jsonText,new File(examplesDir,t.getName().toLowerCase() + ""String_Node_Str""));
    String generatedSchema=jsonText != null ? new SchemaGenerator().generateSchema(jsonText) : null;
    generatedSchema=generatedSchema != null ? JsonFormatter.format(generatedSchema) : null;
    if (generatedSchema != null) {
      String schemaName=t.getName().toLowerCase() + ""String_Node_Str"";
      spec.getCoreRaml().addGlobalSchema(schemaName,generatedSchema,true,false);
      writeString(generatedSchema,new File(schemaFile,schemaName + ""String_Node_Str""));
    }
  }
}","/** 
 * <p>afterSchemaGen.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param collectionTag 
 */
protected void afterSchemaGen(ITypeModel t,String collectionTag){
  String generateXMLExampleJAXB=generateXMLExampleJAXB(t);
  if (generateXMLExampleJAXB != null) {
    File file=outputFile;
    File parentDir=file.getParentFile();
    File examplesDir=new File(parentDir,""String_Node_Str"");
    File schemaFile=new File(parentDir,""String_Node_Str"");
    if (!examplesDir.exists()) {
      examplesDir.mkdir();
    }
    writeString(generateXMLExampleJAXB,new File(examplesDir,t.getName() + ""String_Node_Str""));
    String jsonText=getProperJSONExampleFromXML(generateXMLExampleJAXB);
    writeString(jsonText,new File(examplesDir,t.getName().toLowerCase() + ""String_Node_Str""));
    String generatedSchema=jsonText != null ? new SchemaGenerator().generateSchema(jsonText) : null;
    generatedSchema=generatedSchema != null ? JsonFormatter.format(generatedSchema) : null;
    if (generatedSchema != null) {
      String schemaName=t.getName().toLowerCase() + ""String_Node_Str"";
      spec.getCoreRaml().addGlobalSchema(schemaName,generatedSchema,true,false);
      writeString(generatedSchema,new File(schemaFile,schemaName + ""String_Node_Str""));
    }
  }
}",0.9820031298904538
20580,"/** 
 * <p>generateXSDForClass.</p>
 * @param element a {@link java.lang.Class} object.
 */
protected void generateXSDForClass(Class<?> element){
  try {
    String name=element.getSimpleName().toLowerCase();
    String fileName=name + ""String_Node_Str"";
    JAXBContext jaxbContext=JAXBContext.newInstance(element);
    CustomSchemaOutputResolver sor=new CustomSchemaOutputResolver(fileName);
    jaxbContext.generateSchema(sor);
    File file=sor.getFile();
    String content=FileUtil.fileToString(file);
    generateExamle(file,content);
    spec.getCoreRaml().addGlobalSchema(name,content,false,false);
  }
 catch (  JAXBException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * <p>generateXSDForClass.</p>
 * @param element a {@link java.lang.Class} object.
 */
protected void generateXSDForClass(Class<?> element){
  try {
    String name=element.getSimpleName().toLowerCase();
    String fileName=name + ""String_Node_Str"";
    JAXBContext jaxbContext=JAXBContext.newInstance(element);
    CustomSchemaOutputResolver sor=new CustomSchemaOutputResolver(fileName);
    jaxbContext.generateSchema(sor);
    File file=sor.getFile();
    if (file != null) {
      String content=FileUtil.fileToString(file);
      generateExamle(file,content);
      spec.getCoreRaml().addGlobalSchema(name,content,false,false);
    }
  }
 catch (  JAXBException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9758064516129032
20581,"/** 
 * {@inheritDoc} 
 */
protected void generateXMLSchema(ITypeModel t,String collectionTag){
  APTType type=(APTType)t;
  TypeElement element=(TypeElement)type.element();
  Class<?> clazz;
  try {
    clazz=Class.forName(processingEnv.getElementUtils().getBinaryName(element).toString());
    generateXSDForClass(clazz);
    afterSchemaGen(type,collectionTag);
    return;
  }
 catch (  ClassNotFoundException e1) {
  }
  if (classLoader != null) {
    try {
      clazz=classLoader.loadClass(processingEnv.getElementUtils().getBinaryName(element).toString());
      generateXSDForClass(clazz);
      afterSchemaGen(type,collectionTag);
    }
 catch (    ClassNotFoundException e) {
    }
  }
}","/** 
 * {@inheritDoc} 
 */
protected boolean generateXMLSchema(ITypeModel t,String collectionTag){
  APTType type=(APTType)t;
  TypeElement element=(TypeElement)type.element();
  Class<?> clazz;
  String xsdSchema=null;
  try {
    clazz=Class.forName(processingEnv.getElementUtils().getBinaryName(element).toString());
    xsdSchema=generateXSDForClass(clazz);
  }
 catch (  ClassNotFoundException e1) {
  }
  if (classLoader != null) {
    try {
      clazz=classLoader.loadClass(processingEnv.getElementUtils().getBinaryName(element).toString());
      xsdSchema=generateXSDForClass(clazz);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  if (xsdSchema == null) {
    return false;
  }
  afterSchemaGen(type,collectionTag);
  return true;
}",0.8262068965517242
20582,"private void addMethod(ActionType actionType,Resource res,IMethodModel m,IDocInfo documentation,String returnName,String parameterName){
  Action action=new Action();
  String description=documentation.getDocumentation();
  if (!""String_Node_Str"".equals(description)) {
    action.setDescription(description);
  }
  ActionType adjustedActionType=adjustActionType(m,actionType);
  action.setType(adjustedActionType);
  res.getActions().put(adjustedActionType,action);
  processResponses(m,action,documentation,returnName);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(QUERY_PARAM);
      QueryParameter value2=new QueryParameter();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      action.getQueryParameters().put(paramName,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(HEADER_PARAM);
      Header value2=new Header();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      action.getHeaders().put(paramName,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(PATH_PARAM);
      UriParameter value2=new UriParameter();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      res.getUriParameters().put(paramName,value2);
    }
  }
  boolean hasBody=m.getBodyType() != null;
  String[] consumesValue=extractMediaTypes(m,CONSUMES,classConsumes,hasBody,adjustedActionType);
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType bodyType=new MimeType();
      if (s.contains(XML)) {
        bodyType.setSchema(parameterName);
        if (parameterName != null) {
          bodyType.setExample(EXAMPLES_PREFFIX + parameterName + XML_FILE_EXT);
          bodyType.setExampleOrigin(EXAMPLES_PREFFIX + parameterName + XML_FILE_EXT);
        }
      }
      if (s.contains(JSON)) {
        if (parameterName != null) {
          bodyType.setSchema(parameterName + ResourceVisitor.JSONSCHEMA);
          bodyType.setExample(EXAMPLES_PREFFIX + parameterName + JSON_FILE_EXT);
          bodyType.setExampleOrigin(EXAMPLES_PREFFIX + parameterName + JSON_FILE_EXT);
        }
      }
      bodyType.setType(s);
      if (s.contains(FORM)) {
        for (        IParameterModel pm : parameters) {
          if (pm.hasAnnotation(FORM_PARAM)) {
            IAnnotationModel paramAnnotation=pm.getAnnotation(FORM_PARAM);
            FormParameter vl=new FormParameter();
            String paramName=configureParam(pm,vl,documentation,paramAnnotation);
            ArrayList<FormParameter> arrayList=new ArrayList<FormParameter>();
            arrayList.add(vl);
            if (bodyType.getFormParameters() == null) {
              bodyType.setFormParameters(new HashMap<String,java.util.List<FormParameter>>());
            }
            bodyType.getFormParameters().put(paramName,arrayList);
          }
        }
      }
      action.getBody().put(s,bodyType);
    }
  }
}","private void addMethod(ActionType actionType,Resource res,IMethodModel m,IDocInfo documentation,String returnName,String parameterName,boolean gotBodySchemesAndExamples){
  Action action=new Action();
  String description=documentation.getDocumentation();
  if (!""String_Node_Str"".equals(description)) {
    action.setDescription(description);
  }
  ActionType adjustedActionType=adjustActionType(m,actionType);
  action.setType(adjustedActionType);
  res.getActions().put(adjustedActionType,action);
  processResponses(m,action,documentation,returnName);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(QUERY_PARAM);
      QueryParameter value2=new QueryParameter();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      action.getQueryParameters().put(paramName,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(HEADER_PARAM);
      Header value2=new Header();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      action.getHeaders().put(paramName,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      IAnnotationModel paramAnnotation=pm.getAnnotation(PATH_PARAM);
      UriParameter value2=new UriParameter();
      String paramName=configureParam(pm,value2,documentation,paramAnnotation);
      res.getUriParameters().put(paramName,value2);
    }
  }
  boolean hasBody=m.getBodyType() != null;
  String[] consumesValue=extractMediaTypes(m,CONSUMES,classConsumes,hasBody,adjustedActionType);
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType bodyType=new MimeType();
      if (s.contains(XML)) {
        bodyType.setSchema(parameterName);
        if (parameterName != null && gotBodySchemesAndExamples) {
          bodyType.setExample(EXAMPLES_PREFFIX + parameterName + XML_FILE_EXT);
          bodyType.setExampleOrigin(EXAMPLES_PREFFIX + parameterName + XML_FILE_EXT);
        }
      }
      if (s.contains(JSON)) {
        if (parameterName != null && gotBodySchemesAndExamples) {
          bodyType.setSchema(parameterName + ResourceVisitor.JSONSCHEMA);
          bodyType.setExample(EXAMPLES_PREFFIX + parameterName + JSON_FILE_EXT);
          bodyType.setExampleOrigin(EXAMPLES_PREFFIX + parameterName + JSON_FILE_EXT);
        }
      }
      bodyType.setType(s);
      if (s.contains(FORM)) {
        for (        IParameterModel pm : parameters) {
          if (pm.hasAnnotation(FORM_PARAM)) {
            IAnnotationModel paramAnnotation=pm.getAnnotation(FORM_PARAM);
            FormParameter vl=new FormParameter();
            String paramName=configureParam(pm,vl,documentation,paramAnnotation);
            ArrayList<FormParameter> arrayList=new ArrayList<FormParameter>();
            arrayList.add(vl);
            if (bodyType.getFormParameters() == null) {
              bodyType.setFormParameters(new HashMap<String,java.util.List<FormParameter>>());
            }
            bodyType.getFormParameters().put(paramName,arrayList);
          }
        }
      }
      action.getBody().put(s,bodyType);
    }
  }
}",0.9861944777911164
20583,"private void processResponses(IMethodModel m,Action action,IDocInfo documentation,String returnName){
  HashMap<String,ResponseModel> responses=new HashMap<String,ResponseModel>();
  String mainResponseCode=DEFAULT_RESPONSE;
  if (config != null) {
    ActionType actionType=action.getType();
    mainResponseCode=config.getResponseCode(actionType);
  }
  ResponseModel mainResponse=new ResponseModel(mainResponseCode,null,returnName);
  responses.put(mainResponseCode,mainResponse);
  IAnnotationModel apiResponse=m.getAnnotation(ResourceVisitor.API_RESPONSE);
  if (apiResponse != null) {
    String code=apiResponse.getValue(ResourceVisitor.CODE);
    String message=apiResponse.getValue(ResourceVisitor.MESSAGE);
    ResponseModel response=new ResponseModel(code,message,returnName);
    responses.put(code,response);
  }
  IAnnotationModel apiResponses=m.getAnnotation(ResourceVisitor.API_RESPONSES);
  if (apiResponses != null) {
    IAnnotationModel[] subAnnotations=apiResponses.getSubAnnotations(""String_Node_Str"");
    if (subAnnotations != null) {
      for (      IAnnotationModel subAnn : subAnnotations) {
        String code=subAnn.getValue(ResourceVisitor.CODE);
        String message=subAnn.getValue(ResourceVisitor.MESSAGE);
        String adjustedReturnName=returnName;
        String responseQualifiedName=subAnn.getValue(RESPONSE);
        if (responseQualifiedName != null) {
          try {
            Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
            ReflectionType rt=new ReflectionType(responseClass);
            generateXMLSchema(rt,null);
          }
 catch (          ClassNotFoundException e) {
            e.printStackTrace();
          }
          adjustedReturnName=getSimpleName(responseQualifiedName).toLowerCase();
        }
        ResponseModel response=responses.get(code);
        if (response == null) {
          response=new ResponseModel(code,message,adjustedReturnName);
          responses.put(code,response);
        }
 else {
          response.setMessage(message);
          response.setReturnTypeName(adjustedReturnName);
        }
      }
    }
  }
  boolean returnsValue=!m.getReturnedType().getName().toLowerCase().equals(""String_Node_Str"");
  String[] producesValues=extractMediaTypes(m,PRODUCES,classProduces,returnsValue,null);
  if (producesValues != null) {
    for (    ResponseModel responseModel : responses.values()) {
      responseModel.setProduces(producesValues);
    }
  }
  IAnnotationModel apiOperation=m.getAnnotation(API_OPERATION);
  if (apiOperation != null) {
    String responseContainer=apiOperation.getValue(""String_Node_Str"");
    String responseQualifiedName=apiOperation.getValue(RESPONSE);
    if (responseQualifiedName != null) {
      try {
        Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
        ReflectionType rt=new ReflectionType(responseClass);
        generateXMLSchema(rt,responseContainer);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
      String adjustedReturnType=getSimpleName(responseQualifiedName).toLowerCase();
      mainResponse.setReturnTypeName(adjustedReturnType);
    }
  }
  for (  ResponseModel rm : responses.values()) {
    Response response=new Response();
    String description=rm.getMessage();
    if (description == null || description.trim().isEmpty()) {
      description=documentation.getReturnInfo();
    }
    if (description != null && !description.trim().isEmpty()) {
      response.setDescription(description);
    }
    String[] produces=rm.getProduces();
    if (produces != null) {
      String returnTypeName=rm.getReturnTypeName();
      for (      String mediaType : producesValues) {
        mediaType=sanitizeMediaType(mediaType);
        MimeType mimeType=new MimeType();
        if (returnTypeName != null) {
          if (mediaType.contains(XML)) {
            mimeType.setSchema(returnTypeName);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
          }
          if (mediaType.contains(JSON)) {
            mimeType.setSchema(returnTypeName + ResourceVisitor.JSONSCHEMA);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
          }
        }
        mimeType.setType(mediaType);
        response.getBody().put(mediaType,mimeType);
      }
    }
    String code=rm.getCode();
    action.getResponses().put(code,response);
  }
}","private void processResponses(IMethodModel m,Action action,IDocInfo documentation,String returnName){
  HashMap<String,ResponseModel> responses=new HashMap<String,ResponseModel>();
  String mainResponseCode=DEFAULT_RESPONSE;
  if (config != null) {
    ActionType actionType=action.getType();
    mainResponseCode=config.getResponseCode(actionType);
  }
  ResponseModel mainResponse=new ResponseModel(mainResponseCode,null,returnName);
  responses.put(mainResponseCode,mainResponse);
  IAnnotationModel apiResponse=m.getAnnotation(ResourceVisitor.API_RESPONSE);
  if (apiResponse != null) {
    String code=apiResponse.getValue(ResourceVisitor.CODE);
    String message=apiResponse.getValue(ResourceVisitor.MESSAGE);
    ResponseModel response=new ResponseModel(code,message,returnName);
    responses.put(code,response);
  }
  boolean gotResponseSchemesAndExamples=false;
  IAnnotationModel apiResponses=m.getAnnotation(ResourceVisitor.API_RESPONSES);
  if (apiResponses != null) {
    IAnnotationModel[] subAnnotations=apiResponses.getSubAnnotations(""String_Node_Str"");
    if (subAnnotations != null) {
      for (      IAnnotationModel subAnn : subAnnotations) {
        String code=subAnn.getValue(ResourceVisitor.CODE);
        String message=subAnn.getValue(ResourceVisitor.MESSAGE);
        String adjustedReturnName=returnName;
        String responseQualifiedName=subAnn.getValue(RESPONSE);
        if (responseQualifiedName != null) {
          try {
            Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
            ReflectionType rt=new ReflectionType(responseClass);
            gotResponseSchemesAndExamples|=generateXMLSchema(rt,null);
          }
 catch (          ClassNotFoundException e) {
            e.printStackTrace();
          }
          adjustedReturnName=getSimpleName(responseQualifiedName).toLowerCase();
        }
        ResponseModel response=responses.get(code);
        if (response == null) {
          response=new ResponseModel(code,message,adjustedReturnName);
          responses.put(code,response);
        }
 else {
          response.setMessage(message);
          response.setReturnTypeName(adjustedReturnName);
        }
      }
    }
  }
  boolean returnsValue=!m.getReturnedType().getName().toLowerCase().equals(""String_Node_Str"");
  String[] producesValues=extractMediaTypes(m,PRODUCES,classProduces,returnsValue,null);
  if (producesValues != null) {
    for (    ResponseModel responseModel : responses.values()) {
      responseModel.setProduces(producesValues);
    }
  }
  IAnnotationModel apiOperation=m.getAnnotation(API_OPERATION);
  if (apiOperation != null) {
    String responseContainer=apiOperation.getValue(""String_Node_Str"");
    String responseQualifiedName=apiOperation.getValue(RESPONSE);
    if (responseQualifiedName != null) {
      try {
        Class<?> responseClass=classLoader.loadClass(responseQualifiedName);
        ReflectionType rt=new ReflectionType(responseClass);
        gotResponseSchemesAndExamples|=generateXMLSchema(rt,responseContainer);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
      String adjustedReturnType=getSimpleName(responseQualifiedName).toLowerCase();
      mainResponse.setReturnTypeName(adjustedReturnType);
    }
  }
  for (  ResponseModel rm : responses.values()) {
    Response response=new Response();
    String description=rm.getMessage();
    if (description == null || description.trim().isEmpty()) {
      description=documentation.getReturnInfo();
    }
    if (description != null && !description.trim().isEmpty()) {
      response.setDescription(description);
    }
    String[] produces=rm.getProduces();
    if (produces != null) {
      String returnTypeName=rm.getReturnTypeName();
      for (      String mediaType : producesValues) {
        mediaType=sanitizeMediaType(mediaType);
        MimeType mimeType=new MimeType();
        if (returnTypeName != null) {
          if (mediaType.contains(XML) && gotResponseSchemesAndExamples) {
            mimeType.setSchema(returnTypeName);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + XML_FILE_EXT);
          }
          if (mediaType.contains(JSON) && gotResponseSchemesAndExamples) {
            mimeType.setSchema(returnTypeName + ResourceVisitor.JSONSCHEMA);
            mimeType.setExample(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
            mimeType.setExampleOrigin(EXAMPLES_PREFFIX + returnTypeName + JSON_FILE_EXT);
          }
        }
        mimeType.setType(mediaType);
        response.getBody().put(mediaType,mimeType);
      }
    }
    String code=rm.getCode();
    action.getResponses().put(code,response);
  }
}",0.9814047391350548
20584,"/** 
 * <p>generateXMLSchema.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 */
protected void generateXMLSchema(ITypeModel t,String collectionTag){
}","/** 
 * <p>generateXMLSchema.</p>
 * @param t a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @return if schema is correctly generated and can be used inside RAML
 */
protected boolean generateXMLSchema(ITypeModel t,String collectionTag){
  return false;
}",0.7898089171974523
20585,"private void visit(IMethodModel m,String path){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String localPath=m.getAnnotationValue(PATH);
    if (path.endsWith(""String_Node_Str"")) {
      if (localPath.startsWith(""String_Node_Str"")) {
        localPath=localPath.substring(1);
      }
    }
    path+=localPath;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=getDocumentation(m);
    String returnName=null;
    String parameterName=null;
    ITypeModel returnedType=m.getReturnedType();
    if (returnedType != null) {
      if (returnedType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(returnedType,null);
        returnName=returnedType.getName().toLowerCase();
      }
      if (hasPath) {
        if (consumedTypes.add(returnedType)) {
          ResourceVisitor resourceVisitor=createResourceVisitor();
          resourceVisitor.consumedTypes.addAll(this.consumedTypes);
          resourceVisitor.basePath=path;
          resourceVisitor.spec=this.spec;
          resourceVisitor.visit(returnedType);
        }
      }
    }
    ITypeModel bodyType=m.getBodyType();
    if (bodyType != null) {
      if (bodyType.hasAnnotation(XML_ROOT_ELEMENT)) {
        generateXMLSchema(bodyType,null);
        parameterName=bodyType.getName().toLowerCase();
      }
    }
    if (path.endsWith(""String_Node_Str"")) {
      res.setRelativeUri(path.substring(0,path.length() - 1));
    }
 else {
      res.setRelativeUri(path);
    }
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation,returnName,parameterName);
      }
    }
    spec.addResource(res);
  }
}","private void visit(IMethodModel m,String path){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String localPath=m.getAnnotationValue(PATH);
    if (path.endsWith(""String_Node_Str"")) {
      if (localPath.startsWith(""String_Node_Str"")) {
        localPath=localPath.substring(1);
      }
    }
    path+=localPath;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=getDocumentation(m);
    String returnName=null;
    String parameterName=null;
    ITypeModel returnedType=m.getReturnedType();
    boolean gotBodySchemesAndExamples=false;
    if (returnedType != null) {
      if (returnedType.hasAnnotation(XML_ROOT_ELEMENT)) {
        gotBodySchemesAndExamples|=generateXMLSchema(returnedType,null);
        returnName=returnedType.getName().toLowerCase();
      }
      if (hasPath) {
        if (consumedTypes.add(returnedType)) {
          ResourceVisitor resourceVisitor=createResourceVisitor();
          resourceVisitor.consumedTypes.addAll(this.consumedTypes);
          resourceVisitor.basePath=path;
          resourceVisitor.spec=this.spec;
          resourceVisitor.visit(returnedType);
        }
      }
    }
    ITypeModel bodyType=m.getBodyType();
    if (bodyType != null) {
      if (bodyType.hasAnnotation(XML_ROOT_ELEMENT)) {
        gotBodySchemesAndExamples|=generateXMLSchema(bodyType,null);
        parameterName=bodyType.getName().toLowerCase();
      }
    }
    if (path.endsWith(""String_Node_Str"")) {
      res.setRelativeUri(path.substring(0,path.length() - 1));
    }
 else {
      res.setRelativeUri(path);
    }
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation,returnName,parameterName,gotBodySchemesAndExamples);
      }
    }
    spec.addResource(res);
  }
}",0.9679404975634778
20586,"/** 
 * {@inheritDoc} 
 */
protected void generateXMLSchema(ITypeModel t,String collectionTag){
  if (t instanceof ReflectionType) {
    Class<?> element=((ReflectionType)t).getElement();
    generateXSDForClass(element);
  }
 else   if (t.getFullyQualifiedName() != null && classLoader != null) {
    try {
      Class<?> element=classLoader.loadClass(t.getFullyQualifiedName());
      generateXSDForClass(element);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  afterSchemaGen(t,collectionTag);
}","/** 
 * {@inheritDoc} 
 */
protected boolean generateXMLSchema(ITypeModel t,String collectionTag){
  String xsdSchema=null;
  if (t instanceof ReflectionType) {
    Class<?> element=((ReflectionType)t).getElement();
    xsdSchema=generateXSDForClass(element);
  }
 else   if (t.getFullyQualifiedName() != null && classLoader != null) {
    try {
      Class<?> element=classLoader.loadClass(t.getFullyQualifiedName());
      xsdSchema=generateXSDForClass(element);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  if (xsdSchema == null) {
    return false;
  }
  afterSchemaGen(t,collectionTag);
  return true;
}",0.8986486486486487
20587,"/** 
 * <p>Constructor for JAXBType.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 */
public JAXBType(ITypeModel model,JAXBRegistry r){
  super(model,r);
  IMethodModel[] methods=model.getMethods();
  String value=value(XmlAccessorType.class,""String_Node_Str"");
  XmlAccessType type=XmlAccessType.FIELD;
  this.className=model.getFullyQualifiedName();
  if (value != null) {
    type=extractType(value);
  }
  for (  IMethodModel m : methods) {
    boolean needToConsume=needToConsume(type,m);
    if (!needToConsume) {
      continue;
    }
    boolean get=m.getName().startsWith(""String_Node_Str"");
    boolean is=m.getName().startsWith(""String_Node_Str"");
    if (get || is) {
      properties.add(createProperty(get ? m.getName().substring(3) : m.getName().substring(2),m));
    }
  }
  for (  IFieldModel f : model.getFields()) {
    if (!f.isStatic()) {
      boolean needToConsume=needToConsume(type,f);
      if (!needToConsume) {
        continue;
      }
      properties.add(createProperty(f.getName(),f));
    }
  }
}","/** 
 * <p>Constructor for JAXBType.</p>
 * @param model a {@link com.mulesoft.jaxrs.raml.annotation.model.ITypeModel} object.
 * @param r a {@link com.mulesoft.jaxrs.raml.jaxb.JAXBRegistry} object.
 */
public JAXBType(ITypeModel model,JAXBRegistry r){
  super(model,r);
  IMethodModel[] methods=model.getMethods();
  String value=value(XmlAccessorType.class,""String_Node_Str"");
  XmlAccessType type=XmlAccessType.PUBLIC_MEMBER;
  this.className=model.getFullyQualifiedName();
  if (value != null) {
    type=extractType(value);
  }
  for (  IMethodModel m : methods) {
    boolean needToConsume=needToConsume(type,m);
    if (!needToConsume) {
      continue;
    }
    boolean get=m.getName().startsWith(""String_Node_Str"");
    boolean is=m.getName().startsWith(""String_Node_Str"");
    if (get || is) {
      properties.add(createProperty(get ? m.getName().substring(3) : m.getName().substring(2),m));
    }
  }
  for (  IFieldModel f : model.getFields()) {
    if (!f.isStatic()) {
      boolean needToConsume=needToConsume(type,f);
      if (!needToConsume) {
        continue;
      }
      properties.add(createProperty(f.getName(),f));
    }
  }
}",0.9939130434782608
20588,"/** 
 * {@inheritDoc} 
 */
@Override protected void generateXMLSchema(ITypeModel t,String collectionTag){
  super.generateXMLSchema(t,collectionTag);
}","/** 
 * {@inheritDoc} 
 */
@Override protected boolean generateXMLSchema(ITypeModel t,String collectionTag){
  return super.generateXMLSchema(t,collectionTag);
}",0.9487179487179488
20589,"private void addCatchAllFormParametersArgument(final MimeType bodyMimeType,final JMethod method,final JDocComment javadoc,final JType argumentType){
  method.param(argumentType,GENERIC_PAYLOAD_ARGUMENT_NAME);
  for (  final Entry<String,List<FormParameter>> namedFormParameters : bodyMimeType.getFormParameters().entrySet()) {
    final StringBuilder sb=new StringBuilder();
    sb.append(namedFormParameters.getKey()).append(""String_Node_Str"");
    for (    final FormParameter formParameter : namedFormParameters.getValue()) {
      appendParameterJavadocDescription(formParameter,sb);
    }
    javadoc.addParam(GENERIC_PAYLOAD_ARGUMENT_NAME).add(sb.toString());
  }
}","private void addCatchAllFormParametersArgument(final MimeType bodyMimeType,final JMethod method,final JDocComment javadoc,final JType argumentType){
  method.param(argumentType,GENERIC_PAYLOAD_ARGUMENT_NAME);
  Map<String,List<FormParameter>> formParameters=bodyMimeType.getFormParameters();
  if (formParameters != null) {
    for (    final Entry<String,List<FormParameter>> namedFormParameters : formParameters.entrySet()) {
      final StringBuilder sb=new StringBuilder();
      sb.append(namedFormParameters.getKey()).append(""String_Node_Str"");
      for (      final FormParameter formParameter : namedFormParameters.getValue()) {
        appendParameterJavadocDescription(formParameter,sb);
      }
      javadoc.addParam(GENERIC_PAYLOAD_ARGUMENT_NAME).add(sb.toString());
    }
  }
}",0.83526999316473
20590,"private void generateType(JAXBType type,String xmlName){
  HashMap<String,String> prefixes=type.gatherNamespaces();
  writer.startEntityAndDeclareNamespaces(xmlName,prefixes);
  for (  JAXBProperty p : type.properties) {
    writeProperty(p,prefixes);
  }
  writer.endEntity(xmlName);
}","private void generateType(JAXBType type,String xmlName){
  if (!onStack.add(type)) {
    return;
  }
  HashMap<String,String> prefixes=type.gatherNamespaces();
  writer.startEntityAndDeclareNamespaces(xmlName,prefixes);
  for (  JAXBProperty p : type.properties) {
    writeProperty(p,prefixes);
  }
  writer.endEntity(xmlName);
  onStack.remove(type);
}",0.89375
20591,"private void writeProperty(JAXBProperty p,HashMap<String,String> prefixes){
  String name=p.name();
  if (p.namespace != null) {
    String string=prefixes.get(p.namespace);
    if (string != null) {
      name=string + ""String_Node_Str"" + name;
    }
  }
  if (p instanceof JAXBAttributeProperty) {
    JAXBAttributeProperty ap=(JAXBAttributeProperty)p;
    writer.generateAttribute(name,ap.asJavaType(),ap.required);
  }
  if (p instanceof JAXBElementProperty) {
    JAXBElementProperty el=(JAXBElementProperty)p;
    JAXBType jaxbType=el.getJAXBType();
    if (jaxbType != null) {
      generateType(jaxbType,name);
      if (p.isCollection()) {
        generateType(jaxbType,name);
      }
    }
 else {
      writer.generateElement(name,el.asJavaType(),el.required);
      if (p.isCollection()) {
        writer.generateElement(name,el.asJavaType(),el.required);
      }
    }
  }
  if (p instanceof JAXBValueProperty) {
    writer.addValueSample(p.asJavaType(),p.required);
  }
}","private void writeProperty(JAXBProperty p,HashMap<String,String> prefixes){
  String name=p.name();
  if (name == null || name.length() == 0) {
    return;
  }
  if (p.namespace != null) {
    String string=prefixes.get(p.namespace);
    if (string != null) {
      name=string + ""String_Node_Str"" + name;
    }
  }
  if (p instanceof JAXBAttributeProperty) {
    JAXBAttributeProperty ap=(JAXBAttributeProperty)p;
    writer.generateAttribute(name,ap.asJavaType(),ap.required);
  }
  if (p instanceof JAXBElementProperty) {
    JAXBElementProperty el=(JAXBElementProperty)p;
    JAXBType jaxbType=el.getJAXBType();
    if (jaxbType != null) {
      generateType(jaxbType,name);
      if (p.isCollection()) {
        generateType(jaxbType,name);
      }
    }
 else {
      writer.generateElement(name,el.asJavaType(),el.required);
      if (p.isCollection()) {
        writer.generateElement(name,el.asJavaType(),el.required);
      }
    }
  }
  if (p instanceof JAXBValueProperty) {
    writer.addValueSample(p.asJavaType(),p.required);
  }
}",0.9704433497536946
20592,"private IAnnotationModel processAnnotation(CtAnnotation<? extends Annotation> annotation){
  String simpleName=annotation.getActualAnnotation().annotationType().getSimpleName();
  AnnotationModel annotationModel=new AnnotationModel();
  annotationModel.setName(simpleName);
  Map<String,Object> elementValues=annotation.getElementValues();
  for (  Map.Entry<String,Object> entry : elementValues.entrySet()) {
    String key=entry.getKey();
    if (key == null) {
      continue;
    }
    Object value=entry.getValue();
    ArrayList<CtAnnotation<?>> annotationList=toCtAnnotationList(value);
    if (annotationList != null) {
      int size=annotationList.size();
      IAnnotationModel[] annotationModels=new IAnnotationModel[size];
      for (int i=0; i < size; i++) {
        CtAnnotation<?> subAnnotation=annotationList.get(i);
        IAnnotationModel subAnnotationModel=processAnnotation(subAnnotation);
        annotationModels[i]=subAnnotationModel;
      }
      annotationModel.addValue(key,annotationModels);
    }
 else     if (value instanceof String[]) {
      annotationModel.addValue(key,value);
    }
 else {
      if (value == null) {
        value=""String_Node_Str"";
      }
 else       if (value instanceof CtLiteral<?>) {
        value=((CtLiteral<?>)value).getValue().toString();
      }
 else       if (value instanceof CtFieldReference<?>) {
        value=((CtFieldReference<?>)value).getActualField().getName();
      }
 else       if (value instanceof CtNewArray<?>) {
        List<?> elements=((CtNewArray<?>)value).getElements();
        int size=elements.size();
        String[] arr=new String[size];
        for (int i=0; i < size; i++) {
          arr[i]=elements.get(i).toString();
        }
      }
      annotationModel.addValue(key,value);
    }
  }
  return annotationModel;
}","private IAnnotationModel processAnnotation(CtAnnotation<? extends Annotation> annotation){
  String simpleName=annotation.getActualAnnotation().annotationType().getSimpleName();
  AnnotationModel annotationModel=new AnnotationModel();
  annotationModel.setName(simpleName);
  Map<String,Object> elementValues=annotation.getElementValues();
  for (  Map.Entry<String,Object> entry : elementValues.entrySet()) {
    String key=entry.getKey();
    if (key == null) {
      continue;
    }
    Object value=entry.getValue();
    ArrayList<CtAnnotation<?>> annotationList=toCtAnnotationList(value);
    if (annotationList != null) {
      int size=annotationList.size();
      IAnnotationModel[] annotationModels=new IAnnotationModel[size];
      for (int i=0; i < size; i++) {
        CtAnnotation<?> subAnnotation=annotationList.get(i);
        IAnnotationModel subAnnotationModel=processAnnotation(subAnnotation);
        annotationModels[i]=subAnnotationModel;
      }
      annotationModel.addValue(key,annotationModels);
    }
 else     if (value instanceof String[]) {
      annotationModel.addValue(key,value);
    }
 else {
      if (value == null) {
        value=""String_Node_Str"";
      }
 else       if (value instanceof CtLiteral<?>) {
        value=((CtLiteral<?>)value).getValue().toString();
      }
 else       if (value instanceof CtFieldReference<?>) {
        value=((CtFieldReference<?>)value).getActualField().getName();
      }
 else       if (value instanceof CtNewArray<?>) {
        List<?> elements=((CtNewArray<?>)value).getElements();
        int size=elements.size();
        String[] arr=new String[size];
        for (int i=0; i < size; i++) {
          arr[i]=elements.get(i).toString();
        }
        value=arr;
      }
      annotationModel.addValue(key,value);
    }
  }
  return annotationModel;
}",0.9947930939983556
20593,"public JDefinedClass createResourceEnum(final JDefinedClass resourceInterface,final String name,final List<String> values) throws Exception {
  final JDefinedClass _enum=resourceInterface._enum(name);
  for (  final String value : values) {
    _enum.enumConstant(value);
  }
  return _enum;
}","public JDefinedClass createResourceEnum(final JDefinedClass resourceInterface,final String name,final List<String> values) throws Exception {
  JClass[] listClasses=resourceInterface.listClasses();
  for (  JClass c : listClasses) {
    if (c.name().equals(name)) {
      return (JDefinedClass)c;
    }
  }
  final JDefinedClass _enum=resourceInterface._enum(name);
  for (  final String value : values) {
    _enum.enumConstant(value);
  }
  return _enum;
}",0.7802929427430093
20594,"public ITypeModel getReturnedType(){
  IMethod iMethod=(IMethod)tm;
  try {
    String returnType=iMethod.getReturnType();
    if (returnType.startsWith(""String_Node_Str"") && returnType.endsWith(""String_Node_Str"")) {
      IType ownerType=(IType)iMethod.getAncestor(IJavaElement.TYPE);
      String[][] resolveType=ownerType.resolveType(returnType.substring(1,returnType.length() - 1));
      if (resolveType.length == 1) {
        IType findType=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
        if (findType != null && findType instanceof SourceType) {
          return new JDTType(findType);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  return null;
}","public ITypeModel getReturnedType(){
  IMethod iMethod=(IMethod)tm;
  try {
    String returnType=iMethod.getReturnType();
    if (returnType.startsWith(""String_Node_Str"") && returnType.endsWith(""String_Node_Str"")) {
      IType ownerType=(IType)iMethod.getAncestor(IJavaElement.TYPE);
      String typeName=returnType.substring(1,returnType.length() - 1);
      String[][] resolveType=ownerType.resolveType(typeName);
      if (resolveType == null) {
        throw new GenerationException(""String_Node_Str"" + typeName + ""String_Node_Str"",""String_Node_Str"" + typeName + ""String_Node_Str"");
      }
      if (resolveType.length == 1) {
        IType findType=ownerType.getJavaProject().findType(resolveType[0][0] + '.' + resolveType[0][1]);
        if (findType != null && findType instanceof SourceType) {
          return new JDTType(findType);
        }
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof GenerationException) {
      throw (GenerationException)e;
    }
    throw new IllegalStateException(e);
  }
  return null;
}",0.7428890128276632
20595,"/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  types.clear();
  boolean cpInited=false;
  IProject project=null;
  classLoader=null;
  try {
    for (    Object q : selectionObject) {
      if (!cpInited) {
        IJavaElement el=(IJavaElement)q;
        IResource resource=el.getResource();
        if (project != null && !project.equals(resource.getProject())) {
          MessageDialog.openInformation(shell,""String_Node_Str"",""String_Node_Str"");
          return;
        }
        project=resource.getProject();
        Collection<String> constructProjectClassPath=new ClassPathCollector().constructProjectClassPath(project,true);
        URL[] urls=new URL[constructProjectClassPath.size()];
        int a=0;
        for (        String s : constructProjectClassPath) {
          urls[a++]=new File(s).toURL();
        }
        classLoader=new URLClassLoader(urls);
        cpInited=true;
      }
    }
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  IFile file=getNewRAMLFile(project);
  boolean doSingle=isSingle;
  if (file == null) {
    return;
  }
  File outputFile=file.getLocation().toFile();
  File actualFile=outputFile;
  if (doSingle) {
    File createTempFile;
    try {
      createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      outputFile=createTempFile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  visitor=new JDTResourceVisitor(outputFile,classLoader);
  for (  Object q : selectionObject) {
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  if (project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
}","/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  types.clear();
  boolean cpInited=false;
  IProject project=null;
  classLoader=null;
  try {
    for (    Object q : selectionObject) {
      if (!cpInited) {
        IJavaElement el=(IJavaElement)q;
        IResource resource=el.getResource();
        if (project != null && !project.equals(resource.getProject())) {
          MessageDialog.openInformation(shell,""String_Node_Str"",""String_Node_Str"");
          return;
        }
        project=resource.getProject();
        Collection<String> constructProjectClassPath=new ClassPathCollector().constructProjectClassPath(project,true);
        URL[] urls=new URL[constructProjectClassPath.size()];
        int a=0;
        for (        String s : constructProjectClassPath) {
          urls[a++]=new File(s).toURL();
        }
        classLoader=new URLClassLoader(urls);
        cpInited=true;
      }
    }
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  IFile file=getNewRAMLFile(project);
  boolean doSingle=isSingle;
  if (file == null) {
    return;
  }
  File outputFile=file.getLocation().toFile();
  File actualFile=outputFile;
  if (doSingle) {
    File createTempFile;
    try {
      createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      outputFile=createTempFile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  visitor=new JDTResourceVisitor(outputFile,classLoader);
  for (  Object q : selectionObject) {
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    GenerationException e) {
      MessageDialog.openError(shell,e.getShortMessage(),e.getDetailMessage());
    }
catch (    Exception e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
  if (project != null) {
    if (!separateFiles) {
      if (doSingle) {
        String raml=visitor.getRaml();
        Raml2 build=build(new ByteArrayInputStream(raml.getBytes()),new FileResourceLoader(outputFile.getParent()));
        RamlEmitterV2 emmitter=new RamlEmitterV2();
        emmitter.setSingle(true);
        String dump=emmitter.dump(build);
        try {
          save(dump,file);
        }
 catch (        Exception e) {
          MessageDialog.openError(shell,e.getMessage(),e.getMessage());
        }
        return;
      }
 else {
        saveResult(visitor,file);
      }
    }
    try {
      project.refreshLocal(IProject.DEPTH_INFINITE,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      MessageDialog.openError(shell,e.getMessage(),e.getMessage());
    }
  }
}",0.979721803251215
20596,"private static String doCleanup(String relativeUri){
  StringBuilder bld=new StringBuilder();
  char pc=0;
  for (int a=0; a < relativeUri.length(); a++) {
    char c=relativeUri.charAt(a);
    if (c == '/' && pc == '/') {
      continue;
    }
 else {
      bld.append(c);
      pc=c;
    }
  }
  String string=bld.toString();
  if (!string.startsWith(""String_Node_Str"")) {
    string=""String_Node_Str"" + string;
  }
  return string;
}","private static String doCleanup(String relativeUri){
  relativeUri=PathCleanuper.cleanupPath(relativeUri);
  StringBuilder bld=new StringBuilder();
  char pc=0;
  for (int a=0; a < relativeUri.length(); a++) {
    char c=relativeUri.charAt(a);
    if (c == '/' && pc == '/') {
      continue;
    }
 else {
      bld.append(c);
      pc=c;
    }
  }
  String string=bld.toString();
  if (!string.startsWith(""String_Node_Str"")) {
    string=""String_Node_Str"" + string;
  }
  return string;
}",0.9416846652267818
20597,"protected static File uriToFile(String uri){
  String filePrefix=getFilePrefix();
  if (!uri.startsWith(filePrefix)) {
    return null;
  }
  String filePath=uri.substring(filePrefix.length(),uri.length());
  return new File(filePath);
}","protected static File uriToFile(String uri){
  return new File(uri);
}",0.4429967426710097
20598,"String generateDummyXmlFor(String uri){
  HrefSchemaHandler hrefHandler=new HrefSchemaHandler(uri);
  uri=hrefHandler.getEnhancedSchemaURI();
  SchemaCdataHandler cdataHandler=new SchemaCdataHandler(uri);
  try {
    String enhancedUri=cdataHandler.getEnhancedSchemaURI();
    if (enhancedUri != null) {
      uri=enhancedUri;
    }
    String[] errorInfo=new String[2];
    IPath sl=new Path(""String_Node_Str"");
    CMDocument cmDocument=ContentModelManager.getInstance().createCMDocument(uri,null);
    NewXMLGenerator generator=new NewXMLGenerator(uri,cmDocument);
    String rootElementName=getRootElementName(generator);
    if (rootElementName == null) {
      return ""String_Node_Str"";
    }
    generator.setRootElementName(rootElementName);
    try {
      CMNamedNodeMap nameNodeMap=generator.getCMDocument().getElements();
      ByteArrayOutputStream result=generator.createXMLDocument(""String_Node_Str"",null);
      return cdataHandler.enhanceGeneratedXML(result.toString());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return ""String_Node_Str"";
  }
  finally {
    cdataHandler.cleanup();
  }
}","String generateDummyXmlFor(String uri){
  SchemaCdataHandler cdataHandler=new SchemaCdataHandler(uri);
  try {
    String enhancedUri=cdataHandler.getEnhancedSchemaURI();
    if (enhancedUri != null) {
      uri=enhancedUri;
    }
    String[] errorInfo=new String[2];
    IPath sl=new Path(""String_Node_Str"");
    CMDocument cmDocument=ContentModelManager.getInstance().createCMDocument(uri,null);
    NewXMLGenerator generator=new NewXMLGenerator(uri,cmDocument);
    String rootElementName=getRootElementName(generator);
    if (rootElementName == null) {
      return ""String_Node_Str"";
    }
    generator.setRootElementName(rootElementName);
    try {
      CMNamedNodeMap nameNodeMap=generator.getCMDocument().getElements();
      ByteArrayOutputStream result=generator.createXMLDocument(""String_Node_Str"",null);
      return cdataHandler.enhanceGeneratedXML(result.toString());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return ""String_Node_Str"";
  }
  finally {
    cdataHandler.cleanup();
  }
}",0.8770794824399261
20599,"/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  types.clear();
  boolean cpInited=false;
  IProject project=null;
  URLClassLoader classLoader=null;
  try {
    for (    Object q : selectionObject) {
      if (!cpInited) {
        IJavaElement el=(IJavaElement)q;
        IResource resource=el.getResource();
        if (project != null && !project.equals(resource.getProject())) {
          MessageDialog.openInformation(shell,""String_Node_Str"",""String_Node_Str"");
          return;
        }
        project=resource.getProject();
        Collection<String> constructProjectClassPath=new ClassPathCollector().constructProjectClassPath(project,true);
        URL[] urls=new URL[constructProjectClassPath.size()];
        int a=0;
        for (        String s : constructProjectClassPath) {
          urls[a++]=new File(s).toURL();
        }
        classLoader=new URLClassLoader(urls);
        cpInited=true;
      }
    }
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  IFile file=getNewRAMLFile(project);
  if (file == null) {
    return;
  }
  File outputFile=file.getLocation().toFile();
  visitor=new RuntimeResourceVisitorFactory(outputFile,classLoader).createResourceVisitor();
  for (  Object q : selectionObject) {
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (project != null) {
    saveResult(visitor,file);
  }
}","/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  types.clear();
  boolean cpInited=false;
  IProject project=null;
  URLClassLoader classLoader=null;
  try {
    for (    Object q : selectionObject) {
      if (!cpInited) {
        IJavaElement el=(IJavaElement)q;
        IResource resource=el.getResource();
        if (project != null && !project.equals(resource.getProject())) {
          MessageDialog.openInformation(shell,""String_Node_Str"",""String_Node_Str"");
          return;
        }
        project=resource.getProject();
        Collection<String> constructProjectClassPath=new ClassPathCollector().constructProjectClassPath(project,true);
        URL[] urls=new URL[constructProjectClassPath.size()];
        int a=0;
        for (        String s : constructProjectClassPath) {
          urls[a++]=new File(s).toURL();
        }
        classLoader=new URLClassLoader(urls);
        cpInited=true;
      }
    }
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  IFile file=getNewRAMLFile(project);
  if (file == null) {
    return;
  }
  File outputFile=file.getLocation().toFile();
  visitor=new JDTResourceVisitorFactory(outputFile,classLoader).createResourceVisitor();
  for (  Object q : selectionObject) {
    try {
      if (q instanceof IType) {
        visitType((IType)q);
      }
      if (q instanceof IPackageFragment) {
        visitPackage((IPackageFragment)q);
      }
      if (q instanceof IPackageFragmentRoot) {
        visitPackageFragmentRoot((IPackageFragmentRoot)q);
      }
      if (q instanceof IJavaProject) {
        visitProject((IJavaProject)q);
      }
      if (q instanceof ICompilationUnit) {
        visitUnit((ICompilationUnit)q);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (project != null) {
    saveResult(visitor,file);
  }
}",0.9973375931842384
20600,"/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  ResourceVisitor visitor=new ResourceVisitor();
  if (selectionObject instanceof IType) {
    IType t=(IType)selectionObject;
    visitor.visit(new JDTType(t));
    saveResult(visitor,t);
    return;
  }
  if (selectionObject instanceof ICompilationUnit) {
    ICompilationUnit unit=(ICompilationUnit)selectionObject;
    IType[] allTypes;
    try {
      allTypes=unit.getAllTypes();
      for (      IType t : allTypes) {
        visitor.visit(new JDTType(t));
      }
    }
 catch (    JavaModelException e) {
      MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
    }
    saveResult(visitor,unit);
  }
  IResource q=(IResource)selectionObject;
  IProject project=q.getProject();
  IJavaProject create=JavaCore.create(project);
  if (create.exists()) {
    try {
      IPackageFragmentRoot[] packageFragmentRoots=create.getPackageFragmentRoots();
      for (      IPackageFragmentRoot qq : packageFragmentRoots) {
        if (qq.getKind() == IPackageFragmentRoot.K_SOURCE) {
          IJavaElement[] children=qq.getChildren();
          for (          IJavaElement z : children) {
            if (z instanceof IPackageFragment) {
              IPackageFragment pp=(IPackageFragment)z;
              ICompilationUnit[] compilationUnits=pp.getCompilationUnits();
              for (              ICompilationUnit unit : compilationUnits) {
                IType[] allTypes=unit.getAllTypes();
                for (                IType t : allTypes) {
                  visitor.visit(new JDTType(t));
                }
              }
            }
          }
        }
      }
      String raml=visitor.getRaml();
      String name=""String_Node_Str"";
      IFile file=project.getFile(name);
      save(raml,file);
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
    }
  }
}","/** 
 * @see IActionDelegate#run(IAction)
 */
public void run(IAction action){
  ResourceVisitor visitor=new RuntimeResourceVisitorFactory().createResourceVisitor();
  if (selectionObject instanceof IType) {
    IType t=(IType)selectionObject;
    visitor.visit(new JDTType(t));
    saveResult(visitor,t);
    return;
  }
  if (selectionObject instanceof ICompilationUnit) {
    ICompilationUnit unit=(ICompilationUnit)selectionObject;
    IType[] allTypes;
    try {
      allTypes=unit.getAllTypes();
      for (      IType t : allTypes) {
        visitor.visit(new JDTType(t));
      }
    }
 catch (    JavaModelException e) {
      MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
    }
    saveResult(visitor,unit);
  }
  IResource q=(IResource)selectionObject;
  IProject project=q.getProject();
  IJavaProject create=JavaCore.create(project);
  if (create.exists()) {
    try {
      IPackageFragmentRoot[] packageFragmentRoots=create.getPackageFragmentRoots();
      for (      IPackageFragmentRoot qq : packageFragmentRoots) {
        if (qq.getKind() == IPackageFragmentRoot.K_SOURCE) {
          IJavaElement[] children=qq.getChildren();
          for (          IJavaElement z : children) {
            if (z instanceof IPackageFragment) {
              IPackageFragment pp=(IPackageFragment)z;
              ICompilationUnit[] compilationUnits=pp.getCompilationUnits();
              for (              ICompilationUnit unit : compilationUnits) {
                IType[] allTypes=unit.getAllTypes();
                for (                IType t : allTypes) {
                  visitor.visit(new JDTType(t));
                }
              }
            }
          }
        }
      }
      String raml=visitor.getRaml();
      String name=""String_Node_Str"";
      IFile file=project.getFile(name);
      save(raml,file);
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
    }
  }
}",0.9902514109799896
20601,"public void addResource(Resource res){
  cleanupUrl(res);
  String relativeUri=res.getRelativeUri();
  int c=0;
  for (int a=0; a < relativeUri.length(); a++) {
    if (relativeUri.charAt(a) == '/') {
      c++;
    }
  }
  Map<String,Resource> resources=getCoreRaml().getResources();
  if (c == 1) {
    resources.put(relativeUri,res);
    return;
  }
  if (res.getRelativeUri().length() == 0 && res.getActions().isEmpty()) {
    return;
  }
  placeResource(resources,res);
}","public void addResource(Resource res){
  cleanupUrl(res);
  String relativeUri=res.getRelativeUri();
  int c=0;
  for (int a=0; a < relativeUri.length(); a++) {
    if (relativeUri.charAt(a) == '/') {
      c++;
    }
  }
  Map<String,Resource> resources=getCoreRaml().getResources();
  if (c == 1) {
    Resource put=resources.put(relativeUri,res);
    if (put != null) {
      merge(res,put);
    }
    if (relativeUri.length() > 0) {
      Path ps=new Path(relativeUri);
      for (      String s : new HashSet<String>(resources.keySet())) {
        Path anotherPath=new Path(s);
        if (ps.isPrefixOf(anotherPath) && !ps.equals(anotherPath)) {
          Resource remove=resources.remove(s);
          Path removeFirstSegments=anotherPath.removeFirstSegments(ps.segmentCount());
          String portableString=removeFirstSegments.toPortableString();
          String doCleanup=doCleanup(""String_Node_Str"" + portableString);
          res.getResources().put(doCleanup,remove);
          remove.setRelativeUri(doCleanup);
        }
      }
    }
    return;
  }
  if (res.getRelativeUri().length() == 0 && res.getActions().isEmpty()) {
    return;
  }
  placeResource(resources,res);
}",0.5362927414517097
20602,"public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp) && !path.equals(rp)) {
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      portableString=doCleanup(portableString);
      remove.setRelativeUri(portableString);
      Resource old=resources.put(relativeUri,createResource);
      if (old != null) {
        createResource.getActions().putAll(old.getActions());
      }
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
      Resource put=resources.put(relativeUri,createResource);
      if (put != null) {
        createResource.getActions().putAll(put.getActions());
      }
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path) && path.segmentCount() - rp.segmentCount() >= 1) {
      Path removeFirstSegments2=path.removeFirstSegments(rp.segmentCount());
      Path removeFirstSegments=removeFirstSegments2;
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(doCleanup(portableString));
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  Resource put=resources.put(relativeUri,createResource);
  if (put != null) {
    createResource.getActions().putAll(put.getActions());
    createResource.getResources().putAll(put.getResources());
  }
}","public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp)) {
      if (path.equals(rp)) {
        Resource resource=resources.get(s);
        resource.getActions().putAll(createResource.getActions());
        return;
      }
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      portableString=doCleanup(portableString);
      remove.setRelativeUri(portableString);
      Resource old=resources.put(relativeUri,createResource);
      if (old != null) {
        createResource.getActions().putAll(old.getActions());
      }
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
      Resource put=resources.put(relativeUri,createResource);
      if (put != null) {
        createResource.getActions().putAll(put.getActions());
      }
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path) && path.segmentCount() - rp.segmentCount() >= 1) {
      Path removeFirstSegments2=path.removeFirstSegments(rp.segmentCount());
      Path removeFirstSegments=removeFirstSegments2;
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(doCleanup(portableString));
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  Resource put=resources.put(relativeUri,createResource);
  if (put != null) {
    merge(createResource,put);
  }
}",0.938980918431537
20603,"private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation,String returnName,String parameterName){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2,pm);
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2,pm);
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      proceedType(pm.getType(),value2,pm);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue == null) {
    consumesValue=classConsumes;
  }
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType bodyType=new MimeType();
      if (s.contains(XML)) {
        bodyType.setSchema(parameterName);
        bodyType.setExample(""String_Node_Str"" + parameterName + ""String_Node_Str"");
        bodyType.setExampleOrigin(""String_Node_Str"" + parameterName + ""String_Node_Str"");
      }
      if (s.contains(JSON)) {
        bodyType.setSchema(returnName + ""String_Node_Str"");
        bodyType.setExample(""String_Node_Str"" + returnName + ""String_Node_Str"");
        bodyType.setExampleOrigin(""String_Node_Str"" + returnName + ""String_Node_Str"");
      }
      bodyType.setType(s);
      if (s.contains(FORM)) {
        for (        IParameterModel pm : parameters) {
          if (pm.hasAnnotation(FORM_PARAM)) {
            String annotationValue=pm.getAnnotationValue(FORM_PARAM);
            FormParameter vl=new FormParameter();
            String text=documentation.getDocumentation(pm.getName());
            if (!""String_Node_Str"".equals(text)) {
              vl.setDescription(text);
            }
            proceedType(pm.getType(),vl,pm);
            ArrayList<FormParameter> arrayList=new ArrayList<FormParameter>();
            arrayList.add(vl);
            if (bodyType.getFormParameters() == null) {
              bodyType.setFormParameters(new HashMap<String,java.util.List<FormParameter>>());
            }
            bodyType.getFormParameters().put(annotationValue,arrayList);
          }
        }
      }
      value.getBody().put(s,bodyType);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue == null) {
    producesValue=classProduces;
  }
  if (producesValue != null) {
    Response value2=new Response();
    String text=documentation.getReturnInfo();
    if (!""String_Node_Str"".equals(text)) {
      value2.setDescription(text);
    }
    for (    String s : producesValue) {
      s=sanitizeMediaType(s);
      MimeType mimeType=new MimeType();
      if (returnName != null) {
        if (s.contains(XML)) {
          mimeType.setSchema(returnName);
          mimeType.setExample(""String_Node_Str"" + returnName + ""String_Node_Str"");
          mimeType.setExampleOrigin(""String_Node_Str"" + returnName + ""String_Node_Str"");
        }
        if (s.contains(JSON)) {
          mimeType.setSchema(returnName + ""String_Node_Str"");
          mimeType.setExample(""String_Node_Str"" + returnName + ""String_Node_Str"");
          mimeType.setExampleOrigin(""String_Node_Str"" + returnName + ""String_Node_Str"");
        }
      }
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
 else {
    Response value2=new Response();
    String text=documentation.getReturnInfo();
    if (!""String_Node_Str"".equals(text)) {
      value2.setDescription(text);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
}","private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation,String returnName,String parameterName){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2,pm);
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2,pm);
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      String text=documentation.getDocumentation(pm.getName());
      if (!""String_Node_Str"".equals(text)) {
        value2.setDescription(text);
      }
      proceedType(pm.getType(),value2,pm);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue == null) {
    consumesValue=classConsumes;
  }
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType bodyType=new MimeType();
      if (s.contains(XML)) {
        bodyType.setSchema(parameterName);
        if (parameterName != null) {
          bodyType.setExample(""String_Node_Str"" + parameterName + ""String_Node_Str"");
          bodyType.setExampleOrigin(""String_Node_Str"" + parameterName + ""String_Node_Str"");
        }
      }
      if (s.contains(JSON)) {
        bodyType.setSchema(parameterName + ""String_Node_Str"");
        if (parameterName != null) {
          bodyType.setExample(""String_Node_Str"" + parameterName + ""String_Node_Str"");
          bodyType.setExampleOrigin(""String_Node_Str"" + parameterName + ""String_Node_Str"");
        }
      }
      bodyType.setType(s);
      if (s.contains(FORM)) {
        for (        IParameterModel pm : parameters) {
          if (pm.hasAnnotation(FORM_PARAM)) {
            String annotationValue=pm.getAnnotationValue(FORM_PARAM);
            FormParameter vl=new FormParameter();
            String text=documentation.getDocumentation(pm.getName());
            if (!""String_Node_Str"".equals(text)) {
              vl.setDescription(text);
            }
            proceedType(pm.getType(),vl,pm);
            ArrayList<FormParameter> arrayList=new ArrayList<FormParameter>();
            arrayList.add(vl);
            if (bodyType.getFormParameters() == null) {
              bodyType.setFormParameters(new HashMap<String,java.util.List<FormParameter>>());
            }
            bodyType.getFormParameters().put(annotationValue,arrayList);
          }
        }
      }
      value.getBody().put(s,bodyType);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue == null) {
    producesValue=classProduces;
  }
  if (producesValue != null) {
    Response value2=new Response();
    String text=documentation.getReturnInfo();
    if (!""String_Node_Str"".equals(text)) {
      value2.setDescription(text);
    }
    for (    String s : producesValue) {
      s=sanitizeMediaType(s);
      MimeType mimeType=new MimeType();
      if (returnName != null) {
        if (s.contains(XML)) {
          mimeType.setSchema(returnName);
          if (returnName != null) {
            mimeType.setExample(""String_Node_Str"" + returnName + ""String_Node_Str"");
            mimeType.setExampleOrigin(""String_Node_Str"" + returnName + ""String_Node_Str"");
          }
        }
        if (s.contains(JSON)) {
          mimeType.setSchema(returnName + ""String_Node_Str"");
          if (returnName != null) {
            mimeType.setExample(""String_Node_Str"" + returnName + ""String_Node_Str"");
            mimeType.setExampleOrigin(""String_Node_Str"" + returnName + ""String_Node_Str"");
          }
        }
      }
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
 else {
    Response value2=new Response();
    String text=documentation.getReturnInfo();
    if (!""String_Node_Str"".equals(text)) {
      value2.setDescription(text);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
}",0.9741476980121536
20604,"@Override public String[] getValues(String value){
  IMemberValuePair[] memberValuePairs;
  try {
    memberValuePairs=annotation.getMemberValuePairs();
    for (    IMemberValuePair pair : memberValuePairs) {
      if (pair.getMemberName().equals(value)) {
        Object value2=pair.getValue();
        if (value2 instanceof String) {
          return new String[]{(String)value2};
        }
        if (value2 instanceof Object[]) {
          String[] vv=new String[((Object[])value2).length];
          for (int a=0; a < vv.length; a++) {
            vv[a]=(String)((Object[])value2)[a];
          }
          return vv;
        }
      }
    }
  }
 catch (  JavaModelException e) {
    throw new IllegalStateException(e);
  }
  return null;
}","@Override public String[] getValues(String value){
  IMemberValuePair[] memberValuePairs;
  try {
    memberValuePairs=annotation.getMemberValuePairs();
    for (    IMemberValuePair pair : memberValuePairs) {
      if (pair.getMemberName().equals(value)) {
        int valueKind=pair.getValueKind();
        if (valueKind == IMemberValuePair.K_UNKNOWN) {
          ISourceRange sourceRange=annotation.getSourceRange();
          ICompilationUnit unit=(ICompilationUnit)annotation.getAncestor(IJavaElement.COMPILATION_UNIT);
          String source=unit.getSource();
          String substring=source.substring(sourceRange.getOffset(),sourceRange.getOffset() + sourceRange.getLength());
          ArrayList<String> mT=new ArrayList<String>();
          if (substring.toLowerCase().indexOf(""String_Node_Str"") != -1) {
            mT.add(""String_Node_Str"");
          }
          if (substring.toLowerCase().indexOf(""String_Node_Str"") != -1) {
            mT.add(""String_Node_Str"");
          }
          return mT.toArray(new String[mT.size()]);
        }
        Object value2=pair.getValue();
        if (value2 instanceof String) {
          return new String[]{(String)value2};
        }
        if (value2 instanceof Object[]) {
          String[] vv=new String[((Object[])value2).length];
          for (int a=0; a < vv.length; a++) {
            Object object=((Object[])value2)[a];
            if (object == null) {
              return null;
            }
            vv[a]=(String)object;
          }
          return vv;
        }
      }
    }
  }
 catch (  JavaModelException e) {
    throw new IllegalStateException(e);
  }
  return null;
}",0.6108333333333333
20605,"@Override public IDocInfo getBasicDocInfo(){
  try {
    IMethod iMethod=(IMethod)tm;
    ISourceRange javadocRange=iMethod.getJavadocRange();
    if (javadocRange != null) {
      String attachedJavadoc=iMethod.getCompilationUnit().getSource().substring(javadocRange.getOffset(),javadocRange.getOffset() + javadocRange.getLength());
      attachedJavadoc=attachedJavadoc.substring(3,attachedJavadoc.length() - 2);
      StringReader rr=new StringReader(attachedJavadoc);
      BufferedReader mm=new BufferedReader(rr);
      final StringBuilder bld=new StringBuilder();
      final HashMap<String,String> mmq=new HashMap<String,String>();
      while (true) {
        try {
          String s=mm.readLine();
          if (s == null) {
            break;
          }
          int indexOf=s.indexOf('*');
          if (indexOf != -1) {
            s=s.substring(indexOf + 1);
          }
          s=s.trim();
          if (s.startsWith(""String_Node_Str"")) {
            if (s.startsWith(PARAM)) {
              s=s.substring(PARAM.length());
              s=s.trim();
              int p=s.indexOf(' ');
              if (p != -1) {
                String pName=s.substring(0,p).trim();
                String pVal=s.substring(p).trim();
                mmq.put(pName,pVal);
              }
            }
            if (s.startsWith(RETURN)) {
              s=s.substring(RETURN.length());
              s=s.trim();
              mmq.put(RETURN,s);
            }
            continue;
          }
          bld.append(s);
          bld.append('\n');
        }
 catch (        IOException e) {
          break;
        }
      }
      return new IDocInfo(){
        @Override public String getDocumentation(        String pName){
          return mmq.get(pName);
        }
        @Override public String getDocumentation(){
          return bld.toString().trim();
        }
        @Override public String getReturnInfo(){
          return mmq.get(RETURN);
        }
      }
;
    }
    return null;
  }
 catch (  JavaModelException e) {
    throw new IllegalStateException();
  }
}","@Override public IDocInfo getBasicDocInfo(){
  try {
    IMethod iMethod=(IMethod)tm;
    ISourceRange javadocRange=iMethod.getJavadocRange();
    if (javadocRange != null) {
      String attachedJavadoc=iMethod.getCompilationUnit().getSource().substring(javadocRange.getOffset(),javadocRange.getOffset() + javadocRange.getLength());
      attachedJavadoc=attachedJavadoc.substring(3,attachedJavadoc.length() - 2);
      StringReader rr=new StringReader(attachedJavadoc);
      BufferedReader mm=new BufferedReader(rr);
      final StringBuilder bld=new StringBuilder();
      final HashMap<String,String> mmq=new HashMap<String,String>();
      while (true) {
        try {
          String s=mm.readLine();
          if (s == null) {
            break;
          }
          int indexOf=s.indexOf('*');
          if (indexOf != -1) {
            s=s.substring(indexOf + 1);
          }
          s=s.trim();
          if (s.startsWith(""String_Node_Str"")) {
            if (s.startsWith(PARAM)) {
              s=s.substring(PARAM.length());
              s=s.trim();
              int p=s.indexOf(' ');
              if (p != -1) {
                String pName=s.substring(0,p).trim();
                String pVal=s.substring(p).trim();
                mmq.put(pName,pVal);
              }
            }
            if (s.startsWith(RETURN)) {
              s=s.substring(RETURN.length());
              s=s.trim();
              mmq.put(RETURN,s);
            }
            continue;
          }
          bld.append(s);
          bld.append('\n');
        }
 catch (        IOException e) {
          break;
        }
      }
      return new IDocInfo(){
        @Override public String getDocumentation(        String pName){
          return mmq.get(pName);
        }
        @Override public String getDocumentation(){
          return bld.toString().trim();
        }
        @Override public String getReturnInfo(){
          return mmq.get(RETURN);
        }
      }
;
    }
    return new IDocInfo(){
      @Override public String getReturnInfo(){
        return ""String_Node_Str"";
      }
      @Override public String getDocumentation(      String pName){
        return ""String_Node_Str"";
      }
      @Override public String getDocumentation(){
        return ""String_Node_Str"";
      }
    }
;
  }
 catch (  JavaModelException e) {
    throw new IllegalStateException();
  }
}",0.9296403841858388
20606,"@Override public String getDocumentation(){
  return bld.toString().trim();
}","@Override public String getDocumentation(){
  return ""String_Node_Str"";
}",0.8533333333333334
20607,"@Override public String getReturnInfo(){
  return mmq.get(RETURN);
}","@Override public String getReturnInfo(){
  return ""String_Node_Str"";
}",0.8115942028985508
20608,"public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp)) {
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      remove.setRelativeUri(portableString);
      resources.put(relativeUri,createResource);
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path)) {
      Path removeFirstSegments=path.removeFirstSegments(rp.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(portableString);
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  resources.put(relativeUri,createResource);
}","public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp) && !path.equals(rp)) {
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      remove.setRelativeUri(portableString);
      resources.put(relativeUri,createResource);
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path)) {
      Path removeFirstSegments=path.removeFirstSegments(rp.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(portableString);
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  resources.put(relativeUri,createResource);
}",0.9943278502552468
20609,"private void visit(IMethodModel m,String annotationValue){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    annotationValue+=m.getAnnotationValue(PATH);
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=m.getBasicDocInfo();
    res.setDescription(documentation.getDocumentation());
    res.setRelativeUri(annotationValue);
    spec.addResource(res);
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation);
      }
    }
  }
}","private void visit(IMethodModel m,String annotationValue){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String annotationValue2=m.getAnnotationValue(PATH);
    if (annotationValue.endsWith(""String_Node_Str"")) {
      if (annotationValue2.startsWith(""String_Node_Str"")) {
        annotationValue2=annotationValue2.substring(1);
      }
    }
    annotationValue+=annotationValue2;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=m.getBasicDocInfo();
    res.setDescription(documentation.getDocumentation());
    res.setRelativeUri(annotationValue);
    spec.addResource(res);
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation);
      }
    }
  }
}",0.8506151142355008
20610,"private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      proceedType(pm.getType(),value2);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      MimeType value2=new MimeType();
      value2.setType(s);
      value.getBody().put(s,value2);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue != null) {
    Response value2=new Response();
    value2.setDescription(documentation.getReturnInfo());
    for (    String s : producesValue) {
      MimeType mimeType=new MimeType();
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
}","private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      proceedType(pm.getType(),value2);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue == null) {
    consumesValue=classConsumes;
  }
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType value2=new MimeType();
      value2.setType(s);
      value.getBody().put(s,value2);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue == null) {
    producesValue=classProduces;
  }
  if (producesValue != null) {
    Response value2=new Response();
    value2.setDescription(documentation.getReturnInfo());
    for (    String s : producesValue) {
      s=sanitizeMediaType(s);
      MimeType mimeType=new MimeType();
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
}",0.9535545023696682
20611,"public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp) && !path.equals(rp)) {
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      remove.setRelativeUri(portableString);
      resources.put(relativeUri,createResource);
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path) && path.segmentCount() > 1) {
      Path removeFirstSegments=path.removeFirstSegments(rp.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(portableString);
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  resources.put(relativeUri,createResource);
}","public static void placeResource(Map<String,Resource> resources,Resource createResource){
  String relativeUri=createResource.getRelativeUri();
  Path path=new Path(relativeUri);
  boolean restructure=false;
  for (  String s : new HashSet<String>(resources.keySet())) {
    Path rp=new Path(s);
    if (path.isPrefixOf(rp) && !path.equals(rp)) {
      restructure=true;
      Resource remove=resources.remove(s);
      Path removeFirstSegments=rp.removeFirstSegments(path.segmentCount());
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      remove.setRelativeUri(portableString);
      Resource old=resources.put(relativeUri,createResource);
      if (old != null) {
        createResource.getActions().putAll(old.getActions());
      }
      Map<String,UriParameter> uriParameters=createResource.getUriParameters();
      Map<String,UriParameter> uriParameters2=remove.getUriParameters();
      for (      String q : uriParameters.keySet()) {
        uriParameters2.remove(q);
      }
      createResource.getResources().put(portableString,remove);
      Resource put=resources.put(relativeUri,createResource);
      if (put != null) {
        createResource.getActions().putAll(put.getActions());
      }
    }
  }
  if (restructure) {
    return;
  }
  for (  String s : resources.keySet()) {
    Path rp=new Path(s);
    if (rp.isPrefixOf(path) && path.segmentCount() - rp.segmentCount() >= 1) {
      Path removeFirstSegments2=path.removeFirstSegments(rp.segmentCount());
      Path removeFirstSegments=removeFirstSegments2;
      String portableString=""String_Node_Str"" + removeFirstSegments.toPortableString();
      createResource.setRelativeUri(portableString);
      Resource resource=resources.get(s);
      Map<String,UriParameter> uriParameters=resource.getUriParameters();
      Map<String,UriParameter> uriParameters2=createResource.getUriParameters();
      for (      String sa : uriParameters.keySet()) {
        uriParameters2.remove(sa);
      }
      placeResource(resource.getResources(),createResource);
      return;
    }
  }
  Resource put=resources.put(relativeUri,createResource);
  if (put != null) {
    createResource.getActions().putAll(put.getActions());
    createResource.getResources().putAll(put.getResources());
  }
}",0.8784773060029283
20612,"private void visit(IMethodModel m,String annotationValue){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String annotationValue2=m.getAnnotationValue(PATH);
    if (annotationValue.endsWith(""String_Node_Str"")) {
      if (annotationValue2.startsWith(""String_Node_Str"")) {
        annotationValue2=annotationValue2.substring(1);
      }
    }
    annotationValue+=annotationValue2;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=m.getBasicDocInfo();
    res.setDescription(documentation.getDocumentation());
    res.setRelativeUri(annotationValue);
    spec.addResource(res);
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation);
      }
    }
  }
}","private void visit(IMethodModel m,String annotationValue){
  boolean hasPath=m.hasAnnotation(PATH);
  if (hasPath) {
    String annotationValue2=m.getAnnotationValue(PATH);
    if (annotationValue.endsWith(""String_Node_Str"")) {
      if (annotationValue2.startsWith(""String_Node_Str"")) {
        annotationValue2=annotationValue2.substring(1);
      }
    }
    annotationValue+=annotationValue2;
  }
  boolean isWs=hasPath;
  for (  ActionType q : ActionType.values()) {
    boolean hasAnnotation=m.hasAnnotation(q.name());
    isWs|=hasAnnotation;
  }
  if (isWs) {
    Resource res=new Resource();
    IDocInfo documentation=m.getBasicDocInfo();
    res.setDescription(documentation.getDocumentation());
    if (hasPath) {
      ITypeModel returnedType=m.getReturnedType();
      if (returnedType != null) {
        if (consumedTypes.add(returnedType)) {
          ResourceVisitor resourceVisitor=new ResourceVisitor();
          resourceVisitor.consumedTypes.addAll(this.consumedTypes);
          resourceVisitor.basePath=annotationValue;
          resourceVisitor.spec=this.spec;
          resourceVisitor.visit(returnedType);
        }
      }
    }
    if (annotationValue.endsWith(""String_Node_Str"")) {
      res.setRelativeUri(annotationValue.substring(0,annotationValue.length() - 1));
    }
 else {
      res.setRelativeUri(annotationValue);
    }
    for (    ActionType q : ActionType.values()) {
      boolean hasAnnotation=m.hasAnnotation(q.name());
      if (hasAnnotation) {
        addMethod(q,res,m,documentation);
      }
    }
    spec.addResource(res);
  }
}",0.687328364064339
20613,"private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      proceedType(pm.getType(),value2);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue == null) {
    consumesValue=classConsumes;
  }
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType value2=new MimeType();
      value2.setType(s);
      value.getBody().put(s,value2);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue == null) {
    producesValue=classProduces;
  }
  if (producesValue != null) {
    Response value2=new Response();
    value2.setDescription(documentation.getReturnInfo());
    for (    String s : producesValue) {
      s=sanitizeMediaType(s);
      MimeType mimeType=new MimeType();
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
}","private void addMethod(ActionType q,Resource res,IMethodModel m,IDocInfo documentation){
  Action value=new Action();
  value.setType(q);
  res.getActions().put(q,value);
  IParameterModel[] parameters=m.getParameters();
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(QUERY_PARAM)) {
      String annotationValue=pm.getAnnotationValue(QUERY_PARAM);
      String type=pm.getType();
      QueryParameter value2=new QueryParameter();
      proceedType(type,value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getQueryParameters().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(HEADER_PARAM)) {
      String annotationValue=pm.getAnnotationValue(HEADER_PARAM);
      Header value2=new Header();
      proceedType(pm.getType(),value2);
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      value.getHeaders().put(annotationValue,value2);
    }
  }
  for (  IParameterModel pm : parameters) {
    if (pm.hasAnnotation(PATH_PARAM)) {
      String annotationValue=pm.getAnnotationValue(PATH_PARAM);
      UriParameter value2=new UriParameter();
      value2.setDescription(documentation.getDocumentation(pm.getName()));
      proceedType(pm.getType(),value2);
      res.getUriParameters().put(annotationValue,value2);
    }
  }
  String[] consumesValue=m.getAnnotationValues(CONSUMES);
  if (consumesValue == null) {
    consumesValue=classConsumes;
  }
  if (consumesValue != null) {
    for (    String s : consumesValue) {
      s=sanitizeMediaType(s);
      MimeType value2=new MimeType();
      value2.setType(s);
      value.getBody().put(s,value2);
    }
  }
  String[] producesValue=m.getAnnotationValues(PRODUCES);
  if (producesValue == null) {
    producesValue=classProduces;
  }
  if (producesValue != null) {
    Response value2=new Response();
    value2.setDescription(documentation.getReturnInfo());
    for (    String s : producesValue) {
      s=sanitizeMediaType(s);
      MimeType mimeType=new MimeType();
      mimeType.setType(s);
      value2.getBody().put(s,mimeType);
    }
    value.getResponses().put(""String_Node_Str"",value2);
  }
 else {
    Response value2=new Response();
    value2.setDescription(documentation.getReturnInfo());
    value.getResponses().put(""String_Node_Str"",value2);
  }
}",0.9646133682830932
20614,"private static String getFormat(int integerDigits,int fractionDigits,int maxFractionDigits){
  int width=integerDigits + (fractionDigits > 0 ? 1 : 0) + fractionDigits;
  int padding=maxFractionDigits - fractionDigits + (fractionDigits == 0 ? 1 : 0);
  return ""String_Node_Str"" + width + ""String_Node_Str""+ fractionDigits+ ""String_Node_Str""+ repeat(' ',padding);
}","private static String getFormat(int integerDigits,int fractionDigits,int maxFractionDigits){
  int width=integerDigits + (fractionDigits > 0 ? 1 : 0) + fractionDigits;
  int padding=maxFractionDigits - fractionDigits;
  if (maxFractionDigits > 0 && fractionDigits == 0)   padding+=1;
  return ""String_Node_Str"" + width + ""String_Node_Str""+ fractionDigits+ ""String_Node_Str""+ repeat(' ',padding);
}",0.8921052631578947
20615,"private Instruments(List<Instrument> values,int priceIntegerDigits,int maxPriceFractionDigits,int sizeIntegerDigits,int maxSizeFractionDigits){
  this.valuesByString=new HashMap<>();
  this.valuesByLong=new Long2ObjectOpenHashMap<>();
  for (  Instrument value : values) {
    valuesByString.put(value.asString(),value);
    valuesByLong.put(value.asLong(),value);
  }
  this.maxPriceFractionDigits=maxPriceFractionDigits;
  this.maxSizeFractionDigits=maxSizeFractionDigits;
  this.priceWidth=priceIntegerDigits + 1 + maxPriceFractionDigits;
  this.sizeWidth=sizeIntegerDigits + 1 + maxSizeFractionDigits;
  this.pricePlaceholder=placeholder(priceIntegerDigits,maxPriceFractionDigits);
  this.sizePlaceholder=placeholder(sizeIntegerDigits,maxSizeFractionDigits);
}","private Instruments(List<Instrument> values,int priceIntegerDigits,int maxPriceFractionDigits,int sizeIntegerDigits,int maxSizeFractionDigits){
  this.valuesByString=new HashMap<>();
  this.valuesByLong=new Long2ObjectOpenHashMap<>();
  for (  Instrument value : values) {
    valuesByString.put(value.asString(),value);
    valuesByLong.put(value.asLong(),value);
  }
  this.maxPriceFractionDigits=maxPriceFractionDigits;
  this.maxSizeFractionDigits=maxSizeFractionDigits;
  this.priceWidth=priceIntegerDigits + (maxPriceFractionDigits > 0 ? 1 : 0) + maxPriceFractionDigits;
  this.sizeWidth=sizeIntegerDigits + (maxSizeFractionDigits > 0 ? 1 : 0) + maxSizeFractionDigits;
  this.pricePlaceholder=placeholder(priceIntegerDigits,maxPriceFractionDigits);
  this.sizePlaceholder=placeholder(sizeIntegerDigits,maxSizeFractionDigits);
}",0.9567939887288668
20616,"@Test public void priceFractionDigits(){
  assertEquals(2,INSTRUMENTS.get(""String_Node_Str"").getPriceFractionDigits());
}","@Test public void priceFractionDigits(){
  assertEquals(2,FRACTIONS.get(""String_Node_Str"").getPriceFractionDigits());
}",0.9416666666666668
20617,"@Test public void priceFormat(){
  assertEquals(""String_Node_Str"",INSTRUMENTS.get(""String_Node_Str"").getPriceFormat());
}","@Test public void priceFormat(){
  assertEquals(""String_Node_Str"",FRACTIONS.get(""String_Node_Str"").getPriceFormat());
}",0.9416666666666668
20618,"@Test public void sizeWidth(){
  assertEquals(17,INSTRUMENTS.getSizeWidth());
}","@Test public void sizeWidth(){
  assertEquals(17,FRACTIONS.getSizeWidth());
}",0.9102564102564102
20619,"@Test public void maxPriceFractionDigits(){
  assertEquals(6,INSTRUMENTS.getMaxPriceFractionDigits());
}","@Test public void maxPriceFractionDigits(){
  assertEquals(6,FRACTIONS.getMaxPriceFractionDigits());
}",0.9320388349514565
20620,"@Test public void maxSizeFractionDigits(){
  assertEquals(8,INSTRUMENTS.getMaxSizeFractionDigits());
}","@Test public void maxSizeFractionDigits(){
  assertEquals(8,FRACTIONS.getMaxSizeFractionDigits());
}",0.9306930693069309
20621,"@Test public void priceWidth(){
  assertEquals(11,INSTRUMENTS.getPriceWidth());
}","@Test public void priceWidth(){
  assertEquals(11,FRACTIONS.getPriceWidth());
}",0.9125
20622,"@Test public void priceFactor(){
  assertEquals(100.0,INSTRUMENTS.get(""String_Node_Str"").getPriceFactor(),0.0);
}","@Test public void priceFactor(){
  assertEquals(100.0,FRACTIONS.get(""String_Node_Str"").getPriceFactor(),0.0);
}",0.9375
20623,"@Test public void sizePlaceholder(){
  assertEquals(""String_Node_Str"",INSTRUMENTS.getSizePlaceholder());
}","@Test public void sizePlaceholder(){
  assertEquals(""String_Node_Str"",FRACTIONS.getSizePlaceholder());
}",0.9333333333333332
20624,"@Test public void pricePlaceholder(){
  assertEquals(""String_Node_Str"",INSTRUMENTS.getPricePlaceholder());
}","@Test public void pricePlaceholder(){
  assertEquals(""String_Node_Str"",FRACTIONS.getPricePlaceholder());
}",0.9345794392523364
20625,"public static void main(String[] args){
  if (args.length < 1)   usage();
  Command command=COMMANDS.get(args[0]);
  if (command == null)   error(""String_Node_Str"" + command);
  List<String> arguments=asList(args).subList(1,args.length);
  try {
    command.execute(arguments);
  }
 catch (  IOException e) {
    fatal(e);
  }
}","public static void main(String[] args){
  if (args.length < 1)   usage();
  Command command=COMMANDS.get(args[0]);
  if (command == null)   error(""String_Node_Str"" + args[0]);
  List<String> arguments=asList(args).subList(1,args.length);
  try {
    command.execute(arguments);
  }
 catch (  IOException e) {
    fatal(e);
  }
}",0.9786585365853658
20626,"@Override public boolean onTouchEvent(MotionEvent event){
  if (touchable) {
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
      for (int i=0; i < getChildCount(); i++) {
        View c=getChildAt(i);
        if (c instanceof GestureLockView) {
          ((GestureLockView)c).setLockerState(GestureLockView.LockerState.LOCKER_STATE_NORMAL);
          ((GestureLockView)c).setArrow(-1);
        }
      }
    gesturePath=null;
  lastX=(int)event.getX();
lastY=(int)event.getY();
lastPathX=lastX;
lastPathY=lastY;
paint.setColor(0x66FFFFFF);
break;
case MotionEvent.ACTION_MOVE:
lastX=(int)event.getX();
lastY=(int)event.getY();
int cId=calculateChildIdByCoords(lastX,lastY);
View child=findViewById(cId + 1);
boolean checked=false;
for (int id : gesturesContainer) {
if (id == cId) {
checked=true;
break;
}
}
if (child != null && child instanceof GestureLockView && checkChildInCoords(lastX,lastY,child)) {
((GestureLockView)child).setLockerState(GestureLockView.LockerState.LOCKER_STATE_SELECTED);
if (!checked) {
int checkedX=child.getLeft() + child.getWidth() / 2;
int checkedY=child.getTop() + child.getHeight() / 2;
if (gesturePath == null) {
gesturePath=new Path();
gesturePath.moveTo(checkedX,checkedY);
}
 else {
gesturePath.lineTo(checkedX,checkedY);
}
gesturesContainer[gestureCursor]=cId;
gestureCursor++;
lastPathX=checkedX;
lastPathY=checkedY;
if (onGestureEventListener != null) onGestureEventListener.onBlockSelected(cId);
}
}
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (gesturesContainer[0] != -1) {
boolean matched=false;
int length=0;
for (int i : gesturesContainer) {
if (i != -1) length++;
 else break;
}
if (length != defaultGestures.length) matched=false;
 else for (int j=0; j < defaultGestures.length; j++) {
if (gesturesContainer[j] == defaultGestures[j]) {
matched=true;
}
 else {
matched=false;
break;
}
}
if (!matched && mode != MODE_EDIT) {
unmatchedCount++;
paint.setColor(0x66FF0000);
for (int k=0; k < gesturesContainer.length; k++) {
View selectedChild=findViewById(gesturesContainer[k] + 1);
if (selectedChild != null && selectedChild instanceof GestureLockView) {
((GestureLockView)selectedChild).setLockerState(GestureLockView.LockerState.LOCKER_STATE_ERROR);
if (k < gesturesContainer.length - 1 && gesturesContainer[k + 1] != -1) {
View nextChild=findViewById(gesturesContainer[k + 1] + 1);
if (nextChild != null) {
int dx=nextChild.getLeft() - selectedChild.getLeft();
int dy=nextChild.getTop() - selectedChild.getTop();
int angle=(int)Math.toDegrees(Math.atan2(dy,dx)) + 90;
((GestureLockView)selectedChild).setArrow(angle);
}
}
}
}
}
 else {
unmatchedCount=0;
}
if (onGestureEventListener != null) {
onGestureEventListener.onGestureEvent(matched);
if (unmatchedCount >= unmatchedBoundary) {
onGestureEventListener.onUnmatchedExceedBoundary();
unmatchedCount=0;
}
}
}
gestureCursor=0;
gesturesContainer=negativeGestures.clone();
lastX=lastPathX;
lastY=lastPathY;
invalidate();
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (touchable) {
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
      for (int i=0; i < getChildCount(); i++) {
        View c=getChildAt(i);
        if (c instanceof GestureLockView) {
          ((GestureLockView)c).setLockerState(GestureLockView.LockerState.LOCKER_STATE_NORMAL);
          ((GestureLockView)c).setArrow(-1);
        }
      }
    gesturePath=null;
  lastX=(int)event.getX();
lastY=(int)event.getY();
lastPathX=lastX;
lastPathY=lastY;
paint.setColor(0x66FFFFFF);
break;
case MotionEvent.ACTION_MOVE:
lastX=(int)event.getX();
lastY=(int)event.getY();
int cId=calculateChildIdByCoords(lastX,lastY);
View child=findViewById(cId + 1);
boolean checked=false;
for (int id : gesturesContainer) {
if (id == cId) {
checked=true;
break;
}
}
if (child != null && child instanceof GestureLockView && checkChildInCoords(lastX,lastY,child)) {
((GestureLockView)child).setLockerState(GestureLockView.LockerState.LOCKER_STATE_SELECTED);
if (!checked) {
int checkedX=child.getLeft() + child.getWidth() / 2;
int checkedY=child.getTop() + child.getHeight() / 2;
if (gesturePath == null) {
gesturePath=new Path();
gesturePath.moveTo(checkedX,checkedY);
}
 else {
gesturePath.lineTo(checkedX,checkedY);
}
gesturesContainer[gestureCursor]=cId;
gestureCursor++;
lastPathX=checkedX;
lastPathY=checkedY;
if (onGestureEventListener != null) onGestureEventListener.onBlockSelected(cId);
}
}
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (gesturesContainer[0] != -1) {
boolean matched=false;
if (gesturesContainer.length > defaultGestures.length && gesturesContainer[defaultGestures.length] != -1) {
matched=false;
}
 else {
for (int j=0; j < defaultGestures.length; j++) {
if (gesturesContainer[j] == defaultGestures[j]) {
matched=true;
}
 else {
matched=false;
break;
}
}
}
if (!matched && mode != MODE_EDIT) {
unmatchedCount++;
paint.setColor(0x66FF0000);
for (int k=0; k < gesturesContainer.length; k++) {
View selectedChild=findViewById(gesturesContainer[k] + 1);
if (selectedChild != null && selectedChild instanceof GestureLockView) {
((GestureLockView)selectedChild).setLockerState(GestureLockView.LockerState.LOCKER_STATE_ERROR);
if (k < gesturesContainer.length - 1 && gesturesContainer[k + 1] != -1) {
View nextChild=findViewById(gesturesContainer[k + 1] + 1);
if (nextChild != null) {
int dx=nextChild.getLeft() - selectedChild.getLeft();
int dy=nextChild.getTop() - selectedChild.getTop();
int angle=(int)Math.toDegrees(Math.atan2(dy,dx)) + 90;
((GestureLockView)selectedChild).setArrow(angle);
}
}
}
}
}
 else {
unmatchedCount=0;
}
if (onGestureEventListener != null) {
onGestureEventListener.onGestureEvent(matched);
if (unmatchedCount >= unmatchedBoundary) {
onGestureEventListener.onUnmatchedExceedBoundary();
unmatchedCount=0;
}
}
}
gestureCursor=0;
gesturesContainer=negativeGestures.clone();
lastX=lastPathX;
lastY=lastPathY;
invalidate();
break;
}
}
return true;
}",0.9576101468624834
20627,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  mWidth=w;
  mHeight=h;
  mCenterX=mWidth / 2;
  mCenterY=mHeight / 2;
  mRadius=mCenterX > mCenterY ? mCenterY : mCenterX;
  float r=mRadius * middleRate;
  middleOval.left=mCenterX - r;
  middleOval.right=mCenterX + r;
  middleOval.top=mCenterY - r;
  middleOval.bottom=mCenterY + r;
  arrowDistance=(int)(mRadius * arrowDistanceRate);
  int length=(int)(mRadius * arrowRate);
  arrow.reset();
  arrow.moveTo(mCenterX - length,mCenterY + length - arrowDistance);
  arrow.lineTo(mCenterX,mCenterY - arrowDistance);
  arrow.lineTo(mCenterX + length,mCenterY + length - arrowDistance);
  arrow.close();
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mWidth=w;
  mHeight=h;
  mCenterX=mWidth / 2;
  mCenterY=mHeight / 2;
  mRadius=mCenterX > mCenterY ? mCenterY : mCenterX;
  float r=mRadius * middleRate;
  middleOval.left=mCenterX - r;
  middleOval.right=mCenterX + r;
  middleOval.top=mCenterY - r;
  middleOval.bottom=mCenterY + r;
  arrowDistance=(int)(mRadius * arrowDistanceRate);
  int length=(int)(mRadius * arrowRate);
  arrow.reset();
  arrow.moveTo(mCenterX - length,mCenterY + length - arrowDistance);
  arrow.lineTo(mCenterX,mCenterY - arrowDistance);
  arrow.lineTo(mCenterX + length,mCenterY + length - arrowDistance);
  arrow.close();
}",0.9726224783861672
20628,"@Override public boolean onTouchEvent(MotionEvent event){
  if (touchable) {
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
      for (int i=0; i < getChildCount(); i++) {
        View c=getChildAt(i);
        if (c instanceof GestureLockView) {
          ((GestureLockView)c).setLockerState(GestureLockView.LockerState.LOCKER_STATE_NORMAL);
          ((GestureLockView)c).setArrow(-1);
        }
      }
    gesturePath=null;
  lastX=(int)event.getX();
lastY=(int)event.getY();
lastPathX=lastX;
lastPathY=lastY;
paint.setColor(0x66FFFFFF);
break;
case MotionEvent.ACTION_MOVE:
lastX=(int)event.getX();
lastY=(int)event.getY();
int cId=calculateChildIdByCoords(lastX,lastY);
View child=findViewById(cId + 1);
boolean checked=false;
for (int id : gesturesContainer) {
if (id == cId) {
checked=true;
break;
}
}
if (child != null && child instanceof GestureLockView && checkChildInCoords(lastX,lastY,child)) {
((GestureLockView)child).setLockerState(GestureLockView.LockerState.LOCKER_STATE_SELECTED);
if (!checked) {
int checkedX=child.getLeft() + child.getWidth() / 2;
int checkedY=child.getTop() + child.getHeight() / 2;
if (gesturePath == null) {
gesturePath=new Path();
gesturePath.moveTo(checkedX,checkedY);
}
 else {
gesturePath.lineTo(checkedX,checkedY);
}
gesturesContainer[gestureCursor]=cId;
gestureCursor++;
lastPathX=checkedX;
lastPathY=checkedY;
if (onGestureEventListener != null) onGestureEventListener.onBlockSelected(cId);
}
}
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (gesturesContainer[0] != -1) {
boolean matched=false;
for (int j=0; j < defaultGestures.length; j++) {
if (gesturesContainer[j] == defaultGestures[j]) {
matched=true;
}
 else {
matched=false;
break;
}
}
if (!matched && mode != MODE_EDIT) {
unmatchedCount++;
paint.setColor(0x66FF0000);
for (int k : gesturesContainer) {
View selectedChild=findViewById(k + 1);
if (selectedChild != null && selectedChild instanceof GestureLockView) {
((GestureLockView)selectedChild).setLockerState(GestureLockView.LockerState.LOCKER_STATE_ERROR);
if (k < gesturesContainer.length - 1 && gesturesContainer[k + 1] != -1) {
View nextChild=findViewById(gesturesContainer[k + 1] + 1);
if (nextChild != null) {
int dx=nextChild.getLeft() - selectedChild.getLeft();
int dy=nextChild.getTop() - selectedChild.getTop();
int angle=(int)Math.toDegrees(Math.atan2(dy,dx)) + 90;
((GestureLockView)selectedChild).setArrow(angle);
}
}
}
}
}
 else {
unmatchedCount=0;
}
if (onGestureEventListener != null) {
onGestureEventListener.onGestureEvent(matched);
if (unmatchedCount >= unmatchedBoundary) {
onGestureEventListener.onUnmatchedExceedBoundary();
unmatchedCount=0;
}
}
}
gestureCursor=0;
gesturesContainer=negativeGestures.clone();
lastX=lastPathX;
lastY=lastPathY;
invalidate();
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (touchable) {
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
      for (int i=0; i < getChildCount(); i++) {
        View c=getChildAt(i);
        if (c instanceof GestureLockView) {
          ((GestureLockView)c).setLockerState(GestureLockView.LockerState.LOCKER_STATE_NORMAL);
          ((GestureLockView)c).setArrow(-1);
        }
      }
    gesturePath=null;
  lastX=(int)event.getX();
lastY=(int)event.getY();
lastPathX=lastX;
lastPathY=lastY;
paint.setColor(0x66FFFFFF);
break;
case MotionEvent.ACTION_MOVE:
lastX=(int)event.getX();
lastY=(int)event.getY();
int cId=calculateChildIdByCoords(lastX,lastY);
View child=findViewById(cId + 1);
boolean checked=false;
for (int id : gesturesContainer) {
if (id == cId) {
checked=true;
break;
}
}
if (child != null && child instanceof GestureLockView && checkChildInCoords(lastX,lastY,child)) {
((GestureLockView)child).setLockerState(GestureLockView.LockerState.LOCKER_STATE_SELECTED);
if (!checked) {
int checkedX=child.getLeft() + child.getWidth() / 2;
int checkedY=child.getTop() + child.getHeight() / 2;
if (gesturePath == null) {
gesturePath=new Path();
gesturePath.moveTo(checkedX,checkedY);
}
 else {
gesturePath.lineTo(checkedX,checkedY);
}
gesturesContainer[gestureCursor]=cId;
gestureCursor++;
lastPathX=checkedX;
lastPathY=checkedY;
if (onGestureEventListener != null) onGestureEventListener.onBlockSelected(cId);
}
}
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (gesturesContainer[0] != -1) {
boolean matched=false;
for (int j=0; j < defaultGestures.length; j++) {
if (gesturesContainer[j] == defaultGestures[j]) {
matched=true;
}
 else {
matched=false;
break;
}
}
if (!matched && mode != MODE_EDIT) {
unmatchedCount++;
paint.setColor(0x66FF0000);
for (int k=0; k < gesturesContainer.length; k++) {
View selectedChild=findViewById(gesturesContainer[k] + 1);
if (selectedChild != null && selectedChild instanceof GestureLockView) {
((GestureLockView)selectedChild).setLockerState(GestureLockView.LockerState.LOCKER_STATE_ERROR);
if (k < gesturesContainer.length - 1 && gesturesContainer[k + 1] != -1) {
View nextChild=findViewById(gesturesContainer[k + 1] + 1);
if (nextChild != null) {
int dx=nextChild.getLeft() - selectedChild.getLeft();
int dy=nextChild.getTop() - selectedChild.getTop();
int angle=(int)Math.toDegrees(Math.atan2(dy,dx)) + 90;
((GestureLockView)selectedChild).setArrow(angle);
}
}
}
}
}
 else {
unmatchedCount=0;
}
if (onGestureEventListener != null) {
onGestureEventListener.onGestureEvent(matched);
if (unmatchedCount >= unmatchedBoundary) {
onGestureEventListener.onUnmatchedExceedBoundary();
unmatchedCount=0;
}
}
}
gestureCursor=0;
gesturesContainer=negativeGestures.clone();
lastX=lastPathX;
lastY=lastPathY;
invalidate();
break;
}
}
return true;
}",0.9862579281183932
20629,"@Override public void dispatchDraw(Canvas canvas){
  super.dispatchDraw(canvas);
  if (gesturePath != null) {
    canvas.drawPath(gesturePath,paint);
  }
  if (gesturesContainer[0] != -1)   canvas.drawLine(lastPathX,lastPathY,lastX,lastY,paint);
}","@Override public void dispatchDraw(Canvas canvas){
  if (gesturePath != null) {
    canvas.drawPath(gesturePath,paint);
  }
  if (gesturesContainer[0] != -1)   canvas.drawLine(lastPathX,lastPathY,lastX,lastY,paint);
  super.dispatchDraw(canvas);
}",0.8785425101214575
20630,"public GestureLockView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  paint=new Paint(Paint.ANTI_ALIAS_FLAG);
}","public GestureLockView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
}",0.8359375
20631,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  width=w;
  height=h;
  centerX=width / 2;
  centerY=height / 2;
  radius=width > height ? height : width;
  radius/=2;
  if (arrow == null) {
    arrowDistance=(int)(radius * arrowDistanceRate);
    arrow=getArrowShape(centerX,centerY);
    if (arrow != null)     arrow.offset(0,-arrowDistance);
  }
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  mWidth=w;
  mHeight=h;
  mCenterX=mWidth / 2;
  mCenterY=mHeight / 2;
}",0.4748201438848921
20632,"@Override public void onDraw(Canvas canvas){
  doDraw(mState,canvas);
  if (errorArrow != -1 && arrow != null) {
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(0xFFFF0000);
    canvas.save();
    canvas.rotate(errorArrow,centerX,centerY);
    canvas.drawPath(arrow,paint);
    canvas.restore();
  }
}","@Override public void onDraw(Canvas canvas){
  doDraw(mState,canvas);
  if (errorArrow != -1) {
    canvas.save();
    canvas.rotate(errorArrow,mCenterX,mCenterY);
    doArrowDraw(canvas);
    canvas.restore();
  }
}",0.55893536121673
20633,"public NexusStyleLockView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
}","public NexusStyleLockView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  arrow=new Path();
}",0.9166666666666666
20634,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mWidth=w;
  mHeight=h;
  mCenterX=w / 2;
  mCenterY=h / 2;
  mRadius=w > h ? h : w;
  mRadius/=2;
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mWidth=w;
  mHeight=h;
  mCenterX=w / 2;
  mCenterY=h / 2;
  mRadius=w > h ? h : w;
  mRadius/=2;
  arrowDistance=(int)(mRadius * arrowDistanceRate);
  int length=(int)(mRadius * arrowRate);
  arrow.reset();
  arrow.moveTo(mCenterX - length,mCenterY + length - arrowDistance);
  arrow.lineTo(mCenterX,mCenterY - arrowDistance);
  arrow.lineTo(mCenterX + length,mCenterY + length - arrowDistance);
  arrow.close();
}",0.5706521739130435
20635,"protected void doDraw(LockerState state,Canvas canvas){
switch (state) {
case LOCKER_STATE_NORMAL:
    mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(COLOR_NORMAL);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
case LOCKER_STATE_SELECTED:
mPaint.setStyle(Paint.Style.STROKE);
mPaint.setColor(COLOR_NORMAL);
mPaint.setStrokeWidth(mRadius * outerWidthRate);
canvas.drawCircle(mCenterX,mCenterY,mRadius * outerRate,mPaint);
mPaint.setStrokeWidth(2);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
case LOCKER_STATE_ERROR:
mPaint.setStyle(Paint.Style.STROKE);
mPaint.setColor(COLOR_ERROR);
mPaint.setStrokeWidth(mRadius * outerWidthRate);
canvas.drawCircle(mCenterX,mCenterY,mRadius * outerRate,mPaint);
mPaint.setStrokeWidth(2);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
}
}","@Override protected void doDraw(LockerState state,Canvas canvas){
switch (state) {
case LOCKER_STATE_NORMAL:
    mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(COLOR_NORMAL);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
case LOCKER_STATE_SELECTED:
mPaint.setStyle(Paint.Style.STROKE);
mPaint.setColor(COLOR_NORMAL);
mPaint.setStrokeWidth(mRadius * outerWidthRate);
canvas.drawCircle(mCenterX,mCenterY,mRadius * outerRate,mPaint);
mPaint.setStrokeWidth(2);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
case LOCKER_STATE_ERROR:
mPaint.setStyle(Paint.Style.STROKE);
mPaint.setColor(COLOR_ERROR);
mPaint.setStrokeWidth(mRadius * outerWidthRate);
canvas.drawCircle(mCenterX,mCenterY,mRadius * outerRate,mPaint);
mPaint.setStrokeWidth(2);
canvas.drawCircle(mCenterX,mCenterY,mRadius * innerRate,mPaint);
break;
}
}",0.9942062572421784
20636,"@Override public String getResolvedEntity(String publicId,String systemId){
  getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId));
  final String superResolvedEntity=super.getResolvedEntity(publicId,systemId);
  getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId,superResolvedEntity));
  if (superResolvedEntity != null) {
    systemId=superResolvedEntity;
  }
  try {
    final URI uri=new URI(systemId);
    if (URI_SCHEME_MAVEN.equals(uri.getScheme())) {
      getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId));
      final String schemeSpecificPart=uri.getSchemeSpecificPart();
      try {
        final DependencyResource dependencyResource=DependencyResource.valueOf(schemeSpecificPart);
        try {
          final URL url=dependencyResourceResolver.resolveDependencyResource(dependencyResource);
          String resolved=url.toString();
          getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId,resolved));
          return resolved;
        }
 catch (        Exception ex) {
          getLog().error(MessageFormat.format(""String_Node_Str"",dependencyResource));
        }
      }
 catch (      IllegalArgumentException iaex) {
        getLog().error(MessageFormat.format(""String_Node_Str"",schemeSpecificPart));
      }
      getLog().error(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
      return superResolvedEntity;
    }
 else {
      getLog().debug(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
      return superResolvedEntity;
    }
  }
 catch (  URISyntaxException urisex) {
    getLog().debug(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
    return superResolvedEntity;
  }
}","@Override public String getResolvedEntity(String publicId,String systemId){
  getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId));
  final String superResolvedEntity=super.getResolvedEntity(publicId,systemId);
  getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId,superResolvedEntity));
  if (superResolvedEntity != null) {
    systemId=superResolvedEntity;
  }
  if (systemId == null) {
    return null;
  }
  try {
    final URI uri=new URI(systemId);
    if (URI_SCHEME_MAVEN.equals(uri.getScheme())) {
      getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId));
      final String schemeSpecificPart=uri.getSchemeSpecificPart();
      try {
        final DependencyResource dependencyResource=DependencyResource.valueOf(schemeSpecificPart);
        try {
          final URL url=dependencyResourceResolver.resolveDependencyResource(dependencyResource);
          String resolved=url.toString();
          getLog().debug(MessageFormat.format(""String_Node_Str"",publicId,systemId,resolved));
          return resolved;
        }
 catch (        Exception ex) {
          getLog().error(MessageFormat.format(""String_Node_Str"",dependencyResource));
        }
      }
 catch (      IllegalArgumentException iaex) {
        getLog().error(MessageFormat.format(""String_Node_Str"",schemeSpecificPart));
      }
      getLog().error(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
      return superResolvedEntity;
    }
 else {
      getLog().debug(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
      return superResolvedEntity;
    }
  }
 catch (  URISyntaxException urisex) {
    getLog().debug(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",publicId,systemId,superResolvedEntity));
    return superResolvedEntity;
  }
}",0.9874566319722444
20637,"@Override public ManagedRepository createManagedInstance(ManagedRepositoryConfiguration cfg){
}","@Override public ManagedRepository createManagedInstance(ManagedRepositoryConfiguration cfg){
  MavenManagedRepository repo=new MavenManagedRepository(cfg.getId(),cfg.getName());
  try {
    if (cfg.getLocation().startsWith(""String_Node_Str"")) {
      repo.setLocation(new URI(cfg.getLocation()));
    }
 else {
      repo.setLocation(new URI(""String_Node_Str"" + cfg.getLocation()));
    }
  }
 catch (  URISyntaxException e) {
    log.error(""String_Node_Str"" + cfg.getLocation());
  }
  cfg.getRefreshCronExpression();
  StagingRepositoryFeature feature=repo.getFeature(StagingRepositoryFeature.class).get();
  return null;
}",0.2635228848821082
20638,"@Override public RepositorySession createSession(){
  try {
    MetadataRepository metadataRepository=new JcrMetadataRepository(metadataFacetFactories,repository);
    return new RepositorySession(metadataRepository,metadataResolver);
  }
 catch (  RepositoryException e) {
    throw new RuntimeException(e);
  }
}","@Override public RepositorySession createSession(){
  try {
    MetadataRepository metadataRepository=new JcrMetadataRepository(metadataFacetFactories,repository);
    return new RepositorySession(metadataRepository,getMetadataResolver());
  }
 catch (  RepositoryException e) {
    throw new RuntimeException(e);
  }
}",0.9889415481832544
20639,"@Test public void testHome(){
  getWebDriver().get(baseUrl);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.titleContains(""String_Node_Str""));
}","@Test public void testHome(){
  loadPage(baseUrl,30);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.titleContains(""String_Node_Str""));
}",0.9322493224932248
20640,"public void goToHomePage(){
  getWebDriver().get(baseUrl);
}","public void goToHomePage(){
  loadPage(baseUrl,30);
}",0.7787610619469026
20641,"public void initializeArchiva(String baseUrl,String browser,int maxWaitTimeInMs,String seleniumHost,int seleniumPort,boolean remoteSelenium) throws Exception {
  open(baseUrl,browser,seleniumHost,seleniumPort,maxWaitTimeInMs,remoteSelenium);
  getWebDriver().get(baseUrl);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  wait=new WebDriverWait(getWebDriver(),20);
  Boolean found=wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str""))));
  if (found) {
    WebElement adminLink=getWebDriver().findElement(By.id(""String_Node_Str""));
    WebElement loginLink=getWebDriver().findElement(By.id(""String_Node_Str""));
    if (adminLink != null && adminLink.isDisplayed()) {
      Assert.assertFalse(isElementVisible(""String_Node_Str""));
      Assert.assertFalse(isElementVisible(""String_Node_Str""));
      adminLink.click();
      wait=new WebDriverWait(getWebDriver(),10);
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
      assertCreateAdmin();
      String fullname=getProperty(""String_Node_Str"");
      String username=getAdminUsername();
      String mail=getProperty(""String_Node_Str"");
      String password=getProperty(""String_Node_Str"");
      submitAdminData(fullname,mail,password);
      assertUserLoggedIn(username);
      clickLinkWithLocator(""String_Node_Str"",false);
    }
 else     if (loginLink != null && loginLink.isDisplayed()) {
      Assert.assertTrue(isElementVisible(""String_Node_Str""));
      Assert.assertTrue(isElementVisible(""String_Node_Str""));
      login(getAdminUsername(),getAdminPassword());
    }
  }
}","public void initializeArchiva(String baseUrl,String browser,int maxWaitTimeInMs,String seleniumHost,int seleniumPort,boolean remoteSelenium) throws Exception {
  open(baseUrl,browser,seleniumHost,seleniumPort,maxWaitTimeInMs,remoteSelenium);
  loadPage(baseUrl,30);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  wait=new WebDriverWait(getWebDriver(),20);
  Boolean found=wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str""))));
  if (found) {
    WebElement adminLink=getWebDriver().findElement(By.id(""String_Node_Str""));
    WebElement loginLink=getWebDriver().findElement(By.id(""String_Node_Str""));
    if (adminLink != null && adminLink.isDisplayed()) {
      Assert.assertFalse(isElementVisible(""String_Node_Str""));
      Assert.assertFalse(isElementVisible(""String_Node_Str""));
      adminLink.click();
      wait=new WebDriverWait(getWebDriver(),10);
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
      assertCreateAdmin();
      String fullname=getProperty(""String_Node_Str"");
      String username=getAdminUsername();
      String mail=getProperty(""String_Node_Str"");
      String password=getProperty(""String_Node_Str"");
      submitAdminData(fullname,mail,password);
      assertUserLoggedIn(username);
      clickLinkWithLocator(""String_Node_Str"",false);
    }
 else     if (loginLink != null && loginLink.isDisplayed()) {
      Assert.assertTrue(isElementVisible(""String_Node_Str""));
      Assert.assertTrue(isElementVisible(""String_Node_Str""));
      login(getAdminUsername(),getAdminPassword());
    }
  }
}",0.991910739191074
20642,"public void goToLoginPage(){
  logger.info(""String_Node_Str"");
  getWebDriver().get(baseUrl);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str""))));
  if (isElementVisible(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    clickLinkWithLocator(""String_Node_Str"",false);
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  clickLinkWithLocator(""String_Node_Str"",false);
  if (getWebDriver() instanceof HtmlUnitDriver) {
    ((JavascriptExecutor)getWebDriver()).executeScript(""String_Node_Str"");
  }
  wait=new WebDriverWait(getWebDriver(),20);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  assertLoginModal();
}","public void goToLoginPage(){
  logger.info(""String_Node_Str"");
  loadPage(baseUrl,30);
  WebDriverWait wait=new WebDriverWait(getWebDriver(),30);
  wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str""))));
  if (isElementVisible(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    clickLinkWithLocator(""String_Node_Str"",false);
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  clickLinkWithLocator(""String_Node_Str"",false);
  if (getWebDriver() instanceof HtmlUnitDriver) {
    ((JavascriptExecutor)getWebDriver()).executeScript(""String_Node_Str"");
  }
  wait=new WebDriverWait(getWebDriver(),20);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  assertLoginModal();
}",0.9275064267352184
20643,"@Test public void testReadRolesAndUpdateDescription() throws Exception {
  login(getAdminUsername(),getAdminPassword());
  clickLinkWithLocator(""String_Node_Str"");
  WebDriverWait wait=new WebDriverWait(getWebDriver(),10);
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  Assert.assertTrue(StringUtils.isEmpty(getText(""String_Node_Str"")));
  clickLinkWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  String desc=""String_Node_Str"";
  setFieldValue(""String_Node_Str"",desc);
  clickButtonWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  clickLinkWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),desc));
}","@Test public void testReadRolesAndUpdateDescription() throws Exception {
  login(getAdminUsername(),getAdminPassword());
  WebDriverWait wait=new WebDriverWait(getWebDriver(),10);
  WebElement link=wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  tryClick(link,ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
  Assert.assertTrue(StringUtils.isEmpty(getText(""String_Node_Str"")));
  clickLinkWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  String desc=""String_Node_Str"";
  setFieldValue(""String_Node_Str"",desc);
  clickButtonWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  clickLinkWithLocator(""String_Node_Str"");
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),desc));
}",0.9117174959871588
20644,"@Test public void testManagedRepository(){
  login(getAdminUsername(),getAdminPassword());
  WebDriverWait wait=new WebDriverWait(getWebDriver(),20);
  WebElement el;
  el=wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  tryClick(el,ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.xpath(""String_Node_Str"")));
  tryClick(el,ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.xpath(""String_Node_Str"")));
  el=tryClick(el,ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  el.click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  tryClick(By.id(""String_Node_Str""),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"",3,10);
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  assertTextNotPresent(""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  el.click();
  el=wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  selectValue(""String_Node_Str"",""String_Node_Str"");
  ((JavascriptExecutor)getWebDriver()).executeScript(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  selectValue(""String_Node_Str"",""String_Node_Str"");
  el.click();
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  clickLinkWithXPath(""String_Node_Str"");
  waitPage();
  el=wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  assertTextPresent(""String_Node_Str"");
  List<WebElement> repos=el.findElements(By.xpath(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"",repos.get(0).getText().contains(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"",repos.get(1).getText().contains(""String_Node_Str""));
}","@Test public void testManagedRepository(){
  login(getAdminUsername(),getAdminPassword());
  WebDriverWait wait=new WebDriverWait(getWebDriver(),20);
  WebElement el;
  el=wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  tryClick(el,ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.xpath(""String_Node_Str"")));
  tryClick(el,ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")),""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.xpath(""String_Node_Str"")));
  el=tryClick(el,ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  setFieldValue(""String_Node_Str"",""String_Node_Str"");
  el.click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  tryClick(By.id(""String_Node_Str""),ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")),""String_Node_Str"",3,10);
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  assertTextNotPresent(""String_Node_Str"");
  el=wait.until(ExpectedConditions.elementToBeClickable(By.id(""String_Node_Str"")));
  el.click();
  el=wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  selectValue(""String_Node_Str"",""String_Node_Str"");
  ((JavascriptExecutor)getWebDriver()).executeScript(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  selectValue(""String_Node_Str"",""String_Node_Str"");
  el.click();
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(""String_Node_Str""),""String_Node_Str""));
  clickLinkWithXPath(""String_Node_Str"");
  waitPage();
  el=wait.until(ExpectedConditions.presenceOfElementLocated(By.id(""String_Node_Str"")));
  assertTextPresent(""String_Node_Str"");
  List<WebElement> repos=el.findElements(By.xpath(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"",repos.get(0).getText().contains(""String_Node_Str""));
  Assert.assertTrue(""String_Node_Str"",repos.get(1).getText().contains(""String_Node_Str""));
}",0.9986729857819904
20645,"/** 
 * <p> Given a checksum file, check to see if the file it represents is valid according to the checksum. </p> <p/> <p> NOTE: Only supports single file checksums of type MD5 or SHA1. </p>
 * @param algorithm the algorithms to check for.
 * @return true if the checksum is valid for the file it represents. or if the checksum file does not exist.
 * @throws IOException if the reading of the checksumFile or the file it refers to fails.
 */
public boolean isValidChecksum(ChecksumAlgorithm algorithm) throws IOException {
  return isValidChecksums(new ChecksumAlgorithm[]{algorithm});
}","/** 
 * <p> Given a checksum file, check to see if the file it represents is valid according to the checksum. </p> <p> NOTE: Only supports single file checksums of type MD5 or SHA1. </p>
 * @param algorithm the algorithms to check for.
 * @return true if the checksum is valid for the file it represents. or if the checksum file does not exist.
 * @throws IOException if the reading of the checksumFile or the file it refers to fails.
 */
public boolean isValidChecksum(ChecksumAlgorithm algorithm) throws IOException {
  return isValidChecksums(new ChecksumAlgorithm[]{algorithm});
}",0.9957374254049446
20646,"/** 
 * Get the list of patterns for a specified filetype. <p/> <p/> You will always get a list.  In this order. <ul> <li>The Configured List</li> <li>The Default List</li> <li>A single item list of <code>&quot;**&#47;*&quot;</code></li> </ul>
 * @param id the id to lookup.
 * @return the list of patterns.
 */
public List<String> getFileTypePatterns(String id){
  Configuration config=archivaConfiguration.getConfiguration();
  Predicate selectedFiletype=new FiletypeSelectionPredicate(id);
  RepositoryScanningConfiguration repositoryScanningConfiguration=config.getRepositoryScanning();
  if (repositoryScanningConfiguration != null) {
    FileType filetype=(FileType)CollectionUtils.find(config.getRepositoryScanning().getFileTypes(),selectedFiletype);
    if ((filetype != null) && CollectionUtils.isNotEmpty(filetype.getPatterns())) {
      return filetype.getPatterns();
    }
  }
  List<String> defaultPatterns=defaultTypeMap.get(id);
  if (CollectionUtils.isEmpty(defaultPatterns)) {
    return Collections.singletonList(""String_Node_Str"");
  }
  return defaultPatterns;
}","/** 
 * Get the list of patterns for a specified filetype. You will always get a list.  In this order. <ul> <li>The Configured List</li> <li>The Default List</li> <li>A single item list of <code>&quot;**&#47;*&quot;</code></li> </ul>
 * @param id the id to lookup.
 * @return the list of patterns.
 */
public List<String> getFileTypePatterns(String id){
  Configuration config=archivaConfiguration.getConfiguration();
  Predicate selectedFiletype=new FiletypeSelectionPredicate(id);
  RepositoryScanningConfiguration repositoryScanningConfiguration=config.getRepositoryScanning();
  if (repositoryScanningConfiguration != null) {
    FileType filetype=(FileType)CollectionUtils.find(config.getRepositoryScanning().getFileTypes(),selectedFiletype);
    if ((filetype != null) && CollectionUtils.isNotEmpty(filetype.getPatterns())) {
      return filetype.getPatterns();
    }
  }
  List<String> defaultPatterns=defaultTypeMap.get(id);
  if (CollectionUtils.isEmpty(defaultPatterns)) {
    return Collections.singletonList(""String_Node_Str"");
  }
  return defaultPatterns;
}",0.9953574744661096
20647,"private void init(String type,URL url) throws XMLException {
  this.documentType=type;
  this.xmlUrl=url;
  SAXReader reader=new SAXReader();
  try (InputStream in=url.openStream()){
    InputStreamReader inReader=new InputStreamReader(in,""String_Node_Str"");
    LatinEntityResolutionReader latinReader=new LatinEntityResolutionReader(inReader);
    this.document=reader.read(latinReader);
  }
 catch (  DocumentException e) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str""+ xmlUrl+ ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    throw new XMLException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  Element root=this.document.getRootElement();
  if (root == null) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str"");
  }
  if (!StringUtils.equals(root.getName(),documentType)) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ documentType+ ""String_Node_Str"");
  }
}","private void init(String type,URL url) throws XMLException {
  this.documentType=type;
  this.xmlUrl=url;
  SAXReader reader=new SAXReader();
  try (InputStream in=url.openStream()){
    InputStreamReader inReader=new InputStreamReader(in,Charset.forName(""String_Node_Str""));
    LatinEntityResolutionReader latinReader=new LatinEntityResolutionReader(inReader);
    this.document=reader.read(latinReader);
  }
 catch (  DocumentException e) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str""+ xmlUrl+ ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    throw new XMLException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  Element root=this.document.getRootElement();
  if (root == null) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str"");
  }
  if (!StringUtils.equals(root.getName(),documentType)) {
    throw new XMLException(""String_Node_Str"" + documentType + ""String_Node_Str""+ root.getName()+ ""String_Node_Str""+ documentType+ ""String_Node_Str"");
  }
}",0.9758408337280908
20648,"public Boolean removeProjectVersion(String repositoryId,String namespace,String projectId,String version) throws ArchivaRestServiceException {
  if (!VersionUtil.isGenericSnapshot(version)) {
    Artifact artifact=new Artifact(namespace,projectId,version);
    artifact.setRepositoryId(repositoryId);
    return deleteArtifact(artifact);
  }
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (StringUtils.isEmpty(namespace)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(projectId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(version)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(projectId);
    ref.setGroupId(namespace);
    ref.setVersion(version);
    repository.deleteVersion(ref);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setGroupId(namespace);
    artifactReference.setArtifactId(projectId);
    artifactReference.setVersion(version);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
    log.debug(""String_Node_Str"",related);
    for (    ArtifactReference artifactRef : related) {
      repository.deleteArtifact(artifactRef);
    }
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,namespace,projectId,version);
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      metadataRepository.removeArtifact(artifactMetadata,version);
    }
    metadataRepository.removeProjectVersion(repositoryId,namespace,projectId,version);
  }
 catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}","public Boolean removeProjectVersion(String repositoryId,String namespace,String projectId,String version) throws ArchivaRestServiceException {
  if (!VersionUtil.isGenericSnapshot(version)) {
    Artifact artifact=new Artifact(namespace,projectId,version);
    artifact.setRepositoryId(repositoryId);
    artifact.setContext(repositoryId);
    return deleteArtifact(artifact);
  }
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (StringUtils.isEmpty(namespace)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(projectId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(version)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(projectId);
    ref.setGroupId(namespace);
    ref.setVersion(version);
    repository.deleteVersion(ref);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setGroupId(namespace);
    artifactReference.setArtifactId(projectId);
    artifactReference.setVersion(version);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
    log.debug(""String_Node_Str"",related);
    for (    ArtifactReference artifactRef : related) {
      repository.deleteArtifact(artifactRef);
    }
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,namespace,projectId,version);
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      metadataRepository.removeArtifact(artifactMetadata,version);
    }
    metadataRepository.removeProjectVersion(repositoryId,namespace,projectId,version);
  }
 catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}",0.9926870429401836
20649,"public Boolean deleteArtifact(Artifact artifact) throws ArchivaRestServiceException {
  String repositoryId=artifact.getContext();
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (artifact == null) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getGroupId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getArtifactId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  boolean snapshotVersion=VersionUtil.isSnapshot(artifact.getVersion()) | VersionUtil.isGenericSnapshot(artifact.getVersion());
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    Date lastUpdatedTimestamp=Calendar.getInstance().getTime();
    TimeZone timezone=TimeZone.getTimeZone(""String_Node_Str"");
    DateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setTimeZone(timezone);
    ManagedRepository repoConfig=managedRepositoryAdmin.getManagedRepository(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(artifact.getArtifactId());
    ref.setGroupId(artifact.getGroupId());
    ref.setVersion(artifact.getVersion());
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setArtifactId(artifact.getArtifactId());
    artifactReference.setGroupId(artifact.getGroupId());
    artifactReference.setVersion(artifact.getVersion());
    artifactReference.setClassifier(artifact.getClassifier());
    artifactReference.setType(artifact.getPackaging());
    MetadataRepository metadataRepository=repositorySession.getRepository();
    String path=repository.toMetadataPath(ref);
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      if (StringUtils.isBlank(artifact.getPackaging())) {
        throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
      }
      repository.deleteArtifact(artifactReference);
    }
 else {
      int index=path.lastIndexOf('/');
      path=path.substring(0,index);
      File targetPath=new File(repoConfig.getLocation(),path);
      if (!targetPath.exists()) {
        log.warn(""String_Node_Str"",targetPath);
      }
      if (!snapshotVersion) {
        repository.deleteVersion(ref);
      }
 else {
        Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
        log.debug(""String_Node_Str"",related);
        for (        ArtifactReference artifactRef : related) {
          repository.deleteArtifact(artifactRef);
        }
      }
      File metadataFile=getMetadata(targetPath.getAbsolutePath());
      ArchivaRepositoryMetadata metadata=getMetadata(metadataFile);
      updateMetadata(metadata,metadataFile,lastUpdatedTimestamp,artifact);
    }
    Collection<ArtifactMetadata> artifacts=Collections.emptyList();
    if (snapshotVersion) {
      String baseVersion=VersionUtil.getBaseVersion(artifact.getVersion());
      artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),baseVersion);
    }
 else {
      artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
    }
    log.debug(""String_Node_Str"",artifacts);
    if (artifacts.isEmpty()) {
      if (!snapshotVersion) {
        Collection<String> projectVersions=metadataRepository.getProjectVersions(repositoryId,artifact.getGroupId(),artifact.getArtifactId());
        if (projectVersions.contains(artifact.getVersion())) {
          log.warn(""String_Node_Str"");
          metadataRepository.removeProjectVersion(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
        }
      }
    }
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      if (artifactMetadata.getVersion().equals(artifact.getVersion())) {
        if (StringUtils.isNotBlank(artifact.getClassifier())) {
          if (StringUtils.isBlank(artifact.getPackaging())) {
            throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
          }
          MavenArtifactFacet mavenArtifactFacet=(MavenArtifactFacet)artifactMetadata.getFacet(MavenArtifactFacet.FACET_ID);
          if (StringUtils.equals(artifact.getClassifier(),mavenArtifactFacet.getClassifier())) {
            artifactMetadata.removeFacet(MavenArtifactFacet.FACET_ID);
            String groupId=artifact.getGroupId(), artifactId=artifact.getArtifactId(), version=artifact.getVersion();
            MavenArtifactFacet mavenArtifactFacetToCompare=new MavenArtifactFacet();
            mavenArtifactFacetToCompare.setClassifier(artifact.getClassifier());
            metadataRepository.removeArtifact(repositoryId,groupId,artifactId,version,mavenArtifactFacetToCompare);
            metadataRepository.save();
          }
        }
 else {
          if (snapshotVersion) {
            metadataRepository.removeArtifact(artifactMetadata,VersionUtil.getBaseVersion(artifact.getVersion()));
          }
 else {
            metadataRepository.removeArtifact(artifactMetadata.getRepositoryId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifact.getVersion(),artifactMetadata.getId());
          }
        }
        for (        RepositoryListener listener : listeners) {
          listener.deleteArtifact(metadataRepository,repository.getId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifactMetadata.getVersion(),artifactMetadata.getId());
        }
        triggerAuditEvent(repositoryId,path,AuditEvent.REMOVE_FILE);
      }
    }
  }
 catch (  ContentNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}","public Boolean deleteArtifact(Artifact artifact) throws ArchivaRestServiceException {
  String repositoryId=artifact.getContext();
  if (StringUtils.isEmpty(repositoryId)) {
    repositoryId=artifact.getRepositoryId();
  }
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (artifact == null) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getGroupId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getArtifactId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  boolean snapshotVersion=VersionUtil.isSnapshot(artifact.getVersion()) | VersionUtil.isGenericSnapshot(artifact.getVersion());
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    Date lastUpdatedTimestamp=Calendar.getInstance().getTime();
    TimeZone timezone=TimeZone.getTimeZone(""String_Node_Str"");
    DateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setTimeZone(timezone);
    ManagedRepository repoConfig=managedRepositoryAdmin.getManagedRepository(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(artifact.getArtifactId());
    ref.setGroupId(artifact.getGroupId());
    ref.setVersion(artifact.getVersion());
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setArtifactId(artifact.getArtifactId());
    artifactReference.setGroupId(artifact.getGroupId());
    artifactReference.setVersion(artifact.getVersion());
    artifactReference.setClassifier(artifact.getClassifier());
    artifactReference.setType(artifact.getPackaging());
    MetadataRepository metadataRepository=repositorySession.getRepository();
    String path=repository.toMetadataPath(ref);
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      if (StringUtils.isBlank(artifact.getPackaging())) {
        throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
      }
      repository.deleteArtifact(artifactReference);
    }
 else {
      int index=path.lastIndexOf('/');
      path=path.substring(0,index);
      File targetPath=new File(repoConfig.getLocation(),path);
      if (!targetPath.exists()) {
        log.warn(""String_Node_Str"",targetPath);
      }
      if (!snapshotVersion) {
        repository.deleteVersion(ref);
      }
 else {
        Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
        log.debug(""String_Node_Str"",related);
        for (        ArtifactReference artifactRef : related) {
          repository.deleteArtifact(artifactRef);
        }
      }
      File metadataFile=getMetadata(targetPath.getAbsolutePath());
      ArchivaRepositoryMetadata metadata=getMetadata(metadataFile);
      updateMetadata(metadata,metadataFile,lastUpdatedTimestamp,artifact);
    }
    Collection<ArtifactMetadata> artifacts=Collections.emptyList();
    if (snapshotVersion) {
      String baseVersion=VersionUtil.getBaseVersion(artifact.getVersion());
      artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),baseVersion);
    }
 else {
      artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
    }
    log.debug(""String_Node_Str"",artifacts);
    if (artifacts.isEmpty()) {
      if (!snapshotVersion) {
        Collection<String> projectVersions=metadataRepository.getProjectVersions(repositoryId,artifact.getGroupId(),artifact.getArtifactId());
        if (projectVersions.contains(artifact.getVersion())) {
          log.warn(""String_Node_Str"");
          metadataRepository.removeProjectVersion(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
        }
      }
    }
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      if (artifactMetadata.getVersion().equals(artifact.getVersion())) {
        if (StringUtils.isNotBlank(artifact.getClassifier())) {
          if (StringUtils.isBlank(artifact.getPackaging())) {
            throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
          }
          MavenArtifactFacet mavenArtifactFacet=(MavenArtifactFacet)artifactMetadata.getFacet(MavenArtifactFacet.FACET_ID);
          if (StringUtils.equals(artifact.getClassifier(),mavenArtifactFacet.getClassifier())) {
            artifactMetadata.removeFacet(MavenArtifactFacet.FACET_ID);
            String groupId=artifact.getGroupId(), artifactId=artifact.getArtifactId(), version=artifact.getVersion();
            MavenArtifactFacet mavenArtifactFacetToCompare=new MavenArtifactFacet();
            mavenArtifactFacetToCompare.setClassifier(artifact.getClassifier());
            metadataRepository.removeArtifact(repositoryId,groupId,artifactId,version,mavenArtifactFacetToCompare);
            metadataRepository.save();
          }
        }
 else {
          if (snapshotVersion) {
            metadataRepository.removeArtifact(artifactMetadata,VersionUtil.getBaseVersion(artifact.getVersion()));
          }
 else {
            metadataRepository.removeArtifact(artifactMetadata.getRepositoryId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifact.getVersion(),artifactMetadata.getId());
          }
        }
        for (        RepositoryListener listener : listeners) {
          listener.deleteArtifact(metadataRepository,repository.getId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifactMetadata.getVersion(),artifactMetadata.getId());
        }
        triggerAuditEvent(repositoryId,path,AuditEvent.REMOVE_FILE);
      }
    }
  }
 catch (  ContentNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}",0.9932551319648094
20650,"public Boolean removeProjectVersion(String repositoryId,String namespace,String projectId,String version) throws ArchivaRestServiceException {
  if (!VersionUtil.isGenericSnapshot(version)) {
    Artifact artifact=new Artifact(namespace,projectId,version);
    return deleteArtifact(artifact);
  }
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (StringUtils.isEmpty(namespace)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(projectId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(version)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(projectId);
    ref.setGroupId(namespace);
    ref.setVersion(version);
    repository.deleteVersion(ref);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setGroupId(namespace);
    artifactReference.setArtifactId(projectId);
    artifactReference.setVersion(version);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
    log.debug(""String_Node_Str"",related);
    for (    ArtifactReference artifactRef : related) {
      repository.deleteArtifact(artifactRef);
    }
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,namespace,projectId,version);
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      metadataRepository.removeArtifact(artifactMetadata,version);
    }
    metadataRepository.removeProjectVersion(repositoryId,namespace,projectId,version);
  }
 catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}","public Boolean removeProjectVersion(String repositoryId,String namespace,String projectId,String version) throws ArchivaRestServiceException {
  if (!VersionUtil.isGenericSnapshot(version)) {
    Artifact artifact=new Artifact(namespace,projectId,version);
    artifact.setRepositoryId(repositoryId);
    return deleteArtifact(artifact);
  }
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (StringUtils.isEmpty(namespace)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(projectId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(version)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(projectId);
    ref.setGroupId(namespace);
    ref.setVersion(version);
    repository.deleteVersion(ref);
    ArtifactReference artifactReference=new ArtifactReference();
    artifactReference.setGroupId(namespace);
    artifactReference.setArtifactId(projectId);
    artifactReference.setVersion(version);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Set<ArtifactReference> related=repository.getRelatedArtifacts(artifactReference);
    log.debug(""String_Node_Str"",related);
    for (    ArtifactReference artifactRef : related) {
      repository.deleteArtifact(artifactRef);
    }
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,namespace,projectId,version);
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      metadataRepository.removeArtifact(artifactMetadata,version);
    }
    metadataRepository.removeProjectVersion(repositoryId,namespace,projectId,version);
  }
 catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.save();
    repositorySession.close();
  }
  return Boolean.TRUE;
}",0.9916190476190476
20651,"@Test public void downloadMergedIndex() throws Exception {
  File tmpIndexDir=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  if (tmpIndexDir.exists()) {
    FileUtils.deleteDirectory(tmpIndexDir);
  }
  String id=Long.toString(System.currentTimeMillis());
  ManagedRepository managedRepository=new ManagedRepository();
  managedRepository.setId(id);
  managedRepository.setName(""String_Node_Str"" + id);
  managedRepository.setLocation(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  managedRepository.setIndexDirectory(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + id);
  ManagedRepositoriesService managedRepositoriesService=getManagedRepositoriesService();
  if (managedRepositoriesService.getManagedRepository(id) != null) {
    managedRepositoriesService.deleteManagedRepository(id,false);
  }
  getManagedRepositoriesService().addManagedRepository(managedRepository);
  RepositoriesService repositoriesService=getRepositoriesService();
  repositoriesService.scanRepositoryNow(id,true);
  int timeout=20000;
  while (timeout > 0 && repositoriesService.alreadyScanning(id)) {
    Thread.sleep(500);
    timeout-=500;
  }
  RepositoryGroupService repositoryGroupService=getRepositoryGroupService();
  RepositoryGroup repositoryGroup=new RepositoryGroup();
  repositoryGroup.setId(""String_Node_Str"");
  repositoryGroup.setRepositories(Arrays.asList(id));
  repositoryGroupService.addRepositoryGroup(repositoryGroup);
  id=Long.toString(System.currentTimeMillis());
  managedRepository=new ManagedRepository();
  managedRepository.setId(id);
  managedRepository.setName(""String_Node_Str"" + id);
  managedRepository.setLocation(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  managedRepository.setIndexDirectory(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + id);
  if (managedRepositoriesService.getManagedRepository(id) != null) {
    managedRepositoriesService.deleteManagedRepository(id,false);
  }
  getManagedRepositoriesService().addManagedRepository(managedRepository);
  RemoteRepository remoteRepository=new RemoteRepository();
  remoteRepository.setId(""String_Node_Str"");
  remoteRepository.setName(""String_Node_Str"");
  remoteRepository.setDownloadRemoteIndex(true);
  remoteRepository.setUrl(""String_Node_Str"" + port + ""String_Node_Str"");
  remoteRepository.setRemoteIndexUrl(""String_Node_Str"" + port + ""String_Node_Str"");
  remoteRepository.setUserName(RedbackRoleConstants.ADMINISTRATOR_ACCOUNT_NAME);
  remoteRepository.setPassword(FakeCreateAdminService.ADMIN_TEST_PWD);
  getRemoteRepositoriesService().addRemoteRepository(remoteRepository);
  ProxyConnectorService proxyConnectorService=getProxyConnectorService();
  ProxyConnector proxyConnector=new ProxyConnector();
  proxyConnector.setProxyId(""String_Node_Str"");
  proxyConnector.setSourceRepoId(id);
  proxyConnector.setTargetRepoId(""String_Node_Str"");
  proxyConnectorService.addProxyConnector(proxyConnector);
  repositoriesService.scheduleDownloadRemoteIndex(""String_Node_Str"",true,true);
  timeout=20000;
  while (timeout > 0) {
    Thread.sleep(500);
    timeout-=500;
  }
  SearchService searchService=getSearchService();
  SearchRequest request=new SearchRequest();
  request.setRepositories(Arrays.asList(id));
  request.setGroupId(""String_Node_Str"");
  List<Artifact> artifacts=searchService.searchArtifacts(request);
  Assertions.assertThat(artifacts).isNotNull().isNotEmpty().hasSize(1);
}","@Test public void downloadMergedIndex() throws Exception {
  File tmpIndexDir=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  if (tmpIndexDir.exists()) {
    FileUtils.deleteDirectory(tmpIndexDir);
  }
  String id=Long.toString(System.currentTimeMillis());
  ManagedRepository managedRepository=new ManagedRepository();
  managedRepository.setId(id);
  managedRepository.setName(""String_Node_Str"" + id);
  managedRepository.setLocation(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  managedRepository.setIndexDirectory(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + id);
  ManagedRepositoriesService managedRepositoriesService=getManagedRepositoriesService();
  if (managedRepositoriesService.getManagedRepository(id) != null) {
    managedRepositoriesService.deleteManagedRepository(id,false);
  }
  getManagedRepositoriesService().addManagedRepository(managedRepository);
  RepositoriesService repositoriesService=getRepositoriesService();
  repositoriesService.scanRepositoryNow(id,true);
  int timeout=20000;
  while (timeout > 0 && repositoriesService.alreadyScanning(id)) {
    Thread.sleep(500);
    timeout-=500;
  }
  RepositoryGroupService repositoryGroupService=getRepositoryGroupService();
  String repoGroupId=""String_Node_Str"";
  if (repositoryGroupService.getRepositoryGroup(repoGroupId) != null) {
    repositoryGroupService.deleteRepositoryGroup(repoGroupId);
  }
  RepositoryGroup repositoryGroup=new RepositoryGroup();
  repositoryGroup.setId(repoGroupId);
  repositoryGroup.setRepositories(Arrays.asList(id));
  repositoryGroupService.addRepositoryGroup(repositoryGroup);
  id=Long.toString(System.currentTimeMillis());
  managedRepository=new ManagedRepository();
  managedRepository.setId(id);
  managedRepository.setName(""String_Node_Str"" + id);
  managedRepository.setLocation(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  managedRepository.setIndexDirectory(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + id);
  if (managedRepositoriesService.getManagedRepository(id) != null) {
    managedRepositoriesService.deleteManagedRepository(id,false);
  }
  getManagedRepositoriesService().addManagedRepository(managedRepository);
  RemoteRepository remoteRepository=new RemoteRepository();
  remoteRepository.setId(""String_Node_Str"");
  remoteRepository.setName(""String_Node_Str"");
  remoteRepository.setDownloadRemoteIndex(true);
  remoteRepository.setUrl(""String_Node_Str"" + port + ""String_Node_Str"");
  remoteRepository.setRemoteIndexUrl(""String_Node_Str"" + port + ""String_Node_Str"");
  remoteRepository.setUserName(RedbackRoleConstants.ADMINISTRATOR_ACCOUNT_NAME);
  remoteRepository.setPassword(FakeCreateAdminService.ADMIN_TEST_PWD);
  getRemoteRepositoriesService().addRemoteRepository(remoteRepository);
  ProxyConnectorService proxyConnectorService=getProxyConnectorService();
  ProxyConnector proxyConnector=new ProxyConnector();
  proxyConnector.setProxyId(""String_Node_Str"");
  proxyConnector.setSourceRepoId(id);
  proxyConnector.setTargetRepoId(""String_Node_Str"");
  proxyConnectorService.addProxyConnector(proxyConnector);
  repositoriesService.scheduleDownloadRemoteIndex(""String_Node_Str"",true,true);
  timeout=20000;
  while (timeout > 0) {
    Thread.sleep(500);
    timeout-=500;
  }
  SearchService searchService=getSearchService();
  SearchRequest request=new SearchRequest();
  request.setRepositories(Arrays.asList(id));
  request.setGroupId(""String_Node_Str"");
  List<Artifact> artifacts=searchService.searchArtifacts(request);
  Assertions.assertThat(artifacts).isNotNull().isNotEmpty().hasSize(1);
}",0.9676416560689558
20652,"private DavResource processRepositoryGroup(final DavServletRequest request,ArchivaDavResourceLocator archivaLocator,List<String> repositories,String activePrincipal,List<String> resourcesInAbsolutePath,RepositoryGroupConfiguration repoGroupConfig) throws DavException {
  DavResource resource=null;
  List<DavException> storedExceptions=new ArrayList<DavException>();
  String pathInfo=StringUtils.removeEnd(request.getPathInfo(),""String_Node_Str"");
  String rootPath=StringUtils.substringBeforeLast(pathInfo,""String_Node_Str"");
  if (StringUtils.endsWith(rootPath,""String_Node_Str"" + repoGroupConfig.getMergedIndexPath())) {
    String requestedFileName=StringUtils.substringAfterLast(pathInfo,""String_Node_Str"");
    File temporaryIndexDirectory=buildMergedIndexDirectory(repositories,activePrincipal,request,repoGroupConfig);
    File resourceFile=new File(temporaryIndexDirectory,requestedFileName);
    resource=new ArchivaDavResource(resourceFile.getAbsolutePath(),requestedFileName,null,request.getRemoteAddr(),activePrincipal,request.getDavSession(),archivaLocator,this,mimeTypes,auditListeners,scheduler);
  }
 else {
    for (    String repositoryId : repositories) {
      ManagedRepositoryContent managedRepository;
      try {
        managedRepository=repositoryFactory.getManagedRepositoryContent(repositoryId);
      }
 catch (      RepositoryNotFoundException e) {
        throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e);
      }
catch (      RepositoryException e) {
        throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e);
      }
      try {
        DavResource updatedResource=processRepository(request,archivaLocator,activePrincipal,managedRepository);
        if (resource == null) {
          resource=updatedResource;
        }
        String logicalResource=RepositoryPathUtil.getLogicalResource(archivaLocator.getResourcePath());
        if (logicalResource.endsWith(""String_Node_Str"")) {
          logicalResource=logicalResource.substring(1);
        }
        resourcesInAbsolutePath.add(new File(managedRepository.getRepoRoot(),logicalResource).getAbsolutePath());
      }
 catch (      DavException e) {
        storedExceptions.add(e);
      }
    }
  }
  if (resource == null) {
    if (!storedExceptions.isEmpty()) {
      for (      DavException e : storedExceptions) {
        if (401 == e.getErrorCode()) {
          throw e;
        }
      }
      throw new DavException(HttpServletResponse.SC_NOT_FOUND);
    }
 else {
      throw new DavException(HttpServletResponse.SC_NOT_FOUND);
    }
  }
  return resource;
}","private DavResource processRepositoryGroup(final DavServletRequest request,ArchivaDavResourceLocator archivaLocator,List<String> repositories,String activePrincipal,List<String> resourcesInAbsolutePath,RepositoryGroupConfiguration repoGroupConfig) throws DavException {
  DavResource resource=null;
  List<DavException> storedExceptions=new ArrayList<DavException>();
  String pathInfo=StringUtils.removeEnd(request.getPathInfo(),""String_Node_Str"");
  String rootPath=StringUtils.substringBeforeLast(pathInfo,""String_Node_Str"");
  if (StringUtils.endsWith(rootPath,repoGroupConfig.getMergedIndexPath())) {
    String requestedFileName=StringUtils.substringAfterLast(pathInfo,""String_Node_Str"");
    File temporaryIndexDirectory=buildMergedIndexDirectory(repositories,activePrincipal,request,repoGroupConfig);
    File resourceFile=new File(temporaryIndexDirectory,requestedFileName);
    resource=new ArchivaDavResource(resourceFile.getAbsolutePath(),requestedFileName,null,request.getRemoteAddr(),activePrincipal,request.getDavSession(),archivaLocator,this,mimeTypes,auditListeners,scheduler);
  }
 else {
    for (    String repositoryId : repositories) {
      ManagedRepositoryContent managedRepository;
      try {
        managedRepository=repositoryFactory.getManagedRepositoryContent(repositoryId);
      }
 catch (      RepositoryNotFoundException e) {
        throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e);
      }
catch (      RepositoryException e) {
        throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e);
      }
      try {
        DavResource updatedResource=processRepository(request,archivaLocator,activePrincipal,managedRepository);
        if (resource == null) {
          resource=updatedResource;
        }
        String logicalResource=RepositoryPathUtil.getLogicalResource(archivaLocator.getResourcePath());
        if (logicalResource.endsWith(""String_Node_Str"")) {
          logicalResource=logicalResource.substring(1);
        }
        resourcesInAbsolutePath.add(new File(managedRepository.getRepoRoot(),logicalResource).getAbsolutePath());
      }
 catch (      DavException e) {
        storedExceptions.add(e);
      }
    }
  }
  if (resource == null) {
    if (!storedExceptions.isEmpty()) {
      for (      DavException e : storedExceptions) {
        if (401 == e.getErrorCode()) {
          throw e;
        }
      }
      throw new DavException(HttpServletResponse.SC_NOT_FOUND);
    }
 else {
      throw new DavException(HttpServletResponse.SC_NOT_FOUND);
    }
  }
  return resource;
}",0.996138996138996
20653,"public IndexingContext createIndexContext(ManagedRepository repository) throws RepositoryAdminException {
  IndexingContext context=indexer.getIndexingContexts().get(repository.getId());
  if (context != null) {
    log.debug(""String_Node_Str"",repository.getId());
    return context;
  }
  File repositoryDirectory=new File(repository.getLocation());
  if (!repositoryDirectory.isAbsolute()) {
    repositoryDirectory=new File(getRegistry().getString(""String_Node_Str"") + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"",repository.getLocation());
  }
  if (!repositoryDirectory.exists()) {
    repositoryDirectory.mkdirs();
  }
  try {
    String indexDir=repository.getIndexDirectory();
    File managedRepository=new File(repository.getLocation());
    File indexDirectory=null;
    if (StringUtils.isNotBlank(indexDir)) {
      indexDirectory=new File(repository.getIndexDirectory());
      if (!indexDirectory.isAbsolute()) {
        indexDirectory=new File(managedRepository,repository.getIndexDirectory());
        repository.setIndexDirectory(indexDirectory.getAbsolutePath());
      }
    }
 else {
      indexDirectory=new File(managedRepository,""String_Node_Str"");
      if (!managedRepository.isAbsolute()) {
        indexDirectory=new File(repositoryDirectory,""String_Node_Str"");
        repository.setIndexDirectory(indexDirectory.getAbsolutePath());
      }
    }
    if (!indexDirectory.exists()) {
      indexDirectory.mkdirs();
    }
    context=indexer.getIndexingContexts().get(repository.getId());
    if (context == null) {
      context=indexer.addIndexingContext(repository.getId(),repository.getId(),managedRepository,indexDirectory,managedRepository.toURI().toURL().toExternalForm(),indexDirectory.toURI().toURL().toString(),indexCreators);
      context.setSearchable(repository.isScanned());
    }
    return context;
  }
 catch (  MalformedURLException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
catch (  UnsupportedExistingLuceneIndexException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
}","public IndexingContext createIndexContext(ManagedRepository repository) throws RepositoryAdminException {
  IndexingContext context=indexer.getIndexingContexts().get(repository.getId());
  if (context != null) {
    log.debug(""String_Node_Str"",repository.getId());
    return context;
  }
  File repositoryDirectory=new File(repository.getLocation());
  if (!repositoryDirectory.isAbsolute()) {
    repositoryDirectory=new File(getRegistry().getString(""String_Node_Str"") + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"",repository.getLocation());
  }
  if (!repositoryDirectory.exists()) {
    repositoryDirectory.mkdirs();
  }
  try {
    String indexDir=repository.getIndexDirectory();
    File indexDirectory=null;
    if (StringUtils.isNotBlank(indexDir)) {
      indexDirectory=new File(repository.getIndexDirectory());
      if (!indexDirectory.isAbsolute()) {
        indexDirectory=new File(repositoryDirectory,repository.getIndexDirectory());
        repository.setIndexDirectory(indexDirectory.getAbsolutePath());
      }
    }
 else {
      indexDirectory=new File(repositoryDirectory,""String_Node_Str"");
      if (!repositoryDirectory.isAbsolute()) {
        indexDirectory=new File(repositoryDirectory,""String_Node_Str"");
        repository.setIndexDirectory(indexDirectory.getAbsolutePath());
      }
    }
    if (!indexDirectory.exists()) {
      indexDirectory.mkdirs();
    }
    context=indexer.getIndexingContexts().get(repository.getId());
    if (context == null) {
      context=indexer.addIndexingContext(repository.getId(),repository.getId(),repositoryDirectory,indexDirectory,repositoryDirectory.toURI().toURL().toExternalForm(),indexDirectory.toURI().toURL().toString(),indexCreators);
      context.setSearchable(repository.isScanned());
    }
    return context;
  }
 catch (  MalformedURLException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
catch (  UnsupportedExistingLuceneIndexException e) {
    throw new RepositoryAdminException(e.getMessage(),e);
  }
}",0.952954808806489
20654,"protected <T>T lookup(Class<T> clazz){
  return componentContainer.getComponent(clazz);
}","protected <T>T lookup(Class<T> clazz,String hint){
  return (T)applicationContext.getBean(""String_Node_Str"" + hint,ArchivaConfiguration.class);
}",0.6068376068376068
20655,"/** 
 * Ensures that the provided configuration matches the details present in the archiva-default.xml file.
 */
private void assertConfiguration(Configuration configuration,int managedExpected,int remoteExpected,int proxyConnectorExpected) throws Exception {
  FileTypes filetypes=lookup(FileTypes.class);
  assertEquals(""String_Node_Str"" + configuration.getManagedRepositories(),managedExpected,configuration.getManagedRepositories().size());
  assertEquals(""String_Node_Str"" + configuration.getRemoteRepositories(),remoteExpected,configuration.getRemoteRepositories().size());
  assertEquals(""String_Node_Str"" + configuration.getProxyConnectors(),proxyConnectorExpected,configuration.getProxyConnectors().size());
  RepositoryScanningConfiguration repoScanning=configuration.getRepositoryScanning();
  assertNotNull(""String_Node_Str"",repoScanning);
  assertEquals(""String_Node_Str"",4,repoScanning.getFileTypes().size());
  assertEquals(""String_Node_Str"",9,repoScanning.getKnownContentConsumers().size());
  assertEquals(""String_Node_Str"",1,repoScanning.getInvalidContentConsumers().size());
  List<String> patterns=filetypes.getFileTypePatterns(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",patterns);
  assertEquals(""String_Node_Str"",13,patterns.size());
  WebappConfiguration webapp=configuration.getWebapp();
  assertNotNull(""String_Node_Str"",webapp);
  UserInterfaceOptions ui=webapp.getUi();
  assertNotNull(""String_Node_Str"",ui);
  assertTrue(""String_Node_Str"",ui.isShowFindArtifacts());
  assertTrue(""String_Node_Str"",ui.isAppletFindEnabled());
}","/** 
 * Ensures that the provided configuration matches the details present in the archiva-default.xml file.
 */
private void assertConfiguration(Configuration configuration,int managedExpected,int remoteExpected,int proxyConnectorExpected) throws Exception {
  assertEquals(""String_Node_Str"" + configuration.getManagedRepositories(),managedExpected,configuration.getManagedRepositories().size());
  assertEquals(""String_Node_Str"" + configuration.getRemoteRepositories(),remoteExpected,configuration.getRemoteRepositories().size());
  assertEquals(""String_Node_Str"" + configuration.getProxyConnectors(),proxyConnectorExpected,configuration.getProxyConnectors().size());
  RepositoryScanningConfiguration repoScanning=configuration.getRepositoryScanning();
  assertNotNull(""String_Node_Str"",repoScanning);
  assertEquals(""String_Node_Str"",4,repoScanning.getFileTypes().size());
  assertEquals(""String_Node_Str"",9,repoScanning.getKnownContentConsumers().size());
  assertEquals(""String_Node_Str"",1,repoScanning.getInvalidContentConsumers().size());
  List<String> patterns=filetypes.getFileTypePatterns(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",patterns);
  assertEquals(""String_Node_Str"",13,patterns.size());
  WebappConfiguration webapp=configuration.getWebapp();
  assertNotNull(""String_Node_Str"",webapp);
  UserInterfaceOptions ui=webapp.getUi();
  assertNotNull(""String_Node_Str"",ui);
  assertTrue(""String_Node_Str"",ui.isShowFindArtifacts());
  assertTrue(""String_Node_Str"",ui.isAppletFindEnabled());
}",0.9847452125933138
20656,"/** 
 * @param artifact
 * @return
 */
protected String getArtifactUrl(Artifact artifact) throws ArchivaRestServiceException {
  try {
    if (httpServletRequest == null) {
      return null;
    }
    StringBuilder sb=new StringBuilder(getBaseUrl());
    sb.append(""String_Node_Str"");
    sb.append('/').append(artifact.getContext());
    sb.append('/').append(StringUtils.replaceChars(artifact.getGroupId(),'.','/'));
    sb.append('/').append(artifact.getArtifactId());
    if (VersionUtil.isSnapshot(artifact.getVersion())) {
      sb.append('/').append(VersionUtil.getBaseVersion(artifact.getVersion()));
    }
 else {
      sb.append('/').append(artifact.getVersion());
    }
    sb.append('/').append(artifact.getArtifactId());
    sb.append('-').append(artifact.getVersion());
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      sb.append('-').append(artifact.getClassifier());
    }
    if (StringUtils.equals(""String_Node_Str"",artifact.getPackaging())) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append('.').append(artifact.getPackaging());
    }
    return sb.toString();
  }
 catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
}","/** 
 * @param artifact
 * @return
 */
protected String getArtifactUrl(Artifact artifact) throws ArchivaRestServiceException {
  try {
    if (httpServletRequest == null) {
      return null;
    }
    StringBuilder sb=new StringBuilder(getBaseUrl());
    sb.append(""String_Node_Str"");
    sb.append('/').append(artifact.getContext());
    sb.append('/').append(StringUtils.replaceChars(artifact.getGroupId(),'.','/'));
    sb.append('/').append(artifact.getArtifactId());
    if (VersionUtil.isSnapshot(artifact.getVersion())) {
      sb.append('/').append(VersionUtil.getBaseVersion(artifact.getVersion()));
    }
 else {
      sb.append('/').append(artifact.getVersion());
    }
    sb.append('/').append(artifact.getArtifactId());
    sb.append('-').append(artifact.getVersion());
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      sb.append('-').append(artifact.getClassifier());
    }
    if (StringUtils.equals(""String_Node_Str"",artifact.getPackaging())) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append('.').append(artifact.getFileExtension());
    }
    return sb.toString();
  }
 catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
}",0.9914129586260734
20657,"public VersionsList getVersionsList(String groupId,String artifactId,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    return new VersionsList(new ArrayList<String>(getVersions(selectedRepos,groupId,artifactId)));
  }
 catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
}","public VersionsList getVersionsList(String groupId,String artifactId,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    Collection<String> versions=getVersions(selectedRepos,groupId,artifactId);
    return new VersionsList(new ArrayList<String>(versions));
  }
 catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
}",0.8633540372670807
20658,"private Collection<String> getVersions(List<String> selectedRepos,String groupId,String artifactId) throws MetadataResolutionException {
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    MetadataResolver metadataResolver=repositorySession.getResolver();
    Set<String> versions=new LinkedHashSet<String>();
    for (    String repoId : selectedRepos) {
      versions.addAll(metadataResolver.resolveProjectVersions(repositorySession,repoId,groupId,artifactId));
    }
    List<String> sortedVersions=new ArrayList<String>(versions);
    Collections.sort(sortedVersions,VersionComparator.getInstance());
    return sortedVersions;
  }
  finally {
    repositorySession.close();
  }
}","private Collection<String> getVersions(List<String> selectedRepos,String groupId,String artifactId) throws MetadataResolutionException {
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    MetadataResolver metadataResolver=repositorySession.getResolver();
    Set<String> versions=new LinkedHashSet<String>();
    for (    String repoId : selectedRepos) {
      Collection<String> projectVersions=metadataResolver.resolveProjectVersions(repositorySession,repoId,groupId,artifactId);
      versions.addAll(projectVersions);
    }
    List<String> sortedVersions=new ArrayList<String>(versions);
    Collections.sort(sortedVersions,VersionComparator.getInstance());
    return sortedVersions;
  }
  finally {
    repositorySession.close();
  }
}",0.8580901856763926
20659,"public Boolean deleteArtifact(Artifact artifact) throws ArchivaRestServiceException {
  String repositoryId=artifact.getContext();
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (artifact == null) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getGroupId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getArtifactId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    Date lastUpdatedTimestamp=Calendar.getInstance().getTime();
    TimeZone timezone=TimeZone.getTimeZone(""String_Node_Str"");
    DateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setTimeZone(timezone);
    ManagedRepository repoConfig=managedRepositoryAdmin.getManagedRepository(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(artifact.getArtifactId());
    ref.setGroupId(artifact.getGroupId());
    ref.setVersion(artifact.getVersion());
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      if (StringUtils.isBlank(artifact.getPackaging())) {
        throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
      }
      ArtifactReference artifactReference=new ArtifactReference();
      artifactReference.setArtifactId(artifact.getArtifactId());
      artifactReference.setGroupId(artifact.getGroupId());
      artifactReference.setVersion(artifact.getVersion());
      artifactReference.setClassifier(artifact.getClassifier());
      artifactReference.setType(artifact.getPackaging());
      repository.deleteArtifact(artifactReference);
      return Boolean.TRUE;
    }
    String path=repository.toMetadataPath(ref);
    int index=path.lastIndexOf('/');
    path=path.substring(0,index);
    File targetPath=new File(repoConfig.getLocation(),path);
    if (!targetPath.exists()) {
      throw new ContentNotFoundException(artifact.getGroupId() + ""String_Node_Str"" + artifact.getArtifactId()+ ""String_Node_Str""+ artifact.getVersion());
    }
    repository.deleteVersion(ref);
    File metadataFile=getMetadata(targetPath.getAbsolutePath());
    ArchivaRepositoryMetadata metadata=getMetadata(metadataFile);
    updateMetadata(metadata,metadataFile,lastUpdatedTimestamp,artifact);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      if (artifact.getVersion().equals(artifact.getVersion())) {
        metadataRepository.removeArtifact(artifactMetadata.getRepositoryId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifact.getVersion(),artifactMetadata.getId());
        for (        RepositoryListener listener : listeners) {
          listener.deleteArtifact(metadataRepository,repository.getId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifactMetadata.getVersion(),artifactMetadata.getId());
        }
        triggerAuditEvent(repositoryId,path,AuditEvent.REMOVE_FILE);
      }
    }
    repositorySession.save();
  }
 catch (  ContentNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.close();
  }
  return Boolean.TRUE;
}","public Boolean deleteArtifact(Artifact artifact) throws ArchivaRestServiceException {
  String repositoryId=artifact.getContext();
  if (StringUtils.isEmpty(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (!isAuthorizedToDeleteArtifacts(repositoryId)) {
    throw new ArchivaRestServiceException(""String_Node_Str"",403,null);
  }
  if (artifact == null) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getGroupId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  if (StringUtils.isEmpty(artifact.getArtifactId())) {
    throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
  }
  RepositorySession repositorySession=repositorySessionFactory.createSession();
  try {
    Date lastUpdatedTimestamp=Calendar.getInstance().getTime();
    TimeZone timezone=TimeZone.getTimeZone(""String_Node_Str"");
    DateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setTimeZone(timezone);
    ManagedRepository repoConfig=managedRepositoryAdmin.getManagedRepository(repositoryId);
    VersionedReference ref=new VersionedReference();
    ref.setArtifactId(artifact.getArtifactId());
    ref.setGroupId(artifact.getGroupId());
    ref.setVersion(artifact.getVersion());
    ManagedRepositoryContent repository=repositoryFactory.getManagedRepositoryContent(repositoryId);
    if (StringUtils.isNotBlank(artifact.getClassifier())) {
      if (StringUtils.isBlank(artifact.getPackaging())) {
        throw new ArchivaRestServiceException(""String_Node_Str"",400,null);
      }
      ArtifactReference artifactReference=new ArtifactReference();
      artifactReference.setArtifactId(artifact.getArtifactId());
      artifactReference.setGroupId(artifact.getGroupId());
      artifactReference.setVersion(artifact.getVersion());
      artifactReference.setClassifier(artifact.getClassifier());
      artifactReference.setType(artifact.getPackaging());
      repository.deleteArtifact(artifactReference);
      return Boolean.TRUE;
    }
    String path=repository.toMetadataPath(ref);
    int index=path.lastIndexOf('/');
    path=path.substring(0,index);
    File targetPath=new File(repoConfig.getLocation(),path);
    if (!targetPath.exists()) {
      throw new ContentNotFoundException(artifact.getGroupId() + ""String_Node_Str"" + artifact.getArtifactId()+ ""String_Node_Str""+ artifact.getVersion());
    }
    repository.deleteVersion(ref);
    File metadataFile=getMetadata(targetPath.getAbsolutePath());
    ArchivaRepositoryMetadata metadata=getMetadata(metadataFile);
    updateMetadata(metadata,metadataFile,lastUpdatedTimestamp,artifact);
    MetadataRepository metadataRepository=repositorySession.getRepository();
    Collection<ArtifactMetadata> artifacts=metadataRepository.getArtifacts(repositoryId,artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion());
    for (    ArtifactMetadata artifactMetadata : artifacts) {
      if (artifactMetadata.getVersion().equals(artifact.getVersion())) {
        metadataRepository.removeArtifact(artifactMetadata.getRepositoryId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifact.getVersion(),artifactMetadata.getId());
        for (        RepositoryListener listener : listeners) {
          listener.deleteArtifact(metadataRepository,repository.getId(),artifactMetadata.getNamespace(),artifactMetadata.getProject(),artifactMetadata.getVersion(),artifactMetadata.getId());
        }
        triggerAuditEvent(repositoryId,path,AuditEvent.REMOVE_FILE);
      }
    }
    repositorySession.save();
    repositorySession.close();
  }
 catch (  ContentNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryNotFoundException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),400,e);
  }
catch (  RepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataResolutionException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  MetadataRepositoryException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
catch (  RepositoryAdminException e) {
    throw new ArchivaRestServiceException(""String_Node_Str"" + e.getMessage(),500,e);
  }
 finally {
    repositorySession.close();
  }
  return Boolean.TRUE;
}",0.9956555642196724
20660,"@Test public void deleteArtifact() throws Exception {
  initSourceTargetRepo();
  BrowseService browseService=getBrowseService(authorizationHeader,false);
  List<Artifact> artifacts=browseService.getArtifactDownloadInfos(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
  Assertions.assertThat(artifacts).isNotNull().isNotEmpty().hasSize(3);
  log.info(""String_Node_Str"",artifacts.size());
  try {
    File artifactFile=new File(""String_Node_Str"");
    assertTrue(""String_Node_Str"" + artifactFile.getPath(),artifactFile.exists());
    Artifact artifact=new Artifact();
    artifact.setGroupId(""String_Node_Str"");
    artifact.setArtifactId(""String_Node_Str"");
    artifact.setVersion(""String_Node_Str"");
    artifact.setPackaging(""String_Node_Str"");
    artifact.setContext(SOURCE_REPO_ID);
    RepositoriesService repositoriesService=getRepositoriesService(authorizationHeader);
    repositoriesService.deleteArtifact(artifact);
    assertFalse(""String_Node_Str"" + artifactFile.getPath(),artifactFile.exists());
    artifacts=browseService.getArtifactDownloadInfos(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
    Assertions.assertThat(artifacts).isNotNull().isEmpty();
  }
  finally {
    cleanRepos();
  }
}","@Test public void deleteArtifact() throws Exception {
  initSourceTargetRepo();
  BrowseService browseService=getBrowseService(authorizationHeader,false);
  List<Artifact> artifacts=browseService.getArtifactDownloadInfos(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
  log.info(""String_Node_Str"",artifacts);
  Assertions.assertThat(artifacts).isNotNull().isNotEmpty().hasSize(2);
  VersionsList versionsList=browseService.getVersionsList(""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
  Assertions.assertThat(versionsList.getVersions()).isNotNull().isNotEmpty().hasSize(2);
  log.info(""String_Node_Str"",artifacts.size());
  try {
    File artifactFile=new File(""String_Node_Str"");
    assertTrue(""String_Node_Str"" + artifactFile.getPath(),artifactFile.exists());
    Artifact artifact=new Artifact();
    artifact.setGroupId(""String_Node_Str"");
    artifact.setArtifactId(""String_Node_Str"");
    artifact.setVersion(""String_Node_Str"");
    artifact.setPackaging(""String_Node_Str"");
    artifact.setContext(SOURCE_REPO_ID);
    RepositoriesService repositoriesService=getRepositoriesService(authorizationHeader);
    repositoriesService.deleteArtifact(artifact);
    assertFalse(""String_Node_Str"" + artifactFile.getPath(),artifactFile.exists());
    artifacts=browseService.getArtifactDownloadInfos(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
    Assertions.assertThat(artifacts).isNotNull().isEmpty();
    versionsList=browseService.getVersionsList(""String_Node_Str"",""String_Node_Str"",SOURCE_REPO_ID);
    Assertions.assertThat(versionsList.getVersions()).isNotNull().isNotEmpty().hasSize(1);
  }
  finally {
    cleanRepos();
  }
}",0.3602442333785617
20661,"public void removeArtifact(String repoId,String namespace,String project,String version,String id){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + project+ ""String_Node_Str""+ version);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  String prefix=""String_Node_Str"" + id + ""String_Node_Str"";
  for (  Object key : new ArrayList<Object>(properties.keySet())) {
    String property=(String)key;
    if (property.startsWith(prefix)) {
      properties.remove(property);
    }
  }
  try {
    writeProperties(properties,directory,PROJECT_VERSION_METADATA_KEY);
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}","public void removeArtifact(String repoId,String namespace,String project,String version,String id){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + project+ ""String_Node_Str""+ version);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  properties.remove(""String_Node_Str"" + id);
  String prefix=""String_Node_Str"" + id + ""String_Node_Str"";
  for (  Object key : new ArrayList<Object>(properties.keySet())) {
    String property=(String)key;
    if (property.startsWith(prefix)) {
      properties.remove(property);
    }
  }
  try {
    FileUtils.deleteDirectory(directory);
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}",0.950950950950951
20662,"public List<ArtifactDownloadInfo> getArtifactDownloadInfos(String groupId,String artifactId,String version,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  List<ArtifactDownloadInfo> artifactDownloadInfos=new ArrayList<ArtifactDownloadInfo>();
  RepositorySession session=repositorySessionFactory.createSession();
  MetadataResolver metadataResolver=session.getResolver();
  try {
    for (    String repoId : selectedRepos) {
      List<ArtifactMetadata> artifacts=new ArrayList<ArtifactMetadata>(metadataResolver.resolveArtifacts(session,repoId,groupId,artifactId,version));
      Collections.sort(artifacts,ArtifactMetadataVersionComparator.INSTANCE);
      for (      ArtifactMetadata artifact : artifacts) {
        ArtifactDownloadInfoBuilder builder=new ArtifactDownloadInfoBuilder().forArtifactMetadata(artifact).withManagedRepositoryContent(repositoryContentFactory.getManagedRepositoryContent(repositoryId));
        artifactDownloadInfos.add(builder.build());
      }
    }
  }
 catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  MetadataResolutionException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
 finally {
    if (session != null) {
      session.close();
    }
  }
  return artifactDownloadInfos;
}","public List<ArtifactDownloadInfo> getArtifactDownloadInfos(String groupId,String artifactId,String version,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  List<ArtifactDownloadInfo> artifactDownloadInfos=new ArrayList<ArtifactDownloadInfo>();
  RepositorySession session=repositorySessionFactory.createSession();
  MetadataResolver metadataResolver=session.getResolver();
  try {
    for (    String repoId : selectedRepos) {
      List<ArtifactMetadata> artifacts=new ArrayList<ArtifactMetadata>(metadataResolver.resolveArtifacts(session,repoId,groupId,artifactId,version));
      Collections.sort(artifacts,ArtifactMetadataVersionComparator.INSTANCE);
      for (      ArtifactMetadata artifact : artifacts) {
        ArtifactDownloadInfoBuilder builder=new ArtifactDownloadInfoBuilder().forArtifactMetadata(artifact).withManagedRepositoryContent(repositoryContentFactory.getManagedRepositoryContent(repoId));
        artifactDownloadInfos.add(builder.build());
      }
    }
  }
 catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  MetadataResolutionException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
 finally {
    if (session != null) {
      session.close();
    }
  }
  return artifactDownloadInfos;
}",0.9980557355800388
20663,"public String getArtifactContentText(String groupId,String artifactId,String version,String classifier,String type,String path,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    for (    String repoId : selectedRepos) {
      ManagedRepositoryContent managedRepositoryContent=repositoryContentFactory.getManagedRepositoryContent(repoId);
      ArchivaArtifact archivaArtifact=new ArchivaArtifact(groupId,artifactId,version,classifier,StringUtils.isEmpty(type) ? ""String_Node_Str"" : type,repositoryId);
      File file=managedRepositoryContent.toFile(archivaArtifact);
      if (!file.exists()) {
        return ""String_Node_Str"";
      }
      if (StringUtils.isNotBlank(path)) {
        JarFile jarFile=new JarFile(file);
        ZipEntry zipEntry=jarFile.getEntry(path);
        InputStream inputStream=jarFile.getInputStream(zipEntry);
        try {
          return IOUtils.toString(inputStream);
        }
  finally {
          IOUtils.closeQuietly(inputStream);
        }
      }
      return FileUtils.readFileToString(file);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryNotFoundException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
  return ""String_Node_Str"";
}","public String getArtifactContentText(String groupId,String artifactId,String version,String classifier,String type,String path,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    for (    String repoId : selectedRepos) {
      ManagedRepositoryContent managedRepositoryContent=repositoryContentFactory.getManagedRepositoryContent(repoId);
      ArchivaArtifact archivaArtifact=new ArchivaArtifact(groupId,artifactId,version,classifier,StringUtils.isEmpty(type) ? ""String_Node_Str"" : type,repoId);
      File file=managedRepositoryContent.toFile(archivaArtifact);
      if (!file.exists()) {
        return ""String_Node_Str"";
      }
      if (StringUtils.isNotBlank(path)) {
        JarFile jarFile=new JarFile(file);
        ZipEntry zipEntry=jarFile.getEntry(path);
        InputStream inputStream=jarFile.getInputStream(zipEntry);
        try {
          return IOUtils.toString(inputStream);
        }
  finally {
          IOUtils.closeQuietly(inputStream);
        }
      }
      return FileUtils.readFileToString(file);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryNotFoundException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
  return ""String_Node_Str"";
}",0.9982435597189696
20664,"public List<ArtifactContentEntry> getArtifactContentEntries(String groupId,String artifactId,String version,String classifier,String type,String path,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    for (    String repoId : selectedRepos) {
      ManagedRepositoryContent managedRepositoryContent=repositoryContentFactory.getManagedRepositoryContent(repoId);
      ArchivaArtifact archivaArtifact=new ArchivaArtifact(groupId,artifactId,version,classifier,StringUtils.isEmpty(type) ? ""String_Node_Str"" : type,repositoryId);
      File file=managedRepositoryContent.toFile(archivaArtifact);
      if (file.exists()) {
        return readFileEntries(file,path);
      }
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryNotFoundException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
  return Collections.emptyList();
}","public List<ArtifactContentEntry> getArtifactContentEntries(String groupId,String artifactId,String version,String classifier,String type,String path,String repositoryId) throws ArchivaRestServiceException {
  List<String> selectedRepos=getSelectedRepos(repositoryId);
  try {
    for (    String repoId : selectedRepos) {
      ManagedRepositoryContent managedRepositoryContent=repositoryContentFactory.getManagedRepositoryContent(repoId);
      ArchivaArtifact archivaArtifact=new ArchivaArtifact(groupId,artifactId,version,classifier,StringUtils.isEmpty(type) ? ""String_Node_Str"" : type,repoId);
      File file=managedRepositoryContent.toFile(archivaArtifact);
      if (file.exists()) {
        return readFileEntries(file,path);
      }
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryNotFoundException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
catch (  RepositoryException e) {
    log.error(e.getMessage(),e);
    throw new ArchivaRestServiceException(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),e);
  }
  return Collections.emptyList();
}",0.9977777777777778
20665,"/** 
 * Close the session. Required to be called for all open sessions to ensure resources are properly released. If the session has been marked as dirty, it will be saved. This may save partial changes in the case of a typical <code>try { ... } finally { ... }</code> approach - if this is a problem, ensure you revert changes when an exception occurs.
 */
public void close() throws MetadataRepositoryException {
  try {
    if (dirty) {
      save();
    }
  }
 catch (  MetadataRepositoryException e) {
    throw e;
  }
 finally {
    repository.close();
  }
}","/** 
 * Close the session. Required to be called for all open sessions to ensure resources are properly released. If the session has been marked as dirty, it will be saved. This may save partial changes in the case of a typical <code>try { ... } finally { ... }</code> approach - if this is a problem, ensure you revert changes when an exception occurs.
 */
public void close(){
  try {
    if (dirty) {
      save();
    }
  }
 catch (  MetadataRepositoryException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
 finally {
    repository.close();
  }
}",0.8184233835252436
20666,"@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save() throws MetadataRepositoryException {
    }
    public void close(){
    }
    public void revert() throws MetadataRepositoryException {
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}","@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save(){
    }
    public void close(){
    }
    public void revert(){
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}",0.9913937365527132
20667,"public void save() throws MetadataRepositoryException {
}","public void save(){
}",0.5384615384615384
20668,"public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save() throws MetadataRepositoryException {
        }
        public void close(){
        }
        public void revert() throws MetadataRepositoryException {
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}","public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save(){
        }
        public void close(){
        }
        public void revert(){
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}",0.9927287416683498
20669,"public void revert() throws MetadataRepositoryException {
}","public void revert(){
}",0.5609756097560976
20670,"@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save() throws MetadataRepositoryException {
    }
    public void close(){
    }
    public void revert() throws MetadataRepositoryException {
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}","@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save(){
    }
    public void close(){
    }
    public void revert(){
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}",0.9913937365527132
20671,"public void save() throws MetadataRepositoryException {
}","public void save(){
}",0.5384615384615384
20672,"public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save() throws MetadataRepositoryException {
        }
        public void close(){
        }
        public void revert() throws MetadataRepositoryException {
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}","public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save(){
        }
        public void close(){
        }
        public void revert(){
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}",0.9927287416683498
20673,"public void revert() throws MetadataRepositoryException {
}","public void revert(){
}",0.5609756097560976
20674,"@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save() throws MetadataRepositoryException {
    }
    public void close(){
    }
    public void revert() throws MetadataRepositoryException {
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}","@Override public MetadataRepository getRepository(){
  return new MetadataRepository(){
    public void updateProject(    String repositoryId,    ProjectMetadata project) throws MetadataRepositoryException {
    }
    public void updateArtifact(    String repositoryId,    String namespace,    String projectId,    String projectVersion,    ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
    }
    public void updateProjectVersion(    String repositoryId,    String namespace,    String projectId,    ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
    }
    public void updateNamespace(    String repositoryId,    String namespace) throws MetadataRepositoryException {
    }
    public List<String> getMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
      return Collections.emptyList();
    }
    public MetadataFacet getMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
      return null;
    }
    public void addMetadataFacet(    String repositoryId,    MetadataFacet metadataFacet) throws MetadataRepositoryException {
    }
    public void removeMetadataFacets(    String repositoryId,    String facetId) throws MetadataRepositoryException {
    }
    public void removeMetadataFacet(    String repositoryId,    String facetId,    String name) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifactsByDateRange(    String repositoryId,    Date startTime,    Date endTime) throws MetadataRepositoryException {
      return null;
    }
    public Collection<String> getRepositories() throws MetadataRepositoryException {
      return null;
    }
    public List<ArtifactMetadata> getArtifactsByChecksum(    String repositoryId,    String checksum) throws MetadataRepositoryException {
      return null;
    }
    public void removeArtifact(    String repositoryId,    String namespace,    String project,    String version,    String id) throws MetadataRepositoryException {
    }
    public void removeRepository(    String repositoryId) throws MetadataRepositoryException {
    }
    public List<ArtifactMetadata> getArtifacts(    String repositoryId) throws MetadataRepositoryException {
      return null;
    }
    public ProjectMetadata getProject(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public ProjectVersionMetadata getProjectVersion(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getArtifactVersions(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<ProjectVersionReference> getProjectReferences(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getRootNamespaces(    String repoId) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getNamespaces(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjects(    String repoId,    String namespace) throws MetadataResolutionException {
      return null;
    }
    public Collection<String> getProjectVersions(    String repoId,    String namespace,    String projectId) throws MetadataResolutionException {
      return null;
    }
    public Collection<ArtifactMetadata> getArtifacts(    String repoId,    String namespace,    String projectId,    String projectVersion) throws MetadataResolutionException {
      return null;
    }
    public void save(){
    }
    public void close(){
    }
    public void revert(){
    }
    public boolean canObtainAccess(    Class<?> aClass){
      return false;
    }
    public Object obtainAccess(    Class<?> aClass){
      return null;
    }
  }
;
}",0.9913937365527132
20675,"public void save() throws MetadataRepositoryException {
}","public void save(){
}",0.5384615384615384
20676,"public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save() throws MetadataRepositoryException {
        }
        public void close(){
        }
        public void revert() throws MetadataRepositoryException {
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}","public RepositorySession createSession(){
  return new RepositorySession(null,null){
    @Override public void close(){
      return;
    }
    @Override public void save(){
    }
    @Override public MetadataRepository getRepository(){
      return new MetadataRepository(){
        public void updateProject(        String repositoryId,        ProjectMetadata project) throws MetadataRepositoryException {
        }
        public void updateArtifact(        String repositoryId,        String namespace,        String projectId,        String projectVersion,        ArtifactMetadata artifactMeta) throws MetadataRepositoryException {
        }
        public void updateProjectVersion(        String repositoryId,        String namespace,        String projectId,        ProjectVersionMetadata versionMetadata) throws MetadataRepositoryException {
        }
        public void updateNamespace(        String repositoryId,        String namespace) throws MetadataRepositoryException {
        }
        public List<String> getMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
          return Collections.emptyList();
        }
        public MetadataFacet getMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
          return null;
        }
        public void addMetadataFacet(        String repositoryId,        MetadataFacet metadataFacet) throws MetadataRepositoryException {
        }
        public void removeMetadataFacets(        String repositoryId,        String facetId) throws MetadataRepositoryException {
        }
        public void removeMetadataFacet(        String repositoryId,        String facetId,        String name) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifactsByDateRange(        String repositoryId,        Date startTime,        Date endTime) throws MetadataRepositoryException {
          return null;
        }
        public Collection<String> getRepositories() throws MetadataRepositoryException {
          return null;
        }
        public List<ArtifactMetadata> getArtifactsByChecksum(        String repositoryId,        String checksum) throws MetadataRepositoryException {
          return null;
        }
        public void removeArtifact(        String repositoryId,        String namespace,        String project,        String version,        String id) throws MetadataRepositoryException {
        }
        public void removeRepository(        String repositoryId) throws MetadataRepositoryException {
        }
        public List<ArtifactMetadata> getArtifacts(        String repositoryId) throws MetadataRepositoryException {
          return null;
        }
        public ProjectMetadata getProject(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public ProjectVersionMetadata getProjectVersion(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getArtifactVersions(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<ProjectVersionReference> getProjectReferences(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getRootNamespaces(        String repoId) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getNamespaces(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjects(        String repoId,        String namespace) throws MetadataResolutionException {
          return null;
        }
        public Collection<String> getProjectVersions(        String repoId,        String namespace,        String projectId) throws MetadataResolutionException {
          return null;
        }
        public Collection<ArtifactMetadata> getArtifacts(        String repoId,        String namespace,        String projectId,        String projectVersion) throws MetadataResolutionException {
          return null;
        }
        public void save(){
        }
        public void close(){
        }
        public void revert(){
        }
        public boolean canObtainAccess(        Class<?> aClass){
          return false;
        }
        public Object obtainAccess(        Class<?> aClass){
          return null;
        }
      }
;
    }
  }
;
}",0.9927287416683498
20677,"public void revert() throws MetadataRepositoryException {
}","public void revert(){
}",0.5609756097560976
20678,"@Before public void setUp() throws Exception {
  super.setUp();
  requestControl=MockControl.createControl(DavServletRequest.class);
  request=(DavServletRequest)requestControl.getMock();
  responseControl=MockControl.createControl(DavServletResponse.class);
  response=(DavServletResponse)responseControl.getMock();
  responseControl.setDefaultMatcher(MockControl.ALWAYS_MATCHER);
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  config=new Configuration();
  archivaConfiguration.getConfiguration();
  archivaConfigurationControl.setReturnValue(config,5,20);
  archivaConfiguration.save(config);
  archivaConfigurationControl.setVoidCallable(1,4);
  archivaConfigurationControl.replay();
  defaultManagedRepositoryAdmin.setArchivaConfiguration(archivaConfiguration);
  defaultManagedRepositoryAdmin.getRepositoryCommonValidator().setArchivaConfiguration(archivaConfiguration);
  if (defaultManagedRepositoryAdmin.getManagedRepository(RELEASES_REPO) == null) {
    defaultManagedRepositoryAdmin.addManagedRepository(createManagedRepository(RELEASES_REPO,new File(""String_Node_Str"" + RELEASES_REPO).getPath(),""String_Node_Str""),false,null);
  }
  if (defaultManagedRepositoryAdmin.getManagedRepository(INTERNAL_REPO) == null) {
    defaultManagedRepositoryAdmin.addManagedRepository(createManagedRepository(INTERNAL_REPO,new File(""String_Node_Str"" + INTERNAL_REPO).getPath(),""String_Node_Str""),false,null);
  }
  RepositoryGroup repoGroupConfig=new RepositoryGroup();
  repoGroupConfig.setId(LOCAL_REPO_GROUP);
  repoGroupConfig.addRepository(RELEASES_REPO);
  repoGroupConfig.addRepository(INTERNAL_REPO);
  defaultRepositoryGroupAdmin.setArchivaConfiguration(archivaConfiguration);
  if (defaultManagedRepositoryAdmin.getManagedRepository(LOCAL_REPO_GROUP) == null) {
    defaultRepositoryGroupAdmin.addRepositoryGroup(repoGroupConfig,null);
  }
  repoContentFactoryControl=MockClassControl.createControl(RepositoryContentFactory.class);
  repoFactory=(RepositoryContentFactory)repoContentFactoryControl.getMock();
  repoRequestControl=MockClassControl.createControl(RepositoryRequest.class);
  repoRequest=(RepositoryRequest)repoRequestControl.getMock();
  resourceFactory=new OverridingArchivaDavResourceFactory(applicationContext,plexusSisuBridge,archivaConfiguration);
  resourceFactory.setArchivaConfiguration(archivaConfiguration);
  resourceFactory.setRepositoryFactory(repoFactory);
  resourceFactory.setRepositoryRequest(repoRequest);
  resourceFactory.setConnectors(new OverridingRepositoryProxyConnectors());
}","@Before public void setUp() throws Exception {
  super.setUp();
  requestControl=MockControl.createControl(DavServletRequest.class);
  request=(DavServletRequest)requestControl.getMock();
  responseControl=MockControl.createControl(DavServletResponse.class);
  response=(DavServletResponse)responseControl.getMock();
  responseControl.setDefaultMatcher(MockControl.ALWAYS_MATCHER);
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  config=new Configuration();
  archivaConfiguration.getConfiguration();
  archivaConfigurationControl.setReturnValue(config,5,20);
  archivaConfiguration.save(config);
  archivaConfigurationControl.setVoidCallable(1,4);
  archivaConfigurationControl.replay();
  defaultManagedRepositoryAdmin.setArchivaConfiguration(archivaConfiguration);
  ((DefaultRepositoryCommonValidator)defaultManagedRepositoryAdmin.getRepositoryCommonValidator()).setArchivaConfiguration(archivaConfiguration);
  if (defaultManagedRepositoryAdmin.getManagedRepository(RELEASES_REPO) == null) {
    defaultManagedRepositoryAdmin.addManagedRepository(createManagedRepository(RELEASES_REPO,new File(""String_Node_Str"" + RELEASES_REPO).getPath(),""String_Node_Str""),false,null);
  }
  if (defaultManagedRepositoryAdmin.getManagedRepository(INTERNAL_REPO) == null) {
    defaultManagedRepositoryAdmin.addManagedRepository(createManagedRepository(INTERNAL_REPO,new File(""String_Node_Str"" + INTERNAL_REPO).getPath(),""String_Node_Str""),false,null);
  }
  RepositoryGroup repoGroupConfig=new RepositoryGroup();
  repoGroupConfig.setId(LOCAL_REPO_GROUP);
  repoGroupConfig.addRepository(RELEASES_REPO);
  repoGroupConfig.addRepository(INTERNAL_REPO);
  defaultRepositoryGroupAdmin.setArchivaConfiguration(archivaConfiguration);
  if (defaultManagedRepositoryAdmin.getManagedRepository(LOCAL_REPO_GROUP) == null) {
    defaultRepositoryGroupAdmin.addRepositoryGroup(repoGroupConfig,null);
  }
  repoContentFactoryControl=MockClassControl.createControl(RepositoryContentFactory.class);
  repoFactory=(RepositoryContentFactory)repoContentFactoryControl.getMock();
  repoRequestControl=MockClassControl.createControl(RepositoryRequest.class);
  repoRequest=(RepositoryRequest)repoRequestControl.getMock();
  resourceFactory=new OverridingArchivaDavResourceFactory(applicationContext,plexusSisuBridge,archivaConfiguration);
  resourceFactory.setArchivaConfiguration(archivaConfiguration);
  resourceFactory.setRepositoryFactory(repoFactory);
  resourceFactory.setRepositoryRequest(repoRequest);
  resourceFactory.setConnectors(new OverridingRepositoryProxyConnectors());
}",0.9808486669170108
20679,"@Test public void testMerge() throws Exception {
  Configuration c=new Configuration();
  ManagedRepositoryConfiguration testRepo=new ManagedRepositoryConfiguration();
  testRepo.setId(TEST_REPO_ID);
  testRepo.setLocation(""String_Node_Str"");
  RepositoryScanningConfiguration repoScanConfig=new RepositoryScanningConfiguration();
  List<String> knownContentConsumers=new ArrayList<String>();
  knownContentConsumers.add(""String_Node_Str"");
  repoScanConfig.setKnownContentConsumers(knownContentConsumers);
  c.setRepositoryScanning(repoScanConfig);
  ManagedRepositoryConfiguration targetRepo=new ManagedRepositoryConfiguration();
  targetRepo.setId(""String_Node_Str"");
  targetRepo.setLocation(""String_Node_Str"");
  c.addManagedRepository(testRepo);
  c.addManagedRepository(targetRepo);
  configuration.save(c);
  when(metadataRepository.getArtifacts(TEST_REPO_ID)).thenReturn(getArtifacts());
  repositoryMerger.merge(metadataRepository,TEST_REPO_ID,""String_Node_Str"");
  verify(metadataRepository).getArtifacts(TEST_REPO_ID);
}","@Test public void testMerge() throws Exception {
  Configuration c=new Configuration();
  ManagedRepositoryConfiguration testRepo=new ManagedRepositoryConfiguration();
  testRepo.setId(TEST_REPO_ID);
  testRepo.setLocation(""String_Node_Str"" + File.separatorChar + ""String_Node_Str"");
  RepositoryScanningConfiguration repoScanConfig=new RepositoryScanningConfiguration();
  List<String> knownContentConsumers=new ArrayList<String>();
  knownContentConsumers.add(""String_Node_Str"");
  repoScanConfig.setKnownContentConsumers(knownContentConsumers);
  c.setRepositoryScanning(repoScanConfig);
  ManagedRepositoryConfiguration targetRepo=new ManagedRepositoryConfiguration();
  targetRepo.setId(""String_Node_Str"");
  targetRepo.setLocation(""String_Node_Str"");
  c.addManagedRepository(testRepo);
  c.addManagedRepository(targetRepo);
  configuration.save(c);
  when(metadataRepository.getArtifacts(TEST_REPO_ID)).thenReturn(getArtifacts());
  repositoryMerger.merge(metadataRepository,TEST_REPO_ID,""String_Node_Str"");
  verify(metadataRepository).getArtifacts(TEST_REPO_ID);
}",0.9805225653206652
20680,"@Test public void testMergeWithOutConflictArtifacts() throws Exception {
  String sourceRepoId=""String_Node_Str"";
  ArtifactMetadata artifact1=new ArtifactMetadata();
  artifact1.setNamespace(""String_Node_Str"");
  artifact1.setProject(""String_Node_Str"");
  artifact1.setVersion(""String_Node_Str"");
  artifact1.setProjectVersion(""String_Node_Str"");
  artifact1.setId(""String_Node_Str"");
  artifact1.setRepositoryId(sourceRepoId);
  List<ArtifactMetadata> sourceRepoArtifactsList=getArtifacts();
  sourceRepoArtifactsList.add(artifact1);
  List<ArtifactMetadata> targetRepoArtifactsList=getArtifacts();
  Configuration c=new Configuration();
  ManagedRepositoryConfiguration testRepo=new ManagedRepositoryConfiguration();
  testRepo.setId(TEST_REPO_ID);
  testRepo.setLocation(""String_Node_Str"");
  String sourceRepo=""String_Node_Str"";
  ManagedRepositoryConfiguration testRepoWithConflicts=new ManagedRepositoryConfiguration();
  testRepoWithConflicts.setId(sourceRepoId);
  testRepoWithConflicts.setLocation(sourceRepo);
  RepositoryScanningConfiguration repoScanConfig=new RepositoryScanningConfiguration();
  List<String> knownContentConsumers=new ArrayList<String>();
  knownContentConsumers.add(""String_Node_Str"");
  repoScanConfig.setKnownContentConsumers(knownContentConsumers);
  c.setRepositoryScanning(repoScanConfig);
  c.addManagedRepository(testRepo);
  c.addManagedRepository(testRepoWithConflicts);
  configuration.save(c);
  File targetRepoFile=new File(""String_Node_Str"");
  targetRepoFile.setReadOnly();
  when(metadataRepository.getArtifacts(sourceRepoId)).thenReturn(sourceRepoArtifactsList);
  when(metadataRepository.getArtifacts(TEST_REPO_ID)).thenReturn(targetRepoArtifactsList);
  assertEquals(1,repositoryMerger.getConflictingArtifacts(metadataRepository,sourceRepoId,TEST_REPO_ID).size());
  verify(metadataRepository).getArtifacts(TEST_REPO_ID);
}","@Test public void testMergeWithOutConflictArtifacts() throws Exception {
  String sourceRepoId=""String_Node_Str"";
  ArtifactMetadata artifact1=new ArtifactMetadata();
  artifact1.setNamespace(""String_Node_Str"");
  artifact1.setProject(""String_Node_Str"");
  artifact1.setVersion(""String_Node_Str"");
  artifact1.setProjectVersion(""String_Node_Str"");
  artifact1.setId(""String_Node_Str"");
  artifact1.setRepositoryId(sourceRepoId);
  List<ArtifactMetadata> sourceRepoArtifactsList=getArtifacts();
  sourceRepoArtifactsList.add(artifact1);
  List<ArtifactMetadata> targetRepoArtifactsList=getArtifacts();
  Configuration c=new Configuration();
  ManagedRepositoryConfiguration testRepo=new ManagedRepositoryConfiguration();
  testRepo.setId(TEST_REPO_ID);
  testRepo.setLocation(""String_Node_Str"" + File.separatorChar + ""String_Node_Str"");
  String sourceRepo=""String_Node_Str"" + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"";
  ManagedRepositoryConfiguration testRepoWithConflicts=new ManagedRepositoryConfiguration();
  testRepoWithConflicts.setId(sourceRepoId);
  testRepoWithConflicts.setLocation(sourceRepo);
  RepositoryScanningConfiguration repoScanConfig=new RepositoryScanningConfiguration();
  List<String> knownContentConsumers=new ArrayList<String>();
  knownContentConsumers.add(""String_Node_Str"");
  repoScanConfig.setKnownContentConsumers(knownContentConsumers);
  c.setRepositoryScanning(repoScanConfig);
  c.addManagedRepository(testRepo);
  c.addManagedRepository(testRepoWithConflicts);
  configuration.save(c);
  File targetRepoFile=new File(""String_Node_Str"");
  targetRepoFile.setReadOnly();
  when(metadataRepository.getArtifacts(sourceRepoId)).thenReturn(sourceRepoArtifactsList);
  when(metadataRepository.getArtifacts(TEST_REPO_ID)).thenReturn(targetRepoArtifactsList);
  assertEquals(1,repositoryMerger.getConflictingArtifacts(metadataRepository,sourceRepoId,TEST_REPO_ID).size());
  verify(metadataRepository).getArtifacts(TEST_REPO_ID);
}",0.9590583418628454
20681,"@Before public void startServer() throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  this.server=new Server(0);
  ServletContextHandler context=new ServletContextHandler();
  context.setContextPath(""String_Node_Str"");
  context.setInitParameter(""String_Node_Str"",getSpringConfigLocation());
  ContextLoaderListener contextLoaderListener=new ContextLoaderListener();
  context.addEventListener(contextLoaderListener);
  ServletHolder sh=new ServletHolder(CXFServlet.class);
  SessionHandler sessionHandler=new SessionHandler();
  context.setSessionHandler(sessionHandler);
  context.addServlet(sh,""String_Node_Str"" + getRestServicesPath() + ""String_Node_Str"");
  ServletHolder repoSh=new ServletHolder(RepositoryServlet.class);
  context.addServlet(repoSh,""String_Node_Str"");
  server.setHandler(context);
  this.server.start();
  Connector connector=this.server.getConnectors()[0];
  this.port=connector.getLocalPort();
  log.info(""String_Node_Str"" + this.port);
  this.redirectServer=new Server(0);
  ServletHolder shRedirect=new ServletHolder(RedirectServlet.class);
  ServletContextHandler contextRedirect=new ServletContextHandler();
  contextRedirect.setContextPath(""String_Node_Str"");
  contextRedirect.addServlet(shRedirect,""String_Node_Str"");
  redirectServer.setHandler(contextRedirect);
  redirectServer.start();
  this.redirectPort=redirectServer.getConnectors()[0].getLocalPort();
  log.info(""String_Node_Str"",redirectPort);
  FakeCreateAdminService fakeCreateAdminService=getFakeCreateAdminService();
  Boolean res=fakeCreateAdminService.createAdminIfNeeded();
  assertTrue(res.booleanValue());
}","@Before public void startServer() throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  this.server=new Server(0);
  ServletContextHandler context=new ServletContextHandler();
  context.setContextPath(""String_Node_Str"");
  context.setInitParameter(""String_Node_Str"",getSpringConfigLocation());
  ContextLoaderListener contextLoaderListener=new ContextLoaderListener();
  context.addEventListener(contextLoaderListener);
  ServletHolder sh=new ServletHolder(CXFServlet.class);
  SessionHandler sessionHandler=new SessionHandler();
  context.setSessionHandler(sessionHandler);
  context.addServlet(sh,""String_Node_Str"" + getRestServicesPath() + ""String_Node_Str"");
  ServletHolder repoSh=new ServletHolder(RepositoryServlet.class);
  context.addServlet(repoSh,""String_Node_Str"");
  server.setHandler(context);
  this.server.start();
  Connector connector=this.server.getConnectors()[0];
  this.port=connector.getLocalPort();
  log.info(""String_Node_Str"" + this.port);
  this.redirectServer=new Server(0);
  ServletHolder shRedirect=new ServletHolder(RedirectServlet.class);
  ServletContextHandler contextRedirect=new ServletContextHandler();
  contextRedirect.setContextPath(""String_Node_Str"");
  contextRedirect.addServlet(shRedirect,""String_Node_Str"");
  redirectServer.setHandler(contextRedirect);
  redirectServer.start();
  this.redirectPort=redirectServer.getConnectors()[0].getLocalPort();
  log.info(""String_Node_Str"",redirectPort);
  User user=new User();
  user.setEmail(""String_Node_Str"");
  user.setFullName(""String_Node_Str"");
  user.setUsername(RedbackRoleConstants.ADMINISTRATOR_ACCOUNT_NAME);
  user.setPassword(FakeCreateAdminService.ADMIN_TEST_PWD);
  getUserService(null).createAdminUser(user);
}",0.8845470692717584
20682,"public Resource createResource(String identifier) throws RbacManagerException {
  return new MemoryResource();
}","public Resource createResource(String identifier) throws RbacManagerException {
  return null;
}",0.903846153846154
20683,"@Test public void downloadWithRemoteRedirect() throws Exception {
  RemoteRepository remoteRepository=getRemoteRepositoriesService().getRemoteRepository(""String_Node_Str"");
  remoteRepository.setUrl(""String_Node_Str"" + redirectPort);
  getRemoteRepositoriesService().updateRemoteRepository(remoteRepository);
  RoleManagementService roleManagementService=getRoleManagementService(authorizationHeader);
  if (!roleManagementService.templatedRoleExists(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"")) {
    roleManagementService.createTemplatedRole(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"");
  }
  getUserService(authorizationHeader).createGuestUser();
  roleManagementService.assignRole(ArchivaRoleConstants.TEMPLATE_GUEST,""String_Node_Str"");
  roleManagementService.assignTemplatedRole(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"",""String_Node_Str"");
  getUserService(authorizationHeader).removeFromCache(""String_Node_Str"");
  URL url=new URL(""String_Node_Str"" + port + ""String_Node_Str"");
  HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
  InputStream is=urlConnection.getInputStream();
  File file=new File(""String_Node_Str"");
  if (file.exists()) {
    file.delete();
  }
  FileWriter fw=new FileWriter(file);
  IOUtil.copy(is,fw);
  ZipFile zipFile=new ZipFile(file);
  List<String> entries=getZipEntriesNames(zipFile);
  ZipEntry zipEntry=zipFile.getEntry(""String_Node_Str"");
  assertNotNull(""String_Node_Str"" + entries + ""String_Node_Str""+ FileUtils.readFileToString(file),zipEntry);
  zipFile.close();
  file.deleteOnExit();
}","@Test public void downloadWithRemoteRedirect() throws Exception {
  RemoteRepository remoteRepository=getRemoteRepositoriesService().getRemoteRepository(""String_Node_Str"");
  remoteRepository.setUrl(""String_Node_Str"" + redirectPort);
  getRemoteRepositoriesService().updateRemoteRepository(remoteRepository);
  RoleManagementService roleManagementService=getRoleManagementService(authorizationHeader);
  if (!roleManagementService.templatedRoleExists(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"")) {
    roleManagementService.createTemplatedRole(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"");
  }
  getUserService(authorizationHeader).createGuestUser();
  roleManagementService.assignRole(ArchivaRoleConstants.TEMPLATE_GUEST,""String_Node_Str"");
  roleManagementService.assignTemplatedRole(ArchivaRoleConstants.TEMPLATE_REPOSITORY_OBSERVER,""String_Node_Str"",""String_Node_Str"");
  getUserService(authorizationHeader).removeFromCache(""String_Node_Str"");
  File file=new File(""String_Node_Str"");
  if (file.exists()) {
    file.delete();
  }
  HttpWagon httpWagon=new HttpWagon();
  httpWagon.connect(new Repository(""String_Node_Str"",""String_Node_Str"" + port));
  httpWagon.get(""String_Node_Str"",file);
  ZipFile zipFile=new ZipFile(file);
  List<String> entries=getZipEntriesNames(zipFile);
  ZipEntry zipEntry=zipFile.getEntry(""String_Node_Str"");
  assertNotNull(""String_Node_Str"" + entries + ""String_Node_Str""+ FileUtils.readFileToString(file),zipEntry);
  zipFile.close();
  file.deleteOnExit();
}",0.8393194706994329
20684,"@Test(dependsOnMethods={""String_Node_Str""},alwaysRun=true) public void testAddArtifactNoFilePath(){
  addArtifact(getGroupId(),getArtifactId(),getVersion(),getPackaging(),""String_Node_Str"",getRepositoryId(),false);
  assertTextPresent(""String_Node_Str"");
}","@Test(dependsOnMethods={""String_Node_Str""},alwaysRun=true) public void testAddArtifactNoFilePath(){
  addArtifact(getGroupId(),getArtifactId(),getVersion(),getPackaging(),""String_Node_Str"",getRepositoryId(),true);
  assertTextPresent(""String_Node_Str"");
}",0.9863013698630136
20685,"public void assertCreateUserPage(){
  assertPage(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertButtonWithValuePresent(""String_Node_Str"");
}","public void assertCreateUserPage(){
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertElementPresent(""String_Node_Str"");
  assertElementNotPresent(""String_Node_Str"");
}",0.7766323024054983
20686,"public void assertUserRolesPage(){
  assertPage(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  String userRoles=""String_Node_Str"";
  String[] arrayRole=userRoles.split(""String_Node_Str"");
  for (  String userroles : arrayRole) {
    assertTextPresent(userroles);
  }
}","public void assertUserRolesPage(){
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  assertTextPresent(""String_Node_Str"",""String_Node_Str"");
  String userRoles=""String_Node_Str"";
  String[] arrayRole=userRoles.split(""String_Node_Str"");
  for (  String userroles : arrayRole) {
    assertTextPresent(userroles);
  }
}",0.8835341365461847
20687,"public void assertDeleteUserPage(String username){
  assertPage(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"" + username);
  assertButtonWithValuePresent(""String_Node_Str"");
}","public void assertDeleteUserPage(String username){
  assertTextPresent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertTextPresent(""String_Node_Str"");
  assertTextPresent(""String_Node_Str"" + username,""String_Node_Str"" + username);
  assertButtonWithIdPresent(""String_Node_Str"");
}",0.8134991119005328
20688,"private void createUser(String userName,String fullName,String emailAd,String password,String confirmPassword,boolean valid){
  getSelenium().open(""String_Node_Str"");
  clickButtonWithValue(""String_Node_Str"");
  assertCreateUserPage();
  setFieldValue(""String_Node_Str"",userName);
  setFieldValue(""String_Node_Str"",fullName);
  setFieldValue(""String_Node_Str"",emailAd);
  setFieldValue(""String_Node_Str"",password);
  setFieldValue(""String_Node_Str"",confirmPassword);
  submit();
  assertUserRolesPage();
  clickButtonWithValue(""String_Node_Str"");
  if (valid) {
    String[] columnValues={userName,fullName,emailAd};
    assertElementPresent(XPathExpressionUtil.getTableRow(columnValues));
  }
 else {
    assertCreateUserPage();
  }
}","private void createUser(String userName,String fullName,String emailAd,String password,String confirmPassword,boolean valid){
  getSelenium().open(""String_Node_Str"");
  clickButtonWithLocator(""String_Node_Str"",true);
  assertCreateUserPage();
  setFieldValue(""String_Node_Str"",userName);
  setFieldValue(""String_Node_Str"",fullName);
  setFieldValue(""String_Node_Str"",emailAd);
  setFieldValue(""String_Node_Str"",password);
  setFieldValue(""String_Node_Str"",confirmPassword);
  submit();
  assertUserRolesPage();
  clickButtonWithName(""String_Node_Str"",true);
  if (valid) {
    String[] columnValues={userName,fullName,emailAd};
    assertElementPresent(XPathExpressionUtil.getTableRow(columnValues));
  }
 else {
    assertCreateUserPage();
  }
}",0.9304523970290344
20689,"public void assertTextPresent(String text){
  Assert.assertTrue(getSelenium().isTextPresent(text),""String_Node_Str"" + text + ""String_Node_Str"");
}","/** 
 * one of text args must be in the page so use en and fr text (olamy use en locale :-) )
 * @param texts
 */
public void assertTextPresent(String... texts){
  boolean present=false;
  StringBuilder sb=new StringBuilder();
  for (  String text : texts) {
    present=present || getSelenium().isTextPresent(text);
    sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
  }
  Assert.assertTrue(present,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
}",0.3230016313213703
20690,"@Test public void updateDeleteManagedRepoWithStagedRepo() throws Exception {
  String repoId=""String_Node_Str"";
  String repoLocation=APPSERVER_BASE_PATH + File.separator + ""String_Node_Str"";
  String stageRepoLocation=APPSERVER_BASE_PATH + File.separator + repoId;
  File repoDir=clearRepoLocation(repoLocation);
  mockAuditListener.clearEvents();
  List<ManagedRepository> repos=managedRepositoryAdmin.getManagedRepositories();
  assertNotNull(repos);
  int initialSize=repos.size();
  assertTrue(initialSize > 0);
  ManagedRepository repo=new ManagedRepository();
  repo.setId(repoId);
  repo.setName(""String_Node_Str"");
  repo.setLocation(repoLocation);
  managedRepositoryAdmin.addManagedRepository(repo,false,getFakeAuditInformation());
  assertTemplateRoleExists(repoId);
  assertFalse(new File(repoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleNotExists(repoId + STAGE_REPO_ID_END);
  repos=managedRepositoryAdmin.getManagedRepositories();
  assertNotNull(repos);
  assertEquals(initialSize + 1,repos.size());
  String newName=""String_Node_Str"";
  repo.setName(newName);
  repo.setLocation(repoLocation);
  managedRepositoryAdmin.updateManagedRepository(repo,true,getFakeAuditInformation(),false);
  repo=managedRepositoryAdmin.getManagedRepository(repoId);
  assertNotNull(repo);
  assertEquals(newName,repo.getName());
  assertEquals(new File(repoLocation).getCanonicalPath(),new File(repo.getLocation()).getCanonicalPath());
  assertTrue(new File(repoLocation).exists());
  assertTemplateRoleExists(repoId);
  assertTrue(new File(stageRepoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleExists(repoId + STAGE_REPO_ID_END);
  managedRepositoryAdmin.deleteManagedRepository(repo.getId(),getFakeAuditInformation(),false);
  assertTrue(repoDir.exists());
  assertTemplateRoleNotExists(repoId);
  assertTrue(new File(stageRepoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleNotExists(repoId + STAGE_REPO_ID_END);
  assertAuditListenerCallAndUpdateAddAndDelete(true);
  mockAuditListener.clearEvents();
}","@Test public void updateDeleteManagedRepoWithStagedRepo() throws Exception {
  String repoId=""String_Node_Str"";
  String repoLocation=APPSERVER_BASE_PATH + File.separator + ""String_Node_Str"";
  String stageRepoLocation=APPSERVER_BASE_PATH + File.separator + repoId;
  File repoDir=clearRepoLocation(repoLocation);
  mockAuditListener.clearEvents();
  List<ManagedRepository> repos=managedRepositoryAdmin.getManagedRepositories();
  assertNotNull(repos);
  int initialSize=repos.size();
  assertTrue(initialSize > 0);
  ManagedRepository repo=getTestManagedRepository(repoId,repoLocation);
  managedRepositoryAdmin.addManagedRepository(repo,false,getFakeAuditInformation());
  assertTemplateRoleExists(repoId);
  assertFalse(new File(repoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleNotExists(repoId + STAGE_REPO_ID_END);
  repos=managedRepositoryAdmin.getManagedRepositories();
  assertNotNull(repos);
  assertEquals(initialSize + 1,repos.size());
  String newName=""String_Node_Str"";
  repo.setName(newName);
  repo.setLocation(repoLocation);
  managedRepositoryAdmin.updateManagedRepository(repo,true,getFakeAuditInformation(),false);
  repo=managedRepositoryAdmin.getManagedRepository(repoId);
  assertNotNull(repo);
  assertEquals(newName,repo.getName());
  assertEquals(new File(repoLocation).getCanonicalPath(),new File(repo.getLocation()).getCanonicalPath());
  assertTrue(new File(repoLocation).exists());
  assertEquals(getTestManagedRepository(repoId,repoLocation).getCronExpression(),repo.getCronExpression());
  assertEquals(getTestManagedRepository(repoId,repoLocation).getLayout(),repo.getLayout());
  assertEquals(getTestManagedRepository(repoId,repoLocation).getId(),repo.getId());
  assertTemplateRoleExists(repoId);
  assertTrue(new File(stageRepoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleExists(repoId + STAGE_REPO_ID_END);
  managedRepositoryAdmin.deleteManagedRepository(repo.getId(),getFakeAuditInformation(),false);
  assertTrue(repoDir.exists());
  assertTemplateRoleNotExists(repoId);
  assertTrue(new File(stageRepoLocation + STAGE_REPO_ID_END).exists());
  assertTemplateRoleNotExists(repoId + STAGE_REPO_ID_END);
  assertAuditListenerCallAndUpdateAddAndDelete(true);
  mockAuditListener.clearEvents();
}",0.9117033603707996
20691,"@Override @Before public void setUp() throws Exception {
  super.setUp();
  scheduler=new ArchivaTaskSchedulerStub();
  ArchivaConfiguration configuration=applicationContext.getBean(ArchivaConfiguration.class);
  FileTypes filetypes=applicationContext.getBean(FileTypes.class);
  nexusIndexerConsumer=new NexusIndexerConsumer(scheduler,configuration,filetypes,plexusSisuBridge);
  ((Initializable)nexusIndexerConsumer).initialize();
  repositoryConfig=new ManagedRepositoryConfiguration();
  repositoryConfig.setId(""String_Node_Str"");
  repositoryConfig.setLocation(""String_Node_Str"");
  repositoryConfig.setLayout(""String_Node_Str"");
  repositoryConfig.setName(""String_Node_Str"");
  repositoryConfig.setScanned(true);
  repositoryConfig.setSnapshots(false);
  repositoryConfig.setReleases(true);
}","@Override @Before public void setUp() throws Exception {
  super.setUp();
  scheduler=new ArchivaTaskSchedulerStub();
  ArchivaConfiguration configuration=applicationContext.getBean(ArchivaConfiguration.class);
  FileTypes filetypes=applicationContext.getBean(FileTypes.class);
  nexusIndexerConsumer=new NexusIndexerConsumer(scheduler,configuration,filetypes,plexusSisuBridge,mavenIndexerUtils);
  ((Initializable)nexusIndexerConsumer).initialize();
  repositoryConfig=new ManagedRepositoryConfiguration();
  repositoryConfig.setId(""String_Node_Str"");
  repositoryConfig.setLocation(""String_Node_Str"");
  repositoryConfig.setLayout(""String_Node_Str"");
  repositoryConfig.setName(""String_Node_Str"");
  repositoryConfig.setScanned(true);
  repositoryConfig.setSnapshots(false);
  repositoryConfig.setReleases(true);
}",0.9888475836431226
20692,"@Before public void setUp() throws Exception {
  super.setUp();
  FileUtils.deleteDirectory(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_1 + ""String_Node_Str""));
  assertFalse(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_1 + ""String_Node_Str"").exists());
  FileUtils.deleteDirectory(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_2 + ""String_Node_Str""));
  assertFalse(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_2 + ""String_Node_Str"").exists());
  archivaConfigControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfig=(ArchivaConfiguration)archivaConfigControl.getMock();
  search=new NexusRepositorySearch(plexusSisuBridge,archivaConfig);
  nexusIndexer=plexusSisuBridge.lookup(NexusIndexer.class);
  artifactContextProducer=plexusSisuBridge.lookup(ArtifactContextProducer.class);
  config=new Configuration();
  config.addManagedRepository(createRepositoryConfig(TEST_REPO_1));
  config.addManagedRepository(createRepositoryConfig(TEST_REPO_2));
}","@Before public void setUp() throws Exception {
  super.setUp();
  FileUtils.deleteDirectory(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_1 + ""String_Node_Str""));
  assertFalse(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_1 + ""String_Node_Str"").exists());
  FileUtils.deleteDirectory(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_2 + ""String_Node_Str""));
  assertFalse(new File(FileUtil.getBasedir(),""String_Node_Str"" + TEST_REPO_2 + ""String_Node_Str"").exists());
  archivaConfigControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfig=(ArchivaConfiguration)archivaConfigControl.getMock();
  search=new NexusRepositorySearch(plexusSisuBridge,archivaConfig,mavenIndexerUtils);
  nexusIndexer=plexusSisuBridge.lookup(NexusIndexer.class);
  artifactContextProducer=plexusSisuBridge.lookup(ArtifactContextProducer.class);
  config=new Configuration();
  config.addManagedRepository(createRepositoryConfig(TEST_REPO_1));
  config.addManagedRepository(createRepositoryConfig(TEST_REPO_2));
}",0.9913793103448276
20693,"@SuppressWarnings(""String_Node_Str"") protected void validateConnector(){
  if (connector.getPolicies() == null) {
    addActionError(""String_Node_Str"");
  }
 else {
    for (    Map.Entry<String,Policy> entry : getPolicyMap().entrySet()) {
      String policyId=entry.getKey();
      Policy policy=entry.getValue();
      List<String> options=policy.getOptions();
      if (!connector.getPolicies().containsKey(policyId)) {
        addActionError(""String_Node_Str"" + policyId + ""String_Node_Str"");
        continue;
      }
      Map<String,Object> properties=connector.getProperties();
      for (      String key : properties.keySet()) {
        Object value=properties.get(key);
        if (value.getClass().isArray()) {
          String[] arr=(String[])value;
          properties.put(key,arr[0]);
        }
      }
      Object o=connector.getPolicies().get(policyId);
      String value;
      if (o.getClass().isArray()) {
        String arr[]=(String[])o;
        value=arr[0];
      }
 else {
        value=(String)o;
      }
      connector.getPolicies().put(policyId,value);
      if (StringUtils.isBlank(value)) {
        addActionError(""String_Node_Str"" + policyId + ""String_Node_Str"");
        continue;
      }
      if (!options.contains(value)) {
        addActionError(""String_Node_Str"" + value + ""String_Node_Str""+ policyId+ ""String_Node_Str""+ options);
        continue;
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void validateConnector(){
  if (connector.getPolicies() == null) {
    addActionError(""String_Node_Str"");
  }
 else {
    for (    Map.Entry<String,Policy> entry : getPolicyMap().entrySet()) {
      String policyId=entry.getKey();
      Policy policy=entry.getValue();
      List<String> options=policy.getOptions();
      if (!connector.getPolicies().containsKey(policyId)) {
        addActionError(""String_Node_Str"" + policyId + ""String_Node_Str"");
        continue;
      }
      Map<String,Object> properties=connector.getProperties();
      for (      Map.Entry<String,Object> entry2 : properties.entrySet()) {
        Object value=entry2.getValue();
        if (value.getClass().isArray()) {
          String[] arr=(String[])value;
          properties.put(entry2.getKey(),arr[0]);
        }
      }
      Object o=connector.getPolicies().get(policyId);
      String value;
      if (o.getClass().isArray()) {
        String arr[]=(String[])o;
        value=arr[0];
      }
 else {
        value=(String)o;
      }
      connector.getPolicies().put(policyId,value);
      if (StringUtils.isBlank(value)) {
        addActionError(""String_Node_Str"" + policyId + ""String_Node_Str"");
        continue;
      }
      if (!options.contains(value)) {
        addActionError(""String_Node_Str"" + value + ""String_Node_Str""+ policyId+ ""String_Node_Str""+ options);
        continue;
      }
    }
  }
}",0.9428671573781984
20694,"public void prepare(){
  managedRepositoryList=new ArrayList<String>();
  managedRepositoryList=getObservableRepos();
  if (managedRepositoryList.size() > 0) {
    managedRepositoryList.add(""String_Node_Str"");
  }
  searchFields=new LinkedHashMap<String,String>();
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  super.clearErrorsAndMessages();
  clearSearchFields();
}","public void prepare(){
  managedRepositoryList=getObservableRepos();
  if (managedRepositoryList.size() > 0) {
    managedRepositoryList.add(""String_Node_Str"");
  }
  searchFields=new LinkedHashMap<String,String>();
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  searchFields.put(""String_Node_Str"",""String_Node_Str"");
  super.clearErrorsAndMessages();
  clearSearchFields();
}",0.1388174807197943
20695,"@After protected void tearDown() throws Exception {
  super.tearDown();
  FileUtils.deleteDirectory(baseDir);
}","@After public void tearDown() throws Exception {
  super.tearDown();
  FileUtils.deleteDirectory(baseDir);
}",0.9497716894977168
20696,"public void testGetFromFirstManagedRepositoryReturnOk() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",""String_Node_Str"",response.getText());
}","@Test public void testGetFromFirstManagedRepositoryReturnOk() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",""String_Node_Str"",response.getText());
}",0.9950413223140496
20697,"public void testGetInvalidManagedRepositoryInGroupReturnNotFound() throws Exception {
  String resourceName=""String_Node_Str"";
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_INVALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseInternalServerError(response);
}","@Test public void testGetInvalidManagedRepositoryInGroupReturnNotFound() throws Exception {
  String resourceName=""String_Node_Str"";
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_INVALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseInternalServerError(response);
}",0.9915966386554622
20698,"public void testGetFromValidRepositoryGroupReturnNotFound() throws Exception {
  String resourceName=""String_Node_Str"";
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseNotFound(response);
}","@Test public void testGetFromValidRepositoryGroupReturnNotFound() throws Exception {
  String resourceName=""String_Node_Str"";
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseNotFound(response);
}",0.9910979228486648
20699,"public void testGetMergedMetadata() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",null);
  resourceName=""String_Node_Str"";
  dummyInternalResourceFile=new File(repoRootLast,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  WebResponse response=sc.getResource(request);
  File returnedMetadata=new File(""String_Node_Str"");
  FileUtils.writeStringToFile(returnedMetadata,response.getText());
  ArchivaRepositoryMetadata metadata=RepositoryMetadataReader.read(returnedMetadata);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",4,metadata.getAvailableVersions().size());
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  File checksumFileSha1=new File(repoRootFirst,resourceName + ""String_Node_Str"");
  checksumFileSha1.getParentFile().mkdirs();
  FileUtils.writeStringToFile(checksumFileSha1,""String_Node_Str"",null);
  File checksumFileMd5=new File(repoRootFirst,resourceName + ""String_Node_Str"");
  checksumFileMd5.getParentFile().mkdirs();
  FileUtils.writeStringToFile(checksumFileMd5,""String_Node_Str"",null);
  request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  response=sc.getResource(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",response.getText());
  request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  response=sc.getResource(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",response.getText().trim());
}","@Test public void testGetMergedMetadata() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",null);
  resourceName=""String_Node_Str"";
  dummyInternalResourceFile=new File(repoRootLast,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  WebResponse response=sc.getResource(request);
  File returnedMetadata=new File(""String_Node_Str"");
  FileUtils.writeStringToFile(returnedMetadata,response.getText());
  ArchivaRepositoryMetadata metadata=RepositoryMetadataReader.read(returnedMetadata);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",4,metadata.getAvailableVersions().size());
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",metadata.getAvailableVersions().contains(""String_Node_Str""));
  File checksumFileSha1=new File(repoRootFirst,resourceName + ""String_Node_Str"");
  checksumFileSha1.getParentFile().mkdirs();
  FileUtils.writeStringToFile(checksumFileSha1,""String_Node_Str"",null);
  File checksumFileMd5=new File(repoRootFirst,resourceName + ""String_Node_Str"");
  checksumFileMd5.getParentFile().mkdirs();
  FileUtils.writeStringToFile(checksumFileMd5,""String_Node_Str"",null);
  request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  response=sc.getResource(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",response.getText());
  request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ ""String_Node_Str"");
  response=sc.getResource(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",response.getText().trim());
}",0.998766447368421
20700,"public void testGetFromLastManagedRepositoryReturnOk() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyReleasesResourceFile=new File(repoRootLast,resourceName);
  dummyReleasesResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyReleasesResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",""String_Node_Str"",response.getText());
}","@Test public void testGetFromLastManagedRepositoryReturnOk() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyReleasesResourceFile=new File(repoRootLast,resourceName);
  dummyReleasesResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyReleasesResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName);
  WebResponse response=sc.getResponse(request);
  assertResponseOK(response);
  assertEquals(""String_Node_Str"",""String_Node_Str"",response.getText());
}",0.9950248756218906
20701,"public void testBrowseWithTwoArtifactsWithSameGroupIdInRepos() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"",null);
  resourceName=""String_Node_Str"";
  File dummyReleasesResourceFile=new File(repoRootLast,resourceName);
  dummyReleasesResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyReleasesResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str"");
  WebResponse response=sc.getResource(request);
  assertResponseOK(response);
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
}","@Test public void testBrowseWithTwoArtifactsWithSameGroupIdInRepos() throws Exception {
  String resourceName=""String_Node_Str"";
  File dummyInternalResourceFile=new File(repoRootFirst,resourceName);
  dummyInternalResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyInternalResourceFile,""String_Node_Str"",null);
  resourceName=""String_Node_Str"";
  File dummyReleasesResourceFile=new File(repoRootLast,resourceName);
  dummyReleasesResourceFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(dummyReleasesResourceFile,""String_Node_Str"",null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str"");
  WebResponse response=sc.getResource(request);
  assertResponseOK(response);
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
  assertTrue(StringUtils.contains(response.getText(),""String_Node_Str""));
}",0.9971724787935908
20702,"public void testPutValidRepositoryGroupReturnBadRequest() throws Exception {
  String resourceName=""String_Node_Str"";
  String putUrl=""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName;
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  WebResponse response=sc.getResponse(request);
  assertResponseMethodNotAllowed(response);
}","@Test public void testPutValidRepositoryGroupReturnBadRequest() throws Exception {
  String resourceName=""String_Node_Str"";
  String putUrl=""String_Node_Str"" + REPO_GROUP_WITH_VALID_REPOS + ""String_Node_Str""+ resourceName;
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  WebResponse response=sc.getResponse(request);
  assertResponseMethodNotAllowed(response);
}",0.993421052631579
20703,"public void testGetWithAValidUserWithReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_OK,response.getResponseCode());
  assertEquals(""String_Node_Str"",expectedArtifactContents,response.getText());
}","@Test public void testGetWithAValidUserWithReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_OK,response.getResponseCode());
  assertEquals(""String_Node_Str"",expectedArtifactContents,response.getText());
}",0.9984917043740572
20704,"public void testGetWithInvalidUserAndGuestHasReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_ACCESS),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),null);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_OK,response.getResponseCode());
  assertEquals(""String_Node_Str"",expectedArtifactContents,response.getText());
}","@Test public void testGetWithInvalidUserAndGuestHasReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_ACCESS),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),null);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_OK,response.getResponseCode());
  assertEquals(""String_Node_Str"",expectedArtifactContents,response.getText());
}",0.998624484181568
20705,"public void testGetWithAValidUserWithNoReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndThrow(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getResponseCode());
}","@Test public void testGetWithAValidUserWithNoReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndThrow(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getResponseCode());
}",0.998470168281489
20706,"public void testPutWithValidUserWithNoWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndThrow(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}","@Test public void testPutWithValidUserWithNoWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),new SimpleUser());
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndThrow(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}",0.9983164983164984
20707,"@Override @After protected void tearDown() throws Exception {
  if (sc != null) {
    sc.clearContents();
  }
  if (sr != null) {
    sr.shutDown();
  }
  if (repoRootInternal.exists()) {
    FileUtils.deleteDirectory(repoRootInternal);
  }
  servlet=null;
  super.tearDown();
}","@Override @After public void tearDown() throws Exception {
  if (sc != null) {
    sc.clearContents();
  }
  if (sr != null) {
    sr.shutDown();
  }
  if (repoRootInternal.exists()) {
    FileUtils.deleteDirectory(repoRootInternal);
  }
  servlet=null;
  super.tearDown();
}",0.976491862567812
20708,"public void testPutWithInvalidUserAndGuestHasNoWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setThrowable(new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}","@Test public void testPutWithInvalidUserAndGuestHasNoWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setThrowable(new UnauthorizedException(""String_Node_Str""));
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}",0.9974619289340102
20709,"public void testGetWithInvalidUserAndGuestHasNoReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_ACCESS),false);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getResponseCode());
}","@Test public void testGetWithInvalidUserAndGuestHasNoReadAccess() throws Exception {
  String commonsLangJar=""String_Node_Str"";
  String expectedArtifactContents=""String_Node_Str"";
  File artifactFile=new File(repoRootInternal,commonsLangJar);
  artifactFile.getParentFile().mkdirs();
  FileUtils.writeStringToFile(artifactFile,expectedArtifactContents,null);
  WebRequest request=new GetMethodWebRequest(""String_Node_Str"" + commonsLangJar);
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_ACCESS),false);
  httpAuthControl.replay();
  servletAuthControl.replay();
  WebResponse response=sc.getResponse(request);
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getResponseCode());
}",0.9976190476190476
20710,"public void testPutWithInvalidUserAndGuestHasWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setReturnValue(true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,result),new AuthenticationException(""String_Node_Str""));
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),null);
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setReturnValue(true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}","@Test public void testPutWithInvalidUserAndGuestHasWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,null),new AuthenticationException(""String_Node_Str""));
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setReturnValue(true);
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  servletAuthControl.expectAndThrow(servletAuth.isAuthenticated(null,result),new AuthenticationException(""String_Node_Str""));
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),null);
  servletAuth.isAuthorized(""String_Node_Str"",""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD);
  servletAuthControl.setMatcher(MockControl.EQUALS_MATCHER);
  servletAuthControl.setReturnValue(true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
}",0.9985754985754984
20711,"public void testPutWithValidUserWithWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  assertTrue(repoRootInternal.exists());
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  TestAuditListener listener=new TestAuditListener();
  archivaDavResourceFactory.addAuditListener(listener);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  User user=new SimpleUser();
  user.setUsername(""String_Node_Str"");
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),user);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(""String_Node_Str"",listener.getEvents().get(0).getUserId());
}","@Test public void testPutWithValidUserWithWriteAccess() throws Exception {
  setupCleanRepo(repoRootInternal);
  assertTrue(repoRootInternal.exists());
  String putUrl=""String_Node_Str"";
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",is);
  WebRequest request=new PutMethodWebRequest(putUrl,is,""String_Node_Str"");
  InvocationContext ic=sc.newInvocation(request);
  servlet=(RepositoryServlet)ic.getServlet();
  servlet.setDavSessionProvider(davSessionProvider);
  ArchivaDavResourceFactory archivaDavResourceFactory=(ArchivaDavResourceFactory)servlet.getResourceFactory();
  archivaDavResourceFactory.setHttpAuth(httpAuth);
  archivaDavResourceFactory.setServletAuth(servletAuth);
  TestAuditListener listener=new TestAuditListener();
  archivaDavResourceFactory.addAuditListener(listener);
  servlet.setResourceFactory(archivaDavResourceFactory);
  AuthenticationResult result=new AuthenticationResult();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,null),true);
  User user=new SimpleUser();
  user.setUsername(""String_Node_Str"");
  SecuritySession session=new DefaultSecuritySession();
  httpAuthControl.expectAndReturn(httpAuth.getAuthenticationResult(null,null),result);
  httpAuthControl.expectAndReturn(httpAuth.getSecuritySession(ic.getRequest().getSession(true)),session);
  httpAuthControl.expectAndReturn(httpAuth.getSessionUser(ic.getRequest().getSession()),user);
  servletAuthControl.expectAndReturn(servletAuth.isAuthenticated(null,result),true);
  servletAuthControl.expectAndReturn(servletAuth.isAuthorized(null,session,""String_Node_Str"",ArchivaRoleConstants.OPERATION_REPOSITORY_UPLOAD),true);
  httpAuthControl.replay();
  servletAuthControl.replay();
  servlet.service(ic.getRequest(),ic.getResponse());
  httpAuthControl.verify();
  servletAuthControl.verify();
  assertEquals(""String_Node_Str"",listener.getEvents().get(0).getUserId());
}",0.9985177865612648
20712,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=(DeleteArtifactAction)lookup(Action.class.getName(),""String_Node_Str"");
  assertNotNull(action);
  configurationControl=MockControl.createControl(ArchivaConfiguration.class);
  configuration=(ArchivaConfiguration)configurationControl.getMock();
  repositoryFactoryControl=MockClassControl.createControl(RepositoryContentFactory.class);
  repositoryFactory=(RepositoryContentFactory)repositoryFactoryControl.getMock();
  metadataRepositoryControl=MockControl.createControl(MetadataRepository.class);
  metadataRepository=(MetadataRepository)metadataRepositoryControl.getMock();
  RepositorySession repositorySession=mock(RepositorySession.class);
  when(repositorySession.getRepository()).thenReturn(metadataRepository);
  TestRepositorySessionFactory repositorySessionFactory=(TestRepositorySessionFactory)lookup(RepositorySessionFactory.class);
  repositorySessionFactory.setRepositorySession(repositorySession);
  action.setConfiguration(configuration);
  action.setRepositoryFactory(repositoryFactory);
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=(DeleteArtifactAction)getActionProxy(""String_Node_Str"").getAction();
  assertNotNull(action);
  configurationControl=MockControl.createControl(ArchivaConfiguration.class);
  configuration=(ArchivaConfiguration)configurationControl.getMock();
  repositoryFactoryControl=MockClassControl.createControl(RepositoryContentFactory.class);
  repositoryFactory=(RepositoryContentFactory)repositoryFactoryControl.getMock();
  metadataRepositoryControl=MockControl.createControl(MetadataRepository.class);
  metadataRepository=(MetadataRepository)metadataRepositoryControl.getMock();
  RepositorySession repositorySession=mock(RepositorySession.class);
  when(repositorySession.getRepository()).thenReturn(metadataRepository);
  TestRepositorySessionFactory repositorySessionFactory=new TestRepositorySessionFactory();
  repositorySessionFactory.setRepositorySession(repositorySession);
  action.setConfiguration(configuration);
  action.setRepositoryFactory(repositoryFactory);
}",0.8223159868729489
20713,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=new SearchAction();
  session=mock(RepositorySession.class);
  TestRepositorySessionFactory factory=(TestRepositorySessionFactory)lookup(RepositorySessionFactory.class);
  factory.setRepositorySession(session);
  action.setRepositorySessionFactory(factory);
  MockControl archivaConfigControl=MockControl.createControl(ArchivaConfiguration.class);
  ArchivaConfiguration archivaConfig=(ArchivaConfiguration)archivaConfigControl.getMock();
  userReposControl=MockControl.createControl(UserRepositories.class);
  userRepos=(UserRepositories)userReposControl.getMock();
  searchControl=MockControl.createControl(RepositorySearch.class);
  searchControl.setDefaultMatcher(MockControl.ALWAYS_MATCHER);
  search=(RepositorySearch)searchControl.getMock();
  action.setArchivaConfiguration(archivaConfig);
  action.setUserRepositories(userRepos);
  action.setNexusSearch(search);
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=new SearchAction();
  session=mock(RepositorySession.class);
  TestRepositorySessionFactory factory=new TestRepositorySessionFactory();
  factory.setRepositorySession(session);
  action.setRepositorySessionFactory(factory);
  MockControl archivaConfigControl=MockControl.createControl(ArchivaConfiguration.class);
  ArchivaConfiguration archivaConfig=(ArchivaConfiguration)archivaConfigControl.getMock();
  userReposControl=MockControl.createControl(UserRepositories.class);
  userRepos=(UserRepositories)userReposControl.getMock();
  searchControl=MockControl.createControl(RepositorySearch.class);
  searchControl.setDefaultMatcher(MockControl.ALWAYS_MATCHER);
  search=(RepositorySearch)searchControl.getMock();
  action.setArchivaConfiguration(archivaConfig);
  action.setUserRepositories(userRepos);
  action.setNexusSearch(search);
}",0.9764453961456104
20714,"protected void setUp() throws Exception {
  super.setUp();
  action=(ShowArtifactAction)lookup(Action.class,ACTION_HINT);
  metadataResolver=new TestMetadataResolver();
  MetadataRepository repo=mock(MetadataRepository.class);
  RepositorySession repositorySession=mock(RepositorySession.class);
  when(repositorySession.getResolver()).thenReturn(metadataResolver);
  when(repositorySession.getRepository()).thenReturn(repo);
  TestRepositorySessionFactory repositorySessionFactory=(TestRepositorySessionFactory)lookup(RepositorySessionFactory.class);
  repositorySessionFactory.setRepositorySession(repositorySession);
  RepositoryContentFactory factory=mock(RepositoryContentFactory.class);
  action.setRepositoryFactory(factory);
  ManagedRepositoryConfiguration config=new ManagedRepositoryConfiguration();
  config.setId(TEST_REPO);
  config.setLocation(getTestFile(""String_Node_Str"").getAbsolutePath());
  ManagedRepositoryContent content=new ManagedDefaultRepositoryContent();
  content.setRepository(config);
  when(factory.getManagedRepositoryContent(TEST_REPO)).thenReturn(content);
  ArchivaConfiguration archivaConfig=mock(ArchivaConfiguration.class);
  Configuration configuration=new Configuration();
  configuration.addManagedRepository(config);
  when(archivaConfig.getConfiguration()).thenReturn(configuration);
}","protected void setUp() throws Exception {
  super.setUp();
  action=(ShowArtifactAction)getActionProxy(""String_Node_Str"").getAction();
  metadataResolver=new TestMetadataResolver();
  MetadataRepository repo=mock(MetadataRepository.class);
  RepositorySession repositorySession=mock(RepositorySession.class);
  when(repositorySession.getResolver()).thenReturn(metadataResolver);
  when(repositorySession.getRepository()).thenReturn(repo);
  TestRepositorySessionFactory repositorySessionFactory=new TestRepositorySessionFactory();
  repositorySessionFactory.setRepositorySession(repositorySession);
  RepositoryContentFactory factory=mock(RepositoryContentFactory.class);
  action.setRepositoryFactory(factory);
  ManagedRepositoryConfiguration config=new ManagedRepositoryConfiguration();
  config.setId(TEST_REPO);
  config.setLocation(new File(""String_Node_Str"").getAbsolutePath());
  ManagedRepositoryContent content=new ManagedDefaultRepositoryContent();
  content.setRepository(config);
  when(factory.getManagedRepositoryContent(TEST_REPO)).thenReturn(content);
  ArchivaConfiguration archivaConfig=mock(ArchivaConfiguration.class);
  Configuration configuration=new Configuration();
  configuration.addManagedRepository(config);
  when(archivaConfig.getConfiguration()).thenReturn(configuration);
}",0.9559939301972686
20715,"public void testInstantiation(){
  assertFalse(action == lookup(Action.class,ACTION_HINT));
}","public void testInstantiation(){
  assertFalse(action == getActionProxy(""String_Node_Str"").getAction());
}",0.7035175879396985
20716,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=(DeleteProxyConnectorAction)lookup(Action.class.getName(),""String_Node_Str"");
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=(DeleteProxyConnectorAction)getActionProxy(""String_Node_Str"").getAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}",0.9250985545335084
20717,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=(EditProxyConnectorAction)lookup(Action.class.getName(),""String_Node_Str"");
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  for (int i=0; i < 3; i++) {
    archivaConfiguration.getConfiguration();
    archivaConfigurationControl.setReturnValue(new Configuration());
  }
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=(EditProxyConnectorAction)getActionProxy(""String_Node_Str"").getAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  for (int i=0; i < 3; i++) {
    archivaConfiguration.getConfiguration();
    archivaConfigurationControl.setReturnValue(new Configuration());
  }
}",0.9572649572649572
20718,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=(EnableProxyConnectorAction)lookup(Action.class.getName(),""String_Node_Str"");
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=(EnableProxyConnectorAction)getActionProxy(""String_Node_Str"").getAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}",0.9250985545335084
20719,"@Override protected void setUp() throws Exception {
  super.setUp();
  action=new AddManagedRepositoryAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  roleManagerControl=MockControl.createControl(RoleManager.class);
  roleManager=(RoleManager)roleManagerControl.getMock();
  action.setRoleManager(roleManager);
  registryControl=MockControl.createControl(Registry.class);
  registry=(Registry)registryControl.getMock();
  action.setRegistry(registry);
  location=getTestFile(""String_Node_Str"");
}","@Override protected void setUp() throws Exception {
  super.setUp();
  action=new AddManagedRepositoryAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  roleManagerControl=MockControl.createControl(RoleManager.class);
  roleManager=(RoleManager)roleManagerControl.getMock();
  action.setRoleManager(roleManager);
  registryControl=MockControl.createControl(Registry.class);
  registry=(Registry)registryControl.getMock();
  action.setRegistry(registry);
  location=new File(""String_Node_Str"");
}",0.991941391941392
20720,"protected void setUp() throws Exception {
  super.setUp();
  action=(AddRemoteRepositoryAction)lookup(Action.class.getName(),""String_Node_Str"");
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}","protected void setUp() throws Exception {
  super.setUp();
  action=(AddRemoteRepositoryAction)getActionProxy(""String_Node_Str"").getAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
}",0.9228687415426252
20721,"protected void setUp() throws Exception {
  super.setUp();
  action=new DeleteManagedRepositoryAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  roleManagerControl=MockControl.createControl(RoleManager.class);
  roleManager=(RoleManager)roleManagerControl.getMock();
  action.setRoleManager(roleManager);
  location=getTestFile(""String_Node_Str"");
  repositoryStatisticsManagerControl=MockControl.createControl(RepositoryStatisticsManager.class);
  repositoryStatisticsManager=(RepositoryStatisticsManager)repositoryStatisticsManagerControl.getMock();
  action.setRepositoryStatisticsManager(repositoryStatisticsManager);
  metadataRepositoryControl=MockControl.createControl(MetadataRepository.class);
  metadataRepository=(MetadataRepository)metadataRepositoryControl.getMock();
  metadataRepository.removeRepository(REPO_ID);
  respositorySession=mock(RepositorySession.class);
  when(respositorySession.getRepository()).thenReturn(metadataRepository);
  TestRepositorySessionFactory factory=(TestRepositorySessionFactory)lookup(RepositorySessionFactory.class);
  factory.setRepositorySession(respositorySession);
  action.setRepositorySessionFactory(factory);
  metadataRepositoryControl.replay();
}","protected void setUp() throws Exception {
  super.setUp();
  action=new DeleteManagedRepositoryAction();
  archivaConfigurationControl=MockControl.createControl(ArchivaConfiguration.class);
  archivaConfiguration=(ArchivaConfiguration)archivaConfigurationControl.getMock();
  action.setArchivaConfiguration(archivaConfiguration);
  roleManagerControl=MockControl.createControl(RoleManager.class);
  roleManager=(RoleManager)roleManagerControl.getMock();
  action.setRoleManager(roleManager);
  location=new File(""String_Node_Str"");
  repositoryStatisticsManagerControl=MockControl.createControl(RepositoryStatisticsManager.class);
  repositoryStatisticsManager=(RepositoryStatisticsManager)repositoryStatisticsManagerControl.getMock();
  action.setRepositoryStatisticsManager(repositoryStatisticsManager);
  metadataRepositoryControl=MockControl.createControl(MetadataRepository.class);
  metadataRepository=(MetadataRepository)metadataRepositoryControl.getMock();
  metadataRepository.removeRepository(REPO_ID);
  respositorySession=mock(RepositorySession.class);
  when(respositorySession.getRepository()).thenReturn(metadataRepository);
  TestRepositorySessionFactory factory=new TestRepositorySessionFactory();
  factory.setRepositorySession(respositorySession);
  action.setRepositorySessionFactory(factory);
  metadataRepositoryControl.replay();
}",0.9303682099890632
20722,"public void testConsumerArtifactNotDuplicated() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(TEST_METADATA));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}","@Test public void testConsumerArtifactNotDuplicated() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(TEST_METADATA));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}",0.9924433249370276
20723,"public void testConsumerArtifactNotAnArtifactPathResults() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(eq(TEST_REPO),anyString())).thenReturn(Arrays.asList(TEST_METADATA,createMetadata(""String_Node_Str"")));
  when(pathTranslator.getArtifactForPath(TEST_REPO,""String_Node_Str"")).thenThrow(new IllegalArgumentException());
  consumer.beginScan(config,new Date());
  consumer.processFile(""String_Node_Str"");
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}","@Test public void testConsumerArtifactNotAnArtifactPathResults() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(eq(TEST_REPO),anyString())).thenReturn(Arrays.asList(TEST_METADATA,createMetadata(""String_Node_Str"")));
  when(pathTranslator.getArtifactForPath(TEST_REPO,""String_Node_Str"")).thenThrow(new IllegalArgumentException());
  consumer.beginScan(config,new Date());
  consumer.processFile(""String_Node_Str"");
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}",0.9946996466431096
20724,"public void testConsumerArtifactNotAnArtifactPathNoResults() throws Exception {
  consumer.beginScan(config,new Date());
  consumer.processFile(""String_Node_Str"");
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}","@Test public void testConsumerArtifactNotAnArtifactPathNoResults() throws Exception {
  consumer.beginScan(config,new Date());
  consumer.processFile(""String_Node_Str"");
  consumer.completeScan();
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}",0.9900332225913622
20725,"public void testConsumerArtifactDuplicatedButSelfNotInMetadataRepository() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(createMetadata(""String_Node_Str"")));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  ArgumentCaptor<RepositoryProblemFacet> argument=ArgumentCaptor.forClass(RepositoryProblemFacet.class);
  verify(metadataRepository).addMetadataFacet(eq(TEST_REPO),argument.capture());
  RepositoryProblemFacet problem=argument.getValue();
  assertProblem(problem);
}","@Test public void testConsumerArtifactDuplicatedButSelfNotInMetadataRepository() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(createMetadata(""String_Node_Str"")));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  ArgumentCaptor<RepositoryProblemFacet> argument=ArgumentCaptor.forClass(RepositoryProblemFacet.class);
  verify(metadataRepository).addMetadataFacet(eq(TEST_REPO),argument.capture());
  RepositoryProblemFacet problem=argument.getValue();
  assertProblem(problem);
}",0.9950331125827816
20726,"public void testConsumerArtifactDuplicated() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(TEST_METADATA,createMetadata(""String_Node_Str"")));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  ArgumentCaptor<RepositoryProblemFacet> argument=ArgumentCaptor.forClass(RepositoryProblemFacet.class);
  verify(metadataRepository).addMetadataFacet(eq(TEST_REPO),argument.capture());
  RepositoryProblemFacet problem=argument.getValue();
  assertProblem(problem);
}","@Test public void testConsumerArtifactDuplicated() throws Exception {
  when(metadataRepository.getArtifactsByChecksum(TEST_REPO,TEST_CHECKSUM)).thenReturn(Arrays.asList(TEST_METADATA,createMetadata(""String_Node_Str"")));
  consumer.beginScan(config,new Date());
  consumer.processFile(TEST_FILE);
  consumer.completeScan();
  ArgumentCaptor<RepositoryProblemFacet> argument=ArgumentCaptor.forClass(RepositoryProblemFacet.class);
  verify(metadataRepository).addMetadataFacet(eq(TEST_REPO),argument.capture());
  RepositoryProblemFacet problem=argument.getValue();
  assertProblem(problem);
}",0.9948979591836736
20727,"public void setUp() throws Exception {
  super.setUp();
  consumer=(DuplicateArtifactsConsumer)lookup(KnownRepositoryContentConsumer.class,""String_Node_Str"");
  assertNotNull(consumer);
  config=new ManagedRepositoryConfiguration();
  config.setId(TEST_REPO);
  config.setLocation(getTestFile(""String_Node_Str"").getAbsolutePath());
  metadataRepository=mock(MetadataRepository.class);
  RepositorySession session=mock(RepositorySession.class);
  when(session.getRepository()).thenReturn(metadataRepository);
  RepositorySessionFactory factory=(RepositorySessionFactory)lookup(RepositorySessionFactory.class);
  when(factory.createSession()).thenReturn(session);
  pathTranslator=(RepositoryPathTranslator)lookup(RepositoryPathTranslator.class,""String_Node_Str"");
  when(pathTranslator.getArtifactForPath(TEST_REPO,TEST_FILE)).thenReturn(TEST_METADATA);
}","@Before public void setUp() throws Exception {
  super.setUp();
  assertNotNull(consumer);
  config=new ManagedRepositoryConfiguration();
  config.setId(TEST_REPO);
  config.setLocation(new File(""String_Node_Str"").getAbsolutePath());
  metadataRepository=mock(MetadataRepository.class);
  RepositorySession session=mock(RepositorySession.class);
  when(session.getRepository()).thenReturn(metadataRepository);
  RepositorySessionFactory factory=applicationContext.getBean(RepositorySessionFactory.class);
  when(factory.createSession()).thenReturn(session);
  when(pathTranslator.getArtifactForPath(TEST_REPO,TEST_FILE)).thenReturn(TEST_METADATA);
}",0.6640053226879574
20728,"public void testConsumerArtifactFileNotExist() throws Exception {
  consumer.beginScan(config,new Date());
  try {
    consumer.processFile(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  ConsumerException e) {
    assertTrue(e.getCause() instanceof FileNotFoundException);
  }
 finally {
    consumer.completeScan();
  }
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}","@Test public void testConsumerArtifactFileNotExist() throws Exception {
  consumer.beginScan(config,new Date());
  try {
    consumer.processFile(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  ConsumerException e) {
    assertTrue(e.getCause() instanceof FileNotFoundException);
  }
 finally {
    consumer.completeScan();
  }
  verify(metadataRepository,never()).addMetadataFacet(eq(TEST_REPO),Matchers.<MetadataFacet>anyObject());
}",0.9932885906040269
20729,"protected void setUp() throws Exception {
  super.setUp();
  roleManager=(RoleManager)lookup(RoleManager.ROLE,""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  roleManager=(RoleManager)lookup(RoleManager.class.getName(),""String_Node_Str"");
}",0.9304029304029304
20730,"public boolean merge(String repoId,boolean skipConflicts) throws Exception {
  String stagingId=repoId + STAGE;
  ManagedRepositoryConfiguration repoConfig;
  ManagedRepositoryConfiguration stagingConfig;
  Configuration config=archivaConfiguration.getConfiguration();
  repoConfig=config.findManagedRepositoryById(repoId);
  if (repoConfig != null) {
    stagingConfig=config.findManagedRepositoryById(stagingId);
    if (stagingConfig != null) {
      List<ArtifactMetadata> sourceArtifacts=metadataRepository.getArtifacts(stagingId);
      if (repoConfig.isReleases() && !repoConfig.isSnapshots()) {
        if (skipConflicts) {
          List<ArtifactMetadata> conflicts=repositoryMerger.getConflictingArtifacts(stagingId,stagingId);
          sourceArtifacts.removeAll(conflicts);
          mergeWithOutSnapshots(sourceArtifacts,stagingId,repoId);
        }
 else {
          mergeWithOutSnapshots(sourceArtifacts,stagingId,repoId);
        }
      }
 else {
        if (skipConflicts) {
          List<ArtifactMetadata> conflicts=repositoryMerger.getConflictingArtifacts(stagingId,stagingId);
          sourceArtifacts.removeAll(conflicts);
          Filter<ArtifactMetadata> artifactsWithOutConflicts=new IncludesFilter<ArtifactMetadata>(sourceArtifacts);
          repositoryMerger.merge(stagingId,repoId,artifactsWithOutConflicts);
        }
 else {
          repositoryMerger.merge(stagingId,repoId);
        }
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + stagingId + ""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"" + repoId + ""String_Node_Str"");
  }
  if (!repositoryTaskScheduler.isProcessingRepositoryTask(repoId)) {
    RepositoryTask task=new RepositoryTask();
    task.setRepositoryId(repoId);
    repositoryTaskScheduler.queueTask(task);
  }
  AuditEvent event=createAuditEvent(repoConfig);
  metadataRepository.addMetadataFacet(event.getRepositoryId(),event);
  auditListener.auditEvent(createAuditEvent(repoConfig));
  return true;
}","public boolean merge(String repoId,boolean skipConflicts) throws Exception {
  String stagingId=repoId + STAGE;
  ManagedRepositoryConfiguration repoConfig;
  ManagedRepositoryConfiguration stagingConfig;
  Configuration config=archivaConfiguration.getConfiguration();
  repoConfig=config.findManagedRepositoryById(repoId);
  log.debug(""String_Node_Str"" + repoId + ""String_Node_Str"");
  if (repoConfig != null) {
    stagingConfig=config.findManagedRepositoryById(stagingId);
    if (stagingConfig != null) {
      List<ArtifactMetadata> sourceArtifacts=metadataRepository.getArtifacts(stagingId);
      if (repoConfig.isReleases() && !repoConfig.isSnapshots()) {
        log.info(""String_Node_Str"");
        if (skipConflicts) {
          List<ArtifactMetadata> conflicts=repositoryMerger.getConflictingArtifacts(repoId,stagingId);
          log.debug(""String_Node_Str"");
          for (          ArtifactMetadata metadata : conflicts) {
            log.debug(metadata.getNamespace() + ""String_Node_Str"" + metadata.getProject()+ ""String_Node_Str""+ metadata.getProjectVersion());
          }
          sourceArtifacts.removeAll(conflicts);
          log.debug(""String_Node_Str"" + sourceArtifacts.size());
          mergeWithOutSnapshots(sourceArtifacts,stagingId,repoId);
        }
 else {
          log.debug(""String_Node_Str"" + sourceArtifacts.size());
          mergeWithOutSnapshots(sourceArtifacts,stagingId,repoId);
        }
      }
 else {
        log.info(""String_Node_Str"");
        if (skipConflicts) {
          List<ArtifactMetadata> conflicts=repositoryMerger.getConflictingArtifacts(repoId,stagingId);
          log.debug(""String_Node_Str"");
          for (          ArtifactMetadata metadata : conflicts) {
            log.debug(metadata.getNamespace() + ""String_Node_Str"" + metadata.getProject()+ ""String_Node_Str""+ metadata.getProjectVersion());
          }
          sourceArtifacts.removeAll(conflicts);
          log.debug(""String_Node_Str"" + sourceArtifacts.size());
          Filter<ArtifactMetadata> artifactsWithOutConflicts=new IncludesFilter<ArtifactMetadata>(sourceArtifacts);
          repositoryMerger.merge(stagingId,repoId,artifactsWithOutConflicts);
          log.info(""String_Node_Str"" + stagingId + ""String_Node_Str""+ repoId+ ""String_Node_Str"");
        }
 else {
          repositoryMerger.merge(stagingId,repoId);
          log.info(""String_Node_Str"" + stagingId + ""String_Node_Str""+ repoId+ ""String_Node_Str"");
        }
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + stagingId + ""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"" + repoId + ""String_Node_Str"");
  }
  if (!repositoryTaskScheduler.isProcessingRepositoryTask(repoId)) {
    RepositoryTask task=new RepositoryTask();
    task.setRepositoryId(repoId);
    repositoryTaskScheduler.queueTask(task);
  }
  AuditEvent event=createAuditEvent(repoConfig);
  metadataRepository.addMetadataFacet(event.getRepositoryId(),event);
  auditListener.auditEvent(createAuditEvent(repoConfig));
  return true;
}",0.781076801266825
20731,"public ArtifactMetadata getArtifactFromId(String repoId,String namespace,String projectId,String projectVersion,String id){
  if (!id.startsWith(projectId + ""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectId+ ""String_Node_Str"");
  }
  MavenArtifactFacet facet=new MavenArtifactFacet();
  int index=projectId.length() + 1;
  String version;
  String idSubStrFromVersion=id.substring(index);
  if (idSubStrFromVersion.startsWith(projectVersion) && !VersionUtil.isUniqueSnapshot(projectVersion)) {
    version=projectVersion;
  }
 else   if (VersionUtil.isGenericSnapshot(projectVersion)) {
    try {
      int mainVersionLength=projectVersion.length() - 8;
      if (mainVersionLength == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      Matcher m=TIMESTAMP_PATTERN.matcher(idSubStrFromVersion.substring(mainVersionLength));
      m.matches();
      String timestamp=m.group(1);
      String buildNumber=m.group(2);
      facet.setTimestamp(timestamp);
      facet.setBuildNumber(Integer.valueOf(buildNumber));
      version=idSubStrFromVersion.substring(0,mainVersionLength) + timestamp + ""String_Node_Str""+ buildNumber;
    }
 catch (    IllegalStateException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectVersion+ ""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectVersion+ ""String_Node_Str"");
  }
  String classifier;
  String ext;
  index+=version.length();
  if (index == id.length()) {
    classifier=null;
    ext=null;
  }
 else {
    char c=id.charAt(index);
    if (c == '-') {
      int extIndex=id.lastIndexOf('.');
      if (extIndex > index) {
        classifier=id.substring(index + 1,extIndex);
        ext=id.substring(extIndex + 1);
      }
 else {
        classifier=id.substring(index + 1);
        ext=null;
      }
    }
 else     if (c == '.') {
      classifier=null;
      ext=id.substring(index + 1);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ id.substring(index)+ ""String_Node_Str"");
    }
  }
  ArtifactMetadata metadata=new ArtifactMetadata();
  metadata.setId(id);
  metadata.setNamespace(namespace);
  metadata.setProject(projectId);
  metadata.setRepositoryId(repoId);
  metadata.setProjectVersion(projectVersion);
  metadata.setVersion(version);
  facet.setClassifier(classifier);
  String type=null;
  for (  ArtifactMappingProvider mapping : artifactMappingProviders) {
    type=mapping.mapClassifierAndExtensionToType(classifier,ext);
    if (type != null) {
      break;
    }
  }
  if (type == null && ""String_Node_Str"".equals(ext) && isArtifactIdValidMavenPlugin(projectId)) {
    type=""String_Node_Str"";
  }
  if (type == null) {
    type=ext;
  }
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  facet.setType(type);
  metadata.addFacet(facet);
  return metadata;
}","public ArtifactMetadata getArtifactFromId(String repoId,String namespace,String projectId,String projectVersion,String id){
  if (!id.startsWith(projectId + ""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectId+ ""String_Node_Str"");
  }
  MavenArtifactFacet facet=new MavenArtifactFacet();
  int index=projectId.length() + 1;
  String version;
  String idSubStrFromVersion=id.substring(index);
  if (idSubStrFromVersion.startsWith(projectVersion) && !VersionUtil.isUniqueSnapshot(projectVersion)) {
    version=projectVersion;
  }
 else   if (VersionUtil.isGenericSnapshot(projectVersion)) {
    try {
      int mainVersionLength=projectVersion.length() - 8;
      if (mainVersionLength == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      Matcher m=TIMESTAMP_PATTERN.matcher(idSubStrFromVersion.substring(mainVersionLength));
      m.matches();
      String timestamp=m.group(1);
      String buildNumber=m.group(2);
      facet.setTimestamp(timestamp);
      facet.setBuildNumber(Integer.parseInt(buildNumber));
      version=idSubStrFromVersion.substring(0,mainVersionLength) + timestamp + ""String_Node_Str""+ buildNumber;
    }
 catch (    IllegalStateException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectVersion+ ""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ projectVersion+ ""String_Node_Str"");
  }
  String classifier;
  String ext;
  index+=version.length();
  if (index == id.length()) {
    classifier=null;
    ext=null;
  }
 else {
    char c=id.charAt(index);
    if (c == '-') {
      int extIndex=id.lastIndexOf('.');
      if (extIndex > index) {
        classifier=id.substring(index + 1,extIndex);
        ext=id.substring(extIndex + 1);
      }
 else {
        classifier=id.substring(index + 1);
        ext=null;
      }
    }
 else     if (c == '.') {
      classifier=null;
      ext=id.substring(index + 1);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ id.substring(index)+ ""String_Node_Str"");
    }
  }
  ArtifactMetadata metadata=new ArtifactMetadata();
  metadata.setId(id);
  metadata.setNamespace(namespace);
  metadata.setProject(projectId);
  metadata.setRepositoryId(repoId);
  metadata.setProjectVersion(projectVersion);
  metadata.setVersion(version);
  facet.setClassifier(classifier);
  String type=null;
  for (  ArtifactMappingProvider mapping : artifactMappingProviders) {
    type=mapping.mapClassifierAndExtensionToType(classifier,ext);
    if (type != null) {
      break;
    }
  }
  if (type == null && ""String_Node_Str"".equals(ext) && isArtifactIdValidMavenPlugin(projectId)) {
    type=""String_Node_Str"";
  }
  if (type == null) {
    type=ext;
  }
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  facet.setType(type);
  metadata.addFacet(facet);
  return metadata;
}",0.997559785261103
20732,"public void fromProperties(Map<String,String> properties){
  type=properties.get(""String_Node_Str"");
  classifier=properties.get(""String_Node_Str"");
  timestamp=properties.get(""String_Node_Str"");
  String buildNumber=properties.get(""String_Node_Str"");
  if (buildNumber != null) {
    this.buildNumber=Integer.valueOf(buildNumber);
  }
}","public void fromProperties(Map<String,String> properties){
  type=properties.get(""String_Node_Str"");
  classifier=properties.get(""String_Node_Str"");
  timestamp=properties.get(""String_Node_Str"");
  String buildNumber=properties.get(""String_Node_Str"");
  if (buildNumber != null) {
    this.buildNumber=Integer.parseInt(buildNumber);
  }
}",0.9807407407407408
20733,"public void updateProjectReference(String repoId,String namespace,String projectId,String projectVersion,ProjectVersionReference reference){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  int i=Integer.valueOf(properties.getProperty(""String_Node_Str"",""String_Node_Str"")) + 1;
  setProperty(properties,""String_Node_Str"",Integer.toString(i));
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getNamespace());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getProjectId());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getProjectVersion());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getReferenceType().toString());
  try {
    writeProperties(properties,directory,PROJECT_VERSION_METADATA_KEY);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void updateProjectReference(String repoId,String namespace,String projectId,String projectVersion,ProjectVersionReference reference){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  int i=Integer.parseInt(properties.getProperty(""String_Node_Str"",""String_Node_Str"")) + 1;
  setProperty(properties,""String_Node_Str"",Integer.toString(i));
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getNamespace());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getProjectId());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getProjectVersion());
  setProperty(properties,""String_Node_Str"" + i + ""String_Node_Str"",reference.getReferenceType().toString());
  try {
    writeProperties(properties,directory,PROJECT_VERSION_METADATA_KEY);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9928400954653938
20734,"public Collection<ProjectVersionReference> getProjectReferences(String repoId,String namespace,String projectId,String projectVersion){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  int numberOfRefs=Integer.valueOf(properties.getProperty(""String_Node_Str"",""String_Node_Str"")) + 1;
  List<ProjectVersionReference> references=new ArrayList<ProjectVersionReference>();
  for (int i=0; i < numberOfRefs; i++) {
    ProjectVersionReference reference=new ProjectVersionReference();
    reference.setProjectId(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setNamespace(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setProjectVersion(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setReferenceType(ProjectVersionReference.ReferenceType.valueOf(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str"")));
    references.add(reference);
  }
  return references;
}","public Collection<ProjectVersionReference> getProjectReferences(String repoId,String namespace,String projectId,String projectVersion){
  File directory=new File(getDirectory(repoId),namespace + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readOrCreateProperties(directory,PROJECT_VERSION_METADATA_KEY);
  int numberOfRefs=Integer.parseInt(properties.getProperty(""String_Node_Str"",""String_Node_Str"")) + 1;
  List<ProjectVersionReference> references=new ArrayList<ProjectVersionReference>();
  for (int i=0; i < numberOfRefs; i++) {
    ProjectVersionReference reference=new ProjectVersionReference();
    reference.setProjectId(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setNamespace(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setProjectVersion(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str""));
    reference.setReferenceType(ProjectVersionReference.ReferenceType.valueOf(properties.getProperty(""String_Node_Str"" + i + ""String_Node_Str"")));
    references.add(reference);
  }
  return references;
}",0.3756033347959631
20735,"public void fromProperties(Map<String,String> properties){
  scanEndTime=new Date(Long.valueOf(properties.get(""String_Node_Str"")));
  scanStartTime=new Date(Long.valueOf(properties.get(""String_Node_Str"")));
  totalArtifactCount=Long.valueOf(properties.get(""String_Node_Str""));
  totalArtifactFileSize=Long.valueOf(properties.get(""String_Node_Str""));
  totalFileCount=Long.valueOf(properties.get(""String_Node_Str""));
  totalGroupCount=Long.valueOf(properties.get(""String_Node_Str""));
  totalProjectCount=Long.valueOf(properties.get(""String_Node_Str""));
  newFileCount=Long.valueOf(properties.get(""String_Node_Str""));
  totalCountForType.clear();
  for (  Map.Entry<String,String> entry : properties.entrySet()) {
    if (entry.getKey().startsWith(""String_Node_Str"")) {
      totalCountForType.put(entry.getKey().substring(6),Long.valueOf(entry.getValue()));
    }
  }
}","public void fromProperties(Map<String,String> properties){
  scanEndTime=new Date(Long.parseLong(properties.get(""String_Node_Str"")));
  scanStartTime=new Date(Long.parseLong(properties.get(""String_Node_Str"")));
  totalArtifactCount=Long.parseLong(properties.get(""String_Node_Str""));
  totalArtifactFileSize=Long.parseLong(properties.get(""String_Node_Str""));
  totalFileCount=Long.parseLong(properties.get(""String_Node_Str""));
  totalGroupCount=Long.parseLong(properties.get(""String_Node_Str""));
  totalProjectCount=Long.parseLong(properties.get(""String_Node_Str""));
  newFileCount=Long.parseLong(properties.get(""String_Node_Str""));
  totalCountForType.clear();
  for (  Map.Entry<String,String> entry : properties.entrySet()) {
    if (entry.getKey().startsWith(""String_Node_Str"")) {
      totalCountForType.put(entry.getKey().substring(6),Long.valueOf(entry.getValue()));
    }
  }
}",0.1438356164383561
20736,"public void testGetArtifactVersions(){
  ArtifactMetadata artifact1=createArtifact();
  String version1=""String_Node_Str"";
  artifact1.setId(artifact1.getProject() + ""String_Node_Str"" + version1+ ""String_Node_Str"");
  artifact1.setVersion(version1);
  ArtifactMetadata artifact2=createArtifact();
  String version2=""String_Node_Str"";
  artifact2.setId(artifact2.getProject() + ""String_Node_Str"" + version2+ ""String_Node_Str"");
  artifact2.setVersion(version2);
  repository.updateArtifact(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION,artifact1);
  repository.updateArtifact(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION,artifact2);
  assertEquals(Arrays.asList(version2,version1),repository.getArtifactVersions(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION));
}","public void testGetArtifactVersions(){
  ArtifactMetadata artifact1=createArtifact();
  String version1=""String_Node_Str"";
  artifact1.setId(artifact1.getProject() + ""String_Node_Str"" + version1+ ""String_Node_Str"");
  artifact1.setVersion(version1);
  ArtifactMetadata artifact2=createArtifact();
  String version2=""String_Node_Str"";
  artifact2.setId(artifact2.getProject() + ""String_Node_Str"" + version2+ ""String_Node_Str"");
  artifact2.setVersion(version2);
  repository.updateArtifact(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION,artifact1);
  repository.updateArtifact(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION,artifact2);
  assertEquals(new HashSet<String>(Arrays.asList(version2,version1)),repository.getArtifactVersions(TEST_REPO_ID,TEST_NAMESPACE,TEST_PROJECT,TEST_PROJECT_VERSION));
}",0.9872029250457038
20737,"public ProjectVersionFacet getFacet(String facetId){
  return this.facets.get(facetId);
}","public ProjectVersionFacet getFacet(String facetId){
  return this.facets != null ? this.facets.get(facetId) : null;
}",0.8599033816425121
20738,"public ProjectVersionMetadata getProjectVersion(String repoId,String namespace,String projectId,String projectVersion) throws MetadataResolverException {
  ProjectVersionMetadata metadata=metadataRepository.getProjectVersion(repoId,namespace,projectId,projectVersion);
  if (metadata == null) {
    metadata=storageResolver.getProjectVersion(repoId,namespace,projectId,projectVersion);
    metadataRepository.updateProjectVersion(repoId,namespace,projectId,metadata);
  }
  return metadata;
}","public ProjectVersionMetadata getProjectVersion(String repoId,String namespace,String projectId,String projectVersion) throws MetadataResolverException {
  ProjectVersionMetadata metadata=metadataRepository.getProjectVersion(repoId,namespace,projectId,projectVersion);
  if (metadata == null) {
    metadata=storageResolver.getProjectVersion(repoId,namespace,projectId,projectVersion);
    if (metadata != null) {
      metadataRepository.updateProjectVersion(repoId,namespace,projectId,metadata);
    }
  }
  return metadata;
}",0.9647058823529412
20739,"public Collection<String> getArtifactVersions(String repoId,String namespace,String projectId,String projectVersion){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readProperties(directory);
  List<String> versions=new ArrayList<String>();
  for (  Map.Entry entry : properties.entrySet()) {
    String name=(String)entry.getKey();
    if (name.startsWith(""String_Node_Str"")) {
      versions.add((String)entry.getValue());
    }
  }
  return versions;
}","public Collection<String> getArtifactVersions(String repoId,String namespace,String projectId,String projectVersion){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + namespace+ ""String_Node_Str""+ projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readProperties(directory);
  List<String> versions=new ArrayList<String>();
  for (  Map.Entry entry : properties.entrySet()) {
    String name=(String)entry.getKey();
    if (name.startsWith(""String_Node_Str"")) {
      versions.add((String)entry.getValue());
    }
  }
  return versions;
}",0.973404255319149
20740,"public ProjectVersionMetadata getProjectVersion(String repoId,String groupId,String projectId,String projectVersion){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readProperties(directory);
  ProjectVersionMetadata versionMetadata=new ProjectVersionMetadata();
  versionMetadata.setId(properties.getProperty(""String_Node_Str""));
  return versionMetadata;
}","public ProjectVersionMetadata getProjectVersion(String repoId,String namespace,String projectId,String projectVersion){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + namespace+ ""String_Node_Str""+ projectId+ ""String_Node_Str""+ projectVersion);
  Properties properties=readProperties(directory);
  String id=properties.getProperty(""String_Node_Str"");
  ProjectVersionMetadata versionMetadata=null;
  if (id != null) {
    versionMetadata=new ProjectVersionMetadata();
    versionMetadata.setId(id);
  }
  return versionMetadata;
}",0.8007968127490039
20741,"public ProjectMetadata getProject(String repoId,String groupId,String projectId){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + projectId);
  Properties properties=readProperties(directory);
  ProjectMetadata project=new ProjectMetadata();
  project.setNamespace(properties.getProperty(""String_Node_Str""));
  project.setId(properties.getProperty(""String_Node_Str""));
  return project;
}","public ProjectMetadata getProject(String repoId,String namespace,String projectId){
  File directory=new File(this.directory,repoId + ""String_Node_Str"" + namespace+ ""String_Node_Str""+ projectId);
  Properties properties=readProperties(directory);
  ProjectMetadata project=new ProjectMetadata();
  project.setNamespace(properties.getProperty(""String_Node_Str""));
  project.setId(properties.getProperty(""String_Node_Str""));
  return project;
}",0.9460093896713616
20742,"/** 
 * Creates a log message in the following format ... ""{repository_id} {user_id} {remote_ip} \""{resource}\"" \""{action}\""""
 */
public void auditEvent(AuditEvent event){
  StringBuffer msg=new StringBuffer();
  msg.append(checkNull(event.getRepositoryId())).append(DELIM);
  msg.append(event.getUserId()).append(DELIM);
  msg.append(event.getRemoteIP()).append(DELIM);
  msg.append('\""').append(checkNull(event.getResource())).append('\""').append(DELIM);
  msg.append('\""').append(event.getAction()).append('\""');
  logger.info(msg.toString());
}","/** 
 * Creates a log message in the following format ... ""{repository_id} {user_id} {remote_ip} \""{resource}\"" \""{action}\""""
 */
public void auditEvent(AuditEvent event){
  StringBuffer msg=new StringBuffer();
  msg.append(checkNull(event.getRepositoryId())).append(DELIM);
  msg.append(event.getUserId()).append(DELIM);
  msg.append(checkNull(event.getRemoteIP())).append(DELIM);
  msg.append('\""').append(checkNull(event.getResource())).append('\""').append(DELIM);
  msg.append('\""').append(event.getAction()).append('\""');
  logger.info(msg.toString());
}",0.990063233965673
20743,"public static String getActivePrincipal(Map<String,?> sessionMap){
  SecuritySession securitySession=(SecuritySession)sessionMap.get(SecuritySystemConstants.SECURITY_SESSION_KEY);
  if (securitySession == null) {
    return UserManager.GUEST_USERNAME;
  }
  User user=securitySession.getUser();
  if (user == null) {
    return UserManager.GUEST_USERNAME;
  }
  return (String)user.getPrincipal();
}","public static String getActivePrincipal(Map<String,?> sessionMap){
  if (sessionMap == null) {
    return UserManager.GUEST_USERNAME;
  }
  SecuritySession securitySession=(SecuritySession)sessionMap.get(SecuritySystemConstants.SECURITY_SESSION_KEY);
  if (securitySession == null) {
    return UserManager.GUEST_USERNAME;
  }
  User user=securitySession.getUser();
  if (user == null) {
    return UserManager.GUEST_USERNAME;
  }
  return (String)user.getPrincipal();
}",0.9182968929804372
20744,"protected void triggerAuditEvent(String action){
  AuditEvent event=new AuditEvent(getPrincipal(),action);
  event.setRemoteIP(ServletActionContext.getRequest().getRemoteAddr());
  for (  AuditListener listener : auditListeners) {
    listener.auditEvent(event);
  }
}","protected void triggerAuditEvent(String action){
  AuditEvent event=new AuditEvent(getPrincipal(),action);
  event.setRemoteIP(getRemoteAddr());
  for (  AuditListener listener : auditListeners) {
    listener.auditEvent(event);
  }
}",0.545816733067729
20745,"public Artifact(String repositoryId,String groupId,String artifactId,String version,String type,Date whenGathered){
  this.repositoryId=repositoryId;
  this.groupId=groupId;
  this.artifactId=artifactId;
  this.version=version;
  this.type=type;
  this.whenGathered=whenGathered;
}","public Artifact(String repositoryId,String groupId,String artifactId,String version,String type){
  this.repositoryId=repositoryId;
  this.groupId=groupId;
  this.artifactId=artifactId;
  this.version=version;
  this.type=type;
}",0.8980392156862745
20746,"public List<Artifact> getArtifactVersions(String groupId,String artifactId) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  BrowsingResults results=repoBrowsing.selectArtifactId(""String_Node_Str"",observableRepos,groupId,artifactId);
  ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
  for (  String version : results.getVersions()) {
    ArchivaArtifact pomArtifact=artifactDAO.getArtifact(groupId,artifactId,version,""String_Node_Str"",""String_Node_Str"");
    Artifact artifact=new Artifact(""String_Node_Str"",groupId,artifactId,version,pomArtifact.getType(),pomArtifact.getModel().getWhenGathered());
    artifacts.add(artifact);
  }
  return artifacts;
}","public List<Artifact> getArtifactVersions(String groupId,String artifactId) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  BrowsingResults results=repoBrowsing.selectArtifactId(""String_Node_Str"",observableRepos,groupId,artifactId);
  ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
  for (  String version : results.getVersions()) {
    ArchivaArtifact pomArtifact=artifactDAO.getArtifact(groupId,artifactId,version,""String_Node_Str"",""String_Node_Str"");
    Artifact artifact=new Artifact(""String_Node_Str"",groupId,artifactId,version,pomArtifact.getType());
    artifacts.add(artifact);
  }
  return artifacts;
}",0.9084836339345356
20747,"public List<Artifact> quickSearch(String queryString) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  SearchResultLimits limits=new SearchResultLimits(SearchResultLimits.ALL_PAGES);
  SearchResults results=null;
  if (SearchUtil.isBytecodeSearch(queryString)) {
    results=crossRepoSearch.searchForBytecode(""String_Node_Str"",observableRepos,SearchUtil.removeBytecodeKeyword(queryString),limits);
  }
 else {
    results=crossRepoSearch.searchForTerm(""String_Node_Str"",observableRepos,queryString,limits);
  }
  List<SearchResultHit> hits=results.getHits();
  for (  SearchResultHit hit : hits) {
    ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
    ArchivaArtifact pomArtifact=artifactDAO.getArtifact(hit.getGroupId(),hit.getArtifactId(),hit.getVersion(),""String_Node_Str"",""String_Node_Str"");
    if (pomArtifact != null) {
      Artifact artifact=new Artifact(pomArtifact.getModel().getRepositoryId(),pomArtifact.getGroupId(),pomArtifact.getArtifactId(),pomArtifact.getVersion(),pomArtifact.getType(),pomArtifact.getModel().getWhenGathered());
      artifacts.add(artifact);
    }
 else {
      continue;
    }
  }
  return artifacts;
}","public List<Artifact> quickSearch(String queryString) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  SearchResultLimits limits=new SearchResultLimits(SearchResultLimits.ALL_PAGES);
  SearchResults results=null;
  if (SearchUtil.isBytecodeSearch(queryString)) {
    results=crossRepoSearch.searchForBytecode(""String_Node_Str"",observableRepos,SearchUtil.removeBytecodeKeyword(queryString),limits);
  }
 else {
    results=crossRepoSearch.searchForTerm(""String_Node_Str"",observableRepos,queryString,limits);
  }
  List<SearchResultHit> hits=results.getHits();
  for (  SearchResultHit hit : hits) {
    ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
    try {
      ArchivaArtifact pomArtifact=artifactDAO.getArtifact(hit.getGroupId(),hit.getArtifactId(),hit.getVersion(),""String_Node_Str"",""String_Node_Str"");
      if (pomArtifact != null) {
        Artifact artifact=new Artifact(pomArtifact.getModel().getRepositoryId(),pomArtifact.getGroupId(),pomArtifact.getArtifactId(),pomArtifact.getVersion(),pomArtifact.getType());
        artifacts.add(artifact);
      }
 else {
        continue;
      }
    }
 catch (    ObjectNotFoundException e) {
      continue;
    }
catch (    ArchivaDatabaseException e) {
      continue;
    }
  }
  return artifacts;
}",0.8770460601446517
20748,"public List<Artifact> getArtifactByChecksum(String checksum) throws Exception {
  List<Artifact> results=new ArrayList<Artifact>();
  ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
  ArtifactsByChecksumConstraint constraint=new ArtifactsByChecksumConstraint(checksum);
  List<ArchivaArtifact> artifacts=artifactDAO.queryArtifacts(constraint);
  for (  ArchivaArtifact archivaArtifact : artifacts) {
    Artifact artifact=new Artifact(archivaArtifact.getModel().getRepositoryId(),archivaArtifact.getModel().getGroupId(),archivaArtifact.getModel().getArtifactId(),archivaArtifact.getModel().getVersion(),archivaArtifact.getType(),archivaArtifact.getModel().getWhenGathered());
    results.add(artifact);
  }
  return results;
}","public List<Artifact> getArtifactByChecksum(String checksum) throws Exception {
  List<Artifact> results=new ArrayList<Artifact>();
  ArtifactDAO artifactDAO=archivaDAO.getArtifactDAO();
  ArtifactsByChecksumConstraint constraint=new ArtifactsByChecksumConstraint(checksum);
  List<ArchivaArtifact> artifacts=artifactDAO.queryArtifacts(constraint);
  for (  ArchivaArtifact archivaArtifact : artifacts) {
    Artifact artifact=new Artifact(archivaArtifact.getModel().getRepositoryId(),archivaArtifact.getModel().getGroupId(),archivaArtifact.getModel().getArtifactId(),archivaArtifact.getModel().getVersion(),archivaArtifact.getType());
    results.add(artifact);
  }
  return results;
}",0.968242766407904
20749,"public List<Artifact> getDependees(String groupId,String artifactId,String version) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  List<ArchivaProjectModel> dependees=repoBrowsing.getUsedBy(""String_Node_Str"",observableRepos,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  ArchivaProjectModel model : dependees) {
    Artifact artifact=new Artifact(""String_Node_Str"",model.getGroupId(),model.getArtifactId(),model.getVersion(),""String_Node_Str"",model.getWhenIndexed());
    artifacts.add(artifact);
  }
  return artifacts;
}","public List<Artifact> getDependees(String groupId,String artifactId,String version) throws Exception {
  List<Artifact> artifacts=new ArrayList<Artifact>();
  List<String> observableRepos=xmlRpcUserRepositories.getObservableRepositories();
  List<ArchivaProjectModel> dependees=repoBrowsing.getUsedBy(""String_Node_Str"",observableRepos,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  ArchivaProjectModel model : dependees) {
    Artifact artifact=new Artifact(""String_Node_Str"",model.getGroupId(),model.getArtifactId(),model.getVersion(),""String_Node_Str"");
    artifacts.add(artifact);
  }
  return artifacts;
}",0.9069585613760752
20750,"private SecuritySession getSecuritySession(){
  return (SecuritySession)getContextSession().get(SecuritySession.ROLE);
}","private SecuritySession getSecuritySession(){
  return (SecuritySession)getContextSession().get(SecuritySystemConstants.SECURITY_SESSION_KEY);
}",0.8787878787878788
20751,"private void appendLink(StringBuffer sb,String prefix,BidirectionalRepositoryLayout layout,ArchivaArtifact artifact){
  String type=artifact.getType();
  String linkText=StringUtils.capitalize(type);
  appendLink(sb,prefix,layout,artifact,linkText);
}","private void appendLink(StringBuffer sb,String prefix,ManagedRepositoryContent repo,ArchivaArtifact artifact){
  String type=artifact.getType();
  String linkText=StringUtils.capitalize(type);
  appendLink(sb,prefix,repo,artifact,linkText);
}",0.2839756592292089
20752,"private void appendMini(StringBuffer sb,String prefix,ManagedRepositoryConfiguration repo,BidirectionalRepositoryLayout layout,List relatedArtifacts){
}","private void appendMini(StringBuffer sb,String prefix,ManagedRepositoryContent repo,List<ArchivaArtifact> relatedArtifacts){
}",0.7697841726618705
20753,"public DownloadArtifact(OgnlValueStack stack,PageContext pageContext){
  super(stack);
  decimalFormat=new DecimalFormat(""String_Node_Str"");
  this.req=(HttpServletRequest)pageContext.getRequest();
  this.res=(HttpServletResponse)pageContext.getResponse();
  try {
    dao=(ArchivaDAO)PlexusTagUtil.lookup(pageContext,ArchivaDAO.ROLE,""String_Node_Str"");
    layoutFactory=(BidirectionalRepositoryLayoutFactory)PlexusTagUtil.lookup(pageContext,BidirectionalRepositoryLayoutFactory.class);
  }
 catch (  ComponentLookupException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","public DownloadArtifact(OgnlValueStack stack,PageContext pageContext){
  super(stack);
  decimalFormat=new DecimalFormat(""String_Node_Str"");
  this.req=(HttpServletRequest)pageContext.getRequest();
  this.res=(HttpServletResponse)pageContext.getResponse();
  try {
    dao=(ArchivaDAO)PlexusTagUtil.lookup(pageContext,ArchivaDAO.ROLE,""String_Node_Str"");
    repositoryFactory=(RepositoryContentFactory)PlexusTagUtil.lookup(pageContext,RepositoryContentFactory.class);
  }
 catch (  ComponentLookupException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}",0.6620450606585788
20754,"public boolean end(Writer writer,String body){
  StringBuffer sb=new StringBuffer();
  try {
    Constraint constraint=new ArtifactsRelatedConstraint(groupId,artifactId,version);
    List relatedArtifacts=dao.getArtifactDAO().queryArtifacts(constraint);
    if (relatedArtifacts != null) {
      String repoId=((ArchivaArtifact)relatedArtifacts.get(0)).getModel().getRepositoryId();
      ManagedRepositoryConfiguration repo=findRepository(repoId);
      BidirectionalRepositoryLayout layout=layoutFactory.getLayout(repo.getLayout());
      String prefix=req.getContextPath() + ""String_Node_Str"" + repoId;
      if (mini) {
        appendMini(sb,prefix,repo,layout,relatedArtifacts);
      }
 else {
        appendNormal(sb,prefix,repo,layout,relatedArtifacts);
      }
    }
  }
 catch (  ObjectNotFoundException e) {
    appendError(sb,e);
  }
catch (  ArchivaDatabaseException e) {
    appendError(sb,e);
  }
catch (  LayoutException e) {
    appendError(sb,e);
  }
  try {
    writer.write(sb.toString());
  }
 catch (  IOException e) {
    throw new WebWorkException(""String_Node_Str"" + e.getMessage(),e);
  }
  return super.end(writer,body);
}","public boolean end(Writer writer,String body){
  StringBuffer sb=new StringBuffer();
  try {
    Constraint constraint=new ArtifactsRelatedConstraint(groupId,artifactId,version);
    List<ArchivaArtifact> relatedArtifacts=dao.getArtifactDAO().queryArtifacts(constraint);
    if (relatedArtifacts != null) {
      String repoId=((ArchivaArtifact)relatedArtifacts.get(0)).getModel().getRepositoryId();
      ManagedRepositoryContent repo=repositoryFactory.getManagedRepositoryContent(repoId);
      String prefix=req.getContextPath() + ""String_Node_Str"" + repoId;
      if (mini) {
        appendMini(sb,prefix,repo,relatedArtifacts);
      }
 else {
        appendNormal(sb,prefix,repo,relatedArtifacts);
      }
    }
  }
 catch (  ObjectNotFoundException e) {
    appendError(sb,e);
  }
catch (  ArchivaDatabaseException e) {
    appendError(sb,e);
  }
catch (  RepositoryNotFoundException e) {
    e.printStackTrace();
  }
catch (  RepositoryException e) {
    e.printStackTrace();
  }
  try {
    writer.write(sb.toString());
  }
 catch (  IOException e) {
    throw new WebWorkException(""String_Node_Str"" + e.getMessage(),e);
  }
  return super.end(writer,body);
}",0.8787224859732412
20755,"private void appendNormal(StringBuffer sb,String prefix,ManagedRepositoryConfiguration repo,BidirectionalRepositoryLayout layout,List relatedArtifacts){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (relatedArtifacts.size() > 1) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  Iterator it=relatedArtifacts.iterator();
  while (it.hasNext()) {
    ArchivaArtifact artifact=(ArchivaArtifact)it.next();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendImageLink(sb,prefix,layout,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendLink(sb,prefix,layout,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendFilesize(sb,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}","private void appendNormal(StringBuffer sb,String prefix,ManagedRepositoryContent repo,List<ArchivaArtifact> relatedArtifacts){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (relatedArtifacts.size() > 1) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  Iterator it=relatedArtifacts.iterator();
  while (it.hasNext()) {
    ArchivaArtifact artifact=(ArchivaArtifact)it.next();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendImageLink(sb,prefix,repo,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendLink(sb,prefix,repo,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    appendFilesize(sb,artifact);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
}",0.8759367194004996
20756,"private void appendImageLink(StringBuffer sb,String prefix,BidirectionalRepositoryLayout layout,ArchivaArtifact artifact){
  String type=artifact.getType();
  String linkText=""String_Node_Str"" + req.getContextPath() + ""String_Node_Str""+ type+ ""String_Node_Str"";
  appendLink(sb,prefix,layout,artifact,linkText);
}","private void appendImageLink(StringBuffer sb,String prefix,ManagedRepositoryContent repo,ArchivaArtifact artifact){
  String type=artifact.getType();
  String linkText=""String_Node_Str"" + req.getContextPath() + ""String_Node_Str""+ type+ ""String_Node_Str"";
  appendLink(sb,prefix,repo,artifact,linkText);
}",0.9108589951377634
20757,"private String saveConfiguration(){
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
  }
  return SUCCESS;
}","private String saveConfiguration(){
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    return INPUT;
  }
catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
    return INPUT;
  }
  return SUCCESS;
}",0.952755905511811
20758,"private String saveConfiguration(){
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
  }
  return SUCCESS;
}","private String saveConfiguration(){
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    return INPUT;
  }
catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
    return INPUT;
  }
  return SUCCESS;
}",0.952755905511811
20759,"public String save(){
  String mode=getMode();
  String repoId=getRepository().getId();
  boolean containsError=false;
  getLogger().info(""String_Node_Str"" + mode + ""String_Node_Str""+ repoId+ ""String_Node_Str"");
  containsError=validateFields(mode);
  if (containsError && StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    return INPUT;
  }
 else   if (containsError && StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    return ERROR;
  }
  if (StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    removeRepository(repoId);
  }
  try {
    addRepository(getRepository());
    saveConfiguration();
  }
 catch (  IOException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
catch (  RoleManagerException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
catch (  InvalidConfigurationException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
  }
  return SUCCESS;
}","public String save(){
  String mode=getMode();
  String repoId=getRepository().getId();
  boolean containsError=false;
  getLogger().info(""String_Node_Str"" + mode + ""String_Node_Str""+ repoId+ ""String_Node_Str"");
  containsError=validateFields(mode);
  if (containsError && StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    return INPUT;
  }
 else   if (containsError && StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    return ERROR;
  }
  if (StringUtils.equalsIgnoreCase(""String_Node_Str"",mode)) {
    removeRepository(repoId);
  }
  String result;
  try {
    addRepository(getRepository());
    result=saveConfiguration();
  }
 catch (  IOException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    result=INPUT;
  }
catch (  RoleManagerException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    result=INPUT;
  }
catch (  InvalidConfigurationException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    result=INPUT;
  }
catch (  RegistryException e) {
    addActionError(""String_Node_Str"" + e.getMessage());
    result=INPUT;
  }
  return result;
}",0.9491367242183856
20760,"public String delete(){
  getLogger().info(""String_Node_Str"");
  if (operationAllowed(ArchivaRoleConstants.OPERATION_DELETE_REPOSITORY,getRepoid())) {
    addActionError(""String_Node_Str"" + getRepoid() + ""String_Node_Str"");
    return ERROR;
  }
  if (StringUtils.equals(mode,""String_Node_Str"") || StringUtils.equals(mode,""String_Node_Str"")) {
    AdminRepositoryConfiguration existingRepository=getRepository();
    if (existingRepository == null) {
      addActionError(""String_Node_Str"");
      return ERROR;
    }
    try {
      removeRepository(getRepoid());
      removeRepositoryRoles(existingRepository);
      saveConfiguration();
      if (StringUtils.equals(mode,""String_Node_Str"")) {
        removeContents(existingRepository);
      }
    }
 catch (    IOException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
    }
catch (    RoleManagerException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
    }
catch (    InvalidConfigurationException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
    }
catch (    RegistryException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
    }
  }
  return SUCCESS;
}","public String delete(){
  getLogger().info(""String_Node_Str"");
  if (operationAllowed(ArchivaRoleConstants.OPERATION_DELETE_REPOSITORY,getRepoid())) {
    addActionError(""String_Node_Str"" + getRepoid() + ""String_Node_Str"");
    return ERROR;
  }
  String result=SUCCESS;
  if (StringUtils.equals(mode,""String_Node_Str"") || StringUtils.equals(mode,""String_Node_Str"")) {
    AdminRepositoryConfiguration existingRepository=getRepository();
    if (existingRepository == null) {
      addActionError(""String_Node_Str"");
      return ERROR;
    }
    try {
      removeRepository(getRepoid());
      result=saveConfiguration();
      if (result.equals(SUCCESS)) {
        removeRepositoryRoles(existingRepository);
        if (StringUtils.equals(mode,""String_Node_Str"")) {
          removeContents(existingRepository);
        }
      }
    }
 catch (    IOException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
      result=INPUT;
    }
catch (    RoleManagerException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
      result=INPUT;
    }
catch (    InvalidConfigurationException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
      result=INPUT;
    }
catch (    RegistryException e) {
      addActionError(""String_Node_Str"" + e.getMessage());
      result=INPUT;
    }
  }
  return result;
}",0.2053111375346809
20761,"private String saveConfiguration() throws IOException, InvalidConfigurationException, RegistryException {
  getLogger().info(""String_Node_Str"");
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
  }
  return SUCCESS;
}","private String saveConfiguration() throws IOException, InvalidConfigurationException, RegistryException {
  getLogger().info(""String_Node_Str"");
  try {
    archivaConfiguration.save(archivaConfiguration.getConfiguration());
    addActionMessage(""String_Node_Str"");
  }
 catch (  IndeterminateConfigurationException e) {
    addActionError(e.getMessage());
    return INPUT;
  }
  return SUCCESS;
}",0.9768637532133676
20762,"private void synchConfiguration(){
  List repos=archivaConfiguration.getConfiguration().getRepositories();
  Iterator it=repos.iterator();
  while (it.hasNext()) {
    RepositoryConfiguration repoConfig=(RepositoryConfiguration)it.next();
    try {
      try {
        ArchivaRepository repository=dao.getRepositoryDAO().getRepository(repoConfig.getId());
        repository.getModel().setName(repoConfig.getName());
        repository.getModel().setUrl(repoConfig.getUrl());
        repository.getModel().setLayoutName(repoConfig.getLayout());
        repository.getModel().setCreationSource(""String_Node_Str"");
        repository.getModel().setReleasePolicy(repoConfig.isReleases());
        repository.getModel().setSnapshotPolicy(repoConfig.isSnapshots());
        dao.getRepositoryDAO().saveRepository(repository);
      }
 catch (      ObjectNotFoundException e) {
        getLogger().info(""String_Node_Str"" + repoConfig);
        ArchivaRepository drepo=ArchivaConfigurationAdaptor.toArchivaRepository(repoConfig);
        drepo.getModel().setCreationSource(""String_Node_Str"");
        dao.getRepositoryDAO().saveRepository(drepo);
      }
    }
 catch (    ArchivaDatabaseException e) {
      getLogger().error(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      if (!roleManager.templatedRoleExists(""String_Node_Str"",repoConfig.getId())) {
        roleManager.createTemplatedRole(""String_Node_Str"",repoConfig.getId());
      }
      if (!roleManager.templatedRoleExists(""String_Node_Str"",repoConfig.getId()))       ;
{
        roleManager.createTemplatedRole(""String_Node_Str"",repoConfig.getId());
      }
    }
 catch (    RoleManagerException e) {
      getLogger().error(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","private void synchConfiguration(){
  List repos=archivaConfiguration.getConfiguration().getRepositories();
  Iterator it=repos.iterator();
  while (it.hasNext()) {
    RepositoryConfiguration repoConfig=(RepositoryConfiguration)it.next();
    try {
      try {
        ArchivaRepository repository=dao.getRepositoryDAO().getRepository(repoConfig.getId());
        repository.getModel().setName(repoConfig.getName());
        repository.getModel().setUrl(repoConfig.getUrl());
        repository.getModel().setLayoutName(repoConfig.getLayout());
        repository.getModel().setCreationSource(""String_Node_Str"");
        repository.getModel().setReleasePolicy(repoConfig.isReleases());
        repository.getModel().setSnapshotPolicy(repoConfig.isSnapshots());
        dao.getRepositoryDAO().saveRepository(repository);
      }
 catch (      ObjectNotFoundException e) {
        getLogger().info(""String_Node_Str"" + repoConfig);
        ArchivaRepository drepo=ArchivaConfigurationAdaptor.toArchivaRepository(repoConfig);
        drepo.getModel().setCreationSource(""String_Node_Str"");
        dao.getRepositoryDAO().saveRepository(drepo);
      }
    }
 catch (    ArchivaDatabaseException e) {
      getLogger().error(""String_Node_Str"" + e.getMessage(),e);
    }
    try {
      if (!roleManager.templatedRoleExists(""String_Node_Str"",repoConfig.getId())) {
        roleManager.createTemplatedRole(""String_Node_Str"",repoConfig.getId());
      }
      if (!roleManager.templatedRoleExists(""String_Node_Str"",repoConfig.getId())) {
        roleManager.createTemplatedRole(""String_Node_Str"",repoConfig.getId());
      }
    }
 catch (    RoleManagerException e) {
      getLogger().error(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.997698504027618
20763,"public boolean end(Writer writer,String body){
  StringBuffer sb=new StringBuffer();
  try {
    ManagedArtifact managedArtifact=managedRepositories.findArtifact(groupId,artifactId,version);
    RepositoryConfiguration repoConfig=managedRepositories.getRepositoryConfiguration(managedArtifact.getRepositoryId());
    String prefix=req.getContextPath() + ""String_Node_Str"" + repoConfig.getUrlName();
    if (mini) {
      appendMini(sb,prefix,managedArtifact);
    }
 else {
      appendNormal(sb,prefix,managedArtifact);
    }
  }
 catch (  ProjectBuildingException e) {
    appendError(sb,e);
  }
  try {
    writer.write(sb.toString());
  }
 catch (  IOException e) {
    throw new WebWorkException(""String_Node_Str"" + e.getMessage(),e);
  }
  return super.end(writer,body);
}","public boolean end(Writer writer,String body){
  StringBuffer sb=new StringBuffer();
  try {
    ManagedArtifact managedArtifact=managedRepositories.findArtifact(groupId,artifactId,version);
    if (managedArtifact != null) {
      RepositoryConfiguration repoConfig=managedRepositories.getRepositoryConfiguration(managedArtifact.getRepositoryId());
      String prefix=req.getContextPath() + ""String_Node_Str"" + repoConfig.getUrlName();
      if (mini) {
        appendMini(sb,prefix,managedArtifact);
      }
 else {
        appendNormal(sb,prefix,managedArtifact);
      }
    }
  }
 catch (  ProjectBuildingException e) {
    appendError(sb,e);
  }
  try {
    writer.write(sb.toString());
  }
 catch (  IOException e) {
    throw new WebWorkException(""String_Node_Str"" + e.getMessage(),e);
  }
  return super.end(writer,body);
}",0.9658597144630664
20764,"public void addUser(String principal) throws RbacStoreException {
  try {
    Resource usernameResource=manager.createResource(principal);
    manager.saveResource(usernameResource);
    Permission editUser=manager.createPermission(""String_Node_Str"");
    editUser.setOperation(manager.getOperation(""String_Node_Str""));
    editUser.setResource(manager.getResource(principal));
    editUser=manager.savePermission(editUser);
    Role userRole=manager.createRole(""String_Node_Str"" + principal);
    userRole.addPermission(editUser);
    userRole=manager.saveRole(userRole);
    UserAssignment assignment=manager.createUserAssignment(principal);
    assignment.addRole(userRole);
    manager.saveUserAssignment(assignment);
  }
 catch (  RbacObjectNotFoundException ne) {
    throw new RbacStoreException(""String_Node_Str"",ne);
  }
}","public void addUser(String principal) throws RbacStoreException {
  Resource usernameResource=manager.createResource(principal);
  manager.saveResource(usernameResource);
  Permission editUser=manager.createPermission(""String_Node_Str"" + principal,""String_Node_Str"",principal);
  editUser=manager.savePermission(editUser);
  Role userRole=manager.createRole(""String_Node_Str"" + principal);
  userRole.addPermission(editUser);
  userRole=manager.saveRole(userRole);
  UserAssignment assignment=manager.createUserAssignment(principal);
  assignment.addRole(userRole);
  manager.saveUserAssignment(assignment);
}",0.7680555555555556
20765,"/** 
 * Queries the configuration on how to handle a repository download failure
 * @param repository the repository object where the failure occurred
 * @param message    the message/reason for the failure
 * @param t          the cause for the exception
 * @throws ProxyException if hard failure is enabled on the repository causing the failure
 */
private void processRepositoryFailure(ProxiedArtifactRepository repository,String message,Throwable t) throws ProxyException {
  if (repository.isHardFail()) {
    throw new ProxyException(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ message,t);
  }
 else {
    getLogger().warn(message);
    getLogger().debug(message,t);
  }
}","private void processRepositoryFailure(ProxiedArtifactRepository repository,String message) throws ProxyException {
  if (repository.isHardFail()) {
    throw new ProxyException(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ message);
  }
 else {
    getLogger().warn(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ message);
  }
}",0.1421800947867298
20766,"public File getAlways(String path,List proxiedRepositories,ArtifactRepository managedRepository,ProxyInfo wagonProxy) throws ResourceDoesNotExistException, ProxyException {
  File target=new File(managedRepository.getBasedir(),path);
  for (Iterator i=proxiedRepositories.iterator(); i.hasNext(); ) {
    ProxiedArtifactRepository repository=(ProxiedArtifactRepository)i.next();
    if (repository.isCachedFailure(path)) {
      getLogger().debug(""String_Node_Str"" + repository.getName() + ""String_Node_Str"");
    }
 else {
      try {
        get(path,target,repository,managedRepository,wagonProxy);
        if (!target.exists()) {
          repository.addFailure(path);
        }
 else {
          repository.clearFailure(path);
        }
      }
 catch (      ProxyException e) {
        repository.addFailure(path);
        throw e;
      }
    }
  }
  if (!target.exists()) {
    throw new ResourceDoesNotExistException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  return target;
}","public File getAlways(String path,List proxiedRepositories,ArtifactRepository managedRepository,ProxyInfo wagonProxy) throws ResourceDoesNotExistException, ProxyException {
  File target=new File(managedRepository.getBasedir(),path);
  for (Iterator i=proxiedRepositories.iterator(); i.hasNext(); ) {
    ProxiedArtifactRepository repository=(ProxiedArtifactRepository)i.next();
    if (repository.isCachedFailure(path)) {
      processRepositoryFailure(repository,""String_Node_Str"");
    }
 else {
      try {
        get(path,target,repository,managedRepository,wagonProxy);
        if (!target.exists()) {
          repository.addFailure(path);
        }
 else {
          repository.clearFailure(path);
        }
      }
 catch (      ProxyException e) {
        repository.addFailure(path);
        throw e;
      }
    }
  }
  if (!target.exists()) {
    throw new ResourceDoesNotExistException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  return target;
}",0.5170483460559796
20767,"private void getFileFromRepository(String path,ProxiedArtifactRepository repository,String repositoryCachePath,ProxyInfo httpProxy,File target) throws ProxyException {
  boolean connected=false;
  Map checksums=null;
  Wagon wagon=null;
  try {
    String protocol=repository.getRepository().getProtocol();
    wagon=(Wagon)wagons.get(protocol);
    if (wagon == null) {
      throw new ProxyException(""String_Node_Str"" + protocol);
    }
    checksums=prepareChecksumListeners(wagon);
    connected=connectToRepository(wagon,repository,httpProxy);
    if (connected) {
      File temp=new File(target.getAbsolutePath() + ""String_Node_Str"");
      temp.deleteOnExit();
      int tries=0;
      boolean success;
      do {
        tries++;
        getLogger().debug(""String_Node_Str"" + path + ""String_Node_Str""+ repository.getName()+ ""String_Node_Str"");
        if (!target.exists()) {
          wagon.get(path,temp);
        }
 else {
          wagon.getIfNewer(path,temp,target.lastModified());
        }
        success=checkChecksum(checksums,path,wagon,repositoryCachePath);
        if (tries > 1 && !success) {
          throw new TransferFailedException(""String_Node_Str"" + path);
        }
        if (temp.exists()) {
          moveTempToTarget(temp,target);
        }
      }
 while (!success);
    }
  }
 catch (  TransferFailedException e) {
    String message=""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage();
    processRepositoryFailure(repository,message,e);
  }
catch (  AuthorizationException e) {
    String message=""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage();
    processRepositoryFailure(repository,message,e);
  }
catch (  ResourceDoesNotExistException e) {
    getLogger().debug(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    if (wagon != null && checksums != null) {
      releaseChecksumListeners(wagon,checksums);
    }
    if (connected) {
      disconnectWagon(wagon);
    }
  }
}","private void getFileFromRepository(String path,ProxiedArtifactRepository repository,String repositoryCachePath,ProxyInfo httpProxy,File target) throws ProxyException {
  boolean connected=false;
  Map checksums=null;
  Wagon wagon=null;
  try {
    String protocol=repository.getRepository().getProtocol();
    wagon=(Wagon)wagons.get(protocol);
    if (wagon == null) {
      throw new ProxyException(""String_Node_Str"" + protocol);
    }
    checksums=prepareChecksumListeners(wagon);
    connected=connectToRepository(wagon,repository,httpProxy);
    if (connected) {
      File temp=new File(target.getAbsolutePath() + ""String_Node_Str"");
      temp.deleteOnExit();
      int tries=0;
      boolean success;
      do {
        tries++;
        getLogger().debug(""String_Node_Str"" + path + ""String_Node_Str""+ repository.getName()+ ""String_Node_Str"");
        if (!target.exists()) {
          wagon.get(path,temp);
        }
 else {
          wagon.getIfNewer(path,temp,target.lastModified());
        }
        success=checkChecksum(checksums,path,wagon,repositoryCachePath);
        if (tries > 1 && !success) {
          processRepositoryFailure(repository,""String_Node_Str"" + path);
          return;
        }
        if (temp.exists()) {
          moveTempToTarget(temp,target);
        }
      }
 while (!success);
    }
  }
 catch (  TransferFailedException e) {
    processRepositoryFailure(repository,e);
  }
catch (  AuthorizationException e) {
    processRepositoryFailure(repository,e);
  }
catch (  ResourceDoesNotExistException e) {
    getLogger().debug(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    if (wagon != null && checksums != null) {
      releaseChecksumListeners(wagon,checksums);
    }
    if (connected) {
      disconnectWagon(wagon);
    }
  }
}",0.7208939708939709
20768,"public File getAlways(String path,List proxiedRepositories,ArtifactRepository managedRepository,ProxyInfo wagonProxy) throws ResourceDoesNotExistException, ProxyException {
  File target=new File(managedRepository.getBasedir(),path);
  for (Iterator i=proxiedRepositories.iterator(); i.hasNext(); ) {
    ProxiedArtifactRepository repository=(ProxiedArtifactRepository)i.next();
    if (repository.isCachedFailure(path)) {
      processCachedRepositoryFailure(repository,""String_Node_Str"" + path);
    }
 else {
      get(path,target,repository,managedRepository,wagonProxy);
    }
  }
  if (!target.exists()) {
    throw new ResourceDoesNotExistException(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  return target;
}","public File getAlways(String path,List proxiedRepositories,ArtifactRepository managedRepository,ProxyInfo wagonProxy) throws ResourceDoesNotExistException, ProxyException {
  return get(managedRepository,path,proxiedRepositories,wagonProxy,true);
}",0.4152106885919835
20769,"private boolean checkChecksum(Map checksumMap,String path,Wagon wagon,String repositoryCachePath) throws ProxyException {
  releaseChecksumListeners(wagon,checksumMap);
  for (Iterator checksums=checksumMap.keySet().iterator(); checksums.hasNext(); ) {
    String checksumExt=(String)checksums.next();
    ChecksumObserver checksum=(ChecksumObserver)checksumMap.get(checksumExt);
    String checksumPath=path + ""String_Node_Str"" + checksumExt;
    File checksumFile=new File(repositoryCachePath,checksumPath);
    try {
      File tempChecksumFile=new File(checksumFile.getAbsolutePath() + ""String_Node_Str"");
      wagon.get(checksumPath,tempChecksumFile);
      String remoteChecksum=FileUtils.fileRead(tempChecksumFile).trim();
      if (remoteChecksum.indexOf(' ') > 0) {
        remoteChecksum=remoteChecksum.substring(0,remoteChecksum.indexOf(' '));
      }
      String actualChecksum=checksum.getActualChecksum().toUpperCase();
      remoteChecksum=remoteChecksum.toUpperCase();
      boolean checksumCheck;
      if (remoteChecksum.equals(actualChecksum)) {
        moveTempToTarget(tempChecksumFile,checksumFile);
        checksumCheck=true;
      }
 else {
        getLogger().warn(""String_Node_Str"" + actualChecksum + ""String_Node_Str""+ remoteChecksum);
        checksumCheck=false;
      }
      return checksumCheck;
    }
 catch (    TransferFailedException e) {
      getLogger().warn(""String_Node_Str"" + checksumPath + ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    ResourceDoesNotExistException e) {
      getLogger().debug(""String_Node_Str"" + checksumPath,e);
    }
catch (    AuthorizationException e) {
      getLogger().warn(""String_Node_Str"" + checksumPath + ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    IOException e) {
      getLogger().warn(""String_Node_Str"",e);
      return false;
    }
  }
  getLogger().debug(""String_Node_Str"");
  return true;
}","private boolean checkChecksum(Map checksumMap,String path,Wagon wagon,String repositoryCachePath) throws ProxyException {
  releaseChecksumListeners(wagon,checksumMap);
  boolean correctChecksum=false;
  boolean allNotFound=true;
  for (Iterator i=checksumMap.keySet().iterator(); i.hasNext() && !correctChecksum; ) {
    String checksumExt=(String)i.next();
    ChecksumObserver checksum=(ChecksumObserver)checksumMap.get(checksumExt);
    String checksumPath=path + ""String_Node_Str"" + checksumExt;
    File checksumFile=new File(repositoryCachePath,checksumPath);
    File tempChecksumFile=new File(checksumFile.getAbsolutePath() + ""String_Node_Str"");
    tempChecksumFile.deleteOnExit();
    try {
      wagon.get(checksumPath,tempChecksumFile);
      allNotFound=false;
      String remoteChecksum=DigestUtils.cleanChecksum(FileUtils.fileRead(tempChecksumFile),checksumExt.toUpperCase(),path.substring(path.lastIndexOf('/')));
      String actualChecksum=checksum.getActualChecksum().toUpperCase();
      remoteChecksum=remoteChecksum.toUpperCase();
      if (remoteChecksum.equals(actualChecksum)) {
        moveTempToTarget(tempChecksumFile,checksumFile);
        correctChecksum=true;
      }
 else {
        getLogger().warn(""String_Node_Str"" + actualChecksum + ""String_Node_Str""+ remoteChecksum);
      }
    }
 catch (    TransferFailedException e) {
      getLogger().warn(""String_Node_Str"" + checksumPath + ""String_Node_Str""+ e.getMessage(),e);
      allNotFound=false;
    }
catch (    ResourceDoesNotExistException e) {
      getLogger().debug(""String_Node_Str"" + checksumPath,e);
      if (checksumFile.exists()) {
        checksumFile.delete();
      }
    }
catch (    AuthorizationException e) {
      getLogger().warn(""String_Node_Str"" + checksumPath + ""String_Node_Str""+ e.getMessage(),e);
      allNotFound=false;
    }
catch (    IOException e) {
      getLogger().warn(""String_Node_Str"",e);
      allNotFound=false;
    }
catch (    DigesterException e) {
      getLogger().warn(""String_Node_Str"" + checksumPath + ""String_Node_Str""+ e.getMessage(),e);
      allNotFound=false;
    }
 finally {
      tempChecksumFile.delete();
    }
  }
  return correctChecksum || allNotFound;
}",0.4384765625
20770,"private void getFileFromRepository(String path,ProxiedArtifactRepository repository,String repositoryCachePath,ProxyInfo httpProxy,File target,ArtifactRepositoryPolicy policy) throws ProxyException {
  boolean connected=false;
  Map checksums=null;
  Wagon wagon=null;
  try {
    String protocol=repository.getRepository().getProtocol();
    wagon=(Wagon)wagons.get(protocol);
    if (wagon == null) {
      throw new ProxyException(""String_Node_Str"" + protocol);
    }
    checksums=prepareChecksumListeners(wagon);
    connected=connectToRepository(wagon,repository,httpProxy);
    if (connected) {
      File temp=new File(target.getAbsolutePath() + ""String_Node_Str"");
      temp.deleteOnExit();
      int tries=0;
      boolean success;
      do {
        tries++;
        getLogger().debug(""String_Node_Str"" + path + ""String_Node_Str""+ repository.getName()+ ""String_Node_Str"");
        if (!target.exists()) {
          wagon.get(path,temp);
        }
 else {
          wagon.getIfNewer(path,temp,target.lastModified());
        }
        success=checkChecksum(checksums,path,wagon,repositoryCachePath);
        if (tries > 1 && !success) {
          processRepositoryFailure(repository,""String_Node_Str"" + path,path,policy);
          return;
        }
        if (temp.exists()) {
          moveTempToTarget(temp,target);
        }
      }
 while (!success);
    }
  }
 catch (  TransferFailedException e) {
    processRepositoryFailure(repository,e,path,policy);
  }
catch (  AuthorizationException e) {
    processRepositoryFailure(repository,e,path,policy);
  }
catch (  ResourceDoesNotExistException e) {
    getLogger().debug(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    if (wagon != null && checksums != null) {
      releaseChecksumListeners(wagon,checksums);
    }
    if (connected) {
      disconnectWagon(wagon);
    }
  }
}","private void getFileFromRepository(String path,ProxiedArtifactRepository repository,String repositoryCachePath,ProxyInfo httpProxy,File target,ArtifactRepositoryPolicy policy,boolean force) throws ProxyException {
  boolean connected=false;
  Map checksums=null;
  Wagon wagon=null;
  File temp=new File(target.getAbsolutePath() + ""String_Node_Str"");
  temp.deleteOnExit();
  try {
    String protocol=repository.getRepository().getProtocol();
    wagon=(Wagon)wagons.get(protocol);
    if (wagon == null) {
      throw new ProxyException(""String_Node_Str"" + protocol);
    }
    checksums=prepareChecksumListeners(wagon);
    connected=connectToRepository(wagon,repository,httpProxy);
    if (connected) {
      int tries=0;
      boolean success;
      do {
        tries++;
        getLogger().debug(""String_Node_Str"" + path + ""String_Node_Str""+ repository.getName()+ ""String_Node_Str"");
        if (force || !target.exists()) {
          wagon.get(path,temp);
        }
 else {
          wagon.getIfNewer(path,temp,target.lastModified());
        }
        success=checkChecksum(checksums,path,wagon,repositoryCachePath);
        if (tries > 1 && !success) {
          processRepositoryFailure(repository,""String_Node_Str"" + path,path,policy);
          return;
        }
      }
 while (!success);
      if (temp.exists()) {
        moveTempToTarget(temp,target);
      }
    }
  }
 catch (  TransferFailedException e) {
    processRepositoryFailure(repository,e,path,policy);
  }
catch (  AuthorizationException e) {
    processRepositoryFailure(repository,e,path,policy);
  }
catch (  ResourceDoesNotExistException e) {
    getLogger().debug(""String_Node_Str"" + repository.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    temp.delete();
    if (wagon != null && checksums != null) {
      releaseChecksumListeners(wagon,checksums);
    }
    if (connected) {
      disconnectWagon(wagon);
    }
  }
}",0.8644688644688645
20771,"private void get(String path,File target,ProxiedArtifactRepository repository,ArtifactRepository managedRepository,ProxyInfo wagonProxy) throws ProxyException {
  ArtifactRepositoryPolicy policy=null;
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"")) {
  }
 else   if (path.endsWith(""String_Node_Str"")) {
    policy=repository.getRepository().getReleases();
    if (!target.exists() || isOutOfDate(policy,target)) {
      getFileFromRepository(path,repository,managedRepository.getBasedir(),wagonProxy,target,policy);
    }
  }
 else {
    Artifact artifact=null;
    try {
      artifact=defaultArtifactDiscoverer.buildArtifact(path);
    }
 catch (    DiscovererException e) {
      getLogger().debug(""String_Node_Str"" + e.getMessage());
    }
    if (artifact == null) {
      try {
        artifact=legacyArtifactDiscoverer.buildArtifact(path);
      }
 catch (      DiscovererException e) {
        getLogger().debug(""String_Node_Str"" + e.getMessage());
      }
    }
    if (artifact != null) {
      ArtifactRepository artifactRepository=repository.getRepository();
      policy=artifact.isSnapshot() ? artifactRepository.getSnapshots() : artifactRepository.getReleases();
      if (!policy.isEnabled()) {
        getLogger().debug(""String_Node_Str"" + repository.getName());
      }
 else {
        if (!target.exists() || isOutOfDate(policy,target)) {
          getFileFromRepository(artifactRepository.pathOf(artifact),repository,managedRepository.getBasedir(),wagonProxy,target,policy);
        }
      }
    }
 else {
      if (!target.exists()) {
        policy=repository.getRepository().getReleases();
        getFileFromRepository(path,repository,managedRepository.getBasedir(),wagonProxy,target,policy);
      }
    }
  }
  if (target.exists()) {
    repository.clearFailure(path);
  }
}","private void get(String path,File target,ProxiedArtifactRepository repository,ArtifactRepository managedRepository,ProxyInfo wagonProxy,boolean force) throws ProxyException {
  ArtifactRepositoryPolicy policy;
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"")) {
  }
 else   if (path.endsWith(""String_Node_Str"")) {
    policy=repository.getRepository().getReleases();
    if (force || !target.exists() || isOutOfDate(policy,target)) {
      getFileFromRepository(path,repository,managedRepository.getBasedir(),wagonProxy,target,policy,force);
    }
  }
 else {
    Artifact artifact=null;
    try {
      artifact=defaultArtifactDiscoverer.buildArtifact(path);
    }
 catch (    DiscovererException e) {
      getLogger().debug(""String_Node_Str"" + e.getMessage());
    }
    if (artifact == null) {
      try {
        artifact=legacyArtifactDiscoverer.buildArtifact(path);
      }
 catch (      DiscovererException e) {
        getLogger().debug(""String_Node_Str"" + e.getMessage());
      }
    }
    if (artifact != null) {
      ArtifactRepository artifactRepository=repository.getRepository();
      policy=artifact.isSnapshot() ? artifactRepository.getSnapshots() : artifactRepository.getReleases();
      if (!policy.isEnabled()) {
        getLogger().debug(""String_Node_Str"" + repository.getName());
      }
 else {
        if (force || !target.exists() || isOutOfDate(policy,target)) {
          getFileFromRepository(artifactRepository.pathOf(artifact),repository,managedRepository.getBasedir(),wagonProxy,target,policy,force);
        }
      }
    }
 else {
      if (force || !target.exists()) {
        policy=repository.getRepository().getReleases();
        getFileFromRepository(path,repository,managedRepository.getBasedir(),wagonProxy,target,policy,force);
      }
    }
  }
  if (target.exists()) {
    repository.clearFailure(path);
  }
}",0.9655172413793104
20772,"/** 
 * Method called by lucence during indexing operations
 * @param fieldName the field name that the lucene object is currently processing
 * @param reader    a Reader object to the index stream
 * @return an analyzer to specific to the field name or the default analyzer if none is present
 */
public TokenStream tokenStream(String fieldName,Reader reader){
  TokenStream tokenStream;
  if (""String_Node_Str"".equals(fieldName)) {
    tokenStream=new EclipseIndexTokenizer(reader);
  }
 else {
    tokenStream=defaultAnalyzer.tokenStream(fieldName,reader);
  }
  return tokenStream;
}","/** 
 * Method called by lucence during indexing operations
 * @param fieldName the field name that the lucene object is currently processing
 * @param reader    a Reader object to the index stream
 * @return an analyzer to specific to the field name or the default analyzer if none is present
 */
public TokenStream tokenStream(String fieldName,Reader reader){
  TokenStream tokenStream;
  if (JAR_SIZE.equals(fieldName)) {
    tokenStream=new EclipseIndexTokenizer(reader);
  }
 else   if (JAR_DATE.equals(fieldName)) {
    tokenStream=new EclipseIndexTokenizer(reader);
  }
 else   if (MD5.equals(fieldName)) {
    tokenStream=new EclipseIndexTokenizer(reader);
  }
 else {
    tokenStream=defaultAnalyzer.tokenStream(fieldName,reader);
  }
  return tokenStream;
}",0.843426883308715
20773,"/** 
 * Creates a Lucene Document from an artifact; used for index additions
 * @param artifact
 * @return
 * @throws RepositoryIndexException
 */
private Document createDocument(Artifact artifact) throws RepositoryIndexException {
  Document doc=null;
  File artifactFile=artifact.getFile();
  if (artifactFile != null && artifactFile.getName().endsWith(""String_Node_Str"") && artifactFile.exists()) {
    String md5;
    try {
      md5=digester.createChecksum(artifactFile,""String_Node_Str"");
    }
 catch (    DigesterException e) {
      throw new RepositoryIndexException(""String_Node_Str"",e);
    }
    StringBuffer classes;
    try {
      classes=new StringBuffer();
      if (""String_Node_Str"".equals(artifact.getType())) {
        ZipFile jar=new ZipFile(artifact.getFile());
        for (Enumeration entries=jar.entries(); entries.hasMoreElements(); ) {
          ZipEntry entry=(ZipEntry)entries.nextElement();
          addIfClassEntry(entry,classes);
        }
      }
    }
 catch (    ZipException e) {
      throw new RepositoryIndexException(""String_Node_Str"" + artifact.getFile(),e);
    }
catch (    IOException e) {
      throw new RepositoryIndexException(""String_Node_Str"",e);
    }
    doc=new Document();
    doc.add(new Field(MD5,md5,Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(JAR_NAME,artifactFile.getName(),Field.Store.YES,Field.Index.TOKENIZED));
    doc.add(new Field(JAR_DATE,DateField.timeToString(artifactFile.lastModified()),Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(JAR_SIZE,Long.toString(artifactFile.length()),Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(NAMES,classes.toString(),Field.Store.YES,Field.Index.TOKENIZED));
  }
  return doc;
}","/** 
 * Creates a Lucene Document from an artifact; used for index additions
 * @param artifact
 * @return
 * @throws RepositoryIndexException
 */
private Document createDocument(Artifact artifact) throws RepositoryIndexException {
  Document doc=null;
  File artifactFile=artifact.getFile();
  if (artifactFile != null && artifactFile.getName().endsWith(""String_Node_Str"") && artifactFile.exists()) {
    String md5;
    try {
      md5=digester.createChecksum(artifactFile,""String_Node_Str"");
    }
 catch (    DigesterException e) {
      throw new RepositoryIndexException(""String_Node_Str"",e);
    }
    StringBuffer classes;
    try {
      classes=new StringBuffer();
      if (""String_Node_Str"".equals(artifact.getType())) {
        ZipFile jar=new ZipFile(artifact.getFile());
        for (Enumeration entries=jar.entries(); entries.hasMoreElements(); ) {
          ZipEntry entry=(ZipEntry)entries.nextElement();
          addIfClassEntry(entry,classes);
        }
      }
    }
 catch (    ZipException e) {
      throw new RepositoryIndexException(""String_Node_Str"" + artifact.getFile(),e);
    }
catch (    IOException e) {
      throw new RepositoryIndexException(""String_Node_Str"",e);
    }
    doc=new Document();
    doc.add(new Field(MD5,md5,Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(JAR_NAME,artifactFile.getName(),Field.Store.YES,Field.Index.TOKENIZED));
    doc.add(new Field(JAR_DATE,DateTools.timeToString(artifactFile.lastModified(),DateTools.Resolution.SECOND),Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(JAR_SIZE,Long.toString(artifactFile.length()),Field.Store.YES,Field.Index.UN_TOKENIZED));
    doc.add(new Field(NAMES,classes.toString(),Field.Store.YES,Field.Index.TOKENIZED));
  }
  return doc;
}",0.9891984081864696
20774,"/** 
 * Method for testing the exceptions thrown by ArtifactRepositoryIndex
 * @throws Exception
 */
public void testIndexerExceptions() throws Exception {
  RepositoryIndexingFactory factory=(RepositoryIndexingFactory)lookup(RepositoryIndexingFactory.ROLE);
  Artifact artifact=createArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  try {
    File notIndexDir=new File(""String_Node_Str"");
    ArtifactRepositoryIndex indexer=factory.createArtifactRepositoryIndex(notIndexDir,repository);
    indexer.indexArtifact(artifact);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
  try {
    File notIndexDir=new File(""String_Node_Str"");
    ArtifactRepositoryIndex indexer=factory.createArtifactRepositoryIndex(notIndexDir,repository);
    indexer.indexArtifact(artifact);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
  artifact=createArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  try {
    File notIndexDir=new File(""String_Node_Str"");
    ArtifactRepositoryIndex indexer=factory.createArtifactRepositoryIndex(notIndexDir,repository);
    indexer.indexArtifact(artifact);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
  try {
    File notIndexDir=new File(""String_Node_Str"");
    ArtifactRepositoryIndex indexer=factory.createArtifactRepositoryIndex(notIndexDir,repository);
    indexer.indexArtifact(artifact);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
}","/** 
 * Method for testing the exceptions thrown by ArtifactRepositoryIndex
 * @throws Exception
 */
public void testIndexerExceptions() throws Exception {
  RepositoryIndexingFactory factory=(RepositoryIndexingFactory)lookup(RepositoryIndexingFactory.ROLE);
  try {
    File notIndexDir=new File(""String_Node_Str"");
    factory.createArtifactRepositoryIndex(notIndexDir,repository);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
  try {
    File notIndexDir=new File(""String_Node_Str"");
    factory.createArtifactRepositoryIndex(notIndexDir,repository);
    fail(""String_Node_Str"");
  }
 catch (  RepositoryIndexException e) {
    assertTrue(true);
  }
}",0.3552123552123552
20775,"/** 
 * Test the ArtifactRepositoryIndex using a single-phrase search.
 * @throws Exception
 */
public void testSearch() throws Exception {
  EclipseRepositoryIndex index=createTestIndex();
  IndexSearcher searcher=new IndexSearcher(index.getIndexPath().getAbsolutePath());
  try {
    QueryParser parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    Hits hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    Document doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(DateField.timeToString(artifactFileTime)));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",2,hits.length());
  }
  finally {
    searcher.close();
  }
}","/** 
 * Test the ArtifactRepositoryIndex using a single-phrase search.
 * @throws Exception
 */
public void testSearch() throws Exception {
  EclipseRepositoryIndex index=createTestIndex();
  IndexSearcher searcher=new IndexSearcher(index.getIndexPath().getAbsolutePath());
  try {
    QueryParser parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    Hits hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    Document doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(DateTools.timeToString(artifactFileTime,DateTools.Resolution.SECOND)));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",1,hits.length());
    doc=hits.doc(0);
    assertEquals(""String_Node_Str"",""String_Node_Str"",doc.get(""String_Node_Str""));
    parser=new QueryParser(""String_Node_Str"",index.getAnalyzer());
    hits=searcher.search(parser.parse(""String_Node_Str""));
    assertEquals(""String_Node_Str"",2,hits.length());
  }
  finally {
    searcher.close();
  }
}",0.9787556904400608
20776,"private void scheduleJobs(Configuration configuration) throws ParseException, SchedulerException {
  JobDetail jobDetail=new JobDetail(INDEXER_JOB,DISCOVERER_GROUP,RepositoryTaskJob.class);
  JobDataMap dataMap=new JobDataMap();
  dataMap.put(AbstractJob.LOGGER,getLogger());
  dataMap.put(RepositoryTaskJob.TASK_KEY,indexerTask);
  jobDetail.setJobDataMap(dataMap);
  getLogger().info(""String_Node_Str"" + configuration.getIndexerCronExpression());
  CronTrigger trigger=new CronTrigger(INDEXER_JOB + ""String_Node_Str"",DISCOVERER_GROUP,configuration.getIndexerCronExpression());
  scheduler.scheduleJob(jobDetail,trigger);
  try {
    indexerTask.executeNowIfNeeded();
  }
 catch (  TaskExecutionException e) {
    getLogger().error(""String_Node_Str"" + e.getMessage(),e);
  }
}","private void scheduleJobs(Configuration configuration) throws ParseException, SchedulerException {
  if (configuration.getIndexPath() != null) {
    JobDetail jobDetail=new JobDetail(INDEXER_JOB,DISCOVERER_GROUP,RepositoryTaskJob.class);
    JobDataMap dataMap=new JobDataMap();
    dataMap.put(AbstractJob.LOGGER,getLogger());
    dataMap.put(RepositoryTaskJob.TASK_KEY,indexerTask);
    jobDetail.setJobDataMap(dataMap);
    getLogger().info(""String_Node_Str"" + configuration.getIndexerCronExpression());
    CronTrigger trigger=new CronTrigger(INDEXER_JOB + ""String_Node_Str"",DISCOVERER_GROUP,configuration.getIndexerCronExpression());
    scheduler.scheduleJob(jobDetail,trigger);
    try {
      indexerTask.executeNowIfNeeded();
    }
 catch (    TaskExecutionException e) {
      getLogger().error(""String_Node_Str"" + e.getMessage(),e);
    }
  }
 else {
    getLogger().info(""String_Node_Str"");
  }
}",0.9222551928783382
20777,"/** 
 * Creates a Lucene Document from a RepositoryMetadata; used for index additions
 * @param repoMetadata
 * @return Lucene Document
 */
private Document createDocument(RepositoryMetadata repoMetadata){
  Document doc=new Document();
  doc.add(Field.Keyword(FLD_ID,(String)repoMetadata.getKey()));
  Metadata metadata=repoMetadata.getMetadata();
  doc.add(Field.Text(FLD_NAME,repository.pathOfRemoteRepositoryMetadata(repoMetadata)));
  Versioning versioning=metadata.getVersioning();
  if (versioning != null) {
    doc.add(Field.Text(FLD_LASTUPDATE,versioning.getLastUpdated()));
  }
 else {
    doc.add(Field.Text(FLD_LASTUPDATE,""String_Node_Str""));
  }
  List plugins=metadata.getPlugins();
  String pluginAppended=""String_Node_Str"";
  for (Iterator iter=plugins.iterator(); iter.hasNext(); ) {
    Plugin plugin=(Plugin)iter.next();
    if (plugin.getPrefix() != null && !""String_Node_Str"".equals(plugin.getPrefix())) {
      pluginAppended=plugin.getPrefix() + ""String_Node_Str"";
    }
  }
  doc.add(Field.Text(FLD_PLUGINPREFIX,pluginAppended));
  doc.add(Field.Text(FLD_GROUPID,metadata.getGroupId()));
  if (metadata.getArtifactId() != null && !""String_Node_Str"".equals(metadata.getArtifactId())) {
    doc.add(Field.Text(FLD_ARTIFACTID,metadata.getArtifactId()));
  }
 else {
    doc.add(Field.Text(FLD_ARTIFACTID,""String_Node_Str""));
  }
  if (metadata.getVersion() != null && !""String_Node_Str"".equals(metadata.getVersion())) {
    doc.add(Field.Text(FLD_VERSION,metadata.getVersion()));
  }
 else {
    doc.add(Field.Text(FLD_VERSION,""String_Node_Str""));
  }
  doc.add(Field.Text(FLD_DOCTYPE,METADATA));
  doc.add(Field.Keyword(FLD_PACKAGING,""String_Node_Str""));
  doc.add(Field.Text(FLD_SHA1,""String_Node_Str""));
  doc.add(Field.Text(FLD_MD5,""String_Node_Str""));
  doc.add(Field.Text(FLD_CLASSES,""String_Node_Str""));
  doc.add(Field.Text(FLD_PACKAGES,""String_Node_Str""));
  doc.add(Field.Text(FLD_FILES,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_LICENSE_URLS,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_DEPENDENCIES,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_BUILD,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_REPORT,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_ALL,""String_Node_Str""));
  return doc;
}","/** 
 * Creates a Lucene Document from a RepositoryMetadata; used for index additions
 * @param repoMetadata
 * @return Lucene Document
 */
private Document createDocument(RepositoryMetadata repoMetadata){
  Document doc=new Document();
  doc.add(Field.Keyword(FLD_ID,(String)repoMetadata.getKey()));
  Metadata metadata=repoMetadata.getMetadata();
  doc.add(Field.Text(FLD_NAME,repository.pathOfRemoteRepositoryMetadata(repoMetadata)));
  Versioning versioning=metadata.getVersioning();
  if (versioning != null) {
    doc.add(Field.Text(FLD_LASTUPDATE,versioning.getLastUpdated()));
  }
 else {
    doc.add(Field.Text(FLD_LASTUPDATE,""String_Node_Str""));
  }
  List plugins=metadata.getPlugins();
  String pluginAppended=""String_Node_Str"";
  for (Iterator iter=plugins.iterator(); iter.hasNext(); ) {
    Plugin plugin=(Plugin)iter.next();
    if (plugin.getPrefix() != null && !""String_Node_Str"".equals(plugin.getPrefix())) {
      pluginAppended=plugin.getPrefix() + ""String_Node_Str"";
    }
  }
  doc.add(Field.Text(FLD_PLUGINPREFIX,pluginAppended));
  if (metadata.getGroupId() != null) {
    doc.add(Field.Text(FLD_GROUPID,metadata.getGroupId()));
  }
 else {
    doc.add(Field.Text(FLD_GROUPID,""String_Node_Str""));
  }
  if (metadata.getArtifactId() != null) {
    doc.add(Field.Text(FLD_ARTIFACTID,metadata.getArtifactId()));
  }
 else {
    doc.add(Field.Text(FLD_ARTIFACTID,""String_Node_Str""));
  }
  if (metadata.getVersion() != null) {
    doc.add(Field.Text(FLD_VERSION,metadata.getVersion()));
  }
 else {
    doc.add(Field.Text(FLD_VERSION,""String_Node_Str""));
  }
  doc.add(Field.Text(FLD_DOCTYPE,METADATA));
  doc.add(Field.Keyword(FLD_PACKAGING,""String_Node_Str""));
  doc.add(Field.Text(FLD_SHA1,""String_Node_Str""));
  doc.add(Field.Text(FLD_MD5,""String_Node_Str""));
  doc.add(Field.Text(FLD_CLASSES,""String_Node_Str""));
  doc.add(Field.Text(FLD_PACKAGES,""String_Node_Str""));
  doc.add(Field.Text(FLD_FILES,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_LICENSE_URLS,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_DEPENDENCIES,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_BUILD,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_REPORT,""String_Node_Str""));
  doc.add(Field.Keyword(FLD_PLUGINS_ALL,""String_Node_Str""));
  return doc;
}",0.9515418502202644
20778,"public void setLayout(String layout){
  if (""String_Node_Str"".equalsIgnoreCase(layout)) {
    this.layout=new LegacyRepositoryLayout();
  }
 else {
    this.layout=new DefaultRepositoryLayout();
  }
}","public void setLayout(String layout){
  if (""String_Node_Str"".equalsIgnoreCase(layout)) {
    this.layout=new LegacyRepositoryLayout();
  }
 else {
    this.layout=new DefaultRepositoryLayout();
  }
  if (repoCache != null) {
    setRepositoryCachePath(repoCache.getBasedir());
  }
}",0.8240165631469979
20779,"private ProxyConfiguration getTestConfiguration() throws ComponentLookupException {
  ProxyConfiguration config=(ProxyConfiguration)container.lookup(ProxyConfiguration.ROLE);
  config.setRepositoryCachePath(""String_Node_Str"");
  ArtifactRepositoryLayout layout=new LegacyRepositoryLayout();
  File repo1File=getTestFile(""String_Node_Str"");
  ProxyRepository repo1=new ProxyRepository(""String_Node_Str"",""String_Node_Str"" + repo1File.getAbsolutePath(),layout);
  config.addRepository(repo1);
  return config;
}","private ProxyConfiguration getTestConfiguration() throws ComponentLookupException {
  ProxyConfiguration config=(ProxyConfiguration)container.lookup(ProxyConfiguration.ROLE);
  config.setRepositoryCachePath(getTestFile(""String_Node_Str"").getAbsolutePath());
  ArtifactRepositoryLayout layout=new LegacyRepositoryLayout();
  File repo1File=getTestFile(""String_Node_Str"");
  ProxyRepository repo1=new ProxyRepository(""String_Node_Str"",""String_Node_Str"" + repo1File.getAbsolutePath(),layout);
  config.addRepository(repo1);
  return config;
}",0.9703915950334288
20780,"public void testArtifactDownload() throws Exception {
  File file=proxy.get(""String_Node_Str"");
  assertTrue(""String_Node_Str"",file.exists());
  assertTrue(""String_Node_Str"",file.getAbsolutePath().startsWith(proxy.getConfiguration().getRepositoryCachePath()));
  file=proxy.get(""String_Node_Str"");
  try {
    file=proxy.get(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  ResourceDoesNotExistException e) {
    assertTrue(true);
  }
}","public void testArtifactDownload() throws Exception {
  File file=proxy.get(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + file.getAbsolutePath(),file.exists());
  assertTrue(""String_Node_Str"",file.getAbsolutePath().startsWith(proxy.getConfiguration().getRepositoryCachePath()));
  file=proxy.get(""String_Node_Str"");
  try {
    file=proxy.get(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  ResourceDoesNotExistException e) {
    assertTrue(true);
  }
}",0.8691891891891892
20781,"public static Artifact buildArtifact(String path,ArtifactFactory artifactFactory){
  List pathParts=new ArrayList();
  StringTokenizer st=new StringTokenizer(path,""String_Node_Str"");
  while (st.hasMoreTokens()) {
    pathParts.add(st.nextToken());
  }
  Collections.reverse(pathParts);
  Artifact artifact=null;
  if (pathParts.size() >= 4) {
    String filename=(String)pathParts.remove(0);
    String version=(String)pathParts.remove(0);
    String artifactId=(String)pathParts.remove(0);
    Collections.reverse(pathParts);
    String groupId=StringUtils.join(pathParts.iterator(),""String_Node_Str"");
    String remainingFilename=filename;
    if (!remainingFilename.startsWith(artifactId + ""String_Node_Str"")) {
      return null;
    }
 else {
      remainingFilename=remainingFilename.substring(artifactId.length() + 1);
      String classifier=null;
      String type;
      if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else       if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else       if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        classifier=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else {
        int index=remainingFilename.lastIndexOf(""String_Node_Str"");
        if (index < 0) {
          return null;
        }
 else {
          type=remainingFilename.substring(index + 1);
          remainingFilename=remainingFilename.substring(0,index);
        }
      }
      if (type != null) {
        Artifact result;
        if (classifier == null) {
          result=artifactFactory.createArtifact(groupId,artifactId,version,Artifact.SCOPE_RUNTIME,type);
        }
 else {
          result=artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);
        }
        if (result.isSnapshot()) {
          int classifierIndex=remainingFilename.indexOf('-',version.length() + 8);
          if (classifierIndex >= 0) {
            classifier=remainingFilename.substring(classifierIndex + 1);
            remainingFilename=remainingFilename.substring(0,classifierIndex);
            result=artifactFactory.createArtifactWithClassifier(groupId,artifactId,remainingFilename,type,classifier);
          }
 else {
            result=artifactFactory.createArtifact(groupId,artifactId,remainingFilename,Artifact.SCOPE_RUNTIME,type);
          }
          if (!result.isSnapshot()) {
            return null;
          }
 else           if (!result.getBaseVersion().equals(version)) {
            return null;
          }
 else {
            artifact=result;
          }
        }
 else         if (!remainingFilename.startsWith(version)) {
          return null;
        }
 else         if (!remainingFilename.equals(version)) {
          if (remainingFilename.charAt(version.length()) != '-') {
            return null;
          }
 else {
            classifier=remainingFilename.substring(version.length() + 1);
            artifact=artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);
          }
        }
 else {
          artifact=result;
        }
      }
    }
  }
 else   if (pathParts.size() == 3) {
    String filename=(String)pathParts.remove(0);
    int idx=filename.lastIndexOf('-');
    if (idx > 0) {
      String version=filename.substring(idx + 1);
      String artifactId=filename.substring(0,idx);
      String types=(String)pathParts.remove(0);
      String type=types.substring(0,types.length() - 1);
      String groupId=(String)pathParts.remove(0);
      artifact=artifactFactory.createArtifact(groupId,artifactId,version,Artifact.SCOPE_RUNTIME,type);
    }
  }
  return artifact;
}","public static Artifact buildArtifact(String path,ArtifactFactory artifactFactory){
  List pathParts=new ArrayList();
  StringTokenizer st=new StringTokenizer(path,""String_Node_Str"");
  while (st.hasMoreTokens()) {
    pathParts.add(st.nextToken());
  }
  Collections.reverse(pathParts);
  Artifact artifact=null;
  if (pathParts.size() >= 4) {
    String filename=(String)pathParts.remove(0);
    String version=(String)pathParts.remove(0);
    String artifactId=(String)pathParts.remove(0);
    Collections.reverse(pathParts);
    String groupId=StringUtils.join(pathParts.iterator(),""String_Node_Str"");
    String remainingFilename=filename;
    if (!remainingFilename.startsWith(artifactId + ""String_Node_Str"")) {
      return null;
    }
 else {
      remainingFilename=remainingFilename.substring(artifactId.length() + 1);
      String classifier=null;
      String type;
      if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else       if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else       if (remainingFilename.endsWith(""String_Node_Str"")) {
        type=""String_Node_Str"";
        classifier=""String_Node_Str"";
        remainingFilename=remainingFilename.substring(0,remainingFilename.length() - ""String_Node_Str"".length());
      }
 else {
        int index=remainingFilename.lastIndexOf(""String_Node_Str"");
        if (index < 0) {
          return null;
        }
 else {
          type=remainingFilename.substring(index + 1);
          remainingFilename=remainingFilename.substring(0,index);
        }
      }
      if (type != null) {
        Artifact result;
        if (classifier == null) {
          result=artifactFactory.createArtifact(groupId,artifactId,version,Artifact.SCOPE_RUNTIME,type);
        }
 else {
          result=artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);
        }
        if (result.isSnapshot()) {
          int classifierIndex=remainingFilename.indexOf('-',version.length() + 8);
          if (classifierIndex >= 0) {
            classifier=remainingFilename.substring(classifierIndex + 1);
            remainingFilename=remainingFilename.substring(0,classifierIndex);
            result=artifactFactory.createArtifactWithClassifier(groupId,artifactId,remainingFilename,type,classifier);
          }
 else {
            result=artifactFactory.createArtifact(groupId,artifactId,remainingFilename,Artifact.SCOPE_RUNTIME,type);
          }
          if (!result.isSnapshot()) {
            return null;
          }
 else           if (!result.getBaseVersion().equals(version)) {
            return null;
          }
 else {
            artifact=result;
          }
        }
 else         if (!remainingFilename.startsWith(version)) {
          return null;
        }
 else         if (!remainingFilename.equals(version)) {
          if (remainingFilename.charAt(version.length()) != '-') {
            return null;
          }
 else {
            classifier=remainingFilename.substring(version.length() + 1);
            artifact=artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);
          }
        }
 else {
          artifact=result;
        }
      }
    }
  }
 else   if (pathParts.size() == 3) {
    String filename=(String)pathParts.remove(0);
    int idx=filename.lastIndexOf('-');
    if (idx > 0) {
      String extension=filename.substring(filename.lastIndexOf('.') + 1);
      String version=filename.substring(idx + 1,filename.lastIndexOf('.'));
      String artifactId=filename.substring(0,idx);
      String types=(String)pathParts.remove(0);
      String type=types.substring(0,types.length() - 1);
      if (type.equals(extension)) {
        String groupId=(String)pathParts.remove(0);
        artifact=artifactFactory.createArtifact(groupId,artifactId,version,Artifact.SCOPE_RUNTIME,type);
      }
    }
  }
  return artifact;
}",0.9779126213592232
20782,"/** 
 * Create an index that will be used for testing. Indexing process: check if the object was already indexed [ checkIfIndexed(Object) ], open the index [ open() ], index the object [ index(Object) ], optimize the index [ optimize() ] and close the index [ close() ].
 * @throws Exception
 */
private EclipseRepositoryIndex createTestIndex() throws Exception {
  EclipseRepositoryIndex indexer=new EclipseRepositoryIndex(indexPath,repository,new DefaultDigester());
  Artifact artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  return indexer;
}","/** 
 * Create an index that will be used for testing. Indexing process: check if the object was already indexed [ checkIfIndexed(Object) ], open the index [ open() ], index the object [ index(Object) ], optimize the index [ optimize() ] and close the index [ close() ].
 * @throws Exception
 */
private EclipseRepositoryIndex createTestIndex() throws Exception {
  EclipseRepositoryIndex indexer=new EclipseRepositoryIndex(indexPath,repository,new DefaultDigester());
  Artifact artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  artifact.getFile().setLastModified(1137381114096L);
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  artifact=getArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  artifact.setFile(new File(repository.getBasedir(),repository.pathOf(artifact)));
  indexer.indexArtifact(artifact);
  indexer.optimize();
  indexer.close();
  return indexer;
}",0.9817073170731708
20783,"/** 
 * Validate the if the artifact exists in the specified location.
 * @param filename
 */
private boolean validateArtifactLocation(String filename){
  try {
    if (isLocal) {
      is=new FileInputStream(filename);
    }
 else {
      URL url=new URL(filename);
      is=url.openStream();
    }
    is.close();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}","/** 
 * Validate the if the artifact exists in the specified location.
 * @param filename
 */
private boolean validateArtifactLocation(String filename){
  return new File(filename).exists();
}",0.6434782608695652
20784,"/** 
 * Check whether the artifact is in its proper location. The location of the artifact is validated first against the groupId, artifactId and versionId in the specified model object (pom in the file system). Then unpack the artifact (jar file) and get the model (pom) included in the package. If a model exists inside the package, then check if the artifact's location is valid based on the location specified in the pom. Check if the both the location specified in the file system pom and in the pom included in the package is the same.
 * @param model      Represents the pom in the file system.
 * @param artifact
 * @param reporter
 * @param repository
 */
public void processArtifact(Model model,Artifact artifact,ArtifactReporter reporter,ArtifactRepository repository) throws ReportProcessorException {
  boolean fsPomLocation=false, pkgPomLocation=false;
  String repositoryUrl=""String_Node_Str"", modelArtifactLocation=""String_Node_Str"";
  if (!repository.getProtocol().equals(""String_Node_Str"")) {
    isLocal=false;
    repositoryUrl=repository.getUrl();
  }
 else {
    repositoryUrl=repository.getBasedir();
  }
  modelArtifactLocation=repositoryUrl + model.getGroupId() + ""String_Node_Str""+ model.getArtifactId()+ ""String_Node_Str""+ model.getVersion()+ ""String_Node_Str""+ model.getArtifactId()+ ""String_Node_Str""+ model.getVersion()+ ""String_Node_Str""+ model.getPackaging();
  fsPomLocation=validateArtifactLocation(modelArtifactLocation);
  String artifactLocation=repositoryUrl + artifact.getGroupId() + ""String_Node_Str""+ artifact.getArtifactId()+ ""String_Node_Str""+ artifact.getVersion()+ ""String_Node_Str""+ artifact.getArtifactId()+ ""String_Node_Str""+ artifact.getVersion()+ ""String_Node_Str""+ artifact.getType();
  Model extractedModel=readArtifactModel(artifactLocation,artifact.getGroupId(),artifact.getArtifactId());
  if (extractedModel != null) {
    String pkgPomArtifactLocation=repositoryUrl + extractedModel.getGroupId() + ""String_Node_Str""+ extractedModel.getArtifactId()+ ""String_Node_Str""+ extractedModel.getVersion()+ ""String_Node_Str""+ extractedModel.getArtifactId()+ ""String_Node_Str""+ extractedModel.getVersion()+ ""String_Node_Str""+ extractedModel.getPackaging();
    pkgPomLocation=validateArtifactLocation(pkgPomArtifactLocation);
    if (fsPomLocation == true && pkgPomLocation == true) {
      reporter.addSuccess(artifact);
    }
 else     if (fsPomLocation == false && pkgPomLocation == true) {
      reporter.addFailure(artifact,""String_Node_Str"");
    }
 else     if (fsPomLocation == true && pkgPomLocation == false) {
      reporter.addFailure(artifact,""String_Node_Str"");
    }
 else     if (fsPomLocation == false && pkgPomLocation == false) {
      reporter.addFailure(artifact,""String_Node_Str"");
    }
  }
 else {
    if (fsPomLocation) {
      reporter.addSuccess(artifact);
    }
 else {
      reporter.addFailure(artifact,""String_Node_Str"");
    }
  }
}","/** 
 * Check whether the artifact is in its proper location. The location of the artifact is validated first against the groupId, artifactId and versionId in the specified model object (pom in the file system). Then unpack the artifact (jar file) and get the model (pom) included in the package. If a model exists inside the package, then check if the artifact's location is valid based on the location specified in the pom. Check if the both the location specified in the file system pom and in the pom included in the package is the same.
 * @param model      Represents the pom in the file system.
 * @param artifact
 * @param reporter
 * @param repository
 */
public void processArtifact(Model model,Artifact artifact,ArtifactReporter reporter,ArtifactRepository repository) throws ReportProcessorException {
  if (!""String_Node_Str"".equals(repository.getProtocol())) {
    throw new UnsupportedOperationException(""String_Node_Str"" + repository.getUrl() + ""String_Node_Str"");
  }
  Artifact modelArtifact=artifactFactory.createBuildArtifact(model.getGroupId(),model.getArtifactId(),model.getVersion(),model.getPackaging());
  boolean failed=false;
  String modelPath=repository.pathOf(modelArtifact);
  String artifactPath=repository.pathOf(artifact);
  if (modelPath.equals(artifactPath)) {
    File file=new File(repository.getBasedir(),artifactPath);
    if (file.exists()) {
      Model extractedModel=readArtifactModel(file,artifact.getGroupId(),artifact.getArtifactId());
      if (extractedModel != null) {
        Artifact extractedArtifact=artifactFactory.createBuildArtifact(extractedModel.getGroupId(),extractedModel.getArtifactId(),extractedModel.getVersion(),extractedModel.getPackaging());
        if (!repository.pathOf(extractedArtifact).equals(artifactPath)) {
          reporter.addFailure(artifact,""String_Node_Str"");
          failed=true;
        }
      }
    }
 else {
      reporter.addFailure(artifact,""String_Node_Str"");
      failed=true;
    }
  }
 else {
    reporter.addFailure(artifact,""String_Node_Str"");
    failed=true;
  }
  if (!failed) {
    reporter.addSuccess(artifact);
  }
}",0.4675944333996024
20785,"/** 
 * Extract the contents of the artifact/jar file.
 * @param filename
 * @param groupId
 * @param artifactId
 */
private Model readArtifactModel(String filename,String groupId,String artifactId) throws ReportProcessorException {
  Model modelObj=null;
  JarFile jar=null;
  try {
    jar=new JarFile(filename);
    JarEntry entry=jar.getJarEntry(""String_Node_Str"" + groupId + ""String_Node_Str""+ artifactId+ ""String_Node_Str"");
    if (entry != null) {
      InputStream entryStream=jar.getInputStream(entry);
      Reader isReader=new InputStreamReader(entryStream);
      try {
        MavenXpp3Reader pomReader=new MavenXpp3Reader();
        modelObj=pomReader.read(isReader);
      }
  finally {
        IOUtil.close(isReader);
      }
    }
  }
 catch (  IOException e) {
    throw new ReportProcessorException(""String_Node_Str"",e);
  }
catch (  XmlPullParserException e) {
    throw new ReportProcessorException(""String_Node_Str"",e);
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return modelObj;
}","/** 
 * Extract the contents of the artifact/jar file.
 * @param file
 * @param groupId
 * @param artifactId
 */
private Model readArtifactModel(File file,String groupId,String artifactId) throws ReportProcessorException {
  Model model=null;
  JarFile jar=null;
  try {
    jar=new JarFile(file);
    JarEntry entry=jar.getJarEntry(""String_Node_Str"" + groupId + ""String_Node_Str""+ artifactId+ ""String_Node_Str"");
    if (entry != null) {
      model=readModel(jar.getInputStream(entry));
    }
  }
 catch (  IOException e) {
    throw new ReportProcessorException(""String_Node_Str"",e);
  }
catch (  XmlPullParserException e) {
    throw new ReportProcessorException(""String_Node_Str"",e);
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return model;
}",0.7896103896103897
20786,"void processMetadata(RepositoryMetadata metadata,ArtifactReporter reporter);","void processMetadata(RepositoryMetadata metadata,ArtifactRepository repository,ArtifactReporter reporter);",0.8351648351648352
20787,"public void afterJob(JobExecution jobExecution){
  StringBuilder protocol=new StringBuilder();
  protocol.append(""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getJobInstance().getJobName() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getStartTime() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getEndTime() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getExitStatus().getExitCode() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getExitStatus().getExitDescription() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getStatus() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"");
  protocol.append(""String_Node_Str"");
  JobParameters jp=jobExecution.getJobParameters();
  for (Iterator<Entry<String,JobParameter>> iter=jp.getParameters().entrySet().iterator(); iter.hasNext(); ) {
    Entry<String,JobParameter> entry=iter.next();
    protocol.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
  }
  protocol.append(""String_Node_Str"");
  for (  StepExecution stepExecution : jobExecution.getStepExecutions()) {
    protocol.append(""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getStepName() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getReadCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getWriteCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getCommitCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getSkipCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getRollbackCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getFilterCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"");
  }
  LOGGER.info(protocol.toString());
}","public void afterJob(JobExecution jobExecution){
  StringBuilder protocol=new StringBuilder();
  protocol.append(""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getJobInstance().getJobName() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getStartTime() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getEndTime() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getExitStatus().getExitCode() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getExitStatus().getExitDescription() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"" + jobExecution.getStatus() + ""String_Node_Str"");
  protocol.append(""String_Node_Str"");
  for (  Entry<String,Object> entry : jobExecution.getExecutionContext().entrySet()) {
    protocol.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
  }
  protocol.append(""String_Node_Str"");
  protocol.append(""String_Node_Str"");
  JobParameters jp=jobExecution.getJobParameters();
  for (Iterator<Entry<String,JobParameter>> iter=jp.getParameters().entrySet().iterator(); iter.hasNext(); ) {
    Entry<String,JobParameter> entry=iter.next();
    protocol.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
  }
  protocol.append(""String_Node_Str"");
  for (  StepExecution stepExecution : jobExecution.getStepExecutions()) {
    protocol.append(""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getStepName() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getReadCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getWriteCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getCommitCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getSkipCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getRollbackCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"" + stepExecution.getFilterCount() + ""String_Node_Str"");
    protocol.append(""String_Node_Str"");
    for (    Entry<String,Object> entry : stepExecution.getExecutionContext().entrySet()) {
      protocol.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
    }
    protocol.append(""String_Node_Str"");
  }
  LOGGER.info(protocol.toString());
}",0.8891861761426979
20788,"private List<RichGauge> exportBatchGauges(JobExecution jobExecution){
  String jobExecutionIdentifier=MDC.get(LoggingListener.JOB_EXECUTION_IDENTIFIER);
  List<RichGauge> gauges=new ArrayList<RichGauge>();
  for (  RichGauge gauge : richGaugeRepository.findAll()) {
    if (gauge.getName().startsWith(""String_Node_Str"" + jobExecutionIdentifier)) {
      jobExecution.getExecutionContext().put(""String_Node_Str"" + gauge.getName().substring((""String_Node_Str"" + jobExecutionIdentifier).length()),gauge);
      gauges.add(gauge);
      if (deleteMetricsOnJobFinish) {
        richGaugeRepository.reset(gauge.getName());
      }
    }
  }
  return gauges;
}","private List<RichGauge> exportBatchGauges(JobExecution jobExecution){
  String jobExecutionIdentifier=MDC.get(LoggingListener.JOB_EXECUTION_IDENTIFIER);
  List<RichGauge> gauges=new ArrayList<RichGauge>();
  for (  RichGauge gauge : richGaugeRepository.findAll()) {
    if (gauge.getName().startsWith(""String_Node_Str"" + jobExecutionIdentifier)) {
      jobExecution.getExecutionContext().put(gauge.getName().substring((""String_Node_Str"" + jobExecutionIdentifier).length() + 1),gauge);
      gauges.add(gauge);
      if (deleteMetricsOnJobFinish) {
        richGaugeRepository.reset(gauge.getName());
      }
    }
  }
  return gauges;
}",0.6821705426356589
20789,"private List<Metric<?>> exportBatchMetrics(JobExecution jobExecution){
  String jobExecutionIdentifier=MDC.get(LoggingListener.JOB_EXECUTION_IDENTIFIER);
  List<Metric<?>> metrics=new ArrayList<Metric<?>>();
  for (  Metric<?> metric : metricRepository.findAll()) {
    if (metric.getName().startsWith(""String_Node_Str"" + jobExecutionIdentifier)) {
      if (metric.getValue() instanceof Long) {
        String key=""String_Node_Str"" + metric.getName().substring((""String_Node_Str"" + jobExecutionIdentifier).length());
        Long newValue=(Long)metric.getValue();
        if (jobExecution.getExecutionContext().containsKey(key)) {
          Long oldValue=jobExecution.getExecutionContext().getLong(key);
          newValue+=oldValue;
          metric=metric.set(newValue);
        }
        jobExecution.getExecutionContext().putLong(key,newValue);
      }
      metrics.add(metric);
      if (deleteMetricsOnJobFinish) {
        metricRepository.reset(metric.getName());
      }
    }
  }
  return metrics;
}","private List<Metric<?>> exportBatchMetrics(JobExecution jobExecution){
  String jobExecutionIdentifier=MDC.get(LoggingListener.JOB_EXECUTION_IDENTIFIER);
  List<Metric<?>> metrics=new ArrayList<Metric<?>>();
  for (  Metric<?> metric : metricRepository.findAll()) {
    if (metric.getName().startsWith(""String_Node_Str"" + jobExecutionIdentifier)) {
      if (metric.getValue() instanceof Long) {
        String key=metric.getName().substring((""String_Node_Str"" + jobExecutionIdentifier).length() + 1);
        Long newValue=(Long)metric.getValue();
        if (jobExecution.getExecutionContext().containsKey(key)) {
          Long oldValue=jobExecution.getExecutionContext().getLong(key);
          newValue+=oldValue;
          metric=metric.set(newValue);
        }
        jobExecution.getExecutionContext().putLong(key,newValue);
      }
      metrics.add(metric);
      if (deleteMetricsOnJobFinish) {
        metricRepository.reset(metric.getName());
      }
    }
  }
  return metrics;
}",0.9321357285429142
20790,"@Override public void afterCompletion(int status){
  if (status == STATUS_COMMITTED) {
    CounterContainer currentCounterContainer=counterContainer.get();
    for (    String incrementation : currentCounterContainer.incrementations) {
      delegate.increment(incrementation);
    }
    for (    String decrementation : currentCounterContainer.decrementations) {
      delegate.decrement(decrementation);
    }
    for (    String reset : currentCounterContainer.resets) {
      delegate.reset(reset);
    }
  }
  counterContainer.remove();
}","@Override public void afterCompletion(int status){
  if (status == STATUS_COMMITTED) {
    CounterContainer currentCounterContainer=counterContainer.get();
    for (    String incrementation : currentCounterContainer.incrementations) {
      delegate.increment(incrementation);
    }
    for (    String decrementation : currentCounterContainer.decrementations) {
      delegate.decrement(decrementation);
    }
    for (    String reset : currentCounterContainer.resets) {
      delegate.reset(reset);
    }
  }
  counterContainer.remove();
  if (TransactionSynchronizationManager.hasResource(serviceKey)) {
    TransactionSynchronizationManager.unbindResource(serviceKey);
  }
}",0.8879803761242846
20791,"public String process(String item) throws Exception {
  log.info(item);
  businessMetrics.incrementNonTransactional(""String_Node_Str"");
  return item;
}","public String process(String item) throws Exception {
  log.info(item);
  businessMetrics.increment(""String_Node_Str"");
  return item;
}",0.9444444444444444
20792,"@Test public void testRunJob() throws InterruptedException {
  Long executionId=restTemplate.postForObject(""String_Node_Str"",""String_Node_Str"",Long.class);
  while (!restTemplate.getForObject(""String_Node_Str"",String.class,executionId).equals(""String_Node_Str"")) {
    Thread.sleep(1000);
  }
  String log=restTemplate.getForObject(""String_Node_Str"",String.class,executionId);
  assertThat(log.length() > 20,is(true));
  JobExecution jobExecution=jobExplorer.getJobExecution(executionId);
  assertThat(jobExecution.getStatus(),is(BatchStatus.COMPLETED));
  String jobExecutionString=restTemplate.getForObject(""String_Node_Str"",String.class,executionId);
  assertThat(jobExecutionString.contains(""String_Node_Str""),is(true));
  assertThat((Long)metricRepository.findOne(""String_Node_Str"").getValue(),is(2l));
}","@Test public void testRunJob() throws InterruptedException {
  Long executionId=restTemplate.postForObject(""String_Node_Str"",""String_Node_Str"",Long.class);
  while (!restTemplate.getForObject(""String_Node_Str"",String.class,executionId).equals(""String_Node_Str"")) {
    Thread.sleep(1000);
  }
  String log=restTemplate.getForObject(""String_Node_Str"",String.class,executionId);
  assertThat(log.length() > 20,is(true));
  JobExecution jobExecution=jobExplorer.getJobExecution(executionId);
  assertThat(jobExecution.getStatus(),is(BatchStatus.COMPLETED));
  String jobExecutionString=restTemplate.getForObject(""String_Node_Str"",String.class,executionId);
  assertThat(jobExecutionString.contains(""String_Node_Str""),is(true));
  assertThat((Long)metricRepository.findOne(""String_Node_Str"").getValue(),is(7l));
}",0.9987639060568604
20793,"@Override public void run(){
  for (  RecognitionListener l : listeners)   l.onVadStateChanged(state);
}","@Override public void run(){
  RecognitionListener[] emptyArray=new RecognitionListener[0];
  for (  RecognitionListener listener : listeners.toArray(emptyArray))   listener.onVadStateChanged(state);
}",0.6491803278688525
20794,"public void removeListener(RecognitionListener listener){
  listeners.remove(listener);
}","public void removeListener(RecognitionListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}",0.8436018957345972
20795,"public void addListener(RecognitionListener listener){
  listeners.add(listener);
}","public void addListener(RecognitionListener listener){
synchronized (listeners) {
    listeners.add(listener);
  }
}",0.8341708542713567
20796,"/** 
 * Constructor.
 */
public LocationServiceImpl(){
  _telnet=new TelnetWrapper();
}","/** 
 * Constructor.
 */
public LocationServiceImpl(){
  _telnet=new TelnetWrapper();
  final String home=System.getProperty(""String_Node_Str"");
  final File authTokenFile=new File(home,""String_Node_Str"");
  try {
    _emulator_console_auth_token=new Scanner(authTokenFile).useDelimiter(""String_Node_Str"").next();
    logger.info(""String_Node_Str"" + _emulator_console_auth_token);
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,""String_Node_Str"" + authTokenFile.getAbsolutePath(),ioe);
  }
}",0.2939189189189189
20797,"/** 
 * {@inheritDoc}
 */
public void setPort(final int port) throws IOException {
  _telnet.disconnect();
  _telnet.connect(""String_Node_Str"",port);
}","/** 
 * {@inheritDoc}
 */
public void setPort(final int port) throws IOException {
  _telnet.disconnect();
  logger.info(""String_Node_Str"" + port);
  _telnet.connect(""String_Node_Str"",port);
  if (_emulator_console_auth_token == null) {
    logger.info(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"" + _emulator_console_auth_token);
    _telnet.send(""String_Node_Str"" + _emulator_console_auth_token);
  }
}",0.5243055555555556
20798,"@Override public void playMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final boolean shouldLoop,final LaunchListener listener){
  ConnectionListener connectionListener=new ConnectionListener(){
    @Override public void onConnected(){
      MediaMetadata mMediaMetadata=new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
      mMediaMetadata.putString(MediaMetadata.KEY_TITLE,title);
      mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,description);
      if (iconSrc != null) {
        Uri iconUri=Uri.parse(iconSrc);
        WebImage image=new WebImage(iconUri,100,100);
        mMediaMetadata.addImage(image);
      }
      MediaInfo mediaInfo=new MediaInfo.Builder(url).setContentType(mimeType).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setMetadata(mMediaMetadata).build();
      Cast.CastApi.launchApplication(mApiClient,CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID,false).setResultCallback(new ApplicationConnectionResultCallback(mediaInfo,listener));
    }
  }
;
  runCommand(connectionListener);
}","@Override public void playMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final boolean shouldLoop,final LaunchListener listener){
  ConnectionListener connectionListener=new ConnectionListener(){
    @Override public void onConnected(){
      String mediaAppId=CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID;
      MediaMetadata mMediaMetadata=new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
      mMediaMetadata.putString(MediaMetadata.KEY_TITLE,title);
      mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,description);
      if (iconSrc != null) {
        Uri iconUri=Uri.parse(iconSrc);
        WebImage image=new WebImage(iconUri,100,100);
        mMediaMetadata.addImage(image);
      }
      MediaInfo mediaInfo=new MediaInfo.Builder(url).setContentType(mimeType).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setMetadata(mMediaMetadata).build();
      boolean relaunchIfRunning=false;
      if (Cast.CastApi.getApplicationStatus(mApiClient) != null && mediaAppId.equals(currentAppId)) {
        relaunchIfRunning=false;
      }
 else {
        relaunchIfRunning=true;
      }
      Cast.CastApi.launchApplication(mApiClient,mediaAppId,relaunchIfRunning).setResultCallback(new ApplicationConnectionResultCallback(mediaInfo,listener));
    }
  }
;
  runCommand(connectionListener);
}",0.7230769230769231
20799,"@Override public void displayImage(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  ConnectionListener connectionListener=new ConnectionListener(){
    @Override public void onConnected(){
      MediaMetadata mMediaMetadata=new MediaMetadata(MediaMetadata.MEDIA_TYPE_PHOTO);
      mMediaMetadata.putString(MediaMetadata.KEY_TITLE,title);
      mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,description);
      if (iconSrc != null) {
        Uri iconUri=Uri.parse(iconSrc);
        WebImage image=new WebImage(iconUri,100,100);
        mMediaMetadata.addImage(image);
      }
      MediaInfo mediaInfo=new MediaInfo.Builder(url).setContentType(mimeType).setStreamType(MediaInfo.STREAM_TYPE_NONE).setMetadata(mMediaMetadata).build();
      Cast.CastApi.launchApplication(mApiClient,CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID,false).setResultCallback(new ApplicationConnectionResultCallback(mediaInfo,listener));
    }
  }
;
  runCommand(connectionListener);
}","@Override public void displayImage(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  ConnectionListener connectionListener=new ConnectionListener(){
    @Override public void onConnected(){
      String mediaAppId=CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID;
      MediaMetadata mMediaMetadata=new MediaMetadata(MediaMetadata.MEDIA_TYPE_PHOTO);
      mMediaMetadata.putString(MediaMetadata.KEY_TITLE,title);
      mMediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,description);
      if (iconSrc != null) {
        Uri iconUri=Uri.parse(iconSrc);
        WebImage image=new WebImage(iconUri,100,100);
        mMediaMetadata.addImage(image);
      }
      MediaInfo mediaInfo=new MediaInfo.Builder(url).setContentType(mimeType).setStreamType(MediaInfo.STREAM_TYPE_NONE).setMetadata(mMediaMetadata).build();
      boolean relaunchIfRunning=false;
      if (Cast.CastApi.getApplicationStatus(mApiClient) != null && mediaAppId.equals(currentAppId)) {
        relaunchIfRunning=false;
      }
 else {
        relaunchIfRunning=true;
      }
      Cast.CastApi.launchApplication(mApiClient,mediaAppId,relaunchIfRunning).setResultCallback(new ApplicationConnectionResultCallback(mediaInfo,listener));
    }
  }
;
  runCommand(connectionListener);
}",0.71712158808933
20800,"private void connect(final Boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (socket != null && socket.getState() == WebOSTVServiceSocketClient.State.CONNECTING) {
    if (connectionListener != null)     ;
    connectionListener.onError(new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  if (isConnected()) {
    if (connectionListener != null)     connectionListener.onSuccess(null);
    return;
  }
  mConnectionListener=new ResponseListener<ServiceCommand<ResponseListener<Object>>>(){
    @Override public void onError(    ServiceCommandError error){
      if (socket != null)       disconnectFromWebApp();
      if (connectionListener != null) {
        if (error == null)         error=new ServiceCommandError(0,""String_Node_Str"",null);
        connectionListener.onError(error);
      }
    }
    @Override public void onSuccess(    ServiceCommand<ResponseListener<Object>> object){
      ResponseListener<Object> finalConnectionListener=new ResponseListener<Object>(){
        @Override public void onError(        ServiceCommandError error){
          disconnectFromWebApp();
          if (mConnectionListener != null)           mConnectionListener.onError(error);
        }
        @Override public void onSuccess(        Object object){
          connected=true;
          if (connectionListener != null)           connectionListener.onSuccess(object);
        }
      }
;
      service.connectToWebApp(WebOSWebAppSession.this,joinOnly,finalConnectionListener);
    }
  }
;
  if (socket != null) {
    if (socket.isConnected())     mConnectionListener.onSuccess(null);
 else     socket.connect();
  }
 else {
    socket=new WebOSTVServiceSocketClient(service,WebOSTVServiceSocketClient.getURI(service));
    socket.setListener(mSocketListener);
    socket.connect();
  }
}","private void connect(final Boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (socket != null && socket.getState() == WebOSTVServiceSocketClient.State.CONNECTING) {
    if (connectionListener != null)     ;
    connectionListener.onError(new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  if (isConnected()) {
    if (connectionListener != null)     connectionListener.onSuccess(null);
    return;
  }
  mConnectionListener=new ResponseListener<ServiceCommand<ResponseListener<Object>>>(){
    @Override public void onError(    ServiceCommandError error){
      if (socket != null)       disconnectFromWebApp();
      if (connectionListener != null) {
        if (error == null)         error=new ServiceCommandError(0,""String_Node_Str"",null);
        connectionListener.onError(error);
      }
    }
    @Override public void onSuccess(    ServiceCommand<ResponseListener<Object>> object){
      ResponseListener<Object> finalConnectionListener=new ResponseListener<Object>(){
        @Override public void onError(        ServiceCommandError error){
          disconnectFromWebApp();
          if (connectionListener != null)           connectionListener.onError(error);
        }
        @Override public void onSuccess(        Object object){
          connected=true;
          if (connectionListener != null)           connectionListener.onSuccess(object);
        }
      }
;
      service.connectToWebApp(WebOSWebAppSession.this,joinOnly,finalConnectionListener);
    }
  }
;
  if (socket != null) {
    if (socket.isConnected())     mConnectionListener.onSuccess(null);
 else     socket.connect();
  }
 else {
    socket=new WebOSTVServiceSocketClient(service,WebOSTVServiceSocketClient.getURI(service));
    socket.setListener(mSocketListener);
    socket.connect();
  }
}",0.9983561643835616
20801,"private void sendP2PMessage(Object message,final ResponseListener<Object> listener){
  JSONObject _payload=new JSONObject();
  try {
    _payload.put(""String_Node_Str"",""String_Node_Str"");
    _payload.put(""String_Node_Str"",getFullAppId());
    _payload.put(""String_Node_Str"",message);
  }
 catch (  JSONException ex) {
  }
  final JSONObject payload=_payload;
  if (isConnected()) {
    socket.sendMessage(payload,null);
    if (listener != null)     listener.onSuccess(null);
  }
 else {
    ResponseListener<Object> joinListener=new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
        if (listener != null)         listener.onError(error);
      }
      @Override public void onSuccess(      Object object){
        socket.sendMessage(payload,null);
        if (listener != null)         listener.onSuccess(null);
      }
    }
;
    join(joinListener);
  }
}","private void sendP2PMessage(final Object message,final ResponseListener<Object> listener){
  JSONObject _payload=new JSONObject();
  try {
    _payload.put(""String_Node_Str"",""String_Node_Str"");
    _payload.put(""String_Node_Str"",getFullAppId());
    _payload.put(""String_Node_Str"",message);
  }
 catch (  JSONException ex) {
  }
  final JSONObject payload=_payload;
  if (isConnected()) {
    socket.sendMessage(payload,null);
    if (listener != null)     listener.onSuccess(null);
  }
 else {
    ResponseListener<Object> connectListener=new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
        if (listener != null)         listener.onError(error);
      }
      @Override public void onSuccess(      Object object){
        sendP2PMessage(message,listener);
      }
    }
;
    connect(connectListener);
  }
}",0.9174620999438516
20802,"@Override public void displayImage(final String url,final String mimeType,final String title,final String description,final String iconSrc,final MediaPlayer.LaunchListener listener){
  int requestIdNumber=getNextId();
  final String requestId=String.format(Locale.US,""String_Node_Str"",requestIdNumber);
  JSONObject message=null;
  try {
    message=new JSONObject(){
{
        putOpt(""String_Node_Str"",namespaceKey + ""String_Node_Str"");
        putOpt(""String_Node_Str"",new JSONObject(){
{
            putOpt(""String_Node_Str"",""String_Node_Str"");
            putOpt(""String_Node_Str"",url);
            putOpt(""String_Node_Str"",iconSrc);
            putOpt(""String_Node_Str"",title);
            putOpt(""String_Node_Str"",description);
            putOpt(""String_Node_Str"",mimeType);
            putOpt(""String_Node_Str"",requestId);
          }
        }
);
      }
    }
;
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> response=new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
      Util.postSuccess(listener,new MediaLaunchObject(launchSession,getMediaControl()));
    }
  }
;
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(null,null,null,response);
  mActiveCommands.put(requestId,command);
  sendMessage(message,new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
    }
  }
);
}","@Override public void displayImage(final String url,final String mimeType,final String title,final String description,final String iconSrc,final MediaPlayer.LaunchListener listener){
  int requestIdNumber=getNextId();
  final String requestId=String.format(Locale.US,""String_Node_Str"",requestIdNumber);
  JSONObject message=null;
  try {
    message=new JSONObject(){
{
        putOpt(""String_Node_Str"",namespaceKey + ""String_Node_Str"");
        putOpt(""String_Node_Str"",new JSONObject(){
{
            putOpt(""String_Node_Str"",""String_Node_Str"");
            putOpt(""String_Node_Str"",url);
            putOpt(""String_Node_Str"",iconSrc);
            putOpt(""String_Node_Str"",title);
            putOpt(""String_Node_Str"",description);
            putOpt(""String_Node_Str"",mimeType);
            putOpt(""String_Node_Str"",requestId);
          }
        }
);
      }
    }
;
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> response=new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
      Util.postSuccess(listener,new MediaLaunchObject(launchSession,getMediaControl()));
    }
  }
;
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(socket,null,null,response);
  mActiveCommands.put(requestId,command);
  sendP2PMessage(message,new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
    }
  }
);
}",0.9961066187481282
20803,"@Override public Boolean onReceiveMessage(JSONObject payload){
  String type=payload.optString(""String_Node_Str"");
  if (""String_Node_Str"".equals(type)) {
    String fromAppId=null;
    fromAppId=payload.optString(""String_Node_Str"");
    if (!fromAppId.equalsIgnoreCase(getFullAppId()))     return false;
    Object message=payload.opt(""String_Node_Str"");
    if (message instanceof JSONObject) {
      JSONObject messageJSON=(JSONObject)message;
      String contentType=messageJSON.optString(""String_Node_Str"");
      Integer contentTypeIndex=contentType.lastIndexOf(""String_Node_Str"");
      if (contentType != null && contentTypeIndex >= 0) {
        String payloadKey=contentType.substring(contentTypeIndex);
        if (payloadKey == null || payloadKey.length() == 0)         return false;
        JSONObject messagePayload=messageJSON.optJSONObject(""String_Node_Str"");
        if (messagePayload == null)         return false;
        if (payloadKey.equalsIgnoreCase(""String_Node_Str""))         handleMediaEvent(messagePayload);
 else         if (payloadKey.equalsIgnoreCase(""String_Node_Str""))         handleMediaCommandResponse(messagePayload);
      }
 else {
        handleMessage(messageJSON);
      }
    }
 else     if (message instanceof String) {
      handleMessage(message);
    }
    return false;
  }
  return true;
}","@Override public Boolean onReceiveMessage(JSONObject payload){
  String type=payload.optString(""String_Node_Str"");
  if (""String_Node_Str"".equals(type)) {
    String fromAppId=null;
    fromAppId=payload.optString(""String_Node_Str"");
    if (!fromAppId.equalsIgnoreCase(getFullAppId()))     return false;
    Object message=payload.opt(""String_Node_Str"");
    if (message instanceof JSONObject) {
      JSONObject messageJSON=(JSONObject)message;
      String contentType=messageJSON.optString(""String_Node_Str"");
      Integer contentTypeIndex=contentType.indexOf(""String_Node_Str"");
      if (contentType != null && contentTypeIndex >= 0) {
        String payloadKey=contentType.split(""String_Node_Str"")[1];
        if (payloadKey == null || payloadKey.length() == 0)         return false;
        JSONObject messagePayload=messageJSON.optJSONObject(payloadKey);
        if (messagePayload == null)         return false;
        if (payloadKey.equalsIgnoreCase(""String_Node_Str""))         handleMediaEvent(messagePayload);
 else         if (payloadKey.equalsIgnoreCase(""String_Node_Str""))         handleMediaCommandResponse(messagePayload);
      }
 else {
        handleMessage(messageJSON);
      }
    }
 else     if (message instanceof String) {
      handleMessage(message);
    }
    return false;
  }
  return true;
}",0.9680811115283516
20804,"public void disconnectFromWebApp(final WebOSWebAppSession webAppSession){
  JSONObject rawData=(JSONObject)webAppSession.launchSession.getRawData();
  String appId=null;
  try {
    appId=rawData.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
  }
  if (appId == null) {
    Enumeration<String> enumeration=mAppToAppMessageListeners.keys();
    while (enumeration.hasMoreElements()) {
      String key=enumeration.nextElement();
      if (key.contains(webAppSession.launchSession.getAppId())) {
        appId=key;
        break;
      }
    }
  }
  if (appId != null)   mAppToAppMessageListeners.remove(appId);
  ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.remove(appId);
  if (connectionSubscription != null) {
    if (!this.serviceDescription.getVersion().contains(""String_Node_Str"")) {
      connectionSubscription.unsubscribe();
    }
  }
  if (webAppSession.getWebAppSessionListener() != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
      }
    }
);
  }
}","public void disconnectFromWebApp(final WebOSWebAppSession webAppSession){
  JSONObject rawData=(JSONObject)webAppSession.launchSession.getRawData();
  String appId=null;
  try {
    appId=rawData.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
  }
  if (appId == null && mAppToAppMessageListeners != null) {
    Enumeration<String> enumeration=mAppToAppMessageListeners.keys();
    while (enumeration.hasMoreElements()) {
      String key=enumeration.nextElement();
      if (key.contains(webAppSession.launchSession.getAppId())) {
        appId=key;
        break;
      }
    }
  }
  if (appId != null)   mAppToAppMessageListeners.remove(appId);
  ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.remove(appId);
  if (connectionSubscription != null) {
    if (!this.serviceDescription.getVersion().contains(""String_Node_Str"")) {
      connectionSubscription.unsubscribe();
    }
  }
  if (webAppSession.getWebAppSessionListener() != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
      }
    }
);
  }
}",0.9841133533705452
20805,"protected void reportConnected(boolean ready){
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onConnectionSuccess(DeviceService.this);
    }
  }
);
}","protected void reportConnected(boolean ready){
  if (listener == null)   return;
  if (listener instanceof ConnectableDevice)   listener.onConnectionSuccess(this);
 else {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        if (listener != null)         listener.onConnectionSuccess(DeviceService.this);
      }
    }
);
  }
}",0.7477638640429338
20806,"public void sendSearch(){
  List<String> killKeys=new ArrayList<String>();
  long killPoint=new Date().getTime() - SSDP_TIMEOUT;
  for (  String key : foundServices.keySet()) {
    ServiceDescription service=foundServices.get(key);
    if (service.getLastDetection() < killPoint) {
      killKeys.add(key);
    }
  }
  for (  String key : killKeys) {
    final ServiceDescription service=foundServices.get(key);
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        DiscoveryProviderListener listener : serviceListeners) {
          listener.onServiceRemoved(SSDPDiscoveryProvider.this,service);
        }
      }
    }
);
    foundServices.remove(key);
  }
  for (  JSONObject searchTarget : serviceFilters) {
    SSDPSearchMsg search=null;
    try {
      search=new SSDPSearchMsg(searchTarget.getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return;
    }
    final String message=search.toString();
    Timer timer=new Timer();
    for (int i=0; i < 3; i++) {
      TimerTask task=new TimerTask(){
        @Override public void run(){
          try {
            if (mSSDPSocket != null)             mSSDPSocket.send(message);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
;
      timer.schedule(task,i * 1000);
    }
  }
  ;
}","public void sendSearch(){
  List<String> killKeys=new ArrayList<String>();
  long killPoint=new Date().getTime() - SSDP_TIMEOUT;
  for (  String key : foundServices.keySet()) {
    ServiceDescription service=foundServices.get(key);
    if (service == null || service.getLastDetection() < killPoint) {
      killKeys.add(key);
    }
  }
  for (  String key : killKeys) {
    final ServiceDescription service=foundServices.get(key);
    if (service != null) {
      Util.runOnUI(new Runnable(){
        @Override public void run(){
          for (          DiscoveryProviderListener listener : serviceListeners) {
            listener.onServiceRemoved(SSDPDiscoveryProvider.this,service);
          }
        }
      }
);
    }
    if (foundServices.containsKey(key))     foundServices.remove(key);
  }
  for (  JSONObject searchTarget : serviceFilters) {
    SSDPSearchMsg search=null;
    try {
      search=new SSDPSearchMsg(searchTarget.getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return;
    }
    final String message=search.toString();
    Timer timer=new Timer();
    for (int i=0; i < 3; i++) {
      TimerTask task=new TimerTask(){
        @Override public void run(){
          try {
            if (mSSDPSocket != null)             mSSDPSocket.send(message);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
;
      timer.schedule(task,i * 1000);
    }
  }
  ;
}",0.945682451253482
20807,"@Override public void disconnect(){
  Log.d(""String_Node_Str"",""String_Node_Str"" + serviceDescription.getIpAddress());
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onDisconnect(WebOSTVService.this,null);
    }
  }
);
  if (socket != null) {
    socket.setListener(null);
    socket.disconnect();
    socket=null;
  }
  if (mAppToAppIdMappings != null)   mAppToAppIdMappings.clear();
  if (mWebAppSessions != null)   mWebAppSessions.clear();
}","@Override public void disconnect(){
  Log.d(""String_Node_Str"",""String_Node_Str"" + serviceDescription.getIpAddress());
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onDisconnect(WebOSTVService.this,null);
    }
  }
);
  if (socket != null) {
    socket.setListener(null);
    socket.disconnect();
    socket=null;
  }
  if (mAppToAppIdMappings != null)   mAppToAppIdMappings.clear();
  if (mWebAppSessions != null) {
    Enumeration<WebOSWebAppSession> iterator=mWebAppSessions.elements();
    while (iterator.hasMoreElements()) {
      WebOSWebAppSession session=iterator.nextElement();
      session.disconnectFromWebApp();
    }
    mWebAppSessions.clear();
  }
}",0.774613506916192
20808,"@Override public void unsubscribe(URLServiceSubscription<?> subscription){
  socket.unsubscribe(subscription);
}","@Override public void unsubscribe(URLServiceSubscription<?> subscription){
  if (socket != null)   socket.unsubscribe(subscription);
}",0.9105691056910568
20809,"@Override public void sendCommand(ServiceCommand<?> command){
  socket.sendCommand(command);
}","@Override public void sendCommand(ServiceCommand<?> command){
  if (socket != null)   socket.sendCommand(command);
}",0.8952380952380953
20810,"@Override public void run(){
  getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
}","@Override public void run(){
  if (getWebAppSessionListener() != null)   getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
}",0.8396946564885496
20811,"public void handleMessage(final Object message){
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
    }
  }
);
}","public void handleMessage(final Object message){
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (getWebAppSessionListener() != null)       getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
    }
  }
);
}",0.9017094017094016
20812,"public void disconnectFromWebApp(final WebOSWebAppSession webAppSession){
  JSONObject rawData=(JSONObject)webAppSession.launchSession.getRawData();
  String appId=null;
  try {
    appId=rawData.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
  }
  if (appId == null) {
    Enumeration<String> enumeration=mAppToAppMessageListeners.keys();
    while (enumeration.hasMoreElements()) {
      String key=enumeration.nextElement();
      if (key.contains(webAppSession.launchSession.getAppId())) {
        appId=key;
        break;
      }
    }
  }
  if (appId != null)   mAppToAppMessageListeners.remove(appId);
  ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.remove(appId);
  if (connectionSubscription != null) {
    if (!this.serviceDescription.getVersion().contains(""String_Node_Str"")) {
      connectionSubscription.unsubscribe();
    }
  }
  if (webAppSession.getWebAppSessionListener() != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
      }
    }
);
  }
}","public void disconnectFromWebApp(final WebOSWebAppSession webAppSession){
  JSONObject rawData=(JSONObject)webAppSession.launchSession.getRawData();
  String appId=null;
  try {
    appId=rawData.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
  }
  if (appId == null && mAppToAppMessageListeners != null) {
    Enumeration<String> enumeration=mAppToAppMessageListeners.keys();
    while (enumeration.hasMoreElements()) {
      String key=enumeration.nextElement();
      if (key.contains(webAppSession.launchSession.getAppId())) {
        appId=key;
        break;
      }
    }
  }
  if (appId != null)   mAppToAppMessageListeners.remove(appId);
  ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.remove(appId);
  if (connectionSubscription != null) {
    if (!this.serviceDescription.getVersion().contains(""String_Node_Str"")) {
      connectionSubscription.unsubscribe();
    }
  }
  if (webAppSession.getWebAppSessionListener() != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
      }
    }
);
  }
}",0.9841133533705452
20813,"/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {
        NetworkInfo networkInfo=intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);
switch (networkInfo.getState()) {
case CONNECTED:
          TimerTask task=new TimerTask(){
            @Override public void run(){
              if (mSearching) {
                for (                DiscoveryProvider provider : discoveryProviders) {
                  provider.start();
                }
              }
            }
          }
;
        Timer t=new Timer();
      t.schedule(task,2000);
    break;
case DISCONNECTED:
  Log.w(""String_Node_Str"",""String_Node_Str"");
for (DiscoveryProvider provider : discoveryProviders) {
  provider.reset();
}
allDevices.clear();
for (ConnectableDevice device : compatibleDevices.values()) {
handleDeviceLoss(device);
}
compatibleDevices.clear();
for (DiscoveryProvider provider : discoveryProviders) {
provider.stop();
}
break;
case CONNECTING:
break;
case DISCONNECTING:
break;
case SUSPENDED:
break;
case UNKNOWN:
break;
}
}
}
}
;
registerBroadcastReceiver();
}","/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  multicastLock.setReferenceCounted(true);
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {
        NetworkInfo networkInfo=intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);
switch (networkInfo.getState()) {
case CONNECTED:
          TimerTask task=new TimerTask(){
            @Override public void run(){
              if (mSearching) {
                for (                DiscoveryProvider provider : discoveryProviders) {
                  provider.start();
                }
              }
            }
          }
;
        Timer t=new Timer();
      t.schedule(task,2000);
    break;
case DISCONNECTED:
  Log.w(""String_Node_Str"",""String_Node_Str"");
for (DiscoveryProvider provider : discoveryProviders) {
  provider.reset();
}
allDevices.clear();
for (ConnectableDevice device : compatibleDevices.values()) {
handleDeviceLoss(device);
}
compatibleDevices.clear();
for (DiscoveryProvider provider : discoveryProviders) {
provider.stop();
}
break;
case CONNECTING:
break;
case DISCONNECTING:
break;
case SUSPENDED:
break;
case UNKNOWN:
break;
}
}
}
}
;
registerBroadcastReceiver();
}",0.9902824858757062
20814,"/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService - AirPlayDiscoveryProvider + AirPlayService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(WebOSTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DLNAService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(RokuService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(CastService.class,CastDiscoveryProvider.class);
  registerDeviceService(AirPlayService.class,ZeroconfDiscoveryProvider.class);
}","/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService - ZeroconfDiscoveryProvider + AirPlayService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(WebOSTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DLNAService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(RokuService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(CastService.class,CastDiscoveryProvider.class);
  registerDeviceService(AirPlayService.class,ZeroconfDiscoveryProvider.class);
}",0.9915302089215132
20815,"private void openSocket(){
  if (mSSDPSocket != null && mSSDPSocket.isConnected())   return;
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  WifiInfo wifiInfo=wifiMgr.getConnectionInfo();
  int ip=wifiInfo.getIpAddress();
  if (ip == 0)   return;
  byte[] ipAddress=Util.convertIpAddress(ip);
  try {
    InetAddress source=InetAddress.getByAddress(ipAddress);
    mSSDPSocket=new SSDPSocket(source);
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void openSocket(){
  if (mSSDPSocket != null && mSSDPSocket.isConnected())   return;
  try {
    InetAddress source=Util.getIpAddress(context);
    if (source == null)     return;
    mSSDPSocket=new SSDPSocket(source);
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.5982532751091703
20816,"public ZeroconfDiscoveryProvider(Context context){
  initJmDNS();
  services=new ConcurrentHashMap<String,ServiceDescription>(8,0.75f,2);
  serviceListeners=new CopyOnWriteArrayList<DiscoveryProviderListener>();
  serviceFilters=new ArrayList<JSONObject>();
}","public ZeroconfDiscoveryProvider(Context context){
  initJmDNS(context);
  services=new ConcurrentHashMap<String,ServiceDescription>(8,0.75f,2);
  serviceListeners=new CopyOnWriteArrayList<DiscoveryProviderListener>();
  serviceFilters=new ArrayList<JSONObject>();
}",0.9866666666666668
20817,"private void initJmDNS(){
  Util.runInBackground(new Runnable(){
    @Override public void run(){
      try {
        jmdns=JmDNS.create();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}","private void initJmDNS(final Context context){
  Util.runInBackground(new Runnable(){
    @Override public void run(){
      try {
        InetAddress source=Util.getIpAddress(context);
        if (source == null)         return;
        jmdns=JmDNS.create(source,HOSTNAME);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.773109243697479
20818,"@Override public void closeInputPicker(LaunchSession launchSession,ResponseListener<Object> listener){
  if (inputPickerSession != null) {
    inputPickerSession.close(listener);
  }
}","@Override public void closeInputPicker(LaunchSession launchSession,ResponseListener<Object> listener){
  this.getKeyControl().sendKeyCode(VirtualKeycodes.EXIT.getCode(),listener);
}",0.6958904109589041
20819,"public DeviceService(ServiceConfig serviceConfig){
  this.serviceConfig=serviceConfig;
  mCapabilities=new ArrayList<String>();
  setCapabilities();
}","public DeviceService(ServiceConfig serviceConfig){
  this.serviceConfig=serviceConfig;
  mCapabilities=new ArrayList<String>();
  updateCapabilities();
}",0.976897689768977
20820,"protected void setCapabilities(){
}","protected void setCapabilities(List<String> newCapabilities){
  List<String> oldCapabilities=mCapabilities;
  mCapabilities=newCapabilities;
  List<String> _lostCapabilities=new ArrayList<String>();
  for (  String capability : oldCapabilities) {
    if (!newCapabilities.contains(capability))     _lostCapabilities.add(capability);
  }
  List<String> _addedCapabilities=new ArrayList<String>();
  for (  String capability : newCapabilities) {
    if (!oldCapabilities.contains(capability))     _addedCapabilities.add(capability);
  }
  final List<String> lostCapabilities=_lostCapabilities;
  final List<String> addedCapabilities=_addedCapabilities;
  if (this.listener != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        listener.onCapabilitiesUpdated(DeviceService.this,addedCapabilities,lostCapabilities);
      }
    }
);
  }
}",0.0776053215077605
20821,"public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  stop(new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      final String instanceId=""String_Node_Str"";
      String[] mediaElements=mimeType.split(""String_Node_Str"");
      String mediaType=mediaElements[0];
      String mediaFormat=mediaElements[1];
      if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {
        Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
        return;
      }
      mediaFormat=""String_Node_Str"".equals(mediaFormat) ? ""String_Node_Str"" : mediaFormat;
      String mMimeType=String.format(""String_Node_Str"",mediaType,mediaFormat);
      ResponseListener<Object> responseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          String method=""String_Node_Str"";
          Map<String,String> parameters=new HashMap<String,String>();
          parameters.put(""String_Node_Str"",""String_Node_Str"");
          JSONObject payload=getMethodBody(instanceId,method,parameters);
          ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
            @Override public void onSuccess(            Object response){
              LaunchSession launchSession=new LaunchSession();
              launchSession.setService(DLNAService.this);
              launchSession.setSessionType(LaunchSessionType.Media);
              Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
            }
            @Override public void onError(            ServiceCommandError error){
              if (listener != null) {
                listener.onError(error);
              }
            }
          }
;
          ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
          request.send();
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      String method=""String_Node_Str"";
      JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mMimeType,title);
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  final String instanceId=""String_Node_Str"";
  String[] mediaElements=mimeType.split(""String_Node_Str"");
  String mediaType=mediaElements[0];
  String mediaFormat=mediaElements[1];
  if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {
    Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  mediaFormat=""String_Node_Str"".equals(mediaFormat) ? ""String_Node_Str"" : mediaFormat;
  String mMimeType=String.format(""String_Node_Str"",mediaType,mediaFormat);
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      String method=""String_Node_Str"";
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put(""String_Node_Str"",""String_Node_Str"");
      JSONObject payload=getMethodBody(instanceId,method,parameters);
      ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          LaunchSession launchSession=new LaunchSession();
          launchSession.setService(DLNAService.this);
          launchSession.setSessionType(LaunchSessionType.Media);
          Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      if (listener != null) {
        listener.onError(error);
      }
    }
  }
;
  String method=""String_Node_Str"";
  JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mMimeType,title);
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
  request.send();
}",0.6756972111553785
20822,"public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  stop(new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      final String instanceId=""String_Node_Str"";
      String[] mediaElements=mimeType.split(""String_Node_Str"");
      String mediaType=mediaElements[0];
      String mediaFormat=mediaElements[1];
      if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {
        Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
        return;
      }
      mediaFormat=""String_Node_Str"".equals(mediaFormat) ? ""String_Node_Str"" : mediaFormat;
      String mMimeType=String.format(""String_Node_Str"",mediaType,mediaFormat);
      ResponseListener<Object> responseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          String method=""String_Node_Str"";
          Map<String,String> parameters=new HashMap<String,String>();
          parameters.put(""String_Node_Str"",""String_Node_Str"");
          JSONObject payload=getMethodBody(instanceId,method,parameters);
          ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
            @Override public void onSuccess(            Object response){
              LaunchSession launchSession=new LaunchSession();
              launchSession.setService(DLNAService.this);
              launchSession.setSessionType(LaunchSessionType.Media);
              Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
            }
            @Override public void onError(            ServiceCommandError error){
              if (listener != null) {
                listener.onError(error);
              }
            }
          }
;
          ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
          request.send();
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      String method=""String_Node_Str"";
      JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mMimeType,title);
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  final String instanceId=""String_Node_Str"";
  String[] mediaElements=mimeType.split(""String_Node_Str"");
  String mediaType=mediaElements[0];
  String mediaFormat=mediaElements[1];
  if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {
    Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  mediaFormat=""String_Node_Str"".equals(mediaFormat) ? ""String_Node_Str"" : mediaFormat;
  String mMimeType=String.format(""String_Node_Str"",mediaType,mediaFormat);
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      String method=""String_Node_Str"";
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put(""String_Node_Str"",""String_Node_Str"");
      JSONObject payload=getMethodBody(instanceId,method,parameters);
      ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          LaunchSession launchSession=new LaunchSession();
          launchSession.setService(DLNAService.this);
          launchSession.setSessionType(LaunchSessionType.Media);
          Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      if (listener != null) {
        listener.onError(error);
      }
    }
  }
;
  String method=""String_Node_Str"";
  JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mMimeType,title);
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
  request.send();
}",0.6756972111553785
20823,"@Override public void launchNetflix(String contentId,Launcher.AppLaunchListener listener){
  JSONObject params=new JSONObject();
  try {
    params.put(""String_Node_Str"",contentId);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  AppInfo appInfo=new AppInfo(){
{
      setId(""String_Node_Str"");
      setName(""String_Node_Str"");
    }
  }
;
  launchAppWithInfo(appInfo,params,listener);
}","@Override public void launchNetflix(String contentId,Launcher.AppLaunchListener listener){
  JSONObject params=new JSONObject();
  String netflixContentId=""String_Node_Str"" + contentId + ""String_Node_Str"";
  try {
    params.put(""String_Node_Str"",netflixContentId);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  AppInfo appInfo=new AppInfo(){
{
      setId(""String_Node_Str"");
      setName(""String_Node_Str"");
    }
  }
;
  launchAppWithInfo(appInfo,params,listener);
}",0.9035874439461884
20824,"@Override public void setServiceDescription(ServiceDescription serviceDescription){
  super.setServiceDescription(serviceDescription);
  if (this.serviceDescription != null)   this.serviceDescription.setPort(8060);
}","@Override public void setServiceDescription(ServiceDescription serviceDescription){
  super.setServiceDescription(serviceDescription);
  if (this.serviceDescription != null)   this.serviceDescription.setPort(8060);
  probeForAppSupport();
}",0.9473684210526316
20825,"/** 
 * Registers an app ID to be checked upon discovery of this device. If the app is found on the target device, the RokuService will gain the ""Launcher.<appID>"" capability, where <appID> is the value of the appId parameter. This method must be called before starting DiscoveryManager for the first time.
 * @param appId ID of the app to be checked for
 */
public static void registerApp(String appId){
  if (registeredApps.contains(appId))   registeredApps.add(appId);
}","/** 
 * Registers an app ID to be checked upon discovery of this device. If the app is found on the target device, the RokuService will gain the ""Launcher.<appID>"" capability, where <appID> is the value of the appId parameter. This method must be called before starting DiscoveryManager for the first time.
 * @param appId ID of the app to be checked for
 */
public static void registerApp(String appId){
  if (!registeredApps.contains(appId))   registeredApps.add(appId);
}",0.9989440337909188
20826,"public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  probeForAppSupport();
}","public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
}",0.9698492462311558
20827,"@Override public void closeApp(LaunchSession launchSession,ResponseListener<Object> listener){
  String uri=""String_Node_Str"";
  String appId=launchSession.getAppId();
  JSONObject payload=new JSONObject();
  try {
    payload.put(""String_Node_Str"",appId);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(launchSession.getService(),uri,payload,true,listener);
  request.send();
}","@Override public void closeApp(LaunchSession launchSession,ResponseListener<Object> listener){
  String uri=""String_Node_Str"";
  String appId=launchSession.getAppId();
  String sessionId=launchSession.getSessionId();
  JSONObject payload=new JSONObject();
  try {
    payload.put(""String_Node_Str"",appId);
    payload.put(""String_Node_Str"",sessionId);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(launchSession.getService(),uri,payload,true,listener);
  request.send();
}",0.9114631873252564
20828,"@Override public void launchAppWithInfo(final AppInfo appInfo,Object params,final Launcher.AppLaunchListener listener){
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  final String appId=appInfo.getId();
  String contentId=null;
  if (params != null) {
    try {
      contentId=(String)((JSONObject)params).get(""String_Node_Str"");
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  try {
    payload.put(""String_Node_Str"",appId);
    if (contentId != null) {
      payload.put(""String_Node_Str"",contentId);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject obj=(JSONObject)response;
      LaunchSession launchSession=new LaunchSession();
      launchSession.setService(WebOSTVService.this);
      launchSession.setAppId(obj.optString(""String_Node_Str""));
      launchSession.setSessionId(obj.optString(""String_Node_Str""));
      launchSession.setSessionType(LaunchSessionType.App);
      Util.postSuccess(listener,launchSession);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  request.send();
}","@Override public void launchAppWithInfo(final AppInfo appInfo,Object params,final Launcher.AppLaunchListener listener){
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  final String appId=appInfo.getId();
  String contentId=null;
  if (params != null) {
    try {
      contentId=(String)((JSONObject)params).get(""String_Node_Str"");
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  try {
    payload.put(""String_Node_Str"",appId);
    if (contentId != null) {
      payload.put(""String_Node_Str"",contentId);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject obj=(JSONObject)response;
      LaunchSession launchSession=new LaunchSession();
      launchSession.setService(WebOSTVService.this);
      launchSession.setAppId(appId);
      launchSession.setSessionId(obj.optString(""String_Node_Str""));
      launchSession.setSessionType(LaunchSessionType.App);
      Util.postSuccess(listener,launchSession);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  request.send();
}",0.96147048427006
20829,"@Override public void onRouteRemoved(MediaRouter router,RouteInfo route){
  super.onRouteRemoved(router,route);
}","@Override public void onRouteRemoved(MediaRouter router,RouteInfo route){
  super.onRouteRemoved(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String uuid=castDevice.getDeviceId();
  if (services.containsKey(uuid)) {
    ServiceDescription serviceDescription=services.get(uuid);
    for (    DiscoveryProviderListener listener : serviceListeners) {
      listener.onServiceRemoved(CastDiscoveryProvider.this,serviceDescription);
    }
    services.remove(uuid);
  }
}",0.364516129032258
20830,"@Override public void closeApp(final LaunchSession launchSession,final ResponseListener<Object> listener){
  getAppState(launchSession.getAppName(),new AppStateListener(){
    @Override public void onSuccess(    AppState state){
      String uri=requestURL(launchSession.getAppName());
      if (state.running) {
        uri+=""String_Node_Str"";
      }
      ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(launchSession.getService(),uri,null,listener);
      command.setHttpMethod(ServiceCommand.TYPE_DEL);
      command.send();
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","@Override public void closeApp(final LaunchSession launchSession,final ResponseListener<Object> listener){
  getAppState(launchSession.getAppName(),new AppStateListener(){
    @Override public void onSuccess(    AppState state){
      String uri=requestURL(launchSession.getAppName());
      ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(launchSession.getService(),uri,null,listener);
      command.setHttpMethod(ServiceCommand.TYPE_DEL);
      command.send();
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}",0.9497374343585896
20831,"private String requestURL(String appName){
  String applicationURL=serviceDescription != null ? serviceDescription.getApplicationURL() : null;
  if (applicationURL == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder();
  sb.append(applicationURL);
  sb.append(appName);
  return sb.toString();
}","private String requestURL(String appName){
  String applicationURL=serviceDescription != null ? serviceDescription.getApplicationURL() : null;
  if (applicationURL == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder();
  sb.append(applicationURL);
  if (!applicationURL.endsWith(""String_Node_Str""))   sb.append(""String_Node_Str"");
  sb.append(appName);
  return sb.toString();
}",0.8866242038216561
20832,"private void probeForAppSupport(){
  if (serviceDescription.getApplicationURL() == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  for (  final String appID : registeredApps) {
    hasApplication(appID,new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
      }
      @Override public void onSuccess(      Object object){
        addCapability(""String_Node_Str"" + appID);
      }
    }
);
  }
}","private void probeForAppSupport(){
  if (serviceDescription.getApplicationURL() == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  for (  final String appID : registeredApps) {
    hasApplication(appID,new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
      }
      @Override public void onSuccess(      Object object){
        addCapability(""String_Node_Str"" + appID);
        addCapability(""String_Node_Str"" + appID + ""String_Node_Str"");
      }
    }
);
  }
}",0.9306930693069309
20833,"@Override public void onSuccess(Object object){
  addCapability(""String_Node_Str"" + appID);
}","@Override public void onSuccess(Object object){
  addCapability(""String_Node_Str"" + appID);
  addCapability(""String_Node_Str"" + appID + ""String_Node_Str"");
}",0.744
20834,"public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
}","public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  probeForAppSupport();
}",0.9698492462311558
20835,"@Override public void onSuccess(Object response){
}","@Override public void onSuccess(List<AppInfo> object){
  List<String> appsToAdd=new ArrayList<String>();
  for (  String probe : registeredApps) {
    for (    AppInfo app : object) {
      if (app.getName().contains(probe)) {
        appsToAdd.add(""String_Node_Str"" + probe);
        appsToAdd.add(""String_Node_Str"" + probe + ""String_Node_Str"");
      }
    }
  }
  addCapabilities(appsToAdd);
}",0.1834451901565995
20836,"/** 
 * Compares two ChannelInfo objects.
 * @param channelInfo ChannelInfo object to compare.
 * @return YES if both ChannelInfo number & name values are equal
 */
@Override public boolean equals(Object o){
  if (o instanceof ChannelInfo) {
    ChannelInfo other=(ChannelInfo)o;
    return this.channelId.equals(other.channelId) && this.channelName.equals(other.channelName) && this.channelNumber.equals(other.channelNumber)&& this.majorNumber == other.majorNumber && this.minorNumber == other.minorNumber;
  }
  return super.equals(o);
}","/** 
 * Compares two ChannelInfo objects.
 * @param channelInfo ChannelInfo object to compare.
 * @return YES if both ChannelInfo number & name values are equal
 */
@Override public boolean equals(Object o){
  if (o instanceof ChannelInfo) {
    ChannelInfo other=(ChannelInfo)o;
    if (this.channelId != null) {
      if (this.channelId.equals(other.channelId))       return true;
    }
 else     if (this.channelName != null && this.channelNumber != null) {
      return this.channelName.equals(other.channelName) && this.channelNumber.equals(other.channelNumber) && this.majorNumber == other.majorNumber && this.minorNumber == other.minorNumber;
    }
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + this.rawData.toString());
    Log.d(TAG,""String_Node_Str"" + other.rawData.toString());
    return false;
  }
  return super.equals(o);
}",0.7605432451751251
20837,"@Override public void run(){
  for (  ConnectableDeviceListener listener : listeners)   listener.onDeviceDisconnected(ConnectableDevice.this);
}","@Override public void run(){
  for (  ConnectableDeviceListener listener : listeners)   listener.onDeviceReady(ConnectableDevice.this);
}",0.9537366548042704
20838,"@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    ConnectableDeviceStore deviceStore=DiscoveryManager.getInstance().getConnectableDeviceStore();
    if (deviceStore != null) {
      deviceStore.addDevice(this);
    }
    for (    ConnectableDeviceListener listener : listeners)     listener.onDeviceReady(ConnectableDevice.this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    ConnectableDeviceStore deviceStore=DiscoveryManager.getInstance().getConnectableDeviceStore();
    if (deviceStore != null) {
      deviceStore.addDevice(this);
    }
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        ConnectableDeviceListener listener : listeners)         listener.onDeviceReady(ConnectableDevice.this);
      }
    }
);
    setLastConnected(Util.getTime());
  }
}",0.8955866523143164
20839,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
}",0.626916524701874
20840,"private void setCapabilities(){
  appendCapabilites(MediaPlayer.Capabilities);
  appendCapabilites(VolumeControl.Capabilities);
  appendCapabilites(Play,Pause,Stop,Duration,Seek,Position,Launch,Message_Send,Message_Receive,Message_Send_JSON,Message_Receive_JSON,WebAppLauncher.Close);
}","@Override protected void setCapabilities(){
  appendCapabilites(MediaPlayer.Capabilities);
  appendCapabilites(VolumeControl.Capabilities);
  appendCapabilites(Play,Pause,Stop,Duration,Seek,Position,Launch,Message_Send,Message_Receive,Message_Send_JSON,Message_Receive_JSON,WebAppLauncher.Close);
}",0.9554794520547946
20841,"private void setCapabilities(){
  appendCapabilites(Display_Image,Display_Video,Play,MetaData_Title,MetaData_MimeType,Duration,Position,Seek);
}","@Override protected void setCapabilities(){
  appendCapabilites(Display_Image,Display_Video,Play,MetaData_Title,MetaData_MimeType,Duration,Position,Seek);
}",0.94
20842,"public DLNAService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
}","public DLNAService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
}",0.9257950530035336
20843,"public DeviceService(ServiceConfig serviceConfig){
  this.serviceConfig=serviceConfig;
  mCapabilities=new ArrayList<String>();
}","public DeviceService(ServiceConfig serviceConfig){
  this.serviceConfig=serviceConfig;
  mCapabilities=new ArrayList<String>();
  setCapabilities();
}",0.9247311827956988
20844,"public NetcastTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  dlnaService=new DLNAService(serviceDescription,serviceConfig);
  if (serviceDescription.getPort() != 8080)   serviceDescription.setPort(8080);
  setCapabilities();
  applications=new ArrayList<AppInfo>();
  subscriptions=new ArrayList<URLServiceSubscription<?>>();
  keyboardString=new StringBuilder();
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  state=State.INITIAL;
  inputPickerSession=null;
}","public NetcastTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  dlnaService=new DLNAService(serviceDescription,serviceConfig);
  if (serviceDescription.getPort() != 8080)   serviceDescription.setPort(8080);
  applications=new ArrayList<AppInfo>();
  subscriptions=new ArrayList<URLServiceSubscription<?>>();
  keyboardString=new StringBuilder();
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  state=State.INITIAL;
  inputPickerSession=null;
}",0.9857239972807614
20845,"@Override public void sendPairingKey(final String pairingKey){
  state=State.PAIRING;
  if (!(serviceConfig instanceof NetcastTVServiceConfig)) {
    serviceConfig=new NetcastTVServiceConfig(serviceConfig.getServiceUUID());
  }
  ((NetcastTVServiceConfig)serviceConfig).setPairingKey(pairingKey);
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      state=State.PAIRED;
      if (DiscoveryManager.getInstance().getConnectableDeviceStore() != null) {
        ConnectableDevice storedDevice=DiscoveryManager.getInstance().getConnectableDeviceStore().getDevice(serviceConfig.getServiceUUID());
        if (storedDevice == null) {
          storedDevice=new ConnectableDevice(serviceDescription.getIpAddress(),serviceDescription.getFriendlyName(),serviceDescription.getModelName(),serviceDescription.getModelNumber());
        }
        storedDevice.addService(NetcastTVService.this);
        DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(storedDevice);
      }
      hConnectSuccess();
    }
    @Override public void onError(    ServiceCommandError error){
      state=State.INITIAL;
      if (listener != null)       listener.onConnectionFailure(NetcastTVService.this,error);
    }
  }
;
  String requestURL=getUDAPRequestURL(UDAP_PATH_PAIRING);
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",pairingKey);
  params.put(""String_Node_Str"",String.valueOf(serviceDescription.getPort()));
  String httpMessage=getUDAPMessageBody(UDAP_API_PAIRING,params);
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(this,requestURL,httpMessage,responseListener);
  command.send();
}","@Override public void sendPairingKey(final String pairingKey){
  state=State.PAIRING;
  if (!(serviceConfig instanceof NetcastTVServiceConfig)) {
    serviceConfig=new NetcastTVServiceConfig(serviceConfig.getServiceUUID());
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      state=State.PAIRED;
      ((NetcastTVServiceConfig)serviceConfig).setPairingKey(pairingKey);
      hConnectSuccess();
    }
    @Override public void onError(    ServiceCommandError error){
      state=State.INITIAL;
      if (listener != null)       listener.onConnectionFailure(NetcastTVService.this,error);
    }
  }
;
  String requestURL=getUDAPRequestURL(UDAP_PATH_PAIRING);
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",pairingKey);
  params.put(""String_Node_Str"",String.valueOf(serviceDescription.getPort()));
  String httpMessage=getUDAPMessageBody(UDAP_API_PAIRING,params);
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(this,requestURL,httpMessage,responseListener);
  command.send();
}",0.7679576299238663
20846,"private void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(PowerControl.Off,Play,Pause,Stop,Rewind,FastForward,Duration,Position,Seek,MetaData_Title,MetaData_MimeType,Application,Application_Close,Application_List,Browser,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,AppStore,AppStore_Params,Channel_Up,Channel_Down,Channel_Get,Channel_List,Channel_Subscribe,Get_3D,Set_3D,Subscribe_3D,Picker_Launch,Picker_Close,Volume_Get,Volume_Up_Down,Mute_Get,Mute_Set);
  }
 else {
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,YouTube,YouTube_Params);
  }
}","@Override protected void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(PowerControl.Off,Play,Pause,Stop,Rewind,FastForward,Duration,Position,Seek,MetaData_Title,MetaData_MimeType,Application,Application_Close,Application_List,Browser,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,AppStore,AppStore_Params,Channel_Up,Channel_Down,Channel_Get,Channel_List,Channel_Subscribe,Get_3D,Set_3D,Subscribe_3D,Picker_Launch,Picker_Close,Volume_Get,Volume_Up_Down,Mute_Get,Mute_Set);
  }
 else {
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,YouTube,YouTube_Params);
  }
}",0.9865470852017936
20847,"private void setCapabilities(){
  appendCapabilites(KeyControl.Capabilities);
  appendCapabilites(Application,Application_Params,Application_List,AppStore,AppStore_Params,Application_Close,Display_Image,Display_Video,Display_Audio,Close,MetaData_Title,FastForward,Rewind,Play,Pause,Send,Send_Delete,Send_Enter);
}","@Override protected void setCapabilities(){
  appendCapabilites(KeyControl.Capabilities);
  appendCapabilites(Application,Application_Params,Application_List,AppStore,AppStore_Params,Application_Close,Display_Image,Display_Video,Display_Audio,Close,MetaData_Title,FastForward,Rewind,Play,Pause,Send,Send_Delete,Send_Enter);
}",0.962382445141066
20848,"public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  serviceDescription.setPort(8060);
  setCapabilities();
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  probeForAppSupport();
}","public RokuService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  serviceDescription.setPort(8060);
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  probeForAppSupport();
}",0.411829134720701
20849,"private void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Launcher.Capabilities);
    appendCapabilites(TVControl.Capabilities);
    appendCapabilites(ExternalInputControl.Capabilities);
    appendCapabilites(VolumeControl.Capabilities);
    appendCapabilites(MediaControl.Capabilities);
    appendCapabilites(ToastControl.Capabilities);
    appendCapability(PowerControl.Off);
  }
 else {
    appendCapabilites(VolumeControl.Capabilities);
    appendCapabilites(MediaControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Application,Application_Params,Application_Close,Browser,Browser_Params,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,AppStore,AppStore_Params,AppState,AppState_Subscribe);
  }
  if (!serviceDescription.getVersion().contains(""String_Node_Str"") && !serviceDescription.getVersion().contains(""String_Node_Str"")) {
    appendCapabilites(WebAppLauncher.Capabilities);
  }
 else {
    appendCapabilites(Launch,Launch_Params,WebAppLauncher.Close);
  }
}","@Override protected void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Launcher.Capabilities);
    appendCapabilites(TVControl.Capabilities);
    appendCapabilites(ExternalInputControl.Capabilities);
    appendCapabilites(VolumeControl.Capabilities);
    appendCapabilites(MediaControl.Capabilities);
    appendCapabilites(ToastControl.Capabilities);
    appendCapability(PowerControl.Off);
  }
 else {
    appendCapabilites(VolumeControl.Capabilities);
    appendCapabilites(MediaControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Application,Application_Params,Application_Close,Browser,Browser_Params,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,AppStore,AppStore_Params,AppState,AppState_Subscribe);
  }
  if (!serviceDescription.getVersion().contains(""String_Node_Str"") && !serviceDescription.getVersion().contains(""String_Node_Str"")) {
    appendCapabilites(WebAppLauncher.Capabilities);
  }
 else {
    appendCapabilites(Launch,Launch_Params,WebAppLauncher.Close);
  }
}",0.9907192575406032
20850,"public WebOSTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setServiceDescription(serviceDescription);
  state=State.INITIAL;
  pairingType=PairingType.FIRST_SCREEN;
  mAppToAppSubscriptions=new HashMap<String,URLServiceSubscription<ResponseListener<Object>>>();
  mAppToAppMessageListeners=new HashMap<String,MessageListener>();
  setCapabilities();
  setDefaultManifest();
}","public WebOSTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setServiceDescription(serviceDescription);
  state=State.INITIAL;
  pairingType=PairingType.FIRST_SCREEN;
  mAppToAppSubscriptions=new HashMap<String,URLServiceSubscription<ResponseListener<Object>>>();
  mAppToAppMessageListeners=new HashMap<String,MessageListener>();
  setDefaultManifest();
}",0.9761634506242906
20851,"public URLServiceSubscription(DeviceService service,String uri,JSONObject payload,boolean isWebOS,ResponseListener<Object> listener){
  super(service,uri,payload,isWebOS,listener);
}","public URLServiceSubscription(DeviceService service,String uri,JSONObject payload,boolean isWebOS,ResponseListener<Object> listener){
  super(service,uri,payload,isWebOS,listener);
  if (isWebOS)   httpMethod=""String_Node_Str"";
}",0.8856447688564477
20852,"private void sendData(){
  waiting=true;
  String uri;
  String typeTest=toSend.get(0);
  JSONObject payload=new JSONObject();
  if (typeTest.equals(ENTER)) {
    toSend.remove(0);
    uri=""String_Node_Str"";
  }
 else   if (typeTest.equals(DELETE)) {
    uri=""String_Node_Str"";
    int count=0;
    while (toSend.size() > 0 && toSend.get(0).equals(DELETE)) {
      toSend.remove(0);
      count++;
    }
    try {
      payload.put(""String_Node_Str"",count);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    uri=""String_Node_Str"";
    StringBuilder sb=new StringBuilder();
    while (toSend.size() > 0 && !(toSend.get(0).equals(DELETE) || toSend.get(0).equals(ENTER))) {
      String text=toSend.get(0);
      sb.append(text);
      toSend.remove(0);
    }
    try {
      payload.put(""String_Node_Str"",sb.toString());
      payload.put(""String_Node_Str"",0);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      waiting=false;
      if (toSend.size() > 0)       sendData();
    }
    @Override public void onError(    ServiceCommandError error){
      waiting=false;
      if (toSend.size() > 0)       sendData();
    }
  }
;
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(service,uri,payload,responseListener);
  request.send();
}","private void sendData(){
  waiting=true;
  String uri;
  String typeTest=toSend.get(0);
  JSONObject payload=new JSONObject();
  if (typeTest.equals(ENTER)) {
    toSend.remove(0);
    uri=""String_Node_Str"";
  }
 else   if (typeTest.equals(DELETE)) {
    uri=""String_Node_Str"";
    int count=0;
    while (toSend.size() > 0 && toSend.get(0).equals(DELETE)) {
      toSend.remove(0);
      count++;
    }
    try {
      payload.put(""String_Node_Str"",count);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    uri=""String_Node_Str"";
    StringBuilder sb=new StringBuilder();
    while (toSend.size() > 0 && !(toSend.get(0).equals(DELETE) || toSend.get(0).equals(ENTER))) {
      String text=toSend.get(0);
      sb.append(text);
      toSend.remove(0);
    }
    try {
      payload.put(""String_Node_Str"",sb.toString());
      payload.put(""String_Node_Str"",0);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      waiting=false;
      if (toSend.size() > 0)       sendData();
    }
    @Override public void onError(    ServiceCommandError error){
      waiting=false;
      if (toSend.size() > 0)       sendData();
    }
  }
;
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(service,uri,payload,true,responseListener);
  request.send();
}",0.9983102399459276
20853,"public URLServiceSubscription<TextInputStatusListener> connect(final TextInputStatusListener listener){
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      TextInputStatusInfo keyboard=parseRawKeyboardData(jsonObj);
      Util.postSuccess(listener,keyboard);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  URLServiceSubscription<TextInputStatusListener> subscription=new URLServiceSubscription<TextInputStatusListener>(service,KEYBOARD_INPUT,null,responseListener);
  subscription.send();
  return subscription;
}","public URLServiceSubscription<TextInputStatusListener> connect(final TextInputStatusListener listener){
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      TextInputStatusInfo keyboard=parseRawKeyboardData(jsonObj);
      Util.postSuccess(listener,keyboard);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  URLServiceSubscription<TextInputStatusListener> subscription=new URLServiceSubscription<TextInputStatusListener>(service,KEYBOARD_INPUT,null,true,responseListener);
  subscription.send();
  return subscription;
}",0.9965635738831616
20854,"public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  if (webAppSession.messageHandler == null) {
    Util.postError(connectionListener,new ServiceCommandError(-1,""String_Node_Str"",null));
    return;
  }
  String _fullAppId=null;
  String _subscriptionKey=null;
  String _idKey=null;
  if (webAppSession.launchSession.getSessionType() == LaunchSession.LaunchSessionType.WebApp) {
    _fullAppId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
    _subscriptionKey=webAppSession.launchSession.getAppId();
    _idKey=""String_Node_Str"";
  }
 else   if (webAppSession.launchSession.getSessionType() == LaunchSession.LaunchSessionType.App) {
    _fullAppId=_subscriptionKey=webAppSession.launchSession.getAppId();
    _idKey=""String_Node_Str"";
  }
  if (_fullAppId == null || _fullAppId.length() == 0) {
    Util.postError(connectionListener,new ServiceCommandError(-1,""String_Node_Str"",null));
    return;
  }
  final String fullAppId=_fullAppId;
  final String subscriptionKey=_subscriptionKey;
  final String idKey=_idKey;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  try {
    payload.put(idKey,subscriptionKey);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    final Object response){
      JSONObject jsonObj=(JSONObject)response;
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      String appId=jsonObj.optString(""String_Node_Str"");
      if (appId != null && appId.length() != 0) {
        mAppToAppMessageListeners.put(appId,webAppSession.messageHandler);
        JSONObject newRawData;
        if (webAppSession.launchSession.getRawData() != null)         newRawData=(JSONObject)webAppSession.launchSession.getRawData();
 else         newRawData=new JSONObject();
        try {
          newRawData.put(idKey,appId);
        }
 catch (        JSONException ex) {
          ex.printStackTrace();
        }
        webAppSession.launchSession.setRawData(newRawData);
      }
      if (connectionListener != null) {
        Util.runOnUI(new Runnable(){
          @Override public void run(){
            connectionListener.onSuccess(response);
          }
        }
);
      }
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.get(subscriptionKey);
      if (connectionSubscription != null) {
        if (!serviceDescription.getVersion().contains(""String_Node_Str""))         connectionSubscription.unsubscribe();
        mAppToAppSubscriptions.remove(subscriptionKey);
        mAppToAppMessageListeners.remove(fullAppId);
      }
      boolean appChannelDidClose=false;
      if (error != null && error.getPayload() != null)       appChannelDidClose=error.getPayload().toString().contains(""String_Node_Str"");
      if (appChannelDidClose) {
        if (connectionSubscription != null)         connectionSubscription.unsubscribe();
        if (webAppSession != null && webAppSession.getWebAppSessionListener() != null) {
          Util.runOnUI(new Runnable(){
            @Override public void run(){
              webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
            }
          }
);
        }
      }
 else {
        Util.postError(connectionListener,error);
      }
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.subscribe();
  mAppToAppSubscriptions.put(subscriptionKey,subscription);
}","public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  if (webAppSession.messageHandler == null) {
    Util.postError(connectionListener,new ServiceCommandError(-1,""String_Node_Str"",null));
    return;
  }
  String _fullAppId=null;
  String _subscriptionKey=null;
  String _idKey=null;
  if (webAppSession.launchSession.getSessionType() == LaunchSession.LaunchSessionType.WebApp) {
    _fullAppId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
    _subscriptionKey=webAppSession.launchSession.getAppId();
    _idKey=""String_Node_Str"";
  }
 else   if (webAppSession.launchSession.getSessionType() == LaunchSession.LaunchSessionType.App) {
    _fullAppId=_subscriptionKey=webAppSession.launchSession.getAppId();
    _idKey=""String_Node_Str"";
  }
  if (_fullAppId == null || _fullAppId.length() == 0) {
    Util.postError(connectionListener,new ServiceCommandError(-1,""String_Node_Str"",null));
    return;
  }
  URLServiceSubscription<ResponseListener<Object>> appToAppSubscription=(URLServiceSubscription<ResponseListener<Object>>)mAppToAppSubscriptions.get(_subscriptionKey);
  if (appToAppSubscription != null) {
    mAppToAppMessageListeners.put(_fullAppId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  final String fullAppId=_fullAppId;
  final String subscriptionKey=_subscriptionKey;
  final String idKey=_idKey;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  try {
    payload.put(idKey,subscriptionKey);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    final Object response){
      JSONObject jsonObj=(JSONObject)response;
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      String appId=jsonObj.optString(""String_Node_Str"");
      if (appId != null && appId.length() != 0) {
        mAppToAppMessageListeners.put(appId,webAppSession.messageHandler);
        JSONObject newRawData;
        if (webAppSession.launchSession.getRawData() != null)         newRawData=(JSONObject)webAppSession.launchSession.getRawData();
 else         newRawData=new JSONObject();
        try {
          newRawData.put(idKey,appId);
        }
 catch (        JSONException ex) {
          ex.printStackTrace();
        }
        webAppSession.launchSession.setRawData(newRawData);
      }
      if (connectionListener != null) {
        Util.runOnUI(new Runnable(){
          @Override public void run(){
            connectionListener.onSuccess(response);
          }
        }
);
      }
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> connectionSubscription=mAppToAppSubscriptions.get(subscriptionKey);
      if (connectionSubscription != null) {
        if (!serviceDescription.getVersion().contains(""String_Node_Str""))         connectionSubscription.unsubscribe();
        mAppToAppSubscriptions.remove(subscriptionKey);
        mAppToAppMessageListeners.remove(fullAppId);
      }
      boolean appChannelDidClose=false;
      if (error != null && error.getPayload() != null)       appChannelDidClose=error.getPayload().toString().contains(""String_Node_Str"");
      if (appChannelDidClose) {
        if (connectionSubscription != null)         connectionSubscription.unsubscribe();
        if (webAppSession != null && webAppSession.getWebAppSessionListener() != null) {
          Util.runOnUI(new Runnable(){
            @Override public void run(){
              webAppSession.getWebAppSessionListener().onWebAppSessionDisconnect(webAppSession);
            }
          }
);
        }
      }
 else {
        Util.postError(connectionListener,error);
      }
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.subscribe();
  mAppToAppSubscriptions.put(subscriptionKey,subscription);
}",0.9596167008898016
20855,"public WebOSTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setServiceDescription(serviceDescription);
  state=State.INITIAL;
  pairingType=PairingType.FIRST_SCREEN;
  mAppToAppSubscriptions=new HashMap<String,URLServiceSubscription<ResponseListener<Object>>>();
  mAppToAppMessageListeners=new HashMap<String,MessageListener>();
  setDefaultManifest();
}","public WebOSTVService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setServiceDescription(serviceDescription);
  state=State.INITIAL;
  pairingType=PairingType.FIRST_SCREEN;
  mAppToAppSubscriptions=new ConcurrentHashMap<String,URLServiceSubscription<ResponseListener<Object>>>();
  mAppToAppMessageListeners=new ConcurrentHashMap<String,MessageListener>();
  setDefaultManifest();
}",0.9772727272727272
20856,"@Override public void close(ResponseListener<Object> listener){
  connected=false;
  mActiveCommands.clear();
  if (mPlayStateSubscription != null) {
    mPlayStateSubscription.unsubscribe();
    mPlayStateSubscription=null;
  }
  if (mMessageSubscription != null) {
    mMessageSubscription.unsubscribe();
    mMessageSubscription=null;
  }
  service.getWebAppLauncher().closeWebApp(launchSession,listener);
}","@Override public void close(ResponseListener<Object> listener){
  connected=false;
  mActiveCommands.clear();
  if (mPlayStateSubscription != null) {
    mPlayStateSubscription.unsubscribe();
    mPlayStateSubscription=null;
  }
  if (mMessageSubscription != null) {
    mMessageSubscription.unsubscribe();
    mMessageSubscription=null;
  }
  if (launchSession.getSessionId() != null)   service.disconnectFromWebApp(this);
  service.getWebAppLauncher().closeWebApp(launchSession,listener);
}",0.9090909090909092
20857,"@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    if (listener != null)     listener.onDeviceReady(ConnectableDevice.this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    if (DiscoveryManager.getInstance().getConnectableDeviceStore() != null)     DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    if (listener != null)     listener.onDeviceReady(ConnectableDevice.this);
    setLastConnected(Util.getTime());
  }
}",0.7804878048780488
20858,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
}",0.5897187196896218
20859,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  Cast.CastApi.joinApplication(mApiClient,webAppLaunchSession.getAppId(),webAppLaunchSession.getSessionId()).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>(){
    @Override public void onResult(    Cast.ApplicationConnectionResult result){
      Status status=result.getStatus();
      if (status.isSuccess()) {
        Util.postSuccess(listener,new CastWebAppSession(webAppLaunchSession,CastService.this));
      }
 else {
        Util.postError(listener,new ServiceCommandError(result.getStatus().getStatusCode(),result.getStatus().toString(),result));
      }
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.1750245821042281
20860,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  final WebOSWebAppSession webAppSession=new WebOSWebAppSession(webAppLaunchSession,this);
  webAppSession.join(new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
      Util.postSuccess(listener,webAppSession);
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.2614213197969543
20861,"public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null || webAppSession.launchSession.getRawData() == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.send();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}","public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.subscribe();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}",0.987811955890888
20862,"public void joinWebApp(LaunchSession webAppLaunchSession,LaunchListener listener);","public void joinWebApp(String webAppId,LaunchListener listener);",0.7808219178082192
20863,"/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  boolean isDeviceReady=true;
  for (  DeviceService service : services.values()) {
    if (service.isServiceReady() == false) {
      service.setServiceReadyListener(serviceReadyListener);
      isDeviceReady=false;
    }
    service.setDeviceListeners(deviceListeners);
    service.connect();
  }
  if (isDeviceReady == true) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        ConnectableDeviceListenerPair pair : deviceListeners) {
          pair.listener.onDeviceReady(pair.device);
        }
      }
    }
);
  }
}","/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  for (  DeviceService service : services.values()) {
    if (!service.isConnected()) {
      service.connect();
    }
  }
}",0.6823529411764706
20864,"@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    for (    ConnectableDeviceListenerPair pair : deviceListeners)     pair.listener.onDeviceReady(pair.device);
    setLastConnected(Util.getTime());
  }
}",0.7372134038800705
20865,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceFilter());
  }
  if (deviceServiceClass == null)   return;
  if (DLNAService.class.isAssignableFrom(deviceServiceClass)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9805341783612496
20866,"private boolean isNetcast(ServiceDescription description){
  return ""String_Node_Str"".equalsIgnoreCase(description.getModelName()) && ""String_Node_Str"".equalsIgnoreCase(description.getModelDescription());
}","public boolean isNetcast(ServiceDescription description){
  boolean isNetcastTV=false;
  String modelName=description.getModelName();
  String modelDescription=description.getModelDescription();
  if (modelName != null && modelName.toUpperCase(Locale.US).equals(""String_Node_Str"")) {
    if (modelDescription != null && !(modelDescription.toUpperCase(Locale.US).contains(""String_Node_Str""))) {
      isNetcastTV=true;
    }
  }
  return isNetcastTV;
}",0.243531202435312
20867,"/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}","/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}",0.9714285714285714
20868,"@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}","@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}",0.9717691342534504
20869,"@Override public void disconnect(){
  isServiceReady=false;
  mApiClient.disconnect();
}","@Override public void disconnect(){
  mApiClient.disconnect();
}",0.8421052631578947
20870,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  isServiceReady=false;
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}",0.9837618403247632
20871,"@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
}","@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (listener != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        listener.onConnectionSuccess(CastService.this);
      }
    }
);
  }
}",0.5875706214689266
20872,"public DIALService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
  probeForAppSupport();
}","public DIALService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  httpClient=new DefaultHttpClient();
  ClientConnectionManager mgr=httpClient.getConnectionManager();
  HttpParams params=httpClient.getParams();
  httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(params,mgr.getSchemeRegistry()),params);
}",0.9713603818615753
20873,"@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    if (listener != null)     listener.onDeviceReady(ConnectableDevice.this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    if (DiscoveryManager.getInstance().getConnectableDeviceStore() != null)     DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    if (listener != null)     listener.onDeviceReady(ConnectableDevice.this);
    setLastConnected(Util.getTime());
  }
}",0.7804878048780488
20874,"/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public DiscoveryManagerListener getListener(){
  return listener;
}","/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public ConnectableDeviceListener getListener(){
  return listener;
}",0.976497346474602
20875,"/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}","/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  service.setListener(this);
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}",0.9813023855577048
20876,"/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(DiscoveryManagerListener listener){
  this.listener=listener;
}","/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(ConnectableDeviceListener listener){
  this.listener=listener;
}",0.9363867684478372
20877,"@Override public void onConnectionSuccess(DeviceService service){
}","@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}",0.4336569579288026
20878,"private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return null;
}","private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return foundDevice;
}",0.9855907780979828
20879,"private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return null;
}","private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return foundDevice;
}",0.9821640903686089
20880,"@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null)     allDevices.put(serviceDescription.getIpAddress(),device);
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}","@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null) {
      allDevices.put(serviceDescription.getIpAddress(),device);
      device.setIpAddress(serviceDescription.getIpAddress());
    }
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    device.setIpAddress(serviceDescription.getIpAddress());
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}",0.9414893617021276
20881,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9933195116332644
20882,"public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}","public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (device.getIpAddress() != null && compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}",0.9639344262295082
20883,"protected void handleRegistered(){
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
  state=State.REGISTERED;
  if (!commandQueue.isEmpty()) {
    LinkedHashSet<ServiceCommand<ResponseListener<Object>>> tempHashSet=new LinkedHashSet<ServiceCommand<ResponseListener<Object>>>(commandQueue);
    for (    ServiceCommand<ResponseListener<Object>> command : tempHashSet) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + command.getTarget());
      sendCommandImmediately(command);
      commandQueue.remove(command);
    }
  }
}","protected void handleRegistered(){
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
  state=State.REGISTERED;
  if (!commandQueue.isEmpty()) {
    LinkedHashSet<ServiceCommand<ResponseListener<Object>>> tempHashSet=new LinkedHashSet<ServiceCommand<ResponseListener<Object>>>(commandQueue);
    for (    ServiceCommand<ResponseListener<Object>> command : tempHashSet) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + command.getTarget());
      sendCommandImmediately(command);
      commandQueue.remove(command);
    }
  }
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onConnectionSuccess(WebOSTVService.this);
    }
  }
);
}",0.8789237668161435
20884,"public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}","public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
    jsonObj.putOpt(KEY_SERVICE_ID,serviceID);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}",0.9566854990583804
20885,"public ServiceDescription(JSONObject json){
  json.optString(KEY_FILTER,null);
  json.optString(KEY_IP_ADDRESS,null);
  json.optString(KEY_UUID,null);
  json.optString(KEY_FRIENDLY,null);
  json.optString(KEY_MODEL_NAME,null);
  json.optString(KEY_MODEL_NUMBER,null);
  json.optInt(KEY_PORT,-1);
  json.optString(KEY_VERSION,null);
}","public ServiceDescription(JSONObject json){
  serviceFilter=json.optString(KEY_FILTER,null);
  ipAddress=json.optString(KEY_IP_ADDRESS,null);
  UUID=json.optString(KEY_UUID,null);
  friendlyName=json.optString(KEY_FRIENDLY,null);
  modelName=json.optString(KEY_MODEL_NAME,null);
  modelNumber=json.optString(KEY_MODEL_NUMBER,null);
  port=json.optInt(KEY_PORT,-1);
  version=json.optString(KEY_VERSION,null);
  serviceID=json.optString(KEY_SERVICE_ID,null);
}",0.7676767676767676
20886,"@Override public void closeWebApp(LaunchSession launchSession,ResponseListener<Object> listener){
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  try {
    payload.put(""String_Node_Str"",launchSession.getAppId());
    payload.put(""String_Node_Str"",launchSession.getSessionId());
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,payload,true,listener);
  request.send();
}","@Override public void closeWebApp(LaunchSession launchSession,ResponseListener<Object> listener){
  if (launchSession == null)   Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
  if (launchSession.getSessionId() == null)   Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  try {
    payload.put(""String_Node_Str"",launchSession.getAppId());
    payload.put(""String_Node_Str"",launchSession.getSessionId());
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  WebOSWebAppSession webAppSession=new WebOSWebAppSession(launchSession,this);
  disconnectFromWebApp(webAppSession);
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,payload,true,listener);
  request.send();
}",0.7472687545520758
20887,"public void handleMessage(final Object message){
  if (mMessageSubscription == null)   return;
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
    }
  }
);
}","public void handleMessage(final Object message){
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this,message);
    }
  }
);
}",0.9017094017094016
20888,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
}",0.5897187196896218
20889,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  Cast.CastApi.joinApplication(mApiClient,webAppLaunchSession.getAppId(),webAppLaunchSession.getSessionId()).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>(){
    @Override public void onResult(    Cast.ApplicationConnectionResult result){
      Status status=result.getStatus();
      if (status.isSuccess()) {
        Util.postSuccess(listener,new CastWebAppSession(webAppLaunchSession,CastService.this));
      }
 else {
        Util.postError(listener,new ServiceCommandError(result.getStatus().getStatusCode(),result.getStatus().toString(),result));
      }
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.1750245821042281
20890,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  final WebOSWebAppSession webAppSession=new WebOSWebAppSession(webAppLaunchSession,this);
  webAppSession.join(new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
      Util.postSuccess(listener,webAppSession);
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.2614213197969543
20891,"public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null || webAppSession.launchSession.getRawData() == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.send();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}","public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.subscribe();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}",0.987811955890888
20892,"public void joinWebApp(LaunchSession webAppLaunchSession,LaunchListener listener);","public void joinWebApp(String webAppId,LaunchListener listener);",0.7808219178082192
20893,"public String getUUID(){
  return this.UUID;
}","public String getUUID(){
  if (this.UUID == null)   this.UUID=java.util.UUID.randomUUID().toString();
  return this.UUID;
}",0.5443786982248521
20894,"public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(""String_Node_Str"",getIpAddress());
    deviceObject.put(""String_Node_Str"",getFriendlyName());
    deviceObject.put(""String_Node_Str"",getModelName());
    deviceObject.put(""String_Node_Str"",getModelNumber());
    deviceObject.put(""String_Node_Str"",getLastSeenOnWifi());
    deviceObject.put(""String_Node_Str"",getLastConnected());
    deviceObject.put(""String_Node_Str"",getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(""String_Node_Str"",jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}","public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(KEY_ID,getUUID());
    deviceObject.put(KEY_LAST_IP,getIpAddress());
    deviceObject.put(KEY_FRIENDLY,getFriendlyName());
    deviceObject.put(KEY_MODEL_NAME,getModelName());
    deviceObject.put(KEY_MODEL_NUMBER,getModelNumber());
    deviceObject.put(KEY_LAST_SEEN,getLastSeenOnWifi());
    deviceObject.put(KEY_LAST_CONNECTED,getLastConnected());
    deviceObject.put(KEY_LAST_DETECTED,getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(KEY_SERVICES,jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}",0.2946778711484594
20895,"public ConnectableDevice(String ipAddress,String friendlyName,String modelName,String modelNumber){
  this.ipAddress=ipAddress;
  this.friendlyName=friendlyName;
  this.modelName=modelName;
  this.modelNumber=modelNumber;
  services=new ConcurrentHashMap<String,DeviceService>();
  deviceListeners=new CopyOnWriteArrayList<ConnectableDeviceListenerPair>();
}","public ConnectableDevice(JSONObject json,ConnectableDeviceStore deviceStore){
  setUUID(json.optString(KEY_ID,null));
  setLastKnownIPAddress(json.optString(KEY_LAST_IP,null));
  setFriendlyName(json.optString(KEY_FRIENDLY,null));
  setModelName(json.optString(KEY_MODEL_NAME,null));
  setModelNumber(json.optString(KEY_MODEL_NUMBER,null));
  setLastSeenOnWifi(json.optString(KEY_LAST_SEEN,null));
  setLastConnected(json.optLong(KEY_LAST_CONNECTED,0));
  setLastDetection(json.optLong(KEY_LAST_DETECTED,0));
  JSONObject jsonServices=json.optJSONObject(KEY_SERVICES);
  if (jsonServices != null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=jsonServices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject jsonService=jsonServices.optJSONObject(key);
      if (jsonService != null) {
        DeviceService newService=DeviceService.getService(jsonService,deviceStore);
        if (newService != null)         addService(newService);
      }
    }
  }
}",0.1013215859030837
20896,"/** 
 * A List of all ConnectableDevices in the ConnectableDeviceStore. These ConnectableDevice objects are for informational use only, and should not be interacted with. DiscoveryManager uses these ConnectableDevice objects to populate discovered ConnectableDevices with relevant data (last connected, pairing info, etc).
 */
public List<ConnectableDevice> getStoredDevices();","/** 
 * A JSONObject of all ConnectableDevices in the ConnectableDeviceStore. To gt a strongly-typed ConnectableDevice object, use the `getDevice(String);` method.
 */
public JSONObject getStoredDevices();",0.3676975945017182
20897,"@Override public void getAppList(final AppListListener listener){
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications=apps;
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications=apps;
                  Util.postSuccess(listener,apps);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","@Override public void getAppList(final AppListListener listener){
  applications.clear();
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications.addAll(apps);
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications.addAll(apps);
                  Util.postSuccess(listener,applications);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}",0.975254730713246
20898,"/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  boolean isDeviceReady=true;
  for (  DeviceService service : services.values()) {
    if (service.isServiceReady() == false) {
      service.setServiceReadyListener(serviceReadyListener);
      isDeviceReady=false;
    }
    service.setDeviceListeners(deviceListeners);
    service.connect();
  }
  if (isDeviceReady == true) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        ConnectableDeviceListenerPair pair : deviceListeners) {
          pair.listener.onDeviceReady(pair.device);
        }
      }
    }
);
  }
}","/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  for (  DeviceService service : services.values()) {
    if (!service.isConnected()) {
      service.connect();
    }
  }
}",0.6823529411764706
20899,"@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    for (    ConnectableDeviceListenerPair pair : deviceListeners)     pair.listener.onDeviceReady(pair.device);
    setLastConnected(Util.getTime());
  }
}",0.7372134038800705
20900,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceFilter());
  }
  if (deviceServiceClass == null)   return;
  if (DLNAService.class.isAssignableFrom(deviceServiceClass)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9805341783612496
20901,"private boolean isNetcast(ServiceDescription description){
  return ""String_Node_Str"".equalsIgnoreCase(description.getModelName()) && ""String_Node_Str"".equalsIgnoreCase(description.getModelDescription());
}","public boolean isNetcast(ServiceDescription description){
  boolean isNetcastTV=false;
  String modelName=description.getModelName();
  String modelDescription=description.getModelDescription();
  if (modelName != null && modelName.toUpperCase(Locale.US).equals(""String_Node_Str"")) {
    if (modelDescription != null && !(modelDescription.toUpperCase(Locale.US).contains(""String_Node_Str""))) {
      isNetcastTV=true;
    }
  }
  return isNetcastTV;
}",0.243531202435312
20902,"/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}","/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}",0.9714285714285714
20903,"@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}","@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}",0.9717691342534504
20904,"@Override public void disconnect(){
  isServiceReady=false;
  mApiClient.disconnect();
}","@Override public void disconnect(){
  mApiClient.disconnect();
}",0.8421052631578947
20905,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  isServiceReady=false;
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}",0.9837618403247632
20906,"@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
}","@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (listener != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        listener.onConnectionSuccess(CastService.this);
      }
    }
);
  }
}",0.5875706214689266
20907,"/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  boolean isDeviceReady=true;
  for (  DeviceService service : services.values()) {
    if (service.isServiceReady() == false) {
      service.setServiceReadyListener(serviceReadyListener);
      isDeviceReady=false;
    }
    service.setDeviceListeners(deviceListeners);
    service.connect();
  }
  if (isDeviceReady == true) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        ConnectableDeviceListenerPair pair : deviceListeners) {
          pair.listener.onDeviceReady(pair.device);
        }
      }
    }
);
  }
}","/** 
 * Enumerates through all DeviceServices and attempts to connect to each of them. When all of a ConnectableDevice's DeviceServices are ready to receive commands, the ConnectableDevice will send a onDeviceReady message to its listener. It is always necessary to call connect on a ConnectableDevice, even if it contains no connectable DeviceServices.
 */
public void connect(){
  for (  DeviceService service : services.values()) {
    if (!service.isConnected()) {
      service.connect();
    }
  }
}",0.6823529411764706
20908,"@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}","@Override public void onConnectionSuccess(DeviceService service){
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    for (    ConnectableDeviceListenerPair pair : deviceListeners)     pair.listener.onDeviceReady(pair.device);
    setLastConnected(Util.getTime());
  }
}",0.7372134038800705
20909,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceFilter());
  }
  if (deviceServiceClass == null)   return;
  if (DLNAService.class.isAssignableFrom(deviceServiceClass)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9805341783612496
20910,"private boolean isNetcast(ServiceDescription description){
  return ""String_Node_Str"".equalsIgnoreCase(description.getModelName()) && ""String_Node_Str"".equalsIgnoreCase(description.getModelDescription());
}","public boolean isNetcast(ServiceDescription description){
  boolean isNetcastTV=false;
  String modelName=description.getModelName();
  String modelDescription=description.getModelDescription();
  if (modelName != null && modelName.toUpperCase(Locale.US).equals(""String_Node_Str"")) {
    if (modelDescription != null && !(modelDescription.toUpperCase(Locale.US).contains(""String_Node_Str""))) {
      isNetcastTV=true;
    }
  }
  return isNetcastTV;
}",0.243531202435312
20911,"/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}","/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}",0.9714285714285714
20912,"@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}","@Override public void onRouteAdded(MediaRouter router,RouteInfo route){
  super.onRouteAdded(router,route);
  CastDevice castDevice=CastDevice.getFromBundle(route.getExtras());
  String ipAddress=castDevice.getIpAddress().getHostAddress();
  String uuid=castDevice.getDeviceId();
  String friendlyName=castDevice.getFriendlyName();
  String modelName=castDevice.getModelName();
  String modelNumber=castDevice.getDeviceVersion();
  int port=castDevice.getServicePort();
  String modelDescription=route.getDescription();
  String serviceFilter=""String_Node_Str"";
  ServiceDescription oldService=services.get(uuid);
  ServiceDescription newService;
  if (oldService == null) {
    newService=new CastServiceDescription(serviceFilter,uuid,ipAddress,castDevice);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    services.put(uuid,newService);
  }
 else {
    newService=oldService;
    newService.setIpAddress(ipAddress);
    newService.setFriendlyName(friendlyName);
    newService.setModelName(modelName);
    newService.setModelNumber(modelNumber);
    newService.setModelDescription(modelDescription);
    newService.setPort(port);
    newService.setServiceID(CastService.ID);
    ((CastServiceDescription)newService).setCastDevice(castDevice);
    services.put(uuid,newService);
  }
  for (  DiscoveryProviderListener listenter : serviceListeners) {
    listenter.onServiceAdded(CastDiscoveryProvider.this,newService);
  }
}",0.9717691342534504
20913,"@Override public void disconnect(){
  isServiceReady=false;
  mApiClient.disconnect();
}","@Override public void disconnect(){
  mApiClient.disconnect();
}",0.8421052631578947
20914,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  isServiceReady=false;
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}",0.9837618403247632
20915,"@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
}","@Override public void onConnected(Bundle connectionHint){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  isConnected=true;
  if (listener != null) {
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        listener.onConnectionSuccess(CastService.this);
      }
    }
);
  }
}",0.5875706214689266
20916,"public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  this.castDevice=((CastServiceDescription)serviceDescription).getCastDevice();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
  Cast.CastOptions.Builder apiOptionsBuilder=Cast.CastOptions.builder(castDevice,mCastClientListener);
  mApiClient=new GoogleApiClient.Builder(DiscoveryManager.getInstance().getContext()).addApi(Cast.API,apiOptionsBuilder.build()).addConnectionCallbacks(mConnectionCallbacks).addOnConnectionFailedListener(mConnectionFailedListener).build();
}","public CastService(ServiceDescription serviceDescription,ServiceConfig serviceConfig){
  super(serviceDescription,serviceConfig);
  setCapabilities();
  mCastClientListener=new CastListener();
  mConnectionCallbacks=new ConnectionCallbacks();
  mConnectionFailedListener=new ConnectionFailedListener();
}",0.5897187196896218
20917,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  Cast.CastApi.joinApplication(mApiClient,webAppLaunchSession.getAppId(),webAppLaunchSession.getSessionId()).setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>(){
    @Override public void onResult(    Cast.ApplicationConnectionResult result){
      Status status=result.getStatus();
      if (status.isSuccess()) {
        Util.postSuccess(listener,new CastWebAppSession(webAppLaunchSession,CastService.this));
      }
 else {
        Util.postError(listener,new ServiceCommandError(result.getStatus().getStatusCode(),result.getStatus().toString(),result));
      }
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.1750245821042281
20918,"@Override public void joinWebApp(final LaunchSession webAppLaunchSession,final WebAppSession.LaunchListener listener){
  final WebOSWebAppSession webAppSession=new WebOSWebAppSession(webAppLaunchSession,this);
  webAppSession.join(new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
    @Override public void onSuccess(    Object object){
      Util.postSuccess(listener,webAppSession);
    }
  }
);
}","@Override public void joinWebApp(String webAppId,WebAppSession.LaunchListener listener){
  LaunchSession launchSession=LaunchSession.launchSessionForAppId(webAppId);
  launchSession.setSessionType(LaunchSessionType.WebApp);
  launchSession.setService(this);
  joinWebApp(launchSession,listener);
}",0.2614213197969543
20919,"public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null || webAppSession.launchSession.getRawData() == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.send();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}","public void connectToWebApp(final WebOSWebAppSession webAppSession,final boolean joinOnly,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null) {
    Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  final String webAppHostId=String.format(""String_Node_Str"",webAppSession.launchSession.getAppId());
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppSubscriptions.containsKey(webAppSession.launchSession.getAppId()) && mAppToAppMessageListeners.containsKey(webAppHostId)) {
    mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
    Util.postSuccess(connectionListener,webAppSession);
    return;
  }
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=jsonObj.optString(""String_Node_Str"");
      if (!state.equalsIgnoreCase(""String_Node_Str"")) {
        if (joinOnly && state.equalsIgnoreCase(""String_Node_Str"")) {
          Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
        }
        return;
      }
      if (webAppSession.messageHandler != null)       mAppToAppMessageListeners.put(webAppHostId,webAppSession.messageHandler);
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<ResponseListener<Object>> subscription=mAppToAppSubscriptions.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str""))         subscription.unsubscribe();
        mAppToAppMessageListeners.remove(subscription);
        mAppToAppSubscriptions.remove(webAppHostId);
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.subscribe();
  mAppToAppSubscriptions.put(launchSession.getAppId(),subscription);
}",0.987811955890888
20920,"public void joinWebApp(LaunchSession webAppLaunchSession,LaunchListener listener);","public void joinWebApp(String webAppId,LaunchListener listener);",0.7808219178082192
20921,"/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public DiscoveryManagerListener getListener(){
  return listener;
}","/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public ConnectableDeviceListener getListener(){
  return listener;
}",0.976497346474602
20922,"/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}","/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  service.setListener(this);
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}",0.9813023855577048
20923,"/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(DiscoveryManagerListener listener){
  this.listener=listener;
}","/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(ConnectableDeviceListener listener){
  this.listener=listener;
}",0.9363867684478372
20924,"@Override public void onConnectionSuccess(DeviceService service){
}","@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}",0.4336569579288026
20925,"private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return null;
}","private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return foundDevice;
}",0.9855907780979828
20926,"private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return null;
}","private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return foundDevice;
}",0.9821640903686089
20927,"@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null)     allDevices.put(serviceDescription.getIpAddress(),device);
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}","@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null) {
      allDevices.put(serviceDescription.getIpAddress(),device);
      device.setIpAddress(serviceDescription.getIpAddress());
    }
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    device.setIpAddress(serviceDescription.getIpAddress());
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}",0.9414893617021276
20928,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9933195116332644
20929,"public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}","public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (device.getIpAddress() != null && compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}",0.9639344262295082
20930,"public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}","public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
    jsonObj.putOpt(KEY_SERVICE_ID,serviceID);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}",0.9566854990583804
20931,"public ServiceDescription(JSONObject json){
  json.optString(KEY_FILTER,null);
  json.optString(KEY_IP_ADDRESS,null);
  json.optString(KEY_UUID,null);
  json.optString(KEY_FRIENDLY,null);
  json.optString(KEY_MODEL_NAME,null);
  json.optString(KEY_MODEL_NUMBER,null);
  json.optInt(KEY_PORT,-1);
  json.optString(KEY_VERSION,null);
}","public ServiceDescription(JSONObject json){
  serviceFilter=json.optString(KEY_FILTER,null);
  ipAddress=json.optString(KEY_IP_ADDRESS,null);
  UUID=json.optString(KEY_UUID,null);
  friendlyName=json.optString(KEY_FRIENDLY,null);
  modelName=json.optString(KEY_MODEL_NAME,null);
  modelNumber=json.optString(KEY_MODEL_NUMBER,null);
  port=json.optInt(KEY_PORT,-1);
  version=json.optString(KEY_VERSION,null);
  serviceID=json.optString(KEY_SERVICE_ID,null);
}",0.7676767676767676
20932,"public String getUUID(){
  return this.UUID;
}","public String getUUID(){
  if (this.UUID == null)   this.UUID=java.util.UUID.randomUUID().toString();
  return this.UUID;
}",0.5443786982248521
20933,"public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(""String_Node_Str"",getIpAddress());
    deviceObject.put(""String_Node_Str"",getFriendlyName());
    deviceObject.put(""String_Node_Str"",getModelName());
    deviceObject.put(""String_Node_Str"",getModelNumber());
    deviceObject.put(""String_Node_Str"",getLastSeenOnWifi());
    deviceObject.put(""String_Node_Str"",getLastConnected());
    deviceObject.put(""String_Node_Str"",getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(""String_Node_Str"",jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}","public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(KEY_ID,getUUID());
    deviceObject.put(KEY_LAST_IP,getIpAddress());
    deviceObject.put(KEY_FRIENDLY,getFriendlyName());
    deviceObject.put(KEY_MODEL_NAME,getModelName());
    deviceObject.put(KEY_MODEL_NUMBER,getModelNumber());
    deviceObject.put(KEY_LAST_SEEN,getLastSeenOnWifi());
    deviceObject.put(KEY_LAST_CONNECTED,getLastConnected());
    deviceObject.put(KEY_LAST_DETECTED,getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(KEY_SERVICES,jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}",0.2946778711484594
20934,"public ConnectableDevice(String ipAddress,String friendlyName,String modelName,String modelNumber){
  this.ipAddress=ipAddress;
  this.friendlyName=friendlyName;
  this.modelName=modelName;
  this.modelNumber=modelNumber;
  services=new ConcurrentHashMap<String,DeviceService>();
  deviceListeners=new CopyOnWriteArrayList<ConnectableDeviceListenerPair>();
}","public ConnectableDevice(JSONObject json,ConnectableDeviceStore deviceStore){
  setUUID(json.optString(KEY_ID,null));
  setLastKnownIPAddress(json.optString(KEY_LAST_IP,null));
  setFriendlyName(json.optString(KEY_FRIENDLY,null));
  setModelName(json.optString(KEY_MODEL_NAME,null));
  setModelNumber(json.optString(KEY_MODEL_NUMBER,null));
  setLastSeenOnWifi(json.optString(KEY_LAST_SEEN,null));
  setLastConnected(json.optLong(KEY_LAST_CONNECTED,0));
  setLastDetection(json.optLong(KEY_LAST_DETECTED,0));
  JSONObject jsonServices=json.optJSONObject(KEY_SERVICES);
  if (jsonServices != null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=jsonServices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject jsonService=jsonServices.optJSONObject(key);
      if (jsonService != null) {
        DeviceService newService=DeviceService.getService(jsonService,deviceStore);
        if (newService != null)         addService(newService);
      }
    }
  }
}",0.1013215859030837
20935,"/** 
 * A List of all ConnectableDevices in the ConnectableDeviceStore. These ConnectableDevice objects are for informational use only, and should not be interacted with. DiscoveryManager uses these ConnectableDevice objects to populate discovered ConnectableDevices with relevant data (last connected, pairing info, etc).
 */
public List<ConnectableDevice> getStoredDevices();","/** 
 * A JSONObject of all ConnectableDevices in the ConnectableDeviceStore. To gt a strongly-typed ConnectableDevice object, use the `getDevice(String);` method.
 */
public JSONObject getStoredDevices();",0.3676975945017182
20936,"@Override public void getAppList(final AppListListener listener){
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications=apps;
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications=apps;
                  Util.postSuccess(listener,apps);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","@Override public void getAppList(final AppListListener listener){
  applications.clear();
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications.addAll(apps);
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications.addAll(apps);
                  Util.postSuccess(listener,applications);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}",0.975254730713246
20937,"/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public DiscoveryManagerListener getListener(){
  return listener;
}","/** 
 * Listener which should receive discovery updates. It is not necessary to set this delegate property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the delegate will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.
 */
public ConnectableDeviceListener getListener(){
  return listener;
}",0.976497346474602
20938,"/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}","/** 
 * Adds a DeviceService to the ConnectableDevice instance. Only one instance of each DeviceService type (webOS, Netcast, etc) may be attached to a single ConnectableDevice instance. If a device contains your service type already, your service will not be added.
 * @param service DeviceService to be added
 */
public void addService(DeviceService service){
  final List<String> added=getMismatchCapabilities(service.getCapabilities(),getCapabilities());
  service.setListener(this);
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      for (      ConnectableDeviceListenerPair pair : deviceListeners) {
        pair.listener.onCapabilityUpdated(pair.device,added,null);
      }
    }
  }
);
  services.put(service.getServiceDescription().getServiceFilter(),service);
}",0.9813023855577048
20939,"/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(DiscoveryManagerListener listener){
  this.listener=listener;
}","/** 
 * Sets the DiscoveryManagerListener
 * @param listener The listener that should receive callbacks.
 */
public void setListener(ConnectableDeviceListener listener){
  this.listener=listener;
}",0.9363867684478372
20940,"@Override public void onConnectionSuccess(DeviceService service){
}","@Override public void onConnectionSuccess(DeviceService service){
  if (listener != null) {
  }
  if (isConnected()) {
    DiscoveryManager.getInstance().getConnectableDeviceStore().addDevice(this);
    setLastConnected(Util.getTime());
  }
}",0.4336569579288026
20941,"private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return null;
}","private JSONObject getStoredDevice(String uuid){
  JSONObject foundDevice=storedDevices.optJSONObject(uuid);
  if (foundDevice == null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=storedDevices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject device=storedDevices.optJSONObject(key);
      JSONObject services=device.optJSONObject(ConnectableDevice.KEY_SERVICES);
      if (services != null && services.has(uuid))       return device;
    }
  }
  return foundDevice;
}",0.9855907780979828
20942,"private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return null;
}","private ConnectableDevice getActiveDevice(String uuid){
  ConnectableDevice foundDevice=activeDevices.get(uuid);
  if (foundDevice == null) {
    for (    ConnectableDevice device : activeDevices.values()) {
      for (      DeviceService service : device.getServices()) {
        if (uuid.equals(service.getServiceDescription().getUUID())) {
          return foundDevice;
        }
      }
    }
  }
  return foundDevice;
}",0.9821640903686089
20943,"@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null)     allDevices.put(serviceDescription.getIpAddress(),device);
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}","@Override public void onServiceAdded(DiscoveryProvider provider,ServiceDescription serviceDescription){
  Log.d(""String_Node_Str"",serviceDescription.getFriendlyName() + ""String_Node_Str"" + serviceDescription.getServiceID()+ ""String_Node_Str"");
  boolean deviceIsNew=false;
  ConnectableDevice device=null;
  if (connectableDeviceStore != null) {
    device=connectableDeviceStore.getDevice(serviceDescription.getUUID());
    if (device != null) {
      allDevices.put(serviceDescription.getIpAddress(),device);
      device.setIpAddress(serviceDescription.getIpAddress());
    }
  }
  if (device == null)   device=allDevices.get(serviceDescription.getIpAddress());
  if (device == null) {
    device=new ConnectableDevice(serviceDescription);
    device.setIpAddress(serviceDescription.getIpAddress());
    allDevices.put(serviceDescription.getIpAddress(),device);
    deviceIsNew=true;
  }
  device.setLastDetection(Util.getTime());
  device.setLastKnownIPAddress(serviceDescription.getIpAddress());
  addServiceDescriptionToDevice(serviceDescription,device);
  if (device.getServices().size() == 0)   return;
  if (deviceIsNew)   handleDeviceAdd(device);
 else   handleDeviceUpdate(device);
}",0.9414893617021276
20944,"@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}","@SuppressWarnings(""String_Node_Str"") public void addServiceDescriptionToDevice(ServiceDescription desc,ConnectableDevice device){
  Class<? extends DeviceService> deviceServiceClass;
  if (isNetcast(desc)) {
    deviceServiceClass=NetcastTVService.class;
    Method m;
    Object result=null;
    try {
      m=deviceServiceClass.getMethod(""String_Node_Str"");
      result=m.invoke(null);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (result == null)     return;
    JSONObject discoveryParameters=(JSONObject)result;
    desc.setServiceID(discoveryParameters.optString(""String_Node_Str"",null));
  }
 else {
    deviceServiceClass=(Class<DeviceService>)deviceClasses.get(desc.getServiceID());
  }
  if (deviceServiceClass.isAssignableFrom(DLNAService.class)) {
    String netcast=""String_Node_Str"";
    String webos=""String_Node_Str"";
    int locNet=desc.getLocationXML().indexOf(netcast);
    int locWeb=desc.getLocationXML().indexOf(webos);
    if (locNet == -1 && locWeb == -1)     return;
  }
  ServiceConfig serviceConfig=new ServiceConfig(desc);
  serviceConfig.setListener(DiscoveryManager.this);
  boolean hasType=false;
  boolean hasService=false;
  for (  DeviceService service : device.getServices()) {
    if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {
      hasType=true;
      if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {
        hasService=true;
      }
      break;
    }
  }
  if (hasType) {
    if (hasService) {
      device.setServiceDescription(desc);
      DeviceService alreadyAddedService=device.getServiceByName(desc.getServiceID());
      if (alreadyAddedService != null)       alreadyAddedService.setServiceDescription(desc);
      return;
    }
    device.removeServiceByName(desc.getServiceID());
  }
  DeviceService deviceService=DeviceService.getService(deviceServiceClass,desc,serviceConfig);
  device.addService(deviceService);
}",0.9933195116332644
20945,"public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}","public void handleDeviceUpdate(ConnectableDevice device){
  if (deviceIsCompatible(device)) {
    if (device.getIpAddress() != null && compatibleDevices.containsKey(device.getIpAddress())) {
      for (      DiscoveryManagerListener listenter : discoveryListeners) {
        listenter.onDeviceUpdated(this,device);
      }
    }
 else {
      handleDeviceAdd(device);
    }
  }
 else {
    compatibleDevices.remove(device.getIpAddress());
    handleDeviceLoss(device);
  }
}",0.9639344262295082
20946,"protected void handleRegistered(){
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
  state=State.REGISTERED;
  if (!commandQueue.isEmpty()) {
    LinkedHashSet<ServiceCommand<ResponseListener<Object>>> tempHashSet=new LinkedHashSet<ServiceCommand<ResponseListener<Object>>>(commandQueue);
    for (    ServiceCommand<ResponseListener<Object>> command : tempHashSet) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + command.getTarget());
      sendCommandImmediately(command);
      commandQueue.remove(command);
    }
  }
}","protected void handleRegistered(){
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
  state=State.REGISTERED;
  if (!commandQueue.isEmpty()) {
    LinkedHashSet<ServiceCommand<ResponseListener<Object>>> tempHashSet=new LinkedHashSet<ServiceCommand<ResponseListener<Object>>>(commandQueue);
    for (    ServiceCommand<ResponseListener<Object>> command : tempHashSet) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + command.getTarget());
      sendCommandImmediately(command);
      commandQueue.remove(command);
    }
  }
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onConnectionSuccess(WebOSTVService.this);
    }
  }
);
}",0.8789237668161435
20947,"public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}","public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.putOpt(KEY_FILTER,serviceFilter);
    jsonObj.putOpt(KEY_IP_ADDRESS,ipAddress);
    jsonObj.putOpt(KEY_UUID,UUID);
    jsonObj.putOpt(KEY_FRIENDLY,friendlyName);
    jsonObj.putOpt(KEY_MODEL_NAME,modelName);
    jsonObj.putOpt(KEY_MODEL_NUMBER,modelNumber);
    jsonObj.putOpt(KEY_PORT,port);
    jsonObj.putOpt(KEY_VERSION,version);
    jsonObj.putOpt(KEY_SERVICE_ID,serviceID);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}",0.9566854990583804
20948,"public ServiceDescription(JSONObject json){
  json.optString(KEY_FILTER,null);
  json.optString(KEY_IP_ADDRESS,null);
  json.optString(KEY_UUID,null);
  json.optString(KEY_FRIENDLY,null);
  json.optString(KEY_MODEL_NAME,null);
  json.optString(KEY_MODEL_NUMBER,null);
  json.optInt(KEY_PORT,-1);
  json.optString(KEY_VERSION,null);
}","public ServiceDescription(JSONObject json){
  serviceFilter=json.optString(KEY_FILTER,null);
  ipAddress=json.optString(KEY_IP_ADDRESS,null);
  UUID=json.optString(KEY_UUID,null);
  friendlyName=json.optString(KEY_FRIENDLY,null);
  modelName=json.optString(KEY_MODEL_NAME,null);
  modelNumber=json.optString(KEY_MODEL_NUMBER,null);
  port=json.optInt(KEY_PORT,-1);
  version=json.optString(KEY_VERSION,null);
  serviceID=json.optString(KEY_SERVICE_ID,null);
}",0.7676767676767676
20949,"@Override public void getAppList(final AppListListener listener){
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications=apps;
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications=apps;
                  Util.postSuccess(listener,apps);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}","@Override public void getAppList(final AppListListener listener){
  applications.clear();
  getTotalNumberOfApplications(2,new AppCountListener(){
    @Override public void onSuccess(    final Integer count){
      getApplications(2,count,new AppListListener(){
        @Override public void onSuccess(        List<AppInfo> apps){
          applications.addAll(apps);
          getTotalNumberOfApplications(3,new AppCountListener(){
            @Override public void onSuccess(            final Integer count){
              getApplications(3,count,new AppListListener(){
                @Override public void onSuccess(                List<AppInfo> apps){
                  applications.addAll(apps);
                  Util.postSuccess(listener,applications);
                }
                @Override public void onError(                ServiceCommandError error){
                  Util.postError(listener,error);
                }
              }
);
            }
            @Override public void onError(            ServiceCommandError error){
              Util.postError(listener,error);
            }
          }
);
        }
        @Override public void onError(        ServiceCommandError error){
          Util.postError(listener,error);
        }
      }
);
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}",0.975254730713246
20950,"public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  stop(new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      final String instanceId=""String_Node_Str"";
      ResponseListener<Object> responseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          String method=""String_Node_Str"";
          Map<String,String> parameters=new HashMap<String,String>();
          parameters.put(""String_Node_Str"",""String_Node_Str"");
          JSONObject payload=getMethodBody(instanceId,method,parameters);
          ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
            @Override public void onSuccess(            Object response){
              LaunchSession launchSession=new LaunchSession();
              launchSession.setService(DLNAService.this);
              launchSession.setSessionType(LaunchSessionType.Media);
              Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
            }
            @Override public void onError(            ServiceCommandError error){
              if (listener != null) {
                listener.onError(error);
              }
            }
          }
;
          ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
          request.send();
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      String method=""String_Node_Str"";
      JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mimeType,title);
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      if (listener != null) {
        listener.onError(error);
      }
    }
  }
);
}","public void displayMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final LaunchListener listener){
  stop(new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      final String instanceId=""String_Node_Str"";
      String[] mediaElements=mimeType.split(""String_Node_Str"");
      String mediaType=mediaElements[0];
      String mediaFormat=mediaElements[1];
      if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {
        Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
        return;
      }
      mediaFormat=""String_Node_Str"".equals(mediaFormat) ? ""String_Node_Str"" : mediaFormat;
      String mMimeType=String.format(""String_Node_Str"",mediaType,mediaFormat);
      ResponseListener<Object> responseListener=new ResponseListener<Object>(){
        @Override public void onSuccess(        Object response){
          String method=""String_Node_Str"";
          Map<String,String> parameters=new HashMap<String,String>();
          parameters.put(""String_Node_Str"",""String_Node_Str"");
          JSONObject payload=getMethodBody(instanceId,method,parameters);
          ResponseListener<Object> playResponseListener=new ResponseListener<Object>(){
            @Override public void onSuccess(            Object response){
              LaunchSession launchSession=new LaunchSession();
              launchSession.setService(DLNAService.this);
              launchSession.setSessionType(LaunchSessionType.Media);
              Util.postSuccess(listener,new MediaLaunchObject(launchSession,DLNAService.this));
            }
            @Override public void onError(            ServiceCommandError error){
              if (listener != null) {
                listener.onError(error);
              }
            }
          }
;
          ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,payload,playResponseListener);
          request.send();
        }
        @Override public void onError(        ServiceCommandError error){
          if (listener != null) {
            listener.onError(error);
          }
        }
      }
;
      String method=""String_Node_Str"";
      JSONObject httpMessage=getSetAVTransportURIBody(method,instanceId,url,mMimeType,title);
      ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(DLNAService.this,method,httpMessage,responseListener);
      request.send();
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
);
}",0.8760162601626016
20951,"@Override public void playMedia(String url,String mimeType,String title,String description,String iconSrc,boolean shouldLoop,LaunchListener listener){
  displayMedia(url,mimeType,title,description,iconSrc,listener);
}","@Override public void playMedia(final String url,final String mimeType,final String title,final String description,final String iconSrc,final boolean shouldLoop,final LaunchListener listener){
  displayMedia(url,mimeType,title,description,iconSrc,listener);
}",0.6680672268907563
20952,"@Override public CapabilityPriorityLevel getLauncherCapabilityLevel(){
  return CapabilityPriorityLevel.NORMAL;
}","@Override public CapabilityPriorityLevel getLauncherCapabilityLevel(){
  return CapabilityPriorityLevel.HIGH;
}",0.9553571428571428
20953,"/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
        if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
          if (mShouldResume) {
            for (            DiscoveryProvider provider : discoveryProviders) {
              provider.start();
            }
          }
        }
 else {
          Log.w(""String_Node_Str"",""String_Node_Str"");
          for (          DiscoveryProvider provider : discoveryProviders) {
            provider.reset();
          }
          allDevices.clear();
          for (          ConnectableDevice device : compatibleDevices.values()) {
            handleDeviceLoss(device);
          }
          compatibleDevices.clear();
          mShouldResume=true;
          stop();
        }
      }
    }
  }
;
}","/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
        if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
          TimerTask task=new TimerTask(){
            @Override public void run(){
              if (mShouldResume) {
                for (                DiscoveryProvider provider : discoveryProviders) {
                  provider.start();
                }
              }
            }
          }
;
          Timer t=new Timer();
          t.schedule(task,2000);
        }
 else {
          Log.w(""String_Node_Str"",""String_Node_Str"");
          for (          DiscoveryProvider provider : discoveryProviders) {
            provider.reset();
          }
          allDevices.clear();
          for (          ConnectableDevice device : compatibleDevices.values()) {
            handleDeviceLoss(device);
          }
          compatibleDevices.clear();
          mShouldResume=true;
          stop();
        }
      }
    }
  }
;
}",0.9505098234270082
20954,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
    if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
      if (mShouldResume) {
        for (        DiscoveryProvider provider : discoveryProviders) {
          provider.start();
        }
      }
    }
 else {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      for (      DiscoveryProvider provider : discoveryProviders) {
        provider.reset();
      }
      allDevices.clear();
      for (      ConnectableDevice device : compatibleDevices.values()) {
        handleDeviceLoss(device);
      }
      compatibleDevices.clear();
      mShouldResume=true;
      stop();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
    if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
      TimerTask task=new TimerTask(){
        @Override public void run(){
          if (mShouldResume) {
            for (            DiscoveryProvider provider : discoveryProviders) {
              provider.start();
            }
          }
        }
      }
;
      Timer t=new Timer();
      t.schedule(task,2000);
    }
 else {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      for (      DiscoveryProvider provider : discoveryProviders) {
        provider.reset();
      }
      allDevices.clear();
      for (      ConnectableDevice device : compatibleDevices.values()) {
        handleDeviceLoss(device);
      }
      compatibleDevices.clear();
      mShouldResume=true;
      stop();
    }
  }
}",0.9001711351968055
20955,"public void sendSearch(){
  List<String> killKeys=new ArrayList<String>();
  long killPoint=new Date().getTime() - (RESCAN_INTERVAL * RESCAN_ATTEMPTS);
  for (  String key : foundServices.keySet()) {
    ServiceDescription service=foundServices.get(key);
    if (service.getLastDetection() < killPoint) {
      killKeys.add(key);
    }
  }
  for (  String key : killKeys) {
    final ServiceDescription service=foundServices.get(key);
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        DiscoveryProviderListener listener : serviceListeners) {
          listener.onServiceRemoved(SSDPDiscoveryProvider.this,service);
        }
      }
    }
);
    foundServices.remove(key);
  }
  for (  JSONObject searchTarget : serviceFilters) {
    SSDPSearchMsg search=null;
    try {
      search=new SSDPSearchMsg(searchTarget.getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return;
    }
    final String message=search.toString();
    for (int i=0; i < 3; i++) {
      TimerTask task=new TimerTask(){
        @Override public void run(){
          try {
            mSSDPSocket.send(message);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
;
      dataTimer.schedule(task,i * 1000);
    }
  }
  ;
}","public void sendSearch(){
  List<String> killKeys=new ArrayList<String>();
  long killPoint=new Date().getTime() - (RESCAN_INTERVAL * RESCAN_ATTEMPTS);
  for (  String key : foundServices.keySet()) {
    ServiceDescription service=foundServices.get(key);
    if (service.getLastDetection() < killPoint) {
      killKeys.add(key);
    }
  }
  for (  String key : killKeys) {
    final ServiceDescription service=foundServices.get(key);
    Util.runOnUI(new Runnable(){
      @Override public void run(){
        for (        DiscoveryProviderListener listener : serviceListeners) {
          listener.onServiceRemoved(SSDPDiscoveryProvider.this,service);
        }
      }
    }
);
    foundServices.remove(key);
  }
  for (  JSONObject searchTarget : serviceFilters) {
    SSDPSearchMsg search=null;
    try {
      search=new SSDPSearchMsg(searchTarget.getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return;
    }
    final String message=search.toString();
    for (int i=0; i < 3; i++) {
      TimerTask task=new TimerTask(){
        @Override public void run(){
          try {
            if (mSSDPSocket != null)             mSSDPSocket.send(message);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
;
      dataTimer.schedule(task,i * 1000);
    }
  }
  ;
}",0.9864120455380097
20956,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  HttpResponse response=null;
  int code=-1;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
    HttpPost post=(HttpPost)request;
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity((String)payload);
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    if (entity == null) {
      Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
      return;
    }
    post.setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 201) {
      HttpEntity entity=response.getEntity();
      String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  HttpResponse response=null;
  int code=-1;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
    HttpPost post=(HttpPost)request;
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity((String)payload);
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    if (entity == null) {
      Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
      return;
    }
    post.setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 201) {
      HttpEntity entity=response.getEntity();
      String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9709465791940018
20957,"@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Util.runInBackground(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      HttpResponse response=null;
      int code=-1;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
        HttpPost post=(HttpPost)request;
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity((String)payload);
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        if (entity == null) {
          Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
          return;
        }
        post.setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        code=response.getStatusLine().getStatusCode();
        if (code == 200 || code == 201) {
          HttpEntity entity=response.getEntity();
          String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
      }
 catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}","@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Util.runInBackground(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      HttpResponse response=null;
      int code=-1;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
        HttpPost post=(HttpPost)request;
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity((String)payload);
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        if (entity == null) {
          Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
          return;
        }
        post.setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        code=response.getStatusLine().getStatusCode();
        if (code == 200 || code == 201) {
          HttpEntity entity=response.getEntity();
          String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
      }
 catch (      IllegalStateException e) {
        e.printStackTrace();
      }
catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.9724192277383766
20958,"@Override public void connect(){
  mServiceReachability=DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(),this);
  mServiceReachability.start();
  connected=true;
}","@Override public void connect(){
  connected=true;
}",0.4297520661157025
20959,"@Override public void connect(){
  mServiceReachability=DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(),this);
  mServiceReachability.start();
  connected=true;
}","@Override public void connect(){
  connected=true;
}",0.4297520661157025
20960,"private void hConnectSuccess(){
  mServiceReachability=DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(),this);
  mServiceReachability.start();
  connected=true;
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
}","private void hConnectSuccess(){
  connected=true;
  if (serviceReadyListener != null) {
    isServiceReady=true;
    serviceReadyListener.onServiceReady();
  }
}",0.7
20961,"public void connectToWebApp(final WebOSWebAppSession webAppSession,final WebAppSession.MessageListener messageListener,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null || webAppSession.launchSession.getRawData() == null)   Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppMessageListeners.get(launchSession.getAppId()) == null)   mAppToAppMessageListeners.put(launchSession.getAppId(),new URLServiceSubscription<WebAppSession.MessageListener>(this,null,null,null));
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=""String_Node_Str"";
      try {
        state=jsonObj.getString(""String_Node_Str"");
      }
 catch (      JSONException e) {
        return;
      }
      if (!state.equalsIgnoreCase(""String_Node_Str""))       return;
      if (messageListener != null) {
        URLServiceSubscription<MessageListener> messageSubscription=mAppToAppMessageListeners.get(launchSession.getAppId());
        messageSubscription.addListener(messageListener);
      }
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<WebAppSession.MessageListener> subscription=mAppToAppMessageListeners.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str"")) {
          subscription.unsubscribe();
          mAppToAppMessageListeners.remove(subscription);
        }
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,responseListener);
  subscription.send();
  mAppToAppConnectionListeners.put(launchSession.getAppId(),subscription);
}","public void connectToWebApp(final WebOSWebAppSession webAppSession,final WebAppSession.MessageListener messageListener,final ResponseListener<Object> connectionListener){
  if (webAppSession == null || webAppSession.launchSession == null || webAppSession.launchSession.getRawData() == null)   Util.postError(connectionListener,new ServiceCommandError(0,""String_Node_Str"",null));
  final LaunchSession launchSession=webAppSession.launchSession;
  String uri=""String_Node_Str"";
  JSONObject payload=new JSONObject();
  if (launchSession.getAppId() != null) {
    try {
      payload.put(""String_Node_Str"",launchSession.getAppId());
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  if (mAppToAppMessageListeners.get(launchSession.getAppId()) == null)   mAppToAppMessageListeners.put(launchSession.getAppId(),new URLServiceSubscription<WebAppSession.MessageListener>(this,null,null,true,null));
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      JSONObject jsonObj=(JSONObject)response;
      Log.d(Util.T,""String_Node_Str"" + jsonObj.toString());
      String state=""String_Node_Str"";
      try {
        state=jsonObj.getString(""String_Node_Str"");
      }
 catch (      JSONException e) {
        return;
      }
      if (!state.equalsIgnoreCase(""String_Node_Str""))       return;
      if (messageListener != null) {
        URLServiceSubscription<MessageListener> messageSubscription=mAppToAppMessageListeners.get(launchSession.getAppId());
        messageSubscription.addListener(messageListener);
      }
      if (connectionListener != null)       connectionListener.onSuccess(null);
    }
    @Override public void onError(    ServiceCommandError error){
      ServiceSubscription<WebAppSession.MessageListener> subscription=mAppToAppMessageListeners.get(launchSession.getAppId());
      if (subscription != null) {
        if (serviceDescription.getVersion().contains(""String_Node_Str"")) {
          subscription.unsubscribe();
          mAppToAppMessageListeners.remove(subscription);
        }
      }
      Util.postError(connectionListener,error);
    }
  }
;
  URLServiceSubscription<ResponseListener<Object>> subscription=new URLServiceSubscription<ResponseListener<Object>>(this,uri,payload,true,responseListener);
  subscription.send();
  mAppToAppConnectionListeners.put(launchSession.getAppId(),subscription);
}",0.9979474548440066
20962,"private ServiceCommand<ResponseListener<Object>> getMuteStatus(boolean isSubscription,final MuteListener listener){
  ServiceCommand<ResponseListener<Object>> request;
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      try {
        JSONObject jsonObj=(JSONObject)response;
        boolean isMute=(Boolean)jsonObj.get(""String_Node_Str"");
        Util.postSuccess(listener,isMute);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  if (isSubscription)   request=new URLServiceSubscription<ResponseListener<Object>>(this,MUTE,null,responseListener);
 else   request=new ServiceCommand<ResponseListener<Object>>(this,MUTE,null,true,responseListener);
  request.send();
  return request;
}","private ServiceCommand<ResponseListener<Object>> getMuteStatus(boolean isSubscription,final MuteListener listener){
  ServiceCommand<ResponseListener<Object>> request;
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      try {
        JSONObject jsonObj=(JSONObject)response;
        boolean isMute=(Boolean)jsonObj.get(""String_Node_Str"");
        Util.postSuccess(listener,isMute);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  if (isSubscription)   request=new URLServiceSubscription<ResponseListener<Object>>(this,MUTE,null,true,responseListener);
 else   request=new ServiceCommand<ResponseListener<Object>>(this,MUTE,null,true,responseListener);
  request.send();
  return request;
}",0.9973074851911684
20963,"public URLServiceSubscription(DeviceService service,String uri,JSONObject payload,ResponseListener<Object> listener){
  super(service,uri,payload,listener);
}","public URLServiceSubscription(DeviceService service,String uri,JSONObject payload,boolean isWebOS,ResponseListener<Object> listener){
  super(service,uri,payload,isWebOS,listener);
}",0.9294117647058824
20964,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  HttpResponse response=null;
  int code=-1;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    HttpPost post=(HttpPost)request;
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity((String)payload);
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    if (entity == null) {
      Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
      return;
    }
    post.setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 201) {
      HttpEntity entity=response.getEntity();
      String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  HttpResponse response=null;
  int code=-1;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
    HttpPost post=(HttpPost)request;
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity((String)payload);
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    if (entity == null) {
      Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
      return;
    }
    post.setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 201) {
      HttpEntity entity=response.getEntity();
      String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9758327890267798
20965,"@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Util.runInBackground(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      HttpResponse response=null;
      int code=-1;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        HttpPost post=(HttpPost)request;
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity((String)payload);
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        if (entity == null) {
          Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
          return;
        }
        post.setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        code=response.getStatusLine().getStatusCode();
        if (code == 200 || code == 201) {
          HttpEntity entity=response.getEntity();
          String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
      }
 catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}","@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Util.runInBackground(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      HttpResponse response=null;
      int code=-1;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        request.setHeader(HttpMessage.CONTENT_TYPE_HEADER,""String_Node_Str"");
        HttpPost post=(HttpPost)request;
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity((String)payload);
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        if (entity == null) {
          Util.postError(command.getResponseListener(),new ServiceCommandError(0,""String_Node_Str"",null));
          return;
        }
        post.setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        code=response.getStatusLine().getStatusCode();
        if (code == 200 || code == 201) {
          HttpEntity entity=response.getEntity();
          String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
      }
 catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.9786418400876232
20966,"/** 
 * Registers an app ID to be checked upon discovery of this device. If the app is found on the target device, the DIALService will gain the ""Launcher.<appID>"" capability, where <appID> is the value of the appId parameter. This method must be called before starting DiscoveryManager for the first time.
 * @param appId ID of the app to be checked for
 */
public static void registerApp(String appId){
  if (registeredApps.contains(appId))   registeredApps.add(appId);
}","/** 
 * Registers an app ID to be checked upon discovery of this device. If the app is found on the target device, the DIALService will gain the ""Launcher.<appID>"" capability, where <appID> is the value of the appId parameter. This method must be called before starting DiscoveryManager for the first time.
 * @param appId ID of the app to be checked for
 */
public static void registerApp(String appId){
  if (!registeredApps.contains(appId))   registeredApps.add(appId);
}",0.9989440337909188
20967,"private void launchApp(String appId,JSONObject params,AppLaunchListener listener){
  if (appId == null || appId.length() == 0) {
    Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  AppInfo appInfo=new AppInfo();
  appInfo.setId(appId);
  launchAppWithInfo(appInfo,listener);
}","private void launchApp(String appId,JSONObject params,AppLaunchListener listener){
  if (appId == null || appId.length() == 0) {
    Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    return;
  }
  AppInfo appInfo=new AppInfo();
  appInfo.setName(appId);
  appInfo.setId(appId);
  launchAppWithInfo(appInfo,listener);
}",0.9611940298507464
20968,"@Override public void onLoseReachability(DeviceServiceReachability reachability){
  if (connected) {
    disconnect();
  }
 else {
    mServiceReachability.stop();
  }
}","@Override public void onLoseReachability(DeviceServiceReachability reachability){
  if (connected) {
    disconnect();
  }
 else {
    if (mServiceReachability != null)     mServiceReachability.stop();
  }
}",0.898936170212766
20969,"@Override public void onLoseReachability(DeviceServiceReachability reachability){
  if (connected) {
    disconnect();
  }
 else {
    mServiceReachability.stop();
  }
}","@Override public void onLoseReachability(DeviceServiceReachability reachability){
  if (connected) {
    disconnect();
  }
 else {
    if (mServiceReachability != null)     mServiceReachability.stop();
  }
}",0.898936170212766
20970,"public String getUUID(){
  return this.UUID;
}","public String getUUID(){
  if (this.UUID == null)   this.UUID=java.util.UUID.randomUUID().toString();
  return this.UUID;
}",0.5443786982248521
20971,"public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(""String_Node_Str"",getIpAddress());
    deviceObject.put(""String_Node_Str"",getFriendlyName());
    deviceObject.put(""String_Node_Str"",getModelName());
    deviceObject.put(""String_Node_Str"",getModelNumber());
    deviceObject.put(""String_Node_Str"",getLastSeenOnWifi());
    deviceObject.put(""String_Node_Str"",getLastConnected());
    deviceObject.put(""String_Node_Str"",getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(""String_Node_Str"",jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}","public JSONObject toJSONObject(){
  JSONObject deviceObject=new JSONObject();
  try {
    deviceObject.put(KEY_ID,getUUID());
    deviceObject.put(KEY_LAST_IP,getIpAddress());
    deviceObject.put(KEY_FRIENDLY,getFriendlyName());
    deviceObject.put(KEY_MODEL_NAME,getModelName());
    deviceObject.put(KEY_MODEL_NUMBER,getModelNumber());
    deviceObject.put(KEY_LAST_SEEN,getLastSeenOnWifi());
    deviceObject.put(KEY_LAST_CONNECTED,getLastConnected());
    deviceObject.put(KEY_LAST_DETECTED,getLastDetection());
    JSONObject jsonServices=new JSONObject();
    for (    DeviceService service : services.values()) {
      JSONObject serviceObject=service.toJSONObject();
      jsonServices.put(service.getServiceConfig().getServiceUUID(),serviceObject);
    }
    deviceObject.put(KEY_SERVICES,jsonServices);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return deviceObject;
}",0.2946778711484594
20972,"public ConnectableDevice(String ipAddress,String friendlyName,String modelName,String modelNumber){
  this.ipAddress=ipAddress;
  this.friendlyName=friendlyName;
  this.modelName=modelName;
  this.modelNumber=modelNumber;
  services=new ConcurrentHashMap<String,DeviceService>();
  deviceListeners=new CopyOnWriteArrayList<ConnectableDeviceListenerPair>();
}","public ConnectableDevice(JSONObject json,ConnectableDeviceStore deviceStore){
  setUUID(json.optString(KEY_ID,null));
  setLastKnownIPAddress(json.optString(KEY_LAST_IP,null));
  setFriendlyName(json.optString(KEY_FRIENDLY,null));
  setModelName(json.optString(KEY_MODEL_NAME,null));
  setModelNumber(json.optString(KEY_MODEL_NUMBER,null));
  setLastSeenOnWifi(json.optString(KEY_LAST_SEEN,null));
  setLastConnected(json.optLong(KEY_LAST_CONNECTED,0));
  setLastDetection(json.optLong(KEY_LAST_DETECTED,0));
  JSONObject jsonServices=json.optJSONObject(KEY_SERVICES);
  if (jsonServices != null) {
    @SuppressWarnings(""String_Node_Str"") Iterator<String> iter=jsonServices.keys();
    while (iter.hasNext()) {
      String key=iter.next();
      JSONObject jsonService=jsonServices.optJSONObject(key);
      if (jsonService != null) {
        DeviceService newService=DeviceService.getService(jsonService,deviceStore);
        if (newService != null)         addService(newService);
      }
    }
  }
}",0.1013215859030837
20973,"/** 
 * A List of all ConnectableDevices in the ConnectableDeviceStore. These ConnectableDevice objects are for informational use only, and should not be interacted with. DiscoveryManager uses these ConnectableDevice objects to populate discovered ConnectableDevices with relevant data (last connected, pairing info, etc).
 */
public List<ConnectableDevice> getStoredDevices();","/** 
 * A JSONObject of all ConnectableDevices in the ConnectableDeviceStore. To gt a strongly-typed ConnectableDevice object, use the `getDevice(String);` method.
 */
public JSONObject getStoredDevices();",0.3676975945017182
20974,"private void load(){
  String line;
  BufferedReader in=null;
  File file=new File(fileFullPath);
  if (!file.exists()) {
    version=1;
    created=Util.getTime();
    updated=Util.getTime();
  }
 else {
    try {
      in=new BufferedReader(new FileReader(file));
      StringBuilder sb=new StringBuilder();
      while ((line=in.readLine()) != null) {
        sb.append(line);
      }
      in.close();
      deviceStore=new JSONObject(sb.toString());
      JSONArray deviceList=deviceStore.getJSONArray(""String_Node_Str"");
      for (int i=0; i < deviceList.length(); i++) {
        JSONObject device=deviceList.getJSONObject(i);
        ConnectableDevice d=new ConnectableDevice();
        d.setIpAddress(device.optString(IP_ADDRESS));
        d.setFriendlyName(device.optString(FRIENDLY_NAME));
        d.setModelName(device.optString(MODEL_NAME));
        d.setModelNumber(device.optString(MODEL_NUMBER));
        JSONArray jsonServices=device.optJSONArray(SERVICES);
        if (jsonServices != null) {
          for (int j=0; j < jsonServices.length(); j++) {
            JSONObject jsonService=(JSONObject)jsonServices.optJSONObject(j);
            ServiceDescription sd=createServiceDescription(jsonService.optJSONObject(DESCRIPTION));
            ServiceConfig sc=createServiceConfig(jsonService.optJSONObject(CONFIG));
            DeviceService myService=new DeviceService(sd,sc,this);
            d.addService(myService);
          }
        }
        storedDevices.add(d);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}","private void load(){
  String line;
  BufferedReader in=null;
  File file=new File(fileFullPath);
  if (!file.exists()) {
    version=1;
    created=Util.getTime();
    updated=Util.getTime();
  }
 else {
    try {
      in=new BufferedReader(new FileReader(file));
      StringBuilder sb=new StringBuilder();
      while ((line=in.readLine()) != null) {
        sb.append(line);
      }
      in.close();
      deviceStore=new JSONObject(sb.toString());
      JSONArray deviceList=deviceStore.getJSONArray(""String_Node_Str"");
      for (int i=0; i < deviceList.length(); i++) {
        JSONObject device=deviceList.getJSONObject(i);
        ConnectableDevice d=new ConnectableDevice();
        d.setIpAddress(device.optString(IP_ADDRESS));
        d.setFriendlyName(device.optString(FRIENDLY_NAME));
        d.setModelName(device.optString(MODEL_NAME));
        d.setModelNumber(device.optString(MODEL_NUMBER));
        JSONObject jsonServices=device.optJSONObject(SERVICES);
        if (jsonServices != null) {
          Iterator<String> iterator=jsonServices.keys();
          while (iterator.hasNext()) {
            String key=iterator.next();
            JSONObject jsonService=jsonServices.optJSONObject(key);
            ServiceDescription sd=createServiceDescription(jsonService.optJSONObject(DESCRIPTION));
            ServiceConfig sc=createServiceConfig(jsonService.optJSONObject(CONFIG));
            DeviceService myService=new DeviceService(sd,sc,this);
            d.addService(myService);
          }
        }
        storedDevices.add(d);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}",0.928014397120576
20975,"/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  airplaneMode=Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0);
  if (isAirplaneMode()) {
    return;
  }
  instance=new DiscoveryManager(context,connectableDeviceStore);
}","/** 
 * Initilizes the Discovery manager with a valid context.  This should be done as soon as possible and it should use getApplicationContext() as the Discovery manager could persist longer than the current Activity. This accepts a ConnectableDeviceStore to use instead of the default device store.
 * @code MyConnectableDeviceStore myDeviceStore = new MyConnectableDeviceStore(); DiscoveryManager.init(getApplicationContext(), myDeviceStore);
 * @endcode
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){
  instance=new DiscoveryManager(context,connectableDeviceStore);
}",0.9012178619756428
20976,"/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION)) {
        SupplicantState state=intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE);
        if (SupplicantState.isValidState(state)) {
          if (state == SupplicantState.DISCONNECTED) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
            for (            DiscoveryProvider provider : discoveryProviders) {
              provider.reset();
            }
            allDevices.clear();
            for (            ConnectableDevice device : compatibleDevices.values()) {
              handleDeviceLoss(device);
            }
            compatibleDevices.clear();
          }
        }
      }
    }
  }
;
}","/** 
 * Create a new instance of DiscoveryManager. Direct use of this constructor is not recommended. In most cases, you should use DiscoveryManager.getInstance() instead.
 */
public DiscoveryManager(Context context,ConnectableDeviceStore connectableDeviceStore){
  this.context=context;
  this.connectableDeviceStore=connectableDeviceStore;
  allDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  compatibleDevices=new ConcurrentHashMap<String,ConnectableDevice>(8,0.75f,2);
  deviceClasses=new ConcurrentHashMap<String,Class<? extends DeviceService>>(4,0.75f,2);
  discoveryProviders=new CopyOnWriteArrayList<DiscoveryProvider>();
  discoveryListeners=new CopyOnWriteArrayList<DiscoveryManagerListener>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  multicastLock=wifiMgr.createMulticastLock(""String_Node_Str"");
  capabilityFilters=new ArrayList<CapabilityFilter>();
  pairingLevel=PairingLevel.OFF;
  receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
        if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
          if (mShouldResume) {
            for (            DiscoveryProvider provider : discoveryProviders) {
              provider.start();
            }
          }
        }
 else {
          Log.w(""String_Node_Str"",""String_Node_Str"");
          for (          DiscoveryProvider provider : discoveryProviders) {
            provider.reset();
          }
          allDevices.clear();
          for (          ConnectableDevice device : compatibleDevices.values()) {
            handleDeviceLoss(device);
          }
          compatibleDevices.clear();
          mShouldResume=true;
          stop();
        }
      }
    }
  }
;
}",0.8655033557046979
20977,"/** 
 * Start scanning for devices on the local network.
 */
public void start(){
  if (discoveryProviders == null) {
    return;
  }
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (discoveryProviders.size() == 0) {
        registerDefaultDeviceTypes();
      }
      registerBroadcastReceiver();
      multicastLock.acquire();
      ConnectivityManager connManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
      NetworkInfo mWifi=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (mWifi.isConnected()) {
        for (        DiscoveryProvider provider : discoveryProviders) {
          provider.start();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        Util.runOnUI(new Runnable(){
          @Override public void run(){
            for (            DiscoveryManagerListener listener : discoveryListeners)             listener.onDiscoveryFailed(DiscoveryManager.this,new ServiceCommandError(0,""String_Node_Str"",null));
          }
        }
);
      }
    }
  }
);
}","/** 
 * Start scanning for devices on the local network.
 */
public void start(){
  if (mSearching)   return;
  mSearching=true;
  if (discoveryProviders == null) {
    return;
  }
  Util.runOnUI(new Runnable(){
    @Override public void run(){
      if (discoveryProviders.size() == 0) {
        registerDefaultDeviceTypes();
      }
      if (mShouldResume) {
        mShouldResume=false;
      }
 else {
        registerBroadcastReceiver();
      }
      multicastLock.acquire();
      ConnectivityManager connManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
      NetworkInfo mWifi=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (mWifi.isConnected()) {
        for (        DiscoveryProvider provider : discoveryProviders) {
          provider.start();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        mShouldResume=true;
        Util.runOnUI(new Runnable(){
          @Override public void run(){
            for (            DiscoveryManagerListener listener : discoveryListeners)             listener.onDiscoveryFailed(DiscoveryManager.this,new ServiceCommandError(0,""String_Node_Str"",null));
          }
        }
);
      }
    }
  }
);
}",0.93247311827957
20978,"private void registerBroadcastReceiver(){
  if (isBroadcastReceiverRegistered == false) {
    isBroadcastReceiverRegistered=true;
    IntentFilter intent=new IntentFilter(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);
    context.registerReceiver(receiver,intent);
  }
}","private void registerBroadcastReceiver(){
  if (isBroadcastReceiverRegistered == false) {
    isBroadcastReceiverRegistered=true;
    IntentFilter intent=new IntentFilter(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
    context.registerReceiver(receiver,intent);
  }
}",0.955719557195572
20979,"/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(WebOSTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(NetcastTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(RokuService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(CastService.class,CastDiscoveryProvider.class);
}","/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
}",0.7609046849757674
20980,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION)) {
    SupplicantState state=intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE);
    if (SupplicantState.isValidState(state)) {
      if (state == SupplicantState.DISCONNECTED) {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        for (        DiscoveryProvider provider : discoveryProviders) {
          provider.reset();
        }
        allDevices.clear();
        for (        ConnectableDevice device : compatibleDevices.values()) {
          handleDeviceLoss(device);
        }
        compatibleDevices.clear();
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)) {
    if (intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED,false)) {
      if (mShouldResume) {
        for (        DiscoveryProvider provider : discoveryProviders) {
          provider.start();
        }
      }
    }
 else {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      for (      DiscoveryProvider provider : discoveryProviders) {
        provider.reset();
      }
      allDevices.clear();
      for (      ConnectableDevice device : compatibleDevices.values()) {
        handleDeviceLoss(device);
      }
      compatibleDevices.clear();
      mShouldResume=true;
      stop();
    }
  }
}",0.7149501661129568
20981,"/** 
 * Stop scanning for devices. This method will be called when your app enters a background state. When your app resumes, startDiscovery will be called.
 */
public void stop(){
  for (  DiscoveryProvider provider : discoveryProviders) {
    provider.stop();
  }
  if (multicastLock.isHeld()) {
    multicastLock.release();
  }
  unregisterBroadcastReceiver();
}","/** 
 * Stop scanning for devices. This method will be called when your app enters a background state. When your app resumes, startDiscovery will be called.
 */
public void stop(){
  if (!mSearching)   return;
  mSearching=false;
  for (  DiscoveryProvider provider : discoveryProviders) {
    provider.stop();
  }
  if (multicastLock.isHeld()) {
    multicastLock.release();
  }
  if (!mShouldResume)   unregisterBroadcastReceiver();
}",0.9113607990012484
20982,"@Override public void start(){
  dataTimer=new Timer();
  dataTimer.schedule(new TimerTask(){
    @Override public void run(){
      sendSearch();
    }
  }
,100,RESCAN_INTERVAL);
  responseThread=new Thread(mResponseHandler);
  notifyThread=new Thread(mRespNotifyHandler);
  responseThread.start();
  notifyThread.start();
}","@Override public void start(){
  openSocket();
  dataTimer=new Timer();
  dataTimer.schedule(new TimerTask(){
    @Override public void run(){
      sendSearch();
    }
  }
,100,RESCAN_INTERVAL);
  responseThread=new Thread(mResponseHandler);
  notifyThread=new Thread(mRespNotifyHandler);
  responseThread.start();
  notifyThread.start();
}",0.975975975975976
20983,"@Override public void stop(){
  dataTimer.cancel();
  responseThread.interrupt();
  notifyThread.interrupt();
  mSSDPSocket.close();
}","@Override public void stop(){
  dataTimer.cancel();
  responseThread.interrupt();
  notifyThread.interrupt();
  if (mSSDPSocket != null) {
    mSSDPSocket.close();
    mSSDPSocket=null;
  }
}",0.8246153846153846
20984,"public SSDPDiscoveryProvider(Context context){
  this.context=context;
  uuidReg=Pattern.compile(""String_Node_Str"");
  services=new ConcurrentHashMap<String,ServiceDescription>(8,0.75f,2);
  serviceListeners=new CopyOnWriteArrayList<DiscoveryProviderListener>();
  serviceFilters=new ArrayList<JSONObject>();
  WifiManager wifiMgr=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  WifiInfo wifiInfo=wifiMgr.getConnectionInfo();
  int ip=wifiInfo.getIpAddress();
  byte[] ipAddress=Util.convertIpAddress(ip);
  try {
    InetAddress source=InetAddress.getByAddress(ipAddress);
    mSSDPSocket=new SSDPSocket(source);
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public SSDPDiscoveryProvider(Context context){
  this.context=context;
  uuidReg=Pattern.compile(""String_Node_Str"");
  services=new ConcurrentHashMap<String,ServiceDescription>(8,0.75f,2);
  serviceListeners=new CopyOnWriteArrayList<DiscoveryProviderListener>();
  serviceFilters=new ArrayList<JSONObject>();
}",0.5827067669172933
20985,"public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.put(""String_Node_Str"",this.getClass().toString());
    jsonObj.put(""String_Node_Str"",lastDetected);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}","public JSONObject toJSONObject(){
  JSONObject jsonObj=new JSONObject();
  try {
    jsonObj.put(""String_Node_Str"",this.getClass().toString());
    jsonObj.put(""String_Node_Str"",lastDetected);
    jsonObj.put(""String_Node_Str"",serviceUUID);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObj;
}",0.9194630872483222
20986,"@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Thread thread=new Thread(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      final ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      request.addHeader(HttpMessage.USER_AGENT,HttpMessage.UDAP_USER_AGENT);
      HttpResponse response=null;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity(((JSONObject)payload).toString());
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        ((HttpPost)request).setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        final int code=response.getStatusLine().getStatusCode();
        if (code == 200) {
          HttpEntity entity=response.getEntity();
          final String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
        response.getEntity().consumeContent();
      }
 catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  thread.start();
}","@Override public void sendCommand(final ServiceCommand<?> mCommand){
  Thread thread=new Thread(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      final ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
      Object payload=command.getPayload();
      HttpRequestBase request=command.getRequest();
      request.addHeader(HttpMessage.USER_AGENT,HttpMessage.UDAP_USER_AGENT);
      request.addHeader(HttpMessage.CONTENT_TYPE_HEADER,HttpMessage.CONTENT_TYPE);
      HttpResponse response=null;
      if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
        HttpEntity entity=null;
        try {
          if (payload instanceof String) {
            entity=new StringEntity((String)payload);
          }
 else           if (payload instanceof JSONObject) {
            entity=new StringEntity(((JSONObject)payload).toString());
          }
        }
 catch (        UnsupportedEncodingException e) {
          e.printStackTrace();
        }
        ((HttpPost)request).setEntity(entity);
      }
      try {
        response=httpClient.execute(request);
        final int code=response.getStatusLine().getStatusCode();
        if (code == 200) {
          HttpEntity entity=response.getEntity();
          final String message=EntityUtils.toString(entity,""String_Node_Str"");
          Util.postSuccess(command.getResponseListener(),message);
        }
 else {
          Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
        }
        response.getEntity().consumeContent();
      }
 catch (      ClientProtocolException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  thread.start();
}",0.9767961979312272
20987,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  final ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  request.addHeader(HttpMessage.USER_AGENT,HttpMessage.UDAP_USER_AGENT);
  HttpResponse response=null;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity(((JSONObject)payload).toString());
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    ((HttpPost)request).setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    final int code=response.getStatusLine().getStatusCode();
    if (code == 200) {
      HttpEntity entity=response.getEntity();
      final String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
    response.getEntity().consumeContent();
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  final ServiceCommand<ResponseListener<Object>> command=(ServiceCommand<ResponseListener<Object>>)mCommand;
  Object payload=command.getPayload();
  HttpRequestBase request=command.getRequest();
  request.addHeader(HttpMessage.USER_AGENT,HttpMessage.UDAP_USER_AGENT);
  request.addHeader(HttpMessage.CONTENT_TYPE_HEADER,HttpMessage.CONTENT_TYPE);
  HttpResponse response=null;
  if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {
    HttpEntity entity=null;
    try {
      if (payload instanceof String) {
        entity=new StringEntity((String)payload);
      }
 else       if (payload instanceof JSONObject) {
        entity=new StringEntity(((JSONObject)payload).toString());
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    ((HttpPost)request).setEntity(entity);
  }
  try {
    response=httpClient.execute(request);
    final int code=response.getStatusLine().getStatusCode();
    if (code == 200) {
      HttpEntity entity=response.getEntity();
      final String message=EntityUtils.toString(entity,""String_Node_Str"");
      Util.postSuccess(command.getResponseListener(),message);
    }
 else {
      Util.postError(command.getResponseListener(),ServiceCommandError.getError(code));
    }
    response.getEntity().consumeContent();
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9734453781512604
20988,"/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
}","/** 
 * Registers a commonly-used set of DeviceServices with DiscoveryManager. This method will be called on first call of startDiscovery if no DeviceServices have been registered. - CastDiscoveryProvider + CastService - SSDPDiscoveryProvider + DIALService + DLNAService (limited to LG TVs, currently) + NetcastTVService + RokuService + WebOSTVService
 */
public void registerDefaultDeviceTypes(){
  registerDeviceService(WebOSTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(NetcastTVService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(DIALService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(RokuService.class,SSDPDiscoveryProvider.class);
  registerDeviceService(CastService.class,CastDiscoveryProvider.class);
}",0.7609046849757674
20989,"@Override public void launchAppWithInfo(final AppInfo appInfo,Object params,final AppLaunchListener listener){
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(this,requestURL(appInfo.getName()),params,new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    }
    @Override public void onSuccess(    Object object){
      LaunchSession launchSession=LaunchSession.launchSessionForAppId(appInfo.getId());
      launchSession.setAppName(appInfo.getName());
      launchSession.setRawData(object);
      launchSession.setService(DIALService.this);
      Util.postSuccess(listener,launchSession);
    }
  }
);
  command.send();
}","@Override public void launchAppWithInfo(final AppInfo appInfo,Object params,final AppLaunchListener listener){
  ServiceCommand<ResponseListener<Object>> command=new ServiceCommand<ResponseListener<Object>>(this,requestURL(appInfo.getName()),params,new ResponseListener<Object>(){
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,new ServiceCommandError(0,""String_Node_Str"",null));
    }
    @Override public void onSuccess(    Object object){
      LaunchSession launchSession=LaunchSession.launchSessionForAppId(appInfo.getId());
      launchSession.setAppName(appInfo.getName());
      launchSession.setRawData(object);
      launchSession.setService(DIALService.this);
      launchSession.setSessionType(LaunchSessionType.App);
      Util.postSuccess(listener,launchSession);
    }
  }
);
  command.send();
}",0.9644364074743822
20990,"private void probeForAppSupport(){
  List<String> appsToProbe=new ArrayList<String>();
  appsToProbe.add(""String_Node_Str"");
  appsToProbe.add(""String_Node_Str"");
  for (  final String appID : appsToProbe) {
    hasApplication(appID,new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
      }
      @Override public void onSuccess(      Object object){
        addCapability(""String_Node_Str"" + appID);
      }
    }
);
  }
}","private void probeForAppSupport(){
  for (  final String appID : registeredApps) {
    hasApplication(appID,new ResponseListener<Object>(){
      @Override public void onError(      ServiceCommandError error){
      }
      @Override public void onSuccess(      Object object){
        addCapability(""String_Node_Str"" + appID);
      }
    }
);
  }
}",0.2254545454545454
20991,"private void probeForAppSupport(){
  getAppList(new AppListListener(){
    @Override public void onError(    ServiceCommandError error){
    }
    @Override public void onSuccess(    List<AppInfo> object){
      List<String> appsToProbe=new ArrayList<String>();
      appsToProbe.add(""String_Node_Str"");
      appsToProbe.add(""String_Node_Str"");
      appsToProbe.add(""String_Node_Str"");
      List<String> appsToAdd=new ArrayList<String>();
      for (      String probe : appsToProbe) {
        for (        AppInfo app : object) {
          if (app.getName().contains(probe)) {
            appsToAdd.add(""String_Node_Str"" + probe);
          }
        }
      }
      addCapabilities(appsToAdd);
    }
  }
);
}","private void probeForAppSupport(){
  getAppList(new AppListListener(){
    @Override public void onError(    ServiceCommandError error){
    }
    @Override public void onSuccess(    List<AppInfo> object){
      List<String> appsToAdd=new ArrayList<String>();
      for (      String probe : registeredApps) {
        for (        AppInfo app : object) {
          if (app.getName().contains(probe)) {
            appsToAdd.add(""String_Node_Str"" + probe);
          }
        }
      }
      addCapabilities(appsToAdd);
    }
  }
);
}",0.5068163592622293
20992,"@Override public void onSuccess(List<AppInfo> object){
  List<String> appsToProbe=new ArrayList<String>();
  appsToProbe.add(""String_Node_Str"");
  appsToProbe.add(""String_Node_Str"");
  appsToProbe.add(""String_Node_Str"");
  List<String> appsToAdd=new ArrayList<String>();
  for (  String probe : appsToProbe) {
    for (    AppInfo app : object) {
      if (app.getName().contains(probe)) {
        appsToAdd.add(""String_Node_Str"" + probe);
      }
    }
  }
  addCapabilities(appsToAdd);
}","@Override public void onSuccess(List<AppInfo> object){
  List<String> appsToAdd=new ArrayList<String>();
  for (  String probe : registeredApps) {
    for (    AppInfo app : object) {
      if (app.getName().contains(probe)) {
        appsToAdd.add(""String_Node_Str"" + probe);
      }
    }
  }
  addCapabilities(appsToAdd);
}",0.3607361963190184
20993,"@Override public void launchAppWithInfo(AppInfo appInfo,JSONObject params,Launcher.AppLaunchListener listener){
  String appName=HttpMessage.percentEncoding(appInfo.getName());
  String appId=appInfo.getId();
  String contentId=null;
  if (params != null) {
    try {
      contentId=(String)params.get(""String_Node_Str"");
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  launchApplication(appName,appId,contentId,listener);
}","@Override public void launchAppWithInfo(AppInfo appInfo,Object params,Launcher.AppLaunchListener listener){
  String appName=HttpMessage.percentEncoding(appInfo.getName());
  String appId=appInfo.getId();
  String contentId=null;
  JSONObject mParams=null;
  if (params instanceof JSONObject)   mParams=(JSONObject)params;
  if (mParams != null) {
    try {
      contentId=(String)mParams.get(""String_Node_Str"");
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  launchApplication(appName,appId,contentId,listener);
}",0.8886659979939819
20994,"private void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(PowerControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,Duration,Position,Seek,MetaData_Title,MetaData_MimeType,Application,Application_Close,Application_List,Browser,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,Channel_Up,Channel_Down,Channel_Get,Channel_List,Channel_Subscribe,Get_3D,Set_3D,Subscribe_3D,Picker_Launch,Picker_Close,Volume_Get,Volume_Up_Down,Mute_Get,Mute_Set);
  }
 else {
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,YouTube,YouTube_Params);
  }
}","private void setCapabilities(){
  if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {
    appendCapabilites(TextInputControl.Capabilities);
    appendCapabilites(MouseControl.Capabilities);
    appendCapabilites(KeyControl.Capabilities);
    appendCapabilites(PowerControl.Capabilities);
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,Duration,Position,Seek,MetaData_Title,MetaData_MimeType,Application,Application_Close,Application_List,Browser,Hulu,Netflix,Netflix_Params,YouTube,YouTube_Params,AppStore,AppStore_Params,Channel_Up,Channel_Down,Channel_Get,Channel_List,Channel_Subscribe,Get_3D,Set_3D,Subscribe_3D,Picker_Launch,Picker_Close,Volume_Get,Volume_Up_Down,Mute_Get,Mute_Set);
  }
 else {
    appendCapabilites(MediaPlayer.Capabilities);
    appendCapabilites(Play,Pause,Stop,Rewind,FastForward,YouTube,YouTube_Params);
  }
}",0.9862107004964148
20995,"private void setCapabilities(){
  appendCapabilites(Application,Application_Params,Application_List,Display_Image,Display_Video,Display_Audio,FastForward,Rewind,Play,Pause,Stop,Back,Down,Home,Left,Right,Up,OK,Send,Send_Delete,Send_Enter);
}","private void setCapabilities(){
  appendCapabilites(Application,Application_Params,Application_List,AppStore,AppStore_Params,Display_Image,Display_Video,Display_Audio,FastForward,Rewind,Play,Pause,Stop,Back,Down,Home,Left,Right,Up,OK,Send,Send_Delete,Send_Enter);
}",0.9504950495049505
20996,"@Override public void launchAppWithInfo(final AppInfo appInfo,JSONObject params,final Launcher.AppLaunchListener listener){
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      Util.postSuccess(listener,new RokuLaunchSession(RokuService.this,appInfo.getId(),appInfo.getName()));
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  String action=""String_Node_Str"";
  String payload=appInfo.getId();
  String contentId=null;
  if (params != null && params.has(""String_Node_Str"")) {
    try {
      contentId=params.getString(""String_Node_Str"");
      payload+=""String_Node_Str"" + contentId;
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  String uri=requestURL(action,payload);
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,null,responseListener);
  request.send();
}","@Override public void launchAppWithInfo(final AppInfo appInfo,Object params,final Launcher.AppLaunchListener listener){
  ResponseListener<Object> responseListener=new ResponseListener<Object>(){
    @Override public void onSuccess(    Object response){
      Util.postSuccess(listener,new RokuLaunchSession(RokuService.this,appInfo.getId(),appInfo.getName()));
    }
    @Override public void onError(    ServiceCommandError error){
      Util.postError(listener,error);
    }
  }
;
  String action=""String_Node_Str"";
  String payload=appInfo.getId();
  String contentId=null;
  JSONObject mParams=null;
  if (params instanceof JSONObject)   mParams=(JSONObject)params;
  if (mParams != null && mParams.has(""String_Node_Str"")) {
    try {
      contentId=mParams.getString(""String_Node_Str"");
      payload+=""String_Node_Str"" + contentId;
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  String uri=requestURL(action,payload);
  ServiceCommand<ResponseListener<Object>> request=new ServiceCommand<ResponseListener<Object>>(this,uri,null,responseListener);
  request.send();
}",0.9508041627246924
20997,"/** 
 * prepare for connection
 * @param conf
 */
public void prepare(ICometConf conf){
  if (conf.channelAllocator == null) {
    conf.channelAllocator=new DefaultChannelAllocator();
  }
  mConf=conf;
  this.mChannel=conf.channelAllocator.allocate();
  this.host=conf.host;
  this.port=conf.port;
  this.url=buildURL(conf.conn_url);
  this.mICometCallback=conf.iCometCallback;
  this.mIConnCallback=conf.iConnCallback;
  this.mStatus=Status.STATUS_READY;
  this.mMsgQueue=new LinkedList<PubMessage>();
}","/** 
 * prepare for connection
 * @param conf
 */
public void prepare(ICometConf conf){
  if (conf.channelAllocator == null) {
    conf.channelAllocator=new DefaultChannelAllocator();
  }
  mConf=conf;
  this.mChannel=conf.channelAllocator.allocate();
  this.host=conf.host;
  this.port=conf.port;
  this.url=buildURL(conf.conn_url);
  this.mICometCallback=conf.iCometCallback;
  this.mIConnCallback=conf.iConnCallback;
  this.mStatus=Status.STATUS_READY;
}",0.951092611862643
20998,"/** 
 * connect to iComet server please call this method in a child thread
 */
public void connect(){
  if (this.mStatus != Status.STATUS_READY) {
    return;
  }
  try {
    mConn=(HttpURLConnection)new URL(this.url).openConnection();
    mConn.setRequestMethod(""String_Node_Str"");
    mConn.setDoInput(true);
    mConn.setDoOutput(true);
    mConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    mConn.connect();
    mInput=new MessageInputStream(mConn.getInputStream());
  }
 catch (  Exception e) {
    if (mConn != null) {
      mConn.disconnect();
    }
    if (mIConnCallback != null) {
      mIConnCallback.onFail(e.getMessage());
    }
    reconnect();
    return;
  }
  this.mStatus=Status.STATUS_CONNCTED;
  if (mIConnCallback != null) {
    if (mReconnTimes == 0) {
      mIConnCallback.onSuccess();
    }
 else {
      mIConnCallback.onReconnectSuccess(mReconnTimes);
    }
  }
}","/** 
 * connect to iComet server please call this method in a child thread
 */
public void connect(){
  if (this.mStatus != Status.STATUS_READY) {
    return;
  }
  try {
    mConn=(HttpURLConnection)new URL(this.url).openConnection();
    mConn.setRequestMethod(""String_Node_Str"");
    mConn.setDoInput(true);
    mConn.setDoOutput(true);
    mConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    mConn.connect();
    mInput=new MessageInputStream(mConn.getInputStream());
  }
 catch (  Exception e) {
    if (mConn != null) {
      mConn.disconnect();
    }
    if (mIConnCallback != null) {
      mIConnCallback.onFail(e.getMessage());
    }
    reconnect();
    return;
  }
  this.mStatus=Status.STATUS_CONNCTED;
  if (mIConnCallback != null) {
    if (mReconnTimes == 0) {
      mIConnCallback.onSuccess();
    }
 else {
      mReconnTimes=0;
      mIConnCallback.onReconnectSuccess(mReconnTimes);
    }
  }
}",0.987991266375546
20999,"public String request(LatLng start,LatLng end,String mode){
  final String url=""String_Node_Str"" + ""String_Node_Str"" + start.latitude + ""String_Node_Str""+ start.longitude+ ""String_Node_Str""+ end.latitude+ ""String_Node_Str""+ end.longitude+ ""String_Node_Str"";
  if (isLogging)   Log.i(""String_Node_Str"",""String_Node_Str"" + url);
  new RequestTask().execute(new String[]{url});
  return url;
}","public String request(LatLng start,LatLng end,String mode){
  final String url=""String_Node_Str"" + ""String_Node_Str"" + start.latitude + ""String_Node_Str""+ start.longitude+ ""String_Node_Str""+ end.latitude+ ""String_Node_Str""+ end.longitude+ ""String_Node_Str""+ mode;
  if (isLogging)   Log.i(""String_Node_Str"",""String_Node_Str"" + url);
  new RequestTask().execute(new String[]{url});
  return url;
}",0.9923664122137404
21000,"public void isAnimated(){
  isAnimated=false;
}","public boolean isAnimated(){
  return isAnimated;
}",0.7755102040816326
