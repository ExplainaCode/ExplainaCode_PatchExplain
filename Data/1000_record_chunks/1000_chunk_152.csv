record_number,buggy_code,fixed_code,code_similarity
151001,"/** 
 * Sets the current image it should be tracking with.
 * @param image  Original input image.
 * @param derivX Image derivative along the x-axis
 * @param derivY Image derivative along the y-axis
 */
public void setImage(InputImage image,DerivativeImage derivX,DerivativeImage derivY){
  if (derivX != null && derivY != null)   InputSanityCheck.checkSameShape(image,derivX,derivY);
  this.image=image;
  interpInput.setImage(image);
  this.derivX=derivX;
  this.derivY=derivY;
  interpPixelI.setImage(image);
  interpPixelDX.setImage(derivX);
  interpPixelDY.setImage(derivY);
}","/** 
 * Sets the current image it should be tracking with.
 * @param image  Original input image.
 * @param derivX Image derivative along the x-axis
 * @param derivY Image derivative along the y-axis
 */
public void setImage(InputImage image,DerivativeImage derivX,DerivativeImage derivY){
  InputSanityCheck.checkSameShape(image,derivX,derivY);
  this.image=image;
  interpInput.setImage(image);
  this.derivX=derivX;
  this.derivY=derivY;
  interpPixelI.setImage(image);
  interpPixelDX.setImage(derivX);
  interpPixelDY.setImage(derivY);
}",0.9644128113879004
151002,"/** 
 * Computes a transform which is used to rescale an image.  The scale is computed directly from the size of the two input images and independently scales the x and y axises.
 */
public static PixelTransformAffine_F32 transformScale(ImageBase from,ImageBase to){
  float scaleX=(float)to.width / (float)from.width;
  float scaleY=(float)to.height / (float)from.height;
  Affine2D_F32 affine=new Affine2D_F32(scaleX,0,0,scaleY,0,0);
  PixelTransformAffine_F32 distort=new PixelTransformAffine_F32();
  distort.set(affine);
  return distort;
}","/** 
 * Computes a transform which is used to rescale an image.  The scale is computed directly from the size of the two input images and independently scales the x and y axises.
 */
public static PixelTransformAffine_F32 transformScale(ImageBase from,ImageBase to){
  float scaleX=(float)(to.width - 1) / (float)(from.width - 1);
  float scaleY=(float)(to.height - 1) / (float)(from.height - 1);
  Affine2D_F32 affine=new Affine2D_F32(scaleX,0,0,scaleY,0,0);
  PixelTransformAffine_F32 distort=new PixelTransformAffine_F32();
  distort.set(affine);
  return distort;
}",0.9784560143626572
151003,"@Test public void distortScale(){
  ImageFloat32 a=new ImageFloat32(25,30);
  ImageFloat32 b=new ImageFloat32(15,25);
  PixelTransform_F32 tran=DistortSupport.transformScale(a,b);
  tran.compute(5,6);
  assertEquals(5.0 * 15.0 / 25.0,tran.distX,1e-4);
  assertEquals(6.0 * 25.0 / 30.0,tran.distY,1e-4);
}","@Test public void distortScale(){
  ImageFloat32 a=new ImageFloat32(25,30);
  ImageFloat32 b=new ImageFloat32(15,25);
  PixelTransform_F32 tran=DistortSupport.transformScale(a,b);
  tran.compute(0,0);
  assertEquals(0,tran.distX,1e-8);
  assertEquals(0,tran.distY,1e-8);
  tran.compute(24,29);
  assertEquals(14,tran.distX,1e-8);
  assertEquals(24,tran.distY,1e-8);
  tran.compute(5,6);
  assertEquals(5.0 * 14.0 / 24.0,tran.distX,1e-4);
  assertEquals(6.0 * 24.0 / 29.0,tran.distY,1e-4);
}",0.7531486146095718
151004,"/** 
 * Returns true if the features is entirely outside of the image.
 */
public boolean isFullyOutside(float x,float y){
  if (x < outsideLeft || x >= outsideRight)   return true;
  if (y < outsideTop || y >= outsideBottom)   return true;
  return false;
}","/** 
 * Returns true if the features is entirely outside of the image.  A region is entirely outside if not an entire pixel is contained inside the image.  So if only  0.999 of a pixel is inside then the whole region is considered to be outside.  Can't interpolate nothing...
 */
public boolean isFullyOutside(float x,float y){
  if (x < outsideLeft || x > outsideRight)   return true;
  if (y < outsideTop || y > outsideBottom)   return true;
  return false;
}",0.7121001390820584
151005,"private void computeE(KltFeature feature,float x,float y){
  interpInput.region(x - feature.radius,y - feature.radius,descFeature);
  Ex=0;
  Ey=0;
  for (int i=0; i < lengthFeature; i++) {
    float d=feature.desc.data[i] - descFeature.data[i];
    Ex+=d * feature.derivX.data[i];
    Ey+=d * feature.derivY.data[i];
  }
}","protected void computeE(KltFeature feature,float x,float y){
  interpInput.region(x - feature.radius,y - feature.radius,descFeature);
  Ex=0;
  Ey=0;
  for (int i=0; i < lengthFeature; i++) {
    float d=feature.desc.data[i] - descFeature.data[i];
    Ex+=d * feature.derivX.data[i];
    Ey+=d * feature.derivY.data[i];
  }
}",0.9814814814814816
151006,"/** 
 * Sets the features description using the current image and the location of the feature stored in the feature. If the feature is an illegal location and cannot be set then false is returned.
 * @param feature Feature description which is to be set.  Location must be specified.
 * @return true if the feature's description was modified.
 */
@SuppressWarnings({""String_Node_Str""}) public boolean setDescription(KltFeature feature){
  if (derivX == null || derivY == null)   throw new IllegalArgumentException(""String_Node_Str"");
  setAllowedBounds(feature);
  if (!isFullyInside(feature.x,feature.y)) {
    if (isFullyOutside(feature.x,feature.y))     return false;
 else     return internalSetDescriptionBorder(feature);
  }
  return internalSetDescription(feature);
}","/** 
 * Sets the features description using the current image and the location of the feature stored in the feature. If the feature is an illegal location and cannot be set then false is returned.
 * @param feature Feature description which is to be set.  Location must be specified.
 * @return true if the feature's description was modified.
 */
@SuppressWarnings({""String_Node_Str""}) public boolean setDescription(KltFeature feature){
  setAllowedBounds(feature);
  if (!isFullyInside(feature.x,feature.y)) {
    if (isFullyOutside(feature.x,feature.y))     return false;
 else     return internalSetDescriptionBorder(feature);
  }
  return internalSetDescription(feature);
}",0.9331495520330806
151007,"/** 
 * When part of the region is outside the image G and E need to be recomputed
 */
private int computeGandE_border(KltFeature feature,float cx,float cy){
  int total=0;
  Gxx=0;
  Gyy=0;
  Gxy=0;
  Ex=0;
  Ey=0;
  int i=0;
  for (int y=0; y < widthFeature; y++) {
    float pixelY=cy - feature.radius + y;
    for (int x=0; x < widthFeature; x++, i++) {
      if (Float.isNaN(feature.desc.data[i]))       continue;
      float pixelX=cx - feature.radius + x;
      float dX, dY, value;
      if (interpPixelDX.isInFastBounds(pixelX,pixelY)) {
        value=interpPixelI.get_fast(pixelX,pixelY);
        dX=interpPixelDX.get_fast(pixelX,pixelY);
        dY=interpPixelDY.get_fast(pixelX,pixelY);
      }
 else       if (image.isInBounds((int)pixelX,(int)pixelY)) {
        value=interpPixelI.get(pixelX,pixelY);
        dX=interpPixelDX.get(pixelX,pixelY);
        dY=interpPixelDY.get(pixelX,pixelY);
      }
 else {
        descFeature.data[i]=Float.NaN;
        continue;
      }
      descFeature.data[i]=value;
      total++;
      float d=feature.desc.data[i] - value;
      Ex+=d * feature.derivX.data[i];
      Ey+=d * feature.derivY.data[i];
      Gxx+=dX * dX;
      Gyy+=dY * dY;
      Gxy+=dX * dY;
    }
  }
  return total;
}","/** 
 * When part of the region is outside the image G and E need to be recomputed
 */
protected int computeGandE_border(KltFeature feature,float cx,float cy){
  int total=0;
  Gxx=0;
  Gyy=0;
  Gxy=0;
  Ex=0;
  Ey=0;
  int i=0;
  for (int y=0; y < widthFeature; y++) {
    float pixelY=cy - feature.radius + y;
    for (int x=0; x < widthFeature; x++, i++) {
      if (Float.isNaN(feature.desc.data[i]))       continue;
      float pixelX=cx - feature.radius + x;
      float dX, dY, value;
      if (interpPixelI.isInFastBounds(pixelX,pixelY)) {
        value=interpPixelI.get_fast(pixelX,pixelY);
      }
 else       if (image.isInBounds((int)pixelX,(int)pixelY)) {
        value=interpPixelI.get(pixelX,pixelY);
      }
 else {
        descFeature.data[i]=Float.NaN;
        continue;
      }
      descFeature.data[i]=value;
      total++;
      dX=feature.derivX.data[i];
      dY=feature.derivY.data[i];
      float d=feature.desc.data[i] - value;
      Ex+=d * dX;
      Ey+=d * dY;
      Gxx+=dX * dX;
      Gyy+=dY * dY;
      Gxy+=dX * dY;
    }
  }
  return total;
}",0.5778352738249245
151008,"private void setAllowedBounds(KltFeature feature){
  allowedLeft=feature.radius + config.forbiddenBorder;
  allowedTop=feature.radius + config.forbiddenBorder;
  allowedRight=image.width - (feature.radius + config.forbiddenBorder);
  allowedBottom=image.height - (feature.radius + config.forbiddenBorder);
  outsideLeft=-feature.radius + config.forbiddenBorder;
  outsideTop=-feature.radius + config.forbiddenBorder;
  outsideRight=image.width + (feature.radius - config.forbiddenBorder);
  outsideBottom=image.height + (feature.radius - config.forbiddenBorder);
}","/** 
 * Precompute image bounds that the feature is allowed inside of
 */
protected void setAllowedBounds(KltFeature feature){
  widthFeature=feature.radius * 2 + 1;
  lengthFeature=widthFeature * widthFeature;
  allowedLeft=feature.radius;
  allowedTop=feature.radius;
  allowedRight=image.width - feature.radius - 1;
  allowedBottom=image.height - feature.radius - 1;
  outsideLeft=-feature.radius;
  outsideTop=-feature.radius;
  outsideRight=image.width + feature.radius - 1;
  outsideBottom=image.height + feature.radius - 1;
}",0.1532846715328467
151009,"/** 
 * Returns true if the features is entirely enclosed inside of the image.
 */
public boolean isFullyInside(float x,float y){
  if (x < allowedLeft || x >= allowedRight)   return false;
  if (y < allowedTop || y >= allowedBottom)   return false;
  return true;
}","/** 
 * Returns true if the features is entirely enclosed inside of the image.
 */
public boolean isFullyInside(float x,float y){
  if (x < allowedLeft || x > allowedRight)   return false;
  if (y < allowedTop || y > allowedBottom)   return false;
  return true;
}",0.9962264150943396
151010,"/** 
 * Computes the descriptor for border features.  All it needs to do is save the pixel value, but derivative information is also computed so that it can reject bad features immediately.
 */
private boolean internalSetDescriptionBorder(KltFeature feature){
  int total=0;
  Gxx=Gyy=Gxy=0;
  int i=0;
  for (int y=0; y < widthFeature; y++) {
    float pixelY=feature.y - feature.radius + y;
    for (int x=0; x < widthFeature; x++, i++) {
      float pixelX=feature.x - feature.radius + x;
      float dX, dY, value;
      if (interpPixelDX.isInFastBounds(pixelX,pixelY)) {
        value=interpPixelI.get_fast(pixelX,pixelY);
        dX=interpPixelDX.get_fast(pixelX,pixelY);
        dY=interpPixelDY.get_fast(pixelX,pixelY);
      }
 else       if (image.isInBounds((int)pixelX,(int)pixelY)) {
        value=interpPixelI.get(pixelX,pixelY);
        dX=interpPixelDX.get(pixelX,pixelY);
        dY=interpPixelDY.get(pixelX,pixelY);
      }
 else {
        feature.desc.data[i]=Float.NaN;
        continue;
      }
      total++;
      feature.desc.data[i]=value;
      Gxx+=dX * dX;
      Gyy+=dY * dY;
      Gxy+=dX * dY;
    }
  }
  feature.Gxx=Gxx;
  feature.Gyy=Gyy;
  feature.Gxy=Gxy;
  float det=Gxx * Gyy - Gxy * Gxy;
  return (det >= config.minDeterminant * total);
}","/** 
 * Computes the descriptor for border features.  All it needs to do is save the pixel value, but derivative information is also computed so that it can reject bad features immediately.
 */
private boolean internalSetDescriptionBorder(KltFeature feature){
  int total=0;
  Gxx=Gyy=Gxy=0;
  int i=0;
  for (int y=0; y < widthFeature; y++) {
    float pixelY=feature.y - feature.radius + y;
    for (int x=0; x < widthFeature; x++, i++) {
      float pixelX=feature.x - feature.radius + x;
      float dX, dY, value;
      if (interpPixelI.isInFastBounds(pixelX,pixelY)) {
        value=interpPixelI.get_fast(pixelX,pixelY);
        dX=interpPixelDX.get_fast(pixelX,pixelY);
        dY=interpPixelDY.get_fast(pixelX,pixelY);
      }
 else       if (image.isInBounds((int)pixelX,(int)pixelY)) {
        value=interpPixelI.get(pixelX,pixelY);
        dX=interpPixelDX.get(pixelX,pixelY);
        dY=interpPixelDY.get(pixelX,pixelY);
      }
 else {
        feature.desc.data[i]=Float.NaN;
        continue;
      }
      total++;
      feature.desc.data[i]=value;
      feature.derivX.data[i]=dX;
      feature.derivY.data[i]=dY;
      Gxx+=dX * dX;
      Gyy+=dY * dY;
      Gxy+=dX * dY;
    }
  }
  feature.Gxx=Gxx;
  feature.Gyy=Gyy;
  feature.Gxy=Gxy;
  float det=Gxx * Gyy - Gxy * Gxy;
  return (det >= config.minDeterminant * total);
}",0.9736540664375716
151011,"/** 
 * <p> Updates the feature's location inside the image.  The feature's position can be modified even if tracking fails. </p>
 * @param feature Feature being tracked.
 * @return If the tracking was successful or not.
 */
public KltTrackFault track(KltFeature feature){
  widthFeature=feature.radius * 2 + 1;
  lengthFeature=widthFeature * widthFeature;
  boolean startedOutside;
  if (descFeature.data.length < lengthFeature)   descFeature.reshape(widthFeature,widthFeature);
  float origX=feature.x, origY=feature.y;
  setAllowedBounds(feature);
  float det=0;
  if (isFullyInside(feature.x,feature.y)) {
    startedOutside=false;
    Gxx=feature.Gxx;
    Gyy=feature.Gyy;
    Gxy=feature.Gxy;
    det=Gxx * Gyy - Gxy * Gxy;
    if (det < config.minDeterminant * lengthFeature) {
      return KltTrackFault.FAILED;
    }
  }
 else {
    startedOutside=true;
  }
  for (int iter=0; iter < config.maxIterations; iter++) {
    float dx, dy;
    if (!startedOutside && isFullyInside(feature.x,feature.y)) {
      computeE(feature,feature.x,feature.y);
    }
 else {
      int length=computeGandE_border(feature,feature.x,feature.y);
      det=Gxx * Gyy - Gxy * Gxy;
      if (det < config.minDeterminant * length) {
        return KltTrackFault.FAILED;
      }
    }
    dx=(Gyy * Ex - Gxy * Ey) / det;
    dy=(Gxx * Ey - Gxy * Ex) / det;
    feature.x+=dx;
    feature.y+=dy;
    if (isFullyOutside(feature.x,feature.y))     return KltTrackFault.OUT_OF_BOUNDS;
    if (Math.abs(feature.x - origX) > widthFeature || Math.abs(feature.y - origY) > widthFeature)     return KltTrackFault.DRIFTED;
    if (Math.abs(dx) < config.minPositionDelta && Math.abs(dy) < config.minPositionDelta) {
      break;
    }
  }
  if (computeError(feature) > config.maxPerPixelError)   return KltTrackFault.LARGE_ERROR;
  return KltTrackFault.SUCCESS;
}","/** 
 * <p> Updates the feature's location inside the image.  The feature's position can be modified even if tracking fails. </p>
 * @param feature Feature being tracked.
 * @return If the tracking was successful or not.
 */
public KltTrackFault track(KltFeature feature){
  setAllowedBounds(feature);
  if (descFeature.data.length < lengthFeature)   descFeature.reshape(widthFeature,widthFeature);
  float origX=feature.x, origY=feature.y;
  boolean complete=isDescriptionComplete(feature);
  float det=0;
  if (complete) {
    Gxx=feature.Gxx;
    Gyy=feature.Gyy;
    Gxy=feature.Gxy;
    det=Gxx * Gyy - Gxy * Gxy;
    if (det < config.minDeterminant * lengthFeature) {
      return KltTrackFault.FAILED;
    }
  }
  for (int iter=0; iter < config.maxIterations; iter++) {
    float dx, dy;
    if (complete && isFullyInside(feature.x,feature.y)) {
      computeE(feature,feature.x,feature.y);
    }
 else {
      int length=computeGandE_border(feature,feature.x,feature.y);
      det=Gxx * Gyy - Gxy * Gxy;
      if (det < config.minDeterminant * length) {
        return KltTrackFault.FAILED;
      }
    }
    dx=(Gyy * Ex - Gxy * Ey) / det;
    dy=(Gxx * Ey - Gxy * Ex) / det;
    feature.x+=dx;
    feature.y+=dy;
    if (isFullyOutside(feature.x,feature.y))     return KltTrackFault.OUT_OF_BOUNDS;
    if (Math.abs(feature.x - origX) > widthFeature || Math.abs(feature.y - origY) > widthFeature)     return KltTrackFault.DRIFTED;
    if (Math.abs(dx) < config.minPositionDelta && Math.abs(dy) < config.minPositionDelta) {
      break;
    }
  }
  if (computeError(feature) > config.maxPerPixelError)   return KltTrackFault.LARGE_ERROR;
  return KltTrackFault.SUCCESS;
}",0.9120409906063194
151012,"/** 
 * Sets the current image it should be tracking with.
 * @param image  Original input image.
 * @param derivX Image derivative along the x-axis
 * @param derivY Image derivative along the y-axis
 */
public void setImage(InputImage image,DerivativeImage derivX,DerivativeImage derivY){
  if (derivX != null && derivY != null)   InputSanityCheck.checkSameShape(image,derivX,derivY);
  this.image=image;
  interpInput.setImage(image);
  this.derivX=derivX;
  this.derivY=derivY;
  interpPixelI.setImage(image);
  interpPixelDX.setImage(derivX);
  interpPixelDY.setImage(derivY);
}","/** 
 * Sets the current image it should be tracking with.
 * @param image  Original input image.
 * @param derivX Image derivative along the x-axis
 * @param derivY Image derivative along the y-axis
 */
public void setImage(InputImage image,DerivativeImage derivX,DerivativeImage derivY){
  InputSanityCheck.checkSameShape(image,derivX,derivY);
  this.image=image;
  interpInput.setImage(image);
  this.derivX=derivX;
  this.derivY=derivY;
  interpPixelI.setImage(image);
  interpPixelDX.setImage(derivX);
  interpPixelDY.setImage(derivY);
}",0.9644128113879004
151013,"/** 
 * Decomposed the provided homography matrix into its R,T/d,N components. Four solutions will be produced and can be accessed with   {@link #getSolutionsN()} and{@link #getSolutionsSE()}.
 * @param H Homography matrix.  Not modified.
 */
public void decompose(DenseMatrix64F H){
  if (svd.inputModified()) {
    H_copy.set(H);
    if (!svd.decompose(H_copy))     throw new RuntimeException(""String_Node_Str"");
  }
 else {
    if (!svd.decompose(H))     throw new RuntimeException(""String_Node_Str"");
  }
  DenseMatrix64F V=svd.getV(null,false);
  DenseMatrix64F S=svd.getW(null);
  SingularOps.descendingOrder(null,false,S,V,false);
  double s0=S.get(0,0) * S.get(0,0);
  double s2=S.get(2,2) * S.get(2,2);
  v2.set(V.get(0,1),V.get(1,1),V.get(2,1));
  double a=Math.sqrt(1 - s2);
  double b=Math.sqrt(s0 - 1);
  double div=Math.sqrt(s0 - s2);
  for (int i=0; i < 3; i++) {
    double e1=(a * V.get(i,0) + b * V.get(i,2)) / div;
    double e2=(a * V.get(i,0) - b * V.get(i,2)) / div;
    u1.setIndex(i,e1);
    u2.setIndex(i,e2);
  }
  setU(U1,v2,u1);
  setU(U2,v2,u2);
  setW(W1,H,v2,u1);
  setW(W2,H,v2,u2);
  createSolution(W1,U1,u1,H,solutionsSE.get(0),solutionsN.get(0));
  createSolution(W2,U2,u2,H,solutionsSE.get(1),solutionsN.get(1));
  createMirrorSolution(0,2);
  createMirrorSolution(1,3);
}","/** 
 * Decomposed the provided homography matrix into its R,T/d,N components. Four solutions will be produced and can be accessed with   {@link #getSolutionsN()} and{@link #getSolutionsSE()}.
 * @param H Homography matrix.  Not modified.
 */
public void decompose(DenseMatrix64F H){
  if (!svd.decompose(H))   throw new RuntimeException(""String_Node_Str"");
  DenseMatrix64F V=svd.getV(null,false);
  DenseMatrix64F S=svd.getW(null);
  SingularOps.descendingOrder(null,false,S,V,false);
  double s0=S.get(0,0) * S.get(0,0);
  double s2=S.get(2,2) * S.get(2,2);
  v2.set(V.get(0,1),V.get(1,1),V.get(2,1));
  double a=Math.sqrt(1 - s2);
  double b=Math.sqrt(s0 - 1);
  double div=Math.sqrt(s0 - s2);
  for (int i=0; i < 3; i++) {
    double e1=(a * V.get(i,0) + b * V.get(i,2)) / div;
    double e2=(a * V.get(i,0) - b * V.get(i,2)) / div;
    u1.setIndex(i,e1);
    u2.setIndex(i,e2);
  }
  setU(U1,v2,u1);
  setU(U2,v2,u2);
  setW(W1,H,v2,u1);
  setW(W2,H,v2,u2);
  createSolution(W1,U1,u1,H,solutionsSE.get(0),solutionsN.get(0));
  createSolution(W2,U2,u2,H,solutionsSE.get(1),solutionsN.get(1));
  createMirrorSolution(0,2);
  createMirrorSolution(1,3);
}",0.9371196754563894
151014,"public DecomposeHomography(){
  for (int i=0; i < 4; i++) {
    solutionsN.add(new Vector3D_F64());
    solutionsSE.add(new Se3_F64());
  }
}","public DecomposeHomography(){
  for (int i=0; i < 4; i++) {
    solutionsN.add(new Vector3D_F64());
    solutionsSE.add(new Se3_F64());
  }
  svd=new SafeSvd(DecompositionFactory.svd(3,3,false,true,false));
}",0.8080229226361032
151015,"/** 
 * <p> Extracts the epipoles from an essential or fundamental matrix.  The epipoles are extracted from the left and right null space of the provided matrix.  Note that the found epipoles are in homogeneous coordinates.  If the epipole is at infinity then z=0 </p> <p> Left: e<sub>2</sub><sup>T</sup>*F = 0 <br> Right: F*e<sub>1</sub> = 0 </p>
 * @param F Input: Fundamental or Essential 3x3 matrix.  Not modified.
 * @param e1 Output: Right epipole in homogeneous coordinates, Modified.
 * @param e2 Output: Left epipole in homogeneous coordinates, Modified.
 */
public static void extractEpipoles(DenseMatrix64F F,Point3D_F64 e1,Point3D_F64 e2){
  SimpleMatrix f=SimpleMatrix.wrap(F);
  SimpleSVD svd=f.svd();
  SimpleMatrix U=svd.getU();
  SimpleMatrix V=svd.getV();
  e2.set(U.get(0,2),U.get(1,2),U.get(2,2));
  e1.set(V.get(0,2),V.get(1,2),V.get(2,2));
}","/** 
 * <p> Extracts the epipoles from an essential or fundamental matrix.  The epipoles are extracted from the left and right null space of the provided matrix.  Note that the found epipoles are in homogeneous coordinates.  If the epipole is at infinity then z=0 </p> <p> Left: e<sub>2</sub><sup>T</sup>*F = 0 <br> Right: F*e<sub>1</sub> = 0 </p>
 * @param F Input: Fundamental or Essential 3x3 matrix.  Not modified.
 * @param e1 Output: Right epipole in homogeneous coordinates. Can be null. Modified.
 * @param e2 Output: Left epipole in homogeneous coordinates. Can be null. Modified.
 */
public static void extractEpipoles(DenseMatrix64F F,Point3D_F64 e1,Point3D_F64 e2){
  SimpleMatrix f=SimpleMatrix.wrap(F);
  SimpleSVD svd=f.svd();
  SimpleMatrix U=svd.getU();
  SimpleMatrix V=svd.getV();
  if (e2 != null)   e2.set(U.get(0,2),U.get(1,2),U.get(2,2));
  if (e1 != null)   e1.set(V.get(0,2),V.get(1,2),V.get(2,2));
}",0.9630872483221476
151016,"/** 
 * Computes the homography based on two unique lines on the plane
 * @param line0 Line on the plane
 * @param line1 Line on the plane
 */
public boolean process(PairLineNorm line0,PairLineNorm line1){
  double a0=GeometryMath_F64.dot(e2,line0.l2);
  double a1=GeometryMath_F64.dot(e2,line1.l2);
  GeometryMath_F64.multTran(A,line0.l2,Al0);
  GeometryMath_F64.multTran(A,line1.l2,Al1);
  planeA.set(line0.l1.x,line0.l1.y,line0.l1.z,0);
  planeB.set(Al0.x,Al0.y,Al0.z,a0);
  if (!Intersection3D_F64.intersect(planeA,planeB,intersect0))   return false;
  intersect0.slope.normalize();
  planeA.set(line1.l1.x,line1.l1.y,line1.l1.z,0);
  planeB.set(Al1.x,Al1.y,Al1.z,a1);
  if (!Intersection3D_F64.intersect(planeA,planeB,intersect1))   return false;
  intersect1.slope.normalize();
  from0to1.x=intersect1.p.x - intersect0.p.x;
  from0to1.y=intersect1.p.y - intersect0.p.y;
  from0to1.z=intersect1.p.z - intersect0.p.z;
  GeometryMath_F64.cross(intersect0.slope,from0to1,pi.n);
  pi.p.set(intersect0.p);
  UtilPlane3D_F64.convert(pi,pi_gen);
  v.set(pi_gen.A / pi_gen.D,pi_gen.B / pi_gen.D,pi_gen.C / pi_gen.D);
  GeometryMath_F64.outerProd(e2,v,av);
  CommonOps.sub(A,av,H);
  return true;
}","/** 
 * Computes the homography based on two unique lines on the plane
 * @param line0 Line on the plane
 * @param line1 Line on the plane
 */
public boolean process(PairLineNorm line0,PairLineNorm line1){
  double a0=GeometryMath_F64.dot(e2,line0.l2);
  double a1=GeometryMath_F64.dot(e2,line1.l2);
  GeometryMath_F64.multTran(A,line0.l2,Al0);
  GeometryMath_F64.multTran(A,line1.l2,Al1);
  planeA.set(line0.l1.x,line0.l1.y,line0.l1.z,0);
  planeB.set(Al0.x,Al0.y,Al0.z,a0);
  if (!Intersection3D_F64.intersect(planeA,planeB,intersect0))   return false;
  intersect0.slope.normalize();
  planeA.set(line1.l1.x,line1.l1.y,line1.l1.z,0);
  planeB.set(Al1.x,Al1.y,Al1.z,a1);
  if (!Intersection3D_F64.intersect(planeA,planeB,intersect1))   return false;
  intersect1.slope.normalize();
  from0to1.x=intersect1.p.x - intersect0.p.x;
  from0to1.y=intersect1.p.y - intersect0.p.y;
  from0to1.z=intersect1.p.z - intersect0.p.z;
  GeometryMath_F64.cross(intersect0.slope,from0to1,pi.n);
  pi.p.set(intersect0.p);
  UtilPlane3D_F64.convert(pi,pi_gen);
  v.set(pi_gen.A / pi_gen.D,pi_gen.B / pi_gen.D,pi_gen.C / pi_gen.D);
  GeometryMath_F64.outerProd(e2,v,av);
  CommonOps.sub(A,av,H);
  adjust.adjust(H,line0);
  return true;
}",0.9892294946147472
151017,"/** 
 * Estimates the homography from view 1 to view 2 induced by a plane from 3 point associations. Each pair must pass the epipolar constraint.  This can fail if the points are colinear.
 * @param p1 Associated point observation
 * @param p2 Associated point observation
 * @param p3 Associated point observation
 * @return True if successful or false if it failed
 */
public boolean process(AssociatedPair p1,AssociatedPair p2,AssociatedPair p3){
  fillM(p1.p1,p2.p1,p3.p1);
  b.x=computeB(p1.p2);
  b.y=computeB(p2.p2);
  b.z=computeB(p3.p2);
  if (!solver.setA(M))   return false;
  GeometryMath_F64.toMatrix(b,temp0);
  solver.solve(temp0,temp1);
  GeometryMath_F64.toTuple3D(temp1,A_inv_b);
  GeometryMath_F64.addOuterProd(A,-1,e2,A_inv_b,H);
  return true;
}","/** 
 * Estimates the homography from view 1 to view 2 induced by a plane from 3 point associations. Each pair must pass the epipolar constraint.  This can fail if the points are colinear.
 * @param p1 Associated point observation
 * @param p2 Associated point observation
 * @param p3 Associated point observation
 * @return True if successful or false if it failed
 */
public boolean process(AssociatedPair p1,AssociatedPair p2,AssociatedPair p3){
  fillM(p1.p1,p2.p1,p3.p1);
  b.x=computeB(p1.p2);
  b.y=computeB(p2.p2);
  b.z=computeB(p3.p2);
  if (!solver.setA(M))   return false;
  GeometryMath_F64.toMatrix(b,temp0);
  solver.solve(temp0,temp1);
  GeometryMath_F64.toTuple3D(temp1,A_inv_b);
  GeometryMath_F64.addOuterProd(A,-1,e2,A_inv_b,H);
  adjust.adjust(H,p1);
  return true;
}",0.985209003215434
151018,"/** 
 * Computes the homography based on a line and point on the plane
 * @param line Line on the plane
 * @param point Point on the plane
 */
public void process(PairLineNorm line,AssociatedPair point){
  GeometryMath_F64.mult(F,point.p1,Fx);
  GeometryMath_F64.cross(Fx,line.getL2(),t0);
  GeometryMath_F64.cross(point.p2,t0,t1);
  GeometryMath_F64.cross(point.p2,e2,t0);
  double top=GeometryMath_F64.dot(t0,t1);
  double bottom=t0.normSq() * (line.l1.x * point.p1.x + line.l1.y * point.p1.y + line.l1.z);
  GeometryMath_F64.outerProd(e2,line.l1,el);
  GeometryMath_F64.multCrossA(line.l2,F,lf);
  CommonOps.add(lf,top / bottom,el,H);
}","/** 
 * Computes the homography based on a line and point on the plane
 * @param line Line on the plane
 * @param point Point on the plane
 */
public void process(PairLineNorm line,AssociatedPair point){
  GeometryMath_F64.mult(F,point.p1,Fx);
  GeometryMath_F64.cross(Fx,line.getL2(),t0);
  GeometryMath_F64.cross(point.p2,t0,t1);
  GeometryMath_F64.cross(point.p2,e2,t0);
  double top=GeometryMath_F64.dot(t0,t1);
  double bottom=t0.normSq() * (line.l1.x * point.p1.x + line.l1.y * point.p1.y + line.l1.z);
  GeometryMath_F64.outerProd(e2,line.l1,el);
  GeometryMath_F64.multCrossA(line.l2,F,lf);
  CommonOps.add(lf,top / bottom,el,H);
  adjust.adjust(H,point);
}",0.9800613496932516
151019,"/** 
 * Specify the fundamental matrix and the camera 2 epipole.
 * @param F Fundamental matrix.
 * @param e2 Epipole for camera 2.  If null it will be computed internally.
 */
public void setFundamental(DenseMatrix64F F,Point3D_F64 e2){
  this.F=F;
  if (e2 != null)   this.e2=e2;
 else {
    MultiViewOps.extractEpipoles(F,new Point3D_F64(),e2);
  }
}","/** 
 * Specify the fundamental matrix and the camera 2 epipole.
 * @param F Fundamental matrix.
 * @param e2 Epipole for camera 2.  If null it will be computed internally.
 */
public void setFundamental(DenseMatrix64F F,Point3D_F64 e2){
  this.F=F;
  if (e2 != null)   this.e2.set(e2);
 else {
    MultiViewOps.extractEpipoles(F,new Point3D_F64(),this.e2);
  }
}",0.9776536312849162
151020,"/** 
 * <p> Computes the homography matrix given a set of observed points in two images.  A set of   {@link AssociatedPair}is passed in.  The computed homography 'H' is found such that the attributes 'keyLoc' and 'currLoc' in   {@link AssociatedPair}refers to x1 and x2, respectively, in the equation  below:<br> x<sub>2</sub> = H*x<sub>1</sub> </p>
 * @param points A set of observed image points that are generated from a planar object.  Minimum of 4 pairs required.
 * @param foundH Output: Storage for the found solution. 3x3 matrix.
 * @return true if the calculation was a success.
 */
public boolean process(List<AssociatedPair> points,DenseMatrix64F foundH){
  if (points.size() < 4)   throw new IllegalArgumentException(""String_Node_Str"");
  if (normalize) {
    LowLevelMultiViewOps.computeNormalization(points,N1,N2);
    createANormalized(points,A);
  }
 else {
    createA(points,A);
  }
  if (computeH(A,foundH))   return false;
  if (normalize)   undoNormalizationH(foundH,N1,N2);
  if (!findScaleH(foundH))   return false;
  adjustHomographSign(points.get(0),foundH);
  return true;
}","/** 
 * <p> Computes the homography matrix given a set of observed points in two images.  A set of   {@link AssociatedPair}is passed in.  The computed homography 'H' is found such that the attributes 'keyLoc' and 'currLoc' in   {@link AssociatedPair}refers to x1 and x2, respectively, in the equation  below:<br> x<sub>2</sub> = H*x<sub>1</sub> </p>
 * @param points A set of observed image points that are generated from a planar object.  Minimum of 4 pairs required.
 * @param foundH Output: Storage for the found solution. 3x3 matrix.
 * @return true if the calculation was a success.
 */
public boolean process(List<AssociatedPair> points,DenseMatrix64F foundH){
  if (points.size() < 4)   throw new IllegalArgumentException(""String_Node_Str"");
  if (normalize) {
    LowLevelMultiViewOps.computeNormalization(points,N1,N2);
    createANormalized(points,A);
  }
 else {
    createA(points,A);
  }
  if (computeH(A,foundH))   return false;
  if (normalize)   undoNormalizationH(foundH,N1,N2);
  adjust.adjust(foundH,points.get(0));
  return true;
}",0.9586238958623896
151021,"public void process(String outputFileName){
  calibrator.reset();
  final ProcessThread monitor=new ProcessThread();
  monitor.start();
  for (int i=0; i < images.size(); i++) {
    final File file=new File(images.get(i));
    final BufferedImage orig=media.openImage(images.get(i));
    if (orig != null) {
      ImageFloat32 input=ConvertBufferedImage.convertFrom(orig,(ImageFloat32)null);
      if (calibrator.addImage(input)) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            gui.addImage(file.getName(),orig);
            gui.repaint();
            monitor.setMessage(0,file.getName());
          }
        }
);
      }
 else {
        System.out.println(""String_Node_Str"" + file.getName());
      }
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      gui.setObservations(calibrator.getObservations());
    }
  }
);
  gui.repaint();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      monitor.setMessage(1,""String_Node_Str"");
    }
  }
);
  final IntrinsicParameters param=calibrator.process();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      gui.setResults(calibrator.getErrors());
      gui.setCalibration(calibrator.getZhangParam());
    }
  }
);
  monitor.stopThread();
  if (outputFileName != null)   BoofMiscOps.saveXML(param,outputFileName);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ImageDistort<ImageFloat32> dist=LensDistortionOps.removeRadialImage(param,ImageFloat32.class);
      gui.setCorrection(dist);
      gui.repaint();
    }
  }
);
  calibrator.printStatistics();
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println();
  param.print();
}","public void process(String outputFileName){
  calibrator.reset();
  final ProcessThread monitor=new ProcessThread();
  monitor.start();
  for (int i=0; i < images.size(); i++) {
    final File file=new File(images.get(i));
    final BufferedImage orig=media.openImage(images.get(i));
    if (orig != null) {
      ImageFloat32 input=ConvertBufferedImage.convertFrom(orig,(ImageFloat32)null);
      if (calibrator.addImage(input)) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            gui.addImage(file.getName(),orig);
            gui.repaint();
            monitor.setMessage(0,file.getName());
          }
        }
);
      }
 else {
        System.out.println(""String_Node_Str"" + file.getName());
      }
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      gui.setObservations(calibrator.getObservations());
    }
  }
);
  gui.repaint();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      monitor.setMessage(1,""String_Node_Str"");
    }
  }
);
  final IntrinsicParameters param=calibrator.process();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      gui.setResults(calibrator.getErrors());
      gui.setCalibration(calibrator.getZhangParam());
    }
  }
);
  monitor.stopThread();
  if (outputFileName != null)   BoofMiscOps.saveXML(param,outputFileName);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ImageDistort<ImageFloat32> dist=LensDistortionOps.removeRadialImage(param,BorderType.VALUE,ImageFloat32.class);
      gui.setCorrection(dist);
      gui.repaint();
    }
  }
);
  calibrator.printStatistics();
  System.out.println();
  System.out.println(""String_Node_Str"");
  System.out.println();
  param.print();
}",0.9951690821256038
151022,"/** 
 * Creates a point cloud from a depth image and saves the color information.  The depth and color images are assumed to be aligned.
 * @param param Intrinsic camera parameters for depth image
 * @param depth depth image.  each value is in millimeters.
 * @param rgb Color image that's aligned to the depth.
 * @param cloud Output point cloud
 * @param cloudColor Output color for each point in the cloud
 */
public static void depthTo3D(IntrinsicParameters param,MultiSpectral<ImageUInt8> rgb,ImageUInt16 depth,FastQueue<Point3D_F64> cloud,FastQueueArray_I32 cloudColor){
  cloud.reset();
  cloudColor.reset();
  PixelToNormalized_F64 p2n=new PixelToNormalized_F64();
  p2n.set(param.fx,param.fy,param.skew,param.cx,param.cy);
  Point2D_F64 n=new Point2D_F64();
  ImageUInt8 colorR=rgb.getBand(0);
  ImageUInt8 colorG=rgb.getBand(1);
  ImageUInt8 colorB=rgb.getBand(2);
  for (int y=0; y < depth.height; y++) {
    int index=depth.startIndex + y * depth.stride;
    for (int x=0; x < depth.width; x++) {
      int mm=depth.data[index++] & 0xFFFF;
      if (mm == 0)       continue;
      p2n.compute(x,y,n);
      double l=Math.sqrt(n.x * n.x + n.y * n.y + 1);
      Point3D_F64 p=cloud.grow();
      p.x=(n.x / l) * mm;
      p.y=(n.y / l) * mm;
      p.z=(1.0 / l) * mm;
      int color[]=cloudColor.grow();
      color[0]=colorR.unsafe_get(x,y);
      color[1]=colorG.unsafe_get(x,y);
      color[2]=colorB.unsafe_get(x,y);
    }
  }
}","/** 
 * Creates a point cloud from a depth image and saves the color information.  The depth and color images are assumed to be aligned.
 * @param param Intrinsic camera parameters for depth image
 * @param depth depth image.  each value is in millimeters.
 * @param rgb Color image that's aligned to the depth.
 * @param cloud Output point cloud
 * @param cloudColor Output color for each point in the cloud
 */
public static void depthTo3D(IntrinsicParameters param,MultiSpectral<ImageUInt8> rgb,ImageUInt16 depth,FastQueue<Point3D_F64> cloud,FastQueueArray_I32 cloudColor){
  cloud.reset();
  cloudColor.reset();
  PixelToNormalized_F64 p2n=new PixelToNormalized_F64();
  p2n.set(param.fx,param.fy,param.skew,param.cx,param.cy);
  Point2D_F64 n=new Point2D_F64();
  ImageUInt8 colorR=rgb.getBand(0);
  ImageUInt8 colorG=rgb.getBand(1);
  ImageUInt8 colorB=rgb.getBand(2);
  for (int y=0; y < depth.height; y++) {
    int index=depth.startIndex + y * depth.stride;
    for (int x=0; x < depth.width; x++) {
      int mm=depth.data[index++] & 0xFFFF;
      if (mm == 0)       continue;
      p2n.compute(x,y,n);
      Point3D_F64 p=cloud.grow();
      p.z=mm;
      p.x=n.x * p.z;
      p.y=n.y * p.z;
      int color[]=cloudColor.grow();
      color[0]=colorR.unsafe_get(x,y);
      color[1]=colorG.unsafe_get(x,y);
      color[2]=colorB.unsafe_get(x,y);
    }
  }
}",0.9576663109213804
151023,"public void process() throws IOException {
  logFile=new DataOutputStream(new FileOutputStream(""String_Node_Str""));
  logFile.write(""String_Node_Str"".getBytes());
  int w=UtilOpenKinect.getWidth(resolution);
  int h=UtilOpenKinect.getHeight(resolution);
  buffRgb=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
  buffer=new byte[w * h * 3];
  StreamOpenKinectRgbDepth stream=new StreamOpenKinectRgbDepth();
  Context kinect=Freenect.createContext();
  if (kinect.numDevices() < 0)   throw new RuntimeException(""String_Node_Str"");
  Device device=kinect.openDevice(0);
  stream.start(device,resolution,this);
}","public void process() throws IOException {
  logFile=new DataOutputStream(new FileOutputStream(""String_Node_Str""));
  logFile.write(""String_Node_Str"".getBytes());
  int w=UtilOpenKinect.getWidth(resolution);
  int h=UtilOpenKinect.getHeight(resolution);
  buffRgb=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
  buffer=new byte[w * h * 3];
  if (showImage) {
    gui=ShowImages.showWindow(buffRgb,""String_Node_Str"");
  }
  StreamOpenKinectRgbDepth stream=new StreamOpenKinectRgbDepth();
  Context kinect=Freenect.createContext();
  if (kinect.numDevices() < 0)   throw new RuntimeException(""String_Node_Str"");
  Device device=kinect.openDevice(0);
  stream.start(device,resolution,this);
  if (maxImages > 0) {
    while (frameNumber < maxImages) {
      BoofMiscOps.pause(100);
    }
    stream.stop();
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
}",0.8228187919463087
151024,"public static void main(String args[]) throws IOException {
  LogKinectDataApp app=new LogKinectDataApp();
  app.process();
}","public static void main(String args[]) throws IOException {
  LogKinectDataApp app=new LogKinectDataApp(30,true);
  app.process();
}",0.9727626459143968
151025,"@Override public void processKinect(MultiSpectral<ImageUInt8> rgb,ImageUInt16 depth,long timeRgb,long timeDepth){
  System.out.println(frameNumber + ""String_Node_Str"" + timeRgb);
  try {
    logFile.write(String.format(""String_Node_Str"",frameNumber,timeRgb,timeDepth).getBytes());
    logFile.flush();
    savePPM(rgb);
    saveDepth(depth);
    frameNumber++;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void processKinect(MultiSpectral<ImageUInt8> rgb,ImageUInt16 depth,long timeRgb,long timeDepth){
  System.out.println(frameNumber + ""String_Node_Str"" + timeRgb);
  try {
    logFile.write(String.format(""String_Node_Str"",frameNumber,timeRgb,timeDepth).getBytes());
    logFile.flush();
    savePPM(rgb);
    saveDepth(depth);
    frameNumber++;
    if (showImage) {
      ConvertBufferedImage.convertTo_U8(rgb,buffRgb);
      gui.repaint();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8921775898520085
151026,"protected void processRgb(FrameMode mode,ByteBuffer frame,int timestamp){
  if (mode.getVideoFormat() != VideoFormat.RGB) {
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + timestamp);
  if (outRgb == null) {
    rgb.reshape(mode.getWidth(),mode.getHeight());
    outRgb=new BufferedImage(rgb.width,rgb.height,BufferedImage.TYPE_INT_BGR);
    guiRgb=ShowImages.showWindow(outRgb,""String_Node_Str"");
  }
  UtilOpenKinect.bufferRgbToMsU8(frame,rgb);
  ConvertBufferedImage.convertTo_U8(rgb,outRgb);
  guiRgb.repaint();
}","protected void processRgb(FrameMode mode,ByteBuffer frame,int timestamp){
  if (mode.getVideoFormat() != VideoFormat.RGB) {
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + timestamp);
  if (outRgb == null) {
    rgb.reshape(mode.getWidth(),mode.getHeight());
    outRgb=new BufferedImage(rgb.width,rgb.height,BufferedImage.TYPE_INT_RGB);
    guiRgb=ShowImages.showWindow(outRgb,""String_Node_Str"");
  }
  UtilOpenKinect.bufferRgbToMsU8(frame,rgb);
  ConvertBufferedImage.convertTo_U8(rgb,outRgb);
  guiRgb.repaint();
}",0.9964093357271095
151027,"protected void processDepth(FrameMode mode,ByteBuffer frame,int timestamp){
  System.out.println(""String_Node_Str"" + timestamp);
  if (outDepth == null) {
    depth.reshape(mode.getWidth(),mode.getHeight());
    outDepth=new BufferedImage(depth.width,depth.height,BufferedImage.TYPE_INT_BGR);
    guiDepth=ShowImages.showWindow(outDepth,""String_Node_Str"");
  }
  UtilOpenKinect.bufferDepthToU16(frame,depth);
  VisualizeImageData.grayUnsigned(depth,outDepth,1000);
  guiDepth.repaint();
}","protected void processDepth(FrameMode mode,ByteBuffer frame,int timestamp){
  System.out.println(""String_Node_Str"" + timestamp);
  if (outDepth == null) {
    depth.reshape(mode.getWidth(),mode.getHeight());
    outDepth=new BufferedImage(depth.width,depth.height,BufferedImage.TYPE_INT_RGB);
    guiDepth=ShowImages.showWindow(outDepth,""String_Node_Str"");
  }
  UtilOpenKinect.bufferDepthToU16(frame,depth);
  VisualizeImageData.grayUnsigned(depth,outDepth,1000);
  guiDepth.repaint();
}",0.9959016393442623
151028,"/** 
 * Converts byte array that contains RGB data into a 3-channel MultiSpectral image
 * @param input Input array
 * @param output Output depth image
 */
public static void bufferRgbToMsU8(byte[] input,MultiSpectral<ImageUInt8> output){
  ImageUInt8 band0=output.getBand(0);
  ImageUInt8 band1=output.getBand(1);
  ImageUInt8 band2=output.getBand(2);
  int indexIn=0;
  for (int y=0; y < output.height; y++) {
    int indexOut=output.startIndex + y * output.stride;
    for (int x=0; x < output.width; x++, indexOut++) {
      band2.data[indexOut]=input[indexIn++];
      band1.data[indexOut]=input[indexIn++];
      band0.data[indexOut]=input[indexIn++];
    }
  }
}","/** 
 * Converts byte array that contains RGB data into a 3-channel MultiSpectral image
 * @param input Input array
 * @param output Output depth image
 */
public static void bufferRgbToMsU8(byte[] input,MultiSpectral<ImageUInt8> output){
  ImageUInt8 band0=output.getBand(0);
  ImageUInt8 band1=output.getBand(1);
  ImageUInt8 band2=output.getBand(2);
  int indexIn=0;
  for (int y=0; y < output.height; y++) {
    int indexOut=output.startIndex + y * output.stride;
    for (int x=0; x < output.width; x++, indexOut++) {
      band0.data[indexOut]=input[indexIn++];
      band1.data[indexOut]=input[indexIn++];
      band2.data[indexOut]=input[indexIn++];
    }
  }
}",0.8654708520179372
151029,"private Affine2D_F64 createInitialTransform(){
  float scale=0.8f;
  Affine2D_F64 H=new Affine2D_F64(scale,0,0,scale,stitchWidth / 4,stitchHeight / 4);
  return H.invert(null);
}","private IT createInitialTransform(){
  float scale=0.8f;
  if (fitModel instanceof Affine2D_F64) {
    Affine2D_F64 H=new Affine2D_F64(scale,0,0,scale,stitchWidth / 4,stitchHeight / 4);
    return (IT)H.invert(null);
  }
 else   if (fitModel instanceof Homography2D_F64) {
    Homography2D_F64 H=new Homography2D_F64(scale,0,stitchWidth / 4,0,scale,stitchHeight / 4,0,0,1);
    return (IT)H.invert(null);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + fitModel.getClass().getSimpleName());
  }
}",0.3918722786647315
151030,"public static void saveXML(Object o,String fileName){
  XStream xstream=new XStream(new DomDriver());
  xstream.registerConverter(new JavaBeanConverter(xstream.getMapper()));
  try {
    xstream.toXML(o,new FileOutputStream(fileName));
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
}","public static void saveXML(Object o,String fileName){
  XStreamClassLoader loader=new BoofcvClassLoader();
  XStream xstream=new XStream(new PureJavaReflectionProvider(),new DomDriver(),loader,null,new DefaultConverterLookup(),null);
  xstream.registerConverter(new JavaBeanConverter(xstream.getMapper()));
  try {
    xstream.toXML(o,new FileOutputStream(fileName));
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
}",0.804177545691906
151031,"public static <T>T loadXML(Reader r){
  XMLDecoder decoder=new XMLDecoder(new ByteArrayInputStream(toString(r).getBytes()));
  T ret=(T)decoder.readObject();
  decoder.close();
  return ret;
}","public static <T>T loadXML(Reader r){
  XStream xstream=new XStream(new DomDriver());
  return (T)xstream.fromXML(r);
}",0.5080385852090032
151032,"public void setSelected(int selected){
  this.selectedImage=selected;
  this.isUndistorted=false;
  BufferedImage image=images.get(selected);
  int numBands=image.getRaster().getNumBands();
  if (origMS == null || origMS.getNumBands() != numBands) {
    origMS=new MultiSpectral<ImageFloat32>(ImageFloat32.class,1,1,numBands);
    correctedMS=new MultiSpectral<ImageFloat32>(ImageFloat32.class,1,1,numBands);
  }
  if (image.getWidth() != origMS.getWidth() || image.getHeight() != origMS.getHeight()) {
    int type=numBands == 1 ? BufferedImage.TYPE_INT_BGR : image.getType();
    undistorted=new BufferedImage(image.getWidth(),image.getHeight(),type);
    origMS.reshape(image.getWidth(),image.getHeight());
    correctedMS.reshape(image.getWidth(),image.getHeight());
  }
}","public void setSelected(int selected){
  this.selectedImage=selected;
  this.isUndistorted=false;
  if (origMS == null) {
    BufferedImage image=images.get(selected);
    origMS=ConvertBufferedImage.convertFromMulti(image,null,ImageFloat32.class);
    correctedMS=ConvertBufferedImage.convertFromMulti(image,null,ImageFloat32.class);
    undistorted=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
  }
}",0.312551953449709
151033,"/** 
 * <p> Crates algorithms for computing dense disparity images up to pixel level accuracy. </p> <p> NOTE: For RECT_FIVE the size of the sub-regions it uses is what is specified. </p>
 * @param minDisparity Minimum disparity that it will check. Must be >= 0 and < maxDisparity
 * @param maxDisparity Maximum disparity that it will calculate. Must be > 0
 * @param regionRadiusX Radius of the rectangular region along x-axis.
 * @param regionRadiusY Radius of the rectangular region along y-axis.
 * @param maxPerPixelError Maximum allowed error in a region per pixel.  Set to < 0 to disable.
 * @param validateRtoL Tolerance for how difference the left to right associated values can be.  Try 6
 * @param texture Tolerance for how similar optimal region is to other region.  Closer to zero is more tolerant.Try 0.1
 * @param imageType Type of input image.
 * @return Rectangular region based WTA disparity.algorithm.
 */
public static <T extends ImageSingleBand>StereoDisparity<T,ImageUInt8> regionWta(DisparityAlgorithms whichAlg,int minDisparity,int maxDisparity,int regionRadiusX,int regionRadiusY,double maxPerPixelError,int validateRtoL,double texture,Class<T> imageType){
  double maxError=(regionRadiusX * 2 + 1) * (regionRadiusY * 2 + 1) * maxPerPixelError;
  if (whichAlg == DisparityAlgorithms.RECT_FIVE)   maxError*=3;
  DisparitySelect select;
  if (imageType == ImageUInt8.class) {
    select=selectDisparity_S32((int)maxError,validateRtoL,texture);
  }
 else   if (imageType == ImageFloat32.class) {
    select=selectDisparity_F32((int)maxError,validateRtoL,texture);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DisparityScoreRowFormat<T,ImageUInt8> alg=null;
switch (whichAlg) {
case RECT:
    if (imageType == ImageUInt8.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_U8(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
 else     if (imageType == ImageSInt16.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_S16(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
 else     if (imageType == ImageFloat32.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_F32(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
  break;
case RECT_FIVE:
if (imageType == ImageUInt8.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_U8(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
 else if (imageType == ImageSInt16.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_S16(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
 else if (imageType == ImageFloat32.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_F32(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + whichAlg);
}
if (alg == null) throw new RuntimeException(""String_Node_Str"" + imageType.getSimpleName());
return new WrapDisparitySadRect<T,ImageUInt8>(alg);
}","/** 
 * <p> Crates algorithms for computing dense disparity images up to pixel level accuracy. </p> <p> NOTE: For RECT_FIVE the size of the sub-regions it uses is what is specified. </p>
 * @param minDisparity Minimum disparity that it will check. Must be >= 0 and < maxDisparity
 * @param maxDisparity Maximum disparity that it will calculate. Must be > 0
 * @param regionRadiusX Radius of the rectangular region along x-axis.
 * @param regionRadiusY Radius of the rectangular region along y-axis.
 * @param maxPerPixelError Maximum allowed error in a region per pixel.  Set to < 0 to disable.
 * @param validateRtoL Tolerance for how difference the left to right associated values can be.  Try 6
 * @param texture Tolerance for how similar optimal region is to other region.  Closer to zero is more tolerant.Try 0.1
 * @param imageType Type of input image.
 * @return Rectangular region based WTA disparity.algorithm.
 */
public static <T extends ImageSingleBand>StereoDisparity<T,ImageUInt8> regionWta(DisparityAlgorithms whichAlg,int minDisparity,int maxDisparity,int regionRadiusX,int regionRadiusY,double maxPerPixelError,int validateRtoL,double texture,Class<T> imageType){
  double maxError=(regionRadiusX * 2 + 1) * (regionRadiusY * 2 + 1) * maxPerPixelError;
  if (whichAlg == DisparityAlgorithms.RECT_FIVE)   maxError*=3;
  DisparitySelect select;
  if (imageType == ImageUInt8.class || imageType == ImageSInt16.class) {
    select=selectDisparity_S32((int)maxError,validateRtoL,texture);
  }
 else   if (imageType == ImageFloat32.class) {
    select=selectDisparity_F32((int)maxError,validateRtoL,texture);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DisparityScoreRowFormat<T,ImageUInt8> alg=null;
switch (whichAlg) {
case RECT:
    if (imageType == ImageUInt8.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_U8(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
 else     if (imageType == ImageSInt16.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_S16(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
 else     if (imageType == ImageFloat32.class) {
      alg=FactoryStereoDisparityAlgs.scoreDisparitySadRect_F32(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
    }
  break;
case RECT_FIVE:
if (imageType == ImageUInt8.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_U8(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
 else if (imageType == ImageSInt16.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_S16(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
 else if (imageType == ImageFloat32.class) {
  alg=FactoryStereoDisparityAlgs.scoreDisparitySadRectFive_F32(minDisparity,maxDisparity,regionRadiusX,regionRadiusY,select);
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + whichAlg);
}
if (alg == null) throw new RuntimeException(""String_Node_Str"" + imageType.getSimpleName());
return new WrapDisparitySadRect<T,ImageUInt8>(alg);
}",0.9944353518821604
151034,"/** 
 * Loads the default   {@link VideoInterface}.
 * @return Video interface
 */
public static VideoInterface loadManagerDefault(){
  return loadManager(""String_Node_Str"");
}","/** 
 * Loads the default   {@link VideoInterface}.
 * @return Video interface
 */
public static VideoInterface loadManagerDefault(){
  try {
    return loadManager(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    return new BoofMjpegVideo();
  }
}",0.8045977011494253
151035,"/** 
 * Converts the buffered image into an   {@link boofcv.struct.image.MultiSpectral} image of the specifiedtype. 
 * @param src Input image.
 * @param dst Where the converted image is written to.  If null a new unsigned image is created.
 * @param type Which type of data structure is each band. (ImageUInt8 or ImageFloat32)
 * @return Converted image.
 */
public static <T extends ImageSingleBand>MultiSpectral<T> convertFromMulti(BufferedImage src,MultiSpectral<T> dst,Class<T> type){
  if (dst != null) {
    if (src.getWidth() != dst.getWidth() || src.getHeight() != dst.getHeight()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  try {
    WritableRaster raster=src.getRaster();
    int numBands;
    if (src.getType() == BufferedImage.TYPE_BYTE_INDEXED)     numBands=3;
 else     numBands=raster.getNumBands();
    if (dst == null)     dst=new MultiSpectral<T>(type,src.getWidth(),src.getHeight(),numBands);
 else     if (dst.getNumBands() != numBands)     throw new IllegalArgumentException(""String_Node_Str"" + numBands + ""String_Node_Str"");
    if (type == ImageUInt8.class) {
      if (src.getRaster() instanceof ByteInterleavedRaster && src.getType() != BufferedImage.TYPE_BYTE_INDEXED) {
        if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {
          for (int i=0; i < dst.getNumBands(); i++)           ConvertRaster.bufferedToGray(src,((MultiSpectral<ImageUInt8>)dst).getBand(i));
        }
 else {
          ConvertRaster.bufferedToMulti_U8((ByteInterleavedRaster)src.getRaster(),(MultiSpectral<ImageUInt8>)dst);
        }
      }
 else       if (src.getRaster() instanceof IntegerInterleavedRaster) {
        ConvertRaster.bufferedToMulti_U8((IntegerInterleavedRaster)src.getRaster(),(MultiSpectral<ImageUInt8>)dst);
      }
 else {
        ConvertRaster.bufferedToMulti_U8(src,(MultiSpectral<ImageUInt8>)dst);
      }
    }
 else     if (type == ImageFloat32.class) {
      if (src.getRaster() instanceof ByteInterleavedRaster && src.getType() != BufferedImage.TYPE_BYTE_INDEXED) {
        if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {
          for (int i=0; i < dst.getNumBands(); i++)           ConvertRaster.bufferedToGray(src,((MultiSpectral<ImageFloat32>)dst).getBand(i));
        }
 else {
          ConvertRaster.bufferedToMulti_F32((ByteInterleavedRaster)src.getRaster(),(MultiSpectral<ImageFloat32>)dst);
        }
      }
 else       if (src.getRaster() instanceof IntegerInterleavedRaster) {
        ConvertRaster.bufferedToMulti_F32((IntegerInterleavedRaster)src.getRaster(),(MultiSpectral<ImageFloat32>)dst);
      }
 else {
        ConvertRaster.bufferedToMulti_F32(src,(MultiSpectral<ImageFloat32>)dst);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  java.security.AccessControlException e) {
    dst=new MultiSpectral<T>(type,src.getWidth(),src.getHeight(),3);
    if (type == ImageUInt8.class) {
      ConvertRaster.bufferedToMulti_U8(src,(MultiSpectral<ImageUInt8>)dst);
    }
 else     if (type == ImageFloat32.class) {
      ConvertRaster.bufferedToMulti_F32(src,(MultiSpectral<ImageFloat32>)dst);
    }
  }
  return dst;
}","/** 
 * Converts the buffered image into an   {@link boofcv.struct.image.MultiSpectral} image of the specifiedtype. 
 * @param src Input image.
 * @param dst Where the converted image is written to.  If null a new unsigned image is created.
 * @param type Which type of data structure is each band. (ImageUInt8 or ImageFloat32)
 * @return Converted image.
 */
public static <T extends ImageSingleBand>MultiSpectral<T> convertFromMulti(BufferedImage src,MultiSpectral<T> dst,Class<T> type){
  if (dst != null) {
    if (src.getWidth() != dst.getWidth() || src.getHeight() != dst.getHeight()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  try {
    WritableRaster raster=src.getRaster();
    int numBands;
    if (src.getType() == BufferedImage.TYPE_BYTE_INDEXED)     numBands=3;
 else     numBands=raster.getNumBands();
    if (dst == null)     dst=new MultiSpectral<T>(type,src.getWidth(),src.getHeight(),numBands);
 else     if (dst.getNumBands() != numBands)     throw new IllegalArgumentException(""String_Node_Str"" + numBands + ""String_Node_Str""+ dst.getNumBands());
    if (type == ImageUInt8.class) {
      if (src.getRaster() instanceof ByteInterleavedRaster && src.getType() != BufferedImage.TYPE_BYTE_INDEXED) {
        if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {
          for (int i=0; i < dst.getNumBands(); i++)           ConvertRaster.bufferedToGray(src,((MultiSpectral<ImageUInt8>)dst).getBand(i));
        }
 else {
          ConvertRaster.bufferedToMulti_U8((ByteInterleavedRaster)src.getRaster(),(MultiSpectral<ImageUInt8>)dst);
        }
      }
 else       if (src.getRaster() instanceof IntegerInterleavedRaster) {
        ConvertRaster.bufferedToMulti_U8((IntegerInterleavedRaster)src.getRaster(),(MultiSpectral<ImageUInt8>)dst);
      }
 else {
        ConvertRaster.bufferedToMulti_U8(src,(MultiSpectral<ImageUInt8>)dst);
      }
    }
 else     if (type == ImageFloat32.class) {
      if (src.getRaster() instanceof ByteInterleavedRaster && src.getType() != BufferedImage.TYPE_BYTE_INDEXED) {
        if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {
          for (int i=0; i < dst.getNumBands(); i++)           ConvertRaster.bufferedToGray(src,((MultiSpectral<ImageFloat32>)dst).getBand(i));
        }
 else {
          ConvertRaster.bufferedToMulti_F32((ByteInterleavedRaster)src.getRaster(),(MultiSpectral<ImageFloat32>)dst);
        }
      }
 else       if (src.getRaster() instanceof IntegerInterleavedRaster) {
        ConvertRaster.bufferedToMulti_F32((IntegerInterleavedRaster)src.getRaster(),(MultiSpectral<ImageFloat32>)dst);
      }
 else {
        ConvertRaster.bufferedToMulti_F32(src,(MultiSpectral<ImageFloat32>)dst);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  java.security.AccessControlException e) {
    dst=new MultiSpectral<T>(type,src.getWidth(),src.getHeight(),3);
    if (type == ImageUInt8.class) {
      ConvertRaster.bufferedToMulti_U8(src,(MultiSpectral<ImageUInt8>)dst);
    }
 else     if (type == ImageFloat32.class) {
      ConvertRaster.bufferedToMulti_F32(src,(MultiSpectral<ImageFloat32>)dst);
    }
  }
  return dst;
}",0.9970036271881406
151036,"public void optimizeUsingZhang(){
  ComputeZhangErrors.nonlinearUsingZhang(observations,target.points);
}","public void optimizeUsingZhang(){
  ComputeZhangErrors.nonlinearUsingZhang(observations,target);
}",0.9655172413793104
151037,"/** 
 * Zhang's results have a fairly different focal length.  Use Zhang's parameters as the initial value when optimizing to see if the focal length stays the same.
 */
public static void nonlinearUsingZhang(List<List<Point2D_F64>> observations,List<Point2D_F64> target){
  Zhang99Parameters param=getZhangParam();
  Zhang99Parameters found=new Zhang99Parameters(false,2,5);
  CalibrationPlanarGridZhang99.optimizedParam(observations,target,param,found,null);
  found.convertToIntrinsic().print();
  List<ImageResults> errors=CalibrateMonoPlanar.computeErrors(observations,found,target);
  CalibrateMonoPlanar.printErrors(errors);
}","/** 
 * Zhang's results have a fairly different focal length.  Use Zhang's parameters as the initial value when optimizing to see if the focal length stays the same.
 */
public static void nonlinearUsingZhang(List<List<Point2D_F64>> observations,PlanarCalibrationTarget target){
  Zhang99Parameters param=getZhangParam();
  Zhang99Parameters found=new Zhang99Parameters(false,2,5);
  CalibrationPlanarGridZhang99 alg=new CalibrationPlanarGridZhang99(target,false,1);
  alg.optimizedParam(observations,target.points,param,found,null);
  found.convertToIntrinsic().print();
  List<ImageResults> errors=CalibrateMonoPlanar.computeErrors(observations,found,target.points);
  CalibrateMonoPlanar.printErrors(errors);
}",0.7132243684992571
151038,"@Override public void process(I image){
  detected=false;
  updaterP.update(image,pyramid);
  PyramidOps.gradient(pyramid,gradient,derivX,derivY);
  tracker.updateTracks(image,pyramid,derivX,derivY);
  if (previousSpawn < 0)   return;
  int numActive=tracker.getPureKlt().size() + tracker.getReactivated().size();
  if (previousSpawn - numActive > reactivateThreshold) {
    detected=true;
    tracker.associateAllToDetected();
    previousSpawn=tracker.getPureKlt().size() + tracker.getReactivated().size();
  }
  for (  CombinedTrack<Desc> t : tracker.getPureKlt()) {
    ((PointTrack)t.getCookie()).set(t);
  }
  for (  CombinedTrack<Desc> t : tracker.getReactivated()) {
    ((PointTrack)t.getCookie()).set(t);
  }
}","@Override public void process(I image){
  detected=false;
  updaterP.update(image,pyramid);
  PyramidOps.gradient(pyramid,gradient,derivX,derivY);
  tracker.updateTracks(image,pyramid,derivX,derivY);
  int numActive=tracker.getPureKlt().size() + tracker.getReactivated().size();
  if (previousSpawn - numActive > reactivateThreshold) {
    detected=true;
    tracker.associateAllToDetected();
    previousSpawn=tracker.getPureKlt().size() + tracker.getReactivated().size();
  }
  for (  CombinedTrack<Desc> t : tracker.getPureKlt()) {
    ((PointTrack)t.getCookie()).set(t);
  }
  for (  CombinedTrack<Desc> t : tracker.getReactivated()) {
    ((PointTrack)t.getCookie()).set(t);
  }
}",0.9750889679715302
151039,"/** 
 * Estimates the image motion then combines images together.  Can be used for mosaic and stabilization
 * @param maxJumpFraction If the area changes by this much between two consecuative frames then the transformis reset.
 * @param motion2D Estimates the image motion.
 * @param imageType Type of image processed
 * @param < I > Image input type.
 * @param < IT > Model model
 * @return StitchingFromMotion2D
 */
public static <I extends ImageSingleBand,IT extends InvertibleTransform>StitchingFromMotion2D<I,IT> createVideoStitch(double maxJumpFraction,ImageMotion2D<I,IT> motion2D,Class<I> imageType){
  StitchingTransform transform;
  if (motion2D.getTransformType() == Affine2D_F64.class) {
    transform=FactoryStitchingTransform.createAffine_F64();
  }
 else {
    transform=FactoryStitchingTransform.createHomography_F64();
  }
  InterpolatePixel<I> interp=FactoryInterpolation.createPixel(0,255,TypeInterpolate.BILINEAR,imageType);
  ImageDistort<I> distorter=FactoryDistort.distort(interp,null,imageType);
  return new StitchingFromMotion2D<I,IT>(motion2D,distorter,transform,maxJumpFraction);
}","/** 
 * Estimates the image motion then combines images together.  Typically used for mosaics and stabilization.
 * @param maxJumpFraction If the area changes by this much between two consecuative frames then the transformis reset.
 * @param motion2D Estimates the image motion.
 * @param imageType Type of image processed
 * @param < I > Image input type.
 * @param < IT > Model model
 * @return StitchingFromMotion2D
 */
public static <I extends ImageSingleBand,IT extends InvertibleTransform>StitchingFromMotion2D<I,IT> createVideoStitch(double maxJumpFraction,ImageMotion2D<I,IT> motion2D,Class<I> imageType){
  StitchingTransform transform;
  if (motion2D.getTransformType() == Affine2D_F64.class) {
    transform=FactoryStitchingTransform.createAffine_F64();
  }
 else {
    transform=FactoryStitchingTransform.createHomography_F64();
  }
  InterpolatePixel<I> interp=FactoryInterpolation.createPixel(0,255,TypeInterpolate.BILINEAR,imageType);
  ImageDistort<I> distorter=FactoryDistort.distort(interp,null,imageType);
  return new StitchingFromMotion2D<I,IT>(motion2D,distorter,transform,maxJumpFraction);
}",0.9707602339181286
151040,"/** 
 * Estimates the 2D motion of an image using different models.
 * @param ransacIterations Number of RANSAC iterations
 * @param inlierThreshold Threshold which defines an inlier.
 * @param outlierPrune If a feature is an outlier for this many turns in a row it is dropped. Try 2
 * @param absoluteMinimumTracks New features will be respawned if the number of inliers drop below this number.
 * @param respawnTrackFraction If the fraction of current inliers to the original number of inliers drops belowthis fraction then new features are spawned.  Try 0.3
 * @param respawnCoverageFraction If the area covered drops by this fraction then spawn more features.  Try 0.8
 * @param refineEstimate Should it refine the model estimate using all inliers.
 * @param tracker Point feature tracker.
 * @param motionModel Instance of the model model used
 * @param < I > Image input type.
 * @param < IT > Model model
 * @return  ImageMotion2D
 */
public static <I extends ImageBase,IT extends InvertibleTransform>ImageMotion2D<I,IT> createMotion2D(int ransacIterations,double inlierThreshold,int outlierPrune,int absoluteMinimumTracks,double respawnTrackFraction,double respawnCoverageFraction,boolean refineEstimate,PointTracker<I> tracker,IT motionModel){
  ModelGenerator<IT,AssociatedPair> fitter;
  DistanceFromModel<IT,AssociatedPair> distance;
  ModelFitter<IT,AssociatedPair> modelRefiner=null;
  if (motionModel instanceof Homography2D_F64) {
    GenerateHomographyLinear mf=new GenerateHomographyLinear(true);
    fitter=(ModelGenerator)mf;
    if (refineEstimate)     modelRefiner=(ModelFitter)mf;
    distance=(DistanceFromModel)new DistanceHomographySq();
  }
 else   if (motionModel instanceof Affine2D_F64) {
    GenerateAffine2D mf=new GenerateAffine2D();
    fitter=(ModelGenerator)mf;
    if (refineEstimate)     modelRefiner=(ModelFitter)mf;
    distance=(DistanceFromModel)new DistanceAffine2DSq();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + motionModel.getClass().getSimpleName());
  }
  ModelMatcher<IT,AssociatedPair> modelMatcher=new Ransac(123123,fitter,distance,ransacIterations,inlierThreshold);
  ImageMotionPointTrackerKey<I,IT> lowlevel=new ImageMotionPointTrackerKey<I,IT>(tracker,modelMatcher,modelRefiner,motionModel,outlierPrune);
  ImageMotionPtkSmartRespawn<I,IT> smartRespawn=new ImageMotionPtkSmartRespawn<I,IT>(lowlevel,absoluteMinimumTracks,respawnTrackFraction,respawnCoverageFraction);
  return new WrapImageMotionPtkSmartRespawn<I,IT>(smartRespawn);
}","/** 
 * Estimates the 2D motion of an image using different models.
 * @param ransacIterations Number of RANSAC iterations
 * @param inlierThreshold Threshold which defines an inlier.
 * @param outlierPrune If a feature is an outlier for this many turns in a row it is dropped. Try 2
 * @param absoluteMinimumTracks New features will be respawned if the number of inliers drop below this number.
 * @param respawnTrackFraction If the fraction of current inliers to the original number of inliers drops belowthis fraction then new features are spawned.  Try 0.3
 * @param respawnCoverageFraction If the area covered drops by this fraction then spawn more features.  Try 0.8
 * @param refineEstimate Should it refine the model estimate using all inliers.
 * @param tracker Point feature tracker.
 * @param motionModel Instance of the model model used. Affine2D_F64 or Homography2D_F64
 * @param < I > Image input type.
 * @param < IT > Model model
 * @return  ImageMotion2D
 */
public static <I extends ImageBase,IT extends InvertibleTransform>ImageMotion2D<I,IT> createMotion2D(int ransacIterations,double inlierThreshold,int outlierPrune,int absoluteMinimumTracks,double respawnTrackFraction,double respawnCoverageFraction,boolean refineEstimate,PointTracker<I> tracker,IT motionModel){
  ModelGenerator<IT,AssociatedPair> fitter;
  DistanceFromModel<IT,AssociatedPair> distance;
  ModelFitter<IT,AssociatedPair> modelRefiner=null;
  if (motionModel instanceof Homography2D_F64) {
    GenerateHomographyLinear mf=new GenerateHomographyLinear(true);
    fitter=(ModelGenerator)mf;
    if (refineEstimate)     modelRefiner=(ModelFitter)mf;
    distance=(DistanceFromModel)new DistanceHomographySq();
  }
 else   if (motionModel instanceof Affine2D_F64) {
    GenerateAffine2D mf=new GenerateAffine2D();
    fitter=(ModelGenerator)mf;
    if (refineEstimate)     modelRefiner=(ModelFitter)mf;
    distance=(DistanceFromModel)new DistanceAffine2DSq();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + motionModel.getClass().getSimpleName());
  }
  ModelMatcher<IT,AssociatedPair> modelMatcher=new Ransac(123123,fitter,distance,ransacIterations,inlierThreshold);
  ImageMotionPointTrackerKey<I,IT> lowlevel=new ImageMotionPointTrackerKey<I,IT>(tracker,modelMatcher,modelRefiner,motionModel,outlierPrune);
  ImageMotionPtkSmartRespawn<I,IT> smartRespawn=new ImageMotionPtkSmartRespawn<I,IT>(lowlevel,absoluteMinimumTracks,respawnTrackFraction,respawnCoverageFraction);
  return new WrapImageMotionPtkSmartRespawn<I,IT>(smartRespawn);
}",0.9932699920823436
151041,"@Override public GrowingArrayInt getUnassociatedSource(){
  return null;
}","@Override public GrowingArrayInt getUnassociatedSource(){
  return alg.getUnassociatedSource();
}",0.8421052631578947
151042,"public void printAll(){
  AutoTypeImage types[]=AutoTypeImage.getSpecificTypes();
  for (  AutoTypeImage t : types) {
    input=t;
    printMultiply();
    printMultiplyBounded();
    printDivide();
    printDivideBounded();
    printPlus();
    printPlusBounded();
    printBoundImage();
    printDiffAbs();
    printAverageBand();
  }
  AutoTypeImage outputs[]=new AutoTypeImage[]{U16,S16,S32,S32,S32,S64,F32,F64};
  for (int i=0; i < types.length; i++) {
    printAddTwoImages(types[i],outputs[i]);
    printSubtractTwoImages(types[i],outputs[i]);
  }
}","public void printAll(){
  AutoTypeImage types[]=AutoTypeImage.getSpecificTypes();
  for (  AutoTypeImage t : types) {
    input=t;
    printMultiply();
    printMultiplyBounded();
    printDivide();
    printDivideBounded();
    printPlus();
    printPlusBounded();
    printBoundImage();
    printDiffAbs();
    printAverageBand();
  }
  AutoTypeImage outputsAdd[]=new AutoTypeImage[]{U16,S16,S32,S32,S32,S64,F32,F64};
  AutoTypeImage outputsSub[]=new AutoTypeImage[]{I16,S16,S32,S32,S32,S64,F32,F64};
  for (int i=0; i < types.length; i++) {
    printAddTwoImages(types[i],outputsAdd[i]);
    printSubtractTwoImages(types[i],outputsSub[i]);
  }
}",0.9235880398671096
151043,"/** 
 * <p> Performs pixel-wise subtraction, but ensures the result is between two bounds.<br> d(x,y) = imgA(x,y) - imgB(x,y) </p>
 * @param inputA Input image. Not modified.
 * @param inputB Input image. Not modified.
 * @param output Output image. Modified.
 */
public static <T extends ImageSingleBand,O extends ImageSingleBand>void subtract(T inputA,T inputB,O output){
  if (ImageUInt8.class == inputA.getClass()) {
    PixelMath.subtract((ImageUInt8)inputA,(ImageUInt8)inputB,(ImageUInt16)output);
  }
 else   if (ImageSInt8.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt8)inputA,(ImageSInt8)inputB,(ImageSInt16)output);
  }
 else   if (ImageUInt16.class == inputA.getClass()) {
    PixelMath.subtract((ImageUInt16)inputA,(ImageUInt16)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt16.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt16)inputA,(ImageSInt16)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt32.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt32)inputA,(ImageSInt32)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt64.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt64)inputA,(ImageSInt64)inputB,(ImageSInt64)output);
  }
 else   if (ImageFloat32.class == inputA.getClass()) {
    PixelMath.subtract((ImageFloat32)inputA,(ImageFloat32)inputB,(ImageFloat32)output);
  }
 else   if (ImageFloat64.class == inputA.getClass()) {
    PixelMath.subtract((ImageFloat64)inputA,(ImageFloat64)inputB,(ImageFloat64)output);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + inputA.getClass().getSimpleName());
  }
}","/** 
 * <p> Performs pixel-wise subtraction, but ensures the result is between two bounds.<br> d(x,y) = imgA(x,y) - imgB(x,y) </p>
 * @param inputA Input image. Not modified.
 * @param inputB Input image. Not modified.
 * @param output Output image. Modified.
 */
public static <T extends ImageSingleBand,O extends ImageSingleBand>void subtract(T inputA,T inputB,O output){
  if (ImageUInt8.class == inputA.getClass()) {
    PixelMath.subtract((ImageUInt8)inputA,(ImageUInt8)inputB,(ImageInt16)output);
  }
 else   if (ImageSInt8.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt8)inputA,(ImageSInt8)inputB,(ImageSInt16)output);
  }
 else   if (ImageUInt16.class == inputA.getClass()) {
    PixelMath.subtract((ImageUInt16)inputA,(ImageUInt16)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt16.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt16)inputA,(ImageSInt16)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt32.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt32)inputA,(ImageSInt32)inputB,(ImageSInt32)output);
  }
 else   if (ImageSInt64.class == inputA.getClass()) {
    PixelMath.subtract((ImageSInt64)inputA,(ImageSInt64)inputB,(ImageSInt64)output);
  }
 else   if (ImageFloat32.class == inputA.getClass()) {
    PixelMath.subtract((ImageFloat32)inputA,(ImageFloat32)inputB,(ImageFloat32)output);
  }
 else   if (ImageFloat64.class == inputA.getClass()) {
    PixelMath.subtract((ImageFloat64)inputA,(ImageFloat64)inputB,(ImageFloat64)output);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + inputA.getClass().getSimpleName());
  }
}",0.999691643539932
151044,"/** 
 * <p> Performs pixel-wise subtraction, but ensures the result is between two bounds.<br> d(x,y) = imgA(x,y) - imgB(x,y) </p>
 * @param imgA Input image. Not modified.
 * @param imgB Input image. Not modified.
 * @param output Output image. Modified.
 */
public static void subtract(ImageFloat64 imgA,ImageFloat64 imgB,ImageFloat64 output){
  InputSanityCheck.checkSameShape(imgA,imgB,output);
  final int h=imgA.getHeight();
  final int w=imgA.getWidth();
  for (int y=0; y < h; y++) {
    int indexA=imgA.getStartIndex() + y * imgA.getStride();
    int indexB=imgB.getStartIndex() + y * imgB.getStride();
    int indexOut=output.getStartIndex() + y * output.getStride();
    int indexEnd=indexA + w;
    for (; indexA < indexEnd; indexA++, indexB++, indexOut++) {
      output.data[indexOut]=((imgA.data[indexA]) - (imgB.data[indexB]));
    }
  }
}","/** 
 * <p> Performs pixel-wise subtraction.<br> d(x,y) = imgA(x,y) - imgB(x,y) </p>
 * @param imgA Input image. Not modified.
 * @param imgB Input image. Not modified.
 * @param output Output image. Modified.
 */
public static void subtract(ImageFloat64 imgA,ImageFloat64 imgB,ImageFloat64 output){
  InputSanityCheck.checkSameShape(imgA,imgB,output);
  final int h=imgA.getHeight();
  final int w=imgA.getWidth();
  for (int y=0; y < h; y++) {
    int indexA=imgA.getStartIndex() + y * imgA.getStride();
    int indexB=imgB.getStartIndex() + y * imgB.getStride();
    int indexOut=output.getStartIndex() + y * output.getStride();
    int indexEnd=indexA + w;
    for (; indexA < indexEnd; indexA++, indexB++, indexOut++) {
      output.data[indexOut]=((imgA.data[indexA]) - (imgB.data[indexB]));
    }
  }
}",0.9723557692307692
151045,"@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionMosaicPointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,40,0.3,0.8);
  T initTran=ConvertTransform_F64.convert(createInitialTransform(),fitModel.createInstance());
  distortAlg.setInitialTransform(initTran);
  totalKeyFrames=0;
  motionRender.clear();
  startWorkerThread();
}","@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionMosaicPointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,40,0.3,pruneThreshold,0.8);
  T initTran=ConvertTransform_F64.convert(createInitialTransform(),fitModel.createInstance());
  distortAlg.setInitialTransform(initTran);
  totalKeyFrames=0;
  motionRender.clear();
  startWorkerThread();
}",0.9822904368358912
151046,"public VideoMosaicSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(false,imageType,2);
  setOutputSize(1000,600);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,150,1,10,imageType,null));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.combined_FH_SURF_KLT(300,200,3,config.config,config.pyramidScaling,200,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}","public VideoMosaicSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(false,imageType,2);
  setOutputSize(1000,600);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,150,1,10,imageType,null));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,11,11,10,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,2,200,1,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.combined_FH_SURF_KLT(300,200,3,config.config,config.pyramidScaling,200,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}",0.933047670058918
151047,"public VideoStabilizeSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(true,imageType,2);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,100,1,10,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,11,11,10,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.combined_FH_SURF_KLT(300,200,2,config.config,config.pyramidScaling,100,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}","public VideoStabilizeSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(true,imageType,2);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,100,1,10,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,11,11,10,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(400,2,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.combined_FH_SURF_KLT(300,200,2,config.config,config.pyramidScaling,100,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}",0.8879753340184995
151048,"@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionStabilizePointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,thresholdKeyFrame,thresholdReset,largeMotionThreshold);
  totalKeyFrames=0;
  I image=sequence.next();
  setOutputSize(image.width,image.height);
  motionRender.clear();
  startWorkerThread();
}","@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionStabilizePointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,thresholdKeyFrame,thresholdReset,pruneThreshold,largeMotionThreshold);
  totalKeyFrames=0;
  I image=sequence.next();
  setOutputSize(image.width,image.height);
  motionRender.clear();
  startWorkerThread();
}",0.9812734082397004
151049,"public VideoTrackFeaturesApp(Class<I> imageType,Class<D> derivType){
  super(1,imageType);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,1,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,5,5,20,imageType,derivType));
  gui.addMouseListener(this);
  gui.requestFocus();
  setMainGUI(gui);
}","public VideoTrackFeaturesApp(Class<I> imageType,Class<D> derivType){
  super(1,imageType);
  PkltConfig<I,D> config=PkltConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config,1,1));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,1,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,2,200,1,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,5,5,20,imageType,derivType));
  gui.addMouseListener(this);
  gui.requestFocus();
  setMainGUI(gui);
}",0.9960526315789474
151050,"/** 
 * Creates a SURF feature tracker.
 */
public void createSURF(){
  tracker=FactoryPointSequentialTracker.dda_FH_SURF(200,80,3,imageType);
}","/** 
 * Creates a SURF feature tracker.
 */
public void createSURF(){
  tracker=FactoryPointSequentialTracker.dda_FH_SURF(200,3,200,2,imageType);
}",0.9759450171821306
151051,"/** 
 * Creates a tracker which detects Fast-Hessian features and describes them with SURF.
 * @see boofcv.alg.feature.detect.intensity.ShiTomasiCornerIntensity
 * @see DescribePointSurf
 * @see DetectAssociateTracker
 * @param maxMatches     The maximum number of matched features that will be considered.Set to a value <= 0 to not bound the number of matches.
 * @param detectPerScale Controls how many features can be detected.  Try a value of 200 initially.
 * @param minSeparation  How close together detected features can be.  Recommended value = 2.
 * @param imageType      Type of image the input is.
 * @param < I >            Input image type.
 * @param < II >           Integral image type.
 * @return SURF based tracker.
 */
public static <I extends ImageSingleBand,II extends ImageSingleBand>ImagePointTracker<I> dda_FH_SURF(int maxMatches,int detectPerScale,int minSeparation,Class<I> imageType){
  Class<II> integralType=GIntegralImageOps.getIntegralType(imageType);
  FeatureExtractor extractor=FactoryFeatureExtractor.nonmax(minSeparation,1,10,true);
  FastHessianFeatureDetector<II> detector=new FastHessianFeatureDetector<II>(extractor,detectPerScale,2,9,4,4);
  OrientationIntegral<II> orientation=FactoryOrientationAlgs.average_ii(6,1,6,0,integralType);
  DescribePointSurf<II> describe=new DescribePointSurf<II>(integralType);
  ScoreAssociation<TupleDesc_F64> score=FactoryAssociation.scoreEuclidean(TupleDesc_F64.class,true);
  AssociateSurfBasic assoc=new AssociateSurfBasic(FactoryAssociation.greedy(score,100000,maxMatches,true));
  InterestPointDetector<I> id=new WrapFHtoInterestPoint<I,II>(detector);
  DescribeRegionPoint<I,SurfFeature> regionDesc=new WrapDescribeSurf<I,II>(describe,orientation);
  GeneralAssociation<SurfFeature> generalAssoc=new WrapAssociateSurfBasic(assoc);
  return new DetectAssociateTracker<I,SurfFeature>(id,regionDesc,generalAssoc,false);
}","/** 
 * Creates a tracker which detects Fast-Hessian features and describes them with SURF.
 * @see boofcv.alg.feature.detect.intensity.ShiTomasiCornerIntensity
 * @see DescribePointSurf
 * @see DetectAssociateTracker
 * @param maxTracks The maximum number of tracks it will return. A value <= 0 will return all.
 * @param minSeparation  How close together detected features can be.  Recommended value = 2.
 * @param detectPerScale Number of features it will detect per scale.
 * @param sampleRateFH   Sample rate used by Fast-Hessian detector.  Typically 1 or 2
 * @param imageType      Type of image the input is.    @return SURF based tracker.
 */
public static <I extends ImageSingleBand,II extends ImageSingleBand>ImagePointTracker<I> dda_FH_SURF(int maxTracks,int minSeparation,int detectPerScale,int sampleRateFH,Class<I> imageType){
  Class<II> integralType=GIntegralImageOps.getIntegralType(imageType);
  FeatureExtractor extractor=FactoryFeatureExtractor.nonmax(minSeparation,1,10,true);
  int numScalesPerOctave=4;
  int numOctaves=4;
  FastHessianFeatureDetector<II> detector=new FastHessianFeatureDetector<II>(extractor,detectPerScale,sampleRateFH,9,numScalesPerOctave,numOctaves);
  OrientationIntegral<II> orientation=FactoryOrientationAlgs.average_ii(6,1,6,0,integralType);
  DescribePointSurf<II> describe=new DescribePointSurf<II>(integralType);
  ScoreAssociation<TupleDesc_F64> score=FactoryAssociation.scoreEuclidean(TupleDesc_F64.class,true);
  AssociateSurfBasic assoc=new AssociateSurfBasic(FactoryAssociation.greedy(score,100000,maxTracks,true));
  InterestPointDetector<I> id=new WrapFHtoInterestPoint<I,II>(detector);
  DescribeRegionPoint<I,SurfFeature> regionDesc=new WrapDescribeSurf<I,II>(describe,orientation);
  GeneralAssociation<SurfFeature> generalAssoc=new WrapAssociateSurfBasic(assoc);
  return new DetectAssociateTracker<I,SurfFeature>(id,regionDesc,generalAssoc,false);
}",0.8267716535433071
151052,"/** 
 * Processes the next frame in the sequence.
 * @param frame Next frame in the video sequence
 * @return true if motion was estimated and false if no motion was estimated
 */
public boolean process(I frame){
  tracker.process(frame);
  totalProcessed++;
  List<PointTrack> tracks=tracker.getActiveTracks(null);
  if (tracks.size() == 0)   return false;
  List<AssociatedPair> pairs=new ArrayList<AssociatedPair>();
  for (  PointTrack t : tracks) {
    pairs.add((AssociatedPair)t.getCookie());
  }
  if (!modelMatcher.process((List)pairs)) {
    return false;
  }
  if (modelRefiner == null || !modelRefiner.fitModel(modelMatcher.getMatchSet(),modelMatcher.getModel(),keyToCurr)) {
    keyToCurr.set(modelMatcher.getModel());
  }
  worldToKey.concat(keyToCurr,worldToCurr);
  return true;
}","/** 
 * Processes the next frame in the sequence.
 * @param frame Next frame in the video sequence
 * @return true if motion was estimated and false if no motion was estimated
 */
public boolean process(I frame){
  tracker.process(frame);
  totalProcessed++;
  List<PointTrack> tracks=tracker.getActiveTracks(null);
  if (tracks.size() == 0)   return false;
  List<AssociatedPair> pairs=new ArrayList<AssociatedPair>();
  for (  PointTrack t : tracks) {
    pairs.add((AssociatedPair)t.getCookie());
  }
  if (!modelMatcher.process((List)pairs)) {
    return false;
  }
  for (  AssociatedPair p : modelMatcher.getMatchSet()) {
    ((AssociatedPairTrack)p).lastUsed=totalProcessed;
  }
  if (modelRefiner == null || !modelRefiner.fitModel(modelMatcher.getMatchSet(),modelMatcher.getModel(),keyToCurr)) {
    keyToCurr.set(modelMatcher.getModel());
  }
  worldToKey.concat(keyToCurr,worldToCurr);
  List<PointTrack> all=tracker.getAllTracks(null);
  for (  PointTrack t : all) {
    AssociatedPairTrack p=t.getCookie();
    if (totalProcessed - p.lastUsed >= pruneThreshold) {
      System.out.println(""String_Node_Str"" + (totalProcessed - p.lastUsed));
      tracker.dropTrack(t);
    }
  }
  return true;
}",0.781827259111333
151053,"/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 */
public ImageMotionPointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model){
  this.tracker=tracker;
  this.modelMatcher=modelMatcher;
  this.modelRefiner=modelRefiner;
  worldToInit=(T)model.createInstance();
  worldToKey=(T)model.createInstance();
  keyToCurr=(T)model.createInstance();
  worldToCurr=(T)model.createInstance();
}","/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 * @param pruneThreshold Tracks not in the inlier set for this many frames in a row are pruned
 */
public ImageMotionPointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model,int pruneThreshold){
  this.tracker=tracker;
  this.modelMatcher=modelMatcher;
  this.modelRefiner=modelRefiner;
  this.pruneThreshold=pruneThreshold;
  worldToInit=(T)model.createInstance();
  worldToKey=(T)model.createInstance();
  keyToCurr=(T)model.createInstance();
  worldToCurr=(T)model.createInstance();
}",0.9078787878787878
151054,"/** 
 * Make the current frame the first frame in the sequence
 */
public void changeKeyFrame(){
  tracker.dropAllTracks();
  tracker.spawnTracks();
  List<PointTrack> spawned=tracker.getNewTracks(null);
  for (  PointTrack l : spawned) {
    AssociatedPair p=l.getCookie();
    if (p == null) {
      l.cookie=p=new AssociatedPair();
      p.p2=l;
      l.cookie=p;
    }
    p.p1.set(p.p2);
  }
  totalSpawned=spawned.size();
  worldToKey.set(worldToCurr);
}","/** 
 * Make the current frame the first frame in the sequence
 */
public void changeKeyFrame(){
  tracker.dropAllTracks();
  tracker.spawnTracks();
  List<PointTrack> spawned=tracker.getNewTracks(null);
  for (  PointTrack l : spawned) {
    AssociatedPairTrack p=l.getCookie();
    if (p == null) {
      l.cookie=p=new AssociatedPairTrack();
      p.p2=l;
      l.cookie=p;
    }
    p.p1.set(l);
    p.lastUsed=totalProcessed;
  }
  totalSpawned=spawned.size();
  worldToKey.set(worldToCurr);
}",0.9498956158663884
151055,"/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 */
public MotionMosaicPointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model,int absoluteMinimumTracks,double respawnTrackFraction,double respawnCoverageFraction){
  super(tracker,modelMatcher,modelRefiner,model);
  this.absoluteMinimumTracks=absoluteMinimumTracks;
  this.respawnTrackFraction=respawnTrackFraction;
  this.respawnCoverageFraction=respawnCoverageFraction;
}","/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 */
public MotionMosaicPointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model,int absoluteMinimumTracks,double respawnTrackFraction,int pruneThreshold,double respawnCoverageFraction){
  super(tracker,modelMatcher,modelRefiner,model,pruneThreshold);
  this.absoluteMinimumTracks=absoluteMinimumTracks;
  this.respawnTrackFraction=respawnTrackFraction;
  this.respawnCoverageFraction=respawnCoverageFraction;
}",0.9789343246592316
151056,"/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 * @param thresholdKeyFrame  If the number of inlier is less than this number the keyframe will change.
 * @param thresholdReset If the number of inlier is less than this number a reset will occur.
 * @param largeMotionThreshold  If the transform from the key frame to the current frame is more than this a reset will occur.
 */
public MotionStabilizePointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model,int thresholdKeyFrame,int thresholdReset,int largeMotionThreshold){
  super(tracker,modelMatcher,modelRefiner,model);
  if (thresholdKeyFrame < thresholdReset) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.thresholdKeyFrame=thresholdKeyFrame;
  this.thresholdReset=thresholdReset;
  this.largeMotionThreshold=largeMotionThreshold;
}","/** 
 * Specify algorithms to use internally.  Each of these classes must work with compatible data structures.
 * @param tracker feature tracker
 * @param modelMatcher Fits model to track data
 * @param modelRefiner (Optional) Refines the found model using the entire inlier set. Can be null.
 * @param model Motion model data structure
 * @param thresholdKeyFrame  If the number of inlier is less than this number the keyframe will change.
 * @param thresholdReset If the number of inlier is less than this number a reset will occur.
 * @param largeMotionThreshold  If the transform from the key frame to the current frame is more than this a reset will occur.
 */
public MotionStabilizePointKey(ImagePointTracker<I> tracker,ModelMatcher<T,AssociatedPair> modelMatcher,ModelFitter<T,AssociatedPair> modelRefiner,T model,int thresholdKeyFrame,int thresholdReset,int pruneThreshold,int largeMotionThreshold){
  super(tracker,modelMatcher,modelRefiner,model,pruneThreshold);
  if (thresholdKeyFrame < thresholdReset) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.thresholdKeyFrame=thresholdKeyFrame;
  this.thresholdReset=thresholdReset;
  this.largeMotionThreshold=largeMotionThreshold;
}",0.985797827903091
151057,"/** 
 * Test the keyframe based on the definition of the keyframe
 */
@Test public void changeKeyFrame(){
  Se2_F32 computed=new Se2_F32(4,5,6);
  Se2_F32 model=new Se2_F32();
  DummyTracker tracker=new DummyTracker();
  DummyModelMatcher<Se2_F32> matcher=new DummyModelMatcher<Se2_F32>(computed,5);
  ImageUInt8 input=new ImageUInt8(20,30);
  ImageMotionPointKey<ImageUInt8,Se2_F32> alg=new ImageMotionPointKey<ImageUInt8,Se2_F32>(tracker,matcher,null,model);
  alg.process(input);
  alg.changeKeyFrame();
  alg.process(input);
  Se2_F32 worldToKey=alg.getWorldToKey();
  assertEquals(0,worldToKey.getX(),1e-8);
  assertEquals(1,tracker.numSpawn);
  alg.changeKeyFrame();
  assertEquals(2,tracker.numSpawn);
  worldToKey=alg.getWorldToKey();
  assertEquals(computed.getX(),worldToKey.getX(),1e-8);
}","/** 
 * Test the keyframe based on the definition of the keyframe
 */
@Test public void changeKeyFrame(){
  Se2_F32 computed=new Se2_F32(4,5,6);
  Se2_F32 model=new Se2_F32();
  DummyTracker tracker=new DummyTracker();
  DummyModelMatcher<Se2_F32> matcher=new DummyModelMatcher<Se2_F32>(computed,5);
  ImageUInt8 input=new ImageUInt8(20,30);
  ImageMotionPointKey<ImageUInt8,Se2_F32> alg=new ImageMotionPointKey<ImageUInt8,Se2_F32>(tracker,matcher,null,model,100);
  alg.process(input);
  alg.changeKeyFrame();
  alg.process(input);
  Se2_F32 worldToKey=alg.getWorldToKey();
  assertEquals(0,worldToKey.getX(),1e-8);
  assertEquals(1,tracker.numSpawn);
  alg.changeKeyFrame();
  assertEquals(2,tracker.numSpawn);
  worldToKey=alg.getWorldToKey();
  assertEquals(computed.getX(),worldToKey.getX(),1e-8);
}",0.9975062344139652
151058,"@Test public void changeWorld(){
  Se2_F32 oldToNew=new Se2_F32(1,2,0);
  Se2_F32 model=new Se2_F32();
  ImageMotionPointKey<ImageUInt8,Se2_F32> alg=new ImageMotionPointKey<ImageUInt8,Se2_F32>(null,null,null,model);
  alg.changeWorld(oldToNew);
  Se2_F32 worldToCurr=alg.getWorldToCurr();
  Se2_F32 worldToKey=alg.getWorldToKey();
  assertEquals(oldToNew.getX(),worldToCurr.getX(),1e-8);
  assertEquals(oldToNew.getX(),worldToKey.getX(),1e-8);
}","@Test public void changeWorld(){
  Se2_F32 oldToNew=new Se2_F32(1,2,0);
  Se2_F32 model=new Se2_F32();
  ImageMotionPointKey<ImageUInt8,Se2_F32> alg=new ImageMotionPointKey<ImageUInt8,Se2_F32>(null,null,null,model,1000);
  alg.changeWorld(oldToNew);
  Se2_F32 worldToCurr=alg.getWorldToCurr();
  Se2_F32 worldToKey=alg.getWorldToKey();
  assertEquals(oldToNew.getX(),worldToCurr.getX(),1e-8);
  assertEquals(oldToNew.getX(),worldToKey.getX(),1e-8);
}",0.994413407821229
151059,"@Test public void checkLargeDistortion(){
  Affine2D_F32 model=new Affine2D_F32();
  Affine2D_F32 computed=new Affine2D_F32(1,0,0,1,2,3);
  DummyTracker tracker=new DummyTracker();
  DummyModelMatcher<Affine2D_F32> matcher=new DummyModelMatcher<Affine2D_F32>(computed,20);
  ImageUInt8 input=new ImageUInt8(20,30);
  MotionStabilizePointKey<ImageUInt8,Affine2D_F32> alg=new MotionStabilizePointKey<ImageUInt8,Affine2D_F32>(tracker,matcher,null,model,5,3,10);
  assertTrue(alg.process(input));
  assertTrue(alg.isKeyFrame());
  assertFalse(alg.isReset());
  matcher.setMotion(new Affine2D_F32(100,0,0,200,2,3));
  assertTrue(alg.process(input));
  assertTrue(alg.isReset());
}","@Test public void checkLargeDistortion(){
  Affine2D_F32 model=new Affine2D_F32();
  Affine2D_F32 computed=new Affine2D_F32(1,0,0,1,2,3);
  DummyTracker tracker=new DummyTracker();
  DummyModelMatcher<Affine2D_F32> matcher=new DummyModelMatcher<Affine2D_F32>(computed,20);
  ImageUInt8 input=new ImageUInt8(20,30);
  MotionStabilizePointKey<ImageUInt8,Affine2D_F32> alg=new MotionStabilizePointKey<ImageUInt8,Affine2D_F32>(tracker,matcher,null,model,5,3,10,10);
  assertTrue(alg.process(input));
  assertTrue(alg.isKeyFrame());
  assertFalse(alg.isReset());
  matcher.setMotion(new Affine2D_F32(100,0,0,200,2,3));
  assertTrue(alg.process(input));
  assertTrue(alg.isReset());
}",0.9977827050997784
151060,"public VisualizeStereoVisualOdometryApp(Class<I> imageType){
  super(1,imageType);
  addAlgorithm(0,""String_Node_Str"",0);
  addAlgorithm(0,""String_Node_Str"",1);
  guiInfo=new VisualOdometryPanel();
  guiLeft=new ImagePanel();
  guiRight=new ImagePanel();
  guiCam3D=new Polygon3DSequenceViewer();
  add(guiInfo,BorderLayout.WEST);
  add(guiRight,BorderLayout.EAST);
  setMainGUI(guiLeft);
  guiLeft.addMouseListener(this);
  guiInfo.setListener(this);
}","public VisualizeStereoVisualOdometryApp(Class<I> imageType){
  super(1,imageType);
  addAlgorithm(0,""String_Node_Str"",0);
  addAlgorithm(0,""String_Node_Str"",1);
  addAlgorithm(0,""String_Node_Str"",1);
  guiInfo=new VisualOdometryPanel();
  guiLeft=new ImagePanel();
  guiRight=new ImagePanel();
  guiCam3D=new Polygon3DSequenceViewer();
  add(guiInfo,BorderLayout.WEST);
  add(guiRight,BorderLayout.EAST);
  setMainGUI(guiLeft);
  guiLeft.addMouseListener(this);
  guiInfo.setListener(this);
}",0.9587301587301588
151061,"@Override public void refreshAll(Object[] cookies){
  numFaults=0;
  alg=createStereoDepth(whichAlg == 0);
  alg.setCalibration(config);
  guiInfo.reset();
  handleRunningStatus(2);
  IntrinsicParameters right=config.right;
  DenseMatrix64F K=PerspectiveOps.calibrationMatrix(config.left,null);
  guiCam3D.init();
  guiCam3D.setK(K);
  guiCam3D.setStepSize(config.getBaseline());
  guiCam3D.setPreferredSize(new Dimension(right.width,right.height));
  guiCam3D.setMaximumSize(guiCam3D.getPreferredSize());
  startWorkerThread();
}","@Override public void refreshAll(Object[] cookies){
  numFaults=0;
  alg=createStereoDepth(whichAlg);
  alg.setCalibration(config);
  guiInfo.reset();
  handleRunningStatus(2);
  IntrinsicParameters right=config.right;
  DenseMatrix64F K=PerspectiveOps.calibrationMatrix(config.left,null);
  guiCam3D.init();
  guiCam3D.setK(K);
  guiCam3D.setStepSize(config.getBaseline());
  guiCam3D.setPreferredSize(new Dimension(right.width,right.height));
  guiCam3D.setMaximumSize(guiCam3D.getPreferredSize());
  startWorkerThread();
}",0.995260663507109
151062,"private StereoVisualOdometry<I> createStereoDepth(boolean useKlt){
  ImagePointTracker<I> tracker;
  int thresholdAdd;
  int thresholdRetire;
  if (useKlt) {
    thresholdAdd=120;
    thresholdRetire=2;
    Class derivType=GImageDerivativeOps.getDerivativeType(imageType);
    tracker=FactoryPointSequentialTracker.klt(600,new int[]{1,2,4,8},3,3,2,imageType,derivType);
  }
 else {
    thresholdAdd=80;
    thresholdRetire=3;
    tracker=FactoryPointSequentialTracker.dda_ST_BRIEF(600,200,2,0,imageType,null);
  }
  StereoDisparitySparse<I> disparity=FactoryStereoDisparity.regionSparseWta(0,150,3,3,30,-1,true,imageType);
  return FactoryVisualOdometry.stereoDepth(thresholdAdd,thresholdRetire,1.5,tracker,disparity,0,imageType);
}","private StereoVisualOdometry<I> createStereoDepth(int whichAlg){
  ImagePointTracker<I> tracker;
  Class derivType=GImageDerivativeOps.getDerivativeType(imageType);
  int thresholdAdd;
  int thresholdRetire;
  if (whichAlg == 0) {
    thresholdAdd=120;
    thresholdRetire=2;
    tracker=FactoryPointSequentialTracker.klt(600,new int[]{1,2,4,8},3,1,1,imageType,derivType);
  }
 else   if (whichAlg == 1) {
    thresholdAdd=80;
    thresholdRetire=3;
    tracker=FactoryPointSequentialTracker.dda_ST_BRIEF(600,200,2,0,imageType,null);
  }
 else {
    thresholdAdd=80;
    thresholdRetire=3;
    tracker=FactoryPointSequentialTracker.combined_ST_SURF_KLT(600,3,0,3,new int[]{1,2,4,8},50,true,imageType,derivType);
  }
  StereoDisparitySparse<I> disparity=FactoryStereoDisparity.regionSparseWta(0,150,3,3,30,-1,true,imageType);
  return FactoryVisualOdometry.stereoDepth(thresholdAdd,thresholdRetire,1.5,tracker,disparity,0,imageType);
}",0.7671068427370948
151063,"@Override public void dropTrack(PointTrack track){
  tracker.dropTrack((CombinedTrack<TD>)track.getDescription());
}","@Override public void dropTrack(PointTrack track){
  tracker.dropTrack((CombinedTrack<TD>)track.getDescription());
  previousSpawn--;
}",0.9243027888446216
151064,"private void printSelect(){
  out.print(""String_Node_Str"" + ""String_Node_Str"" + sumType + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sumType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sumType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (isFloat) {
    out.print(""String_Node_Str"");
  }
 else {
    out.print(""String_Node_Str"");
  }
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void printSelect(){
  out.print(""String_Node_Str"" + ""String_Node_Str"" + sumType + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sumType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sumType+ ""String_Node_Str""+ MAX_VALUE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (isFloat) {
    out.print(""String_Node_Str"");
  }
 else {
    out.print(""String_Node_Str"");
  }
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9837837837837838
151065,"public void createFile(boolean isFloat) throws FileNotFoundException {
  this.isFloat=isFloat;
  if (isFloat) {
    sumType=""String_Node_Str"";
    dataAbr=""String_Node_Str"";
  }
 else {
    sumType=""String_Node_Str"";
    dataAbr=""String_Node_Str"";
  }
  setOutputFile(""String_Node_Str"" + dataAbr);
  printPreamble();
  printSetTexture();
  printSelect();
  out.println(""String_Node_Str"");
}","public void createFile(boolean isFloat) throws FileNotFoundException {
  this.isFloat=isFloat;
  if (isFloat) {
    sumType=""String_Node_Str"";
    MAX_VALUE=""String_Node_Str"";
    dataAbr=""String_Node_Str"";
  }
 else {
    sumType=""String_Node_Str"";
    MAX_VALUE=""String_Node_Str"";
    dataAbr=""String_Node_Str"";
  }
  setOutputFile(""String_Node_Str"" + dataAbr);
  printPreamble();
  printSetTexture();
  printSelect();
  out.println(""String_Node_Str"");
}",0.9219858156028368
151066,"@Override public boolean select(float[] scores,int maxDisparity){
  int disparity=0;
  float best=scores[0];
  for (int i=1; i < maxDisparity; i++) {
    if (scores[i] < best) {
      best=scores[i];
      disparity=i;
    }
  }
  if (best > maxError) {
    return false;
  }
 else   if (textureThreshold > 0) {
    float secondBest=scores[0];
    for (int i=1; i < disparity - 1; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    for (int i=disparity + 2; i < maxDisparity; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    if (secondBest - best <= textureThreshold * best)     return false;
  }
  this.disparity=disparity;
  return true;
}","@Override public boolean select(float[] scores,int maxDisparity){
  int disparity=0;
  float best=scores[0];
  for (int i=1; i < maxDisparity; i++) {
    if (scores[i] < best) {
      best=scores[i];
      disparity=i;
    }
  }
  if (best > maxError) {
    return false;
  }
 else   if (textureThreshold > 0) {
    float secondBest=Float.MAX_VALUE;
    for (int i=0; i < disparity - 1; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    for (int i=disparity + 2; i < maxDisparity; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    if (secondBest - best <= textureThreshold * best)     return false;
  }
  this.disparity=disparity;
  return true;
}",0.9586894586894588
151067,"@Override public boolean select(int[] scores,int maxDisparity){
  int disparity=0;
  int best=scores[0];
  for (int i=1; i < maxDisparity; i++) {
    if (scores[i] < best) {
      best=scores[i];
      disparity=i;
    }
  }
  if (best > maxError) {
    return false;
  }
 else   if (textureThreshold > 0) {
    int secondBest=scores[0];
    for (int i=1; i < disparity - 1; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    for (int i=disparity + 2; i < maxDisparity; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    if (discretizer * (secondBest - best) <= textureThreshold * best)     return false;
  }
  this.disparity=disparity;
  return true;
}","@Override public boolean select(int[] scores,int maxDisparity){
  int disparity=0;
  int best=scores[0];
  for (int i=1; i < maxDisparity; i++) {
    if (scores[i] < best) {
      best=scores[i];
      disparity=i;
    }
  }
  if (best > maxError) {
    return false;
  }
 else   if (textureThreshold > 0) {
    int secondBest=Integer.MAX_VALUE;
    for (int i=0; i < disparity - 1; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    for (int i=disparity + 2; i < maxDisparity; i++) {
      if (scores[i] < secondBest)       secondBest=scores[i];
    }
    if (discretizer * (secondBest - best) <= textureThreshold * best)     return false;
  }
  this.disparity=disparity;
  return true;
}",0.9579242636746144
151068,"@Override protected void startEverything(){
  tracker.dropTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionMosaicPointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,40,0.3,0.8);
  T initTran=ConvertTransform_F64.convert(createInitialTransform(),fitModel.createInstance());
  distortAlg.setInitialTransform(initTran);
  totalKeyFrames=0;
  motionRender.clear();
  startWorkerThread();
}","@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionMosaicPointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,40,0.3,0.8);
  T initTran=ConvertTransform_F64.convert(createInitialTransform(),fitModel.createInstance());
  distortAlg.setInitialTransform(initTran);
  totalKeyFrames=0;
  motionRender.clear();
  startWorkerThread();
}",0.9963811821471652
151069,"public VideoMosaicSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(false,imageType,2);
  setOutputSize(1000,600);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,10,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}","public VideoMosaicSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(false,imageType,2);
  setOutputSize(1000,600);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,150,1,10,2,imageType,null));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,2,imageType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}",0.9679618268575324
151070,"public VideoStabilizeSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(true,imageType,2);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,10,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,11,11,10,imageType,derivType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}","public VideoStabilizeSequentialPointApp(Class<I> imageType,Class<D> derivType){
  super(true,imageType,2);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,100,1,10,2,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,11,11,10,2,imageType,derivType));
  addAlgorithm(1,""String_Node_Str"",new Affine2D_F64());
  addAlgorithm(1,""String_Node_Str"",new Homography2D_F64());
}",0.9723225030084236
151071,"@Override protected void startEverything(){
  tracker.dropTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionStabilizePointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,thresholdKeyFrame,thresholdReset,largeMotionThreshold);
  totalKeyFrames=0;
  I image=sequence.next();
  setOutputSize(image.width,image.height);
  motionRender.clear();
  startWorkerThread();
}","@Override protected void startEverything(){
  tracker.dropAllTracks();
  createModelMatcher(maxIterations,4);
  distortAlg=new MotionStabilizePointKey<I,T>(tracker,modelMatcher,modelRefiner,fitModel,thresholdKeyFrame,thresholdReset,largeMotionThreshold);
  totalKeyFrames=0;
  I image=sequence.next();
  setOutputSize(image.width,image.height);
  motionRender.clear();
  startWorkerThread();
}",0.9961685823754788
151072,"public VisualOdometryPanel(){
  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
  displayStatus=new JLabel();
  displayStatus.setFont(new Font(""String_Node_Str"",Font.BOLD,16));
  displayX=createTextInfo();
  displayY=createTextInfo();
  displayZ=createTextInfo();
  showAll=new JCheckBox(""String_Node_Str"");
  showAll.addItemListener(this);
  showAll.setSelected(setShowAll);
  showInliers=new JCheckBox(""String_Node_Str"");
  showInliers.addItemListener(this);
  showInliers.setSelected(setShowInliers);
  displayIntegral=createTextInfo();
  displayOrigin=createTextInfo();
  displayTracks=createTextInfo();
  displayInliers=createTextInfo();
  displayFaults=createTextInfo();
  displayFps=createTextInfo();
  addAlignCenter(displayStatus,this);
  addSeparator(150);
  addLabeled(displayTracks,""String_Node_Str"",this);
  addLabeled(displayInliers,""String_Node_Str"",this);
  addLabeled(displayFaults,""String_Node_Str"",this);
  addLabeled(displayFps,""String_Node_Str"",this);
  addSeparator(150);
  addLabeled(displayX,""String_Node_Str"",this);
  addLabeled(displayY,""String_Node_Str"",this);
  addLabeled(displayZ,""String_Node_Str"",this);
  addAlignCenter(orientation,this);
  addSeparator(150);
  addLabeled(displayIntegral,""String_Node_Str"",this);
  addLabeled(displayOrigin,""String_Node_Str"",this);
  addSeparator(150);
  addAlignLeft(showAll,this);
  addAlignLeft(showInliers,this);
  addVerticalGlue(this);
  setPreferredSize(new Dimension(175,300));
}","public VisualOdometryPanel(){
  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
  displayStatus=new JLabel();
  displayStatus.setFont(new Font(""String_Node_Str"",Font.BOLD,16));
  selectView=new JComboBox(new String[]{""String_Node_Str"",""String_Node_Str""});
  selectView.addActionListener(this);
  selectView.setMaximumSize(selectView.getPreferredSize());
  displayX=createTextInfo();
  displayY=createTextInfo();
  displayZ=createTextInfo();
  showAll=new JCheckBox(""String_Node_Str"");
  showAll.addItemListener(this);
  showAll.setSelected(setShowAll);
  showInliers=new JCheckBox(""String_Node_Str"");
  showInliers.addItemListener(this);
  showInliers.setSelected(setShowInliers);
  displayIntegral=createTextInfo();
  displayOrigin=createTextInfo();
  displayTracks=createTextInfo();
  displayInliers=createTextInfo();
  displayFaults=createTextInfo();
  displayFps=createTextInfo();
  addAlignCenter(displayStatus,this);
  addLabeled(selectView,""String_Node_Str"",this);
  addSeparator(150);
  addLabeled(displayTracks,""String_Node_Str"",this);
  addLabeled(displayInliers,""String_Node_Str"",this);
  addLabeled(displayFaults,""String_Node_Str"",this);
  addLabeled(displayFps,""String_Node_Str"",this);
  addSeparator(150);
  addLabeled(displayX,""String_Node_Str"",this);
  addLabeled(displayY,""String_Node_Str"",this);
  addLabeled(displayZ,""String_Node_Str"",this);
  addAlignCenter(orientation,this);
  addSeparator(150);
  addLabeled(displayIntegral,""String_Node_Str"",this);
  addLabeled(displayOrigin,""String_Node_Str"",this);
  addSeparator(150);
  addAlignLeft(showAll,this);
  addAlignLeft(showInliers,this);
  addVerticalGlue(this);
}",0.916305021698698
151073,"public void run(){
  guiInfo.setStatus(text,color);
}","public void run(){
  if (view == 0) {
    remove(guiCam3D);
    add(guiRight,BorderLayout.EAST);
  }
 else {
    remove(guiRight);
    add(guiCam3D,BorderLayout.EAST);
  }
  revalidate();
  repaint();
}",0.2039215686274509
151074,"public VisualizeStereoVisualOdometryApp(Class<I> imageType){
  super(1,imageType);
  addAlgorithm(0,""String_Node_Str"",0);
  addAlgorithm(0,""String_Node_Str"",1);
  guiInfo=new VisualOdometryPanel();
  guiImages=new ImageGridPanel(1,2);
  add(guiInfo,BorderLayout.WEST);
  setMainGUI(guiImages);
  guiImages.addMouseListener(this);
}","public VisualizeStereoVisualOdometryApp(Class<I> imageType){
  super(1,imageType);
  addAlgorithm(0,""String_Node_Str"",0);
  addAlgorithm(0,""String_Node_Str"",1);
  guiInfo=new VisualOdometryPanel();
  guiLeft=new ImagePanel();
  guiRight=new ImagePanel();
  guiCam3D=new Polygon3DSequenceViewer();
  add(guiInfo,BorderLayout.WEST);
  add(guiRight,BorderLayout.EAST);
  setMainGUI(guiLeft);
  guiLeft.addMouseListener(this);
  guiInfo.setListener(this);
}",0.7602040816326531
151075,"@Override protected void updateAlgGUI(I frame1,BufferedImage buffImage1,I frame2,BufferedImage buffImage2,final double fps){
  if (!noFault)   numFaults++;
  final Se3_F64 leftToWorld=alg.getLeftToWorld().copy();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      guiInfo.setCameraToWorld(leftToWorld);
      guiInfo.setNumFaults(numFaults);
      guiInfo.setNumTracks(numTracks);
      guiInfo.setNumInliers(numInliers);
      guiInfo.setFps(fps);
    }
  }
);
  showTracks=guiInfo.isShowAll();
  showInliers=guiInfo.isShowInliers();
  drawFeatures((AccessPointTracks3D)alg,buffImage1);
  guiImages.setImage(0,0,buffImage1);
  guiImages.setImage(0,1,buffImage2);
  guiImages.autoSetPreferredSize();
  hasProcessedImage=true;
}","@Override protected void updateAlgGUI(I frame1,final BufferedImage buffImage1,I frame2,final BufferedImage buffImage2,final double fps){
  if (!noFault)   numFaults++;
  showTracks=guiInfo.isShowAll();
  showInliers=guiInfo.isShowInliers();
  drawFeatures((AccessPointTracks3D)alg,buffImage1);
  final Se3_F64 leftToWorld=alg.getLeftToWorld().copy();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      guiLeft.setBufferedImage(buffImage1);
      guiRight.setBufferedImage(buffImage2);
      guiLeft.autoSetPreferredSize();
      guiRight.autoSetPreferredSize();
      guiLeft.repaint();
      guiRight.repaint();
      guiInfo.setCameraToWorld(leftToWorld);
      guiInfo.setNumFaults(numFaults);
      guiInfo.setNumTracks(numTracks);
      guiInfo.setNumInliers(numInliers);
      guiInfo.setFps(fps);
    }
  }
);
  double r=config.getBaseline();
  Point3D_F64 p1=new Point3D_F64(-r,-r,0);
  Point3D_F64 p2=new Point3D_F64(r,-r,0);
  Point3D_F64 p3=new Point3D_F64(r,r,0);
  Point3D_F64 p4=new Point3D_F64(-r,r,0);
  SePointOps_F64.transform(leftToWorld,p1,p1);
  SePointOps_F64.transform(leftToWorld,p2,p2);
  SePointOps_F64.transform(leftToWorld,p3,p3);
  SePointOps_F64.transform(leftToWorld,p4,p4);
  guiCam3D.add(p1,p2,p3,p4);
  guiCam3D.repaint();
  hasProcessedImage=true;
}",0.3150218765192027
151076,"@Override public void refreshAll(Object[] cookies){
  numFaults=0;
  alg=createStereoDepth(whichAlg == 0);
  alg.setCalibration(config);
  guiInfo.reset();
  handleRunningStatus(2);
  startWorkerThread();
}","@Override public void refreshAll(Object[] cookies){
  numFaults=0;
  alg=createStereoDepth(whichAlg == 0);
  alg.setCalibration(config);
  guiInfo.reset();
  handleRunningStatus(2);
  IntrinsicParameters right=config.right;
  DenseMatrix64F K=PerspectiveOps.calibrationMatrix(config.left,null);
  guiCam3D.clearPolygons();
  guiCam3D.setK(K);
  guiCam3D.setStepSize(config.getBaseline());
  guiCam3D.setPreferredSize(new Dimension(right.width,right.height));
  guiCam3D.setMaximumSize(guiCam3D.getPreferredSize());
  startWorkerThread();
}",0.553020134228188
151077,"private StereoVisualOdometry<I> createStereoDepth(boolean useKlt){
  ImagePointTracker<I> tracker;
  if (useKlt) {
    Class derivType=GImageDerivativeOps.getDerivativeType(imageType);
    tracker=FactoryPointSequentialTracker.klt(600,new int[]{1,2,4,8},3,3,2,imageType,derivType);
  }
 else {
    tracker=FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(400,200,2,0,imageType);
  }
  StereoDisparitySparse<I> disparity=FactoryStereoDisparity.regionSparseWta(0,150,3,3,30,-1,true,imageType);
  return FactoryVisualOdometry.stereoDepth(120,4,1.5,tracker,disparity,0,imageType);
}","private StereoVisualOdometry<I> createStereoDepth(boolean useKlt){
  ImagePointTracker<I> tracker;
  int thresholdAdd;
  int thresholdRetire;
  if (useKlt) {
    thresholdAdd=120;
    thresholdRetire=2;
    Class derivType=GImageDerivativeOps.getDerivativeType(imageType);
    tracker=FactoryPointSequentialTracker.klt(600,new int[]{1,2,4,8},3,3,2,imageType,derivType);
  }
 else {
    thresholdAdd=80;
    thresholdRetire=3;
    tracker=FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(600,200,2,0,4,imageType,null);
  }
  StereoDisparitySparse<I> disparity=FactoryStereoDisparity.regionSparseWta(0,150,3,3,30,-1,true,imageType);
  return FactoryVisualOdometry.stereoDepth(thresholdAdd,thresholdRetire,1.5,tracker,disparity,0,imageType);
}",0.8393939393939394
151078,"public VideoTrackFeaturesApp(Class<I> imageType,Class<D> derivType){
  super(1,imageType);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,1,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,5,5,20,imageType,derivType));
  gui.addMouseListener(this);
  gui.requestFocus();
  setMainGUI(gui);
}","public VideoTrackFeaturesApp(Class<I> imageType,Class<D> derivType){
  super(1,imageType);
  PkltManagerConfig<I,D> config=PkltManagerConfig.createDefault(imageType,derivType);
  config.maxFeatures=maxFeatures;
  config.featureRadius=3;
  config.pyramidScaling=new int[]{1,2,4,8};
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.klt(config));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_BRIEF(300,200,1,1,2,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_FH_SURF(300,200,2,2,imageType));
  addAlgorithm(0,""String_Node_Str"",FactoryPointSequentialTracker.dda_ShiTomasi_NCC(500,5,5,20,2,imageType,derivType));
  gui.addMouseListener(this);
  gui.requestFocus();
  setMainGUI(gui);
}",0.9830508474576272
151079,"@Override public void changeInput(String name,int index){
  stopWorker();
  Reader r=media.openFile(inputRefs.get(index).getPath());
  BufferedReader in=new BufferedReader(r);
  try {
    String lineConfig=in.readLine();
    String line1=in.readLine();
    String line2=in.readLine();
    config=BoofMiscOps.loadXML(media.openFile(lineConfig));
    SimpleImageSequence<I> video1=media.openVideo(line1,imageType);
    SimpleImageSequence<I> video2=media.openVideo(line2,imageType);
    process(video1,video2);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void changeInput(String name,int index){
  stopWorker();
  Reader r=media.openFile(inputRefs.get(index).getPath());
  BufferedReader in=new BufferedReader(r);
  try {
    String path=new File(inputRefs.get(index).getPath()).getParent();
    String lineConfig=path + ""String_Node_Str"" + in.readLine();
    String line1=path + ""String_Node_Str"" + in.readLine();
    String line2=path + ""String_Node_Str"" + in.readLine();
    config=BoofMiscOps.loadXML(media.openFile(lineConfig));
    SimpleImageSequence<I> video1=media.openVideo(line1,imageType);
    SimpleImageSequence<I> video2=media.openVideo(line2,imageType);
    process(video1,video2);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.8848207475209764
151080,"/** 
 * Creates a SURF feature tracker.
 */
public void createSURF(){
  tracker=FactoryPointSequentialTracker.dda_FH_SURF(200,80,3,imageType);
}","/** 
 * Creates a SURF feature tracker.
 */
public void createSURF(){
  tracker=FactoryPointSequentialTracker.dda_FH_SURF(200,80,3,4,imageType);
}",0.993103448275862
151081,"@Override public void associate(FastQueue<SurfFeature> listSrc,FastQueue<SurfFeature> listDst){
  alg.setSrc(listSrc);
  alg.setDst(listDst);
}","@Override public void associate(FastQueue<SurfFeature> listSrc,FastQueue<SurfFeature> listDst){
  alg.setSrc(listSrc);
  alg.setDst(listDst);
  alg.associate();
}",0.9377049180327868
151082,"/** 
 * @param radius Radius of the region being considered in terms of samples. Typically 6.
 * @param period How often the image is sampled.  This number is scaled.  Typically 1.   
 * @param sampleWidth How wide of a kernel should be used to sample.
 * @param weightSigma Sigma for weighting.  zero for unweighted.
 */
public OrientationIntegralBase(int radius,double period,int sampleWidth,double weightSigma,Class<T> imageType){
  this.radius=radius;
  this.period=period;
  this.sampleWidth=sampleWidth;
  this.width=radius * 2 + 1;
  this.imageType=imageType;
  if (weightSigma != 0)   this.weights=FactoryKernelGaussian.gaussian(2,true,64,weightSigma,radius);
  g=(SparseScaleGradient<T,G>)SurfDescribeOps.createGradient(false,sampleWidth,imageType);
}","/** 
 * Configure orientation estimation.
 * @param radius Radius of the region being considered in terms of samples. Typically 6.
 * @param period How often the image is sampled.  This number is scaled.  Typically 1.   
 * @param sampleWidth How wide of a kernel should be used to sample. Try 4
 * @param weightSigma Sigma for weighting.  zero for unweighted.
 */
public OrientationIntegralBase(int radius,double period,int sampleWidth,double weightSigma,Class<T> imageType){
  this.radius=radius;
  this.period=period;
  this.sampleWidth=sampleWidth;
  this.width=radius * 2 + 1;
  this.imageType=imageType;
  if (weightSigma != 0)   this.weights=FactoryKernelGaussian.gaussian(2,true,64,weightSigma,radius);
  g=(SparseScaleGradient<T,G>)SurfDescribeOps.createGradient(false,sampleWidth,imageType);
}",0.9724888035828536
151083,"protected double computeUnweighted(double tl_x,double tl_y,double samplePeriod){
  tl_x+=0.5;
  tl_y+=0.5;
  double Dx=0, Dy=0;
  int i=0;
  for (int y=0; y < width; y++) {
    int pixelY=(int)(tl_y + y * samplePeriod);
    for (int x=0; x < width; x++, i++) {
      int pixelX=(int)(tl_x + x * samplePeriod);
      if (sampler.isInBounds(pixelX,pixelY)) {
        double val=sampler.compute(pixelX,pixelY);
        Dx+=kerCosine.data[i] * val;
        Dy+=kerSine.data[i] * val;
      }
    }
  }
  return Math.atan2(Dy,Dx);
}","protected double computeUnweighted(double tl_x,double tl_y,double samplePeriod){
  tl_x+=0.5;
  tl_y+=0.5;
  double Dx=0, Dy=0;
  int i=0;
  for (int y=0; y < width; y++) {
    int pixelY=(int)(tl_y + y * samplePeriod);
    for (int x=0; x < width; x++, i++) {
      int pixelX=(int)(tl_x + x * samplePeriod);
      if (sampler.isInBounds(pixelX,pixelY)) {
        try {
          double val=sampler.compute(pixelX,pixelY);
          Dx+=kerCosine.data[i] * val;
          Dy+=kerSine.data[i] * val;
        }
 catch (        RuntimeException e) {
          sampler.isInBounds(pixelX,pixelY);
          sampler.compute(pixelX,pixelY);
          throw e;
        }
      }
    }
  }
  return Math.atan2(Dy,Dx);
}",0.851373182552504
151084,"public static <T extends ImageSingleBand>OrientationIntegral<T> image_ii(int radius,double samplePeriod,int sampleWidth,double weightSigma,Class<T> imageType){
  return (OrientationIntegral<T>)new ImplOrientationImageAverageIntegral(radius,samplePeriod,sampleWidth,weightSigma,imageType);
}","/** 
 * Estimates the orientation without calculating the image derivative.
 * @see ImplOrientationImageAverageIntegral
 * @param radius Radius of the region being considered in terms of samples. Typically 6.
 * @param samplePeriod How often the image is sampled.  This number is scaled.  Typically 1.
 * @param sampleWidth How wide of a kernel should be used to sample. Try 4
 * @param weightSigma Sigma for weighting.  zero for unweighted.
 * @param imageType Type of image being processed.
 * @return OrientationIntegral
 */
public static <T extends ImageSingleBand>OrientationIntegral<T> image_ii(int radius,double samplePeriod,int sampleWidth,double weightSigma,Class<T> imageType){
  return (OrientationIntegral<T>)new ImplOrientationImageAverageIntegral(radius,samplePeriod,sampleWidth,weightSigma,imageType);
}",0.5234657039711191
151085,"@Test public void With_Orientation(){
  fail(""String_Node_Str"");
}","@Test public void With_Orientation(){
  WrapFHtoInterestPoint alg=new WrapFHtoInterestPoint(detector,orientation);
  new GeneralInterestPointDetectorChecks(alg,true,true,ImageUInt8.class).performAllTests();
}",0.3284671532846715
151086,"@Test public void NO_Orientation(){
  fail(""String_Node_Str"");
}","@Test public void NO_Orientation(){
  WrapFHtoInterestPoint alg=new WrapFHtoInterestPoint(detector);
  new GeneralInterestPointDetectorChecks(alg,false,true,ImageUInt8.class).performAllTests();
}",0.3938223938223938
151087,"/** 
 * Construct 10 by 10 coeffient matrix for the following coefficients 'x*z^2','x*z','x','y*z^2','y*z','y','z^3','z^2','z','1'
 * @param B a 10 by 10 matrix
 */
public void setupA2(DenseMatrix64F B){
  B.data[0]=Z22 * (X00 * Z11 - X01 * Z10 - X10 * Z01 + X11 * Z00) + Z21 * (-X00 * Z12 + X02 * Z10 + X10 * Z02 - X12 * Z00) + Z20 * (X01 * Z12 - X02 * Z11 - X11 * Z02 + X12 * Z01) + Z01 * (X20 * Z12 - X22 * Z10) + Z00 * (-X21 * Z12 + X22 * Z11) + Z02 * (-X20 * Z11 + X21 * Z10);
  B.data[1]=Z22 * (W00 * X11 - W01 * X10 - W10 * X01 + W11 * X00) + Z21 * (-W00 * X12 + W02 * X10 + W10 * X02 - W12 * X00) + Z20 * (W01 * X12 - W02 * X11 - W11 * X02 + W12 * X01) + Z01 * (-W10 * X22 + W12 * X20 + W20 * X12 - W22 * X10) + Z00 * (W11 * X22 - W12 * X21 - W21 * X12 + W22 * X11) + Z02 * (W10 * X21 - W11 * X20 - W20 * X11 + W21 * X10) + Z12 * (-W00 * X21 + W01 * X20 + W20 * X01 - W21 * X00) + Z11 * (W00 * X22 - W02 * X20 - W20 * X02 + W22 * X00) + Z10 * (-W01 * X22 + W02 * X21 + W21 * X02 - W22 * X01);
  B.data[2]=W00 * (W11 * X22 - W12 * X21 - W21 * X12 + W22 * X11) + W01 * (-W10 * X22 + W12 * X20 + W20 * X12 - W22 * X10) + W02 * (W10 * X21 - W11 * X20 - W20 * X11 + W21 * X10) + W12 * (W20 * X01 - W21 * X00) + W11 * (-W20 * X02 + W22 * X00) + W10 * (W21 * X02 - W22 * X01);
  B.data[3]=Z22 * (Y00 * Z11 - Y01 * Z10 - Y10 * Z01 + Y11 * Z00) + Z21 * (-Y00 * Z12 + Y02 * Z10 + Y10 * Z02 - Y12 * Z00) + Z20 * (Y01 * Z12 - Y02 * Z11 - Y11 * Z02 + Y12 * Z01) + Z01 * (Y20 * Z12 - Y22 * Z10) + Z00 * (-Y21 * Z12 + Y22 * Z11) + Z02 * (-Y20 * Z11 + Y21 * Z10);
  B.data[4]=Y02 * (W10 * Z21 - W11 * Z20 - W20 * Z11 + W21 * Z10) + Y00 * (W11 * Z22 - W12 * Z21 - W21 * Z12 + W22 * Z11) + Y01 * (-W10 * Z22 + W12 * Z20 + W20 * Z12 - W22 * Z10) + Z01 * (-W10 * Y22 + W12 * Y20 + W20 * Y12 - W22 * Y10) + Z00 * (W11 * Y22 - W12 * Y21 - W21 * Y12 + W22 * Y11) + Z02 * (W10 * Y21 - W11 * Y20 - W20 * Y11 + W21 * Y10) + W00 * (Y11 * Z22 - Y12 * Z21 - Y21 * Z12 + Y22 * Z11) + W01 * (-Y10 * Z22 + Y12 * Z20 + Y20 * Z12 - Y22 * Z10) + W02 * (Y10 * Z21 - Y11 * Z20 - Y20 * Z11 + Y21 * Z10);
  B.data[5]=W00 * (W11 * Y22 - W12 * Y21 - W21 * Y12 + W22 * Y11) + W01 * (-W10 * Y22 + W12 * Y20 + W20 * Y12 - W22 * Y10) + W02 * (W10 * Y21 - W11 * Y20 - W20 * Y11 + W21 * Y10) + Y02 * (W10 * W21 - W11 * W20) + Y00 * (W11 * W22 - W12 * W21) + Y01 * (-W10 * W22 + W12 * W20);
  B.data[6]=Z22 * (Z00 * Z11 - Z01 * Z10) + Z21 * (-Z00 * Z12 + Z02 * Z10) + Z20 * (Z01 * Z12 - Z02 * Z11);
  B.data[7]=Z22 * (W00 * Z11 - W01 * Z10 - W10 * Z01 + W11 * Z00) + Z21 * (-W00 * Z12 + W02 * Z10 + W10 * Z02 - W12 * Z00) + Z20 * (W01 * Z12 - W02 * Z11 - W11 * Z02 + W12 * Z01) + Z01 * (W20 * Z12 - W22 * Z10) + Z00 * (-W21 * Z12 + W22 * Z11) + Z02 * (-W20 * Z11 + W21 * Z10);
  B.data[8]=W02 * (W10 * Z21 - W11 * Z20 - W20 * Z11 + W21 * Z10) + W00 * (W11 * Z22 - W12 * Z21 - W21 * Z12 + W22 * Z11) + W01 * (-W10 * Z22 + W12 * Z20 + W20 * Z12 - W22 * Z10) + Z01 * (-W10 * W22 + W12 * W20) + Z00 * (W11 * W22 - W12 * W21) + Z02 * (W10 * W21 - W11 * W20);
  B.data[9]=W00 * (W11 * W22 - W12 * W21) + W01 * (-W10 * W22 + W12 * W20) + W02 * (W10 * W21 - W11 * W20);
  B.data[10]=Z00 * (1.5 * X00 * Z00 + X01 * Z01 + X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + 0.5 * (X00 * (Z01 * Z01 + Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (X01 * Z21 + X02 * Z22 + X21 * Z01 + X22 * Z02) + Z10 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + Z01 * (X10 * Z11 + X20 * Z21) + Z02 * (X10 * Z12 + X20 * Z22);
  B.data[11]=Z00 * (3.0 * W00 * X00 + W01 * X01 + W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + X00 * (W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W00 * (X01 * Z01 + X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + Z20 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + Z01 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + Z02 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + Z10 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + Z22 * (W02 * X20 + W20 * X02) + Z21 * (W01 * X20 + W20 * X01) + Z12 * (W02 * X10 + W10 * X02) + Z11 * (W01 * X10 + W10 * X01);
  B.data[12]=W00 * (1.5 * W00 * X00 + W01 * X01 + W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + 0.5 * (X00 * (W01 * W01 + W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W01 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + W02 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + W10 * (W11 * X01 + W12 * X02) + W20 * (W21 * X01 + W22 * X02);
  B.data[13]=Z00 * (1.5 * Y00 * Z00 + Y01 * Z01 + Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y00 * (0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Y01 * Z21 + Y02 * Z22 + Y21 * Z01 + Y22 * Z02) + Z10 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + Z01 * (Y10 * Z11 + Y20 * Z21) + Z02 * (Y10 * Z12 + Y20 * Z22);
  B.data[14]=Y00 * (3.0 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + Z00 * (W01 * Y01 + W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + W00 * (Y01 * Z01 + Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y02 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + Y01 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z01 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + Z02 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (Y10 * Z11 + Y11 * Z10 + Y20 * Z21 + Y21 * Z20) + W02 * (Y10 * Z12 + Y12 * Z10 + Y20 * Z22 + Y22 * Z20);
  B.data[15]=W00 * (1.5 * W00 * Y00 + W01 * Y01 + W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + Y00 * (0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W01 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + W02 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + Y02 * (W10 * W12 + W20 * W22) + Y01 * (W10 * W11 + W20 * W21);
  B.data[16]=Z00 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Z01 * Z21 + Z02 * Z22) + Z10 * (Z01 * Z11 + Z02 * Z12);
  B.data[17]=Z00 * (1.5 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (W00 * (Z01 * Z01 + Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + Z10 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + Z01 * (W10 * Z11 + W20 * Z21) + Z02 * (W10 * Z12 + W20 * Z22);
  B.data[18]=W00 * (1.5 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + Z00 * (0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W02 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + W01 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z01 * (W10 * W11 + W20 * W21) + Z02 * (W10 * W12 + W20 * W22);
  B.data[19]=W00 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W01 * (W10 * W11 + W20 * W21) + W02 * (W10 * W12 + W20 * W22);
  B.data[20]=Z01 * (X00 * Z00 + 1.5 * X01 * Z01 + X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + 0.5 * (X01 * (Z00 * Z00 + Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (X00 * Z20 + X02 * Z22 + X20 * Z00 + X22 * Z02) + Z11 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + Z00 * (X11 * Z10 + X21 * Z20) + Z02 * (X11 * Z12 + X21 * Z22);
  B.data[21]=Z01 * (W00 * X00 + 3.0 * W01 * X01 + W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + X01 * (W00 * Z00 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W01 * (X00 * Z00 + X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + Z21 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + Z00 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + Z02 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + Z11 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + Z22 * (W02 * X21 + W21 * X02) + Z20 * (W00 * X21 + W21 * X00) + Z10 * (W00 * X11 + W11 * X00) + Z12 * (W02 * X11 + W11 * X02);
  B.data[22]=W01 * (W00 * X00 + 1.5 * W01 * X01 + W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + 0.5 * (X01 * (W00 * W00 + W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W00 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + W02 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + W11 * (W10 * X00 + W12 * X02) + W21 * (W20 * X00 + W22 * X02);
  B.data[23]=Z01 * (Y00 * Z00 + 1.5 * Y01 * Z01 + Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y01 * (0.5 * Z00 * Z00 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Y00 * Z20 + Y02 * Z22 + Y20 * Z00 + Y22 * Z02) + Z11 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Z00 * (Y11 * Z10 + Y21 * Z20) + Z02 * (Y11 * Z12 + Y21 * Z22);
  B.data[24]=Y01 * (W00 * Z00 + 3.0 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + Z01 * (W00 * Y00 + W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + W01 * (Y00 * Z00 + Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y02 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Y00 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z00 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + Z02 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + W00 * (Y10 * Z11 + Y11 * Z10 + Y20 * Z21 + Y21 * Z20) + W02 * (Y11 * Z12 + Y12 * Z11 + Y21 * Z22 + Y22 * Z21);
  B.data[25]=W01 * (W00 * Y00 + 1.5 * W01 * Y01 + W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + Y01 * (0.5 * W00 * W00 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + W02 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + Y02 * (W11 * W12 + W21 * W22) + Y00 * (W10 * W11 + W20 * W21);
  B.data[26]=Z01 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Z00 * Z20 + Z02 * Z22) + Z11 * (Z00 * Z10 + Z02 * Z12);
  B.data[27]=Z01 * (W00 * Z00 + 1.5 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (W01 * (Z00 * Z00 + Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + Z11 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z00 * (W11 * Z10 + W21 * Z20) + Z02 * (W11 * Z12 + W21 * Z22);
  B.data[28]=W01 * (W00 * Z00 + 1.5 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + Z01 * (0.5 * W00 * W00 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + W02 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z00 * (W10 * W11 + W20 * W21) + Z02 * (W11 * W12 + W21 * W22);
  B.data[29]=W01 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * W11 + W20 * W21) + W02 * (W11 * W12 + W21 * W22);
  B.data[30]=Z02 * (X00 * Z00 + X01 * Z01 + 1.5 * X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + 0.5 * (X02 * (Z00 * Z00 + Z01 * Z01 - Z10 * Z10 - Z11 * Z11 + Z12 * Z12 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (X00 * Z20 + X01 * Z21 + X20 * Z00 + X21 * Z01) + Z12 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + Z01 * (X12 * Z11 + X22 * Z21) + Z00 * (X12 * Z10 + X22 * Z20);
  B.data[31]=Z02 * (W00 * X00 + W01 * X01 + 3.0 * W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + X02 * (W00 * Z00 + W01 * Z01 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W02 * (X00 * Z00 + X01 * Z01 - X10 * Z10 - X11 * Z11 + X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + Z22 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + Z01 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + Z12 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + Z00 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + Z21 * (W01 * X22 + W22 * X01) + Z20 * (W00 * X22 + W22 * X00) + W12 * (X00 * Z10 + X01 * Z11) + X12 * (W00 * Z10 + W01 * Z11);
  B.data[32]=W02 * (W00 * X00 + W01 * X01 + 1.5 * W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + 0.5 * (X02 * (W00 * W00 + W01 * W01 - W10 * W10 - W11 * W11 + W12 * W12 - W20 * W20 - W21 * W21 + W22 * W22)) + W00 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + W01 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + W12 * (W10 * X00 + W11 * X01) + W22 * (W20 * X00 + W21 * X01);
  B.data[33]=Z02 * (Y00 * Z00 + Y01 * Z01 + 1.5 * Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Y00 * Z20 + Y01 * Z21 + Y20 * Z00 + Y21 * Z01) + Z12 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Z01 * (Y12 * Z11 + Y22 * Z21) + Z00 * (Y12 * Z10 + Y22 * Z20);
  B.data[34]=Y02 * (W00 * Z00 + W01 * Z01 + 3.0 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z02 * (W00 * Y00 + W01 * Y01 - W10 * Y10 - W11 * Y11 + W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + W02 * (Y00 * Z00 + Y01 * Z01 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y00 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + Y01 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z01 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + W00 * (Y10 * Z12 + Y12 * Z10 + Y20 * Z22 + Y22 * Z20) + Z00 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (Y11 * Z12 + Y12 * Z11 + Y21 * Z22 + Y22 * Z21);
  B.data[35]=W02 * (W00 * Y00 + W01 * Y01 + 1.5 * W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + Y02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + Y00 * (W10 * W12 + W20 * W22) + Y01 * (W11 * W12 + W21 * W22);
  B.data[36]=Z02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z00 * Z20 + Z01 * Z21) + Z12 * (Z00 * Z10 + Z01 * Z11);
  B.data[37]=Z02 * (W00 * Z00 + W01 * Z01 + 1.5 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z12 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z01 * (W12 * Z11 + W22 * Z21) + Z00 * (W12 * Z10 + W22 * Z20);
  B.data[38]=W02 * (W00 * Z00 + W01 * Z01 + 1.5 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + W01 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z01 * (W11 * W12 + W21 * W22) + Z00 * (W10 * W12 + W20 * W22);
  B.data[39]=W02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * W12 + W20 * W22) + W01 * (W11 * W12 + W21 * W22);
  B.data[40]=Z10 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + 1.5 * X10 * Z10 + X11 * Z11 + X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + 0.5 * (X10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (X11 * Z21 + X12 * Z22 + X21 * Z11 + X22 * Z12) + Z00 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + Z12 * (X00 * Z02 + X20 * Z22) + Z11 * (X00 * Z01 + X20 * Z21);
  B.data[41]=Z10 * (W00 * X00 - W01 * X01 - W02 * X02 + 3.0 * W10 * X10 + W11 * X11 + W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + X10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W10 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X11 * Z11 + X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + Z20 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + Z00 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + W20 * (X11 * Z21 + X12 * Z22 + X21 * Z11 + X22 * Z12) + W00 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + X00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + X20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[42]=W10 * (W00 * X00 - W01 * X01 - W02 * X02 + 1.5 * W10 * X10 + W11 * X11 + W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + 0.5 * (X10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + W20 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + W12 * (W02 * X00 + W22 * X20) + W11 * (W01 * X00 + W21 * X20);
  B.data[43]=Z10 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + 1.5 * Y10 * Z10 + Y11 * Z11 + Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + 0.5 * (Y10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Z00 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + Y00 * (Z01 * Z11 + Z02 * Z12) + Y20 * (Z11 * Z21 + Z12 * Z22);
  B.data[44]=Z10 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + 3.0 * W10 * Y10 + W11 * Y11 + W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + Y10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W10 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y11 * Z11 + Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + Z20 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Z00 * (W01 * Y11 + W02 * Y12 + W11 * Y01 + W12 * Y02) + W00 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + W20 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Y20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[45]=W10 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + 1.5 * W10 * Y10 + W11 * Y11 + W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + 0.5 * (Y10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * Y11 + W02 * Y12 + W11 * Y01 + W12 * Y02) + W20 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y00 * (W01 * W11 + W02 * W12) + Y20 * (W11 * W21 + W12 * W22);
  B.data[46]=Z10 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Z11 * Z21 + Z12 * Z22) + Z00 * (Z01 * Z11 + Z02 * Z12);
  B.data[47]=Z10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + 1.5 * W10 * Z10 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (W10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + W00 * (Z01 * Z11 + Z02 * Z12) + W20 * (Z11 * Z21 + Z12 * Z22);
  B.data[48]=W10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + 1.5 * W10 * Z10 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (Z10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + W20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z20 * (W11 * W21 + W12 * W22) + Z00 * (W01 * W11 + W02 * W12);
  B.data[49]=W10 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W01 * W11 + W02 * W12) + W20 * (W11 * W21 + W12 * W22);
  B.data[50]=Z11 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 + X10 * Z10 + 1.5 * X11 * Z11 + X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + 0.5 * (X11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (X10 * Z20 + X12 * Z22 + X20 * Z10 + X22 * Z12) + Z01 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + Z12 * (X01 * Z02 + X21 * Z22) + Z10 * (X01 * Z00 + X21 * Z20);
  B.data[51]=Z11 * (-W00 * X00 + W01 * X01 - W02 * X02 + W10 * X10 + 3.0 * W11 * X11 + W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + X11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W11 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 + X10 * Z10 + X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + Z21 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + Z01 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + W21 * (X10 * Z20 + X12 * Z22 + X20 * Z10 + X22 * Z12) + W01 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + X01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + X21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[52]=W11 * (-W00 * X00 + W01 * X01 - W02 * X02 + W10 * X10 + 1.5 * W11 * X11 + W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + 0.5 * (X11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W01 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + W21 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + W12 * (W02 * X01 + W22 * X21) + W10 * (W00 * X01 + W20 * X21);
  B.data[53]=Z11 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 + Y10 * Z10 + 1.5 * Y11 * Z11 + Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + 0.5 * (Y11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + Z01 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Y01 * (Z00 * Z10 + Z02 * Z12) + Y21 * (Z10 * Z20 + Z12 * Z22);
  B.data[54]=Z11 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 + W10 * Y10 + 3.0 * W11 * Y11 + W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + Y11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W11 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 + Y10 * Z10 + Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z21 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Z01 * (W00 * Y10 + W02 * Y12 + W10 * Y00 + W12 * Y02) + W21 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + W01 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Y21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[55]=W11 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 + W10 * Y10 + 1.5 * W11 * Y11 + W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + 0.5 * (Y11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W01 * (W00 * Y10 + W02 * Y12 + W10 * Y00 + W12 * Y02) + W21 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y01 * (W00 * W10 + W02 * W12) + Y21 * (W10 * W20 + W12 * W22);
  B.data[56]=Z11 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Z10 * Z20 + Z12 * Z22) + Z01 * (Z00 * Z10 + Z02 * Z12);
  B.data[57]=Z11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + 1.5 * W11 * Z11 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (W11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z12 * (W01 * Z02 + W02 * Z01 + W21 * Z22 + W22 * Z21) + Z10 * (W00 * Z01 + W01 * Z00 + W20 * Z21 + W21 * Z20) + Z21 * (W10 * Z20 + W12 * Z22) + Z01 * (W10 * Z00 + W12 * Z02);
  B.data[58]=W11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + 1.5 * W11 * Z11 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (Z11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12) + W01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z21 * (W10 * W20 + W12 * W22) + Z01 * (W00 * W10 + W02 * W12);
  B.data[59]=W11 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W12 * (W01 * W02 + W21 * W22) + W10 * (W00 * W01 + W20 * W21);
  B.data[60]=Z12 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 + X10 * Z10 + X11 * Z11 + 1.5 * X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + 0.5 * (X12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (X10 * Z20 + X11 * Z21 + X20 * Z10 + X21 * Z11) + Z02 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + Z10 * (X02 * Z00 + X22 * Z20) + Z11 * (X02 * Z01 + X22 * Z21);
  B.data[61]=Z12 * (-W00 * X00 - W01 * X01 + W02 * X02 + W10 * X10 + W11 * X11 + 3.0 * W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + X12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W12 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 + X10 * Z10 + X11 * Z11 - X20 * Z20 - X21 * Z21 + X22 * Z22) + Z22 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + Z02 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + W22 * (X10 * Z20 + X11 * Z21 + X20 * Z10 + X21 * Z11) + W02 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + X02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + X22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[62]=W12 * (-W00 * X00 - W01 * X01 + W02 * X02 + W10 * X10 + W11 * X11 + 1.5 * W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + 0.5 * (X12 * (-W00 * W00 - W01 * W01 + W02 * W02 + W10 * W10 + W11 * W11 - W20 * W20 - W21 * W21 + W22 * W22)) + W02 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + W22 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + W11 * (W01 * X02 + W21 * X22) + W10 * (W00 * X02 + W20 * X22);
  B.data[63]=Z12 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 + Y10 * Z10 + Y11 * Z11 + 1.5 * Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + 0.5 * (Y12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + Z02 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Y02 * (Z00 * Z10 + Z01 * Z11) + Y22 * (Z10 * Z20 + Z11 * Z21);
  B.data[64]=Z12 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 + W10 * Y10 + W11 * Y11 + 3.0 * W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + Y12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W12 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 + Y10 * Z10 + Y11 * Z11 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z22 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Z02 * (W00 * Y10 + W01 * Y11 + W10 * Y00 + W11 * Y01) + W22 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + W02 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Y22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[65]=W12 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 + W10 * Y10 + W11 * Y11 + 1.5 * W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + 0.5 * (Y12 * (-W00 * W00 - W01 * W01 + W02 * W02 + W10 * W10 + W11 * W11 - W20 * W20 - W21 * W21 + W22 * W22)) + W02 * (W00 * Y10 + W01 * Y11 + W10 * Y00 + W11 * Y01) + W22 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Y02 * (W00 * W10 + W01 * W11) + Y22 * (W10 * W20 + W11 * W21);
  B.data[66]=Z12 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z10 * Z20 + Z11 * Z21) + Z02 * (Z00 * Z10 + Z01 * Z11);
  B.data[67]=Z12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 + 1.5 * W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + 0.5 * (W12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z10 * (W02 * Z00 + W22 * Z20) + Z11 * (W02 * Z01 + W22 * Z21);
  B.data[68]=W12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 + 1.5 * W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z12 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W10 * (W00 * Z02 + W02 * Z00 + W20 * Z22 + W22 * Z20) + W11 * (W01 * Z02 + W02 * Z01 + W21 * Z22 + W22 * Z21) + Z10 * (W00 * W02 + W20 * W22) + Z11 * (W01 * W02 + W21 * W22);
  B.data[69]=W12 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W11 * (W01 * W02 + W21 * W22) + W10 * (W00 * W02 + W20 * W22);
  B.data[70]=Z20 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + 1.5 * X20 * Z20 + X21 * Z21 + X22 * Z22) + 0.5 * (X20 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z21 * Z21 + Z22 * Z22)) + Z22 * (X00 * Z02 + X02 * Z00 + X10 * Z12 + X12 * Z10) + Z21 * (X00 * Z01 + X01 * Z00 + X10 * Z11 + X11 * Z10) + Z00 * (X21 * Z01 + X22 * Z02) + Z10 * (X21 * Z11 + X22 * Z12);
  B.data[71]=Z20 * (W00 * X00 - W01 * X01 - W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + 3.0 * W20 * X20 + W21 * X21 + W22 * X22) + W20 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X21 * Z21 + X22 * Z22) + X20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W21 * Z21 + W22 * Z22) + Z22 * (W00 * X02 + W02 * X00 + W10 * X12 + W12 * X10) + Z21 * (W00 * X01 + W01 * X00 + W10 * X11 + W11 * X10) + Z00 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + Z10 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + X00 * (W21 * Z01 + W22 * Z02) + Z12 * (W10 * X22 + W22 * X10) + W00 * (X21 * Z01 + X22 * Z02) + Z11 * (W10 * X21 + W21 * X10);
  B.data[72]=W20 * (W00 * X00 - W01 * X01 - W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + 1.5 * W20 * X20 + W21 * X21 + W22 * X22) + 0.5 * (X20 * (W00 * W00 - W01 * W01 - W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W21 * W21 + W22 * W22)) + W00 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + W10 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + W22 * (W02 * X00 + W12 * X10) + W21 * (W01 * X00 + W11 * X10);
  B.data[73]=Z20 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + 1.5 * Y20 * Z20 + Y21 * Z21 + Y22 * Z22) + Y20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Y00 * Z02 + Y02 * Z00 + Y10 * Z12 + Y12 * Z10) + Z21 * (Y00 * Z01 + Y01 * Z00 + Y10 * Z11 + Y11 * Z10) + Z00 * (Y21 * Z01 + Y22 * Z02) + Z10 * (Y21 * Z11 + Y22 * Z12);
  B.data[74]=Z20 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + 3.0 * W20 * Y20 + W21 * Y21 + W22 * Y22) + W20 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y21 * Z21 + Y22 * Z22) + Y20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W21 * Z21 + W22 * Z22) + Y00 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + Z00 * (W01 * Y21 + W02 * Y22 + W21 * Y01 + W22 * Y02) + W00 * (Y01 * Z21 + Y02 * Z22 + Y21 * Z01 + Y22 * Z02) + W10 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Z10 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y10 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[75]=W20 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + 1.5 * W20 * Y20 + W21 * Y21 + W22 * Y22) + 0.5 * (Y20 * (W00 * W00 - W01 * W01 - W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W21 * W21 + W22 * W22)) + W00 * (W01 * Y21 + W02 * Y22 + W21 * Y01 + W22 * Y02) + W10 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y00 * (W01 * W21 + W02 * W22) + Y10 * (W11 * W21 + W12 * W22);
  B.data[76]=Z20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z00 * Z02 + Z10 * Z12) + Z21 * (Z00 * Z01 + Z10 * Z11);
  B.data[77]=Z20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + 1.5 * W20 * Z20 + W21 * Z21 + W22 * Z22) + W20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (W00 * Z02 + W02 * Z00 + W10 * Z12 + W12 * Z10) + Z21 * (W00 * Z01 + W01 * Z00 + W10 * Z11 + W11 * Z10) + Z00 * (W21 * Z01 + W22 * Z02) + Z10 * (W21 * Z11 + W22 * Z12);
  B.data[78]=W20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + 1.5 * W20 * Z20 + W21 * Z21 + W22 * Z22) + Z20 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + W10 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z10 * (W11 * W21 + W12 * W22) + Z00 * (W01 * W21 + W02 * W22);
  B.data[79]=W20 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W01 * W21 + W02 * W22) + W10 * (W11 * W21 + W12 * W22);
  B.data[80]=Z21 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 + X20 * Z20 + 1.5 * X21 * Z21 + X22 * Z22) + 0.5 * (X21 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 + Z20 * Z20 + Z22 * Z22)) + Z22 * (X01 * Z02 + X02 * Z01 + X11 * Z12 + X12 * Z11) + Z20 * (X00 * Z01 + X01 * Z00 + X10 * Z11 + X11 * Z10) + Z01 * (X20 * Z00 + X22 * Z02) + Z11 * (X20 * Z10 + X22 * Z12);
  B.data[81]=Z21 * (-W00 * X00 + W01 * X01 - W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 + W20 * X20 + 3.0 * W21 * X21 + W22 * X22) + W21 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 + X20 * Z20 + X22 * Z22) + X21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + W22 * Z22) + Z22 * (W01 * X02 + W02 * X01 + W11 * X12 + W12 * X11) + Z20 * (W00 * X01 + W01 * X00 + W10 * X11 + W11 * X10) + Z01 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + Z11 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + Z00 * (W01 * X20 + W20 * X01) + Z02 * (W01 * X22 + W22 * X01) + Z12 * (W11 * X22 + W22 * X11) + Z10 * (W11 * X20 + W20 * X11);
  B.data[82]=W21 * (-W00 * X00 + W01 * X01 - W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 + W20 * X20 + 1.5 * W21 * X21 + W22 * X22) + 0.5 * (X21 * (-W00 * W00 + W01 * W01 - W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 + W20 * W20 + W22 * W22)) + W01 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + W11 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + W22 * (W02 * X01 + W12 * X11) + W20 * (W00 * X01 + W10 * X11);
  B.data[83]=Z21 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 + Y20 * Z20 + 1.5 * Y21 * Z21 + Y22 * Z22) + Y21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z22 * Z22) + Z22 * (Y01 * Z02 + Y02 * Z01 + Y11 * Z12 + Y12 * Z11) + Z20 * (Y00 * Z01 + Y01 * Z00 + Y10 * Z11 + Y11 * Z10) + Z01 * (Y20 * Z00 + Y22 * Z02) + Z11 * (Y20 * Z10 + Y22 * Z12);
  B.data[84]=Z21 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 + W20 * Y20 + 3.0 * W21 * Y21 + W22 * Y22) + W21 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 + Y20 * Z20 + Y22 * Z22) + Y21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + W22 * Z22) + Y01 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + Z01 * (W00 * Y20 + W02 * Y22 + W20 * Y00 + W22 * Y02) + W01 * (Y00 * Z20 + Y02 * Z22 + Y20 * Z00 + Y22 * Z02) + W11 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + Z11 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y11 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[85]=W21 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 + W20 * Y20 + 1.5 * W21 * Y21 + W22 * Y22) + 0.5 * (Y21 * (-W00 * W00 + W01 * W01 - W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 + W20 * W20 + W22 * W22)) + W01 * (W00 * Y20 + W02 * Y22 + W20 * Y00 + W22 * Y02) + W11 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y01 * (W00 * W20 + W02 * W22) + Y11 * (W10 * W20 + W12 * W22);
  B.data[86]=Z21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z01 * Z02 + Z11 * Z12) + Z20 * (Z00 * Z01 + Z10 * Z11);
  B.data[87]=Z21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + 1.5 * W21 * Z21 + W22 * Z22) + W21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z22 * Z22) + Z22 * (W01 * Z02 + W02 * Z01 + W11 * Z12 + W12 * Z11) + Z20 * (W00 * Z01 + W01 * Z00 + W10 * Z11 + W11 * Z10) + Z01 * (W20 * Z00 + W22 * Z02) + Z11 * (W20 * Z10 + W22 * Z12);
  B.data[88]=W21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + 1.5 * W21 * Z21 + W22 * Z22) + Z21 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W22 * W22) + W01 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + W11 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12) + Z01 * (W00 * W20 + W02 * W22) + Z11 * (W10 * W20 + W12 * W22);
  B.data[89]=W21 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W01 * (W00 * W20 + W02 * W22) + W11 * (W10 * W20 + W12 * W22);
  B.data[90]=Z22 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 + X20 * Z20 + X21 * Z21 + 1.5 * X22 * Z22) + 0.5 * (X22 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 - Z10 * Z10 - Z11 * Z11 + Z12 * Z12 + Z20 * Z20 + Z21 * Z21)) + Z21 * (X01 * Z02 + X02 * Z01 + X11 * Z12 + X12 * Z11) + Z20 * (X00 * Z02 + X02 * Z00 + X10 * Z12 + X12 * Z10) + Z02 * (X20 * Z00 + X21 * Z01) + Z12 * (X20 * Z10 + X21 * Z11);
  B.data[91]=Z22 * (-W00 * X00 - W01 * X01 + W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 + W20 * X20 + W21 * X21 + 3.0 * W22 * X22) + W22 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 + X20 * Z20 + X21 * Z21) + X22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21) + Z21 * (W01 * X02 + W02 * X01 + W11 * X12 + W12 * X11) + Z20 * (W00 * X02 + W02 * X00 + W10 * X12 + W12 * X10) + Z02 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + Z12 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + Z01 * (W02 * X21 + W21 * X02) + Z00 * (W02 * X20 + W20 * X02) + W12 * (X20 * Z10 + X21 * Z11) + X12 * (W20 * Z10 + W21 * Z11);
  B.data[92]=W22 * (-W00 * X00 - W01 * X01 + W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 + W20 * X20 + W21 * X21 + 1.5 * W22 * X22) + 0.5 * (X22 * (-W00 * W00 - W01 * W01 + W02 * W02 - W10 * W10 - W11 * W11 + W12 * W12 + W20 * W20 + W21 * W21)) + W02 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + W12 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + W20 * (W00 * X02 + W10 * X12) + W21 * (W01 * X02 + W11 * X12);
  B.data[93]=Z22 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 + Y20 * Z20 + Y21 * Z21 + 1.5 * Y22 * Z22) + Y22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21) + Z21 * (Y01 * Z02 + Y02 * Z01 + Y11 * Z12 + Y12 * Z11) + Z20 * (Y00 * Z02 + Y02 * Z00 + Y10 * Z12 + Y12 * Z10) + Z02 * (Y20 * Z00 + Y21 * Z01) + Z12 * (Y20 * Z10 + Y21 * Z11);
  B.data[94]=Z22 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 + W20 * Y20 + W21 * Y21 + 3.0 * W22 * Y22) + W22 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 + Y20 * Z20 + Y21 * Z21) + Y22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21) + Y02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z02 * (W00 * Y20 + W01 * Y21 + W20 * Y00 + W21 * Y01) + Z12 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + W12 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + W02 * (Y00 * Z20 + Y01 * Z21 + Y20 * Z00 + Y21 * Z01) + Y12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[95]=W22 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 + W20 * Y20 + W21 * Y21 + 1.5 * W22 * Y22) + 0.5 * (Y22 * (-W00 * W00 - W01 * W01 + W02 * W02 - W10 * W10 - W11 * W11 + W12 * W12 + W20 * W20 + W21 * W21)) + W02 * (W00 * Y20 + W01 * Y21 + W20 * Y00 + W21 * Y01) + W12 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Y02 * (W00 * W20 + W01 * W21) + Y12 * (W10 * W20 + W11 * W21);
  B.data[96]=Z22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z21 * (Z01 * Z02 + Z11 * Z12) + Z20 * (Z00 * Z02 + Z10 * Z12);
  B.data[97]=Z22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21 + 1.5 * W22 * Z22) + W22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21) + Z12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z21 * (W02 * Z01 + W12 * Z11) + Z20 * (W02 * Z00 + W12 * Z10);
  B.data[98]=W22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21 + 1.5 * W22 * Z22) + Z22 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21) + W02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + W12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z12 * (W10 * W20 + W11 * W21) + Z02 * (W00 * W20 + W01 * W21);
  B.data[99]=W22 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W02 * (W00 * W20 + W01 * W21) + W12 * (W10 * W20 + W11 * W21);
}","/** 
 * Construct 10 by 10 coefficient matrix for the following coefficients 'x*z^2','x*z','x','y*z^2','y*z','y','z^3','z^2','z','1'
 * @param B a 10 by 10 matrix
 */
public void setupA2(DenseMatrix64F B){
  B.data[0]=Z22 * (X00 * Z11 - X01 * Z10 - X10 * Z01 + X11 * Z00) + Z21 * (-X00 * Z12 + X02 * Z10 + X10 * Z02 - X12 * Z00) + Z20 * (X01 * Z12 - X02 * Z11 - X11 * Z02 + X12 * Z01) + Z01 * (X20 * Z12 - X22 * Z10) + Z00 * (-X21 * Z12 + X22 * Z11) + Z02 * (-X20 * Z11 + X21 * Z10);
  B.data[1]=Z22 * (W00 * X11 - W01 * X10 - W10 * X01 + W11 * X00) + Z21 * (-W00 * X12 + W02 * X10 + W10 * X02 - W12 * X00) + Z20 * (W01 * X12 - W02 * X11 - W11 * X02 + W12 * X01) + Z01 * (-W10 * X22 + W12 * X20 + W20 * X12 - W22 * X10) + Z00 * (W11 * X22 - W12 * X21 - W21 * X12 + W22 * X11) + Z02 * (W10 * X21 - W11 * X20 - W20 * X11 + W21 * X10) + Z12 * (-W00 * X21 + W01 * X20 + W20 * X01 - W21 * X00) + Z11 * (W00 * X22 - W02 * X20 - W20 * X02 + W22 * X00) + Z10 * (-W01 * X22 + W02 * X21 + W21 * X02 - W22 * X01);
  B.data[2]=W00 * (W11 * X22 - W12 * X21 - W21 * X12 + W22 * X11) + W01 * (-W10 * X22 + W12 * X20 + W20 * X12 - W22 * X10) + W02 * (W10 * X21 - W11 * X20 - W20 * X11 + W21 * X10) + W12 * (W20 * X01 - W21 * X00) + W11 * (-W20 * X02 + W22 * X00) + W10 * (W21 * X02 - W22 * X01);
  B.data[3]=Z22 * (Y00 * Z11 - Y01 * Z10 - Y10 * Z01 + Y11 * Z00) + Z21 * (-Y00 * Z12 + Y02 * Z10 + Y10 * Z02 - Y12 * Z00) + Z20 * (Y01 * Z12 - Y02 * Z11 - Y11 * Z02 + Y12 * Z01) + Z01 * (Y20 * Z12 - Y22 * Z10) + Z00 * (-Y21 * Z12 + Y22 * Z11) + Z02 * (-Y20 * Z11 + Y21 * Z10);
  B.data[4]=Y02 * (W10 * Z21 - W11 * Z20 - W20 * Z11 + W21 * Z10) + Y00 * (W11 * Z22 - W12 * Z21 - W21 * Z12 + W22 * Z11) + Y01 * (-W10 * Z22 + W12 * Z20 + W20 * Z12 - W22 * Z10) + Z01 * (-W10 * Y22 + W12 * Y20 + W20 * Y12 - W22 * Y10) + Z00 * (W11 * Y22 - W12 * Y21 - W21 * Y12 + W22 * Y11) + Z02 * (W10 * Y21 - W11 * Y20 - W20 * Y11 + W21 * Y10) + W00 * (Y11 * Z22 - Y12 * Z21 - Y21 * Z12 + Y22 * Z11) + W01 * (-Y10 * Z22 + Y12 * Z20 + Y20 * Z12 - Y22 * Z10) + W02 * (Y10 * Z21 - Y11 * Z20 - Y20 * Z11 + Y21 * Z10);
  B.data[5]=W00 * (W11 * Y22 - W12 * Y21 - W21 * Y12 + W22 * Y11) + W01 * (-W10 * Y22 + W12 * Y20 + W20 * Y12 - W22 * Y10) + W02 * (W10 * Y21 - W11 * Y20 - W20 * Y11 + W21 * Y10) + Y02 * (W10 * W21 - W11 * W20) + Y00 * (W11 * W22 - W12 * W21) + Y01 * (-W10 * W22 + W12 * W20);
  B.data[6]=Z22 * (Z00 * Z11 - Z01 * Z10) + Z21 * (-Z00 * Z12 + Z02 * Z10) + Z20 * (Z01 * Z12 - Z02 * Z11);
  B.data[7]=Z22 * (W00 * Z11 - W01 * Z10 - W10 * Z01 + W11 * Z00) + Z21 * (-W00 * Z12 + W02 * Z10 + W10 * Z02 - W12 * Z00) + Z20 * (W01 * Z12 - W02 * Z11 - W11 * Z02 + W12 * Z01) + Z01 * (W20 * Z12 - W22 * Z10) + Z00 * (-W21 * Z12 + W22 * Z11) + Z02 * (-W20 * Z11 + W21 * Z10);
  B.data[8]=W02 * (W10 * Z21 - W11 * Z20 - W20 * Z11 + W21 * Z10) + W00 * (W11 * Z22 - W12 * Z21 - W21 * Z12 + W22 * Z11) + W01 * (-W10 * Z22 + W12 * Z20 + W20 * Z12 - W22 * Z10) + Z01 * (-W10 * W22 + W12 * W20) + Z00 * (W11 * W22 - W12 * W21) + Z02 * (W10 * W21 - W11 * W20);
  B.data[9]=W00 * (W11 * W22 - W12 * W21) + W01 * (-W10 * W22 + W12 * W20) + W02 * (W10 * W21 - W11 * W20);
  B.data[10]=Z00 * (1.5 * X00 * Z00 + X01 * Z01 + X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + 0.5 * (X00 * (Z01 * Z01 + Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (X01 * Z21 + X02 * Z22 + X21 * Z01 + X22 * Z02) + Z10 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + Z01 * (X10 * Z11 + X20 * Z21) + Z02 * (X10 * Z12 + X20 * Z22);
  B.data[11]=Z00 * (3.0 * W00 * X00 + W01 * X01 + W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + X00 * (W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W00 * (X01 * Z01 + X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + Z20 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + Z01 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + Z02 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + Z10 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + Z22 * (W02 * X20 + W20 * X02) + Z21 * (W01 * X20 + W20 * X01) + Z12 * (W02 * X10 + W10 * X02) + Z11 * (W01 * X10 + W10 * X01);
  B.data[12]=W00 * (1.5 * W00 * X00 + W01 * X01 + W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + 0.5 * (X00 * (W01 * W01 + W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W01 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + W02 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + W10 * (W11 * X01 + W12 * X02) + W20 * (W21 * X01 + W22 * X02);
  B.data[13]=Z00 * (1.5 * Y00 * Z00 + Y01 * Z01 + Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y00 * (0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Y01 * Z21 + Y02 * Z22 + Y21 * Z01 + Y22 * Z02) + Z10 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + Z01 * (Y10 * Z11 + Y20 * Z21) + Z02 * (Y10 * Z12 + Y20 * Z22);
  B.data[14]=Y00 * (3.0 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + Z00 * (W01 * Y01 + W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + W00 * (Y01 * Z01 + Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y02 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + Y01 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z01 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + Z02 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (Y10 * Z11 + Y11 * Z10 + Y20 * Z21 + Y21 * Z20) + W02 * (Y10 * Z12 + Y12 * Z10 + Y20 * Z22 + Y22 * Z20);
  B.data[15]=W00 * (1.5 * W00 * Y00 + W01 * Y01 + W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + Y00 * (0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W01 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + W02 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + Y02 * (W10 * W12 + W20 * W22) + Y01 * (W10 * W11 + W20 * W21);
  B.data[16]=Z00 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Z01 * Z21 + Z02 * Z22) + Z10 * (Z01 * Z11 + Z02 * Z12);
  B.data[17]=Z00 * (1.5 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (W00 * (Z01 * Z01 + Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + Z10 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + Z01 * (W10 * Z11 + W20 * Z21) + Z02 * (W10 * Z12 + W20 * Z22);
  B.data[18]=W00 * (1.5 * W00 * Z00 + W01 * Z01 + W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + Z00 * (0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W02 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + W01 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z01 * (W10 * W11 + W20 * W21) + Z02 * (W10 * W12 + W20 * W22);
  B.data[19]=W00 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W01 * (W10 * W11 + W20 * W21) + W02 * (W10 * W12 + W20 * W22);
  B.data[20]=Z01 * (X00 * Z00 + 1.5 * X01 * Z01 + X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + 0.5 * (X01 * (Z00 * Z00 + Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (X00 * Z20 + X02 * Z22 + X20 * Z00 + X22 * Z02) + Z11 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + Z00 * (X11 * Z10 + X21 * Z20) + Z02 * (X11 * Z12 + X21 * Z22);
  B.data[21]=Z01 * (W00 * X00 + 3.0 * W01 * X01 + W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + X01 * (W00 * Z00 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W01 * (X00 * Z00 + X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + Z21 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + Z00 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + Z02 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + Z11 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + Z22 * (W02 * X21 + W21 * X02) + Z20 * (W00 * X21 + W21 * X00) + Z10 * (W00 * X11 + W11 * X00) + Z12 * (W02 * X11 + W11 * X02);
  B.data[22]=W01 * (W00 * X00 + 1.5 * W01 * X01 + W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + 0.5 * (X01 * (W00 * W00 + W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W00 * (W10 * X11 + W11 * X10 + W20 * X21 + W21 * X20) + W02 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + W11 * (W10 * X00 + W12 * X02) + W21 * (W20 * X00 + W22 * X02);
  B.data[23]=Z01 * (Y00 * Z00 + 1.5 * Y01 * Z01 + Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y01 * (0.5 * Z00 * Z00 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Y00 * Z20 + Y02 * Z22 + Y20 * Z00 + Y22 * Z02) + Z11 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Z00 * (Y11 * Z10 + Y21 * Z20) + Z02 * (Y11 * Z12 + Y21 * Z22);
  B.data[24]=Y01 * (W00 * Z00 + 3.0 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + Z01 * (W00 * Y00 + W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + W01 * (Y00 * Z00 + Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y02 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Y00 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + Z00 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + Z02 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + W00 * (Y10 * Z11 + Y11 * Z10 + Y20 * Z21 + Y21 * Z20) + W02 * (Y11 * Z12 + Y12 * Z11 + Y21 * Z22 + Y22 * Z21);
  B.data[25]=W01 * (W00 * Y00 + 1.5 * W01 * Y01 + W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + Y01 * (0.5 * W00 * W00 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * Y11 + W11 * Y10 + W20 * Y21 + W21 * Y20) + W02 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + Y02 * (W11 * W12 + W21 * W22) + Y00 * (W10 * W11 + W20 * W21);
  B.data[26]=Z01 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Z00 * Z20 + Z02 * Z22) + Z11 * (Z00 * Z10 + Z02 * Z12);
  B.data[27]=Z01 * (W00 * Z00 + 1.5 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (W01 * (Z00 * Z00 + Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + Z11 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z00 * (W11 * Z10 + W21 * Z20) + Z02 * (W11 * Z12 + W21 * Z22);
  B.data[28]=W01 * (W00 * Z00 + 1.5 * W01 * Z01 + W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + Z01 * (0.5 * W00 * W00 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * Z11 + W11 * Z10 + W20 * Z21 + W21 * Z20) + W02 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z00 * (W10 * W11 + W20 * W21) + Z02 * (W11 * W12 + W21 * W22);
  B.data[29]=W01 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W10 * W11 + W20 * W21) + W02 * (W11 * W12 + W21 * W22);
  B.data[30]=Z02 * (X00 * Z00 + X01 * Z01 + 1.5 * X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + 0.5 * (X02 * (Z00 * Z00 + Z01 * Z01 - Z10 * Z10 - Z11 * Z11 + Z12 * Z12 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (X00 * Z20 + X01 * Z21 + X20 * Z00 + X21 * Z01) + Z12 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + Z01 * (X12 * Z11 + X22 * Z21) + Z00 * (X12 * Z10 + X22 * Z20);
  B.data[31]=Z02 * (W00 * X00 + W01 * X01 + 3.0 * W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + X02 * (W00 * Z00 + W01 * Z01 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W02 * (X00 * Z00 + X01 * Z01 - X10 * Z10 - X11 * Z11 + X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + Z22 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + Z01 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + Z12 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + Z00 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + Z21 * (W01 * X22 + W22 * X01) + Z20 * (W00 * X22 + W22 * X00) + W12 * (X00 * Z10 + X01 * Z11) + X12 * (W00 * Z10 + W01 * Z11);
  B.data[32]=W02 * (W00 * X00 + W01 * X01 + 1.5 * W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + 0.5 * (X02 * (W00 * W00 + W01 * W01 - W10 * W10 - W11 * W11 + W12 * W12 - W20 * W20 - W21 * W21 + W22 * W22)) + W00 * (W10 * X12 + W12 * X10 + W20 * X22 + W22 * X20) + W01 * (W11 * X12 + W12 * X11 + W21 * X22 + W22 * X21) + W12 * (W10 * X00 + W11 * X01) + W22 * (W20 * X00 + W21 * X01);
  B.data[33]=Z02 * (Y00 * Z00 + Y01 * Z01 + 1.5 * Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Y00 * Z20 + Y01 * Z21 + Y20 * Z00 + Y21 * Z01) + Z12 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Z01 * (Y12 * Z11 + Y22 * Z21) + Z00 * (Y12 * Z10 + Y22 * Z20);
  B.data[34]=Y02 * (W00 * Z00 + W01 * Z01 + 3.0 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z02 * (W00 * Y00 + W01 * Y01 - W10 * Y10 - W11 * Y11 + W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + W02 * (Y00 * Z00 + Y01 * Z01 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y00 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + Y01 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z01 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + W00 * (Y10 * Z12 + Y12 * Z10 + Y20 * Z22 + Y22 * Z20) + Z00 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (Y11 * Z12 + Y12 * Z11 + Y21 * Z22 + Y22 * Z21);
  B.data[35]=W02 * (W00 * Y00 + W01 * Y01 + 1.5 * W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + Y02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * Y12 + W12 * Y10 + W20 * Y22 + W22 * Y20) + W01 * (W11 * Y12 + W12 * Y11 + W21 * Y22 + W22 * Y21) + Y00 * (W10 * W12 + W20 * W22) + Y01 * (W11 * W12 + W21 * W22);
  B.data[36]=Z02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z00 * Z20 + Z01 * Z21) + Z12 * (Z00 * Z10 + Z01 * Z11);
  B.data[37]=Z02 * (W00 * Z00 + W01 * Z01 + 1.5 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W02 * (0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z12 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z01 * (W12 * Z11 + W22 * Z21) + Z00 * (W12 * Z10 + W22 * Z20);
  B.data[38]=W02 * (W00 * Z00 + W01 * Z01 + 1.5 * W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * Z12 + W12 * Z10 + W20 * Z22 + W22 * Z20) + W01 * (W11 * Z12 + W12 * Z11 + W21 * Z22 + W22 * Z21) + Z01 * (W11 * W12 + W21 * W22) + Z00 * (W10 * W12 + W20 * W22);
  B.data[39]=W02 * (0.5 * W00 * W00 + 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W10 * W12 + W20 * W22) + W01 * (W11 * W12 + W21 * W22);
  B.data[40]=Z10 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + 1.5 * X10 * Z10 + X11 * Z11 + X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + 0.5 * (X10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (X11 * Z21 + X12 * Z22 + X21 * Z11 + X22 * Z12) + Z00 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + Z12 * (X00 * Z02 + X20 * Z22) + Z11 * (X00 * Z01 + X20 * Z21);
  B.data[41]=Z10 * (W00 * X00 - W01 * X01 - W02 * X02 + 3.0 * W10 * X10 + W11 * X11 + W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + X10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W10 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X11 * Z11 + X12 * Z12 + X20 * Z20 - X21 * Z21 - X22 * Z22) + Z20 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + Z00 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + W20 * (X11 * Z21 + X12 * Z22 + X21 * Z11 + X22 * Z12) + W00 * (X01 * Z11 + X02 * Z12 + X11 * Z01 + X12 * Z02) + X00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + X20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[42]=W10 * (W00 * X00 - W01 * X01 - W02 * X02 + 1.5 * W10 * X10 + W11 * X11 + W12 * X12 + W20 * X20 - W21 * X21 - W22 * X22) + 0.5 * (X10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * X11 + W02 * X12 + W11 * X01 + W12 * X02) + W20 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + W12 * (W02 * X00 + W22 * X20) + W11 * (W01 * X00 + W21 * X20);
  B.data[43]=Z10 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + 1.5 * Y10 * Z10 + Y11 * Z11 + Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + 0.5 * (Y10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Z00 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + Y00 * (Z01 * Z11 + Z02 * Z12) + Y20 * (Z11 * Z21 + Z12 * Z22);
  B.data[44]=Z10 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + 3.0 * W10 * Y10 + W11 * Y11 + W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + Y10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + W10 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y11 * Z11 + Y12 * Z12 + Y20 * Z20 - Y21 * Z21 - Y22 * Z22) + Y00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + Z20 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Z00 * (W01 * Y11 + W02 * Y12 + W11 * Y01 + W12 * Y02) + W00 * (Y01 * Z11 + Y02 * Z12 + Y11 * Z01 + Y12 * Z02) + W20 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Y20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[45]=W10 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + 1.5 * W10 * Y10 + W11 * Y11 + W12 * Y12 + W20 * Y20 - W21 * Y21 - W22 * Y22) + 0.5 * (Y10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * Y11 + W02 * Y12 + W11 * Y01 + W12 * Y02) + W20 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y00 * (W01 * W11 + W02 * W12) + Y20 * (W11 * W21 + W12 * W22);
  B.data[46]=Z10 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z20 * (Z11 * Z21 + Z12 * Z22) + Z00 * (Z01 * Z11 + Z02 * Z12);
  B.data[47]=Z10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + 1.5 * W10 * Z10 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (W10 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z11 * Z11 + Z12 * Z12 + Z20 * Z20 - Z21 * Z21 - Z22 * Z22)) + Z20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + W00 * (Z01 * Z11 + Z02 * Z12) + W20 * (Z11 * Z21 + Z12 * Z22);
  B.data[48]=W10 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + 1.5 * W10 * Z10 + W11 * Z11 + W12 * Z12 + W20 * Z20 - W21 * Z21 - W22 * Z22) + 0.5 * (Z10 * (W00 * W00 - W01 * W01 - W02 * W02 + W11 * W11 + W12 * W12 + W20 * W20 - W21 * W21 - W22 * W22)) + W00 * (W01 * Z11 + W02 * Z12 + W11 * Z01 + W12 * Z02) + W20 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z20 * (W11 * W21 + W12 * W22) + Z00 * (W01 * W11 + W02 * W12);
  B.data[49]=W10 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 - 0.5 * W21 * W21 - 0.5 * W22 * W22) + W00 * (W01 * W11 + W02 * W12) + W20 * (W11 * W21 + W12 * W22);
  B.data[50]=Z11 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 + X10 * Z10 + 1.5 * X11 * Z11 + X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + 0.5 * (X11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (X10 * Z20 + X12 * Z22 + X20 * Z10 + X22 * Z12) + Z01 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + Z12 * (X01 * Z02 + X21 * Z22) + Z10 * (X01 * Z00 + X21 * Z20);
  B.data[51]=Z11 * (-W00 * X00 + W01 * X01 - W02 * X02 + W10 * X10 + 3.0 * W11 * X11 + W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + X11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W11 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 + X10 * Z10 + X12 * Z12 - X20 * Z20 + X21 * Z21 - X22 * Z22) + Z21 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + Z01 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + W21 * (X10 * Z20 + X12 * Z22 + X20 * Z10 + X22 * Z12) + W01 * (X00 * Z10 + X02 * Z12 + X10 * Z00 + X12 * Z02) + X01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + X21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[52]=W11 * (-W00 * X00 + W01 * X01 - W02 * X02 + W10 * X10 + 1.5 * W11 * X11 + W12 * X12 - W20 * X20 + W21 * X21 - W22 * X22) + 0.5 * (X11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W01 * (W00 * X10 + W02 * X12 + W10 * X00 + W12 * X02) + W21 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + W12 * (W02 * X01 + W22 * X21) + W10 * (W00 * X01 + W20 * X21);
  B.data[53]=Z11 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 + Y10 * Z10 + 1.5 * Y11 * Z11 + Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + 0.5 * (Y11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z21 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + Z01 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Y01 * (Z00 * Z10 + Z02 * Z12) + Y21 * (Z10 * Z20 + Z12 * Z22);
  B.data[54]=Z11 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 + W10 * Y10 + 3.0 * W11 * Y11 + W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + Y11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + W11 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 + Y10 * Z10 + Y12 * Z12 - Y20 * Z20 + Y21 * Z21 - Y22 * Z22) + Y01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z21 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Z01 * (W00 * Y10 + W02 * Y12 + W10 * Y00 + W12 * Y02) + W21 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + W01 * (Y00 * Z10 + Y02 * Z12 + Y10 * Z00 + Y12 * Z02) + Y21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[55]=W11 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 + W10 * Y10 + 1.5 * W11 * Y11 + W12 * Y12 - W20 * Y20 + W21 * Y21 - W22 * Y22) + 0.5 * (Y11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W01 * (W00 * Y10 + W02 * Y12 + W10 * Y00 + W12 * Y02) + W21 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y01 * (W00 * W10 + W02 * W12) + Y21 * (W10 * W20 + W12 * W22);
  B.data[56]=Z11 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 - 0.5 * Z22 * Z22) + Z21 * (Z10 * Z20 + Z12 * Z22) + Z01 * (Z00 * Z10 + Z02 * Z12);
  B.data[57]=Z11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + 1.5 * W11 * Z11 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (W11 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 + Z10 * Z10 + Z12 * Z12 - Z20 * Z20 + Z21 * Z21 - Z22 * Z22)) + Z12 * (W01 * Z02 + W02 * Z01 + W21 * Z22 + W22 * Z21) + Z10 * (W00 * Z01 + W01 * Z00 + W20 * Z21 + W21 * Z20) + Z21 * (W10 * Z20 + W12 * Z22) + Z01 * (W10 * Z00 + W12 * Z02);
  B.data[58]=W11 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 + W10 * Z10 + 1.5 * W11 * Z11 + W12 * Z12 - W20 * Z20 + W21 * Z21 - W22 * Z22) + 0.5 * (Z11 * (-W00 * W00 + W01 * W01 - W02 * W02 + W10 * W10 + W12 * W12 - W20 * W20 + W21 * W21 - W22 * W22)) + W21 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12) + W01 * (W00 * Z10 + W02 * Z12 + W10 * Z00 + W12 * Z02) + Z21 * (W10 * W20 + W12 * W22) + Z01 * (W00 * W10 + W02 * W12);
  B.data[59]=W11 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 + 0.5 * W21 * W21 - 0.5 * W22 * W22) + W12 * (W01 * W02 + W21 * W22) + W10 * (W00 * W01 + W20 * W21);
  B.data[60]=Z12 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 + X10 * Z10 + X11 * Z11 + 1.5 * X12 * Z12 - X20 * Z20 - X21 * Z21 + X22 * Z22) + 0.5 * (X12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (X10 * Z20 + X11 * Z21 + X20 * Z10 + X21 * Z11) + Z02 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + Z10 * (X02 * Z00 + X22 * Z20) + Z11 * (X02 * Z01 + X22 * Z21);
  B.data[61]=Z12 * (-W00 * X00 - W01 * X01 + W02 * X02 + W10 * X10 + W11 * X11 + 3.0 * W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + X12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W12 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 + X10 * Z10 + X11 * Z11 - X20 * Z20 - X21 * Z21 + X22 * Z22) + Z22 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + Z02 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + W22 * (X10 * Z20 + X11 * Z21 + X20 * Z10 + X21 * Z11) + W02 * (X00 * Z10 + X01 * Z11 + X10 * Z00 + X11 * Z01) + X02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + X22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[62]=W12 * (-W00 * X00 - W01 * X01 + W02 * X02 + W10 * X10 + W11 * X11 + 1.5 * W12 * X12 - W20 * X20 - W21 * X21 + W22 * X22) + 0.5 * (X12 * (-W00 * W00 - W01 * W01 + W02 * W02 + W10 * W10 + W11 * W11 - W20 * W20 - W21 * W21 + W22 * W22)) + W02 * (W00 * X10 + W01 * X11 + W10 * X00 + W11 * X01) + W22 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + W11 * (W01 * X02 + W21 * X22) + W10 * (W00 * X02 + W20 * X22);
  B.data[63]=Z12 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 + Y10 * Z10 + Y11 * Z11 + 1.5 * Y12 * Z12 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + 0.5 * (Y12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + Z02 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Y02 * (Z00 * Z10 + Z01 * Z11) + Y22 * (Z10 * Z20 + Z11 * Z21);
  B.data[64]=Z12 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 + W10 * Y10 + W11 * Y11 + 3.0 * W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + Y12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 - W20 * Z20 - W21 * Z21 + W22 * Z22) + W12 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 + Y10 * Z10 + Y11 * Z11 - Y20 * Z20 - Y21 * Z21 + Y22 * Z22) + Y02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z22 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Z02 * (W00 * Y10 + W01 * Y11 + W10 * Y00 + W11 * Y01) + W22 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + W02 * (Y00 * Z10 + Y01 * Z11 + Y10 * Z00 + Y11 * Z01) + Y22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[65]=W12 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 + W10 * Y10 + W11 * Y11 + 1.5 * W12 * Y12 - W20 * Y20 - W21 * Y21 + W22 * Y22) + 0.5 * (Y12 * (-W00 * W00 - W01 * W01 + W02 * W02 + W10 * W10 + W11 * W11 - W20 * W20 - W21 * W21 + W22 * W22)) + W02 * (W00 * Y10 + W01 * Y11 + W10 * Y00 + W11 * Y01) + W22 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Y02 * (W00 * W10 + W01 * W11) + Y22 * (W10 * W20 + W11 * W21);
  B.data[66]=Z12 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 - 0.5 * Z20 * Z20 - 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z10 * Z20 + Z11 * Z21) + Z02 * (Z00 * Z10 + Z01 * Z11);
  B.data[67]=Z12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 + 1.5 * W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + 0.5 * (W12 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 + Z10 * Z10 + Z11 * Z11 - Z20 * Z20 - Z21 * Z21 + Z22 * Z22)) + Z22 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z02 * (W00 * Z10 + W01 * Z11 + W10 * Z00 + W11 * Z01) + Z10 * (W02 * Z00 + W22 * Z20) + Z11 * (W02 * Z01 + W22 * Z21);
  B.data[68]=W12 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 + W10 * Z10 + W11 * Z11 + 1.5 * W12 * Z12 - W20 * Z20 - W21 * Z21 + W22 * Z22) + Z12 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W10 * (W00 * Z02 + W02 * Z00 + W20 * Z22 + W22 * Z20) + W11 * (W01 * Z02 + W02 * Z01 + W21 * Z22 + W22 * Z21) + Z10 * (W00 * W02 + W20 * W22) + Z11 * (W01 * W02 + W21 * W22);
  B.data[69]=W12 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 + 0.5 * W10 * W10 + 0.5 * W11 * W11 + 0.5 * W12 * W12 - 0.5 * W20 * W20 - 0.5 * W21 * W21 + 0.5 * W22 * W22) + W11 * (W01 * W02 + W21 * W22) + W10 * (W00 * W02 + W20 * W22);
  B.data[70]=Z20 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + 1.5 * X20 * Z20 + X21 * Z21 + X22 * Z22) + 0.5 * (X20 * (Z00 * Z00 - Z01 * Z01 - Z02 * Z02 + Z10 * Z10 - Z11 * Z11 - Z12 * Z12 + Z21 * Z21 + Z22 * Z22)) + Z22 * (X00 * Z02 + X02 * Z00 + X10 * Z12 + X12 * Z10) + Z21 * (X00 * Z01 + X01 * Z00 + X10 * Z11 + X11 * Z10) + Z00 * (X21 * Z01 + X22 * Z02) + Z10 * (X21 * Z11 + X22 * Z12);
  B.data[71]=Z20 * (W00 * X00 - W01 * X01 - W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + 3.0 * W20 * X20 + W21 * X21 + W22 * X22) + W20 * (X00 * Z00 - X01 * Z01 - X02 * Z02 + X10 * Z10 - X11 * Z11 - X12 * Z12 + X21 * Z21 + X22 * Z22) + X20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W21 * Z21 + W22 * Z22) + Z22 * (W00 * X02 + W02 * X00 + W10 * X12 + W12 * X10) + Z21 * (W00 * X01 + W01 * X00 + W10 * X11 + W11 * X10) + Z00 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + Z10 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + X00 * (W21 * Z01 + W22 * Z02) + Z12 * (W10 * X22 + W22 * X10) + W00 * (X21 * Z01 + X22 * Z02) + Z11 * (W10 * X21 + W21 * X10);
  B.data[72]=W20 * (W00 * X00 - W01 * X01 - W02 * X02 + W10 * X10 - W11 * X11 - W12 * X12 + 1.5 * W20 * X20 + W21 * X21 + W22 * X22) + 0.5 * (X20 * (W00 * W00 - W01 * W01 - W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W21 * W21 + W22 * W22)) + W00 * (W01 * X21 + W02 * X22 + W21 * X01 + W22 * X02) + W10 * (W11 * X21 + W12 * X22 + W21 * X11 + W22 * X12) + W22 * (W02 * X00 + W12 * X10) + W21 * (W01 * X00 + W11 * X10);
  B.data[73]=Z20 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + 1.5 * Y20 * Z20 + Y21 * Z21 + Y22 * Z22) + Y20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Y00 * Z02 + Y02 * Z00 + Y10 * Z12 + Y12 * Z10) + Z21 * (Y00 * Z01 + Y01 * Z00 + Y10 * Z11 + Y11 * Z10) + Z00 * (Y21 * Z01 + Y22 * Z02) + Z10 * (Y21 * Z11 + Y22 * Z12);
  B.data[74]=Z20 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + 3.0 * W20 * Y20 + W21 * Y21 + W22 * Y22) + W20 * (Y00 * Z00 - Y01 * Z01 - Y02 * Z02 + Y10 * Z10 - Y11 * Z11 - Y12 * Z12 + Y21 * Z21 + Y22 * Z22) + Y20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + W21 * Z21 + W22 * Z22) + Y00 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + Z00 * (W01 * Y21 + W02 * Y22 + W21 * Y01 + W22 * Y02) + W00 * (Y01 * Z21 + Y02 * Z22 + Y21 * Z01 + Y22 * Z02) + W10 * (Y11 * Z21 + Y12 * Z22 + Y21 * Z11 + Y22 * Z12) + Z10 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y10 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12);
  B.data[75]=W20 * (W00 * Y00 - W01 * Y01 - W02 * Y02 + W10 * Y10 - W11 * Y11 - W12 * Y12 + 1.5 * W20 * Y20 + W21 * Y21 + W22 * Y22) + 0.5 * (Y20 * (W00 * W00 - W01 * W01 - W02 * W02 + W10 * W10 - W11 * W11 - W12 * W12 + W21 * W21 + W22 * W22)) + W00 * (W01 * Y21 + W02 * Y22 + W21 * Y01 + W22 * Y02) + W10 * (W11 * Y21 + W12 * Y22 + W21 * Y11 + W22 * Y12) + Y00 * (W01 * W21 + W02 * W22) + Y10 * (W11 * W21 + W12 * W22);
  B.data[76]=Z20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z00 * Z02 + Z10 * Z12) + Z21 * (Z00 * Z01 + Z10 * Z11);
  B.data[77]=Z20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + 1.5 * W20 * Z20 + W21 * Z21 + W22 * Z22) + W20 * (0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 + 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (W00 * Z02 + W02 * Z00 + W10 * Z12 + W12 * Z10) + Z21 * (W00 * Z01 + W01 * Z00 + W10 * Z11 + W11 * Z10) + Z00 * (W21 * Z01 + W22 * Z02) + Z10 * (W21 * Z11 + W22 * Z12);
  B.data[78]=W20 * (W00 * Z00 - W01 * Z01 - W02 * Z02 + W10 * Z10 - W11 * Z11 - W12 * Z12 + 1.5 * W20 * Z20 + W21 * Z21 + W22 * Z22) + Z20 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W01 * Z21 + W02 * Z22 + W21 * Z01 + W22 * Z02) + W10 * (W11 * Z21 + W12 * Z22 + W21 * Z11 + W22 * Z12) + Z10 * (W11 * W21 + W12 * W22) + Z00 * (W01 * W21 + W02 * W22);
  B.data[79]=W20 * (0.5 * W00 * W00 - 0.5 * W01 * W01 - 0.5 * W02 * W02 + 0.5 * W10 * W10 - 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W00 * (W01 * W21 + W02 * W22) + W10 * (W11 * W21 + W12 * W22);
  B.data[80]=Z21 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 + X20 * Z20 + 1.5 * X21 * Z21 + X22 * Z22) + 0.5 * (X21 * (-Z00 * Z00 + Z01 * Z01 - Z02 * Z02 - Z10 * Z10 + Z11 * Z11 - Z12 * Z12 + Z20 * Z20 + Z22 * Z22)) + Z22 * (X01 * Z02 + X02 * Z01 + X11 * Z12 + X12 * Z11) + Z20 * (X00 * Z01 + X01 * Z00 + X10 * Z11 + X11 * Z10) + Z01 * (X20 * Z00 + X22 * Z02) + Z11 * (X20 * Z10 + X22 * Z12);
  B.data[81]=Z21 * (-W00 * X00 + W01 * X01 - W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 + W20 * X20 + 3.0 * W21 * X21 + W22 * X22) + W21 * (-X00 * Z00 + X01 * Z01 - X02 * Z02 - X10 * Z10 + X11 * Z11 - X12 * Z12 + X20 * Z20 + X22 * Z22) + X21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + W22 * Z22) + Z22 * (W01 * X02 + W02 * X01 + W11 * X12 + W12 * X11) + Z20 * (W00 * X01 + W01 * X00 + W10 * X11 + W11 * X10) + Z01 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + Z11 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + Z00 * (W01 * X20 + W20 * X01) + Z02 * (W01 * X22 + W22 * X01) + Z12 * (W11 * X22 + W22 * X11) + Z10 * (W11 * X20 + W20 * X11);
  B.data[82]=W21 * (-W00 * X00 + W01 * X01 - W02 * X02 - W10 * X10 + W11 * X11 - W12 * X12 + W20 * X20 + 1.5 * W21 * X21 + W22 * X22) + 0.5 * (X21 * (-W00 * W00 + W01 * W01 - W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 + W20 * W20 + W22 * W22)) + W01 * (W00 * X20 + W02 * X22 + W20 * X00 + W22 * X02) + W11 * (W10 * X20 + W12 * X22 + W20 * X10 + W22 * X12) + W22 * (W02 * X01 + W12 * X11) + W20 * (W00 * X01 + W10 * X11);
  B.data[83]=Z21 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 + Y20 * Z20 + 1.5 * Y21 * Z21 + Y22 * Z22) + Y21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z22 * Z22) + Z22 * (Y01 * Z02 + Y02 * Z01 + Y11 * Z12 + Y12 * Z11) + Z20 * (Y00 * Z01 + Y01 * Z00 + Y10 * Z11 + Y11 * Z10) + Z01 * (Y20 * Z00 + Y22 * Z02) + Z11 * (Y20 * Z10 + Y22 * Z12);
  B.data[84]=Z21 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 + W20 * Y20 + 3.0 * W21 * Y21 + W22 * Y22) + W21 * (-Y00 * Z00 + Y01 * Z01 - Y02 * Z02 - Y10 * Z10 + Y11 * Z11 - Y12 * Z12 + Y20 * Z20 + Y22 * Z22) + Y21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + W22 * Z22) + Y01 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + Z01 * (W00 * Y20 + W02 * Y22 + W20 * Y00 + W22 * Y02) + W01 * (Y00 * Z20 + Y02 * Z22 + Y20 * Z00 + Y22 * Z02) + W11 * (Y10 * Z20 + Y12 * Z22 + Y20 * Z10 + Y22 * Z12) + Z11 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y11 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12);
  B.data[85]=W21 * (-W00 * Y00 + W01 * Y01 - W02 * Y02 - W10 * Y10 + W11 * Y11 - W12 * Y12 + W20 * Y20 + 1.5 * W21 * Y21 + W22 * Y22) + 0.5 * (Y21 * (-W00 * W00 + W01 * W01 - W02 * W02 - W10 * W10 + W11 * W11 - W12 * W12 + W20 * W20 + W22 * W22)) + W01 * (W00 * Y20 + W02 * Y22 + W20 * Y00 + W22 * Y02) + W11 * (W10 * Y20 + W12 * Y22 + W20 * Y10 + W22 * Y12) + Y01 * (W00 * W20 + W02 * W22) + Y11 * (W10 * W20 + W12 * W22);
  B.data[86]=Z21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z22 * (Z01 * Z02 + Z11 * Z12) + Z20 * (Z00 * Z01 + Z10 * Z11);
  B.data[87]=Z21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + 1.5 * W21 * Z21 + W22 * Z22) + W21 * (-0.5 * Z00 * Z00 + 0.5 * Z01 * Z01 - 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 + 0.5 * Z11 * Z11 - 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z22 * Z22) + Z22 * (W01 * Z02 + W02 * Z01 + W11 * Z12 + W12 * Z11) + Z20 * (W00 * Z01 + W01 * Z00 + W10 * Z11 + W11 * Z10) + Z01 * (W20 * Z00 + W22 * Z02) + Z11 * (W20 * Z10 + W22 * Z12);
  B.data[88]=W21 * (-W00 * Z00 + W01 * Z01 - W02 * Z02 - W10 * Z10 + W11 * Z11 - W12 * Z12 + W20 * Z20 + 1.5 * W21 * Z21 + W22 * Z22) + Z21 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W22 * W22) + W01 * (W00 * Z20 + W02 * Z22 + W20 * Z00 + W22 * Z02) + W11 * (W10 * Z20 + W12 * Z22 + W20 * Z10 + W22 * Z12) + Z01 * (W00 * W20 + W02 * W22) + Z11 * (W10 * W20 + W12 * W22);
  B.data[89]=W21 * (-0.5 * W00 * W00 + 0.5 * W01 * W01 - 0.5 * W02 * W02 - 0.5 * W10 * W10 + 0.5 * W11 * W11 - 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W01 * (W00 * W20 + W02 * W22) + W11 * (W10 * W20 + W12 * W22);
  B.data[90]=Z22 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 + X20 * Z20 + X21 * Z21 + 1.5 * X22 * Z22) + 0.5 * (X22 * (-Z00 * Z00 - Z01 * Z01 + Z02 * Z02 - Z10 * Z10 - Z11 * Z11 + Z12 * Z12 + Z20 * Z20 + Z21 * Z21)) + Z21 * (X01 * Z02 + X02 * Z01 + X11 * Z12 + X12 * Z11) + Z20 * (X00 * Z02 + X02 * Z00 + X10 * Z12 + X12 * Z10) + Z02 * (X20 * Z00 + X21 * Z01) + Z12 * (X20 * Z10 + X21 * Z11);
  B.data[91]=Z22 * (-W00 * X00 - W01 * X01 + W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 + W20 * X20 + W21 * X21 + 3.0 * W22 * X22) + W22 * (-X00 * Z00 - X01 * Z01 + X02 * Z02 - X10 * Z10 - X11 * Z11 + X12 * Z12 + X20 * Z20 + X21 * Z21) + X22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21) + Z21 * (W01 * X02 + W02 * X01 + W11 * X12 + W12 * X11) + Z20 * (W00 * X02 + W02 * X00 + W10 * X12 + W12 * X10) + Z02 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + Z12 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + Z01 * (W02 * X21 + W21 * X02) + Z00 * (W02 * X20 + W20 * X02) + W12 * (X20 * Z10 + X21 * Z11) + X12 * (W20 * Z10 + W21 * Z11);
  B.data[92]=W22 * (-W00 * X00 - W01 * X01 + W02 * X02 - W10 * X10 - W11 * X11 + W12 * X12 + W20 * X20 + W21 * X21 + 1.5 * W22 * X22) + 0.5 * (X22 * (-W00 * W00 - W01 * W01 + W02 * W02 - W10 * W10 - W11 * W11 + W12 * W12 + W20 * W20 + W21 * W21)) + W02 * (W00 * X20 + W01 * X21 + W20 * X00 + W21 * X01) + W12 * (W10 * X20 + W11 * X21 + W20 * X10 + W21 * X11) + W20 * (W00 * X02 + W10 * X12) + W21 * (W01 * X02 + W11 * X12);
  B.data[93]=Z22 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 + Y20 * Z20 + Y21 * Z21 + 1.5 * Y22 * Z22) + Y22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21) + Z21 * (Y01 * Z02 + Y02 * Z01 + Y11 * Z12 + Y12 * Z11) + Z20 * (Y00 * Z02 + Y02 * Z00 + Y10 * Z12 + Y12 * Z10) + Z02 * (Y20 * Z00 + Y21 * Z01) + Z12 * (Y20 * Z10 + Y21 * Z11);
  B.data[94]=Z22 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 + W20 * Y20 + W21 * Y21 + 3.0 * W22 * Y22) + W22 * (-Y00 * Z00 - Y01 * Z01 + Y02 * Z02 - Y10 * Z10 - Y11 * Z11 + Y12 * Z12 + Y20 * Z20 + Y21 * Z21) + Y22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21) + Y02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z02 * (W00 * Y20 + W01 * Y21 + W20 * Y00 + W21 * Y01) + Z12 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + W12 * (Y10 * Z20 + Y11 * Z21 + Y20 * Z10 + Y21 * Z11) + W02 * (Y00 * Z20 + Y01 * Z21 + Y20 * Z00 + Y21 * Z01) + Y12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11);
  B.data[95]=W22 * (-W00 * Y00 - W01 * Y01 + W02 * Y02 - W10 * Y10 - W11 * Y11 + W12 * Y12 + W20 * Y20 + W21 * Y21 + 1.5 * W22 * Y22) + 0.5 * (Y22 * (-W00 * W00 - W01 * W01 + W02 * W02 - W10 * W10 - W11 * W11 + W12 * W12 + W20 * W20 + W21 * W21)) + W02 * (W00 * Y20 + W01 * Y21 + W20 * Y00 + W21 * Y01) + W12 * (W10 * Y20 + W11 * Y21 + W20 * Y10 + W21 * Y11) + Y02 * (W00 * W20 + W01 * W21) + Y12 * (W10 * W20 + W11 * W21);
  B.data[96]=Z22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21 + 0.5 * Z22 * Z22) + Z21 * (Z01 * Z02 + Z11 * Z12) + Z20 * (Z00 * Z02 + Z10 * Z12);
  B.data[97]=Z22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21 + 1.5 * W22 * Z22) + W22 * (-0.5 * Z00 * Z00 - 0.5 * Z01 * Z01 + 0.5 * Z02 * Z02 - 0.5 * Z10 * Z10 - 0.5 * Z11 * Z11 + 0.5 * Z12 * Z12 + 0.5 * Z20 * Z20 + 0.5 * Z21 * Z21) + Z12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + Z21 * (W02 * Z01 + W12 * Z11) + Z20 * (W02 * Z00 + W12 * Z10);
  B.data[98]=W22 * (-W00 * Z00 - W01 * Z01 + W02 * Z02 - W10 * Z10 - W11 * Z11 + W12 * Z12 + W20 * Z20 + W21 * Z21 + 1.5 * W22 * Z22) + Z22 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21) + W02 * (W00 * Z20 + W01 * Z21 + W20 * Z00 + W21 * Z01) + W12 * (W10 * Z20 + W11 * Z21 + W20 * Z10 + W21 * Z11) + Z12 * (W10 * W20 + W11 * W21) + Z02 * (W00 * W20 + W01 * W21);
  B.data[99]=W22 * (-0.5 * W00 * W00 - 0.5 * W01 * W01 + 0.5 * W02 * W02 - 0.5 * W10 * W10 - 0.5 * W11 * W11 + 0.5 * W12 * W12 + 0.5 * W20 * W20 + 0.5 * W21 * W21 + 0.5 * W22 * W22) + W02 * (W00 * W20 + W01 * W21) + W12 * (W10 * W20 + W11 * W21);
}",0.9999770220588236
151088,"@Override public void setScale(double scale){
  super.setScale(scale);
  x0=-r - 1;
  y0=-r - 1;
  x1=r + 1;
  y1=r + 1;
}","@Override public void setScale(double scale){
  super.setScale(scale);
  x0=y0=-r - 1;
  x1=y1=r;
}",0.8959276018099548
151089,"@Override public void setScale(double scale){
  super.setScale(scale);
  x0=-r - 1;
  y0=-r - 1;
  x1=r + 1;
  y1=r + 1;
}","@Override public void setScale(double scale){
  super.setScale(scale);
  x0=y0=-r - 1;
  x1=y1=r;
}",0.8959276018099548
151090,"@Override public void setScale(double scale){
  super.setScale(scale);
  w=2 * r;
  x0=-r;
  y0=-r;
  x1=r + 1;
  y1=r + 1;
}","@Override public void setScale(double scale){
  super.setScale(scale);
  w=2 * r;
  x0=y0=-r;
  x1=y1=r;
}",0.9177489177489178
151091,"@Override public void setScale(double scale){
  super.setScale(scale);
  w=2 * r;
  x0=-r;
  y0=-r;
  x1=r + 1;
  y1=r + 1;
}","@Override public void setScale(double scale){
  super.setScale(scale);
  w=2 * r;
  x0=y0=-r;
  x1=y1=r;
}",0.9177489177489178
151092,"@Override public double compute(int x,int y){
  return IntegralImageOps.block_unsafe(input,x + x0,y + y0,x + x1 - 1,y + y1 - 1);
}","@Override public double compute(int x,int y){
  return IntegralImageOps.block_unsafe(input,x + x0,y + y0,x + x1,y + y1);
}",0.9682539682539684
151093,"@Override public void setScale(double scale){
  r=(int)(baseR * scale + 0.5);
  if (r <= 0)   r=1;
  x0=y0=-r - 1;
  x1=y1=r + 1;
}","@Override public void setScale(double scale){
  r=(int)(baseR * scale + 0.5);
  if (r <= 0)   r=1;
  x0=y0=-r - 1;
  x1=y1=r;
}",0.9844961240310076
151094,"@Override public boolean isInBounds(int x,int y){
  return (x + x0 >= 0 && y + y0 >= 0 && x + x1 <= input.width && y + y1 <= input.height);
}","@Override public boolean isInBounds(int x,int y){
  return (x + x0 >= 0 && y + y0 >= 0 && x + x1 < input.width && y + y1 < input.height);
}",0.9928571428571428
151095,"public static void main(String args[]){
  String dir=""String_Node_Str"";
  StereoParameters param=BoofMiscOps.loadXML(dir + ""String_Node_Str"");
  boolean leftHanded=true;
  BufferedImage origLeft=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  BufferedImage origRight=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  MultiSpectral<ImageFloat32> distLeft=ConvertBufferedImage.convertFromMulti(origLeft,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> distRight=ConvertBufferedImage.convertFromMulti(origRight,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> rectLeft=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distLeft.getWidth(),distLeft.getHeight(),distLeft.getNumBands());
  MultiSpectral<ImageFloat32> rectRight=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distRight.getWidth(),distRight.getHeight(),distRight.getNumBands());
  RectifyCalibrated rectifyAlg=RectifyImageOps.createCalibrated();
  Se3_F64 leftToRight=param.getRightToLeft().invert(null);
  DenseMatrix64F K1=UtilIntrinsic.calibrationMatrix(param.getLeft());
  DenseMatrix64F K2=UtilIntrinsic.calibrationMatrix(param.getRight());
  rectifyAlg.process(K1,new Se3_F64(),K2,leftToRight);
  DenseMatrix64F rect1=rectifyAlg.getRect1();
  DenseMatrix64F rect2=rectifyAlg.getRect2();
  DenseMatrix64F rectK=rectifyAlg.getCalibrationMatrix();
  RectifyImageOps.fullViewLeft(param.left,leftHanded,rect1,rect2,rectK);
  ImageDistort<ImageFloat32> imageDistortLeft=RectifyImageOps.rectifyImage(param.getLeft(),leftHanded,rect1,ImageFloat32.class);
  ImageDistort<ImageFloat32> imageDistortRight=RectifyImageOps.rectifyImage(param.getRight(),leftHanded,rect2,ImageFloat32.class);
  DistortImageOps.distortMS(distLeft,rectLeft,imageDistortLeft);
  DistortImageOps.distortMS(distRight,rectRight,imageDistortRight);
  BufferedImage outLeft=ConvertBufferedImage.convertTo(rectLeft,null);
  BufferedImage outRight=ConvertBufferedImage.convertTo(rectRight,null);
  ShowImages.showWindow(new RectifiedPairPanel(true,origLeft,origRight),""String_Node_Str"");
  ShowImages.showWindow(new RectifiedPairPanel(true,outLeft,outRight),""String_Node_Str"");
}","public static void main(String args[]){
  String dir=""String_Node_Str"";
  StereoParameters param=BoofMiscOps.loadXML(dir + ""String_Node_Str"");
  boolean leftHanded=true;
  BufferedImage origLeft=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  BufferedImage origRight=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  MultiSpectral<ImageFloat32> distLeft=ConvertBufferedImage.convertFromMulti(origLeft,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> distRight=ConvertBufferedImage.convertFromMulti(origRight,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> rectLeft=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distLeft.getWidth(),distLeft.getHeight(),distLeft.getNumBands());
  MultiSpectral<ImageFloat32> rectRight=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distRight.getWidth(),distRight.getHeight(),distRight.getNumBands());
  RectifyCalibrated rectifyAlg=RectifyImageOps.createCalibrated();
  Se3_F64 leftToRight=param.getRightToLeft().invert(null);
  DenseMatrix64F K1=UtilIntrinsic.calibrationMatrix(param.getLeft());
  DenseMatrix64F K2=UtilIntrinsic.calibrationMatrix(param.getRight());
  rectifyAlg.process(K1,new Se3_F64(),K2,leftToRight);
  DenseMatrix64F rect1=rectifyAlg.getRect1();
  DenseMatrix64F rect2=rectifyAlg.getRect2();
  DenseMatrix64F rectK=rectifyAlg.getCalibrationMatrix();
  RectifyImageOps.fullViewLeft(param.left,leftHanded,rect1,rect2,rectK);
  ImageDistort<ImageFloat32> imageDistortLeft=RectifyImageOps.rectifyImage(param.getLeft(),leftHanded,rect1,ImageFloat32.class);
  ImageDistort<ImageFloat32> imageDistortRight=RectifyImageOps.rectifyImage(param.getRight(),leftHanded,rect2,ImageFloat32.class);
  DistortImageOps.distortMS(distLeft,rectLeft,imageDistortLeft);
  DistortImageOps.distortMS(distRight,rectRight,imageDistortRight);
  BufferedImage outLeft=ConvertBufferedImage.convertTo(rectLeft,null);
  BufferedImage outRight=ConvertBufferedImage.convertTo(rectRight,null);
  ListDisplayPanel panel=new ListDisplayPanel();
  panel.addItem(new RectifiedPairPanel(true,origLeft,origRight),""String_Node_Str"");
  panel.addItem(new RectifiedPairPanel(true,outLeft,outRight),""String_Node_Str"");
  ShowImages.showWindow(panel,""String_Node_Str"");
}",0.9175709997691064
151096,"public static void rectify(DenseMatrix64F F,List<AssociatedPair> inliers,BufferedImage origLeft,BufferedImage origRight){
  MultiSpectral<ImageFloat32> distLeft=ConvertBufferedImage.convertFromMulti(origLeft,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> distRight=ConvertBufferedImage.convertFromMulti(origRight,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> rectLeft=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distLeft.getWidth(),distLeft.getHeight(),distLeft.getNumBands());
  MultiSpectral<ImageFloat32> rectRight=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distRight.getWidth(),distRight.getHeight(),distRight.getNumBands());
  RectifyFundamental rectifyAlg=RectifyImageOps.createFundamental();
  rectifyAlg.process(F,inliers,origLeft.getWidth(),origLeft.getHeight());
  DenseMatrix64F rect1=rectifyAlg.getRect1();
  DenseMatrix64F rect2=rectifyAlg.getRect2();
  RectifyImageOps.fullViewLeft(origLeft.getWidth(),origLeft.getHeight(),true,rect1,rect2);
  rect1.print();
  rect2.print();
  ImageDistort<ImageFloat32> imageDistortLeft=RectifyImageOps.rectifyImage(origLeft.getHeight(),true,rect1,ImageFloat32.class);
  ImageDistort<ImageFloat32> imageDistortRight=RectifyImageOps.rectifyImage(origLeft.getHeight(),true,rect2,ImageFloat32.class);
  DistortImageOps.distortMS(distLeft,rectLeft,imageDistortLeft);
  DistortImageOps.distortMS(distRight,rectRight,imageDistortRight);
  BufferedImage outLeft=ConvertBufferedImage.convertTo(rectLeft,null);
  BufferedImage outRight=ConvertBufferedImage.convertTo(rectRight,null);
  ShowImages.showWindow(new RectifiedPairPanel(true,origLeft,origRight),""String_Node_Str"");
  ShowImages.showWindow(new RectifiedPairPanel(true,outLeft,outRight),""String_Node_Str"");
}","public static void rectify(DenseMatrix64F F,List<AssociatedPair> inliers,BufferedImage origLeft,BufferedImage origRight){
  MultiSpectral<ImageFloat32> distLeft=ConvertBufferedImage.convertFromMulti(origLeft,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> distRight=ConvertBufferedImage.convertFromMulti(origRight,null,ImageFloat32.class);
  MultiSpectral<ImageFloat32> rectLeft=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distLeft.getWidth(),distLeft.getHeight(),distLeft.getNumBands());
  MultiSpectral<ImageFloat32> rectRight=new MultiSpectral<ImageFloat32>(ImageFloat32.class,distRight.getWidth(),distRight.getHeight(),distRight.getNumBands());
  RectifyFundamental rectifyAlg=RectifyImageOps.createFundamental();
  rectifyAlg.process(F,inliers,origLeft.getWidth(),origLeft.getHeight());
  DenseMatrix64F rect1=rectifyAlg.getRect1();
  DenseMatrix64F rect2=rectifyAlg.getRect2();
  rect1.print();
  rect2.print();
  ImageDistort<ImageFloat32> imageDistortLeft=RectifyImageOps.rectifyImage(origLeft.getHeight(),isLeftHanded,rect1,ImageFloat32.class);
  ImageDistort<ImageFloat32> imageDistortRight=RectifyImageOps.rectifyImage(origLeft.getHeight(),isLeftHanded,rect2,ImageFloat32.class);
  DistortImageOps.distortMS(distLeft,rectLeft,imageDistortLeft);
  DistortImageOps.distortMS(distRight,rectRight,imageDistortRight);
  BufferedImage outLeft=ConvertBufferedImage.convertTo(rectLeft,null);
  BufferedImage outRight=ConvertBufferedImage.convertTo(rectRight,null);
  ShowImages.showWindow(new RectifiedPairPanel(true,origLeft,origRight),""String_Node_Str"");
  ShowImages.showWindow(new RectifiedPairPanel(true,outLeft,outRight),""String_Node_Str"");
}",0.8682125036689169
151097,"public static void main(String args[]){
  String dir=""String_Node_Str"";
  BufferedImage imageA=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  BufferedImage imageB=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  List<AssociatedPair> matches=ExampleFundamentalMatrix.computeMatches(imageA,imageB);
  for (  AssociatedPair p : matches) {
    p.currLoc.y=imageA.getHeight() - p.currLoc.y - 1;
    p.keyLoc.y=imageA.getHeight() - p.keyLoc.y - 1;
  }
  List<AssociatedPair> inliers=new ArrayList<AssociatedPair>();
  DenseMatrix64F F=ExampleFundamentalMatrix.robustFundamental(matches,inliers);
  for (  AssociatedPair p : inliers) {
    p.currLoc.y=imageA.getHeight() - p.currLoc.y - 1;
    p.keyLoc.y=imageA.getHeight() - p.keyLoc.y - 1;
  }
  rectify(F,inliers,imageA,imageB);
}","public static void main(String args[]){
  String dir=""String_Node_Str"";
  BufferedImage imageA=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  BufferedImage imageB=UtilImageIO.loadImage(dir + ""String_Node_Str"");
  List<AssociatedPair> matches=ExampleFundamentalMatrix.computeMatches(imageA,imageB);
  for (  AssociatedPair p : matches) {
    p.currLoc.y=imageA.getHeight() - p.currLoc.y - 1;
    p.keyLoc.y=imageA.getHeight() - p.keyLoc.y - 1;
  }
  List<AssociatedPair> inliers=new ArrayList<AssociatedPair>();
  DenseMatrix64F F=ExampleFundamentalMatrix.robustFundamental(matches,inliers);
  rectify(F,inliers,imageA,imageB);
}",0.8944011339475549
151098,"@Override public void process(){
  alg.process(initialF,pairs);
  alg.getRefinement();
}","@Override public void process(){
  alg.process(list);
  alg.getEpipolarMatrix();
}",0.8
151099,"@Override public String getName(){
  return alg.getClass().getSimpleName();
}","@Override public String getName(){
  return name;
}",0.78125
151100,"public void runAll(){
  System.out.println(""String_Node_Str"" + NUM_POINTS);
  System.out.println();
  double tol=1e-16;
  int MAX_ITER=100;
  init(NUM_POINTS,FUNDAMENTAL,false);
  EpipolarMatrixEstimator computeAlg=FactoryEpipolar.computeFundamental(FUNDAMENTAL,8);
  computeAlg.process(pairs);
  initialF=computeAlg.getEpipolarMatrix();
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineFundamental(tol,MAX_ITER,EpipolarError.SAMPSON)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineFundamental(tol,MAX_ITER,EpipolarError.SIMPLE)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",new QuasiNewtonFundamentalSampson(tol,MAX_ITER)),TEST_TIME);
  System.out.println();
  System.out.println(""String_Node_Str"");
}","public void runAll(){
  System.out.println(""String_Node_Str"" + NUM_POINTS);
  System.out.println();
  double tol=1e-16;
  int MAX_ITER=100;
  init(NUM_POINTS,FUNDAMENTAL,false);
  EpipolarMatrixEstimator computeAlg=FactoryEpipolar.computeFundamental(FUNDAMENTAL,8);
  computeAlg.process(pairs);
  initialF=computeAlg.getEpipolarMatrix();
  initialF.data[0]+=0.1;
  initialF.data[4]-=0.15;
  initialF.data[7]-=0.2;
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineFundamental(tol,MAX_ITER,EpipolarError.SAMPSON)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineFundamental(tol,MAX_ITER,EpipolarError.SIMPLE)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",new QuasiNewtonFundamentalSampson(tol,MAX_ITER)),TEST_TIME);
  System.out.println();
  System.out.println(""String_Node_Str"");
}",0.953939393939394
151101,"@Override public void process(){
  alg.process(initialF,pairs);
  alg.getRefinement();
}","@Override public void process(){
  alg.process(pairs);
}",0.7777777777777778
151102,"public void runAll(){
  System.out.println(""String_Node_Str"" + NUM_POINTS);
  System.out.println();
  double tol=1e-16;
  int MAX_ITER=100;
  init(NUM_POINTS,PIXELS,true);
  EpipolarMatrixEstimator computeAlg=FactoryEpipolar.computeHomography(true);
  computeAlg.process(pairs);
  initialF=computeAlg.getEpipolarMatrix();
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineHomography(tol,MAX_ITER,EpipolarError.SIMPLE)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineHomography(tol,MAX_ITER,EpipolarError.SAMPSON)),TEST_TIME);
  System.out.println();
  System.out.println(""String_Node_Str"");
}","public void runAll(){
  System.out.println(""String_Node_Str"" + NUM_POINTS);
  System.out.println();
  double tol=1e-16;
  int MAX_ITER=200;
  init(NUM_POINTS,PIXELS,true);
  EpipolarMatrixEstimator computeAlg=FactoryEpipolar.computeHomography(true);
  computeAlg.process(pairs);
  initialF=computeAlg.getEpipolarMatrix();
  initialF.data[0]+=0.1;
  initialF.data[4]-=0.15;
  initialF.data[7]-=0.2;
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineHomography(tol,MAX_ITER,EpipolarError.SIMPLE)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Refine(""String_Node_Str"",refineHomography(tol,MAX_ITER,EpipolarError.SAMPSON)),TEST_TIME);
  ProfileOperation.printOpsPerSec(new Linear4(),TEST_TIME);
  System.out.println();
  System.out.println(""String_Node_Str"");
}",0.9032258064516128
151103,"@Override public void process(I input){
  if (featSrc == null) {
    featSrc=createFeatureDescQueue(false);
    featDst=createFeatureDescQueue(true);
  }
  setInputImage(input);
  tick++;
  tracksActive.clear();
  tracksDropped.clear();
  tracksNew.clear();
  featDst.reset();
  locDst.reset();
  detectFeatures(locDst,featDst);
  pruneTracks();
  if (keyFrameSet) {
    matches=associate(featSrc,featDst);
    for (int i=0; i < matches.size; i++) {
      AssociatedIndex indexes=matches.data[i];
      PointTrack pair=tracksAll.get(indexes.src);
      Point2D_F64 loc=locDst.data[indexes.dst];
      pair.set(loc.x,loc.y);
      tracksActive.add(pair);
      TrackInfo info=(TrackInfo)pair.getDescription();
      info.lastAssociated=tick;
      if (updateState) {
        setDescription(info.desc,featDst.get(indexes.dst));
      }
    }
  }
}","@Override public void process(I input){
  if (featSrc == null) {
    featSrc=createFeatureDescQueue(false);
    featDst=createFeatureDescQueue(true);
  }
  setInputImage(input);
  tick++;
  tracksActive.clear();
  tracksDropped.clear();
  tracksNew.clear();
  featDst.reset();
  locDst.reset();
  detectFeatures(locDst,featDst);
  pruneTracks();
  if (keyFrameSet) {
    matches=associate(featSrc,featDst);
    for (int i=0; i < matches.size; i++) {
      AssociatedIndex indexes=matches.data[i];
      PointTrack track=tracksAll.get(indexes.src);
      Point2D_F64 loc=locDst.data[indexes.dst];
      track.set(loc.x,loc.y);
      tracksActive.add(track);
      TrackInfo info=(TrackInfo)track.getDescription();
      info.lastAssociated=tick;
      if (updateState) {
        setDescription(info.desc,featDst.get(indexes.dst));
      }
    }
  }
}",0.9787485242030696
151104,"/** 
 * Tracks features inside the image and updates feature locations.
 * @param image
 */
public void process(T image){
  tracker.process(image);
  List<PointTrack> dropped=tracker.getDroppedTracks();
  for (int i=0; i < dropped.size(); i++) {
    if (!pairs.remove((AssociatedPair)dropped.get(i).cookie))     throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Tracks features inside the image and updates feature locations.
 * @param image
 */
public void process(T image){
  tracker.process(image);
  pairs.clear();
  List<PointTrack> tracks=tracker.getActiveTracks();
  for (  PointTrack t : tracks) {
    AssociatedPair p=t.getCookie();
    pairs.add(p);
  }
}",0.6002928257686676
151105,"@Test public void enforceZeroDeterminant(){
  for (int i=0; i < 20; i++) {
    SimpleMatrix F1=SimpleMatrix.random(3,3,0.1,2,rand);
    SimpleMatrix F2=SimpleMatrix.random(3,3,0.1,2,rand);
    double alpha=FundamentalLinear7.enforceZeroDeterminant(F1.getMatrix(),F2.getMatrix(),new double[4]);
    SimpleMatrix F=F1.scale(alpha).plus(F2.scale(1 - alpha));
    System.out.println(""String_Node_Str"" + F.determinant() + ""String_Node_Str""+ F1.determinant());
    assertEquals(0,F.determinant(),1e-8);
  }
}","@Test public void enforceZeroDeterminant(){
  for (int i=0; i < 20; i++) {
    SimpleMatrix F1=SimpleMatrix.random(3,3,0.1,2,rand);
    SimpleMatrix F2=SimpleMatrix.random(3,3,0.1,2,rand);
    double alpha=FundamentalLinear7.enforceZeroDeterminant(F1.getMatrix(),F2.getMatrix(),new double[4]);
    SimpleMatrix F=F1.scale(alpha).plus(F2.scale(1 - alpha));
    assertEquals(0,F.determinant(),1e-8);
  }
}",0.8906077348066298
151106,"/** 
 * <p> A cubic polynomial of the form ""f(x) =  a + b*x + c*x<sup>2</sup> + d*x<sup>3</sup>"" has three roots.  These roots will either be all real or one real and two imaginary.  This function will return a root which is always real. </p> <p> WARNING: Not as numerically stable as   {@link #polynomialRootsEVD(double)}, but still fairly stable. </p>
 * @param a polynomial coefficient.
 * @param b polynomial coefficient.
 * @param c polynomial coefficient.
 * @param d polynomial coefficient.
 * @return A real root of the cubic polynomial
 */
public static double cubicRootReal(double a,double b,double c,double d){
  double norm=Math.max(Math.abs(a),Math.abs(b));
  norm=Math.max(norm,Math.abs(c));
  norm=Math.max(norm,Math.abs(d));
  a/=norm;
  b/=norm;
  c/=norm;
  d/=norm;
  double insideLeft=c * (2 * c * c - 9 * d * b) + 27 * d * d* a;
  double temp=c * c - 3 * d * b;
  double insideOfSqrt=insideLeft * insideLeft - 4 * temp * temp* temp;
  if (insideOfSqrt >= 0) {
    double insideRight=Math.sqrt(insideOfSqrt);
    double ret=c / d + root3(0.5 * (insideLeft + insideRight)) + root3(0.5 * (insideLeft - insideRight));
    return -ret / (3.0 * d);
  }
 else {
    Complex64F inside=new Complex64F(0.5 * insideLeft,0.5 * Math.sqrt(-insideOfSqrt));
    Complex64F root=new Complex64F();
    ComplexMath.root(inside,3,2,root);
    double ret=c + 2 * root.getReal();
    return -ret / (3.0 * d);
  }
}","/** 
 * <p> A cubic polynomial of the form ""f(x) =  a + b*x + c*x<sup>2</sup> + d*x<sup>3</sup>"" has three roots.  These roots will either be all real or one real and two imaginary.  This function will return a root which is always real. </p> <p> WARNING: Not as numerically stable as   {@link #polynomialRootsEVD(double)}, but still fairly stable. </p>
 * @param a polynomial coefficient.
 * @param b polynomial coefficient.
 * @param c polynomial coefficient.
 * @param d polynomial coefficient.
 * @return A real root of the cubic polynomial
 */
public static double cubicRootReal(double a,double b,double c,double d){
  double norm=Math.max(Math.abs(a),Math.abs(b));
  norm=Math.max(norm,Math.abs(c));
  norm=Math.max(norm,Math.abs(d));
  a/=norm;
  b/=norm;
  c/=norm;
  d/=norm;
  double insideLeft=2 * c * c* c - 9 * d * c* b + 27 * d * d* a;
  double temp=c * c - 3 * d * b;
  double insideOfSqrt=insideLeft * insideLeft - 4 * temp * temp* temp;
  if (insideOfSqrt >= 0) {
    double insideRight=Math.sqrt(insideOfSqrt);
    double ret=c + root3(0.5 * (insideLeft + insideRight)) + root3(0.5 * (insideLeft - insideRight));
    return -ret / (3.0 * d);
  }
 else {
    Complex64F inside=new Complex64F(0.5 * insideLeft,0.5 * Math.sqrt(-insideOfSqrt));
    Complex64F root=new Complex64F();
    ComplexMath.root(inside,3,2,root);
    double ret=c + 2 * root.getReal();
    return -ret / (3.0 * d);
  }
}",0.9936215450035436
151107,"public static void main(String args[]){
  BufferedImage in=UtilImageIO.loadImage(""String_Node_Str"");
  WaveletVisualizeApp app=new WaveletVisualizeApp(ImageFloat32.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setInputManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
}","public static void main(String args[]){
  BufferedImage in=UtilImageIO.loadImage(""String_Node_Str"");
  WaveletVisualizeApp app=new WaveletVisualizeApp(ImageFloat32.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setInputManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
}",0.9097222222222222
151108,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D g2=(Graphics2D)g;
  if (img != null) {
    if (resize) {
      double ratioW=(double)getWidth() / (double)img.getWidth();
      double ratioH=(double)getHeight() / (double)img.getHeight();
      double ratio=Math.min(ratioW,ratioH);
      if (ratio == 1) {
        g.drawImage(img,0,0,this);
      }
 else {
        AffineTransform tran=AffineTransform.getScaleInstance(ratio,ratio);
        g2.drawImage(img,tran,null);
      }
    }
 else {
      g2.drawImage(img,0,0,this);
    }
  }
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D g2=(Graphics2D)g;
  if (img != null) {
    if (resize) {
      double ratioW=(double)getWidth() / (double)img.getWidth();
      double ratioH=(double)getHeight() / (double)img.getHeight();
      double ratio=Math.min(ratioW,ratioH);
      if (ratio >= 1)       ratio=1;
      if (ratio == 1) {
        g.drawImage(img,0,0,this);
      }
 else {
        AffineTransform tran=AffineTransform.getScaleInstance(ratio,ratio);
        g2.drawImage(img,tran,null);
      }
    }
 else {
      g2.drawImage(img,0,0,this);
    }
  }
}",0.9689857502095558
151109,"@Override public synchronized void paintComponent(Graphics g){
  super.paintComponent(g);
  if (orig == null || stabilized == null)   return;
  Graphics2D g2=(Graphics2D)g;
  int w=getWidth() / 2 - 10;
  int h=getHeight();
  double scaleX=w / (double)orig.getWidth();
  double scaleY=h / (double)orig.getHeight();
  double scale=Math.min(scaleX,scaleY);
  if (scale > 1)   scale=1;
  int scaledWidth=(int)(scale * orig.getWidth());
  int scaledHeight=(int)(scale * orig.getHeight());
  g2.drawImage(orig,0,0,scaledWidth,scaledHeight,0,0,orig.getWidth(),orig.getHeight(),null);
  g2.drawImage(stabilized,scaledWidth + 10,0,scaledWidth * 2 + 10,scaledHeight,0,0,orig.getWidth(),orig.getHeight(),null);
  for (int i=0; i < features.size(); i++) {
    Point2D_F64 p=features.get(i);
    VisualizeFeatures.drawPoint(g2,(int)p.x,(int)p.y,Color.BLUE);
  }
}","@Override public synchronized void paintComponent(Graphics g){
  super.paintComponent(g);
  if (orig == null || stabilized == null)   return;
  Graphics2D g2=(Graphics2D)g;
  int w=getWidth() / 2 - 10;
  int h=getHeight();
  double scaleX=w / (double)orig.getWidth();
  double scaleY=h / (double)orig.getHeight();
  double scale=Math.min(scaleX,scaleY);
  if (scale > 1)   scale=1;
  int scaledWidth=(int)(scale * orig.getWidth());
  int scaledHeight=(int)(scale * orig.getHeight());
  g2.drawImage(orig,0,0,scaledWidth,scaledHeight,0,0,orig.getWidth(),orig.getHeight(),null);
  g2.drawImage(stabilized,scaledWidth + 10,0,scaledWidth * 2 + 10,scaledHeight,0,0,orig.getWidth(),orig.getHeight(),null);
  for (int i=0; i < features.size(); i++) {
    Point2D_F64 p=features.get(i);
    VisualizeFeatures.drawPoint(g2,(int)(scale * p.x),(int)(scale * p.y),Color.BLUE);
  }
}",0.9813953488372092
151110,"@Override public void setActiveAlgorithm(int indexFamily,String name,Object cookie){
  if (image == null)   return;
  WaveletDescription<C> desc=(WaveletDescription<C>)cookie;
  WaveletTransform<T,W,C> waveletTran=FactoryWaveletTransform.create((Class)image.getClass(),desc,numLevels);
  panel.reset();
  W imageWavelet=waveletTran.transform(image,null);
  waveletTran.invert(imageWavelet,imageInv);
  float maxValue=(float)GPixelMath.maxAbs(imageWavelet);
  BufferedImage buffWavelet=VisualizeImageData.grayMagnitude(imageWavelet,null,maxValue);
  BufferedImage buffInv=ConvertBufferedImage.convertTo(imageInv,null);
  panel.addImage(buffWavelet,""String_Node_Str"");
  panel.addImage(buffInv,""String_Node_Str"");
}","@Override public void setActiveAlgorithm(int indexFamily,String name,Object cookie){
  if (image == null)   return;
  WaveletDescription<C> desc=(WaveletDescription<C>)cookie;
  WaveletTransform<T,W,C> waveletTran=FactoryWaveletTransform.create((Class)image.getClass(),desc,numLevels);
  panel.reset();
  W imageWavelet=waveletTran.transform(image,null);
  waveletTran.invert(imageWavelet,imageInv);
  UtilWavelet.adjustForDisplay(imageWavelet,waveletTran.getLevels(),255);
  BufferedImage buffWavelet=VisualizeImageData.grayMagnitude(imageWavelet,null,255);
  BufferedImage buffInv=ConvertBufferedImage.convertTo(imageInv,null);
  panel.addImage(buffWavelet,""String_Node_Str"");
  panel.addImage(buffInv,""String_Node_Str"");
}",0.9082058414464534
151111,"public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociation.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}","public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociation.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}",0.9621621621621622
151112,"public static void main(String args[]){
  IntensityFeatureScaleSpaceApp app=new IntensityFeatureScaleSpaceApp(ImageUInt8.class,ImageSInt16.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setInputManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
}","public static void main(String args[]){
  IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32> app=new IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setInputManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
}",0.8909952606635071
151113,"public DetectFeaturePyramidApp(Class<T> imageType,Class<D> derivType){
  super(1);
  this.imageType=imageType;
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianLaplacePyramid(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisLaplacePyramid(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianPyramid(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisPyramid(r,1,NUM_FEATURES,imageType,derivType));
  ss=new ScaleSpacePyramid<T>(imageType,1,1.5,2,4,8,12,24);
  panel=new ScaleSpacePyramidPointPanel(ss,r);
  setMainGUI(panel);
}","public DetectFeaturePyramidApp(Class<T> imageType,Class<D> derivType){
  super(1);
  this.imageType=imageType;
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianLaplacePyramid(r,1f,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisLaplacePyramid(r,1f,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianPyramid(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisPyramid(r,1,NUM_FEATURES,imageType,derivType));
  ss=new ScaleSpacePyramid<T>(imageType,1,1.5,2,3,4,8,12,16,24);
  panel=new ScaleSpacePyramidPointPanel(ss,r);
  setMainGUI(panel);
}",0.9951083158630328
151114,"public DetectFeatureScaleSpaceApp(Class<T> imageType,Class<D> derivType){
  super(1);
  this.imageType=imageType;
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianLaplace(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisLaplace(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianScaleSpace(r,1,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisScaleSpace(r,1,NUM_FEATURES,imageType,derivType));
  ss=FactoryGaussianScaleSpace.nocache(imageType);
  ss.setScales(1,1.5,2,4,8,12,24);
  panel=new ScaleSpacePointPanel(ss,r);
  setMainGUI(panel);
}","public DetectFeatureScaleSpaceApp(Class<T> imageType,Class<D> derivType){
  super(1);
  this.imageType=imageType;
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianLaplace(r,1f,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisLaplace(r,0.5f,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.hessianScaleSpace(r,1f,NUM_FEATURES,imageType,derivType));
  addAlgorithm(0,""String_Node_Str"",FactoryInterestPointAlgs.harrisScaleSpace(r,0.5f,NUM_FEATURES,imageType,derivType));
  ss=FactoryGaussianScaleSpace.nocache(imageType);
  ss.setScales(1,1.5,2,3,4,8,12,16,24);
  panel=new ScaleSpacePointPanel(ss,r);
  levelPanel=new SelectScaleSpacePanel(ss,panel);
  add(levelPanel,BorderLayout.WEST);
  setMainGUI(panel);
}",0.9329896907216496
151115,"@Override public void setActiveAlgorithm(int indexFamily,String name,Object cookie){
  if (!hasImage)   return;
  final InterestPointScaleSpace<T,D> det=(InterestPointScaleSpace<T,D>)cookie;
  det.detect(ss);
  panel.setPoints(det.getInterestPoints());
  panel.repaint();
  panel.requestFocusInWindow();
}","@Override public void setActiveAlgorithm(int indexFamily,String name,Object cookie){
  if (!hasImage)   return;
  final InterestPointScaleSpace<T,D> det=(InterestPointScaleSpace<T,D>)cookie;
  det.detect(ss);
  panel.setPoints(det.getInterestPoints());
  levelPanel.reset();
}",0.8950086058519794
151116,"private void printPreamble(){
  out.print(CodeGeneratorUtil.copyright);
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str"");
}","private void printPreamble() throws FileNotFoundException {
  setOutputFile(className);
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str"");
}",0.8571428571428571
151117,"public static void determinant(ImageFloat32 featureIntensity,ImageSInt16 hessianXX,ImageSInt16 hessianYY,ImageSInt16 hessianXY){
  final int width=hessianXX.width;
  final int height=hessianXX.height;
  if (featureIntensity == null) {
    featureIntensity=new ImageFloat32(width,height);
  }
  for (int y=0; y < height; y++) {
    int indexXX=hessianXX.startIndex + y * hessianXX.stride;
    int indexYY=hessianYY.startIndex + y * hessianYY.stride;
    int indexXY=hessianXY.startIndex + y * hessianXY.stride;
    int indexInten=featureIntensity.startIndex + y * featureIntensity.stride;
    for (int x=0; x < width; x++) {
      int dxx=hessianXX.data[indexXX++];
      int dyy=hessianYY.data[indexYY++];
      int dxy=hessianXY.data[indexXY++];
      featureIntensity.data[indexInten++]=dxx * dyy - dxy * dxy;
    }
  }
}","public static void determinant(ImageFloat32 featureIntensity,ImageSInt16 hessianXX,ImageSInt16 hessianYY,ImageSInt16 hessianXY){
  final int width=hessianXX.width;
  final int height=hessianXX.height;
  if (featureIntensity == null) {
    featureIntensity=new ImageFloat32(width,height);
  }
  for (int y=0; y < height; y++) {
    int indexXX=hessianXX.startIndex + y * hessianXX.stride;
    int indexYY=hessianYY.startIndex + y * hessianYY.stride;
    int indexXY=hessianXY.startIndex + y * hessianXY.stride;
    int indexInten=featureIntensity.startIndex + y * featureIntensity.stride;
    for (int x=0; x < width; x++) {
      int dxx=hessianXX.data[indexXX++];
      int dyy=hessianYY.data[indexYY++];
      int dxy=hessianXY.data[indexXY++];
      featureIntensity.data[indexInten++]=Math.abs(dxx * dyy - dxy * dxy);
    }
  }
}",0.9939613526570048
151118,"/** 
 * See if each feature is a maximum in its local scale-space.
 */
protected void findLocalScaleSpaceMax(ScaleSpacePyramid<T> ss,int layerID){
  int index1=(spaceIndex + 1) % 3;
  List<Point2D_I16> candidates=maximums[index1];
  float scale0=(float)ss.scale[layerID - 1];
  float scale1=(float)ss.scale[layerID];
  float scale2=(float)ss.scale[layerID + 1];
  float ss0=(float)Math.pow(scale0,scalePower);
  float ss1=(float)Math.pow(scale1,scalePower);
  float ss2=(float)Math.pow(scale2,scalePower);
  for (  Point2D_I16 c : candidates) {
    sparseLaplace.setImage(ss.getLayer(layerID));
    float val=ss1 * (float)Math.abs(sparseLaplace.compute(c.x,c.y));
    int x0=(int)(c.x * scale1 / scale0);
    int y0=(int)(c.y * scale1 / scale0);
    int x2=(int)(c.x * scale1 / scale2);
    int y2=(int)(c.y * scale1 / scale2);
    if (checkMax(ss.getLayer(layerID - 1),val / ss0,x0,y0) && checkMax(ss.getLayer(layerID + 1),val / ss2,x2,y2)) {
      foundPoints.add(new ScalePoint((int)(c.x * scale1),(int)(c.y * scale1),scale1));
    }
  }
}","/** 
 * See if each feature is a maximum in its local scale-space.
 */
protected void findLocalScaleSpaceMax(ScaleSpacePyramid<T> ss,int layerID){
  int index1=(spaceIndex + 1) % 3;
  List<Point2D_I16> candidates=maximums[index1];
  float scale0=(float)ss.scale[layerID - 1];
  float scale1=(float)ss.scale[layerID];
  float scale2=(float)ss.scale[layerID + 1];
  float ss0=1;
  float ss1=1;
  float ss2=1;
  for (  Point2D_I16 c : candidates) {
    sparseLaplace.setImage(ss.getLayer(layerID));
    float val=ss1 * (float)Math.abs(sparseLaplace.compute(c.x,c.y));
    int x0=(int)(c.x * scale1 / scale0);
    int y0=(int)(c.y * scale1 / scale0);
    int x2=(int)(c.x * scale1 / scale2);
    int y2=(int)(c.y * scale1 / scale2);
    if (checkMax(ss.getLayer(layerID - 1),val / ss0,x0,y0) && checkMax(ss.getLayer(layerID + 1),val / ss2,x2,y2)) {
      foundPoints.add(new ScalePoint((int)(c.x * scale1),(int)(c.y * scale1),scale1));
    }
  }
}",0.9188916876574308
151119,"/** 
 * Searches the pyramid layers up and down to see if the found 2D features are also scale space maximums.
 */
protected void findLocalScaleSpaceMax(GaussianScaleSpace<T,D> ss,int layerID){
  int index0=spaceIndex;
  int index1=(spaceIndex + 1) % 3;
  int index2=(spaceIndex + 2) % 3;
  List<Point2D_I16> candidates=maximums[index1];
  T image0=localSpace[index0];
  T image1=localSpace[index1];
  T image2=localSpace[index2];
  float scale0=(float)ss.getScale(layerID - 1);
  float scale1=(float)ss.getScale(layerID);
  float scale2=(float)ss.getScale(layerID + 1);
  float ss0=(float)Math.pow(scale0,scalePower);
  float ss1=(float)Math.pow(scale1,scalePower);
  float ss2=(float)Math.pow(scale2,scalePower);
  for (  Point2D_I16 c : candidates) {
    sparseLaplace.setImage(image1);
    float val=ss1 * (float)Math.abs(sparseLaplace.compute(c.x,c.y));
    if (checkMax(image0,ss0,val,c.x,c.y) && checkMax(image2,ss2,val,c.x,c.y)) {
      foundPoints.add(new ScalePoint(c.x,c.y,scale1));
    }
  }
}","/** 
 * Searches the pyramid layers up and down to see if the found 2D features are also scale space maximums.
 */
protected void findLocalScaleSpaceMax(GaussianScaleSpace<T,D> ss,int layerID){
  int index0=spaceIndex;
  int index1=(spaceIndex + 1) % 3;
  int index2=(spaceIndex + 2) % 3;
  List<Point2D_I16> candidates=maximums[index1];
  T image0=localSpace[index0];
  T image1=localSpace[index1];
  T image2=localSpace[index2];
  float scale0=(float)ss.getScale(layerID - 1);
  float scale1=(float)ss.getScale(layerID);
  float scale2=(float)ss.getScale(layerID + 1);
  float ss0=(float)Math.pow(scale0,2.0 * 0.75);
  float ss1=(float)Math.pow(scale1,2.0 * 0.75);
  float ss2=(float)Math.pow(scale2,2.0 * 0.75);
  for (  Point2D_I16 c : candidates) {
    sparseLaplace.setImage(image1);
    float val=ss1 * (float)Math.abs(sparseLaplace.compute(c.x,c.y));
    if (checkMax(image0,ss0,val,c.x,c.y) && checkMax(image2,ss2,val,c.x,c.y)) {
      foundPoints.add(new ScalePoint(c.x,c.y,scale1));
    }
  }
}",0.918407960199005
151120,"/** 
 * Creates a   {@link boofcv.alg.feature.detect.interest.FeaturePyramid} which is uses a hessian blob detector.
 * @param featureRadius Size of the feature used to detect the corners.
 * @param cornerThreshold Minimum corner intensity required
 * @param maxFeatures Max number of features that can be found.
 * @param imageType Type of input image.
 * @param derivType Image derivative type.
 * @return CornerLaplaceScaleSpace
 */
public static <T extends ImageBase,D extends ImageBase>FeaturePyramid<T,D> hessianPyramid(int featureRadius,float cornerThreshold,int maxFeatures,Class<T> imageType,Class<D> derivType){
  GeneralFeatureIntensity<T,D> intensity=new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.DETERMINANT,derivType);
  FeatureExtractor extractor=createExtractor(featureRadius,cornerThreshold,intensity);
  GeneralFeatureDetector<T,D> detector=new GeneralFeatureDetector<T,D>(intensity,extractor,maxFeatures);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  return new FeaturePyramid<T,D>(detector,deriv,1);
}","/** 
 * Creates a   {@link boofcv.alg.feature.detect.interest.FeaturePyramid} which is uses a hessian blob detector.
 * @param featureRadius Size of the feature used to detect the corners.
 * @param cornerThreshold Minimum corner intensity required
 * @param maxFeatures Max number of features that can be found.
 * @param imageType Type of input image.
 * @param derivType Image derivative type.
 * @return CornerLaplaceScaleSpace
 */
public static <T extends ImageBase,D extends ImageBase>FeaturePyramid<T,D> hessianPyramid(int featureRadius,float cornerThreshold,int maxFeatures,Class<T> imageType,Class<D> derivType){
  GeneralFeatureIntensity<T,D> intensity=new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.DETERMINANT,derivType);
  FeatureExtractor extractor=createExtractor(featureRadius,cornerThreshold,intensity);
  GeneralFeatureDetector<T,D> detector=new GeneralFeatureDetector<T,D>(intensity,extractor,maxFeatures);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  return new FeaturePyramid<T,D>(detector,deriv,0);
}",0.9991023339317774
151121,"/** 
 * Creates a   {@link FeatureLaplaceScaleSpace} which is uses the Harris corner detector.
 * @param featureRadius Size of the feature used to detect the corners.
 * @param cornerThreshold Minimum corner intensity required
 * @param maxFeatures Max number of features that can be found.
 * @param imageType Type of input image.
 * @param derivType Image derivative type.
 * @return CornerLaplaceScaleSpace
 */
public static <T extends ImageBase,D extends ImageBase>FeaturePyramid<T,D> harrisPyramid(int featureRadius,float cornerThreshold,int maxFeatures,Class<T> imageType,Class<D> derivType){
  GradientCornerIntensity<D> harris=FactoryPointIntensityAlg.createHarris(featureRadius,0.04f,derivType);
  GeneralFeatureIntensity<T,D> intensity=new WrapperGradientCornerIntensity<T,D>(harris);
  FeatureExtractor extractor=createExtractor(featureRadius,cornerThreshold,intensity);
  GeneralFeatureDetector<T,D> detector=new GeneralFeatureDetector<T,D>(intensity,extractor,maxFeatures);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  return new FeaturePyramid<T,D>(detector,deriv,1);
}","/** 
 * Creates a   {@link FeatureLaplaceScaleSpace} which is uses the Harris corner detector.
 * @param featureRadius Size of the feature used to detect the corners.
 * @param cornerThreshold Minimum corner intensity required
 * @param maxFeatures Max number of features that can be found.
 * @param imageType Type of input image.
 * @param derivType Image derivative type.
 * @return CornerLaplaceScaleSpace
 */
public static <T extends ImageBase,D extends ImageBase>FeaturePyramid<T,D> harrisPyramid(int featureRadius,float cornerThreshold,int maxFeatures,Class<T> imageType,Class<D> derivType){
  GradientCornerIntensity<D> harris=FactoryPointIntensityAlg.createHarris(featureRadius,0.04f,derivType);
  GeneralFeatureIntensity<T,D> intensity=new WrapperGradientCornerIntensity<T,D>(harris);
  FeatureExtractor extractor=createExtractor(featureRadius,cornerThreshold,intensity);
  GeneralFeatureDetector<T,D> detector=new GeneralFeatureDetector<T,D>(intensity,extractor,maxFeatures);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  return new FeaturePyramid<T,D>(detector,deriv,0);
}",0.9991356957649092
151122,"public static void main(String args[]){
  BenchmarkStabilityDescribe<ImageFloat32,ImageFloat32> benchmark=new BenchmarkStabilityDescribe<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  benchmark.testRotation();
}","public static void main(String args[]){
  BenchmarkStabilityDescribe<ImageFloat32,ImageFloat32> benchmark=new BenchmarkStabilityDescribe<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  benchmark.testIntensity();
}",0.9635974304068522
151123,"@Override public double[] evaluateImage(BenchmarkAlgorithm alg,T image,double scale,double theta,List<Point2D_I32> points,List<Integer> indexes){
  ExtractFeatureDescription<T> extract=alg.getAlgorithm();
  currentDescriptions(image,extract,scale,theta,points,indexes);
  double associationScore=computeAssociationScore(indexes);
  computeErrorScore(indexes);
  double p50=errors.getFraction(0.5);
  double p90=errors.getFraction(0.9);
  return new double[]{associationScore,p50 * 10,p90 * 10};
}","@Override public double[] evaluateImage(BenchmarkAlgorithm alg,T image,double scale,double theta,List<Point2D_I32> points,List<Integer> indexes){
  ExtractFeatureDescription<T> extract=alg.getAlgorithm();
  currentDescriptions(image,extract,scale,theta,points,indexes);
  double associationScore=computeAssociationScore(indexes);
  computeErrorScore(indexes);
  double p50=errors.getFraction(0.5);
  double p90=errors.getFraction(0.9);
  return new double[]{current.size(),matcher.getMatches().size(),associationScore,p50 * 10,p90 * 10};
}",0.9584541062801932
151124,"private void computeErrorScore(List<Integer> indexes){
  errors.reset();
  for (int i=0; i < indexes.size(); i++) {
    TupleDesc_F64 f=currentList.get(i);
    TupleDesc_F64 e=initList.get(indexes.get(i));
    if (f != null && e != null) {
      double errorNorm=errorNorm(f,e);
      double initNorm=norm(e);
      errors.add(errorNorm / initNorm);
    }
  }
}","private void computeErrorScore(List<Integer> currentToInitialIndex){
  errors.reset();
  for (int i=0; i < currentToInitialIndex.size(); i++) {
    TupleDesc_F64 f=currentList.get(i);
    TupleDesc_F64 e=initList.get(currentToInitialIndex.get(i));
    if (f != null && e != null) {
      double errorNorm=errorNorm(f,e);
      double initNorm=norm(e);
      errors.add(errorNorm / initNorm);
    }
  }
}",0.9214659685863874
151125,"@Override public String[] getMetricNames(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override public String[] getMetricNames(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.8723404255319149
151126,"@Override public double[] evaluateImage(BenchmarkAlgorithm alg,T image,DistortParam param){
  Affine2D_F32 initToImage=StabilityEvaluatorPoint.createTransform(param.scale,param.rotation,image);
  List<Point2D_I32> original=transformOriginal(image,initToImage);
  InterestPointDetector<T> detector=alg.getAlgorithm();
  detector.detect(image);
  List<Point2D_I32> found=createDetectionList(detector);
  int numMissed=0;
  for (  Point2D_I32 origPt : original) {
    double bestDist=Double.MAX_VALUE;
    for (    Point2D_I32 p : found) {
      double d=UtilPoint2D_I32.distance(origPt,p);
      if (d < bestDist) {
        bestDist=d;
      }
    }
    if (bestDist > matchTolerance) {
      numMissed++;
    }
  }
  double[] results=new double[3];
  results[0]=original.size();
  results[1]=100.0 * (original.size() - numMissed) / (double)original.size();
  return results;
}","@Override public double[] evaluateImage(BenchmarkAlgorithm alg,T image,DistortParam param){
  Affine2D_F32 initToImage=StabilityEvaluatorPoint.createTransform(param.scale,param.rotation,image.width,image.height);
  List<Point2D_I32> original=transformOriginal(image,initToImage);
  InterestPointDetector<T> detector=alg.getAlgorithm();
  detector.detect(image);
  List<Point2D_I32> found=createDetectionList(detector);
  int numMissed=0;
  for (  Point2D_I32 origPt : original) {
    double bestDist=Double.MAX_VALUE;
    for (    Point2D_I32 p : found) {
      double d=UtilPoint2D_I32.distance(origPt,p);
      if (d < bestDist) {
        bestDist=d;
      }
    }
    if (bestDist > matchTolerance) {
      numMissed++;
    }
  }
  double[] results=new double[3];
  results[0]=original.size();
  results[1]=100.0 * (original.size() - numMissed) / (double)original.size();
  return results;
}",0.9892594686263426
151127,"public List<MetricResult> evaluate(BufferedImage original){
  T image=ConvertBufferedImage.convertFrom(original,null,imageType);
  T noisy=(T)image._createNew(image.width,image.height);
  evaluator.extractInitial(alg,image);
  List<MetricResult> results=createResultsStorage(evaluator,variable);
  for (int i=0; i < variable.length; i++) {
    distortImage(image,distortedImage,variable[i]);
    DistortParam param=createDistortParam(variable[i]);
    double[] metrics=evaluator.evaluateImage(alg,distortedImage,param);
    for (int j=0; j < results.size(); j++) {
      results.get(j).observed[i]=metrics[j];
    }
  }
  return results;
}","public List<MetricResult> evaluate(BufferedImage original){
  T image=ConvertBufferedImage.convertFrom(original,null,imageType);
  evaluator.extractInitial(alg,image);
  List<MetricResult> results=createResultsStorage(evaluator,variable);
  for (int i=0; i < variable.length; i++) {
    distortImage(image,distortedImage,variable[i]);
    DistortParam param=createDistortParam(variable[i]);
    double[] metrics=evaluator.evaluateImage(alg,distortedImage,param);
    for (int j=0; j < results.size(); j++) {
      results.get(j).observed[i]=metrics[j];
    }
  }
  return results;
}",0.9533169533169532
151128,"public static <T extends ImageBase>BenchmarkFeatureDistort<T> rotate(Class<T> imageType){
  double thetas[]=UtilOrientationBenchmark.makeSample(0,Math.PI,20);
  return new Rotation<T>(SEED,thetas,imageType);
}","public static <T extends ImageBase>BenchmarkFeatureDistort<T> rotate(Class<T> imageType){
  double thetas[]=UtilOrientationBenchmark.makeSample(0,2.0 * Math.PI,20);
  return new Rotation<T>(SEED,thetas,imageType);
}",0.9858490566037736
151129,"@Override protected void distortImage(T image,T distortedImage,double scale){
  distortedImage.reshape(image.width,image.height);
  Affine2D_F32 initToImage=StabilityEvaluatorPoint.createScale((float)scale,image.width,image.height);
  Affine2D_F32 imageToInit=initToImage.invert(null);
  PixelTransformAffine affine=new PixelTransformAffine(imageToInit);
  ImageDistort<T> distorter=DistortSupport.createDistort(imageType,affine,TypeInterpolate.BILINEAR);
  distorter.apply(image,distortedImage,125);
}","@Override protected void distortImage(T image,T distortedImage,double scale){
  distortedImage.reshape(image.width,image.height);
  Affine2D_F32 initToImage=StabilityEvaluatorPoint.createScale((float)scale,image.width,image.height);
  Affine2D_F32 imageToInit=initToImage.invert(null);
  PixelTransformAffine affine=new PixelTransformAffine(imageToInit);
  InterpolatePixel<T> interp=FactoryInterpolation.createPixel(0,255,TypeInterpolate.BILINEAR,imageType);
  ImageDistort<T> distorter=DistortSupport.createDistort(imageType,affine,interp,null);
  distorter.apply(image,distortedImage);
}",0.7216117216117216
151130,"public static Affine2D_F32 createTransform(double scale,double theta,ImageBase image){
  Affine2D_F32 a=createScale((float)scale,image.width,image.height);
  Affine2D_F32 b=DistortSupport.transformRotate(image.width / 2f,image.height / 2f,(float)theta).getModel();
  return a.concat(b,null);
}","public static Affine2D_F32 createTransform(double scale,double theta,int imageWidth,int imageHeight){
  Affine2D_F32 a=createScale((float)scale,imageWidth,imageHeight);
  Affine2D_F32 b=DistortSupport.transformRotate(imageWidth / 2,imageHeight / 2,imageWidth / 2,imageHeight / 2,(float)theta).getModel();
  return a.concat(b,null).invert(null);
}",0.7887323943661971
151131,"public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociationTuple.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}","public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociationTuple.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}",0.9595375722543352
151132,"public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociation.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}","public static void main(String args[]){
  double tolerance=3;
  ScoreAssociation score=new ScoreAssociateEuclideanSq();
  GeneralAssociation<TupleDesc_F64> assoc=FactoryAssociation.greedy(score,Double.MAX_VALUE,-1,true);
  BenchmarkFeatureHomography app=new BenchmarkFeatureHomography(assoc,""String_Node_Str"",""String_Node_Str"",tolerance);
  app.evaluate(""String_Node_Str"");
  app.evaluate(""String_Node_Str"");
}",0.9213483146067416
151133,"public static <T extends ImageBase>void doStuff(String directory,String imageSuffix,Class<T> imageType) throws FileNotFoundException {
  int radius=12;
  int numAngles=8;
  int numJoints=2;
  IntensityGraphDesc graph=createCircle(radius,numAngles,numJoints);
  connectSpiderWeb(numAngles,numJoints,graph);
  ExtractFeatureDescription<T> alg=FactoryExtractFeatureDescription.brief(16,512,-1,4,false,imageType);
  OrientationImage<T> orientation=FactoryOrientationAlgs.nogradient(alg.getRadius(),imageType);
  CreateDescriptionFile<T> cdf=new CreateDescriptionFile<T>(alg,orientation,imageType,""String_Node_Str"");
  cdf.directory(directory,imageSuffix,""String_Node_Str"");
}","public static <T extends ImageBase>void doStuff(String directory,String imageSuffix,Class<T> imageType) throws FileNotFoundException {
  ExtractFeatureDescription<T> alg=FactoryExtractFeatureDescription.surf(true,imageType);
  int radius=12;
  int numAngles=8;
  int numJoints=2;
  IntensityGraphDesc graph=createCircle(radius,numAngles,numJoints);
  connectSpiderWeb(numAngles,numJoints,graph);
  OrientationImage<T> orientation=FactoryOrientationAlgs.nogradient(alg.getRadius(),imageType);
  CreateDescriptionFile<T> cdf=new CreateDescriptionFile<T>(alg,orientation,imageType,""String_Node_Str"");
  cdf.directory(directory,imageSuffix,""String_Node_Str"");
}",0.8539156626506024
151134,"public static void main(String args[]) throws FileNotFoundException {
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
}","public static void main(String args[]) throws FileNotFoundException {
  doStuff(""String_Node_Str"",""String_Node_Str"",ImageFloat32.class);
}",0.3704697986577181
151135,"private void printWeighted(){
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void printWeighted(){
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.972543352601156
151136,"private void printPreamble(){
  out.print(CodeGeneratorUtil.copyright);
  out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + imageType.getImageName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void printPreamble() throws FileNotFoundException {
  setOutputFile(className);
  out.print(""String_Node_Str"" + ""String_Node_Str"" + imageType.getImageName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ className+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str""+ imageType.getImageName()+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9179548156956004
151137,"@Override protected double computeWeightedOrientation(int c_x,int c_y){
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}","@Override protected double computeWeightedOrientation(int c_x,int c_y){
  computeAngles();
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}",0.989136649514008
151138,"@Override protected double computeWeightedOrientation(int c_x,int c_y){
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}","@Override protected double computeWeightedOrientation(int c_x,int c_y){
  computeAngles();
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}",0.989136649514008
151139,"@Override protected double computeWeightedOrientation(int c_x,int c_y){
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}","@Override protected double computeWeightedOrientation(int c_x,int c_y){
  computeAngles();
  double windowRadius=windowSize / 2.0;
  int w=rect.x1 - rect.x0;
  double bestScore=-1;
  double bestAngle=0;
  double stepAngle=Math.PI * 2.0 / numAngles;
  int N=w * (rect.y1 - rect.y0);
  for (double angle=-Math.PI; angle < Math.PI; angle+=stepAngle) {
    double dx=0;
    double dy=0;
    for (int i=0; i < N; i++) {
      double diff=UtilAngle.dist(angle,angles[i]);
      if (diff <= windowRadius) {
        int localX=i % w;
        int localY=i / w;
        double ww=weights.get(localX,localY);
        int x=rect.x0 + i % w;
        int y=rect.y0 + i / w;
        dx+=ww * derivX.get(x,y);
        dy+=ww * derivY.get(x,y);
      }
    }
    double n=dx * dx + dy * dy;
    if (n > bestScore) {
      bestAngle=Math.atan2(dy,dx);
      bestScore=n;
    }
  }
  return bestAngle;
}",0.989136649514008
151140,"@Override public void init(){
  showStatus(""String_Node_Str"");
  String directory=getParameter(""String_Node_Str"");
  final BufferedImage image=loadImage(directory + ""String_Node_Str"");
  final String panelPath=getParameter(""String_Node_Str"");
  Class inputType=ImageFloat32.class;
  showStatus(""String_Node_Str"");
  final JComponent comp=FactoryVisualPanel.create(panelPath,inputType);
  if (comp == null) {
    showStatus(""String_Node_Str"");
  }
 else   if (!(comp instanceof ProcessImage)) {
    showStatus(""String_Node_Str"");
    return;
  }
  SelectInputImageToolBar toolbar=new SelectInputImageToolBar(comp);
  toolbar.addImage(""String_Node_Str"",directory + ""String_Node_Str"");
  toolbar.addImage(""String_Node_Str"",directory + ""String_Node_Str"");
  toolbar.addImage(""String_Node_Str"",directory + ""String_Node_Str"");
  UtilVisualize.manageSelectInput(toolbar,(ProcessImage)comp,getCodeBase(),true);
  getContentPane().add(toolbar,BorderLayout.CENTER);
}","@Override public void init(){
  showStatus(""String_Node_Str"");
  String directory=getParameter(""String_Node_Str"");
  final String panelPath=getParameter(""String_Node_Str"");
  Class inputType=ImageFloat32.class;
  showStatus(""String_Node_Str"");
  final JComponent comp=FactoryVisualPanel.create(panelPath,inputType);
  if (comp == null) {
    showStatus(""String_Node_Str"");
  }
 else   if (!(comp instanceof ProcessImage)) {
    showStatus(""String_Node_Str"");
    return;
  }
  showStatus(""String_Node_Str"");
  ProcessImage p=(ProcessImage)comp;
  AppletImageListManager manager=new AppletImageListManager(getCodeBase());
  manager.add(""String_Node_Str"",directory + ""String_Node_Str"");
  manager.add(""String_Node_Str"",directory + ""String_Node_Str"");
  manager.add(""String_Node_Str"",directory + ""String_Node_Str"");
  p.setImageManager(manager);
  while (!p.getHasProcessedImage()) {
    Thread.yield();
  }
  showStatus(""String_Node_Str"");
  getContentPane().add(comp,BorderLayout.CENTER);
}",0.527235354573484
151141,"@Override public void process(BufferedImage input){
  this.input=input;
  final int width=input.getWidth();
  final int height=input.getHeight();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      setPreferredSize(new Dimension(width,height));
      refreshAlgorithm();
    }
  }
);
}","@Override public void process(BufferedImage input){
  this.input=input;
  final int width=input.getWidth();
  final int height=input.getHeight();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      setPreferredSize(new Dimension(width,height));
      processedImage=true;
      refreshAlgorithm();
    }
  }
);
}",0.9578783151326054
151142,"public void run(){
  setPreferredSize(new Dimension(width,height));
  refreshAlgorithm();
}","public void run(){
  setPreferredSize(new Dimension(width,height));
  processedImage=true;
  refreshAlgorithm();
}",0.8878048780487805
151143,"public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  ShowEdgeContourApp<ImageFloat32,ImageFloat32> app=new ShowEdgeContourApp<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  app.process(input);
  ShowImages.showWindow(app,""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","public static void main(String args[]){
  ShowEdgeContourApp<ImageFloat32,ImageFloat32> app=new ShowEdgeContourApp<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setImageManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.4805194805194805
151144,"public ShowEdgeContourApp(Class<T> imageType,Class<D> derivType){
  this.imageType=imageType;
  this.derivType=derivType;
  addAlgorithm(""String_Node_Str"",null);
  addAlgorithm(""String_Node_Str"",FactoryDetectEdgeContour.canny(1,40,imageType,derivType));
  addAlgorithm(""String_Node_Str"",FactoryDetectEdgeContour.<T>binarySimple());
  add(panel,BorderLayout.CENTER);
}","public ShowEdgeContourApp(Class<T> imageType,Class<D> derivType){
  this.imageType=imageType;
  this.derivType=derivType;
  addAlgorithm(""String_Node_Str"",null);
  addAlgorithm(""String_Node_Str"",FactoryDetectEdgeContour.canny(1,40,imageType,derivType));
  addAlgorithm(""String_Node_Str"",FactoryDetectEdgeContour.<T>binarySimple());
  addMainGUI(panel);
}",0.9459084604715672
151145,"@Override public synchronized void process(final BufferedImage input){
  this.input=input;
  workImage=ConvertBufferedImage.convertFrom(input,null,imageType);
  ss.setImage(workImage);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      setPreferredSize(new Dimension(input.getWidth(),input.getHeight()));
    }
  }
);
  refreshAlgorithm();
}","@Override public void process(final BufferedImage input){
  setInputImage(input);
  this.input=input;
  workImage=ConvertBufferedImage.convertFrom(input,null,imageType);
  ss.setImage(workImage);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      setPreferredSize(new Dimension(input.getWidth() + 50,input.getHeight()));
      processedImage=true;
    }
  }
);
  refreshAlgorithm();
}",0.8897535667963683
151146,"public IntensityFeatureScaleSpaceApp(Class<T> imageType,Class<D> derivType){
  this.imageType=imageType;
  addAlgorithm(""String_Node_Str"",new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.DETERMINANT,derivType));
  addAlgorithm(""String_Node_Str"",new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.TRACE,derivType));
  addAlgorithm(""String_Node_Str"",new WrapperGradientCornerIntensity<T,D>(FactoryPointIntensityAlg.createHarris(derivType,2,0.4f)));
  addAlgorithm(""String_Node_Str"",new WrapperGradientCornerIntensity<T,D>(FactoryPointIntensityAlg.createKlt(derivType,2)));
  addAlgorithm(""String_Node_Str"",new WrapperFastCornerIntensity<T,D>(FactoryPointIntensityAlg.createFast12(imageType,5,11)));
  addAlgorithm(""String_Node_Str"",new WrapperKitRosCornerIntensity<T,D>(derivType));
  addAlgorithm(""String_Node_Str"",new WrapperMedianCornerIntensity<T,D>(FactoryBlurFilter.median(imageType,2),imageType));
  add(gui,BorderLayout.CENTER);
  ss=FactoryGaussianScaleSpace.nocache(imageType);
  double scales[]=new double[25];
  for (int i=0; i < scales.length; i++) {
    scales[i]=Math.exp(i * 0.15);
  }
  ss.setScales(scales);
}","public IntensityFeatureScaleSpaceApp(Class<T> imageType,Class<D> derivType){
  this.imageType=imageType;
  addAlgorithm(""String_Node_Str"",new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.DETERMINANT,derivType));
  addAlgorithm(""String_Node_Str"",new WrapperLaplacianBlobIntensity<T,D>(HessianBlobIntensity.Type.TRACE,derivType));
  addAlgorithm(""String_Node_Str"",new WrapperGradientCornerIntensity<T,D>(FactoryPointIntensityAlg.createHarris(derivType,2,0.4f)));
  addAlgorithm(""String_Node_Str"",new WrapperGradientCornerIntensity<T,D>(FactoryPointIntensityAlg.createKlt(derivType,2)));
  addAlgorithm(""String_Node_Str"",new WrapperFastCornerIntensity<T,D>(FactoryPointIntensityAlg.createFast12(imageType,5,11)));
  addAlgorithm(""String_Node_Str"",new WrapperKitRosCornerIntensity<T,D>(derivType));
  addAlgorithm(""String_Node_Str"",new WrapperMedianCornerIntensity<T,D>(FactoryBlurFilter.median(imageType,2),imageType));
  addMainGUI(gui);
  ss=FactoryGaussianScaleSpace.nocache(imageType);
  double scales[]=new double[25];
  for (int i=0; i < scales.length; i++) {
    scales[i]=Math.exp(i * 0.15);
  }
  ss.setScales(scales);
}",0.9882455376578144
151147,"@Override public synchronized void setActiveAlgorithm(String name,Object cookie){
  if (input == null) {
    return;
  }
  GeneralFeatureIntensity<T,D> intensity=(GeneralFeatureIntensity<T,D>)cookie;
  gui.reset();
  gui.addImage(input,""String_Node_Str"");
  BufferedImage b=VisualizeImageData.grayMagnitude(workImage,null,255);
  gui.addImage(b,""String_Node_Str"");
  final ProgressMonitor progressMonitor=new ProgressMonitor(this,""String_Node_Str"",""String_Node_Str"",0,ss.getTotalScales());
  for (int i=0; i < ss.getTotalScales() && !progressMonitor.isCanceled(); i++) {
    ss.setActiveScale(i);
    double scale=ss.getCurrentScale();
    T scaledImage=ss.getScaledImage();
    D derivX=ss.getDerivative(true);
    D derivY=ss.getDerivative(false);
    D derivXX=ss.getDerivative(true,true);
    D derivYY=ss.getDerivative(false,false);
    D derivXY=ss.getDerivative(true,false);
    intensity.process(scaledImage,derivX,derivY,derivXX,derivYY,derivXY);
    ImageFloat32 featureImg=intensity.getIntensity();
    b=VisualizeImageData.colorizeSign(featureImg,null,PixelMath.maxAbs(featureImg));
    gui.addImage(b,String.format(""String_Node_Str"",scale));
    final int progressStatus=i + 1;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        progressMonitor.setProgress(progressStatus);
      }
    }
);
  }
  gui.requestFocusInWindow();
}","@Override public void setActiveAlgorithm(String name,Object cookie){
  if (input == null) {
    return;
  }
  GeneralFeatureIntensity<T,D> intensity=(GeneralFeatureIntensity<T,D>)cookie;
  gui.reset();
  BufferedImage b=VisualizeImageData.grayMagnitude(workImage,null,255);
  gui.addImage(b,""String_Node_Str"");
  final ProgressMonitor progressMonitor=new ProgressMonitor(this,""String_Node_Str"",""String_Node_Str"",0,ss.getTotalScales());
  for (int i=0; i < ss.getTotalScales() && !progressMonitor.isCanceled(); i++) {
    ss.setActiveScale(i);
    double scale=ss.getCurrentScale();
    T scaledImage=ss.getScaledImage();
    D derivX=ss.getDerivative(true);
    D derivY=ss.getDerivative(false);
    D derivXX=ss.getDerivative(true,true);
    D derivYY=ss.getDerivative(false,false);
    D derivXY=ss.getDerivative(true,false);
    intensity.process(scaledImage,derivX,derivY,derivXX,derivYY,derivXY);
    ImageFloat32 featureImg=intensity.getIntensity();
    b=VisualizeImageData.colorizeSign(featureImg,null,PixelMath.maxAbs(featureImg));
    gui.addImage(b,String.format(""String_Node_Str"",scale));
    final int progressStatus=i + 1;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        progressMonitor.setProgress(progressStatus);
      }
    }
);
  }
  gui.requestFocusInWindow();
}",0.9798657718120806
151148,"public void run(){
  setPreferredSize(new Dimension(input.getWidth(),input.getHeight()));
}","public void run(){
  setPreferredSize(new Dimension(input.getWidth() + 50,input.getHeight()));
  processedImage=true;
}",0.8666666666666667
151149,"public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32> app=new IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  app.process(input);
  ShowImages.showWindow(app,""String_Node_Str"");
}","public static void main(String args[]){
  IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32> app=new IntensityFeatureScaleSpaceApp<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
  ImageListManager manager=new ImageListManager();
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  manager.add(""String_Node_Str"",""String_Node_Str"");
  app.setImageManager(manager);
  while (!app.getHasProcessedImage()) {
    Thread.yield();
  }
  ShowImages.showWindow(app,""String_Node_Str"");
}",0.5778781038374717
151150,"public static <T extends ImageBase,D extends ImageBase>void doStuff(BufferedImage input,Class<T> imageType,Class<D> derivType){
  T workImage=ConvertBufferedImage.convertFrom(input,null,imageType);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  deriv.setInput(workImage);
  int r=2;
  GeneralFeatureDetector<T,D> detector=FactoryCornerDetector.createHarris(r,1,NUM_FEATURES,derivType);
  D derivX=null, derivY=null, derivXX=null, derivYY=null, derivXY=null;
  if (detector.getRequiresGradient()) {
    derivX=deriv.getDerivative(true);
    derivY=deriv.getDerivative(false);
  }
 else   if (detector.getRequiresHessian()) {
    derivXX=deriv.getDerivative(true,true);
    derivYY=deriv.getDerivative(false,false);
    derivXY=deriv.getDerivative(true,false);
  }
  detector.process(workImage,derivX,derivY,derivXX,derivYY,derivXY);
  OrientationHistogram<D> orientation=FactoryRegionOrientation.histogram(10,1,false,derivType);
  QueueCorner points=detector.getFeatures();
  FancyInterestPointRender render=new FancyInterestPointRender();
  orientation.setImage(deriv.getDerivative(true),deriv.getDerivative(false));
  for (int i=0; i < points.num; i++) {
    Point2D_I16 p=points.get(i);
    int radius=10;
    orientation.setRadius(radius);
    double angle=orientation.compute(p.x,p.y);
    render.addCircle(p.x,p.y,radius,Color.RED,angle);
  }
  render.draw(input.createGraphics());
  ShowImages.showWindow(input,""String_Node_Str"" + imageType.getSimpleName());
}","public static <T extends ImageBase,D extends ImageBase>void doStuff(BufferedImage input,Class<T> imageType,Class<D> derivType){
  T workImage=ConvertBufferedImage.convertFrom(input,null,imageType);
  AnyImageDerivative<T,D> deriv=UtilScaleSpace.createDerivatives(imageType,FactoryImageGenerator.create(derivType));
  deriv.setInput(workImage);
  int r=2;
  GeneralFeatureDetector<T,D> detector=FactoryCornerDetector.createHarris(r,1,NUM_FEATURES,derivType);
  D derivX=null, derivY=null, derivXX=null, derivYY=null, derivXY=null;
  if (detector.getRequiresGradient()) {
    derivX=deriv.getDerivative(true);
    derivY=deriv.getDerivative(false);
  }
 else   if (detector.getRequiresHessian()) {
    derivXX=deriv.getDerivative(true,true);
    derivYY=deriv.getDerivative(false,false);
    derivXY=deriv.getDerivative(true,false);
  }
  detector.process(workImage,derivX,derivY,derivXX,derivYY,derivXY);
  OrientationAverage<D> orientation=FactoryRegionOrientationAlgs.average(1,false,derivType);
  QueueCorner points=detector.getFeatures();
  System.out.println(""String_Node_Str"" + points.size());
  FancyInterestPointRender render=new FancyInterestPointRender();
  orientation.setImage(deriv.getDerivative(true),deriv.getDerivative(false));
  for (int i=0; i < points.num; i++) {
    Point2D_I16 p=points.get(i);
    int radius=10;
    orientation.setRadius(radius);
    double angle=orientation.compute(p.x,p.y);
    render.addCircle(p.x,p.y,radius,Color.RED,angle);
  }
  render.draw(input.createGraphics());
  ShowImages.showWindow(input,""String_Node_Str"" + imageType.getSimpleName());
}",0.9686900958466452
151151,"public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  doStuff(input,ImageFloat32.class,ImageFloat32.class);
  System.out.println(""String_Node_Str"");
}","public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  doStuff(input,ImageUInt8.class,ImageSInt16.class);
  System.out.println(""String_Node_Str"");
}",0.9451697127937336
151152,"public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  doStuff(input,ImageFloat32.class,ImageFloat32.class);
  doStuff(input,ImageUInt8.class,ImageSInt16.class);
  System.out.println(""String_Node_Str"");
}","public static void main(String args[]){
  BufferedImage input=UtilImageIO.loadImage(fileName);
  doStuff(input,ImageFloat32.class,ImageFloat32.class);
  input=UtilImageIO.loadImage(fileName);
  doStuff(input,ImageUInt8.class,ImageSInt16.class);
  System.out.println(""String_Node_Str"");
}",0.9230769230769232
151153,"public <T extends ImageBase,D extends ImageBase,K extends Kernel2D>DescribePointSteerable2D<T,D,K> steerableGaussian(int radius,int numAngles,boolean weighted,Class<T> imageType,Class<D> derivType){
  SteerableKernel<K>[] kernels=(SteerableKernel<K>[])new SteerableKernel[14];
  Class<K> kernelType=(Class)FactoryKernel.getKernelType(imageType,2);
  int index=0;
  for (int N=1; N <= 4; N++) {
    for (int i=0; i <= N; i++) {
      int orderX=N - i;
      kernels[index++]=FactorySteerable.gaussian(kernelType,orderX,i,radius);
    }
  }
  RegionOrientation<D> orientation=FactoryRegionOrientation.histogram(numAngles,radius,weighted,derivType);
  return new DescribePointSteerable2D<T,D,K>(orientation,kernels,imageType);
}","public <T extends ImageBase,D extends ImageBase,K extends Kernel2D>DescribePointSteerable2D<T,D,K> steerableGaussian(int radius,int numAngles,boolean weighted,Class<T> imageType,Class<D> derivType){
  SteerableKernel<K>[] kernels=(SteerableKernel<K>[])new SteerableKernel[14];
  Class<K> kernelType=(Class)FactoryKernel.getKernelType(imageType,2);
  int index=0;
  for (int N=1; N <= 4; N++) {
    for (int i=0; i <= N; i++) {
      int orderX=N - i;
      kernels[index++]=FactorySteerable.gaussian(kernelType,orderX,i,radius);
    }
  }
  RegionOrientation<D> orientation=FactoryRegionOrientationAlgs.histogram(numAngles,radius,weighted,derivType);
  return new DescribePointSteerable2D<T,D,K>(orientation,kernels,imageType);
}",0.997248968363136
151154,"@Override public double compute(int c_x,int c_y){
  rect.x0=c_x - radius;
  rect.y0=c_y - radius;
  rect.x1=c_x + radius + 1;
  rect.y1=c_y + radius + 1;
  GecvMiscOps.boundRectangleInside(derivX,rect);
  for (int i=0; i < numAngles; i++) {
    sumDerivX[i]=0;
    sumDerivY[i]=0;
  }
  if (weights == null)   computeUnweightedScore();
 else   computeWeightedScore(c_x,c_y);
  double bestScore=-1;
  int bestIndex=-1;
  for (int i=0; i < numAngles; i++) {
    double x=sumDerivX[i];
    double y=sumDerivY[i];
    double score=x * x + y * y;
    if (score > bestScore) {
      bestScore=score;
      bestIndex=i;
    }
  }
  return angleDiv * bestIndex;
}","@Override public double compute(int c_x,int c_y){
  rect.x0=c_x - radius;
  rect.y0=c_y - radius;
  rect.x1=c_x + radius + 1;
  rect.y1=c_y + radius + 1;
  GecvMiscOps.boundRectangleInside(derivX,rect);
  for (int i=0; i < numAngles; i++) {
    sumDerivX[i]=0;
    sumDerivY[i]=0;
  }
  if (weights == null)   computeUnweightedScore();
 else   computeWeightedScore(c_x,c_y);
  double bestScore=-1;
  int bestIndex=-1;
  for (int i=0; i < numAngles; i++) {
    double x=sumDerivX[i];
    double y=sumDerivY[i];
    double score=x * x + y * y;
    if (score > bestScore) {
      bestScore=score;
      bestIndex=i;
    }
  }
  return angleDiv * bestIndex - Math.PI;
}",0.9924242424242424
151155,"@Override public void process(){
  BinaryImageOps.labelBlobs4(input,output,coexist);
}","@Override public void process(){
  BinaryImageOps.labelBlobs4(input,output,work);
}",0.9467455621301776
151156,"/** 
 * <p> Connects pixels together using an 8-connect rule.  Each cluster of connected pixels (a blob) is given a unique number >= 1. </p> <p> The coexist table is used internally to store intermediate results.  It is used supplied because pre-allocating the array was shown to improve performance about 5 times. </p>
 * @param input Binary input image.
 * @param output The labeled blob image. Modified.
 * @param coexist An N by N integer[][] array.  N should be several times larger than the expected numberof blobs.  Worst case it will need to be input.width*input.height/4.
 * @return How many blobs were found.
 */
public static int labelBlobs8(ImageUInt8 input,ImageSInt32 output,int coexist[][]){
  InputSanityCheck.checkSameShape(input,output);
  int numBlobs=ImplBinaryBlobLabeling.quickLabelBlobs8(input,output,coexist);
  ImplBinaryBlobLabeling.optimizeCoexistTable(coexist,numBlobs);
  int table[]=new int[numBlobs + 1];
  int newNumBlobs=ImplBinaryBlobLabeling.minimizeBlobID(coexist,numBlobs,table);
  ImplBinaryBlobLabeling.relabelBlobs(output,table);
  return newNumBlobs;
}","/** 
 * <p> Connects pixels together using an 8-connect rule.  Each cluster of connected pixels (a blob) is given a unique number >= 1. </p> <p> The coexist table is used internally to store intermediate results.  It is used supplied because pre-allocating the array was shown to improve performance about 5 times. </p>
 * @param input Binary input image.
 * @param output The labeled blob image. Modified.
 * @param work Used to store intermediate labeling results.  In general it is at most 3 or 4 times larger than theexpected max number of blobs.  Worst case it will be (width*height)/4
 * @return How many blobs were found.
 */
public static int labelBlobs8(ImageUInt8 input,ImageSInt32 output,int work[]){
  InputSanityCheck.checkSameShape(input,output);
  int numBlobs=ImplBinaryBlobLabeling.quickLabelBlobs8(input,output,work);
  ImplBinaryBlobLabeling.optimizeMaxConnect(work,numBlobs);
  int newNumBlobs=ImplBinaryBlobLabeling.minimizeBlobID(work,numBlobs);
  ImplBinaryBlobLabeling.relabelBlobs(output,work);
  return newNumBlobs;
}",0.8267790262172284
151157,"/** 
 * Only converts the specified blobs over into the binary image
 * @param labelImage Input image. Not modified.
 * @param binaryImage Output image. Modified.
 * @param selectedBlobs List of blobs that should be copied to the binary image.
 * @return The binary image.
 */
public static ImageUInt8 labelToBinary(ImageSInt32 labelImage,ImageUInt8 binaryImage,int selectedBlobs[]){
  binaryImage=InputSanityCheck.checkDeclare(labelImage,binaryImage,ImageUInt8.class);
  for (int y=0; y < labelImage.height; y++) {
    int indexIn=labelImage.startIndex + y * labelImage.stride;
    int indexOut=binaryImage.startIndex + y * binaryImage.stride;
    int end=indexIn + labelImage.width;
    for (; indexIn < end; indexIn++, indexOut++) {
      int val=labelImage.data[indexIn];
      if (0 == val) {
        binaryImage.data[indexOut]=0;
      }
 else {
        boolean found=false;
        for (int i=0; i < selectedBlobs.length; i++) {
          if (val == selectedBlobs[i]) {
            found=true;
            break;
          }
        }
        if (found) {
          binaryImage.data[indexOut]=1;
        }
 else {
          binaryImage.data[indexOut]=0;
        }
      }
    }
  }
  return binaryImage;
}","/** 
 * Only converts the specified blobs over into the binary image
 * @param labelImage Input image. Not modified.
 * @param binaryImage Output image. Modified.
 * @param selectedBlobs Each index corresponds to a blob and specifies if it is included or not.
 * @return The binary image.
 */
public static ImageUInt8 labelToBinary(ImageSInt32 labelImage,ImageUInt8 binaryImage,boolean selectedBlobs[]){
  binaryImage=InputSanityCheck.checkDeclare(labelImage,binaryImage,ImageUInt8.class);
  for (int y=0; y < labelImage.height; y++) {
    int indexIn=labelImage.startIndex + y * labelImage.stride;
    int indexOut=binaryImage.startIndex + y * binaryImage.stride;
    int end=indexIn + labelImage.width;
    for (; indexIn < end; indexIn++, indexOut++) {
      int val=labelImage.data[indexIn];
      if (0 == val) {
        binaryImage.data[indexOut]=0;
      }
 else {
        if (selectedBlobs[val]) {
          binaryImage.data[indexOut]=1;
        }
 else {
          binaryImage.data[indexOut]=0;
        }
      }
    }
  }
  return binaryImage;
}",0.8610498456109396
151158,"/** 
 * <p> Connects pixels together using an 4-connect rule.  Each cluster of connected pixels (a blob) is given a unique number >= 1. </p> <p> The coexist table is used internally to store intermediate results.  It is used supplied because pre-allocating the array was shown to improve performance about 5 times. </p>
 * @param input Binary input image.
 * @param output The labeled blob image. Modified.
 * @param coexist An N by N integer[][] array.  N should be several times larger than the expected numberof blobs.  Worst case it will need to be input.width*input.height/4.
 * @return How many blobs were found.
 */
public static int labelBlobs4(ImageUInt8 input,ImageSInt32 output,int coexist[][]){
  InputSanityCheck.checkSameShape(input,output);
  int numBlobs=ImplBinaryBlobLabeling.quickLabelBlobs4(input,output,coexist);
  ImplBinaryBlobLabeling.optimizeCoexistTable(coexist,numBlobs);
  int table[]=new int[numBlobs + 1];
  int newNumBlobs=ImplBinaryBlobLabeling.minimizeBlobID(coexist,numBlobs,table);
  ImplBinaryBlobLabeling.relabelBlobs(output,table);
  return newNumBlobs;
}","/** 
 * <p> Connects pixels together using an 4-connect rule.  Each cluster of connected pixels (a blob) is given a unique number >= 1. </p> <p> The coexist table is used internally to store intermediate results.  It is used supplied because pre-allocating the array was shown to improve performance about 5 times. </p>
 * @param input Binary input image.
 * @param output The labeled blob image. Modified.
 * @param work Used to store intermediate labeling results.  In general it is at most 3 or 4 times larger than theexpected max number of blobs.  Worst case it will be (width*height)/2
 * @return How many blobs were found.
 */
public static int labelBlobs4(ImageUInt8 input,ImageSInt32 output,int work[]){
  InputSanityCheck.checkSameShape(input,output);
  int numBlobs=ImplBinaryBlobLabeling.quickLabelBlobs4(input,output,work);
  ImplBinaryBlobLabeling.optimizeMaxConnect(work,numBlobs);
  int newNumBlobs=ImplBinaryBlobLabeling.minimizeBlobID(work,numBlobs);
  ImplBinaryBlobLabeling.relabelBlobs(output,work);
  return newNumBlobs;
}",0.8258426966292135
151159,"private void useThresholdMorph(ImageUInt8 input,double threshold){
  ImageSInt32 labeled=new ImageSInt32(input.width,input.height);
  ImageUInt8 thresholded=ThresholdImageOps.threshold(input,null,(int)threshold,true);
  ImageUInt8 mod=BinaryImageOps.erode8(thresholded,null);
  mod=BinaryImageOps.dilate8(mod,null);
  int numBlobs=BinaryImageOps.labelBlobs4(mod,labeled,null);
  binaryPanel.addImage(VisualizeBinaryData.renderBinary(mod,null),""String_Node_Str"");
  labeledPanel.addItem(new ImageBinaryLabeledPanel(labeled,numBlobs + 1,2342),""String_Node_Str"");
}","private void useThresholdMorph(ImageUInt8 input,double threshold){
  ImageSInt32 labeled=new ImageSInt32(input.width,input.height);
  ImageUInt8 thresholded=ThresholdImageOps.threshold(input,null,(int)threshold,true);
  ImageUInt8 mod=BinaryImageOps.erode8(thresholded,null);
  mod=BinaryImageOps.dilate8(mod,null);
  int numBlobs=BinaryImageOps.labelBlobs4(mod,labeled);
  binaryPanel.addImage(VisualizeBinaryData.renderBinary(mod,null),""String_Node_Str"");
  labeledPanel.addItem(new ImageBinaryLabeledPanel(labeled,numBlobs + 1,2342),""String_Node_Str"");
}",0.9955317247542448
151160,"public void process(ImageUInt8 original){
  colors=new int[original.width * original.height / 4];
  for (int i=1; i < colors.length; i++) {
    colors[i]=rand.nextInt(0xFFFFFF);
  }
  double average=PixelMath.sum(original) / (double)(original.width * original.height);
  average*=0.8;
  useThreshold(original,average);
  ShowImages.showWindow(binaryPanel,""String_Node_Str"");
  ShowImages.showWindow(labeledPanel,""String_Node_Str"");
}","public void process(ImageUInt8 original){
  colors=new int[original.width * original.height / 4];
  for (int i=1; i < colors.length; i++) {
    colors[i]=rand.nextInt(0xFFFFFF);
  }
  double average=PixelMath.sum(original) / (double)(original.width * original.height);
  average*=0.8;
  useThreshold(original,average);
  useHysteresis4(original,average);
  useHysteresis8(original,average);
  useThresholdMorph(original,average);
  ShowImages.showWindow(binaryPanel,""String_Node_Str"");
  ShowImages.showWindow(labeledPanel,""String_Node_Str"");
}",0.8863868986693961
151161,"private void useThreshold(ImageUInt8 input,double threshold){
  ImageSInt32 labeled=new ImageSInt32(input.width,input.height);
  ImageUInt8 thresholded=ThresholdImageOps.threshold(input,null,(int)threshold,true);
  int numBlobs=BinaryImageOps.labelBlobs4(thresholded,labeled,null);
  binaryPanel.addImage(VisualizeBinaryData.renderBinary(thresholded,null),""String_Node_Str"");
  labeledPanel.addItem(new ImageBinaryLabeledPanel(labeled,numBlobs + 1,2342),""String_Node_Str"");
}","private void useThreshold(ImageUInt8 input,double threshold){
  ImageSInt32 labeled=new ImageSInt32(input.width,input.height);
  ImageUInt8 thresholded=ThresholdImageOps.threshold(input,null,(int)threshold,true);
  int numBlobs=BinaryImageOps.labelBlobs4(thresholded,labeled);
  binaryPanel.addImage(VisualizeBinaryData.renderBinary(thresholded,null),""String_Node_Str"");
  labeledPanel.addItem(new ImageBinaryLabeledPanel(labeled,numBlobs + 1,2342),""String_Node_Str"");
}",0.9947089947089948
151162,"public static void main(String args[]){
  String imageNames[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : imageNames) {
    BufferedImage image=UtilImageIO.loadImage(""String_Node_Str"" + s);
    BenchmarkInterestStability_Noise<ImageFloat32,ImageFloat32> alg=new BenchmarkInterestStability_Noise<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
    System.out.println(""String_Node_Str"" + s);
    alg.process(image);
  }
}","public static void main(String args[]){
  String imageNames[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : imageNames) {
    BufferedImage image=UtilImageIO.loadImage(""String_Node_Str"" + s);
    BenchmarkInterestStability_Noise<ImageFloat32,ImageFloat32> alg=new BenchmarkInterestStability_Noise<ImageFloat32,ImageFloat32>(ImageFloat32.class,ImageFloat32.class);
    System.out.println(""String_Node_Str"" + s);
    alg.process(image);
  }
}",0.9817073170731708
151163,"public static void main(String args[]){
  GaussianScaleSpace<ImageFloat32,ImageFloat32> ss=FactoryGaussianScaleSpace.nocache_F32(3);
  double scales[]=new double[21];
  for (int i=0; i < scales.length; i++) {
    scales[i]=Math.exp(1.0 + i * 0.1);
  }
  ss.setScales(scales);
  GeneralFeatureIntensity<ImageFloat32,ImageFloat32> intensity;
  intensity=new WrapperLaplacianBlobIntensity<ImageFloat32,ImageFloat32>(LaplaceBlobIntensity.Type.TRACE,ImageFloat32.class);
  BufferedImage input=UtilImageIO.loadImage(fileName);
  ImageFloat32 inputF32=ConvertBufferedImage.convertFrom(input,(ImageFloat32)null);
  ss.setImage(inputF32);
  ListDisplayPanel gui=new ListDisplayPanel();
  ListDisplayPanel guiIntensity=new ListDisplayPanel();
  gui.addImage(input,""String_Node_Str"");
  for (int i=0; i < ss.getTotalScales(); i++) {
    ss.setActiveScale(i);
    double scale=ss.getCurrentScale();
    ImageFloat32 scaledImage=ss.getScaledImage();
    BufferedImage b=ConvertBufferedImage.convertTo(scaledImage,null);
    gui.addImage(b,String.format(""String_Node_Str"",scale));
    ImageFloat32 derivX=ss.getDerivative(true);
    ImageFloat32 derivY=ss.getDerivative(false);
    ImageFloat32 derivXX=ss.getDerivative(true,true);
    ImageFloat32 derivYY=ss.getDerivative(false,false);
    ImageFloat32 derivXY=ss.getDerivative(true,false);
    intensity.process(scaledImage,derivX,derivY,derivXX,derivYY,derivXY);
    ImageFloat32 featureImg=intensity.getIntensity();
    b=VisualizeImageData.grayMagnitude(featureImg,null,PixelMath.maxAbs(featureImg));
    guiIntensity.addImage(b,String.format(""String_Node_Str"",scale));
  }
  ShowImages.showWindow(gui,""String_Node_Str"");
  ShowImages.showWindow(guiIntensity,""String_Node_Str"");
}","public static void main(String args[]){
  GaussianScaleSpace<ImageFloat32,ImageFloat32> ss=FactoryGaussianScaleSpace.nocache_F32(3);
  double scales[]=new double[21];
  for (int i=0; i < scales.length; i++) {
    scales[i]=Math.exp(1.0 + i * 0.1);
  }
  ss.setScales(scales);
  GeneralFeatureIntensity<ImageFloat32,ImageFloat32> intensity;
  intensity=new WrapperLaplacianBlobIntensity<ImageFloat32,ImageFloat32>(LaplaceBlobIntensity.Type.DETERMINANT,ImageFloat32.class);
  BufferedImage input=UtilImageIO.loadImage(fileName);
  ImageFloat32 inputF32=ConvertBufferedImage.convertFrom(input,(ImageFloat32)null);
  ss.setImage(inputF32);
  ListDisplayPanel gui=new ListDisplayPanel();
  ListDisplayPanel guiIntensity=new ListDisplayPanel();
  gui.addImage(input,""String_Node_Str"");
  for (int i=0; i < ss.getTotalScales(); i++) {
    ss.setActiveScale(i);
    double scale=ss.getCurrentScale();
    ImageFloat32 scaledImage=ss.getScaledImage();
    BufferedImage b=ConvertBufferedImage.convertTo(scaledImage,null);
    gui.addImage(b,String.format(""String_Node_Str"",scale));
    ImageFloat32 derivX=ss.getDerivative(true);
    ImageFloat32 derivY=ss.getDerivative(false);
    ImageFloat32 derivXX=ss.getDerivative(true,true);
    ImageFloat32 derivYY=ss.getDerivative(false,false);
    ImageFloat32 derivXY=ss.getDerivative(true,false);
    intensity.process(scaledImage,derivX,derivY,derivXX,derivYY,derivXY);
    ImageFloat32 featureImg=intensity.getIntensity();
    b=VisualizeImageData.grayMagnitude(featureImg,null,PixelMath.maxAbs(featureImg));
    guiIntensity.addImage(b,String.format(""String_Node_Str"",scale));
  }
  ShowImages.showWindow(gui,""String_Node_Str"");
  ShowImages.showWindow(guiIntensity,""String_Node_Str"");
}",0.9971014492753624
151164,"@Override public void process(I input,D derivX,D derivY,D derivXX,D derivYY,D derivXY){
  intensity.reshape(input.width,input.height);
  if (medianImage == null) {
    medianImage=(I)input._createNew(input.width,input.height);
  }
  medianFilter.process(input,medianImage);
  try {
    m.invoke(null,input,medianImage);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}","@Override public void process(I input,D derivX,D derivY,D derivXX,D derivYY,D derivXY){
  intensity.reshape(input.width,input.height);
  if (medianImage == null) {
    medianImage=(I)input._createNew(input.width,input.height);
  }
  medianFilter.process(input,medianImage);
  try {
    m.invoke(null,intensity,input,medianImage);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}",0.9897119341563786
151165,"@Override public void process(){
  BinaryImageOps.labelBlobs4(input,output,work);
}","@Override public void process(){
  BinaryImageOps.labelBlobs4(input,output);
}",0.968944099378882
151166,"public static FilePermissionsExConfiguration fromLoader(ConfigurationLoader<?> loader) throws IOException {
  ConfigurationNode node=loader.load();
  ConfigurationNode fallbackConfig;
  try {
    fallbackConfig=FilePermissionsExConfiguration.loadDefaultConfiguration();
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"",e);
  }
  ConfigTransformations.versions().apply(node);
  node.mergeValuesFrom(fallbackConfig);
  ConfigurationNode defBackendNode=node.getNode(""String_Node_Str"");
  if (defBackendNode.isVirtual() || defBackendNode.getValue() == null) {
    try {
      Class.forName(""String_Node_Str"");
      defBackendNode.setValue(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      defBackendNode.setValue(""String_Node_Str"");
    }
  }
  FilePermissionsExConfiguration config=new FilePermissionsExConfiguration(loader,node);
  config.load();
  return config;
}","public static FilePermissionsExConfiguration fromLoader(ConfigurationLoader<?> loader) throws IOException {
  ConfigurationNode node=loader.load();
  ConfigurationNode fallbackConfig;
  try {
    fallbackConfig=FilePermissionsExConfiguration.loadDefaultConfiguration();
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"",e);
  }
  ConfigTransformations.versions().apply(node);
  node.mergeValuesFrom(fallbackConfig);
  ConfigurationNode defBackendNode=node.getNode(""String_Node_Str"");
  if (defBackendNode.isVirtual() || defBackendNode.getValue() == null) {
    defBackendNode.setValue(""String_Node_Str"");
  }
  FilePermissionsExConfiguration config=new FilePermissionsExConfiguration(loader,node);
  config.load();
  return config;
}",0.8335343787696019
151167,"public DataEntry withoutOption(String key){
  if (!options.containsKey(key)) {
    return this;
  }
  Map<String,String> newOptions=new HashMap<>(options);
  newOptions.remove(key);
  return new DataEntry(permissions,newOptions,parents,defaultValue);
}","public DataEntry withoutOption(String key){
  if (options == null || !options.containsKey(key)) {
    return this;
  }
  Map<String,String> newOptions=new HashMap<>(options);
  newOptions.remove(key);
  return new DataEntry(permissions,newOptions,parents,defaultValue);
}",0.9636711281070746
151168,"public DataEntry withOptions(Map<String,String> values){
  return new DataEntry(permissions,ImmutableMap.copyOf(values),parents,defaultValue);
}","public DataEntry withOptions(Map<String,String> values){
  return new DataEntry(permissions,values == null ? null : ImmutableMap.copyOf(values),parents,defaultValue);
}",0.9230769230769232
151169,"public DataEntry withoutPermission(String permission){
  if (!permissions.containsKey(permission)) {
    return this;
  }
  Map<String,Integer> newPermissions=new HashMap<>(permissions);
  newPermissions.remove(permission);
  return new DataEntry(newPermissions,options,parents,defaultValue);
}","public DataEntry withoutPermission(String permission){
  if (permissions == null || !permissions.containsKey(permission)) {
    return this;
  }
  Map<String,Integer> newPermissions=new HashMap<>(permissions);
  newPermissions.remove(permission);
  return new DataEntry(newPermissions,options,parents,defaultValue);
}",0.962356792144026
151170,"public DataEntry withRemovedParent(String parent){
  final List<String> newParents=new ArrayList<>(parents);
  newParents.remove(parent);
  return new DataEntry(permissions,options,newParents,defaultValue);
}","public DataEntry withRemovedParent(String parent){
  if (this.parents == null || this.parents.isEmpty()) {
    return this;
  }
  final List<String> newParents=new ArrayList<>(parents);
  newParents.remove(parent);
  return new DataEntry(permissions,options,newParents,defaultValue);
}",0.8438133874239351
151171,"public DataEntry withAddedParent(String parent){
  return new DataEntry(permissions,options,ImmutableList.<String>builder().add(parent).addAll(parents).build(),defaultValue);
}","public DataEntry withAddedParent(String parent){
  ImmutableList.Builder<String> parents=ImmutableList.builder();
  parents.add(parent);
  if (this.parents != null) {
    parents.addAll(this.parents);
  }
  return new DataEntry(permissions,options,parents.build(),defaultValue);
}",0.5131578947368421
151172,"public DataEntry withParents(List<String> transform){
  return new DataEntry(permissions,options,ImmutableList.copyOf(transform),defaultValue);
}","public DataEntry withParents(List<String> transform){
  return new DataEntry(permissions,options,transform == null ? null : ImmutableList.copyOf(transform),defaultValue);
}",0.9148264984227128
151173,"public void cacheAll(){
  for (  Map.Entry<String,ImmutableOptionSubjectData> ident : dataStore.getAll(type)) {
    cache.asMap().putIfAbsent(ident.getKey(),ident.getValue());
  }
}","public void cacheAll(){
  for (  String ident : dataStore.getAllIdentifiers(type)) {
    try {
      cache.get(ident);
    }
 catch (    ExecutionException e) {
    }
  }
}",0.56657223796034
151174,"/** 
 * Returns a git.io shortened version of the input
 * @param longUrl The input url
 * @return The shortened URL, or the input url if an error occurs
 */
public static String shortenURL(String longUrl){
  if (longUrl == null) {
    return longUrl;
  }
  try {
    URL url=new URL(""String_Node_Str"");
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String urlParameters=""String_Node_Str"" + longUrl;
    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(URLEncoder.encode(urlParameters,UTF8_ENCODING));
    wr.flush();
    wr.close();
    BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String line;
    StringBuilder sb=new StringBuilder();
    while ((line=rd.readLine()) != null) {
      sb.append(line);
    }
    return ""String_Node_Str"" + sb.toString();
  }
 catch (  Exception e) {
    return longUrl;
  }
}","/** 
 * Returns a git.io shortened version of the input
 * @param longUrl The input url
 * @return The shortened URL, or the input url if an error occurs
 */
public static String shortenURL(String longUrl){
  if (longUrl == null) {
    return longUrl;
  }
  try {
    URL url=new URL(""String_Node_Str"");
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String urlParameters=""String_Node_Str"" + URLEncoder.encode(longUrl,UTF8_ENCODING);
    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(urlParameters);
    wr.flush();
    wr.close();
    BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String line;
    StringBuilder sb=new StringBuilder();
    while ((line=rd.readLine()) != null) {
      sb.append(line);
    }
    return ""String_Node_Str"" + sb.toString();
  }
 catch (  Exception e) {
    return longUrl;
  }
}",0.8935779816513761
151175,"public SQLBackend(PermissionManager manager,ConfigurationSection config) throws PermissionBackendException {
  super(manager,config);
  final String dbUri=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbUser=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbPassword=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    throw new PermissionBackendException(""String_Node_Str"");
  }
  dbDriver=dbUri.split(""String_Node_Str"",2)[0];
  this.ds=new BasicDataSource();
  String driverClass=getDriverClass(dbDriver);
  if (driverClass != null) {
    this.ds.setDriverClassName(driverClass);
  }
  this.ds.setUrl(""String_Node_Str"" + dbUri);
  this.ds.setUsername(dbUser);
  this.ds.setPassword(dbPassword);
  this.ds.setMaxActive(20);
  this.ds.setMaxWait(200);
  if (this.dbDriver.equals(""String_Node_Str"")) {
    this.ds.addConnectionProperty(""String_Node_Str"",""String_Node_Str"");
  }
  try (SQLConnection conn=getSQL()){
    conn.checkConnection();
  }
 catch (  Exception e) {
    if (e.getCause() != null && e.getCause() instanceof Exception) {
      e=(Exception)e.getCause();
    }
    throw new PermissionBackendException(""String_Node_Str"",e);
  }
  getManager().getLogger().info(""String_Node_Str"");
  executor=Executors.newSingleThreadExecutor();
  this.setupAliases();
  this.deployTables();
}","public SQLBackend(PermissionManager manager,ConfigurationSection config) throws PermissionBackendException {
  super(manager,config);
  final String dbUri=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbUser=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbPassword=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    throw new PermissionBackendException(""String_Node_Str"");
  }
  dbDriver=dbUri.split(""String_Node_Str"",2)[0];
  this.ds=new BasicDataSource();
  String driverClass=getDriverClass(dbDriver);
  if (driverClass != null) {
    this.ds.setDriverClassName(driverClass);
  }
  this.ds.setUrl(""String_Node_Str"" + dbUri);
  this.ds.setUsername(dbUser);
  this.ds.setPassword(dbPassword);
  this.ds.setMaxActive(20);
  this.ds.setMaxWait(200);
  this.ds.setValidationQuery(""String_Node_Str"");
  this.ds.setTestOnBorrow(true);
  try (SQLConnection conn=getSQL()){
    conn.checkConnection();
  }
 catch (  Exception e) {
    if (e.getCause() != null && e.getCause() instanceof Exception) {
      e=(Exception)e.getCause();
    }
    throw new PermissionBackendException(""String_Node_Str"",e);
  }
  getManager().getLogger().info(""String_Node_Str"");
  executor=Executors.newSingleThreadExecutor();
  this.setupAliases();
  this.deployTables();
}",0.9482481517197042
151176,"@Override public Map<String,String> getOptions(String worldName){
  ConfigurationSection optionsSection=this.node.getConfigurationSection(formatPath(worldName,""String_Node_Str""));
  Map<String,String> worldOptions=new LinkedHashMap<>();
  putIfNotNull(worldOptions,""String_Node_Str"",this.node.getString(formatPath(worldName,""String_Node_Str"")));
  putIfNotNull(worldOptions,""String_Node_Str"",this.node.getString(formatPath(worldName,""String_Node_Str"")));
  if (optionsSection == null) {
    return Collections.emptyMap();
  }
  return Collections.unmodifiableMap(collectOptions(worldOptions,optionsSection));
}","@Override public Map<String,String> getOptions(String worldName){
  ConfigurationSection optionsSection=this.node.getConfigurationSection(formatPath(worldName,""String_Node_Str""));
  Map<String,String> worldOptions=new LinkedHashMap<>();
  putIfNotNull(worldOptions,""String_Node_Str"",this.node.getString(formatPath(worldName,""String_Node_Str"")));
  putIfNotNull(worldOptions,""String_Node_Str"",this.node.getString(formatPath(worldName,""String_Node_Str"")));
  if (optionsSection == null) {
    return Collections.unmodifiableMap(worldOptions);
  }
  return Collections.unmodifiableMap(collectOptions(worldOptions,optionsSection));
}",0.976594027441485
151177,"/** 
 * Returns new Backend class instance for specified backendName
 * @param backendName     Class name or alias of backend
 * @param manager         PermissionManager object
 * @param config          Configuration object to access backend settings
 * @param fallBackBackend name of backend that should be used if specified backend was not found or failed to initialize
 * @return new instance of PermissionBackend object
 */
public static PermissionBackend getBackend(String backendName,PermissionManager manager,ConfigurationSection config,String fallBackBackend){
  if (backendName == null || backendName.isEmpty()) {
    backendName=DEFAULT_BACKEND;
  }
  String className=getBackendClassName(backendName);
  try {
    Class<? extends PermissionBackend> backendClass=getBackendClass(backendName);
    manager.getLogger().info(""String_Node_Str"" + backendName + ""String_Node_Str"");
    Constructor<? extends PermissionBackend> constructor=backendClass.getConstructor(PermissionManager.class,ConfigurationSection.class);
    return constructor.newInstance(manager,config);
  }
 catch (  ClassNotFoundException e) {
    manager.getLogger().warning(""String_Node_Str"" + backendName + ""String_Node_Str"");
    if (fallBackBackend == null) {
      throw new RuntimeException(e);
    }
    if (!className.equals(getBackendClassName(fallBackBackend))) {
      return getBackend(fallBackBackend,manager,config,null);
    }
 else {
      throw new RuntimeException(e);
    }
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Returns new Backend class instance for specified backendName
 * @param backendName     Class name or alias of backend
 * @param manager         PermissionManager object
 * @param config          Configuration object to access backend settings
 * @param fallBackBackend name of backend that should be used if specified backend was not found or failed to initialize
 * @return new instance of PermissionBackend object
 */
public static PermissionBackend getBackend(String backendName,PermissionManager manager,ConfigurationSection config,String fallBackBackend) throws PermissionBackendException {
  if (backendName == null || backendName.isEmpty()) {
    backendName=DEFAULT_BACKEND;
  }
  String className=getBackendClassName(backendName);
  try {
    Class<? extends PermissionBackend> backendClass=getBackendClass(backendName);
    manager.getLogger().info(""String_Node_Str"" + backendName + ""String_Node_Str"");
    Constructor<? extends PermissionBackend> constructor=backendClass.getConstructor(PermissionManager.class,ConfigurationSection.class);
    return constructor.newInstance(manager,config);
  }
 catch (  ClassNotFoundException e) {
    manager.getLogger().warning(""String_Node_Str"" + backendName + ""String_Node_Str"");
    if (fallBackBackend == null) {
      throw new RuntimeException(e);
    }
    if (!className.equals(getBackendClassName(fallBackBackend))) {
      return getBackend(fallBackBackend,manager,config,null);
    }
 else {
      throw new RuntimeException(e);
    }
  }
catch (  Throwable e) {
    if (e instanceof InvocationTargetException) {
      e=e.getCause();
      if (e instanceof PermissionBackendException) {
        throw ((PermissionBackendException)e);
      }
    }
    throw new RuntimeException(e);
  }
}",0.920740965684786
151178,"/** 
 * Set backend to specified backend. This would also cause backend resetting.
 * @param backendName name of backend to set to
 */
public void setBackend(String backendName) throws PermissionBackendException {
synchronized (this) {
    this.clearCache();
    this.backend=PermissionBackend.getBackend(backendName,this,config.getBackendConfig(backendName));
    this.backend.reload();
    this.backend.validate();
  }
  this.callEvent(PermissionSystemEvent.Action.BACKEND_CHANGED);
}","/** 
 * Set backend to specified backend. This would also cause backend resetting.
 * @param backendName name of backend to set to
 */
public void setBackend(String backendName) throws PermissionBackendException {
synchronized (this) {
    this.clearCache();
    this.backend=createBackend(backendName);
  }
  this.callEvent(PermissionSystemEvent.Action.BACKEND_CHANGED);
}",0.8265424912689173
151179,"public SQLBackend(PermissionManager manager,Configuration config){
  super(manager,config);
  final String dbUri=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbUser=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbPassword=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    conn=new ThreadLocal<SQLConnection>(){
      @Override public SQLConnection initialValue(){
        return new SQLConnection(dbUri,dbUser,dbPassword,SQLBackend.this);
      }
    }
;
  }
  this.setupAliases();
}","public SQLBackend(PermissionManager manager,ConfigurationSection config){
  super(manager,config);
  final String dbUri=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbUser=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  final String dbPassword=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
    getConfig().set(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    conn=new ThreadLocal<SQLConnection>(){
      @Override public SQLConnection initialValue(){
        return new SQLConnection(dbUri,dbUser,dbPassword,SQLBackend.this);
      }
    }
;
  }
  this.setupAliases();
}",0.9955555555555556
151180,"protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    this.backend.getSQL().prepAndBind(sql,this.prefix,this.suffix,this.def,this.getName(),this.type.ordinal()).execute();
  }
 catch (  SQLException e) {
    if (this.isVirtual()) {
      this.virtual=false;
      this.updateInfo();
    }
    throw new RuntimeException(e);
  }
  this.virtual=false;
}","protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    this.backend.getSQL().prepAndBind(sql,this.prefix,this.suffix,this.def ? 1 : 0,this.getName(),this.type.ordinal()).execute();
  }
 catch (  SQLException e) {
    if (this.isVirtual()) {
      this.virtual=false;
      this.updateInfo();
    }
    throw new RuntimeException(e);
  }
  this.virtual=false;
}",0.991150442477876
151181,"@Override public Map<String,List<String>> getPermissionsMap(){
  Map<String,List<String>> allPermissions=new HashMap<String,List<String>>();
  allPermissions.put(null,Collections.unmodifiableList(this.commonPermissions));
  for (  Map.Entry<String,List<String>> entry : this.worldsPermissions.entrySet()) {
    allPermissions.put(entry.getKey(),Collections.unmodifiableList(entry.getValue()));
  }
  return Collections.unmodifiableMap(allPermissions);
}","@Override public Map<String,List<String>> getPermissionsMap(){
  Map<String,List<String>> allPermissions=new HashMap<String,List<String>>();
  if (this.commonPermissions == null) {
    this.fetchPermissions();
  }
  allPermissions.put(null,Collections.unmodifiableList(this.commonPermissions));
  for (  Map.Entry<String,List<String>> entry : this.worldsPermissions.entrySet()) {
    allPermissions.put(entry.getKey(),Collections.unmodifiableList(entry.getValue()));
  }
  return Collections.unmodifiableMap(allPermissions);
}",0.9254341164453525
151182,"public SQLData(String name,Type type,SQLBackend backend){
  this.name=name;
  this.type=type;
  this.backend=backend;
}","public SQLData(String name,Type type,SQLBackend backend){
  this.name=name;
  this.type=type;
  this.backend=backend;
  fetchInfo();
}",0.9407114624505928
151183,"protected final void fetchInfo(){
  try {
    ResultSet result=this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getName(),this.type.ordinal()).executeQuery();
    if (result.next()) {
      this.prefix=result.getString(""String_Node_Str"");
      this.suffix=result.getString(""String_Node_Str"");
      this.def=result.getBoolean(""String_Node_Str"");
      this.name=result.getString(""String_Node_Str"");
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","protected final void fetchInfo(){
  try {
    ResultSet result=this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getName(),this.type.ordinal()).executeQuery();
    if (result.next()) {
      this.prefix=nullToEmpty(result.getString(""String_Node_Str""));
      this.suffix=nullToEmpty(result.getString(""String_Node_Str""));
      this.def=result.getBoolean(""String_Node_Str"");
      this.name=result.getString(""String_Node_Str"");
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.8401253918495298
151184,"@Override public Map<String,Map<String,String>> getOptionsMap(){
  Map<String,Map<String,String>> allOptions=new HashMap<String,Map<String,String>>();
  allOptions.put(null,Collections.unmodifiableMap(this.commonOptions));
  for (  Map.Entry<String,Map<String,String>> entry : this.worldsOptions.entrySet()) {
    allOptions.put(entry.getKey(),Collections.unmodifiableMap(entry.getValue()));
  }
  return Collections.unmodifiableMap(allOptions);
}","@Override public Map<String,Map<String,String>> getOptionsMap(){
  Map<String,Map<String,String>> allOptions=new HashMap<String,Map<String,String>>();
  if (this.commonOptions == null) {
    this.fetchPermissions();
  }
  allOptions.put(null,Collections.unmodifiableMap(this.commonOptions));
  for (  Map.Entry<String,Map<String,String>> entry : this.worldsOptions.entrySet()) {
    allOptions.put(entry.getKey(),Collections.unmodifiableMap(entry.getValue()));
  }
  return Collections.unmodifiableMap(allOptions);
}",0.9283489096573208
151185,"public ConfigurationSection getBackendConfig(String backend){
  return config.getConfigurationSection(""String_Node_Str"" + backend);
}","public ConfigurationSection getBackendConfig(String backend){
  ConfigurationSection section=config.getConfigurationSection(""String_Node_Str"" + backend);
  if (section == null) {
    section=config.createSection(""String_Node_Str"" + backend);
  }
  return section;
}",0.6331658291457286
151186,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionBackend backend=PermissionBackend.getBackend(args.get(""String_Node_Str""),PermissionsEx.getPermissionManager(),plugin.getConfig(),null);
    backend.reload();
    backend.validate();
    PermissionsEx.getPermissionManager().getBackend().loadFrom(backend);
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + args.get(""String_Node_Str"")+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
    }
  }
catch (  PermissionBackendException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args.get(""String_Node_Str"")+ ""String_Node_Str"");
    plugin.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionManager mgr=PermissionsEx.getPermissionManager();
    PermissionBackend backend=mgr.createBackend(args.get(""String_Node_Str""));
    mgr.getBackend().loadFrom(backend);
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + args.get(""String_Node_Str"")+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
    }
  }
catch (  PermissionBackendException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args.get(""String_Node_Str"")+ ""String_Node_Str"");
    plugin.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
}",0.8953037483843171
151187,"public String getName(){
  return getOption(""String_Node_Str"",getIdentifier());
}","public String getName(){
  return getOption(""String_Node_Str"",null,getIdentifier());
}",0.9700598802395208
151188,"/** 
 * Set option for all worlds. Can be overwritten by world specific option
 * @param option Option name
 * @param value  Value to set, null to remove
 */
public void setOption(String option,String value){
  this.setOption(option,value,""String_Node_Str"");
}","/** 
 * Set option for all worlds. Can be overwritten by world specific option
 * @param option Option name
 * @param value  Value to set, null to remove
 */
public void setOption(String option,String value){
  this.setOption(option,value,null);
}",0.9585798816568049
151189,"private PermissionUser getUser(String identifier,String fallbackName){
  PermissionUser user=users.get(identifier);
  if (user == null) {
    PermissionsUserData data=backend.getUserData(identifier);
    if (data != null) {
      if (fallbackName != null && !backend.hasUser(identifier) && backend.hasUser(fallbackName)) {
        if (isDebug()) {
          getLogger().info(""String_Node_Str"" + fallbackName + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        }
        PermissionsUserData oldData=backend.getUserData(fallbackName);
        BackendDataTransfer.transferUser(oldData,data);
        oldData.remove();
      }
      data.setOption(""String_Node_Str"",null,fallbackName);
      user=new PermissionUser(identifier,data,this);
      user.initialize();
      this.users.put(identifier.toLowerCase(),user);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + identifier + ""String_Node_Str"");
    }
  }
  return user;
}","private PermissionUser getUser(String identifier,String fallbackName){
  PermissionUser user=users.get(identifier);
  if (user == null) {
    PermissionsUserData data=backend.getUserData(identifier);
    if (data != null) {
      if (fallbackName != null && !backend.hasUser(identifier) && backend.hasUser(fallbackName)) {
        if (isDebug()) {
          getLogger().info(""String_Node_Str"" + fallbackName + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        }
        PermissionsUserData oldData=backend.getUserData(fallbackName);
        BackendDataTransfer.transferUser(oldData,data);
        oldData.remove();
      }
      if (fallbackName != null) {
        data.setOption(""String_Node_Str"",fallbackName,null);
      }
      user=new PermissionUser(identifier,data,this);
      user.initialize();
      this.users.put(identifier.toLowerCase(),user);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + identifier + ""String_Node_Str"");
    }
  }
  return user;
}",0.958974358974359
151190,"/** 
 * Sets option value in specified world
 * @param option
 * @param worldName
 * @param value
 */
public void setOption(String option,String worldName,String value);","/** 
 * Sets option value in specified world
 * @param option
 * @param worldName
 * @param value
 */
public void setOption(String option,String value,String world);",0.9461077844311376
151191,"@Override public void setOption(String option,String worldName,String value){
  this.node.set(formatPath(worldName,""String_Node_Str"",option),value);
  save();
}","@Override public void setOption(String option,String value,String worldName){
  this.node.set(formatPath(worldName,""String_Node_Str"",option),value);
  save();
}",0.9375
151192,"@Override public void setOption(String option,String worldName,String value){
  if (option == null || option.isEmpty()) {
    return;
  }
  if (worldName == null) {
    worldName=""String_Node_Str"";
  }
  if (value == null || value.isEmpty()) {
    try {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getIdentifier(),option,this.type.ordinal(),worldName).execute();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
    if (!worldName.isEmpty() && this.worldsOptions.containsKey(worldName)) {
      this.worldsOptions.get(worldName).remove(option);
    }
 else {
      this.commonOptions.remove(option);
    }
    return;
  }
  Boolean newOption=true;
  if (this.commonOptions == null) {
    this.fetchPermissions();
  }
  if (!worldName.isEmpty() && worldsOptions.containsKey(worldName) && worldsOptions.get(worldName).containsKey(option)) {
    newOption=false;
  }
 else   if (worldName.isEmpty() && commonOptions.containsKey(option)) {
    newOption=false;
  }
  try {
    if (newOption) {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getIdentifier(),option,value,worldName,this.type.ordinal()).execute();
    }
 else {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",value,this.getIdentifier(),this.type.ordinal(),option).execute();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}","@Override public void setOption(String option,String value,String worldName){
  if (option == null || option.isEmpty()) {
    return;
  }
  if (worldName == null) {
    worldName=""String_Node_Str"";
  }
  if (value == null || value.isEmpty()) {
    try {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getIdentifier(),option,this.type.ordinal(),worldName).execute();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
    if (!worldName.isEmpty() && this.worldsOptions.containsKey(worldName)) {
      this.worldsOptions.get(worldName).remove(option);
    }
 else {
      this.commonOptions.remove(option);
    }
    return;
  }
  Boolean newOption=true;
  if (this.commonOptions == null) {
    this.fetchPermissions();
  }
  if (!worldName.isEmpty() && worldsOptions.containsKey(worldName) && worldsOptions.get(worldName).containsKey(option)) {
    newOption=false;
  }
 else   if (worldName.isEmpty() && commonOptions.containsKey(option)) {
    newOption=false;
  }
  try {
    if (newOption) {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",this.getIdentifier(),option,value,worldName,this.type.ordinal()).execute();
    }
 else {
      this.backend.getSQL().prepAndBind(""String_Node_Str"",value,this.getIdentifier(),this.type.ordinal(),option).execute();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}",0.9917976760082023
151193,"@EventHandler public void onPlayerLogin(PlayerLoginEvent event){
  try {
    if (!config.shouldLogPlayers()) {
      return;
    }
    PermissionUser user=getPermissionsManager().getUser(event.getPlayer());
    user.setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}","@EventHandler public void onPlayerLogin(PlayerLoginEvent event){
  try {
    PermissionUser user=getPermissionsManager().getUser(event.getPlayer());
    user.setOption(""String_Node_Str"",event.getPlayer().getName());
    if (!config.shouldLogPlayers()) {
      return;
    }
    user.setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}",0.7351874244256348
151194,"public String getName(){
  return getOption(""String_Node_Str"",null,getIdentifier());
}","public String getName(){
  return getOwnOption(""String_Node_Str"",null,getIdentifier());
}",0.9828571428571428
151195,"/** 
 * Set backend to specified backend. This would also cause backend resetting.
 * @param backendName name of backend to set to
 */
public void setBackend(String backendName) throws PermissionBackendException {
synchronized (this) {
    this.clearCache();
    this.backend=createBackend(backendName);
  }
  this.callEvent(PermissionSystemEvent.Action.BACKEND_CHANGED);
}","/** 
 * Set backend to specified backend. This would also cause backend resetting.
 * @param backendName name of backend to set to
 */
public void setBackend(String backendName) throws PermissionBackendException {
synchronized (this) {
    this.clearCache();
    this.backend=createBackend(backendName);
    this.preloadGroups();
  }
  this.callEvent(PermissionSystemEvent.Action.BACKEND_CHANGED);
}",0.966321243523316
151196,"public PermissionManager(PermissionsEx plugin) throws PermissionBackendException {
  this.plugin=plugin;
  if (plugin.getConfiguration().useNetEvents()) {
    Plugin netEventsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (netEventsPlugin != null && netEventsPlugin.isEnabled()) {
      this.netEvents=(NetEventsPlugin)netEventsPlugin;
      plugin.getServer().getPluginManager().registerEvents(new RemoteEventListener(),plugin);
    }
  }
  this.initBackend();
  this.debugMode=plugin.getConfiguration().isDebug();
  this.allowOps=plugin.getConfiguration().allowOps();
  this.userAddGroupsLast=plugin.getConfiguration().userAddGroupsLast();
}","public PermissionManager(PermissionsEx plugin) throws PermissionBackendException {
  this.plugin=plugin;
  if (plugin.getConfiguration().useNetEvents()) {
    Plugin netEventsPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (netEventsPlugin != null && netEventsPlugin.isEnabled()) {
      this.netEvents=(NetEventsPlugin)netEventsPlugin;
      plugin.getServer().getPluginManager().registerEvents(new RemoteEventListener(),plugin);
    }
  }
  this.debugMode=plugin.getConfiguration().isDebug();
  this.allowOps=plugin.getConfiguration().allowOps();
  this.userAddGroupsLast=plugin.getConfiguration().userAddGroupsLast();
  this.initBackend();
}",0.7345132743362832
151197,"/** 
 * Return object for specified group
 * @param groupname group's name
 * @return PermissionGroup object
 */
public PermissionGroup getGroup(String groupname){
  if (groupname == null || groupname.isEmpty()) {
    return null;
  }
  PermissionGroup group=groups.get(groupname.toLowerCase());
  if (group == null) {
    PermissionsGroupData data=this.backend.getGroupData(groupname);
    if (data != null) {
      group=new PermissionGroup(groupname,data,this);
      this.groups.put(groupname.toLowerCase(),group);
      try {
        group.initialize();
      }
 catch (      Exception e) {
        this.groups.remove(groupname.toLowerCase());
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + groupname + ""String_Node_Str"");
    }
  }
  return group;
}","/** 
 * Return object for specified group
 * @param groupname group's name
 * @return PermissionGroup object
 */
public PermissionGroup getGroup(String groupname){
  if (groupname == null || groupname.isEmpty()) {
    return null;
  }
  PermissionGroup group=groups.get(groupname.toLowerCase());
  if (group == null) {
    PermissionsGroupData data=this.backend.getGroupData(groupname);
    if (data != null) {
      group=new PermissionGroup(groupname,data,this);
      this.groups.put(groupname.toLowerCase(),group);
      try {
        group.initialize();
      }
 catch (      Exception e) {
        this.groups.remove(groupname.toLowerCase());
        throw new IllegalStateException(""String_Node_Str"" + groupname,e);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + groupname + ""String_Node_Str"");
    }
  }
  return group;
}",0.9272727272727272
151198,"/** 
 * Load data from alternate backend. Assume that this overwrites all data in the receiving backend (except for users not included in transferring backend)
 * @param backend The backend to load data from
 */
public void loadFrom(PermissionBackend backend){
  for (  String user : backend.getUserIdentifiers()) {
    BackendDataTransfer.transferUser(backend.getUserData(user),getUserData(user));
  }
  for (  String group : backend.getGroupNames()) {
    BackendDataTransfer.transferGroup(backend.getGroupData(group),getGroupData(group));
  }
  for (  Map.Entry<String,List<String>> ent : backend.getAllWorldInheritance().entrySet()) {
    setWorldInheritance(ent.getKey(),ent.getValue());
  }
}","/** 
 * Load data from alternate backend. Assume that this overwrites all data in the receiving backend (except for users not included in transferring backend)
 * @param backend The backend to load data from
 */
public void loadFrom(PermissionBackend backend){
  for (  String group : backend.getGroupNames()) {
    BackendDataTransfer.transferGroup(backend.getGroupData(group),getGroupData(group));
  }
  for (  String user : backend.getUserIdentifiers()) {
    BackendDataTransfer.transferUser(backend.getUserData(user),getUserData(user));
  }
  for (  Map.Entry<String,List<String>> ent : backend.getAllWorldInheritance().entrySet()) {
    setWorldInheritance(ent.getKey(),ent.getValue());
  }
}",0.7893982808022922
151199,"@Override public void setPermissions(List<String> permissions,String worldName){
  if (worldName == null) {
    worldName=""String_Node_Str"";
  }
  try (SQLConnection conn=backend.getSQL()){
    conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),this.type.ordinal(),worldName).execute();
    PreparedStatement statement=conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),""String_Node_Str"",worldName,this.type.ordinal());
    for (int i=permissions.size() - 1; i >= 0; i--) {
      statement.setString(2,permissions.get(i));
      statement.addBatch();
    }
    statement.executeBatch();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (this.isVirtual()) {
    this.save();
  }
  if (this.commonPermissions == null) {
    this.fetchPermissions();
  }
 else {
    if (worldName.isEmpty()) {
      this.commonPermissions=new ArrayList<>(permissions);
    }
 else {
      this.worldsPermissions.put(worldName,new ArrayList<>(permissions));
    }
  }
}","@Override public void setPermissions(List<String> permissions,String worldName){
  if (worldName == null) {
    worldName=""String_Node_Str"";
  }
  try (SQLConnection conn=backend.getSQL()){
    conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),this.type.ordinal(),worldName).execute();
    if (permissions.size() > 0) {
      Set<String> includedPerms=new HashSet<>();
      PreparedStatement statement=conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),""String_Node_Str"",worldName,this.type.ordinal());
      for (int i=permissions.size() - 1; i >= 0; i--) {
        if (!includedPerms.contains(permissions.get(i))) {
          statement.setString(2,permissions.get(i));
          statement.addBatch();
          includedPerms.add(permissions.get(i));
        }
      }
      statement.executeBatch();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (permissions.size() > 0 && this.isVirtual()) {
    this.save();
  }
  if (this.commonPermissions == null) {
    this.fetchPermissions();
  }
 else {
    if (worldName.isEmpty()) {
      this.commonPermissions=new ArrayList<>(permissions);
    }
 else {
      this.worldsPermissions.put(worldName,new ArrayList<>(permissions));
    }
  }
}",0.8877872915727806
151200,"/** 
 * Creates a backend but does not set it as the active backend. Useful for data transfer & such
 * @param backendName Name of the configuration section which describes this backend
 */
public PermissionBackend createBackend(String backendName) throws PermissionBackendException {
  ConfigurationSection config=plugin.getConfiguration().getBackendConfig(backendName);
  String backendType=config.getString(""String_Node_Str"");
  if (backendType == null) {
    config.set(""String_Node_Str"",backendType=backendName);
  }
  PermissionBackend backend=PermissionBackend.getBackend(backendType,this,config);
  return backend;
}","/** 
 * Creates a backend but does not set it as the active backend. Useful for data transfer & such
 * @param backendName Name of the configuration section which describes this backend
 */
public PermissionBackend createBackend(String backendName) throws PermissionBackendException {
  ConfigurationSection config=plugin.getConfiguration().getBackendConfig(backendName);
  String backendType=config.getString(""String_Node_Str"");
  if (backendType == null) {
    config.set(""String_Node_Str"",backendType=backendName);
  }
  return PermissionBackend.getBackend(backendType,this,config);
}",0.9578860445912468
151201,"public void resetUser(UUID uid){
  this.users.remove(uid.toString());
}","public void resetUser(Player ply){
  this.users.remove(ply.getUniqueId().toString());
  resetUser(ply.getName());
}",0.6774193548387096
151202,"@EventHandler(priority=EventPriority.LOWEST) public void onSystemEvent(PermissionSystemEvent event){
  if (isLocal(event)) {
    return;
  }
switch (event.getAction()) {
case BACKEND_CHANGED:
case DEBUGMODE_TOGGLE:
case REINJECT_PERMISSIBLES:
    return;
}
try {
  if (backend != null) {
    backend.close();
    backend.reload();
  }
  clearCache();
}
 catch (PermissionBackendException e) {
  e.printStackTrace();
}
}","@EventHandler(priority=EventPriority.LOWEST) public void onSystemEvent(PermissionSystemEvent event){
  if (isLocal(event)) {
    return;
  }
switch (event.getAction()) {
case BACKEND_CHANGED:
case DEBUGMODE_TOGGLE:
case REINJECT_PERMISSIBLES:
    return;
}
try {
  if (backend != null) {
    backend.reload();
  }
  clearCache();
}
 catch (PermissionBackendException e) {
  e.printStackTrace();
}
}",0.9742962056303548
151203,"/** 
 * Reset all in-memory groups and users, clean up runtime stuff, reloads backend
 */
public void reset() throws PermissionBackendException {
  this.clearCache();
  if (this.backend != null) {
    this.backend.close();
    initBackend();
  }
  this.callEvent(PermissionSystemEvent.Action.RELOADED);
}","/** 
 * Reset all in-memory groups and users, clean up runtime stuff, reloads backend
 */
public void reset() throws PermissionBackendException {
  this.clearCache();
  if (this.backend != null) {
    this.backend.reload();
  }
  this.callEvent(PermissionSystemEvent.Action.RELOADED);
}",0.952542372881356
151204,"protected Pattern createPattern(String expression){
  try {
    return Pattern.compile(prepareRegexp(expression),Pattern.CASE_INSENSITIVE);
  }
 catch (  PatternSyntaxException e) {
    return Pattern.compile(Pattern.quote(expression),Pattern.CASE_INSENSITIVE);
  }
}","protected static Pattern createPattern(String expression){
  try {
    return Pattern.compile(prepareRegexp(expression),Pattern.CASE_INSENSITIVE);
  }
 catch (  PatternSyntaxException e) {
    return Pattern.compile(Pattern.quote(expression),Pattern.CASE_INSENSITIVE);
  }
}",0.9870609981515712
151205,"@Override public boolean isMatches(String expression,String permission){
  Pattern permissionMatcher=patternCache.get(expression);
  if (permissionMatcher == null) {
    patternCache.put(expression,permissionMatcher=createPattern(expression));
  }
  return permissionMatcher.matcher(permission).matches();
}","@Override public boolean isMatches(String expression,String permission){
  try {
    Pattern permissionMatcher=patternCache.get(expression);
    return permissionMatcher.matcher(permission).matches();
  }
 catch (  ExecutionException e) {
    return false;
  }
}",0.4991212653778559
151206,"private static void transferBase(PermissionsData from,PermissionsData to){
  for (  Map.Entry<String,List<String>> entry : from.getPermissionsMap().entrySet()) {
    to.setPermissions(new ArrayList<>(entry.getValue()),entry.getKey());
  }
  for (  Map.Entry<String,Map<String,String>> entry : from.getOptionsMap().entrySet()) {
    for (    Map.Entry<String,String> option : entry.getValue().entrySet()) {
      to.setOption(option.getKey(),option.getValue(),entry.getKey());
    }
  }
  List<String> globalParents=from.getParents(null);
  to.setParents(globalParents == null ? null : new ArrayList<>(globalParents),null);
  to.setPrefix(from.getPrefix(null),null);
  to.setSuffix(from.getSuffix(null),null);
  for (  String world : from.getWorlds()) {
    to.setPrefix(from.getPrefix(world),world);
    to.setSuffix(from.getSuffix(world),world);
    List<String> groups=from.getParents(world);
    if (groups == null || groups.isEmpty()) {
      continue;
    }
    to.setParents(new ArrayList<>(groups),world);
  }
}","private static void transferBase(PermissionsData from,PermissionsData to){
  for (  Map.Entry<String,List<String>> entry : from.getPermissionsMap().entrySet()) {
    to.setPermissions(entry.getValue(),entry.getKey());
  }
  for (  Map.Entry<String,Map<String,String>> entry : from.getOptionsMap().entrySet()) {
    for (    Map.Entry<String,String> option : entry.getValue().entrySet()) {
      to.setOption(option.getKey(),option.getValue(),entry.getKey());
    }
  }
  to.setParents(from.getParents(null),null);
  to.setPrefix(from.getPrefix(null),null);
  to.setSuffix(from.getSuffix(null),null);
  for (  String world : from.getWorlds()) {
    to.setPrefix(from.getPrefix(world),world);
    to.setSuffix(from.getSuffix(world),world);
    List<String> groups=from.getParents(world);
    if (groups == null || groups.isEmpty()) {
      continue;
    }
    to.setParents(groups,world);
  }
}",0.6167539267015707
151207,"@Override public boolean hasUser(String userName){
  return this.permissions.isConfigurationSection(buildPath(""String_Node_Str"",userName));
}","@Override public boolean hasUser(String userName){
  if (this.permissions.isConfigurationSection(buildPath(""String_Node_Str"",userName))) {
    return true;
  }
  ConfigurationSection userSection=this.permissions.getConfigurationSection(""String_Node_Str"");
  if (userSection != null) {
    for (    String name : userSection.getKeys(false)) {
      if (userName.equalsIgnoreCase(name)) {
        return true;
      }
    }
  }
  return false;
}",0.4589041095890411
151208,"@Override public boolean hasGroup(String group){
  return this.permissions.isConfigurationSection(buildPath(""String_Node_Str"",group));
}","@Override public boolean hasGroup(String group){
  if (this.permissions.isConfigurationSection(buildPath(""String_Node_Str"",group))) {
    return true;
  }
  ConfigurationSection userSection=this.permissions.getConfigurationSection(""String_Node_Str"");
  if (userSection != null) {
    for (    String name : userSection.getKeys(false)) {
      if (group.equalsIgnoreCase(name)) {
        return true;
      }
    }
  }
  return false;
}",0.4518388791593695
151209,"@Override public Map<String,List<String>> getPermissionsMap(){
  Map<String,List<String>> allPermissions=new HashMap<>();
  List<String> commonPermissions=this.node.getStringList(""String_Node_Str"");
  if (commonPermissions != null) {
    allPermissions.put(null,commonPermissions);
  }
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection != null) {
    for (    String world : worldsSection.getKeys(false)) {
      List<String> worldPermissions=this.node.getStringList(FileBackend.buildPath(""String_Node_Str"",world,""String_Node_Str""));
      if (commonPermissions != null) {
        allPermissions.put(world,worldPermissions);
      }
    }
  }
  return allPermissions;
}","@Override public Map<String,List<String>> getPermissionsMap(){
  Map<String,List<String>> allPermissions=new HashMap<>();
  List<String> commonPermissions=this.node.getStringList(""String_Node_Str"");
  if (commonPermissions != null) {
    allPermissions.put(null,Collections.unmodifiableList(commonPermissions));
  }
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection != null) {
    for (    String world : worldsSection.getKeys(false)) {
      List<String> worldPermissions=this.node.getStringList(FileBackend.buildPath(""String_Node_Str"",world,""String_Node_Str""));
      if (commonPermissions != null) {
        allPermissions.put(world,Collections.unmodifiableList(worldPermissions));
      }
    }
  }
  return Collections.unmodifiableMap(allPermissions);
}",0.9025177533892834
151210,"/** 
 * Permissions
 */
@Override public List<String> getPermissions(String worldName){
  List<String> result=this.node.getStringList(formatPath(worldName,""String_Node_Str""));
  return result == null ? new LinkedList<String>() : result;
}","/** 
 * Permissions
 */
@Override public List<String> getPermissions(String worldName){
  List<String> result=this.node.getStringList(formatPath(worldName,""String_Node_Str""));
  return result == null ? Collections.<String>emptyList() : Collections.unmodifiableList(result);
}",0.8499025341130604
151211,"@Override public void setPermissions(List<String> permissions,String worldName){
  this.node.set(formatPath(worldName,""String_Node_Str""),permissions == null || permissions.isEmpty() ? null : permissions);
  save();
}","@Override public void setPermissions(List<String> permissions,String worldName){
  this.node.set(formatPath(worldName,""String_Node_Str""),permissions == null || permissions.isEmpty() ? null : new ArrayList<>(permissions));
  save();
}",0.9131403118040088
151212,"private Map<String,String> collectOptions(ConfigurationSection section){
  Map<String,String> options=new LinkedHashMap<>();
  for (  String key : section.getKeys(true)) {
    if (section.isConfigurationSection(key)) {
      continue;
    }
    options.put(key.replace(section.getRoot().options().pathSeparator(),'.'),section.getString(key));
  }
  return options;
}","private Map<String,String> collectOptions(ConfigurationSection section){
  Map<String,String> options=new LinkedHashMap<>();
  for (  String key : section.getKeys(true)) {
    if (section.isConfigurationSection(key)) {
      continue;
    }
    options.put(key.replace(section.getRoot().options().pathSeparator(),'.'),section.getString(key));
  }
  return Collections.unmodifiableMap(options);
}",0.9434954007884364
151213,"@Override public Set<String> getWorlds(){
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection == null) {
    return new HashSet<>();
  }
  return worldsSection.getKeys(false);
}","@Override public Set<String> getWorlds(){
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection == null) {
    return Collections.emptySet();
  }
  return Collections.unmodifiableSet(worldsSection.getKeys(false));
}",0.7086614173228346
151214,"@Override public void setParents(List<String> parents,String worldName){
  this.node.set(formatPath(worldName,parentPath),parents);
  save();
}","@Override public void setParents(List<String> parents,String worldName){
  this.node.set(formatPath(worldName,parentPath),parents == null ? null : new ArrayList<>(parents));
  save();
}",0.8719512195121951
151215,"@Override public Map<String,Map<String,String>> getOptionsMap(){
  Map<String,Map<String,String>> allOptions=new HashMap<>();
  allOptions.put(null,this.getOptions(null));
  for (  String worldName : this.getWorlds()) {
    allOptions.put(worldName,this.getOptions(worldName));
  }
  return allOptions;
}","@Override public Map<String,Map<String,String>> getOptionsMap(){
  Map<String,Map<String,String>> allOptions=new HashMap<>();
  allOptions.put(null,this.getOptions(null));
  for (  String worldName : this.getWorlds()) {
    allOptions.put(worldName,this.getOptions(worldName));
  }
  return Collections.unmodifiableMap(allOptions);
}",0.9230769230769232
151216,"@Override public Map<String,String> getOptions(String worldName){
  ConfigurationSection optionsSection=this.node.getConfigurationSection(formatPath(worldName,""String_Node_Str""));
  if (optionsSection == null) {
    return new HashMap<>(0);
  }
  return collectOptions(optionsSection);
}","@Override public Map<String,String> getOptions(String worldName){
  ConfigurationSection optionsSection=this.node.getConfigurationSection(formatPath(worldName,""String_Node_Str""));
  if (optionsSection == null) {
    return Collections.emptyMap();
  }
  return collectOptions(optionsSection);
}",0.9482758620689656
151217,"@Override public boolean hasUser(String userName){
  try {
    ResultSet res=getSQL().prepAndBind(""String_Node_Str"",SQLData.Type.USER.ordinal(),userName).executeQuery();
    return res.next();
  }
 catch (  SQLException e) {
    return false;
  }
}","@Override public boolean hasUser(String userName){
  try (SQLConnection conn=getSQL()){
    ResultSet res=conn.prepAndBind(""String_Node_Str"",SQLData.Type.USER.ordinal(),userName).executeQuery();
    return res.next();
  }
 catch (  SQLException e) {
    return false;
  }
}",0.8790786948176583
151218,"@EventHandler public void onPlayerQuit(PlayerQuitEvent event){
  try {
    if (config.shouldLogPlayers()) {
      getPermissionsManager().getUser(event.getPlayer()).setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
    }
    getPermissionsManager().resetUser(event.getPlayer().getUniqueId());
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}","@EventHandler public void onPlayerQuit(PlayerQuitEvent event){
  try {
    if (config.shouldLogPlayers()) {
      getPermissionsManager().getUser(event.getPlayer()).setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
    }
    getPermissionsManager().resetUser(event.getPlayer());
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}",0.9825
151219,"@EventHandler public void onPlayerLogin(PlayerLoginEvent event){
  try {
    PermissionUser user=getPermissionsManager().getUser(event.getPlayer());
    user.setOption(""String_Node_Str"",event.getPlayer().getName());
    if (!config.shouldLogPlayers()) {
      return;
    }
    user.setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}","@EventHandler public void onPlayerLogin(PlayerLoginEvent event){
  try {
    PermissionUser user=getPermissionsManager().getUser(event.getPlayer());
    if (!user.isVirtual()) {
      user.setOption(""String_Node_Str"",event.getPlayer().getName());
    }
    if (!config.shouldLogPlayers()) {
      return;
    }
    user.setOption(""String_Node_Str"",Long.toString(System.currentTimeMillis() / 1000L));
  }
 catch (  Throwable t) {
    ErrorReport.handleError(""String_Node_Str"",t);
  }
}",0.9602577873254564
151220,"private void updateSelective(PermissionEntityEvent event,PermissionUser user){
  final Player p=plugin.getServer().getPlayer(UUID.fromString(user.getIdentifier()));
  if (p != null) {
switch (event.getAction()) {
case SAVED:
      break;
case PERMISSIONS_CHANGED:
case TIMEDPERMISSION_EXPIRED:
    updatePlayerPermission(getCreateWrapper(p,""String_Node_Str""),p,user,p.getWorld().getName());
  p.recalculatePermissions();
break;
case OPTIONS_CHANGED:
case INFO_CHANGED:
updatePlayerMetadata(getCreateWrapper(p,""String_Node_Str""),user,p.getWorld().getName());
p.recalculatePermissions();
break;
default :
updateAttachment(p);
}
}
}","private void updateSelective(PermissionEntityEvent event,PermissionUser user){
  final Player p=user.getPlayer();
  if (p != null) {
switch (event.getAction()) {
case SAVED:
      break;
case PERMISSIONS_CHANGED:
case TIMEDPERMISSION_EXPIRED:
    updatePlayerPermission(getCreateWrapper(p,""String_Node_Str""),p,user,p.getWorld().getName());
  p.recalculatePermissions();
break;
case OPTIONS_CHANGED:
case INFO_CHANGED:
updatePlayerMetadata(getCreateWrapper(p,""String_Node_Str""),user,p.getWorld().getName());
p.recalculatePermissions();
break;
default :
updateAttachment(p);
}
}
}",0.9511184755592378
151221,"/** 
 * User permission management
 */
@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userListAliasPermissions(PermissionsEx plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  String worldName=this.autoCompleteWorldName(args.get(""String_Node_Str""));
  PermissionUser user=plugin.getPermissionsManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  userName=user.getName();
  sender.sendMessage(""String_Node_Str"" + user.getIdentifier() + '/'+ userName+ ""String_Node_Str"");
  printEntityInheritance(sender,user.getParents());
  Map<String,List<PermissionGroup>> allParents=user.getAllParents();
  for (  String world : allParents.keySet()) {
    if (world == null) {
      continue;
    }
    sender.sendMessage(""String_Node_Str"" + world + ""String_Node_Str"");
    printEntityInheritance(sender,allParents.get(world));
  }
  sender.sendMessage(userName + ""String_Node_Str"");
  this.sendMessage(sender,this.mapPermissions(worldName,user,0));
  sender.sendMessage(userName + ""String_Node_Str"");
  for (  Map.Entry<String,String> option : user.getOptions(worldName).entrySet()) {
    sender.sendMessage(""String_Node_Str"" + option.getKey() + ""String_Node_Str""+ option.getValue()+ ""String_Node_Str"");
  }
}","/** 
 * User permission management
 */
@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userListAliasPermissions(PermissionsEx plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  String worldName=this.autoCompleteWorldName(args.get(""String_Node_Str""));
  PermissionUser user=plugin.getPermissionsManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  userName=user.getName();
  sender.sendMessage(""String_Node_Str"" + describeUser(user) + ""String_Node_Str"");
  printEntityInheritance(sender,user.getParents());
  Map<String,List<PermissionGroup>> allParents=user.getAllParents();
  for (  String world : allParents.keySet()) {
    if (world == null) {
      continue;
    }
    sender.sendMessage(""String_Node_Str"" + world + ""String_Node_Str"");
    printEntityInheritance(sender,allParents.get(world));
  }
  sender.sendMessage(userName + ""String_Node_Str"");
  this.sendMessage(sender,this.mapPermissions(worldName,user,0));
  sender.sendMessage(userName + ""String_Node_Str"");
  for (  Map.Entry<String,String> option : user.getOptions(worldName).entrySet()) {
    sender.sendMessage(""String_Node_Str"" + option.getKey() + ""String_Node_Str""+ option.getValue()+ ""String_Node_Str"");
  }
}",0.980708523325149
151222,"private void uninjectPermissible(Player player){
  try {
    boolean success=false;
    for (    PermissibleInjector injector : injectors) {
      if (injector.isApplicable(player)) {
        Permissible pexPerm=injector.getPermissible(player);
        if (pexPerm instanceof PermissiblePEX) {
          if (injector.inject(player,((PermissiblePEX)pexPerm).getPreviousPermissible()) != null) {
            success=true;
            break;
          }
        }
      }
    }
    if (!success) {
      plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
 else     if (hasDebugMode()) {
      plugin.getLogger().info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","private void uninjectPermissible(Player player){
  try {
    boolean success=false;
    for (    PermissibleInjector injector : injectors) {
      if (injector.isApplicable(player)) {
        Permissible pexPerm=injector.getPermissible(player);
        if (pexPerm instanceof PermissiblePEX) {
          if (injector.inject(player,((PermissiblePEX)pexPerm).getPreviousPermissible()) != null) {
            success=true;
            break;
          }
        }
 else {
          success=true;
          break;
        }
      }
    }
    if (!success) {
      plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
 else     if (hasDebugMode()) {
      plugin.getLogger().info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.963512677798392
151223,"public Map<String,List<PermissionGroup>> getAllGroups(){
  Map<String,List<PermissionGroup>> allGroups=new HashMap<String,List<PermissionGroup>>();
  for (  String worldName : this.getWorlds()) {
    allGroups.put(worldName,this.getWorldGroups(worldName));
  }
  allGroups.put(null,this.getWorldGroups(null));
  return allGroups;
}","@Deprecated public Map<String,List<PermissionGroup>> getAllGroups(){
  return getAllParents();
}",0.3419203747072599
151224,"/** 
 * Performs a traversal of permissions hierarchy Ordering: For each entity (traversed depth-first): <ol> <li>Chosen world</li> <li>World inheritance for chosen world</li> <li>Global scope</li> </ol>
 * @return a value if any found
 */
public Return traverse(){
  LinkedList<PermissionEntity> entities=new LinkedList<PermissionEntity>();
  Set<PermissionEntity> visited=new HashSet<PermissionEntity>();
  entities.add(start);
  Return ret=null;
  while (!entities.isEmpty()) {
    PermissionEntity current=entities.removeFirst();
    if (visited.contains(current)) {
      if (current.isDebug()) {
        current.manager.getLogger().warning(""String_Node_Str"" + current.getIdentifier() + ""String_Node_Str""+ start+ ""String_Node_Str"");
      }
      continue;
    }
    visited.add(current);
    if (world != null) {
      ret=fetchLocal(current,world);
      if (ret != null) {
        break;
      }
      ret=traverseWorldInheritance(current);
      if (ret != null) {
        break;
      }
    }
    ret=fetchLocal(current,null);
    if (ret != null) {
      break;
    }
    if (traverseInheritance) {
      List<PermissionGroup> parents=current.getParents(world);
      for (int i=parents.size() - 1; i >= 0; --i) {
        entities.addFirst(parents.get(i));
      }
    }
  }
  return ret;
}","/** 
 * Performs a traversal of permissions hierarchy Ordering: For each entity (traversed depth-first): <ol> <li>Chosen world</li> <li>World inheritance for chosen world</li> <li>Global scope</li> </ol>
 * @return a value if any found
 */
public Return traverse(){
  LinkedList<PermissionEntity> entities=new LinkedList<>();
  Set<PermissionEntity> visited=new HashSet<>();
  entities.add(start);
  Return ret=null;
  while (!entities.isEmpty()) {
    PermissionEntity current=entities.removeFirst();
    if (visited.contains(current)) {
      if (current.isDebug()) {
        current.manager.getLogger().warning(""String_Node_Str"" + current.getIdentifier() + ""String_Node_Str""+ start+ ""String_Node_Str"");
      }
      continue;
    }
    visited.add(current);
    if (world != null) {
      ret=fetchLocal(current,world);
      if (ret != null) {
        break;
      }
      ret=traverseWorldInheritance(current);
      if (ret != null) {
        break;
      }
    }
    ret=fetchLocal(current,null);
    if (ret != null) {
      break;
    }
    if (traverseInheritance) {
      List<PermissionGroup> parents=current.getParents(world);
      for (int i=parents.size() - 1; i >= 0; --i) {
        entities.addFirst(parents.get(i));
      }
    }
  }
  return ret;
}",0.9875486381322958
151225,"/** 
 * Traverses world inheritance depth-first.
 * @param entity Entity to perform local action on
 * @return Any detected results
 */
private Return traverseWorldInheritance(PermissionEntity entity){
  List<String> worldInheritance=entity.manager.getWorldInheritance(world);
  if (worldInheritance.size() > 0) {
    Deque<String> worlds=new LinkedList<String>(worldInheritance);
    Set<String> visitedWorlds=new HashSet<String>();
    Return ret=null;
    while (!worlds.isEmpty()) {
      String current=worlds.removeFirst();
      if (visitedWorlds.contains(current)) {
        if (entity.isDebug()) {
          entity.manager.getLogger().warning(""String_Node_Str"" + current);
        }
        continue;
      }
      visitedWorlds.add(current);
      ret=fetchLocal(entity,current);
      if (ret != null) {
        break;
      }
      final List<String> nextLevel=entity.manager.getWorldInheritance(current);
      for (int i=nextLevel.size() - 1; i >= 0; --i) {
        worlds.add(nextLevel.get(i));
      }
    }
    return ret;
  }
  return null;
}","/** 
 * Traverses world inheritance depth-first.
 * @param entity Entity to perform local action on
 * @return Any detected results
 */
private Return traverseWorldInheritance(PermissionEntity entity){
  List<String> worldInheritance=entity.manager.getWorldInheritance(world);
  if (worldInheritance.size() > 0) {
    Deque<String> worlds=new LinkedList<>(worldInheritance);
    Set<String> visitedWorlds=new HashSet<>();
    Return ret=null;
    while (!worlds.isEmpty()) {
      String current=worlds.removeFirst();
      if (visitedWorlds.contains(current)) {
        if (entity.isDebug()) {
          entity.manager.getLogger().warning(""String_Node_Str"" + current);
        }
        continue;
      }
      visitedWorlds.add(current);
      ret=fetchLocal(entity,current);
      if (ret != null) {
        break;
      }
      final List<String> nextLevel=entity.manager.getWorldInheritance(current);
      for (int i=nextLevel.size() - 1; i >= 0; --i) {
        worlds.add(nextLevel.get(i));
      }
    }
    return ret;
  }
  return null;
}",0.9943074003795066
151226,"protected List<String> getPermissionsInternal(String worldName,final boolean filterNonInheritable){
  final List<String> ret=new ArrayList<String>();
  new HierarchyTraverser<Void>(this,worldName){
    @Override protected Void fetchLocal(    PermissionEntity entity,    String world){
      for (      String perm : entity.getOwnPermissions(world)) {
        if (filterNonInheritable && entity != PermissionEntity.this && perm.startsWith(NON_INHERITABLE_PREFIX)) {
          continue;
        }
        ret.add(perm);
        getInheritedChildPermissions(perm,ret);
      }
      for (      String perm : entity.getTimedPermissions(world)) {
        if (filterNonInheritable && entity != PermissionEntity.this && perm.startsWith(NON_INHERITABLE_PREFIX)) {
          continue;
        }
        ret.add(perm);
        getInheritedChildPermissions(perm,ret);
      }
      return null;
    }
  }
.traverse();
  return ret;
}","protected List<String> getPermissionsInternal(String worldName,final boolean filterNonInheritable){
  final List<String> ret=new ArrayList<>();
  new HierarchyTraverser<Void>(this,worldName){
    @Override protected Void fetchLocal(    PermissionEntity entity,    String world){
      for (      String perm : entity.getOwnPermissions(world)) {
        if (filterNonInheritable && entity != PermissionEntity.this && perm.startsWith(NON_INHERITABLE_PREFIX)) {
          continue;
        }
        ret.add(perm);
        getInheritedChildPermissions(perm,ret);
      }
      for (      String perm : entity.getTimedPermissions(world)) {
        if (filterNonInheritable && entity != PermissionEntity.this && perm.startsWith(NON_INHERITABLE_PREFIX)) {
          continue;
        }
        ret.add(perm);
        getInheritedChildPermissions(perm,ret);
      }
      return null;
    }
  }
.traverse();
  return ret;
}",0.9967355821545156
151227,"public double getOwnOptionDouble(String optionName,String world,double defaultValue){
  String option=this.getOwnOption(optionName,world,Double.toString(defaultValue));
  try {
    return Double.parseDouble(option);
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}","public double getOwnOptionDouble(String optionName,String world,double defaultValue){
  String option=this.getOwnOption(optionName,world,Double.toString(defaultValue));
  try {
    return Double.parseDouble(option);
  }
 catch (  NumberFormatException ignore) {
  }
  return defaultValue;
}",0.991304347826087
151228,"protected List<PermissionGroup> getWorldParents(String worldName){
  List<PermissionGroup> groups=new LinkedList<PermissionGroup>();
  for (  String groupName : getData().getParents(worldName)) {
    if (groupName == null || groupName.trim().isEmpty() || (this instanceof PermissionGroup && groupName.equalsIgnoreCase(this.getIdentifier()))) {
      continue;
    }
    PermissionGroup group=this.manager.getGroup(groupName);
    if (!groups.contains(group)) {
      groups.add(group);
    }
  }
  Collections.sort(groups);
  return Collections.unmodifiableList(groups);
}","protected List<PermissionGroup> getWorldParents(String worldName){
  List<PermissionGroup> groups=new LinkedList<>();
  for (  String groupName : getData().getParents(worldName)) {
    if (groupName == null || groupName.trim().isEmpty() || (this instanceof PermissionGroup && groupName.equalsIgnoreCase(this.getIdentifier()))) {
      continue;
    }
    PermissionGroup group=this.manager.getGroup(groupName);
    if (!groups.contains(group)) {
      groups.add(group);
    }
  }
  Collections.sort(groups);
  return Collections.unmodifiableList(groups);
}",0.9867139061116031
151229,"/** 
 * Returns remaining lifetime of specified permission in world
 * @param permission Name of permission
 * @param world
 * @return remaining lifetime in seconds of timed permission. 0 if permission is transient
 */
public int getTimedPermissionLifetime(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (!this.timedPermissionsTime.containsKey(world + ""String_Node_Str"" + permission)) {
    return 0;
  }
  return (int)(this.timedPermissionsTime.get(world + ""String_Node_Str"" + permission).longValue() - (System.currentTimeMillis() / 1000L));
}","/** 
 * Returns remaining lifetime of specified permission in world
 * @param permission Name of permission
 * @param world
 * @return remaining lifetime in seconds of timed permission. 0 if permission is transient
 */
public int getTimedPermissionLifetime(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (!this.timedPermissionsTime.containsKey(world + ""String_Node_Str"" + permission)) {
    return 0;
  }
  return (int)(this.timedPermissionsTime.get(world + ""String_Node_Str"" + permission) - (System.currentTimeMillis() / 1000L));
}",0.9897435897435898
151230,"public int getOwnOptionInteger(String optionName,String world,int defaultValue){
  String option=this.getOwnOption(optionName,world,Integer.toString(defaultValue));
  try {
    return Integer.parseInt(option);
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}","public int getOwnOptionInteger(String optionName,String world,int defaultValue){
  String option=this.getOwnOption(optionName,world,Integer.toString(defaultValue));
  try {
    return Integer.parseInt(option);
  }
 catch (  NumberFormatException ignore) {
  }
  return defaultValue;
}",0.9911190053285968
151231,"protected List<PermissionGroup> getParentsInternal(String world){
  final List<PermissionGroup> ret=new ArrayList<PermissionGroup>();
  new HierarchyTraverser<Void>(this,world,false){
    @Override protected Void fetchLocal(    PermissionEntity entity,    String world){
      for (      String groupName : entity.getOwnParentIdentifiers(world)) {
        if (groupName == null || groupName.trim().isEmpty() || (PermissionEntity.this instanceof PermissionGroup && groupName.equalsIgnoreCase(getIdentifier()))) {
          continue;
        }
        PermissionGroup group=manager.getGroup(groupName);
        if (!ret.contains(group)) {
          ret.add(group);
        }
      }
      return null;
    }
  }
.traverse();
  Collections.sort(ret);
  return ret;
}","protected List<PermissionGroup> getParentsInternal(String world){
  final List<PermissionGroup> ret=new ArrayList<>();
  new HierarchyTraverser<Void>(this,world,false){
    @Override protected Void fetchLocal(    PermissionEntity entity,    String world){
      for (      String groupName : entity.getOwnParentIdentifiers(world)) {
        if (groupName == null || groupName.trim().isEmpty() || (PermissionEntity.this instanceof PermissionGroup && groupName.equalsIgnoreCase(getIdentifier()))) {
          continue;
        }
        PermissionGroup group=manager.getGroup(groupName);
        if (!ret.contains(group)) {
          ret.add(group);
        }
      }
      return null;
    }
  }
.traverse();
  Collections.sort(ret);
  return ret;
}",0.9900727994705492
151232,"/** 
 * Return integer value for option
 * @param optionName
 * @param world
 * @param defaultValue
 * @return option value or defaultValue if option was not found or is not integer
 */
public int getOptionInteger(String optionName,String world,int defaultValue){
  try {
    return Integer.parseInt(this.getOption(optionName,world,Integer.toString(defaultValue)));
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}","/** 
 * Return integer value for option
 * @param optionName
 * @param world
 * @param defaultValue
 * @return option value or defaultValue if option was not found or is not integer
 */
public int getOptionInteger(String optionName,String world,int defaultValue){
  try {
    return Integer.parseInt(this.getOption(optionName,world,Integer.toString(defaultValue)));
  }
 catch (  NumberFormatException ignore) {
  }
  return defaultValue;
}",0.9942857142857144
151233,"/** 
 * Returns double value for option
 * @param optionName
 * @param world
 * @param defaultValue
 * @return option value or defaultValue if option was not found or is not double
 */
public double getOptionDouble(String optionName,String world,double defaultValue){
  String option=this.getOption(optionName,world,Double.toString(defaultValue));
  try {
    return Double.parseDouble(option);
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}","/** 
 * Returns double value for option
 * @param optionName
 * @param world
 * @param defaultValue
 * @return option value or defaultValue if option was not found or is not double
 */
public double getOptionDouble(String optionName,String world,double defaultValue){
  String option=this.getOption(optionName,world,Double.toString(defaultValue));
  try {
    return Double.parseDouble(option);
  }
 catch (  NumberFormatException ignore) {
  }
  return defaultValue;
}",0.994640943193998
151234,"protected void getInheritedChildPermissions(Permission perm,List<String> list,boolean invert){
  if (perm == null) {
    return;
  }
  for (  Map.Entry<String,Boolean> entry : perm.getChildren().entrySet()) {
    boolean has=entry.getValue().booleanValue() ^ invert;
    String node=(has ? ""String_Node_Str"" : ""String_Node_Str"") + entry.getKey();
    if (!list.contains(node)) {
      list.add(node);
      getInheritedChildPermissions(node,list,!has);
    }
  }
}","protected void getInheritedChildPermissions(Permission perm,List<String> list,boolean invert){
  if (perm == null) {
    return;
  }
  for (  Map.Entry<String,Boolean> entry : perm.getChildren().entrySet()) {
    boolean has=entry.getValue() ^ invert;
    String node=(has ? ""String_Node_Str"" : ""String_Node_Str"") + entry.getKey();
    if (!list.contains(node)) {
      list.add(node);
      getInheritedChildPermissions(node,list,!has);
    }
  }
}",0.9835706462212488
151235,"public Map<String,List<PermissionGroup>> getAllParents(){
  Map<String,List<PermissionGroup>> allGroups=new HashMap<String,List<PermissionGroup>>();
  for (  String worldName : this.getWorlds()) {
    allGroups.put(worldName,this.getWorldParents(worldName));
  }
  allGroups.put(null,this.getWorldParents(null));
  return Collections.unmodifiableMap(allGroups);
}","public Map<String,List<PermissionGroup>> getAllParents(){
  Map<String,List<PermissionGroup>> allGroups=new HashMap<>();
  for (  String worldName : this.getWorlds()) {
    allGroups.put(worldName,this.getWorldParents(worldName));
  }
  allGroups.put(null,this.getWorldParents(null));
  return Collections.unmodifiableMap(allGroups);
}",0.3810888252148997
151236,"private void clearChildren(String worldName){
  for (  PermissionGroup group : this.getChildGroups(worldName)) {
    List<PermissionGroup> parentGroups=new LinkedList<PermissionGroup>(group.getOwnParents(worldName));
    parentGroups.remove(this);
    group.setParents(parentGroups,worldName);
  }
  for (  PermissionUser user : this.getUsers(worldName)) {
    user.removeGroup(this,worldName);
  }
}","private void clearChildren(String worldName){
  for (  PermissionGroup group : this.getChildGroups(worldName)) {
    List<PermissionGroup> parentGroups=new LinkedList<>(group.getOwnParents(worldName));
    parentGroups.remove(this);
    group.setParents(parentGroups,worldName);
  }
  for (  PermissionUser user : this.getUsers(worldName)) {
    user.removeGroup(this,worldName);
  }
}",0.9808917197452228
151237,"@Override public boolean setIdentifier(String identifier){
  ConfigurationSection section=findExistingNode(identifier,false);
  if (section != null) {
    return false;
  }
  this.nodePath=FileBackend.buildPath(basePath,identifier);
  this.entityName=identifier;
  if (!this.isVirtual()) {
    this.config.set(nodePath,node);
    this.save();
  }
  return true;
}","@Override public boolean setIdentifier(String identifier){
  ConfigurationSection section=findExistingNode(identifier,false);
  if (section != null) {
    return false;
  }
  String oldNodePath=this.nodePath;
  this.nodePath=FileBackend.buildPath(basePath,identifier);
  this.entityName=identifier;
  if (!this.isVirtual()) {
    this.config.set(nodePath,node);
    this.config.set(oldNodePath,null);
    this.save();
  }
  return true;
}",0.906367041198502
151238,"protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try (SQLConnection conn=backend.getSQL()){
    conn.prepAndBind(sql,this.prefix,this.suffix,this.def ? 1 : 0,this.getIdentifier(),this.type.ordinal()).execute();
  }
 catch (  SQLException e) {
    if (this.isVirtual()) {
      this.virtual=false;
      this.updateInfo();
    }
    throw new RuntimeException(e);
  }
  this.virtual=false;
}","protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try (SQLConnection conn=backend.getSQL()){
    conn.prepAndBind(sql,nullToEmpty(this.prefix),nullToEmpty(this.suffix),this.def ? 1 : 0,this.getIdentifier(),this.type.ordinal()).execute();
  }
 catch (  SQLException e) {
    if (this.isVirtual()) {
      this.virtual=false;
      this.updateInfo();
    }
    throw new RuntimeException(e);
  }
  this.virtual=false;
}",0.9737373737373738
151239,"private String nullToEmpty(String enter){
  if (enter == null || enter.equals(""String_Node_Str"")) {
    return null;
  }
  return enter;
}","private String nullToEmpty(String enter){
  if (enter == null) {
    return ""String_Node_Str"";
  }
  return enter;
}",0.8267716535433071
151240,"protected final void fetchInfo(){
  try (SQLConnection conn=backend.getSQL()){
    ResultSet result=conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),this.type.ordinal()).executeQuery();
    if (result.next()) {
      this.prefix=nullToEmpty(result.getString(""String_Node_Str""));
      this.suffix=nullToEmpty(result.getString(""String_Node_Str""));
      this.def=result.getBoolean(""String_Node_Str"");
      this.identifier=result.getString(""String_Node_Str"");
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","protected final void fetchInfo(){
  try (SQLConnection conn=backend.getSQL()){
    ResultSet result=conn.prepAndBind(""String_Node_Str"",this.getIdentifier(),this.type.ordinal()).executeQuery();
    if (result.next()) {
      this.prefix=emptyToNull(result.getString(""String_Node_Str""));
      this.suffix=emptyToNull(result.getString(""String_Node_Str""));
      this.def=result.getBoolean(""String_Node_Str"");
      this.identifier=result.getString(""String_Node_Str"");
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.8960468521229868
151241,"@Override public void initialize() throws PermissionBackendException {
  PermissionsEx plugin=PermissionsEx.getPlugin();
  String permissionFilename=config.getString(""String_Node_Str"");
  if (permissionFilename == null) {
    permissionFilename=""String_Node_Str"";
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  String baseDir=config.getString(""String_Node_Str"",plugin.getDataFolder());
  if (baseDir.contains(""String_Node_Str"") && !""String_Node_Str"".equals(File.separator)) {
    baseDir=baseDir.replace(""String_Node_Str"",File.separator);
  }
  File baseDirectory=new File(baseDir);
  if (!baseDirectory.exists()) {
    baseDirectory.mkdirs();
  }
  this.permissionsFile=new File(baseDir,permissionFilename);
  this.reload();
}","@Override public void initialize() throws PermissionBackendException {
  Plugin plugin=PermissionsEx.getPlugin();
  String permissionFilename=config.getString(""String_Node_Str"");
  if (permissionFilename == null) {
    permissionFilename=""String_Node_Str"";
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  String baseDir=config.getString(""String_Node_Str"",plugin.getDataFolder().getPath());
  if (baseDir.contains(""String_Node_Str"") && !""String_Node_Str"".equals(File.separator)) {
    baseDir=baseDir.replace(""String_Node_Str"",File.separator);
  }
  File baseDirectory=new File(baseDir);
  if (!baseDirectory.exists()) {
    baseDirectory.mkdirs();
  }
  this.permissionsFile=new File(baseDir,permissionFilename);
  this.reload();
}",0.5914922349763673
151242,"@Override public String getMatchingExpression(String permission,String world){
  String cacheId=world + ""String_Node_Str"" + permission;
  if (!this.cachedAnwsers.containsKey(cacheId)) {
    this.cachedAnwsers.put(cacheId,super.getMatchingExpression(permission,world));
  }
  return this.cachedAnwsers.get(cacheId);
}","@Override public String getMatchingExpression(String permission,String world){
  String cacheId=world + ""String_Node_Str"" + permission;
  if (!this.cachedAnwsers.containsKey(cacheId)) {
    String result=super.getMatchingExpression(permission,world);
    if (result == null) {
      result=PERMISSION_NOT_FOUND;
    }
    this.cachedAnwsers.put(cacheId,result);
  }
  String result=this.cachedAnwsers.get(cacheId);
  if (PERMISSION_NOT_FOUND.equals(result)) {
    result=null;
  }
  return result;
}",0.6429447852760736
151243,"@Override public void setDefaultGroup(PermissionGroup group,String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=""String_Node_Str"" + worldName + ""String_Node_Str""+ defaultGroupProperty;
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      groupSection.set(defaultGroupProperty,false);
      if (!entry.getValue().equals(group.getName())) {
        groupSection.set(defaultGroupProperty,null);
      }
 else {
        groupSection.set(defaultGroupProperty,true);
      }
    }
  }
  this.save();
}","@Override public void setDefaultGroup(PermissionGroup group,String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=buildPath(""String_Node_Str"",worldName,defaultGroupProperty);
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      groupSection.set(defaultGroupProperty,false);
      if (!entry.getValue().equals(group.getName())) {
        groupSection.set(defaultGroupProperty,null);
      }
 else {
        groupSection.set(defaultGroupProperty,true);
      }
    }
  }
  this.save();
}",0.9769696969696968
151244,"@Override public PermissionGroup getDefaultGroup(String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  if (groups == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=""String_Node_Str"" + worldName + ""String_Node_Str""+ defaultGroupProperty;
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      if (groupSection.getBoolean(defaultGroupProperty,false)) {
        return this.manager.getGroup(entry.getKey());
      }
    }
  }
  if (worldName == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return null;
}","@Override public PermissionGroup getDefaultGroup(String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  if (groups == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=buildPath(""String_Node_Str"",worldName,defaultGroupProperty);
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      if (groupSection.getBoolean(defaultGroupProperty,false)) {
        return this.manager.getGroup(entry.getKey());
      }
    }
  }
  if (worldName == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return null;
}",0.9780346820809248
151245,"@Override public String[] getWorldInheritance(String world){
  if (world != null && !world.isEmpty()) {
    List<String> parentWorlds=this.permissions.getStringList(""String_Node_Str"" + world + ""String_Node_Str"");
    if (parentWorlds != null) {
      return parentWorlds.toArray(new String[parentWorlds.size()]);
    }
  }
  return new String[0];
}","@Override public String[] getWorldInheritance(String world){
  if (world != null && !world.isEmpty()) {
    List<String> parentWorlds=this.permissions.getStringList(buildPath(""String_Node_Str"",world,""String_Node_Str""));
    if (parentWorlds != null) {
      return parentWorlds.toArray(new String[parentWorlds.size()]);
    }
  }
  return new String[0];
}",0.9587482219061166
151246,"@Override public void reload(){
  permissions=YamlConfiguration.loadConfiguration(permissionsFile);
  permissions.options().pathSeparator('/');
}","@Override public void reload(){
  permissions=new YamlConfiguration();
  permissions.options().pathSeparator(PATH_SEPARATOR);
  try {
    permissions.load(permissionsFile);
  }
 catch (  Throwable e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.3219512195121951
151247,"@Override public void setWorldInheritance(String world,String[] parentWorlds){
  if (world == null && world.isEmpty()) {
    return;
  }
  this.permissions.set(""String_Node_Str"" + world + ""String_Node_Str"",Arrays.asList(parentWorlds));
  this.save();
}","@Override public void setWorldInheritance(String world,String[] parentWorlds){
  if (world == null && world.isEmpty()) {
    return;
  }
  this.permissions.set(buildPath(""String_Node_Str"",world,""String_Node_Str""),Arrays.asList(parentWorlds));
  this.save();
}",0.943248532289628
151248,"@Override public void setOption(String option,String value,String world){
  String path=""String_Node_Str"";
  if (world != null && !world.isEmpty()) {
    path=""String_Node_Str"" + world + ""String_Node_Str""+ path;
  }
  path+=""String_Node_Str"" + option;
  if (value != null && !value.isEmpty()) {
    this.node.set(path,value);
  }
 else {
    this.node.set(path,null);
  }
  this.save();
}","@Override public void setOption(String option,String value,String world){
  this.node.set(formatPath(world,""String_Node_Str"",option),value);
  this.save();
}",0.4770642201834862
151249,"@Override public String getPrefix(String worldName){
  String prefixNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    prefixNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ prefixNode;
  }
  return this.node.getString(prefixNode);
}","@Override public String getPrefix(String worldName){
  return this.node.getString(formatPath(worldName,""String_Node_Str""));
}",0.4732824427480916
151250,"@Override public String[] getPermissions(String world){
  String permissionsNode=""String_Node_Str"";
  if (world != null && !world.isEmpty()) {
    permissionsNode=""String_Node_Str"" + world + ""String_Node_Str""+ permissionsNode;
  }
  List<String> permissions=this.node.getStringList(permissionsNode);
  if (permissions == null) {
    return new String[0];
  }
  return permissions.toArray(new String[permissions.size()]);
}","@Override public String[] getPermissions(String world){
  List<String> permissions=this.node.getStringList(formatPath(world,""String_Node_Str""));
  if (permissions == null) {
    return new String[0];
  }
  return permissions.toArray(new String[permissions.size()]);
}",0.5834542815674891
151251,"@Override public String getOption(String option,String world,String defaultValue){
  return this.node.getString((world == null ? ""String_Node_Str"" : ""String_Node_Str"" + world + ""String_Node_Str"") + ""String_Node_Str"" + option,defaultValue);
}","@Override public String getOption(String option,String world,String defaultValue){
  return this.node.getString(formatPath(world,""String_Node_Str"",option),defaultValue);
}",0.7669902912621359
151252,"@Override public void setPermissions(String[] permissions,String world){
  String permissionsNode=""String_Node_Str"";
  if (world != null && !world.isEmpty()) {
    permissionsNode=""String_Node_Str"" + world + ""String_Node_Str""+ permissionsNode;
  }
  if (permissions.length > 0) {
    this.node.set(permissionsNode,Arrays.asList(permissions));
  }
 else {
    this.node.set(permissionsNode,null);
  }
  this.save();
}","@Override public void setPermissions(String[] permissions,String world){
  this.node.set(formatPath(world,""String_Node_Str""),permissions.length > 0 ? Arrays.asList(permissions) : null);
  this.save();
}",0.3559870550161812
151253,"@Override public Map<String,String[]> getAllPermissions(){
  Map<String,String[]> allPermissions=new HashMap<String,String[]>();
  List<String> commonPermissions=this.node.getStringList(""String_Node_Str"");
  if (commonPermissions != null) {
    allPermissions.put(null,commonPermissions.toArray(new String[0]));
  }
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection != null) {
    for (    String world : worldsSection.getKeys(false)) {
      List<String> worldPermissions=this.node.getStringList(""String_Node_Str"" + world + ""String_Node_Str"");
      if (commonPermissions != null) {
        allPermissions.put(world,worldPermissions.toArray(new String[0]));
      }
    }
  }
  return allPermissions;
}","@Override public Map<String,String[]> getAllPermissions(){
  Map<String,String[]> allPermissions=new HashMap<String,String[]>();
  List<String> commonPermissions=this.node.getStringList(""String_Node_Str"");
  if (commonPermissions != null) {
    allPermissions.put(null,commonPermissions.toArray(new String[0]));
  }
  ConfigurationSection worldsSection=this.node.getConfigurationSection(""String_Node_Str"");
  if (worldsSection != null) {
    for (    String world : worldsSection.getKeys(false)) {
      List<String> worldPermissions=this.node.getStringList(FileBackend.buildPath(""String_Node_Str"",world,""String_Node_Str""));
      if (commonPermissions != null) {
        allPermissions.put(world,worldPermissions.toArray(new String[0]));
      }
    }
  }
  return allPermissions;
}",0.97349709114415
151254,"@Override public String getSuffix(String worldName){
  String suffixNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    suffixNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ suffixNode;
  }
  return this.node.getString(suffixNode);
}","@Override public String getSuffix(String worldName){
  return this.node.getString(formatPath(worldName,""String_Node_Str""));
}",0.4681933842239186
151255,"@Override public void setPrefix(String prefix,String worldName){
  String prefixNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    prefixNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ prefixNode;
  }
  if (prefix != null && !prefix.isEmpty()) {
    this.node.set(prefixNode,prefix);
  }
 else {
    this.node.set(prefixNode,null);
  }
  this.save();
}","@Override public void setPrefix(String prefix,String worldName){
  this.node.set(formatPath(worldName,""String_Node_Str""),prefix);
  this.save();
}",0.4382022471910112
151256,"@Override public void setSuffix(String suffix,String worldName){
  String suffixNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    suffixNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ suffixNode;
  }
  if (suffix != null && !suffix.isEmpty()) {
    this.node.set(suffixNode,suffix);
  }
 else {
    this.node.set(suffixNode,null);
  }
  this.save();
}","@Override public void setSuffix(String suffix,String worldName){
  this.node.set(formatPath(worldName,""String_Node_Str""),suffix);
  this.save();
}",0.4382022471910112
151257,"protected final ConfigurationSection getNode(String baseNode,String entityName){
  this.nodePath=baseNode + ""String_Node_Str"" + entityName;
  ConfigurationSection entityNode=backend.permissions.getConfigurationSection(this.nodePath);
  if (entityNode != null) {
    this.virtual=false;
    return entityNode;
  }
  ConfigurationSection users=backend.permissions.getConfigurationSection(baseNode);
  if (users != null) {
    for (    Map.Entry<String,Object> entry : users.getValues(false).entrySet()) {
      if (entry.getKey().equalsIgnoreCase(entityName) && entry.getValue() instanceof ConfigurationSection) {
        this.setName(entry.getKey());
        this.nodePath=baseNode + ""String_Node_Str"" + this.getName();
        this.virtual=false;
        return (ConfigurationSection)entry.getValue();
      }
    }
  }
  this.virtual=true;
  return backend.permissions.createSection(nodePath);
}","protected final ConfigurationSection getNode(String baseNode,String entityName){
  this.nodePath=FileBackend.buildPath(baseNode,entityName);
  ConfigurationSection entityNode=backend.permissions.getConfigurationSection(this.nodePath);
  if (entityNode != null) {
    this.virtual=false;
    return entityNode;
  }
  ConfigurationSection users=backend.permissions.getConfigurationSection(baseNode);
  if (users != null) {
    for (    Map.Entry<String,Object> entry : users.getValues(false).entrySet()) {
      if (entry.getKey().equalsIgnoreCase(entityName) && entry.getValue() instanceof ConfigurationSection) {
        this.setName(entry.getKey());
        this.nodePath=FileBackend.buildPath(baseNode,this.getName());
        this.virtual=false;
        return (ConfigurationSection)entry.getValue();
      }
    }
  }
  this.virtual=true;
  return backend.permissions.createSection(nodePath);
}",0.9297658862876256
151258,"@Override public Map<String,String> getOptions(String world){
  String optionNode=(world == null) ? ""String_Node_Str"" : ""String_Node_Str"" + world + ""String_Node_Str"";
  ConfigurationSection optionsSection=this.node.getConfigurationSection(optionNode);
  if (optionsSection != null) {
    return this.collectOptions(optionsSection);
  }
  return new HashMap<String,String>(0);
}","@Override public Map<String,String> getOptions(String world){
  ConfigurationSection optionsSection=this.node.getConfigurationSection(formatPath(world,""String_Node_Str""));
  if (optionsSection != null) {
    return this.collectOptions(optionsSection);
  }
  return new HashMap<String,String>(0);
}",0.6409495548961425
151259,"@Override public void setParentGroups(String[] parentGroups,String worldName){
  if (parentGroups == null) {
    return;
  }
  String inheritanceNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    inheritanceNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ inheritanceNode;
  }
  this.node.set(inheritanceNode,Arrays.asList(parentGroups));
  this.save();
  this.callEvent(PermissionEntityEvent.Action.INHERITANCE_CHANGED);
}","@Override public void setParentGroups(String[] parentGroups,String worldName){
  if (parentGroups == null) {
    return;
  }
  this.node.set(FileEntity.formatPath(worldName,""String_Node_Str""),Arrays.asList(parentGroups));
  this.save();
  this.callEvent(PermissionEntityEvent.Action.INHERITANCE_CHANGED);
}",0.680628272251309
151260,"@Override public String[] getParentGroupsNamesImpl(String worldName){
  String inheritanceNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    inheritanceNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ inheritanceNode;
  }
  List<String> parents=this.node.getStringList(inheritanceNode);
  if (parents.isEmpty()) {
    return new String[0];
  }
  return parents.toArray(new String[parents.size()]);
}","@Override public String[] getParentGroupsNamesImpl(String worldName){
  List<String> parents=this.node.getStringList(FileEntity.formatPath(worldName,""String_Node_Str""));
  if (parents.isEmpty()) {
    return new String[0];
  }
  return parents.toArray(new String[parents.size()]);
}",0.5726256983240223
151261,"@Override protected String[] getGroupsNamesImpl(String worldName){
  String inheritanceNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    inheritanceNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ inheritanceNode;
  }
  Object groups=this.node.get(inheritanceNode);
  if (groups instanceof String) {
    String[] groupsArray;
    String groupsString=((String)groups);
    if (groupsString.contains(""String_Node_Str"")) {
      groupsArray=((String)groups).split(""String_Node_Str"");
    }
 else {
      groupsArray=new String[]{groupsString};
    }
    this.node.set(""String_Node_Str"",Arrays.asList(groupsArray));
    this.save();
    return groupsArray;
  }
 else   if (groups instanceof List) {
    return ((List<String>)groups).toArray(new String[0]);
  }
 else {
    return new String[0];
  }
}","@Override protected String[] getGroupsNamesImpl(String worldName){
  Object groups=this.node.get(FileEntity.formatPath(worldName,""String_Node_Str""));
  if (groups instanceof String) {
    String[] groupsArray;
    String groupsString=((String)groups);
    if (groupsString.contains(""String_Node_Str"")) {
      groupsArray=((String)groups).split(""String_Node_Str"");
    }
 else {
      groupsArray=new String[]{groupsString};
    }
    this.node.set(""String_Node_Str"",Arrays.asList(groupsArray));
    this.save();
    return groupsArray;
  }
 else   if (groups instanceof List) {
    return ((List<String>)groups).toArray(new String[0]);
  }
 else {
    return new String[0];
  }
}",0.8359788359788359
151262,"@Override public void setGroups(String[] groups,String worldName){
  if (groups == null) {
    return;
  }
  String inheritanceNode=""String_Node_Str"";
  if (worldName != null && !worldName.isEmpty()) {
    inheritanceNode=""String_Node_Str"" + worldName + ""String_Node_Str""+ inheritanceNode;
  }
  this.node.set(inheritanceNode,Arrays.asList(groups));
  this.save();
  this.callEvent(PermissionEntityEvent.Action.INHERITANCE_CHANGED);
}","@Override public void setGroups(String[] groups,String worldName){
  if (groups == null) {
    return;
  }
  this.node.set(FileEntity.formatPath(worldName,""String_Node_Str""),Arrays.asList(groups));
  this.save();
  this.callEvent(PermissionEntityEvent.Action.INHERITANCE_CHANGED);
}",0.6564245810055865
151263,"public void onSystemEvent(PermissionSystemEvent event){
  if (event.getAction() == PermissionSystemEvent.Action.DEBUGMODE_TOGGLE) {
    return;
  }
  updateAllPlayers();
}","@EventHandler(priority=EventPriority.LOW) public void onSystemEvent(PermissionSystemEvent event){
  if (event.getAction() == PermissionSystemEvent.Action.DEBUGMODE_TOGGLE) {
    return;
  }
  updateAllPlayers();
}",0.890625
151264,"@Override public void setDefaultGroup(PermissionGroup group,String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=buildPath(""String_Node_Str"",worldName,defaultGroupProperty);
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      groupSection.set(defaultGroupProperty,false);
      if (!entry.getValue().equals(group.getName())) {
        groupSection.set(defaultGroupProperty,null);
      }
 else {
        groupSection.set(defaultGroupProperty,true);
      }
    }
  }
  this.save();
}","@Override public void setDefaultGroup(PermissionGroup group,String worldName){
  ConfigurationSection groups=this.permissions.getConfigurationSection(""String_Node_Str"");
  String defaultGroupProperty=""String_Node_Str"";
  if (worldName != null) {
    defaultGroupProperty=buildPath(""String_Node_Str"",worldName,defaultGroupProperty);
  }
  for (  Map.Entry<String,Object> entry : groups.getValues(false).entrySet()) {
    if (entry.getValue() instanceof ConfigurationSection) {
      ConfigurationSection groupSection=(ConfigurationSection)entry.getValue();
      groupSection.set(defaultGroupProperty,false);
      if (!groupSection.getName().equals(group.getName())) {
        groupSection.set(defaultGroupProperty,null);
      }
 else {
        groupSection.set(defaultGroupProperty,true);
      }
    }
  }
  this.save();
}",0.9805352798053528
151265,"public void insert(String table,String[] fields,List<Object[]> rows) throws SQLException {
  this.checkConnection();
  String[] fieldPlaceholders=new String[fields.length];
  Arrays.fill(fieldPlaceholders,""String_Node_Str"");
  String sql=""String_Node_Str"" + table + ""String_Node_Str""+ StringUtils.implode(fields,""String_Node_Str"")+ ""String_Node_Str""+ StringUtils.implode(fieldPlaceholders,""String_Node_Str"")+ ""String_Node_Str"";
  PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
  for (  Object[] params : rows) {
    this.bindParams(stmt,params);
    stmt.execute();
  }
}","public void insert(String table,String[] fields,List<Object[]> rows) throws SQLException {
  this.checkConnection();
  String[] fieldPlaceholders=new String[fields.length];
  Arrays.fill(fieldPlaceholders,""String_Node_Str"");
  String sql=""String_Node_Str"" + table + ""String_Node_Str""+ StringUtils.implode(fields,""String_Node_Str"")+ ""String_Node_Str""+ StringUtils.implode(fieldPlaceholders,""String_Node_Str"")+ ""String_Node_Str"";
  PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
  try {
    for (    Object[] params : rows) {
      this.bindParams(stmt,params);
      stmt.execute();
    }
  }
  finally {
    stmt.close();
  }
}",0.9472
151266,"public void updateQuery(String sql,Object... params){
  try {
    this.checkConnection();
    PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
    if (params != null) {
      this.bindParams(stmt,params);
    }
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","public void updateQuery(String sql,Object... params){
  try {
    this.checkConnection();
    PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
    try {
      if (params != null) {
        this.bindParams(stmt,params);
      }
      stmt.executeUpdate();
    }
  finally {
      stmt.close();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9093406593406592
151267,"public ResultSet selectQuery(String sql,Object... params) throws SQLException {
  this.checkConnection();
  PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
  if (params != null) {
    this.bindParams(stmt,params);
  }
  return stmt.executeQuery();
}","public ResultSet selectQuery(String sql,Object... params) throws SQLException {
  this.checkConnection();
  PreparedStatement stmt=this.db.prepareStatement(this.prepareQuery(sql));
  try {
    if (params != null) {
      this.bindParams(stmt,params);
    }
    return stmt.executeQuery();
  }
  finally {
    stmt.close();
  }
}",0.9102990033222592
151268,"public static String[] getEntitiesNames(SQLConnection sql,Type type,boolean defaultOnly){
  try {
    List<String> entities=new LinkedList<String>();
    ResultSet result=sql.selectQuery(""String_Node_Str"" + (defaultOnly ? ""String_Node_Str"" : ""String_Node_Str""),type.ordinal());
    while (result.next()) {
      entities.add(result.getString(""String_Node_Str""));
    }
    return entities.toArray(new String[0]);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","public static String[] getEntitiesNames(SQLConnection sql,Type type,boolean defaultOnly){
  try {
    List<String> entities=new LinkedList<String>();
    ResultSet result=sql.selectQuery(""String_Node_Str"" + (defaultOnly ? ""String_Node_Str"" : ""String_Node_Str""),type.ordinal());
    while (result.next()) {
      entities.add(result.getString(""String_Node_Str""));
    }
    result.close();
    return entities.toArray(new String[0]);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9797979797979798
151269,"protected final void fetchInheritance(){
  try {
    this.parents=new HashMap<String,Set<String>>();
    ResultSet results=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    while (results.next()) {
      String parentName=results.getString(1);
      String worldName=results.getString(2);
      if (!this.parents.containsKey(worldName)) {
        this.parents.put(worldName,new HashSet<String>());
      }
      this.parents.get(worldName).add(parentName);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","protected final void fetchInheritance(){
  try {
    this.parents=new HashMap<String,Set<String>>();
    ResultSet results=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    while (results.next()) {
      String parentName=results.getString(1);
      String worldName=results.getString(2);
      if (!this.parents.containsKey(worldName)) {
        this.parents.put(worldName,new HashSet<String>());
      }
      this.parents.get(worldName).add(parentName);
    }
    results.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9817232375979112
151270,"protected final void fetchPermissions(){
  this.worldsOptions=new HashMap<String,Map<String,String>>();
  this.worldsPermissions=new HashMap<String,List<String>>();
  this.commonOptions=new HashMap<String,String>();
  this.commonPermissions=new LinkedList<String>();
  try {
    ResultSet results=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    while (results.next()) {
      String permission=results.getString(""String_Node_Str"").trim();
      String world=results.getString(""String_Node_Str"").trim();
      String value=results.getString(""String_Node_Str"").trim();
      if (value.isEmpty()) {
        if (!world.isEmpty()) {
          List<String> worldPermissions=this.worldsPermissions.get(world);
          if (worldPermissions == null) {
            worldPermissions=new LinkedList<String>();
            this.worldsPermissions.put(world,worldPermissions);
          }
          worldPermissions.add(permission);
        }
 else {
          this.commonPermissions.add(permission);
        }
      }
 else {
        if (!world.isEmpty()) {
          Map<String,String> worldOptions=this.worldsOptions.get(world);
          if (worldOptions == null) {
            worldOptions=new HashMap<String,String>();
            worldsOptions.put(world,worldOptions);
          }
          worldOptions.put(permission,value);
        }
 else {
          commonOptions.put(permission,value);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","protected final void fetchPermissions(){
  this.worldsOptions=new HashMap<String,Map<String,String>>();
  this.worldsPermissions=new HashMap<String,List<String>>();
  this.commonOptions=new HashMap<String,String>();
  this.commonPermissions=new LinkedList<String>();
  try {
    ResultSet results=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    while (results.next()) {
      String permission=results.getString(""String_Node_Str"").trim();
      String world=results.getString(""String_Node_Str"").trim();
      String value=results.getString(""String_Node_Str"").trim();
      if (value.isEmpty()) {
        if (!world.isEmpty()) {
          List<String> worldPermissions=this.worldsPermissions.get(world);
          if (worldPermissions == null) {
            worldPermissions=new LinkedList<String>();
            this.worldsPermissions.put(world,worldPermissions);
          }
          worldPermissions.add(permission);
        }
 else {
          this.commonPermissions.add(permission);
        }
      }
 else {
        if (!world.isEmpty()) {
          Map<String,String> worldOptions=this.worldsOptions.get(world);
          if (worldOptions == null) {
            worldOptions=new HashMap<String,String>();
            worldsOptions.put(world,worldOptions);
          }
          worldOptions.put(permission,value);
        }
 else {
          commonOptions.put(permission,value);
        }
      }
    }
    results.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9931079750574336
151271,"protected final void fetchInfo(){
  try {
    ResultSet result=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    if (result.next()) {
      this.prefix=result.getString(""String_Node_Str"");
      this.suffix=result.getString(""String_Node_Str"");
      this.setName(result.getString(""String_Node_Str""));
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","protected final void fetchInfo(){
  try {
    ResultSet result=this.db.selectQuery(""String_Node_Str"",this.getName(),this.type.ordinal());
    if (result.next()) {
      this.prefix=result.getString(""String_Node_Str"");
      this.suffix=result.getString(""String_Node_Str"");
      this.setName(result.getString(""String_Node_Str""));
      this.virtual=false;
    }
 else {
      this.prefix=""String_Node_Str"";
      this.suffix=""String_Node_Str"";
      this.virtual=true;
    }
    result.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9820466786355476
151272,"protected final ConfigurationSection getNode(String baseNode,String entityName){
  this.nodePath=FileBackend.buildPath(baseNode,entityName);
  ConfigurationSection entityNode=backend.permissions.getConfigurationSection(this.nodePath);
  if (entityNode != null) {
    this.virtual=false;
    return entityNode;
  }
  ConfigurationSection users=backend.permissions.getConfigurationSection(baseNode);
  if (users != null) {
    for (    Map.Entry<String,Object> entry : users.getValues(false).entrySet()) {
      if (entry.getKey().equalsIgnoreCase(entityName) && entry.getValue() instanceof ConfigurationSection) {
        this.setName(entry.getKey());
        this.nodePath=FileBackend.buildPath(baseNode,this.getName());
        this.virtual=false;
        return (ConfigurationSection)entry.getValue();
      }
    }
  }
  this.virtual=true;
  return backend.permissions.createSection(nodePath);
}","protected final ConfigurationSection getNode(String baseNode,String entityName){
  this.nodePath=FileBackend.buildPath(baseNode,entityName);
  ConfigurationSection entityNode=backend.permissions.getConfigurationSection(this.nodePath);
  if (entityNode != null) {
    this.virtual=false;
    return entityNode;
  }
  ConfigurationSection users=backend.permissions.getConfigurationSection(baseNode);
  if (users != null) {
    for (    Map.Entry<String,Object> entry : users.getValues(false).entrySet()) {
      if (entry.getKey().equalsIgnoreCase(entityName) && entry.getValue() instanceof ConfigurationSection) {
        this.setName(entry.getKey());
        this.nodePath=FileBackend.buildPath(baseNode,this.getName());
        this.virtual=false;
        return (ConfigurationSection)entry.getValue();
      }
    }
  }
  this.virtual=true;
  ConfigurationSection section=backend.permissions.createSection(nodePath);
  backend.permissions.set(nodePath,null);
  return section;
}",0.9488817891373802
151273,"public String getOwnOption(String option,String world){
  return this.getOwnOption(option,world,""String_Node_Str"");
}","public String getOwnOption(String option,String world){
  return this.getOwnOption(option,world,null);
}",0.9140271493212668
151274,"/** 
 * Returns rank in ranking system. 0 if group is not ranked
 * @return 
 */
public int getRank(){
  return this.getOwnOptionInteger(""String_Node_Str"",""String_Node_Str"",0);
}","/** 
 * Returns rank in ranking system. 0 if group is not ranked
 * @return 
 */
public int getRank(){
  return this.getOwnOptionInteger(""String_Node_Str"",null,0);
}",0.9446064139941692
151275,"public String getOwnOption(String option,String world){
  return this.getOwnOption(option,world,""String_Node_Str"");
}","public String getOwnOption(String option,String world){
  return this.getOwnOption(option,world,null);
}",0.9140271493212668
151276,"public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.UNDEFINED;
}","public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (super.isPermissionSet(permission)) {
      PermissionCheckResult result=PermissionCheckResult.fromBoolean(super.hasPermission(permission));
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ result+ ""String_Node_Str"");
      }
      return result;
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.UNDEFINED;
}",0.8844868735083532
151277,"@Override public Set<PermissionAttachmentInfo> getEffectivePermissions(){
  if (!this.injectMetadata) {
    return super.getEffectivePermissions();
  }
  Set<PermissionAttachmentInfo> infoSet=super.getEffectivePermissions();
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String world=this.player.getWorld().getName();
    PermissionAttachment attachment=new PermissionAttachment(PermissionsEx.getPlugin(),this.player);
    for (    PermissionGroup group : user.getGroups(world)) {
      infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + group.getName(),attachment,true));
    }
    for (    Map.Entry<String,String> option : user.getOptions(world).entrySet()) {
      infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + option.getKey() + ""String_Node_Str""+ option.getValue(),attachment,true));
    }
    infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + user.getPrefix(world),attachment,true));
    infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + user.getSuffix(world),attachment,true));
    for (    Permission perm : Bukkit.getServer().getPluginManager().getPermissions()) {
      if (super.isPermissionSet(perm)) {
        continue;
      }
      String expression=user.getMatchingExpression(perm.getName(),world);
      if (expression != null) {
        infoSet.add(new PermissionAttachmentInfo(this.player,perm.getName(),attachment,user.explainExpression(expression)));
      }
    }
  }
 catch (  Throwable e) {
  }
  return infoSet;
}","@Override public Set<PermissionAttachmentInfo> getEffectivePermissions(){
  if (!this.injectMetadata || !PermissionsEx.isAvailable()) {
    return super.getEffectivePermissions();
  }
  Set<PermissionAttachmentInfo> infoSet=super.getEffectivePermissions();
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String world=this.player.getWorld().getName();
    PermissionAttachment attachment=new PermissionAttachment(PermissionsEx.getPlugin(),this.player);
    for (    PermissionGroup group : user.getGroups(world)) {
      infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + group.getName(),attachment,true));
    }
    for (    Map.Entry<String,String> option : user.getOptions(world).entrySet()) {
      infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + option.getKey() + ""String_Node_Str""+ option.getValue(),attachment,true));
    }
    infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + user.getPrefix(world),attachment,true));
    infoSet.add(new PermissionAttachmentInfo(this.player,""String_Node_Str"" + user.getSuffix(world),attachment,true));
    for (    Permission perm : Bukkit.getServer().getPluginManager().getPermissions()) {
      if (super.isPermissionSet(perm)) {
        continue;
      }
      String expression=user.getMatchingExpression(perm.getName(),world);
      if (expression != null) {
        infoSet.add(new PermissionAttachmentInfo(this.player,perm.getName(),attachment,user.explainExpression(expression)));
      }
    }
  }
 catch (  Throwable e) {
  }
  return infoSet;
}",0.8082539682539682
151278,"/** 
 * Reset in-memory object of specified user
 * @param userName user's name
 */
public void resetUser(String userName){
  this.users.remove(userName);
}","/** 
 * Reset in-memory object of specified user
 * @param userName user's name
 */
public void resetUser(String userName){
  this.users.remove(userName.toLowerCase());
}",0.9570552147239264
151279,"public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    if (user == null) {
      return PermissionCheckResult.UNDEFINED;
    }
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.FALSE;
}","public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.UNDEFINED;
}",0.9792771084337348
151280,"public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.UNDEFINED;
}","public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.UNDEFINED;
}",0.4767042667974497
151281,"public boolean performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    if (user == null) {
      return super.hasPermission(permission);
    }
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return user.explainExpression(expression);
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          if (this.hasPermission(parentPermission)) {
            if (user.isDebug()) {
              Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + parentPermission + ""String_Node_Str""));
            }
            return parentNodes.get(parentPermission).booleanValue();
          }
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return true;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return false;
}","public PermissionCheckResult performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    if (user == null) {
      return PermissionCheckResult.UNDEFINED;
    }
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          PermissionCheckResult result=this.checkPermission(parentPermission);
          if (result == PermissionCheckResult.UNDEFINED) {
            continue;
          }
          PermissionCheckResult anwser=PermissionCheckResult.fromBoolean(parentNodes.get(parentPermission).booleanValue() ^ !result.toBoolean());
          if (user.isDebug()) {
            Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ anwser+ ""String_Node_Str""+ parentPermission+ ""String_Node_Str"");
          }
          return anwser;
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return PermissionCheckResult.TRUE;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return PermissionCheckResult.FALSE;
}",0.7386478304742684
151282,"public boolean performCheck(String permission,String worldName){
  if (permission.equals(""String_Node_Str"")) {
    return PermissionsEx.isAvailable();
  }
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    if (user == null) {
      return super.hasPermission(permission);
    }
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return user.explainExpression(expression);
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          if (this.hasPermission(parentPermission)) {
            if (user.isDebug()) {
              Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + parentPermission + ""String_Node_Str""));
            }
            return parentNodes.get(parentPermission).booleanValue();
          }
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return true;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return false;
}","public boolean performCheck(String permission,String worldName){
  try {
    PermissionUser user=PermissionsEx.getUser(this.player);
    if (user == null) {
      return super.hasPermission(permission);
    }
    String expression=user.getMatchingExpression(permission.toLowerCase(),worldName);
    if (expression != null || this.strictMode) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + expression + ""String_Node_Str""));
      }
      return user.explainExpression(expression);
    }
    if (this.bridge.isEnableParentNodes()) {
      Map<String,Boolean> parentNodes=this.bridge.getChildPermissions().get(permission.toLowerCase());
      if (parentNodes != null) {
        for (        String parentPermission : parentNodes.keySet()) {
          if (this.hasPermission(parentPermission)) {
            if (user.isDebug()) {
              Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str""+ (expression == null ? ""String_Node_Str"" : ""String_Node_Str"" + parentPermission + ""String_Node_Str""));
            }
            return parentNodes.get(parentPermission).booleanValue();
          }
        }
      }
    }
    if (super.hasPermission(permission)) {
      if (user.isDebug()) {
        Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
      }
      return true;
    }
    if (user.isDebug()) {
      Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ permission+ ""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return false;
}",0.976290832455216
151283,"@Override public void setPermissions(String[] permissions,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),this.type.ordinal(),world);
  for (  String permission : permissions) {
    this.db.updateQuery(""String_Node_Str"",this.getName(),permission,world,this.type.ordinal());
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}","@Override public void setPermissions(String[] permissions,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),this.type.ordinal(),world);
  for (int i=permissions.length - 1; i >= 0; i--) {
    this.db.updateQuery(""String_Node_Str"",this.getName(),permissions[i],world,this.type.ordinal());
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}",0.9107551487414188
151284,"@Override public void onPluginEnable(PluginEnableEvent event){
  calculateParentPermissions();
}","@Override public void onPluginEnable(PluginEnableEvent event){
  List<Permission> pluginPermissions=event.getPlugin().getDescription().getPermissions();
  for (  Permission permission : pluginPermissions) {
    calculatePermissionChildren(permission);
  }
}",0.4645892351274787
151285,"public BukkitPermissions(Plugin plugin,ConfigurationNode config){
  this.plugin=plugin;
  if (!config.getBoolean(""String_Node_Str"",true)) {
    logger.info(""String_Node_Str"");
    return;
  }
  this.strictMode=config.getBoolean(""String_Node_Str"",strictMode);
  this.enableParentNodes=config.getBoolean(""String_Node_Str"",this.enableParentNodes);
  this.registerEvents();
  if (this.enableParentNodes) {
    this.calculateParentPermissions();
  }
  logger.info(""String_Node_Str"");
}","public BukkitPermissions(Plugin plugin,ConfigurationNode config){
  this.plugin=plugin;
  if (!config.getBoolean(""String_Node_Str"",true)) {
    logger.info(""String_Node_Str"");
    return;
  }
  this.strictMode=config.getBoolean(""String_Node_Str"",strictMode);
  this.enableParentNodes=config.getBoolean(""String_Node_Str"",this.enableParentNodes);
  this.registerEvents();
  if (this.enableParentNodes) {
    this.calculateAllParentPermissions();
  }
  logger.info(""String_Node_Str"");
}",0.9968847352024922
151286,"private void registerEvents(){
  PluginManager manager=plugin.getServer().getPluginManager();
  manager.registerEvent(Event.Type.PLAYER_JOIN,new PlayerEvents(),Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.CUSTOM_EVENT,new PEXEvents(),Event.Priority.Low,plugin);
  if (this.enableParentNodes) {
    ServerListener serverEvents=new ServerEvents();
    manager.registerEvent(Event.Type.PLUGIN_ENABLE,serverEvents,Event.Priority.Low,plugin);
    manager.registerEvent(Event.Type.PLUGIN_DISABLE,serverEvents,Event.Priority.Low,plugin);
  }
}","private void registerEvents(){
  PluginManager manager=plugin.getServer().getPluginManager();
  manager.registerEvent(Event.Type.PLAYER_JOIN,new PlayerEvents(),Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.CUSTOM_EVENT,new PEXEvents(),Event.Priority.Low,plugin);
  if (this.enableParentNodes) {
    ServerListener serverEvents=new ServerEvents();
    manager.registerEvent(Event.Type.PLUGIN_ENABLE,serverEvents,Event.Priority.Low,plugin);
  }
}",0.9083743842364532
151287,"public static PermissionManager getPermissionManager(){
  Plugin plugin=Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin == null || !(plugin instanceof PermissionsEx) || ((PermissionsEx)plugin).permissionsManager == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return ((PermissionsEx)plugin).permissionsManager;
}","public static PermissionManager getPermissionManager(){
  Plugin plugin=Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (!isAvailable()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return ((PermissionsEx)plugin).permissionsManager;
}",0.8150470219435737
151288,"public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    return;
  }
  try {
    Permissible permissible=new PermissiblePEX(player,strictMode);
    if (player.getClass().getName().contains(""String_Node_Str"")) {
      Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
      injectSpout(player,permissible);
    }
 else {
      injectCraftBukkit(player,permissible);
    }
    permissible.recalculatePermissions();
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    e.printStackTrace();
  }
}","public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    return;
  }
  try {
    Permissible permissible=new PermissiblePEX(player,strictMode);
    if (player.getClass().getName().contains(""String_Node_Str"")) {
      injectSpout(player,permissible);
    }
 else {
      injectCraftBukkit(player,permissible);
    }
    permissible.recalculatePermissions();
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9485294117647058
151289,"private void registerEvents(){
  PluginManager manager=plugin.getServer().getPluginManager();
  PlayerEvents playerEventListener=new PlayerEvents();
  manager.registerEvent(Event.Type.PLAYER_JOIN,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_KICK,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_QUIT,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_RESPAWN,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_TELEPORT,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_PORTAL,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.CUSTOM_EVENT,new PEXEvents(),Event.Priority.Low,plugin);
}","private void registerEvents(){
  PluginManager manager=plugin.getServer().getPluginManager();
  PlayerEvents playerEventListener=new PlayerEvents();
  manager.registerEvent(Event.Type.PLAYER_JOIN,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_KICK,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_QUIT,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_RESPAWN,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_TELEPORT,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_PORTAL,playerEventListener,Event.Priority.Low,plugin);
  manager.registerEvent(Event.Type.PLAYER_CHANGED_WORLD,playerEventListener,Event.Priority.Low,plugin);
  ;
  manager.registerEvent(Event.Type.CUSTOM_EVENT,new PEXEvents(),Event.Priority.Low,plugin);
}",0.9382857142857144
151290,"@Override public void dumpData(OutputStreamWriter writer) throws IOException {
  DumperOptions options=new DumperOptions();
  options.setIndent(4);
  options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(new SafeConstructor(),new Representer(),options);
  ConfigurationNode root=new ConfigurationNode();
  for (  PermissionUser user : this.manager.getUsers()) {
    ConfigurationNode userNode=new ConfigurationNode();
    if (user.getGroupsNames().length > 0) {
      userNode.setProperty(""String_Node_Str"",Arrays.asList(user.getGroupsNames()));
    }
    if (user.getOwnPrefix() != null && !user.getOwnPrefix().isEmpty()) {
      userNode.setProperty(""String_Node_Str"",user.getOwnPrefix());
    }
    if (user.getOwnSuffix() != null && !user.getOwnSuffix().isEmpty()) {
      userNode.setProperty(""String_Node_Str"",user.getOwnSuffix());
    }
    for (    Map.Entry<String,String[]> entry : user.getAllPermissions().entrySet()) {
      if (entry.getValue().length == 0)       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      userNode.setProperty(nodePath,Arrays.asList(entry.getValue()));
    }
    for (    Map.Entry<String,Map<String,String>> entry : user.getAllOptions().entrySet()) {
      if (entry.getValue().isEmpty())       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      userNode.setProperty(nodePath,entry.getValue());
    }
    for (    Map.Entry<String,PermissionGroup[]> entry : user.getAllGroups().entrySet()) {
      if (entry.getKey() == null)       continue;
      List<String> groups=new ArrayList<String>();
      for (      PermissionGroup group : entry.getValue()) {
        if (group == null) {
          continue;
        }
        groups.add(group.getName());
      }
      if (groups.isEmpty())       continue;
      userNode.setProperty(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",groups);
    }
    for (    String worldName : user.getWorlds()) {
      if (worldName == null)       continue;
      String worldPath=""String_Node_Str"" + worldName + ""String_Node_Str"";
      String prefix=user.getOwnPrefix(worldName);
      if (prefix != null && !prefix.isEmpty()) {
        userNode.setProperty(worldPath + ""String_Node_Str"",prefix);
      }
      String suffix=user.getOwnSuffix(worldName);
      if (suffix != null && !suffix.isEmpty()) {
        userNode.setProperty(worldPath + ""String_Node_Str"",suffix);
      }
    }
    root.setProperty(""String_Node_Str"" + user.getName() + ""String_Node_Str"",userNode);
  }
  for (  PermissionGroup group : this.manager.getGroups()) {
    ConfigurationNode groupNode=new ConfigurationNode();
    if (group.getParentGroupsNames().length > 0) {
      groupNode.setProperty(""String_Node_Str"",Arrays.asList(group.getParentGroupsNames()));
    }
    if (group.getOwnPrefix() != null && !group.getOwnPrefix().isEmpty()) {
      groupNode.setProperty(""String_Node_Str"",group.getOwnPrefix());
    }
    if (group.getOwnSuffix() != null && !group.getOwnSuffix().isEmpty()) {
      groupNode.setProperty(""String_Node_Str"",group.getOwnSuffix());
    }
    for (    Map.Entry<String,String[]> entry : group.getAllPermissions().entrySet()) {
      if (entry.getValue().length == 0)       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      groupNode.setProperty(nodePath,Arrays.asList(entry.getValue()));
    }
    for (    Map.Entry<String,Map<String,String>> entry : group.getAllOptions().entrySet()) {
      if (entry.getValue().isEmpty())       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      groupNode.setProperty(nodePath,entry.getValue());
    }
    for (    Map.Entry<String,PermissionGroup[]> entry : group.getAllParentGroups().entrySet()) {
      if (entry.getKey() == null)       continue;
      List<String> groups=new ArrayList<String>();
      for (      PermissionGroup parentGroup : entry.getValue()) {
        if (parentGroup == null) {
          continue;
        }
        groups.add(parentGroup.getName());
      }
      if (groups.isEmpty())       continue;
      groupNode.setProperty(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",groups);
    }
    for (    String worldName : group.getWorlds()) {
      if (worldName == null)       continue;
      String worldPath=""String_Node_Str"" + worldName + ""String_Node_Str"";
      String prefix=group.getOwnPrefix(worldName);
      if (prefix != null && !prefix.isEmpty()) {
        groupNode.setProperty(worldPath + ""String_Node_Str"",prefix);
      }
      String suffix=group.getOwnSuffix(worldName);
      if (suffix != null && !suffix.isEmpty()) {
        groupNode.setProperty(worldPath + ""String_Node_Str"",suffix);
      }
    }
    root.setProperty(""String_Node_Str"" + group.getName() + ""String_Node_Str"",groupNode);
  }
  for (  World world : Bukkit.getServer().getWorlds()) {
    String[] parentWorlds=manager.getWorldInheritance(world.getName());
    if (parentWorlds.length == 0) {
      continue;
    }
    root.setProperty(""String_Node_Str"" + world.getName() + ""String_Node_Str"",Arrays.asList(parentWorlds));
  }
  yaml.dump(root.getRoot(),writer);
}","@Override public void dumpData(OutputStreamWriter writer) throws IOException {
  DumperOptions options=new DumperOptions();
  options.setIndent(4);
  options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(new SafeConstructor(),new Representer(),options);
  ConfigurationNode root=new ConfigurationNode();
  for (  PermissionUser user : this.manager.getUsers()) {
    ConfigurationNode userNode=new ConfigurationNode();
    if (user.getGroupsNames().length > 0) {
      userNode.setProperty(""String_Node_Str"",Arrays.asList(user.getGroupsNames()));
    }
    if (user.getOwnPrefix() != null && !user.getOwnPrefix().isEmpty()) {
      userNode.setProperty(""String_Node_Str"",user.getOwnPrefix());
    }
    if (user.getOwnSuffix() != null && !user.getOwnSuffix().isEmpty()) {
      userNode.setProperty(""String_Node_Str"",user.getOwnSuffix());
    }
    for (    Map.Entry<String,String[]> entry : user.getAllPermissions().entrySet()) {
      if (entry.getValue().length == 0)       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      userNode.setProperty(nodePath,Arrays.asList(entry.getValue()));
    }
    for (    Map.Entry<String,Map<String,String>> entry : user.getAllOptions().entrySet()) {
      if (entry.getValue().isEmpty())       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      userNode.setProperty(nodePath,entry.getValue());
    }
    for (    Map.Entry<String,PermissionGroup[]> entry : user.getAllGroups().entrySet()) {
      if (entry.getKey() == null)       continue;
      List<String> groups=new ArrayList<String>();
      for (      PermissionGroup group : entry.getValue()) {
        if (group == null) {
          continue;
        }
        groups.add(group.getName());
      }
      if (groups.isEmpty())       continue;
      userNode.setProperty(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",groups);
    }
    for (    String worldName : user.getWorlds()) {
      if (worldName == null)       continue;
      String worldPath=""String_Node_Str"" + worldName + ""String_Node_Str"";
      String prefix=user.getOwnPrefix(worldName);
      if (prefix != null && !prefix.isEmpty()) {
        userNode.setProperty(worldPath + ""String_Node_Str"",prefix);
      }
      String suffix=user.getOwnSuffix(worldName);
      if (suffix != null && !suffix.isEmpty()) {
        userNode.setProperty(worldPath + ""String_Node_Str"",suffix);
      }
    }
    root.setProperty(""String_Node_Str"" + user.getName() + ""String_Node_Str"",userNode);
  }
  for (  PermissionGroup group : this.manager.getGroups()) {
    ConfigurationNode groupNode=new ConfigurationNode();
    if (group.getParentGroupsNames().length > 0) {
      groupNode.setProperty(""String_Node_Str"",Arrays.asList(group.getParentGroupsNames()));
    }
    if (group.getOwnPrefix() != null && !group.getOwnPrefix().isEmpty()) {
      groupNode.setProperty(""String_Node_Str"",group.getOwnPrefix());
    }
    if (group.getOwnSuffix() != null && !group.getOwnSuffix().isEmpty()) {
      groupNode.setProperty(""String_Node_Str"",group.getOwnSuffix());
    }
    for (    Map.Entry<String,String[]> entry : group.getAllPermissions().entrySet()) {
      if (entry.getValue().length == 0)       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      groupNode.setProperty(nodePath,Arrays.asList(entry.getValue()));
    }
    for (    Map.Entry<String,Map<String,String>> entry : group.getAllOptions().entrySet()) {
      if (entry.getValue().isEmpty())       continue;
      String nodePath=""String_Node_Str"";
      if (entry.getKey() != null && !entry.getKey().isEmpty()) {
        nodePath=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ nodePath;
      }
      groupNode.setProperty(nodePath,entry.getValue());
    }
    for (    Map.Entry<String,PermissionGroup[]> entry : group.getAllParentGroups().entrySet()) {
      if (entry.getKey() == null)       continue;
      List<String> groups=new ArrayList<String>();
      for (      PermissionGroup parentGroup : entry.getValue()) {
        if (parentGroup == null) {
          continue;
        }
        groups.add(parentGroup.getName());
      }
      if (groups.isEmpty())       continue;
      groupNode.setProperty(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",groups);
    }
    for (    String worldName : group.getWorlds()) {
      if (worldName == null)       continue;
      String worldPath=""String_Node_Str"" + worldName + ""String_Node_Str"";
      String prefix=group.getOwnPrefix(worldName);
      if (prefix != null && !prefix.isEmpty()) {
        groupNode.setProperty(worldPath + ""String_Node_Str"",prefix);
      }
      String suffix=group.getOwnSuffix(worldName);
      if (suffix != null && !suffix.isEmpty()) {
        groupNode.setProperty(worldPath + ""String_Node_Str"",suffix);
      }
      if (group.isDefault(worldName)) {
        groupNode.setProperty(worldPath + ""String_Node_Str"",true);
      }
    }
    if (group.isDefault(null)) {
      groupNode.setProperty(""String_Node_Str"",true);
    }
    root.setProperty(""String_Node_Str"" + group.getName() + ""String_Node_Str"",groupNode);
  }
  for (  World world : Bukkit.getServer().getWorlds()) {
    String[] parentWorlds=manager.getWorldInheritance(world.getName());
    if (parentWorlds.length == 0) {
      continue;
    }
    root.setProperty(""String_Node_Str"" + world.getName() + ""String_Node_Str"",Arrays.asList(parentWorlds));
  }
  yaml.dump(root.getRoot(),writer);
}",0.9821166306695464
151291,"public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"");
    return;
  }
  try {
    Permissible permissible=new PermissiblePEX(player,strictMode);
    if (player.getClass().getName().contains(""String_Node_Str"")) {
      Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
      injectSpout(player,permissible);
    }
 else {
      injectCraftBukkit(player,permissible);
    }
    permissible.recalculatePermissions();
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    e.printStackTrace();
  }
}","public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    return;
  }
  try {
    Permissible permissible=new PermissiblePEX(player,strictMode);
    if (player.getClass().getName().contains(""String_Node_Str"")) {
      Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
      injectSpout(player,permissible);
    }
 else {
      injectCraftBukkit(player,permissible);
    }
    permissible.recalculatePermissions();
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9565217391304348
151292,"@Override public void onEnable(){
  this.commandsManager.register(new UtilityCommands());
  this.commandsManager.register(new UserCommands());
  this.commandsManager.register(new GroupCommands());
  this.commandsManager.register(new PromotionCommands());
  this.commandsManager.register(new WorldCommands());
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,new PlayerEventsListener(),Priority.Normal,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_PORTAL,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getServicesManager().register(PermissionManager.class,this.permissionsManager,this,ServicePriority.Normal);
  ConfigurationNode dinnerpermsConfig=this.config.getNode(""String_Node_Str"");
  if (dinnerpermsConfig == null) {
    dinnerpermsConfig=Configuration.getEmptyNode();
    this.config.setProperty(""String_Node_Str"",dinnerpermsConfig);
  }
  this.superms=new BukkitPermissions(this,dinnerpermsConfig);
  this.superms.updateAllPlayers();
  this.config.save();
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
}","@Override public void onEnable(){
  this.commandsManager.register(new UtilityCommands());
  this.commandsManager.register(new UserCommands());
  this.commandsManager.register(new GroupCommands());
  this.commandsManager.register(new PromotionCommands());
  this.commandsManager.register(new WorldCommands());
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,new PlayerEventsListener(),Priority.Normal,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_PORTAL,new PlayerEventsListener(),Priority.Lowest,this);
  this.getServer().getServicesManager().register(PermissionManager.class,this.permissionsManager,this,ServicePriority.Normal);
  ConfigurationNode dinnerpermsConfig=this.config.getNode(""String_Node_Str"");
  if (dinnerpermsConfig == null) {
    this.config.setProperty(""String_Node_Str"",new HashMap<String,Object>());
    dinnerpermsConfig=this.config.getNode(""String_Node_Str"");
  }
  this.superms=new BukkitPermissions(this,dinnerpermsConfig);
  this.superms.updateAllPlayers();
  this.config.save();
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
}",0.9557208643287284
151293,"public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    return;
  }
  try {
    Class humanEntity=Class.forName(""String_Node_Str"");
    if (player.getClass().isAssignableFrom(humanEntity)) {
      return;
    }
    Field permField=humanEntity.getDeclaredField(""String_Node_Str"");
    permField.setAccessible(true);
    PermissibleBase oldBase=(PermissibleBase)permField.get(player);
    PermissibleBase newBase=new PermissiblePEX(player,strictMode);
    Field attachmentField=PermissibleBase.class.getDeclaredField(""String_Node_Str"");
    attachmentField.setAccessible(true);
    attachmentField.set(newBase,attachmentField.get(oldBase));
    Field permissionsField=PermissibleBase.class.getDeclaredField(""String_Node_Str"");
    permissionsField.setAccessible(true);
    permissionsField.set(newBase,permissionsField.get(oldBase));
    permField.set(player,newBase);
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
  }
}","public static void inject(Player player,boolean strictMode){
  if (player.hasPermission(""String_Node_Str"")) {
    return;
  }
  try {
    Class humanEntity=Class.forName(""String_Node_Str"");
    if (player.getClass().isAssignableFrom(humanEntity)) {
      return;
    }
    Field permField=humanEntity.getDeclaredField(""String_Node_Str"");
    permField.setAccessible(true);
    PermissibleBase oldBase=(PermissibleBase)permField.get(player);
    PermissibleBase newBase=new PermissiblePEX(player,strictMode);
    Field attachmentField=PermissibleBase.class.getDeclaredField(""String_Node_Str"");
    attachmentField.setAccessible(true);
    attachmentField.set(newBase,attachmentField.get(oldBase));
    Field permissionsField=PermissibleBase.class.getDeclaredField(""String_Node_Str"");
    permissionsField.setAccessible(true);
    permissionsField.set(newBase,permissionsField.get(oldBase));
    permField.set(player,newBase);
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
  }
}",0.9227313566936208
151294,"/** 
 * Saves the configuration to disk. All errors are clobbered.
 * @return true if it was successful saved
 */
public boolean save(){
  FileOutputStream stream=null;
  File parent=file.getParentFile();
  if (parent != null) {
    parent.mkdirs();
  }
  try {
    stream=new FileOutputStream(file);
    yaml.dump(root,new OutputStreamWriter(stream,""String_Node_Str""));
    return true;
  }
 catch (  IOException e) {
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return false;
}","/** 
 * Saves the configuration to disk. All errors are clobbered.
 * @return true if it was successful saved
 */
public boolean save(){
  FileOutputStream stream=null;
  File parent=file.getParentFile();
  if (parent != null) {
    parent.mkdirs();
  }
  boolean success=true;
  try {
    stream=new FileOutputStream(file);
    yaml.dump(root,new OutputStreamWriter(stream,""String_Node_Str""));
    return true;
  }
 catch (  IOException e) {
    success=false;
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e) {
      success=false;
    }
  }
  return success;
}",0.9065108514190318
151295,"@Override public void initialize(){
  String permissionFilename=config.getString(""String_Node_Str"");
  if (permissionFilename == null) {
    permissionFilename=""String_Node_Str"";
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.save();
  }
  String baseDir=config.getString(""String_Node_Str"");
  if (baseDir.contains(""String_Node_Str"") && !""String_Node_Str"".equals(File.separator)) {
    baseDir=baseDir.replace(""String_Node_Str"",File.separator);
  }
  File baseDirectory=new File(baseDir);
  if (!baseDirectory.exists()) {
    baseDirectory.mkdirs();
  }
  File permissionFile=new File(baseDir,permissionFilename);
  permissions=new Configuration(permissionFile);
  if (!permissionFile.exists()) {
    try {
      permissionFile.createNewFile();
      permissions.setProperty(""String_Node_Str"",true);
      List<String> defaultPermissions=new LinkedList<String>();
      defaultPermissions.add(""String_Node_Str"");
      permissions.setProperty(""String_Node_Str"",defaultPermissions);
      permissions.save();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  permissions.load();
}","@Override public void initialize(){
  String permissionFilename=config.getString(""String_Node_Str"");
  if (permissionFilename == null) {
    permissionFilename=""String_Node_Str"";
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.save();
  }
  String baseDir=config.getString(""String_Node_Str"",""String_Node_Str"");
  if (baseDir.contains(""String_Node_Str"") && !""String_Node_Str"".equals(File.separator)) {
    baseDir=baseDir.replace(""String_Node_Str"",File.separator);
  }
  File baseDirectory=new File(baseDir);
  if (!baseDirectory.exists()) {
    baseDirectory.mkdirs();
  }
  File permissionFile=new File(baseDir,permissionFilename);
  permissions=new Configuration(permissionFile);
  if (!permissionFile.exists()) {
    try {
      permissionFile.createNewFile();
      permissions.setProperty(""String_Node_Str"",true);
      List<String> defaultPermissions=new LinkedList<String>();
      defaultPermissions.add(""String_Node_Str"");
      permissions.setProperty(""String_Node_Str"",defaultPermissions);
      permissions.save();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  permissions.load();
}",0.992153443766347
151296,"protected String prepareQuery(String sql){
  Matcher match=placeholderPattern.matcher(sql);
  while (match.find()) {
    sql=sql.replace(match.group(0),""String_Node_Str"" + this.getAlias(match.group(1)) + ""String_Node_Str"");
  }
  if (this.dbDriver.contains(""String_Node_Str"")) {
    sql=sql.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return sql;
}","protected String prepareQuery(String sql){
  Matcher match=placeholderPattern.matcher(sql);
  while (match.find()) {
    sql=sql.replace(match.group(0),""String_Node_Str"" + this.getAlias(match.group(1)) + ""String_Node_Str"");
  }
  return sql;
}",0.7779632721202003
151297,"protected PermissionGroup getDefaultGroup(String worldName,PermissionGroup fallback){
  PermissionGroup defaultGroup=this.backend.getDefaultGroup(worldName);
  if (defaultGroup == null && worldName == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (defaultGroup != null) {
    return defaultGroup;
  }
  if (worldName != null) {
    for (    String parentWorld : this.getWorldInheritance(worldName)) {
      defaultGroup=this.getDefaultGroup(parentWorld,null);
      if (defaultGroup != null) {
        return defaultGroup;
      }
    }
  }
  return fallback;
}","private PermissionGroup getDefaultGroup(String worldName,PermissionGroup fallback){
  PermissionGroup defaultGroup=this.backend.getDefaultGroup(worldName);
  if (defaultGroup == null && worldName == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (defaultGroup != null) {
    return defaultGroup;
  }
  if (worldName != null) {
    for (    String parentWorld : this.getWorldInheritance(worldName)) {
      defaultGroup=this.getDefaultGroup(parentWorld,null);
      if (defaultGroup != null) {
        return defaultGroup;
      }
    }
  }
  return fallback;
}",0.989778534923339
151298,"@Override public void onPlayerRespawn(PlayerRespawnEvent event){
  updatePermissions(event.getPlayer());
}","@Override public void onPlayerRespawn(PlayerRespawnEvent event){
  updatePermissions(event.getPlayer(),event.getRespawnLocation().getWorld().getName());
}",0.8153846153846154
151299,"@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (!event.getFrom().getWorld().equals(event.getTo().getWorld())) {
    updatePermissions(event.getPlayer());
  }
}","@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (!event.getFrom().getWorld().equals(event.getTo().getWorld())) {
    updatePermissions(event.getPlayer(),event.getTo().getWorld().getName());
  }
}",0.913151364764268
151300,"@Override public void onPlayerPortal(PlayerPortalEvent event){
  updatePermissions(event.getPlayer());
}","@Override public void onPlayerPortal(PlayerPortalEvent event){
  updatePermissions(event.getPlayer(),event.getTo().getWorld().getName());
}",0.8559670781893004
151301,"protected void updatePermissions(Player player){
  if (player == null) {
    return;
  }
  if (!this.attachments.containsKey(player)) {
    this.attachments.put(player,player.addAttachment(plugin));
  }
  PermissionAttachment attachment=this.attachments.get(player);
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(player);
  String permissions[]=user.getPermissions(player.getWorld().getName());
  for (  String permission : attachment.getPermissions().keySet()) {
    attachment.unsetPermission(permission);
  }
  if (dumpMatchedPermissions) {
    for (    Permission permission : registeredPermissions) {
      String matchingExpression=user.getMatchingExpression(permissions,permission.getName());
      boolean permissionValue=PermissionEntity.explainExpression(matchingExpression);
      if (!disableByDefault && matchingExpression == null) {
        continue;
      }
      attachment.setPermission(permission,permissionValue);
    }
  }
  if (dumpAllPermissions) {
    for (    String permission : permissions) {
      Boolean value=true;
      if (permission.startsWith(""String_Node_Str"")) {
        permission=permission.substring(1);
        value=false;
      }
      if (!attachment.getPermissions().containsKey(permission)) {
        attachment.setPermission(permission,value);
      }
    }
  }
  player.recalculatePermissions();
  if (PermissionsEx.getPermissionManager().isDebug()) {
    PermissionsEx.logger.info(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
  }
}","protected void updatePermissions(Player player,String world){
  if (player == null) {
    return;
  }
  if (!this.attachments.containsKey(player)) {
    this.attachments.put(player,player.addAttachment(plugin));
  }
  if (world == null) {
    world=player.getWorld().getName();
  }
  PermissionAttachment attachment=this.attachments.get(player);
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(player);
  String permissions[]=user.getPermissions(world);
  for (  String permission : attachment.getPermissions().keySet()) {
    attachment.unsetPermission(permission);
  }
  if (dumpMatchedPermissions) {
    for (    Permission permission : registeredPermissions) {
      String matchingExpression=user.getMatchingExpression(permissions,permission.getName());
      boolean permissionValue=PermissionEntity.explainExpression(matchingExpression);
      if (!disableByDefault && matchingExpression == null) {
        continue;
      }
      attachment.setPermission(permission,permissionValue);
    }
  }
  if (dumpAllPermissions) {
    for (    String permission : permissions) {
      Boolean value=true;
      if (permission.startsWith(""String_Node_Str"")) {
        permission=permission.substring(1);
        value=false;
      }
      if (!attachment.getPermissions().containsKey(permission)) {
        attachment.setPermission(permission,value);
      }
    }
  }
  player.recalculatePermissions();
  if (PermissionsEx.getPermissionManager().isDebug()) {
    PermissionsEx.logger.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ player.getWorld().getName()+ ""String_Node_Str"");
  }
}",0.949249920204277
151302,"@Override public void setOption(String permission,String value,String world){
  this.backendEntity.setOption(permission,value,world);
  this.callEvent(PermissionEntityEvent.Action.OPTIONS_CHANGED);
}","@Override public void setOption(String permission,String value,String world){
  this.backendEntity.setOption(permission,value,world);
  this.clearMembersCache();
  this.callEvent(PermissionEntityEvent.Action.OPTIONS_CHANGED);
}",0.9342723004694836
151303,"@Override public void setPermissions(String[] permissions,String world){
  this.backendEntity.setPermissions(permissions,world);
  this.callEvent(PermissionEntityEvent.Action.PERMISSIONS_CHANGED);
}","@Override public void setPermissions(String[] permissions,String world){
  this.backendEntity.setPermissions(permissions,world);
  this.clearMembersCache();
  this.callEvent(PermissionEntityEvent.Action.PERMISSIONS_CHANGED);
}",0.9339622641509434
151304,"@Override public void setPrefix(String prefix,String worldName){
  this.backendEntity.setPrefix(prefix,worldName);
  this.callEvent(PermissionEntityEvent.Action.INFO_CHANGED);
}","@Override public void setPrefix(String prefix,String worldName){
  this.backendEntity.setPrefix(prefix,worldName);
  this.clearMembersCache();
  this.callEvent(PermissionEntityEvent.Action.INFO_CHANGED);
}",0.9267015706806284
151305,"@Override public void setSuffix(String suffix,String worldName){
  this.backendEntity.setSuffix(suffix,worldName);
  this.callEvent(PermissionEntityEvent.Action.INFO_CHANGED);
}","@Override public void setSuffix(String suffix,String worldName){
  this.backendEntity.setSuffix(suffix,worldName);
  this.clearMembersCache();
  this.callEvent(PermissionEntityEvent.Action.INFO_CHANGED);
}",0.9267015706806284
151306,"@Override public void setOption(String permission,String value,String world){
  this.backendEntity.setOption(permission,value,world);
  this.callEvent(PermissionEntityEvent.Action.OPTIONS_CHANGED);
}","@Override public void setOption(String permission,String value,String world){
  this.backendEntity.setOption(permission,value,world);
  this.clearCache();
  this.callEvent(PermissionEntityEvent.Action.OPTIONS_CHANGED);
}",0.9498806682577564
151307,"@Override public void setPermissions(String[] permissions,String world){
  this.backendEntity.setPermissions(permissions,world);
  this.callEvent(PermissionEntityEvent.Action.PERMISSIONS_CHANGED);
}","@Override public void setPermissions(String[] permissions,String world){
  this.backendEntity.setPermissions(permissions,world);
  this.clearCache();
  this.callEvent(PermissionEntityEvent.Action.PERMISSIONS_CHANGED);
}",0.9496402877697842
151308,"@Override public void setPrefix(String prefix,String worldName){
  this.backendEntity.setPrefix(prefix,worldName);
}","@Override public void setPrefix(String prefix,String worldName){
  this.backendEntity.setPrefix(prefix,worldName);
  this.clearCache();
}",0.91699604743083
151309,"@Override public void setSuffix(String suffix,String worldName){
  this.backendEntity.setSuffix(suffix,worldName);
}","@Override public void setSuffix(String suffix,String worldName){
  this.backendEntity.setSuffix(suffix,worldName);
  this.clearCache();
}",0.91699604743083
151310,"@Override public String[] getWorldInheritance(String world){
  if (world == null || world.isEmpty()) {
    return new String[0];
  }
  if (!worldInheritanceCache.containsKey(world)) {
    try {
      ResultSet result=this.sql.selectQuery(""String_Node_Str"",world);
      LinkedList<String> worldParents=new LinkedList<String>();
      while (result.next()) {
        worldParents.add(result.getString(0));
      }
      this.worldInheritanceCache.put(world,worldParents.toArray(new String[0]));
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return worldInheritanceCache.get(world);
}","@Override public String[] getWorldInheritance(String world){
  if (world == null || world.isEmpty()) {
    return new String[0];
  }
  if (!worldInheritanceCache.containsKey(world)) {
    try {
      ResultSet result=this.sql.selectQuery(""String_Node_Str"",world);
      LinkedList<String> worldParents=new LinkedList<String>();
      while (result.next()) {
        worldParents.add(result.getString(""String_Node_Str""));
      }
      this.worldInheritanceCache.put(world,worldParents.toArray(new String[0]));
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return worldInheritanceCache.get(world);
}",0.985691573926868
151311,"/** 
 * Overriden methods
 */
@Override public String getPrefix(String worldName){
  String localPrefix=super.getPrefix();
  if (localPrefix == null || localPrefix.isEmpty()) {
    for (    PermissionGroup group : this.getParentGroups(worldName)) {
      localPrefix=group.getPrefix();
      if (localPrefix != null && !localPrefix.isEmpty()) {
        break;
      }
    }
  }
  if (localPrefix == null) {
    localPrefix=""String_Node_Str"";
  }
  return localPrefix;
}","/** 
 * Overriden methods
 */
@Override public String getPrefix(String worldName){
  String localPrefix=this.getOwnPrefix(worldName);
  if (localPrefix == null || localPrefix.isEmpty()) {
    for (    PermissionGroup group : this.getParentGroups(worldName)) {
      localPrefix=group.getPrefix();
      if (localPrefix != null && !localPrefix.isEmpty()) {
        break;
      }
    }
  }
  if (localPrefix == null) {
    localPrefix=""String_Node_Str"";
  }
  return localPrefix;
}",0.9631190727081138
151312,"@Override public String getSuffix(String worldName){
  String localSuffix=super.getSuffix();
  if (localSuffix == null || localSuffix.isEmpty()) {
    for (    PermissionGroup group : this.getParentGroups(worldName)) {
      localSuffix=group.getSuffix();
      if (localSuffix != null && !localSuffix.isEmpty()) {
        break;
      }
    }
  }
  if (localSuffix == null) {
    localSuffix=""String_Node_Str"";
  }
  return localSuffix;
}","@Override public String getSuffix(String worldName){
  String localSuffix=this.getOwnSuffix(worldName);
  if (localSuffix == null || localSuffix.isEmpty()) {
    for (    PermissionGroup group : this.getParentGroups(worldName)) {
      localSuffix=group.getSuffix();
      if (localSuffix != null && !localSuffix.isEmpty()) {
        break;
      }
    }
  }
  if (localSuffix == null) {
    localSuffix=""String_Node_Str"";
  }
  return localSuffix;
}",0.9606299212598424
151313,"@Override public String getPrefix(String worldName){
  if (this.cachedPrefix == null) {
    String localPrefix=super.getPrefix();
    if (localPrefix == null || localPrefix.isEmpty()) {
      for (      PermissionGroup group : this.getGroups(worldName)) {
        localPrefix=group.getPrefix();
        if (localPrefix != null && !localPrefix.isEmpty()) {
          break;
        }
      }
    }
    if (localPrefix == null) {
      localPrefix=""String_Node_Str"";
    }
    this.cachedPrefix=localPrefix;
  }
  return this.cachedPrefix;
}","@Override public String getPrefix(String worldName){
  if (this.cachedPrefix == null) {
    String localPrefix=this.getOwnPrefix(worldName);
    if (localPrefix == null || localPrefix.isEmpty()) {
      for (      PermissionGroup group : this.getGroups(worldName)) {
        localPrefix=group.getPrefix();
        if (localPrefix != null && !localPrefix.isEmpty()) {
          break;
        }
      }
    }
    if (localPrefix == null) {
      localPrefix=""String_Node_Str"";
    }
    this.cachedPrefix=localPrefix;
  }
  return this.cachedPrefix;
}",0.960514233241506
151314,"@Override public String getSuffix(String worldName){
  if (this.cachedSuffix == null) {
    String localSuffix=super.getSuffix();
    if (localSuffix == null || localSuffix.isEmpty()) {
      for (      PermissionGroup group : this.getGroups(worldName)) {
        localSuffix=group.getSuffix();
        if (localSuffix != null && !localSuffix.isEmpty()) {
          break;
        }
      }
    }
    if (localSuffix == null) {
      localSuffix=""String_Node_Str"";
    }
    this.cachedSuffix=localSuffix;
  }
  return this.cachedSuffix;
}","@Override public String getSuffix(String worldName){
  if (this.cachedSuffix == null) {
    String localSuffix=this.getOwnSuffix(worldName);
    if (localSuffix == null || localSuffix.isEmpty()) {
      for (      PermissionGroup group : this.getGroups(worldName)) {
        localSuffix=group.getSuffix();
        if (localSuffix != null && !localSuffix.isEmpty()) {
          break;
        }
      }
    }
    if (localSuffix == null) {
      localSuffix=""String_Node_Str"";
    }
    this.cachedSuffix=localSuffix;
  }
  return this.cachedSuffix;
}",0.960514233241506
151315,"/** 
 * Promotes user in specified ladder. If user is not member of the ladder RankingException will be thrown If promoter is not null and he is member of the ladder and  his rank is lower then user's RankingException will be thrown too. If there is no group to promote the user to RankingException would be thrown
 * @param promoter null if action is performed from console or by a plugin
 * @param ladderName ladder's name
 * @throws RankingException 
 */
public void promote(PermissionUser promoter,String ladderName) throws RankingException {
  if (ladderName == null || ladderName.isEmpty()) {
    ladderName=""String_Node_Str"";
  }
  int promoterRank=getPromoterRankAndCheck(promoter,ladderName);
  int rank=this.getRank(ladderName);
  PermissionGroup sourceGroup=this.getRankLadders().get(ladderName);
  PermissionGroup targetGroup=null;
  for (  Map.Entry<Integer,PermissionGroup> entry : this.manager.getRankLadder(ladderName).entrySet()) {
    int groupRank=entry.getValue().getRank();
    if (groupRank >= rank) {
      continue;
    }
    if (groupRank <= promoterRank) {
      continue;
    }
    if (targetGroup != null && groupRank <= targetGroup.getRank()) {
      continue;
    }
    targetGroup=entry.getValue();
  }
  if (targetGroup == null) {
    throw new RankingException(""String_Node_Str"",this,promoter);
  }
  this.swapGroups(sourceGroup,targetGroup);
  this.callEvent(PermissionEntityEvent.Action.RANK_CHANGED);
}","/** 
 * Promotes user in specified ladder. If user is not member of the ladder RankingException will be thrown If promoter is not null and he is member of the ladder and  his rank is lower then user's RankingException will be thrown too. If there is no group to promote the user to RankingException would be thrown
 * @param promoter null if action is performed from console or by a plugin
 * @param ladderName ladder's name
 * @throws RankingException 
 */
public PermissionGroup promote(PermissionUser promoter,String ladderName) throws RankingException {
  if (ladderName == null || ladderName.isEmpty()) {
    ladderName=""String_Node_Str"";
  }
  int promoterRank=getPromoterRankAndCheck(promoter,ladderName);
  int rank=this.getRank(ladderName);
  PermissionGroup sourceGroup=this.getRankLadders().get(ladderName);
  PermissionGroup targetGroup=null;
  for (  Map.Entry<Integer,PermissionGroup> entry : this.manager.getRankLadder(ladderName).entrySet()) {
    int groupRank=entry.getValue().getRank();
    if (groupRank >= rank) {
      continue;
    }
    if (groupRank <= promoterRank) {
      continue;
    }
    if (targetGroup != null && groupRank <= targetGroup.getRank()) {
      continue;
    }
    targetGroup=entry.getValue();
  }
  if (targetGroup == null) {
    throw new RankingException(""String_Node_Str"",this,promoter);
  }
  this.swapGroups(sourceGroup,targetGroup);
  this.callEvent(PermissionEntityEvent.Action.RANK_CHANGED);
  return targetGroup;
}",0.9859058095565486
151316,"/** 
 * Demotes user in specified ladder. If user is not member of the ladder RankingException will be thrown If demoter is not null and he is member of the ladder and  his rank is lower then user's RankingException will be thrown too. If there is no group to demote the user to RankingException would be thrown
 * @param promoter Specify null if action performed from console or by plugin
 * @param ladderName
 * @throws RankingException 
 */
public void demote(PermissionUser demoter,String ladderName) throws RankingException {
  if (ladderName == null || ladderName.isEmpty()) {
    ladderName=""String_Node_Str"";
  }
  int promoterRank=getPromoterRankAndCheck(demoter,ladderName);
  int rank=this.getRank(ladderName);
  PermissionGroup sourceGroup=this.getRankLadders().get(ladderName);
  PermissionGroup targetGroup=null;
  for (  Map.Entry<Integer,PermissionGroup> entry : this.manager.getRankLadder(ladderName).entrySet()) {
    int groupRank=entry.getValue().getRank();
    if (groupRank <= rank) {
      continue;
    }
    if (groupRank <= promoterRank) {
      continue;
    }
    if (targetGroup != null && groupRank >= targetGroup.getRank()) {
      continue;
    }
    targetGroup=entry.getValue();
  }
  if (targetGroup == null) {
    throw new RankingException(""String_Node_Str"",this,demoter);
  }
  this.swapGroups(sourceGroup,targetGroup);
  this.callEvent(PermissionEntityEvent.Action.RANK_CHANGED);
}","/** 
 * Demotes user in specified ladder. If user is not member of the ladder RankingException will be thrown If demoter is not null and he is member of the ladder and  his rank is lower then user's RankingException will be thrown too. If there is no group to demote the user to RankingException would be thrown
 * @param promoter Specify null if action performed from console or by plugin
 * @param ladderName
 * @throws RankingException 
 */
public PermissionGroup demote(PermissionUser demoter,String ladderName) throws RankingException {
  if (ladderName == null || ladderName.isEmpty()) {
    ladderName=""String_Node_Str"";
  }
  int promoterRank=getPromoterRankAndCheck(demoter,ladderName);
  int rank=this.getRank(ladderName);
  PermissionGroup sourceGroup=this.getRankLadders().get(ladderName);
  PermissionGroup targetGroup=null;
  for (  Map.Entry<Integer,PermissionGroup> entry : this.manager.getRankLadder(ladderName).entrySet()) {
    int groupRank=entry.getValue().getRank();
    if (groupRank <= rank) {
      continue;
    }
    if (groupRank <= promoterRank) {
      continue;
    }
    if (targetGroup != null && groupRank >= targetGroup.getRank()) {
      continue;
    }
    targetGroup=entry.getValue();
  }
  if (targetGroup == null) {
    throw new RankingException(""String_Node_Str"",this,demoter);
  }
  this.swapGroups(sourceGroup,targetGroup);
  this.callEvent(PermissionEntityEvent.Action.RANK_CHANGED);
  return targetGroup;
}",0.9857292029237732
151317,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",description=""String_Node_Str"",isPrimary=true,permissions={""String_Node_Str"",""String_Node_Str""}) public void demoteUser(Plugin plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  String demoterName=""String_Node_Str"";
  PermissionUser demoter=null;
  if (sender instanceof Player) {
    demoter=PermissionsEx.getPermissionManager().getUser(((Player)sender).getName());
    demoterName=demoter.getName();
  }
  try {
    user.demote(demoter,args.get(""String_Node_Str""));
    PermissionGroup targetGroup=user.getRankLadderGroup(args.get(""String_Node_Str""));
    this.informPlayer(plugin,user.getName(),""String_Node_Str"" + targetGroup.getRankLadder() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str""+ targetGroup.getRankLadder()+ ""String_Node_Str""+ demoterName);
  }
 catch (  RankingException e) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + demoterName + ""String_Node_Str""+ e.getTarget().getName()+ ""String_Node_Str""+ e.getMessage());
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",description=""String_Node_Str"",isPrimary=true) public void demoteUser(Plugin plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  String demoterName=""String_Node_Str"";
  String ladder=""String_Node_Str"";
  if (args.containsKey(""String_Node_Str"")) {
    ladder=args.get(""String_Node_Str"");
  }
  PermissionUser demoter=null;
  if (sender instanceof Player) {
    demoter=PermissionsEx.getPermissionManager().getUser(((Player)sender).getName());
    if (demoter == null || !demoter.has(""String_Node_Str"" + ladder)) {
      sender.sendMessage(""String_Node_Str"");
      return;
    }
    demoterName=demoter.getName();
  }
  try {
    PermissionGroup targetGroup=user.demote(demoter,args.get(""String_Node_Str""));
    this.informPlayer(plugin,user.getName(),""String_Node_Str"" + targetGroup.getRankLadder() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str""+ targetGroup.getRankLadder()+ ""String_Node_Str""+ demoterName);
  }
 catch (  RankingException e) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + demoterName + ""String_Node_Str""+ e.getTarget().getName()+ ""String_Node_Str""+ e.getMessage());
  }
}",0.863937387116195
151318,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",description=""String_Node_Str"",isPrimary=true,permissions={""String_Node_Str"",""String_Node_Str""}) public void promoteUser(Plugin plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  String promoterName=""String_Node_Str"";
  PermissionUser promoter=null;
  if (sender instanceof Player) {
    promoter=PermissionsEx.getPermissionManager().getUser(((Player)sender).getName());
    promoterName=promoter.getName();
  }
  try {
    user.promote(promoter,args.get(""String_Node_Str""));
    PermissionGroup targetGroup=user.getRankLadderGroup(args.get(""String_Node_Str""));
    this.informPlayer(plugin,user.getName(),""String_Node_Str"" + targetGroup.getRankLadder() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str""+ targetGroup.getRankLadder()+ ""String_Node_Str""+ promoterName);
  }
 catch (  RankingException e) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + promoterName + ""String_Node_Str""+ e.getTarget().getName()+ ""String_Node_Str""+ e.getMessage());
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",description=""String_Node_Str"",isPrimary=true) public void promoteUser(Plugin plugin,CommandSender sender,Map<String,String> args){
  String userName=this.autoCompletePlayerName(args.get(""String_Node_Str""));
  PermissionUser user=PermissionsEx.getPermissionManager().getUser(userName);
  if (user == null) {
    sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  String promoterName=""String_Node_Str"";
  String ladder=""String_Node_Str"";
  if (args.containsKey(""String_Node_Str"")) {
    ladder=args.get(""String_Node_Str"");
  }
  PermissionUser promoter=null;
  if (sender instanceof Player) {
    promoter=PermissionsEx.getPermissionManager().getUser(((Player)sender).getName());
    if (promoter == null || !promoter.has(""String_Node_Str"" + ladder)) {
      sender.sendMessage(""String_Node_Str"");
      return;
    }
    promoterName=promoter.getName();
  }
  try {
    PermissionGroup targetGroup=user.promote(promoter,ladder);
    this.informPlayer(plugin,user.getName(),""String_Node_Str"" + targetGroup.getRankLadder() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str"");
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ targetGroup.getName()+ ""String_Node_Str""+ targetGroup.getRankLadder()+ ""String_Node_Str""+ promoterName);
  }
 catch (  RankingException e) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + promoterName + ""String_Node_Str""+ e.getTarget().getName()+ ""String_Node_Str""+ e.getMessage());
  }
}",0.8444176948540475
151319,"@Override public void addPermission(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),permission,world,this.type.ordinal());
}","@Override public void addPermission(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),permission,world,this.type.ordinal());
  this.fetchPermissions();
}",0.9421841541755888
151320,"@Override public void removePermission(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),permission,this.type.ordinal(),world);
}","@Override public void removePermission(String permission,String world){
  if (world == null) {
    world=""String_Node_Str"";
  }
  this.db.updateQuery(""String_Node_Str"",this.getName(),permission,this.type.ordinal(),world);
  this.fetchPermissions();
}",0.9429175475687104
151321,"@Override public void addPermission(String permission,String world){
  this.backendEntity.addPermission(permission,world);
}","@Override public void addPermission(String permission,String world){
  this.backendEntity.addPermission(permission,world);
  this.clearCache();
}",0.9219330855018588
151322,"@Override public void removePermission(String permission,String world){
  this.backendEntity.removePermission(permission,world);
}","@Override public void removePermission(String permission,String world){
  this.backendEntity.removePermission(permission,world);
  this.clearCache();
}",0.9252669039145908
151323,"@Override public void addPermission(String permission,String world){
  String nodePath=""String_Node_Str"";
  if (world != null && !world.isEmpty()) {
    nodePath=""String_Node_Str"" + world + ""String_Node_Str""+ nodePath;
  }
  List<String> permissions=this.node.getStringList(nodePath,new LinkedList<String>());
  if (!permissions.contains(permission)) {
    permissions.add(0,permission);
  }
  this.node.setProperty(nodePath,permissions);
  this.save();
}","@Override public void addPermission(String permission,String world){
  String permissionsNode=""String_Node_Str"";
  if (world != null && !world.isEmpty()) {
    permissionsNode=""String_Node_Str"" + world + ""String_Node_Str""+ permissionsNode;
  }
  List<String> permissions=this.node.getStringList(permissionsNode,new LinkedList<String>());
  if (!permissions.contains(permission)) {
    permissions.add(0,permission);
  }
  this.node.setProperty(permissionsNode,permissions);
  this.save();
}",0.6687830687830688
151324,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userSetGroup(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionManager manager=PermissionsEx.getPermissionManager();
  PermissionUser user=manager.getUser(this.autoCompletePlayerName(args.get(""String_Node_Str"")));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  String groupName=args.get(""String_Node_Str"");
  PermissionGroup[] groups;
  if (groupName.contains(""String_Node_Str"")) {
    String[] groupsNames=groupName.split(""String_Node_Str"");
    groups=new PermissionGroup[groupsNames.length];
    for (int i=0; i < groupsNames.length; i++) {
      groups[i]=manager.getGroup(groupsNames[i]);
    }
  }
 else {
    groupName=this.autoCompleteGroupName(groupName);
    groups=new PermissionGroup[]{manager.getGroup(groupName)};
  }
  user.setGroups(groups);
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
  this.informPlayer(plugin,user.getName(),""String_Node_Str"" + groupName + ""String_Node_Str"");
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userSetGroup(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionManager manager=PermissionsEx.getPermissionManager();
  PermissionUser user=manager.getUser(this.autoCompletePlayerName(args.get(""String_Node_Str"")));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  String groupName=args.get(""String_Node_Str"");
  PermissionGroup[] groups;
  if (groupName.contains(""String_Node_Str"")) {
    String[] groupsNames=groupName.split(""String_Node_Str"");
    groups=new PermissionGroup[groupsNames.length];
    for (int i=0; i < groupsNames.length; i++) {
      groups[i]=manager.getGroup(this.autoCompleteGroupName(groupsNames[i]));
    }
  }
 else {
    groupName=this.autoCompleteGroupName(groupName);
    groups=new PermissionGroup[]{manager.getGroup(groupName)};
  }
  user.setGroups(groups);
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
  this.informPlayer(plugin,user.getName(),""String_Node_Str"" + groupName + ""String_Node_Str"");
}",0.9876106194690264
151325,"@Override public void setOption(String option,String world,String value){
  if (option == null || option.isEmpty()) {
    return;
  }
  Boolean newOption=true;
  if (this.commonOptions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && worldsOptions.get(world) != null && worldsOptions.get(world).containsKey(option)) {
    newOption=false;
  }
  if (newOption && this.commonOptions.containsKey(option)) {
    newOption=false;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.getName(),option,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.getName(),this.type.ordinal(),option);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}","@Override public void setOption(String option,String world,String value){
  if (option == null || option.isEmpty()) {
    return;
  }
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (value == null || value.isEmpty()) {
    this.db.updateQuery(""String_Node_Str"",this.getName(),option,this.type.ordinal(),world);
    return;
  }
  Boolean newOption=true;
  if (this.commonOptions == null) {
    this.fetchPermissions();
  }
  if (!world.isEmpty() && worldsOptions.containsKey(world) && worldsOptions.get(world).containsKey(option)) {
    newOption=false;
  }
 else   if (world.isEmpty() && commonOptions.containsKey(option)) {
    newOption=false;
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.getName(),option,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.getName(),this.type.ordinal(),option);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}",0.4723127035830619
151326,"public void setProperty(String path,Object value){
  if (value instanceof ConfigurationNode) {
    value=((ConfigurationNode)value).getRoot();
  }
  super.setProperty(path,value);
}","@Override public void setProperty(String path,Object value){
  if (value instanceof ConfigurationNode) {
    value=((ConfigurationNode)value).getRoot();
  }
  super.setProperty(path,value);
}",0.9731182795698924
151327,"public FileEntity(String playerName,PermissionManager manager,FileBackend backend,String baseNode){
  super(playerName,manager);
  this.backend=backend;
  this.baseNode=baseNode + ""String_Node_Str"";
  this.node=backend.permissions.getNode(baseNode + this.getName());
  if (node == null) {
    node=new ConfigurationNode();
    this.virtual=true;
  }
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.suffix=""String_Node_Str"";
  }
}","public FileEntity(String entityName,PermissionManager manager,FileBackend backend,String baseNode){
  super(entityName,manager);
  this.backend=backend;
  this.baseNode=baseNode + ""String_Node_Str"" + entityName;
  this.node=backend.permissions.getNode(this.baseNode);
  if (node == null) {
    node=new ConfigurationNode();
    this.virtual=true;
  }
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.suffix=""String_Node_Str"";
  }
}",0.940386230058774
151328,"@Override public void save(){
  this.backend.permissions.setProperty(baseNode + this.getName(),node);
  this.backend.permissions.save();
}","@Override public void save(){
  this.backend.permissions.setProperty(baseNode,node);
  this.backend.permissions.save();
}",0.9343629343629344
151329,"@Override public void remove(){
  this.node.getRoot().clear();
  this.prefix=""String_Node_Str"";
  this.suffix=""String_Node_Str"";
  this.backend.permissions.removeProperty(baseNode + this.getName());
  this.backend.permissions.save();
}","@Override public void remove(){
  this.node.getRoot().clear();
  this.prefix=""String_Node_Str"";
  this.suffix=""String_Node_Str"";
  this.backend.permissions.removeProperty(baseNode);
  this.backend.permissions.save();
}",0.9624724061810156
151330,"public PermissionGroup[] getParentGroups(){
  Set<PermissionGroup> parentGroups=new HashSet<PermissionGroup>();
  for (  String parentGroup : this.getParentGroupsNamesImpl()) {
    parentGroup=parentGroup.trim();
    if (parentGroup.isEmpty()) {
      continue;
    }
    PermissionGroup group=this.manager.getGroup(parentGroup);
    if (!group.isChildOf(this.getName(),true)) {
      parentGroups.add(group);
    }
  }
  return parentGroups.toArray(new PermissionGroup[]{});
}","public PermissionGroup[] getParentGroups(){
  Set<PermissionGroup> parentGroups=new HashSet<PermissionGroup>();
  for (  String parentGroup : this.getParentGroupsNamesImpl()) {
    parentGroup=parentGroup.trim();
    if (parentGroup.isEmpty()) {
      continue;
    }
    if (parentGroup.equals(this.getName())) {
      continue;
    }
    PermissionGroup group=this.manager.getGroup(parentGroup);
    if (!group.isChildOf(this,true)) {
      parentGroups.add(group);
    }
  }
  return parentGroups.toArray(new PermissionGroup[0]);
}",0.913946587537092
151331,"public String[] getPermissions(String world){
  List<String> permissions=new LinkedList<String>();
  if (commonPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && this.worldsPermissions != null) {
    List<String> worldPermissions=this.worldsPermissions.get(world);
    if (worldPermissions != null) {
      permissions.addAll(worldPermissions);
    }
  }
 else {
    permissions.addAll(commonPermissions);
  }
  return permissions.toArray(new String[0]);
}","public String[] getPermissions(String world){
  List<String> permissions=new LinkedList<String>();
  if (commonPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && this.worldsPermissions != null) {
    List<String> worldPermissions=this.worldsPermissions.get(world);
    if (worldPermissions != null) {
      permissions.addAll(worldPermissions);
    }
  }
 else {
    permissions=commonPermissions;
  }
  return permissions.toArray(new String[0]);
}",0.99
151332,"protected String autoCompletePlayerName(String playerName){
  if (playerName == null) {
    return null;
  }
  List<String> players=new LinkedList<String>();
  playerName=playerName.toLowerCase();
  for (  Player player : Bukkit.getServer().getOnlinePlayers()) {
    if (player.getName().equalsIgnoreCase(playerName)) {
      return player.getName();
    }
    if (player.getName().toLowerCase().startsWith(playerName) && !players.contains(player.getName())) {
      players.add(player.getName());
    }
  }
  for (  PermissionUser user : PermissionsEx.getPermissionManager().getUsers()) {
    if (user.getName().equalsIgnoreCase(playerName)) {
      return user.getName();
    }
    if (user.getName().toLowerCase().startsWith(playerName.toLowerCase()) && !players.contains(user.getName())) {
      players.add(user.getName());
    }
  }
  if (players.size() > 1) {
    throw new AutoCompleteChoicesException(players.toArray(new String[0]),""String_Node_Str"");
  }
 else   if (players.size() == 1) {
    return players.get(0);
  }
 else {
    return playerName;
  }
}","protected String autoCompletePlayerName(String playerName){
  if (playerName == null) {
    return null;
  }
  List<String> players=new LinkedList<String>();
  for (  Player player : Bukkit.getServer().getOnlinePlayers()) {
    if (player.getName().equalsIgnoreCase(playerName)) {
      return player.getName();
    }
    if (player.getName().toLowerCase().startsWith(playerName.toLowerCase()) && !players.contains(player.getName())) {
      players.add(player.getName());
    }
  }
  for (  PermissionUser user : PermissionsEx.getPermissionManager().getUsers()) {
    if (user.getName().equalsIgnoreCase(playerName)) {
      return user.getName();
    }
    if (user.getName().toLowerCase().startsWith(playerName.toLowerCase()) && !players.contains(user.getName())) {
      players.add(user.getName());
    }
  }
  if (players.size() > 1) {
    throw new AutoCompleteChoicesException(players.toArray(new String[0]),""String_Node_Str"");
  }
 else   if (players.size() == 1) {
    return players.get(0);
  }
 else {
    return playerName;
  }
}",0.9748696064485538
151333,"public FileEntity(String playerName,PermissionManager manager,FileBackend backend,ConfigurationNode node){
  super(playerName,manager);
  this.backend=backend;
  if (node == null) {
    node=new ConfigurationNode();
    this.virtual=true;
  }
  this.node=node;
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.suffix=""String_Node_Str"";
  }
}","public FileEntity(String playerName,PermissionManager manager,FileBackend backend,String baseNode){
  super(playerName,manager);
  this.backend=backend;
  this.baseNode=baseNode + ""String_Node_Str"";
  this.node=backend.permissions.getNode(baseNode + this.getName());
  if (node == null) {
    node=new ConfigurationNode();
    this.virtual=true;
  }
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.suffix=""String_Node_Str"";
  }
}",0.851952770208901
151334,"@Override public void save(){
  this.backend.permissions.setProperty(""String_Node_Str"" + this.getName(),node);
  this.backend.permissions.save();
}","@Override public void save(){
  this.backend.permissions.setProperty(baseNode + this.getName(),node);
  this.backend.permissions.save();
}",0.9403508771929824
151335,"@Override public void remove(){
  this.node.getRoot().clear();
  this.prefix=""String_Node_Str"";
  this.suffix=""String_Node_Str"";
  this.backend.permissions.removeProperty(""String_Node_Str"" + this.getName());
  this.backend.permissions.save();
}","@Override public void remove(){
  this.node.getRoot().clear();
  this.prefix=""String_Node_Str"";
  this.suffix=""String_Node_Str"";
  this.backend.permissions.removeProperty(baseNode + this.getName());
  this.backend.permissions.save();
}",0.9478079331941544
151336,"public FileGroup(String name,PermissionManager manager,FileBackend backend){
  super(new FileEntity(name,manager,backend,backend.permissions.getNode(""String_Node_Str"" + name)));
  this.node=backend.permissions.getNode(""String_Node_Str"" + name);
  if (this.node == null) {
    this.node=Configuration.getEmptyNode();
    this.virtual=true;
  }
}","public FileGroup(String name,PermissionManager manager,FileBackend backend){
  super(new FileEntity(name,manager,backend,""String_Node_Str""));
  this.node=((FileEntity)this.backendEntity).getConfigNode();
}",0.6120218579234973
151337,"public FileUser(String playerName,PermissionManager manager,FileBackend backend){
  super(new FileEntity(playerName,manager,backend,backend.permissions.getNode(""String_Node_Str"" + playerName)));
  this.node=backend.permissions.getNode(""String_Node_Str"" + playerName);
  if (this.node == null) {
    this.node=Configuration.getEmptyNode();
    this.virtual=true;
  }
}","public FileUser(String playerName,PermissionManager manager,FileBackend backend){
  super(new FileEntity(playerName,manager,backend,""String_Node_Str""));
  this.node=((FileEntity)this.backendEntity).getConfigNode();
}",0.5969125214408233
151338,"public boolean checkPermissions(Player player){
  String[] permissions=this.getMethodAnnotation().permissions();
  if (permissions.length == 0 && !this.getMethodAnnotation().permission().isEmpty()) {
    permissions=new String[]{this.getMethodAnnotation().permission()};
  }
  PermissionManager manager=PermissionsEx.getPermissionManager();
  boolean lastORValue=false;
  for (int i=0; i < permissions.length; i++) {
    String permission=permissions[i];
    if (isOR(permission)) {
      continue;
    }
    if (permission.contains(""String_Node_Str"")) {
      String originalPermission=permission.toString();
      for (      Entry<String,String> entry : this.getParams().entrySet()) {
        if (entry.getValue() != null) {
          permission=permission.replace(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue());
        }
      }
      if (permission.equals(originalPermission)) {
        continue;
      }
    }
    if (!manager.has(player,permission)) {
      if (i < permissions.length - 2 && isOR(permissions[i + 1]) && !isOR(permissions[i + 2])) {
        continue;
      }
      if (i > 1 && isOR(permissions[i - 1]) && !isOR(permissions[i - 2]) && lastORValue) {
        continue;
      }
      return false;
    }
 else {
      if (i < permissions.length - 2 && isOR(permissions[i + 1]) && !isOR(permissions[i + 2])) {
        lastORValue=true;
      }
    }
  }
  return true;
}","public boolean checkPermissions(Player player){
  String[] permissions=this.getMethodAnnotation().permissions();
  if (permissions.length == 0 && !this.getMethodAnnotation().permission().isEmpty()) {
    permissions=new String[]{this.getMethodAnnotation().permission()};
  }
  PermissionManager manager=PermissionsEx.getPermissionManager();
  boolean lastORValue=false;
  for (int i=0; i < permissions.length; i++) {
    String permission=permissions[i];
    if (isOR(permission)) {
      continue;
    }
    if (permission.contains(""String_Node_Str"")) {
      String originalPermission=permission.toString();
      for (      Entry<String,String> entry : this.getParams().entrySet()) {
        if (entry.getValue() != null) {
          permission=permission.replace(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue());
        }
      }
      if (permission.equals(originalPermission)) {
        continue;
      }
    }
    if (!manager.has(player,permission)) {
      if (i < permissions.length - 2 && isOR(permissions[i + 1]) && !isOR(permissions[i + 2])) {
        continue;
      }
      if (i > 1 && isOR(permissions[i - 1]) && !isOR(permissions[i - 2]) && lastORValue) {
        lastORValue=false;
        continue;
      }
      return false;
    }
 else {
      if (i < permissions.length - 2 && isOR(permissions[i + 1]) && !isOR(permissions[i + 2])) {
        lastORValue=true;
      }
    }
  }
  return true;
}",0.8702343476740119
151339,"public SQLBackend(PermissionManager manager,Configuration config){
  super(manager,config);
  String dbDriver=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbUri=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbUser=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbPassword=config.getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.save();
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + dbUri + ""String_Node_Str"");
  sql=new SQLConnectionManager(dbUri,dbUser,dbPassword,dbDriver);
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  this.deployTables(dbDriver);
}","public SQLBackend(PermissionManager manager,Configuration config){
  super(manager,config);
  String dbDriver=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbUri=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbUser=config.getString(""String_Node_Str"",""String_Node_Str"");
  String dbPassword=config.getString(""String_Node_Str"",""String_Node_Str"");
  if (dbUri == null || dbUri.isEmpty()) {
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
    config.save();
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
  sql=new SQLConnectionManager(dbUri,dbUser,dbPassword,dbDriver);
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  this.deployTables(dbDriver);
}",0.952281069743052
151340,"protected void checkConnection() throws SQLException {
  if (!this.db.isValid(0)) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    this.connect();
  }
}","protected void checkConnection() throws SQLException {
  if (this.db.getClass().getName().startsWith(""String_Node_Str"")) {
    return;
  }
  if (!this.db.isValid(0)) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
    this.connect();
  }
}",0.8082191780821918
151341,"protected final void connect() throws SQLException {
  if (this.db != null && !this.db.isValid(0)) {
    return;
  }
  db=DriverManager.getConnection(""String_Node_Str"" + uri,user,password);
}","protected final void connect() throws SQLException {
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + this.uri + ""String_Node_Str"");
  db=DriverManager.getConnection(""String_Node_Str"" + uri,user,password);
}",0.6699029126213593
151342,"@Override public String[] getPermissions(String world){
  if (this.cachedPermissions == null) {
    List<String> permissions=new LinkedList<String>();
    this.getInheritedPermissions(world,permissions);
    this.cachedPermissions=permissions.toArray(new String[0]);
  }
  return this.cachedPermissions;
}","@Override public String[] getPermissions(String world){
  if (!this.cachedPermissions.containsKey(world)) {
    List<String> permissions=new LinkedList<String>();
    this.getInheritedPermissions(world,permissions);
    this.cachedPermissions.put(world,permissions.toArray(new String[0]));
  }
  return this.cachedPermissions.get(world);
}",0.4503105590062112
151343,"protected void clearCache(){
  this.cachedGroups=null;
  this.cachedPermissions=null;
  this.cachedPrefix=null;
  this.cachedSuffix=null;
  this.cachedAnwsers.clear();
}","protected void clearCache(){
  this.cachedGroups=null;
  this.cachedPrefix=null;
  this.cachedSuffix=null;
  this.cachedPermissions.clear();
  this.cachedAnwsers.clear();
}",0.8093841642228738
151344,"public FilePermissionGroup(String name,PermissionManager manager,FileBackend backend){
  super(name,manager);
  this.backend=backend;
  this.node=backend.permissions.getNode(""String_Node_Str"" + name);
  if (this.node == null) {
    this.node=Configuration.getEmptyNode();
    this.virtual=true;
  }
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.prefix=""String_Node_Str"";
  }
}","public FilePermissionGroup(String name,PermissionManager manager,FileBackend backend){
  super(name,manager);
  this.backend=backend;
  this.node=backend.permissions.getNode(""String_Node_Str"" + name);
  if (this.node == null) {
    this.node=Configuration.getEmptyNode();
    this.virtual=true;
  }
  this.prefix=this.node.getString(""String_Node_Str"");
  if (this.prefix == null) {
    this.prefix=""String_Node_Str"";
  }
  this.suffix=this.node.getString(""String_Node_Str"");
  if (this.suffix == null) {
    this.suffix=""String_Node_Str"";
  }
}",0.9944852941176472
151345,"@Override public void setSuffix(String suffix){
  if (prefix != null && !suffix.isEmpty()) {
    this.node.setProperty(""String_Node_Str"",suffix);
  }
 else {
    this.node.removeProperty(""String_Node_Str"");
  }
  this.save();
  super.setSuffix(suffix);
}","@Override public void setSuffix(String suffix){
  if (suffix != null && !suffix.isEmpty()) {
    this.node.setProperty(""String_Node_Str"",suffix);
  }
 else {
    this.node.removeProperty(""String_Node_Str"");
  }
  this.save();
  super.setSuffix(suffix);
}",0.9881889763779528
151346,"@Override public void setSuffix(String suffix){
  if (prefix != null && !suffix.isEmpty()) {
    this.node.setProperty(""String_Node_Str"",suffix);
  }
 else {
    this.node.removeProperty(""String_Node_Str"");
  }
  this.save();
  super.setSuffix(suffix);
}","@Override public void setSuffix(String suffix){
  if (suffix != null && !suffix.isEmpty()) {
    this.node.setProperty(""String_Node_Str"",suffix);
  }
 else {
    this.node.removeProperty(""String_Node_Str"");
  }
  this.save();
  super.setSuffix(suffix);
}",0.9881889763779528
151347,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionBackend backend=PermissionBackend.getBackend(args.get(""String_Node_Str""),PermissionsEx.getPermissionManager(),((PermissionsEx)plugin).getConfigurationNode(),null);
    File dstFile=new File(""String_Node_Str"",args.get(""String_Node_Str""));
    backend.dumpData(new OutputStreamWriter(new FileOutputStream(dstFile),""String_Node_Str""));
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + dstFile.getName()+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getCause().getClass().getName() + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  IOException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionBackend backend=PermissionBackend.getBackend(args.get(""String_Node_Str""),PermissionsEx.getPermissionManager(),((PermissionsEx)plugin).getConfigurationNode(),null);
    File dstFile=new File(""String_Node_Str"",args.get(""String_Node_Str""));
    FileOutputStream outStream=new FileOutputStream(dstFile);
    backend.dumpData(new OutputStreamWriter(outStream,""String_Node_Str""));
    outStream.close();
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + dstFile.getName()+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getCause().getClass().getName() + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  IOException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
}",0.9496932515337424
151348,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionBackend backend=PermissionBackend.getBackend(args.get(""String_Node_Str""),PermissionsEx.getPermissionManager(),((PermissionsEx)plugin).getConfigurationNode(),null);
    File dstFile=new File(""String_Node_Str"",args.get(""String_Node_Str""));
    FileOutputStream outStream=new FileOutputStream(dstFile);
    backend.dumpData(new OutputStreamWriter(outStream,""String_Node_Str""));
    outStream.close();
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + dstFile.getName()+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getCause().getClass().getName() + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  IOException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void dumpData(Plugin plugin,CommandSender sender,Map<String,String> args){
  if (!(plugin instanceof PermissionsEx)) {
    return;
  }
  try {
    PermissionBackend backend=PermissionBackend.getBackend(args.get(""String_Node_Str""),PermissionsEx.getPermissionManager(),((PermissionsEx)plugin).getConfigurationNode(),null);
    File dstFile=new File(""String_Node_Str"",args.get(""String_Node_Str""));
    FileOutputStream outStream=new FileOutputStream(dstFile);
    backend.dumpData(new OutputStreamWriter(outStream,""String_Node_Str""));
    outStream.close();
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + dstFile.getName()+ ""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof ClassNotFoundException) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
      logger.severe(""String_Node_Str"" + e.getMessage());
    }
  }
catch (  IOException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
}",0.9775967413441956
151349,"public boolean has(String permission,String world){
  if (permission != null && permission.isEmpty()) {
    return true;
  }
  String expression=getMatchingExpression(permission,world);
  if (expression != null) {
    return this.explainExpression(expression);
  }
  return false;
}","public boolean has(String permission,String world){
  if (permission != null && permission.isEmpty()) {
    return true;
  }
  String expression=getMatchingExpression(permission,world);
  return this.explainExpression(expression);
}",0.9027237354085604
151350,"public static boolean isMatches(String expression,String permission,boolean additionalChecks){
  if (expression.startsWith(""String_Node_Str"")) {
    expression=expression.substring(1);
  }
  if (!patternCache.containsKey(expression)) {
    patternCache.put(expression,Pattern.compile(prepareRegexp(expression)));
  }
  if (patternCache.get(expression).matcher(permission).matches()) {
    return true;
  }
  if (additionalChecks && expression.endsWith(""String_Node_Str"") && isMatches(expression.substring(0,expression.length() - 2),permission,false)) {
    return true;
  }
  return false;
}","public static boolean isMatches(String expression,String permission,boolean additionalChecks){
  String localExpression=expression;
  if (localExpression.startsWith(""String_Node_Str"")) {
    localExpression=localExpression.substring(1);
  }
  if (!patternCache.containsKey(localExpression)) {
    patternCache.put(localExpression,Pattern.compile(prepareRegexp(localExpression)));
  }
  if (patternCache.get(localExpression).matcher(permission).matches()) {
    return true;
  }
  if (additionalChecks && localExpression.endsWith(""String_Node_Str"") && isMatches(localExpression.substring(0,localExpression.length() - 2),permission,false)) {
    return true;
  }
  return false;
}",0.9156816390858944
151351,"protected boolean explainExpression(String expression){
  return !expression.substring(0,1).equals(""String_Node_Str"");
}","protected boolean explainExpression(String expression){
  if (expression == null || expression.isEmpty()) {
    return false;
  }
  return !expression.startsWith(""String_Node_Str"");
}",0.6732673267326733
151352,"@Override public void onEntityTarget(EntityTargetEvent event){
  if (event.getTarget() instanceof Player) {
    Player player=(Player)event.getTarget();
    if (!permissionsManager.has(player,""String_Node_Str"" + getEntityName(event.getEntity()))) {
      event.setCancelled(true);
    }
  }
}","@Override public void onEntityTarget(EntityTargetEvent event){
  if (event.getTarget() instanceof Player) {
    Player player=(Player)event.getTarget();
    player.sendMessage(""String_Node_Str"");
    if (!permissionsManager.has(player,""String_Node_Str"" + getEntityName(event.getEntity()))) {
      event.setCancelled(true);
    }
  }
}",0.9314194577352471
151353,"@Override public void registerEvents(PluginManager pluginManager,PermissionsEx pex,ConfigurationNode config){
  pluginManager.registerEvent(Event.Type.ENTITY_TARGET,this,Priority.Low,pex);
  pluginManager.registerEvent(Event.Type.ENTITY_INTERACT,this,Priority.Low,pex);
  pluginManager.registerEvent(Event.Type.ENTITY_DAMAGE,this,Priority.Low,pex);
}","@Override public void registerEvents(PluginManager pluginManager,PermissionsEx pex,ConfigurationNode config){
  pluginManager.registerEvent(Event.Type.VEHICLE_COLLISION_ENTITY,this,Priority.Low,pex);
  pluginManager.registerEvent(Event.Type.VEHICLE_ENTER,this,Priority.Low,pex);
  pluginManager.registerEvent(Event.Type.VEHICLE_DAMAGE,this,Priority.Low,pex);
}",0.9183098591549296
151354,"public void remove(){
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.virtual=true;
  this.commonOptions.clear();
  this.commonPermissions.clear();
  this.worldsOptions.clear();
  this.worldsPermissions.clear();
}","public void remove(){
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
  this.virtual=true;
  this.commonOptions.clear();
  this.commonPermissions.clear();
  this.worldsOptions.clear();
  this.worldsPermissions.clear();
  this.parents.clear();
}",0.97
151355,"@Override public void onInventoryOpen(PlayerInventoryEvent event){
  Inventory inventory=event.getPlayer().getInventory();
  for (  ItemStack stack : inventory.getContents()) {
    if (!permissionsManager.has(event.getPlayer(),""String_Node_Str"" + stack.getTypeId())) {
      inventory.remove(stack);
      informUser(event.getPlayer(),""String_Node_Str"" + stack.getType().name() + ""String_Node_Str""+ stack.getAmount()+ ""String_Node_Str"");
    }
  }
}","@Override public void onInventoryOpen(PlayerInventoryEvent event){
  this.checkPlayerInventory(event.getPlayer());
}",0.3539823008849557
151356,"@Override public void onItemHeldChange(PlayerItemHeldEvent event){
  Inventory inventory=event.getPlayer().getInventory();
  for (  ItemStack stack : inventory.getContents()) {
    if (!permissionsManager.has(event.getPlayer(),""String_Node_Str"" + stack.getTypeId())) {
      inventory.remove(stack);
      informUser(event.getPlayer(),""String_Node_Str"" + stack.getType().name() + ""String_Node_Str""+ stack.getAmount()+ ""String_Node_Str"");
    }
  }
}","@Override public void onItemHeldChange(PlayerItemHeldEvent event){
  this.checkPlayerInventory(event.getPlayer());
}",0.3539823008849557
151357,"public static boolean isMatches(String expression,String permission,boolean additionalChecks){
  if (expression.startsWith(""String_Node_Str"")) {
    expression=expression.substring(1);
  }
  if (!patternCache.containsKey(expression)) {
    patternCache.put(expression,Pattern.compile(prepareRegexp(expression)));
  }
  if (patternCache.get(expression).matcher(permission).matches()) {
    return true;
  }
  if (additionalChecks && expression.endsWith(""String_Node_Str"") && isMatches(expression.substring(0,expression.length() - 2),permission,false)) {
    return true;
  }
  if (additionalChecks && !expression.endsWith(""String_Node_Str"") && isMatches(expression + ""String_Node_Str"",permission,false)) {
    return true;
  }
  return false;
}","public static boolean isMatches(String expression,String permission,boolean additionalChecks){
  if (expression.startsWith(""String_Node_Str"")) {
    expression=expression.substring(1);
  }
  if (!patternCache.containsKey(expression)) {
    patternCache.put(expression,Pattern.compile(prepareRegexp(expression)));
  }
  if (patternCache.get(expression).matcher(permission).matches()) {
    return true;
  }
  if (additionalChecks && expression.endsWith(""String_Node_Str"") && isMatches(expression.substring(0,expression.length() - 2),permission,false)) {
    return true;
  }
  return false;
}",0.8710644677661169
151358,"protected Configuration loadConfig(String name){
  File configurationFile=new File(getDataFolder(),configFile);
  Configuration configuration;
  if (!configurationFile.exists()) {
    try {
      if (!getDataFolder().exists()) {
        getDataFolder().mkdirs();
      }
      configurationFile.createNewFile();
      configuration=new Configuration(configurationFile);
      configuration.setProperty(""String_Node_Str"",getDataFolder().getPath());
      configuration.save();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    configuration=new Configuration(configurationFile);
    configuration.load();
  }
  return configuration;
}","protected final Configuration loadConfig(String name){
  File configurationFile=new File(getDataFolder(),configFile);
  Configuration configuration;
  if (!configurationFile.exists()) {
    try {
      if (!getDataFolder().exists()) {
        getDataFolder().mkdirs();
      }
      configurationFile.createNewFile();
      configuration=new Configuration(configurationFile);
      configuration.setProperty(""String_Node_Str"",getDataFolder().getPath());
      configuration.save();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    configuration=new Configuration(configurationFile);
    configuration.load();
  }
  return configuration;
}",0.9955882352941176
151359,"public PermissionsEx(){
  super();
  PermissionBackend.registerBackendAlias(""String_Node_Str"",SQLBackend.class);
  PermissionBackend.registerBackendAlias(""String_Node_Str"",FileBackend.class);
  logger.log(Level.INFO,""String_Node_Str"");
}","public PermissionsEx(){
  super();
  PermissionBackend.registerBackendAlias(""String_Node_Str"",SQLBackend.class);
  PermissionBackend.registerBackendAlias(""String_Node_Str"",FileBackend.class);
  this.config=this.loadConfig(configFile);
  this.commandsManager=new CommandsManager(this);
  this.permissionsManager=new PermissionManager(this.config);
  logger.log(Level.INFO,""String_Node_Str"");
}",0.753577106518283
151360,"public abstract void addPermission(String permission,String value,String world);","public abstract void addPermission(String permission,String world);",0.91156462585034
151361,public abstract String[] getPermissions(String world);,"public String[] getPermissions(String world){
  List<String> permissions=new LinkedList<String>();
  this.getInheritedPermissions(world,permissions);
  return permissions.toArray(new String[0]);
}",0.36
151362,"public abstract void setPermission(String permission,String value,String world);","public void setPermission(String permission,String value){
  this.setOption(permission,value,""String_Node_Str"");
}",0.6907216494845361
151363,"public void addGroup(PermissionGroup group){
  if (group == null) {
    return;
  }
  List<PermissionGroup> groups=Arrays.asList(this.getGroups());
  if (!groups.contains(group)) {
    groups.add(group);
    this.setGroups(groups.toArray(new PermissionGroup[]{}));
  }
}","public void addGroup(PermissionGroup group){
  if (group == null) {
    return;
  }
  List<PermissionGroup> groups=new LinkedList<PermissionGroup>(Arrays.asList(this.getGroups()));
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + groups.getClass().getSimpleName() + ""String_Node_Str""+ groups);
  if (!groups.contains(group)) {
    groups.add(group);
    this.setGroups(groups.toArray(new PermissionGroup[0]));
  }
}",0.7439198855507868
151364,"@Override public PermissionUser[] getUsers(){
  List<PermissionUser> users=new LinkedList<PermissionUser>();
  Map<String,ConfigurationNode> userMap=this.permissions.getNodesMap(""String_Node_Str"");
  for (  Map.Entry<String,ConfigurationNode> entry : userMap.entrySet()) {
    users.add(this.manager.getUser(entry.getKey()));
  }
  return users.toArray(new PermissionUser[]{});
}","@Override public PermissionUser[] getUsers(){
  List<PermissionUser> users=new LinkedList<PermissionUser>();
  Map<String,ConfigurationNode> userMap=this.permissions.getNodesMap(""String_Node_Str"");
  if (userMap != null) {
    for (    Map.Entry<String,ConfigurationNode> entry : userMap.entrySet()) {
      users.add(this.manager.getUser(entry.getKey()));
    }
  }
  return users.toArray(new PermissionUser[]{});
}",0.9433962264150944
151365,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupDelete(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + group.getName()+ ""String_Node_Str"");
  group.remove();
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupDelete(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + group.getName()+ ""String_Node_Str"");
  group.remove();
  PermissionsPlugin.getPermissionManager().resetGroup(group.getName());
  group=null;
}",0.9234875444839856
151366,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupSetPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  group.setPermission(args.get(""String_Node_Str""),args.get(""String_Node_Str""),args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + group.getName()+ ""String_Node_Str"");
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupSetPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  group.setOption(args.get(""String_Node_Str""),args.get(""String_Node_Str""),args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + group.getName()+ ""String_Node_Str"");
}",0.99185667752443
151367,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userSetPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  user.setPermission(args.get(""String_Node_Str""),args.get(""String_Node_Str""),args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userSetPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  user.setOption(args.get(""String_Node_Str""),args.get(""String_Node_Str""),args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
}",0.9912434325744308
151368,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupListPermissions(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  String permission : group.getPermissions(args.get(""String_Node_Str""))) {
    sender.sendMessage(""String_Node_Str"" + permission);
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupListPermissions(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionGroup group=PermissionsPlugin.getPermissionManager().getGroup(args.get(""String_Node_Str""));
  if (group == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  String permission : group.getOwnPermissions(args.get(""String_Node_Str""))) {
    sender.sendMessage(""String_Node_Str"" + permission);
  }
  sender.sendMessage(""String_Node_Str"");
  for (  Map.Entry<String,String> option : group.getOptions(args.get(""String_Node_Str"")).entrySet()) {
    sender.sendMessage(""String_Node_Str"" + option.getKey() + ""String_Node_Str""+ option.getValue());
  }
}",0.8375404530744337
151369,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userListPermissions(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(args.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  String permission : user.getPermissions(args.get(""String_Node_Str""))) {
    sender.sendMessage(""String_Node_Str"" + permission);
  }
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userListPermissions(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(args.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  String permission : user.getOwnPermissions(args.get(""String_Node_Str""))) {
    sender.sendMessage(""String_Node_Str"" + permission);
  }
  user.getOptions(args.get(""String_Node_Str""));
}",0.9605568445475638
151370,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userAddPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  user.addPermission(args.get(""String_Node_Str""),null,args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void userAddPermission(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser user=PermissionsPlugin.getPermissionManager().getUser(args.get(""String_Node_Str""));
  if (user == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  user.addPermission(args.get(""String_Node_Str""),args.get(""String_Node_Str""));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
}",0.9954337899543378
151371,"/** 
 * Group users management
 */
@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupUsersList(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser[] users=PermissionsPlugin.getPermissionManager().getUsers(args.get(""String_Node_Str""));
  if (users == null || users.length == 0) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","/** 
 * Group users management
 */
@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",permission=""String_Node_Str"",description=""String_Node_Str"") public void groupUsersList(Plugin plugin,CommandSender sender,Map<String,String> args){
  PermissionUser[] users=PermissionsPlugin.getPermissionManager().getUsers(args.get(""String_Node_Str""));
  if (users == null || users.length == 0) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  sender.sendMessage(""String_Node_Str"" + args.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  PermissionUser user : users) {
    sender.sendMessage(""String_Node_Str"" + user.getName());
  }
}",0.8228882833787466
151372,"public void setPermission(String permission,String value,String world){
  Boolean newOption=true;
  if (this.worldsPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && worldsOptions.get(world) != null && worldsOptions.get(world).containsKey(permission)) {
    newOption=false;
  }
  if (newOption && this.commonOptions.containsKey(permission)) {
    newOption=false;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.name,permission,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.name,this.type.ordinal(),permission);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}","public void setPermission(String permission,String value,String world){
  if (permission == null || permission.isEmpty()) {
    return;
  }
  Boolean newOption=true;
  if (this.worldsPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && worldsOptions.get(world) != null && worldsOptions.get(world).containsKey(permission)) {
    newOption=false;
  }
  if (newOption && this.commonOptions.containsKey(permission)) {
    newOption=false;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.name,permission,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.name,this.type.ordinal(),permission);
  }
  if (this.isVirtual()) {
    this.save();
  }
  this.fetchPermissions();
}",0.9605110336817654
151373,"public void addGroup(PermissionGroup group){
  if (group == null) {
    return;
  }
  List<PermissionGroup> groups=new LinkedList<PermissionGroup>(Arrays.asList(this.getGroups()));
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + groups.getClass().getSimpleName() + ""String_Node_Str""+ groups);
  if (!groups.contains(group)) {
    groups.add(group);
    this.setGroups(groups.toArray(new PermissionGroup[0]));
  }
}","public void addGroup(PermissionGroup group){
  if (group == null) {
    return;
  }
  List<PermissionGroup> groups=new LinkedList<PermissionGroup>(Arrays.asList(this.getGroups()));
  if (this.getGroupsNamesImpl().length == 0 && groups.size() == 1 && groups.contains(this.manager.getDefaultGroup())) {
    groups.clear();
  }
  if (!groups.contains(group)) {
    groups.add(group);
    this.setGroups(groups.toArray(new PermissionGroup[0]));
  }
}",0.7062857142857143
151374,"@Override public void setPrefix(String prefix){
  super.setPrefix(prefix);
}","@Override public void setPrefix(String prefix){
  this.node.setProperty(""String_Node_Str"",prefix);
  super.setPrefix(prefix);
}",0.7487684729064039
151375,"@Override public void setSuffix(String postfix){
  super.setSuffix(postfix);
}","@Override public void setSuffix(String postfix){
  this.node.setProperty(""String_Node_Str"",prefix);
  super.setSuffix(postfix);
}",0.7536231884057971
151376,"@Override public void setPrefix(String prefix){
  backend.setPrefix(prefix);
  this.prefix=prefix;
}","@Override public void setPrefix(String prefix){
  backend.setPrefix(prefix);
  super.setPrefix(prefix);
}",0.8780487804878049
151377,"@Override public void setSuffix(String suffix){
  backend.setSuffix(suffix);
  this.suffix=suffix;
}","@Override public void setSuffix(String suffix){
  backend.setSuffix(suffix);
  super.setSuffix(suffix);
}",0.8780487804878049
151378,"@Override public void setPrefix(String prefix){
  backend.setPrefix(prefix);
  this.prefix=prefix;
}","@Override public void setPrefix(String prefix){
  backend.setPrefix(prefix);
  super.setPrefix(prefix);
}",0.8780487804878049
151379,"@Override public void setSuffix(String suffix){
  backend.setSuffix(suffix);
  this.suffix=suffix;
}","@Override public void setSuffix(String suffix){
  backend.setSuffix(suffix);
  super.setSuffix(suffix);
}",0.8780487804878049
151380,"@Override public void onEnable(){
  this.commandsManager.register(new ru.tehkode.permissions.bukkit.commands.PermissionsCommand());
  this.registerEvents();
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  this.commandsManager.register(new ru.tehkode.permissions.bukkit.commands.PermissionsCommand());
  this.registerModifyworld();
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}",0.9731437598736176
151381,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  PluginDescriptionFile pdfFile=this.getDescription();
  if (args.length > 0) {
    return this.commandsManager.execute(sender,command,args);
  }
 else {
    if (sender instanceof Player) {
      sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  PluginDescriptionFile pdfFile=this.getDescription();
  if (args.length > 0) {
    return this.commandsManager.execute(sender,command,args);
  }
 else {
    if (sender instanceof Player) {
      sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
      return !this.permissionsManager.has((Player)sender,""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
      return false;
    }
  }
}",0.9081967213114754
151382,"protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  this.db.updateQuery(sql,this.suffix,this.prefix,this.name,this.type.ordinal());
}","protected void updateInfo(){
  String sql;
  if (this.isVirtual()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  this.db.updateQuery(sql,this.suffix,this.prefix,this.name,this.type.ordinal());
  this.virtual=false;
}",0.9527896995708156
151383,"public void setPermissions(String[] permissions,String world){
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal(),world);
  for (  String permission : permissions) {
    this.setPermission(permission,""String_Node_Str"",world);
  }
}","public void setPermissions(String[] permissions,String world){
  this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal(),world);
  for (  String permission : permissions) {
    this.setPermission(permission,""String_Node_Str"",world);
  }
  if (this.isVirtual()) {
    this.save();
  }
}",0.9140767824497258
151384,"public void setParents(PermissionGroup[] parentGroups){
  try {
    this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
    List<Object[]> rows=new LinkedList<Object[]>();
    for (    PermissionGroup group : parentGroups) {
      rows.add(new Object[]{this.name,group.getName(),this.type.ordinal()});
    }
    this.db.insert(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},rows);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","public void setParents(PermissionGroup[] parentGroups){
  try {
    this.db.updateQuery(""String_Node_Str"",this.name,this.type.ordinal());
    List<Object[]> rows=new LinkedList<Object[]>();
    for (    PermissionGroup group : parentGroups) {
      if (group == null || group.getName().isEmpty()) {
        continue;
      }
      rows.add(new Object[]{this.name,group.getName(),this.type.ordinal()});
    }
    this.db.insert(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},rows);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (this.isVirtual()) {
    this.save();
  }
}",0.8859878154917319
151385,"public void setPermission(String permission,String value,String world){
  Boolean newOption=true;
  if (this.worldsPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && worldsOptions.get(world) != null && worldsOptions.get(world).containsKey(permission)) {
    newOption=false;
  }
  if (newOption && this.commonOptions.containsKey(permission)) {
    newOption=false;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.name,permission,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.name,this.type.ordinal(),permission);
  }
}","public void setPermission(String permission,String value,String world){
  Boolean newOption=true;
  if (this.worldsPermissions == null) {
    this.fetchPermissions();
  }
  if (world != null && !world.isEmpty() && worldsOptions.get(world) != null && worldsOptions.get(world).containsKey(permission)) {
    newOption=false;
  }
  if (newOption && this.commonOptions.containsKey(permission)) {
    newOption=false;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  if (world == null) {
    world=""String_Node_Str"";
  }
  if (newOption) {
    this.db.updateQuery(""String_Node_Str"",this.name,permission,value,world,this.type.ordinal());
  }
 else {
    this.db.updateQuery(""String_Node_Str"",value,this.name,this.type.ordinal(),permission);
  }
  if (this.isVirtual()) {
    this.save();
  }
}",0.7882431529726119
151386,"@Override public boolean has(String permission,String world){
  String expression=this.getMatchingExpression(permission,world);
  if (expression != null) {
    return this.explainExpression(expression);
  }
  for (  PermissionGroup parent : this.getParentGroups()) {
    if (parent.has(permission,world)) {
      return true;
    }
  }
  return false;
}","@Override public boolean has(String permission,String world){
  if (permission != null && permission.isEmpty()) {
    return true;
  }
  String expression=this.getMatchingExpression(permission,world);
  if (expression != null) {
    return this.explainExpression(expression);
  }
  for (  PermissionGroup parent : this.getParentGroups()) {
    if (parent.has(permission,world)) {
      return true;
    }
  }
  return false;
}",0.9062901155327344
151387,"private void initBackend(){
  String backEnd=this.config.getString(""String_Node_Str"");
  if (backEnd == null || backEnd.isEmpty()) {
    backEnd=PermissionBackendFactory.defaultBackend;
    this.config.setProperty(""String_Node_Str"",backEnd);
    this.config.save();
  }
  this.backend=PermissionBackendFactory.getBackend(backEnd,this,config);
}","private void initBackend(){
  String backEnd=this.config.getString(""String_Node_Str"");
  if (backEnd == null || backEnd.isEmpty()) {
    backEnd=PermissionBackend.defaultBackend;
    this.config.setProperty(""String_Node_Str"",backEnd);
    this.config.save();
  }
  this.backend=PermissionBackend.getBackend(backEnd,this,config);
}",0.9792284866468842
151388,"@Override public boolean has(String permission,String world){
  String expression=this.getMatchingExpression(permission,world);
  if (expression != null) {
    return this.explainExpression(expression);
  }
  for (  PermissionGroup group : this.getGroups()) {
    if (group.has(permission,world)) {
      return true;
    }
  }
  return false;
}","@Override public boolean has(String permission,String world){
  if (permission != null && permission.isEmpty()) {
    return true;
  }
  String expression=this.getMatchingExpression(permission,world);
  if (expression != null) {
    return this.explainExpression(expression);
  }
  for (  PermissionGroup group : this.getGroups()) {
    if (group.has(permission,world)) {
      return true;
    }
  }
  return false;
}",0.9043250327653998
151389,"public PermissionsPlugin(){
  super();
  logger.log(Level.INFO,""String_Node_Str"");
}","public PermissionsPlugin(){
  super();
  PermissionBackend.registerBackendAlias(""String_Node_Str"",SQLBackend.class);
  PermissionBackend.registerBackendAlias(""String_Node_Str"",FileBackend.class);
  logger.log(Level.INFO,""String_Node_Str"");
}",0.5169230769230769
151390,"@Override public void onEnable(){
  this.commandsManager.register(new ru.tehkode.permissions.bukkit.commands.PermissionsCommand());
  this.getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,this.blockProtector,Priority.Low,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,this.blockProtector,Priority.Low,this);
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  this.commandsManager.register(new ru.tehkode.permissions.bukkit.commands.PermissionsCommand());
  this.getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,this.blockProtector,Priority.Low,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,this.blockProtector,Priority.Low,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,new org.bukkit.event.player.PlayerListener(),Priority.Low,this);
  logger.log(Level.INFO,""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}",0.8811544991511036
151391,"public boolean execute(CommandSender sender,org.bukkit.command.Command command,String[] args){
  Map<CommandSyntax,CommandBinding> callMap=this.listeners.get(command.getName());
  if (callMap == null) {
    return false;
  }
  CommandBinding selectedBinding=null;
  int argumentsLength=0;
  String arguments=StringUtils.implode(args,""String_Node_Str"");
  for (  Entry<CommandSyntax,CommandBinding> entry : callMap.entrySet()) {
    CommandSyntax syntax=entry.getKey();
    if (!syntax.isMatch(arguments)) {
      continue;
    }
    if (selectedBinding != null && syntax.getRegexp().length() < argumentsLength) {
      continue;
    }
    CommandBinding binding=entry.getValue();
    binding.setParams(syntax.getMatchedArguments(arguments));
    selectedBinding=binding;
  }
  if (selectedBinding == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Command commandAnnotation=selectedBinding.getMethodAnnotation();
  if (!commandAnnotation.permission().isEmpty() && sender instanceof Player) {
    if (!PermissionsPlugin.getPermissionManager().has((Player)sender,commandAnnotation.permission())) {
      logger.warning(""String_Node_Str"" + ((Player)sender).getName() + ""String_Node_Str""+ command.getName()+ ""String_Node_Str""+ arguments+ ""String_Node_Str""+ ""String_Node_Str""+ commandAnnotation.permission()+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  try {
    selectedBinding.call(this.plugin,sender,selectedBinding.getParams());
  }
 catch (  RuntimeException e) {
    logger.severe(""String_Node_Str"" + command.getName() + ""String_Node_Str"");
  }
  return true;
}","public boolean execute(CommandSender sender,org.bukkit.command.Command command,String[] args){
  Map<CommandSyntax,CommandBinding> callMap=this.listeners.get(command.getName());
  if (callMap == null) {
    return false;
  }
  CommandBinding selectedBinding=null;
  int argumentsLength=0;
  String arguments=StringUtils.implode(args,""String_Node_Str"");
  for (  Entry<CommandSyntax,CommandBinding> entry : callMap.entrySet()) {
    CommandSyntax syntax=entry.getKey();
    if (!syntax.isMatch(arguments)) {
      continue;
    }
    if (selectedBinding != null && syntax.getRegexp().length() < argumentsLength) {
      continue;
    }
    CommandBinding binding=entry.getValue();
    binding.setParams(syntax.getMatchedArguments(arguments));
    selectedBinding=binding;
  }
  if (selectedBinding == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Command commandAnnotation=selectedBinding.getMethodAnnotation();
  if (!commandAnnotation.permission().isEmpty() && sender instanceof Player) {
    if (!PermissionsPlugin.getPermissionManager().has((Player)sender,commandAnnotation.permission())) {
      logger.warning(""String_Node_Str"" + ((Player)sender).getName() + ""String_Node_Str""+ command.getName()+ ""String_Node_Str""+ arguments+ ""String_Node_Str""+ ""String_Node_Str""+ commandAnnotation.permission()+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  try {
    selectedBinding.call(this.plugin,sender,selectedBinding.getParams());
  }
 catch (  RuntimeException e) {
    logger.severe(""String_Node_Str"" + command.getName() + ""String_Node_Str"");
    e.printStackTrace();
  }
  return true;
}",0.9925794004155536
151392,"/** 
 * Gets a list of nodes. Non-valid entries will not be in the list. There will be no null slots. If the list is not defined, the default will be returned. 'null' can be passed for the default and an empty list will be returned instead. The node must be an actual node and cannot be just a boolean,
 * @param path path to node (dot notation)
 * @param def default value or null for an empty list as default
 * @return list of integers
 */
public List<ConfigurationNode> getNodesList(String path,List<ConfigurationNode> def){
  List<Object> raw=getList(path);
  if (raw == null) {
    return def != null ? def : new ArrayList<ConfigurationNode>();
  }
  List<ConfigurationNode> list=new ArrayList<ConfigurationNode>();
  for (  Object o : raw) {
    if (o instanceof Map) {
      list.add(new ConfigurationNode((Map<String,Object>)o));
    }
  }
  return list;
}","/** 
 * Gets a list of nodes. Non-valid entries will not be in the list. There will be no null slots. If the list is not defined, the default will be returned. 'null' can be passed for the default and an empty list will be returned instead. The node must be an actual node and cannot be just a boolean,
 * @param path path to node (dot notation)
 * @param def default value or null for an empty list as default
 * @return list of integers
 */
public List<ConfigurationNode> getNodesList(String path,List<ConfigurationNode> def){
  List<Object> raw=getList(path);
  if (raw == null) {
    return def != null ? def : new ArrayList<ConfigurationNode>();
  }
  List<ConfigurationNode> list=new ArrayList<ConfigurationNode>();
  for (  Object o : raw) {
    if (o instanceof ConfigurationNode) {
      list.add((ConfigurationNode)o);
    }
    if (o instanceof Map) {
      list.add(new ConfigurationNode((Map<String,Object>)o));
    }
  }
  return list;
}",0.9526431718061674
151393,"/** 
 * Get a list of nodes at a location. If the map at the particular location does not exist or it is not a map, null will be returned.
 * @param path path to node (dot notation)
 * @return map of nodes
 */
public Map<String,ConfigurationNode> getNodesMap(String path){
  Object o=getProperty(path);
  if (o == null) {
    return null;
  }
 else   if (o instanceof Map) {
    Map<String,ConfigurationNode> nodes=new HashMap<String,ConfigurationNode>();
    for (    Map.Entry<String,Object> entry : ((Map<String,Object>)o).entrySet()) {
      if (entry.getValue() instanceof Map) {
        nodes.put(entry.getKey(),new ConfigurationNode((Map<String,Object>)entry.getValue()));
      }
    }
    return nodes;
  }
 else {
    return null;
  }
}","/** 
 * Get a list of nodes at a location. If the map at the particular location does not exist or it is not a map, null will be returned.
 * @param path path to node (dot notation)
 * @return map of nodes
 */
public Map<String,ConfigurationNode> getNodesMap(String path){
  Object o=getProperty(path);
  if (o == null) {
    return null;
  }
  if (o instanceof Map) {
    Map<String,ConfigurationNode> nodes=new HashMap<String,ConfigurationNode>();
    for (    Map.Entry<String,Object> entry : ((Map<String,Object>)o).entrySet()) {
      if (entry.getValue() instanceof ConfigurationNode) {
        nodes.put(entry.getKey(),(ConfigurationNode)entry.getValue());
      }
 else       if (entry.getValue() instanceof Map) {
        nodes.put(entry.getKey(),new ConfigurationNode((Map<String,Object>)entry.getValue()));
      }
    }
    return nodes;
  }
 else {
    return null;
  }
}",0.9079754601226994
151394,"/** 
 * Get a configuration node at a path. If the node doesn't exist or the path does not lead to a node, null will be returned. A node has key/value mappings.
 * @param path
 * @return node or null
 */
@Override public ConfigurationNode getNode(String path){
  Object raw=getProperty(path);
  if (raw instanceof Map) {
    return new ConfigurationNode((Map<String,Object>)raw);
  }
  return null;
}","/** 
 * Get a configuration node at a path. If the node doesn't exist or the path does not lead to a node, null will be returned. A node has key/value mappings.
 * @param path
 * @return node or null
 */
@Override public ConfigurationNode getNode(String path){
  Object raw=getProperty(path);
  if (raw instanceof ConfigurationNode) {
    return (ConfigurationNode)raw;
  }
  if (raw instanceof Map) {
    return new ConfigurationNode((Map<String,Object>)raw);
  }
  return null;
}",0.9080590238365494
151395,"private void deleteOld(){
  Cursor old=null;
  try {
    SQLiteDatabase db=mFinchVideoProvider.getDatabase();
    old=db.query(FinchVideo.Videos.VIDEO,null,""String_Node_Str"" + FinchVideo.Videos.TIMESTAMP + ""String_Node_Str""+ FLUSH_TIME+ ""String_Node_Str"",null,null,null,null);
    int c=old.getCount();
    if (old.getCount() > 0) {
      StringBuffer sb=new StringBuffer();
      boolean next;
      if (old.moveToNext()) {
        do {
          String ID=old.getString(FinchVideo.ID_COLUMN);
          sb.append(BaseColumns._ID);
          sb.append(""String_Node_Str"");
          sb.append(ID);
          mFinchVideoProvider.deleteFile(ID);
          next=old.moveToNext();
          if (next) {
            sb.append(""String_Node_Str"");
          }
        }
 while (next);
      }
      String where=sb.toString();
      db.delete(FinchVideo.Videos.VIDEO,where,null);
      Log.d(Finch.LOG_TAG,""String_Node_Str"" + c);
    }
  }
  finally {
    if (old != null) {
      old.close();
    }
  }
}","private void deleteOld(){
  Cursor old=null;
  try {
    SQLiteDatabase db=mFinchVideoProvider.getDatabase();
    old=db.query(FinchVideo.Videos.VIDEO,null,""String_Node_Str"" + FinchVideo.Videos.TIMESTAMP + ""String_Node_Str""+ FLUSH_TIME+ ""String_Node_Str"",null,null,null,null);
    int c=old.getCount();
    if (old.getCount() > 0) {
      StringBuilder sb=new StringBuilder();
      boolean next;
      if (old.moveToNext()) {
        do {
          String ID=old.getString(FinchVideo.ID_COLUMN);
          sb.append(BaseColumns._ID);
          sb.append(""String_Node_Str"");
          sb.append(ID);
          mFinchVideoProvider.deleteFile(ID);
          next=old.moveToNext();
          if (next) {
            sb.append(""String_Node_Str"");
          }
        }
 while (next);
      }
      String where=sb.toString();
      db.delete(FinchVideo.Videos.VIDEO,where,null);
      Log.d(Finch.LOG_TAG,""String_Node_Str"" + c);
    }
  }
  finally {
    if (old != null) {
      old.close();
    }
  }
}",0.994994994994995
151396,"@Override public boolean onCreate(){
  init();
  return true;
}","@Override public boolean onCreate(){
  mOpenDbHelper=new SimpleVideoDbHelper(getContext());
  return true;
}",0.7251461988304093
151397,"private SimpleVideoDbHelper(Context context,String name,SQLiteDatabase.CursorFactory factory){
  super(context,name,factory,DATABASE_VERSION);
}","SimpleVideoDbHelper(Context context){
  super(context,DATABASE_NAME,null,DATABASE_VERSION);
}",0.6413502109704642
151398,"@Override public Cursor query(Uri uri,String[] projection,String where,String[] whereArgs,String sortOrder){
  String orderBy;
  if (TextUtils.isEmpty(sortOrder)) {
    orderBy=FinchVideo.SimpleVideos.DEFAULT_SORT_ORDER;
  }
 else {
    orderBy=sortOrder;
  }
  int match=sUriMatcher.match(uri);
  Cursor c;
switch (match) {
case VIDEOS:
    c=mDb.query(VIDEO_TABLE_NAME,projection,where,whereArgs,null,null,sortOrder);
  c.setNotificationUri(getContext().getContentResolver(),FinchVideo.SimpleVideos.CONTENT_URI);
break;
case VIDEO_ID:
long videoID=ContentUris.parseId(uri);
c=mDb.query(VIDEO_TABLE_NAME,projection,BaseColumns._ID + ""String_Node_Str"" + videoID+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs,null,null,sortOrder);
c.setNotificationUri(getContext().getContentResolver(),FinchVideo.SimpleVideos.CONTENT_URI);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
return c;
}","@Override public Cursor query(Uri uri,String[] projection,String where,String[] whereArgs,String sortOrder){
  String orderBy;
  if (TextUtils.isEmpty(sortOrder)) {
    orderBy=FinchVideo.SimpleVideos.DEFAULT_SORT_ORDER;
  }
 else {
    orderBy=sortOrder;
  }
  int match=sUriMatcher.match(uri);
  Cursor c;
switch (match) {
case VIDEOS:
    c=getDb().query(VIDEO_TABLE_NAME,projection,where,whereArgs,null,null,orderBy);
  c.setNotificationUri(getContext().getContentResolver(),FinchVideo.SimpleVideos.CONTENT_URI);
break;
case VIDEO_ID:
long videoID=ContentUris.parseId(uri);
c=getDb().query(VIDEO_TABLE_NAME,projection,BaseColumns._ID + ""String_Node_Str"" + videoID+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs,null,null,orderBy);
c.setNotificationUri(getContext().getContentResolver(),FinchVideo.SimpleVideos.CONTENT_URI);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
return c;
}",0.9771547248182764
151399,"@Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){
  SQLiteDatabase db=mOpenDbHelper.getWritableDatabase();
  int affected;
switch (sUriMatcher.match(uri)) {
case VIDEOS:
    affected=db.update(VIDEO_TABLE_NAME,values,where,whereArgs);
  break;
case VIDEO_ID:
String videoId=uri.getPathSegments().get(1);
affected=db.update(VIDEO_TABLE_NAME,values,BaseColumns._ID + ""String_Node_Str"" + videoId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
getContext().getContentResolver().notifyChange(uri,null);
return affected;
}","@Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){
  int affected;
switch (sUriMatcher.match(uri)) {
case VIDEOS:
    affected=getDb().update(VIDEO_TABLE_NAME,values,where,whereArgs);
  break;
case VIDEO_ID:
String videoId=uri.getPathSegments().get(1);
affected=getDb().update(VIDEO_TABLE_NAME,values,BaseColumns._ID + ""String_Node_Str"" + videoId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
getContext().getContentResolver().notifyChange(uri,null);
return affected;
}",0.8344671201814059
151400,"private void verifyValues(ContentValues values){
  if (!values.containsKey(FinchVideo.SimpleVideos.TITLE_NAME)) {
    Resources r=Resources.getSystem();
    values.put(FinchVideo.SimpleVideos.URI_NAME,r.getString(android.R.string.untitled));
  }
  if (!values.containsKey(FinchVideo.SimpleVideos.DESCRIPTION_NAME)) {
    values.put(FinchVideo.SimpleVideos.URI_NAME,""String_Node_Str"");
  }
  if (!values.containsKey(FinchVideo.SimpleVideos.URI_NAME)) {
    values.put(FinchVideo.SimpleVideos.URI_NAME,""String_Node_Str"");
  }
}","private void verifyValues(ContentValues values){
  if (!values.containsKey(FinchVideo.SimpleVideos.TITLE_NAME)) {
    Resources r=Resources.getSystem();
    values.put(FinchVideo.SimpleVideos.TITLE_NAME,r.getString(android.R.string.untitled));
  }
  if (!values.containsKey(FinchVideo.SimpleVideos.DESCRIPTION_NAME)) {
    values.put(FinchVideo.SimpleVideos.DESCRIPTION_NAME,""String_Node_Str"");
  }
  if (!values.containsKey(FinchVideo.SimpleVideos.URI_NAME)) {
    values.put(FinchVideo.SimpleVideos.URI_NAME,""String_Node_Str"");
  }
}",0.979245283018868
151401,"@Override public int delete(Uri uri,String where,String[] whereArgs){
  int match=sUriMatcher.match(uri);
  int affected;
switch (match) {
case VIDEOS:
    affected=mDb.delete(VIDEO_TABLE_NAME,(!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
  break;
case VIDEO_ID:
long videoId=ContentUris.parseId(uri);
affected=mDb.delete(VIDEO_TABLE_NAME,BaseColumns._ID + ""String_Node_Str"" + videoId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
return affected;
}","@Override public int delete(Uri uri,String where,String[] whereArgs){
  int match=sUriMatcher.match(uri);
  int affected;
switch (match) {
case VIDEOS:
    affected=getDb().delete(VIDEO_TABLE_NAME,(!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
  break;
case VIDEO_ID:
long videoId=ContentUris.parseId(uri);
affected=getDb().delete(VIDEO_TABLE_NAME,BaseColumns._ID + ""String_Node_Str"" + videoId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
getContext().getContentResolver().notifyChange(uri,null);
return affected;
}",0.8531976744186046
151402,"@Override public <E>Resource<E> create(E underlyingResource){
  return create(Resource.class,underlyingResource);
}","@Override @SuppressWarnings(""String_Node_Str"") public <E>Resource<E> create(E underlyingResource){
  return create(Resource.class,underlyingResource);
}",0.8614232209737828
151403,"private Imported<ResourceGenerator> getGenerators(){
  if (generators == null)   generators=SimpleContainer.getServices(getClass().getClassLoader(),ResourceGenerator.class);
  return generators;
}","@SuppressWarnings(""String_Node_Str"") private Iterable<ResourceGenerator> getGenerators(){
  if (getAddonRegistry().getVersion() != version) {
    version=getAddonRegistry().getVersion();
    generators.clear();
    for (    ResourceGenerator generator : getAddonRegistry().getServices(ResourceGenerator.class)) {
      generators.add(generator);
    }
  }
  return generators;
}",0.289198606271777
151404,"private UICommand createAnnotatedCommand(Method method){
  Imported<?> service=registry.getServices(method.getDeclaringClass());
  if (service.isUnsatisfied()) {
    logger.log(Level.SEVERE,""String_Node_Str"" + method.getDeclaringClass() + ""String_Node_Str"");
    return null;
  }
  Object instance=service.get();
  Command ann=method.getAnnotation(Command.class);
  List<Predicate<UIContext>> enabledPredicates=new ArrayList<>();
  for (  Class<? extends Predicate<UIContext>> type : ann.enabled()) {
    enabledPredicates.add(registry.getServices(type).get());
  }
  return new AnnotationCommandAdapter(method,instance,factory,enabledPredicates);
}","private UICommand createAnnotatedCommand(Method method){
  Imported<?> service=registry.getServices(method.getDeclaringClass());
  if (service.isUnsatisfied()) {
    logger.log(Level.FINE,""String_Node_Str"" + method.getDeclaringClass() + ""String_Node_Str"");
    return null;
  }
  Object instance=service.get();
  Command ann=method.getAnnotation(Command.class);
  List<Predicate<UIContext>> enabledPredicates=new ArrayList<>();
  for (  Class<? extends Predicate<UIContext>> type : ann.enabled()) {
    enabledPredicates.add(registry.getServices(type).get());
  }
  return new AnnotationCommandAdapter(method,instance,factory,enabledPredicates);
}",0.9938271604938272
151405,"@Override public void associate(final Project project,final Resource<?> parentResource){
  if (canAssociate(project,parentResource)) {
    Project parent=projectFactory.findProject(parentResource);
    MavenFacet parentMavenFacet=parent.getFacet(MavenFacet.class);
    Model parentPom=parentMavenFacet.getModel();
    if (parentPom.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
      String moduleDir=project.getRoot().getFullyQualifiedName().substring(parent.getRoot().getFullyQualifiedName().length());
      if (moduleDir.startsWith(File.separator))       moduleDir=moduleDir.substring(1);
      parentPom.addModule(moduleDir);
      parentMavenFacet.setModel(parentPom);
      MavenFacet projectMavenFacet=project.getFacet(MavenFacet.class);
      Model pom=projectMavenFacet.getModel();
      Parent projectParent=new Parent();
      projectParent.setGroupId(parentPom.getGroupId());
      projectParent.setArtifactId(parentPom.getArtifactId());
      String version=resolveVersion(parentPom);
      projectParent.setVersion(version);
      Path parentPomPath=Paths.get(parentMavenFacet.getModelResource().getFullyQualifiedName());
      Path childPath=Paths.get(project.getRoot().getFullyQualifiedName());
      Path relativePath=childPath.relativize(parentPomPath).normalize();
      projectParent.setRelativePath(relativePath.toString());
      pom.setGroupId(null);
      pom.setVersion(null);
      pom.setParent(projectParent);
      projectMavenFacet.setModel(pom);
    }
  }
}","@Override public void associate(final Project project,final Resource<?> parentResource){
  if (canAssociate(project,parentResource)) {
    Project parent=projectFactory.findProject(parentResource);
    MavenFacet parentMavenFacet=parent.getFacet(MavenFacet.class);
    Model parentPom=parentMavenFacet.getModel();
    if (parentPom.getPackaging().equalsIgnoreCase(""String_Node_Str"")) {
      String moduleDir=project.getRoot().getFullyQualifiedName().substring(parent.getRoot().getFullyQualifiedName().length());
      if (moduleDir.startsWith(File.separator))       moduleDir=moduleDir.substring(1);
      parentPom.addModule(moduleDir);
      parentMavenFacet.setModel(parentPom);
      MavenFacet projectMavenFacet=project.getFacet(MavenFacet.class);
      Model pom=projectMavenFacet.getModel();
      Parent projectParent=new Parent();
      String groupId=parentPom.getGroupId();
      if (groupId == null) {
        groupId=parentPom.getParent().getGroupId();
      }
      projectParent.setGroupId(groupId);
      projectParent.setArtifactId(parentPom.getArtifactId());
      String version=resolveVersion(parentPom);
      projectParent.setVersion(version);
      Path parentPomPath=Paths.get(parentMavenFacet.getModelResource().getFullyQualifiedName());
      Path childPath=Paths.get(project.getRoot().getFullyQualifiedName());
      Path relativePath=childPath.relativize(parentPomPath).normalize();
      projectParent.setRelativePath(relativePath.toString());
      pom.setGroupId(null);
      pom.setVersion(null);
      pom.setParent(projectParent);
      projectMavenFacet.setModel(pom);
    }
  }
}",0.946353999357533
151406,"@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static AddonArchive getDeployment(){
  AddonArchive archive=ShrinkWrap.create(AddonArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}","@Deployment @AddonDependencies public static AddonArchive getDeployment(){
  return ShrinkWrap.create(AddonArchive.class).addBeansXML();
}",0.3823529411764705
151407,"@Test public void testCreateNestedProject() throws Exception {
  DirectoryResource addonDir=factory.create(forge.getRepositories().get(0).getRootDirectory()).reify(DirectoryResource.class);
  DirectoryResource projectDir=addonDir.createTempResource();
  Project parentProject=projectFactory.createProject(projectDir,locator);
  Assert.assertNotNull(parentProject);
  parentProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  MetadataFacet metadata=parentProject.getFacet(MetadataFacet.class);
  metadata.setProjectName(""String_Node_Str"");
  metadata.setProjectGroupName(""String_Node_Str"");
  DirectoryResource subProjectDir=parentProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  projectFactory.createProject(subProjectDir,locator);
  MavenFacet mavenFacet=parentProject.getFacet(MavenFacet.class);
  List<String> modules=mavenFacet.getModel().getModules();
  Assert.assertFalse(modules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",modules.get(0));
}","@Test public void testCreateNestedProject() throws Exception {
  Project parentProject=projectFactory.createTempProject(buildSystem);
  Assert.assertNotNull(parentProject);
  parentProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  MetadataFacet metadata=parentProject.getFacet(MetadataFacet.class);
  metadata.setProjectName(""String_Node_Str"");
  metadata.setProjectGroupName(""String_Node_Str"");
  DirectoryResource subProjectDir=parentProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  projectFactory.createProject(subProjectDir,buildSystem);
  MavenFacet mavenFacet=parentProject.getFacet(MavenFacet.class);
  List<String> modules=mavenFacet.getModel().getModules();
  Assert.assertFalse(modules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",modules.get(0));
}",0.8286637931034483
151408,"@Test public void testCreateNestedProjectWithParentThatHasInheritedVersion() throws Exception {
  DirectoryResource addonDir=factory.create(forge.getRepositories().get(0).getRootDirectory()).reify(DirectoryResource.class);
  DirectoryResource projectDir=addonDir.createTempResource();
  Project parentProject=projectFactory.createProject(projectDir,locator);
  Assert.assertNotNull(parentProject);
  MetadataFacet metadata=parentProject.getFacet(MetadataFacet.class);
  metadata.setProjectName(""String_Node_Str"");
  metadata.setProjectGroupName(""String_Node_Str"");
  parentProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  DirectoryResource intermediateProjectDir=parentProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  Project intermediateProject=projectFactory.createProject(intermediateProjectDir,locator);
  MavenFacet parentMavenFacet=parentProject.getFacet(MavenFacet.class);
  List<String> modules=parentMavenFacet.getModel().getModules();
  Assert.assertFalse(modules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",modules.get(0));
  intermediateProject.getFacet(MetadataFacet.class).setProjectVersion(""String_Node_Str"");
  intermediateProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  DirectoryResource subProjectDir=intermediateProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  Project subProject=projectFactory.createProject(subProjectDir,locator);
  MavenFacet intermediateMavenFacet=intermediateProject.getFacet(MavenFacet.class);
  List<String> intermediateModules=intermediateMavenFacet.getModel().getModules();
  Assert.assertFalse(intermediateModules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",intermediateModules.get(0));
  String version=subProject.getFacet(MetadataFacet.class).getProjectVersion();
  Assert.assertEquals(parentProject.getFacet(MetadataFacet.class).getProjectVersion(),version);
}","@Test public void testCreateNestedProjectWithParentThatHasInheritedVersion() throws Exception {
  Project parentProject=projectFactory.createTempProject(buildSystem);
  Assert.assertNotNull(parentProject);
  MetadataFacet metadata=parentProject.getFacet(MetadataFacet.class);
  metadata.setProjectName(""String_Node_Str"");
  metadata.setProjectGroupName(""String_Node_Str"");
  parentProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  DirectoryResource intermediateProjectDir=parentProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  Project intermediateProject=projectFactory.createProject(intermediateProjectDir,buildSystem);
  MavenFacet parentMavenFacet=parentProject.getFacet(MavenFacet.class);
  Model parentModel=parentMavenFacet.getModel();
  List<String> modules=parentModel.getModules();
  Assert.assertFalse(modules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",modules.get(0));
  intermediateProject.getFacet(MetadataFacet.class).setProjectVersion(""String_Node_Str"");
  intermediateProject.getFacet(PackagingFacet.class).setPackagingType(""String_Node_Str"");
  DirectoryResource subProjectDir=intermediateProject.getRoot().reify(DirectoryResource.class).getChildDirectory(""String_Node_Str"");
  Project subProject=projectFactory.createProject(subProjectDir,buildSystem);
  MavenFacet intermediateMavenFacet=intermediateProject.getFacet(MavenFacet.class);
  Model intermediateModel=intermediateMavenFacet.getModel();
  Assert.assertEquals(parentModel.getGroupId(),intermediateModel.getParent().getGroupId());
  List<String> intermediateModules=intermediateModel.getModules();
  Assert.assertFalse(intermediateModules.isEmpty());
  Assert.assertEquals(""String_Node_Str"",intermediateModules.get(0));
  String version=subProject.getFacet(MetadataFacet.class).getProjectVersion();
  Assert.assertEquals(parentProject.getFacet(MetadataFacet.class).getProjectVersion(),version);
  Model subModel=subProject.getFacet(MavenFacet.class).getModel();
  Assert.assertEquals(parentModel.getGroupId(),subModel.getParent().getGroupId());
}",0.1658464566929134
151409,"@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  return ShrinkWrap.create(ForgeArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
}","@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static AddonArchive getDeployment(){
  return ShrinkWrap.create(AddonArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
}",0.9846390168970814
151410,"@Deployment @Dependencies({@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addClass(ManagedObject.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}","@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static AddonArchive getDeployment(){
  AddonArchive archive=ShrinkWrap.create(AddonArchive.class).addClass(ManagedObject.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}",0.895
151411,"@Deployment @Dependencies({@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML().addClass(ValidationCommand.class).addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}","@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static AddonArchive getDeployment(){
  AddonArchive archive=ShrinkWrap.create(AddonArchive.class).addBeansXML().addClass(ValidationCommand.class).addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}",0.9004065040650406
151412,"@Deployment @Dependencies({@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}","@Deployment @AddonDeployments({@AddonDeployment(name=""String_Node_Str""),@AddonDeployment(name=""String_Node_Str"")}) public static AddonArchive getDeployment(){
  AddonArchive archive=ShrinkWrap.create(AddonArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
  return archive;
}",0.8864864864864865
151413,"@Override public boolean hasArchetypeCatalogFactories(){
  return factories.size() > 0 && !services.isUnsatisfied();
}","@Override public boolean hasArchetypeCatalogFactories(){
  return factories.size() > 0 || !services.isUnsatisfied();
}",0.9830508474576272
151414,"/** 
 * Registers the   {@link ArchetypeCatalogFactory} objects from the user{@link Configuration}
 */
@PostConstruct void initializeDefaultFactories(){
  Iterator<?> keys=archetypeConfiguration.getKeys();
  while (keys.hasNext()) {
    String name=keys.next().toString();
    if (!name.isEmpty()) {
      String url=archetypeConfiguration.getString(name);
      try {
        addArchetypeCatalogFactory(name,new URL(url));
      }
 catch (      MalformedURLException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + name,e);
      }
    }
  }
}","/** 
 * Registers the   {@link ArchetypeCatalogFactory} objects from the user {@link Configuration}
 */
@PostConstruct void initializeDefaultFactories(){
  Iterator<?> keys=archetypeConfiguration.getKeys();
  while (keys.hasNext()) {
    String name=keys.next().toString();
    if (!name.isEmpty()) {
      String url=archetypeConfiguration.getString(name);
      try {
        addArchetypeCatalogFactory(name,new URL(url));
      }
 catch (      MalformedURLException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + name,e);
      }
    }
  }
}",0.9990917347865576
151415,"@Deployment @Dependencies({@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  return ShrinkWrap.create(ForgeArchive.class).addClass(ProjectHelper.class).addBeansXML.addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
}","@Deployment @Dependencies({@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str""),@AddonDependency(name=""String_Node_Str"")}) public static ForgeArchive getDeployment(){
  return ShrinkWrap.create(ForgeArchive.class).addClass(ProjectHelper.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""),AddonDependencyEntry.create(""String_Node_Str""));
}",0.9984251968503935
151416,"@Override public Result execute(UIExecutionContext context) throws Exception {
  List<Object> args=new ArrayList<>();
  int idx=0;
  for (  Class<?> type : method.getParameterTypes()) {
    Object value=null;
    if (ReservedParameters.isReservedParameter(type)) {
      value=ReservedParameters.getReservedParameter(context,type);
    }
 else {
      Option option=null;
      for (      Annotation annotation : method.getParameterAnnotations()[idx]) {
        if (annotation instanceof Option) {
          option=(Option)annotation;
        }
      }
      if (option != null) {
        value=InputComponents.getValueFor(inputs.get(idx));
        idx++;
      }
    }
    args.add(value);
  }
  Object result=null;
  try {
    result=method.invoke(instance,args.toArray(new Object[args.size()]));
  }
 catch (  InvocationTargetException ie) {
    throw (Exception)ie.getCause();
  }
  if (result == null) {
    return Results.success();
  }
 else   if (result instanceof Result) {
    return (Result)result;
  }
 else {
    return Results.success(result.toString());
  }
}","@Override public Result execute(UIExecutionContext context) throws Exception {
  List<Object> args=new ArrayList<>();
  int idx=0;
  for (  Class<?> type : method.getParameterTypes()) {
    Object value=null;
    if (ReservedParameters.isReservedParameter(type)) {
      value=ReservedParameters.getReservedParameter(context,type);
    }
 else {
      Option option=null;
      for (      Annotation annotation : method.getParameterAnnotations()[args.size()]) {
        if (annotation instanceof Option) {
          option=(Option)annotation;
        }
      }
      if (option != null) {
        value=InputComponents.getValueFor(inputs.get(idx));
        idx++;
      }
    }
    args.add(value);
  }
  Object result=null;
  try {
    result=method.invoke(instance,args.toArray(new Object[args.size()]));
  }
 catch (  InvocationTargetException ie) {
    throw (Exception)ie.getCause();
  }
  if (result == null) {
    return Results.success();
  }
 else   if (result instanceof Result) {
    return (Result)result;
  }
 else {
    return Results.success(result.toString());
  }
}",0.9935064935064936
151417,"@SuppressWarnings(""String_Node_Str"") public void setupSelectComponent(SelectComponent selectComponent){
  Class<?> valueType=selectComponent.getValueType();
  Iterable<?> choices=null;
  if (valueType.isEnum()) {
    Class<? extends Enum> enumClass=valueType.asSubclass(Enum.class);
    choices=EnumSet.allOf(enumClass);
  }
 else   if (Boolean.class == valueType) {
    choices=Arrays.asList(Boolean.TRUE,Boolean.FALSE);
  }
 else {
    choices=addonRegistry.getServices(valueType);
  }
  selectComponent.setValueChoices(choices);
}","@SuppressWarnings(""String_Node_Str"") public void setupSelectComponent(SelectComponent selectComponent){
  Class<?> valueType=selectComponent.getValueType();
  Iterable<?> choices=null;
  if (valueType.isEnum()) {
    Class<? extends Enum> enumClass=valueType.asSubclass(Enum.class);
    choices=EnumSet.allOf(enumClass);
  }
 else   if (Boolean.class == valueType || boolean.class == valueType) {
    choices=Arrays.asList(Boolean.TRUE,Boolean.FALSE);
  }
 else {
    choices=addonRegistry.getServices(valueType);
  }
  selectComponent.setValueChoices(choices);
}",0.9726277372262774
151418,"/** 
 * Resolve the results.
 * @return A list of resources that match the path. Empty if there are no matches.
 */
public List<Resource<?>> resolve(){
  Resource<?> r=res;
  String tk;
  char slashChar=File.separatorChar;
  String slashString=File.separator;
  if (""String_Node_Str"".equals(path)) {
    return singleResult(r);
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    File homeDir=OperatingSystemUtils.getUserHomeDir();
    if (path.length() == 1) {
      return singleResult(factory.create(DirectoryResource.class,homeDir));
    }
 else {
      cursor++;
      r=factory.create(DirectoryResource.class,homeDir);
    }
  }
 else   if (isWindows && path.matches(""String_Node_Str"")) {
    int idx=path.lastIndexOf(slashChar) + 1;
    r=factory.create(DirectoryResource.class,new File(path.substring(0,idx)).getAbsoluteFile());
    cursor=idx;
  }
 else   if (path.matches(""String_Node_Str"")) {
    int idx=path.indexOf(""String_Node_Str"");
    if (idx == -1) {
      idx=length;
    }
    try {
      r=factory.create(URLResource.class,new URL(path.substring(0,idx)));
    }
 catch (    MalformedURLException e) {
      throw new RuntimeException(e);
    }
    cursor=idx + 1;
  }
  while (cursor < length) {
    SW: switch (path.charAt(cursor++)) {
case '\\':
case '/':
      if (cursor - 1 == 0) {
        r=factory.create(new File(slashString).getAbsoluteFile());
      }
    continue;
case '.':
switch (read()) {
case '.':
    cursor++;
  Resource<?> parent=r.getParent();
if (parent != null) {
  r=parent;
}
break SW;
default :
if (cursor < length && path.charAt(cursor) == slashChar) {
cursor++;
break SW;
}
}
default :
boolean first=--cursor == 0;
tk=capture();
if (tk.matches(""String_Node_Str"")) {
boolean startDot=tk.startsWith(""String_Node_Str"");
String regex=pathspecToRegEx(tk.startsWith(slashString) ? tk.substring(1) : tk);
Pattern p;
try {
p=Pattern.compile(regex);
}
 catch (PatternSyntaxException pe) {
p=Pattern.compile(Pattern.quote(regex));
}
List<Resource<?>> res=new LinkedList<>();
for (Resource<?> child : r.listResources()) {
if (p.matcher(child.getName()).matches()) {
if (child.getName().startsWith(""String_Node_Str"")) {
if (startDot) {
res.add(child);
}
}
 else {
res.add(child);
}
}
}
if (cursor != length) {
for (Resource<?> child : res) {
results.addAll(new ResourcePathResolver(factory,child,path,cursor).resolve());
}
}
 else {
results.addAll(res);
}
return results;
}
if (tk.startsWith(slashString)) {
if (first) {
r=factory.create(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return singleResult(r);
}","/** 
 * Resolve the results.
 * @return A list of resources that match the path. Empty if there are no matches.
 */
public List<Resource<?>> resolve(){
  Resource<?> r=res;
  String tk;
  char slashChar=File.separatorChar;
  String slashString=File.separator;
  if (""String_Node_Str"".equals(path)) {
    return singleResult(r);
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    File homeDir=OperatingSystemUtils.getUserHomeDir();
    if (path.length() == 1) {
      return singleResult(factory.create(DirectoryResource.class,homeDir));
    }
 else {
      cursor++;
      r=factory.create(DirectoryResource.class,homeDir);
    }
  }
 else   if (isWindows && path.matches(""String_Node_Str"")) {
    int idx=path.lastIndexOf(slashChar) + 1;
    r=factory.create(DirectoryResource.class,new File(path.substring(0,idx)).getAbsoluteFile());
    cursor=idx;
  }
 else   if (path.matches(""String_Node_Str"")) {
    int idx=path.indexOf(""String_Node_Str"");
    if (idx == -1) {
      idx=length;
    }
    try {
      r=factory.create(URLResource.class,new URL(path.substring(0,idx)));
    }
 catch (    MalformedURLException e) {
      throw new RuntimeException(e);
    }
    cursor=idx + 1;
  }
  while (cursor < length) {
    SW: switch (path.charAt(cursor++)) {
case '\\':
case '/':
      if (cursor - 1 == 0) {
        r=factory.create(new File(slashString).getAbsoluteFile());
      }
    continue;
case '.':
switch (read()) {
case '.':
    cursor++;
  Resource<?> parent=r.getParent();
if (parent != null) {
  r=parent;
}
break SW;
default :
if (cursor < length && path.charAt(cursor) == slashChar) {
cursor++;
break SW;
}
}
default :
boolean first=--cursor == 0;
tk=capture();
if (tk.matches(""String_Node_Str"")) {
boolean startDot=tk.startsWith(""String_Node_Str"");
String regex=pathspecToRegEx(tk.startsWith(slashString) ? tk.substring(1) : tk);
Pattern p;
try {
p=Pattern.compile(regex);
}
 catch (PatternSyntaxException pe) {
p=Pattern.compile(Pattern.quote(regex));
}
List<Resource<?>> res=new LinkedList<>();
for (Resource<?> child : r.listResources()) {
if (p.matcher(child.getName()).matches()) {
if (child.getName().startsWith(""String_Node_Str"")) {
if (startDot) {
res.add(child);
}
}
 else {
res.add(child);
}
}
}
if (cursor != length) {
for (Resource<?> child : res) {
results.addAll(new ResourcePathResolver(factory,child,path,cursor).resolve());
}
}
 else {
results.addAll(res);
}
return results;
}
if (tk.startsWith(slashString)) {
if (first) {
r=factory.create(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + tk);
}
r=child;
break;
}
}
return singleResult(r);
}",0.998706338939198
151419,"@SuppressWarnings(""String_Node_Str"") @Override public void handleInterrupt(Console console,Action action){
  if (action == Action.INTERRUPT) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else   if (action == Action.IGNOREEOF) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else {
    try {
      CommandContainer exitCommand=registry.getCommand(""String_Node_Str"",""String_Node_Str"");
      console.getShell().out().println();
      exitCommand.getCommand().execute(new AeshCommandInvocation(ShellImpl.this.console,ControlOperator.NONE,null));
    }
 catch (    InterruptedException|CommandNotFoundException|IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleInterrupt(Console console,Action action){
  if (action == Action.INTERRUPT) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else   if (action == Action.IGNOREEOF) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else {
    try {
      CommandContainer exitCommand=registry.getCommand(""String_Node_Str"",""String_Node_Str"");
      console.getShell().out().println();
      exitCommand.getCommand().execute(new AeshCommandInvocation((AeshConsoleImpl)ShellImpl.this.console,ControlOperator.NONE,1,null));
    }
 catch (    InterruptedException|CommandNotFoundException|IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}",0.9809699201964396
151420,"@Override public String toString(){
  try {
    return getJavaType().getQualifiedName();
  }
 catch (  FileNotFoundException e) {
    throw new ResourceException(e);
  }
catch (  Exception e) {
    return getName();
  }
}","@Override public String toString(){
  try {
    return getJavaType().getQualifiedName();
  }
 catch (  FileNotFoundException e) {
    throw new ResourceException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    return getName();
  }
}",0.9608695652173912
151421,"@Override public JsonStructure getJsonStructure(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.read();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(e);
  }
}","@Override public JsonStructure getJsonStructure(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.read();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(""String_Node_Str"",e);
  }
}",0.9634146341463414
151422,"@Override public JsonObject getJsonObject(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.readObject();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(e);
  }
}","@Override public JsonObject getJsonObject(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.readObject();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(""String_Node_Str"",e);
  }
}",0.9634146341463414
151423,"@Override public JsonArray getJsonArray(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.readArray();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(e);
  }
}","@Override public JsonArray getJsonArray(){
  try {
    try (JsonReader reader=Json.createReader(getResourceInputStream())){
      return reader.readArray();
    }
   }
 catch (  Exception e) {
    throw new ResourceException(""String_Node_Str"",e);
  }
}",0.9629629629629628
151424,"@Override public JsonResource setContents(JsonStructure structure){
  if (structure == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    if (!exists()) {
      getParent().mkdirs();
      if (!createNewFile()) {
        throw new IOException(""String_Node_Str"" + getUnderlyingResourceObject());
      }
    }
    try (OutputStream out=getFileOperations().createOutputStream(getUnderlyingResourceObject());JsonWriter writer=Json.createWriter(out)){
      writer.write(structure);
    }
   }
 catch (  IOException e) {
    throw new ResourceException(e);
  }
  return this;
}","@Override public JsonResource setContents(JsonStructure structure){
  if (structure == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    if (!exists()) {
      getParent().mkdirs();
      if (!createNewFile()) {
        throw new IOException(""String_Node_Str"" + getUnderlyingResourceObject());
      }
    }
    try (OutputStream out=getFileOperations().createOutputStream(getUnderlyingResourceObject());JsonWriter writer=Json.createWriter(out)){
      writer.write(structure);
    }
   }
 catch (  IOException e) {
    throw new ResourceException(""String_Node_Str"",e);
  }
  return this;
}",0.9851485148514852
151425,"/** 
 * Returns whether the given method is a 'getter' method.
 * @param method a parameterless method that returns a non-void
 * @return the property name
 */
protected String isGetter(final Method<?,?> method){
  String methodName=method.getName();
  String propertyName;
  if (methodName.startsWith(ClassUtils.JAVABEAN_GET_PREFIX)) {
    propertyName=methodName.substring(ClassUtils.JAVABEAN_GET_PREFIX.length());
  }
 else   if (methodName.startsWith(ClassUtils.JAVABEAN_IS_PREFIX) && boolean.class.equals(method.getReturnType().getQualifiedName())) {
    propertyName=methodName.substring(ClassUtils.JAVABEAN_IS_PREFIX.length());
  }
 else {
    return null;
  }
  return StringUtils.decapitalize(propertyName);
}","/** 
 * Returns whether the given method is a 'getter' method.
 * @param method a parameterless method that returns a non-void
 * @return the property name
 */
protected String isGetter(final Method<?,?> method){
  String methodName=method.getName();
  String propertyName;
  if (methodName.startsWith(ClassUtils.JAVABEAN_GET_PREFIX)) {
    propertyName=methodName.substring(ClassUtils.JAVABEAN_GET_PREFIX.length());
  }
 else   if (methodName.startsWith(ClassUtils.JAVABEAN_IS_PREFIX) && method.getReturnType() != null && boolean.class.equals(method.getReturnType().getQualifiedName())) {
    propertyName=methodName.substring(ClassUtils.JAVABEAN_IS_PREFIX.length());
  }
 else {
    return null;
  }
  return StringUtils.decapitalize(propertyName);
}",0.9768707482993196
151426,"/** 
 * Lookup getter-based properties. <p> This method will be called after <code>lookupFields</code> but before <code>lookupSetters</code>.
 */
protected void lookupGetters(final Map<String,Property> properties,final MethodHolder<?> clazz){
  for (  Method<?,?> method : clazz.getMethods()) {
    if (method.isStatic()) {
      continue;
    }
    if (!method.isPublic()) {
      continue;
    }
    if (!method.getParameters().isEmpty()) {
      continue;
    }
    String returnType=method.getReturnType().getQualifiedName();
    if (returnType == null) {
      continue;
    }
    String propertyName=isGetter(method);
    if (propertyName == null) {
      continue;
    }
    Field<?> privateField=getPrivateField((FieldHolder<?>)clazz,propertyName);
    if (privateField != null && this.privateFieldConvention == null) {
      propertyName=privateField.getName();
    }
    properties.put(propertyName,new ForgeProperty(propertyName,returnType,method,null,privateField,this.project));
  }
}","/** 
 * Lookup getter-based properties. <p> This method will be called after <code>lookupFields</code> but before <code>lookupSetters</code>.
 */
protected void lookupGetters(final Map<String,Property> properties,final MethodHolder<?> clazz){
  for (  Method<?,?> method : clazz.getMethods()) {
    if (method.isStatic()) {
      continue;
    }
    if (!method.isPublic()) {
      continue;
    }
    if (!method.getParameters().isEmpty()) {
      continue;
    }
    String returnType=method.getReturnType() != null ? method.getReturnType().getQualifiedName() : null;
    if (returnType == null) {
      continue;
    }
    String propertyName=isGetter(method);
    if (propertyName == null) {
      continue;
    }
    Field<?> privateField=getPrivateField((FieldHolder<?>)clazz,propertyName);
    if (privateField != null && this.privateFieldConvention == null) {
      propertyName=privateField.getName();
    }
    properties.put(propertyName,new ForgeProperty(propertyName,returnType,method,null,privateField,this.project));
  }
}",0.9803343166175024
151427,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  JavaCompilerFacet javaCompilerFacet=getJavaCompilerFacet(builder.getUIContext());
  sourceVersion.setValue(javaCompilerFacet.getSourceCompilerVersion());
  targetVersion.setValue(javaCompilerFacet.getTargetCompilerVersion());
  builder.add(sourceVersion).add(targetVersion);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  JavaCompilerFacet javaCompilerFacet=getJavaCompilerFacet(builder.getUIContext());
  sourceVersion.setDefaultValue(javaCompilerFacet.getSourceCompilerVersion());
  targetVersion.setDefaultValue(javaCompilerFacet.getTargetCompilerVersion());
  builder.add(sourceVersion).add(targetVersion);
}",0.9804469273743016
151428,"@Override public void validate(UIValidationContext validator){
  if (sourceVersion.getValue().ordinal() > targetVersion.getValue().ordinal()) {
    validator.addValidationError(sourceVersion,""String_Node_Str"" + sourceVersion.toString() + ""String_Node_Str""+ targetVersion.toString()+ ""String_Node_Str"");
  }
}","@Override public void validate(UIValidationContext validator){
  if (sourceVersion.hasValue() && targetVersion.hasValue()) {
    if (sourceVersion.getValue().ordinal() > targetVersion.getValue().ordinal()) {
      validator.addValidationError(sourceVersion,""String_Node_Str"" + sourceVersion.getValue() + ""String_Node_Str""+ targetVersion.getValue()+ ""String_Node_Str"");
    }
  }
}",0.8488372093023255
151429,"public static String getIdClause(JavaClass<?> entity,String entityTable){
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(Id.class)) {
      String memberName=member.getName();
      String id=null;
      if (member instanceof Method) {
        id=Strings.uncapitalize(memberName.substring(2));
      }
      if (member instanceof Field) {
        id=memberName;
      }
      char entityVariable=getJpqlEntityVariable(entityTable);
      return ""String_Node_Str"" + entityVariable + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  return null;
}","public static String getIdClause(JavaClass<?> entity,String entityTable){
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(Id.class)) {
      String memberName=member.getName();
      String id=null;
      if (member instanceof Method) {
        id=Strings.uncapitalize(memberName.substring(3));
      }
      if (member instanceof Field) {
        id=memberName;
      }
      char entityVariable=getJpqlEntityVariable(entityTable);
      return ""String_Node_Str"" + entityVariable + ""String_Node_Str""+ id+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  return null;
}",0.9983388704318936
151430,"public static String getSelectExpression(JavaClass<?> entity,String entityTable){
  char entityVariable=getJpqlEntityVariable(entityTable);
  StringBuilder expressionBuilder=new StringBuilder();
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityVariable);
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityTable);
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityVariable);
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(OneToOne.class) || member.hasAnnotation(OneToMany.class) || member.hasAnnotation(ManyToMany.class)|| member.hasAnnotation(ManyToOne.class)) {
      String name=member.getName();
      String associationField=null;
      if (member instanceof Method) {
        if (name.startsWith(""String_Node_Str"")) {
          associationField=Strings.uncapitalize(name.substring(2));
        }
      }
 else       if (member instanceof Field) {
        associationField=name;
      }
      if (associationField == null) {
        throw new RuntimeException(""String_Node_Str"" + member.getName() + ""String_Node_Str""+ entity.getName());
      }
 else {
        expressionBuilder.append(""String_Node_Str"");
        expressionBuilder.append(entityVariable);
        expressionBuilder.append('.');
        expressionBuilder.append(associationField);
      }
    }
  }
  return expressionBuilder.toString();
}","public static String getSelectExpression(JavaClass<?> entity,String entityTable){
  char entityVariable=getJpqlEntityVariable(entityTable);
  StringBuilder expressionBuilder=new StringBuilder();
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityVariable);
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityTable);
  expressionBuilder.append(""String_Node_Str"");
  expressionBuilder.append(entityVariable);
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(OneToOne.class) || member.hasAnnotation(OneToMany.class) || member.hasAnnotation(ManyToMany.class)|| member.hasAnnotation(ManyToOne.class)) {
      String name=member.getName();
      String associationField=null;
      if (member instanceof Method) {
        if (name.startsWith(""String_Node_Str"")) {
          associationField=Strings.uncapitalize(name.substring(3));
        }
      }
 else       if (member instanceof Field) {
        associationField=name;
      }
      if (associationField == null) {
        throw new RuntimeException(""String_Node_Str"" + member.getName() + ""String_Node_Str""+ entity.getName());
      }
 else {
        expressionBuilder.append(""String_Node_Str"");
        expressionBuilder.append(entityVariable);
        expressionBuilder.append('.');
        expressionBuilder.append(associationField);
      }
    }
  }
  return expressionBuilder.toString();
}",0.9993021632937892
151431,"public static String resolveIdGetterName(JavaClass<?> entity){
  String result=null;
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(Id.class)) {
      String name=member.getName();
      String type=null;
      if (member instanceof Method) {
        type=((Method<?,?>)member).getReturnType().getName();
        if (name.startsWith(""String_Node_Str"")) {
          name=name.substring(2);
        }
      }
 else       if (member instanceof Field) {
        type=((Field<?>)member).getType().getName();
      }
      if (type != null) {
        for (        Method<?,?> method : entity.getMethods()) {
          if (method.getParameters().size() == 0 && type.equals(method.getReturnType())) {
            if (method.getName().toLowerCase().contains(name.toLowerCase())) {
              result=method.getName() + ""String_Node_Str"";
              break;
            }
          }
        }
      }
      if (result != null) {
        break;
      }
 else       if (type != null && member.isPublic()) {
        String memberName=member.getName();
        if (member instanceof Method && memberName.startsWith(""String_Node_Str"")) {
          memberName=memberName.substring(3);
          memberName=Strings.uncapitalize(memberName);
        }
        result=memberName;
      }
    }
  }
  if (result == null) {
    throw new RuntimeException(""String_Node_Str"" + entity.getQualifiedName() + ""String_Node_Str"");
  }
  return result;
}","public static String resolveIdGetterName(JavaClass<?> entity){
  String result=null;
  for (  Member<?> member : entity.getMembers()) {
    if (member.hasAnnotation(Id.class)) {
      String name=member.getName();
      String type=null;
      if (member instanceof Method) {
        type=((Method<?,?>)member).getReturnType().getQualifiedName();
        if (name.startsWith(""String_Node_Str"")) {
          name=name.substring(2);
        }
      }
 else       if (member instanceof Field) {
        type=((Field<?>)member).getType().getQualifiedName();
      }
      if (type != null) {
        for (        Method<?,?> method : entity.getMethods()) {
          if (method.getParameters().size() == 0 && type.equals(method.getReturnType().getQualifiedName())) {
            if (method.getName().toLowerCase().contains(name.toLowerCase())) {
              result=method.getName() + ""String_Node_Str"";
              break;
            }
          }
        }
      }
      if (result != null) {
        break;
      }
 else       if (type != null && member.isPublic()) {
        String memberName=member.getName();
        if (member instanceof Method && memberName.startsWith(""String_Node_Str"")) {
          memberName=memberName.substring(3);
          memberName=Strings.uncapitalize(memberName);
        }
        result=memberName;
      }
    }
  }
  if (result == null) {
    throw new RuntimeException(""String_Node_Str"" + entity.getQualifiedName() + ""String_Node_Str"");
  }
  return result;
}",0.9875042215467748
151432,"@Test public void testRegularExpressionField() throws Exception {
  Project project=projectHelper.createWebProject();
  projectHelper.installJPA_2_0(project);
  projectHelper.installValidation(project);
  JavaResource jpaEntity=projectHelper.createJPAEntity(project,""String_Node_Str"");
  WizardCommandController wizard=testHarness.createWizardController(AddConstraintWizard.class,project.getRoot());
  wizard.initialize();
{
    wizard.setValueFor(""String_Node_Str"",jpaEntity);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    wizard.setValueFor(""String_Node_Str"",CoreConstraints.PATTERN);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    Assert.assertFalse(wizard.isValid());
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(wizard.isValid());
  }
  wizard.execute();
  JavaClass javaClass=(JavaClass)jpaEntity.getJavaSource();
  Field<JavaClass> field=javaClass.getField(""String_Node_Str"");
  Annotation<JavaClass> pattern=field.getAnnotation(Pattern.class);
  Assert.assertNotNull(pattern);
  Assert.assertEquals(""String_Node_Str"",pattern.getStringValue(""String_Node_Str""));
}","@Ignore(""String_Node_Str"") @Test public void testRegularExpressionField() throws Exception {
  Project project=projectHelper.createWebProject();
  projectHelper.installJPA_2_0(project);
  projectHelper.installValidation(project);
  JavaResource jpaEntity=projectHelper.createJPAEntity(project,""String_Node_Str"");
  WizardCommandController wizard=testHarness.createWizardController(AddConstraintWizard.class,project.getRoot());
  wizard.initialize();
{
    wizard.setValueFor(""String_Node_Str"",jpaEntity);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    wizard.setValueFor(""String_Node_Str"",CoreConstraints.PATTERN);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    Assert.assertFalse(wizard.isValid());
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(wizard.isValid());
  }
  wizard.execute();
  JavaClass javaClass=(JavaClass)jpaEntity.getJavaSource();
  Field<JavaClass> field=javaClass.getField(""String_Node_Str"");
  Annotation<JavaClass> pattern=field.getAnnotation(Pattern.class);
  Assert.assertNotNull(pattern);
  Assert.assertEquals(""String_Node_Str"",pattern.getStringValue(""String_Node_Str""));
}",0.9893826189539914
151433,"@Override public void close(final Git repo){
  repo.getRepository().close();
}","@Override public void close(final Git repo){
  if (repo != null) {
    repo.getRepository().close();
  }
}",0.8478260869565217
151434,"@Override public Result execute(UIExecutionContext context) throws Exception {
  DirectoryResource cloneFolder=targetDirectory.getValue();
  if (!cloneFolder.exists()) {
    cloneFolder.mkdirs();
  }
  Git clone=gitUtils.clone(cloneFolder,uri.getValue());
  gitUtils.close(clone);
  context.getUIContext().setSelection(cloneFolder);
  return Results.success();
}","@Override public Result execute(UIExecutionContext context) throws Exception {
  DirectoryResource cloneFolder=targetDirectory.getValue();
  if (!cloneFolder.exists()) {
    cloneFolder.mkdirs();
  }
  Git clone=null;
  try {
    clone=gitUtils.clone(cloneFolder,uri.getValue());
  }
  finally {
    gitUtils.close(clone);
  }
  context.getUIContext().setSelection(cloneFolder);
  return Results.success();
}",0.9402597402597402
151435,"@Override public void validate(UIValidationContext validator){
  DirectoryResource folder=targetDirectory.getValue();
  if (folder.exists() && (!folder.isDirectory() || !folder.listResources().isEmpty())) {
    validator.addValidationError(targetDirectory,""String_Node_Str"");
  }
}","@Override public void validate(UIValidationContext validator){
  DirectoryResource folder=targetDirectory.getValue();
  if (folder == null || (folder.exists() && (!folder.isDirectory() || !folder.listResources().isEmpty()))) {
    validator.addValidationError(targetDirectory,""String_Node_Str"");
  }
}",0.9656357388316152
151436,"@Ignore(""String_Node_Str"") @Test public void testRegularExpressionField() throws Exception {
  Project project=projectHelper.createWebProject();
  projectHelper.installJPA_2_0(project);
  projectHelper.installValidation(project);
  JavaResource jpaEntity=projectHelper.createJPAEntity(project,""String_Node_Str"");
  WizardCommandController wizard=testHarness.createWizardController(AddConstraintWizard.class,project.getRoot());
  wizard.initialize();
{
    wizard.setValueFor(""String_Node_Str"",jpaEntity);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    wizard.setValueFor(""String_Node_Str"",CoreConstraints.PATTERN);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    Assert.assertFalse(wizard.isValid());
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(wizard.isValid());
  }
  wizard.execute();
  JavaClass javaClass=(JavaClass)jpaEntity.getJavaSource();
  Field<JavaClass> field=javaClass.getField(""String_Node_Str"");
  Annotation<JavaClass> pattern=field.getAnnotation(Pattern.class);
  Assert.assertNotNull(pattern);
  Assert.assertEquals(""String_Node_Str"",pattern.getStringValue(""String_Node_Str""));
}","@Test public void testRegularExpressionField() throws Exception {
  Project project=projectHelper.createWebProject();
  projectHelper.installJPA_2_0(project);
  projectHelper.installValidation(project);
  JavaResource jpaEntity=projectHelper.createJPAEntity(project,""String_Node_Str"");
  WizardCommandController wizard=testHarness.createWizardController(AddConstraintWizard.class,project.getRoot());
  wizard.initialize();
{
    wizard.setValueFor(""String_Node_Str"",jpaEntity);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    wizard.setValueFor(""String_Node_Str"",CoreConstraints.PATTERN);
    Assert.assertTrue(wizard.canMoveToNextStep());
  }
  wizard.next().initialize();
{
    Assert.assertFalse(wizard.isValid());
    wizard.setValueFor(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(wizard.isValid());
  }
  wizard.execute();
  JavaClass javaClass=(JavaClass)jpaEntity.getJavaSource();
  Field<JavaClass> field=javaClass.getField(""String_Node_Str"");
  Annotation<JavaClass> pattern=field.getAnnotation(Pattern.class);
  Assert.assertNotNull(pattern);
  Assert.assertEquals(""String_Node_Str"",pattern.getStringValue(""String_Node_Str""));
}",0.9893826189539914
151437,"ForgeInterruptHook(ForgeCommandRegistry registry,AeshConsole aeshConsole){
  this.registry=registry;
  this.aeshConsole=aeshConsole;
}","ForgeInterruptHook(ForgeCommandRegistry registry){
  this.registry=registry;
}",0.7358490566037735
151438,"public ShellImpl(FileResource<?> initialResource,Settings settings,CommandManager commandManager,AddonRegistry addonRegistry,CommandControllerFactory commandFactory){
  this.currentResource=initialResource;
  this.addonRegistry=addonRegistry;
  File forgeHome=OperatingSystemUtils.getUserForgeDir();
  File history=new File(forgeHome,""String_Node_Str"");
  File alias=new File(forgeHome,""String_Node_Str"");
  File export=new File(forgeHome,""String_Node_Str"");
  final ForgeCommandRegistry registry=new ForgeCommandRegistry(this,commandManager,commandFactory,commandManager.getConverterFactory());
  Settings newSettings=new SettingsBuilder(settings).historyFile(history).aliasFile(alias).exportFile(export).interruptHook(new ForgeInterruptHook(registry,this.console)).create();
  this.console=new AeshConsoleBuilder().prompt(createPrompt()).settings(newSettings).commandRegistry(registry).commandNotFoundHandler(new ForgeCommandNotFoundHandler(registry)).create();
  this.output=new ShellUIOutputImpl(console);
  this.console.start();
}","public ShellImpl(FileResource<?> initialResource,Settings settings,CommandManager commandManager,AddonRegistry addonRegistry,CommandControllerFactory commandFactory){
  this.currentResource=initialResource;
  this.addonRegistry=addonRegistry;
  File forgeHome=OperatingSystemUtils.getUserForgeDir();
  File history=new File(forgeHome,""String_Node_Str"");
  File alias=new File(forgeHome,""String_Node_Str"");
  File export=new File(forgeHome,""String_Node_Str"");
  final ForgeCommandRegistry registry=new ForgeCommandRegistry(this,commandManager,commandFactory,commandManager.getConverterFactory());
  Settings newSettings=new SettingsBuilder(settings).historyFile(history).aliasFile(alias).exportFile(export).interruptHook(new ForgeInterruptHook(registry)).create();
  this.console=new AeshConsoleBuilder().prompt(createPrompt()).settings(newSettings).commandRegistry(registry).commandNotFoundHandler(new ForgeCommandNotFoundHandler(registry)).create();
  this.output=new ShellUIOutputImpl(console);
  this.console.start();
}",0.9936801166747692
151439,"@Override public void handleInterrupt(Console console,Action action){
  if (action == Action.INTERRUPT) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else   if (action == Action.IGNOREEOF) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else {
    try {
      CommandContainer exitCommand=registry.getCommand(""String_Node_Str"",""String_Node_Str"");
      console.getShell().out().println();
      exitCommand.getCommand().execute(new AeshCommandInvocation(aeshConsole,ControlOperator.NONE,null));
    }
 catch (    CommandNotFoundException|IOException ignored) {
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleInterrupt(Console console,Action action){
  if (action == Action.INTERRUPT) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else   if (action == Action.IGNOREEOF) {
    console.getShell().out().println(""String_Node_Str"");
    console.clearBufferAndDisplayPrompt();
  }
 else {
    try {
      CommandContainer exitCommand=registry.getCommand(""String_Node_Str"",""String_Node_Str"");
      console.getShell().out().println();
      exitCommand.getCommand().execute(new AeshCommandInvocation(ShellImpl.this.console,ControlOperator.NONE,null));
    }
 catch (    CommandNotFoundException|IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}",0.9227642276422764
151440,"@Override @Produces @ApplicationScoped public Configuration getUserConfiguration() throws ConfigurationException {
  if (userConfiguration == null) {
    String property=System.getProperty(USER_CONFIG_PATH);
    File userConfigurationFile;
    if (property == null || property.isEmpty()) {
      userConfigurationFile=new File(OperatingSystemUtils.getUserForgeDir(),""String_Node_Str"");
    }
 else {
      userConfigurationFile=new File(property);
    }
    if (!userConfigurationFile.exists() || userConfigurationFile.length() == 0L) {
      userConfigurationFile.mkdirs();
      try (FileWriter fw=new FileWriter(userConfigurationFile)){
        fw.write(""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new ConfigurationException(""String_Node_Str"",e);
      }
    }
    userConfiguration=getConfiguration(userConfigurationFile);
  }
  return userConfiguration;
}","@Override @Produces @ApplicationScoped public Configuration getUserConfiguration() throws ConfigurationException {
  if (userConfiguration == null) {
    String property=System.getProperty(USER_CONFIG_PATH);
    File userConfigurationFile;
    if (property == null || property.isEmpty()) {
      userConfigurationFile=new File(OperatingSystemUtils.getUserForgeDir(),""String_Node_Str"");
    }
 else {
      userConfigurationFile=new File(property);
    }
    if (!userConfigurationFile.exists() || userConfigurationFile.length() == 0L) {
      File parentFile=userConfigurationFile.getParentFile();
      if (parentFile != null) {
        parentFile.mkdirs();
      }
      try (FileWriter fw=new FileWriter(userConfigurationFile)){
        fw.write(""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new ConfigurationException(""String_Node_Str"",e);
      }
    }
    userConfiguration=getConfiguration(userConfigurationFile);
  }
  return userConfiguration;
}",0.932620320855615
151441,"@Override @Produces @ApplicationScoped public Configuration getUserConfiguration() throws ConfigurationException {
  if (userConfiguration == null) {
    String property=System.getProperty(USER_CONFIG_PATH);
    File userConfigurationFile;
    if (property == null || property.isEmpty()) {
      userConfigurationFile=new File(OperatingSystemUtils.getUserForgeDir(),""String_Node_Str"");
    }
 else {
      userConfigurationFile=new File(property);
    }
    if (!userConfigurationFile.exists() || userConfigurationFile.length() == 0L) {
      try {
        FileUtils.writeStringToFile(userConfigurationFile,""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new ConfigurationException(""String_Node_Str"",e);
      }
    }
    userConfiguration=getConfiguration(userConfigurationFile);
  }
  return userConfiguration;
}","@Override @Produces @ApplicationScoped public Configuration getUserConfiguration() throws ConfigurationException {
  if (userConfiguration == null) {
    String property=System.getProperty(USER_CONFIG_PATH);
    File userConfigurationFile;
    if (property == null || property.isEmpty()) {
      userConfigurationFile=new File(OperatingSystemUtils.getUserForgeDir(),""String_Node_Str"");
    }
 else {
      userConfigurationFile=new File(property);
    }
    if (!userConfigurationFile.exists() || userConfigurationFile.length() == 0L) {
      try (FileWriter fw=new FileWriter(userConfigurationFile)){
        fw.write(""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new ConfigurationException(""String_Node_Str"",e);
      }
    }
    userConfiguration=getConfiguration(userConfigurationFile);
  }
  return userConfiguration;
}",0.940828402366864
151442,"@Test(timeout=10000) public void testTransactionTrackChangesManualTransaction() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.getStdOut().contains(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str""));
  Assert.assertFalse(test.getStdOut().contains(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str""));
}","@Test(timeout=10000) public void testTransactionTrackChangesManualTransaction() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.getStdOut().contains(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str""));
  Assert.assertFalse(test.getStdOut().contains(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str""));
}",0.979886863607794
151443,"@Test(timeout=10000) public void testTransactionTrackChangesOff() throws Exception {
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  final AtomicBoolean flag=new AtomicBoolean(false);
  factory.addTransactionListener(new ResourceTransactionListener(){
    @Override public void transactionStarted(    ResourceTransaction transaction){
      flag.set(true);
    }
    @Override public void transactionRolledBack(    ResourceTransaction transaction){
      flag.set(true);
    }
    @Override public void transactionCommitted(    ResourceTransaction transaction,    Set<ResourceEvent> changeSet){
      flag.set(true);
    }
  }
);
  test.clearScreen();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(flag.get());
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertTrue(flag.get());
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}","@Test(timeout=10000) public void testTransactionTrackChangesOff() throws Exception {
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  final AtomicBoolean flag=new AtomicBoolean(false);
  factory.addTransactionListener(new ResourceTransactionListener(){
    @Override public void transactionStarted(    ResourceTransaction transaction){
      flag.set(true);
    }
    @Override public void transactionRolledBack(    ResourceTransaction transaction){
      flag.set(true);
    }
    @Override public void transactionCommitted(    ResourceTransaction transaction,    Set<ResourceEvent> changeSet){
      flag.set(true);
    }
  }
);
  test.clearScreen();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(flag.get());
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertTrue(flag.get());
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}",0.9949012109623964
151444,"@Test(timeout=10000) public void testTransactionTrackChanges() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}","@Test(timeout=10000) public void testTransactionTrackChanges() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}",0.9859525899912204
151445,"@Test(timeout=10000) public void testTransactionTrackChangesExistingTransaction() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}","@Test(timeout=10000) public void testTransactionTrackChangesExistingTransaction() throws Exception {
  test.clearScreen();
  DirectoryResource tempDir=factory.create(OperatingSystemUtils.createTempDir()).reify(DirectoryResource.class);
  tempDir.deleteOnExit();
  test.getShell().setCurrentResource(tempDir);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.clearScreen();
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  test.waitForStdOutValue(""String_Node_Str"" + tempDir.getFullyQualifiedName() + File.separator+ ""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
  Assert.assertFalse(test.execute(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS) instanceof Failed);
  test.waitForStdOutValue(""String_Node_Str"",SHELL_TIMEOUT,TimeUnit.SECONDS);
}",0.9877955758962624
151446,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  setupEntities(builder.getUIContext());
  setupRelationshipType();
  final Project project=getSelectedProject(builder);
  final String[] types={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  type.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    final UIContext context,    final InputComponent<?,String> input,    final String value){
      final List<String> options=new ArrayList<>();
      for (      String type : types) {
        if (Strings.isNullOrEmpty(value) || type.startsWith(value)) {
          options.add(type);
        }
      }
      if (project != null) {
        for (        JavaResource resource : getProjectEntities(project)) {
          try {
            JavaSource<?> javaSource=resource.getJavaSource();
            String qualifiedName=javaSource.getQualifiedName();
            if (Strings.isNullOrEmpty(value) || qualifiedName.startsWith(value)) {
              options.add(qualifiedName);
            }
          }
 catch (          FileNotFoundException ignored) {
          }
        }
      }
      return options;
    }
  }
);
  lob.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return relationshipType.getValue() == RelationshipType.BASIC;
    }
  }
);
  type.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return !lob.getValue();
    }
  }
);
  length.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return !lob.getValue();
    }
  }
);
  temporalType.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      String typeValue=type.getValue();
      return Date.class.getName().equals(typeValue) || Calendar.class.getName().equals(typeValue);
    }
  }
);
  builder.add(targetEntity).add(named).add(type).add(temporalType).add(length).add(relationshipType).add(lob);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  setupEntities(builder.getUIContext());
  setupRelationshipType();
  final Project project=getSelectedProject(builder);
  final List<String> types=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  type.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    final UIContext context,    final InputComponent<?,String> input,    final String value){
      final List<String> options=new ArrayList<>();
      for (      String type : types) {
        if (Strings.isNullOrEmpty(value) || type.startsWith(value)) {
          options.add(type);
        }
      }
      if (project != null) {
        for (        JavaResource resource : getProjectEntities(project)) {
          try {
            JavaSource<?> javaSource=resource.getJavaSource();
            String qualifiedName=javaSource.getQualifiedName();
            if (Strings.isNullOrEmpty(value) || qualifiedName.startsWith(value)) {
              options.add(qualifiedName);
            }
          }
 catch (          FileNotFoundException ignored) {
          }
        }
      }
      return options;
    }
  }
);
  relationshipType.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return !types.contains(type.getValue());
    }
  }
);
  lob.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return relationshipType.getValue() == RelationshipType.BASIC;
    }
  }
);
  type.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return !lob.getValue();
    }
  }
);
  length.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return !lob.getValue();
    }
  }
);
  temporalType.setEnabled(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      String typeValue=type.getValue();
      return Date.class.getName().equals(typeValue) || Calendar.class.getName().equals(typeValue);
    }
  }
);
  builder.add(targetEntity).add(named).add(type).add(temporalType).add(length).add(relationshipType).add(lob);
}",0.9523169912693082
151447,"public Map<String,InputComponent<?,?>> populateUIInputs(CommandLine commandLine,Map<String,InputComponent<?,?>> inputs){
  Map<String,InputComponent<?,?>> populatedInputs=new HashMap<>();
  for (  Entry<String,InputComponent<?,?>> entry : inputs.entrySet()) {
    String name=entry.getKey();
    InputComponent<?,?> input=entry.getValue();
    if (ARGUMENTS_INPUT_NAME.equals(name)) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getArgument().getValues());
      populatedInputs.put(name,input);
    }
    if (commandLine.hasOption(name)) {
      if (input instanceof ManyValued) {
        InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValues(input.getName()));
        populatedInputs.put(name,input);
      }
 else       if (input instanceof SingleValued) {
        InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValue(input.getName()));
        populatedInputs.put(name,input);
      }
    }
  }
  return populatedInputs;
}","public Map<String,InputComponent<?,?>> populateUIInputs(CommandLine commandLine,Map<String,InputComponent<?,?>> inputs){
  Map<String,InputComponent<?,?>> populatedInputs=new LinkedHashMap<>();
  for (  Entry<String,InputComponent<?,?>> entry : inputs.entrySet()) {
    String name=entry.getKey();
    InputComponent<?,?> input=entry.getValue();
    if (ARGUMENTS_INPUT_NAME.equals(name)) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getArgument().getValues());
      populatedInputs.put(name,input);
    }
    if (commandLine.hasOption(name)) {
      if (input instanceof ManyValued) {
        InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValues(input.getName()));
        populatedInputs.put(name,input);
      }
 else       if (input instanceof SingleValued) {
        InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValue(input.getName()));
        populatedInputs.put(name,input);
      }
    }
  }
  return populatedInputs;
}",0.9970149253731344
151448,"private CommandLineParser populate(ShellContext shellContext,String line,final Map<String,InputComponent<?,?>> allInputs,Map<String,InputComponent<?,?>> lastPage) throws Exception {
  WizardCommandController controller=getController();
  Map<String,InputComponent<?,?>> pageInputs=new HashMap<>(controller.getInputs());
  allInputs.putAll(pageInputs);
  CommandLineParser parser=commandLineUtil.generateParser(controller,shellContext,allInputs);
  CommandLine cmdLine=parser.parse(line,true);
  Map<String,InputComponent<?,?>> populatedInputs=commandLineUtil.populateUIInputs(cmdLine,allInputs);
  boolean inputsChanged=false;
  for (  String input : pageInputs.keySet()) {
    if (populatedInputs.containsKey(input)) {
      lastPage.keySet().removeAll(populatedInputs.keySet());
      allInputs.keySet().removeAll(lastPage.keySet());
      inputsChanged=true;
      break;
    }
  }
  if (controller.canMoveToNextStep()) {
    controller.next().initialize();
    parser=populate(shellContext,line,allInputs,pageInputs);
  }
 else   if (inputsChanged) {
    parser=commandLineUtil.generateParser(controller,shellContext,allInputs);
  }
  return parser;
}","private CommandLineParser populate(ShellContext shellContext,String line,final Map<String,InputComponent<?,?>> allInputs,Map<String,InputComponent<?,?>> lastPage) throws Exception {
  WizardCommandController controller=getController();
  Map<String,InputComponent<?,?>> pageInputs=new LinkedHashMap<>(controller.getInputs());
  allInputs.putAll(pageInputs);
  CommandLineParser parser=commandLineUtil.generateParser(controller,shellContext,allInputs);
  CommandLine cmdLine=parser.parse(line,true);
  Map<String,InputComponent<?,?>> populatedInputs=commandLineUtil.populateUIInputs(cmdLine,allInputs);
  parser=commandLineUtil.generateParser(controller,shellContext,allInputs);
  cmdLine=parser.parse(line,true);
  populatedInputs=commandLineUtil.populateUIInputs(cmdLine,allInputs);
  boolean inputsChanged=false;
  for (  String input : pageInputs.keySet()) {
    if (populatedInputs.containsKey(input)) {
      lastPage.keySet().removeAll(populatedInputs.keySet());
      allInputs.keySet().removeAll(lastPage.keySet());
      inputsChanged=true;
      break;
    }
  }
  if (controller.canMoveToNextStep()) {
    controller.next().initialize();
    parser=populate(shellContext,line,allInputs,pageInputs);
  }
 else   if (inputsChanged) {
    parser=commandLineUtil.generateParser(controller,shellContext,allInputs);
  }
  return parser;
}",0.9247397918334668
151449,"@Override public CommandLineParser getParser(ShellContext shellContext,String completeLine) throws Exception {
  getController().initialize();
  return populate(shellContext,completeLine,new HashMap<String,InputComponent<?,?>>(),new HashMap<String,InputComponent<?,?>>());
}","@Override public CommandLineParser getParser(ShellContext shellContext,String completeLine) throws Exception {
  getController().initialize();
  return populate(shellContext,completeLine,new LinkedHashMap<String,InputComponent<?,?>>(),new LinkedHashMap<String,InputComponent<?,?>>());
}",0.9785714285714284
151450,"@Override public Result execute(UIExecutionContext context) throws Exception {
  final Result result;
  Shell shell=(Shell)context.getUIContext().getProvider();
  Resource<?> currentResource=shell.getCurrentResource();
  Iterator<String> it=arguments.hasValue() ? arguments.getValue().iterator() : Collections.<String>emptyIterator();
  final Resource<?> resource;
  if (it.hasNext()) {
    List<Resource<?>> resourceList=new PathspecParser(resourceFactory,currentResource,it.next()).resolve();
    if (resourceList.isEmpty()) {
      resource=null;
    }
 else {
      resource=resourceList.get(0);
    }
  }
 else {
    resource=currentResource;
  }
  if (resource == null || !resource.exists()) {
    result=Results.fail(resource.getName() + ""String_Node_Str"");
  }
 else {
    UIOutput output=shell.getOutput();
    output.out().println(listMany(resource.listResources(),shell));
    result=Results.success();
  }
  return result;
}","@Override public Result execute(UIExecutionContext context) throws Exception {
  Shell shell=(Shell)context.getUIContext().getProvider();
  Resource<?> currentResource=shell.getCurrentResource();
  Iterator<String> it=arguments.hasValue() ? arguments.getValue().iterator() : Collections.<String>emptyIterator();
  List<Resource<?>> resourceList;
  if (it.hasNext()) {
    String value=it.next();
    boolean searching=(value.matches(""String_Node_Str""));
    resourceList=new PathspecParser(resourceFactory,currentResource,value).resolve();
    if (!searching && !resourceList.isEmpty() && resourceList.get(0).exists()) {
      resourceList=resourceList.get(0).listResources();
    }
  }
 else {
    resourceList=currentResource.listResources();
  }
  final Result result;
  if (!resourceList.isEmpty() && !resourceList.get(0).exists()) {
    result=Results.fail(resourceList.get(0).getName() + ""String_Node_Str"");
  }
 else {
    UIOutput output=shell.getOutput();
    output.out().println(listMany(resourceList,shell));
    result=Results.success();
  }
  return result;
}",0.6879044300647088
151451,"@Test @Ignore(""String_Node_Str"") public void testLsCommand() throws Exception {
  Project project=projectFactory.createTempProject();
  String projectPath=project.getProjectRoot().getFullyQualifiedName();
  shellTest.execute(""String_Node_Str"" + projectPath,5,TimeUnit.SECONDS);
  shellTest.execute(""String_Node_Str"",5,TimeUnit.SECONDS);
  shellTest.clearScreen();
  shellTest.execute(""String_Node_Str"",5,TimeUnit.SECONDS);
  Assert.assertThat(shellTest.getStdOut(),CoreMatchers.containsString(""String_Node_Str""));
}","@Test public void testLsCommand() throws Exception {
  Project project=projectFactory.createTempProject();
  String projectPath=project.getProjectRoot().getFullyQualifiedName();
  shellTest.execute(""String_Node_Str"" + projectPath,5,TimeUnit.SECONDS);
  shellTest.execute(""String_Node_Str"",5,TimeUnit.SECONDS);
  shellTest.clearScreen();
  shellTest.execute(""String_Node_Str"",5,TimeUnit.HOURS);
  Assert.assertThat(shellTest.getStdOut(),CoreMatchers.containsString(""String_Node_Str""));
}",0.8711288711288712
151452,"public void initializeUI(UIBuilder builder) throws Exception {
  builder.add(jdbcUrl).add(userName).add(userPassword).add(hibernateDialect).add(driverLocation).add(driverClass);
  hibernateDialect.setItemLabelConverter(new Converter<HibernateDialect,String>(){
    @Override public String convert(    HibernateDialect dialect){
      return dialect == null ? null : dialect.getDatabaseName() + ""String_Node_Str"" + dialect.getClassName();
    }
  }
);
  driverLocation.setValidator(new UIValidator(){
    @Override public void validate(    UIValidationContext context){
      FileResource<?> resource=driverLocation.getValue();
      if (resource != null && !resource.exists()) {
        context.addValidationError(driverLocation,""String_Node_Str"" + resource.getFullyQualifiedName() + ""String_Node_Str"");
      }
    }
  }
);
  driverClass.setValueChoices(new Callable<Iterable<String>>(){
    @Override public Iterable<String> call() throws Exception {
      return getDriverClassNames();
    }
  }
);
  driverClass.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      String result=null;
      Iterator<String> iterator=driverClass.getValueChoices().iterator();
      if (iterator.hasNext()) {
        result=iterator.next();
      }
      return result;
    }
  }
);
}","public void initializeUI(UIBuilder builder) throws Exception {
  builder.add(jdbcUrl).add(userName).add(userPassword).add(hibernateDialect).add(driverLocation).add(driverClass);
  hibernateDialect.setItemLabelConverter(new Converter<HibernateDialect,String>(){
    @Override public String convert(    HibernateDialect dialect){
      return dialect == null ? null : dialect.getDatabaseName() + ""String_Node_Str"" + dialect.getClassName();
    }
  }
);
  driverLocation.addValidator(new UIValidator(){
    @Override public void validate(    UIValidationContext context){
      FileResource<?> resource=driverLocation.getValue();
      if (resource != null && !resource.exists()) {
        context.addValidationError(driverLocation,""String_Node_Str"" + resource.getFullyQualifiedName() + ""String_Node_Str"");
      }
    }
  }
);
  driverClass.setValueChoices(new Callable<Iterable<String>>(){
    @Override public Iterable<String> call() throws Exception {
      return getDriverClassNames();
    }
  }
);
  driverClass.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      String result=null;
      Iterator<String> iterator=driverClass.getValueChoices().iterator();
      if (iterator.hasNext()) {
        result=iterator.next();
      }
      return result;
    }
  }
);
}",0.9977220956719818
151453,"@SuppressWarnings(""String_Node_Str"") public AeshUICommand(CommandContainer container){
  this.command=container.getCommand();
  this.commandLineParser=container.getParser();
  this.commandPopulator=commandLineParser.getCommandPopulator();
}","@SuppressWarnings(""String_Node_Str"") public AeshUICommand(CommandContainer container){
  this.command=container.getCommand();
  this.commandLineParser=container.getParser();
}",0.8433734939759037
151454,"@Override public void populateObject(Object instance,CommandLine line,InvocationProviders invocationProviders,boolean validate) throws CommandLineParserException, OptionValidatorException {
  commandPopulator.populateObject(command,line,invocationProviders,validate);
}","@Override public void populateObject(Object instance,CommandLine line,InvocationProviders invocationProviders,boolean validate) throws CommandLineParserException, OptionValidatorException {
  commandLineParser.getCommandPopulator().populateObject(command,line,invocationProviders,validate);
}",0.926916221033868
151455,"@Override public CommandPopulator getCommandPopulator(){
  return new CommandPopulator(){
    @Override public void populateObject(    Object instance,    CommandLine line,    InvocationProviders invocationProviders,    boolean validate) throws CommandLineParserException, OptionValidatorException {
      commandPopulator.populateObject(command,line,invocationProviders,validate);
    }
  }
;
}","@Override public CommandPopulator getCommandPopulator(){
  return new CommandPopulator(){
    @Override public void populateObject(    Object instance,    CommandLine line,    InvocationProviders invocationProviders,    boolean validate) throws CommandLineParserException, OptionValidatorException {
      commandLineParser.getCommandPopulator().populateObject(command,line,invocationProviders,validate);
    }
  }
;
}",0.949569495694957
151456,"@Override public CommandLineCompletionParser getCompletionParser(){
  return commandLineParser.getCompletionParser();
}","@Override public CommandLineCompletionParser getCompletionParser(){
  return new CommandLineCompletionParser(){
    @Override @SuppressWarnings(""String_Node_Str"") public void injectValuesAndComplete(    ParsedCompleteObject completeObject,    Command originalCommand,    CompleteOperation completeOperation,    InvocationProviders invocationProviders){
      commandLineParser.getCompletionParser().injectValuesAndComplete(completeObject,AeshUICommand.this.command,completeOperation,invocationProviders);
    }
    @Override public ParsedCompleteObject findCompleteObject(    String line,    int cursor) throws CommandLineParserException {
      return commandLineParser.getCompletionParser().findCompleteObject(line,cursor);
    }
  }
;
}",0.2773892773892774
151457,"@Override public List<Resource<?>> generateFrom(Project project,ScaffoldGenerationContext scaffoldContext){
  List<Resource<?>> generatedResources=new ArrayList<Resource<?>>();
  Collection<?> resources=scaffoldContext.getResources();
  for (  Object resource : resources) {
    JavaClass entity=(JavaClass)resource;
    String targetDir=scaffoldContext.getTargetDirectory();
    Resource<?> template=(Resource<?>)scaffoldContext.getAttribute(""String_Node_Str"");
    boolean overwrite=scaffoldContext.isOverwrite();
    List<Resource<?>> generatedResourcesForEntity=this.generateFromEntity(targetDir,template,entity,overwrite);
    generatedResources.addAll(generatedResourcesForEntity);
  }
  return generatedResources;
}","@Override public List<Resource<?>> generateFrom(Project project,ScaffoldGenerationContext scaffoldContext){
  List<Resource<?>> generatedResources=new ArrayList<Resource<?>>();
  Collection<?> resources=scaffoldContext.getResources();
  for (  Object resource : resources) {
    JavaClass entity=(JavaClass)resource;
    String targetDir=scaffoldContext.getTargetDirectory();
    targetDir=(targetDir == null) ? ""String_Node_Str"" : targetDir;
    Resource<?> template=(Resource<?>)scaffoldContext.getAttribute(""String_Node_Str"");
    boolean overwrite=scaffoldContext.isOverwrite();
    List<Resource<?>> generatedResourcesForEntity=this.generateFromEntity(targetDir,template,entity,overwrite);
    generatedResources.addAll(generatedResourcesForEntity);
  }
  return generatedResources;
}",0.9556585043017868
151458,"@Override public NavigationResult next(UIContext context) throws Exception {
  ResourceCollection resourceCollection=new ResourceCollection();
  for (  JavaClass klass : targets.getValue()) {
    resourceCollection.addToCollection(klass);
  }
  context.setAttribute(ResourceCollection.class,resourceCollection);
  ScaffoldGenerationContext genCtx=(ScaffoldGenerationContext)context.getAttribute(ScaffoldGenerationContext.class);
  genCtx.addAttribute(""String_Node_Str"",pageTemplate.getValue());
  return null;
}","@Override public NavigationResult next(UINavigationContext context) throws Exception {
  ResourceCollection resourceCollection=new ResourceCollection();
  for (  JavaClass klass : targets.getValue()) {
    resourceCollection.addToCollection(klass);
  }
  UIContext uiContext=context.getUIContext();
  uiContext.setAttribute(ResourceCollection.class,resourceCollection);
  ScaffoldGenerationContext genCtx=(ScaffoldGenerationContext)uiContext.getAttribute(ScaffoldGenerationContext.class);
  genCtx.addAttribute(""String_Node_Str"",pageTemplate.getValue());
  return null;
}",0.9408502772643254
151459,"@Override public NavigationResult next(UIContext context) throws Exception {
  return null;
}","@Override public NavigationResult next(UINavigationContext context) throws Exception {
  return null;
}",0.9489795918367347
151460,"@Override public NavigationResult next(UIContext context) throws Exception {
  return null;
}","@Override public NavigationResult next(UINavigationContext context) throws Exception {
  return null;
}",0.9489795918367347
151461,"@Override public NavigationResult next(UIContext context) throws Exception {
  ScaffoldProvider selectedProvider=provider.getValue();
  Project project=getSelectedProject(context);
  context.setAttribute(Project.class,project);
  context.setAttribute(ScaffoldProvider.class,selectedProvider);
  context.setAttribute(ScaffoldGenerationContext.class,populateGenerationContext(context));
  ((AbstractFacet)selectedProvider).setFaceted(project);
  List<Class<? extends UICommand>> generationFlow=selectedProvider.getGenerationFlow();
  generationFlow.add(ExecuteGenerationStep.class);
  Class<? extends UICommand> next=generationFlow.remove(0);
  Class<?>[] additional=generationFlow.toArray(new Class<?>[generationFlow.size()]);
  return Results.navigateTo(next,(Class<? extends UICommand>[])additional);
}","@Override public NavigationResult next(UINavigationContext context) throws Exception {
  ScaffoldProvider selectedProvider=provider.getValue();
  UIContext uiContext=context.getUIContext();
  Project project=getSelectedProject(uiContext);
  uiContext.setAttribute(Project.class,project);
  uiContext.setAttribute(ScaffoldProvider.class,selectedProvider);
  uiContext.setAttribute(ScaffoldGenerationContext.class,populateGenerationContext(uiContext));
  ((AbstractFacet)selectedProvider).setFaceted(project);
  List<Class<? extends UICommand>> generationFlow=selectedProvider.getGenerationFlow();
  generationFlow.add(ExecuteGenerationStep.class);
  Class<? extends UICommand> next=generationFlow.remove(0);
  Class<?>[] additional=generationFlow.toArray(new Class<?>[generationFlow.size()]);
  return Results.navigateTo(next,(Class<? extends UICommand>[])additional);
}",0.9413875598086124
151462,"@Override public NavigationResult next(UINavigationContext context) throws Exception {
  ScaffoldProvider selectedProvider=provider.getValue();
  Project project=getSelectedProject(context);
  ((AbstractFacet)selectedProvider).setFaceted(project);
  context.setAttribute(ScaffoldProvider.class,selectedProvider);
  context.setAttribute(ScaffoldSetupContext.class,createSetupContext());
  List<Class<? extends UICommand>> setupFlow=selectedProvider.getSetupFlow();
  setupFlow.add(ExecuteSetupStep.class);
  Class<? extends UICommand> next=setupFlow.remove(0);
  Class<?>[] additional=setupFlow.toArray(new Class<?>[setupFlow.size()]);
  return Results.navigateTo(next,(Class<? extends UICommand>[])additional);
}","@Override public NavigationResult next(UINavigationContext context) throws Exception {
  ScaffoldProvider selectedProvider=provider.getValue();
  Project project=getSelectedProject(context);
  ((AbstractFacet)selectedProvider).setFaceted(project);
  UIContext uiContext=context.getUIContext();
  uiContext.setAttribute(ScaffoldProvider.class,selectedProvider);
  uiContext.setAttribute(ScaffoldSetupContext.class,createSetupContext());
  List<Class<? extends UICommand>> setupFlow=selectedProvider.getSetupFlow();
  setupFlow.add(ExecuteSetupStep.class);
  Class<? extends UICommand> next=setupFlow.remove(0);
  Class<?>[] additional=setupFlow.toArray(new Class<?>[setupFlow.size()]);
  return context.navigateTo(next,(Class<? extends UICommand>[])additional);
}",0.9538670284938942
151463,"/** 
 * Generates the navigation menu based on scaffolded entities.
 */
protected Resource<?> generateNavigation(final String targetDir,final boolean overwrite) throws IOException {
  WebResourcesFacet web=this.origin.getFacet(WebResourcesFacet.class);
  HtmlTag unorderedList=new HtmlTag(""String_Node_Str"");
  ResourceFilter filter=new ResourceFilter(){
    @Override public boolean accept(    Resource<?> resource){
      FileResource<?> file=(FileResource<?>)resource;
      if (!file.isDirectory() || file.getName().equals(""String_Node_Str"") || file.getName().equals(""String_Node_Str"")|| file.getName().equals(""String_Node_Str"")) {
        return false;
      }
      return true;
    }
  }
;
  for (  Resource<?> resource : web.getWebResource(targetDir + ""String_Node_Str"").listResources(filter)) {
    HtmlOutcomeTargetLink outcomeTargetLink=new HtmlOutcomeTargetLink();
    outcomeTargetLink.putAttribute(""String_Node_Str"",targetDir + ""String_Node_Str"" + resource.getName()+ ""String_Node_Str"");
    outcomeTargetLink.setValue(StringUtils.uncamelCase(resource.getName()));
    HtmlTag listItem=new HtmlTag(""String_Node_Str"");
    listItem.getChildren().add(outcomeTargetLink);
    unorderedList.getChildren().add(listItem);
  }
  Writer writer=new IndentedWriter(new StringWriter(),this.navigationTemplateIndent);
  unorderedList.write(writer);
  Map<Object,Object> context=CollectionUtils.newHashMap();
  context.put(""String_Node_Str"",StringUtils.uncamelCase(this.origin.getProjectRoot().getName()));
  context.put(""String_Node_Str"",writer.toString().trim());
  context.put(""String_Node_Str"",targetDir);
  if (this.navigationTemplate == null) {
    loadTemplates();
  }
  try {
    return ScaffoldUtil.createOrOverwrite((FileResource<?>)getTemplateStrategy().getDefaultTemplate(),this.templateProcessor.processTemplate(context,navigationTemplate),overwrite);
  }
  finally {
    writer.close();
  }
}","/** 
 * Generates the navigation menu based on scaffolded entities.
 */
protected Resource<?> generateNavigation(final String targetDir,final boolean overwrite) throws IOException {
  WebResourcesFacet web=this.origin.getFacet(WebResourcesFacet.class);
  HtmlTag unorderedList=new HtmlTag(""String_Node_Str"");
  ResourceFilter filter=new ResourceFilter(){
    @Override public boolean accept(    Resource<?> resource){
      FileResource<?> file=(FileResource<?>)resource;
      if (!file.isDirectory() || file.getName().equals(""String_Node_Str"") || file.getName().equals(""String_Node_Str"")|| file.getName().equals(""String_Node_Str"")) {
        return false;
      }
      return true;
    }
  }
;
  for (  Resource<?> resource : web.getWebResource(targetDir + ""String_Node_Str"").listResources(filter)) {
    HtmlOutcomeTargetLink outcomeTargetLink=new HtmlOutcomeTargetLink();
    outcomeTargetLink.putAttribute(""String_Node_Str"",targetDir + ""String_Node_Str"" + resource.getName()+ ""String_Node_Str"");
    outcomeTargetLink.setValue(StringUtils.uncamelCase(resource.getName()));
    HtmlTag listItem=new HtmlTag(""String_Node_Str"");
    listItem.getChildren().add(outcomeTargetLink);
    unorderedList.getChildren().add(listItem);
  }
  Writer writer=new IndentedWriter(new StringWriter(),this.navigationTemplateIndent);
  unorderedList.write(writer);
  Map<Object,Object> context=CollectionUtils.newHashMap();
  context.put(""String_Node_Str"",StringUtils.uncamelCase(this.origin.getProjectRoot().getName()));
  context.put(""String_Node_Str"",writer.toString().trim());
  context.put(""String_Node_Str"",targetDir);
  if (this.navigationTemplate == null) {
    loadTemplates();
  }
  try {
    return ScaffoldUtil.createOrOverwrite((FileResource<?>)getTemplateStrategy().getDefaultTemplate(),this.templateProcessor.processTemplate(context,navigationTemplate),true);
  }
  finally {
    writer.close();
  }
}",0.980309792596482
151464,"@SuppressWarnings(""String_Node_Str"") @Override public CommandResult execute(CommandInvocation commandInvocation) throws IOException {
  boolean failure=true;
  if (interaction.getController().isValid()) {
    Result result=null;
    try {
      result=interaction.getController().execute();
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + interaction.getName() + ""String_Node_Str"",e);
      result=Results.fail(e.getMessage(),e);
    }
    if (result != null && result.getMessage() != null && !result.getMessage().isEmpty()) {
      if (result instanceof Failed) {
        ShellMessages.error(shell.getConsole().getShell().err(),result.getMessage());
      }
 else {
        failure=false;
        ShellMessages.success(shell.getConsole().getShell().out(),result.getMessage());
      }
    }
    ShellContext context=interaction.getContext().getSelection();
    Object selection=context.getSelection();
    if (selection != null) {
      if (selection instanceof Iterable<?>) {
        for (        FileResource<?> item : (Iterable<FileResource<?>>)selection) {
          if (item != null) {
            shell.setCurrentResource(item);
            break;
          }
        }
      }
 else {
        shell.setCurrentResource((FileResource<?>)selection);
      }
    }
  }
 else {
    List<UIValidationMessage> messages=interaction.getController().validate();
    for (    UIValidationMessage message : messages) {
      if (message.getSeverity() == Severity.ERROR)       ShellMessages.error(shell.getConsole().getShell().err(),message.getDescription());
    }
  }
  return failure ? CommandResult.FAILURE : CommandResult.SUCCESS;
}","@SuppressWarnings(""String_Node_Str"") @Override public CommandResult execute(CommandInvocation commandInvocation) throws IOException {
  boolean failure=false;
  if (interaction.getController().isValid()) {
    Result result=null;
    try {
      result=interaction.getController().execute();
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + interaction.getName() + ""String_Node_Str"",e);
      result=Results.fail(e.getMessage(),e);
    }
    if (result != null && result.getMessage() != null && !result.getMessage().isEmpty()) {
      if (result instanceof Failed) {
        ShellMessages.error(shell.getConsole().getShell().err(),result.getMessage());
        failure=true;
      }
 else {
        ShellMessages.success(shell.getConsole().getShell().out(),result.getMessage());
        failure=false;
      }
    }
    Object selection=interaction.getContext().getSelection();
    if (selection != null) {
      if (selection instanceof Iterable<?>) {
        for (        FileResource<?> item : (Iterable<FileResource<?>>)selection) {
          if (item != null) {
            shell.setCurrentResource(item);
            break;
          }
        }
      }
 else {
        shell.setCurrentResource((FileResource<?>)selection);
      }
    }
  }
 else {
    List<UIValidationMessage> messages=interaction.getController().validate();
    for (    UIValidationMessage message : messages) {
      if (message.getSeverity() == Severity.ERROR)       ShellMessages.error(shell.getConsole().getShell().err(),message.getDescription());
    }
  }
  return failure ? CommandResult.FAILURE : CommandResult.SUCCESS;
}",0.9121744397334948
151465,"public void destroy(){
  if (this.shell != null)   this.shell.close();
}","public void destroy(){
  if (this.shell != null)   try {
    this.shell.close();
  }
 catch (  Exception e) {
    Logger.getLogger(getClass().getName()).log(Level.FINE,""String_Node_Str"",e);
  }
}",0.5393258426966292
151466,"public static OptionCompleter getCompletionFor(InputComponent<?,Object> component,ShellContext context,ConverterFactory converterFactory){
  UISelection<FileResource<?>> selection=context.getInitialSelection();
  final File cwd=selection.isEmpty() ? OperatingSystemUtils.getUserHomeDir() : selection.get().getUnderlyingResourceObject();
  InputType inputType=component.getFacet(HintsFacet.class).getInputType();
  OptionCompleter strategy=null;
  if (inputType == InputType.FILE_PICKER && cwd.isDirectory()) {
    strategy=new FileOptionCompleter(cwd);
  }
 else   if (inputType == InputType.DIRECTORY_PICKER && cwd.isDirectory()) {
    strategy=new FileOptionCompleter(cwd,Filter.DIRECTORY);
  }
 else   if (inputType == InputType.CHECKBOX || Boolean.class.isAssignableFrom(component.getValueType())) {
    strategy=null;
  }
 else   if (component instanceof SelectComponent) {
    strategy=new SelectComponentOptionCompleter((SelectComponent<?,Object>)component,converterFactory);
  }
  strategy=new UICompleterOptionCompleter(strategy,context,component,converterFactory);
  return strategy;
}","public static OptionCompleter getCompletionFor(InputComponent<?,Object> component,ShellContext context,ConverterFactory converterFactory){
  UISelection<FileResource<?>> selection=context.getInitialSelection();
  final File cwd=selection.isEmpty() ? OperatingSystemUtils.getUserHomeDir() : selection.get().getUnderlyingResourceObject();
  InputType inputType=component.getFacet(HintsFacet.class).getInputType();
  OptionCompleter strategy=null;
  if (inputType == InputType.FILE_PICKER && cwd.isDirectory()) {
    strategy=new FileOptionCompleter(cwd);
  }
 else   if (inputType == InputType.DIRECTORY_PICKER && cwd.isDirectory()) {
    strategy=new FileOptionCompleter(cwd,Filter.DIRECTORY);
  }
 else   if (component instanceof SelectComponent) {
    strategy=new SelectComponentOptionCompleter((SelectComponent<?,Object>)component,converterFactory);
  }
  strategy=new UICompleterOptionCompleter(strategy,context,component,converterFactory);
  return strategy;
}",0.9368932038834952
151467,"@Override public Result execute(ShellContext context) throws Exception {
  Shell shell=context.getProvider();
  FileResource<?> currentResource=shell.getCurrentResource();
  Iterator<String> it=arguments.getValue().iterator();
  final Result result;
  if (it.hasNext()) {
    String newPath=it.next();
    final List<Resource<?>> newResource=new PathspecParser(resourceFactory,currentResource,newPath).resolve();
    if (newResource.isEmpty() || !newResource.get(0).exists()) {
      result=Results.fail(newPath + ""String_Node_Str"");
    }
 else {
      FileResource<?> newFileResource=newResource.get(0).reify(FileResource.class);
      if (newFileResource == null) {
        result=Results.fail(newPath + ""String_Node_Str"");
      }
 else {
        shell.setCurrentResource(newFileResource);
        result=Results.success();
      }
    }
  }
 else {
    result=Results.success();
  }
  return result;
}","@Override public Result execute(ShellContext context) throws Exception {
  Shell shell=context.getProvider();
  FileResource<?> currentResource=shell.getCurrentResource();
  Iterable<String> value=arguments.getValue();
  Iterator<String> it=value == null ? Collections.<String>emptyList().iterator() : value.iterator();
  final Result result;
  if (it.hasNext()) {
    String newPath=it.next();
    final List<Resource<?>> newResource=new PathspecParser(resourceFactory,currentResource,newPath).resolve();
    if (newResource.isEmpty() || !newResource.get(0).exists()) {
      result=Results.fail(newPath + ""String_Node_Str"");
    }
 else {
      FileResource<?> newFileResource=newResource.get(0).reify(FileResource.class);
      if (newFileResource == null) {
        result=Results.fail(newPath + ""String_Node_Str"");
      }
 else {
        shell.setCurrentResource(newFileResource);
        result=Results.success();
      }
    }
  }
 else {
    result=Results.success();
  }
  return result;
}",0.9459317585301836
151468,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  UIContext uiContext=builder.getUIContext();
  PersistenceContainer pc=(PersistenceContainer)uiContext.getAttribute(PersistenceContainer.class);
  initDBType(uiContext);
  initDatasourceName(uiContext);
  builder.add(persistenceUnitName.setDefaultValue(PersistenceOperations.DEFAULT_UNIT_NAME));
  builder.add(dbType);
  if (pc.isJTASupported()) {
    builder.add(dataSourceName);
  }
 else {
    builder.add(jdbcDriver).add(databaseURL).add(username).add(password);
  }
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  UIContext uiContext=builder.getUIContext();
  PersistenceContainer pc=(PersistenceContainer)uiContext.getAttribute(PersistenceContainer.class);
  initDBType(uiContext);
  initDatasourceName(uiContext);
  initPersistenceUnitName(builder);
  builder.add(dbType);
  if (pc.isJTASupported()) {
    builder.add(dataSourceName);
  }
 else {
    builder.add(jdbcDriver).add(databaseURL).add(username).add(password);
  }
}",0.9198067632850242
151469,"@Override public void validate(UIValidationContext validator){
  UIContext uiContext=validator.getUIContext();
  JPADataSource ds=getDataSource(uiContext);
  try {
    ds.validate();
  }
 catch (  Exception e) {
    validator.addValidationError(null,e.getMessage());
  }
  Project project=getSelectedProject(uiContext);
  if (project.hasFacet(PersistenceFacet.class)) {
    PersistenceDescriptor config=project.getFacet(PersistenceFacet.class).getConfig();
    for (    PersistenceUnit<PersistenceDescriptor> persistenceUnit : config.getAllPersistenceUnit()) {
      if (persistenceUnitName.getValue().equals(persistenceUnit.getName())) {
        validator.addValidationError(persistenceUnitName,""String_Node_Str"");
        break;
      }
    }
  }
}","@Override public void validate(UIValidationContext validator){
  UIContext uiContext=validator.getUIContext();
  JPADataSource ds=getDataSource(uiContext);
  try {
    ds.validate();
  }
 catch (  Exception e) {
    validator.addValidationError(null,e.getMessage());
  }
  Project project=getSelectedProject(uiContext);
  if (isExistingPersistenceUnitName(project,persistenceUnitName.getValue())) {
    validator.addValidationError(persistenceUnitName,""String_Node_Str"");
  }
}",0.6780766096169519
151470,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  idStrategy.setDefaultValue(GenerationType.AUTO);
  Project project=getSelectedProject(builder.getUIContext());
  if (project == null) {
    UISelection<FileResource<?>> currentSelection=builder.getUIContext().getInitialSelection();
    if (!currentSelection.isEmpty()) {
      FileResource<?> resource=currentSelection.get();
      if (resource instanceof DirectoryResource) {
        targetLocation.setDefaultValue((DirectoryResource)resource);
      }
 else {
        targetLocation.setDefaultValue(resource.getParent());
      }
    }
  }
 else {
    JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
    targetLocation.setDefaultValue(facet.getSourceFolder()).setEnabled(false);
  }
  builder.add(targetLocation);
  builder.add(targetPackage).add(named).add(idStrategy);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  idStrategy.setDefaultValue(GenerationType.AUTO);
  Project project=getSelectedProject(builder.getUIContext());
  if (project == null) {
    UISelection<FileResource<?>> currentSelection=builder.getUIContext().getInitialSelection();
    if (!currentSelection.isEmpty()) {
      FileResource<?> resource=currentSelection.get();
      if (resource instanceof DirectoryResource) {
        targetLocation.setDefaultValue((DirectoryResource)resource);
      }
 else {
        targetLocation.setDefaultValue(resource.getParent());
      }
    }
  }
 else   if (project.hasFacet(JavaSourceFacet.class)) {
    JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
    targetLocation.setDefaultValue(facet.getSourceFolder()).setEnabled(false);
  }
  builder.add(targetLocation);
  builder.add(targetPackage).add(named).add(idStrategy);
}",0.9735211267605632
151471,"public void startupDefaultShell(@Observes PostStartup startup) throws Exception {
  if (!Boolean.getBoolean(""String_Node_Str"")) {
    Settings settings=new SettingsBuilder().create();
    this.shell=shellFactory.createShell(OperatingSystemUtils.getUserHomeDir(),settings);
  }
}","public void startupDefaultShell(@Observes PostStartup startup) throws Exception {
  if (!Boolean.getBoolean(""String_Node_Str"")) {
    Settings settings=new SettingsBuilder().create();
    this.shell=shellFactory.createShell(OperatingSystemUtils.getWorkingDir(),settings);
  }
}",0.972972972972973
151472,"@Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  completeOperation.setOffset(completeOperation.getCursor());
  final File cwd;
  Object value=InputComponents.getValueFor(input);
  if (value == null) {
    UISelection<FileResource<?>> selection=context.getInitialSelection();
    cwd=selection.isEmpty() ? OperatingSystemUtils.getUserHomeDir() : selection.get().getUnderlyingResourceObject();
  }
 else {
    cwd=new File(value.toString());
  }
  FileLister fileLister=new FileLister(typedValue == null ? ""String_Node_Str"" : Parser.switchEscapedSpacesToSpacesInWord(typedValue),cwd,directory ? FileLister.Filter.DIRECTORY : FileLister.Filter.ALL);
  fileLister.findMatchingDirectories(completeOperation);
  if (completeOperation.getCompletionCandidates().size() > 1)   completeOperation.removeEscapedSpacesFromCompletionCandidates();
}","@Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  completeOperation.setOffset(completeOperation.getCursor());
  final File cwd;
  Object value=InputComponents.getValueFor(input);
  if (value == null) {
    UISelection<FileResource<?>> selection=context.getInitialSelection();
    cwd=selection.isEmpty() ? OperatingSystemUtils.getUserHomeDir() : selection.get().getUnderlyingResourceObject();
  }
 else {
    cwd=new File(value.toString());
  }
  FileLister fileLister=new FileLister(typedValue == null ? ""String_Node_Str"" : Parser.switchEscapedSpacesToSpacesInWord(typedValue),cwd,directory ? FileLister.Filter.DIRECTORY : FileLister.Filter.ALL);
  fileLister.findMatchingDirectories(completeOperation);
}",0.9279731993299832
151473,"@Override public void complete(CompleteOperation completeOperation){
  String line=completeOperation.getBuffer();
  ShellContext shellContext=shell.newShellContext(null);
  final AbstractShellInteraction cmd=shell.findCommand(shellContext,line);
  if (cmd == null) {
    Collection<AbstractShellInteraction> commands=shell.findMatchingCommands(shellContext,line);
    for (    AbstractShellInteraction command : commands) {
      completeOperation.addCompletionCandidate(command.getName());
    }
  }
 else   if (line.equals(cmd.getName())) {
    completeOperation.addCompletionCandidate(""String_Node_Str"");
  }
 else {
    try {
      ParsedCompleteObject completeObject=cmd.parseCompleteObject(line);
      if (completeObject.doDisplayOptions()) {
        List<String> options=cmd.getCompletionOptions(completeObject.getName(),line);
        completeOperation.addCompletionCandidates(options);
        if (completeOperation.getCompletionCandidates().size() == 1) {
          completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
        }
      }
 else {
        final InputComponent<?,Object> input;
        if (completeObject.isOption()) {
          input=cmd.getInputs().get(completeObject.getName());
        }
 else         if (completeObject.isArgument()) {
          input=cmd.getInputs().get(ARGUMENTS_INPUT_NAME);
        }
 else {
          input=null;
        }
        String typedValue=completeObject.getValue();
        if (input != null) {
          CompletionStrategy completionObj=CompletionStrategyFactory.getCompletionFor(input);
          completionObj.complete(completeOperation,input,shellContext,typedValue,shell.getConverterFactory());
        }
      }
    }
 catch (    ArgumentParserException e) {
      if (!cmd.getInputs().isEmpty()) {
        completeOperation.doAppendSeparator(false);
        completeOperation.addCompletionCandidate(line + ""String_Node_Str"");
      }
    }
catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
      return;
    }
  }
}","@Override public void complete(CompleteOperation completeOperation){
  String line=completeOperation.getBuffer();
  ShellContext shellContext=shell.newShellContext(null);
  final AbstractShellInteraction cmd=shell.findCommand(shellContext,line);
  if (cmd == null) {
    Collection<AbstractShellInteraction> commands=shell.findMatchingCommands(shellContext,line);
    for (    AbstractShellInteraction command : commands) {
      completeOperation.addCompletionCandidate(command.getName());
    }
  }
 else   if (line.equals(cmd.getName())) {
    completeOperation.addCompletionCandidate(""String_Node_Str"");
  }
 else {
    try {
      ParsedCompleteObject completeObject=cmd.parseCompleteObject(line);
      if (completeObject.doDisplayOptions()) {
        List<String> options=cmd.getCompletionOptions(completeObject.getName(),line);
        completeOperation.addCompletionCandidates(options);
        if (completeOperation.getCompletionCandidates().size() == 1) {
          completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
        }
      }
 else {
        final InputComponent<?,Object> input;
        if (completeObject.isOption()) {
          input=cmd.getInputs().get(completeObject.getName());
        }
 else         if (completeObject.isArgument()) {
          input=cmd.getInputs().get(ARGUMENTS_INPUT_NAME);
        }
 else {
          input=null;
        }
        String typedValue=completeObject.getValue();
        if (input != null) {
          CompletionStrategy completionObj=CompletionStrategyFactory.getCompletionFor(input);
          completionObj.complete(completeOperation,input,shellContext,typedValue,shell.getConverterFactory());
        }
        if (completeOperation.getCompletionCandidates().size() > 1) {
          completeOperation.removeEscapedSpacesFromCompletionCandidates();
        }
      }
    }
 catch (    ArgumentParserException e) {
      if (!cmd.getInputs().isEmpty()) {
        completeOperation.doAppendSeparator(false);
        completeOperation.addCompletionCandidate(line + ""String_Node_Str"");
      }
    }
catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
      return;
    }
  }
}",0.9635379910609267
151474,"@SuppressWarnings(""String_Node_Str"") @Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  boolean noTypedValue=Strings.isNullOrEmpty(typedValue);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (noTypedValue || convert.startsWith(typedValue)) {
      completeOperation.addCompletionCandidate(convert);
    }
  }
  if (!completeOperation.getCompletionCandidates().isEmpty() && !noTypedValue) {
    completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void complete(final CompleteOperation completeOperation,final InputComponent<?,Object> input,final ShellContext context,final String typedValue,final ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  List<String> choices=new ArrayList<String>();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (convert != null) {
      choices.add(convert);
    }
  }
  if (choices.size() > 1) {
    String startsWith=Parser.findStartsWith(choices);
    if (startsWith != null && startsWith.length() > 0 && startsWith.length() > typedValue.length()) {
      String substring=startsWith.substring(typedValue.length());
      String candidate=Parser.switchSpacesToEscapedSpacesInWord(substring);
      completeOperation.addCompletionCandidate(candidate);
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
 else {
      completeOperation.addCompletionCandidates(choices);
      if (!completeOperation.getCompletionCandidates().isEmpty() && !typedValue.isEmpty()) {
        completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
      }
    }
  }
 else   if (choices.size() == 1) {
    completeOperation.addCompletionCandidate(choices.get(0).substring(typedValue.length()));
    if (!completeOperation.getCompletionCandidates().isEmpty() && !typedValue.isEmpty()) {
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
  }
}",0.5294117647058824
151475,"@SuppressWarnings(""String_Node_Str"") @Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  UICompleter<Object> completer=InputComponents.getCompleterFor(input);
  if (completer != null) {
    final Converter<Object,String> converter;
    if (input instanceof SelectComponent) {
      converter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,(SelectComponent<?,?>)input);
    }
 else {
      converter=converterFactory.getConverter(input.getValueType(),String.class);
    }
    for (    Object proposal : completer.getCompletionProposals(context,input,typedValue)) {
      if (proposal != null) {
        String convertedValue=converter.convert(proposal);
        completeOperation.addCompletionCandidate(convertedValue);
      }
    }
    if (!completeOperation.getCompletionCandidates().isEmpty() && !Strings.isNullOrEmpty(typedValue)) {
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
  }
 else {
    if (fallback != null) {
      fallback.complete(completeOperation,input,context,typedValue,converterFactory);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  UICompleter<Object> completer=InputComponents.getCompleterFor(input);
  if (completer != null) {
    final Converter<Object,String> converter;
    if (input instanceof SelectComponent) {
      converter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,(SelectComponent<?,?>)input);
    }
 else {
      converter=converterFactory.getConverter(input.getValueType(),String.class);
    }
    List<String> choices=new ArrayList<String>();
    for (    Object proposal : completer.getCompletionProposals(context,input,typedValue)) {
      if (proposal != null) {
        String convertedValue=Parser.switchSpacesToEscapedSpacesInWord(converter.convert(proposal));
        choices.add(convertedValue);
      }
    }
    if (choices.size() > 1) {
      String startsWith=Parser.findStartsWith(choices);
      if (startsWith != null && startsWith.length() > 0 && startsWith.length() > typedValue.length()) {
        completeOperation.addCompletionCandidate(Parser.switchSpacesToEscapedSpacesInWord(startsWith.substring(typedValue.length())));
      }
 else {
        completeOperation.addCompletionCandidates(choices);
      }
    }
 else     if (choices.size() == 1) {
      completeOperation.addCompletionCandidate(choices.get(0).substring(typedValue.length()));
    }
    if (!completeOperation.getCompletionCandidates().isEmpty() && !Strings.isNullOrEmpty(typedValue)) {
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
  }
 else {
    if (fallback != null) {
      fallback.complete(completeOperation,input,context,typedValue,converterFactory);
    }
  }
}",0.7945205479452054
151476,"@Test public void testValuesWithSpaceCompletion() throws Exception {
  test.waitForCompletion(""String_Node_Str"",""String_Node_Str"",5,TimeUnit.SECONDS);
  test.waitForCompletion(""String_Node_Str"",""String_Node_Str"",5,TimeUnit.SECONDS);
}","@Test public void testValuesWithSpaceCompletion() throws Exception {
  test.waitForCompletion(""String_Node_Str"",""String_Node_Str"",5,TimeUnit.SECONDS);
}",0.7875647668393783
151477,"@SuppressWarnings(""String_Node_Str"") @Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (Strings.isNullOrEmpty(convert) || convert.startsWith(typedValue)) {
      completeOperation.addCompletionCandidate(convert);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void complete(CompleteOperation completeOperation,InputComponent<?,Object> input,ShellContext context,String typedValue,ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  boolean noTypedValue=Strings.isNullOrEmpty(typedValue);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (noTypedValue || convert.startsWith(typedValue)) {
      completeOperation.addCompletionCandidate(convert);
    }
  }
}",0.9342105263157896
151478,"@SuppressWarnings(""String_Node_Str"") @Override public void complete(final CompleteOperation completeOperation,final InputComponent<?,Object> input,final ShellContext context,final String typedValue,final ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  List<String> choices=new ArrayList<String>();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (convert != null) {
      choices.add(convert);
    }
  }
  if (choices.size() > 1) {
    String startsWith=Parser.findStartsWith(choices);
    if (startsWith != null && startsWith.length() > 0 && startsWith.length() > typedValue.length()) {
      String substring=startsWith.substring(typedValue.length());
      String candidate=Parser.switchSpacesToEscapedSpacesInWord(substring);
      completeOperation.addCompletionCandidate(candidate);
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
 else {
      completeOperation.addCompletionCandidates(choices);
      if (!completeOperation.getCompletionCandidates().isEmpty() && !typedValue.isEmpty()) {
        completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
      }
    }
  }
 else   if (choices.size() == 1) {
    completeOperation.addCompletionCandidate(choices.get(0).substring(typedValue.length()));
    if (!completeOperation.getCompletionCandidates().isEmpty() && !typedValue.isEmpty()) {
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void complete(final CompleteOperation completeOperation,final InputComponent<?,Object> input,final ShellContext context,final String typedValue,final ConverterFactory converterFactory){
  SelectComponent<?,Object> selectComponent=(SelectComponent<?,Object>)input;
  Converter<Object,String> itemLabelConverter=(Converter<Object,String>)InputComponents.getItemLabelConverter(converterFactory,selectComponent);
  Iterable<Object> valueChoices=selectComponent.getValueChoices();
  List<String> choices=new ArrayList<String>();
  for (  Object choice : valueChoices) {
    String convert=itemLabelConverter.convert(choice);
    if (convert != null) {
      choices.add(convert);
    }
  }
  if (choices.size() > 1) {
    String startsWith=Parser.findStartsWith(choices);
    if (startsWith.length() > typedValue.length()) {
      String substring=startsWith.substring(typedValue.length());
      String candidate=Parser.switchSpacesToEscapedSpacesInWord(substring);
      completeOperation.addCompletionCandidate(candidate);
      completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
      completeOperation.doAppendSeparator(false);
    }
 else {
      completeOperation.addCompletionCandidates(choices);
      if (!completeOperation.getCompletionCandidates().isEmpty() && !typedValue.isEmpty()) {
        completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
      }
    }
  }
 else   if (choices.size() == 1) {
    completeOperation.addCompletionCandidate(choices.get(0).substring(typedValue.length()));
    completeOperation.setOffset(completeOperation.getCursor() - typedValue.length());
  }
}",0.6476624857468644
151479,"@Override public void populateInputs(String line,boolean lenient) throws CommandLineParserException {
  CommandLine commandLine=getParser().parse(line,false,lenient);
  this.commandLineUtil.populateUIInputs(commandLine,inputs);
}","@Override public void populateInputs(String line,boolean lenient) throws CommandLineParserException {
  CommandLine commandLine=getParser().parse(line,lenient);
  this.commandLineUtil.populateUIInputs(commandLine,inputs);
}",0.986725663716814
151480,"@Override public void populateInputs(String line,boolean lenient) throws CommandLineParserException {
  UIWizard command=getSourceCommand();
  try {
    fullCommandLineParser=populate(command,command,line,true);
    if (!lenient) {
      fullCommandLineParser.parse(line,false,false);
    }
  }
 catch (  CommandLineParserException cpe) {
    throw cpe;
  }
catch (  Exception e) {
    throw new IllegalStateException(e);
  }
}","@Override public void populateInputs(String line,boolean lenient) throws CommandLineParserException {
  UIWizard command=getSourceCommand();
  try {
    fullCommandLineParser=populate(command,command,line,true);
    if (!lenient) {
      fullCommandLineParser.parse(line,false);
    }
  }
 catch (  CommandLineParserException cpe) {
    throw cpe;
  }
catch (  Exception e) {
    throw new IllegalStateException(e);
  }
}",0.9929245283018868
151481,"@SuppressWarnings(""String_Node_Str"") private CommandLineParser populate(UIWizard root,UIWizard current,String line,boolean lenient) throws Exception {
  addWizardStep(current);
  Map<String,InputComponent<?,Object>> inputs=getInputs();
  CommandLineParser parser=commandLineUtil.generateParser(root,inputs);
  CommandLine cmdLine=parser.parse(line,lenient,lenient);
  commandLineUtil.populateUIInputs(cmdLine,inputs);
  List<String> errors=validate();
  if (errors.isEmpty()) {
    NavigationResult next=current.next(getContext());
    if (next != null && next.getNext() != null) {
      Class<? extends UIWizardStep> nextWizardStep=(Class<? extends UIWizardStep>)next.getNext();
      UIWizardStep step=commandManager.lookup(nextWizardStep);
      parser=populate(root,step,line,lenient);
    }
  }
  return parser;
}","@SuppressWarnings(""String_Node_Str"") private CommandLineParser populate(UIWizard root,UIWizard current,String line,boolean lenient) throws Exception {
  addWizardStep(current);
  Map<String,InputComponent<?,Object>> inputs=getInputs();
  CommandLineParser parser=commandLineUtil.generateParser(root,inputs);
  CommandLine cmdLine=parser.parse(line,lenient);
  commandLineUtil.populateUIInputs(cmdLine,inputs);
  List<String> errors=validate();
  if (errors.isEmpty()) {
    NavigationResult next=current.next(getContext());
    if (next != null && next.getNext() != null) {
      Class<? extends UIWizardStep> nextWizardStep=(Class<? extends UIWizardStep>)next.getNext();
      UIWizardStep step=commandManager.lookup(nextWizardStep);
      parser=populate(root,step,line,lenient);
    }
  }
  return parser;
}",0.995085995085995
151482,"public CommandLineParser generateParser(UICommand command,Map<String,InputComponent<?,Object>> inputs){
  ParserBuilder builder=new ParserBuilder();
  UICommandMetadata metadata=command.getMetadata();
  ParameterInt parameter=new ParameterInt(ShellUtil.shellifyName(metadata.getName()),metadata.getDescription());
  for (  InputComponent<?,Object> input : inputs.values()) {
    if (!input.getName().equals(""String_Node_Str"")) {
      Object defaultValue=InputComponents.getValueFor(input);
      boolean isMultiple=input instanceof ManyValued;
      boolean hasValue=(InputComponents.getInputType(input) != InputType.CHECKBOX);
      try {
        OptionBuilder optionBuilder=new OptionBuilder();
        optionBuilder.name(input.getName()).defaultValue(defaultValue == null ? null : defaultValue.toString()).description(input.getLabel()).hasMultipleValues(isMultiple).hasValue(hasValue).required(input.isRequired());
        if (input.getShortName() != InputComponents.DEFAULT_SHORT_NAME) {
          optionBuilder.shortName(input.getShortName());
        }
        parameter.addOption(optionBuilder.create());
      }
 catch (      OptionParserException e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
  builder.parameter(parameter);
  return builder.generateParser();
}","public CommandLineParser generateParser(UICommand command,Map<String,InputComponent<?,Object>> inputs){
  ParserBuilder builder=new ParserBuilder();
  UICommandMetadata metadata=command.getMetadata();
  ParameterInt parameter=new ParameterInt(ShellUtil.shellifyName(metadata.getName()),metadata.getDescription());
  for (  InputComponent<?,Object> input : inputs.values()) {
    Object defaultValue=InputComponents.getValueFor(input);
    boolean isMultiple=input instanceof ManyValued;
    boolean hasValue=(InputComponents.getInputType(input) != InputType.CHECKBOX);
    try {
      OptionBuilder optionBuilder=new OptionBuilder();
      optionBuilder.name(input.getName()).defaultValue(defaultValue == null ? null : defaultValue.toString()).description(input.getLabel()).hasMultipleValues(isMultiple).hasValue(hasValue).required(input.isRequired());
      if (input.getShortName() != InputComponents.DEFAULT_SHORT_NAME) {
        optionBuilder.shortName(input.getShortName());
      }
      OptionInt option=optionBuilder.create();
      if (input.getName().equals(""String_Node_Str"")) {
        parameter.setArgument(option);
      }
 else {
        parameter.addOption(option);
      }
    }
 catch (    OptionParserException e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  builder.parameter(parameter);
  return builder.generateParser();
}",0.8488938882639671
151483,"@SuppressWarnings(""String_Node_Str"") public void populateUIInputs(CommandLine commandLine,Map<String,InputComponent<?,Object>> inputs){
  for (  InputComponent<?,Object> input : inputs.values()) {
    if (input.getName().equals(""String_Node_Str"") && input instanceof UIInputMany) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getArgument());
    }
 else     if (input instanceof UIInputMany) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValues(input.getName()));
    }
 else     if (input instanceof UIInput) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValue(input.getName()));
    }
 else     if (input instanceof UISelectMany) {
      setInputChoices((UISelectMany<Object>)input,commandLine.getOptionValues(input.getName()));
    }
 else     if (input instanceof UISelectOne) {
      setInputChoice((UISelectOne<Object>)input,commandLine.getOptionValue(input.getName()));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void populateUIInputs(CommandLine commandLine,Map<String,InputComponent<?,Object>> inputs){
  for (  InputComponent<?,Object> input : inputs.values()) {
    if (input.getName().equals(""String_Node_Str"") && input instanceof UIInputMany) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getArgument().getValue());
    }
 else     if (input instanceof UIInputMany) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValues(input.getName()));
    }
 else     if (input instanceof UIInput) {
      InputComponents.setValueFor(converterFactory,input,commandLine.getOptionValue(input.getName()));
    }
 else     if (input instanceof UISelectMany) {
      setInputChoices((UISelectMany<Object>)input,commandLine.getOptionValues(input.getName()));
    }
 else     if (input instanceof UISelectOne) {
      setInputChoice((UISelectOne<Object>)input,commandLine.getOptionValue(input.getName()));
    }
  }
}",0.9944247339077548
151484,"@PreDestroy public void destroyShell() throws Exception {
  if (this.shell != null) {
    this.shell.close();
    this.shell=null;
  }
}","@PreDestroy public void destroyShell(){
  if (this.shell != null) {
    this.shell.close();
    this.shell=null;
  }
}",0.9291338582677166
151485,"public void shutdown(@Observes PreShutdown preShutdown) throws Exception {
  destroyShell();
}","public void shutdown(@Observes PreShutdown preShutdown){
  destroyShell();
}",0.8941176470588236
151486,"@SuppressWarnings({}) @Override public void complete(CompleteOperation completeOperation){
  try {
    ParameterInt param=context.getParser().getParameter();
    if (param.getName().startsWith(completeOperation.getBuffer()))     completeOperation.addCompletionCandidate(param.getName());
 else     if (param.getName().equals(completeOperation.getBuffer().trim())) {
      defaultCompletion(completeOperation);
    }
 else     if (completeOperation.getBuffer().startsWith(param.getName())) {
      ParsedCompleteObject completeObject=null;
      completeObject=new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer());
      if (completeObject.doDisplayOptions()) {
        if (completeObject.getName() != null && completeObject.getName().length() > 0) {
          if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() > 0) {
            if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() == 1) {
              completeOperation.addCompletionCandidate(param.findPossibleLongNamesWitdDash(completeObject.getName()).get(0));
              completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
            }
 else             completeOperation.addCompletionCandidates(param.findPossibleLongNamesWitdDash(completeObject.getName()));
          }
        }
 else {
          if (param.getOptionLongNamesWithDash().size() > 1) {
            completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
          }
 else {
            completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
            completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
          }
        }
      }
 else       if (completeObject.isOption()) {
        optionCompletion(completeOperation,completeObject);
      }
 else       if (completeObject.isArgument()) {
        argumentCompletion(completeOperation,completeObject);
      }
    }
  }
 catch (  CommandLineParserException e) {
    logger.warning(e.getMessage());
    return;
  }
}","@SuppressWarnings({}) @Override public void complete(CompleteOperation completeOperation){
  try {
    ParameterInt param=context.getParser().getParameters().get(0);
    if (param.getName().startsWith(completeOperation.getBuffer()))     completeOperation.addCompletionCandidate(param.getName());
 else     if (param.getName().equals(completeOperation.getBuffer().trim())) {
      defaultCompletion(completeOperation);
    }
 else     if (completeOperation.getBuffer().startsWith(param.getName())) {
      ParsedCompleteObject completeObject=null;
      completeObject=new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer());
      if (completeObject.doDisplayOptions()) {
        if (completeObject.getName() != null && completeObject.getName().length() > 0) {
          if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() > 0) {
            if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() == 1) {
              completeOperation.addCompletionCandidate(param.findPossibleLongNamesWitdDash(completeObject.getName()).get(0));
              completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
            }
 else             completeOperation.addCompletionCandidates(param.findPossibleLongNamesWitdDash(completeObject.getName()));
          }
        }
 else {
          if (param.getOptionLongNamesWithDash().size() > 1) {
            completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
          }
 else {
            completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
            completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
          }
        }
      }
 else       if (completeObject.isOption()) {
        optionCompletion(completeOperation,completeObject);
      }
 else       if (completeObject.isArgument()) {
        argumentCompletion(completeOperation,completeObject);
      }
    }
  }
 catch (  CommandLineParserException e) {
    logger.warning(e.getMessage());
    return;
  }
}",0.9976359338061466
151487,"@SuppressWarnings({""String_Node_Str""}) private void defaultCompletion(CompleteOperation completeOperation) throws CommandLineParserException {
  InputComponent inputOption=context.findInput(""String_Node_Str"");
  if (inputOption != null) {
    argumentCompletion(completeOperation,new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer()));
  }
 else {
    completeOperation.addCompletionCandidates(context.getParser().getParameter().getOptionLongNamesWithDash());
  }
}","@SuppressWarnings({""String_Node_Str""}) private void defaultCompletion(CompleteOperation completeOperation) throws CommandLineParserException {
  InputComponent inputOption=context.findInput(""String_Node_Str"");
  if (inputOption != null) {
    argumentCompletion(completeOperation,new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer()));
  }
 else {
    completeOperation.addCompletionCandidates(context.getParser().getParameters().get(0).getOptionLongNamesWithDash());
  }
}",0.9903474903474904
151488,"public static CommandLineParser generateParser(UICommand command,ShellContext context){
  ParserBuilder builder=new ParserBuilder();
  ParameterInt parameter=new ParameterInt(command.getMetadata().getName(),command.getMetadata().getDescription());
  for (  InputComponent<?,?> input : context.getInputs()) {
    if (!input.getName().equals(""String_Node_Str"")) {
      try {
        if (input.getValueType() == Boolean.class) {
          parameter.addOption(new OptionBuilder().longName(input.getName()).hasValue(false).description(input.getLabel()).create());
        }
 else {
          parameter.addOption(new OptionBuilder().longName(input.getName()).description(input.getLabel()).required(input.isRequired()).create());
        }
      }
 catch (      OptionParserException e) {
      }
    }
  }
  builder.parameter(parameter);
  return builder.generateParser();
}","public static CommandLineParser generateParser(UICommand command,ShellContext context){
  ParserBuilder builder=new ParserBuilder();
  ParameterInt parameter=new ParameterInt(command.getMetadata().getName(),command.getMetadata().getDescription());
  for (  InputComponent<?,?> input : context.getInputs()) {
    if (!input.getName().equals(""String_Node_Str"")) {
      try {
        if (input.getValueType() == Boolean.class) {
          parameter.addOption(new OptionBuilder().longName(input.getName()).hasValue(false).description(input.getLabel()).create());
        }
 else {
          parameter.addOption(new OptionBuilder().longName(input.getName()).description(input.getLabel()).required(input.isRequired()).create());
        }
      }
 catch (      OptionParserException e) {
      }
    }
  }
  builder.addParameter(parameter);
  return builder.generateParser();
}",0.997128087306146
151489,"@Test public void testGenerateParser() throws Exception {
  ShellContext context=new ShellContext(null);
  Foo1Command foo1=new Foo1Command();
  foo1.initializeUI(context);
  CommandLineParser parser=CommandLineUtil.generateParser(foo1,context);
  assertEquals(""String_Node_Str"",parser.getParameter().getName());
  Foo2Command foo2=new Foo2Command();
  foo2.initializeUI(context);
  parser=CommandLineUtil.generateParser(foo2,context);
  ParameterInt param=parser.getParameter();
  assertEquals(""String_Node_Str"",param.getName());
  assertEquals(""String_Node_Str"",param.findLongOption(""String_Node_Str"").getName());
  assertEquals(""String_Node_Str"",param.findLongOption(""String_Node_Str"").getName());
}","@Test public void testGenerateParser() throws Exception {
  ShellContext context=new ShellContext(null);
  Foo1Command foo1=new Foo1Command();
  foo1.initializeUI(context);
  CommandLineParser parser=CommandLineUtil.generateParser(foo1,context);
  assertEquals(""String_Node_Str"",parser.getParameters().get(0).getName());
  Foo2Command foo2=new Foo2Command();
  foo2.initializeUI(context);
  parser=CommandLineUtil.generateParser(foo2,context);
  ParameterInt param=parser.getParameters().get(0);
  assertEquals(""String_Node_Str"",param.getName());
  assertEquals(""String_Node_Str"",param.findLongOption(""String_Node_Str"").getName());
  assertEquals(""String_Node_Str"",param.findLongOption(""String_Node_Str"").getName());
}",0.9859154929577464
151490,"@Override public File[] resolveResources(final AddonId addonId){
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  DefaultRepositorySystemSession session=container.setupRepoSession(system,settings);
  final String mavenCoords=toMavenCoords(addonId);
  Artifact queryArtifact=new DefaultArtifact(mavenCoords);
  session.setDependencyTraverser(new DependencyTraverser(){
    @Override public boolean traverseDependency(    Dependency dependency){
      Artifact artifact=dependency.getArtifact();
      boolean isForgeAddon=""String_Node_Str"".equals(artifact.getClassifier());
      if (!isForgeAddon && dependency.isOptional()) {
        return false;
      }
      boolean shouldRecurse=!""String_Node_Str"".equals(dependency.getScope());
      return shouldRecurse;
    }
    @Override public DependencyTraverser deriveChildTraverser(    DependencyCollectionContext context){
      return this;
    }
  }
);
  session.setDependencySelector(new AddonDependencySelector());
  Dependency dependency=new Dependency(queryArtifact,null);
  CollectRequest collectRequest=new CollectRequest(dependency,container.getEnabledRepositoriesFromProfile(settings));
  DependencyResult result;
  try {
    result=system.resolveDependencies(session,new DependencyRequest(collectRequest,null));
  }
 catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  Set<File> files=new HashSet<File>();
  List<ArtifactResult> artifactResults=result.getArtifactResults();
  for (  ArtifactResult artifactResult : artifactResults) {
    Artifact artifact=artifactResult.getArtifact();
    if (FORGE_ADDON_CLASSIFIER.equals(artifact.getClassifier()) && !mavenCoords.equals(artifact.toString())) {
      continue;
    }
    files.add(artifact.getFile());
  }
  return files.toArray(new File[files.size()]);
}","@Override public File[] resolveResources(final AddonId addonId){
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  DefaultRepositorySystemSession session=container.setupRepoSession(system,settings);
  final String mavenCoords=toMavenCoords(addonId);
  Artifact queryArtifact=new DefaultArtifact(mavenCoords);
  session.setDependencyTraverser(new DependencyTraverser(){
    @Override public boolean traverseDependency(    Dependency dependency){
      Artifact artifact=dependency.getArtifact();
      boolean isForgeAddon=""String_Node_Str"".equals(artifact.getClassifier());
      if (!isForgeAddon && dependency.isOptional()) {
        return false;
      }
      boolean shouldRecurse=!""String_Node_Str"".equals(dependency.getScope());
      return shouldRecurse;
    }
    @Override public DependencyTraverser deriveChildTraverser(    DependencyCollectionContext context){
      return this;
    }
  }
);
  session.setDependencySelector(new AddonDependencySelector());
  Dependency dependency=new Dependency(queryArtifact,null);
  List<RemoteRepository> repositories=MavenRepositories.getRemoteRepositories(container,settings);
  CollectRequest collectRequest=new CollectRequest(dependency,repositories);
  DependencyResult result;
  try {
    result=system.resolveDependencies(session,new DependencyRequest(collectRequest,null));
  }
 catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  Set<File> files=new HashSet<File>();
  List<ArtifactResult> artifactResults=result.getArtifactResults();
  for (  ArtifactResult artifactResult : artifactResults) {
    Artifact artifact=artifactResult.getArtifact();
    if (FORGE_ADDON_CLASSIFIER.equals(artifact.getClassifier()) && !mavenCoords.equals(artifact.toString())) {
      continue;
    }
    files.add(artifact.getFile());
  }
  return files.toArray(new File[files.size()]);
}",0.956544780074192
151491,"private DependencyNode traverseAddonGraph(String coords,RepositorySystem system,Settings settings,DefaultRepositorySystemSession session){
  session.setDependencyTraverser(new DependencyTraverser(){
    @Override public boolean traverseDependency(    Dependency dependency){
      boolean isForgeAddon=""String_Node_Str"".equals(dependency.getArtifact().getClassifier());
      if (!isForgeAddon && dependency.isOptional()) {
        return false;
      }
      boolean shouldRecurse=!""String_Node_Str"".equals(dependency.getScope());
      return shouldRecurse;
    }
    @Override public DependencyTraverser deriveChildTraverser(    DependencyCollectionContext context){
      return this;
    }
  }
);
  session.setDependencySelector(new AddonDependencySelector());
  Artifact queryArtifact=new DefaultArtifact(coords);
  CollectRequest collectRequest=new CollectRequest(new Dependency(queryArtifact,null),container.getEnabledRepositoriesFromProfile(settings));
  CollectResult result;
  try {
    result=system.collectDependencies(session,collectRequest);
  }
 catch (  DependencyCollectionException e) {
    throw new RuntimeException(e);
  }
  return result.getRoot();
}","private DependencyNode traverseAddonGraph(String coords,RepositorySystem system,Settings settings,DefaultRepositorySystemSession session){
  session.setDependencyTraverser(new DependencyTraverser(){
    @Override public boolean traverseDependency(    Dependency dependency){
      boolean isForgeAddon=""String_Node_Str"".equals(dependency.getArtifact().getClassifier());
      if (!isForgeAddon && dependency.isOptional()) {
        return false;
      }
      boolean shouldRecurse=!""String_Node_Str"".equals(dependency.getScope());
      return shouldRecurse;
    }
    @Override public DependencyTraverser deriveChildTraverser(    DependencyCollectionContext context){
      return this;
    }
  }
);
  session.setDependencySelector(new AddonDependencySelector());
  Artifact queryArtifact=new DefaultArtifact(coords);
  List<RemoteRepository> repositories=MavenRepositories.getRemoteRepositories(container,settings);
  CollectRequest collectRequest=new CollectRequest(new Dependency(queryArtifact,null),repositories);
  CollectResult result;
  try {
    result=system.collectDependencies(session,collectRequest);
  }
 catch (  DependencyCollectionException e) {
    throw new RuntimeException(e);
  }
  return result.getRoot();
}",0.867720465890183
151492,"private VersionRangeResult getVersions(String addonName,String version){
  try {
    String[] split=addonName.split(""String_Node_Str"");
    if (split.length == 2) {
      version=split[1];
    }
    if (version == null || version.isEmpty()) {
      version=""String_Node_Str"";
    }
 else     if (!version.matches(""String_Node_Str"")) {
      version=""String_Node_Str"" + version + ""String_Node_Str"";
    }
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    DefaultRepositorySystemSession session=container.setupRepoSession(system,settings);
    Artifact artifact=new DefaultArtifact(toMavenCoords(AddonId.from(addonName,version)));
    List<RemoteRepository> remoteRepos=container.getEnabledRepositoriesFromProfile(settings);
    VersionRangeRequest rangeRequest=new VersionRangeRequest(artifact,remoteRepos,null);
    VersionRangeResult rangeResult=system.resolveVersionRange(session,rangeRequest);
    return rangeResult;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + addonName + ""String_Node_Str"",e);
  }
}","private VersionRangeResult getVersions(String addonName,String version){
  try {
    String[] split=addonName.split(""String_Node_Str"");
    if (split.length == 2) {
      version=split[1];
    }
    if (version == null || version.isEmpty()) {
      version=""String_Node_Str"";
    }
 else     if (!version.matches(""String_Node_Str"")) {
      version=""String_Node_Str"" + version + ""String_Node_Str"";
    }
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    DefaultRepositorySystemSession session=container.setupRepoSession(system,settings);
    Artifact artifact=new DefaultArtifact(toMavenCoords(AddonId.from(addonName,version)));
    List<RemoteRepository> repositories=MavenRepositories.getRemoteRepositories(container,settings);
    VersionRangeRequest rangeRequest=new VersionRangeRequest(artifact,repositories,null);
    VersionRangeResult rangeResult=system.resolveVersionRange(session,rangeRequest);
    return rangeResult;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + addonName + ""String_Node_Str"",e);
  }
}",0.8752260397830018
151493,"@Override public Dependency resolveArtifact(DependencyQuery query){
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  List<RemoteRepository> remoteRepos=getRemoteRepositories(query,settings);
  MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
  Artifact queryArtifact=coordinateToMavenArtifact(query.getCoordinate());
  ArtifactRequest request=new ArtifactRequest(queryArtifact,remoteRepos,null);
  try {
    ArtifactResult resolvedArtifact=system.resolveArtifact(session,request);
    Artifact artifact=resolvedArtifact.getArtifact();
    @SuppressWarnings(""String_Node_Str"") FileResource<?> artifactResource=factory.create(FileResource.class,artifact.getFile());
    return DependencyBuilder.create().setArtifact(artifactResource).setGroupId(artifact.getGroupId()).setArtifactId(artifact.getArtifactId()).setClassifier(artifact.getClassifier()).setPackaging(artifact.getExtension()).setVersion(artifact.getBaseVersion());
  }
 catch (  ArtifactResolutionException e) {
    throw new MavenOperationException(e);
  }
}","@Override public Dependency resolveArtifact(DependencyQuery query){
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  List<RemoteRepository> remoteRepos=MavenRepositories.getRemoteRepositories(container,settings,query);
  MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
  Artifact queryArtifact=MavenConvertUtils.coordinateToMavenArtifact(query.getCoordinate());
  ArtifactRequest request=new ArtifactRequest(queryArtifact,remoteRepos,null);
  try {
    ArtifactResult resolvedArtifact=system.resolveArtifact(session,request);
    Artifact artifact=resolvedArtifact.getArtifact();
    @SuppressWarnings(""String_Node_Str"") FileResource<?> artifactResource=factory.create(FileResource.class,artifact.getFile());
    return DependencyBuilder.create().setArtifact(artifactResource).setGroupId(artifact.getGroupId()).setArtifactId(artifact.getArtifactId()).setClassifier(artifact.getClassifier()).setPackaging(artifact.getExtension()).setVersion(artifact.getBaseVersion());
  }
 catch (  ArtifactResolutionException e) {
    throw new MavenOperationException(e);
  }
}",0.9716814159292037
151494,"@Override public org.jboss.forge.addon.dependencies.DependencyNode resolveDependencyHierarchy(final DependencyQuery query){
  try {
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
    session.setTransferListener(new LogTransferListener());
    session.setDependencyTraverser(new DependencyTraverser(){
      @Override public boolean traverseDependency(      org.sonatype.aether.graph.Dependency dependency){
        if (query.getScopeType() != null)         return query.getScopeType().equals(dependency.getScope());
 else         return !""String_Node_Str"".equals(dependency.getScope());
      }
      @Override public DependencyTraverser deriveChildTraverser(      DependencyCollectionContext context){
        return this;
      }
    }
);
    session.setDependencySelector(new ScopeDependencySelector(""String_Node_Str""));
    final CoordinateBuilder coord=CoordinateBuilder.create(query.getCoordinate());
    Artifact queryArtifact=coordinateToMavenArtifact(coord);
    List<RemoteRepository> remoteRepos=getRemoteRepositories(query,settings);
    CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,null),remoteRepos);
    DependencyRequest dr=new DependencyRequest(collectRequest,null);
    DependencyResult result=system.resolveDependencies(session,dr);
    DependencyNodeBuilder hierarchy=MavenConvertUtils.toDependencyNode(factory,null,result.getRoot());
    return hierarchy;
  }
 catch (  Exception e) {
    throw new DependencyException(""String_Node_Str"" + query.getCoordinate() + ""String_Node_Str"",e);
  }
}","@Override public org.jboss.forge.addon.dependencies.DependencyNode resolveDependencyHierarchy(final DependencyQuery query){
  try {
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
    session.setTransferListener(new LogTransferListener());
    session.setDependencyTraverser(new DependencyTraverser(){
      @Override public boolean traverseDependency(      org.sonatype.aether.graph.Dependency dependency){
        if (query.getScopeType() != null)         return query.getScopeType().equals(dependency.getScope());
 else         return !""String_Node_Str"".equals(dependency.getScope());
      }
      @Override public DependencyTraverser deriveChildTraverser(      DependencyCollectionContext context){
        return this;
      }
    }
);
    session.setDependencySelector(new ScopeDependencySelector(""String_Node_Str""));
    final CoordinateBuilder coord=CoordinateBuilder.create(query.getCoordinate());
    Artifact queryArtifact=MavenConvertUtils.coordinateToMavenArtifact(coord);
    List<RemoteRepository> remoteRepos=MavenRepositories.getRemoteRepositories(container,settings,query);
    CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,null),remoteRepos);
    DependencyRequest dr=new DependencyRequest(collectRequest,null);
    DependencyResult result=system.resolveDependencies(session,dr);
    DependencyNodeBuilder hierarchy=MavenConvertUtils.toDependencyNode(factory,null,result.getRoot());
    return hierarchy;
  }
 catch (  Exception e) {
    throw new DependencyException(""String_Node_Str"" + query.getCoordinate() + ""String_Node_Str"",e);
  }
}",0.7913793103448276
151495,"@Override public DependencyMetadata resolveDependencyMetadata(final DependencyQuery query){
  try {
    if (Strings.isNullOrEmpty(query.getCoordinate().getVersion())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
    Artifact artifact=coordinateToMavenArtifact(query.getCoordinate());
    List<RemoteRepository> mavenRepositories=getRemoteRepositories(query,settings);
    ArtifactDescriptorRequest ar=new ArtifactDescriptorRequest(artifact,mavenRepositories,null);
    ArtifactDescriptorResult results=system.readArtifactDescriptor(session,ar);
    Artifact a=results.getArtifact();
    Dependency d=DependencyBuilder.create().setArtifactId(a.getArtifactId()).setGroupId(a.getGroupId()).setVersion(a.getBaseVersion());
    return new DependencyMetadataImpl(d,results);
  }
 catch (  Exception e) {
    throw new DependencyException(""String_Node_Str"" + query + ""String_Node_Str"",e);
  }
}","@Override public DependencyMetadata resolveDependencyMetadata(final DependencyQuery query){
  try {
    if (Strings.isNullOrEmpty(query.getCoordinate().getVersion())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    RepositorySystem system=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
    Artifact artifact=MavenConvertUtils.coordinateToMavenArtifact(query.getCoordinate());
    List<RemoteRepository> mavenRepositories=MavenRepositories.getRemoteRepositories(container,settings,query);
    ArtifactDescriptorRequest ar=new ArtifactDescriptorRequest(artifact,mavenRepositories,null);
    ArtifactDescriptorResult results=system.readArtifactDescriptor(session,ar);
    Artifact a=results.getArtifact();
    Dependency d=DependencyBuilder.create().setArtifactId(a.getArtifactId()).setGroupId(a.getGroupId()).setVersion(a.getBaseVersion());
    return new DependencyMetadataImpl(d,results);
  }
 catch (  Exception e) {
    throw new DependencyException(""String_Node_Str"" + query + ""String_Node_Str"",e);
  }
}",0.952127659574468
151496,"/** 
 * Returns the versions of a specific artifact
 * @param query
 * @return
 */
VersionRangeResult getVersions(DependencyQuery query){
  Coordinate dep=query.getCoordinate();
  try {
    String version=dep.getVersion();
    if (version == null || version.isEmpty()) {
      dep=CoordinateBuilder.create(dep).setVersion(""String_Node_Str"");
    }
 else     if (!version.matches(""String_Node_Str"")) {
      dep=CoordinateBuilder.create(dep).setVersion(""String_Node_Str"" + version + ""String_Node_Str"");
    }
    RepositorySystem maven=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(maven,settings);
    Artifact artifact=coordinateToMavenArtifact(dep);
    List<RemoteRepository> remoteRepos=getRemoteRepositories(query,settings);
    VersionRangeRequest rangeRequest=new VersionRangeRequest(artifact,remoteRepos,null);
    VersionRangeResult rangeResult=maven.resolveVersionRange(session,rangeRequest);
    return rangeResult;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + dep + ""String_Node_Str"",e);
  }
}","/** 
 * Returns the versions of a specific artifact
 * @param query
 * @return
 */
VersionRangeResult getVersions(DependencyQuery query){
  Coordinate dep=query.getCoordinate();
  try {
    String version=dep.getVersion();
    if (version == null || version.isEmpty()) {
      dep=CoordinateBuilder.create(dep).setVersion(""String_Node_Str"");
    }
 else     if (!version.matches(""String_Node_Str"")) {
      dep=CoordinateBuilder.create(dep).setVersion(""String_Node_Str"" + version + ""String_Node_Str"");
    }
    RepositorySystem maven=container.getRepositorySystem();
    Settings settings=container.getSettings();
    MavenRepositorySystemSession session=container.setupRepoSession(maven,settings);
    Artifact artifact=MavenConvertUtils.coordinateToMavenArtifact(dep);
    List<RemoteRepository> remoteRepos=MavenRepositories.getRemoteRepositories(container,settings,query);
    VersionRangeRequest rangeRequest=new VersionRangeRequest(artifact,remoteRepos,null);
    VersionRangeResult rangeResult=maven.resolveVersionRange(session,rangeRequest);
    return rangeResult;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + dep + ""String_Node_Str"",e);
  }
}",0.953648068669528
151497,"@Override public Set<Dependency> resolveDependencies(DependencyQuery query){
  Set<Dependency> result=new HashSet<Dependency>();
  Predicate<Dependency> filter=query.getDependencyFilter();
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
  Artifact queryArtifact=coordinateToMavenArtifact(query.getCoordinate());
  List<RemoteRepository> remoteRepos=getRemoteRepositories(query,settings);
  CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,query.getScopeType()),remoteRepos);
  DependencyRequest request=new DependencyRequest(collectRequest,null);
  DependencyResult artifacts;
  try {
    artifacts=system.resolveDependencies(session,request);
  }
 catch (  NullPointerException e) {
    throw new RuntimeException(""String_Node_Str"" + query + ""String_Node_Str"",e);
  }
catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  DependencyNode root=artifacts.getRoot();
  for (  DependencyNode node : root.getChildren()) {
    Dependency d=MavenConvertUtils.convertToDependency(factory,node);
    if (filter == null || filter.accept(d)) {
      result.add(d);
    }
  }
  return result;
}","@Override public Set<Dependency> resolveDependencies(DependencyQuery query){
  Set<Dependency> result=new HashSet<Dependency>();
  Predicate<Dependency> filter=query.getDependencyFilter();
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  MavenRepositorySystemSession session=container.setupRepoSession(system,settings);
  Artifact queryArtifact=MavenConvertUtils.coordinateToMavenArtifact(query.getCoordinate());
  List<RemoteRepository> remoteRepos=MavenRepositories.getRemoteRepositories(container,settings,query);
  CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,query.getScopeType()),remoteRepos);
  DependencyRequest request=new DependencyRequest(collectRequest,null);
  DependencyResult artifacts;
  try {
    artifacts=system.resolveDependencies(session,request);
  }
 catch (  NullPointerException e) {
    throw new RuntimeException(""String_Node_Str"" + query + ""String_Node_Str"",e);
  }
catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  DependencyNode root=artifacts.getRoot();
  for (  DependencyNode node : root.getChildren()) {
    Dependency d=MavenConvertUtils.convertToDependency(factory,node);
    if (filter == null || filter.accept(d)) {
      result.add(d);
    }
  }
  return result;
}",0.9789631855747558
151498,"@Test public void testProjectFacet() throws Exception {
  Project project=projectFactory.createTempProject();
  ConfigurationFacet facet=facetFactory.install(ConfigurationFacet.class,project);
  Assert.assertFalse(facet.getConfigLocation().exists());
  Configuration config=facet.getConfiguration();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Assert.assertTrue(facet.getConfigLocation().exists());
}","@Test public void testProjectFacet() throws Exception {
  Project project=projectFactory.createTempProject();
  ConfigurationFacet facet=facetFactory.install(project,ConfigurationFacet.class);
  Assert.assertFalse(facet.getConfigLocation().exists());
  Configuration config=facet.getConfiguration();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Assert.assertTrue(facet.getConfigLocation().exists());
}",0.9808153477218226
151499,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void complete(CompleteOperation completeOperation){
  ParameterInt param=context.getParser().getParameters().get(0);
  if (param.getName().startsWith(completeOperation.getBuffer()))   completeOperation.addCompletionCandidate(param.getName());
 else   if (param.getName().equals(completeOperation.getBuffer().trim())) {
    completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
  }
 else   if (completeOperation.getBuffer().startsWith(param.getName())) {
    ParsedCompleteObject completeObject=null;
    try {
      completeObject=new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer());
    }
 catch (    CommandLineParserException e) {
      logger.info(e.getMessage());
      return;
    }
    logger.info(""String_Node_Str"" + completeObject);
    if (completeObject.doDisplayOptions()) {
      if (completeObject.getName() != null && completeObject.getName().length() > 0) {
        if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() > 0) {
          if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() == 1) {
            completeOperation.addCompletionCandidate(param.findPossibleLongNamesWitdDash(completeObject.getName()).get(0));
            completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
          }
 else           completeOperation.addCompletionCandidates(param.findPossibleLongNamesWitdDash(completeObject.getName()));
        }
      }
 else {
        if (param.getOptionLongNamesWithDash().size() > 1) {
          completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
        }
 else {
          completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
          completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
        }
      }
    }
 else     if (completeObject.isOption()) {
      InputComponent inputOption=context.findInput(completeObject.getName());
      if (inputOption != null && inputOption.getValueType() == File.class) {
        completeOperation.setOffset(completeOperation.getCursor());
        if (completeObject.getValue() == null)         new FileLister(""String_Node_Str"",new File(System.getProperty(""String_Node_Str""))).findMatchingDirectories(completeOperation);
 else         new FileLister(completeObject.getValue(),new File(System.getProperty(""String_Node_Str""))).findMatchingDirectories(completeOperation);
      }
 else       if (inputOption != null && inputOption.getValueType() == Boolean.class) {
      }
 else       if (inputOption != null && inputOption.getValueType() == String.class) {
        if (inputOption instanceof UIInput) {
          if (completeObject.getValue() == null || ((((UIInput)inputOption).getValue() != null) && completeObject.getValue().startsWith(((UIInput)inputOption).getValue().toString()))) {
            completeOperation.addCompletionCandidate(((UIInput)inputOption).getValue().toString());
          }
        }
      }
      if (inputOption != null && inputOption instanceof UIInput) {
        Iterable<String> iter=((UIInput)inputOption).getCompleter().getCompletionProposals(null,inputOption,completeObject.getValue());
        if (iter != null) {
          for (          String s : iter)           completeOperation.addCompletionCandidate(s);
        }
        if (completeOperation.getCompletionCandidates().size() == 1) {
          completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
        }
      }
    }
 else     if (completeObject.isArgument()) {
      InputComponent inputOption=context.findInput(""String_Node_Str"");
      if (inputOption != null && inputOption.getValueType() == File.class) {
        completeOperation.setOffset(completeOperation.getCursor());
        if (completeObject.getValue() == null)         new FileLister(""String_Node_Str"",new File(System.getProperty(""String_Node_Str""))).findMatchingDirectories(completeOperation);
 else         new FileLister(completeObject.getValue(),new File(System.getProperty(""String_Node_Str""))).findMatchingDirectories(completeOperation);
      }
 else       if (inputOption != null && inputOption.getValueType() == Boolean.class) {
      }
 else       if (command instanceof Completion) {
        ((Completion)command).complete(completeOperation);
      }
 else {
        if (inputOption != null && inputOption instanceof UIInputMany) {
          Iterable<String> iter=((UIInputMany)inputOption).getCompleter().getCompletionProposals(null,inputOption,completeObject.getValue());
          if (iter != null) {
            for (            String s : iter) {
              completeOperation.addCompletionCandidate(s);
            }
          }
          if (completeOperation.getCompletionCandidates().size() == 1) {
            completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void complete(CompleteOperation completeOperation){
  ParameterInt param=context.getParser().getParameters().get(0);
  if (param.getName().startsWith(completeOperation.getBuffer()))   completeOperation.addCompletionCandidate(param.getName());
 else   if (param.getName().equals(completeOperation.getBuffer().trim())) {
    defaultCompletion(completeOperation);
  }
 else   if (completeOperation.getBuffer().startsWith(param.getName())) {
    ParsedCompleteObject completeObject=null;
    try {
      completeObject=new CommandLineCompletionParser(context.getParser()).findCompleteObject(completeOperation.getBuffer());
    }
 catch (    CommandLineParserException e) {
      logger.warning(e.getMessage());
      return;
    }
    if (completeObject.doDisplayOptions()) {
      if (completeObject.getName() != null && completeObject.getName().length() > 0) {
        if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() > 0) {
          if (param.findPossibleLongNamesWitdDash(completeObject.getName()).size() == 1) {
            completeOperation.addCompletionCandidate(param.findPossibleLongNamesWitdDash(completeObject.getName()).get(0));
            completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
          }
 else           completeOperation.addCompletionCandidates(param.findPossibleLongNamesWitdDash(completeObject.getName()));
        }
      }
 else {
        if (param.getOptionLongNamesWithDash().size() > 1) {
          completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
        }
 else {
          completeOperation.addCompletionCandidates(param.getOptionLongNamesWithDash());
          completeOperation.setOffset(completeOperation.getCursor() - completeObject.getOffset());
        }
      }
    }
 else     if (completeObject.isOption()) {
      optionCompletion(completeOperation,completeObject);
    }
 else     if (completeObject.isArgument()) {
      argumentCompletion(completeOperation,completeObject);
    }
  }
}",0.1543408360128617
151500,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  arguments.setDefaultValue(Arrays.asList(getMetadata().getName()));
  arguments.setLabel(""String_Node_Str"");
  arguments.setRequired(false);
  builder.add(arguments);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  arguments.setDefaultValue(Arrays.asList(getMetadata().getName()));
  arguments.setLabel(""String_Node_Str"");
  arguments.setRequired(false);
  arguments.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    InputComponent<?,String> input,    String value){
      List<String> manCommands=new ArrayList<String>();
      if (value == null || value.trim().length() < 1) {
        for (        ExportedInstance<UICommand> instance : registry.getExportedInstances(UICommand.class)) {
          manCommands.add(instance.get().getMetadata().getName());
        }
      }
 else {
        String item=Parser.findEscapedSpaceWordCloseToEnd(value.trim());
        for (        ExportedInstance<UICommand> instance : registry.getExportedInstances(UICommand.class)) {
          if (instance.get().getMetadata().getName().startsWith(item))           manCommands.add(instance.get().getMetadata().getName());
        }
      }
      return manCommands;
    }
  }
);
  builder.add(arguments);
}",0.3303571428571428
151501,"@Override public void previous() throws Exception {
  if (!canFlipToPreviousPage()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  pages.poll();
}","@Override public void previous() throws Exception {
  if (!canFlipToPreviousPage()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  pages.removeLast();
}",0.963855421686747
151502,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  Set<AddonId> choices=new HashSet<AddonId>();
  for (  AddonRepository repository : forge.getRepositories()) {
    if (repository instanceof MutableAddonRepository) {
      for (      AddonId id : repository.listEnabled()) {
        choices.add(id);
      }
    }
  }
  addons.setValueChoices(choices);
  Project project=getSelectedProject(builder.getUIContext());
  if (project != null) {
    MetadataFacet facet=project.getFacet(MetadataFacet.class);
    String name=facet.getTopLevelPackage() + facet.getProjectName();
    AddonId selectedAddonId=AddonId.from(name,facet.getProjectVersion());
    if (choices.contains(selectedAddonId)) {
      addons.setDefaultValue(Arrays.asList(selectedAddonId));
    }
  }
  builder.add(addons);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  Set<AddonId> choices=new HashSet<AddonId>();
  for (  AddonRepository repository : forge.getRepositories()) {
    if (repository instanceof MutableAddonRepository) {
      for (      AddonId id : repository.listEnabled()) {
        choices.add(id);
      }
    }
  }
  addons.setValueChoices(choices);
  Project project=getSelectedProject(builder.getUIContext());
  if (project != null) {
    MetadataFacet facet=project.getFacet(MetadataFacet.class);
    String name=facet.getTopLevelPackage() + ""String_Node_Str"" + facet.getProjectName();
    AddonId selectedAddonId=AddonId.from(name,facet.getProjectVersion());
    if (choices.contains(selectedAddonId)) {
      addons.setDefaultValue(Collections.singleton(selectedAddonId));
    }
  }
  builder.add(addons);
}",0.9672727272727272
151503,"private JPADataSource getDataSource(UIContext context){
  JPADataSource dataSource=new JPADataSource();
  dataSource.setDatabase(dbType.getValue());
  dataSource.setDatabaseURL(databaseURL.getValue());
  dataSource.setUsername(username.getValue());
  dataSource.setPassword(password.getValue());
  dataSource.setProvider((PersistenceProvider)context.getAttribute(PersistenceProvider.class));
  dataSource.setContainer((PersistenceContainer)context.getAttribute(PersistenceContainer.class));
  return dataSource;
}","private JPADataSource getDataSource(UIContext context){
  JPADataSource dataSource=new JPADataSource();
  dataSource.setDatabase(dbType.getValue());
  dataSource.setJndiDataSource(dataSourceName.getValue());
  dataSource.setDatabaseURL(databaseURL.getValue());
  dataSource.setUsername(username.getValue());
  dataSource.setPassword(password.getValue());
  dataSource.setProvider((PersistenceProvider)context.getAttribute(PersistenceProvider.class));
  dataSource.setContainer((PersistenceContainer)context.getAttribute(PersistenceContainer.class));
  return dataSource;
}",0.9456221198156682
151504,"public TestShellStreamProvider(){
  stdin=new PipedOutputStream();
  stdout=new ByteArrayOutputStream();
  stderr=new ByteArrayOutputStream();
}","public TestShellStreamProvider(){
  stdin=new PipedOutputStream();
  stdout=new ByteArrayOutputStream();
  stderr=new ByteArrayOutputStream();
  inputStream=null;
}",0.935064935064935
151505,"@Override public String toString(){
  return wrapped.getAnnotated().getBaseType().toString();
}","@Override public String toString(){
  return wrapped.toString();
}",0.8198757763975155
151506,"private Object loadObject() throws Exception {
  Object result=null;
  for (  Addon addon : registry.getAddons(AddonFilters.allLoaded())) {
    if (ClassLoaders.containsClass(addon.getClassLoader(),serviceType)) {
      Addons.waitUntilStarted(addon);
      ServiceRegistry serviceRegistry=addon.getServiceRegistry();
      if (serviceRegistry.hasService(serviceType)) {
        ExportedInstance<?> instance=serviceRegistry.getExportedInstance(serviceType);
        Assert.notNull(instance,""String_Node_Str"" + serviceType.getName() + ""String_Node_Str""+ addon.getId()+ ""String_Node_Str"");
        if (instance instanceof ExportedInstanceImpl)         result=((ExportedInstanceImpl<?>)instance).get(new LocalServiceInjectionPoint(injectionPoint,serviceType));
 else         result=instance.get();
        break;
      }
    }
  }
  if (result == null) {
    throw new IllegalStateException(""String_Node_Str"" + serviceType.getName() + ""String_Node_Str"");
  }
  return result;
}","private Object loadObject() throws Exception {
  Object result=null;
  for (  Addon addon : registry.getAddons(AddonFilters.allLoaded())) {
    if (ClassLoaders.containsClass(addon.getClassLoader(),serviceType)) {
      Addons.waitUntilStarted(addon);
      if (!addon.getStatus().isFailed()) {
        ServiceRegistry serviceRegistry=addon.getServiceRegistry();
        if (serviceRegistry.hasService(serviceType)) {
          ExportedInstance<?> instance=serviceRegistry.getExportedInstance(serviceType);
          Assert.notNull(instance,""String_Node_Str"" + serviceType.getName() + ""String_Node_Str""+ addon.getId()+ ""String_Node_Str"");
          if (instance instanceof ExportedInstanceImpl)           result=((ExportedInstanceImpl<?>)instance).get(new LocalServiceInjectionPoint(injectionPoint,serviceType));
 else           result=instance.get();
          break;
        }
      }
    }
  }
  if (result == null) {
    throw new IllegalStateException(""String_Node_Str"" + serviceType.getName() + ""String_Node_Str"");
  }
  return result;
}",0.9657907783837384
151507,public abstract InstallRequest install(AddonId id);,"/** 
 * Create a new   {@link InstallRequest} for the given {@link AddonId}.
 */
public abstract InstallRequest install(AddonId id);",0.5573770491803278
151508,public abstract boolean disable(AddonId id);,"/** 
 * Create a new   {@link DisableRequest} for the given {@link AddonId}.
 */
public abstract DisableRequest disable(AddonId id);",0.4545454545454545
151509,public abstract boolean remove(AddonId id);,"/** 
 * Create a new   {@link RemoveRequest} for the given {@link AddonId}.
 */
public abstract RemoveRequest remove(AddonId id);",0.4418604651162791
151510,"@Override public boolean disable(AddonId id){
  for (  AddonRepository repository : forge.getRepositories()) {
    if (repository instanceof MutableAddonRepository && repository.isEnabled(id))     return ((MutableAddonRepository)repository).disable(id);
  }
  return false;
}","@Override public DisableRequest disable(AddonId id){
  return new DisableRequestImpl(this,forge,id);
}",0.3448275862068966
151511,"@Override public boolean remove(AddonId id){
  for (  AddonRepository repository : forge.getRepositories()) {
    if (repository instanceof MutableAddonRepository && repository.isEnabled(id))     return ((MutableAddonRepository)repository).undeploy(id);
  }
  return false;
}","@Override public RemoveRequest remove(AddonId id){
  return new RemoveRequestImpl(this,forge,id);
}",0.3368983957219251
151512,"@Override public Result execute(UIContext context) throws Exception {
  Iterator<AddonId> iterator=addons.getValue().iterator();
  StringBuilder builder=new StringBuilder();
  while (iterator.hasNext()) {
    AddonId addonId=iterator.next();
    builder.append(addonId.toCoordinates());
    manager.disable(addonId);
    manager.remove(addonId);
    if (iterator.hasNext())     builder.append(""String_Node_Str"");
  }
  return Results.success(""String_Node_Str"" + builder.toString());
}","@Override public Result execute(UIContext context) throws Exception {
  Iterator<AddonId> iterator=addons.getValue().iterator();
  StringBuilder builder=new StringBuilder();
  while (iterator.hasNext()) {
    AddonId addonId=iterator.next();
    builder.append(addonId.toCoordinates());
    manager.disable(addonId).perform();
    manager.remove(addonId).perform();
    if (iterator.hasNext())     builder.append(""String_Node_Str"");
  }
  return Results.success(""String_Node_Str"" + builder.toString());
}",0.9493927125506072
151513,"@Override public Result execute(UIContext context) throws Exception {
  Iterator<AddonId> iterator=addons.getValue().iterator();
  StringBuilder builder=new StringBuilder();
  while (iterator.hasNext()) {
    AddonId addonId=iterator.next();
    builder.append(addonId.toCoordinates());
    manager.disable(addonId).perform();
    manager.remove(addonId).perform();
    if (iterator.hasNext())     builder.append(""String_Node_Str"");
  }
  return Results.success(""String_Node_Str"" + builder.toString());
}","@Override public Result execute(UIContext context) throws Exception {
  Iterable<AddonId> value=addons.getValue();
  Iterator<AddonId> iterator=value.iterator();
  StringBuilder builder=new StringBuilder();
  while (iterator.hasNext()) {
    AddonId addonId=iterator.next();
    builder.append(addonId.toCoordinates());
    manager.disable(addonId).perform();
    manager.remove(addonId).perform();
    if (iterator.hasNext())     builder.append(""String_Node_Str"");
  }
  return Results.success(""String_Node_Str"" + builder.toString());
}",0.94716618635927
151514,"@Override public void start() throws LifecycleException {
  try {
    this.addonDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    runnable=new ForgeRunnable(addonDir,ClassLoader.getSystemClassLoader());
    thread=new Thread(runnable,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + addonDir + ""String_Node_Str"");
    this.repository=AddonRepositoryImpl.forDirectory(runnable.forge,addonDir);
    thread.start();
  }
 catch (  IOException e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
}","@Override public void start() throws LifecycleException {
  try {
    this.addonDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    runnable=new ForgeRunnable(addonDir,ClassLoader.getSystemClassLoader());
    thread=new Thread(runnable,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + addonDir + ""String_Node_Str"");
    this.repository=(MutableAddonRepository)runnable.forge.addRepository(AddonRepositoryMode.MUTABLE,addonDir);
    thread.start();
  }
 catch (  IOException e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
}",0.9297553275453828
151515,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof AddonId))   return false;
  AddonId other=(AddonId)obj;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof AddonId))   return false;
  AddonId other=(AddonId)obj;
  if (name == null) {
    if (other.getName() != null)     return false;
  }
 else   if (!name.equals(other.getName()))   return false;
  if (version == null) {
    if (other.getVersion() != null)     return false;
  }
 else   if (!version.equals(other.getVersion()))   return false;
  return true;
}",0.9461697722567288
151516,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  SingleVersion other=(SingleVersion)obj;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  Version other=(Version)obj;
  if (getVersionString() == null) {
    if (other.getVersionString() != null)     return false;
  }
 else   if (!getVersionString().equals(other.getVersionString()))   return false;
  return true;
}",0.3551136363636363
151517,"@Deployment(order=3) public static ForgeArchive getDeployment(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML();
  return archive;
}","@Deployment(order=5) public static ForgeArchive getDeployment(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML();
  return archive;
}",0.99375
151518,"@Deployment(name=""String_Node_Str"",testable=false,order=1) public static ForgeArchive getDeploymentDep3(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(AddonId.from(""String_Node_Str"",""String_Node_Str"")));
  return archive;
}","@Deployment(name=""String_Node_Str"",testable=false,order=3) public static ForgeArchive getDeploymentDep3(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML().addAsAddonDependencies(AddonDependencyEntry.create(AddonId.from(""String_Node_Str"",""String_Node_Str"")));
  return archive;
}",0.99672131147541
151519,"@Test public void testHotSwap() throws Exception {
  AddonId dep1Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep2Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep3Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep4Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  Addon dep1=registry.getAddon(dep1Id);
  Addon dep2=registry.getAddon(dep2Id);
  Addon dep3=registry.getAddon(dep3Id);
  Addon dep4=registry.getAddon(dep4Id);
  ClassLoader dep1Classloader=dep1.getClassLoader();
  ClassLoader dep2Classloader=dep2.getClassLoader();
  ClassLoader dep3Classloader=dep3.getClassLoader();
  ClassLoader dep4Classloader=dep4.getClassLoader();
  ((MutableAddonRepository)repository).disable(dep4Id);
  Addons.waitUntilStopped(dep1,10,TimeUnit.SECONDS);
  ((MutableAddonRepository)repository).enable(dep4Id);
  Addons.waitUntilStarted(dep1,10,TimeUnit.SECONDS);
  Assert.assertNotEquals(dep1Classloader,dep1.getClassLoader());
  Assert.assertNotEquals(dep1Classloader.toString(),dep1.getClassLoader().toString());
  Assert.assertNotEquals(dep2Classloader,dep2.getClassLoader());
  Assert.assertNotEquals(dep2Classloader.toString(),dep2.getClassLoader().toString());
  Assert.assertNotEquals(dep3Classloader,dep3.getClassLoader());
  Assert.assertNotEquals(dep3Classloader.toString(),dep3.getClassLoader().toString());
  Assert.assertNotEquals(dep4Classloader,dep4.getClassLoader());
  Assert.assertNotEquals(dep4Classloader.toString(),dep4.getClassLoader().toString());
  Assert.assertNotEquals(dep1Classloader,registry.getAddon(dep1Id).getClassLoader());
  Assert.assertNotEquals(dep1Classloader.toString(),registry.getAddon(dep1Id).getClassLoader().toString());
  Assert.assertNotEquals(dep2Classloader,registry.getAddon(dep2Id).getClassLoader());
  Assert.assertNotEquals(dep2Classloader.toString(),registry.getAddon(dep2Id).getClassLoader().toString());
  Assert.assertNotEquals(dep3Classloader,registry.getAddon(dep3Id).getClassLoader());
  Assert.assertNotEquals(dep3Classloader.toString(),registry.getAddon(dep3Id).getClassLoader().toString());
  Assert.assertNotEquals(dep4Classloader,registry.getAddon(dep4Id).getClassLoader());
  Assert.assertNotEquals(dep4Classloader.toString(),registry.getAddon(dep4Id).getClassLoader().toString());
}","@Test public void testHotSwap() throws Exception {
  AddonId dep1Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep2Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep3Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  AddonId dep4Id=AddonId.from(""String_Node_Str"",""String_Node_Str"");
  Addon dep1=registry.getAddon(dep1Id);
  Addon dep2=registry.getAddon(dep2Id);
  Addon dep3=registry.getAddon(dep3Id);
  Addon dep4=registry.getAddon(dep4Id);
  ClassLoader dep1Classloader=dep1.getClassLoader();
  ClassLoader dep2Classloader=dep2.getClassLoader();
  ClassLoader dep3Classloader=dep3.getClassLoader();
  ClassLoader dep4Classloader=dep4.getClassLoader();
  Addons.waitUntilStarted(dep1,10,TimeUnit.SECONDS);
  Addons.waitUntilStarted(dep2,10,TimeUnit.SECONDS);
  Addons.waitUntilStarted(dep3,10,TimeUnit.SECONDS);
  Addons.waitUntilStarted(dep4,10,TimeUnit.SECONDS);
  ((MutableAddonRepository)repository).disable(dep4Id);
  Addons.waitUntilStopped(dep1,10,TimeUnit.SECONDS);
  ((MutableAddonRepository)repository).enable(dep4Id);
  Addons.waitUntilStarted(dep1,10,TimeUnit.SECONDS);
  Assert.assertNotEquals(dep1Classloader,dep1.getClassLoader());
  Assert.assertNotEquals(dep1Classloader.toString(),dep1.getClassLoader().toString());
  Assert.assertNotEquals(dep2Classloader,dep2.getClassLoader());
  Assert.assertNotEquals(dep2Classloader.toString(),dep2.getClassLoader().toString());
  Assert.assertNotEquals(dep3Classloader,dep3.getClassLoader());
  Assert.assertNotEquals(dep3Classloader.toString(),dep3.getClassLoader().toString());
  Assert.assertNotEquals(dep4Classloader,dep4.getClassLoader());
  Assert.assertNotEquals(dep4Classloader.toString(),dep4.getClassLoader().toString());
  Assert.assertNotEquals(dep1Classloader,registry.getAddon(dep1Id).getClassLoader());
  Assert.assertNotEquals(dep1Classloader.toString(),registry.getAddon(dep1Id).getClassLoader().toString());
  Assert.assertNotEquals(dep2Classloader,registry.getAddon(dep2Id).getClassLoader());
  Assert.assertNotEquals(dep2Classloader.toString(),registry.getAddon(dep2Id).getClassLoader().toString());
  Assert.assertNotEquals(dep3Classloader,registry.getAddon(dep3Id).getClassLoader());
  Assert.assertNotEquals(dep3Classloader.toString(),registry.getAddon(dep3Id).getClassLoader().toString());
  Assert.assertNotEquals(dep4Classloader,registry.getAddon(dep4Id).getClassLoader());
  Assert.assertNotEquals(dep4Classloader.toString(),registry.getAddon(dep4Id).getClassLoader().toString());
}",0.9558884727424052
151520,"@Deployment(name=""String_Node_Str"",testable=false,order=1) public static ForgeArchive getDeploymentDep4(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML();
  return archive;
}","@Deployment(name=""String_Node_Str"",testable=false,order=4) public static ForgeArchive getDeploymentDep4(){
  ForgeArchive archive=ShrinkWrap.create(ForgeArchive.class).addBeansXML();
  return archive;
}",0.995049504950495
151521,"@Override public Forge start(ClassLoader loader){
  assertNotAlive();
  this.loader=loader;
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    ListenerRegistration<ContainerLifecycleListener> registration=addContainerLifecycleListener(listener);
    loadedListenerRegistrations.add(registration);
  }
  fireBeforeContainerStartedEvent(loader);
  if (!alive) {
    try {
      alive=true;
      do {
        boolean dirty=false;
        if (!isStartingAddons()) {
          for (          AddonRepository repository : repositories) {
            int repoVersion=repository.getVersion();
            if (repoVersion > lastRepoVersionSeen.get(repository)) {
              lastRepoVersionSeen.put(repository,repoVersion);
              dirty=true;
              for (              Addon addon : registry.getAddons()) {
                boolean enabled=false;
                if (repository.isEnabled(addon.getId())) {
                  enabled=true;
                }
                if (!enabled && addon.getStatus().isStarted()) {
                  try {
                    registry.stop(addon);
                  }
 catch (                  Exception e) {
                    logger.log(Level.SEVERE,""String_Node_Str"",e);
                  }
                }
              }
            }
          }
          if (dirty) {
            try {
              registry.startAll();
            }
 catch (            Exception e) {
              logger.log(Level.SEVERE,""String_Node_Str"",e);
            }
          }
        }
        Thread.sleep(100);
      }
 while (alive && serverMode);
      while (alive && isStartingAddons()) {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      fireBeforeContainerStoppedEvent(loader);
      registry.stopAll();
    }
  }
  fireAfterContainerStoppedEvent(loader);
  for (  ListenerRegistration<ContainerLifecycleListener> registation : loadedListenerRegistrations) {
    registation.removeListener();
  }
  return this;
}","@Override public Forge start(ClassLoader loader){
  assertNotAlive();
  this.loader=loader;
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    ListenerRegistration<ContainerLifecycleListener> registration=addContainerLifecycleListener(listener);
    loadedListenerRegistrations.add(registration);
  }
  fireBeforeContainerStartedEvent(loader);
  if (!alive) {
    try {
      alive=true;
      do {
        boolean dirty=false;
        if (!isStartingAddons()) {
          Set<AddonId> enabled=new HashSet<AddonId>();
          for (          AddonRepository repository : repositories) {
            int repoVersion=repository.getVersion();
            if (repoVersion > lastRepoVersionSeen.get(repository)) {
              logger.log(Level.INFO,""String_Node_Str"" + repository + ""String_Node_Str"");
              lastRepoVersionSeen.put(repository,repoVersion);
              dirty=true;
            }
            enabled.addAll(repository.listEnabled());
          }
          if (dirty) {
            for (            Addon addon : registry.getAddons()) {
              if (!enabled.contains(addon.getId()) && addon.getStatus().isStarted()) {
                try {
                  registry.stop(addon);
                }
 catch (                Exception e) {
                  logger.log(Level.SEVERE,""String_Node_Str"",e);
                }
              }
            }
            try {
              registry.startAll();
            }
 catch (            Exception e) {
              logger.log(Level.SEVERE,""String_Node_Str"",e);
            }
          }
        }
        Thread.sleep(100);
      }
 while (alive && serverMode);
      while (alive && isStartingAddons()) {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      fireBeforeContainerStoppedEvent(loader);
      registry.stopAll();
    }
  }
  fireAfterContainerStoppedEvent(loader);
  for (  ListenerRegistration<ContainerLifecycleListener> registation : loadedListenerRegistrations) {
    registation.removeListener();
  }
  return this;
}",0.8751753155680224
151522,"public AddonTree(LockManager lock){
  this.lock=lock;
  this.root=new AddonImpl(lock,AddonId.from(AddonTree.class.getName(),UUID.randomUUID().toString()));
}","public AddonTree(LockManager lock){
  this.lock=lock;
  this.root=new AddonImpl(lock,AddonId.from(""String_Node_Str"",UUID.randomUUID().toString()));
}",0.8758169934640523
151523,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AddonImpl other=(AddonImpl)obj;
  if (id == null) {
    if (other.id != null)     return false;
  }
 else   if (!id.equals(other.id))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof Addon))   return false;
  AddonImpl other=(AddonImpl)obj;
  if (id == null) {
    if (other.getId() != null)     return false;
  }
 else   if (!id.equals(other.getId()))   return false;
  return true;
}",0.9034175334323924
151524,"private AddonImpl loadAddon(AddonId addonId){
  Assert.notNull(addonId,""String_Node_Str"");
  AddonImpl addon=null;
  for (  AddonRepository repository : forge.getRepositories()) {
    addon=loadAddonFromRepository(repository,addonId);
    if (addon != null)     break;
  }
  if (addon == null) {
    for (    Addon existing : tree) {
      if (existing.getId().equals(addonId)) {
        addon=(AddonImpl)existing;
        break;
      }
    }
  }
  if (addon == null) {
    addon=new AddonImpl(lock,addonId);
    tree.add(addon);
  }
  return addon;
}","private AddonImpl loadAddon(AddonId addonId){
  Assert.notNull(addonId,""String_Node_Str"");
  AddonImpl addon=null;
  for (  Addon existing : tree) {
    if (existing.getId().equals(addonId)) {
      addon=(AddonImpl)existing;
      break;
    }
  }
  if (addon == null) {
    for (    AddonRepository repository : forge.getRepositories()) {
      addon=loadAddonFromRepository(repository,addonId);
      if (addon != null)       break;
    }
  }
 else   if (addon.getStatus().isMissing()) {
    for (    AddonRepository repository : forge.getRepositories()) {
      Addon loaded=loadAddonFromRepository(repository,addonId);
      if (loaded != null && !loaded.getStatus().isMissing())       break;
    }
  }
  if (addon == null) {
    addon=new AddonImpl(lock,addonId);
    tree.add(addon);
  }
  return addon;
}",0.6436950146627566
151525,"@Override public Object call() throws Exception {
  manager.fireEvent(new PostStartup());
  return null;
}","@Override public Object call() throws Exception {
  try {
    manager.fireEvent(new PreShutdown());
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    addon.setStatus(AddonStatus.LOADED);
    if (operation != null)     operation.cancel(true);
  }
  weld.shutdown();
  return null;
}",0.3494252873563218
151526,"@Test public void testContainerStartup(){
  Assert.assertEquals(1,TestLifecycleListener.beforeStartTimesCalled);
}","@Test public void testContainerStartup(){
  ForgeImpl impl=(ForgeImpl)forge;
  List<ContainerLifecycleListener> listeners=impl.getRegisteredListeners();
  Assert.assertEquals(1,listeners.size());
  Assert.assertEquals(1,((TestLifecycleListener)listeners.get(0)).beforeStartTimesCalled);
}",0.5671641791044776
151527,"@Override public Forge start(ClassLoader loader){
  assertNotAlive();
  this.loader=loader;
  fireBeforeContainerStartedEvent(loader);
  if (!alive) {
    try {
      alive=true;
      do {
        boolean dirty=false;
        if (!isStartingAddons()) {
          for (          AddonRepository repository : repositories) {
            int repoVersion=repository.getVersion();
            if (repoVersion > lastRepoVersionSeen.get(repository)) {
              lastRepoVersionSeen.put(repository,repoVersion);
              dirty=true;
              for (              Addon addon : registry.getAddons()) {
                boolean enabled=false;
                if (repository.isEnabled(addon.getId())) {
                  enabled=true;
                }
                if (!enabled && addon.getStatus().isStarted()) {
                  try {
                    registry.stop(addon);
                  }
 catch (                  Exception e) {
                    logger.log(Level.SEVERE,""String_Node_Str"",e);
                  }
                }
              }
            }
          }
          if (dirty) {
            try {
              registry.startAll();
            }
 catch (            Exception e) {
              logger.log(Level.SEVERE,""String_Node_Str"",e);
            }
          }
        }
        Thread.sleep(100);
      }
 while (alive && serverMode);
      while (alive && isStartingAddons()) {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      fireBeforeContainerStoppedEvent(loader);
      registry.stopAll();
    }
  }
  fireAfterContainerStoppedEvent(loader);
  return this;
}","@Override public Forge start(ClassLoader loader){
  assertNotAlive();
  this.loader=loader;
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    ListenerRegistration<ContainerLifecycleListener> registration=addContainerLifecycleListener(listener);
    loadedListenerRegistrations.add(registration);
  }
  fireBeforeContainerStartedEvent(loader);
  if (!alive) {
    try {
      alive=true;
      do {
        boolean dirty=false;
        if (!isStartingAddons()) {
          for (          AddonRepository repository : repositories) {
            int repoVersion=repository.getVersion();
            if (repoVersion > lastRepoVersionSeen.get(repository)) {
              lastRepoVersionSeen.put(repository,repoVersion);
              dirty=true;
              for (              Addon addon : registry.getAddons()) {
                boolean enabled=false;
                if (repository.isEnabled(addon.getId())) {
                  enabled=true;
                }
                if (!enabled && addon.getStatus().isStarted()) {
                  try {
                    registry.stop(addon);
                  }
 catch (                  Exception e) {
                    logger.log(Level.SEVERE,""String_Node_Str"",e);
                  }
                }
              }
            }
          }
          if (dirty) {
            try {
              registry.startAll();
            }
 catch (            Exception e) {
              logger.log(Level.SEVERE,""String_Node_Str"",e);
            }
          }
        }
        Thread.sleep(100);
      }
 while (alive && serverMode);
      while (alive && isStartingAddons()) {
        Thread.sleep(100);
      }
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      fireBeforeContainerStoppedEvent(loader);
      registry.stopAll();
    }
  }
  fireAfterContainerStoppedEvent(loader);
  for (  ListenerRegistration<ContainerLifecycleListener> registation : loadedListenerRegistrations) {
    registation.removeListener();
  }
  return this;
}",0.8916863362182009
151528,"private void fireBeforeContainerStartedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.beforeStart(this);
  }
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    listener.beforeStart(this);
  }
  status=ContainerStatus.STARTED;
}","private void fireBeforeContainerStartedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.beforeStart(this);
  }
  status=ContainerStatus.STARTED;
}",0.7392857142857143
151529,"private void fireAfterContainerStoppedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.afterStop(this);
  }
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    listener.afterStop(this);
  }
}","private void fireAfterContainerStoppedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.afterStop(this);
  }
}",0.7024793388429752
151530,"private void fireBeforeContainerStoppedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.beforeStop(this);
  }
  for (  ContainerLifecycleListener listener : ServiceLoader.load(ContainerLifecycleListener.class,loader)) {
    listener.beforeStop(this);
  }
  status=ContainerStatus.STOPPED;
}","private void fireBeforeContainerStoppedEvent(ClassLoader loader){
  for (  ContainerLifecycleListener listener : registeredListeners) {
    listener.beforeStop(this);
  }
  status=ContainerStatus.STOPPED;
}",0.7396768402154399
151531,"@Override public boolean deploy(final AddonId addon,final List<AddonDependencyEntry> dependencies,final List<File> resources){
  return lock.performLocked(LockMode.WRITE,new Callable<Boolean>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Boolean call() throws Exception {
      File addonSlotDir=getAddonBaseDir(addon);
      File descriptor=getAddonDescriptor(addon);
      try {
        if (resources != null && !resources.isEmpty()) {
          for (          File resource : resources) {
            if (resource.isDirectory()) {
              String child=addon.getName() + resource.getParentFile().getParentFile().getName();
              child=OperatingSystemUtils.getSafeFilename(child);
              Files.copyDirectory(resource,new File(addonSlotDir,child));
            }
 else {
              Files.copyFileToDirectory(resource,addonSlotDir);
            }
          }
        }
        Node addonXml=getXmlRoot(descriptor);
        Node dependenciesNode=addonXml.getOrCreate(""String_Node_Str"");
        for (        AddonDependencyEntry dependency : dependencies) {
          Node dep=dependenciesNode.createChild(""String_Node_Str"");
          dep.attribute(ATTR_NAME,dependency.getId().getName());
          dep.attribute(ATTR_VERSION,dependency.getId().getVersion());
          dep.attribute(ATTR_EXPORT,dependency.isExported());
          dep.attribute(ATTR_OPTIONAL,dependency.isOptional());
        }
        FileOutputStream fos=null;
        try {
          fos=new FileOutputStream(descriptor);
          Streams.write(XMLParser.toXMLInputStream(addonXml),fos);
        }
  finally {
          Streams.closeQuietly(fos);
        }
        return true;
      }
 catch (      IOException io) {
        io.printStackTrace();
        return false;
      }
    }
  }
);
}","@Override public boolean deploy(final AddonId addon,final List<AddonDependencyEntry> dependencies,final List<File> resources){
  return lock.performLocked(LockMode.WRITE,new Callable<Boolean>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Boolean call() throws Exception {
      File addonSlotDir=getAddonBaseDir(addon);
      File descriptor=getAddonDescriptor(addon);
      try {
        if (resources != null && !resources.isEmpty()) {
          for (          File resource : resources) {
            if (resource.isDirectory()) {
              String child=addon.getName() + resource.getParentFile().getParentFile().getName();
              child=OperatingSystemUtils.getSafeFilename(child);
              Files.copyDirectory(resource,new File(addonSlotDir,child));
            }
 else {
              Files.copyFileToDirectory(resource,addonSlotDir);
            }
          }
        }
        Node addonXml=getXmlRoot(descriptor);
        Node dependenciesNode=addonXml.getOrCreate(DEPENDENCIES_TAG_NAME);
        for (        AddonDependencyEntry dependency : dependencies) {
          String name=dependency.getId().getName();
          Node dep=null;
          for (          Node node : dependenciesNode.get(DEPENDENCY_TAG_NAME)) {
            if (name.equals(node.getAttribute(ATTR_NAME))) {
              dep=node;
              break;
            }
          }
          if (dep == null) {
            dep=dependenciesNode.createChild(DEPENDENCY_TAG_NAME);
            dep.attribute(ATTR_NAME,name);
          }
          dep.attribute(ATTR_VERSION,dependency.getId().getVersion());
          dep.attribute(ATTR_EXPORT,dependency.isExported());
          dep.attribute(ATTR_OPTIONAL,dependency.isOptional());
        }
        FileOutputStream fos=null;
        try {
          fos=new FileOutputStream(descriptor);
          Streams.write(XMLParser.toXMLInputStream(addonXml),fos);
        }
  finally {
          Streams.closeQuietly(fos);
        }
        return true;
      }
 catch (      IOException io) {
        io.printStackTrace();
        return false;
      }
    }
  }
);
}",0.8226588415412095
151532,"@Override public void beforeStart(Forge forge) throws ContainerException {
  StringWriter sw=new StringWriter();
  PrintWriter out=new PrintWriter(sw,true);
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(forge.getVersion());
  out.print(""String_Node_Str"");
  out.println();
  logger.info(sw.toString());
}","@Override public void beforeStart(Forge forge) throws ContainerException {
  StringWriter sw=new StringWriter();
  PrintWriter out=new PrintWriter(sw,true);
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(forge.getVersion());
  out.print(""String_Node_Str"");
  out.println();
  logger.info(sw.toString());
  System.out.println(sw.toString());
}",0.9678540399652475
151533,"public void breadthFirst(Visitor<Addon> visitor){
  Queue<Addon> queue=new LinkedList<Addon>();
  Set<Addon> seen=new HashSet<Addon>();
  seen.add(root);
  queue.add(root);
  while (!queue.isEmpty()) {
    Addon addon=queue.remove();
    for (    AddonDependency dep : addon.getDependencies()) {
      Addon dependency=dep.getDependency();
      if (!seen.contains(dependency)) {
        visitor.visit(dependency);
        queue.add(dependency);
      }
    }
  }
}","public void breadthFirst(Visitor<Addon> visitor){
  Queue<Addon> queue=new LinkedList<Addon>();
  Set<Addon> seen=new HashSet<Addon>();
  seen.add(root);
  queue.add(root);
  while (!queue.isEmpty()) {
    Addon addon=queue.remove();
    for (    AddonDependency dep : addon.getDependencies()) {
      Addon dependency=dep.getDependency();
      if (!seen.contains(dependency)) {
        visitor.visit(dependency);
        queue.add(dependency);
        seen.add(dependency);
      }
    }
  }
}",0.96875
151534,"@Override public Void call() throws Exception {
  tree.breadthFirst(new Visitor<Addon>(){
    @Override public void visit(    Addon addon){
      doStop(addon);
    }
  }
);
  List<Runnable> waiting=executor.shutdownNow();
  if (waiting != null && !waiting.isEmpty())   logger.info(""String_Node_Str"" + waiting.size() + ""String_Node_Str"");
  return null;
}","@Override public Void call() throws Exception {
  final List<Addon> toStop=new ArrayList<Addon>();
  tree.breadthFirst(new Visitor<Addon>(){
    @Override public void visit(    Addon addon){
      toStop.add(addon);
    }
  }
);
  for (  Addon addon : toStop) {
    doStop(addon);
  }
  List<Runnable> waiting=executor.shutdownNow();
  if (waiting != null && !waiting.isEmpty())   logger.info(""String_Node_Str"" + waiting.size() + ""String_Node_Str"");
  return null;
}",0.8501827040194885
151535,"public void stopAll(){
  lock.performLocked(LockMode.WRITE,new Callable<Void>(){
    @Override public Void call() throws Exception {
      tree.breadthFirst(new Visitor<Addon>(){
        @Override public void visit(        Addon addon){
          doStop(addon);
        }
      }
);
      List<Runnable> waiting=executor.shutdownNow();
      if (waiting != null && !waiting.isEmpty())       logger.info(""String_Node_Str"" + waiting.size() + ""String_Node_Str"");
      return null;
    }
  }
);
}","public void stopAll(){
  lock.performLocked(LockMode.WRITE,new Callable<Void>(){
    @Override public Void call() throws Exception {
      final List<Addon> toStop=new ArrayList<Addon>();
      tree.breadthFirst(new Visitor<Addon>(){
        @Override public void visit(        Addon addon){
          toStop.add(addon);
        }
      }
);
      for (      Addon addon : toStop) {
        doStop(addon);
      }
      List<Runnable> waiting=executor.shutdownNow();
      if (waiting != null && !waiting.isEmpty())       logger.info(""String_Node_Str"" + waiting.size() + ""String_Node_Str"");
      return null;
    }
  }
);
}",0.8719785138764548
151536,"@Override public void visit(Addon addon){
  doStop(addon);
}","@Override public void visit(Addon addon){
  toStop.add(addon);
}",0.9516129032258064
151537,"@Override public void run(){
  forge.getLockManager().performLocked(LockMode.READ,new Callable<Void>(){
    @Override public Void call() throws Exception {
      logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str"");
      long start=System.currentTimeMillis();
      container=new AddonContainerStartup();
      shutdownCallable=ClassLoaders.executeIn(addon.getClassLoader(),container);
      logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str""+ ""String_Node_Str"");
      return null;
    }
  }
);
}","@Override public void run(){
  try {
    forge.getLockManager().performLocked(LockMode.READ,new Callable<Void>(){
      @Override public Void call() throws Exception {
        logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str"");
        long start=System.currentTimeMillis();
        container=new AddonContainerStartup();
        shutdownCallable=ClassLoaders.executeIn(addon.getClassLoader(),container);
        logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str""+ ""String_Node_Str"");
        return null;
      }
    }
);
  }
 catch (  RuntimeException e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + addon.getId(),e);
    throw e;
  }
}",0.8684410646387832
151538,"public void shutdown(){
  forge.getLockManager().performLocked(LockMode.READ,new Callable<Void>(){
    @Override public Void call() throws Exception {
      logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str"");
      long start=System.currentTimeMillis();
      ClassLoaders.executeIn(addon.getClassLoader(),shutdownCallable);
      logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str""+ ""String_Node_Str"");
      return null;
    }
  }
);
}","public void shutdown(){
  try {
    forge.getLockManager().performLocked(LockMode.READ,new Callable<Void>(){
      @Override public Void call() throws Exception {
        logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str"");
        long start=System.currentTimeMillis();
        ClassLoaders.executeIn(addon.getClassLoader(),shutdownCallable);
        logger.info(""String_Node_Str"" + addon.getId() + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str""+ ""String_Node_Str"");
        return null;
      }
    }
);
  }
 catch (  RuntimeException e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + addon.getId(),e);
    throw e;
  }
}",0.856663872590109
151539,"@Override public void setOrigin(final Project project){
  this.setOrigin(project);
}","@Override public void setOrigin(final Project project){
  super.setOrigin(project);
}",0.9585798816568049
151540,"/** 
 * Returns the converted value that matches the input
 * @param input
 * @param value
 * @return
 */
private static Object convertToUIInputValue(final ConverterFactory converterFactory,final InputComponent<?,Object> input,final Object value){
  final Object convertedType;
  Class<Object> sourceType=(Class<Object>)value.getClass();
  Class<Object> targetType=input.getValueType();
  Converter<String,Object> valueConverter=input.getValueConverter();
  if (valueConverter != null) {
    Converter<Object,String> stringConverter=converterFactory.getConverter(sourceType,String.class);
    CompositeConverter compositeConverter=new CompositeConverter(stringConverter,valueConverter);
    convertedType=compositeConverter.convert(value);
  }
 else {
    Converter<Object,Object> converter=converterFactory.getConverter(sourceType,targetType);
    convertedType=converter.convert(value);
  }
  return convertedType;
}","/** 
 * Returns the converted value that matches the input
 * @param input
 * @param value
 * @return
 */
private static Object convertToUIInputValue(final ConverterFactory converterFactory,final InputComponent<?,Object> input,final Object value){
  final Object convertedType;
  Class<Object> sourceType=(Class<Object>)value.getClass();
  Class<Object> targetType=input.getValueType();
  Converter<String,Object> valueConverter=input.getValueConverter();
  if (valueConverter != null) {
    if (value instanceof String) {
      convertedType=valueConverter.convert((String)value);
    }
 else {
      Converter<Object,String> stringConverter=converterFactory.getConverter(sourceType,String.class);
      CompositeConverter compositeConverter=new CompositeConverter(stringConverter,valueConverter);
      convertedType=compositeConverter.convert(value);
    }
  }
 else {
    Converter<Object,Object> converter=converterFactory.getConverter(sourceType,targetType);
    convertedType=converter.convert(value);
  }
  return convertedType;
}",0.9386503067484664
151541,"@Override public Set<Dependency> resolveDependencies(DependencyQuery query){
  Set<Dependency> result=new HashSet<Dependency>();
  Predicate<Dependency> filter=query.getDependencyFilter();
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  MavenRepositorySystemSession session=setupRepoSession(system,settings);
  Artifact queryArtifact=coordinateToMavenArtifact(query.getCoordinate());
  List<RemoteRepository> remoteRepos=convertToMavenRepos(query.getDependencyRepositories(),settings);
  remoteRepos.addAll(container.getEnabledRepositoriesFromProfile(settings));
  CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,query.getScopeType()),remoteRepos);
  DependencyRequest request=new DependencyRequest(collectRequest,null);
  DependencyResult artifacts;
  try {
    artifacts=system.resolveDependencies(session,request);
  }
 catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  DependencyNode root=artifacts.getRoot();
  for (  DependencyNode node : root.getChildren()) {
    Dependency d=MavenConvertUtils.convertToDependency(factory,node);
    if (filter == null || filter.accept(d)) {
      result.add(d);
    }
  }
  return result;
}","@Override public Set<Dependency> resolveDependencies(DependencyQuery query){
  Set<Dependency> result=new HashSet<Dependency>();
  Predicate<Dependency> filter=query.getDependencyFilter();
  RepositorySystem system=container.getRepositorySystem();
  Settings settings=container.getSettings();
  MavenRepositorySystemSession session=setupRepoSession(system,settings);
  Artifact queryArtifact=coordinateToMavenArtifact(query.getCoordinate());
  List<RemoteRepository> remoteRepos=convertToMavenRepos(query.getDependencyRepositories(),settings);
  remoteRepos.addAll(container.getEnabledRepositoriesFromProfile(settings));
  CollectRequest collectRequest=new CollectRequest(new org.sonatype.aether.graph.Dependency(queryArtifact,query.getScopeType()),remoteRepos);
  DependencyRequest request=new DependencyRequest(collectRequest,new DependencyFilter(){
    @Override public boolean accept(    DependencyNode node,    List<DependencyNode> parents){
      return true;
    }
  }
);
  DependencyResult artifacts;
  try {
    artifacts=system.resolveDependencies(session,request);
  }
 catch (  NullPointerException e) {
    throw new RuntimeException(""String_Node_Str"" + query + ""String_Node_Str"",e);
  }
catch (  DependencyResolutionException e) {
    throw new RuntimeException(e);
  }
  DependencyNode root=artifacts.getRoot();
  for (  DependencyNode node : root.getChildren()) {
    Dependency d=MavenConvertUtils.convertToDependency(factory,node);
    if (filter == null || filter.accept(d)) {
      result.add(d);
    }
  }
  return result;
}",0.8903043170559094
151542,"@Test public void testResolveWildcardArtifactId() throws Exception {
  DependencyQuery query=DependencyQueryBuilder.create(CoordinateBuilder.create().setGroupId(""String_Node_Str"").setClassifier(""String_Node_Str""));
  Set<Dependency> coreAddons=resolver.resolveDependencies(query);
  Assert.assertFalse(coreAddons.isEmpty());
}","@Test(expected=RuntimeException.class) public void testResolveWildcardArtifactId() throws Exception {
  DependencyQuery query=DependencyQueryBuilder.create(CoordinateBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"").setClassifier(""String_Node_Str""));
  Set<Dependency> coreAddons=resolver.resolveDependencies(query);
  Assert.assertFalse(coreAddons.isEmpty());
}",0.766016713091922
151543,"@Override public void initializeUI(UIBuilder builder) throws Exception {
  DependencyQuery query=DependencyQueryBuilder.create(CoordinateBuilder.create().setGroupId(""String_Node_Str"").setClassifier(""String_Node_Str""));
  Set<Dependency> coreAddons=resolver.resolveDependencies(query);
  builder.add(splitApiImpl);
}","@Override public void initializeUI(UIBuilder builder) throws Exception {
  builder.add(splitApiImpl);
}",0.492822966507177
151544,"@Override public UIBuilder add(UIInput<?> input){
  inputs.add(input);
  return this;
}","@Override public UIBuilder add(UIInputComponent<?,?> input){
  inputs.add(input);
  return this;
}",0.9405405405405406
151545,"public List<UIInput<?>> getInputs(){
  return inputs;
}","public List<UIInputComponent<?,?>> getInputs(){
  return inputs;
}",0.9090909090909092
151546,"public UIInput<?> findInput(String name){
  for (  UIInput<?> input : inputs) {
    if (input.getName().equals(name))     return input;
  }
  return null;
}","public UIInputComponent<?,?> findInput(String name){
  for (  UIInputComponent<?,?> input : inputs) {
    if (input.getName().equals(name))     return input;
  }
  return null;
}",0.934131736526946
151547,"@Override public void addValidationError(UIInput<?> input,String errorMessage){
  inputs.add(input);
}","@Override public void addValidationError(UIInputComponent<?,?> input,String errorMessage){
  inputs.add(input);
}",0.9488372093023256
151548,"public static CommandLineParser generateParser(UICommand command,ShellContext context){
  ParserBuilder builder=new ParserBuilder();
  ParameterInt parameter=new ParameterInt(command.getMetadata().getName(),command.getMetadata().getDescription());
  for (  UIInput<?> input : context.getInputs()) {
    if (input.getValueType() == Boolean.class) {
      parameter.addOption(new OptionBuilder().name(input.getName().charAt(0)).longName(input.getName()).hasValue(false).description(input.getLabel()).create());
    }
 else {
      parameter.addOption(new OptionBuilder().name(input.getName().charAt(0)).longName(input.getName()).description(input.getLabel()).create());
    }
  }
  builder.addParameter(parameter);
  return builder.generateParser();
}","public static CommandLineParser generateParser(UICommand command,ShellContext context){
  ParserBuilder builder=new ParserBuilder();
  ParameterInt parameter=new ParameterInt(command.getMetadata().getName(),command.getMetadata().getDescription());
  for (  UIInputComponent<?,?> input : context.getInputs()) {
    if (input.getValueType() == Boolean.class) {
      parameter.addOption(new OptionBuilder().name(input.getName().charAt(0)).longName(input.getName()).hasValue(false).description(input.getLabel()).create());
    }
 else {
      parameter.addOption(new OptionBuilder().name(input.getName().charAt(0)).longName(input.getName()).description(input.getLabel()).create());
    }
  }
  builder.addParameter(parameter);
  return builder.generateParser();
}",0.9927104042412194
151549,"public static void populateUIInputs(CommandLine commandLine,ShellContext context){
  for (  UIInput<?> input : context.getInputs()) {
    if (commandLine.hasOption(input.getName())) {
      String value=commandLine.getOptionValue(input.getName());
      if (value == null) {
        if (input.getValueType() == Boolean.class)         value=""String_Node_Str"";
 else         value=""String_Node_Str"";
      }
      setInputValue(input,value);
    }
 else     input.setValue(null);
  }
}","public static void populateUIInputs(CommandLine commandLine,ShellContext context){
  for (  UIInputComponent<?,?> input : context.getInputs()) {
    if (commandLine.hasOption(input.getName())) {
      String value=commandLine.getOptionValue(input.getName());
      if (value == null) {
        if (input.getValueType() == Boolean.class)         value=""String_Node_Str"";
 else         value=""String_Node_Str"";
      }
      setInputValue(input,value);
    }
 else     input.setValue(null);
  }
}",0.9887410440122824
151550,"@SuppressWarnings({""String_Node_Str""}) private static void setInputValue(UIInput<?> input,String value){
  if (input.getValueType() == String.class) {
    ((UIInput<String>)input).setValue(value);
  }
 else   if (input.getValueType() == Boolean.class) {
    ((UIInput<Boolean>)input).setValue(Boolean.parseBoolean(value));
  }
 else   if (input.getValueType() == Integer.class) {
    ((UIInput<Integer>)input).setValue(Integer.parseInt(value));
  }
 else   input.setValue(null);
}","@SuppressWarnings({""String_Node_Str""}) private static void setInputValue(UIInputComponent<?,?> input,String value){
  if (input.getValueType() == String.class) {
    ((UIInput<String>)input).setValue(value);
  }
 else   if (input.getValueType() == Boolean.class) {
    ((UIInput<Boolean>)input).setValue(Boolean.parseBoolean(value));
  }
 else   if (input.getValueType() == Integer.class) {
    ((UIInput<Integer>)input).setValue(Integer.parseInt(value));
  }
 else   input.setValue(null);
}",0.988671472708548
151551,"@Override public UIBuilder add(UIInput<?> input){
  inputs.add(input);
  return this;
}","@Override public UIBuilder add(UIInputComponent<?,?> input){
  inputs.add(input);
  return this;
}",0.9405405405405406
151552,"@Test public void testInvokeCommand() throws Exception {
  final List<UIInput<?>> inputs=new ArrayList<UIInput<?>>();
  final UIBuilder builder=new UIBuilder(){
    @Override public UIBuilder add(    UIInput<?> input){
      inputs.add(input);
      return this;
    }
  }
;
  UIContext context=new UIContext(){
    @Override public UIBuilder getUIBuilder(){
      return builder;
    }
    @Override public <T>UISelection<T> getInitialSelection(){
      return null;
    }
  }
;
  command.initializeUI(context);
  command.getNamed().setValue(""String_Node_Str"");
  command.validate(new UIValidationContext(){
    @Override public UIBuilder getUIBuilder(){
      return builder;
    }
    @Override public void addValidationError(    UIInput<?> input,    String errorMessage){
    }
    @Override public <T>UISelection<T> getInitialSelection(){
      return null;
    }
  }
);
  DirectoryResource targetDirectory=command.getTargetLocation().getValue().getChildDirectory(""String_Node_Str"");
  Assert.assertFalse(targetDirectory.exists());
  command.execute(context);
  Assert.assertTrue(targetDirectory.exists());
  targetDirectory.delete(true);
}","@Test public void testInvokeCommand() throws Exception {
  final List<UIInputComponent<?,?>> inputs=new ArrayList<UIInputComponent<?,?>>();
  final UIBuilder builder=new UIBuilder(){
    @Override public UIBuilder add(    UIInputComponent<?,?> input){
      inputs.add(input);
      return this;
    }
  }
;
  UIContext context=new UIContext(){
    @Override public UIBuilder getUIBuilder(){
      return builder;
    }
    @Override public <T>UISelection<T> getInitialSelection(){
      return null;
    }
  }
;
  command.initializeUI(context);
  command.getNamed().setValue(""String_Node_Str"");
  command.validate(new UIValidationContext(){
    @Override public UIBuilder getUIBuilder(){
      return builder;
    }
    @Override public void addValidationError(    UIInputComponent<?,?> input,    String errorMessage){
    }
    @Override public <T>UISelection<T> getInitialSelection(){
      return null;
    }
  }
);
  DirectoryResource targetDirectory=command.getTargetLocation().getValue().getChildDirectory(""String_Node_Str"");
  Assert.assertFalse(targetDirectory.exists());
  command.execute(context);
  Assert.assertTrue(targetDirectory.exists());
  targetDirectory.delete(true);
}",0.9811482433590404
151553,"@Override public void addValidationError(UIInput<?> input,String errorMessage){
}","@Override public void addValidationError(UIInputComponent<?,?> input,String errorMessage){
}",0.9364161849710982
151554,"public void addValidationError(UIInput<?> input,String errorMessage);","public void addValidationError(UIInputComponent<?,?> input,String errorMessage);",0.9261744966442952
151555,"public static Class<?> unwrapProxyTypes(Class<?> type,ClassLoader... loaders){
  Class<?> result=type;
  if (isProxyType(result)) {
    Class<?> superclass=result.getSuperclass();
    while (superclass != null && !superclass.getName().equals(Object.class.getName()) && isProxyType(superclass)) {
      superclass=superclass.getSuperclass();
    }
    if (superclass != null && !superclass.getName().equals(Object.class.getName()))     return superclass;
    for (    ClassLoader loader : loaders) {
      try {
        if (result.getName().contains(""String_Node_Str"")) {
          String typeName=result.getName().replaceAll(""String_Node_Str"",""String_Node_Str"");
          result=loader.loadClass(typeName);
          break;
        }
 else         if (result.getName().contains(""String_Node_Str"")) {
          String typeName=result.getName().replaceAll(""String_Node_Str"",""String_Node_Str"");
          result=loader.loadClass(typeName);
          break;
        }
      }
 catch (      ClassNotFoundException e) {
      }
    }
  }
  return result;
}","public static Class<?> unwrapProxyTypes(Class<?> type,ClassLoader... loaders){
  Class<?> result=type;
  if (isProxyType(result)) {
    Class<?> superclass=result.getSuperclass();
    while (superclass != null && !superclass.getName().equals(Object.class.getName()) && isProxyType(superclass)) {
      superclass=superclass.getSuperclass();
    }
    if (superclass != null && !superclass.getName().equals(Object.class.getName()))     return superclass;
    String typeName=unwrapProxyClassName(result);
    for (    ClassLoader loader : loaders) {
      try {
        result=loader.loadClass(typeName);
        break;
      }
 catch (      ClassNotFoundException e) {
      }
    }
  }
  return result;
}",0.714123006833713
151556,"@Override public Object call() throws Exception {
  try {
    convertParameterValues(args,method);
    return method.invoke(delegate,args);
  }
 catch (  Throwable e) {
    throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
  }
}","@Override public Object call() throws Exception {
  try {
    return method.invoke(delegate,args);
  }
 catch (  Throwable e) {
    throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
  }
}",0.9368258859784284
151557,"@Override public Object intercept(final Object obj,final Method method,final Object[] args,final MethodProxy proxy) throws Throwable {
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        convertParameterValues(args,method);
        return method.invoke(delegate,args);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
      }
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}","@Override public Object intercept(final Object obj,final Method method,final Object[] args,final MethodProxy proxy) throws Throwable {
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        return method.invoke(delegate,args);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
      }
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}",0.9622166246851386
151558,"@SuppressWarnings(""String_Node_Str"") public Object get(final InjectionPoint injectionPoint){
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      Bean<R> bean=(Bean<R>)manager.resolve(manager.getBeans(actualType));
      context=manager.createCreationalContext(bean);
      Object delegate=manager.getInjectableReference(injectionPoint,context);
      return Enhancer.create(requestedType,new RemoteClassLoaderInterceptor(loader,delegate));
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}","@SuppressWarnings(""String_Node_Str"") public Object get(final InjectionPoint injectionPoint){
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      Bean<R> bean=(Bean<R>)manager.resolve(manager.getBeans(actualType));
      context=manager.createCreationalContext(bean);
      Object delegate=manager.getInjectableReference(injectionPoint,context);
      return Enhancer.create(requestedType,new RemoteClassLoaderInterceptor(loader,delegate));
    }
  }
;
  return (R)ClassLoaders.executeIn(loader,task);
}",0.9973045822102424
151559,"public void processRemotes(@Observes ProcessAnnotatedType<?> event) throws InstantiationException, IllegalAccessException {
  Class<?> type=event.getAnnotatedType().getJavaClass();
  if (Annotations.isAnnotationPresent(type,Exported.class)) {
    if (type.getClassLoader().equals(Thread.currentThread().getContextClassLoader())) {
      services.put(event.getAnnotatedType().getJavaClass(),event.getAnnotatedType());
    }
  }
}","public void processRemotes(@Observes ProcessAnnotatedType<?> event) throws InstantiationException, IllegalAccessException {
  Class<?> type=event.getAnnotatedType().getJavaClass();
  if (Annotations.isAnnotationPresent(type,Exported.class) && !(Modifier.isAbstract(type.getModifiers()) || Modifier.isInterface(type.getModifiers()))) {
    if (type.getClassLoader().equals(Thread.currentThread().getContextClassLoader())) {
      services.put(event.getAnnotatedType().getJavaClass(),event.getAnnotatedType());
    }
  }
}",0.9029535864978904
151560,"/** 
 * @param requestedType interface
 * @param actualType Implementation
 * @return
 */
private <T>ExportedInstance<T> getExportedInstance(Class<T> requestedType,Class<T> actualType){
  Assert.notNull(requestedType,""String_Node_Str"");
  Assert.notNull(actualType,""String_Node_Str"");
  Addons.waitUntilStarted(addon);
  final Class<T> requestedLoadedType;
  final Class<? extends T> actualLoadedType;
  try {
    requestedLoadedType=loadAddonClass(requestedType);
  }
 catch (  ClassNotFoundException cnfe) {
    log.fine(""String_Node_Str"" + requestedType.getName() + ""String_Node_Str"");
    return null;
  }
  try {
    actualLoadedType=loadAddonClass(actualType);
  }
 catch (  ClassNotFoundException cnfe) {
    log.fine(""String_Node_Str"" + actualType.getName() + ""String_Node_Str"");
    return null;
  }
  try {
    ExportedInstance<T> result=null;
    if (!manager.getBeans(requestedLoadedType).isEmpty()) {
      result=new ExportedInstanceImpl<T>(addon.getClassLoader(),manager,requestedLoadedType,actualLoadedType);
    }
    return result;
  }
 catch (  Exception e) {
    throw new ContainerException(""String_Node_Str"",e);
  }
}","/** 
 * @param requestedType interface
 * @param actualType Implementation
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private <T>ExportedInstance<T> getExportedInstance(Class<T> requestedType,Class<T> actualType){
  Assert.notNull(requestedType,""String_Node_Str"");
  Assert.notNull(actualType,""String_Node_Str"");
  Addons.waitUntilStarted(addon);
  final Class<T> requestedLoadedType;
  final Class<? extends T> actualLoadedType;
  try {
    requestedLoadedType=loadAddonClass(requestedType);
  }
 catch (  ClassNotFoundException cnfe) {
    log.fine(""String_Node_Str"" + requestedType.getName() + ""String_Node_Str"");
    return null;
  }
  try {
    actualLoadedType=loadAddonClass(actualType);
  }
 catch (  ClassNotFoundException cnfe) {
    log.fine(""String_Node_Str"" + actualType.getName() + ""String_Node_Str"");
    return null;
  }
  try {
    ExportedInstance<T> result=null;
    Set<Bean<?>> beans=manager.getBeans(requestedLoadedType);
    if (!beans.isEmpty()) {
      result=new ExportedInstanceImpl<T>(addon.getClassLoader(),manager,(Bean<T>)manager.resolve(beans),requestedLoadedType,actualLoadedType);
    }
    return result;
  }
 catch (  Exception e) {
    throw new ContainerException(""String_Node_Str"",e);
  }
}",0.927219183845183
151561,"@SuppressWarnings(""String_Node_Str"") @Override public <T>Set<ExportedInstance<T>> getExportedInstances(Class<T> requestedType){
  Addons.waitUntilStarted(addon);
  Set<ExportedInstance<T>> result=new HashSet<ExportedInstance<T>>();
  Class<T> requestedLoadedType;
  try {
    requestedLoadedType=loadAddonClass(requestedType);
  }
 catch (  ClassNotFoundException e) {
    return result;
  }
  for (  Class<?> type : services) {
    if (requestedLoadedType.isAssignableFrom(type)) {
      Class<? extends T> assignableClass=(Class<? extends T>)type;
      result.add(new ExportedInstanceImpl<T>(addon.getClassLoader(),manager,requestedLoadedType,assignableClass));
    }
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T>Set<ExportedInstance<T>> getExportedInstances(Class<T> requestedType){
  Addons.waitUntilStarted(addon);
  Set<ExportedInstance<T>> result=new HashSet<ExportedInstance<T>>();
  Class<T> requestedLoadedType;
  try {
    requestedLoadedType=loadAddonClass(requestedType);
  }
 catch (  ClassNotFoundException e) {
    return result;
  }
  for (  Class<?> type : services) {
    if (requestedLoadedType.isAssignableFrom(type)) {
      Set<Bean<?>> beans=manager.getBeans(type);
      Class<? extends T> assignableClass=(Class<? extends T>)type;
      result.add(new ExportedInstanceImpl<T>(addon.getClassLoader(),manager,(Bean<T>)manager.resolve(beans),requestedLoadedType,assignableClass));
    }
  }
  return result;
}",0.9447852760736196
151562,"public ExportedInstanceImpl(ClassLoader loader,BeanManager manager,Class<R> requestedType,Class<? extends R> actualType){
  this.loader=loader;
  this.manager=manager;
  this.requestedType=requestedType;
  this.actualType=actualType;
}","public ExportedInstanceImpl(ClassLoader loader,BeanManager manager,Bean<R> requestedBean,Class<R> requestedType,Class<? extends R> actualType){
  this.loader=loader;
  this.manager=manager;
  this.requestedBean=requestedBean;
  this.requestedType=requestedType;
  this.actualType=actualType;
}",0.8712121212121212
151563,"@Override public Object call() throws Exception {
  try {
    return method.invoke(delegate,args);
  }
 catch (  Throwable e) {
    throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
  }
}","@Override public Object call() throws Exception {
  try {
    convertParameterValues(args,method);
    return method.invoke(delegate,args);
  }
 catch (  Throwable e) {
    throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
  }
}",0.9368258859784284
151564,"@Override public Object intercept(final Object obj,final Method method,final Object[] args,final MethodProxy proxy) throws Throwable {
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        return method.invoke(delegate,args);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
      }
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}","@Override public Object intercept(final Object obj,final Method method,final Object[] args,final MethodProxy proxy) throws Throwable {
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        convertParameterValues(args,method);
        return method.invoke(delegate,args);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ method.getName()+ ""String_Node_Str""+ loader+ ""String_Node_Str"",e);
      }
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}",0.9622166246851386
151565,"@SuppressWarnings(""String_Node_Str"") public Object get(final InjectionPoint injectionPoint){
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      Bean<R> bean=(Bean<R>)manager.resolve(manager.getBeans(actualType));
      context=manager.createCreationalContext(bean);
      Object delegate=manager.getInjectableReference(injectionPoint,context);
      return Enhancer.create(requestedType,new RemoteClassLoaderInterceptor(loader,delegate));
    }
  }
;
  return (R)ClassLoaders.executeIn(loader,task);
}","@SuppressWarnings(""String_Node_Str"") public Object get(final InjectionPoint injectionPoint){
  Callable<Object> task=new Callable<Object>(){
    @Override public Object call() throws Exception {
      Bean<R> bean=(Bean<R>)manager.resolve(manager.getBeans(actualType));
      context=manager.createCreationalContext(bean);
      Object delegate=manager.getInjectableReference(injectionPoint,context);
      return Enhancer.create(requestedType,new RemoteClassLoaderInterceptor(loader,delegate));
    }
  }
;
  return ClassLoaders.executeIn(loader,task);
}",0.9973045822102424
151566,"@Override public Object invoke(final Object obj,final Method proxy,final Method method,final Object[] args) throws Throwable {
  return ClassLoaders.executeIn(toLoader,new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        try {
          if (proxy.getDeclaringClass().equals(toLoader.loadClass(ClassLoaderAdapterProxy.class.getName()))) {
            return delegate;
          }
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
        Method delegateMethod=getDelegateMethod(proxy);
        List<Object> parameterValues=convertParameterValues(args,delegateMethod);
        AccessibleObject.setAccessible(new AccessibleObject[]{delegateMethod},true);
        Object result=delegateMethod.invoke(delegate,parameterValues.toArray());
        return enhanceResult(proxy,result);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ proxy.getName()+ ""String_Node_Str""+ toLoader+ ""String_Node_Str"",e);
      }
    }
    private Method getDelegateMethod(    final Method proxy) throws ClassNotFoundException, NoSuchMethodException {
      Method delegateMethod=null;
      try {
        List<Class<?>> parameterTypes=convertParameterTypes(proxy);
        delegateMethod=delegate.getClass().getMethod(proxy.getName(),parameterTypes.toArray(new Class<?>[parameterTypes.size()]));
      }
 catch (      ClassNotFoundException e) {
        method:         for (        Method m : delegate.getClass().getMethods()) {
          String methodName=proxy.getName();
          String delegateMethodName=m.getName();
          if (methodName.equals(delegateMethodName)) {
            Class<?>[] methodParameterTypes=proxy.getParameterTypes();
            Class<?>[] delegateParameterTypes=m.getParameterTypes();
            if (methodParameterTypes.length == delegateParameterTypes.length) {
              for (int i=0; i < methodParameterTypes.length; i++) {
                Class<?> methodType=methodParameterTypes[i];
                Class<?> delegateType=delegateParameterTypes[i];
                if (!methodType.getName().equals(delegateType.getName())) {
                  continue method;
                }
              }
              delegateMethod=m;
              break;
            }
          }
        }
        if (delegateMethod == null)         throw e;
      }
      return delegateMethod;
    }
  }
);
}","@Override public Object invoke(final Object obj,final Method proxy,final Method method,final Object[] args) throws Throwable {
  return ClassLoaders.executeIn(toLoader,new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        try {
          if (proxy.getDeclaringClass().equals(fromLoader.loadClass(ClassLoaderAdapterProxy.class.getName()))) {
            return delegate;
          }
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
        Method delegateMethod=getDelegateMethod(proxy);
        List<Object> parameterValues=convertParameterValues(args,delegateMethod);
        AccessibleObject.setAccessible(new AccessibleObject[]{delegateMethod},true);
        Object result=delegateMethod.invoke(delegate,parameterValues.toArray());
        return enhanceResult(proxy,result);
      }
 catch (      Throwable e) {
        throw new ContainerException(""String_Node_Str"" + delegate.getClass().getName() + ""String_Node_Str""+ proxy.getName()+ ""String_Node_Str""+ toLoader+ ""String_Node_Str"",e);
      }
    }
    private Method getDelegateMethod(    final Method proxy) throws ClassNotFoundException, NoSuchMethodException {
      Method delegateMethod=null;
      try {
        List<Class<?>> parameterTypes=convertParameterTypes(proxy);
        delegateMethod=delegate.getClass().getMethod(proxy.getName(),parameterTypes.toArray(new Class<?>[parameterTypes.size()]));
      }
 catch (      ClassNotFoundException e) {
        method:         for (        Method m : delegate.getClass().getMethods()) {
          String methodName=proxy.getName();
          String delegateMethodName=m.getName();
          if (methodName.equals(delegateMethodName)) {
            Class<?>[] methodParameterTypes=proxy.getParameterTypes();
            Class<?>[] delegateParameterTypes=m.getParameterTypes();
            if (methodParameterTypes.length == delegateParameterTypes.length) {
              for (int i=0; i < methodParameterTypes.length; i++) {
                Class<?> methodType=methodParameterTypes[i];
                Class<?> delegateType=delegateParameterTypes[i];
                if (!methodType.getName().equals(delegateType.getName())) {
                  continue method;
                }
              }
              delegateMethod=m;
              break;
            }
          }
        }
        if (delegateMethod == null)         throw e;
      }
      return delegateMethod;
    }
  }
);
}",0.998812821527503
151567,"public static Class<?>[] getCompatibleClassHierarchy(ClassLoader loader,Class<?> origin){
  Set<Class<?>> hierarchy=new LinkedHashSet<Class<?>>();
  Class<?> baseClass=origin;
  while (Modifier.isFinal(baseClass.getModifiers())) {
    baseClass=baseClass.getSuperclass();
  }
  if (ClassLoaders.containsClass(loader,baseClass) && !Object.class.equals(baseClass) && isInstantiable(baseClass)) {
    hierarchy.add(ClassLoaders.loadClass(loader,baseClass));
  }
  baseClass=origin;
  while (baseClass != null) {
    for (    Class<?> type : baseClass.getInterfaces()) {
      if (ClassLoaders.containsClass(loader,type))       hierarchy.add(ClassLoaders.loadClass(loader,type));
    }
    baseClass=baseClass.getSuperclass();
  }
  return hierarchy.toArray(new Class<?>[hierarchy.size()]);
}","public static Class<?>[] getCompatibleClassHierarchy(ClassLoader loader,Class<?> origin){
  Set<Class<?>> hierarchy=new LinkedHashSet<Class<?>>();
  Class<?> baseClass=origin;
  while (Modifier.isFinal(baseClass.getModifiers())) {
    baseClass=baseClass.getSuperclass();
  }
  if (ClassLoaders.containsClass(loader,baseClass) && !Object.class.equals(baseClass) && (isInstantiable(baseClass) || baseClass.isInterface())) {
    hierarchy.add(ClassLoaders.loadClass(loader,baseClass));
  }
  baseClass=origin;
  while (baseClass != null) {
    for (    Class<?> type : baseClass.getInterfaces()) {
      if (ClassLoaders.containsClass(loader,type))       hierarchy.add(ClassLoaders.loadClass(loader,type));
    }
    baseClass=baseClass.getSuperclass();
  }
  return hierarchy.toArray(new Class<?>[hierarchy.size()]);
}",0.9819314641744548
151568,"@Override public void run(){
  ClassLoaders.executeIn(loader,new Callable<Object>(){
    @Override public Object call() throws Exception {
      forge=ServiceLoader.load(Forge.class).iterator().next();
      forge.setServerMode(true).setAddonDir(addonDir).start();
      return forge;
    }
  }
);
}","@Override public void run(){
  ClassLoaders.executeIn(loader,new Callable<Object>(){
    @Override public Object call() throws Exception {
      forge=new ForgeImpl();
      forge.setServerMode(true).setAddonDir(addonDir).start(loader);
      return forge;
    }
  }
);
}",0.6210526315789474
151569,"@Override public Object call() throws Exception {
  forge=ServiceLoader.load(Forge.class).iterator().next();
  forge.setServerMode(true).setAddonDir(addonDir).start();
  return forge;
}","@Override public Object call() throws Exception {
  forge=new ForgeImpl();
  forge.setServerMode(true).setAddonDir(addonDir).start(loader);
  return forge;
}",0.847953216374269
151570,"@Override protected void configure(ModuleLoader loader,Builder builder){
  builder.addDependency(DependencySpec.createSystemDependencySpec(PathFilters.acceptAll(),PathFilters.any(Arrays.asList(PathFilters.is(""String_Node_Str""),PathFilters.isChildOf(""String_Node_Str""),PathFilters.is(""String_Node_Str""),PathFilters.isChildOf(""String_Node_Str""))),systemPaths));
}","@Override protected void configure(ModuleLoader loader,Builder builder){
  builder.addDependency(DependencySpec.createSystemDependencySpec(PathFilters.acceptAll(),PathFilters.any(Arrays.asList(PathFilters.is(""String_Node_Str""),PathFilters.is(""String_Node_Str""),PathFilters.isChildOf(""String_Node_Str""),PathFilters.is(""String_Node_Str""),PathFilters.isChildOf(""String_Node_Str""))),systemPaths));
}",0.955026455026455
151571,"@Override public boolean accept(DependencyNode node){
  Coordinate coordinate=node.getDependency().getCoordinate();
  return ""String_Node_Str"".equals(coordinate.getGroupId()) && ""String_Node_Str"".equals(coordinate.getArtifactId());
}","@Override public boolean accept(DependencyNode node){
  return Dependencies.isForgeAddon(node.getDependency().getCoordinate()) && !node.getDependency().isOptional();
}",0.6
151572,"private void deploy(AddonId addon,DependencyNode root){
  List<File> resourceJars=toResourceJars(Dependencies.select(root,LocalResourceFilter.INSTANCE));
  List<AddonDependency> addonDependencies=toAddonDependencies(Dependencies.select(root,new DirectAddonFilter(root)));
  repository.deploy(addon,addonDependencies,resourceJars);
}","private void deploy(AddonId addon,DependencyNode root){
  List<File> resourceJars=toResourceJars(Dependencies.select(root,new LocalResourceFilter(root)));
  List<AddonDependency> addonDependencies=toAddonDependencies(Dependencies.select(root,new DirectAddonFilter(root)));
  repository.deploy(addon,addonDependencies,resourceJars);
}",0.9714285714285714
151573,"protected AbstractResource(final ResourceFactory factory,final Resource<?> parent){
  this.resourceFactory=factory;
  this.parent=parent;
}","protected AbstractResource(final ResourceFactory factory,final Resource<?> parent){
  if (factory == null)   throw new IllegalArgumentException(""String_Node_Str"");
  this.resourceFactory=factory;
  this.parent=parent;
}",0.776536312849162
151574,"public static RegisteredAddonFilter allWaiting(){
  return new RegisteredAddonFilter(){
    @Override public boolean accept(    RegisteredAddon addon){
      return Status.STARTED.equals(addon.getStatus());
    }
  }
;
}","public static RegisteredAddonFilter allWaiting(){
  return new RegisteredAddonFilter(){
    @Override public boolean accept(    RegisteredAddon addon){
      return Status.WAITING.equals(addon.getStatus());
    }
  }
;
}",0.8909090909090909
151575,"@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void installFromGit(@Option(description=""String_Node_Str"",required=true) final String gitRepo,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String refName,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final Resource<?> checkoutDir,final ShellPrintWriter out) throws Exception {
  DirectoryResource workspace=shell.getCurrentDirectory().createTempResource();
  try {
    DirectoryResource buildDir=workspace.getChildDirectory(""String_Node_Str"");
    if (checkoutDir != null) {
      if (!checkoutDir.exists() && (checkoutDir instanceof FileResource<?>)) {
        ((FileResource<?>)checkoutDir).mkdirs();
      }
      buildDir=checkoutDir.reify(DirectoryResource.class);
    }
    if (buildDir.exists()) {
      buildDir.delete(true);
      buildDir.mkdir();
    }
    prepareProxyForJGit();
    ShellMessages.info(out,""String_Node_Str"" + buildDir.getFullyQualifiedName() + ""String_Node_Str"");
    Git repo=GitUtils.clone(buildDir,gitRepo);
    Ref ref=null;
    String targetRef=refName;
    if (targetRef == null) {
      targetRef=environment.getRuntimeVersion();
    }
    if (targetRef != null) {
      Map<String,Ref> tags=repo.getRepository().getTags();
      ref=tags.get(targetRef);
      if (ref == null) {
        List<Ref> refs=GitUtils.getRemoteBranches(repo);
        for (        Ref branchRef : refs) {
          String branchName=branchRef.getName();
          if (branchName != null && branchName.endsWith(targetRef)) {
            ref=repo.branchCreate().setName(targetRef).setUpstreamMode(SetupUpstreamMode.TRACK).setStartPoint(""String_Node_Str"" + targetRef).call();
          }
        }
      }
      if (ref == null) {
        List<String> sortedVersions=new ArrayList<String>();
        for (        Ref branchRef : GitUtils.getRemoteBranches(repo)) {
          String branchName=branchRef.getName();
          branchName=branchName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          if (InstalledPluginRegistry.isApiCompatible(targetRef,branchName))           sortedVersions.add(branchName);
        }
        for (        String tag : tags.keySet()) {
          if (InstalledPluginRegistry.isApiCompatible(targetRef,tag))           sortedVersions.add(tag);
        }
        Collections.sort(sortedVersions);
        if (!sortedVersions.isEmpty()) {
          String version=sortedVersions.get(sortedVersions.size() - 1);
          if (InstalledPluginRegistry.isApiCompatible(targetRef,version)) {
            ref=tags.get(version);
            if (ref == null) {
              ref=repo.branchCreate().setName(version).setUpstreamMode(SetupUpstreamMode.TRACK).setStartPoint(""String_Node_Str"" + version).call();
            }
          }
        }
      }
    }
    if (ref == null) {
      ref=repo.getRepository().getRef(""String_Node_Str"");
    }
    if (ref != null) {
      ShellMessages.info(out,""String_Node_Str"" + ref.getName() + ""String_Node_Str"");
      GitUtils.checkout(repo,ref,false,SetupUpstreamMode.TRACK,false);
    }
 else     if (refName != null) {
      throw new RuntimeException(""String_Node_Str"" + targetRef + ""String_Node_Str""+ repo.getRepository().getDirectory().getAbsolutePath()+ ""String_Node_Str"");
    }
 else {
      ShellMessages.warn(out,""String_Node_Str"" + environment.getRuntimeVersion() + ""String_Node_Str"");
    }
    buildFromCurrentProject(out,buildDir);
  }
  finally {
    if (checkoutDir != null) {
      ShellMessages.info(out,""String_Node_Str"" + workspace.getFullyQualifiedName() + ""String_Node_Str"");
      workspace.delete(true);
    }
  }
  ShellMessages.success(out,""String_Node_Str"" + gitRepo + ""String_Node_Str"");
  restart();
}","@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void installFromGit(@Option(description=""String_Node_Str"",required=true) final String gitRepo,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String refName,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final Resource<?> checkoutDir,final PipeOut out) throws Exception {
  DirectoryResource workspace=shell.getCurrentDirectory().createTempResource();
  try {
    DirectoryResource buildDir=workspace.getChildDirectory(""String_Node_Str"");
    if (checkoutDir != null) {
      if (!checkoutDir.exists() && (checkoutDir instanceof FileResource<?>)) {
        ((FileResource<?>)checkoutDir).mkdirs();
      }
      buildDir=checkoutDir.reify(DirectoryResource.class);
    }
    if (buildDir.exists()) {
      buildDir.delete(true);
      buildDir.mkdir();
    }
    prepareProxyForJGit();
    ShellMessages.info(out,""String_Node_Str"" + buildDir.getFullyQualifiedName() + ""String_Node_Str"");
    Git repo=GitUtils.clone(buildDir,gitRepo);
    Ref ref=null;
    String targetRef=refName;
    if (targetRef == null) {
      targetRef=environment.getRuntimeVersion();
    }
    if (targetRef != null) {
      Map<String,Ref> tags=repo.getRepository().getTags();
      ref=tags.get(targetRef);
      if (ref == null) {
        List<Ref> refs=GitUtils.getRemoteBranches(repo);
        for (        Ref branchRef : refs) {
          String branchName=branchRef.getName();
          if (branchName != null && branchName.endsWith(targetRef)) {
            ref=repo.branchCreate().setName(targetRef).setUpstreamMode(SetupUpstreamMode.TRACK).setStartPoint(""String_Node_Str"" + targetRef).call();
          }
        }
      }
      if (ref == null) {
        List<String> sortedVersions=new ArrayList<String>();
        for (        Ref branchRef : GitUtils.getRemoteBranches(repo)) {
          String branchName=branchRef.getName();
          branchName=branchName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          if (InstalledPluginRegistry.isApiCompatible(targetRef,branchName))           sortedVersions.add(branchName);
        }
        for (        String tag : tags.keySet()) {
          if (InstalledPluginRegistry.isApiCompatible(targetRef,tag))           sortedVersions.add(tag);
        }
        Collections.sort(sortedVersions);
        if (!sortedVersions.isEmpty()) {
          String version=sortedVersions.get(sortedVersions.size() - 1);
          if (InstalledPluginRegistry.isApiCompatible(targetRef,version)) {
            ref=tags.get(version);
            if (ref == null) {
              ref=repo.branchCreate().setName(version).setUpstreamMode(SetupUpstreamMode.TRACK).setStartPoint(""String_Node_Str"" + version).call();
            }
          }
        }
      }
    }
    if (ref == null) {
      ref=repo.getRepository().getRef(""String_Node_Str"");
    }
    if (ref != null) {
      ShellMessages.info(out,""String_Node_Str"" + ref.getName() + ""String_Node_Str"");
      GitUtils.checkout(repo,ref,false,SetupUpstreamMode.TRACK,false);
    }
 else     if (refName != null) {
      throw new RuntimeException(""String_Node_Str"" + targetRef + ""String_Node_Str""+ repo.getRepository().getDirectory().getAbsolutePath()+ ""String_Node_Str"");
    }
 else {
      ShellMessages.warn(out,""String_Node_Str"" + environment.getRuntimeVersion() + ""String_Node_Str"");
    }
    buildFromCurrentProject(out,buildDir);
  }
  finally {
    if (checkoutDir != null) {
      ShellMessages.info(out,""String_Node_Str"" + workspace.getFullyQualifiedName() + ""String_Node_Str"");
      workspace.delete(true);
    }
  }
  ShellMessages.success(out,""String_Node_Str"" + gitRepo + ""String_Node_Str"");
  restart();
}",0.997168666576783
151576,"@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void installFromIndex(@Option(description=""String_Node_Str"",completer=IndexPluginNameCompleter.class) final String pluginName,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String version,final ShellPrintWriter out) throws Exception {
  List<PluginRef> plugins=getPluginRefs(pluginName);
  if (plugins.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
  PluginRef ref=plugins.get(0);
  if (plugins.size() > 1) {
    boolean found=false;
    for (    PluginRef pluginRef : plugins) {
      if (pluginName.equals(pluginRef.getName())) {
        ref=pluginRef;
        found=true;
      }
    }
    if (!found)     throw new RuntimeException(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
  installPlugin(version,out,ref);
}","@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void installFromIndex(@Option(description=""String_Node_Str"",completer=IndexPluginNameCompleter.class) final String pluginName,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String version,final PipeOut out) throws Exception {
  List<PluginRef> plugins=PluginUtil.findPlugin(shell,configuration,pluginName);
  if (plugins.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
 else   if (plugins.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
 else {
    PluginRef ref=plugins.get(0);
    ShellMessages.info(out,""String_Node_Str"" + ref.getName());
    if (!ref.isGit()) {
      installFromMvnRepos(ref.getArtifact(),out,new DependencyRepositoryImpl(""String_Node_Str"",ref.getHomeRepo()));
    }
 else     if (ref.isGit()) {
      installFromGit(ref.getGitRepo(),Strings.isNullOrEmpty(version) ? ref.getGitRef() : version,null,out);
    }
  }
}",0.6269129287598945
151577,"private DirectoryResource createModule(final Project project,final Dependency dep,final Resource<?> artifact,final String apiVersion){
  boolean dependenciesAsResourceRoot=needDependenciesAsResourceRoot(project);
  DirectoryResource moduleDir=getOrCreatePluginModuleDirectory(dep);
  String pluginName=dep.getGroupId() + ""String_Node_Str"" + dep.getArtifactId();
  String pluginSlot=dep.getVersion();
  FileResource<?> moduleXml=(FileResource<?>)moduleDir.getChild(""String_Node_Str"");
  if (moduleXml.exists() && !prompt.promptBoolean(""String_Node_Str"" + pluginSlot + ""String_Node_Str"",true)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  moduleXml.delete();
  moduleXml.createNewFile();
  Node module=XMLParser.parse(getClass().getResourceAsStream(MODULE_TEMPLATE_XML));
  module.attribute(""String_Node_Str"",pluginName);
  module.attribute(""String_Node_Str"",pluginSlot);
  Node resources=module.getSingle(""String_Node_Str"");
  resources.createChild(""String_Node_Str"").attribute(""String_Node_Str"",dep.getArtifactId() + ""String_Node_Str"");
  if (dependenciesAsResourceRoot) {
    writeResourceRoots(project,module,moduleDir,resources);
  }
  FileResource<?> jar=moduleDir.getChild(dep.getArtifactId() + ""String_Node_Str"").reify(FileResource.class);
  jar.createNewFile();
  jar.setContents(artifact.getResourceInputStream());
  Node dependencies=module.getSingle(""String_Node_Str"");
  if (!dependenciesAsResourceRoot) {
    dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",pluginName + ""String_Node_Str"").attribute(""String_Node_Str"",pluginSlot);
  }
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  moduleXml.setContents(XMLParser.toXMLString(module));
  if (!dependenciesAsResourceRoot) {
    createDependenciesModule(project,dep);
  }
  registerPlugin(pluginName,pluginSlot,apiVersion);
  return moduleDir;
}","private DirectoryResource createModule(final Project project,final Dependency dep,final Resource<?> artifact,final String apiVersion){
  boolean dependenciesAsResourceRoot=needDependenciesAsResourceRoot(project);
  DirectoryResource moduleDir=getOrCreatePluginModuleDirectory(dep);
  String pluginName=dep.getGroupId() + ""String_Node_Str"" + dep.getArtifactId();
  String pluginSlot=dep.getVersion();
  FileResource<?> moduleXml=(FileResource<?>)moduleDir.getChild(""String_Node_Str"");
  if (moduleXml.exists() && !prompt.promptBoolean(""String_Node_Str"" + pluginSlot + ""String_Node_Str"",true)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  moduleXml.delete();
  moduleXml.createNewFile();
  Node module=XMLParser.parse(getClass().getResourceAsStream(MODULE_TEMPLATE_XML));
  module.attribute(""String_Node_Str"",pluginName);
  module.attribute(""String_Node_Str"",pluginSlot);
  Node resources=module.getSingle(""String_Node_Str"");
  resources.createChild(""String_Node_Str"").attribute(""String_Node_Str"",dep.getArtifactId() + ""String_Node_Str"");
  if (dependenciesAsResourceRoot) {
    writeResourceRoots(project,module,moduleDir,resources);
  }
  FileResource<?> jar=moduleDir.getChild(dep.getArtifactId() + ""String_Node_Str"").reify(FileResource.class);
  jar.createNewFile();
  jar.setContents(artifact.getResourceInputStream());
  Node dependencies=module.getSingle(""String_Node_Str"");
  if (!dependenciesAsResourceRoot) {
    dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",pluginName + ""String_Node_Str"").attribute(""String_Node_Str"",pluginSlot);
  }
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  dependencies.createChild(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  moduleXml.setContents(XMLParser.toXMLString(module));
  if (!dependenciesAsResourceRoot) {
    createDependenciesModule(project,dep);
  }
  registerPlugin(pluginName,pluginSlot,apiVersion);
  return moduleDir;
}",0.973560847552972
151578,"private void buildFromCurrentProject(final ShellPrintWriter out,final DirectoryResource buildDir) throws Abort {
  DirectoryResource savedLocation=shell.getCurrentDirectory();
  try {
    shell.setCurrentResource(buildDir);
    Project project=shell.getCurrentProject();
    if (project == null) {
      throw new IllegalStateException(""String_Node_Str"" + buildDir.getFullyQualifiedName() + ""String_Node_Str"");
    }
    DependencyFacet deps=project.getFacet(DependencyFacet.class);
    DependencyBuilder shellApi=DependencyBuilder.create(""String_Node_Str"");
    String apiVersion=null;
    if (!deps.hasEffectiveDependency(shellApi) && !prompt.promptBoolean(""String_Node_Str"",false)) {
      throw new Abort(""String_Node_Str"");
    }
 else {
      if (apiVersion == null) {
        Dependency directDependency=deps.getDirectDependency(shellApi);
        if ((directDependency != null) && !Strings.isNullOrEmpty(directDependency.getVersion()))         apiVersion=directDependency.getVersion();
      }
      if (apiVersion == null) {
        Dependency managedDependency=deps.getManagedDependency(shellApi);
        if ((managedDependency != null) && !Strings.isNullOrEmpty(managedDependency.getVersion()))         apiVersion=managedDependency.getVersion();
      }
      if (apiVersion == null) {
        Dependency effectiveDependency=deps.getEffectiveDependency(shellApi);
        if (effectiveDependency != null)         apiVersion=effectiveDependency.getVersion();
 else         apiVersion=environment.getRuntimeVersion();
      }
    }
    List<String> groupIds=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
    List<Dependency> dependencies=deps.getDependencies();
    for (    Dependency dependency : dependencies) {
      if (groupIds.contains(dependency.getGroupId()) && !(ScopeType.PROVIDED.equals(dependency.getScopeTypeEnum()) || ScopeType.TEST.equals(dependency.getScopeTypeEnum()))) {
        ShellMessages.warn(out,""String_Node_Str"" + dependency.toCoordinates() + ""String_Node_Str"");
        deps.addDirectDependency(DependencyBuilder.create(dependency).setScopeType(ScopeType.PROVIDED));
      }
    }
    ShellMessages.info(out,""String_Node_Str"");
    Resource<?> artifact=project.getFacet(PackagingFacet.class).createBuilder().runTests(false).build();
    if ((artifact != null) && artifact.exists()) {
      MetadataFacet meta=project.getFacet(MetadataFacet.class);
      Dependency dep=meta.getOutputDependency();
      ShellMessages.info(out,""String_Node_Str"");
      createModule(project,DependencyBuilder.create(dep).setVersion(dep.getVersion() + ""String_Node_Str"" + UUID.randomUUID().toString()),artifact,apiVersion);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + artifact.getFullyQualifiedName() + ""String_Node_Str"");
    }
  }
  finally {
    shell.setCurrentResource(savedLocation);
  }
}","private void buildFromCurrentProject(final PipeOut out,final DirectoryResource buildDir) throws Abort {
  DirectoryResource savedLocation=shell.getCurrentDirectory();
  try {
    shell.setCurrentResource(buildDir);
    Project project=shell.getCurrentProject();
    if (project == null) {
      throw new IllegalStateException(""String_Node_Str"" + buildDir.getFullyQualifiedName() + ""String_Node_Str"");
    }
    DependencyFacet deps=project.getFacet(DependencyFacet.class);
    DependencyBuilder shellApi=DependencyBuilder.create(""String_Node_Str"");
    String apiVersion=null;
    if (!deps.hasEffectiveDependency(shellApi) && !prompt.promptBoolean(""String_Node_Str"",false)) {
      throw new Abort(""String_Node_Str"");
    }
 else {
      if (apiVersion == null) {
        Dependency directDependency=deps.getDirectDependency(shellApi);
        if ((directDependency != null) && !Strings.isNullOrEmpty(directDependency.getVersion()))         apiVersion=directDependency.getVersion();
      }
      if (apiVersion == null) {
        Dependency managedDependency=deps.getManagedDependency(shellApi);
        if ((managedDependency != null) && !Strings.isNullOrEmpty(managedDependency.getVersion()))         apiVersion=managedDependency.getVersion();
      }
      if (apiVersion == null) {
        Dependency effectiveDependency=deps.getEffectiveDependency(shellApi);
        if (effectiveDependency != null)         apiVersion=effectiveDependency.getVersion();
 else         apiVersion=environment.getRuntimeVersion();
      }
    }
    List<String> groupIds=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
    List<Dependency> dependencies=deps.getDependencies();
    for (    Dependency dependency : dependencies) {
      if (groupIds.contains(dependency.getGroupId()) && !(ScopeType.PROVIDED.equals(dependency.getScopeTypeEnum()) || ScopeType.TEST.equals(dependency.getScopeTypeEnum()))) {
        ShellMessages.warn(out,""String_Node_Str"" + dependency.toCoordinates() + ""String_Node_Str"");
        deps.addDirectDependency(DependencyBuilder.create(dependency).setScopeType(ScopeType.PROVIDED));
      }
    }
    ShellMessages.info(out,""String_Node_Str"");
    Resource<?> artifact=project.getFacet(PackagingFacet.class).createBuilder().runTests(false).build();
    if ((artifact != null) && artifact.exists()) {
      MetadataFacet meta=project.getFacet(MetadataFacet.class);
      Dependency dep=meta.getOutputDependency();
      ShellMessages.info(out,""String_Node_Str"");
      createModule(project,DependencyBuilder.create(dep).setVersion(dep.getVersion() + ""String_Node_Str"" + UUID.randomUUID().toString()),artifact,apiVersion);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + artifact.getFullyQualifiedName() + ""String_Node_Str"");
    }
  }
  finally {
    shell.setCurrentResource(savedLocation);
  }
}",0.9963073676806752
151579,"@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void find(@Option(description=""String_Node_Str"") final String searchString,final PipeOut out) throws Exception {
  List<PluginRef> pluginList=getPluginRefs(searchString);
  if (!pluginList.isEmpty()) {
    out.println();
  }
  for (  PluginRef ref : pluginList) {
    displayPluginDetails(out,ref);
  }
}","@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void find(@Option(description=""String_Node_Str"") final String searchString,final PipeOut out) throws Exception {
  List<PluginRef> pluginList=PluginUtil.findPlugin(shell,configuration,searchString);
  if (!pluginList.isEmpty()) {
    out.println();
  }
  for (  PluginRef ref : pluginList) {
    out.println(""String_Node_Str"" + out.renderColor(ShellColor.BOLD,ref.getName()) + ""String_Node_Str""+ ref.getArtifact()+ ""String_Node_Str"");
    out.println(""String_Node_Str"" + ref.getAuthor());
    out.println(""String_Node_Str"" + ref.getWebsite());
    out.println(""String_Node_Str"" + ref.getLocation());
    out.println(""String_Node_Str"" + ref.getTags());
    out.println(""String_Node_Str"" + ref.getDescription());
    out.println();
  }
}",0.5775492716366752
151580,"public static CherryPickResult cherryPickNoMerge(final Git git,Ref src) throws GitAPIException {
  Repository repo=git.getRepository();
  RevCommit newHead=null;
  List<Ref> cherryPickedRefs=new LinkedList<Ref>();
  RevWalk revWalk=new RevWalk(repo);
  try {
    Ref headRef=repo.getRef(Constants.HEAD);
    if (headRef == null)     throw new NoHeadException(JGitText.get().commitOnRepoWithoutHEADCurrentlyNotSupported);
    RevCommit headCommit=revWalk.parseCommit(headRef.getObjectId());
    newHead=headCommit;
    ObjectId srcObjectId=src.getPeeledObjectId();
    if (srcObjectId == null)     srcObjectId=src.getObjectId();
    RevCommit srcCommit=revWalk.parseCommit(srcObjectId);
    if (srcCommit.getParentCount() != 1)     throw new MultipleParentsNotAllowedException(MessageFormat.format(JGitText.get().canOnlyCherryPickCommitsWithOneParent,srcCommit.name(),Integer.valueOf(srcCommit.getParentCount())));
    RevCommit srcParent=srcCommit.getParent(0);
    revWalk.parseHeaders(srcParent);
    ResolveMerger merger=(ResolveMerger)MergeStrategy.RESOLVE.newMerger(repo);
    merger.setWorkingTreeIterator(new FileTreeIterator(repo));
    merger.setBase(srcParent.getTree());
    if (merger.merge(headCommit,srcCommit)) {
      DirCacheCheckout dco=new DirCacheCheckout(repo,headCommit.getTree(),repo.lockDirCache(),merger.getResultTreeId());
      dco.setFailOnConflict(true);
      dco.checkout();
      cherryPickedRefs.add(src);
    }
 else {
      if (merger.failed())       return new CherryPickResult(merger.getFailingPaths());
      String message=new MergeMessageFormatter().formatWithConflicts(srcCommit.getFullMessage(),merger.getUnmergedPaths());
      repo.writeCherryPickHead(srcCommit.getId());
      repo.writeMergeCommitMsg(message);
      return CherryPickResult.CONFLICT;
    }
  }
 catch (  IOException e) {
    throw new JGitInternalException(MessageFormat.format(JGitText.get().exceptionCaughtDuringExecutionOfCherryPickCommand,e),e);
  }
 finally {
    revWalk.release();
  }
  return new CherryPickResult(newHead,cherryPickedRefs);
}","public static CherryPickResult cherryPickNoMerge(final Git git,Ref src) throws GitAPIException {
  Repository repo=git.getRepository();
  RevCommit newHead=null;
  List<Ref> cherryPickedRefs=new LinkedList<Ref>();
  RevWalk revWalk=new RevWalk(repo);
  try {
    Ref headRef=repo.getRef(Constants.HEAD);
    if (headRef == null)     throw new NoHeadException(JGitText.get().commitOnRepoWithoutHEADCurrentlyNotSupported);
    RevCommit headCommit=revWalk.parseCommit(headRef.getObjectId());
    newHead=headCommit;
    ObjectId srcObjectId=src.getPeeledObjectId();
    if (srcObjectId == null)     srcObjectId=src.getObjectId();
    RevCommit srcCommit=revWalk.parseCommit(srcObjectId);
    if (srcCommit.getParentCount() == 0)     return null;
    if (srcCommit.getParentCount() > 1)     throw new MultipleParentsNotAllowedException(MessageFormat.format(JGitText.get().canOnlyCherryPickCommitsWithOneParent,srcCommit.name(),Integer.valueOf(srcCommit.getParentCount())));
    RevCommit srcParent=srcCommit.getParent(0);
    revWalk.parseHeaders(srcParent);
    ResolveMerger merger=(ResolveMerger)MergeStrategy.RESOLVE.newMerger(repo);
    merger.setWorkingTreeIterator(new FileTreeIterator(repo));
    merger.setBase(srcParent.getTree());
    if (merger.merge(headCommit,srcCommit)) {
      DirCacheCheckout dco=new DirCacheCheckout(repo,headCommit.getTree(),repo.lockDirCache(),merger.getResultTreeId());
      dco.setFailOnConflict(true);
      dco.checkout();
      cherryPickedRefs.add(src);
    }
 else {
      if (merger.failed())       return new CherryPickResult(merger.getFailingPaths());
      String message=new MergeMessageFormatter().formatWithConflicts(srcCommit.getFullMessage(),merger.getUnmergedPaths());
      repo.writeCherryPickHead(srcCommit.getId());
      repo.writeMergeCommitMsg(message);
      return CherryPickResult.CONFLICT;
    }
  }
 catch (  IOException e) {
    throw new JGitInternalException(MessageFormat.format(JGitText.get().exceptionCaughtDuringExecutionOfCherryPickCommand,e),e);
  }
 finally {
    revWalk.release();
  }
  return new CherryPickResult(newHead,cherryPickedRefs);
}",0.9858952904613912
151581,"@Override public Import addImport(final String className){
  Import imprt;
  String simpleName=Types.toSimpleName(className);
  if (!hasImport(simpleName) && validImport(className)) {
    imprt=new ImportImpl(this).setName(className);
    unit.imports().add(imprt.getInternal());
  }
 else   if (hasImport(className)) {
    imprt=getImport(className);
  }
 else {
    if (hasImport(simpleName)) {
      throw new IllegalStateException(""String_Node_Str"" + className + ""String_Node_Str""+ getImport(simpleName)+ ""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
    }
  }
  return imprt;
}","@Override public Import addImport(final String className){
  Import imprt;
  if (Types.isSimpleName(className) && !hasImport(className)) {
    throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
  }
  if (!hasImport(className) && validImport(className)) {
    imprt=new ImportImpl(this).setName(className);
    unit.imports().add(imprt.getInternal());
  }
 else   if (hasImport(className)) {
    imprt=getImport(className);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
  }
  return imprt;
}",0.6340288924558587
151582,"@Test public void testGetInterfaces() throws Exception {
  this.source.addInterface(Serializable.class);
  this.source.addInterface(""String_Node_Str"");
  this.source.addInterface(""String_Node_Str"");
  assertEquals(3,this.source.getInterfaces().size());
  assertTrue(this.source.hasInterface(""String_Node_Str""));
  assertTrue(this.source.hasInterface(""String_Node_Str""));
  assertTrue(this.source.hasImport(Serializable.class));
  assertTrue(this.source.hasImport(""String_Node_Str""));
  assertFalse(this.source.hasImport(""String_Node_Str""));
}","@Test public void testGetInterfaces() throws Exception {
  this.source.addInterface(Serializable.class);
  this.source.addInterface(""String_Node_Str"");
  this.source.addInterface(""String_Node_Str"");
  assertEquals(3,this.source.getInterfaces().size());
  assertTrue(this.source.hasInterface(""String_Node_Str""));
  assertTrue(this.source.hasInterface(""String_Node_Str""));
  assertTrue(this.source.hasImport(Serializable.class));
  assertTrue(this.source.hasImport(""String_Node_Str""));
  assertTrue(this.source.hasImport(""String_Node_Str""));
}",0.9935364727608494
151583,"@Override public final synchronized List<Resource<?>> listResources(final ResourceFilter filter){
  List<Resource<?>> result=new ArrayList<Resource<?>>();
  for (  Resource<?> resource : doListResources()) {
    if (filter.accept(resource)) {
      result.add(resource);
    }
  }
  Collections.sort(result,new FQNResourceComparator());
  return result;
}","@Override public synchronized List<Resource<?>> listResources(final ResourceFilter filter){
  List<Resource<?>> result=new ArrayList<Resource<?>>();
  for (  Resource<?> resource : doListResources()) {
    if (filter.accept(resource)) {
      result.add(resource);
    }
  }
  Collections.sort(result,new FQNResourceComparator());
  return result;
}",0.9914772727272728
151584,"@Override public final synchronized List<Resource<?>> listResources(final ResourceFilter filter){
  List<Resource<?>> result=new ArrayList<Resource<?>>();
  for (  Resource<?> resource : doListResources()) {
    if (filter.accept(resource)) {
      result.add(resource);
    }
  }
  Collections.sort(result,new FQNResourceComparator());
  return result;
}","@Override public synchronized List<Resource<?>> listResources(final ResourceFilter filter){
  List<Resource<?>> result=new ArrayList<Resource<?>>();
  for (  Resource<?> resource : doListResources()) {
    if (filter.accept(resource)) {
      result.add(resource);
    }
  }
  Collections.sort(result,new FQNResourceComparator());
  return result;
}",0.9914772727272728
151585,"private void initReaderAndStreams() throws IOException {
  if (inputPipe == null) {
    inputPipe=new ConsoleInputSession(System.in);
  }
  if (outputStream == null) {
    outputStream=System.out;
  }
  Terminal terminal;
  if (Boolean.getBoolean(""String_Node_Str"")) {
    terminal=new IdeTerminal();
  }
 else   if (OSUtils.isWindows()) {
    final OutputStream ansiOut=AnsiConsole.wrapOutputStream(outputStream);
    final OutputStreamWriter writer=new OutputStreamWriter(ansiOut,System.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")));
    outputStream=new OutputStream(){
      @Override public void write(      int b) throws IOException {
        writer.write(b);
      }
    }
;
    TerminalFactory.configure(TerminalFactory.Type.WINDOWS);
    terminal=TerminalFactory.get();
  }
 else {
    terminal=TerminalFactory.get();
  }
  this.screenBuffer=new JLineScreenBuffer(terminal,outputStream);
  this.reader=new ConsoleReader(inputPipe.getExternalInputStream(),screenBuffer,null,terminal);
  this.reader.setHistoryEnabled(true);
  this.reader.setBellEnabled(false);
  for (  TriggeredAction action : triggeredActions) {
    this.reader.addTriggeredAction(action.getTrigger(),action.getListener());
  }
}","private void initReaderAndStreams() throws IOException {
  if (inputPipe == null) {
    inputPipe=new ConsoleInputSession(System.in);
  }
  if (outputStream == null) {
    outputStream=System.out;
  }
  Terminal terminal;
  if (Boolean.getBoolean(""String_Node_Str"")) {
    terminal=new IdeTerminal();
  }
 else   if (OSUtils.isWindows()) {
    final OutputStream ansiOut=AnsiConsole.wrapOutputStream(outputStream);
    final OutputStreamWriter writer=new OutputStreamWriter(ansiOut,System.getProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"")));
    outputStream=new OutputStream(){
      @Override public void write(      int b) throws IOException {
        writer.write(b);
      }
    }
;
    TerminalFactory.configure(TerminalFactory.Type.WINDOWS);
    terminal=TerminalFactory.get();
  }
 else {
    terminal=TerminalFactory.get();
  }
  this.screenBuffer=new JLineScreenBuffer(terminal,outputStream);
  this.reader=new ConsoleReader(inputPipe.getExternalInputStream(),this,null,terminal);
  this.reader.setHistoryEnabled(true);
  this.reader.setBellEnabled(false);
  for (  TriggeredAction action : triggeredActions) {
    this.reader.addTriggeredAction(action.getTrigger(),action.getListener());
  }
}",0.9934747145187602
151586,"/** 
 * Print out the candidates. If the size of the candidates is greater than the  {@link org.jboss.forge.shell.console.ConsoleReader#getAutoprintThreshold}, they prompt with a warning.
 * @param candidates the list of candidates to print
 */
public void printCandidates(final ConsoleReader reader,Collection<CharSequence> candidates) throws IOException {
  Set<CharSequence> distinct=new HashSet<CharSequence>(candidates);
  if (distinct.size() > reader.getAutoprintThreshold()) {
    reader.print(Messages.DISPLAY_CANDIDATES.format(candidates.size()));
    reader.flush();
    int c;
    String noOpt=Messages.DISPLAY_CANDIDATES_NO.format();
    String yesOpt=Messages.DISPLAY_CANDIDATES_YES.format();
    char[] allowed={yesOpt.charAt(0),noOpt.charAt(0)};
    while ((c=reader.readCharacter(allowed)) != -1) {
      String tmp=new String(new char[]{(char)c});
      if (noOpt.startsWith(tmp)) {
        reader.println();
        return;
      }
 else       if (yesOpt.startsWith(tmp)) {
        break;
      }
 else {
        reader.beep();
      }
    }
  }
  if (distinct.size() != candidates.size()) {
    Collection<CharSequence> copy=new ArrayList<CharSequence>();
    for (    CharSequence next : candidates) {
      if (!copy.contains(next)) {
        copy.add(next);
      }
    }
    candidates=copy;
  }
  reader.println();
  Collection<CharSequence> colorizedCandidates=new ArrayList<CharSequence>();
  for (  CharSequence seq : candidates) {
    boolean processed=false;
    if (commandHolder.getState() != null) {
      CommandMetadata command=commandHolder.getState().getCommand();
      if ((command != null) && seq.toString().startsWith(""String_Node_Str"")) {
        String str=seq.toString().trim();
        if (str.startsWith(""String_Node_Str"")) {
          str=str.substring(2);
        }
        if (command.hasOption(str) && command.getNamedOption(str).isRequired()) {
          seq=shell.renderColor(ShellColor.BLUE,seq.toString());
          colorizedCandidates.add(seq);
          processed=true;
        }
      }
    }
    if (!processed) {
      colorizedCandidates.add(seq);
    }
  }
  reader.printColumns(colorizedCandidates);
}","/** 
 * Print out the candidates. If the size of the candidates is greater than the  {@link org.jboss.forge.shell.console.ConsoleReader#getAutoprintThreshold}, they prompt with a warning.
 * @param candidates the list of candidates to print
 */
public void printCandidates(final ConsoleReader reader,Collection<CharSequence> candidates) throws IOException {
  Set<CharSequence> distinct=new HashSet<CharSequence>(candidates);
  if (distinct.size() > reader.getAutoprintThreshold()) {
    reader.print(Messages.DISPLAY_CANDIDATES.format(candidates.size()));
    reader.flush();
    int c;
    String noOpt=Messages.DISPLAY_CANDIDATES_NO.format();
    String yesOpt=Messages.DISPLAY_CANDIDATES_YES.format();
    char[] allowed={yesOpt.charAt(0),noOpt.charAt(0)};
    while ((c=reader.readCharacter(allowed)) != -1) {
      String tmp=new String(new char[]{(char)c});
      if (noOpt.startsWith(tmp)) {
        reader.println();
        reader.flush();
        return;
      }
 else       if (yesOpt.startsWith(tmp)) {
        break;
      }
 else {
        reader.beep();
        reader.flush();
      }
    }
  }
  if (distinct.size() != candidates.size()) {
    Collection<CharSequence> copy=new ArrayList<CharSequence>();
    for (    CharSequence next : candidates) {
      if (!copy.contains(next)) {
        copy.add(next);
      }
    }
    candidates=copy;
  }
  reader.println();
  reader.flush();
  Collection<CharSequence> colorizedCandidates=new ArrayList<CharSequence>();
  for (  CharSequence seq : candidates) {
    boolean processed=false;
    if (commandHolder.getState() != null) {
      CommandMetadata command=commandHolder.getState().getCommand();
      if ((command != null) && seq.toString().startsWith(""String_Node_Str"")) {
        String str=seq.toString().trim();
        if (str.startsWith(""String_Node_Str"")) {
          str=str.substring(2);
        }
        if (command.hasOption(str) && command.getNamedOption(str).isRequired()) {
          seq=shell.renderColor(ShellColor.BLUE,seq.toString());
          colorizedCandidates.add(seq);
          processed=true;
        }
      }
    }
    if (!processed) {
      colorizedCandidates.add(seq);
    }
  }
  reader.printColumns(colorizedCandidates);
  reader.flush();
}",0.9809523809523808
151587,"@Override public boolean complete(final ConsoleReader reader,final List<CharSequence> candidates,final int pos) throws IOException {
  CursorBuffer buf=reader.getCursorBuffer();
  PluginCommandCompleterState state=commandHolder.getState();
  if (state != null) {
    if (((candidates.size() == 1) && ""String_Node_Str"".equals(candidates.get(0))) || (state.isDuplicateBuffer() && state.isFinalTokenComplete())) {
      if (commandHolder.getState().getOption() != null) {
        OptionMetadata option=commandHolder.getState().getOption();
        reader.println();
        reader.println(option.getOptionDescriptor());
        if (candidates.size() == 1) {
          reader.println();
          reader.drawLine();
          return true;
        }
      }
    }
  }
  if (candidates.size() == 1) {
    CharSequence value=candidates.get(0);
    if (value.equals(buf.toString())) {
      return false;
    }
    setBuffer(reader,value,pos);
    return true;
  }
 else   if (candidates.size() > 1) {
    String value=getUnambiguousCompletions(candidates);
    setBuffer(reader,value,pos);
  }
  printCandidates(reader,candidates);
  reader.drawLine();
  return true;
}","@Override public boolean complete(final ConsoleReader reader,final List<CharSequence> candidates,final int pos) throws IOException {
  CursorBuffer buf=reader.getCursorBuffer();
  PluginCommandCompleterState state=commandHolder.getState();
  if (state != null) {
    if (((candidates.size() == 1) && ""String_Node_Str"".equals(candidates.get(0))) || (state.isDuplicateBuffer() && state.isFinalTokenComplete())) {
      if (commandHolder.getState().getOption() != null) {
        OptionMetadata option=commandHolder.getState().getOption();
        reader.println();
        reader.println(option.getOptionDescriptor());
        if (candidates.size() == 1) {
          reader.println();
          reader.drawLine();
          return true;
        }
      }
    }
  }
  if (candidates.size() == 1) {
    CharSequence value=candidates.get(0);
    if (value.equals(buf.toString())) {
      return false;
    }
    setBuffer(reader,value,pos);
    return true;
  }
 else   if (candidates.size() > 1) {
    String value=getUnambiguousCompletions(candidates);
    setBuffer(reader,value,pos);
  }
  printCandidates(reader,candidates);
  reader.drawLine();
  reader.flush();
  return true;
}",0.9923142613151152
151588,"public void run(){
  while (!interrupted()) {
    try {
      BufferManager out=getOutput();
      out.write(fullPrompt);
      out.flushBuffer();
      sleep(3);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}","public void run(){
  while (!interrupted()) {
    try {
      BufferManager out=getShell().getBufferManager();
      out.write(fullPrompt);
      out.flushBuffer();
      sleep(3);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}",0.9377593360995852
151589,"private void beforeReadLine(final String prompt,final Character mask){
  if (mask != null && maskThread == null) {
    final String fullPrompt=""String_Node_Str"" + prompt + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ prompt;
    maskThread=new Thread(){
      public void run(){
        while (!interrupted()) {
          try {
            BufferManager out=getOutput();
            out.write(fullPrompt);
            out.flushBuffer();
            sleep(3);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
;
    maskThread.setPriority(Thread.MAX_PRIORITY);
    maskThread.setDaemon(true);
    maskThread.start();
  }
}","private void beforeReadLine(final String prompt,final Character mask){
  if (mask != null && maskThread == null) {
    final String fullPrompt=""String_Node_Str"" + prompt + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ prompt;
    maskThread=new Thread(){
      public void run(){
        while (!interrupted()) {
          try {
            BufferManager out=getShell().getBufferManager();
            out.write(fullPrompt);
            out.flushBuffer();
            sleep(3);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
;
    maskThread.setPriority(Thread.MAX_PRIORITY);
    maskThread.setDaemon(true);
    maskThread.start();
  }
}",0.979253112033195
151590,"/** 
 * Move the cursor <i>where</i> characters, without checking the current buffer.
 * @param where the number of characters to move to the right or left.
 */
private void moveInternal(final int where) throws IOException {
  buf.cursor+=where;
  if (terminal.isAnsiSupported()) {
    if (where < 0) {
      back(Math.abs(where));
    }
 else {
      int width=getTerminal().getWidth();
      int cursor=getCursorPosition();
      int oldLine=(cursor - where) / width;
      int newLine=cursor / width;
      if (newLine > oldLine) {
        printAnsiSequence((newLine - oldLine) + ""String_Node_Str"");
      }
      printAnsiSequence(1 + (cursor % width) + ""String_Node_Str"");
    }
    return;
  }
  char c;
  if (where < 0) {
    int len=0;
    for (int i=buf.cursor; i < buf.cursor - where; i++) {
      if (buf.buffer.charAt(i) == '\t') {
        len+=TAB_WIDTH;
      }
 else {
        len++;
      }
    }
    char chars[]=new char[len];
    Arrays.fill(chars,(char)BACKSPACE);
    outBuffer.write(new String(chars));
    return;
  }
 else   if (buf.cursor == 0) {
    return;
  }
 else   if (mask != null) {
    c=mask;
  }
 else {
    print(buf.buffer.substring(buf.cursor - where,buf.cursor).getBytes());
    return;
  }
  if (mask == NULL_MASK) {
    return;
  }
  print(c,Math.abs(where));
}","/** 
 * Move the cursor <i>where</i> characters, without checking the current buffer.
 * @param where the number of characters to move to the right or left.
 */
private void moveInternal(final int where) throws IOException {
  buf.cursor+=where;
  if (terminal.isAnsiSupported()) {
    if (where < 0) {
      back(Math.abs(where));
    }
 else {
      int width=getTerminal().getWidth();
      int cursor=getCursorPosition();
      int oldLine=(cursor - where) / width;
      int newLine=cursor / width;
      if (newLine > oldLine) {
        printAnsiSequence((newLine - oldLine) + ""String_Node_Str"");
      }
      printAnsiSequence(1 + (cursor % width) + ""String_Node_Str"");
    }
    return;
  }
  char c;
  if (where < 0) {
    int len=0;
    for (int i=buf.cursor; i < buf.cursor - where; i++) {
      if (buf.buffer.charAt(i) == '\t') {
        len+=TAB_WIDTH;
      }
 else {
        len++;
      }
    }
    char chars[]=new char[len];
    Arrays.fill(chars,(char)BACKSPACE);
    ;
    shell.print(new String(chars));
    return;
  }
 else   if (buf.cursor == 0) {
    return;
  }
 else   if (mask != null) {
    c=mask;
  }
 else {
    print(buf.buffer.substring(buf.cursor - where,buf.cursor).getBytes());
    return;
  }
  if (mask == NULL_MASK) {
    return;
  }
  print(c,Math.abs(where));
}",0.9877300613496932
151591,"/** 
 * Flush the console output stream. This is important for printout out single characters (like a backspace or keyboard) that we want the console to handle immediately.
 */
public void flush() throws IOException {
  outBuffer.flushBuffer();
}","/** 
 * Flush the console output stream. This is important for printout out single characters (like a backspace or keyboard) that we want the console to handle immediately.
 */
public void flush() throws IOException {
  shell.flush();
}",0.95850622406639
151592,"private void printAnsiSequence(String sequence) throws IOException {
  print(27);
  print('[');
  print(sequence);
}","private void printAnsiSequence(String sequence) throws IOException {
  print(ESCAPE_STR + sequence);
}",0.8348623853211009
151593,"public ConsoleReader(final InputStream in,final BufferManager out,final org.jboss.forge.shell.console.jline.Terminal term) throws IOException {
  this(in,out,null,term);
}","public ConsoleReader(final InputStream in,final Shell shell,final org.jboss.forge.shell.console.jline.Terminal term) throws IOException {
  this(in,shell,null,term);
}",0.9053254437869822
151594,"/** 
 * Reads the console input and returns an array of the form [raw, key binding].
 */
private int[] readBinding() throws IOException {
  int c=readVirtualKey();
  if (c == -1) {
    return null;
  }
  short code=keyBindings[c];
  org.jboss.forge.shell.console.jline.internal.Log.trace(""String_Node_Str"",c,""String_Node_Str"",code);
  return new int[]{c,code};
}","/** 
 * Reads the console input and returns an array of the form [raw, key binding].
 */
private int[] readBinding() throws IOException {
  int c=readVirtualKey();
  for (  KeyListener listener : keyListeners) {
    if (listener.keyPress(c)) {
      return null;
    }
  }
  if (c == -1) {
    return null;
  }
  short code=keyBindings[c];
  org.jboss.forge.shell.console.jline.internal.Log.trace(""String_Node_Str"",c,""String_Node_Str"",code);
  return new int[]{c,code};
}",0.8691476590636255
151595,"void doShell(@Observes final AcceptUserInput event) throws Exception {
  String line;
  reader.setPrompt(getPrompt());
  while (!exitRequested) {
    try {
      line=readLine();
      screenBuffer.flushBuffer();
      if (line != null) {
        if (!""String_Node_Str"".equals(line.trim())) {
          writeToHistory(line);
          execute(line);
        }
        reader.setPrompt(getPrompt());
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
}","void doShell(@Observes final AcceptUserInput event) throws Exception {
  String line;
  reader.setPrompt(getPrompt());
  while (!exitRequested) {
    try {
      line=readLine();
      try {
        bufferingMode();
        if (line != null) {
          if (!""String_Node_Str"".equals(line.trim())) {
            writeToHistory(line);
            execute(line);
          }
          reader.setPrompt(getPrompt());
        }
      }
  finally {
        directWriteMode();
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
}",0.8810916179337231
151596,"@Override public void flushBuffer(){
  try {
    reader.flush();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public synchronized void flushBuffer(){
  try {
    byte[] buf=new byte[2048];
    buffer.rewind();
    do {
      int i=0;
      for (; i < buf.length && bufferSize > 0; i++) {
        bufferSize--;
        buf[i]=buffer.get();
      }
      reader.print(new String(buf,0,i));
    }
 while (bufferSize > 0);
    bufferSize=0;
    buffer.clear();
    reader.flush();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.4967741935483871
151597,"public JLineScreenBuffer(ConsoleReader reader){
  this.reader=reader;
  this.terminal=reader.getTerminal();
}","public JLineScreenBuffer(ConsoleReader reader){
  this.reader=reader;
  this.terminal=reader.getTerminal();
  this.buffer=ByteBuffer.allocateDirect(maxBufferSize);
}",0.7956204379562044
151598,"@Override public void write(String s){
  try {
    reader.print(s);
    if (directWrite)     reader.flush();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public synchronized void write(String s){
  try {
    reader.print(s);
    if (directWrite) {
      reader.flush();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9451073985680192
151599,"private int prompt(final LineBuffer lineBuffer,final PipeOut out,final StringBuilder lastPattern) throws IOException {
  boolean backwards=false;
  do {
    String topBottomIndicator;
    if (lineBuffer.getCurrentLine() - shell.getHeight() + 1 == 0) {
      topBottomIndicator=""String_Node_Str"";
    }
 else     if (lineBuffer.atEnd()) {
      topBottomIndicator=""String_Node_Str"";
    }
 else {
      topBottomIndicator=""String_Node_Str"";
    }
    String prompt=MOREPROMPT + ""String_Node_Str"" + lineBuffer.getCurrentLine()+ topBottomIndicator+ ""String_Node_Str"";
    String bottomLineReset=new Ansi().cursor(shell.getHeight(),0).toString();
    out.print(bottomLineReset);
    out.print(attr(47,40,1));
    out.print(prompt);
    out.print(attr(0));
    out.print(bottomLineReset);
    shell.flushBuffer();
    int scanCode=shell.scan();
    shell.clearLine();
switch (scanCode) {
case 'e':
case 'E':
case 'j':
case 'J':
case 16:
      lineBuffer.rewindBuffer(shell.getHeight() - 1,lineBuffer.getCurrentLine() - 1);
    lineBuffer.setLineWidth(shell.getWidth());
  return -1;
case 'u':
case 'U':
lineBuffer.rewindBuffer(shell.getHeight() - 1,lineBuffer.getCurrentLine() - shell.getHeight());
lineBuffer.setLineWidth(shell.getWidth());
return -1;
case 'y':
case 'Y':
case 'k':
case 'K':
case 14:
case '\n':
lineBuffer.setLineWidth(shell.getWidth());
return -2;
case ' ':
lineBuffer.setLineWidth(shell.getWidth());
return -3;
case 'q':
case 'Q':
shell.clearLine();
shell.cursorLeft(prompt.length());
shell.flushBuffer();
return 0;
case '?':
backwards=true;
case '/':
shell.clearLine();
shell.cursorLeft(prompt.length());
prompt=backwards ? SEARCH_BACKWARDS_PROMPT : SEARCH_FORWARD_PROMPT;
String pattern;
if (lastPattern != null) {
prompt+=""String_Node_Str"" + lastPattern + ""String_Node_Str"";
}
out.print(ShellColor.BOLD,prompt);
shell.flushBuffer();
pattern=shell.promptAndSwallowCR().trim();
String searched;
shell.clearLine();
shell.cursorLeft(prompt.length() + pattern.length());
prompt+=""String_Node_Str"";
out.print(ShellColor.BOLD,prompt);
shell.flushBuffer();
String p;
if (pattern.equals(""String_Node_Str"") && (lastPattern.length() != 0)) {
p=searched=lineBuffer.toString();
}
 else {
if (lastPattern.length() != 0) {
lastPattern.delete(0,lastPattern.length() - 1);
}
lastPattern.append(pattern);
p=searched=pattern;
}
int result=lineBuffer.findPattern(p,backwards);
if (result == -1) {
shell.clearLine();
shell.cursorLeft(prompt.length());
shell.print(ShellColor.RED,PATTERN_NOT_FOUND + searched);
shell.flushBuffer();
shell.scan();
shell.clearLine();
shell.cursorLeft(PATTERN_NOT_FOUND.length() + searched.length());
shell.flushBuffer();
}
 else {
lineBuffer.rewindBuffer(shell.getHeight() - 1,result);
shell.clear();
shell.flushBuffer();
return -1;
}
break;
default :
shell.clearLine();
shell.cursorLeft(prompt.length());
out.print(ShellColor.RED,INVALID_COMMAND + ((char)scanCode));
shell.scan();
shell.clearLine();
shell.cursorLeft(INVALID_COMMAND.length() + 1);
}
}
 while (true);
}","private int prompt(final LineBuffer lineBuffer,final PipeOut out,final StringBuilder lastPattern) throws IOException {
  boolean backwards=false;
  do {
    String topBottomIndicator;
    if (lineBuffer.getCurrentLine() - shell.getHeight() + 1 == 0) {
      topBottomIndicator=""String_Node_Str"";
    }
 else     if (lineBuffer.atEnd()) {
      topBottomIndicator=""String_Node_Str"";
    }
 else {
      topBottomIndicator=""String_Node_Str"";
    }
    String prompt=MOREPROMPT + ""String_Node_Str"" + lineBuffer.getCurrentLine()+ topBottomIndicator+ ""String_Node_Str"";
    String bottomLineReset=new Ansi().cursor(shell.getHeight(),0).toString();
    shell.print(bottomLineReset);
    shell.print(attr(47,30));
    shell.print(prompt);
    shell.print(pad(shell.getWidth() - prompt.length()));
    shell.print(attr(0));
    shell.print(bottomLineReset);
    shell.print(attr(0));
    shell.flushBuffer();
    int scanCode=shell.scan();
    shell.clearLine();
switch (scanCode) {
case 'e':
case 'E':
case 'j':
case 'J':
case 16:
      lineBuffer.rewindBuffer(shell.getHeight() - 1,lineBuffer.getCurrentLine() - 1);
    lineBuffer.setLineWidth(shell.getWidth());
  return -1;
case 'u':
case 'U':
lineBuffer.rewindBuffer(shell.getHeight() - 1,lineBuffer.getCurrentLine() - shell.getHeight());
lineBuffer.setLineWidth(shell.getWidth());
return -1;
case 'y':
case 'Y':
case 'k':
case 'K':
case 14:
case '\n':
lineBuffer.setLineWidth(shell.getWidth());
return -2;
case ' ':
lineBuffer.setLineWidth(shell.getWidth());
return -3;
case 'q':
case 'Q':
shell.clearLine();
shell.cursorLeft(prompt.length());
shell.flushBuffer();
return 0;
case '?':
backwards=true;
case '/':
shell.clearLine();
shell.cursorLeft(prompt.length());
prompt=backwards ? SEARCH_BACKWARDS_PROMPT : SEARCH_FORWARD_PROMPT;
String pattern;
if (lastPattern != null) {
prompt+=""String_Node_Str"" + lastPattern + ""String_Node_Str"";
}
out.print(ShellColor.BOLD,prompt);
shell.flushBuffer();
pattern=shell.promptAndSwallowCR().trim();
String searched;
shell.clearLine();
shell.cursorLeft(prompt.length() + pattern.length());
prompt+=""String_Node_Str"";
out.print(ShellColor.BOLD,prompt);
shell.flushBuffer();
String p;
if (pattern.equals(""String_Node_Str"") && (lastPattern.length() != 0)) {
p=searched=lineBuffer.toString();
}
 else {
if (lastPattern.length() != 0) {
lastPattern.delete(0,lastPattern.length() - 1);
}
lastPattern.append(pattern);
p=searched=pattern;
}
int result=lineBuffer.findPattern(p,backwards);
if (result == -1) {
shell.clearLine();
shell.cursorLeft(prompt.length());
shell.print(ShellColor.RED,PATTERN_NOT_FOUND + searched);
shell.flushBuffer();
shell.scan();
shell.clearLine();
shell.cursorLeft(PATTERN_NOT_FOUND.length() + searched.length());
shell.flushBuffer();
}
 else {
lineBuffer.rewindBuffer(shell.getHeight() - 1,result);
shell.clear();
shell.flushBuffer();
return -1;
}
break;
default :
shell.clearLine();
shell.cursorLeft(prompt.length());
out.print(ShellColor.RED,INVALID_COMMAND + ((char)scanCode));
shell.scan();
shell.clearLine();
shell.cursorLeft(INVALID_COMMAND.length() + 1);
}
}
 while (true);
}",0.9763313609467456
151600,"/** 
 * Execute a native system command as if it were run from the given path.
 * @param command the system command to execute
 * @param parms the command parameters
 * @param out a print writer to which command output will be streamed
 * @param path the path from which to execute the command
 * @return 0 on successful completion, any other return code denotes failure
 */
public static int execFromPath(final String command,final String[] parms,final ShellPrintWriter out,final DirectoryResource path) throws IOException {
  try {
    String[] commandTokens=parms == null ? new String[1] : new String[parms.length + 1];
    commandTokens[0]=command;
    if (commandTokens.length > 1) {
      System.arraycopy(parms,0,commandTokens,1,parms.length);
    }
    ProcessBuilder builder=new ProcessBuilder(commandTokens);
    builder.directory(path.getUnderlyingResourceObject());
    builder.redirectErrorStream();
    Process p=builder.start();
    InputStream stdout=p.getInputStream();
    InputStream stderr=p.getErrorStream();
    Thread outThread=new Thread(new Receiver(stdout,out));
    Thread errThread=new Thread(new Receiver(stderr,out));
    outThread.start();
    errThread.start();
    outThread.join();
    errThread.join();
    return p.waitFor();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return -1;
  }
}","/** 
 * Execute a native system command as if it were run from the given path.
 * @param command the system command to execute
 * @param parms the command parameters
 * @param out a print writer to which command output will be streamed
 * @param path the path from which to execute the command
 * @return 0 on successful completion, any other return code denotes failure
 */
public static int execFromPath(final String command,final String[] parms,final ShellPrintWriter out,final DirectoryResource path) throws IOException {
  try {
    String[] commandTokens=parms == null ? new String[1] : new String[parms.length + 1];
    commandTokens[0]=command;
    if (commandTokens.length > 1) {
      System.arraycopy(parms,0,commandTokens,1,parms.length);
    }
    ProcessBuilder builder=new ProcessBuilder(commandTokens);
    builder.directory(path.getUnderlyingResourceObject());
    builder.redirectErrorStream(true);
    Process p=builder.start();
    InputStream stdout=p.getInputStream();
    Thread outThread=new Thread(new Receiver(stdout,out));
    outThread.start();
    outThread.join();
    return p.waitFor();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return -1;
  }
}",0.8882791062328499
151601,"/** 
 * Return this   {@link JavaSource} file as a String
 */
@Override public String toString(){
  try {
    TextEdit edit=unit.rewrite(document,null);
    edit.apply(document);
  }
 catch (  Exception e) {
    throw new ParserException(""String_Node_Str"" + unit.toString(),e);
  }
  String documentString=document.get();
  return documentString;
}","/** 
 * Return this   {@link JavaSource} file as a String
 */
@Override public String toString(){
  Document document=new Document(this.document.get());
  try {
    TextEdit edit=unit.rewrite(document,null);
    edit.apply(document);
  }
 catch (  Exception e) {
    throw new ParserException(""String_Node_Str"" + unit.toString(),e);
  }
  String documentString=document.get();
  return documentString;
}",0.9267643142476698
151602,"/** 
 * Ask the current   {@link InputStream} for input, masking keystrokes in the console with the given mask.
 * @param mask The sequence to use for masking input
 * @return any read data as a string, or null if none available.
 * @throws IOException on error
 */
String readLine(String mask) throws IOException ;","/** 
 * Ask the current   {@link InputStream} for input, masking keystrokes in the console with the given mask.
 * @param mask The character to use for masking input
 * @return any read data as a string, or null if none available.
 * @throws IOException on error
 */
String readLine(Character mask) throws IOException ;",0.9495268138801262
151603,"@Override public String readLine(final String mask) throws IOException {
  String line=null;
  if (mask != null) {
    line=reader.readLine(mask);
  }
 else {
    line=reader.readLine();
  }
  if (isExecuting() && (line == null)) {
    reader.println();
    reader.flush();
    throw new AbortedException();
  }
 else   if (line == null) {
    String eofs=(String)environment.getProperty(PROP_IGNORE_EOF);
    int propEOFs;
    try {
      propEOFs=Integer.parseInt(eofs);
    }
 catch (    NumberFormatException e) {
      if (isVerbose())       ShellMessages.info(this,""String_Node_Str"" + PROP_IGNORE_EOF + ""String_Node_Str"");
      propEOFs=DEFAULT_IGNORE_EOF;
    }
    if (this.numEOF < propEOFs) {
      println();
      println(""String_Node_Str"");
      this.numEOF++;
    }
 else {
      print(""String_Node_Str"");
      shutdown.fire(new Shutdown());
    }
    reader.flush();
  }
 else {
    numEOF=0;
  }
  return line;
}","@Override public String readLine(final Character mask) throws IOException {
  String line=null;
  if (mask != null) {
    line=reader.readLine(mask);
  }
 else {
    line=reader.readLine();
  }
  if (isExecuting() && (line == null)) {
    reader.println();
    reader.flush();
    throw new AbortedException();
  }
 else   if (line == null) {
    String eofs=(String)environment.getProperty(PROP_IGNORE_EOF);
    int propEOFs;
    try {
      propEOFs=Integer.parseInt(eofs);
    }
 catch (    NumberFormatException e) {
      if (isVerbose())       ShellMessages.info(this,""String_Node_Str"" + PROP_IGNORE_EOF + ""String_Node_Str"");
      propEOFs=DEFAULT_IGNORE_EOF;
    }
    if (this.numEOF < propEOFs) {
      println();
      println(""String_Node_Str"");
      this.numEOF++;
    }
 else {
      print(""String_Node_Str"");
      shutdown.fire(new Shutdown());
    }
    reader.flush();
  }
 else {
    numEOF=0;
  }
  return line;
}",0.9919571045576407
151604,"@Override public String getName(){
  return file.getName();
}","@Override public String getName(){
  String fileName=file.getName();
  return (OSUtils.isWindows() && fileName.length() == 0) ? file.getPath() : fileName;
}",0.5161290322580645
151605,"/** 
 * Add the given event to the queue; this event will be fired with the supplied qualifiers.
 */
public void enqueue(final Object event,final Annotation[] qualifiers){
  map.put(event,qualifiers);
}","/** 
 * Add the given event to the queue; this event will be fired with the supplied qualifiers.
 */
public void enqueue(final Object event,final Annotation[] qualifiers){
  if (!firing)   map.put(event,qualifiers);
}",0.964200477326969
151606,"/** 
 * Fire all queued events.
 */
public void fireAll(){
  List<Exception> thrown=new ArrayList<Exception>();
  try {
    for (    Entry<Object,Annotation[]> e : map.entrySet()) {
      try {
        Object key=e.getKey();
        Annotation[] value=e.getValue();
        List<Annotation> toFire=new ArrayList<Annotation>();
        List<BusManaged> qualifiers=extension.getEventQualifiers(key.getClass());
        toFire.addAll(qualifiers);
        toFire.addAll(Arrays.asList(value));
        manager.fireEvent(key,toFire.toArray(new Annotation[]{}));
      }
 catch (      Exception e1) {
        thrown.add(e1);
      }
    }
  }
  finally {
    map.clear();
  }
  if (!thrown.isEmpty())   throw new EventBusQueuedException(thrown);
}","/** 
 * Fire all queued events.
 */
public void fireAll(){
  firing=true;
  List<Exception> thrown=new ArrayList<Exception>();
  try {
    for (    Entry<Object,Annotation[]> e : map.entrySet()) {
      try {
        Object key=e.getKey();
        Annotation[] value=e.getValue();
        fireSingle(key,value);
      }
 catch (      Exception e1) {
        thrown.add(e1);
      }
    }
  }
  finally {
    firing=false;
    map.clear();
  }
  if (!thrown.isEmpty())   throw new EventBusQueuedException(thrown);
}",0.5964912280701754
151607,"public void scan(@Observes final ProcessAnnotatedType<Object> event){
  AnnotatedType<Object> originalType=event.getAnnotatedType();
  AnnotatedType<Object> newType;
  List<AnnotatedMethod> obsoleteMethods=new ArrayList<AnnotatedMethod>();
  List<AnnotatedMethod> replacementMethods=new ArrayList<AnnotatedMethod>();
  for (  AnnotatedMethod<?> method : getOrderedMethods(originalType)) {
    for (    AnnotatedParameter<?> param : method.getParameters()) {
      if (param.isAnnotationPresent(Observes.class)) {
        Set<Type> typeClosure=param.getTypeClosure();
        for (        Type type : typeClosure) {
          if (type instanceof Class) {
            if (((Class<?>)type).isAnnotationPresent(BusEvent.class)) {
              replacementMethods.add(qualifyObservedEvent(method,param));
              obsoleteMethods.add(method);
              break;
            }
          }
 else           if (type instanceof ParameterizedType) {
            Type rawType=((ParameterizedType)type).getRawType();
            if (rawType instanceof Class) {
              if (((Class<?>)rawType).isAnnotationPresent(BusEvent.class)) {
                replacementMethods.add(qualifyObservedEvent(method,param));
                obsoleteMethods.add(method);
                break;
              }
            }
          }
        }
      }
    }
  }
  newType=removeMethodsFromType(originalType,obsoleteMethods);
  newType=addReplacementMethodsToType(newType,replacementMethods);
  event.setAnnotatedType(newType);
}","public void scan(@Observes final ProcessAnnotatedType<Object> event){
  AnnotatedType<Object> originalType=event.getAnnotatedType();
  AnnotatedType<Object> newType;
  List<AnnotatedMethod> obsoleteMethods=new ArrayList<AnnotatedMethod>();
  List<AnnotatedMethod> replacementMethods=new ArrayList<AnnotatedMethod>();
  for (  AnnotatedMethod<?> method : getOrderedMethods(originalType)) {
    for (    AnnotatedParameter<?> param : method.getParameters()) {
      if (param.isAnnotationPresent(Observes.class)) {
        Set<Type> typeClosure=param.getTypeClosure();
        for (        Type type : typeClosure) {
          if (type instanceof Class) {
            if (Annotations.isAnnotationPresent((Class<?>)type,BusEvent.class)) {
              replacementMethods.add(qualifyObservedEvent(method,param));
              obsoleteMethods.add(method);
              break;
            }
          }
 else           if (type instanceof ParameterizedType) {
            Type rawType=((ParameterizedType)type).getRawType();
            if (rawType instanceof Class) {
              if (Annotations.isAnnotationPresent((Class<?>)rawType,(BusEvent.class))) {
                replacementMethods.add(qualifyObservedEvent(method,param));
                obsoleteMethods.add(method);
                break;
              }
            }
          }
        }
      }
    }
  }
  newType=removeMethodsFromType(originalType,obsoleteMethods);
  newType=addReplacementMethodsToType(newType,replacementMethods);
  event.setAnnotatedType(newType);
}",0.9645669291338582
151608,"private AnnotatedMethod<Object> qualifyObservedEvent(final AnnotatedMethod method,final AnnotatedParameter param){
  final List<AnnotatedParameter> parameters=new ArrayList<AnnotatedParameter>();
  parameters.addAll(method.getParameters());
  parameters.remove(param);
  parameters.add(addUniqueQualifier(method,param));
  return new AnnotatedMethod(){
    @Override public List<AnnotatedParameter> getParameters(){
      return parameters;
    }
    @Override public AnnotatedType<Object> getDeclaringType(){
      return method.getDeclaringType();
    }
    @Override public boolean isStatic(){
      return method.isStatic();
    }
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> annotation){
      return method.getAnnotation(annotation);
    }
    @Override public Set<Annotation> getAnnotations(){
      return method.getAnnotations();
    }
    @Override public Type getBaseType(){
      return method.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return method.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> annotation){
      return method.isAnnotationPresent(annotation);
    }
    @Override public Method getJavaMember(){
      return method.getJavaMember();
    }
  }
;
}","private AnnotatedMethod<Object> qualifyObservedEvent(final AnnotatedMethod method,final AnnotatedParameter param){
  final List<AnnotatedParameter> parameters=new ArrayList<AnnotatedParameter>();
  parameters.addAll(method.getParameters());
  parameters.set(parameters.indexOf(param),addUniqueQualifier(method,param));
  parameters.remove(param);
  return new AnnotatedMethod(){
    @Override public List<AnnotatedParameter> getParameters(){
      return parameters;
    }
    @Override public AnnotatedType<Object> getDeclaringType(){
      return method.getDeclaringType();
    }
    @Override public boolean isStatic(){
      return method.isStatic();
    }
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> annotation){
      return method.getAnnotation(annotation);
    }
    @Override public Set<Annotation> getAnnotations(){
      return method.getAnnotations();
    }
    @Override public Type getBaseType(){
      return method.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return method.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> annotation){
      return method.isAnnotationPresent(annotation);
    }
    @Override public Method getJavaMember(){
      return method.getJavaMember();
    }
  }
;
}",0.9537878787878789
151609,"@Before @SuppressWarnings(""String_Node_Str"") public void postConstruct() throws IOException {
  if (project == null) {
    tempFolder=File.createTempFile(PKG,null);
    tempFolder.delete();
    tempFolder.mkdirs();
    File classesDir=new File(tempFolder.getAbsolutePath() + ""String_Node_Str"");
    classesDir.mkdirs();
    InputStream resourceAsStream=this.getClass().getResourceAsStream(""String_Node_Str"");
    FileOutputStream out=new FileOutputStream(classesDir + ""String_Node_Str"");
    int b;
    while ((b=resourceAsStream.read()) != -1) {
      out.write(b);
    }
    out.close();
    resourceAsStream.close();
    project=projectFactory.createProject(ResourceUtil.getContextDirectory(resourceFactory.getResourceFrom(tempFolder)),MavenCoreFacet.class,JavaSourceFacet.class,ResourceFacet.class,WebResourceFacet.class,DependencyFacet.class,PackagingFacet.class,JavaExecutionFacet.class);
    startupEvent.fire(new Startup());
  }
  executionFacet=project.getFacet(JavaExecutionFacet.class);
}","@Before @SuppressWarnings(""String_Node_Str"") public void postConstruct() throws IOException {
  if (project == null) {
    tempFolder=File.createTempFile(PKG,null);
    tempFolder.delete();
    tempFolder.mkdirs();
    File classesDir=new File(tempFolder.getAbsolutePath() + ""String_Node_Str"");
    classesDir.mkdirs();
    InputStream resourceAsStream=this.getClass().getResourceAsStream(""String_Node_Str"");
    FileOutputStream out=new FileOutputStream(classesDir + ""String_Node_Str"");
    int b;
    while ((b=resourceAsStream.read()) != -1) {
      out.write(b);
    }
    out.close();
    resourceAsStream.close();
    project=projectFactory.createProject(ResourceUtil.getContextDirectory(resourceFactory.getResourceFrom(tempFolder)),MavenCoreFacet.class,JavaSourceFacet.class,ResourceFacet.class,WebResourceFacet.class,DependencyFacet.class,PackagingFacet.class,JavaExecutionFacet.class);
    beanManager.fireEvent(new Startup());
    beanManager.fireEvent(new PostStartup());
  }
  executionFacet=project.getFacet(JavaExecutionFacet.class);
}",0.96875
151610,"@Test public void testCDintoProjectRegistersFacets() throws Exception {
  Shell shell=getShell();
  initializeJavaProject();
  Project project=getProject();
  assertNotNull(project);
  shell.execute(""String_Node_Str"");
  project=getProject();
  shell.execute(""String_Node_Str"");
  project=getProject();
  assertNotNull(project);
  JavaSourceFacet javaSourceFacet=project.getFacet(JavaSourceFacet.class);
  assertNotNull(javaSourceFacet);
}","@Test public void testCDintoProjectRegistersFacets() throws Exception {
  Shell shell=getShell();
  initializeJavaProject();
  Project project=getProject();
  Assert.assertTrue(project instanceof Project);
  Resource<?> projectResource=shell.getCurrentResource();
  shell.execute(""String_Node_Str"");
  Resource<?> newResource=shell.getCurrentResource();
  Assert.assertNotSame(projectResource,newResource);
  shell.execute(""String_Node_Str"");
  Resource<?> currentResource=shell.getCurrentResource();
  Assert.assertEquals(projectResource,currentResource);
  project=getProject();
  Assert.assertTrue(project.getProjectRoot() instanceof DirectoryResource);
  JavaSourceFacet javaSourceFacet=project.getFacet(JavaSourceFacet.class);
  assertNotNull(javaSourceFacet);
}",0.4825870646766169
151611,"public ProjectBuildingRequest getRequest(){
  try {
    Settings settings=getSettings();
    request=new DefaultProjectBuildingRequest();
    ArtifactRepository localRepository=new MavenArtifactRepository(""String_Node_Str"",new File(settings.getLocalRepository()).toURI().toURL().toString(),container.lookup(ArtifactRepositoryLayout.class),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN));
    request.setLocalRepository(localRepository);
    request.setRemoteRepositories(new ArrayList<ArtifactRepository>());
    MavenRepositorySystemSession repositorySession=new MavenRepositorySystemSession();
    Proxy activeProxy=settings.getActiveProxy();
    if (activeProxy != null) {
      DefaultProxySelector dps=new DefaultProxySelector();
      dps.add(RepositoryUtils.convertFromMavenProxy(activeProxy),activeProxy.getNonProxyHosts());
      repositorySession.setProxySelector(dps);
    }
    repositorySession.setLocalRepositoryManager(new SimpleLocalRepositoryManager(settings.getLocalRepository()));
    repositorySession.setOffline(environment.isOnline() == false);
    request.setRepositorySession(repositorySession);
    request.setProcessPlugins(false);
    request.setPluginArtifactRepositories(Arrays.asList(localRepository));
    request.setResolveDependencies(true);
    return request;
  }
 catch (  Exception e) {
    throw new ProjectModelException(""String_Node_Str"",e);
  }
}","public ProjectBuildingRequest getRequest(){
  return getBuildingRequest(environment.isOnline() == false);
}",0.1236021188934667
151612,"@Inject public MavenCoreFacetImpl(final MavenContainer container,final ShellPrintWriter writer,final BeanManager manager){
  this.container=container;
  this.writer=writer;
  this.manager=manager;
}","public MavenCoreFacetImpl(){
}",0.2631578947368421
151613,"@Override public ProjectBuildingResult getProjectBuildingResult(){
  try {
    if (this.buildingResult == null) {
      buildingResult=container.getBuilder().build(getPOMFile().getUnderlyingResourceObject(),container.getRequest());
    }
    return buildingResult;
  }
 catch (  ProjectBuildingException e) {
    throw new ProjectModelException(e);
  }
}","@Override public ProjectBuildingResult getProjectBuildingResult(){
  if (this.buildingResult == null) {
    ProjectBuildingRequest request=null;
    File pomFile=getPOMFile().getUnderlyingResourceObject();
    try {
      request=container.getRequest();
      buildingResult=container.getBuilder().build(pomFile,request);
    }
 catch (    ProjectBuildingException partial) {
      if (request != null) {
        try {
          request.setResolveDependencies(true);
          buildingResult=container.getBuilder().build(pomFile,request);
        }
 catch (        Exception full) {
          throw new ProjectModelException(full);
        }
      }
 else {
        throw new ProjectModelException(partial);
      }
    }
  }
  return buildingResult;
}",0.4086799276672694
151614,"@SuppressWarnings(""String_Node_Str"") @DefaultCommand public void create(@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=true) final String name,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=true,type=PromptType.JAVA_PACKAGE) final String javaPackage,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false,completer=NewProjectPackagingTypeCompleter.class,defaultValue=""String_Node_Str"") final PackagingType type,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false) final Resource<?> projectFolder,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"",flagOnly=true) final boolean createMain,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String finalName,final PipeOut out) throws IOException {
  DirectoryResource dir=null;
  if (!getValidPackagingTypes().contains(type)) {
    throw new RuntimeException(""String_Node_Str"" + type);
  }
  try {
    if (projectFolder instanceof FileResource<?>) {
      if (!projectFolder.exists()) {
        ((FileResource<?>)projectFolder).mkdirs();
        dir=projectFolder.reify(DirectoryResource.class);
      }
 else       if (projectFolder instanceof DirectoryResource) {
        dir=(DirectoryResource)projectFolder;
      }
 else {
        ShellMessages.error(out,""String_Node_Str"" + projectFolder.getFullyQualifiedName() + ""String_Node_Str"");
      }
    }
    if (dir == null) {
      dir=shell.getCurrentDirectory().getChildDirectory(name);
    }
  }
 catch (  ResourceException e) {
  }
  if (projectFactory.containsProject(dir) || !shell.promptBoolean(""String_Node_Str"" + dir.getFullyQualifiedName() + ""String_Node_Str"")) {
    if (projectFactory.containsProject(dir)) {
      ShellMessages.error(out,""String_Node_Str"" + dir.getFullyQualifiedName() + ""String_Node_Str"");
    }
    if (shell.getCurrentResource() == null) {
      dir=ResourceUtil.getContextDirectory(factory.getResourceFrom(Files.getWorkingDirectory()));
    }
 else {
      dir=shell.getCurrentDirectory();
    }
    FileResource<?> newDir;
    do {
      newDir=shell.getCurrentDirectory();
      shell.println();
      if (!projectFactory.containsProject(newDir.reify(DirectoryResource.class))) {
        newDir=shell.promptFile(""String_Node_Str"" + newDir + ""String_Node_Str"",dir);
      }
 else {
        newDir=shell.promptFile(""String_Node_Str"");
      }
      if (!newDir.exists()) {
        newDir.mkdirs();
        newDir=newDir.reify(DirectoryResource.class);
      }
 else       if (newDir.isDirectory() && !projectFactory.containsProject(newDir.reify(DirectoryResource.class))) {
        newDir=newDir.reify(DirectoryResource.class);
      }
 else {
        ShellMessages.error(out,""String_Node_Str"" + newDir.getFullyQualifiedName() + ""String_Node_Str"");
        newDir=null;
      }
    }
 while ((newDir == null) || !(newDir instanceof DirectoryResource));
    dir=(DirectoryResource)newDir;
  }
  if (!dir.exists()) {
    dir.mkdirs();
  }
  Project project=null;
  if (type.equals(PackagingType.JAR) || type.equals(PackagingType.WAR)) {
    project=projectFactory.createProject(dir,DependencyFacet.class,MetadataFacet.class,JavaSourceFacet.class,ResourceFacet.class);
  }
 else {
    project=projectFactory.createProject(dir,DependencyFacet.class,MetadataFacet.class);
  }
  MetadataFacet meta=project.getFacet(MetadataFacet.class);
  meta.setProjectName(name);
  meta.setTopLevelPackage(javaPackage);
  PackagingFacet packaging=project.getFacet(PackagingFacet.class);
  packaging.setPackagingType(type);
  DependencyFacet deps=project.getFacet(DependencyFacet.class);
  deps.addRepository(KnownRepository.JBOSS_NEXUS);
  if (packaging.getPackagingType().equals(PackagingType.JAR) && createMain) {
    project.getFacet(JavaSourceFacet.class).saveJavaSource(JavaParser.create(JavaClass.class).setPackage(javaPackage).setName(""String_Node_Str"").addMethod(""String_Node_Str"").setBody(""String_Node_Str"" + name + ""String_Node_Str"").getOrigin());
  }
  if (finalName != null) {
    packaging.setFinalName(finalName);
  }
 else {
    packaging.setFinalName(name);
  }
  if (project.hasFacet(ResourceFacet.class)) {
    project.getFacet(ResourceFacet.class).createResource(""String_Node_Str"".toCharArray(),""String_Node_Str"");
  }
  shell.setCurrentResource(project.getProjectRoot());
  ShellMessages.success(out,""String_Node_Str"" + name + ""String_Node_Str""+ dir.getFullyQualifiedName()+ ""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @DefaultCommand public void create(@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=true) final String name,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=true,type=PromptType.JAVA_PACKAGE) final String javaPackage,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false,completer=NewProjectPackagingTypeCompleter.class,defaultValue=""String_Node_Str"") final PackagingType type,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false) final Resource<?> projectFolder,@Option(name=""String_Node_Str"",description=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"",flagOnly=true) final boolean createMain,@Option(name=""String_Node_Str"",description=""String_Node_Str"") final String finalName,final PipeOut out) throws IOException {
  DirectoryResource dir=null;
  if (!getValidPackagingTypes().contains(type)) {
    throw new RuntimeException(""String_Node_Str"" + type);
  }
  try {
    if (projectFolder instanceof FileResource<?>) {
      if (!projectFolder.exists()) {
        ((FileResource<?>)projectFolder).mkdirs();
        dir=projectFolder.reify(DirectoryResource.class);
      }
 else       if (projectFolder instanceof DirectoryResource) {
        dir=(DirectoryResource)projectFolder;
      }
 else {
        ShellMessages.error(out,""String_Node_Str"" + projectFolder.getFullyQualifiedName() + ""String_Node_Str"");
      }
    }
    if (dir == null) {
      dir=shell.getCurrentDirectory().getChildDirectory(name);
    }
  }
 catch (  ResourceException e) {
  }
  if (projectFactory.containsProject(dir) || !shell.promptBoolean(""String_Node_Str"" + dir.getFullyQualifiedName() + ""String_Node_Str"")) {
    if (projectFactory.containsProject(dir)) {
      ShellMessages.error(out,""String_Node_Str"" + dir.getFullyQualifiedName() + ""String_Node_Str"");
    }
    if (shell.getCurrentResource() == null) {
      dir=ResourceUtil.getContextDirectory(factory.getResourceFrom(Files.getWorkingDirectory()));
    }
 else {
      dir=shell.getCurrentDirectory();
    }
    FileResource<?> newDir;
    do {
      newDir=shell.getCurrentDirectory();
      shell.println();
      if (!projectFactory.containsProject(newDir.reify(DirectoryResource.class))) {
        newDir=shell.promptFile(""String_Node_Str"" + newDir + ""String_Node_Str"",dir);
      }
 else {
        newDir=shell.promptFile(""String_Node_Str"");
      }
      if (!newDir.exists()) {
        newDir.mkdirs();
        newDir=newDir.reify(DirectoryResource.class);
      }
 else       if (newDir.isDirectory() && !projectFactory.containsProject(newDir.reify(DirectoryResource.class))) {
        newDir=newDir.reify(DirectoryResource.class);
      }
 else {
        ShellMessages.error(out,""String_Node_Str"" + newDir.getFullyQualifiedName() + ""String_Node_Str"");
        newDir=null;
      }
    }
 while ((newDir == null) || !(newDir instanceof DirectoryResource));
    dir=(DirectoryResource)newDir;
  }
  if (!dir.exists()) {
    dir.mkdirs();
  }
  Project project=null;
  if (type.equals(PackagingType.JAR)) {
    project=projectFactory.createProject(dir,DependencyFacet.class,MetadataFacet.class,JavaSourceFacet.class,ResourceFacet.class);
  }
 else   if (type.equals(PackagingType.WAR)) {
    project=projectFactory.createProject(dir,DependencyFacet.class,MetadataFacet.class,WebResourceFacet.class,JavaSourceFacet.class,ResourceFacet.class);
  }
 else {
    project=projectFactory.createProject(dir,DependencyFacet.class,MetadataFacet.class);
  }
  MetadataFacet meta=project.getFacet(MetadataFacet.class);
  meta.setProjectName(name);
  meta.setTopLevelPackage(javaPackage);
  PackagingFacet packaging=project.getFacet(PackagingFacet.class);
  packaging.setPackagingType(type);
  DependencyFacet deps=project.getFacet(DependencyFacet.class);
  deps.addRepository(KnownRepository.JBOSS_NEXUS);
  if (packaging.getPackagingType().equals(PackagingType.JAR) && createMain) {
    project.getFacet(JavaSourceFacet.class).saveJavaSource(JavaParser.create(JavaClass.class).setPackage(javaPackage).setName(""String_Node_Str"").addMethod(""String_Node_Str"").setBody(""String_Node_Str"" + name + ""String_Node_Str"").getOrigin());
  }
  if (finalName != null) {
    packaging.setFinalName(finalName);
  }
 else {
    packaging.setFinalName(name);
  }
  if (project.hasFacet(ResourceFacet.class)) {
    project.getFacet(ResourceFacet.class).createResource(""String_Node_Str"".toCharArray(),""String_Node_Str"");
  }
  shell.setCurrentResource(project.getProjectRoot());
  ShellMessages.success(out,""String_Node_Str"" + name + ""String_Node_Str""+ dir.getFullyQualifiedName()+ ""String_Node_Str"");
}",0.9805549486563252
151615,"private ConfigurationElement getConfigElementRecursiveByContent(ConfigurationElement parent,String filter,FilterType filterType,boolean directChildsOnly){
  List<PluginElement> children=parent.getChildren();
  for (  PluginElement child : children) {
    if (child instanceof ConfigurationElement) {
      ConfigurationElement element=(ConfigurationElement)child;
      if (!directChildsOnly && element.hasChilderen()) {
        try {
          return getConfigElementRecursiveByContent(element,filter,filterType,directChildsOnly);
        }
 catch (        ConfigurationElementNotFoundException ex) {
        }
      }
 else {
        if (filterType.equals(FilterType.CONTENT) && filter.equals(element.getText())) {
          return parent;
        }
 else         if (filterType.equals(FilterType.NAME) && filter.equals(element.getName())) {
          return element;
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + child.getClass() + ""String_Node_Str""+ parent.getName());
    }
  }
  throw new ConfigurationElementNotFoundException(filter);
}","private ConfigurationElement getConfigElementRecursiveByContent(ConfigurationElement parent,String filter,FilterType filterType,boolean directChildsOnly){
  List<PluginElement> children=parent.getChildren();
  for (  PluginElement child : children) {
    if (child instanceof ConfigurationElement) {
      ConfigurationElement element=(ConfigurationElement)child;
      if (filterType.equals(FilterType.CONTENT) && filter.equals(element.getText())) {
        return parent;
      }
 else       if (filterType.equals(FilterType.NAME) && filter.equals(element.getName())) {
        return element;
      }
      if (!directChildsOnly && element.hasChilderen()) {
        try {
          return getConfigElementRecursiveByContent(element,filter,filterType,directChildsOnly);
        }
 catch (        ConfigurationElementNotFoundException ex) {
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + child.getClass() + ""String_Node_Str""+ parent.getName());
    }
  }
  throw new ConfigurationElementNotFoundException(filter);
}",0.7565543071161048
151616,"@Override public boolean hasChilderen(){
  return false;
}","@Override public boolean hasChilderen(){
  return children != null && children.size() > 0;
}",0.7466666666666667
151617,"public ProjectBuildingRequest getRequest(){
  return request;
}","public ProjectBuildingRequest getRequest(){
  try {
    String localRepositoryPath=OSUtils.getUserHomeDir().getAbsolutePath() + ""String_Node_Str"";
    request=new DefaultProjectBuildingRequest();
    ArtifactRepository localRepository=new MavenArtifactRepository(""String_Node_Str"",new File(localRepositoryPath).toURI().toURL().toString(),container.lookup(ArtifactRepositoryLayout.class),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN));
    request.setLocalRepository(localRepository);
    request.setRemoteRepositories(new ArrayList<ArtifactRepository>());
    DefaultRepositorySystemSession repositorySession=new DefaultRepositorySystemSession();
    repositorySession.setLocalRepositoryManager(new SimpleLocalRepositoryManager(localRepositoryPath));
    repositorySession.setOffline(true);
    request.setRepositorySession(repositorySession);
    request.setProcessPlugins(false);
    request.setPluginArtifactRepositories(Arrays.asList(localRepository));
    request.setResolveDependencies(true);
    return request;
  }
 catch (  Exception e) {
    throw new ProjectModelException(""String_Node_Str"",e);
  }
}",0.0826086956521739
151618,"@PostConstruct public void bootstrapMaven(){
  try {
    container=new DefaultPlexusContainer();
    ConsoleLoggerManager loggerManager=new ConsoleLoggerManager();
    loggerManager.setThreshold(""String_Node_Str"");
    container.setLoggerManager(loggerManager);
    builder=container.lookup(ProjectBuilder.class);
    String localRepositoryPath=OSUtils.getUserHomeDir().getAbsolutePath() + ""String_Node_Str"";
    request=new DefaultProjectBuildingRequest();
    ArtifactRepository localRepository=new MavenArtifactRepository(""String_Node_Str"",new File(localRepositoryPath).toURI().toURL().toString(),container.lookup(ArtifactRepositoryLayout.class),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN),new ArtifactRepositoryPolicy(true,ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER,ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN));
    request.setLocalRepository(localRepository);
    request.setRemoteRepositories(new ArrayList<ArtifactRepository>());
    DefaultRepositorySystemSession repositorySession=new DefaultRepositorySystemSession();
    repositorySession.setLocalRepositoryManager(new SimpleLocalRepositoryManager(localRepositoryPath));
    repositorySession.setOffline(true);
    request.setRepositorySession(repositorySession);
    request.setProcessPlugins(false);
    request.setPluginArtifactRepositories(Arrays.asList(localRepository));
    request.setResolveDependencies(true);
  }
 catch (  Exception e) {
    throw new ProjectModelException(""String_Node_Str"",e);
  }
}","@PostConstruct public void bootstrapMaven(){
  try {
    container=new DefaultPlexusContainer();
    ConsoleLoggerManager loggerManager=new ConsoleLoggerManager();
    loggerManager.setThreshold(""String_Node_Str"");
    container.setLoggerManager(loggerManager);
    builder=container.lookup(ProjectBuilder.class);
  }
 catch (  Exception e) {
    throw new ProjectModelException(""String_Node_Str"",e);
  }
}",0.3521628498727735
151619,"private String formatSourcedError(final Object obj){
  return (obj == null ? ""String_Node_Str"" : (""String_Node_Str"" + obj.toString() + ""String_Node_Str""));
}","private String formatSourcedError(final CommandMetadata cmd){
  String out=null;
  if (cmd != null) {
    out=cmd.getPluginMetadata().getName();
    if (!cmd.isDefault())     out+=""String_Node_Str"" + cmd.getName();
    out=""String_Node_Str"" + out + ""String_Node_Str"";
  }
 else   out=""String_Node_Str"";
  return out;
}",0.2147368421052631
151620,"public static Enum<?> valueOf(final Class<?> type,final Object value){
  List<?> enums=Arrays.asList(type.getEnumConstants());
  for (  Object e : enums) {
    if (e.toString().equals(value.toString())) {
      return (Enum<?>)e;
    }
  }
  return null;
}","public static Enum<?> valueOf(final Class<?> type,final Object value){
  if (value != null) {
    List<?> enums=Arrays.asList(type.getEnumConstants());
    for (    Object e : enums) {
      if (e.toString().equals(value.toString())) {
        return (Enum<?>)e;
      }
    }
  }
  return null;
}",0.9077757685352622
151621,"public static void downloadFromURL(final PipeOut out,final URL url,final FileResource<?> resource) throws IOException {
  DefaultHttpClient client=new DefaultHttpClient();
  HttpGet httpGetManifest=new HttpGet(url.toExternalForm());
  out.print(""String_Node_Str"");
  HttpResponse response=client.execute(httpGetManifest);
switch (response.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  try {
    resource.setContents(response.getEntity().getContent());
    out.println(""String_Node_Str"");
  }
 catch (  IOException e) {
    out.println(""String_Node_Str"" + e.getMessage());
  }
default :
out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
}
}","public static void downloadFromURL(final PipeOut out,final URL url,final FileResource<?> resource) throws IOException {
  HttpGet httpGetManifest=new HttpGet(url.toExternalForm());
  out.print(""String_Node_Str"");
  HttpResponse response=new DefaultHttpClient().execute(httpGetManifest);
switch (response.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  try {
    resource.setContents(response.getEntity().getContent());
    out.println(""String_Node_Str"");
  }
 catch (  IOException e) {
    out.println(""String_Node_Str"" + e.getMessage());
  }
default :
out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
}
}",0.9407461594732992
151622,"public static FileResource<?> downloadFromIndexRef(final PluginRef ref,final PipeOut out,final DirectoryResource pluginDir) throws Exception {
  DefaultHttpClient client=new DefaultHttpClient();
  String[] artifactParts=ref.getArtifact().toIdentifier().split(""String_Node_Str"");
  if (artifactParts.length != 3) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ref.getArtifact());
  }
  String packageLocation=artifactParts[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  String baseUrl;
  if (ref.getHomeRepo().endsWith(""String_Node_Str"")) {
    baseUrl=ref.getHomeRepo() + packageLocation + ""String_Node_Str""+ artifactParts[1]+ ""String_Node_Str""+ artifactParts[2];
  }
 else {
    baseUrl=ref.getHomeRepo() + ""String_Node_Str"" + packageLocation+ ""String_Node_Str""+ artifactParts[1]+ ""String_Node_Str""+ artifactParts[2];
  }
  HttpGet httpGetManifest=new HttpGet(baseUrl + ""String_Node_Str"");
  out.print(""String_Node_Str"");
  HttpResponse response=client.execute(httpGetManifest);
switch (response.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(response.getEntity().getContent());
XPath xpath=XPathFactory.newInstance().newXPath();
XPathExpression checkSnapshotExpr=xpath.compile(""String_Node_Str"");
XPathExpression findJar=xpath.compile(""String_Node_Str"");
NodeList list=(NodeList)checkSnapshotExpr.evaluate(document,XPathConstants.NODESET);
out.print(""String_Node_Str"");
if (list.getLength() != 0) {
Node n=(Node)findJar.evaluate(document,XPathConstants.NODE);
if (n == null) {
out.println(""String_Node_Str"");
return null;
}
String version=n.getFirstChild().getTextContent();
out.println(""String_Node_Str"" + version);
String fileName=artifactParts[1] + ""String_Node_Str"" + version+ ""String_Node_Str"";
HttpGet jarGet=new HttpGet(baseUrl + ""String_Node_Str"" + fileName);
out.print(""String_Node_Str"" + baseUrl + ""String_Node_Str""+ fileName+ ""String_Node_Str"");
response=client.execute(jarGet);
try {
FileResource<?> target=(FileResource<?>)pluginDir.getChild(fileName);
if (!target.exists() && target.createNewFile()) {
target.setContents(response.getEntity().getContent());
out.println(""String_Node_Str"");
return target;
}
 else {
throw new IllegalStateException(""String_Node_Str"" + target.getFullyQualifiedName() + ""String_Node_Str"");
}
}
 catch (IOException e) {
out.println(""String_Node_Str"" + e.getMessage());
return null;
}
}
 else {
out.println(""String_Node_Str"");
return null;
}
case 404:
String requestUrl=baseUrl + ""String_Node_Str"" + artifactParts[2]+ ""String_Node_Str"";
httpGetManifest=new HttpGet(requestUrl);
response=client.execute(httpGetManifest);
if (response.getStatusLine().getStatusCode() != 200) {
printError(response.getStatusLine().getStatusCode(),requestUrl,out);
return null;
}
 else {
}
break;
default :
out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
return null;
}
return null;
}","public static FileResource<?> downloadFromIndexRef(final PluginRef ref,final PipeOut out,final DirectoryResource pluginDir) throws Exception {
  DefaultHttpClient client=new DefaultHttpClient();
  String[] artifactParts=ref.getArtifact().toIdentifier().split(""String_Node_Str"");
  if (artifactParts.length != 3) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ref.getArtifact());
  }
  String packageLocation=artifactParts[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  String baseUrl;
  if (ref.getHomeRepo().endsWith(""String_Node_Str"")) {
    baseUrl=ref.getHomeRepo() + packageLocation + ""String_Node_Str""+ artifactParts[1]+ ""String_Node_Str""+ artifactParts[2];
  }
 else {
    baseUrl=ref.getHomeRepo() + ""String_Node_Str"" + packageLocation+ ""String_Node_Str""+ artifactParts[1]+ ""String_Node_Str""+ artifactParts[2];
  }
  HttpGet httpGetManifest=new HttpGet(baseUrl + ""String_Node_Str"");
  out.print(""String_Node_Str"");
  HttpResponse response=new DefaultHttpClient().execute(httpGetManifest);
switch (response.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(response.getEntity().getContent());
XPath xpath=XPathFactory.newInstance().newXPath();
XPathExpression checkSnapshotExpr=xpath.compile(""String_Node_Str"");
XPathExpression findJar=xpath.compile(""String_Node_Str"");
NodeList list=(NodeList)checkSnapshotExpr.evaluate(document,XPathConstants.NODESET);
out.print(""String_Node_Str"");
if (list.getLength() != 0) {
Node n=(Node)findJar.evaluate(document,XPathConstants.NODE);
if (n == null) {
out.println(""String_Node_Str"");
return null;
}
String version=n.getFirstChild().getTextContent();
out.println(""String_Node_Str"" + version);
String fileName=artifactParts[1] + ""String_Node_Str"" + version+ ""String_Node_Str"";
HttpGet jarGet=new HttpGet(baseUrl + ""String_Node_Str"" + fileName);
out.print(""String_Node_Str"" + baseUrl + ""String_Node_Str""+ fileName+ ""String_Node_Str"");
response=new DefaultHttpClient().execute(jarGet);
try {
FileResource<?> target=(FileResource<?>)pluginDir.getChild(fileName);
if (!target.exists() && target.createNewFile()) {
target.setContents(response.getEntity().getContent());
out.println(""String_Node_Str"");
return target;
}
 else {
throw new IllegalStateException(""String_Node_Str"" + target.getFullyQualifiedName() + ""String_Node_Str"");
}
}
 catch (IOException e) {
out.println(""String_Node_Str"" + e.getMessage());
return null;
}
}
 else {
out.println(""String_Node_Str"");
return null;
}
case 404:
String requestUrl=baseUrl + ""String_Node_Str"" + artifactParts[2]+ ""String_Node_Str"";
httpGetManifest=new HttpGet(requestUrl);
response=new DefaultHttpClient().execute(httpGetManifest);
if (response.getStatusLine().getStatusCode() != 200) {
printError(response.getStatusLine().getStatusCode(),requestUrl,out);
return null;
}
 else {
}
break;
default :
out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
return null;
}
return null;
}",0.9855457717228776
151623,"@SuppressWarnings(""String_Node_Str"") public static List<PluginRef> findPlugin(Shell sh,String searchString,PipeOut out) throws Exception {
  DefaultHttpClient client=new DefaultHttpClient();
  String defaultRepo=getDefaultRepo(sh);
  HttpGet httpGet=new HttpGet(defaultRepo);
  out.print(""String_Node_Str"" + defaultRepo + ""String_Node_Str"");
  HttpResponse httpResponse=client.execute(httpGet);
switch (httpResponse.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  break;
case 404:
out.println(""String_Node_Str"" + defaultRepo + ""String_Node_Str"");
return Collections.emptyList();
default :
out.println(""String_Node_Str"" + httpResponse.getStatusLine().getStatusCode());
return Collections.emptyList();
}
Pattern pattern=Pattern.compile(GeneralUtils.pathspecToRegEx(""String_Node_Str"" + searchString + ""String_Node_Str""));
List<PluginRef> pluginList=new ArrayList<PluginRef>();
Yaml yaml=new Yaml();
for (Object o : yaml.loadAll(httpResponse.getEntity().getContent())) {
if (o == null) {
continue;
}
Map<String,String> map=(Map<String,String>)o;
String name=map.get(PROP_NAME);
if (pattern.matcher(name).matches()) {
pluginList.add(bindToPuginRef(map));
}
}
return pluginList;
}","@SuppressWarnings(""String_Node_Str"") public static List<PluginRef> findPlugin(Shell sh,String searchString,PipeOut out) throws Exception {
  String defaultRepo=getDefaultRepo(sh);
  HttpGet httpGet=new HttpGet(defaultRepo);
  out.print(""String_Node_Str"" + defaultRepo + ""String_Node_Str"");
  HttpResponse httpResponse=new DefaultHttpClient().execute(httpGet);
switch (httpResponse.getStatusLine().getStatusCode()) {
case 200:
    out.println(""String_Node_Str"");
  break;
case 404:
out.println(""String_Node_Str"" + defaultRepo + ""String_Node_Str"");
return Collections.emptyList();
default :
out.println(""String_Node_Str"" + httpResponse.getStatusLine().getStatusCode());
return Collections.emptyList();
}
Pattern pattern=Pattern.compile(GeneralUtils.pathspecToRegEx(""String_Node_Str"" + searchString + ""String_Node_Str""));
List<PluginRef> pluginList=new ArrayList<PluginRef>();
Yaml yaml=new Yaml();
for (Object o : yaml.loadAll(httpResponse.getEntity().getContent())) {
if (o == null) {
continue;
}
Map<String,String> map=(Map<String,String>)o;
String name=map.get(PROP_NAME);
if (pattern.matcher(name).matches()) {
pluginList.add(bindToPuginRef(map));
}
}
return pluginList;
}",0.8317247167436005
151624,"@Command(""String_Node_Str"") public void setup(@Option(name=""String_Node_Str"",required=true) JPAProvider jpap,@Option(name=""String_Node_Str"",required=true) JPAContainer jpac,@Option(name=""String_Node_Str"",defaultValue=""String_Node_Str"") DatabaseType databaseType,@Option(name=""String_Node_Str"",defaultValue=DEFAULT_UNIT_NAME) String unitName,@Option(name=""String_Node_Str"",defaultValue=DEFAULT_UNIT_DESC) String unitDescription,@Option(name=""String_Node_Str"") String jtaDataSource,@Option(name=""String_Node_Str"") String nonJtaDataSource,@Option(name=""String_Node_Str"") String jdbcDriver,@Option(name=""String_Node_Str"") String databaseURL,@Option(name=""String_Node_Str"") String username,@Option(name=""String_Node_Str"") String password){
  PersistenceFacet jpa=project.getFacet(PersistenceFacet.class);
  PersistenceModel config=jpa.getConfig();
  PersistenceUnit unit=null;
  for (  PersistenceUnit u : config.getPersistenceUnits()) {
    if (DEFAULT_UNIT_NAME.equals(u.getName()) || (unitName != null && unitName.equals(u.getName()))) {
      unit=u;
    }
  }
  if (unit == null) {
    unit=new PersistenceUnit();
    unit.setName(unitName);
    unit.setDescription(unitDescription);
    config.getPersistenceUnits().add(unit);
  }
  unit.getProperties().clear();
  JPADataSource ds=new JPADataSource().setJndiDataSource(jtaDataSource).setDatabaseType(databaseType).setJdbcDriver(jdbcDriver).setDatabaseURL(databaseURL).setUsername(username).setPassword(password);
  PersistenceContainer container=jpac.getContainer(manager);
  PersistenceProvider provider=jpap.getProvider(manager);
  container.setupConnection(unit,ds);
  provider.setup(unit,ds);
  jpa.saveConfig(config);
}","@Command(""String_Node_Str"") public void setup(@Option(name=""String_Node_Str"",required=true) JPAProvider jpap,@Option(name=""String_Node_Str"",required=true) JPAContainer jpac,@Option(name=""String_Node_Str"",defaultValue=""String_Node_Str"") DatabaseType databaseType,@Option(name=""String_Node_Str"") String jtaDataSource,@Option(name=""String_Node_Str"") String jdbcDriver,@Option(name=""String_Node_Str"") String databaseURL,@Option(name=""String_Node_Str"") String username,@Option(name=""String_Node_Str"") String password,@Option(name=""String_Node_Str"",defaultValue=DEFAULT_UNIT_NAME) String unitName,@Option(name=""String_Node_Str"",defaultValue=DEFAULT_UNIT_DESC) String unitDescription){
  PersistenceFacet jpa=project.getFacet(PersistenceFacet.class);
  PersistenceModel config=jpa.getConfig();
  PersistenceUnit unit=null;
  for (  PersistenceUnit u : config.getPersistenceUnits()) {
    if (DEFAULT_UNIT_NAME.equals(u.getName()) || (unitName != null && unitName.equals(u.getName()))) {
      unit=u;
    }
  }
  if (unit == null) {
    unit=new PersistenceUnit();
    unit.setName(unitName);
    unit.setDescription(unitDescription);
    config.getPersistenceUnits().add(unit);
  }
  unit.getProperties().clear();
  JPADataSource ds=new JPADataSource().setJndiDataSource(jtaDataSource).setDatabaseType(databaseType).setJdbcDriver(jdbcDriver).setDatabaseURL(databaseURL).setUsername(username).setPassword(password);
  PersistenceContainer container=jpac.getContainer(manager);
  PersistenceProvider provider=jpap.getProvider(manager);
  container.setupConnection(unit,ds);
  provider.setup(unit,ds);
  jpa.saveConfig(config);
}",0.8313106796116505
151625,"@Override public PersistenceUnit setupConnection(PersistenceUnit unit,JPADataSource dataSource){
  unit.setTransactionType(TransactionType.RESOURCE_LOCAL);
  if (dataSource.getJndiDataSource() != null) {
    ShellMessages.info(writer,""String_Node_Str"" + dataSource.getJndiDataSource() + ""String_Node_Str"");
  }
  if (!dataSource.hasNonDefaultDatabase()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  unit.setNonJtaDataSource(null);
  unit.setJtaDataSource(null);
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getJdbcDriver()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getDatabaseURL()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getUsername()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getPassword()));
  return unit;
}","@Override public PersistenceUnit setupConnection(PersistenceUnit unit,JPADataSource dataSource){
  unit.setTransactionType(TransactionType.RESOURCE_LOCAL);
  if (dataSource.getJndiDataSource() != null) {
    ShellMessages.info(writer,""String_Node_Str"" + dataSource.getJndiDataSource() + ""String_Node_Str"");
  }
  if (!dataSource.hasNonDefaultDatabase()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (Strings.isNullOrEmpty(dataSource.getDatabaseURL())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (Strings.isNullOrEmpty(dataSource.getUsername())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (Strings.isNullOrEmpty(dataSource.getPassword())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  unit.setNonJtaDataSource(null);
  unit.setJtaDataSource(null);
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getJdbcDriver()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getDatabaseURL()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getUsername()));
  unit.getProperties().add(new Property(""String_Node_Str"",dataSource.getPassword()));
  return unit;
}",0.5898070262246413
151626,"@Override public void complete(final CommandCompleterState st){
  PluginCommandCompleterState state=((PluginCommandCompleterState)st);
  OptionMetadata option=state.getOption();
  if ((option != null) && (state.getCommandContext() != null)) {
    CommandParserContext commandContext=state.getCommandContext();
    Map<OptionMetadata,Object> valueMap=commandContext.getValueMap();
    if (valueMap.isEmpty() || valueMap.containsKey(option)) {
      if (option.hasCustomCompleter()) {
        CommandCompleter completer=BeanManagerUtils.getContextualInstance(manager,option.getCompleterType());
        completer.complete(state);
      }
      if (option.isEnum()) {
        @SuppressWarnings(""String_Node_Str"") EnumCompleter completer=new EnumCompleter((Class<Enum<?>>)option.getType());
        completer.complete(state);
      }
 else       if (isResourceAssignable(option)) {
        ArrayList<String> results=new ArrayList<String>();
        String[] values;
        if (valueMap.isEmpty()) {
          values=new String[]{""String_Node_Str""};
        }
 else         if (valueMap.get(option) instanceof String[]) {
          values=(String[])valueMap.get(option);
        }
 else         if (valueMap.get(option) == null) {
          values=new String[]{""String_Node_Str""};
        }
 else {
          values=new String[]{String.valueOf(valueMap.get(option))};
        }
        String val=values[values.length - 1];
        for (        Resource<?> r : new PathspecParser(resourceFactory,shell.getCurrentResource(),val + ""String_Node_Str"").resolve()) {
          String name=(""String_Node_Str"".equals(val) ? ""String_Node_Str"" : ""String_Node_Str"") + r.getName() + (r.isFlagSet(ResourceFlag.Node) ? ""String_Node_Str"" : ""String_Node_Str"");
          results.add(name);
        }
        int lastNest=val.lastIndexOf(File.separatorChar);
        state.setIndex(state.getIndex() - val.length() + (lastNest != -1 ? lastNest + 1 : 0));
        state.getCandidates().addAll(results);
      }
    }
  }
}","@Override public void complete(final CommandCompleterState st){
  PluginCommandCompleterState state=((PluginCommandCompleterState)st);
  OptionMetadata option=state.getOption();
  if ((option != null) && (state.getCommandContext() != null)) {
    CommandParserContext commandContext=state.getCommandContext();
    Map<OptionMetadata,Object> valueMap=commandContext.getValueMap();
    if (valueMap.isEmpty() || valueMap.containsKey(option)) {
      if (option.hasCustomCompleter()) {
        CommandCompleter completer=BeanManagerUtils.getContextualInstance(manager,option.getCompleterType());
        completer.complete(state);
      }
 else       if (option.isEnum()) {
        @SuppressWarnings(""String_Node_Str"") EnumCompleter completer=new EnumCompleter((Class<Enum<?>>)option.getType());
        completer.complete(state);
      }
 else       if (isResourceAssignable(option)) {
        ArrayList<String> results=new ArrayList<String>();
        String[] values;
        if (valueMap.isEmpty()) {
          values=new String[]{""String_Node_Str""};
        }
 else         if (valueMap.get(option) instanceof String[]) {
          values=(String[])valueMap.get(option);
        }
 else         if (valueMap.get(option) == null) {
          values=new String[]{""String_Node_Str""};
        }
 else {
          values=new String[]{String.valueOf(valueMap.get(option))};
        }
        String val=values[values.length - 1];
        for (        Resource<?> r : new PathspecParser(resourceFactory,shell.getCurrentResource(),val + ""String_Node_Str"").resolve()) {
          String name=(""String_Node_Str"".equals(val) ? ""String_Node_Str"" : ""String_Node_Str"") + r.getName() + (r.isFlagSet(ResourceFlag.Node) ? ""String_Node_Str"" : ""String_Node_Str"");
          results.add(name);
        }
        int lastNest=val.lastIndexOf(File.separatorChar);
        state.setIndex(state.getIndex() - val.length() + (lastNest != -1 ? lastNest + 1 : 0));
        state.getCandidates().addAll(results);
      }
    }
  }
}",0.9985014985014984
151627,"@Test public void testBeansXMLMovedWhenPackagingTypeChanged() throws Exception {
  Project project=initializeJavaProject();
  getShell().execute(""String_Node_Str"");
  assertTrue(project.hasFacet(CDIFacet.class));
  FileResource<?> config=project.getFacet(CDIFacet.class).getConfigFile();
  queueInputLines(""String_Node_Str"");
  getShell().execute(""String_Node_Str"");
  FileResource<?> newConfig=project.getFacet(CDIFacet.class).getConfigFile();
  assertNotNull(config);
  assertNotNull(newConfig);
  assertNotSame(config.getFullyQualifiedName(),newConfig.getFullyQualifiedName());
}","@Test public void testBeansXMLMovedWhenPackagingTypeChanged() throws Exception {
  Project project=initializeJavaProject();
  getShell().execute(""String_Node_Str"");
  FileResource<?> config=project.getFacet(CDIFacet.class).getConfigFile();
  queueInputLines(""String_Node_Str"");
  getShell().execute(""String_Node_Str"");
  FileResource<?> newConfig=project.getFacet(CDIFacet.class).getConfigFile();
  assertNotNull(config);
  assertNotNull(newConfig);
  assertTrue(config.getFullyQualifiedName().contains(""String_Node_Str""));
  assertTrue(newConfig.getFullyQualifiedName().contains(""String_Node_Str""));
  assertFalse(config.getFullyQualifiedName().equals(newConfig.getFullyQualifiedName()));
}",0.8279654359780048
151628,"@DefaultCommand public void install(@Option(required=true,completer=AvailableFacetsCompleter.class,description=""String_Node_Str"") final String facetName){
  try {
    Facet facet=factory.getFacetByName(facetName);
    facet.setProject(project);
    List<Class<? extends Facet>> deps=ConstraintInspector.getFacetDependencies(facet.getClass());
    if (!project.hasAllFacets(deps)) {
      List<String> facetNames=new ArrayList<String>();
      for (      Class<? extends Facet> f : deps) {
        facetNames.add(ConstraintInspector.getName(f));
      }
      if (shell.promptBoolean(""String_Node_Str"" + facetName + ""String_Node_Str""+ facetNames+ ""String_Node_Str"")) {
        projectFactory.installSingleFacet(project,facet.getClass());
      }
 else {
        abort();
        return;
      }
    }
    if (!facet.isInstalled()) {
      List<PackagingType> types=ConstraintInspector.getCompatiblePackagingTypes(facet.getClass());
      PackagingType packaging=project.getFacet(PackagingFacet.class).getPackagingType();
      if (!types.isEmpty() && !types.contains(packaging)) {
        if (types.size() == 1) {
          if (shell.promptBoolean(""String_Node_Str"" + facetName + ""String_Node_Str""+ types+ ""String_Node_Str""+ packaging+ ""String_Node_Str""+ types+ ""String_Node_Str"")) {
            project.getFacet(PackagingFacet.class).setPackagingType(types.get(0));
            shell.println(""String_Node_Str"" + types + ""String_Node_Str"");
          }
 else {
            abort();
            return;
          }
        }
 else         if (types.size() > 1) {
          if (shell.promptBoolean(""String_Node_Str"" + facetName + ""String_Node_Str""+ types+ ""String_Node_Str""+ packaging+ ""String_Node_Str"")) {
            PackagingType type=shell.promptChoiceTyped(""String_Node_Str"",types);
            project.getFacet(PackagingFacet.class).setPackagingType(type);
            shell.println(""String_Node_Str"" + type + ""String_Node_Str"");
          }
 else {
            abort();
            return;
          }
        }
      }
      project.installFacet(facet);
    }
    if (facet.isInstalled()) {
      shell.println(""String_Node_Str"");
    }
 else {
      shell.println(""String_Node_Str"");
    }
  }
 catch (  FacetNotFoundException e) {
    shell.println(""String_Node_Str"" + facetName + ""String_Node_Str""+ ConstraintInspector.getName(ListFacetsPlugin.class)+ ""String_Node_Str"");
  }
}","@DefaultCommand public void install(@Option(required=true,completer=AvailableFacetsCompleter.class,description=""String_Node_Str"") final String facetName){
  try {
    Facet facet=factory.getFacetByName(facetName);
    facet.setProject(project);
    List<Class<? extends Facet>> deps=ConstraintInspector.getFacetDependencies(facet.getClass());
    if (!project.hasAllFacets(deps)) {
      List<String> facetNames=new ArrayList<String>();
      for (      Class<? extends Facet> f : deps) {
        facetNames.add(ConstraintInspector.getName(f));
      }
      if (shell.promptBoolean(""String_Node_Str"" + facetName + ""String_Node_Str""+ facetNames+ ""String_Node_Str"")) {
        projectFactory.installSingleFacet(project,facet.getClass());
      }
 else {
        abort();
        return;
      }
    }
    if (!facet.isInstalled() || !project.hasFacet(facet.getClass())) {
      project.installFacet(facet);
    }
    if (!updatePackaging(facet)) {
      abort();
      return;
    }
    if (facet.isInstalled()) {
      shell.println(""String_Node_Str"");
    }
 else {
      shell.println(""String_Node_Str"");
    }
  }
 catch (  FacetNotFoundException e) {
    shell.println(""String_Node_Str"" + facetName + ""String_Node_Str""+ ConstraintInspector.getName(ListFacetsPlugin.class)+ ""String_Node_Str"");
  }
}",0.64587852494577
151629,"public List<Resource<?>> resolve(){
  Resource<?> r=res;
  String tk;
  if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return singleResult(new DirectoryResource(factory,homeDir));
    }
 else {
      cursor++;
      r=new DirectoryResource(factory,homeDir);
    }
  }
 else   if (isWindows && path.matches(""String_Node_Str"")) {
    int idx=path.indexOf('/') + 1;
    r=new DirectoryResource(factory,new File(path.substring(0,idx)));
    cursor=idx;
  }
  while (cursor < length) {
    SW: switch (path.charAt(cursor++)) {
case '/':
      if (cursor - 1 == 0) {
        r=factory.getResourceFrom(new File(""String_Node_Str""));
      }
    continue;
case '.':
switch (read()) {
case '.':
    cursor++;
  Resource<?> parent=r.getParent();
if (parent != null) {
  r=parent;
}
break SW;
default :
if (cursor < length && path.charAt(cursor) == '/') {
cursor++;
break SW;
}
}
default :
boolean first=--cursor == 0;
tk=capture();
if (tk.matches(""String_Node_Str"")) {
boolean startDot=tk.startsWith(""String_Node_Str"");
String regex=pathspecToRegEx(tk.startsWith(""String_Node_Str"") ? tk.substring(1) : tk);
Pattern p=Pattern.compile(regex);
List<Resource<?>> res=new LinkedList<Resource<?>>();
for (Resource<?> child : r.listResources()) {
if (p.matcher(child.getName()).matches()) {
child.setFlag(ResourceFlag.AmbiguouslyQualified);
if (child.getName().startsWith(""String_Node_Str"")) {
if (startDot) {
res.add(child);
}
}
 else {
res.add(child);
}
}
}
if (cursor != length) {
for (Resource<?> child : res) {
results.addAll(new PathspecParser(factory,child,path,cursor).resolve());
}
}
 else {
results.addAll(res);
}
return results;
}
if (tk.startsWith(""String_Node_Str"")) {
if (first) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return singleResult(r);
}","public List<Resource<?>> resolve(){
  Resource<?> r=res;
  String tk;
  if (""String_Node_Str"".equals(path)) {
    return singleResult(r);
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return singleResult(new DirectoryResource(factory,homeDir));
    }
 else {
      cursor++;
      r=new DirectoryResource(factory,homeDir);
    }
  }
 else   if (isWindows && path.matches(""String_Node_Str"")) {
    int idx=path.indexOf('/') + 1;
    r=new DirectoryResource(factory,new File(path.substring(0,idx)));
    cursor=idx;
  }
  while (cursor < length) {
    SW: switch (path.charAt(cursor++)) {
case '/':
      if (cursor - 1 == 0) {
        r=factory.getResourceFrom(new File(""String_Node_Str""));
      }
    continue;
case '.':
switch (read()) {
case '.':
    cursor++;
  Resource<?> parent=r.getParent();
if (parent != null) {
  r=parent;
}
break SW;
default :
if (cursor < length && path.charAt(cursor) == '/') {
cursor++;
break SW;
}
}
default :
boolean first=--cursor == 0;
tk=capture();
if (tk.matches(""String_Node_Str"")) {
boolean startDot=tk.startsWith(""String_Node_Str"");
String regex=pathspecToRegEx(tk.startsWith(""String_Node_Str"") ? tk.substring(1) : tk);
Pattern p=Pattern.compile(regex);
List<Resource<?>> res=new LinkedList<Resource<?>>();
for (Resource<?> child : r.listResources()) {
if (p.matcher(child.getName()).matches()) {
child.setFlag(ResourceFlag.AmbiguouslyQualified);
if (child.getName().startsWith(""String_Node_Str"")) {
if (startDot) {
res.add(child);
}
}
 else {
res.add(child);
}
}
}
if (cursor != length) {
for (Resource<?> child : res) {
results.addAll(new PathspecParser(factory,child,path,cursor).resolve());
}
}
 else {
results.addAll(res);
}
return results;
}
if (tk.startsWith(""String_Node_Str"")) {
if (first) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return singleResult(r);
}",0.9812770043206912
151630,"public static String promptExpressionParser(Shell shell,String input){
  StringBuilder builder=new StringBuilder();
  char[] expr=input.toCharArray();
  int i=0;
  int start=0;
  for (; i < expr.length; i++) {
switch (expr[i]) {
case '\\':
      if (i + 1 < expr.length) {
switch (expr[++i]) {
case '\\':
          builder.append(new String(expr,start,i - start - 1));
        builder.append(""String_Node_Str"");
      start=i + 1;
    break;
case 'w':
  builder.append(new String(expr,start,i - start - 1));
builder.append(shell.getProperty(""String_Node_Str""));
start=i + 1;
break;
case 'W':
builder.append(new String(expr,start,i - start - 1));
String v=(String)shell.getProperty(""String_Node_Str"");
builder.append(v.substring(v.lastIndexOf('/') + 1));
start=i + 1;
break;
case 'd':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case 't':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case 'T':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case '@':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case '$':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'r':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'n':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'c':
if (i + 1 < expr.length) {
switch (expr[++i]) {
case '{':
builder.append(new String(expr,start,i - start - 2));
start=i;
while (i < input.length() && input.charAt(i) != '}') i++;
if (i == input.length() && input.charAt(i) != '}') {
builder.append(new String(expr,start,i - start));
}
 else {
String color=new String(expr,start + 1,i - start - 1);
start=++i;
Capture: while (i < expr.length) {
switch (expr[i]) {
case '\\':
if (i + 1 < expr.length) {
if (expr[i + 1] == 'c') {
break Capture;
}
}
default :
i++;
}
}
ShellColor c;
if (""String_Node_Str"".equals(color)) {
c=ShellColor.RED;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.WHITE;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BLUE;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.YELLOW;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BOLD;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BLACK;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.CYAN;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.GREEN;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.MAGENTA;
}
 else {
c=ShellColor.NONE;
}
String toColorize=promptExpressionParser(shell,new String(expr,start,i - start));
String cStr=shell.renderColor(c,toColorize);
builder.append(cStr);
start=i+=2;
}
break;
default :
builder.append(promptExpressionParser(shell,new String(expr,start,i - start - 2)));
start=++i;
}
}
}
}
}
}
if (start < expr.length && i > start) {
builder.append(new String(expr,start,i - start));
}
return builder.toString();
}","public static String promptExpressionParser(Shell shell,String input){
  StringBuilder builder=new StringBuilder();
  char[] expr=input.toCharArray();
  ShellColor c=null;
  int i=0;
  int start=0;
  for (; i < expr.length; i++) {
switch (expr[i]) {
case '\\':
      if (i + 1 < expr.length) {
switch (expr[++i]) {
case '\\':
          builder.append(new String(expr,start,i - start - 1));
        builder.append(""String_Node_Str"");
      start=i + 1;
    break;
case 'w':
  builder.append(new String(expr,start,i - start - 1));
builder.append(shell.getProperty(""String_Node_Str""));
start=i + 1;
break;
case 'W':
builder.append(new String(expr,start,i - start - 1));
String v=(String)shell.getProperty(""String_Node_Str"");
builder.append(v.substring(v.lastIndexOf('/') + 1));
start=i + 1;
break;
case 'd':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case 't':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case 'T':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case '@':
builder.append(new String(expr,start,i - start - 1));
builder.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
start=i + 1;
break;
case '$':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'r':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'n':
builder.append(new String(expr,start,i - start - 1));
builder.append(""String_Node_Str"");
start=i + 1;
break;
case 'c':
if (i + 1 < expr.length) {
switch (expr[++i]) {
case '{':
boolean nextNodeColor=false;
builder.append(new String(expr,start,i - start - 2));
start=i;
while (i < input.length() && input.charAt(i) != '}') i++;
if (i == input.length() && input.charAt(i) != '}') {
builder.append(new String(expr,start,i - start));
}
 else {
String color=new String(expr,start + 1,i - start - 1);
start=++i;
Capture: while (i < expr.length) {
switch (expr[i]) {
case '\\':
if (i + 1 < expr.length) {
if (expr[i + 1] == 'c') {
if ((i + 2 < expr.length) && expr[i + 2] == '{') {
nextNodeColor=true;
}
break Capture;
}
}
default :
i++;
}
}
if (c != null && c != ShellColor.NONE) {
builder.append(shell.renderColor(ShellColor.NONE,""String_Node_Str""));
}
if (""String_Node_Str"".equals(color)) {
c=ShellColor.RED;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.WHITE;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BLUE;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.YELLOW;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BOLD;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.BLACK;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.CYAN;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.GREEN;
}
 else if (""String_Node_Str"".equals(color)) {
c=ShellColor.MAGENTA;
}
 else {
c=ShellColor.NONE;
}
String toColorize=promptExpressionParser(shell,new String(expr,start,i - start));
String cStr=shell.renderColor(c,toColorize);
builder.append(cStr);
if (nextNodeColor) {
start=i--;
}
 else {
start=i+=2;
}
}
break;
default :
start=i+=2;
}
}
}
}
}
}
if (start < expr.length && i > start) {
builder.append(new String(expr,start,i - start));
}
return builder.toString();
}",0.9456505901209384
151631,"public boolean isAvailable(final Project currentProject,final PluginMetadata plugin){
  try {
    verifyAvailable(null,plugin);
  }
 catch (  ConstraintException e) {
    return false;
  }
  return true;
}","public boolean isAvailable(final Project currentProject,final PluginMetadata plugin){
  try {
    verifyAvailable(currentProject,plugin);
  }
 catch (  ConstraintException e) {
    return false;
  }
  return true;
}",0.9571428571428572
151632,"private Node nextNode(){
  skipWhitespace();
  int start=cursor;
  if (cursor >= length) {
    return null;
  }
 else   if (expr[cursor] == ';') {
    ++cursor;
    return new StatementTerminator();
  }
switch (expr[cursor]) {
case '@':
    start++;
  skipToEOS();
String scriptTk=new String(expr,start,cursor - start);
return new ScriptNode(new TokenNode(scriptTk),true);
case '\'':
case '""':
cursor=balancedCapture(expr,cursor,expr[cursor]);
return new TokenNode(new String(expr,start + 1,cursor++ - start - 1));
case '(':
cursor=balancedCapture(expr,cursor,expr[cursor]);
return new FSHParser(new String(expr,++start,cursor++ - start),true).parse();
default :
String tk=captureToken();
if (isReservedWord(tk)) {
boolean block=""String_Node_Str"".equals(tk) || ""String_Node_Str"".equals(tk) || ""String_Node_Str"".equals(tk);
start=cursor;
SkipLoop: while (cursor <= length) {
switch (expr[cursor]) {
case '\'':
case '""':
case '(':
cursor=balancedCapture(expr,cursor,expr[cursor]);
if (block) {
cursor++;
while (cursor != length && Character.isWhitespace(expr[cursor])) cursor++;
StringAppender buf=new StringAppender();
if (cursor != length) {
do {
boolean openBracket=expr[cursor] == '{';
if (openBracket) {
cursor++;
}
buf.append(shellToMVEL(new String(expr,start,cursor - start - (openBracket ? 1 : 0)),true));
if (openBracket) {
buf.append('{');
}
start=cursor;
if (openBracket) {
cursor=balancedCapture(expr,cursor,'{');
}
 else {
while (cursor != length && expr[cursor] != ';') cursor++;
}
int offset=cursor != length && expr[cursor] == '}' ? -1 : 0;
buf.append(shellToMVEL(new String(expr,start,cursor - start).trim(),false));
if (offset == -1) {
buf.append(""String_Node_Str"");
cursor++;
}
tk+=buf.toString();
buf.reset();
start=cursor;
}
 while (ifThenElseBlockContinues());
return new ScriptNode(new TokenNode(tk),false);
}
}
break;
case ';':
break SkipLoop;
}
cursor++;
}
tk+=new String(expr,start,cursor - start);
}
return tk.startsWith(""String_Node_Str"") ? new ScriptNode(new TokenNode(tk),false) : new TokenNode(tk);
}
}","private Node nextNode(){
  skipWhitespace();
  int start=cursor;
  if (cursor >= length) {
    return null;
  }
 else   if (expr[cursor] == ';') {
    ++cursor;
    return new StatementTerminator();
  }
switch (expr[cursor]) {
case '@':
    start++;
  skipToEOS();
String scriptTk=new String(expr,start,cursor - start);
return new ScriptNode(new TokenNode(scriptTk),true);
case '\'':
case '""':
cursor=balancedCapture(expr,cursor,expr[cursor]);
return new StringTokenNode(new String(expr,start + 1,cursor++ - start - 1));
case '(':
cursor=balancedCapture(expr,cursor,expr[cursor]);
return new FSHParser(new String(expr,++start,cursor++ - start),true).parse();
default :
String tk=captureToken();
if (isReservedWord(tk)) {
boolean block=""String_Node_Str"".equals(tk) || ""String_Node_Str"".equals(tk) || ""String_Node_Str"".equals(tk);
start=cursor;
SkipLoop: while (cursor <= length) {
switch (expr[cursor]) {
case '\'':
case '""':
case '(':
cursor=balancedCapture(expr,cursor,expr[cursor]);
if (block) {
cursor++;
while (cursor != length && Character.isWhitespace(expr[cursor])) cursor++;
StringAppender buf=new StringAppender();
if (cursor != length) {
do {
boolean openBracket=expr[cursor] == '{';
if (openBracket) {
cursor++;
}
buf.append(shellToMVEL(new String(expr,start,cursor - start - (openBracket ? 1 : 0)),true));
if (openBracket) {
buf.append('{');
}
start=cursor;
if (openBracket) {
cursor=balancedCapture(expr,cursor,'{');
}
 else {
while (cursor != length && expr[cursor] != ';') cursor++;
}
int offset=cursor != length && expr[cursor] == '}' ? -1 : 0;
buf.append(shellToMVEL(new String(expr,start,cursor - start).trim(),false));
if (offset == -1) {
buf.append(""String_Node_Str"");
cursor++;
}
tk+=buf.toString();
buf.reset();
start=cursor;
}
 while (ifThenElseBlockContinues());
return new ScriptNode(new TokenNode(tk),false);
}
}
break;
case ';':
break SkipLoop;
}
cursor++;
}
tk+=new String(expr,start,cursor - start);
}
return tk.startsWith(""String_Node_Str"") ? new ScriptNode(new TokenNode(tk),false) : new TokenNode(tk);
}
}",0.9985250737463128
151633,"void more(InputStream stream,PipeOut out,boolean noAutoExit) throws IOException {
  byte[] buffer=new byte[128];
  int read;
  byte c;
  int height=shell.getHeight() - 1;
  int width=shell.getWidth();
  int lCounter=width;
  int y=0;
  LineBuffer lineBuffer=new LineBuffer(stream,width);
  StringBuilder lastPattern=new StringBuilder();
  do {
    Mainloop:     while ((read=lineBuffer.read(buffer)) != -1) {
      Bufferloop:       for (int i=0; i < read; i++) {
        if (--lCounter == 0) {
          lineBuffer.seenLine();
          lCounter=width;
          ++y;
        }
switch (c=buffer[i]) {
case '\r':
          i++;
case '\n':
        lineBuffer.seenLine();
      lCounter=width;
    ++y;
default :
  if (y == height) {
    out.println();
switch (prompt(lineBuffer,out,lastPattern)) {
case -1:
      y=0;
    continue Mainloop;
case -2:
  y--;
continue Bufferloop;
case -3:
y=0;
continue Bufferloop;
case 0:
noAutoExit=true;
break Mainloop;
}
}
}
out.write(c);
}
}
if (noAutoExit) {
switch (prompt(lineBuffer,out,lastPattern)) {
case -1:
y=0;
break;
case -2:
y--;
break;
case -3:
y=0;
break;
case 0:
noAutoExit=false;
break;
}
}
}
 while (noAutoExit);
}","void more(InputStream stream,PipeOut out,boolean noAutoExit) throws IOException {
  byte[] buffer=new byte[128];
  int read;
  byte c;
  int height=shell.getHeight() - 1;
  int width=shell.getWidth();
  int lCounter=width;
  int y=0;
  LineBuffer lineBuffer=new LineBuffer(stream,width);
  StringBuilder lastPattern=new StringBuilder();
  do {
    Mainloop:     while ((read=lineBuffer.read(buffer)) != -1) {
      Bufferloop:       for (int i=0; i < read; i++) {
        if (--lCounter == 0) {
          lineBuffer.seenLine();
          lCounter=width;
          ++y;
        }
switch (c=buffer[i]) {
case '\r':
          i++;
case '\n':
        lineBuffer.seenLine();
      lCounter=width;
    ++y;
default :
  if (y == height) {
    out.println();
switch (prompt(lineBuffer,out,lastPattern)) {
case -1:
      y=0;
    continue Mainloop;
case -2:
  y--;
continue Bufferloop;
case -3:
y=0;
continue Bufferloop;
case 0:
noAutoExit=false;
break Mainloop;
}
}
}
out.write(c);
}
}
if (noAutoExit) {
switch (prompt(lineBuffer,out,lastPattern)) {
case -1:
y=0;
break;
case -2:
y--;
break;
case -3:
y=0;
break;
case 0:
noAutoExit=false;
break;
}
}
}
 while (noAutoExit);
}",0.996996996996997
151634,"public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    if (c == 127) {
      if (buf.length() != 0) {
        buf.deleteCharAt(buf.length() - 1);
        cursorLeft(1);
        print(""String_Node_Str"");
        cursorLeft(1);
      }
      continue;
    }
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}","public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    if (c == 127) {
      if (buf.length() > 0) {
        buf.deleteCharAt(buf.length() - 1);
        cursorLeft(1);
        print(""String_Node_Str"");
        cursorLeft(1);
      }
      continue;
    }
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}",0.996216897856242
151635,"public int findPattern(String pattern,boolean backwards) throws IOException {
  Pattern p=Pattern.compile(""String_Node_Str"" + pattern + ""String_Node_Str"");
  int currentBuffer=bufferPos;
  int currentLine=bufferLine;
  int startLine;
  int cursor=0;
  if (backwards) {
    bufferLine=0;
    startLine=0;
    bufferPos=0;
  }
 else {
    cursor=startLine=bufferPos=findLine(bufferLine);
  }
  int line=bufferLine;
  int lCount=lineWidth;
  byte[] buffer=new byte[1024];
  int read;
  while ((read=read(buffer)) != -1) {
    for (int i=0; i < read; i++) {
      cursor++;
switch (buffer[i]) {
case '\r':
        i++;
case '\n':
      String l=new String(curr.getChars(startLine,cursor - startLine - 1));
    if (p.matcher(l).matches()) {
      return line;
    }
  line++;
startLine=cursor;
}
if (--lCount == 0) {
line++;
lCount=lineWidth;
}
}
}
bufferPos=currentBuffer;
bufferLine=currentLine;
return -1;
}","public int findPattern(String pattern,boolean backwards) throws IOException {
  Pattern p=Pattern.compile(""String_Node_Str"" + pattern + ""String_Node_Str"");
  int currentBuffer=bufferPos;
  int currentLine=bufferLine;
  int startLine;
  int cursor=0;
  if (backwards) {
    bufferLine=0;
    startLine=0;
    bufferPos=0;
  }
 else {
    cursor=startLine=bufferPos=findLine(bufferLine);
  }
  int line=bufferLine;
  int lCount=lineWidth;
  byte[] buffer=new byte[1024];
  int read;
  while ((read=read(buffer)) != -1) {
    for (int i=0; i < read; i++) {
      cursor++;
switch (buffer[i]) {
case '\r':
        i++;
case '\n':
      line++;
    lCount=lineWidth;
  String l=new String(curr.getChars(startLine,cursor - startLine - 1));
if (p.matcher(l).matches()) {
  return line;
}
startLine=cursor;
}
if (--lCount == 0) {
line++;
lCount=lineWidth;
}
}
}
bufferPos=currentBuffer;
bufferLine=currentLine;
return -1;
}",0.956043956043956
151636,"public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}","public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    if (c == 127) {
      buf.deleteCharAt(buf.length() - 1);
      cursorLeft(1);
      print(""String_Node_Str"");
      cursorLeft(1);
      continue;
    }
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}",0.7084870848708487
151637,"public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    if (c == 127) {
      buf.deleteCharAt(buf.length() - 1);
      cursorLeft(1);
      print(""String_Node_Str"");
      cursorLeft(1);
      continue;
    }
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}","public String promptAndSwallowCR(){
  int c;
  StringBuilder buf=new StringBuilder();
  while ((c=scan()) != '\n') {
    if (c == 127) {
      if (buf.length() != 0) {
        buf.deleteCharAt(buf.length() - 1);
        cursorLeft(1);
        print(""String_Node_Str"");
        cursorLeft(1);
      }
      continue;
    }
    write((byte)c);
    buf.append((char)c);
  }
  return buf.toString();
}",0.8995983935742972
151638,"private void more(InputStream stream,PipeOut out) throws IOException {
  byte[] buffer=new byte[1024];
  int read;
  byte c;
  int height=shell.getHeight() - 1;
  int width=shell.getWidth();
  int lCounter=width;
  int y=0;
  LineBuffer lineBuffer=new LineBuffer(stream,width);
  Mainloop:   while ((read=lineBuffer.read(buffer)) != -1) {
    Bufferloop:     for (int i=0; i < read; i++) {
      if (--lCounter == 0) {
        lineBuffer.seenLine();
        lCounter=width;
        ++y;
      }
switch (c=buffer[i]) {
case '\r':
        i++;
case '\n':
      lineBuffer.seenLine();
    lCounter=width;
  ++y;
default :
if (y == height) {
  out.println();
  boolean backwards=false;
  do {
    String prompt=MOREPROMPT + ""String_Node_Str"" + lineBuffer.getCurrentLine()+ ""String_Node_Str"";
    out.print(ShellColor.BOLD,prompt);
switch (shell.scan()) {
case 'e':
case 'E':
case 'j':
case 'J':
case 16:
      lineBuffer.rewindBuffer(height=shell.getHeight() - 1,lineBuffer.getCurrentLine() - 1);
    lineBuffer.setLineWidth(shell.getWidth());
  y=0;
shell.clear();
continue Mainloop;
case 'u':
case 'U':
lineBuffer.rewindBuffer(height=shell.getHeight() - 1,lineBuffer.getCurrentLine() - height);
y=0;
shell.clear();
continue Mainloop;
case 'y':
case 'Y':
case 'k':
case 'K':
case 14:
case '\n':
y--;
height=shell.getHeight() - 1;
lineBuffer.setLineWidth(shell.getWidth());
shell.cursorLeft(prompt.length());
shell.clearLine();
continue Bufferloop;
case ' ':
y=0;
height=shell.getHeight() - 1;
lineBuffer.setLineWidth(shell.getWidth());
shell.clearLine();
shell.cursorLeft(prompt.length());
continue Bufferloop;
case 'q':
case 'Q':
out.println();
break Mainloop;
case '?':
backwards=true;
case '/':
shell.clearLine();
shell.cursorLeft(prompt.length());
prompt=backwards ? SEARCH_BACKWARDS_PROMPT : SEARCH_FORWARD_PROMPT;
out.print(ShellColor.BOLD,prompt);
String pattern=shell.promptAndSwallowCR().trim();
int result=lineBuffer.findPattern(pattern,backwards);
if (result == -1) {
shell.clearLine();
shell.cursorLeft(prompt.length() + pattern.length());
shell.print(ShellColor.RED,PATTERN_NOT_FOUND + pattern);
shell.scan();
shell.clearLine();
shell.cursorLeft(PATTERN_NOT_FOUND.length() + pattern.length());
}
 else {
lineBuffer.rewindBuffer(shell.getHeight() - 1,result);
y=0;
shell.clear();
continue Mainloop;
}
break;
}
}
 while (true);
}
}
out.write(c);
}
}
}","private void more(InputStream stream,PipeOut out) throws IOException {
  byte[] buffer=new byte[1024];
  int read;
  byte c;
  int height=shell.getHeight() - 1;
  int width=shell.getWidth();
  int lCounter=width;
  int y=0;
  LineBuffer lineBuffer=new LineBuffer(stream,width);
  String lastPattern=null;
  Mainloop:   while ((read=lineBuffer.read(buffer)) != -1) {
    Bufferloop:     for (int i=0; i < read; i++) {
      if (--lCounter == 0) {
        lineBuffer.seenLine();
        lCounter=width;
        ++y;
      }
switch (c=buffer[i]) {
case '\r':
        i++;
case '\n':
      lineBuffer.seenLine();
    lCounter=width;
  ++y;
default :
if (y == height) {
  out.println();
  boolean backwards=false;
  do {
    String prompt=MOREPROMPT + ""String_Node_Str"" + lineBuffer.getCurrentLine()+ ""String_Node_Str"";
    out.print(ShellColor.BOLD,prompt);
switch (shell.scan()) {
case 'e':
case 'E':
case 'j':
case 'J':
case 16:
      lineBuffer.rewindBuffer(height=shell.getHeight() - 1,lineBuffer.getCurrentLine() - 1);
    lineBuffer.setLineWidth(shell.getWidth());
  y=0;
shell.clear();
continue Mainloop;
case 'u':
case 'U':
lineBuffer.rewindBuffer(height=shell.getHeight() - 1,lineBuffer.getCurrentLine() - height);
y=0;
shell.clear();
continue Mainloop;
case 'y':
case 'Y':
case 'k':
case 'K':
case 14:
case '\n':
y--;
height=shell.getHeight() - 1;
lineBuffer.setLineWidth(shell.getWidth());
shell.cursorLeft(prompt.length());
shell.clearLine();
continue Bufferloop;
case ' ':
y=0;
height=shell.getHeight() - 1;
lineBuffer.setLineWidth(shell.getWidth());
shell.clearLine();
shell.cursorLeft(prompt.length());
continue Bufferloop;
case 'q':
case 'Q':
shell.clearLine();
shell.cursorLeft(prompt.length());
out.println();
break Mainloop;
case '?':
backwards=true;
case '/':
shell.clearLine();
shell.cursorLeft(prompt.length());
prompt=backwards ? SEARCH_BACKWARDS_PROMPT : SEARCH_FORWARD_PROMPT;
String pattern;
if (lastPattern != null) {
prompt+=""String_Node_Str"" + lastPattern + ""String_Node_Str"";
}
out.print(ShellColor.BOLD,prompt);
pattern=shell.promptAndSwallowCR().trim();
String searched;
int result=lineBuffer.findPattern(pattern.equals(""String_Node_Str"") && lastPattern != null ? searched=lastPattern : (searched=lastPattern=pattern),backwards);
if (result == -1) {
shell.clearLine();
shell.cursorLeft(prompt.length() + pattern.length());
shell.print(ShellColor.RED,PATTERN_NOT_FOUND + searched);
shell.scan();
shell.clearLine();
shell.cursorLeft(PATTERN_NOT_FOUND.length() + searched.length());
}
 else {
lineBuffer.rewindBuffer(shell.getHeight() - 1,result);
y=0;
shell.clear();
continue Mainloop;
}
break;
}
}
 while (true);
}
}
out.write(c);
}
}
}",0.9311031461569096
151639,"public int findPattern(String pattern,boolean backwards) throws IOException {
  Pattern p=Pattern.compile(""String_Node_Str"" + pattern + ""String_Node_Str"");
  int currentBuffer=bufferPos;
  int currentLine=bufferLine;
  int startLine;
  int cursor=0;
  if (backwards) {
    bufferLine=0;
    startLine=0;
    bufferPos=0;
  }
 else {
    cursor=startLine=bufferPos=findLine(bufferLine);
  }
  int line=bufferLine;
  int lCount=lineWidth;
  byte[] buffer=new byte[1024];
  int read;
  while ((read=read(buffer)) != -1) {
    for (int i=0; i < read; i++) {
      cursor++;
switch (buffer[i]) {
case '\r':
        i++;
case '\n':
      line++;
    lCount=lineWidth;
  String l=new String(curr.getChars(startLine,cursor - startLine - 1));
if (p.matcher(l).matches()) {
  return line;
}
startLine=cursor;
}
if (--lCount == 0) {
line++;
lCount=lineWidth;
}
}
}
bufferPos=currentBuffer;
bufferLine=currentLine;
return -1;
}","public int findPattern(String pattern,boolean backwards) throws IOException {
  Pattern p=Pattern.compile(""String_Node_Str"" + pattern + ""String_Node_Str"");
  int currentBuffer=bufferPos;
  int currentLine=bufferLine;
  int startLine;
  int cursor=0;
  if (backwards) {
    bufferLine=0;
    startLine=0;
    bufferPos=0;
  }
 else {
    cursor=startLine=bufferPos=findLine(bufferLine);
  }
  int line=bufferLine;
  int lCount=lineWidth;
  byte[] buffer=new byte[1024];
  int read;
  while ((read=read(buffer)) != -1) {
    for (int i=0; i < read; i++) {
      cursor++;
switch (buffer[i]) {
case '\r':
        i++;
case '\n':
      line++;
    lCount=lineWidth;
  if (p.matcher(new String(curr.getChars(startLine,cursor - startLine - 1))).matches()) {
    return line;
  }
startLine=cursor;
}
if (--lCount == 0) {
line++;
lCount=lineWidth;
}
}
}
bufferPos=currentBuffer;
bufferLine=currentLine;
return -1;
}",0.91218441273326
151640,"@Override public String format(final int column,final String value){
  return value.endsWith(""String_Node_Str"") ? shell.renderColor(ShellColor.BOLD,value) : value;
}","@Override public String format(final int column,final String value){
  return value.endsWith(""String_Node_Str"") ? pipeOut.renderColor(ShellColor.BOLD,value) : value;
}",0.9698795180722892
151641,"@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) final boolean showAll){
  List<String> listData;
  Map<String,List<String>> listGroups=new TreeMap<String,List<String>>();
  Class<? extends Resource> currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      ConstraintEnforcer enforcer=new ConstraintEnforcer();
      if (showAll || enforcer.isAvailable(shell.getCurrentProject(),pluginMetadata)) {
        if (!listGroups.containsKey(pluginMetadata.getTopic())) {
          listGroups.put(pluginMetadata.getTopic(),listData=new ArrayList<String>());
        }
 else {
          listData=listGroups.get(pluginMetadata.getTopic());
        }
        for (        CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
          String name=render(showAll,currResource,commandMetadata);
          if (name.endsWith(""String_Node_Str"")) {
            listData.remove(name.substring(0,name.length() - 1));
          }
          listData.remove(name);
          if (!""String_Node_Str"".equals(name)) {
            listData.add(name);
          }
        }
        if (!listGroups.containsKey(pluginMetadata.getTopic())) {
          listGroups.put(pluginMetadata.getTopic(),listData);
        }
      }
    }
  }
  GeneralUtils.OutputAttributes attr=null;
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    attr=GeneralUtils.calculateOutputAttributs(entry.getValue(),shell,attr);
  }
  FormatCallback formatCallback=new FormatCallback(){
    @Override public String format(    final int column,    final String value){
      return value.endsWith(""String_Node_Str"") ? shell.renderColor(ShellColor.BOLD,value) : value;
    }
  }
;
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    shell.println();
    shell.println(ShellColor.RED,""String_Node_Str"" + entry.getKey().toUpperCase() + ""String_Node_Str"");
    printOutColumns(entry.getValue(),ShellColor.NONE,shell,attr,formatCallback,true);
  }
  shell.println();
  if (showAll) {
    shell.println(""String_Node_Str"");
  }
 else {
    shell.println(""String_Node_Str"");
  }
}","@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) final boolean showAll,final PipeOut pipeOut){
  List<String> listData;
  Map<String,List<String>> listGroups=new TreeMap<String,List<String>>();
  Class<? extends Resource> currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      ConstraintEnforcer enforcer=new ConstraintEnforcer();
      if (showAll || enforcer.isAvailable(shell.getCurrentProject(),pluginMetadata)) {
        if (!listGroups.containsKey(pluginMetadata.getTopic())) {
          listGroups.put(pluginMetadata.getTopic(),listData=new ArrayList<String>());
        }
 else {
          listData=listGroups.get(pluginMetadata.getTopic());
        }
        for (        CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
          String name=render(showAll,currResource,commandMetadata);
          if (name.endsWith(""String_Node_Str"")) {
            listData.remove(name.substring(0,name.length() - 1));
          }
          listData.remove(name);
          if (!""String_Node_Str"".equals(name)) {
            listData.add(name);
          }
        }
        if (!listGroups.containsKey(pluginMetadata.getTopic())) {
          listGroups.put(pluginMetadata.getTopic(),listData);
        }
      }
    }
  }
  GeneralUtils.OutputAttributes attr=null;
  if (pipeOut.isPiped()) {
    attr=new GeneralUtils.OutputAttributes(120,1);
  }
 else {
    for (    Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
      attr=GeneralUtils.calculateOutputAttributs(entry.getValue(),shell,attr);
    }
  }
  FormatCallback formatCallback=new FormatCallback(){
    @Override public String format(    final int column,    final String value){
      return value.endsWith(""String_Node_Str"") ? pipeOut.renderColor(ShellColor.BOLD,value) : value;
    }
  }
;
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    if (!pipeOut.isPiped()) {
      pipeOut.println();
      pipeOut.println(ShellColor.RED,""String_Node_Str"" + entry.getKey().toUpperCase() + ""String_Node_Str"");
    }
    printOutColumns(entry.getValue(),ShellColor.NONE,pipeOut,attr,formatCallback,true);
  }
  if (!pipeOut.isPiped()) {
    pipeOut.println();
    if (showAll) {
      pipeOut.println(""String_Node_Str"");
    }
 else {
      pipeOut.println(""String_Node_Str"");
    }
  }
}",0.9365012615643398
151642,"@Override public boolean isInstalled(){
  return getEntityPackageFile().exists() && getConfigFile().exists();
}","@Override public boolean isInstalled(){
  DependencyFacet deps=project.getFacet(DependencyFacet.class);
  boolean hasDependency=deps.hasDependency(dep);
  return hasDependency && getEntityPackageFile().exists() && getConfigFile().exists();
}",0.6306818181818182
151643,"private List<JavaClass> findEntitiesInFolder(final File packageFile){
  List<JavaClass> result=new ArrayList<JavaClass>();
  if (packageFile.exists()) {
    for (    File source : packageFile.listFiles(entityFileFilter)) {
      try {
        JavaClass javaClass=JavaParser.parse(source);
        if (javaClass.hasAnnotation(Entity.class)) {
          result.add(javaClass);
        }
      }
 catch (      FileNotFoundException e) {
      }
    }
    for (    File source : packageFile.listFiles(directoryFilter)) {
      List<JavaClass> subResults=findEntitiesInFolder(source);
      result.addAll(subResults);
    }
  }
  return result;
}","private List<JavaClass> findEntitiesInFolder(final File packageFile){
  List<JavaClass> result=new ArrayList<JavaClass>();
  if (packageFile.exists()) {
    for (    File source : packageFile.listFiles(entityFileFilter))     try {
      JavaClass javaClass=JavaParser.parse(source);
      if (javaClass.hasAnnotation(Entity.class))       result.add(javaClass);
    }
 catch (    FileNotFoundException e) {
    }
    for (    File source : packageFile.listFiles(directoryFilter)) {
      List<JavaClass> subResults=findEntitiesInFolder(source);
      result.addAll(subResults);
    }
  }
  return result;
}",0.9582664526484752
151644,"@Override public Facet install(){
  if (!isInstalled()) {
    File entityRoot=getEntityPackageFile();
    if (!entityRoot.exists()) {
      project.mkdirs(entityRoot);
      entityRoot.mkdirs();
    }
    File descriptor=getConfigFile();
    if (!descriptor.exists()) {
      PersistenceUnitDef unit=Descriptors.create(PersistenceDescriptor.class).persistenceUnit(""String_Node_Str"").description(""String_Node_Str"").transactionType(TransactionType.JTA).provider(ProviderType.HIBERNATE).jtaDataSource(""String_Node_Str"").includeUnlistedClasses().schemaGenerationMode(SchemaGenerationModeType.CREATE_DROP).showSql().formatSql().property(""String_Node_Str"",true);
      project.writeFile(unit.exportAsString(),descriptor);
    }
  }
  project.registerFacet(this);
  return this;
}","@Override public Facet install(){
  if (!isInstalled()) {
    DependencyFacet deps=project.getFacet(DependencyFacet.class);
    if (!deps.hasDependency(dep))     deps.addDependency(dep);
    File entityRoot=getEntityPackageFile();
    if (!entityRoot.exists()) {
      project.mkdirs(entityRoot);
      entityRoot.mkdirs();
    }
    File descriptor=getConfigFile();
    if (!descriptor.exists()) {
      PersistenceUnitDef unit=Descriptors.create(PersistenceDescriptor.class).persistenceUnit(""String_Node_Str"").description(""String_Node_Str"").transactionType(TransactionType.JTA).provider(ProviderType.HIBERNATE).jtaDataSource(""String_Node_Str"").includeUnlistedClasses().schemaGenerationMode(SchemaGenerationModeType.CREATE_DROP).showSql().formatSql().property(""String_Node_Str"",true);
      project.writeFile(unit.exportAsString(),descriptor);
    }
  }
  project.registerFacet(this);
  return this;
}",0.9229850746268656
151645,"@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData=new ArrayList<String>();
  Set<String> displayed=new HashSet<String>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        render(listData,showAll,currResource,commandMetadata,displayed.contains(commandMetadata.getName()));
        displayed.add(commandMetadata.getName());
      }
    }
  }
  printOutColumns(listData,shell,true);
}","@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData=new ArrayList<String>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        String name=render(listData,showAll,currResource,commandMetadata);
        if (name.endsWith(""String_Node_Str"")) {
          listData.remove(name.substring(0,name.length() - 1));
        }
        listData.add(name);
      }
    }
  }
  if (showAll)   shell.println(""String_Node_Str"");
  printOutColumns(listData,shell,true);
}",0.6973333333333334
151646,"private static void render(List<String> listData,boolean showAll,Class currResource,CommandMetadata cmdMeta,boolean overloaded){
  boolean contextual=cmdMeta.usableWithScope(currResource);
  if (showAll) {
    if (!cmdMeta.isDefault()) {
      listData.add(cmdMeta.getPluginMetadata().getName() + ""String_Node_Str"" + cmdMeta.getName()+ (contextual ? ""String_Node_Str"" : ""String_Node_Str"")+ (overloaded ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 else {
      listData.add(cmdMeta.getName() + (contextual ? ""String_Node_Str"" : ""String_Node_Str"") + (overloaded ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (contextual) {
    listData.add(cmdMeta.getName());
  }
}","private static String render(List<String> listData,boolean showAll,Class currResource,CommandMetadata cmdMeta){
  boolean contextual=cmdMeta.usableWithScope(currResource);
  if (showAll) {
    if (!cmdMeta.isDefault()) {
      return (cmdMeta.getPluginMetadata().getName() + ""String_Node_Str"" + cmdMeta.getName()+ (contextual ? ""String_Node_Str"" : ""String_Node_Str""));
    }
 else {
      return (cmdMeta.getName() + (contextual ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (contextual) {
    return cmdMeta.getName();
  }
  return ""String_Node_Str"";
}",0.6746221161495625
151647,"@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean showAll,@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean list,@Option(description=""String_Node_Str"",defaultValue=""String_Node_Str"") String... path){
}","@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean showAll,@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean list,@Option(description=""String_Node_Str"",defaultValue=""String_Node_Str"") String... path){
  System.out.println(""String_Node_Str"");
}",0.9429763560500696
151648,"@Override public String format(int column,String value){
  if (column == 7 && value.endsWith(""String_Node_Str""))   return shell.renderColor(ShellColor.BLUE,value);
  return value;
}","@Override public String format(int column,String value){
  if (column == 7 && value.endsWith(""String_Node_Str"")) {
    return shell.renderColor(ShellColor.BLUE,value);
  }
 else {
    return value;
  }
}",0.9427083333333334
151649,"@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean showAll,@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean list,@Option(flagOnly=true,name=""String_Node_Str"",required=false) final boolean color,@Option(description=""String_Node_Str"",defaultValue=""String_Node_Str"") String... path){
  Map<String,List<String>> sortMap=new TreeMap<String,List<String>>();
  List<String> listBuild;
  List<String> coloredList=color ? new ArrayList<String>() : null;
  for (  String p : path) {
    Resource<?> resource=parsePathspec(factory,shell.getCurrentResource(),p);
    List<Resource<?>> childResources=resource.listResources();
    String el;
    File file;
    if (list) {
      int fileCount=0;
      boolean dir;
      for (      Resource<?> r : childResources) {
        sortMap.put(el=r.toString(),listBuild=new ArrayList<String>());
        file=(File)r.getUnderlyingResourceObject();
        dir=file.isDirectory();
        if (showAll || !el.startsWith(""String_Node_Str"")) {
          StringBuilder permissions=new StringBuilder(dir ? ""String_Node_Str"" : ""String_Node_Str"").append(file.canRead() ? 'r' : '-').append(file.canWrite() ? 'w' : '-').append(file.canExecute() ? 'x' : '-').append(""String_Node_Str"");
          listBuild.add(permissions.toString());
          listBuild.add(""String_Node_Str"");
          listBuild.add(""String_Node_Str"");
          listBuild.add(String.valueOf(file.length()));
          listBuild.addAll(Arrays.asList(getDateString(file.lastModified())));
          listBuild.add(el);
          if (!dir)           fileCount++;
        }
      }
      listBuild=new ArrayList<String>();
      for (      List<String> sublist : sortMap.values()) {
        listBuild.addAll(sublist);
      }
      shell.println(""String_Node_Str"" + fileCount);
      FormatCallback formatCallback=color ? new FormatCallback(){
        @Override public String format(        int column,        String value){
          if (column == 7 && value.endsWith(""String_Node_Str""))           return shell.renderColor(ShellColor.BLUE,value);
          return value;
        }
      }
 : null;
      printOutTables(listBuild,new boolean[]{false,false,false,true,false,false,true,false},shell,formatCallback);
    }
 else {
      listBuild=new ArrayList<String>();
      for (      Resource<?> r : childResources) {
        el=r.toString();
        if (showAll || !el.startsWith(""String_Node_Str"")) {
          if (color) {
            coloredList.add(shell.renderColor(((FileResource)r).getUnderlyingResourceObject().isDirectory() ? ShellColor.BLUE : ShellColor.NONE,el));
          }
          listBuild.add(el);
        }
      }
      printOutColumns(listBuild,coloredList,shell,false);
    }
  }
}","@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean showAll,@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) final boolean list,@Option(flagOnly=true,name=""String_Node_Str"",required=false) final boolean color,@Option(description=""String_Node_Str"",defaultValue=""String_Node_Str"") String... path){
  Map<String,List<String>> sortMap=new TreeMap<String,List<String>>();
  List<String> listBuild;
  List<String> coloredList=color ? new ArrayList<String>() : null;
  for (  String p : path) {
    Resource<?> resource=parsePathspec(factory,shell.getCurrentResource(),p);
    List<Resource<?>> childResources=resource.listResources();
    String el;
    File file;
    if (list) {
      int fileCount=0;
      boolean dir;
      for (      Resource<?> r : childResources) {
        sortMap.put(el=r.toString(),listBuild=new ArrayList<String>());
        file=(File)r.getUnderlyingResourceObject();
        dir=file.isDirectory();
        if (showAll || !el.startsWith(""String_Node_Str"")) {
          StringBuilder permissions=new StringBuilder(dir ? ""String_Node_Str"" : ""String_Node_Str"").append(file.canRead() ? 'r' : '-').append(file.canWrite() ? 'w' : '-').append(file.canExecute() ? 'x' : '-').append(""String_Node_Str"");
          listBuild.add(permissions.toString());
          listBuild.add(""String_Node_Str"");
          listBuild.add(""String_Node_Str"");
          listBuild.add(String.valueOf(file.length()));
          listBuild.addAll(Arrays.asList(getDateString(file.lastModified())));
          listBuild.add(el);
          if (!dir)           fileCount++;
        }
      }
      listBuild=new ArrayList<String>();
      for (      List<String> sublist : sortMap.values()) {
        listBuild.addAll(sublist);
      }
      shell.println(""String_Node_Str"" + fileCount);
      FormatCallback formatCallback=color ? new FormatCallback(){
        @Override public String format(        int column,        String value){
          if (column == 7 && value.endsWith(""String_Node_Str"")) {
            return shell.renderColor(ShellColor.BLUE,value);
          }
 else {
            return value;
          }
        }
      }
 : null;
      printOutTables(listBuild,new boolean[]{false,false,false,true,false,false,true,false},shell,formatCallback);
    }
 else {
      listBuild=new ArrayList<String>();
      for (      Resource<?> r : childResources) {
        el=r.toString();
        if (showAll || !el.startsWith(""String_Node_Str"")) {
          if (color) {
            coloredList.add(shell.renderColor(((FileResource)r).getUnderlyingResourceObject().isDirectory() ? ShellColor.BLUE : ShellColor.NONE,el));
          }
          listBuild.add(el);
        }
      }
      printOutColumns(listBuild,coloredList,shell,false);
    }
  }
}",0.9933263083948016
151650,"@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData;
  Map<String,List<String>> listGroups=new TreeMap<String,List<String>>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      if (!listGroups.containsKey(pluginMetadata.getTopic())) {
        listGroups.put(pluginMetadata.getTopic(),listData=new ArrayList<String>());
      }
 else {
        listData=listGroups.get(pluginMetadata.getTopic());
      }
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        String name=render(showAll,currResource,commandMetadata);
        if (name.endsWith(""String_Node_Str"")) {
          listData.remove(name.substring(0,name.length() - 1));
        }
        if (!""String_Node_Str"".equals(name))         listData.add(name);
      }
      if (!listGroups.containsKey(pluginMetadata.getTopic())) {
        listGroups.put(pluginMetadata.getTopic(),listData);
      }
    }
  }
  GeneralUtils.OutputAttributes attr=null;
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    attr=GeneralUtils.calculateOutputAttributs(entry.getValue(),shell,attr);
  }
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    shell.println();
    shell.println(ShellColor.BLUE,""String_Node_Str"" + entry.getKey().toUpperCase() + ""String_Node_Str"");
    printOutColumns(entry.getValue(),null,ShellColor.BOLD,shell,attr,true);
  }
  shell.println();
  if (showAll)   shell.println(""String_Node_Str"");
 else   shell.println(""String_Node_Str"");
}","@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData;
  Map<String,List<String>> listGroups=new TreeMap<String,List<String>>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      if (!listGroups.containsKey(pluginMetadata.getTopic())) {
        listGroups.put(pluginMetadata.getTopic(),listData=new ArrayList<String>());
      }
 else {
        listData=listGroups.get(pluginMetadata.getTopic());
      }
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        String name=render(showAll,currResource,commandMetadata);
        if (name.endsWith(""String_Node_Str"")) {
          listData.remove(name.substring(0,name.length() - 1));
        }
        listData.remove(name);
        if (!""String_Node_Str"".equals(name))         listData.add(name);
      }
      if (!listGroups.containsKey(pluginMetadata.getTopic())) {
        listGroups.put(pluginMetadata.getTopic(),listData);
      }
    }
  }
  GeneralUtils.OutputAttributes attr=null;
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    attr=GeneralUtils.calculateOutputAttributs(entry.getValue(),shell,attr);
  }
  for (  Map.Entry<String,List<String>> entry : listGroups.entrySet()) {
    shell.println();
    shell.println(ShellColor.BLUE,""String_Node_Str"" + entry.getKey().toUpperCase() + ""String_Node_Str"");
    printOutColumns(entry.getValue(),null,ShellColor.BOLD,shell,attr,true);
  }
  shell.println();
  if (showAll)   shell.println(""String_Node_Str"");
 else   shell.println(""String_Node_Str"");
}",0.9911301859799714
151651,"@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData=new ArrayList<String>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        String name=render(listData,showAll,currResource,commandMetadata);
        if (name.endsWith(""String_Node_Str"")) {
          listData.remove(name.substring(0,name.length() - 1));
        }
        listData.add(name);
      }
    }
  }
  if (showAll)   shell.println(""String_Node_Str"");
  printOutColumns(listData,shell,true);
}","@DefaultCommand public void listCommands(@Option(name=""String_Node_Str"",shortName=""String_Node_Str"",flagOnly=true) boolean showAll){
  List<String> listData=new ArrayList<String>();
  Class currResource=shell.getCurrentResource().getClass();
  for (  List<PluginMetadata> lpm : registry.getPlugins().values()) {
    for (    PluginMetadata pluginMetadata : lpm) {
      for (      CommandMetadata commandMetadata : pluginMetadata.getAllCommands()) {
        String name=render(listData,showAll,currResource,commandMetadata);
        if (name.endsWith(""String_Node_Str"")) {
          listData.remove(name.substring(0,name.length() - 1));
        }
        if (!""String_Node_Str"".equals(name))         listData.add(name);
      }
    }
  }
  if (showAll)   shell.println(""String_Node_Str"");
  printOutColumns(listData,shell,true);
}",0.9721362229102168
151652,"public PathspecParser(final ResourceFactory factory,final Resource<?> res,final String path){
  this.factory=factory;
  this.res=res;
  this.length=(this.path=path).length();
}","public PathspecParser(final ResourceFactory factory,final Resource<?> res,final String path){
  this.factory=factory;
  this.res=res;
  this.path=path;
  this.length=path.length();
}",0.905027932960894
151653,"private String capture(){
  int start=cursor;
  if (path.charAt(cursor) == '/') {
    cursor++;
  }
  while ((cursor != length) && (path.charAt(cursor) != '/')) {
    cursor++;
  }
  return path.substring(start,cursor);
}","private String capture(){
  int start=cursor;
  if (path.charAt(cursor) == '/') {
    cursor++;
  }
  while ((cursor < length) && (path.charAt(cursor) != '/')) {
    cursor++;
  }
  return path.substring(start,cursor);
}",0.9931972789115646
151654,"public Resource<?> parse(){
  Resource<?> r=res;
  String tk;
  if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return new DirectoryResource(factory,homeDir);
    }
 else {
      path=path.substring(1);
      r=new DirectoryResource(factory,homeDir);
    }
  }
  while (cursor < length) {
switch (path.charAt(cursor++)) {
case '.':
      if (read() == '.') {
        Resource<?> parent=r.getParent();
        if (parent == null) {
          return r;
        }
        r=parent;
      }
    break;
default :
  if (read() == '.') {
    continue;
  }
boolean first=--cursor == 0;
tk=capture();
if (tk.startsWith(""String_Node_Str"")) {
if (first) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return r;
}","public Resource<?> parse(){
  Resource<?> r=res;
  String tk;
  if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return new DirectoryResource(factory,homeDir);
    }
 else {
      cursor++;
      r=new DirectoryResource(factory,homeDir);
    }
  }
  while (cursor < length) {
switch (path.charAt(cursor++)) {
case '.':
      if (read() == '.') {
        Resource<?> parent=r.getParent();
        if (parent == null) {
          return r;
        }
        r=parent;
      }
    break;
default :
  if (read() == '.') {
    continue;
  }
boolean first=--cursor == 0;
tk=capture();
if (tk.startsWith(""String_Node_Str"")) {
if (first) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource<?> child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return r;
}",0.9848484848484848
151655,"void init(@Observes final Startup event,final PluginCommandCompleter pluginCompleter) throws Exception {
  log.info(""String_Node_Str"");
  BooleanConverter booleanConverter=new BooleanConverter();
  DataConversion.addConversionHandler(boolean.class,booleanConverter);
  DataConversion.addConversionHandler(Boolean.class,booleanConverter);
  DataConversion.addConversionHandler(File.class,new FileConverter());
  initStreams();
  initCompleters(pluginCompleter);
  initParameters();
  printWelcomeBanner();
  postStartup.fire(new PostStartup());
}","void init(@Observes final Startup event,final PluginCommandCompleter pluginCompleter) throws Exception {
  log.info(""String_Node_Str"");
  BooleanConverter booleanConverter=new BooleanConverter();
  addConversionHandler(boolean.class,booleanConverter);
  addConversionHandler(Boolean.class,booleanConverter);
  addConversionHandler(File.class,new FileConverter());
  initStreams();
  initCompleters(pluginCompleter);
  initParameters();
  printWelcomeBanner();
  postStartup.fire(new PostStartup());
}",0.9569377990430622
151656,"public static int firstWhitespace(String str){
  int len=str.length();
  for (int i=0; i < len; i++) {
switch (str.charAt(i)) {
case '\t':
case ' ':
      return i;
  }
}
return -1;
}","public static int firstWhitespace(String str){
  int len=str.length();
  for (int i=0; i < len; i++) {
switch (str.charAt(i)) {
case '\t':
case ' ':
      return i;
  }
}
return str.length();
}",0.9627659574468084
151657,"public Resource<?> parse(){
  Resource r=res;
  String tk;
  if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return new DirectoryResource(factory,homeDir);
    }
 else {
      path=path.substring(1);
      r=new DirectoryResource(factory,homeDir);
    }
  }
  while (cursor < length) {
switch (path.charAt(cursor++)) {
case '.':
      if (read() == '.') {
        Resource parent=r.getParent();
        if (parent == null)         return r;
        r=parent;
      }
    break;
default :
  if (read() == '.')   continue;
cursor--;
tk=capture();
if (tk.startsWith(""String_Node_Str"")) {
if (res == r) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return r;
}","public Resource<?> parse(){
  Resource r=res;
  String tk;
  if (path.startsWith(""String_Node_Str"")) {
    File homeDir=new File(System.getProperty(""String_Node_Str"")).getAbsoluteFile();
    if (path.length() == 1) {
      return new DirectoryResource(factory,homeDir);
    }
 else {
      path=path.substring(1);
      r=new DirectoryResource(factory,homeDir);
    }
  }
  while (cursor < length) {
switch (path.charAt(cursor++)) {
case '.':
      if (read() == '.') {
        Resource parent=r.getParent();
        if (parent == null)         return r;
        r=parent;
      }
    break;
default :
  if (read() == '.')   continue;
boolean first=--cursor == 0;
tk=capture();
if (tk.startsWith(""String_Node_Str"")) {
if (first) {
r=factory.getResourceFrom(new File(tk));
cursor++;
continue;
}
 else {
tk=tk.substring(1);
}
}
Resource child=r.getChild(tk);
if (child == null) {
throw new RuntimeException(""String_Node_Str"" + child);
}
r=child;
break;
}
}
return r;
}",0.977035490605428
151658,"@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) boolean showAll){
  Resource<?> resource=shell.getCurrentResource();
  int width=shell.getWidth();
  List<Resource<?>> childResources=resource.listResources(resourceFactory);
  List<String> listData=new LinkedList<String>();
  int maxLength=0;
  String el;
  for (  Resource r : childResources) {
    el=r.toString();
    if (showAll || !el.startsWith(""String_Node_Str""))     listData.add(el);
    if (el.length() > maxLength)     maxLength=el.length();
  }
  int cols=width / (maxLength + 4);
  int colSize=width / cols;
  if (cols == 0) {
    colSize=width;
    cols=1;
  }
  int i=0;
  for (  String s : listData) {
    shell.print(s);
    shell.print(pad(colSize - s.length()));
    if (++i == cols) {
      shell.println();
      i=0;
    }
  }
  shell.println();
}","@DefaultCommand public void run(@Option(flagOnly=true,name=""String_Node_Str"",shortName=""String_Node_Str"",required=false) boolean showAll){
  Resource<?> resource=shell.getCurrentResource();
  int width=shell.getWidth();
  List<Resource<?>> childResources=resource.listResources(resourceFactory);
  List<String> listData=new LinkedList<String>();
  int maxLength=0;
  String el;
  for (  Resource r : childResources) {
    el=r.toString();
    if (showAll || !el.startsWith(""String_Node_Str"")) {
      listData.add(el);
      if (el.length() > maxLength)       maxLength=el.length();
    }
  }
  int cols=width / (maxLength + 4);
  int colSize=width / cols;
  if (cols == 0) {
    colSize=width;
    cols=1;
  }
  int i=0;
  for (  String s : listData) {
    shell.print(s);
    shell.print(pad(colSize - s.length()));
    if (++i == cols) {
      shell.println();
      i=0;
    }
  }
  shell.println();
}",0.9922048997772828
151659,"@Override public JavaClass getTestJavaClass(final String relativePath) throws FileNotFoundException {
  try {
    return JavaParser.parse(getTestSourceFile(relativePath));
  }
 catch (  FileNotFoundException e) {
    return getTestJavaClass(getBasePackageFile().getAbsolutePath() + File.separator + Packages.toFileSyntax(relativePath)+ ""String_Node_Str"");
  }
}","@Override public JavaClass getTestJavaClass(final String relativePath) throws FileNotFoundException {
  File target=getTestSourceFile(relativePath);
  return JavaParser.parse(target);
}",0.6043956043956044
151660,"@Override public File getSourceFile(final String relativePath){
  return new File(getSourceFolder() + File.separator + relativePath).getAbsoluteFile();
}","@Override public File getSourceFile(final String relativePath){
  File target=new File(getSourceFolder() + File.separator + relativePath).getAbsoluteFile();
  return target;
}",0.9085365853658536
151661,"@Override public JavaClass getJavaClass(final String relativePath) throws FileNotFoundException {
  try {
    return JavaParser.parse(getSourceFile(relativePath));
  }
 catch (  FileNotFoundException e) {
    return getJavaClass(getBasePackageFile().getAbsolutePath() + File.separator + Packages.toFileSyntax(relativePath)+ ""String_Node_Str"");
  }
}","@Override public JavaClass getJavaClass(final String relativePath) throws FileNotFoundException {
  File target=getSourceFile(relativePath);
  return JavaParser.parse(target);
}",0.596958174904943
151662,"@Override @SuppressWarnings(""String_Node_Str"") public <F extends Facet>F getFacet(final Class<F> type){
  Facet result=null;
  for (  Facet facet : installedFacets) {
    if ((facet != null) && type.isAssignableFrom(facet.getClass())) {
      result=facet;
    }
  }
  if (result == null) {
    throw new FacetNotFoundException(""String_Node_Str"" + type.getName() + ""String_Node_Str"");
  }
  return (F)result;
}","@Override @SuppressWarnings(""String_Node_Str"") public <F extends Facet>F getFacet(final Class<F> type){
  Facet result=null;
  for (  Facet facet : installedFacets) {
    if ((facet != null) && type.isAssignableFrom(facet.getClass())) {
      result=facet;
      break;
    }
  }
  if (result == null) {
    throw new FacetNotFoundException(""String_Node_Str"" + type.getName() + ""String_Node_Str"");
  }
  return (F)result;
}",0.9843937575030012
151663,"@DefaultCommand public void install(@Option(required=true,description=""String_Node_Str"") final String pluginName){
  PluginMetadata meta=registry.getPlugins().get(pluginName);
  if (meta != null) {
    Plugin plugin=registry.instanceOf(meta);
    if (plugin instanceof InstallablePlugin) {
      InstallablePlugin installable=(InstallablePlugin)plugin;
      if (!installable.isInstalled(project)) {
        List<PackagingType> types=installable.getCompatiblePackagingTypes();
        PackagingType packaging=project.getFacet(PackagingFacet.class).getPackagingType();
        if (!types.contains(packaging)) {
          if (shell.promptBoolean(""String_Node_Str"" + meta.getName() + ""String_Node_Str""+ types+ ""String_Node_Str""+ packaging+ ""String_Node_Str"")) {
            PackagingType type=shell.promptChoiceTyped(""String_Node_Str"",types);
            project.getFacet(PackagingFacet.class).setPackagingType(type);
            shell.println(""String_Node_Str"" + type + ""String_Node_Str"");
          }
 else {
            abort();
            return;
          }
        }
        installable.install(project);
      }
      if (installable.isInstalled(project)) {
        shell.println(""String_Node_Str"");
      }
 else {
        shell.println(""String_Node_Str"");
      }
    }
 else {
      shell.println(""String_Node_Str"" + pluginName + ""String_Node_Str"");
    }
  }
 else {
    shell.println(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
}","@DefaultCommand public void install(@Option(required=true,description=""String_Node_Str"") final String pluginName){
  PluginMetadata meta=registry.getPlugins().get(pluginName);
  if (meta != null) {
    Plugin plugin=registry.instanceOf(meta);
    if (plugin instanceof InstallablePlugin) {
      InstallablePlugin installable=(InstallablePlugin)plugin;
      if (!installable.isInstalled(project)) {
        List<PackagingType> types=installable.getCompatiblePackagingTypes();
        PackagingType packaging=project.getFacet(PackagingFacet.class).getPackagingType();
        if (!types.contains(packaging)) {
          if (types.size() == 1) {
            if (shell.promptBoolean(""String_Node_Str"" + meta.getName() + ""String_Node_Str""+ types+ ""String_Node_Str""+ packaging+ ""String_Node_Str""+ types+ ""String_Node_Str"")) {
              project.getFacet(PackagingFacet.class).setPackagingType(types.get(0));
              shell.println(""String_Node_Str"" + types + ""String_Node_Str"");
            }
 else {
              abort();
              return;
            }
          }
 else           if (types.size() > 1) {
            if (shell.promptBoolean(""String_Node_Str"" + meta.getName() + ""String_Node_Str""+ types+ ""String_Node_Str""+ packaging+ ""String_Node_Str"")) {
              PackagingType type=shell.promptChoiceTyped(""String_Node_Str"",types);
              project.getFacet(PackagingFacet.class).setPackagingType(type);
              shell.println(""String_Node_Str"" + type + ""String_Node_Str"");
            }
 else {
              abort();
              return;
            }
          }
        }
        installable.install(project);
      }
      if (installable.isInstalled(project)) {
        shell.println(""String_Node_Str"");
      }
 else {
        shell.println(""String_Node_Str"");
      }
    }
 else {
      shell.println(""String_Node_Str"" + pluginName + ""String_Node_Str"");
    }
  }
 else {
    shell.println(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  }
}",0.8446771378708552
151664,"@Override public void addDependency(final Dependency dep){
  bootstrapMaven();
  if (!hasDependency(dep)) {
    Model pom=getPOM();
    List<Dependency> dependencies=pom.getDependencies();
    dependencies.add(dep);
    setPOM(pom);
  }
}","@Override public void addDependency(final Dependency dep){
  bootstrapMaven();
  if (!hasDependency(dep)) {
    Model pom=getPOM();
    List<Dependency> dependencies=pom.getDependencies();
    dependencies.add(dep);
    setPOM(pom);
  }
  invalidateBuildingResult();
}",0.9407114624505928
151665,"@Override public void removeDependency(final Dependency dep){
  bootstrapMaven();
  Model pom=getPOM();
  List<Dependency> dependencies=pom.getDependencies();
  List<Dependency> toBeRemoved=new ArrayList<Dependency>();
  for (  Dependency dependency : dependencies) {
    if (areEquivalent(dependency,dep)) {
      toBeRemoved.add(dependency);
    }
  }
  dependencies.removeAll(toBeRemoved);
  setPOM(pom);
}","@Override public void removeDependency(final Dependency dep){
  bootstrapMaven();
  Model pom=getPOM();
  List<Dependency> dependencies=pom.getDependencies();
  List<Dependency> toBeRemoved=new ArrayList<Dependency>();
  for (  Dependency dependency : dependencies) {
    if (areEquivalent(dependency,dep)) {
      toBeRemoved.add(dependency);
    }
  }
  dependencies.removeAll(toBeRemoved);
  setPOM(pom);
  invalidateBuildingResult();
}",0.964622641509434
151666,"@Override public ProjectBuildingResult getProjectBuildingResult(){
  bootstrapMaven();
  try {
    ProjectBuildingResult buildingResult=builder.build(getPOMFile(),request);
    return buildingResult;
  }
 catch (  ProjectBuildingException e) {
    throw new ProjectModelException(e);
  }
}","@Override public ProjectBuildingResult getProjectBuildingResult(){
  bootstrapMaven();
  try {
    if (this.buildingResult == null) {
      buildingResult=builder.build(getPOMFile(),request);
    }
    return buildingResult;
  }
 catch (  ProjectBuildingException e) {
    throw new ProjectModelException(e);
  }
}",0.8888888888888888
151667,"public Project createProject(final File targetDir,final Class<? extends Facet>... facetTypes){
  Project project=new ProjectImpl(targetDir);
  for (  Class<? extends Facet> type : facetTypes) {
    installSingleFacet(project,type);
  }
  return project;
}","public Project createProject(final File targetDir,final Class<? extends Facet>... facetTypes){
  Project project=new ProjectImpl(targetDir);
  for (  Class<? extends Facet> type : facetTypes) {
    installSingleFacet(project,type);
  }
  registerFacets(project);
  return project;
}",0.9497206703910616
151668,"private void init(final char[] source){
  document=new Document(new String(source));
  ASTParser parser=ASTParser.newParser(AST.JLS3);
  parser.setSource(document.get().toCharArray());
  parser.setResolveBindings(true);
  parser.setKind(ASTParser.K_COMPILATION_UNIT);
  unit=(CompilationUnit)parser.createAST(null);
  unit.recordModifications();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void init(final char[] source){
  document=new Document(new String(source));
  ASTParser parser=ASTParser.newParser(AST.JLS3);
  parser.setSource(document.get().toCharArray());
  Map options=JavaCore.getOptions();
  options.put(CompilerOptions.OPTION_Source,CompilerOptions.VERSION_1_5);
  parser.setCompilerOptions(options);
  parser.setResolveBindings(true);
  parser.setKind(ASTParser.K_COMPILATION_UNIT);
  unit=(CompilationUnit)parser.createAST(null);
  unit.recordModifications();
}",0.7711111111111111
151669,"@Override public String toString(){
  return document.get();
}","@Override public String toString(){
  return unit.toString();
}",0.88
151670,"@Test public void testSetType() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setType(FieldTest.class);
  field.applyChanges();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(FieldTest.class.getSimpleName(),field.getType());
}","@Test public void testSetType() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setType(FieldTest.class);
  field.getOrigin();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(FieldTest.class.getSimpleName(),field.getType());
}",0.9630931458699472
151671,"@Test public void testAddFieldInitializerString() throws Exception {
  javaClass.addField(""String_Node_Str"").setStringInitializer(""String_Node_Str"");
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.applyChanges();
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}","@Test public void testAddFieldInitializerString() throws Exception {
  javaClass.addField(""String_Node_Str"").setStringInitializer(""String_Node_Str"");
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.getOrigin();
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}",0.9799809342230696
151672,"@Test public void testSetTypeString() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setType(""String_Node_Str"");
  field.applyChanges();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",field.getType());
}","@Test public void testSetTypeString() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setType(""String_Node_Str"");
  field.getOrigin();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",field.getType());
}",0.96229802513465
151673,"@Test public void testAddQualifiedFieldType() throws Exception {
  javaClass.addField().setName(""String_Node_Str"").setType(String.class.getName()).setStringInitializer(""String_Node_Str"").setPrivate();
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.applyChanges();
  assertEquals(String.class.getName(),fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}","@Test public void testAddQualifiedFieldType() throws Exception {
  javaClass.addField().setName(""String_Node_Str"").setType(String.class.getName()).setStringInitializer(""String_Node_Str"").setPrivate();
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.getOrigin();
  assertEquals(String.class.getName(),fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}",0.9819121447028424
151674,"@Test public void testSetName() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setName(""String_Node_Str"");
  field.applyChanges();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",field.getName());
}","@Test public void testSetName() throws Exception {
  assertEquals(""String_Node_Str"",field.getName());
  field.setName(""String_Node_Str"");
  field.getOrigin();
  assertTrue(field.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",field.getName());
}",0.9614678899082568
151675,"@Test public void testAddFieldInitializerLiteral() throws Exception {
  javaClass.addField(""String_Node_Str"").setLiteralInitializer(""String_Node_Str"").setPrivate();
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.applyChanges();
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}","@Test public void testAddFieldInitializerLiteral() throws Exception {
  javaClass.addField(""String_Node_Str"").setLiteralInitializer(""String_Node_Str"").setPrivate();
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.getOrigin();
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
  assertEquals(""String_Node_Str"",fld.getStringInitializer());
  assertEquals(""String_Node_Str"",fld.toString().trim());
}",0.9805375347544022
151676,"@Test public void testAddField() throws Exception {
  javaClass.addField(""String_Node_Str"");
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.applyChanges();
  assertTrue(fld.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
}","@Test public void testAddField() throws Exception {
  javaClass.addField(""String_Node_Str"");
  Field fld=javaClass.getFields().get(javaClass.getFields().size() - 1);
  fld.getOrigin();
  assertTrue(fld.toString().contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",fld.getType());
  assertEquals(""String_Node_Str"",fld.getName());
  assertEquals(""String_Node_Str"",fld.getLiteralInitializer());
}",0.974169741697417
151677,"@Test public void testAddConstructorIngoresReturnTypeAndName() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setConstructor(true).setPrivate().setReturnType(String.class).setBody(""String_Node_Str"").applyChanges();
  Method method=javaClass.getMethods().get(javaClass.getMethods().size() - 1);
  assertEquals(3,javaClass.getMethods().size());
  assertTrue(method.isPrivate());
  assertTrue(method.isConstructor());
  assertNull(method.getReturnType());
  assertEquals(javaClass.getName(),method.getName());
  String body=method.getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testAddConstructorIngoresReturnTypeAndName() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setConstructor(true).setPrivate().setReturnType(String.class).setBody(""String_Node_Str"").getOrigin();
  Method method=javaClass.getMethods().get(javaClass.getMethods().size() - 1);
  assertEquals(3,javaClass.getMethods().size());
  assertTrue(method.isPrivate());
  assertTrue(method.isConstructor());
  assertNull(method.getReturnType());
  assertEquals(javaClass.getName(),method.getName());
  String body=method.getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9849462365591398
151678,"@Test public void testCannotAddDuplicateImport() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  assertFalse(javaClass.hasImport(List.class));
  javaClass.addImport(List.class).applyChanges();
  javaClass.addImport(List.class).applyChanges();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.hasImport(List.class));
}","@Test public void testCannotAddDuplicateImport() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  assertFalse(javaClass.hasImport(List.class));
  javaClass.addImport(List.class).getOrigin();
  javaClass.addImport(List.class).getOrigin();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.hasImport(List.class));
}",0.9415041782729804
151679,"@Test public void testAddImportStatic() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  javaClass.addImport(List.class).setStatic(true).applyChanges();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.getImports().get(1).isStatic());
}","@Test public void testAddImportStatic() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  javaClass.addImport(List.class).setStatic(true).getOrigin();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.getImports().get(1).isStatic());
}",0.9658886894075404
151680,"@Test public void testRemoveMethod() throws Exception {
  List<Method> methods=javaClass.getMethods();
  javaClass.removeMethod(methods.get(0)).applyChanges();
  methods=javaClass.getMethods();
  assertEquals(1,methods.size());
}","@Test public void testRemoveMethod() throws Exception {
  List<Method> methods=javaClass.getMethods();
  javaClass.removeMethod(methods.get(0)).getOrigin();
  methods=javaClass.getMethods();
  assertEquals(1,methods.size());
}",0.9582417582417584
151681,"@Test public void testHasImport() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  assertFalse(javaClass.hasImport(List.class));
  javaClass.addImport(List.class).applyChanges();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.hasImport(List.class));
}","@Test public void testHasImport() throws Exception {
  assertEquals(1,javaClass.getImports().size());
  assertFalse(javaClass.hasImport(List.class));
  javaClass.addImport(List.class).getOrigin();
  assertEquals(2,javaClass.getImports().size());
  assertTrue(javaClass.hasImport(List.class));
}",0.9678510998307952
151682,"@Test public void testAddMethodFromString() throws Exception {
  javaClass.addMethod(""String_Node_Str"").setPackagePrivate().applyChanges();
  List<Method> methods=javaClass.getMethods();
  assertEquals(3,methods.size());
  assertEquals(""String_Node_Str"",methods.get(2).getReturnType());
  assertEquals(""String_Node_Str"",methods.get(2).getName());
  String body=methods.get(2).getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testAddMethodFromString() throws Exception {
  javaClass.addMethod(""String_Node_Str"").setPackagePrivate().getOrigin();
  List<Method> methods=javaClass.getMethods();
  assertEquals(3,methods.size());
  assertEquals(""String_Node_Str"",methods.get(2).getReturnType());
  assertEquals(""String_Node_Str"",methods.get(2).getName());
  String body=methods.get(2).getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9799043062200956
151683,"@Test public void testAddMethod() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setReturnTypeVoid().setBody(""String_Node_Str"").applyChanges();
  List<Method> methods=javaClass.getMethods();
  assertEquals(3,methods.size());
  assertNull(methods.get(2).getReturnType());
}","@Test public void testAddMethod() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setReturnTypeVoid().setBody(""String_Node_Str"").getOrigin();
  List<Method> methods=javaClass.getMethods();
  assertEquals(3,methods.size());
  assertNull(methods.get(2).getReturnType());
}",0.9642248722316864
151684,"@Test public void testAddConstructor() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setConstructor(true).setProtected().setReturnType(String.class).setBody(""String_Node_Str"").applyChanges();
  Method method=javaClass.getMethods().get(javaClass.getMethods().size() - 1);
  assertEquals(3,javaClass.getMethods().size());
  assertEquals(javaClass.getName(),method.getName());
  assertTrue(method.isProtected());
  assertTrue(method.isConstructor());
  assertNull(method.getReturnType());
  String body=method.getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testAddConstructor() throws Exception {
  javaClass.addMethod().setName(""String_Node_Str"").setConstructor(true).setProtected().setReturnType(String.class).setBody(""String_Node_Str"").getOrigin();
  Method method=javaClass.getMethods().get(javaClass.getMethods().size() - 1);
  assertEquals(3,javaClass.getMethods().size());
  assertEquals(javaClass.getName(),method.getName());
  assertTrue(method.isProtected());
  assertTrue(method.isConstructor());
  assertNull(method.getReturnType());
  String body=method.getBody();
  assertEquals(""String_Node_Str"".replaceAll(""String_Node_Str"",""String_Node_Str""),body.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9845018450184502
151685,"private AnnotatedParameter<Object> addUniqueQualifier(final AnnotatedMethod<Object> method,final AnnotatedParameter<Object> param,final String identifier){
  final BusManaged qualifier=new BusManaged(){
    @Override public Class<? extends Annotation> annotationType(){
      return BusManaged.class;
    }
    @Override public String value(){
      return identifier;
    }
  }
;
  addQualifierToMap(method,param,qualifier);
  final Set<Annotation> annotations=new HashSet<Annotation>();
  annotations.addAll(param.getAnnotations());
  annotations.add(qualifier);
  return new AnnotatedParameter<Object>(){
    @Override @SuppressWarnings(""String_Node_Str"") public <T extends Annotation>T getAnnotation(    final Class<T> clazz){
      if (BusManaged.class.isAssignableFrom(clazz)) {
        return (T)qualifier;
      }
      return param.getAnnotation(clazz);
    }
    @Override public Set<Annotation> getAnnotations(){
      return annotations;
    }
    @Override public Type getBaseType(){
      return param.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return param.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> clazz){
      if (BusManaged.class.isAssignableFrom(clazz)) {
        return true;
      }
      return param.isAnnotationPresent(clazz);
    }
    @Override public AnnotatedCallable<Object> getDeclaringCallable(){
      return param.getDeclaringCallable();
    }
    @Override public int getPosition(){
      return param.getPosition();
    }
  }
;
}","private AnnotatedParameter addUniqueQualifier(final AnnotatedMethod method,final AnnotatedParameter param,final String identifier){
  final BusManaged qualifier=new BusManaged(){
    @Override public Class<? extends Annotation> annotationType(){
      return BusManaged.class;
    }
    @Override public String value(){
      return identifier;
    }
  }
;
  addQualifierToMap(method,param,qualifier);
  final Set<Annotation> annotations=new HashSet<Annotation>();
  annotations.addAll(param.getAnnotations());
  annotations.add(qualifier);
  return new AnnotatedParameter<Object>(){
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){
      if (BusManaged.class.isAssignableFrom(clazz)) {
        return (T)qualifier;
      }
      return param.getAnnotation(clazz);
    }
    @Override public Set<Annotation> getAnnotations(){
      return annotations;
    }
    @Override public Type getBaseType(){
      return param.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return param.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> clazz){
      if (BusManaged.class.isAssignableFrom(clazz)) {
        return true;
      }
      return param.isAnnotationPresent(clazz);
    }
    @Override public AnnotatedCallable<Object> getDeclaringCallable(){
      return param.getDeclaringCallable();
    }
    @Override public int getPosition(){
      return param.getPosition();
    }
  }
;
}",0.9801496908558412
151686,"public void scan(@Observes final ProcessAnnotatedType<Object> event){
  AnnotatedType<Object> originalType=event.getAnnotatedType();
  AnnotatedType<Object> newType=originalType;
  List<AnnotatedMethod<Object>> obsoleteMethods=new ArrayList<AnnotatedMethod<Object>>();
  List<AnnotatedMethod<Object>> replacementMethods=new ArrayList<AnnotatedMethod<Object>>();
  for (  AnnotatedMethod<Object> method : originalType.getMethods()) {
    for (    AnnotatedParameter<Object> param : method.getParameters()) {
      if (param.isAnnotationPresent(Observes.class)) {
        if (param.getTypeClosure().contains(BaseEvent.class)) {
          replacementMethods.add(qualifyObservedEvent(method,param));
          obsoleteMethods.add(method);
        }
      }
    }
  }
  newType=removeMethodsFromType(originalType,obsoleteMethods);
  newType=addReplacementMethodsToType(newType,replacementMethods);
  event.setAnnotatedType(newType);
}","public void scan(@Observes final ProcessAnnotatedType<Object> event){
  AnnotatedType<Object> originalType=event.getAnnotatedType();
  AnnotatedType<Object> newType=originalType;
  List<AnnotatedMethod> obsoleteMethods=new ArrayList<AnnotatedMethod>();
  List<AnnotatedMethod> replacementMethods=new ArrayList<AnnotatedMethod>();
  for (  AnnotatedMethod<?> method : originalType.getMethods()) {
    for (    AnnotatedParameter<?> param : method.getParameters()) {
      if (param.isAnnotationPresent(Observes.class)) {
        if (param.getTypeClosure().contains(BaseEvent.class)) {
          replacementMethods.add(qualifyObservedEvent(method,param));
          obsoleteMethods.add(method);
        }
      }
    }
  }
  newType=removeMethodsFromType(originalType,obsoleteMethods);
  newType=addReplacementMethodsToType(newType,replacementMethods);
  event.setAnnotatedType(newType);
}",0.7742290748898678
151687,"private void addQualifierToMap(final AnnotatedMethod<Object> annotatedMethod,final AnnotatedParameter<Object> param,final BusManaged qualifier){
  Method method=annotatedMethod.getJavaMember();
  Class<?> clazz=method.getParameterTypes()[param.getPosition()];
  List<BusManaged> qualifiers=eventQualifierMap.get(clazz);
  if (qualifiers == null) {
    qualifiers=new ArrayList<BusManaged>();
  }
  qualifiers.add(qualifier);
  eventQualifierMap.put(clazz,qualifiers);
}","private void addQualifierToMap(final AnnotatedMethod annotatedMethod,final AnnotatedParameter param,final BusManaged qualifier){
  Method method=annotatedMethod.getJavaMember();
  Class<?> clazz=method.getParameterTypes()[param.getPosition()];
  List<BusManaged> qualifiers=eventQualifierMap.get(clazz);
  if (qualifiers == null) {
    qualifiers=new ArrayList<BusManaged>();
  }
  qualifiers.add(qualifier);
  eventQualifierMap.put(clazz,qualifiers);
}",0.982646420824295
151688,"public Set<AnnotatedConstructor<Object>> getConstructors(){
  return type.getConstructors();
}","@Override public Set<AnnotatedConstructor> getConstructors(){
  return type.getConstructors();
}",0.9052631578947368
151689,"private AnnotatedType<Object> removeMethodsFromType(final AnnotatedType<Object> type,final List<AnnotatedMethod<Object>> targetedMethods){
  final Set<AnnotatedMethod<? super Object>> methods=new HashSet<AnnotatedMethod<? super Object>>();
  methods.addAll(type.getMethods());
  methods.removeAll(targetedMethods);
  return new AnnotatedType<Object>(){
    public Class<Object> getJavaClass(){
      return type.getJavaClass();
    }
    public Set<AnnotatedConstructor<Object>> getConstructors(){
      return type.getConstructors();
    }
    public Set<AnnotatedMethod<? super Object>> getMethods(){
      return methods;
    }
    public Set<AnnotatedField<? super Object>> getFields(){
      return type.getFields();
    }
    public Type getBaseType(){
      return type.getBaseType();
    }
    public Set<Type> getTypeClosure(){
      return type.getTypeClosure();
    }
    public <T extends Annotation>T getAnnotation(    final Class<T> annotationType){
      return type.getAnnotation(annotationType);
    }
    public Set<Annotation> getAnnotations(){
      return type.getAnnotations();
    }
    public boolean isAnnotationPresent(    final Class<? extends Annotation> annotationType){
      return type.isAnnotationPresent(annotationType);
    }
  }
;
}","private AnnotatedType<Object> removeMethodsFromType(final AnnotatedType type,final List<AnnotatedMethod> targetedMethods){
  final Set<AnnotatedMethod> methods=new HashSet<AnnotatedMethod>();
  methods.addAll(type.getMethods());
  methods.removeAll(targetedMethods);
  return new AnnotatedType(){
    @Override public Class getJavaClass(){
      return type.getJavaClass();
    }
    @Override public Set<AnnotatedConstructor> getConstructors(){
      return type.getConstructors();
    }
    @Override public Set<AnnotatedMethod> getMethods(){
      return methods;
    }
    @Override public Set<AnnotatedField> getFields(){
      return type.getFields();
    }
    @Override public Type getBaseType(){
      return type.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return type.getTypeClosure();
    }
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> annotationType){
      return type.getAnnotation(annotationType);
    }
    @Override public Set<Annotation> getAnnotations(){
      return type.getAnnotations();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> annotationType){
      return type.isAnnotationPresent(annotationType);
    }
  }
;
}",0.119746233148295
151690,"public Class<Object> getJavaClass(){
  return type.getJavaClass();
}","@Override public Class getJavaClass(){
  return type.getJavaClass();
}",0.8695652173913043
151691,"private AnnotatedMethod<Object> qualifyObservedEvent(final AnnotatedMethod<Object> method,final AnnotatedParameter<Object> param){
  final List<AnnotatedParameter<Object>> parameters=new ArrayList<AnnotatedParameter<Object>>();
  parameters.addAll(method.getParameters());
  parameters.remove(param);
  parameters.add(addUniqueQualifier(method,param,method.toString()));
  return new AnnotatedMethod<Object>(){
    @Override public List<AnnotatedParameter<Object>> getParameters(){
      return parameters;
    }
    @Override public AnnotatedType<Object> getDeclaringType(){
      return method.getDeclaringType();
    }
    @Override public boolean isStatic(){
      return method.isStatic();
    }
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> annotation){
      return method.getAnnotation(annotation);
    }
    @Override public Set<Annotation> getAnnotations(){
      return method.getAnnotations();
    }
    @Override public Type getBaseType(){
      return method.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return method.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> annotation){
      return method.isAnnotationPresent(annotation);
    }
    @Override public Method getJavaMember(){
      return method.getJavaMember();
    }
  }
;
}","private AnnotatedMethod<Object> qualifyObservedEvent(final AnnotatedMethod method,final AnnotatedParameter param){
  final List<AnnotatedParameter> parameters=new ArrayList<AnnotatedParameter>();
  parameters.addAll(method.getParameters());
  parameters.remove(param);
  parameters.add(addUniqueQualifier(method,param,method.toString()));
  return new AnnotatedMethod(){
    @Override public List<AnnotatedParameter> getParameters(){
      return parameters;
    }
    @Override public AnnotatedType<Object> getDeclaringType(){
      return method.getDeclaringType();
    }
    @Override public boolean isStatic(){
      return method.isStatic();
    }
    @Override public <T extends Annotation>T getAnnotation(    final Class<T> annotation){
      return method.getAnnotation(annotation);
    }
    @Override public Set<Annotation> getAnnotations(){
      return method.getAnnotations();
    }
    @Override public Type getBaseType(){
      return method.getBaseType();
    }
    @Override public Set<Type> getTypeClosure(){
      return method.getTypeClosure();
    }
    @Override public boolean isAnnotationPresent(    final Class<? extends Annotation> annotation){
      return method.isAnnotationPresent(annotation);
    }
    @Override public Method getJavaMember(){
      return method.getJavaMember();
    }
  }
;
}",0.9666419570051892
151692,"private AnnotatedType<Object> addReplacementMethodsToType(final AnnotatedType<Object> newType,final List<AnnotatedMethod<Object>> replacementMethods){
  newType.getMethods().addAll(replacementMethods);
  return newType;
}","private AnnotatedType<Object> addReplacementMethodsToType(final AnnotatedType newType,final List<AnnotatedMethod> replacementMethods){
  newType.getMethods().addAll(replacementMethods);
  return newType;
}",0.9624413145539906
151693,"public Set<AnnotatedField<? super Object>> getFields(){
  return type.getFields();
}","@Override public Set<AnnotatedField> getFields(){
  return type.getFields();
}",0.8395061728395061
151694,"@Override @SuppressWarnings(""String_Node_Str"") public <T extends Annotation>T getAnnotation(final Class<T> clazz){
  if (BusManaged.class.isAssignableFrom(clazz)) {
    return (T)qualifier;
  }
  return param.getAnnotation(clazz);
}","@Override public <T extends Annotation>T getAnnotation(final Class<T> clazz){
  if (BusManaged.class.isAssignableFrom(clazz)) {
    return (T)qualifier;
  }
  return param.getAnnotation(clazz);
}",0.9133489461358314
151695,"@Override public List<AnnotatedParameter<Object>> getParameters(){
  return parameters;
}","@Override public List<AnnotatedParameter> getParameters(){
  return parameters;
}",0.9529411764705882
151696,"public Set<AnnotatedMethod<? super Object>> getMethods(){
  return methods;
}","@Override public Set<AnnotatedMethod> getMethods(){
  return methods;
}",0.8243243243243243
151697,"public List<BusManaged> getEventQualifiers(final Class<? extends BaseEvent> class1){
  List<BusManaged> result=new ArrayList<BusManaged>();
  for (  Entry<Class<?>,List<BusManaged>> entry : eventQualifierMap.entrySet()) {
    Class<?> key=entry.getKey();
    List<BusManaged> value=entry.getValue();
    if (key.isAssignableFrom(class1)) {
      result=value;
    }
  }
  return result;
}","public List<BusManaged> getEventQualifiers(final Class<? extends BaseEvent> class1){
  List<BusManaged> result=new ArrayList<BusManaged>();
  for (  Entry<Class<?>,List<BusManaged>> entry : eventQualifierMap.entrySet()) {
    Class<?> key=entry.getKey();
    List<BusManaged> value=entry.getValue();
    if (key.isAssignableFrom(class1)) {
      result.addAll(value);
    }
  }
  return result;
}",0.9744897959183674
151698,"private void initProject(){
  writeVerbose(""String_Node_Str"" + parameters);
  String projectPath=""String_Node_Str"";
  if ((parameters != null) && !parameters.isEmpty()) {
    for (    String path : parameters) {
      if ((path != null) && !path.startsWith(""String_Node_Str"") && !path.startsWith(""String_Node_Str"")) {
        projectPath=path;
        break;
      }
    }
  }
  writeVerbose(""String_Node_Str"" + projectPath);
  File targetDirectory=new File(projectPath);
  if (targetDirectory.exists()) {
    currentProject=new MavenProject(new File(projectPath));
    if (currentProject.exists()) {
      prompt=currentProject.getPOM().getArtifactId() + ""String_Node_Str"";
      reader.setPrompt(prompt);
    }
  }
 else {
    write(""String_Node_Str"" + targetDirectory.getAbsolutePath() + ""String_Node_Str"");
    shutdown.fire(Shutdown.ERROR);
  }
}","private void initProject(){
  writeVerbose(""String_Node_Str"" + parameters);
  String projectPath=""String_Node_Str"";
  if ((parameters != null) && !parameters.isEmpty()) {
    for (    String path : parameters) {
      if ((path != null) && !path.startsWith(""String_Node_Str"") && !path.startsWith(""String_Node_Str"")) {
        projectPath=path;
        break;
      }
    }
  }
  File targetDirectory=new File(projectPath).getAbsoluteFile();
  writeVerbose(""String_Node_Str"" + targetDirectory.getAbsolutePath() + ""String_Node_Str"");
  if (targetDirectory.exists()) {
    currentProject=new MavenProject(targetDirectory);
    if (currentProject.exists()) {
      prompt=currentProject.getPOM().getArtifactId() + ""String_Node_Str"";
      reader.setPrompt(prompt);
    }
  }
 else {
    write(""String_Node_Str"" + targetDirectory.getAbsolutePath() + ""String_Node_Str"");
    shutdown.fire(Shutdown.ERROR);
  }
}",0.8895216400911162
151699,"@DefaultCommand public void listCommands(){
  for (  PluginMetadata pluginMetaData : registry.getPlugins().values()) {
    for (    CommandMetadata commandMetadata : pluginMetaData.getCommands()) {
      for (      String commandName : commandMetadata.getNames()) {
        shell.print(commandName);
        shell.print(""String_Node_Str"");
      }
    }
  }
  shell.println();
}","@DefaultCommand public void listCommands(){
  for (  PluginMetadata pluginMetaData : registry.getPlugins().values()) {
    for (    CommandMetadata commandMetadata : pluginMetaData.getCommands()) {
      shell.print(commandMetadata.getName());
      shell.print(""String_Node_Str"");
    }
  }
  shell.println();
}",0.7797101449275362
151700,"@Inject public ListCommandsPlugin(PluginRegistry registry,Shell shell){
  this.registry=registry;
  this.shell=shell;
}","@Inject public ListCommandsPlugin(final PluginRegistry registry,final Shell shell){
  this.registry=registry;
  this.shell=shell;
}",0.952
151701,"/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException {
  if (_schema.usesHeader()) {
    _readHeaderLine();
  }
  if (_schema.skipsFirstDataRow()) {
    _reader.skipLine();
  }
  _reader.skipLeadingComments();
  final boolean wrapAsArray=Feature.WRAP_AS_ARRAY.enabledIn(_formatFeatures);
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (wrapAsArray) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (wrapAsArray) {
    _parsingContext=_reader.childArrayContext(_parsingContext);
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}","/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException {
  _reader.skipLeadingComments();
  if (_schema.usesHeader()) {
    _readHeaderLine();
    _reader.skipLeadingComments();
  }
  if (_schema.skipsFirstDataRow()) {
    _reader.skipLine();
    _reader.skipLeadingComments();
  }
  final boolean wrapAsArray=Feature.WRAP_AS_ARRAY.enabledIn(_formatFeatures);
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (wrapAsArray) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (wrapAsArray) {
    _parsingContext=_reader.childArrayContext(_parsingContext);
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}",0.8092345078979344
151702,"@Override public double getDoubleValue() throws IOException, JsonParseException {
  return _reader.getDoubleValue();
}","@Override public double getDoubleValue() throws IOException {
  return _reader.getDoubleValue();
}",0.9074074074074074
151703,"@Override public int getTextOffset() throws IOException, JsonParseException {
  return 0;
}","@Override public int getTextOffset() throws IOException {
  return 0;
}",0.8765432098765432
151704,"@Override public long getLongValue() throws IOException, JsonParseException {
  return _reader.getLongValue();
}","@Override public long getLongValue() throws IOException {
  return _reader.getLongValue();
}",0.9019607843137256
151705,"@Override public BigInteger getBigIntegerValue() throws IOException, JsonParseException {
  return _reader.getBigIntegerValue();
}","@Override public BigInteger getBigIntegerValue() throws IOException {
  return _reader.getBigIntegerValue();
}",0.9166666666666666
151706,"@SuppressWarnings(""String_Node_Str"") @Override public byte[] getBinaryValue(Base64Variant variant) throws IOException, JsonParseException {
  if (_binaryValue == null) {
    if (_currToken != JsonToken.VALUE_STRING) {
      _reportError(""String_Node_Str"" + _currToken + ""String_Node_Str"");
    }
    ByteArrayBuilder builder=_getByteArrayBuilder();
    _decodeBase64(_currentValue,builder,variant);
    _binaryValue=builder.toByteArray();
  }
  return _binaryValue;
}","@SuppressWarnings(""String_Node_Str"") @Override public byte[] getBinaryValue(Base64Variant variant) throws IOException {
  if (_binaryValue == null) {
    if (_currToken != JsonToken.VALUE_STRING) {
      _reportError(""String_Node_Str"" + _currToken + ""String_Node_Str"");
    }
    ByteArrayBuilder builder=_getByteArrayBuilder();
    _decodeBase64(_currentValue,builder,variant);
    _binaryValue=builder.toByteArray();
  }
  return _binaryValue;
}",0.9781181619256016
151707,"@Override public String getText() throws IOException, JsonParseException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName;
  }
  return _currentValue;
}","@Override public String getText() throws IOException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName;
  }
  return _currentValue;
}",0.9386503067484664
151708,"protected JsonToken _handleRecordStart() throws IOException, JsonParseException {
  _columnIndex=0;
  if (_columnCount == 0) {
    _state=STATE_UNNAMED_VALUE;
    _parsingContext=_reader.childArrayContext(_parsingContext);
    return JsonToken.START_ARRAY;
  }
  _parsingContext=_reader.childObjectContext(_parsingContext);
  _state=STATE_NEXT_ENTRY;
  return JsonToken.START_OBJECT;
}","protected JsonToken _handleRecordStart() throws IOException {
  _columnIndex=0;
  if (_columnCount == 0) {
    _state=STATE_UNNAMED_VALUE;
    _parsingContext=_reader.childArrayContext(_parsingContext);
    return JsonToken.START_ARRAY;
  }
  _parsingContext=_reader.childObjectContext(_parsingContext);
  _state=STATE_NEXT_ENTRY;
  return JsonToken.START_OBJECT;
}",0.9733333333333334
151709,"@Override public int getTextLength() throws IOException, JsonParseException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName.length();
  }
  return _textBuffer.size();
}","@Override public int getTextLength() throws IOException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName.length();
  }
  return _textBuffer.size();
}",0.9444444444444444
151710,"protected JsonToken _handleNextEntry() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _currentName=null;
    if (_columnIndex == _columnCount) {
      next=next.trim();
      if (next.length() == 0) {
        return _handleNextEntry();
      }
    }
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ _columnCount+ ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}","protected JsonToken _handleNextEntry() throws IOException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _currentName=null;
    if (_columnIndex == _columnCount) {
      next=next.trim();
      if (next.length() == 0) {
        return _handleNextEntryExpectEOL();
      }
    }
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ _columnCount+ ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}",0.982850384387936
151711,"@Override public Number getNumberValue() throws IOException, JsonParseException {
  return _reader.getNumberValue();
}","@Override public Number getNumberValue() throws IOException {
  return _reader.getNumberValue();
}",0.9074074074074074
151712,"/** 
 * Method called to process the expected header line
 */
protected void _readHeaderLine() throws IOException, JsonParseException {
  if (_schema.size() > 0) {
    while (_reader.nextString() != null) {
    }
    return;
  }
  String name;
  CsvSchema.Builder builder=_schema.rebuild().clearColumns();
  while ((name=_reader.nextString()) != null) {
    name=name.trim();
    CsvSchema.Column prev=_schema.column(name);
    if (prev != null) {
      builder.addColumn(name,prev.getType());
    }
 else {
      builder.addColumn(name);
    }
  }
  CsvSchema newSchema=builder.build();
  int size=newSchema.size();
  if (size < 2) {
    String first=(size == 0) ? ""String_Node_Str"" : newSchema.column(0).getName().trim();
    if (first.length() == 0) {
      _reportError(""String_Node_Str"");
    }
  }
  setSchema(builder.build());
}","/** 
 * Method called to process the expected header line
 */
protected void _readHeaderLine() throws IOException {
  if (_schema.size() > 0) {
    while (_reader.nextString() != null) {
    }
    return;
  }
  String name;
  CsvSchema.Builder builder=_schema.rebuild().clearColumns();
  while ((name=_reader.nextString()) != null) {
    name=name.trim();
    CsvSchema.Column prev=_schema.column(name);
    if (prev != null) {
      builder.addColumn(name,prev.getType());
    }
 else {
      builder.addColumn(name);
    }
  }
  CsvSchema newSchema=builder.build();
  int size=newSchema.size();
  if (size < 2) {
    String first=(size == 0) ? ""String_Node_Str"" : newSchema.column(0).getName().trim();
    if (first.length() == 0) {
      _reportError(""String_Node_Str"");
    }
  }
  setSchema(builder.build());
}",0.987878787878788
151713,"@Override public int getIntValue() throws IOException, JsonParseException {
  return _reader.getIntValue();
}","@Override public int getIntValue() throws IOException {
  return _reader.getIntValue();
}",0.898989898989899
151714,"@Override public BigDecimal getDecimalValue() throws IOException, JsonParseException {
  return _reader.getDecimalValue();
}","@Override public BigDecimal getDecimalValue() throws IOException {
  return _reader.getDecimalValue();
}",0.912280701754386
151715,"@Override public char[] getTextCharacters() throws IOException, JsonParseException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName.toCharArray();
  }
  return _textBuffer.contentsAsArray();
}","@Override public char[] getTextCharacters() throws IOException {
  if (_currToken == JsonToken.FIELD_NAME) {
    return _currentName.toCharArray();
  }
  return _textBuffer.contentsAsArray();
}",0.9507389162561576
151716,"@Override public Object getEmbeddedObject() throws IOException, JsonParseException {
  return null;
}","@Override public Object getEmbeddedObject() throws IOException {
  return _binaryValue;
}",0.8315789473684211
151717,"/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException, JsonParseException {
  if (_schema.useHeader()) {
    _readHeaderLine();
  }
  if (_schema.skipFirstDataRow()) {
    _reader.skipLine();
  }
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (isEnabled(Feature.WRAP_AS_ARRAY)) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (isEnabled(Feature.WRAP_AS_ARRAY)) {
    _parsingContext=_reader.childArrayContext(_parsingContext);
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}","/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException {
  if (_schema.useHeader()) {
    _readHeaderLine();
  }
  if (_schema.skipFirstDataRow()) {
    _reader.skipLine();
  }
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (isEnabled(Feature.WRAP_AS_ARRAY)) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (isEnabled(Feature.WRAP_AS_ARRAY)) {
    _parsingContext=_reader.childArrayContext(_parsingContext);
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}",0.9862448418156808
151718,"@Override public float getFloatValue() throws IOException, JsonParseException {
  return _reader.getFloatValue();
}","@Override public float getFloatValue() throws IOException {
  return _reader.getFloatValue();
}",0.9047619047619048
151719,"protected JsonToken _handleNamedValue() throws IOException, JsonParseException {
  _state=STATE_NEXT_ENTRY;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}","protected JsonToken _handleNamedValue() throws IOException {
  _state=STATE_NEXT_ENTRY;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}",0.9333333333333332
151720,"protected JsonToken _handleUnnamedValue() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_ARRAY;
  }
  _currentValue=next;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}","protected JsonToken _handleUnnamedValue() throws IOException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_ARRAY;
  }
  _currentValue=next;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}",0.9753694581280788
151721,"@Override public NumberType getNumberType() throws IOException, JsonParseException {
  return _reader.getNumberType();
}","@Override public NumberType getNumberType() throws IOException {
  return _reader.getNumberType();
}",0.9090909090909092
151722,"/** 
 * @param lastSegmentEnd End offset in the currently active segment 
 * @param trimTrailingSpaces Whether trailing spaces should be trimmed or not
 */
public String finishAndReturn(int lastSegmentEnd,boolean trimTrailingSpaces){
  if (trimTrailingSpaces) {
    int ptr=lastSegmentEnd - 1;
    if (_currentSegment[ptr] <= 0x0020) {
      return _doTrim(ptr);
    }
  }
  _currentSize=lastSegmentEnd;
  return contentsAsString();
}","/** 
 * @param lastSegmentEnd End offset in the currently active segment,could be 0 in the case of first character is delimiter or end-of-line
 * @param trimTrailingSpaces Whether trailing spaces should be trimmed or not
 */
public String finishAndReturn(int lastSegmentEnd,boolean trimTrailingSpaces){
  if (trimTrailingSpaces) {
    int ptr=lastSegmentEnd - 1;
    if (ptr < 0 || _currentSegment[ptr] <= 0x0020) {
      return _doTrim(ptr);
    }
  }
  _currentSize=lastSegmentEnd;
  return contentsAsString();
}",0.9135021097046412
151723,"/** 
 * Helper method used to find a buffer to use, ideally one recycled earlier.
 */
private final char[] findBuffer(int needed){
  if (_allocator != null) {
    return _allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,needed);
  }
  return new char[Math.max(needed,MIN_SEGMENT_LEN)];
}","/** 
 * Helper method used to find a buffer to use, ideally one recycled earlier.
 */
private final char[] findBuffer(int needed){
  if (_allocator != null) {
    return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER,needed);
  }
  return new char[Math.max(needed,MIN_SEGMENT_LEN)];
}",0.9700996677740864
151724,"public void releaseBuffers(){
  if (_allocator == null) {
    reset();
  }
 else {
    if (_currentSegment != null) {
      reset();
      char[] buf=_currentSegment;
      _currentSegment=null;
      _allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,buf);
    }
  }
}","public void releaseBuffers(){
  if (_allocator == null) {
    reset();
  }
 else {
    if (_currentSegment != null) {
      reset();
      char[] buf=_currentSegment;
      _currentSegment=null;
      _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER,buf);
    }
  }
}",0.9683098591549296
151725,"protected CsvSchema _schemaFor(JavaType pojoType,LRUMap<JavaType,CsvSchema> schemas,boolean typed){
synchronized (schemas) {
    CsvSchema s=schemas.get(pojoType);
    if (s != null) {
      return s;
    }
  }
  BeanDescription beanDesc=getSerializationConfig().introspect(pojoType);
  CsvSchema.Builder builder=CsvSchema.builder();
  for (  BeanPropertyDefinition prop : beanDesc.findProperties()) {
    if (prop.couldSerialize()) {
      if (typed) {
        builder.addColumn(prop.getName(),_determineType(prop.getAccessor().getRawType()));
      }
 else {
        builder.addColumn(prop.getName());
      }
    }
  }
  CsvSchema result=builder.build();
synchronized (schemas) {
    schemas.put(pojoType,result);
  }
  return result;
}","protected CsvSchema _schemaFor(JavaType pojoType,LRUMap<JavaType,CsvSchema> schemas,boolean typed){
synchronized (schemas) {
    CsvSchema s=schemas.get(pojoType);
    if (s != null) {
      return s;
    }
  }
  BeanDescription beanDesc=getSerializationConfig().introspect(pojoType);
  CsvSchema.Builder builder=CsvSchema.builder();
  for (  BeanPropertyDefinition prop : beanDesc.findProperties()) {
    if (!prop.couldSerialize()) {
      continue;
    }
    if (typed) {
      builder.addColumn(prop.getName(),_determineType(prop.getAccessor().getRawType()));
    }
 else {
      builder.addColumn(prop.getName());
    }
  }
  CsvSchema result=builder.build();
synchronized (schemas) {
    schemas.put(pojoType,result);
  }
  return result;
}",0.9764309764309764
151726,"protected String _nextQuotedString() throws IOException, JsonParseException {
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int outPtr=0;
  final char[] inputBuffer=_inputBuffer;
  main_loop:   while (true) {
    int ptr=_inputPtr;
    if (ptr >= _inputEnd) {
      if (!loadMore()) {
        _owner._reportCsvError(""String_Node_Str"");
      }
      ptr=_inputPtr;
    }
    if (outPtr >= outBuf.length) {
      outBuf=_textBuffer.finishCurrentSegment();
      outPtr=0;
    }
    final int max=Math.min(_inputEnd,(ptr + (outBuf.length - outPtr)));
    inner_loop:     while (true) {
      char c=inputBuffer[ptr++];
      if (c <= _maxSpecialChar) {
        if (c == _quoteChar) {
          _inputPtr=ptr;
          break;
        }
        if (c == '\r' || c == '\n') {
          _inputPtr=ptr;
          _pendingLF=c;
          return _textBuffer.finishAndReturn(outPtr,false);
        }
        if (c == _escapeChar) {
          _inputPtr=ptr;
          c=_unescape();
          outBuf[outPtr++]=c;
          continue main_loop;
        }
      }
      outBuf[outPtr++]=c;
      if (ptr >= max) {
        _inputPtr=ptr;
        continue main_loop;
      }
      continue inner_loop;
    }
    if (_inputPtr < _inputEnd || loadMore()) {
      if (_inputBuffer[_inputPtr] == _quoteChar) {
        outBuf[outPtr++]=(char)_quoteChar;
        ++_inputPtr;
        continue main_loop;
      }
    }
    break;
  }
  String result=_textBuffer.finishAndReturn(outPtr,false);
  while (_inputPtr < _inputEnd || loadMore()) {
    int ch=_inputBuffer[_inputPtr++];
    if (ch == _separatorChar) {
      break;
    }
    if (ch <= INT_SPACE) {
      if (ch == INT_CR || ch == INT_LF) {
        _pendingLF=ch;
        break;
      }
      continue;
    }
    _owner._reportUnexpectedCsvChar(ch,""String_Node_Str"" + _getCharDesc(_quoteChar) + ""String_Node_Str"");
  }
  return result;
}","protected String _nextQuotedString() throws IOException, JsonParseException {
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int outPtr=0;
  final char[] inputBuffer=_inputBuffer;
  boolean checkLF=false;
  main_loop:   while (true) {
    int ptr=_inputPtr;
    if (ptr >= _inputEnd) {
      if (!loadMore()) {
        _owner._reportCsvError(""String_Node_Str"");
      }
      ptr=_inputPtr;
      if (checkLF && inputBuffer[ptr] == '\n') {
        --_currInputRow;
      }
    }
    if (checkLF) {
    }
    if (outPtr >= outBuf.length) {
      outBuf=_textBuffer.finishCurrentSegment();
      outPtr=0;
    }
    final int max=Math.min(_inputEnd,(ptr + (outBuf.length - outPtr)));
    inner_loop:     while (true) {
      char c=inputBuffer[ptr++];
      if (c <= _maxSpecialChar) {
        if (c == _quoteChar) {
          _inputPtr=ptr;
          break;
        }
        if (c == '\r') {
          if (ptr >= max) {
            checkLF=true;
            ++_currInputRow;
            _currInputRowStart=ptr;
          }
 else           if (inputBuffer[ptr] != '\n') {
            ++_currInputRow;
            _currInputRowStart=ptr;
          }
        }
 else         if (c == '\n') {
          ++_currInputRow;
          _currInputRowStart=ptr;
        }
 else         if (c == _escapeChar) {
          _inputPtr=ptr;
          c=_unescape();
          outBuf[outPtr++]=c;
          continue main_loop;
        }
      }
      outBuf[outPtr++]=c;
      if (ptr >= max) {
        _inputPtr=ptr;
        continue main_loop;
      }
      continue inner_loop;
    }
    if (_inputPtr < _inputEnd || loadMore()) {
      if (_inputBuffer[_inputPtr] == _quoteChar) {
        outBuf[outPtr++]=(char)_quoteChar;
        ++_inputPtr;
        continue main_loop;
      }
    }
    break;
  }
  String result=_textBuffer.finishAndReturn(outPtr,false);
  while (_inputPtr < _inputEnd || loadMore()) {
    int ch=_inputBuffer[_inputPtr++];
    if (ch == _separatorChar) {
      break;
    }
    if (ch <= INT_SPACE) {
      if (ch == INT_CR || ch == INT_LF) {
        _pendingLF=ch;
        break;
      }
      continue;
    }
    _owner._reportUnexpectedCsvChar(ch,""String_Node_Str"" + _getCharDesc(_quoteChar) + ""String_Node_Str"");
  }
  return result;
}",0.8562469850458273
151727,"protected JsonToken _handleNextEntry() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}","protected JsonToken _handleNextEntry() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _currentName=null;
    if (_columnIndex == _columnCount) {
      next=next.trim();
      if (next.length() == 0) {
        return _handleNextEntry();
      }
    }
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ _columnCount+ ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}",0.866089273817455
151728,"public ObjectReader schemaBasedReader(FormatSchema schema){
  return reader(schema);
}","@Override public ObjectReader schemaBasedReader(FormatSchema schema){
  return reader(schema);
}",0.945054945054945
151729,"public ObjectWriter schemaBasedWriter(FormatSchema schema){
  return writer(schema);
}","@Override public ObjectWriter schemaBasedWriter(FormatSchema schema){
  return writer(schema);
}",0.945054945054945
151730,"/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException, JsonParseException {
  if (_schema.useHeader()) {
    _readHeaderLine();
  }
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (isEnabled(Feature.WRAP_AS_ARRAY)) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (isEnabled(Feature.WRAP_AS_ARRAY)) {
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}","/** 
 * Method called to handle details of initializing things to return the very first token.
 */
protected JsonToken _handleStartDoc() throws IOException, JsonParseException {
  if (_schema.useHeader()) {
    _readHeaderLine();
  }
  if (!_reader.hasMoreInput()) {
    _state=STATE_DOC_END;
    if (isEnabled(Feature.WRAP_AS_ARRAY)) {
      _parsingContext=_reader.childArrayContext(_parsingContext);
      return JsonToken.START_ARRAY;
    }
    return null;
  }
  if (isEnabled(Feature.WRAP_AS_ARRAY)) {
    _parsingContext=_reader.childArrayContext(_parsingContext);
    _state=STATE_RECORD_START;
    return JsonToken.START_ARRAY;
  }
  return _handleRecordStart();
}",0.9422776911076444
151731,"protected JsonToken _handleUnnamedValue() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (_reader.reachedEOF()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_ARRAY;
  }
  _currentValue=next;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}","protected JsonToken _handleUnnamedValue() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_ARRAY;
  }
  _currentValue=next;
  ++_columnIndex;
  return JsonToken.VALUE_STRING;
}",0.9722557297949336
151732,"protected JsonToken _handleNextEntry() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (_reader.reachedEOF()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}","protected JsonToken _handleNextEntry() throws IOException, JsonParseException {
  String next=_reader.nextString();
  if (next == null) {
    _parsingContext=_parsingContext.getParent();
    if (!_reader.startNewLine()) {
      _state=STATE_DOC_END;
    }
 else {
      _state=STATE_RECORD_START;
    }
    return JsonToken.END_OBJECT;
  }
  _state=STATE_NAMED_VALUE;
  _currentValue=next;
  if (_columnIndex >= _columnCount) {
    _reportError(""String_Node_Str"" + _columnCount + ""String_Node_Str""+ next.length()+ ""String_Node_Str""+ next+ ""String_Node_Str"");
  }
  _currentName=_schema.column(_columnIndex).getName();
  return JsonToken.FIELD_NAME;
}",0.9699306090979184
151733,"/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int max=Math.min(_inputEnd,(ptr + outBuf.length));
  char[] inputBuffer=_inputBuffer;
  while (ptr < max) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}","/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int end;
{
    int max=Math.min(_inputEnd - ptr,outBuf.length);
    end=ptr + max;
  }
  char[] inputBuffer=_inputBuffer;
  while (ptr < end) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}",0.9780346820809248
151734,"protected String _nextUnquotedString(char[] outBuf,int outPtr) throws IOException, JsonParseException {
  int c;
  final char[] inputBuffer=_inputBuffer;
  main_loop:   while (true) {
    int ptr=_inputPtr;
    if (ptr >= _inputEnd) {
      if (!loadMore()) {
        _inputPtr=ptr;
        break main_loop;
      }
    }
    if (outPtr >= outBuf.length) {
      outBuf=_textBuffer.finishCurrentSegment();
      outPtr=0;
    }
    final int max=Math.min(_inputEnd,(ptr + (outBuf.length - outPtr)));
    while (ptr < max) {
      c=inputBuffer[ptr++];
      if (c <= _maxSpecialChar) {
        if (c == _separatorChar) {
          _inputPtr=ptr;
          break main_loop;
        }
        if (c == '\r' || c == '\n') {
          _inputPtr=ptr;
          _pendingLF=c;
          break main_loop;
        }
        if (c == _escapeChar) {
          _inputPtr=ptr;
          outBuf[outPtr++]=_unescape();
          continue main_loop;
        }
      }
      outBuf[outPtr++]=(char)c;
    }
    _inputPtr=ptr;
  }
  return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
}","protected String _nextUnquotedString(char[] outBuf,int outPtr) throws IOException, JsonParseException {
  int c;
  final char[] inputBuffer=_inputBuffer;
  main_loop:   while (true) {
    int ptr=_inputPtr;
    if (ptr >= _inputEnd) {
      if (!loadMore()) {
        _inputPtr=ptr;
        break main_loop;
      }
      ptr=_inputPtr;
    }
    if (outPtr >= outBuf.length) {
      outBuf=_textBuffer.finishCurrentSegment();
      outPtr=0;
    }
    final int max=Math.min(_inputEnd,(ptr + (outBuf.length - outPtr)));
    while (ptr < max) {
      c=inputBuffer[ptr++];
      if (c <= _maxSpecialChar) {
        if (c == _separatorChar) {
          _inputPtr=ptr;
          break main_loop;
        }
        if (c == '\r' || c == '\n') {
          _inputPtr=ptr;
          _pendingLF=c;
          break main_loop;
        }
        if (c == _escapeChar) {
          _inputPtr=ptr;
          outBuf[outPtr++]=_unescape();
          continue main_loop;
        }
      }
      outBuf[outPtr++]=(char)c;
    }
    _inputPtr=ptr;
  }
  return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
}",0.9903002309468822
151735,"/** 
 * Test using non-wrapped sequence of entries
 */
public void testAsSequence() throws Exception {
  CsvMapper mapper=mapperForCsv();
  mapper.disable(CsvParser.Feature.WRAP_AS_ARRAY);
  MappingIterator<Entry> it=mapper.readerWithSchemaFor(Entry.class).readValues(""String_Node_Str"");
  Entry entry;
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(1,entry.x);
  assertEquals(2,entry.y);
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(-3,entry.x);
  assertEquals(0,entry.y);
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(5,entry.x);
  assertEquals(6,entry.y);
  assertFalse(it.hasNext());
}","public void testAsSequence() throws Exception {
  CsvMapper mapper=mapperForCsv();
  mapper.disable(CsvParser.Feature.WRAP_AS_ARRAY);
  MappingIterator<Entry> it=mapper.readerWithSchemaFor(Entry.class).readValues(""String_Node_Str"");
  Entry entry;
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(1,entry.x);
  assertEquals(2,entry.y);
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(-3,entry.x);
  assertEquals(0,entry.y);
  assertTrue(it.hasNext());
  assertNotNull(entry=it.next());
  assertEquals(5,entry.x);
  assertEquals(6,entry.y);
  assertFalse(it.hasNext());
}",0.957983193277311
151736,"/** 
 * Test using sequence of entries wrapped in a logical array.
 */
public void testAsWrappedArray() throws Exception {
  CsvMapper mapper=mapperForCsv();
  mapper.enable(CsvParser.Feature.WRAP_AS_ARRAY);
  Entry[] entries=mapper.readerWithSchemaFor(Entry.class).withType(Entry[].class).readValue(""String_Node_Str"");
  assertEquals(3,entries.length);
  assertEquals(1,entries[0].x);
  assertEquals(2,entries[0].y);
  assertEquals(0,entries[1].x);
  assertEquals(0,entries[1].y);
  assertEquals(123,entries[2].x);
  assertEquals(123456789,entries[2].y);
}","public void testAsWrappedArray() throws Exception {
  CsvMapper mapper=mapperForCsv();
  mapper.enable(CsvParser.Feature.WRAP_AS_ARRAY);
  Entry[] entries=mapper.readerWithSchemaFor(Entry.class).withType(Entry[].class).readValue(""String_Node_Str"");
  assertEquals(3,entries.length);
  assertEquals(1,entries[0].x);
  assertEquals(2,entries[0].y);
  assertEquals(0,entries[1].x);
  assertEquals(0,entries[1].y);
  assertEquals(123,entries[2].x);
  assertEquals(123456789,entries[2].y);
}",0.9319271332694152
151737,"/** 
 * Method called to process the expected header line
 */
protected void _readHeaderLine() throws IOException, JsonParseException {
  if (_schema.size() > 0) {
    while (_reader.nextString() != null) {
      ;
    }
    return;
  }
  String name;
  CsvSchema.Builder builder=_schema.rebuild().clearColumns();
  while ((name=_reader.nextString()) != null) {
    name=name.trim();
    CsvSchema.Column prev=_schema.column(name);
    if (prev != null) {
      builder.addColumn(name,prev.getType());
    }
 else {
      builder.addColumn(name);
    }
  }
  CsvSchema newSchema=builder.build();
  int size=newSchema.size();
  if (size < 2) {
    String first=(size == 0) ? ""String_Node_Str"" : newSchema.column(0).getName().trim();
    if (first.length() == 0) {
      _reportError(""String_Node_Str"");
    }
  }
  setSchema(builder.build());
}","/** 
 * Method called to process the expected header line
 */
protected void _readHeaderLine() throws IOException, JsonParseException {
  if (_schema.size() > 0) {
    while (_reader.nextString() != null) {
    }
    return;
  }
  String name;
  CsvSchema.Builder builder=_schema.rebuild().clearColumns();
  while ((name=_reader.nextString()) != null) {
    name=name.trim();
    CsvSchema.Column prev=_schema.column(name);
    if (prev != null) {
      builder.addColumn(name,prev.getType());
    }
 else {
      builder.addColumn(name);
    }
  }
  CsvSchema newSchema=builder.build();
  int size=newSchema.size();
  if (size < 2) {
    String first=(size == 0) ? ""String_Node_Str"" : newSchema.column(0).getName().trim();
    if (first.length() == 0) {
      _reportError(""String_Node_Str"");
    }
  }
  setSchema(builder.build());
}",0.99523241954708
151738,"/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int end;
{
    int max=Math.min(_inputEnd - ptr,outBuf.length);
    end=ptr + max;
  }
  char[] inputBuffer=_inputBuffer;
  while (ptr < end) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}","/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int end;
{
    int max=Math.min(_inputEnd - ptr,outBuf.length - outPtr);
    end=ptr + max;
  }
  char[] inputBuffer=_inputBuffer;
  while (ptr < end) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}",0.997432239657632
151739,"/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int end;
{
    int max=Math.min(_inputEnd - ptr,outBuf.length - outPtr);
    end=ptr + max;
  }
  char[] inputBuffer=_inputBuffer;
  while (ptr < end) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}","/** 
 * Method called to parse the next token when we don't have any type information, so that all tokens are exposed as basic String values.
 * @return Column value if more found; null to indicate end of lineof input
 */
public String nextString() throws IOException, JsonParseException {
  _numTypesValid=NR_UNKNOWN;
  if (_pendingLF > 0) {
    if (_inputSource != null) {
      _handleLF();
    }
    return null;
  }
  int i;
  _tokenInputTotal=_currInputProcessed + _inputPtr - 1;
  _tokenInputRow=_currInputRow;
  _tokenInputCol=_inputPtr - _currInputRowStart - 1;
  if (_trimSpaces) {
    i=_skipLeadingSpace();
  }
 else {
    i=_nextChar();
  }
  if (i < 0) {
    return ""String_Node_Str"";
  }
  if (i == INT_CR || i == INT_LF) {
    _pendingLF=i;
    return ""String_Node_Str"";
  }
  if (i == _quoteChar) {
    return _nextQuotedString();
  }
  if (i == _separatorChar) {
    _textBuffer.resetWithString(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  outBuf[0]=(char)i;
  int outPtr=1;
  int ptr=_inputPtr;
  if (ptr >= _inputEnd) {
    if (!loadMore()) {
      return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
    }
    ptr=_inputPtr;
  }
  final int end;
{
    int max=Math.min(_inputEnd - ptr,outBuf.length - outPtr);
    end=ptr + max;
  }
  char[] inputBuffer=_inputBuffer;
  while (ptr < end) {
    char c=inputBuffer[ptr++];
    if (c <= _maxSpecialChar) {
      if (c == _separatorChar) {
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == '\r' || c == '\n') {
        _pendingLF=c;
        _inputPtr=ptr;
        return _textBuffer.finishAndReturn(outPtr,_trimSpaces);
      }
      if (c == _escapeChar) {
        --ptr;
        break;
      }
    }
    outBuf[outPtr++]=(char)c;
  }
  _inputPtr=ptr;
  return _nextUnquotedString(outBuf,outPtr);
}",0.961422708618331
151740,"protected int _skipLeadingSpace() throws IOException, JsonParseException {
  _tokenInputTotal=_currInputProcessed + _inputPtr - 1;
  _tokenInputRow=_currInputRow;
  _tokenInputCol=_inputPtr - _currInputRowStart - 1;
  while (true) {
    if (_inputPtr >= _inputEnd) {
      if (!loadMore()) {
        return -1;
      }
    }
    char ch=_inputBuffer[_inputPtr++];
    if (ch > ' ') {
      return ch;
    }
switch (ch) {
case '\r':
case '\n':
      return ch;
  }
}
}","protected int _skipLeadingSpace() throws IOException, JsonParseException {
  while (true) {
    if (_inputPtr >= _inputEnd) {
      if (!loadMore()) {
        return -1;
      }
    }
    char ch=_inputBuffer[_inputPtr++];
    if (ch > ' ') {
      return ch;
    }
switch (ch) {
case '\r':
case '\n':
      return ch;
  }
}
}",0.8221941992433796
151741,"/** 
 * Creates a new rule with a driver running on the specified port.
 * @param port The port on which the driver should listen
 */
public ClientDriverRule(int port){
  clientDriver=new ClientDriverFactory().createClientDriver(port);
}","protected ClientDriverRule(ClientDriver clientDriver){
  this.clientDriver=clientDriver;
}",0.4159021406727828
151742,"@Override protected SslContextFactory getSslContextFactory(){
  SslContextFactory sslContextFactoryFactory=new SslContextFactory();
  sslContextFactoryFactory.setKeyStore(keyStore);
  sslContextFactoryFactory.setCertAlias(certificateAlias);
  sslContextFactoryFactory.setKeyStorePassword(password);
  sslContextFactoryFactory.setKeyManagerPassword(password);
  sslContextFactoryFactory.checkKeyStore();
  return sslContextFactoryFactory;
}","@Override protected SslContextFactory getSslContextFactory(){
  SslContextFactory sslContextFactoryFactory=new SslContextFactory();
  sslContextFactoryFactory.setKeyStore(keyStore);
  sslContextFactoryFactory.setCertAlias(certificateAlias);
  sslContextFactoryFactory.setKeyStorePassword(password);
  return sslContextFactoryFactory;
}",0.8656330749354005
151743,"public SecureClientDriverFactory certAlias(String certAlias){
  this.certAlias=certAlias;
  return this;
}","/** 
 * Sets the certificate alias. Certificate alias may not be null or empty when building.
 * @param certAlias the certificate alias
 * @return the factory object
 */
public SecureClientDriverFactory certAlias(String certAlias){
  this.certAlias=certAlias;
  return this;
}",0.5549738219895288
151744,"/** 
 * Sets the password. Password may not be null or empty when building. 
 * @param port the port
 * @return the factory object
 */
public SecureClientDriverFactory password(String password){
  this.password=password;
  return this;
}","/** 
 * Sets the password. Password may not be null or empty when building.
 * @param password the certificate's password
 * @return the factory object
 */
public SecureClientDriverFactory password(String password){
  this.password=password;
  return this;
}",0.9050505050505052
151745,"public SecureClientDriverFactory keyStore(KeyStore keyStore){
  this.keyStore=keyStore;
  return this;
}","/** 
 * Sets the key store. Key store may not be null or empty when building. It has to contain a certificate.
 * @param keyStore the key store
 * @return the factory object
 */
public SecureClientDriverFactory keyStore(KeyStore keyStore){
  this.keyStore=keyStore;
  return this;
}",0.538860103626943
151746,"/** 
 * Creates a new rule which binds the driver to a free port.
 * @param keyStore the key store with the certificate
 * @param password the certificate's password
 * @param certAlias the alias of the certificate
 */
public SecureClientDriverRule(int port,KeyStore keyStore,String password,String certAlias){
  clientDriver=new SecureClientDriverFactory().createClientDriver(port,keyStore,password,certAlias);
}","/** 
 * Creates a new rule which binds the driver to a free port.
 * @param keyStore the key store with the certificate
 * @param password the certificate's password
 * @param certAlias the alias of the certificate
 */
public SecureClientDriverRule(int port,KeyStore keyStore,String password,String certAlias){
  super(new SecureClientDriverFactory().createClientDriver(port,keyStore,password,certAlias));
}",0.975609756097561
151747,"private ClientDriverRequestResponsePair getMatchingRequestPair(HttpServletRequest request){
  int index=0;
  ClientDriverExpectation matchedExpectation=null;
  for (index=0; index < expectations.size(); index++) {
    ClientDriverExpectation thisExpectation=expectations.get(index);
    ClientDriverRequestResponsePair thisPair=thisExpectation.getPair();
    if (matcher.isMatch(new HttpRealRequest(request),thisPair.getRequest())) {
      thisExpectation.match();
      if (matchedExpectation == null) {
        matchedExpectation=thisExpectation;
        break;
      }
    }
  }
  if (matchedExpectation == null) {
    unexpectedRequest=request.getMethod() + ""String_Node_Str"" + request.getPathInfo();
    String reqQuery=request.getQueryString();
    if (reqQuery != null) {
      unexpectedRequest+=""String_Node_Str"" + reqQuery;
    }
    throw new ClientDriverInternalException(""String_Node_Str"" + unexpectedRequest,null);
  }
  if (matchedExpectation.isSatisfied()) {
    expectations.remove(index);
  }
  return matchedExpectation.getPair();
}","private ClientDriverRequestResponsePair getMatchingRequestPair(HttpServletRequest request){
  int index=0;
  ClientDriverExpectation matchedExpectation=null;
  HttpRealRequest realRequest=new HttpRealRequest(request);
  for (index=0; index < expectations.size(); index++) {
    ClientDriverExpectation thisExpectation=expectations.get(index);
    ClientDriverRequestResponsePair thisPair=thisExpectation.getPair();
    if (matcher.isMatch(realRequest,thisPair.getRequest())) {
      thisExpectation.match();
      if (matchedExpectation == null) {
        matchedExpectation=thisExpectation;
        break;
      }
    }
  }
  if (matchedExpectation == null) {
    unexpectedRequest=request.getMethod() + ""String_Node_Str"" + request.getPathInfo();
    String reqQuery=request.getQueryString();
    if (reqQuery != null) {
      unexpectedRequest+=""String_Node_Str"" + reqQuery;
    }
    throw new ClientDriverInternalException(""String_Node_Str"" + unexpectedRequest,null);
  }
  if (matchedExpectation.isSatisfied()) {
    expectations.remove(index);
  }
  return matchedExpectation.getPair();
}",0.953846153846154
151748,"@Override public void describeTo(Description description){
  description.appendText(""String_Node_Str"" + jsonPath + ""String_Node_Str"");
  matcher.describeTo(description);
}","@Override public void describeTo(Description description){
  description.appendText(""String_Node_Str"" + jsonPath + ""String_Node_Str"");
  if (matcher != null) {
    description.appendText(""String_Node_Str"");
    matcher.describeTo(description);
  }
}",0.8142857142857143
151749,"/** 
 * Add in an expected   {@link ClientDriverRequest}/  {@link ClientDriverResponse} pair.
 * @param request The expected request
 * @param response The response to serve to that request
 */
public void addExpectation(ClientDriverRequest request,ClientDriverResponse response){
  handler.addExpectation(request,response);
}","/** 
 * Add in an expected   {@link ClientDriverRequest}/  {@link ClientDriverResponse} pair.
 * @param request  The expected request
 * @param response The response to serve to that request
 */
public void addExpectation(ClientDriverRequest request,ClientDriverResponse response){
  handler.addExpectation(request,response);
}",0.998468606431853
151750,"/** 
 * Constructor. This will find a free port, bind to it and start the server up before it returns.
 * @param handler The  {@link ClientDriverJettyHandler} to use.
 */
public ClientDriver(ClientDriverJettyHandler handler){
  this.handler=handler;
  try {
    portNum=getFreePort();
  }
 catch (  IOException ioe) {
    throw new ClientDriverSetupException(""String_Node_Str"",ioe);
  }
  jettyServer=new Server(portNum);
  try {
    jettyServer.setHandler(handler.getJettyHandler());
    jettyServer.start();
  }
 catch (  Exception e) {
    throw new ClientDriverSetupException(""String_Node_Str"",e);
  }
}","/** 
 * Constructor. This will find a free port, bind to it and start the server up before it returns.
 * @param handler The {@link ClientDriverJettyHandler} to use.
 * @param port    The port to listen on.  Expect startup errors if this port is not free.
 */
public ClientDriver(ClientDriverJettyHandler handler,int port){
  this.portNum=port;
  this.handler=handler;
  jettyServer=new Server(portNum);
  startJetty();
}",0.4766536964980545
151751,"/** 
 * Factory method to create and start a   {@link ClientDriver}.
 * @return A new {@link ClientDriver}, which has found a free port, bound to it and started up.
 */
public ClientDriver createClientDriver(){
  return new ClientDriver(new DefaultClientDriverJettyHandler(new DefaultRequestMatcher()));
}","/** 
 * Factory method to create and start a   {@link ClientDriver} on a specific port.
 * @param port The port to listen on.  If this port is not available a runtime exception will be thrown.
 * @return A new {@link ClientDriver}, which has found a free port, bound to it and started up.
 */
public ClientDriver createClientDriver(int port){
  return new ClientDriver(new DefaultClientDriverJettyHandler(new DefaultRequestMatcher()),port);
}",0.8165997322623829
151752,"/** 
 * Add a path to a url.  This method will ensure that there is always exactly one ""/"" character between segments (so you don't have to :).
 * @param path the path, eg ""foo/bar""
 * @return The new Url object (for chaining calls)
 */
public Url withPath(String path){
  if (!(url.endsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str""))) {
    url.append(""String_Node_Str"");
  }
  if (url.endsWith(""String_Node_Str"") && path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  url.append(path);
  return this;
}","/** 
 * Add a path to a url.  This method will ensure that there is always exactly one ""/"" character between segments (so you don't have to :).
 * @param path the path, eg ""foo/bar""
 * @return The new Url object (for chaining calls)
 */
public final Url withPath(String path){
  if (!(url.endsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str""))) {
    url.append(""String_Node_Str"");
  }
  if (url.endsWith(""String_Node_Str"") && path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  url.append(path);
  return this;
}",0.9944649446494463
151753,"/** 
 * You can pass this object to all the get/post/put/delete etc methods.
 * @return The Url, correctly formatted.
 */
public String toString(){
  String[] baseParts;
  if (url.toString().contains(""String_Node_Str"")) {
    baseParts=url.toString().split(""String_Node_Str"");
  }
 else {
    baseParts=new String[]{""String_Node_Str"",url.toString()};
  }
  String scheme, ssp, path, query;
  scheme=baseParts[0];
  if (baseParts[1].contains(""String_Node_Str"")) {
    ssp=baseParts[1].substring(0,baseParts[1].indexOf(""String_Node_Str""));
    path=baseParts[1].substring(baseParts[1].indexOf(""String_Node_Str""));
  }
 else {
    ssp=baseParts[1];
    path=""String_Node_Str"";
  }
  query=StringUtils.trimToNull(StringUtils.join(queryParams,""String_Node_Str""));
  try {
    return new URI(scheme,ssp,path,query,null).toASCIIString();
  }
 catch (  URISyntaxException use) {
    throw new RuntimeUriSyntaxException(""String_Node_Str"",use);
  }
}","/** 
 * You can pass this object to all the get/post/put/delete etc methods.
 * @return The Url, correctly formatted.
 */
public final String toString(){
  String[] baseParts;
  if (url.toString().contains(""String_Node_Str"")) {
    baseParts=url.toString().split(""String_Node_Str"");
  }
 else {
    baseParts=new String[]{""String_Node_Str"",url.toString()};
  }
  String scheme, ssp, path, query;
  scheme=baseParts[0];
  if (baseParts[1].contains(""String_Node_Str"")) {
    ssp=baseParts[1].substring(0,baseParts[1].indexOf(""String_Node_Str""));
    path=baseParts[1].substring(baseParts[1].indexOf(""String_Node_Str""));
  }
 else {
    ssp=baseParts[1];
    path=""String_Node_Str"";
  }
  query=StringUtils.trimToNull(StringUtils.join(queryParams,""String_Node_Str""));
  try {
    return new URI(scheme,ssp,path,query,null).toASCIIString();
  }
 catch (  URISyntaxException use) {
    throw new RuntimeUriSyntaxException(""String_Node_Str"",use);
  }
}",0.9968186638388123
151754,"/** 
 * Adds a query-string parameter to the end of the url, like ?key=val.
 * @param key   The key for the query string.
 * @param value The value for the query string.
 * @return The Url with the query string param added (for chaining calls)
 */
public Url withParam(String key,String value){
  queryParams.add(new QueryParam(key,value));
  return this;
}","/** 
 * Adds a query-string parameter to the end of the url, like ?key=val.
 * @param key   The key for the query string.
 * @param value The value for the query string.
 * @return The Url with the query string param added (for chaining calls)
 */
public final Url withParam(String key,String value){
  queryParams.add(new QueryParam(key,value));
  return this;
}",0.9916666666666668
151755,"/** 
 * Setup a Url with a base path, like ""http://localhost:8080"".  You can also supply just ""localhost"" and the ""http"" will be
 * @param base the base Url.
 */
public Url(String base){
  this.url=new StrBuilder(base);
  queryParams=new ArrayList<QueryParam>();
}","/** 
 * Setup a Url with a base path, like ""http://localhost:8080"".  You can also supply just ""localhost"" and the ""http"" will be inferred.
 * @param base the base Url.
 */
public Url(String base){
  this.url=new StrBuilder(base);
  queryParams=new ArrayList<QueryParam>();
}",0.9814126394052044
151756,"@Override public String toString(){
  StrBuilder httpString=new StrBuilder();
  httpString.append(protocolVersion + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusMessage);
  httpString.appendNewLine();
  httpString.appendWithSeparators(headers,SystemUtils.LINE_SEPARATOR);
  if (StringUtils.isNotEmpty(content)) {
    httpString.appendNewLine();
    httpString.appendNewLine();
    httpString.append(StringUtils.abbreviate(content,Response.MAX_BODY_DISPLAY_LENGTH));
  }
  return httpString.toString();
}","@Override public String toString(){
  StrBuilder httpString=new StrBuilder();
  httpString.append(protocolVersion).append(""String_Node_Str"").append(statusCode).append(""String_Node_Str"").append(statusMessage);
  httpString.appendNewLine();
  httpString.appendWithSeparators(headers,SystemUtils.LINE_SEPARATOR);
  if (StringUtils.isNotEmpty(content)) {
    httpString.appendNewLine();
    httpString.appendNewLine();
    httpString.append(StringUtils.abbreviate(content,Response.MAX_BODY_DISPLAY_LENGTH));
  }
  return httpString.toString();
}",0.956439393939394
151757,"@Override public String toString(){
  StrBuilder httpString=new StrBuilder();
  httpString.append(protocolVersion + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusMessage);
  httpString.appendNewLine();
  httpString.appendWithSeparators(headers,SystemUtils.LINE_SEPARATOR);
  if (StringUtils.isNotEmpty(content)) {
    httpString.appendNewLine();
    httpString.append(StringUtils.abbreviate(content,Response.MAX_BODY_DISPLAY_LENGTH));
  }
  return httpString.toString();
}","@Override public String toString(){
  StrBuilder httpString=new StrBuilder();
  httpString.append(protocolVersion + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusMessage);
  httpString.appendNewLine();
  httpString.appendWithSeparators(headers,SystemUtils.LINE_SEPARATOR);
  if (StringUtils.isNotEmpty(content)) {
    httpString.appendNewLine();
    httpString.appendNewLine();
    httpString.append(StringUtils.abbreviate(content,Response.MAX_BODY_DISPLAY_LENGTH));
  }
  return httpString.toString();
}",0.9679358717434868
151758,"/** 
 * Given a package name, search the classpath for all classes that extend sundial.job
 * @param pkgname
 * @return
 */
public Set<Class<? extends Job>> getJobClasses(String pkgname){
  Set<Class<? extends Job>> classes=new HashSet<Class<? extends Job>>();
  String relPath=pkgname.replace('.','/');
  URL resource=getResource(relPath);
  if (resource == null) {
    throw new RuntimeException(""String_Node_Str"" + relPath);
  }
  logger.info(""String_Node_Str"" + pkgname + ""String_Node_Str""+ resource.toString()+ ""String_Node_Str"");
  if (resource.toString().startsWith(""String_Node_Str"")) {
    processJarfile(resource,pkgname,classes);
  }
 else {
    processDirectory(new File(resource.getPath()),pkgname,classes);
  }
  return classes;
}","/** 
 * Given a package name, search the classpath for all classes that extend sundial.job
 * @param pkgname
 * @return
 */
public Set<Class<? extends Job>> getJobClasses(String pkgname){
  Set<Class<? extends Job>> classes=new HashSet<Class<? extends Job>>();
  String relPath=pkgname.replace('.','/').replace(""String_Node_Str"",""String_Node_Str"");
  URL resource=getResource(relPath);
  if (resource == null) {
    throw new RuntimeException(""String_Node_Str"" + relPath);
  }
  logger.info(""String_Node_Str"" + pkgname + ""String_Node_Str""+ resource.toString()+ ""String_Node_Str"");
  if (resource.toString().startsWith(""String_Node_Str"")) {
    processJarfile(resource,pkgname,classes);
  }
 else {
    processDirectory(new File(resource.getPath()),pkgname,classes);
  }
  return classes;
}",0.9706457925636008
151759,"@Override public void start(){
  logger.info(""String_Node_Str"",packageName);
  if (packageName != null) {
    Set<Class<? extends Job>> scheduledClasses=scheduler.getCascadingClassLoadHelper().getJobClasses(packageName);
    for (    Class<? extends Job> jobClass : scheduledClasses) {
      CronTrigger cronTrigger=jobClass.getAnnotation(CronTrigger.class);
      if (cronTrigger != null) {
        JobDataMap jobDataMap=new JobDataMap();
        if (cronTrigger.jobDataMap() != null && cronTrigger.jobDataMap().length > 0) {
          addToJobDataMap(jobDataMap,cronTrigger.jobDataMap());
        }
        JobDetail job=newJobBuilder(jobClass).withIdentity(jobClass.getSimpleName()).isConcurrencyAllowed(cronTrigger.isConcurrencyAllowed()).usingJobData(jobDataMap).build();
        OperableTrigger trigger;
        try {
          trigger=buildCronTrigger(cronTrigger,jobClass.getSimpleName());
          scheduler.scheduleJob(job,trigger);
          logger.info(""String_Node_Str"",job,trigger);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
        }
      }
      SimpleTrigger simpleTrigger=jobClass.getAnnotation(SimpleTrigger.class);
      if (simpleTrigger != null) {
        JobDataMap jobDataMap=new JobDataMap();
        if (simpleTrigger.jobDataMap() != null && simpleTrigger.jobDataMap().length > 0) {
          addToJobDataMap(jobDataMap,simpleTrigger.jobDataMap());
        }
        JobDetail job=newJobBuilder(jobClass).withIdentity(jobClass.getSimpleName()).isConcurrencyAllowed(cronTrigger.isConcurrencyAllowed()).usingJobData(jobDataMap).build();
        OperableTrigger trigger;
        try {
          trigger=buildSimpleTrigger(simpleTrigger,jobClass.getSimpleName());
          scheduler.scheduleJob(job,trigger);
          logger.info(""String_Node_Str"",job,trigger);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
        }
      }
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
}","@Override public void start(){
  logger.info(""String_Node_Str"",packageName);
  if (packageName != null) {
    Set<Class<? extends Job>> scheduledClasses=scheduler.getCascadingClassLoadHelper().getJobClasses(packageName);
    for (    Class<? extends Job> jobClass : scheduledClasses) {
      CronTrigger cronTrigger=jobClass.getAnnotation(CronTrigger.class);
      if (cronTrigger != null) {
        JobDataMap jobDataMap=new JobDataMap();
        if (cronTrigger.jobDataMap() != null && cronTrigger.jobDataMap().length > 0) {
          addToJobDataMap(jobDataMap,cronTrigger.jobDataMap());
        }
        JobDetail job=newJobBuilder(jobClass).withIdentity(jobClass.getSimpleName()).isConcurrencyAllowed(cronTrigger.isConcurrencyAllowed()).usingJobData(jobDataMap).build();
        OperableTrigger trigger;
        try {
          trigger=buildCronTrigger(cronTrigger,jobClass.getSimpleName());
          scheduler.scheduleJob(job,trigger);
          logger.info(""String_Node_Str"",job,trigger);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
        }
      }
      SimpleTrigger simpleTrigger=jobClass.getAnnotation(SimpleTrigger.class);
      if (simpleTrigger != null) {
        JobDataMap jobDataMap=new JobDataMap();
        if (simpleTrigger.jobDataMap() != null && simpleTrigger.jobDataMap().length > 0) {
          addToJobDataMap(jobDataMap,simpleTrigger.jobDataMap());
        }
        JobDetail job=newJobBuilder(jobClass).withIdentity(jobClass.getSimpleName()).isConcurrencyAllowed(simpleTrigger.isConcurrencyAllowed()).usingJobData(jobDataMap).build();
        OperableTrigger trigger;
        try {
          trigger=buildSimpleTrigger(simpleTrigger,jobClass.getSimpleName());
          scheduler.scheduleJob(job,trigger);
          logger.info(""String_Node_Str"",job,trigger);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
        }
      }
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
}",0.9974924774322969
151760,"@Override public void contextInitialized(ServletContextEvent pServletContextEvent){
  logger.info(""String_Node_Str"");
  ServletContext servletContext=pServletContextEvent.getServletContext();
  try {
    String shutdownPref=servletContext.getInitParameter(""String_Node_Str"");
    if (shutdownPref != null) {
      performShutdown=Boolean.valueOf(shutdownPref).booleanValue();
    }
    String shutdownWaitPref=servletContext.getInitParameter(""String_Node_Str"");
    if (shutdownPref != null) {
      waitOnShutdown=Boolean.valueOf(shutdownWaitPref).booleanValue();
    }
    int threadPoolSize=0;
    String ThreadPoolSizeString=servletContext.getInitParameter(""String_Node_Str"");
    try {
      if (ThreadPoolSizeString != null && ThreadPoolSizeString.trim().length() > 0) {
        threadPoolSize=Integer.parseInt(ThreadPoolSizeString);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + ThreadPoolSizeString + ""String_Node_Str"");
      threadPoolSize=10;
    }
    SundialJobScheduler.createScheduler(10);
    SundialJobScheduler.setServletContext(servletContext);
    String startOnLoad=servletContext.getInitParameter(""String_Node_Str"");
    int startDelay=0;
    String startDelayS=servletContext.getInitParameter(""String_Node_Str"");
    try {
      if (startDelayS != null && startDelayS.trim().length() > 0) {
        startDelay=Integer.parseInt(startDelayS);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + startDelayS + ""String_Node_Str"");
      startDelay=5;
    }
    if (startOnLoad == null || (Boolean.valueOf(startOnLoad).booleanValue())) {
      if (startDelay <= 0) {
        SundialJobScheduler.getScheduler().start();
        logger.info(""String_Node_Str"");
      }
 else {
        SundialJobScheduler.getScheduler().startDelayed(startDelay);
        logger.info(""String_Node_Str"" + startDelay + ""String_Node_Str"");
      }
    }
 else {
      logger.info(""String_Node_Str"");
    }
    String globalLockOnLoadString=servletContext.getInitParameter(""String_Node_Str"");
    boolean globalLockOnLoad=false;
    if (globalLockOnLoadString != null) {
      globalLockOnLoad=Boolean.valueOf(globalLockOnLoadString).booleanValue();
      if (globalLockOnLoad) {
        SundialJobScheduler.lockScheduler();
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","@Override public void contextInitialized(ServletContextEvent pServletContextEvent){
  logger.info(""String_Node_Str"");
  ServletContext servletContext=pServletContextEvent.getServletContext();
  try {
    String shutdownPrefString=servletContext.getInitParameter(""String_Node_Str"");
    if (shutdownPrefString != null) {
      performShutdown=Boolean.valueOf(shutdownPrefString).booleanValue();
    }
    String shutdownWaitPrefString=servletContext.getInitParameter(""String_Node_Str"");
    if (shutdownPrefString != null) {
      waitOnShutdown=Boolean.valueOf(shutdownWaitPrefString).booleanValue();
    }
    int threadPoolSize=10;
    String ThreadPoolSizeString=servletContext.getInitParameter(""String_Node_Str"");
    try {
      if (ThreadPoolSizeString != null && ThreadPoolSizeString.trim().length() > 0) {
        threadPoolSize=Integer.parseInt(ThreadPoolSizeString);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + ThreadPoolSizeString + ""String_Node_Str"");
    }
    SundialJobScheduler.createScheduler(threadPoolSize);
    SundialJobScheduler.setServletContext(servletContext);
    String startOnLoadString=servletContext.getInitParameter(""String_Node_Str"");
    int startDelay=0;
    String startDelayString=servletContext.getInitParameter(""String_Node_Str"");
    try {
      if (startDelayString != null && startDelayString.trim().length() > 0) {
        startDelay=Integer.parseInt(startDelayString);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + startDelayString + ""String_Node_Str"");
      startDelay=5;
    }
    if (startOnLoadString == null || (Boolean.valueOf(startOnLoadString).booleanValue())) {
      if (startDelay <= 0) {
        SundialJobScheduler.getScheduler().start();
        logger.info(""String_Node_Str"");
      }
 else {
        SundialJobScheduler.getScheduler().startDelayed(startDelay);
        logger.info(""String_Node_Str"" + startDelay + ""String_Node_Str"");
      }
    }
 else {
      logger.info(""String_Node_Str"");
    }
    String globalLockOnLoadString=servletContext.getInitParameter(""String_Node_Str"");
    boolean globalLockOnLoad=false;
    if (globalLockOnLoadString != null) {
      globalLockOnLoad=Boolean.valueOf(globalLockOnLoadString).booleanValue();
      if (globalLockOnLoad) {
        SundialJobScheduler.lockScheduler();
        logger.info(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.8160231261614702
151761,"/** 
 * Convenience method to get the Job Name
 * @return
 */
public String getJobName(){
  return getStringValue(KEY_JOB_NAME);
}","/** 
 * Convenience method to get the Job Name
 * @return
 */
public String getJobName(){
  return get(KEY_JOB_NAME);
}",0.9558232931726908
151762,"/** 
 * Convenience method to get the Trigger Name
 * @return
 */
public String getTriggerName(){
  return getStringValue(KEY_TRIGGER_NAME);
}","/** 
 * Convenience method to get the Trigger Name
 * @return
 */
public String getTriggerName(){
  return get(KEY_TRIGGER_NAME);
}",0.9597069597069596
151763,"/** 
 * Convenience method to get the Cron Expression
 * @return
 */
public String getCronExpressionName(){
  return getStringValue(KEY_TRIGGER_CRON_EXPRESSION);
}","/** 
 * Convenience method to get the Cron Expression
 * @return
 */
public String getCronExpressionName(){
  return get(KEY_TRIGGER_CRON_EXPRESSION);
}",0.9650793650793652
151764,"AudioOutputQueue(final AudioFormat format) throws LineUnavailableException, InterruptedException {
  m_format=format;
  m_bytesPerFrame=m_format.getChannels() * m_format.getSampleSizeInBits() / 8;
  m_lineLastFrame=new byte[m_bytesPerFrame];
  DataLine.Info lineInfo=new DataLine.Info(SourceDataLine.class,m_format,(int)Math.round(LineBufferSeconds * m_format.getSampleRate()) * m_bytesPerFrame);
  m_line=(SourceDataLine)AudioSystem.getLine(lineInfo);
  m_line.open(m_format);
  m_queueThread.start();
  try {
    while (!m_line.isActive())     Thread.sleep(10);
  }
 catch (  InterruptedException e) {
    close();
    throw e;
  }
}","AudioOutputQueue(final AudioFormat format) throws LineUnavailableException {
  m_format=format;
  m_bytesPerFrame=m_format.getChannels() * m_format.getSampleSizeInBits() / 8;
  m_lineLastFrame=new byte[m_bytesPerFrame];
  DataLine.Info lineInfo=new DataLine.Info(SourceDataLine.class,m_format,(int)Math.round(LineBufferSeconds * m_format.getSampleRate()) * m_bytesPerFrame);
  m_line=(SourceDataLine)AudioSystem.getLine(lineInfo);
  m_line.open(m_format);
  m_queueThread.start();
  try {
    while (!m_line.isActive())     Thread.sleep(10);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    close();
  }
}",0.1913725490196078
151765,"@Override public void run(){
  try {
    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
synchronized (AudioOutputQueue.this) {
      Arrays.fill(m_lineLastFrame,(byte)0);
      m_lineStopWallTime=-1;
      m_lineFramesMissed=0;
      m_lineFramesWritten=0;
    }
    m_line.addLineListener(this);
    m_line.start();
    mainLoop:     while (!Thread.interrupted()) {
      while (!Thread.interrupted()) {
        long nextPlaybackTimeGap=Long.MAX_VALUE;
        if (!m_queue.isEmpty()) {
          final long nextPlaybackRemoteTime=m_queue.firstKey();
          final long nextPlaybackFrameTime=fromRemoteFrameTime(nextPlaybackRemoteTime);
          nextPlaybackTimeGap=nextPlaybackFrameTime - getEndFrameTime();
          if (nextPlaybackTimeGap <= 0) {
            final byte[] nextPlaybackSamples=m_queue.get(nextPlaybackRemoteTime);
            s_logger.finest(""String_Node_Str"" + nextPlaybackSamples.length / m_bytesPerFrame + ""String_Node_Str"" + nextPlaybackFrameTime + ""String_Node_Str"");
            appendFrames(nextPlaybackSamples,0,nextPlaybackSamples.length,nextPlaybackFrameTime,true);
            m_queue.remove(nextPlaybackRemoteTime);
            continue;
          }
        }
        if (getBufferedSeconds() >= LineBufferSafetyMarginSeconds)         break;
        final long silenceFrames=Math.min(Math.round((LineBufferSafetyMarginSeconds * 1.5 - getBufferedSeconds()) * (double)m_format.getSampleRate()),nextPlaybackTimeGap);
        appendFrames(null,0,0,getEndFrameTime() + silenceFrames,false);
        s_logger.warning(""String_Node_Str"" + nextPlaybackTimeGap + ""String_Node_Str""+ silenceFrames+ ""String_Node_Str"");
      }
      long sleepNanos=Math.round(1e9 * Math.max(getBufferedSeconds() - LineBufferSafetyMarginSeconds,LineBufferSafetyMarginSeconds / 10.0));
      try {
        Thread.sleep(sleepNanos / 1000000,(int)(sleepNanos % 1000000));
      }
 catch (      InterruptedException e) {
        break mainLoop;
      }
    }
  }
 catch (  Throwable e) {
    s_logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    m_line.removeLineListener(this);
  }
}","@Override public void run(){
  try {
    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
synchronized (AudioOutputQueue.this) {
      Arrays.fill(m_lineLastFrame,(byte)0);
      m_lineStopWallTime=-1;
      m_lineFramesMissed=0;
      m_lineFramesWritten=0;
    }
    m_line.addLineListener(this);
    m_line.start();
    while (!Thread.currentThread().isInterrupted()) {
      while (!Thread.currentThread().isInterrupted()) {
        long nextPlaybackTimeGap=Long.MAX_VALUE;
        if (!m_queue.isEmpty()) {
          final long nextPlaybackRemoteTime=m_queue.firstKey();
          final long nextPlaybackFrameTime=fromRemoteFrameTime(nextPlaybackRemoteTime);
          nextPlaybackTimeGap=nextPlaybackFrameTime - getEndFrameTime();
          if (nextPlaybackTimeGap <= 0) {
            final byte[] nextPlaybackSamples=m_queue.get(nextPlaybackRemoteTime);
            s_logger.finest(""String_Node_Str"" + nextPlaybackSamples.length / m_bytesPerFrame + ""String_Node_Str"" + nextPlaybackFrameTime + ""String_Node_Str"");
            appendFrames(nextPlaybackSamples,0,nextPlaybackSamples.length,nextPlaybackFrameTime,true);
            m_queue.remove(nextPlaybackRemoteTime);
            continue;
          }
        }
        if (getBufferedSeconds() >= LineBufferSafetyMarginSeconds)         break;
        final long silenceFrames=Math.min(Math.round((LineBufferSafetyMarginSeconds * 1.5 - getBufferedSeconds()) * (double)m_format.getSampleRate()),nextPlaybackTimeGap);
        appendFrames(null,0,0,getEndFrameTime() + silenceFrames,false);
        s_logger.warning(""String_Node_Str"" + nextPlaybackTimeGap + ""String_Node_Str""+ silenceFrames+ ""String_Node_Str"");
      }
      long sleepNanos=Math.round(1e9 * Math.max(getBufferedSeconds() - LineBufferSafetyMarginSeconds,LineBufferSafetyMarginSeconds / 10.0));
      try {
        Thread.sleep(sleepNanos / 1000000,(int)(sleepNanos % 1000000));
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
 catch (  Throwable e) {
    s_logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    m_line.removeLineListener(this);
  }
}",0.976056338028169
151766,"public synchronized void sync(long nowRemoteFrameTime){
  m_remoteFrameTimeOffset=nowRemoteFrameTime - getNowFrameTime() - (int)m_format.getSampleRate();
  s_logger.info(""String_Node_Str"" + m_remoteFrameTimeOffset);
}","public synchronized void sync(long nowRemoteFrameTime){
  m_remoteFrameTimeOffset=nowRemoteFrameTime - getNowFrameTime();
  s_logger.info(""String_Node_Str"" + m_remoteFrameTimeOffset);
}",0.9203980099502488
151767,"public void close() throws InterruptedException {
  m_queueThread.interrupt();
  try {
    m_queueThread.join();
  }
 catch (  InterruptedException e) {
    s_logger.log(Level.WARNING,""String_Node_Str"",e);
    throw e;
  }
 finally {
    m_line.stop();
    m_line.close();
  }
}","public void close(){
  m_queueThread.interrupt();
  try {
    m_queueThread.join();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    s_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    m_line.stop();
    m_line.close();
  }
}",0.555956678700361
151768,"public void announceReceived(ChannelHandlerContext ctx,HttpRequest req) throws Exception {
  if (!req.containsHeader(""String_Node_Str""))   throw new ProtocolException(""String_Node_Str"");
  if (!""String_Node_Str"".equals(req.getHeader(""String_Node_Str"")))   throw new ProtocolException(""String_Node_Str"" + req.getHeader(""String_Node_Str""));
  final String dsp=req.getContent().toString(Charset.forName(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
  m_aesKey=null;
  m_aesIv=null;
  int alacFormatIndex=-1;
  int audioFormatIndex=-1;
  int descriptionFormatIndex=-1;
  String[] formatOptions=null;
  for (  final String line : dsp.split(""String_Node_Str"")) {
    final Matcher line_matcher=s_pattern_sdp_line.matcher(line);
    if (!line_matcher.matches())     throw new ProtocolException(""String_Node_Str"" + line);
    char attribute=line_matcher.group(1).charAt(0);
    String setting=line_matcher.group(2);
switch (attribute) {
case 'm':
      final Matcher m_matcher=s_pattern_sdp_m.matcher(setting);
    if (!m_matcher.matches())     throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ setting);
  audioFormatIndex=Integer.valueOf(m_matcher.group(2));
break;
case 'a':
final Matcher a_matcher=s_pattern_sdp_a.matcher(setting);
if (!a_matcher.matches()) throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ setting);
final String key=a_matcher.group(1);
final String value=a_matcher.group(2);
if (""String_Node_Str"".equals(key)) {
final Matcher a_rtpmap_matcher=s_pattern_sdp_a_rtpmap.matcher(value);
if (!a_rtpmap_matcher.matches()) throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ value);
final int formatIdx=Integer.valueOf(a_rtpmap_matcher.group(1));
final String format=a_rtpmap_matcher.group(2);
if (""String_Node_Str"".equals(format)) alacFormatIndex=formatIdx;
}
 else if (""String_Node_Str"".equals(key)) {
final String[] parts=value.split(""String_Node_Str"");
descriptionFormatIndex=Integer.valueOf(parts[0]);
formatOptions=Arrays.copyOfRange(parts,1,parts.length);
}
 else if (""String_Node_Str"".equals(key)) {
byte[] aesKeyRaw;
synchronized (s_rsaPkCS1OaepCipher) {
s_rsaPkCS1OaepCipher.init(Cipher.DECRYPT_MODE,AirTunesKeys.PrivateKey);
aesKeyRaw=s_rsaPkCS1OaepCipher.doFinal(Base64.decodeUnpadded(value));
}
m_aesKey=new SecretKeySpec(aesKeyRaw,""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(key)) {
m_aesIv=new IvParameterSpec(Base64.decodeUnpadded(value));
}
break;
default :
break;
}
}
if (alacFormatIndex != audioFormatIndex) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
if (audioFormatIndex != descriptionFormatIndex) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
if (formatOptions == null) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
m_audioDecodeHandler=new RaopRtpAudioAlacDecodeHandler(formatOptions);
final HttpResponse response=new DefaultHttpResponse(RtspVersions.RTSP_1_0,RtspResponseStatuses.OK);
ctx.getChannel().write(response);
}","public void announceReceived(ChannelHandlerContext ctx,HttpRequest req) throws Exception {
  if (!req.containsHeader(""String_Node_Str""))   throw new ProtocolException(""String_Node_Str"");
  if (!""String_Node_Str"".equals(req.getHeader(""String_Node_Str"")))   throw new ProtocolException(""String_Node_Str"" + req.getHeader(""String_Node_Str""));
  final String dsp=req.getContent().toString(Charset.forName(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
  m_aesKey=null;
  m_aesIv=null;
  int alacFormatIndex=-1;
  int audioFormatIndex=-1;
  int descriptionFormatIndex=-1;
  String[] formatOptions=null;
  for (  final String line : dsp.split(""String_Node_Str"")) {
    final Matcher line_matcher=s_pattern_sdp_line.matcher(line);
    if (!line_matcher.matches())     throw new ProtocolException(""String_Node_Str"" + line);
    char attribute=line_matcher.group(1).charAt(0);
    String setting=line_matcher.group(2);
switch (attribute) {
case 'm':
      final Matcher m_matcher=s_pattern_sdp_m.matcher(setting);
    if (!m_matcher.matches())     throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ setting);
  audioFormatIndex=Integer.valueOf(m_matcher.group(2));
break;
case 'a':
final Matcher a_matcher=s_pattern_sdp_a.matcher(setting);
if (!a_matcher.matches()) throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ setting);
final String key=a_matcher.group(1);
final String value=a_matcher.group(2);
if (""String_Node_Str"".equals(key)) {
final Matcher a_rtpmap_matcher=s_pattern_sdp_a_rtpmap.matcher(value);
if (!a_rtpmap_matcher.matches()) throw new ProtocolException(""String_Node_Str"" + attribute + ""String_Node_Str""+ value);
final int formatIdx=Integer.valueOf(a_rtpmap_matcher.group(1));
final String format=a_rtpmap_matcher.group(2);
if (""String_Node_Str"".equals(format)) alacFormatIndex=formatIdx;
}
 else if (""String_Node_Str"".equals(key)) {
final String[] parts=value.split(""String_Node_Str"");
descriptionFormatIndex=Integer.valueOf(parts[0]);
formatOptions=Arrays.copyOfRange(parts,1,parts.length);
}
 else if (""String_Node_Str"".equals(key)) {
byte[] aesKeyRaw;
m_rsaPkCS1OaepCipher.init(Cipher.DECRYPT_MODE,AirTunesKeys.PrivateKey);
aesKeyRaw=m_rsaPkCS1OaepCipher.doFinal(Base64.decodeUnpadded(value));
m_aesKey=new SecretKeySpec(aesKeyRaw,""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(key)) {
m_aesIv=new IvParameterSpec(Base64.decodeUnpadded(value));
}
break;
default :
break;
}
}
if (alacFormatIndex != audioFormatIndex) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
if (audioFormatIndex != descriptionFormatIndex) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
if (formatOptions == null) throw new ProtocolException(""String_Node_Str"" + audioFormatIndex + ""String_Node_Str"");
m_audioDecodeHandler=new RaopRtpAudioAlacDecodeHandler(formatOptions);
final HttpResponse response=new DefaultHttpResponse(RtspVersions.RTSP_1_0,RtspResponseStatuses.OK);
ctx.getChannel().write(response);
}",0.9928432010409888
151769,"public void setupReceived(ChannelHandlerContext ctx,HttpRequest req) throws ProtocolException, InterruptedException {
  if (!req.containsHeader(HeaderTransport))   throw new ProtocolException(""String_Node_Str"");
  final Deque<String> requestOptions=new java.util.LinkedList<String>(Arrays.asList(req.getHeader(HeaderTransport).split(""String_Node_Str"")));
  final List<String> responseOptions=new java.util.LinkedList<String>();
  final String requestProtocol=requestOptions.removeFirst();
  if (!""String_Node_Str"".equals(requestProtocol))   throw new ProtocolException(""String_Node_Str"" + requestProtocol);
  responseOptions.add(requestProtocol);
  for (  final String requestOption : requestOptions) {
    final Matcher m_transportOption=s_pattern_transportOption.matcher(requestOption);
    if (!m_transportOption.matches())     throw new ProtocolException(""String_Node_Str"" + requestOption);
    final String key=m_transportOption.group(1);
    final String value=m_transportOption.group(3);
    if (""String_Node_Str"".equals(key)) {
      if (!""String_Node_Str"".equals(value))       throw new ProtocolException(""String_Node_Str"" + value);
      responseOptions.add(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (!""String_Node_Str"".equals(value))       throw new ProtocolException(""String_Node_Str"" + value);
      responseOptions.add(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(key)) {
      int clientControlPort=Integer.valueOf(value);
      m_clientControlAddress=substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(),clientControlPort);
      m_controlChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),RaopRtpChannelType.Control);
      s_logger.info(""String_Node_Str"" + m_controlChannel.getLocalAddress());
      responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_controlChannel.getLocalAddress()).getPort());
    }
 else     if (""String_Node_Str"".equals(key)) {
      int clientTimingPort=Integer.valueOf(value);
      m_clientTimingAddress=substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(),clientTimingPort);
      m_timingChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),RaopRtpChannelType.Timing);
      s_logger.info(""String_Node_Str"" + m_timingChannel.getLocalAddress());
      responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_timingChannel.getLocalAddress()).getPort());
    }
 else {
      responseOptions.add(requestOption);
    }
  }
  m_audioChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),RaopRtpChannelType.Audio);
  s_logger.info(""String_Node_Str"" + m_audioChannel.getLocalAddress());
  responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_audioChannel.getLocalAddress()).getPort());
  final StringBuilder transportResponseBuilder=new StringBuilder();
  for (  String responseOption : responseOptions) {
    if (transportResponseBuilder.length() > 0)     transportResponseBuilder.append(""String_Node_Str"");
    transportResponseBuilder.append(responseOption);
  }
  final HttpResponse response=new DefaultHttpResponse(RtspVersions.RTSP_1_0,RtspResponseStatuses.OK);
  response.addHeader(HeaderTransport,transportResponseBuilder.toString());
  response.addHeader(HeaderSession,""String_Node_Str"");
  ctx.getChannel().write(response);
}","public void setupReceived(ChannelHandlerContext ctx,HttpRequest req) throws ProtocolException {
  if (!req.containsHeader(HeaderTransport))   throw new ProtocolException(""String_Node_Str"");
  final Deque<String> requestOptions=new java.util.LinkedList<String>(Arrays.asList(req.getHeader(HeaderTransport).split(""String_Node_Str"")));
  final List<String> responseOptions=new java.util.LinkedList<String>();
  final String requestProtocol=requestOptions.removeFirst();
  if (!""String_Node_Str"".equals(requestProtocol))   throw new ProtocolException(""String_Node_Str"" + requestProtocol);
  responseOptions.add(requestProtocol);
  for (  final String requestOption : requestOptions) {
    final Matcher m_transportOption=s_pattern_transportOption.matcher(requestOption);
    if (!m_transportOption.matches())     throw new ProtocolException(""String_Node_Str"" + requestOption);
    final String key=m_transportOption.group(1);
    final String value=m_transportOption.group(3);
    if (""String_Node_Str"".equals(key)) {
      if (!""String_Node_Str"".equals(value))       throw new ProtocolException(""String_Node_Str"" + value);
      responseOptions.add(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (!""String_Node_Str"".equals(value))       throw new ProtocolException(""String_Node_Str"" + value);
      responseOptions.add(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(key)) {
      int clientControlPort=Integer.valueOf(value);
      m_controlChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(),clientControlPort),RaopRtpChannelType.Control);
      s_logger.info(""String_Node_Str"" + m_controlChannel.getLocalAddress());
      responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_controlChannel.getLocalAddress()).getPort());
    }
 else     if (""String_Node_Str"".equals(key)) {
      int clientTimingPort=Integer.valueOf(value);
      m_timingChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(),clientTimingPort),RaopRtpChannelType.Timing);
      s_logger.info(""String_Node_Str"" + m_timingChannel.getLocalAddress());
      responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_timingChannel.getLocalAddress()).getPort());
    }
 else {
      responseOptions.add(requestOption);
    }
  }
  m_audioChannel=createRtpChannel(substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(),0),null,RaopRtpChannelType.Audio);
  s_logger.info(""String_Node_Str"" + m_audioChannel.getLocalAddress());
  responseOptions.add(""String_Node_Str"" + ((InetSocketAddress)m_audioChannel.getLocalAddress()).getPort());
  final StringBuilder transportResponseBuilder=new StringBuilder();
  for (  String responseOption : responseOptions) {
    if (transportResponseBuilder.length() > 0)     transportResponseBuilder.append(""String_Node_Str"");
    transportResponseBuilder.append(responseOption);
  }
  final HttpResponse response=new DefaultHttpResponse(RtspVersions.RTSP_1_0,RtspResponseStatuses.OK);
  response.addHeader(HeaderTransport,transportResponseBuilder.toString());
  response.addHeader(HeaderSession,""String_Node_Str"");
  ctx.getChannel().write(response);
}",0.7646885149099498
151770,"@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  if (m_audioOutputQueue != null) {
    s_logger.info(""String_Node_Str"");
    m_audioOutputQueue.close();
  }
}","@Override public synchronized void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  s_logger.info(""String_Node_Str"");
  if (m_audioOutputQueue != null)   m_audioOutputQueue.close();
  if (m_audioChannel != null)   m_audioChannel.close();
  if (m_controlChannel != null)   m_controlChannel.close();
  if (m_timingChannel != null)   m_timingChannel.close();
}",0.560530679933665
151771,"@Override public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",AirReceiver.ChannelExecutionHandler);
  pipeline.addLast(""String_Node_Str"",m_exceptionLoggingHandler);
  pipeline.addLast(""String_Node_Str"",m_decodeHandler);
  pipeline.addLast(""String_Node_Str"",m_encodeHandler);
  pipeline.addLast(""String_Node_Str"",m_packetLoggingHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_audioToControlRouterUpstreamHandler);
  if (channelType.equals(RaopRtpChannelType.Control))   pipeline.addLast(""String_Node_Str"",m_controlToAudioRouterDownstreamHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_resendRequestHandler);
  if (channelType.equals(RaopRtpChannelType.Audio) && (m_decryptionHandler != null))   pipeline.addLast(""String_Node_Str"",m_decryptionHandler);
  if (channelType.equals(RaopRtpChannelType.Audio) && (m_audioDecodeHandler != null))   pipeline.addLast(""String_Node_Str"",m_audioDecodeHandler);
  if (channelType.equals(RaopRtpChannelType.Control))   pipeline.addLast(""String_Node_Str"",m_syncHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_audioEnqueueHandler);
  return pipeline;
}","@Override public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",AirReceiver.ChannelExecutionHandler);
  pipeline.addLast(""String_Node_Str"",m_exceptionLoggingHandler);
  pipeline.addLast(""String_Node_Str"",m_decodeHandler);
  pipeline.addLast(""String_Node_Str"",m_encodeHandler);
  pipeline.addLast(""String_Node_Str"",m_packetLoggingHandler);
  if (channelType.equals(RaopRtpChannelType.Timing))   pipeline.addLast(""String_Node_Str"",m_timeSourceHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_audioToControlRouterUpstreamHandler);
  if (channelType.equals(RaopRtpChannelType.Control))   pipeline.addLast(""String_Node_Str"",m_controlToAudioRouterDownstreamHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_resendRequestHandler);
  if (channelType.equals(RaopRtpChannelType.Audio) && (m_decryptionHandler != null))   pipeline.addLast(""String_Node_Str"",m_decryptionHandler);
  if (channelType.equals(RaopRtpChannelType.Audio) && (m_audioDecodeHandler != null))   pipeline.addLast(""String_Node_Str"",m_audioDecodeHandler);
  if (channelType.equals(RaopRtpChannelType.Control))   pipeline.addLast(""String_Node_Str"",m_syncHandler);
  if (channelType.equals(RaopRtpChannelType.Audio))   pipeline.addLast(""String_Node_Str"",m_audioEnqueueHandler);
  return pipeline;
}",0.9596541786743517
151772,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  HttpRequest req=(HttpRequest)evt.getMessage();
  HttpMethod method=req.getMethod();
  if (RaopRtspMethods.ANNOUNCE.equals(method)) {
    announceReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.SETUP.equals(method)) {
    setupReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.RECORD.equals(method)) {
    recordReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.FLUSH.equals(method)) {
    flushReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.TEARDOWN.equals(method)) {
    teardownReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.SET_PARAMETER.equals(method)) {
    setParameterReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.GET_PARAMETER.equals(method)) {
    getParameterReceived(ctx,req);
    return;
  }
  super.messageReceived(ctx,evt);
}","@Override public synchronized void messageReceived(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  HttpRequest req=(HttpRequest)evt.getMessage();
  HttpMethod method=req.getMethod();
  if (RaopRtspMethods.ANNOUNCE.equals(method)) {
    announceReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.SETUP.equals(method)) {
    setupReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.RECORD.equals(method)) {
    recordReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.FLUSH.equals(method)) {
    flushReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.TEARDOWN.equals(method)) {
    teardownReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.SET_PARAMETER.equals(method)) {
    setParameterReceived(ctx,req);
    return;
  }
 else   if (RaopRtspMethods.GET_PARAMETER.equals(method)) {
    getParameterReceived(ctx,req);
    return;
  }
  super.messageReceived(ctx,evt);
}",0.9930740543420352
151773,"@Override public void writeRequested(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  RaopRtpPacket packet=(RaopRtpPacket)evt.getMessage();
  if (!(packet instanceof RaopRtpPacket.RetransmitRequest)) {
    super.writeRequested(ctx,evt);
    return;
  }
  if (evt.getChannel() == m_controlChannel) {
    super.writeRequested(ctx,evt);
    return;
  }
  m_controlChannel.write(evt.getMessage(),evt.getRemoteAddress());
}","@Override public void writeRequested(ChannelHandlerContext ctx,MessageEvent evt) throws Exception {
  RaopRtpPacket packet=(RaopRtpPacket)evt.getMessage();
  if (!(packet instanceof RaopRtpPacket.RetransmitRequest)) {
    super.writeRequested(ctx,evt);
    return;
  }
  Channel controlChannel;
synchronized (RaopAudioHandler.this) {
    controlChannel=m_controlChannel;
  }
  if (evt.getChannel() == controlChannel) {
    super.writeRequested(ctx,evt);
    return;
  }
  controlChannel.write(evt.getMessage());
}",0.8595564941921858
151774,"private Channel createRtpChannel(final SocketAddress local,final RaopRtpChannelType channelType) throws InterruptedException {
  ConnectionlessBootstrap bootstrap=new ConnectionlessBootstrap(new NioDatagramChannelFactory(Executors.newCachedThreadPool()));
  bootstrap.setOption(""String_Node_Str"",new FixedReceiveBufferSizePredictorFactory(65535));
  bootstrap.setOption(""String_Node_Str"",65535);
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast(""String_Node_Str"",AirReceiver.ChannelExecutionHandler);
      pipeline.addLast(""String_Node_Str"",m_exceptionLoggingHandler);
      pipeline.addLast(""String_Node_Str"",m_decodeHandler);
      pipeline.addLast(""String_Node_Str"",m_encodeHandler);
      pipeline.addLast(""String_Node_Str"",m_packetLoggingHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_audioToControlRouterUpstreamHandler);
      if (channelType.equals(RaopRtpChannelType.Control))       pipeline.addLast(""String_Node_Str"",m_controlToAudioRouterDownstreamHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_resendRequestHandler);
      if (channelType.equals(RaopRtpChannelType.Audio) && (m_decryptionHandler != null))       pipeline.addLast(""String_Node_Str"",m_decryptionHandler);
      if (channelType.equals(RaopRtpChannelType.Audio) && (m_audioDecodeHandler != null))       pipeline.addLast(""String_Node_Str"",m_audioDecodeHandler);
      if (channelType.equals(RaopRtpChannelType.Control))       pipeline.addLast(""String_Node_Str"",m_syncHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_audioEnqueueHandler);
      return pipeline;
    }
  }
);
  Channel channel=bootstrap.bind(local);
  return channel;
}","private Channel createRtpChannel(final SocketAddress local,final SocketAddress remote,final RaopRtpChannelType channelType){
  ConnectionlessBootstrap bootstrap=new ConnectionlessBootstrap(new NioDatagramChannelFactory(Executors.newCachedThreadPool()));
  bootstrap.setOption(""String_Node_Str"",new FixedReceiveBufferSizePredictorFactory(65535));
  bootstrap.setOption(""String_Node_Str"",65535);
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast(""String_Node_Str"",AirReceiver.ChannelExecutionHandler);
      pipeline.addLast(""String_Node_Str"",m_exceptionLoggingHandler);
      pipeline.addLast(""String_Node_Str"",m_decodeHandler);
      pipeline.addLast(""String_Node_Str"",m_encodeHandler);
      pipeline.addLast(""String_Node_Str"",m_packetLoggingHandler);
      if (channelType.equals(RaopRtpChannelType.Timing))       pipeline.addLast(""String_Node_Str"",m_timeSourceHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_audioToControlRouterUpstreamHandler);
      if (channelType.equals(RaopRtpChannelType.Control))       pipeline.addLast(""String_Node_Str"",m_controlToAudioRouterDownstreamHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_resendRequestHandler);
      if (channelType.equals(RaopRtpChannelType.Audio) && (m_decryptionHandler != null))       pipeline.addLast(""String_Node_Str"",m_decryptionHandler);
      if (channelType.equals(RaopRtpChannelType.Audio) && (m_audioDecodeHandler != null))       pipeline.addLast(""String_Node_Str"",m_audioDecodeHandler);
      if (channelType.equals(RaopRtpChannelType.Control))       pipeline.addLast(""String_Node_Str"",m_syncHandler);
      if (channelType.equals(RaopRtpChannelType.Audio))       pipeline.addLast(""String_Node_Str"",m_audioEnqueueHandler);
      return pipeline;
    }
  }
);
  Channel channel=bootstrap.bind(local);
  if (remote != null)   channel.connect(remote);
  return channel;
}",0.93530135301353
151775,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  RaopRtpPacket.Audio alacPacket=(RaopRtpPacket.Audio)msg;
  final byte[] alacBytes=new byte[alacPacket.getPayload().capacity() + 3];
  alacPacket.getPayload().getBytes(0,alacBytes,0,alacPacket.getPayload().capacity());
  final int[] pcmSamples=new int[m_samplesPerFrame * 2];
  final int pcmSamplesBytes=AlacDecodeUtils.decode_frame(m_alacFile,alacBytes,pcmSamples,m_samplesPerFrame);
  final int pcmSamplesLength=pcmSamplesBytes / 4;
  Level level=Level.FINEST;
  if (s_logger.isLoggable(level))   s_logger.log(level,""String_Node_Str"" + alacBytes.length + ""String_Node_Str""+ pcmSamplesLength+ ""String_Node_Str"");
  if (pcmSamplesLength != m_samplesPerFrame)   throw new ProtocolException(""String_Node_Str"" + m_samplesPerFrame + ""String_Node_Str""+ pcmSamplesLength);
  RaopRtpPacket.Audio pcmPacket;
  if (alacPacket instanceof RaopRtpPacket.AudioTransmit) {
    pcmPacket=new RaopRtpPacket.AudioTransmit(pcmSamplesLength * 4);
    alacPacket.getBuffer().getBytes(0,pcmPacket.getBuffer(),0,RaopRtpPacket.AudioTransmit.HeaderLength);
  }
 else   if (alacPacket instanceof RaopRtpPacket.AudioRetransmit) {
    pcmPacket=new RaopRtpPacket.AudioRetransmit(pcmSamplesLength * 4);
    alacPacket.getBuffer().getBytes(0,pcmPacket.getBuffer(),0,RaopRtpPacket.AudioRetransmit.HeaderLength);
  }
 else   throw new ProtocolException(""String_Node_Str"" + alacPacket.getClass() + ""String_Node_Str"");
  for (int i=0; i < pcmSamples.length; ++i) {
    int pcmSampleUnsigned=pcmSamples[i] + 0x8000;
    pcmPacket.getPayload().setByte(2 * i,(pcmSampleUnsigned & 0xff00) >> 8);
    pcmPacket.getPayload().setByte(2 * i + 1,pcmSampleUnsigned & 0x00ff);
  }
  return pcmPacket;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  RaopRtpPacket.Audio alacPacket=(RaopRtpPacket.Audio)msg;
  final byte[] alacBytes=new byte[alacPacket.getPayload().capacity() + 3];
  alacPacket.getPayload().getBytes(0,alacBytes,0,alacPacket.getPayload().capacity());
  final int[] pcmSamples=new int[m_samplesPerFrame * 2];
  final int pcmSamplesBytes=AlacDecodeUtils.decode_frame(m_alacFile,alacBytes,pcmSamples,m_samplesPerFrame);
  final int pcmSamplesLength=pcmSamplesBytes / 4;
  Level level=Level.FINEST;
  if (s_logger.isLoggable(level))   s_logger.log(level,""String_Node_Str"" + alacBytes.length + ""String_Node_Str""+ pcmSamplesLength+ ""String_Node_Str"");
  if (pcmSamplesLength != m_samplesPerFrame)   throw new ProtocolException(""String_Node_Str"" + m_samplesPerFrame + ""String_Node_Str""+ pcmSamplesLength);
  RaopRtpPacket.Audio pcmPacket;
  if (alacPacket instanceof RaopRtpPacket.AudioTransmit) {
    pcmPacket=new RaopRtpPacket.AudioTransmit(pcmSamplesLength * 4);
    alacPacket.getBuffer().getBytes(0,pcmPacket.getBuffer(),0,RaopRtpPacket.AudioTransmit.Length);
  }
 else   if (alacPacket instanceof RaopRtpPacket.AudioRetransmit) {
    pcmPacket=new RaopRtpPacket.AudioRetransmit(pcmSamplesLength * 4);
    alacPacket.getBuffer().getBytes(0,pcmPacket.getBuffer(),0,RaopRtpPacket.AudioRetransmit.Length);
  }
 else   throw new ProtocolException(""String_Node_Str"" + alacPacket.getClass() + ""String_Node_Str"");
  for (int i=0; i < pcmSamples.length; ++i) {
    int pcmSampleUnsigned=pcmSamples[i] + 0x8000;
    pcmPacket.getPayload().setByte(2 * i,(pcmSampleUnsigned & 0xff00) >> 8);
    pcmPacket.getPayload().setByte(2 * i + 1,pcmSampleUnsigned & 0x00ff);
  }
  return pcmPacket;
}",0.9965909090909092
151776,"private void backup() throws IOException {
  if (server.config.properties.getBoolean(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
  announce(t(""String_Node_Str""));
  File copy;
  try {
    copy=makeTemporaryCopy();
    server.runCommand(""String_Node_Str"",null);
    zipBackup(copy);
  }
  finally {
    deleteRecursively(TEMP_DIRECTORY);
  }
  purgeOldBackups();
  announce(t(""String_Node_Str""));
}","private void backup() throws IOException {
  if (server.config.properties.getBoolean(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
  announce(t(""String_Node_Str""));
  File copy;
  try {
    copy=makeTemporaryCopy();
    server.runCommand(""String_Node_Str"",null);
    zipBackup(copy);
    this.tag=null;
  }
  finally {
    deleteRecursively(TEMP_DIRECTORY);
  }
  purgeOldBackups();
  announce(t(""String_Node_Str""));
}",0.9774078478002378
151777,"private static File getBackup(boolean old){
  File[] files=getAutoBackups();
  long firstCreatedTime=old ? Long.MAX_VALUE : 0;
  File firstCreatedFile=null;
  for (  File file : files) {
    long date;
    try {
      date=dateMillis(file);
    }
 catch (    ParseException e) {
      continue;
    }
    if ((old && date < firstCreatedTime) || (!old && date > firstCreatedTime)) {
      firstCreatedFile=file;
      firstCreatedTime=date;
    }
  }
  return firstCreatedFile;
}","/** 
 * Get newest / oldest backup (auto backup).
 * @param old
 * @return 
 */
private static File getBackup(boolean old){
  File[] files=getAutoBackups();
  long firstCreatedTime=old ? Long.MAX_VALUE : 0;
  File firstCreatedFile=null;
  for (  File file : files) {
    long date;
    try {
      date=dateMillis(file);
    }
 catch (    ParseException e) {
      continue;
    }
    if ((old && date < firstCreatedTime) || (!old && date > firstCreatedTime)) {
      firstCreatedFile=file;
      firstCreatedTime=date;
    }
  }
  return firstCreatedFile;
}",0.9227799227799228
151778,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  write(in.readInt());
break;
case 0x01:
write(packetId);
if (!isServerTunnel) {
write(in.readInt());
write(readUTF16());
copyNBytes(5);
break;
}
player.setEntityId(write(in.readInt()));
write(readUTF16());
write(in.readByte());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
write(in.readByte());
write(in.readByte());
if (isServerTunnel) {
in.readByte();
write((byte)server.config.properties.getInt(""String_Node_Str""));
}
 else {
write(in.readByte());
}
break;
case 0x02:
byte version=in.readByte();
String name=readUTF16();
boolean nameSet=false;
if (name.contains(""String_Node_Str"")) {
name=name.substring(0,name.indexOf(""String_Node_Str""));
}
if (name.equals(""String_Node_Str"") || !server.authenticator.isMinecraftUp) {
AuthRequest req=server.authenticator.getAuthRequest(player.getIPAddress());
if (req != null) {
name=req.playerName;
nameSet=server.authenticator.completeLogin(req,player);
}
if (req == null || !nameSet) {
if (!name.equals(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
player.addTMessage(Color.RED,""String_Node_Str"");
}
name=server.authenticator.getFreeGuestName();
player.setGuest(true);
nameSet=player.setName(name);
}
}
 else {
nameSet=player.setName(name);
if (nameSet) {
player.updateRealName(name);
}
}
if (player.isGuest() && !server.authenticator.allowGuestJoin()) {
player.kick(t(""String_Node_Str""));
nameSet=false;
}
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(version);
write(player.getName());
write(readUTF16());
write(in.readInt());
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
if (message.contains(""String_Node_Str"")) {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
 else {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
break;
}
if (isServerTunnel && server.config.properties.getBoolean(""String_Node_Str"")) {
if (server.config.properties.getBoolean(""String_Node_Str"") && server.getMessager().wasForwarded(message)) {
break;
}
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.config.properties.getBoolean(""String_Node_Str"")) {
break;
}
if (server.config.properties.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (message.charAt(0) == commandPrefix) {
message=player.parseCommand(message,false);
if (message == null) {
break;
}
write(packetId);
write(message);
return;
}
player.sendMessage(message);
}
break;
case 0x04:
write(packetId);
write(in.readLong());
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
copyItem();
break;
case 0x06:
write(packetId);
copyNBytes(12);
if (server.options.getBoolean(""String_Node_Str"")) {
server.eventhost.execute(server.eventhost.findEvent(""String_Node_Str""),player,true,null);
}
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
copyNBytes(1);
break;
case 0x08:
write(packetId);
player.updateHealth(write(in.readShort()));
player.getHealth();
write(in.readShort());
write(in.readFloat());
break;
case 0x09:
write(packetId);
if (!isServerTunnel) {
break;
}
player.setDimension(Dimension.get(write(in.readInt())));
write(in.readByte());
write(in.readByte());
write(in.readShort());
write(readUTF16());
if (server.options.getBoolean(""String_Node_Str"") && isServerTunnel) {
server.eventhost.execute(server.eventhost.findEvent(""String_Node_Str""),player,true,null);
}
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.config.properties.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (!player.getGroup().ignoreAreas) {
BlockPermission perm=server.config.blockPermission(player,coordinate);
if (!perm.use && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perm.destroy && status == BLOCK_DESTROYED_STATUS) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.ignoresChestLocks() || server.data.chests.canOpen(player,coordinate)) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
byte[] data=null;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
short dataLength=in.readShort();
if (dataLength != -1) {
data=new byte[dataLength];
in.readFully(data);
}
}
byte blockX=in.readByte();
byte blockY=in.readByte();
byte blockZ=in.readByte();
boolean writePacket=true;
boolean drop=false;
BlockPermission perm=server.config.blockPermission(player,coordinate,dropItem);
if (server.options.getBoolean(""String_Node_Str"")) {
player.checkButtonEvents(new Coordinate(x + (x < 0 ? 1 : 0),y + 1,z + (z < 0 ? 1 : 0)));
}
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if (!player.getGroup().ignoreAreas && ((dropItem != -1 && !perm.place) || !perm.use)) {
if (!perm.use) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (data != null) {
write((short)data.length);
out.write(data);
}
 else {
write((short)-1);
}
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
write(blockX);
write(blockY);
write(blockZ);
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
copyUnknownBlob();
}
 else {
skipNBytes(16);
skipUnknownBlob();
}
break;
case 0x15:
write(packetId);
copyNBytes(4);
copyItem();
copyNBytes(15);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
write(in.readByte());
write(in.readShort());
write(in.readShort());
write(in.readShort());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1a:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readShort());
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
byte destoryCount=write(in.readByte());
if (destoryCount > 0) {
copyNBytes(destoryCount * 4);
}
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x23:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x29:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readByte());
write(in.readShort());
break;
case 0x2a:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x2b:
write(packetId);
player.updateExperience(write(in.readFloat()),write(in.readShort()),write(in.readShort()));
break;
case 0x33:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readBoolean());
write(in.readShort());
write(in.readShort());
copyNBytes(write(in.readInt()));
break;
case 0x34:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readShort());
copyNBytes(write(in.readInt()));
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
short blockType=in.readShort();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(14);
break;
case 0x37:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
break;
case 0x38:
write(packetId);
copyNBytes(write(in.readShort()) * 12 + write(in.readInt()));
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
write(in.readFloat());
write(in.readFloat());
write(in.readFloat());
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readByte());
break;
case 0x3e:
write(packetId);
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readFloat());
write(in.readByte());
break;
case 0x46:
write(packetId);
write(in.readByte());
write(in.readByte());
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
boolean allow=true;
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=readUTF16();
byte unknownByte=in.readByte();
if (invtype == 0) {
Chest adjacent=server.data.chests.adjacentChest(player.openedChest());
if (!server.data.chests.isChest(player.openedChest())) {
if (adjacent == null) {
server.data.chests.addOpenChest(player.openedChest());
}
 else {
server.data.chests.giveLock(adjacent.owner,player.openedChest(),adjacent.name);
}
server.data.save();
}
if (!player.getGroup().ignoreAreas && (!server.config.blockPermission(player,player.openedChest()).chest || (adjacent != null && !server.config.blockPermission(player,adjacent.coordinate).chest))) {
player.addTMessage(Color.RED,""String_Node_Str"");
allow=false;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.ignoresChestLocks()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=(player.nextChestName() == null) ? t(""String_Node_Str"") : player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
allow=false;
}
}
if (!allow) {
write((byte)0x65);
write(id);
}
 else {
write(packetId);
write(id);
write(invtype);
write(typeString);
write(unknownByte);
}
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
write(in.readShort());
write(in.readByte());
copyItem();
break;
case 0x67:
write(packetId);
write(in.readByte());
write(in.readShort());
copyItem();
break;
case 0x68:
write(packetId);
write(in.readByte());
short count=write(in.readShort());
for (int c=0; c < count; ++c) {
copyItem();
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case 0x6b:
write(packetId);
write(in.readShort());
copyItem();
break;
case 0x6c:
write(packetId);
write(in.readByte());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
short length=in.readShort();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0x84:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(in.readByte());
short nbtLength=write(in.readShort());
if (nbtLength > 0) {
copyNBytes(nbtLength);
}
break;
case (byte)0xc3:
write(packetId);
write(in.readInt());
copyNBytes(write(in.readInt()));
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xc9:
write(packetId);
write(readUTF16());
write(in.readByte());
write(in.readShort());
break;
case (byte)0xca:
write(packetId);
write(in.readByte());
write(in.readByte());
write(in.readByte());
break;
case (byte)0xcb:
write(packetId);
write(readUTF16());
break;
case (byte)0xcc:
write(packetId);
write(readUTF16());
write(in.readByte());
write(in.readByte());
write(in.readByte());
write(in.readBoolean());
break;
case (byte)0xcd:
write(packetId);
write(in.readByte());
break;
case (byte)0xd3:
write(packetId);
copyNBytes(1);
copyVLC();
copyVLC();
copyVLC();
copyNBytes((int)copyVLC());
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 8);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xfa:
write(packetId);
write(readUTF16());
copyNBytes(write(in.readShort()));
break;
case (byte)0xfc:
byte[] sharedKey=new byte[in.readShort()];
in.readFully(sharedKey);
byte[] challengeTokenResponse=new byte[in.readShort()];
in.readFully(challengeTokenResponse);
if (!isServerTunnel) {
if (!player.clientEncryption.checkChallengeToken(challengeTokenResponse)) {
player.kick(""String_Node_Str"");
break;
}
player.clientEncryption.setEncryptedSharedKey(sharedKey);
sharedKey=player.serverEncryption.getEncryptedSharedKey();
}
if (!isServerTunnel && server.authenticator.useCustAuth(player) && !server.authenticator.onlineAuthenticate(player)) {
player.kick(t(""String_Node_Str"",""String_Node_Str""));
break;
}
write(packetId);
write((short)sharedKey.length);
write(sharedKey);
challengeTokenResponse=player.serverEncryption.encryptChallengeToken();
write((short)challengeTokenResponse.length);
write(challengeTokenResponse);
if (isServerTunnel) {
in=new DataInputStream(new BufferedInputStream(player.serverEncryption.encryptedInputStream(inputStream)));
out=new DataOutputStream(new BufferedOutputStream(player.clientEncryption.encryptedOutputStream(outputStream)));
}
 else {
in=new DataInputStream(new BufferedInputStream(player.clientEncryption.encryptedInputStream(inputStream)));
out=new DataOutputStream(new BufferedOutputStream(player.serverEncryption.encryptedOutputStream(outputStream)));
}
break;
case (byte)0xfd:
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
String serverId=readUTF16();
if (!server.authenticator.useCustAuth(player)) {
serverId=""String_Node_Str"";
}
 else {
serverId=player.getConnectionHash();
}
write(serverId);
byte[] keyBytes=new byte[in.readShort()];
in.readFully(keyBytes);
byte[] challengeToken=new byte[in.readShort()];
in.readFully(challengeToken);
player.serverEncryption.setPublicKey(keyBytes);
byte[] key=player.clientEncryption.getPublicKey();
write((short)key.length);
write(key);
write((short)challengeToken.length);
write(challengeToken);
player.serverEncryption.setChallengeToken(challengeToken);
player.clientEncryption.setChallengeToken(challengeToken);
break;
case (byte)0xfe:
write(packetId);
write(in.readByte());
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
if (reason.startsWith(""String_Node_Str"")) {
reason=String.format(""String_Node_Str"",Main.protocolVersion,Main.minecraftVersion,server.config.properties.get(""String_Node_Str""),server.playerList.size(),server.config.properties.getInt(""String_Node_Str""));
}
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
if (lastPacket != null) {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
}
packetFinished();
lastPacket=(packetId == 0x00) ? lastPacket : packetId;
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  write(in.readInt());
break;
case 0x01:
write(packetId);
if (!isServerTunnel) {
write(in.readInt());
write(readUTF16());
copyNBytes(5);
break;
}
player.setEntityId(write(in.readInt()));
write(readUTF16());
write(in.readByte());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
write(in.readByte());
write(in.readByte());
if (isServerTunnel) {
in.readByte();
write((byte)server.config.properties.getInt(""String_Node_Str""));
}
 else {
write(in.readByte());
}
break;
case 0x02:
byte version=in.readByte();
String name=readUTF16();
boolean nameSet=false;
if (name.contains(""String_Node_Str"")) {
name=name.substring(0,name.indexOf(""String_Node_Str""));
}
if (name.equals(""String_Node_Str"") || !server.authenticator.isMinecraftUp) {
AuthRequest req=server.authenticator.getAuthRequest(player.getIPAddress());
if (req != null) {
name=req.playerName;
nameSet=server.authenticator.completeLogin(req,player);
}
if (req == null || !nameSet) {
if (!name.equals(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
player.addTMessage(Color.RED,""String_Node_Str"");
}
name=server.authenticator.getFreeGuestName();
player.setGuest(true);
nameSet=player.setName(name);
}
}
 else {
nameSet=player.setName(name);
if (nameSet) {
player.updateRealName(name);
}
}
if (player.isGuest() && !server.authenticator.allowGuestJoin()) {
player.kick(t(""String_Node_Str""));
nameSet=false;
}
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(version);
write(player.getName());
write(readUTF16());
write(in.readInt());
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
if (message.contains(""String_Node_Str"")) {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
 else {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
break;
}
if (isServerTunnel && server.config.properties.getBoolean(""String_Node_Str"")) {
if (server.config.properties.getBoolean(""String_Node_Str"") && server.getMessager().wasForwarded(message)) {
break;
}
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.config.properties.getBoolean(""String_Node_Str"")) {
break;
}
if (server.config.properties.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (message.charAt(0) == commandPrefix) {
message=player.parseCommand(message,false);
if (message == null) {
break;
}
write(packetId);
write(message);
return;
}
player.sendMessage(message);
}
break;
case 0x04:
write(packetId);
write(in.readLong());
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
copyItem();
break;
case 0x06:
write(packetId);
copyNBytes(12);
if (server.options.getBoolean(""String_Node_Str"")) {
server.eventhost.execute(server.eventhost.findEvent(""String_Node_Str""),player,true,null);
}
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
copyNBytes(1);
break;
case 0x08:
write(packetId);
player.updateHealth(write(in.readShort()));
player.getHealth();
write(in.readShort());
write(in.readFloat());
break;
case 0x09:
write(packetId);
if (!isServerTunnel) {
break;
}
player.setDimension(Dimension.get(write(in.readInt())));
write(in.readByte());
write(in.readByte());
write(in.readShort());
write(readUTF16());
if (server.options.getBoolean(""String_Node_Str"") && isServerTunnel) {
server.eventhost.execute(server.eventhost.findEvent(""String_Node_Str""),player,true,null);
}
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.config.properties.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (!player.getGroup().ignoreAreas) {
BlockPermission perm=server.config.blockPermission(player,coordinate);
if (!perm.use && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perm.destroy && status == BLOCK_DESTROYED_STATUS) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.ignoresChestLocks() || server.data.chests.canOpen(player,coordinate)) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
byte[] data=null;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
short dataLength=in.readShort();
if (dataLength != -1) {
data=new byte[dataLength];
in.readFully(data);
}
}
byte blockX=in.readByte();
byte blockY=in.readByte();
byte blockZ=in.readByte();
boolean writePacket=true;
boolean drop=false;
BlockPermission perm=server.config.blockPermission(player,coordinate,dropItem);
if (server.options.getBoolean(""String_Node_Str"")) {
player.checkButtonEvents(new Coordinate(x + (x < 0 ? 1 : 0),y + 1,z + (z < 0 ? 1 : 0)));
}
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if (!player.getGroup().ignoreAreas && ((dropItem != -1 && !perm.place) || !perm.use)) {
if (!perm.use) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (data != null) {
write((short)data.length);
out.write(data);
}
 else {
write((short)-1);
}
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
write(blockX);
write(blockY);
write(blockZ);
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
copyUnknownBlob();
}
 else {
skipNBytes(16);
skipUnknownBlob();
}
break;
case 0x15:
write(packetId);
copyNBytes(4);
copyItem();
copyNBytes(15);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
write(in.readByte());
write(in.readShort());
write(in.readShort());
write(in.readShort());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1a:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readShort());
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
byte destoryCount=write(in.readByte());
if (destoryCount > 0) {
copyNBytes(destoryCount * 4);
}
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x23:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x29:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readByte());
write(in.readShort());
break;
case 0x2a:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x2b:
write(packetId);
player.updateExperience(write(in.readFloat()),write(in.readShort()),write(in.readShort()));
break;
case 0x33:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readBoolean());
write(in.readShort());
write(in.readShort());
copyNBytes(write(in.readInt()));
break;
case 0x34:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readShort());
copyNBytes(write(in.readInt()));
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
short blockType=in.readShort();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(14);
break;
case 0x37:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
break;
case 0x38:
write(packetId);
copyNBytes(write(in.readShort()) * 12 + write(in.readInt()));
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
write(in.readFloat());
write(in.readFloat());
write(in.readFloat());
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readByte());
break;
case 0x3e:
write(packetId);
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readFloat());
write(in.readByte());
break;
case 0x46:
write(packetId);
write(in.readByte());
write(in.readByte());
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
boolean allow=true;
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=readUTF16();
byte unknownByte=in.readByte();
if (invtype == 0) {
Chest adjacent=server.data.chests.adjacentChest(player.openedChest());
if (!server.data.chests.isChest(player.openedChest())) {
if (adjacent == null) {
server.data.chests.addOpenChest(player.openedChest());
}
 else {
server.data.chests.giveLock(adjacent.owner,player.openedChest(),adjacent.name);
}
server.data.save();
}
if (!player.getGroup().ignoreAreas && (!server.config.blockPermission(player,player.openedChest()).chest || (adjacent != null && !server.config.blockPermission(player,adjacent.coordinate).chest))) {
player.addTMessage(Color.RED,""String_Node_Str"");
allow=false;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.ignoresChestLocks()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=(player.nextChestName() == null) ? t(""String_Node_Str"") : player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
allow=false;
}
}
if (!allow) {
write((byte)0x65);
write(id);
}
 else {
write(packetId);
write(id);
write(invtype);
write(typeString);
write(unknownByte);
}
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
write(in.readShort());
write(in.readByte());
copyItem();
break;
case 0x67:
write(packetId);
write(in.readByte());
write(in.readShort());
copyItem();
break;
case 0x68:
write(packetId);
write(in.readByte());
short count=write(in.readShort());
for (int c=0; c < count; ++c) {
copyItem();
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case 0x6b:
write(packetId);
write(in.readShort());
copyItem();
break;
case 0x6c:
write(packetId);
write(in.readByte());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
short length=in.readShort();
write(length);
copyNBytes(length);
break;
case (byte)0x84:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(in.readByte());
short nbtLength=write(in.readShort());
if (nbtLength > 0) {
copyNBytes(nbtLength);
}
break;
case (byte)0xc3:
write(packetId);
write(in.readInt());
copyNBytes(write(in.readInt()));
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xc9:
write(packetId);
write(readUTF16());
write(in.readByte());
write(in.readShort());
break;
case (byte)0xca:
write(packetId);
write(in.readByte());
write(in.readByte());
write(in.readByte());
break;
case (byte)0xcb:
write(packetId);
write(readUTF16());
break;
case (byte)0xcc:
write(packetId);
write(readUTF16());
write(in.readByte());
write(in.readByte());
write(in.readByte());
write(in.readBoolean());
break;
case (byte)0xcd:
write(packetId);
write(in.readByte());
break;
case (byte)0xd3:
write(packetId);
copyNBytes(1);
copyVLC();
copyVLC();
copyVLC();
copyNBytes((int)copyVLC());
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 8);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xfa:
write(packetId);
write(readUTF16());
copyNBytes(write(in.readShort()));
break;
case (byte)0xfc:
byte[] sharedKey=new byte[in.readShort()];
in.readFully(sharedKey);
byte[] challengeTokenResponse=new byte[in.readShort()];
in.readFully(challengeTokenResponse);
if (!isServerTunnel) {
if (!player.clientEncryption.checkChallengeToken(challengeTokenResponse)) {
player.kick(""String_Node_Str"");
break;
}
player.clientEncryption.setEncryptedSharedKey(sharedKey);
sharedKey=player.serverEncryption.getEncryptedSharedKey();
}
if (!isServerTunnel && server.authenticator.useCustAuth(player) && !server.authenticator.onlineAuthenticate(player)) {
player.kick(t(""String_Node_Str"",""String_Node_Str""));
break;
}
write(packetId);
write((short)sharedKey.length);
write(sharedKey);
challengeTokenResponse=player.serverEncryption.encryptChallengeToken();
write((short)challengeTokenResponse.length);
write(challengeTokenResponse);
if (isServerTunnel) {
in=new DataInputStream(new BufferedInputStream(player.serverEncryption.encryptedInputStream(inputStream)));
out=new DataOutputStream(new BufferedOutputStream(player.clientEncryption.encryptedOutputStream(outputStream)));
}
 else {
in=new DataInputStream(new BufferedInputStream(player.clientEncryption.encryptedInputStream(inputStream)));
out=new DataOutputStream(new BufferedOutputStream(player.serverEncryption.encryptedOutputStream(outputStream)));
}
break;
case (byte)0xfd:
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
String serverId=readUTF16();
if (!server.authenticator.useCustAuth(player)) {
serverId=""String_Node_Str"";
}
 else {
serverId=player.getConnectionHash();
}
write(serverId);
byte[] keyBytes=new byte[in.readShort()];
in.readFully(keyBytes);
byte[] challengeToken=new byte[in.readShort()];
in.readFully(challengeToken);
player.serverEncryption.setPublicKey(keyBytes);
byte[] key=player.clientEncryption.getPublicKey();
write((short)key.length);
write(key);
write((short)challengeToken.length);
write(challengeToken);
player.serverEncryption.setChallengeToken(challengeToken);
player.clientEncryption.setChallengeToken(challengeToken);
break;
case (byte)0xfe:
write(packetId);
write(in.readByte());
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
if (reason.startsWith(""String_Node_Str"")) {
reason=String.format(""String_Node_Str"",Main.protocolVersion,Main.minecraftVersion,server.config.properties.get(""String_Node_Str""),server.playerList.size(),server.config.properties.getInt(""String_Node_Str""));
}
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
if (lastPacket != null) {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
}
packetFinished();
lastPacket=(packetId == 0x00) ? lastPacket : packetId;
}",0.9998217060186954
151779,"/** 
 * Checks if this server runs bukkit. Determined by existence of ""bukkit.yml"".
 * @return 
 */
public boolean isBukkitServer(){
  return new File(""String_Node_Str"").exists();
}","/** 
 * Checks if this server runs bukkit. Determined by existence of ""bukkit.yml"".
 */
public boolean isBukkitServer(){
  return new File(""String_Node_Str"").exists();
}",0.9657142857142856
151780,"/** 
 * Returns the main ""world"" directory, containing ""level.dat"", ""players"" etc.
 * @return 
 */
public File getWorldDirectory(){
  File file=new File(options.get(""String_Node_Str""));
  if (isBukkitServer()) {
    return new File(file,options.get(""String_Node_Str""));
  }
  return file;
}","/** 
 * Returns the main ""world"" directory, containing ""level.dat"", ""players"" etc.
 */
public File getWorldDirectory(){
  File file=new File(options.get(""String_Node_Str""));
  if (isBukkitServer()) {
    return new File(file,options.get(""String_Node_Str""));
  }
  return file;
}",0.9788732394366196
151781,"/** 
 * Returns the minecraft world dat-file.
 * @return 
 */
public File getWorldFile(){
  return new File(getWorldDirectory(),""String_Node_Str"");
}","/** 
 * Returns the minecraft world dat-file.
 */
public File getWorldFile(){
  return new File(getWorldDirectory(),""String_Node_Str"");
}",0.958041958041958
151782,"/** 
 * Returns the dat-file of player 'name'.
 * @param name
 * @return 
 */
public File getPlayerFile(String name){
  return new File(new File(getWorldDirectory(),""String_Node_Str""),name + ""String_Node_Str"");
}","/** 
 * Returns the dat-file of player 'name'.
 */
public File getPlayerFile(String name){
  return new File(new File(getWorldDirectory(),""String_Node_Str""),name + ""String_Node_Str"");
}",0.9319899244332494
151783,"/** 
 * Rollback to backup with tag 'tag'.
 * @param tag
 */
public void rollback(String tag) throws Exception {
  autoBackup.rollback(tag);
}","/** 
 * Rollback to backup with tag 'tag'.
 */
public void rollback(RollbackCommand.ExecCom com,String tag) throws Exception {
  autoBackup.rollback(com,tag);
}",0.847682119205298
151784,"@Override public void sendMsg(String m){
  feedback.send(m);
}",public void sendMsg(String msg);,0.6595744680851063
151785,"private void execute(BackupCommand.Com com){
  String[] args=extractArguments(com.getMessage());
  if (args.length != 1) {
    com.sendMsg(""String_Node_Str"");
    return;
  }
  if (args[0].charAt(0) == '@') {
    try {
      com.getServer().rollback(Integer.parseInt(args[0].substring(1,args[0].length())));
    }
 catch (    NumberFormatException ex) {
      com.sendMsg(""String_Node_Str"");
    }
catch (    Exception ex) {
      com.sendMsg(ex.getMessage());
    }
  }
 else {
    try {
      com.getServer().rollback(args[0]);
    }
 catch (    Exception ex) {
      com.sendMsg(ex.getMessage());
    }
  }
}","private void execute(final BackupCommand.Com com){
  String[] args=extractArguments(com.getMessage());
  if (args.length != 1 && args.length != 2) {
    com.sendMsg(""String_Node_Str"");
    return;
  }
  boolean f=false;
  int i=0;
  if (args[i].equals(""String_Node_Str"")) {
    f=true;
    i++;
  }
  final boolean force=f;
  if (args[i].charAt(0) == '@') {
    try {
      com.getServer().rollback(new ExecCom(){
        @Override public void sendWarningRollbackAborted(        String msg){
          sendMsg(msg + warning);
        }
        @Override public void sendErrorRollbackFail(        String msg){
          sendMsg(error + msg + afterError);
        }
        @Override public void sendMsg(        String msg){
          com.sendMsg(msg);
        }
        @Override public boolean isForce(){
          return force;
        }
      }
,Integer.parseInt(args[i].substring(1,args[i].length())));
    }
 catch (    NumberFormatException ex) {
      com.sendMsg(""String_Node_Str"");
    }
catch (    Exception ex) {
      com.sendMsg(ex.getMessage());
    }
  }
 else {
    try {
      com.getServer().rollback(new ExecCom(){
        @Override public void sendWarningRollbackAborted(        String msg){
          sendMsg(msg + warning);
        }
        @Override public void sendErrorRollbackFail(        String msg){
          com.sendMsg(error + msg + afterError);
        }
        @Override public void sendMsg(        String msg){
          com.sendMsg(msg);
        }
        @Override public boolean isForce(){
          return force;
        }
      }
,args[i]);
    }
 catch (    Exception ex) {
      com.sendMsg(ex.getMessage());
    }
  }
}",0.5032996040475143
151786,"public AutoBackup(Server server){
  this.server=server;
  BACKUP_AUTO_DIRECTORY.mkdirs();
  BACKUP_TAGGED_DIRECTORY.mkdirs();
  RESOURCES_MAP.add(server.getWorldDirectory());
  if (server.isBukkitServer()) {
    RESOURCES_CONFIG.addAll(RESOURCE_DIRS_CONFIG_BUKKIT);
  }
  purgeOldBackups();
  copyBuffer=new byte[8192];
  archiver=new Archiver();
  archiver.start();
  archiver.setName(""String_Node_Str"");
}","public AutoBackup(Server server){
  this.server=server;
  BACKUP_AUTO_DIRECTORY.mkdirs();
  BACKUP_TAGGED_DIRECTORY.mkdirs();
  RESOURCES_MAP.add(server.getMapDirectory());
  if (server.isBukkitServer()) {
    RESOURCES_CONFIG.addAll(RESOURCE_DIRS_CONFIG_BUKKIT);
  }
  purgeOldBackups();
  copyBuffer=new byte[8192];
  archiver=new Archiver();
  archiver.start();
  archiver.setName(""String_Node_Str"");
}",0.9901477832512317
151787,"/** 
 * Rollback to server status at backup 'rollback'.
 */
private void rollback() throws IOException {
  IO.unzip(rollback,TEMP_DIRECTORY);
  List<File> backup=new ArrayList<File>();
  File backupConfig=new File(TEMP_DIRECTORY,BACKUP_CONFIG_FOLDER);
  for (  File file : RESOURCES_CONFIG) {
    deleteRecursively(file);
    backup.add(new File(backupConfig,file.getName()));
  }
  File backupMap=new File(TEMP_DIRECTORY,BACKUP_MAP_FOLDER);
  for (  File file : RESOURCES_MAP) {
    deleteRecursively(file);
    backup.add(new File(backupMap,file.getName()));
  }
  File dest=new File(""String_Node_Str"");
  for (  File file : backup) {
    if (file.isDirectory()) {
      FileUtils.copyDirectoryToDirectory(file,dest);
    }
 else {
      FileUtils.copyFileToDirectory(file,dest);
    }
  }
  deleteRecursively(TEMP_DIRECTORY);
}","/** 
 * Rollback to server status at backup 'rollback'.
 */
private void rollback(){
  com.sendMsg(""String_Node_Str"");
  List<File> backup=new ArrayList<File>();
  File backupConfig=new File(TEMP_DIRECTORY,BACKUP_CONFIG_FOLDER);
  for (  File file : RESOURCES_CONFIG) {
    deleteRecursively(file);
    backup.add(new File(backupConfig,file.getName()));
  }
  File backupMap=new File(TEMP_DIRECTORY,BACKUP_MAP_FOLDER);
  for (  File file : RESOURCES_MAP) {
    deleteRecursively(file);
    backup.add(new File(backupMap,file.getName()));
  }
  File dest=new File(""String_Node_Str"");
  try {
    for (    File file : backup) {
      if (file.isDirectory()) {
        FileUtils.copyDirectoryToDirectory(file,dest);
      }
 else {
        FileUtils.copyFileToDirectory(file,dest);
      }
    }
  }
 catch (  IOException ex) {
    com.sendErrorRollbackFail(ex.getMessage());
  }
}",0.8665105386416861
151788,"private void doRollback(){
  server.manualRestart();
  try {
    rollback();
  }
 catch (  IOException ex) {
    println(""String_Node_Str"" + ex);
  }
  server.continueRestart();
}","private void doRollback(){
  prepareRollback();
  if (!com.isForce() && !canRollback()) {
    deleteRecursively(TEMP_DIRECTORY);
    return;
  }
  server.manualRestart();
  rollback();
  deleteRecursively(TEMP_DIRECTORY);
  server.continueRestart();
}",0.2651162790697674
151789,"/** 
 * Prepare the backup archive.
 * @return
 * @throws IOException 
 */
private File makeTemporaryCopy() throws IOException {
  Date date=new Date();
  File backup=new File(TEMP_DIRECTORY,String.format(NAME_FORMAT,date));
  File backupConfig=new File(backup,BACKUP_CONFIG_FOLDER);
  File backupMap=new File(backup,BACKUP_MAP_FOLDER);
  for (  File file : RESOURCES_CONFIG) {
    copy(file,new File(backupConfig,file.getName()));
  }
  for (  File file : RESOURCES_MAP) {
    copy(file,new File(backupMap,file.getName()));
  }
  PrintWriter out=new PrintWriter(new File(backup,""String_Node_Str""));
  out.println(""String_Node_Str"" + VERSION);
  out.print(""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(date));
  out.close();
  return backup;
}","/** 
 * Prepare the backup archive.
 * @return
 * @throws IOException 
 */
private File makeTemporaryCopy() throws IOException {
  Date date=new Date();
  File backup=new File(TEMP_DIRECTORY,String.format(NAME_FORMAT,date));
  File backupConfig=new File(backup,BACKUP_CONFIG_FOLDER);
  File backupMap=new File(backup,BACKUP_MAP_FOLDER);
  for (  File file : RESOURCES_CONFIG) {
    copy(file,new File(backupConfig,file.getName()));
  }
  for (  File file : RESOURCES_MAP) {
    copy(file,new File(backupMap,file.getName()));
  }
  PrintWriter out=new PrintWriter(new File(backup,""String_Node_Str""));
  out.println(""String_Node_Str"" + VERSION);
  out.print(""String_Node_Str"");
  if (server.isBukkitServer()) {
    out.println(""String_Node_Str"");
  }
 else {
    out.println(""String_Node_Str"");
  }
  out.print(""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(date));
  out.close();
  return backup;
}",0.908982748364069
151790,"public boolean loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (globalConfig.loadsuccess) {
    config=globalConfig.config;
  }
 else {
    System.out.println(""String_Node_Str"");
    return false;
  }
  if (!Translations.getInstance().setLanguage(config.properties.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!config.properties.getBoolean(""String_Node_Str""));
  saveResources();
  if (eventhost != null) {
    eventhost.loadEvents();
  }
  return globalConfig.loadsuccess;
}","public boolean loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (globalConfig.loadsuccess) {
    config=globalConfig.config;
  }
 else {
    System.out.println(""String_Node_Str"");
    return false;
  }
  if (!Translations.getInstance().setLanguage(config.properties.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!config.properties.getBoolean(""String_Node_Str""));
  if (eventhost != null) {
    eventhost.loadEvents();
  }
  saveResources();
  return globalConfig.loadsuccess;
}",0.9715994020926756
151791,"public void saveResources(){
  for (  Resource resource : resources) {
    resource.save();
  }
}","public void saveResources(){
  if (eventhost != null) {
    eventhost.saveGlobalVars();
  }
  for (  Resource resource : resources) {
    resource.save();
  }
}",0.754863813229572
151792,"public void loadEvents(){
  if (running != null) {
    for (    String k : running.keySet()) {
      running.get(k).stopping=true;
      running.get(k).interrupt();
    }
  }
  npcs=new ConcurrentHashMap<String,NpcBot>();
  running=new HashMap<String,RunningEvent>();
  events=new ConcurrentHashMap<Event,Long>();
  Iterator<Event> it=server.config.events.iterator();
  while (it.hasNext()) {
    Event ev=it.next();
    events.put(ev,(long)0);
  }
}","public void loadEvents(){
  try {
    if (running != null) {
      for (      String k : running.keySet()) {
        running.get(k).stopping=true;
        running.get(k).interrupt();
      }
    }
  }
 catch (  Exception e) {
  }
  npcs=new ConcurrentHashMap<String,NpcBot>();
  running=new HashMap<String,RunningEvent>();
  events=new ConcurrentHashMap<Event,Long>();
  globals=new ConcurrentHashMap<String,String>();
  Iterator<Event> it=server.config.events.iterator();
  while (it.hasNext()) {
    Event ev=it.next();
    events.put(ev,(long)0);
    globals.put(ev.name,ev.value);
  }
}",0.8653846153846154
151793,"private void assignVariable(String symbol,String value){
  if (symbol == null || symbol.length() < 2) {
    return;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  char scope=symbol.charAt(0);
  String var=symbol.substring(1);
  if (scope == LOCALSCOPE) {
    vars.put(var,value);
  }
 else   if (scope == PLAYERSCOPE) {
    player.vars.put(var,value);
  }
 else   if (scope == GLOBALSCOPE) {
    eventHost.globalVarLock.lock();
    Event e=eventHost.findEvent(var);
    if (e != null) {
      e.value=value;
    }
    eventHost.globalVarLock.unlock();
  }
 else {
    notifyError(""String_Node_Str"");
  }
}","private void assignVariable(String symbol,String value){
  if (symbol == null || symbol.length() < 2) {
    return;
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  char scope=symbol.charAt(0);
  String var=symbol.substring(1);
  if (scope == LOCALSCOPE) {
    vars.put(var,value);
  }
 else   if (scope == PLAYERSCOPE) {
    player.vars.put(var,value);
  }
 else   if (scope == GLOBALSCOPE) {
    if (eventHost.globals.containsKey(var)) {
      eventHost.globals.put(var,value);
    }
 else {
      notifyError(""String_Node_Str"" + var + ""String_Node_Str"");
    }
  }
 else {
    notifyError(""String_Node_Str"");
  }
}",0.7376
151794,"protected String evaluateVar(String varname){
  if (varname == null || varname.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (varname.charAt(0) == REFERENCEOP) {
    char c=varname.charAt(1);
    if (c == LOCALSCOPE || c == PLAYERSCOPE || c == GLOBALSCOPE) {
      return varname.substring(1);
    }
 else {
      return null;
    }
  }
 else   if (varname.charAt(0) == LOCALSCOPE) {
    String loc=varname.substring(1);
    if (loc.equals(""String_Node_Str"")) {
      return player != null ? player.getName() : ""String_Node_Str"";
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return event.name;
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return ""String_Node_Str"" + event.name;
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return event.value;
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return String.valueOf(event.coordinate);
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.remove(0);
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.get(0);
    }
 else     if (eventHost.colors.containsKey(loc)) {
      return ""String_Node_Str"" + eventHost.colors.get(loc);
    }
 else {
      String v=vars.get(loc);
      if (v == null) {
        vars.put(loc,""String_Node_Str"");
        v=""String_Node_Str"";
      }
      return String.valueOf(v);
    }
  }
 else   if (varname.charAt(0) == PLAYERSCOPE) {
    return String.valueOf(player.vars.get(varname.substring(1)));
  }
 else   if (varname.charAt(0) == GLOBALSCOPE) {
    eventHost.globalVarLock.lock();
    Event ev=eventHost.findEvent(varname.substring(1));
    if (ev == null) {
      notifyError(""String_Node_Str"");
      eventHost.globalVarLock.unlock();
      return ""String_Node_Str"";
    }
 else {
      eventHost.globalVarLock.unlock();
      return String.valueOf(ev.value);
    }
  }
  return null;
}","protected String evaluateVar(String varname){
  if (varname == null || varname.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (varname.charAt(0) == REFERENCEOP) {
    char c=varname.charAt(1);
    if (c == LOCALSCOPE || c == PLAYERSCOPE || c == GLOBALSCOPE) {
      return varname.substring(1);
    }
 else {
      return null;
    }
  }
 else   if (varname.charAt(0) == LOCALSCOPE) {
    String loc=varname.substring(1);
    if (loc.equals(""String_Node_Str"")) {
      return player != null ? player.getName() : ""String_Node_Str"";
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return event.name;
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return ""String_Node_Str"" + event.name;
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return eventHost.globals.get(event.name);
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return String.valueOf(event.coordinate);
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.remove(0);
    }
 else     if (loc.equals(""String_Node_Str"")) {
      return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.get(0);
    }
 else     if (eventHost.colors.containsKey(loc)) {
      return ""String_Node_Str"" + eventHost.colors.get(loc);
    }
 else {
      String v=vars.get(loc);
      if (v == null) {
        vars.put(loc,""String_Node_Str"");
        v=""String_Node_Str"";
      }
      return String.valueOf(v);
    }
  }
 else   if (varname.charAt(0) == PLAYERSCOPE) {
    return String.valueOf(player.vars.get(varname.substring(1)));
  }
 else   if (varname.charAt(0) == GLOBALSCOPE) {
    String name=varname.substring(1);
    if (eventHost.globals.containsKey(name)) {
      String ret=eventHost.globals.get(name);
      return ret;
    }
 else {
      notifyError(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.8915968519928916
151795,"private static File getBackup(boolean old){
  BACKUP_AUTO_DIRECTORY.mkdir();
  File[] files=BACKUP_AUTO_DIRECTORY.listFiles(new FileFilter(){
    public boolean accept(    File file){
      return file.isFile() && file.getPath().contains(""String_Node_Str"");
    }
  }
);
  long firstCreatedTime=old ? Long.MAX_VALUE : 0;
  File firstCreatedFile=null;
  for (  File file : files) {
    long date;
    try {
      date=date(file);
    }
 catch (    ParseException e) {
      continue;
    }
    if ((old && date < firstCreatedTime) || (!old && date > firstCreatedTime)) {
      firstCreatedFile=file;
      firstCreatedTime=date;
    }
  }
  return firstCreatedFile;
}","private static File getBackup(boolean old){
  BACKUP_AUTO_DIRECTORY.mkdirs();
  BACKUP_TAGGED_DIRECTORY.mkdirs();
  File[] files=BACKUP_AUTO_DIRECTORY.listFiles(new FileFilter(){
    public boolean accept(    File file){
      return file.isFile() && file.getPath().contains(""String_Node_Str"");
    }
  }
);
  long firstCreatedTime=old ? Long.MAX_VALUE : 0;
  File firstCreatedFile=null;
  for (  File file : files) {
    long date;
    try {
      date=date(file);
    }
 catch (    ParseException e) {
      continue;
    }
    if ((old && date < firstCreatedTime) || (!old && date > firstCreatedTime)) {
      firstCreatedFile=file;
      firstCreatedTime=date;
    }
  }
  return firstCreatedFile;
}",0.972972972972973
151796,"private void backup() throws IOException {
  if (server.config.properties.getBoolean(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
  announce(t(""String_Node_Str""));
  server.runCommand(""String_Node_Str"",null);
  File copy;
  try {
    copy=makeTemporaryCopy();
    server.runCommand(""String_Node_Str"",null);
    zipBackup(copy);
  }
  finally {
    deleteRecursively(TEMP_DIRECTORY);
  }
  purgeOldBackups();
  announce(t(""String_Node_Str""));
}","private void backup() throws IOException {
  if (server.config.properties.getBoolean(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
  }
  announce(t(""String_Node_Str""));
  File copy;
  try {
    copy=makeTemporaryCopy();
    server.runCommand(""String_Node_Str"",null);
    zipBackup(copy);
  }
  finally {
    deleteRecursively(TEMP_DIRECTORY);
  }
  purgeOldBackups();
  announce(t(""String_Node_Str""));
}",0.9493813273340832
151797,"@Override public void run(){
  while (run) {
    if (needsBackup()) {
      try {
        server.saveLock.acquire();
      }
 catch (      InterruptedException e) {
        continue;
      }
      forceBackup=false;
      server.autoSpaceCheck.check(true);
      if (server.config.properties.getBoolean(""String_Node_Str"")) {
        server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
      }
      server.setSaving(true);
      server.runCommand(""String_Node_Str"",null);
      while (server.isSaving()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
      try {
        backup();
      }
 catch (      IOException e) {
        server.errorLog(e,""String_Node_Str"");
        System.out.println(""String_Node_Str"" + e);
        System.out.println(""String_Node_Str"");
      }
      server.saveLock.release();
      if (server.numPlayers() == 0) {
        pauseBackup=true;
      }
    }
    if (pauseBackup && server.numPlayers() > 0) {
      pauseBackup=false;
    }
    try {
      Thread.sleep(60000);
    }
 catch (    InterruptedException e) {
    }
  }
}","@Override public void run(){
  while (run) {
    if (needsBackup()) {
      try {
        server.saveLock.acquire();
      }
 catch (      InterruptedException e) {
        continue;
      }
      forceBackup=false;
      if (server.config.properties.getBoolean(""String_Node_Str"")) {
        server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
      }
      server.setSaving(true);
      server.runCommand(""String_Node_Str"",null);
      while (server.isSaving()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
      server.runCommand(""String_Node_Str"",null);
      server.autoSpaceCheck.check(true);
      try {
        backup();
      }
 catch (      IOException e) {
        server.errorLog(e,""String_Node_Str"");
        System.out.println(""String_Node_Str"" + e);
        System.out.println(""String_Node_Str"");
      }
      server.saveLock.release();
      if (server.numPlayers() == 0) {
        pauseBackup=true;
      }
    }
    if (pauseBackup && server.numPlayers() > 0) {
      pauseBackup=false;
    }
    try {
      Thread.sleep(60000);
    }
 catch (    InterruptedException e) {
    }
  }
}",0.9433145824318476
151798,"public void check(boolean beforeBackup){
  try {
    long neededSizeKb=0;
    if (beforeBackup) {
      neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(new File(server.options.get(""String_Node_Str""))) / 1024) * 2;
      File world_nether=new File(server.options.get(""String_Node_Str"") + ""String_Node_Str"");
      if (world_nether.exists()) {
        neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(world_nether) / 1024) * 2;
      }
      File plugins=new File(""String_Node_Str"");
      if (plugins.exists()) {
        neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(plugins) / 1024) * 2;
      }
    }
 else {
      neededSizeKb=50 * 1024;
    }
    long freeSpaceKb=FileSystemUtils.freeSpaceKb();
    if (freeSpaceKb < neededSizeKb) {
      System.out.println(""String_Node_Str"" + Math.round(freeSpaceKb / 1024) + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      int filesDeleted=0;
      while (FileSystemUtils.freeSpaceKb() < neededSizeKb) {
        File firstCreatedFile=AutoBackup.oldestBackup();
        if (firstCreatedFile != null) {
          System.out.println(""String_Node_Str"" + firstCreatedFile.getPath());
          firstCreatedFile.delete();
          filesDeleted++;
        }
 else {
          System.out.println(""String_Node_Str"");
          return;
        }
      }
      if (filesDeleted > 1) {
        System.out.println(""String_Node_Str"" + filesDeleted + ""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.out.println(""String_Node_Str"");
  }
}","public void check(boolean beforeBackup){
  try {
    long neededSizeKb=0;
    if (beforeBackup) {
      neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(new File(server.options.get(""String_Node_Str""))) / 1024) * 2;
      File world_nether=new File(server.options.get(""String_Node_Str"") + ""String_Node_Str"");
      if (world_nether.exists()) {
        neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(world_nether) / 1024) * 2;
      }
      File plugins=new File(""String_Node_Str"");
      if (plugins.exists()) {
        neededSizeKb+=Math.round(FileUtils.sizeOfDirectory(plugins) / 1024) * 2;
      }
    }
 else {
      neededSizeKb=50 * 1024;
    }
    long freeSpaceKb=FileSystemUtils.freeSpaceKb();
    if (freeSpaceKb < neededSizeKb) {
      System.out.println(""String_Node_Str"" + Math.round(freeSpaceKb / 1024) + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      int filesDeleted=0;
      while (FileSystemUtils.freeSpaceKb() < neededSizeKb) {
        File firstCreatedFile=AutoBackup.oldestBackup();
        if (firstCreatedFile != null) {
          System.out.println(""String_Node_Str"" + firstCreatedFile.getPath());
          firstCreatedFile.delete();
          filesDeleted++;
        }
 else {
          System.out.println(""String_Node_Str"");
          return;
        }
      }
      if (filesDeleted > 1) {
        System.out.println(""String_Node_Str"" + filesDeleted + ""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.out.println(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + e);
    System.out.println(""String_Node_Str"");
  }
}",0.960847806888431
151799,"public void run(){
  if (running)   return;
  running=true;
  String script=event.script;
  if (threadstack == null)   threadstack=new ArrayList<String>();
  ArrayList<String> actions=new ArrayList<String>(java.util.Arrays.asList(script.split(""String_Node_Str"")));
  currline=0;
  while (currline < actions.size()) {
    this.lastline=actions.get(currline);
    ArrayList<String> tokens=parseLine(lastline);
    evaluateVariables(tokens);
    if (tokens.size() == 0) {
      currline++;
      continue;
    }
    String cmd=tokens.remove(0);
    if (cmd.equals(""String_Node_Str""))     return;
 else     if (cmd.equals(""String_Node_Str"") || cmd.equals(""String_Node_Str"")) {
      currline++;
      continue;
    }
 else     if (cmd.equals(""String_Node_Str"") && tokens.size() > 0)     System.out.println(""String_Node_Str"" + String.valueOf(currline) + ""String_Node_Str""+ event.name+ ""String_Node_Str""+ tokens.get(0));
 else     if (cmd.equals(""String_Node_Str"") && tokens.size() > 0)     try {
      Thread.sleep(Integer.valueOf(tokens.get(0)));
    }
 catch (    Exception e) {
    }
 else     if (cmd.equals(""String_Node_Str""))     say(tokens);
 else     if (cmd.equals(""String_Node_Str""))     give(tokens);
 else     if (cmd.equals(""String_Node_Str""))     teleport(tokens);
 else     if (cmd.equals(""String_Node_Str""))     set(tokens);
 else     if (cmd.equals(""String_Node_Str""))     push(tokens);
 else     if (cmd.equals(""String_Node_Str""))     cmdrun(tokens);
 else     if (cmd.equals(""String_Node_Str""))     condition(tokens,actions);
 else     if (cmd.equals(""String_Node_Str""))     currline=ifstack.remove(0);
 else     if (cmd.equals(""String_Node_Str""))     loop(tokens,actions);
 else     if (cmd.equals(""String_Node_Str""))     currline=whilestack.remove(0);
 else     notifyError(""String_Node_Str"");
    currline++;
  }
}","public void run(){
  if (running)   return;
  running=true;
  String script=event.script;
  if (script == null)   return;
  if (threadstack == null)   threadstack=new ArrayList<String>();
  ArrayList<String> actions=new ArrayList<String>(java.util.Arrays.asList(script.split(""String_Node_Str"")));
  currline=0;
  while (currline < actions.size()) {
    this.lastline=actions.get(currline);
    ArrayList<String> tokens=parseLine(lastline);
    evaluateVariables(tokens);
    if (tokens.size() == 0) {
      currline++;
      continue;
    }
    String cmd=tokens.remove(0);
    if (cmd.equals(""String_Node_Str""))     return;
 else     if (cmd.equals(""String_Node_Str"") || cmd.equals(""String_Node_Str"")) {
      currline++;
      continue;
    }
 else     if (cmd.equals(""String_Node_Str"") && tokens.size() > 0)     System.out.println(""String_Node_Str"" + String.valueOf(currline) + ""String_Node_Str""+ event.name+ ""String_Node_Str""+ tokens.get(0));
 else     if (cmd.equals(""String_Node_Str"") && tokens.size() > 0)     try {
      Thread.sleep(Integer.valueOf(tokens.get(0)));
    }
 catch (    Exception e) {
    }
 else     if (cmd.equals(""String_Node_Str""))     say(tokens);
 else     if (cmd.equals(""String_Node_Str"") && tokens.size() > 0)     server.runCommand(""String_Node_Str"",tokens.get(0));
 else     if (cmd.equals(""String_Node_Str""))     give(tokens);
 else     if (cmd.equals(""String_Node_Str""))     teleport(tokens);
 else     if (cmd.equals(""String_Node_Str""))     set(tokens);
 else     if (cmd.equals(""String_Node_Str""))     push(tokens);
 else     if (cmd.equals(""String_Node_Str""))     cmdrun(tokens);
 else     if (cmd.equals(""String_Node_Str""))     condition(tokens,actions);
 else     if (cmd.equals(""String_Node_Str""))     currline=ifstack.remove(0);
 else     if (cmd.equals(""String_Node_Str""))     loop(tokens,actions);
 else     if (cmd.equals(""String_Node_Str""))     currline=whilestack.remove(0);
 else     notifyError(""String_Node_Str"");
    currline++;
  }
}",0.9538784067085954
151800,"private String evaluatePostfixExp(ArrayList<String> tokens){
  ArrayList<String> expstack=new ArrayList<String>();
  try {
    while (tokens.size() > 0) {
      String elem=tokens.remove(0);
      if (elem.equals(""String_Node_Str"")) {
        boolean b=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(!b));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        boolean b2=toBool(expstack.remove(0));
        boolean b1=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(b1 && b2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        boolean b2=toBool(expstack.remove(0));
        boolean b1=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(b1 || b2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 + d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 - d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 * d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 / d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 % d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d=toNum(expstack.remove(0));
        expstack.add(String.valueOf(rng.nextInt((int)d)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String v2=expstack.remove(0);
        String v1=expstack.remove(0);
        expstack.add(0,String.valueOf(v1.equals(v2)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 > d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 < d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s2=expstack.remove(0);
        String s1=expstack.remove(0);
        expstack.add(0,s1 + s2);
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s2=expstack.remove(0);
        String s1=expstack.remove(0);
        expstack.add(0,s1 + ""String_Node_Str"" + s2);
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        String v=evaluateVar(s);
        if (v != null)         expstack.add(0,v);
 else {
          notifyError(""String_Node_Str"" + s + ""String_Node_Str"");
          expstack.add(0,""String_Node_Str"");
        }
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(toNum(s)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(toBool(s)));
      }
 else       expstack.add(0,elem);
    }
  }
 catch (  Exception e) {
    notifyError(""String_Node_Str"");
    return null;
  }
  if (expstack.size() != 1) {
    notifyError(""String_Node_Str"");
    return null;
  }
  return expstack.get(0);
}","private String evaluatePostfixExp(ArrayList<String> tokens){
  ArrayList<String> expstack=new ArrayList<String>();
  try {
    while (tokens.size() > 0) {
      String elem=tokens.remove(0);
      if (elem.equals(""String_Node_Str"")) {
        boolean b=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(!b));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        boolean b2=toBool(expstack.remove(0));
        boolean b1=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(b1 && b2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        boolean b2=toBool(expstack.remove(0));
        boolean b1=toBool(expstack.remove(0));
        expstack.add(0,String.valueOf(b1 || b2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 + d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 - d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 * d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 / d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 % d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d=toNum(expstack.remove(0));
        expstack.add(String.valueOf(rng.nextInt((int)d)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String v2=expstack.remove(0);
        String v1=expstack.remove(0);
        expstack.add(0,String.valueOf(v1.equals(v2)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 > d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        long d2=toNum(expstack.remove(0));
        long d1=toNum(expstack.remove(0));
        expstack.add(0,String.valueOf(d1 < d2));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s2=expstack.remove(0);
        String s1=expstack.remove(0);
        expstack.add(0,s1 + s2);
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s2=expstack.remove(0);
        String s1=expstack.remove(0);
        expstack.add(0,s1 + ""String_Node_Str"" + s2);
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        String v=evaluateVar(s);
        if (v != null)         expstack.add(0,v);
 else {
          notifyError(""String_Node_Str"" + s + ""String_Node_Str"");
          expstack.add(0,""String_Node_Str"");
        }
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(toNum(s)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(toBool(s)));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(s.equals(""String_Node_Str"")));
      }
 else       if (elem.equals(""String_Node_Str"")) {
        String s=expstack.remove(0);
        expstack.add(0,String.valueOf(s.length()));
      }
 else       expstack.add(0,elem);
    }
  }
 catch (  Exception e) {
    notifyError(""String_Node_Str"");
    return null;
  }
  if (expstack.size() != 1) {
    notifyError(""String_Node_Str"");
    return null;
  }
  return expstack.get(0);
}",0.9589004889652438
151801,"private String evaluateVar(String varname){
  if (varname == null || varname.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (varname.charAt(0) == REFERENCEOP)   return varname.substring(1);
 else   if (varname.charAt(0) == LOCALSCOPE) {
    String loc=varname.substring(1);
    if (loc.equals(""String_Node_Str""))     return player != null ? player.getName() : ""String_Node_Str"";
 else     if (loc.equals(""String_Node_Str""))     return event.name;
 else     if (loc.equals(""String_Node_Str""))     return ""String_Node_Str"" + event.name;
 else     if (loc.equals(""String_Node_Str""))     return event.value;
 else     if (loc.equals(""String_Node_Str""))     return String.valueOf(event.coordinate);
 else     if (loc.equals(""String_Node_Str""))     return String.valueOf(System.currentTimeMillis());
 else     if (loc.equals(""String_Node_Str""))     return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.remove(0);
 else     if (server.eventhost.colors.containsKey(loc))     return ""String_Node_Str"" + server.eventhost.colors.get(loc);
 else     return String.valueOf(vars.get(loc));
  }
 else   if (varname.charAt(0) == PLAYERSCOPE) {
    return String.valueOf(player.vars.get(varname.substring(1)));
  }
 else   if (varname.charAt(0) == GLOBALSCOPE) {
    Event ev=server.eventhost.findEvent(varname.substring(1));
    if (ev == null) {
      notifyError(""String_Node_Str"");
      return ""String_Node_Str"";
    }
 else     return String.valueOf(ev.value);
  }
  return null;
}","private String evaluateVar(String varname){
  if (varname == null || varname.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (varname.charAt(0) == REFERENCEOP)   return varname.substring(1);
 else   if (varname.charAt(0) == LOCALSCOPE) {
    String loc=varname.substring(1);
    if (loc.equals(""String_Node_Str""))     return player != null ? player.getName() : ""String_Node_Str"";
 else     if (loc.equals(""String_Node_Str""))     return event.name;
 else     if (loc.equals(""String_Node_Str""))     return ""String_Node_Str"" + event.name;
 else     if (loc.equals(""String_Node_Str""))     return event.value;
 else     if (loc.equals(""String_Node_Str""))     return String.valueOf(event.coordinate);
 else     if (loc.equals(""String_Node_Str""))     return String.valueOf(System.currentTimeMillis());
 else     if (loc.equals(""String_Node_Str""))     return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.remove(0);
 else     if (loc.equals(""String_Node_Str""))     return threadstack.size() == 0 ? ""String_Node_Str"" : threadstack.get(0);
 else     if (server.eventhost.colors.containsKey(loc))     return ""String_Node_Str"" + server.eventhost.colors.get(loc);
 else     return String.valueOf(vars.get(loc));
  }
 else   if (varname.charAt(0) == PLAYERSCOPE) {
    return String.valueOf(player.vars.get(varname.substring(1)));
  }
 else   if (varname.charAt(0) == GLOBALSCOPE) {
    Event ev=server.eventhost.findEvent(varname.substring(1));
    if (ev == null) {
      notifyError(""String_Node_Str"");
      return ""String_Node_Str"";
    }
 else     return String.valueOf(ev.value);
  }
  return null;
}",0.9607969151670952
151802,"@Override void saveAttributes(AttributeList attributes){
  attributes.addAttribute(NAME,name);
  if (coordinate != null)   attributes.addAttribute(COORDINATE,coordinate.toString());
  if (interval != 0)   attributes.addAttribute(INTERVAL,interval);
  if (script != null && !script.equals(""String_Node_Str""))   attributes.setValue(""String_Node_Str"",script);
  if (allow != null)   attributes.addAttribute(ALLOW,allow);
  if (disabled)   attributes.addAttribute(DISABLED,""String_Node_Str"");
  if (isbutton)   attributes.addAttribute(ISBUTTON,""String_Node_Str"");
  if (!value.equals(""String_Node_Str""))   attributes.addAttribute(VALUE,value);
  if (coordinate.dimension() != Coordinate.Dimension.get(""String_Node_Str""))   attributes.addAttribute(DIMENSION,coordinate.dimension().toString());
}","@Override void saveAttributes(AttributeList attributes){
  attributes.addAttribute(NAME,name);
  if (interval != 0)   attributes.addAttribute(INTERVAL,interval);
  if (script != null && !script.equals(""String_Node_Str""))   attributes.setValue(""String_Node_Str"",script);
  if (allow != null)   attributes.addAttribute(ALLOW,allow);
  if (disabled)   attributes.addAttribute(DISABLED,""String_Node_Str"");
  if (isbutton)   attributes.addAttribute(ISBUTTON,""String_Node_Str"");
  if (coordinate != null)   attributes.addAttribute(COORDINATE,coordinate.toString());
  if (coordinate != null && coordinate.dimension() != Coordinate.Dimension.get(""String_Node_Str""))   attributes.addAttribute(DIMENSION,coordinate.dimension().toString());
  if (!value.equals(""String_Node_Str""))   attributes.addAttribute(VALUE,value);
}",0.4219725343320848
151803,"@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(""String_Node_Str"")) {
    allow=new Permission(value);
  }
 else   if (name.equals(""String_Node_Str"")) {
    argument=value;
  }
}","@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(""String_Node_Str"")) {
    allow=new Permission(value);
  }
 else   if (name.equals(""String_Node_Str"")) {
    content(value);
  }
}",0.9375
151804,"@Override protected void executeWithTarget(Server server,String message,String target,CommandFeedback feedback){
  mute(server,name);
  server.adminLog(""String_Node_Str"" + name);
  feedback.send(""String_Node_Str"",target);
}","@Override protected void executeWithTarget(Server server,String message,String target,CommandFeedback feedback){
  unmute(server,target);
  server.adminLog(""String_Node_Str"" + target);
  feedback.send(""String_Node_Str"",target);
}",0.9026548672566372
151805,"protected void handlePacket(byte packetId) throws IOException {
switch (packetId) {
case 0x2:
    readUTF16();
  login();
break;
case 0x1:
in.readInt();
readUTF16();
in.readLong();
in.readInt();
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readByte();
break;
case 0x0d:
double x=in.readDouble();
double stance=in.readDouble();
double y=in.readDouble();
double z=in.readDouble();
float yaw=in.readFloat();
float pitch=in.readFloat();
boolean onGround=in.readBoolean();
position.updatePosition(x,y,z,stance);
position.updateLook(yaw,pitch);
position.updateGround(onGround);
if (!ready) {
sendPosition();
ready();
}
 else if (dead) {
sendPosition();
dead=false;
}
positionUpdate();
break;
case 0x0b:
double x2=in.readDouble();
double stance2=in.readDouble();
double y2=in.readDouble();
double z2=in.readDouble();
boolean onGround2=in.readBoolean();
position.updatePosition(x2,y2,z2,stance2);
position.updateGround(onGround2);
positionUpdate();
break;
case (byte)0xff:
String reason=readUTF16();
error(reason);
break;
case 0x00:
keepAlive(in.readInt());
break;
case 0x03:
readUTF16();
break;
case 0x04:
in.readLong();
break;
case 0x05:
in.readInt();
in.readShort();
in.readShort();
in.readShort();
break;
case 0x06:
readNBytes(12);
break;
case 0x07:
in.readInt();
in.readInt();
in.readBoolean();
in.readBoolean();
break;
case 0x08:
health=in.readShort();
in.readShort();
in.readFloat();
if (health <= 0) {
dead=true;
respawn();
}
break;
case 0x09:
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readShort();
in.readLong();
break;
case 0x0a:
in.readByte();
break;
case 0x0c:
readNBytes(9);
break;
case 0x0e:
in.readByte();
in.readInt();
in.readByte();
in.readInt();
in.readByte();
break;
case 0x0f:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
readItem();
break;
case 0x10:
readNBytes(2);
break;
case 0x11:
readNBytes(14);
break;
case 0x12:
readNBytes(5);
break;
case 0x13:
in.readInt();
in.readByte();
break;
case 0x14:
in.readInt();
readUTF16();
readNBytes(16);
break;
case 0x15:
readNBytes(24);
break;
case 0x16:
readNBytes(8);
break;
case 0x17:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
int flag=in.readInt();
if (flag > 0) {
in.readShort();
in.readShort();
in.readShort();
}
break;
case 0x18:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
in.readByte();
in.readByte();
readUnknownBlob();
break;
case 0x19:
in.readInt();
readUTF16();
in.readInt();
in.readInt();
in.readInt();
in.readInt();
break;
case 0x1a:
in.readInt();
in.readInt();
in.readInt();
in.readInt();
in.readShort();
break;
case 0x1c:
readNBytes(10);
break;
case 0x1d:
readNBytes(4);
break;
case 0x1e:
readNBytes(4);
break;
case 0x1f:
readNBytes(7);
break;
case 0x20:
readNBytes(6);
break;
case 0x21:
readNBytes(9);
break;
case 0x22:
readNBytes(18);
break;
case 0x26:
readNBytes(5);
break;
case 0x27:
readNBytes(8);
break;
case 0x28:
in.readInt();
readUnknownBlob();
break;
case 0x29:
in.readInt();
in.readByte();
in.readByte();
in.readShort();
break;
case 0x2a:
in.readInt();
in.readByte();
break;
case 0x2b:
in.readFloat();
in.readShort();
in.readShort();
break;
case 0x32:
readNBytes(9);
break;
case 0x33:
readNBytes(13);
int chunkSize=in.readInt();
readNBytes(chunkSize);
break;
case 0x34:
readNBytes(8);
short arraySize=in.readShort();
readNBytes(arraySize * 4);
break;
case 0x35:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
in.readByte();
break;
case 0x36:
readNBytes(12);
break;
case 0x3c:
readNBytes(28);
int recordCount=in.readInt();
readNBytes(recordCount * 3);
break;
case 0x3d:
in.readInt();
in.readInt();
in.readByte();
in.readInt();
in.readInt();
break;
case 0x46:
readNBytes(2);
break;
case 0x47:
readNBytes(17);
break;
case 0x64:
in.readByte();
in.readByte();
readUTF16();
in.readByte();
break;
case 0x65:
in.readByte();
break;
case 0x66:
in.readByte();
in.readShort();
in.readByte();
in.readShort();
in.readBoolean();
readItem();
break;
case 0x67:
in.readByte();
in.readShort();
readItem();
break;
case 0x68:
in.readByte();
short count=in.readShort();
for (int c=0; c < count; ++c) {
readItem();
}
break;
case 0x69:
in.readByte();
in.readShort();
in.readShort();
break;
case 0x6a:
in.readByte();
in.readShort();
in.readByte();
break;
case 0x6b:
in.readShort();
readItem();
break;
case (byte)0x6c:
readNBytes(2);
break;
case (byte)0x82:
in.readInt();
in.readShort();
in.readInt();
readUTF16();
readUTF16();
readUTF16();
readUTF16();
break;
case (byte)0x83:
in.readShort();
in.readShort();
byte length=in.readByte();
readNBytes(0xff & length);
break;
case (byte)0xc8:
readNBytes(5);
break;
case (byte)0xc9:
readUTF16();
in.readBoolean();
in.readShort();
break;
case (byte)0xe6:
in.readInt();
in.readInt();
readNBytes(in.readInt() * 4);
readNBytes(in.readInt() * 4);
int sizeString=in.readInt();
for (int i=0; i < sizeString; i++) {
readNBytes(in.readInt());
}
break;
case (byte)0xfa:
readUTF16();
short arrayLength=in.readShort();
readNBytes(0xff & arrayLength);
break;
case (byte)0xfe:
break;
default :
error(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
lastPacket=packetId;
}","protected void handlePacket(byte packetId) throws IOException {
switch (packetId) {
case 0x2:
    readUTF16();
  login();
break;
case 0x1:
in.readInt();
readUTF16();
in.readLong();
readUTF16();
in.readInt();
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readByte();
break;
case 0x0d:
double x=in.readDouble();
double stance=in.readDouble();
double y=in.readDouble();
double z=in.readDouble();
float yaw=in.readFloat();
float pitch=in.readFloat();
boolean onGround=in.readBoolean();
position.updatePosition(x,y,z,stance);
position.updateLook(yaw,pitch);
position.updateGround(onGround);
if (!ready) {
sendPosition();
ready();
}
 else if (dead) {
sendPosition();
dead=false;
}
positionUpdate();
break;
case 0x0b:
double x2=in.readDouble();
double stance2=in.readDouble();
double y2=in.readDouble();
double z2=in.readDouble();
boolean onGround2=in.readBoolean();
position.updatePosition(x2,y2,z2,stance2);
position.updateGround(onGround2);
positionUpdate();
break;
case (byte)0xff:
String reason=readUTF16();
error(reason);
break;
case 0x00:
keepAlive(in.readInt());
break;
case 0x03:
readUTF16();
break;
case 0x04:
in.readLong();
break;
case 0x05:
in.readInt();
in.readShort();
in.readShort();
in.readShort();
break;
case 0x06:
readNBytes(12);
break;
case 0x07:
in.readInt();
in.readInt();
in.readBoolean();
in.readBoolean();
break;
case 0x08:
health=in.readShort();
in.readShort();
in.readFloat();
if (health <= 0) {
dead=true;
respawn();
}
break;
case 0x09:
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readShort();
in.readLong();
readUTF16();
break;
case 0x0a:
in.readByte();
break;
case 0x0c:
readNBytes(9);
break;
case 0x0e:
in.readByte();
in.readInt();
in.readByte();
in.readInt();
in.readByte();
break;
case 0x0f:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
readItem();
break;
case 0x10:
readNBytes(2);
break;
case 0x11:
readNBytes(14);
break;
case 0x12:
readNBytes(5);
break;
case 0x13:
in.readInt();
in.readByte();
break;
case 0x14:
in.readInt();
readUTF16();
readNBytes(16);
break;
case 0x15:
readNBytes(24);
break;
case 0x16:
readNBytes(8);
break;
case 0x17:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
int flag=in.readInt();
if (flag > 0) {
in.readShort();
in.readShort();
in.readShort();
}
break;
case 0x18:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
in.readByte();
in.readByte();
readUnknownBlob();
break;
case 0x19:
in.readInt();
readUTF16();
in.readInt();
in.readInt();
in.readInt();
in.readInt();
break;
case 0x1a:
in.readInt();
in.readInt();
in.readInt();
in.readInt();
in.readShort();
break;
case 0x1c:
readNBytes(10);
break;
case 0x1d:
readNBytes(4);
break;
case 0x1e:
readNBytes(4);
break;
case 0x1f:
readNBytes(7);
break;
case 0x20:
readNBytes(6);
break;
case 0x21:
readNBytes(9);
break;
case 0x22:
readNBytes(18);
break;
case 0x26:
readNBytes(5);
break;
case 0x27:
readNBytes(8);
break;
case 0x28:
in.readInt();
readUnknownBlob();
break;
case 0x29:
in.readInt();
in.readByte();
in.readByte();
in.readShort();
break;
case 0x2a:
in.readInt();
in.readByte();
break;
case 0x2b:
in.readFloat();
in.readShort();
in.readShort();
break;
case 0x32:
readNBytes(9);
break;
case 0x33:
readNBytes(13);
int chunkSize=in.readInt();
readNBytes(chunkSize);
break;
case 0x34:
readNBytes(8);
short arraySize=in.readShort();
readNBytes(arraySize * 4);
break;
case 0x35:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
in.readByte();
break;
case 0x36:
readNBytes(12);
break;
case 0x3c:
readNBytes(28);
int recordCount=in.readInt();
readNBytes(recordCount * 3);
break;
case 0x3d:
in.readInt();
in.readInt();
in.readByte();
in.readInt();
in.readInt();
break;
case 0x46:
readNBytes(2);
break;
case 0x47:
readNBytes(17);
break;
case 0x64:
in.readByte();
in.readByte();
readUTF16();
in.readByte();
break;
case 0x65:
in.readByte();
break;
case 0x66:
in.readByte();
in.readShort();
in.readByte();
in.readShort();
in.readBoolean();
readItem();
break;
case 0x67:
in.readByte();
in.readShort();
readItem();
break;
case 0x68:
in.readByte();
short count=in.readShort();
for (int c=0; c < count; ++c) {
readItem();
}
break;
case 0x69:
in.readByte();
in.readShort();
in.readShort();
break;
case 0x6a:
in.readByte();
in.readShort();
in.readByte();
break;
case 0x6b:
in.readShort();
readItem();
break;
case (byte)0x6c:
readNBytes(2);
break;
case (byte)0x82:
in.readInt();
in.readShort();
in.readInt();
readUTF16();
readUTF16();
readUTF16();
readUTF16();
break;
case (byte)0x83:
in.readShort();
in.readShort();
byte length=in.readByte();
readNBytes(0xff & length);
break;
case (byte)0xc8:
readNBytes(5);
break;
case (byte)0xc9:
readUTF16();
in.readBoolean();
in.readShort();
break;
case (byte)0xe6:
in.readInt();
in.readInt();
readNBytes(in.readInt() * 4);
readNBytes(in.readInt() * 4);
int sizeString=in.readInt();
for (int i=0; i < sizeString; i++) {
readNBytes(in.readInt());
}
break;
case (byte)0xfa:
readUTF16();
short arrayLength=in.readShort();
readNBytes(0xff & arrayLength);
break;
case (byte)0xfe:
break;
default :
error(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
lastPacket=packetId;
}",0.4326514859127749
151806,"private void respawn() throws IOException {
  writeLock.lock();
  out.writeByte(9);
  out.writeByte(position.dimension.index());
  out.writeByte(0);
  out.writeShort(128);
  out.writeLong(0);
  writeLock.unlock();
}","private void respawn() throws IOException {
  writeLock.lock();
  out.writeByte(9);
  out.writeByte(position.dimension.index());
  out.writeByte(0);
  out.writeShort(128);
  out.writeLong(0);
  write(readUTF16());
  writeLock.unlock();
}",0.9513274336283186
151807,"protected void handlePacket(byte packetId) throws IOException {
switch (packetId) {
case 0x2:
    readUTF16();
  login();
break;
case 0x1:
in.readInt();
readUTF16();
in.readLong();
in.readInt();
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readByte();
break;
case 0x0d:
double x=in.readDouble();
double stance=in.readDouble();
double y=in.readDouble();
double z=in.readDouble();
float yaw=in.readFloat();
float pitch=in.readFloat();
boolean onGround=in.readBoolean();
position.updatePosition(x,y,z,stance);
position.updateLook(yaw,pitch);
position.updateGround(onGround);
if (!ready) {
sendPosition();
ready();
}
 else if (dead) {
sendPosition();
dead=false;
}
positionUpdate();
break;
case 0x0b:
double x2=in.readDouble();
double stance2=in.readDouble();
double y2=in.readDouble();
double z2=in.readDouble();
boolean onGround2=in.readBoolean();
position.updatePosition(x2,y2,z2,stance2);
position.updateGround(onGround2);
positionUpdate();
break;
case (byte)0xff:
String reason=readUTF16();
error(reason);
break;
case 0x00:
keepAlive(in.readInt());
break;
case 0x03:
readUTF16();
break;
case 0x04:
in.readLong();
break;
case 0x05:
in.readInt();
in.readShort();
in.readShort();
in.readShort();
break;
case 0x06:
readNBytes(12);
break;
case 0x07:
in.readInt();
in.readInt();
in.readBoolean();
in.readBoolean();
break;
case 0x08:
health=in.readShort();
in.readShort();
in.readFloat();
if (health <= 0) {
dead=true;
respawn();
}
break;
case 0x09:
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readShort();
in.readLong();
break;
case 0x0a:
in.readByte();
break;
case 0x0c:
readNBytes(9);
break;
case 0x0e:
in.readByte();
in.readInt();
in.readByte();
in.readInt();
in.readByte();
break;
case 0x0f:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
readItem();
break;
case 0x10:
readNBytes(2);
break;
case 0x11:
readNBytes(14);
break;
case 0x12:
readNBytes(5);
break;
case 0x13:
in.readInt();
in.readByte();
break;
case 0x14:
in.readInt();
readUTF16();
readNBytes(16);
break;
case 0x15:
readNBytes(24);
break;
case 0x16:
readNBytes(8);
break;
case 0x17:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
int flag=in.readInt();
if (flag > 0) {
in.readShort();
in.readShort();
in.readShort();
}
break;
case 0x18:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
in.readByte();
in.readByte();
readUnknownBlob();
break;
case 0x19:
in.readInt();
readUTF16();
in.readInt();
in.readInt();
in.readInt();
in.readInt();
break;
case 0x1a:
in.readInt();
in.readInt();
in.readInt();
in.readInt();
in.readShort();
break;
case 0x1b:
readNBytes(18);
break;
case 0x1c:
readNBytes(10);
break;
case 0x1d:
readNBytes(4);
break;
case 0x1e:
readNBytes(4);
break;
case 0x1f:
readNBytes(7);
break;
case 0x20:
readNBytes(6);
break;
case 0x21:
readNBytes(9);
break;
case 0x22:
readNBytes(18);
break;
case 0x26:
readNBytes(5);
break;
case 0x27:
readNBytes(8);
break;
case 0x28:
in.readInt();
readUnknownBlob();
break;
case 0x29:
in.readInt();
in.readByte();
in.readByte();
in.readShort();
break;
case 0x2a:
in.readInt();
in.readByte();
break;
case 0x2b:
in.readFloat();
in.readShort();
in.readShort();
break;
case 0x32:
readNBytes(9);
break;
case 0x33:
readNBytes(13);
int chunkSize=in.readInt();
readNBytes(chunkSize);
break;
case 0x34:
readNBytes(8);
short arraySize=in.readShort();
readNBytes(arraySize * 4);
break;
case 0x35:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
in.readByte();
break;
case 0x36:
readNBytes(12);
break;
case 0x3c:
readNBytes(28);
int recordCount=in.readInt();
readNBytes(recordCount * 3);
break;
case 0x3d:
in.readInt();
in.readInt();
in.readByte();
in.readInt();
in.readInt();
break;
case 0x46:
readNBytes(2);
break;
case 0x47:
readNBytes(17);
break;
case 0x64:
in.readByte();
in.readByte();
readUTF16();
in.readByte();
break;
case 0x65:
in.readByte();
break;
case 0x66:
in.readByte();
in.readShort();
in.readByte();
in.readShort();
in.readBoolean();
readItem();
break;
case 0x67:
in.readByte();
in.readShort();
readItem();
break;
case 0x68:
in.readByte();
short count=in.readShort();
for (int c=0; c < count; ++c) {
readItem();
}
break;
case 0x69:
in.readByte();
in.readShort();
in.readShort();
break;
case 0x6a:
in.readByte();
in.readShort();
in.readByte();
break;
case 0x6b:
in.readShort();
readItem();
break;
case (byte)0x6c:
readNBytes(2);
break;
case (byte)0x82:
in.readInt();
in.readShort();
in.readInt();
readUTF16();
readUTF16();
readUTF16();
readUTF16();
break;
case (byte)0x83:
in.readShort();
in.readShort();
byte length=in.readByte();
readNBytes(0xff & length);
break;
case (byte)0xc8:
readNBytes(5);
break;
case (byte)0xc9:
readUTF16();
in.readBoolean();
in.readShort();
break;
case (byte)0xe6:
in.readInt();
in.readInt();
readNBytes(in.readInt() * 4);
readNBytes(in.readInt() * 4);
int sizeString=in.readInt();
for (int i=0; i < sizeString; i++) {
readNBytes(in.readInt());
}
break;
case (byte)0xfe:
break;
default :
error(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
lastPacket=packetId;
}","protected void handlePacket(byte packetId) throws IOException {
switch (packetId) {
case 0x2:
    readUTF16();
  login();
break;
case 0x1:
in.readInt();
readUTF16();
in.readLong();
in.readInt();
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readByte();
break;
case 0x0d:
double x=in.readDouble();
double stance=in.readDouble();
double y=in.readDouble();
double z=in.readDouble();
float yaw=in.readFloat();
float pitch=in.readFloat();
boolean onGround=in.readBoolean();
position.updatePosition(x,y,z,stance);
position.updateLook(yaw,pitch);
position.updateGround(onGround);
if (!ready) {
sendPosition();
ready();
}
 else if (dead) {
sendPosition();
dead=false;
}
positionUpdate();
break;
case 0x0b:
double x2=in.readDouble();
double stance2=in.readDouble();
double y2=in.readDouble();
double z2=in.readDouble();
boolean onGround2=in.readBoolean();
position.updatePosition(x2,y2,z2,stance2);
position.updateGround(onGround2);
positionUpdate();
break;
case (byte)0xff:
String reason=readUTF16();
error(reason);
break;
case 0x00:
keepAlive(in.readInt());
break;
case 0x03:
readUTF16();
break;
case 0x04:
in.readLong();
break;
case 0x05:
in.readInt();
in.readShort();
in.readShort();
in.readShort();
break;
case 0x06:
readNBytes(12);
break;
case 0x07:
in.readInt();
in.readInt();
in.readBoolean();
in.readBoolean();
break;
case 0x08:
health=in.readShort();
in.readShort();
in.readFloat();
if (health <= 0) {
dead=true;
respawn();
}
break;
case 0x09:
position.dimension=Dimension.get(in.readByte());
in.readByte();
in.readByte();
in.readShort();
in.readLong();
break;
case 0x0a:
in.readByte();
break;
case 0x0c:
readNBytes(9);
break;
case 0x0e:
in.readByte();
in.readInt();
in.readByte();
in.readInt();
in.readByte();
break;
case 0x0f:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
readItem();
break;
case 0x10:
readNBytes(2);
break;
case 0x11:
readNBytes(14);
break;
case 0x12:
readNBytes(5);
break;
case 0x13:
in.readInt();
in.readByte();
break;
case 0x14:
in.readInt();
readUTF16();
readNBytes(16);
break;
case 0x15:
readNBytes(24);
break;
case 0x16:
readNBytes(8);
break;
case 0x17:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
int flag=in.readInt();
if (flag > 0) {
in.readShort();
in.readShort();
in.readShort();
}
break;
case 0x18:
in.readInt();
in.readByte();
in.readInt();
in.readInt();
in.readInt();
in.readByte();
in.readByte();
readUnknownBlob();
break;
case 0x19:
in.readInt();
readUTF16();
in.readInt();
in.readInt();
in.readInt();
in.readInt();
break;
case 0x1a:
in.readInt();
in.readInt();
in.readInt();
in.readInt();
in.readShort();
break;
case 0x1c:
readNBytes(10);
break;
case 0x1d:
readNBytes(4);
break;
case 0x1e:
readNBytes(4);
break;
case 0x1f:
readNBytes(7);
break;
case 0x20:
readNBytes(6);
break;
case 0x21:
readNBytes(9);
break;
case 0x22:
readNBytes(18);
break;
case 0x26:
readNBytes(5);
break;
case 0x27:
readNBytes(8);
break;
case 0x28:
in.readInt();
readUnknownBlob();
break;
case 0x29:
in.readInt();
in.readByte();
in.readByte();
in.readShort();
break;
case 0x2a:
in.readInt();
in.readByte();
break;
case 0x2b:
in.readFloat();
in.readShort();
in.readShort();
break;
case 0x32:
readNBytes(9);
break;
case 0x33:
readNBytes(13);
int chunkSize=in.readInt();
readNBytes(chunkSize);
break;
case 0x34:
readNBytes(8);
short arraySize=in.readShort();
readNBytes(arraySize * 4);
break;
case 0x35:
in.readInt();
in.readByte();
in.readInt();
in.readByte();
in.readByte();
break;
case 0x36:
readNBytes(12);
break;
case 0x3c:
readNBytes(28);
int recordCount=in.readInt();
readNBytes(recordCount * 3);
break;
case 0x3d:
in.readInt();
in.readInt();
in.readByte();
in.readInt();
in.readInt();
break;
case 0x46:
readNBytes(2);
break;
case 0x47:
readNBytes(17);
break;
case 0x64:
in.readByte();
in.readByte();
readUTF16();
in.readByte();
break;
case 0x65:
in.readByte();
break;
case 0x66:
in.readByte();
in.readShort();
in.readByte();
in.readShort();
in.readBoolean();
readItem();
break;
case 0x67:
in.readByte();
in.readShort();
readItem();
break;
case 0x68:
in.readByte();
short count=in.readShort();
for (int c=0; c < count; ++c) {
readItem();
}
break;
case 0x69:
in.readByte();
in.readShort();
in.readShort();
break;
case 0x6a:
in.readByte();
in.readShort();
in.readByte();
break;
case 0x6b:
in.readShort();
readItem();
break;
case (byte)0x6c:
readNBytes(2);
break;
case (byte)0x82:
in.readInt();
in.readShort();
in.readInt();
readUTF16();
readUTF16();
readUTF16();
readUTF16();
break;
case (byte)0x83:
in.readShort();
in.readShort();
byte length=in.readByte();
readNBytes(0xff & length);
break;
case (byte)0xc8:
readNBytes(5);
break;
case (byte)0xc9:
readUTF16();
in.readBoolean();
in.readShort();
break;
case (byte)0xe6:
in.readInt();
in.readInt();
readNBytes(in.readInt() * 4);
readNBytes(in.readInt() * 4);
int sizeString=in.readInt();
for (int i=0; i < sizeString; i++) {
readNBytes(in.readInt());
}
break;
case (byte)0xfa:
readUTF16();
short arrayLength=in.readShort();
readNBytes(0xff & arrayLength);
break;
case (byte)0xfe:
break;
default :
error(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
lastPacket=packetId;
}",0.9866588762294284
151808,"protected void login() throws IOException {
  writeLock.lock();
  out.writeByte(1);
  out.writeInt(VERSION);
  write(name);
  out.writeLong(0);
  out.writeInt(0);
  out.writeByte(0);
  out.writeByte(0);
  out.writeByte(0);
  out.writeByte(0);
  writeLock.unlock();
}","protected void login() throws IOException {
  writeLock.lock();
  out.writeByte(1);
  out.writeInt(VERSION);
  write(name);
  out.writeLong(0);
  write(readUTF16());
  out.writeInt(0);
  out.writeByte(0);
  out.writeByte(0);
  out.writeByte(0);
  out.writeByte(0);
  writeLock.unlock();
}",0.96028880866426
151809,"@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  super.save();
}","@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  super.save();
}",0.9681528662420382
151810,"public void execute(Player player,String message){
  int[] maxSize=getAreaMax(player);
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTCaptionedMessage(""String_Node_Str"",commandPrefix() + ""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    if (!areaSizeOk(player,maxSize)) {
      player.addTMessage(Color.RED,""String_Node_Str"" + maxSize[0] + ""String_Node_Str""+ maxSize[1]+ ""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"") || arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.getServer().saveConfig();
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      player.getServer().saveConfig();
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}","public void execute(Player player,String message){
  int[] maxSize=getAreaMax(player);
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTCaptionedMessage(""String_Node_Str"",commandPrefix() + ""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player,maxSize)) {
      player.addTMessage(Color.RED,""String_Node_Str"" + maxSize[0] + ""String_Node_Str""+ maxSize[1]+ ""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"") || arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.getServer().saveConfig();
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      player.getServer().saveConfig();
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}",0.9347746427262732
151811,"public void execute(Player player,String message){
  String name=extractArgument(message);
  if (name == null) {
    if (player.isAttemptLock()) {
      player.setAttemptedAction(null);
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
  }
  if (name != null && name.equals(""String_Node_Str"")) {
    Map<String,Integer> list=player.getServer().data.chests.chestList(player);
    if (list.size() == 0) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      for (      String current : list.keySet()) {
        player.addMessage(Color.GRAY,list.get(current) + ""String_Node_Str"" + current);
      }
    }
  }
 else {
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.setAttemptedAction(Action.Lock);
    player.setChestName(name);
  }
}","public void execute(Player player,String message){
  String name=extractArgument(message);
  if (name == null) {
    if (player.isAttemptLock()) {
      player.setAttemptedAction(null);
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
  }
  if (name != null && name.equals(""String_Node_Str"")) {
    Map<String,Integer> list=player.getServer().data.chests.chestList(player);
    if (list.size() == 0) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      for (      String current : list.keySet()) {
        player.addMessage(Color.GRAY,list.get(current) + ""String_Node_Str"" + current);
      }
    }
  }
 else {
    if (name != null && name.length() > 16) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.setAttemptedAction(Action.Lock);
    player.setChestName(name);
  }
}",0.9337712096332786
151812,"public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTCaptionedMessage(""String_Node_Str"",commandPrefix() + ""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}","public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTCaptionedMessage(""String_Node_Str"",commandPrefix() + ""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"") || arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.getServer().saveConfig();
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      player.getServer().saveConfig();
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}",0.9769711163153786
151813,"public void add(Area area){
  topAreas.add(area);
  areas.add(area);
}","public void add(Area area){
  topAreas.add(area);
}",0.8429752066115702
151814,"public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
  init();
  finish();
}","public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
  init();
  super.finish();
}",0.984126984126984
151815,"public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str"")) {
    message=lastCommand;
  }
 else {
    lastCommand=message;
  }
  String commandName=message.split(""String_Node_Str"")[0];
  String args=message.substring(commandName.length() + 1);
  CommandConfig config=server.config.commands.getTopConfig(commandName);
  String originalName=config == null ? commandName : config.originalName;
  PlayerCommand command;
  if (config == null) {
    command=server.getCommandParser().getPlayerCommand(commandName);
    if (command != null && !command.hidden()) {
      command=null;
    }
  }
 else {
    command=server.getCommandParser().getPlayerCommand(originalName);
  }
  if (command == null) {
    if (groupObject.forwardUnknownCommands) {
      command=new ExternalCommand(commandName);
    }
 else {
      command=server.getCommandParser().getPlayerCommand((String)null);
    }
  }
  if (config != null) {
    Permission permission=server.config.getCommandPermission(config.name,args,position.coordinate());
    if (!permission.contains(this)) {
      addTMessage(Color.RED,""String_Node_Str"");
      return true;
    }
  }
  if (config != null && !(command instanceof ExternalCommand) && config.forwarding != Forwarding.ONLY) {
    command.execute(this,message);
  }
  return !((command instanceof ExternalCommand) || config == null || config.forwarding != Forwarding.NONE || server.options.getBoolean(""String_Node_Str""));
}","public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str"")) {
    message=lastCommand;
  }
 else {
    lastCommand=message;
  }
  String commandName=message.split(""String_Node_Str"")[0].substring(1);
  String args=commandName.length() == message.length() ? ""String_Node_Str"" : message.substring(commandName.length() + 1);
  CommandConfig config=server.config.commands.getTopConfig(commandName);
  String originalName=config == null ? commandName : config.originalName;
  PlayerCommand command;
  if (config == null) {
    command=server.getCommandParser().getPlayerCommand(commandName);
    if (command != null && !command.hidden()) {
      command=null;
    }
  }
 else {
    command=server.getCommandParser().getPlayerCommand(originalName);
  }
  if (command == null) {
    if (groupObject.forwardUnknownCommands) {
      command=new ExternalCommand(commandName);
    }
 else {
      command=server.getCommandParser().getPlayerCommand((String)null);
    }
  }
  if (config != null) {
    Permission permission=server.config.getCommandPermission(config.name,args,position.coordinate());
    if (!permission.contains(this)) {
      addTMessage(Color.RED,""String_Node_Str"");
      return true;
    }
  }
  if (config != null && !(command instanceof ExternalCommand) && config.forwarding != Forwarding.ONLY) {
    command.execute(this,message);
  }
  return !((command instanceof ExternalCommand) || config == null || config.forwarding != Forwarding.NONE || server.options.getBoolean(""String_Node_Str""));
}",0.975826972010178
151816,"public boolean setName(String name){
  renameName=server.data.players.getRenameName(name);
  name=name.trim();
  if (name.length() == 0 || this.name != null) {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (name == ""String_Node_Str"") {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (!guest && server.options.getBoolean(""String_Node_Str"") && !server.whitelist.isWhitelisted(name)) {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (server.playerList.findPlayerExact(name) != null) {
    kick(t(""String_Node_Str""));
    return false;
  }
  this.name=name;
  updateGroup();
  watchdog.setName(""String_Node_Str"" + name);
  server.connectionLog(""String_Node_Str"",extsocket,name);
  if (server.numPlayers() == 0) {
    server.time.set();
  }
  server.playerList.addPlayer(this);
  return true;
}","public boolean setName(String name){
  renameName=server.data.players.getRenameName(name);
  name=name.trim();
  if (name.length() == 0 || this.name != null) {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (name == ""String_Node_Str"") {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (!guest && server.options.getBoolean(""String_Node_Str"") && !server.whitelist.isWhitelisted(name)) {
    kick(t(""String_Node_Str""));
    return false;
  }
  if (server.playerList.findPlayerExact(name) != null) {
    kick(t(""String_Node_Str""));
    return false;
  }
  this.name=name;
  updateGroup();
  addMessage(Integer.toString(group));
  watchdog.setName(""String_Node_Str"" + name);
  server.connectionLog(""String_Node_Str"",extsocket,name);
  if (server.numPlayers() == 0) {
    server.time.set();
  }
  server.playerList.addPlayer(this);
  return true;
}",0.976936723832052
151817,"public void execute(Player player,String message){
  List<Area> areas=player.getServer().config.dimensions.areas(player.position());
  StringBuilder str=new StringBuilder();
  for (  Area area : areas) {
    str.append(area.name);
    str.append(""String_Node_Str"");
  }
  if (!areas.isEmpty()) {
    str.delete(0,str.length() - 2);
  }
  player.addTMessage(Color.GRAY,""String_Node_Str"",Color.WHITE,str.toString());
}","public void execute(Player player,String message){
  List<Area> areas=player.getServer().config.dimensions.areas(player.position());
  StringBuilder str=new StringBuilder();
  for (  Area area : areas) {
    str.append(area.name);
    str.append(""String_Node_Str"");
  }
  if (!areas.isEmpty()) {
    str.delete(str.length() - 2,str.length() - 1);
  }
  player.addTMessage(Color.GRAY,""String_Node_Str"",Color.WHITE,str.toString());
}",0.9775678866587958
151818,"public void execute(Player player,String message){
  String[] arguments=extractArguments(message);
  if (arguments.length > 0) {
    String prefix=commandPrefix();
    String commandName=arguments[0];
    if (!commandName.startsWith(prefix)) {
      commandName=prefix + commandName;
    }
    PlayerCommand command=parser.getPlayerCommand(commandName);
    player.addMessage(command.getHelpText(prefix));
    List<String> aliases=player.getServer().config.commands.get(command.getName()).aliases;
    if (!aliases.isEmpty()) {
      StringBuffer line=new StringBuffer();
      for (      String alias : aliases) {
        line.append(commandPrefix());
        line.append(alias);
        line.append(""String_Node_Str"");
      }
      player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    }
  }
 else {
    List<PermissionContainer> containers=player.getServer().config.containers(player.position());
    Set<CommandConfig> commands=new TreeSet<CommandConfig>();
    for (    PermissionContainer container : containers) {
      for (      CommandConfig command : container.commands) {
        if (command.allow.contains(player)) {
          commands.add(command);
        }
      }
    }
    StringBuffer line=new StringBuffer();
    String prefix=commandPrefix();
    for (    CommandConfig cmd : commands) {
      Command command=parser.getPlayerCommand(cmd.originalName);
      if (cmd.hidden || command.hidden()) {
        continue;
      }
      line.append(prefix);
      line.append(cmd.name);
      line.append(""String_Node_Str"");
    }
    player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    player.addTMessage(Color.GRAY,""String_Node_Str"",prefix + ""String_Node_Str"");
    String[] helplines=player.getServer().helptext.getHelpText().split(""String_Node_Str"");
    if (helplines.length > 0) {
      player.addMessage(""String_Node_Str"");
      for (      String l : helplines) {
        player.addMessage(Color.WHITE,l);
      }
    }
  }
}","public void execute(Player player,String message){
  String[] arguments=extractArguments(message);
  if (arguments.length > 0) {
    String prefix=commandPrefix();
    String commandName=arguments[0];
    if (!commandName.startsWith(prefix)) {
      commandName=prefix + commandName;
    }
    PlayerCommand command=parser.getPlayerCommand(commandName);
    player.addMessage(command.getHelpText(prefix));
    List<String> aliases=player.getServer().config.commands.get(command.getName()).aliases;
    if (aliases != null) {
      StringBuffer line=new StringBuffer();
      for (      String alias : aliases) {
        line.append(commandPrefix());
        line.append(alias);
        line.append(""String_Node_Str"");
      }
      player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    }
  }
 else {
    List<PermissionContainer> containers=player.getServer().config.containers(player.position());
    Set<CommandConfig> commands=new TreeSet<CommandConfig>();
    for (    PermissionContainer container : containers) {
      for (      CommandConfig command : container.commands) {
        if (command.allow.contains(player)) {
          commands.add(command);
        }
      }
    }
    StringBuffer line=new StringBuffer();
    String prefix=commandPrefix();
    for (    CommandConfig cmd : commands) {
      Command command=parser.getPlayerCommand(cmd.originalName);
      System.out.println(cmd.name);
      if (cmd.hidden || (command != null && command.hidden())) {
        continue;
      }
      line.append(prefix);
      line.append(cmd.name);
      line.append(""String_Node_Str"");
    }
    player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    player.addTMessage(Color.GRAY,""String_Node_Str"",prefix + ""String_Node_Str"");
    String[] helplines=player.getServer().helptext.getHelpText().split(""String_Node_Str"");
    if (helplines.length > 0) {
      player.addMessage(""String_Node_Str"");
      for (      String l : helplines) {
        player.addMessage(Color.WHITE,l);
      }
    }
  }
}",0.9780439121756488
151819,"private boolean areaSizeOk(Player player){
  return (Math.abs(player.areastart.x() - player.areaend.x()) <= 50) && (Math.abs(player.areastart.y() - player.areaend.y()) <= 50) && player.areaend.dimension() == player.areastart.dimension();
}","private boolean areaSizeOk(Player player){
  return (Math.abs(player.areastart.x() - player.areaend.x()) < 50) && (Math.abs(player.areastart.z() - player.areaend.z()) < 50) && player.areaend.dimension() == player.areastart.dimension();
}",0.9873949579831932
151820,"public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTMessage(Color.RED,""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (overlaps != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}","public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTMessage(Color.RED,""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}",0.9953356317177044
151821,"protected AbstractConfig(String filename){
  this.filename=filename;
}","protected AbstractConfig(String filename){
  this.filename=filename;
  loadHeader();
}",0.8974358974358975
151822,"public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
}","public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
  init();
}",0.970414201183432
151823,"@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(NAME)) {
    this.name=value;
  }
 else   if (name.equals(START)) {
    start=getCoord(value,0);
  }
 else   if (name.equals(END)) {
    end=getCoord(value,128);
  }
 else   if (name.equals(OWNER)) {
    owner=value;
  }
 else   if (name.equals(PRIORITY)) {
    priority=getInt(value);
  }
}","@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(NAME)) {
    this.name=value;
  }
 else   if (name.equals(START)) {
    start=getCoord(value,0);
  }
 else   if (name.equals(END)) {
    end=getCoord(value,127);
  }
 else   if (name.equals(OWNER)) {
    owner=value;
  }
 else   if (name.equals(PRIORITY)) {
    priority=getInt(value);
  }
}",0.9974025974025974
151824,"Permission permission(String args){
  for (  Argument arg : arguments) {
    if (args.startsWith(arg.argument)) {
      return arg.allow;
    }
  }
  return null;
}","Permission permission(String args){
  if (arguments == null) {
    return null;
  }
  for (  Argument arg : arguments) {
    if (args.startsWith(arg.argument)) {
      return arg.allow;
    }
  }
  return null;
}",0.8723404255319149
151825,"public CommandConfig getTopConfig(String name){
  if (commands.containsKey(name)) {
    return commands.get(name);
  }
  for (  CommandConfig command : commands.values()) {
    if (command.aliases.contains(name)) {
      return command;
    }
  }
  return null;
}","public CommandConfig getTopConfig(String name){
  if (commands.containsKey(name)) {
    return commands.get(name);
  }
  for (  CommandConfig command : commands.values()) {
    if (command.alias(name)) {
      return command;
    }
  }
  return null;
}",0.9786407766990292
151826,"public Iterator<CommandConfig> iterator(){
  return commands.values().iterator();
}","@Override public Iterator<CommandConfig> iterator(){
  return commands.values().iterator();
}",0.9431818181818182
151827,"public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      for (      Area area : stack.peek()) {
        if (area.owner == name) {
          return new AreaStoragePair(stack.peek(),area);
        }
        stack.add(area.areas);
      }
      stack.pop();
    }
  }
  return null;
}","public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      AreaStorage storage=stack.pop();
      for (      Area area : storage) {
        if (area.owner == name) {
          return new AreaStoragePair(storage,area);
        }
        stack.add(area.areas);
      }
    }
  }
  return null;
}",0.910386965376782
151828,"public DimensionConfig add(Dimension dimension){
  DimensionConfig newDimension=new DimensionConfig();
  newDimension.dimension=dimension;
  dimensions.put(dimension,newDimension);
  return newDimension;
}","public DimensionConfig add(Dimension dimension){
  DimensionConfig newDimension=new DimensionConfig();
  newDimension.dimension=dimension;
  newDimension.init();
  dimensions.put(dimension,newDimension);
  return newDimension;
}",0.9468822170900691
151829,"public Set<Area> overlaps(Area area){
  DimensionConfig dim=get(area.start.dimension());
  if (dim != null) {
    return dim.areas.overlaps(area);
  }
  return null;
}","public Set<Area> overlaps(Area area){
  DimensionConfig dim=get(area.start.dimension());
  if (dim != null) {
    return dim.areas.overlaps(area);
  }
  return new HashSet<Area>(0);
}",0.9371428571428572
151830,"@Override public void save(){
  lock.lock();
  FileOutputStream fos;
  try {
    fos=new FileOutputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  OutputFormat of=new OutputFormat(""String_Node_Str"",""String_Node_Str"",true);
  of.setIndent(1);
  of.setIndenting(true);
  of.setDoctype(null,""String_Node_Str"");
  XMLSerializer serializer=new XMLSerializer(fos,of);
  ContentHandler hd;
  try {
    hd=serializer.asContentHandler();
    hd.startDocument();
    config.save(hd,serializer);
    hd.endDocument();
    fos.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    lock.unlock();
  }
}","@Override public void save(){
  lock.lock();
  FileOutputStream fos;
  try {
    fos=new FileOutputStream(getFile());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  OutputFormat of=new OutputFormat(""String_Node_Str"",""String_Node_Str"",true);
  of.setIndent(1);
  of.setIndenting(true);
  of.setDoctype(null,""String_Node_Str"");
  XMLSerializer serializer=new XMLSerializer(fos,of);
  ContentHandler hd;
  try {
    hd=serializer.asContentHandler();
    hd.startDocument();
    config.save(hd,serializer);
    hd.endDocument();
    fos.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    lock.unlock();
  }
}",0.68
151831,"public Integer get(Player player){
  return get(player.getInetAddress()).group;
}","public Integer get(Player player){
  return contains(player.getInetAddress()) ? get(player.getInetAddress()).group : null;
}",0.7902439024390244
151832,"private static boolean contains(TreeMap<Integer,Integer> ranges,int value){
  Entry<Integer,Integer> entry=ranges.lowerEntry(value + 1);
  return entry != null && entry.getValue() <= value;
}","private static boolean contains(TreeMap<Integer,Integer> ranges,int value){
  Entry<Integer,Integer> entry=ranges.lowerEntry(value + 1);
  return entry != null && entry.getValue() >= value;
}",0.9947643979057592
151833,"private Area createPlayerArea(Player player){
  Area area=new Area(t(""String_Node_Str"",player.getName()),player.areastart,player.areaend);
  area.owner=player.getName().toLowerCase();
  return area;
}","private Area createPlayerArea(Player player){
  Area area=new Area(t(""String_Node_Str"",player.getName()),player.areastart,player.areaend);
  area.owner=player.getName().toLowerCase();
  Permission perm=new Permission(player);
  AllBlocks blocks=new AllBlocks();
  blocks.destroy=perm;
  blocks.place=perm;
  blocks.use=perm;
  area.allblocks.blocks=blocks;
  area.chests.chests=new Chests(perm);
  return area;
}",0.6437908496732027
151834,"@Override void add(XMLTag child){
  AllBlocks blocks=(AllBlocks)child;
  if (this.blocks == null) {
    this.blocks=blocks;
  }
 else {
    if (blocks.place != null) {
      this.blocks.place=blocks.place;
    }
    if (blocks.destroy != null) {
      this.blocks.destroy=blocks.destroy;
    }
    if (blocks.use != null) {
      this.blocks.use=blocks.use;
    }
    if (blocks.take != null) {
      this.blocks.take=blocks.take;
    }
    if (blocks.give != null) {
      this.blocks.give=blocks.give;
    }
  }
}","@Override public void add(XMLTag child){
  AllBlocks blocks=(AllBlocks)child;
  if (this.blocks == null) {
    this.blocks=blocks;
  }
 else {
    if (blocks.place != null) {
      this.blocks.place=blocks.place;
    }
    if (blocks.destroy != null) {
      this.blocks.destroy=blocks.destroy;
    }
    if (blocks.use != null) {
      this.blocks.use=blocks.use;
    }
    if (blocks.give != null) {
      this.blocks.give=blocks.give;
    }
  }
}",0.8817427385892116
151835,"public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
  init();
}","public Area(String name,Coordinate start,Coordinate end){
  this();
  this.name=name;
  this.start=start;
  this.end=end;
  position=Integer.MAX_VALUE;
  level=0;
  init();
  finish();
}",0.9666666666666668
151836,"@Override public void finish(){
  DimensionAreaStorage.getInstance().decreaseLevel();
}","@Override public void finish(){
  DimensionAreaStorage.getInstance().decreaseLevel();
  super.finish();
}",0.90625
151837,"Chests(){
  super(""String_Node_Str"");
}","public Chests(Permission permission){
  this();
  allow=permission;
}",0.3888888888888889
151838,"public Group getGroup(Player player) throws SAXException {
  Integer playerGroup=players.get(player);
  Integer ipGroup=ips.get(player);
  int groupid;
  if (playerGroup == null && ipGroup == null) {
    groupid=properties.getInt(""String_Node_Str"");
  }
 else   if (playerGroup == null || playerGroup < ipGroup) {
    groupid=ipGroup;
  }
 else {
    groupid=playerGroup;
  }
  Group group=groups.get(groupid);
  if (group == null) {
    throw new SAXException(""String_Node_Str"" + groupid + ""String_Node_Str"");
  }
  return group;
}","public Group getGroup(Player player) throws SAXException {
  Integer playerGroup=players.get(player);
  Integer ipGroup=ips.get(player);
  int groupid;
  if (playerGroup == null && ipGroup == null) {
    groupid=properties.getInt(""String_Node_Str"");
  }
 else   if (playerGroup == null || (ipGroup != null && playerGroup < ipGroup)) {
    groupid=ipGroup;
  }
 else {
    groupid=playerGroup;
  }
  Group group=groups.get(groupid);
  if (group == null) {
    throw new SAXException(""String_Node_Str"" + groupid + ""String_Node_Str"");
  }
  return group;
}",0.9806451612903224
151839,"public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      AreaStorage storage=stack.pop();
      for (      Area area : storage) {
        if (area.owner.equals(name)) {
          return new AreaStoragePair(storage,area);
        }
        stack.add(area.areas);
      }
    }
  }
  return null;
}","public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      AreaStorage storage=stack.pop();
      for (      Area area : storage) {
        if (name.equals(area.owner)) {
          return new AreaStoragePair(storage,area);
        }
        stack.add(area.areas);
      }
    }
  }
  return null;
}",0.9720558882235528
151840,"void decreaseLevel(){
  positions.pop();
}","void decreaseLevel(){
  if (positions != null && !positions.isEmpty()) {
    positions.pop();
  }
}",0.5957446808510638
151841,"@Override public void load(){
  lock.lock();
  loadsuccess=false;
  InputStream stream;
  if (!getFile().exists()) {
    Config config;
    if ((config=LegacyPermissionConfig.load()) != null) {
      this.config=config;
      loadsuccess=true;
      return;
    }
 else {
      stream=getClass().getResourceAsStream(filename);
    }
  }
 else {
    try {
      stream=new FileInputStream(getFile());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      lock.unlock();
      return;
    }
  }
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  XMLTagResolver handler;
  try {
    handler=new XMLTagResolver();
  }
 catch (  SAXException e1) {
    e1.printStackTrace();
    return;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",true);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new InputStreamReader(stream)));
  }
 catch (  Exception e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  processTags(handler.root());
  loadsuccess=true;
  lock.unlock();
}","@Override public void load(){
  lock.lock();
  loadsuccess=false;
  InputStream stream;
  if (!getFile().exists()) {
    Config config;
    if ((config=LegacyPermissionConfig.load()) != null) {
      this.config=config;
      loadsuccess=true;
      return;
    }
 else {
      stream=getClass().getResourceAsStream(filename);
    }
  }
 else {
    try {
      stream=new FileInputStream(getFile());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      lock.unlock();
      return;
    }
  }
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  XMLTagResolver handler;
  try {
    handler=new XMLTagResolver();
  }
 catch (  SAXException e1) {
    e1.printStackTrace();
    return;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",true);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new InputStreamReader(stream)));
  }
 catch (  Exception e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  processTags(handler.root());
  loadsuccess=true;
  save();
  lock.unlock();
}",0.9958368026644464
151842,"public Permission(String allow,String disallow) throws SAXException {
  if (disallow == null) {
    disallow=""String_Node_Str"";
  }
  if (allow == null) {
    allow=""String_Node_Str"";
  }
  String[] allowParts=allow.split(""String_Node_Str"");
  String[] disallowParts=disallow.split(""String_Node_Str"");
  StringBuilder perm=new StringBuilder(allowParts[0]);
  for (  String part : disallowParts[0].split(""String_Node_Str"")) {
    if (part.length() == 0) {
      continue;
    }
    perm.append(',');
    perm.append('!');
    perm.append(part);
  }
  if (allowParts[0].length() == 0) {
    perm.deleteCharAt(0);
  }
  if (allowParts.length >= 2 || disallowParts.length >= 2) {
    perm.append(';');
    if (allowParts.length >= 2) {
      perm.append(allowParts[1]);
    }
    if (disallowParts.length >= 2) {
      for (      String part : disallowParts[1].split(""String_Node_Str"")) {
        if (perm.charAt(perm.length() - 1) != ';') {
          perm.append(',');
        }
        perm.append('!');
        perm.append(part);
      }
    }
  }
  set(perm.toString());
}","public Permission(Player player){
  allowedPlayers.add(player.getName().toLowerCase());
}",0.1033591731266149
151843,"@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  String[] parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  String[] coords=parts[0].split(""String_Node_Str"");
  Coordinate start;
  if (coords.length == 2) {
    start=new Coordinate(getInt(coords[0]),0,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    start=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  Dimension dimension=(parts.length >= 2) ? Dimension.get(parts[1]) : Dimension.EARTH;
  parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  coords=parts[0].split(""String_Node_Str"");
  Coordinate end;
  if (coords.length == 2) {
    end=new Coordinate(getInt(coords[0]),127,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    end=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  if (!((Config)stack.firstElement()).dimensions.contains(dimension)) {
    ((Config)stack.firstElement()).dimensions.add(dimension);
  }
  DimensionAreaStorage.setInstance(((Config)stack.firstElement()).dimensions.get(dimension).areas);
  Area area=new Area(attributes.getValue(""String_Node_Str""),start,end);
  if (attributes.getIndex(""String_Node_Str"") >= 0) {
    area.owner=attributes.getValue(""String_Node_Str"").toLowerCase();
  }
  area.fullInit();
  if (container instanceof Config) {
    ((Config)container).dimensions.get(dimension).add(area);
  }
 else {
    ((Area)container).areas.add(area);
  }
  stack.push(area);
}","@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  String[] parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  String[] coords=parts[0].split(""String_Node_Str"");
  Coordinate start;
  if (coords.length == 2) {
    start=new Coordinate(getInt(coords[0]),0,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    start=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  Dimension dimension=(parts.length >= 2) ? Dimension.get(parts[1]) : Dimension.EARTH;
  parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  coords=parts[0].split(""String_Node_Str"");
  Coordinate end;
  if (coords.length == 2) {
    end=new Coordinate(getInt(coords[0]),127,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    end=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  if (!((Config)stack.firstElement()).dimensions.contains(dimension)) {
    ((Config)stack.firstElement()).dimensions.add(dimension);
  }
  DimensionAreaStorage.setInstance(((Config)stack.firstElement()).dimensions.get(dimension).areas);
  Area area=new Area(attributes.getValue(""String_Node_Str""),start,end);
  if (attributes.getIndex(""String_Node_Str"") >= 0) {
    area.owner=attributes.getValue(""String_Node_Str"").toLowerCase();
  }
  area.init();
  area.finish();
  if (container instanceof Config) {
    ((Config)container).dimensions.get(dimension).add(area);
  }
 else {
    ((Area)container).areas.add(area);
  }
  stack.push(area);
}",0.9921942758022548
151844,"@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  Block block=new Block(attributes.getValue(""String_Node_Str""));
  block.place=new Permission(attributes.getValue(""String_Node_Str""));
  block.fullInit();
  container.blocks.add(block);
}","@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  Block block=new Block(attributes.getValue(""String_Node_Str""));
  block.place=new Permission(attributes.getValue(""String_Node_Str""),attributes.getValue(""String_Node_Str""));
  block.fullInit();
  container.blocks.add(block);
}",0.9448373408769448
151845,"public boolean parseCommand(String line){
  ServerCommand command=server.getCommandParser().getServerCommand(line);
  if ((command != null) && (command.getClass() != InvalidCommand.class)) {
    command.execute(server,line);
    return !command.shouldPassThroughToConsole(server);
  }
  return false;
}","public boolean parseCommand(String line){
  ServerCommand command=server.getCommandParser().getServerCommand(line.split(""String_Node_Str"")[0]);
  if ((command != null) && !(command instanceof InvalidCommand)) {
    command.execute(server,line);
    return !command.shouldPassThroughToConsole(server);
  }
  return false;
}",0.8814102564102564
151846,"public boolean loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (globalConfig.loadsuccess) {
    config=globalConfig.config;
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  if (!Translations.getInstance().setLanguage(options.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!options.getBoolean(""String_Node_Str""));
  return globalConfig.loadsuccess;
}","public boolean loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (globalConfig.loadsuccess) {
    config=globalConfig.config;
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (!Translations.getInstance().setLanguage(options.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!options.getBoolean(""String_Node_Str""));
  return globalConfig.loadsuccess;
}",0.7739602169981917
151847,"public void execute(Player player,String message){
  List<Area> areas=player.getServer().config.dimensions.areas(player.position());
  StringBuilder str=new StringBuilder();
  for (  Area area : areas) {
    str.append(area.name);
    str.append(""String_Node_Str"");
  }
  if (!areas.isEmpty()) {
    str.delete(str.length() - 2,str.length() - 1);
  }
  player.addTMessage(Color.GRAY,""String_Node_Str"",Color.WHITE,str.toString());
}","public void execute(Player player,String message){
  List<Area> areas=player.getServer().config.dimensions.areas(player.position());
  StringBuilder str=new StringBuilder();
  if (areas == null || areas.isEmpty()) {
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    return;
  }
  for (  Area area : areas) {
    str.append(area.name);
    str.append(""String_Node_Str"");
  }
  if (!areas.isEmpty()) {
    str.delete(str.length() - 2,str.length() - 1);
  }
  player.addTCaptionedMessage(""String_Node_Str"",str.toString());
}",0.5583333333333333
151848,"public void execute(Player player,String message){
  String[] arguments=extractArguments(message);
  if (arguments.length > 0) {
    String prefix=commandPrefix();
    String commandName=arguments[0];
    if (!commandName.startsWith(prefix)) {
      commandName=prefix + commandName;
    }
    PlayerCommand command=parser.getPlayerCommand(commandName);
    player.addMessage(command.getHelpText(prefix));
    List<String> aliases=player.getServer().config.commands.get(command.getName()).aliases;
    if (aliases != null) {
      StringBuffer line=new StringBuffer();
      for (      String alias : aliases) {
        line.append(commandPrefix());
        line.append(alias);
        line.append(""String_Node_Str"");
      }
      player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    }
  }
 else {
    List<PermissionContainer> containers=player.getServer().config.containers(player.position());
    Set<CommandConfig> commands=new TreeSet<CommandConfig>();
    for (    PermissionContainer container : containers) {
      for (      CommandConfig command : container.commands) {
        if (command.allow.contains(player)) {
          commands.add(command);
        }
      }
    }
    StringBuffer line=new StringBuffer();
    String prefix=commandPrefix();
    for (    CommandConfig cmd : commands) {
      Command command=parser.getPlayerCommand(cmd.originalName);
      System.out.println(cmd.name);
      if (cmd.hidden || (command != null && command.hidden())) {
        continue;
      }
      line.append(prefix);
      line.append(cmd.name);
      line.append(""String_Node_Str"");
    }
    player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    player.addTMessage(Color.GRAY,""String_Node_Str"",prefix + ""String_Node_Str"");
    String[] helplines=player.getServer().helptext.getHelpText().split(""String_Node_Str"");
    if (helplines.length > 0) {
      player.addMessage(""String_Node_Str"");
      for (      String l : helplines) {
        player.addMessage(Color.WHITE,l);
      }
    }
  }
}","public void execute(Player player,String message){
  String[] arguments=extractArguments(message);
  if (arguments.length > 0) {
    String prefix=commandPrefix();
    String commandName=arguments[0];
    if (commandName.startsWith(prefix)) {
      commandName=commandName.substring(1);
    }
    PlayerCommand command=parser.getPlayerCommand(commandName);
    if (command == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    player.addMessage(command.getHelpText(prefix));
    List<String> aliases=player.getServer().config.commands.get(command.getName()).aliases;
    if (aliases != null) {
      StringBuffer line=new StringBuffer();
      for (      String alias : aliases) {
        line.append(commandPrefix());
        line.append(alias);
        line.append(""String_Node_Str"");
      }
      player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    }
  }
 else {
    List<PermissionContainer> containers=player.getServer().config.containers(player.position());
    Set<CommandConfig> commands=new TreeSet<CommandConfig>();
    for (    PermissionContainer container : containers) {
      for (      CommandConfig command : container.commands) {
        if (command.allow.contains(player)) {
          commands.add(command);
        }
      }
    }
    StringBuffer line=new StringBuffer();
    String prefix=commandPrefix();
    for (    CommandConfig cmd : commands) {
      Command command=parser.getPlayerCommand(cmd.originalName);
      System.out.println(cmd.name);
      if (cmd.hidden || (command != null && command.hidden())) {
        continue;
      }
      line.append(prefix);
      line.append(cmd.name);
      line.append(""String_Node_Str"");
    }
    player.addTCaptionedMessage(""String_Node_Str"",line.toString());
    player.addTMessage(Color.GRAY,""String_Node_Str"",prefix + ""String_Node_Str"");
    String[] helplines=player.getServer().helptext.getHelpText().split(""String_Node_Str"");
    if (helplines.length > 0) {
      player.addMessage(""String_Node_Str"");
      for (      String l : helplines) {
        player.addMessage(Color.WHITE,l);
      }
    }
  }
}",0.9700023998080154
151849,"public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTMessage(Color.RED,""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}","public void execute(Player player,String message){
  Config config=player.getServer().config;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addTCaptionedMessage(""String_Node_Str"",commandPrefix() + ""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=player.position();
    player.areastart=player.areastart.setY((byte)0);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=player.position();
    player.areaend=player.areaend.setY((byte)127);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (player.areastart == null || player.areaend == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (player.getServer().config.playerArea(player) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    Area area=createPlayerArea(player);
    Set<Area> overlaps=config.dimensions.overlaps(area);
    if (!overlaps.isEmpty()) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      StringBuilder str=new StringBuilder();
      for (      Area overlap : overlaps) {
        str.append(overlap.name);
        str.append(""String_Node_Str"");
      }
      str.delete(str.length() - 2,str.length() - 1);
      player.addTCaptionedMessage(""String_Node_Str"",""String_Node_Str"",str);
      return;
    }
    saveArea(area,player);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    area.storage.remove(area.area);
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    AreaStoragePair area=config.playerArea(player);
    if (area == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      area.area.name=label;
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"");
    }
  }
 else {
    player.addTMessage(Color.RED,""String_Node_Str"");
  }
}",0.9893381613357474
151850,"public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      AreaStorage storage=stack.pop();
      for (      Area area : storage) {
        if (area.owner == name) {
          return new AreaStoragePair(storage,area);
        }
        stack.add(area.areas);
      }
    }
  }
  return null;
}","public AreaStoragePair playerArea(Player player){
  String name=player.getName().toLowerCase();
  for (  DimensionConfig dim : dimensions) {
    Stack<AreaStorage> stack=new Stack<AreaStorage>();
    stack.add(dim.topAreas);
    while (!stack.isEmpty()) {
      AreaStorage storage=stack.pop();
      for (      Area area : storage) {
        if (area.owner.equals(name)) {
          return new AreaStoragePair(storage,area);
        }
        stack.add(area.areas);
      }
    }
  }
  return null;
}",0.978936810431294
151851,"public DimensionConfig add(Dimension dimension){
  DimensionConfig newDimension=new DimensionConfig();
  newDimension.dimension=dimension;
  newDimension.init();
  dimensions.put(dimension,newDimension);
  return newDimension;
}","public DimensionConfig add(Dimension dimension){
  DimensionConfig newDimension=new DimensionConfig();
  newDimension.dimension=dimension;
  newDimension.init();
  newDimension.finish();
  dimensions.put(dimension,newDimension);
  return newDimension;
}",0.948024948024948
151852,"protected void processBOM() throws IOException {
  byte[] bom=new byte[BOM_SIZE];
  int read=pushbackReader.read(bom,0,BOM_SIZE);
  int unread=0;
  if (read > 0) {
    Set<String> encodings=BOMS.keySet();
    Iterator<String> itr=encodings.iterator();
    while (itr.hasNext()) {
      String currentEncoding=itr.next();
      byte[] currentBOM=BOMS.get(currentEncoding);
      if (arrayStartsWith(bom,currentBOM)) {
        encoding=currentEncoding;
        unread=currentBOM.length;
        break;
      }
    }
    if (unread <= BOM_SIZE && unread > 0) {
      pushbackReader.unread(bom,unread,read - unread);
    }
  }
  if (encoding == null) {
    reader=new InputStreamReader(pushbackReader);
  }
 else {
    reader=new InputStreamReader(pushbackReader,encoding);
  }
}","protected void processBOM() throws IOException {
  byte[] bom=new byte[BOM_SIZE];
  int read=pushbackReader.read(bom,0,BOM_SIZE);
  int unread=0;
  if (read > 0) {
    Set<String> encodings=BOMS.keySet();
    Iterator<String> itr=encodings.iterator();
    while (itr.hasNext()) {
      String currentEncoding=itr.next();
      byte[] currentBOM=BOMS.get(currentEncoding);
      if (arrayStartsWith(bom,currentBOM)) {
        encoding=currentEncoding;
        unread=currentBOM.length;
        break;
      }
    }
    if (unread <= BOM_SIZE) {
      pushbackReader.unread(bom,unread,read - unread);
    }
  }
  if (encoding == null) {
    reader=new InputStreamReader(pushbackReader);
  }
 else {
    reader=new InputStreamReader(pushbackReader,encoding);
  }
}",0.9908854166666666
151853,"@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(ID)) {
    id=getInt(value);
  }
 else   if (name.equals(NAME)) {
    this.name=value.toLowerCase();
  }
 else   if (name.equals(COLOR)) {
    color=value.charAt(0);
  }
 else   if (name.equals(IGNORE_CHESTS)) {
    ignoreChestLocks=true;
  }
 else   if (name.equals(IGNORE_AREAS)) {
    ignoreAreas=true;
  }
 else   if (name.equals(FORWARD_UNKNOWN)) {
    forwardUnknownCommands=true;
  }
 else   if (name.equals(SHOW_TITLE)) {
    showTitle=true;
  }
 else   if (name.equals(COOLDOWN)) {
    cooldown=getInt(value);
  }
 else   if (name.equals(WARMUP)) {
    warmup=getInt(value);
  }
}","@Override void setAttribute(String name,String value) throws SAXException {
  if (name.equals(ID)) {
    id=getInt(value);
  }
 else   if (name.equals(NAME)) {
    this.name=value;
  }
 else   if (name.equals(COLOR)) {
    color=value.charAt(0);
  }
 else   if (name.equals(IGNORE_CHESTS)) {
    ignoreChestLocks=true;
  }
 else   if (name.equals(IGNORE_AREAS)) {
    ignoreAreas=true;
  }
 else   if (name.equals(FORWARD_UNKNOWN)) {
    forwardUnknownCommands=true;
  }
 else   if (name.equals(SHOW_TITLE)) {
    showTitle=true;
  }
 else   if (name.equals(COOLDOWN)) {
    cooldown=getInt(value);
  }
 else   if (name.equals(WARMUP)) {
    warmup=getInt(value);
  }
}",0.9896449704142012
151854,"private void set(String permission) throws SAXException {
  if (permission.equals(""String_Node_Str"")) {
    return;
  }
  String[] parts=permission.split(""String_Node_Str"");
  for (  String group : parts[0].split(""String_Node_Str"")) {
    boolean allow=true;
    if (group.startsWith(""String_Node_Str"") || group.startsWith(""String_Node_Str"") || group.startsWith(""String_Node_Str"")) {
      allow=false;
      group=group.substring(1);
    }
    int start;
    int end;
    Matcher matcher;
    try {
      if (group.endsWith(""String_Node_Str"")) {
        start=getInt(group.substring(0,group.length() - 1));
        end=Integer.MAX_VALUE;
      }
 else       if (group.equals(""String_Node_Str"")) {
        start=Integer.MIN_VALUE;
        end=Integer.MAX_VALUE;
      }
 else       if ((matcher=GROUP_PATTERN.matcher(group)).matches()) {
        start=getInt(matcher.group(1));
        end=getInt(matcher.group(2));
      }
 else {
        start=end=getInt(group);
      }
    }
 catch (    SAXException e) {
      throw new SAXException(""String_Node_Str"" + permission + ""String_Node_Str"");
    }
    if (allow) {
      allowedGroups.put(start,end);
    }
 else {
      disallowedGroups.put(start,end);
    }
  }
  if (parts.length >= 2) {
    for (    String player : parts[1].split(""String_Node_Str"")) {
      if (player.startsWith(""String_Node_Str"") || player.startsWith(""String_Node_Str"") || player.startsWith(""String_Node_Str"")) {
        disallowedPlayers.add(player.substring(1).toLowerCase());
      }
 else {
        allowedPlayers.add(player.toLowerCase());
      }
    }
  }
  if (allowedGroups.isEmpty() && allowedPlayers.isEmpty()) {
    allowedGroups.put(Integer.MIN_VALUE,Integer.MAX_VALUE);
  }
}","private void set(String permission) throws SAXException {
  if (permission.equals(""String_Node_Str"")) {
    return;
  }
  String[] parts=permission.split(""String_Node_Str"");
  for (  String group : parts[0].split(""String_Node_Str"")) {
    if (group.length() == 0) {
      continue;
    }
    boolean allow=true;
    if (group.startsWith(""String_Node_Str"") || group.startsWith(""String_Node_Str"") || group.startsWith(""String_Node_Str"")) {
      allow=false;
      group=group.substring(1);
    }
    int start;
    int end;
    Matcher matcher;
    try {
      if (group.endsWith(""String_Node_Str"")) {
        start=getInt(group.substring(0,group.length() - 1));
        end=Integer.MAX_VALUE;
      }
 else       if (group.equals(""String_Node_Str"")) {
        start=Integer.MIN_VALUE;
        end=Integer.MAX_VALUE;
      }
 else       if ((matcher=GROUP_PATTERN.matcher(group)).matches()) {
        start=getInt(matcher.group(1));
        end=getInt(matcher.group(2));
      }
 else {
        start=end=getInt(group);
      }
    }
 catch (    SAXException e) {
      throw new SAXException(""String_Node_Str"" + permission + ""String_Node_Str"");
    }
    if (allow) {
      allowedGroups.put(start,end);
    }
 else {
      disallowedGroups.put(start,end);
    }
  }
  if (parts.length >= 2) {
    for (    String player : parts[1].split(""String_Node_Str"")) {
      if (player.startsWith(""String_Node_Str"") || player.startsWith(""String_Node_Str"") || player.startsWith(""String_Node_Str"")) {
        disallowedPlayers.add(player.substring(1).toLowerCase());
      }
 else {
        allowedPlayers.add(player.toLowerCase());
      }
    }
  }
  if (allowedGroups.isEmpty() && allowedPlayers.isEmpty()) {
    allowedGroups.put(Integer.MIN_VALUE,Integer.MAX_VALUE);
  }
}",0.9847569744032212
151855,"@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  String[] parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  String[] coords=parts[0].split(""String_Node_Str"");
  Coordinate start;
  if (coords.length == 2) {
    start=new Coordinate(getInt(coords[0]),0,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    start=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  Dimension dimension=(parts.length >= 2) ? Dimension.get(parts[1]) : Dimension.EARTH;
  parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  coords=parts[0].split(""String_Node_Str"");
  Coordinate end;
  if (coords.length == 2) {
    end=new Coordinate(getInt(coords[0]),0,getInt(coords[1]));
  }
 else {
    end=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
  if (!((Config)stack.firstElement()).dimensions.contains(dimension)) {
    ((Config)stack.firstElement()).dimensions.add(dimension);
  }
  DimensionAreaStorage.setInstance(((Config)stack.firstElement()).dimensions.get(dimension).areas);
  Area area=new Area(attributes.getValue(""String_Node_Str""),start,end);
  if (attributes.getIndex(""String_Node_Str"") >= 0) {
    area.owner=attributes.getValue(""String_Node_Str"").toLowerCase();
  }
  area.fullInit();
  if (container instanceof Config) {
    ((Config)container).dimensions.get(dimension).add(area);
  }
 else {
    ((Area)container).areas.add(area);
  }
  stack.push(area);
}","@Override void convert(Attributes attributes,Stack<PermissionContainer> stack) throws SAXException {
  PermissionContainer container=stack.peek();
  String[] parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  String[] coords=parts[0].split(""String_Node_Str"");
  Coordinate start;
  if (coords.length == 2) {
    start=new Coordinate(getInt(coords[0]),0,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    start=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  Dimension dimension=(parts.length >= 2) ? Dimension.get(parts[1]) : Dimension.EARTH;
  parts=attributes.getValue(""String_Node_Str"").split(""String_Node_Str"");
  coords=parts[0].split(""String_Node_Str"");
  Coordinate end;
  if (coords.length == 2) {
    end=new Coordinate(getInt(coords[0]),127,getInt(coords[1]));
  }
 else   if (coords.length >= 3) {
    end=new Coordinate(getInt(coords[0]),getInt(coords[1]),getInt(coords[2]));
  }
 else {
    throw new SAXException(""String_Node_Str"" + parts[0]);
  }
  if (!((Config)stack.firstElement()).dimensions.contains(dimension)) {
    ((Config)stack.firstElement()).dimensions.add(dimension);
  }
  DimensionAreaStorage.setInstance(((Config)stack.firstElement()).dimensions.get(dimension).areas);
  Area area=new Area(attributes.getValue(""String_Node_Str""),start,end);
  if (attributes.getIndex(""String_Node_Str"") >= 0) {
    area.owner=attributes.getValue(""String_Node_Str"").toLowerCase();
  }
  area.fullInit();
  if (container instanceof Config) {
    ((Config)container).dimensions.get(dimension).add(area);
  }
 else {
    ((Area)container).areas.add(area);
  }
  stack.push(area);
}",0.970131421744325
151856,"public static Config load(){
  File file=new File(""String_Node_Str"",""String_Node_Str"");
  if (!file.exists()) {
    return null;
  }
  System.out.println(""String_Node_Str"");
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  LegacyTagResolver handler;
  try {
    handler=new LegacyTagResolver();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",false);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new FileReader(file)));
  }
 catch (  FileNotFoundException e) {
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return handler.config();
}","public static Config load(){
  File file=new File(""String_Node_Str"",""String_Node_Str"");
  if (!file.exists()) {
    return null;
  }
  System.out.println(""String_Node_Str"");
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  LegacyTagResolver handler;
  try {
    handler=new LegacyTagResolver();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",false);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new FileReader(file)));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return handler.config();
}",0.9289489136817382
151857,"@Override public void load(){
  lock.lock();
  loadsuccess=false;
  InputStream stream;
  if (!getFile().exists()) {
    Config config;
    if ((config=LegacyPermissionConfig.load()) != null) {
      this.config=config;
      return;
    }
 else {
      stream=getClass().getResourceAsStream(filename);
    }
  }
 else {
    try {
      stream=new FileInputStream(getFile());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      lock.unlock();
      return;
    }
  }
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  XMLTagResolver handler;
  try {
    handler=new XMLTagResolver();
  }
 catch (  SAXException e1) {
    e1.printStackTrace();
    return;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",true);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new InputStreamReader(stream)));
  }
 catch (  Exception e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  processTags(handler.root());
  loadsuccess=true;
  lock.unlock();
}","@Override public void load(){
  lock.lock();
  loadsuccess=false;
  InputStream stream;
  if (!getFile().exists()) {
    Config config;
    if ((config=LegacyPermissionConfig.load()) != null) {
      this.config=config;
      loadsuccess=true;
      return;
    }
 else {
      stream=getClass().getResourceAsStream(filename);
    }
  }
 else {
    try {
      stream=new FileInputStream(getFile());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      lock.unlock();
      return;
    }
  }
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  XMLTagResolver handler;
  try {
    handler=new XMLTagResolver();
  }
 catch (  SAXException e1) {
    e1.printStackTrace();
    return;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",true);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new InputStreamReader(stream)));
  }
 catch (  Exception e) {
    e.printStackTrace();
    lock.unlock();
    return;
  }
  processTags(handler.root());
  loadsuccess=true;
  lock.unlock();
}",0.9898648648648648
151858,"public static Config load(){
  File file=new File(""String_Node_Str"",""String_Node_Str"");
  if (!file.exists()) {
    return null;
  }
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  LegacyTagResolver handler;
  try {
    handler=new LegacyTagResolver();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",false);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new FileReader(file)));
  }
 catch (  FileNotFoundException e) {
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return handler.config();
}","public static Config load(){
  File file=new File(""String_Node_Str"",""String_Node_Str"");
  if (!file.exists()) {
    return null;
  }
  System.out.println(""String_Node_Str"");
  XMLReader xml;
  try {
    xml=XMLReaderFactory.createXMLReader();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  LegacyTagResolver handler;
  try {
    handler=new LegacyTagResolver();
  }
 catch (  SAXException e) {
    e.printStackTrace();
    return null;
  }
  xml.setContentHandler(handler);
  xml.setErrorHandler(handler);
  try {
    xml.setFeature(""String_Node_Str"",false);
    xml.setEntityResolver(handler);
    xml.parse(new InputSource(new FileReader(file)));
  }
 catch (  FileNotFoundException e) {
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return handler.config();
}",0.975045648204504
151859,"private void startup(){
  restart=false;
  loadResources();
  if (permissions.loadsuccess == false) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  authenticator=new Authenticator(this);
  playerList=new PlayerList(options);
  requestTracker=new RequestTracker(this);
  messager=new Messager(this);
  minecraft=new MinecraftWrapper(this,options,systemInput);
  if (!minecraft.prepareServerJar()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  try {
    minecraft.start();
  }
 catch (  InterruptedException e) {
  }
  if (options.getBoolean(""String_Node_Str"")) {
    telnetServer=new TelnetServer(this);
  }
  if (options.getBoolean(""String_Node_Str"")) {
    rconServer=new RconServer(this);
  }
  world=new WorldFile(options.get(""String_Node_Str""));
  autoSpaceCheck=new AutoFreeSpaceChecker(this);
  autoBackup=new AutoBackup(this);
  autosave=new AutoSave(this);
  autoRestart=new AutoRestart(this);
  c10t=new AutoRun(this,options.get(""String_Node_Str""));
  if (options.contains(""String_Node_Str"")) {
    try {
      time.freeze(time.parse(options.get(""String_Node_Str"")));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
  }
  bots.ready();
}","private void startup(){
  restart=false;
  loadResources();
  if (permissions.loadsuccess == false) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  authenticator=new Authenticator(this);
  playerList=new PlayerList(options);
  requestTracker=new RequestTracker(this);
  messager=new Messager(this);
  messageLog=new MessageLog(options.get(""String_Node_Str""),options.getBoolean(""String_Node_Str""));
  minecraft=new MinecraftWrapper(this,options,systemInput);
  if (!minecraft.prepareServerJar()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  try {
    minecraft.start();
  }
 catch (  InterruptedException e) {
  }
  if (options.getBoolean(""String_Node_Str"")) {
    telnetServer=new TelnetServer(this);
  }
  if (options.getBoolean(""String_Node_Str"")) {
    rconServer=new RconServer(this);
  }
  world=new WorldFile(options.get(""String_Node_Str""));
  autoSpaceCheck=new AutoFreeSpaceChecker(this);
  autoBackup=new AutoBackup(this);
  autosave=new AutoSave(this);
  autoRestart=new AutoRestart(this);
  c10t=new AutoRun(this,options.get(""String_Node_Str""));
  if (options.contains(""String_Node_Str"")) {
    try {
      time.freeze(time.parse(options.get(""String_Node_Str"")));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
  }
  bots.ready();
}",0.9613130128956624
151860,"private void initialize(){
  resources=new LinkedList<Resource>();
  resources.add(permissions=new PermissionConfig(this));
  resources.add(options=new Options());
  resources.add(robots=new RobotList());
  resources.add(motd=new MOTD());
  resources.add(rules=new Rules());
  resources.add(helptext=new HelpText());
  resources.add(kits=new KitList(this));
  resources.add(ipBans=new IPBanList());
  resources.add(whitelist=new WhiteList());
  resources.add(mutelist=new MuteList());
  resources.add(giveAliasList=new GiveAliasList());
  resources.add(data=new GlobalData());
  resources.add(docs=new ReadFiles());
  time=new Time(this);
  bots=new BotController(this);
  systemInput=new SystemInputQueue();
  adminLog=new AdminLog();
  errorLog=new ErrorLog();
  connectionLog=new ConnectionLog();
  messageLog=new MessageLog(options.get(""String_Node_Str""),options.getBoolean(""String_Node_Str""));
  commandParser=new CommandParser(options,permissions);
}","private void initialize(){
  resources=new LinkedList<Resource>();
  resources.add(permissions=new PermissionConfig(this));
  resources.add(options=new Options());
  resources.add(robots=new RobotList());
  resources.add(motd=new MOTD());
  resources.add(rules=new Rules());
  resources.add(helptext=new HelpText());
  resources.add(kits=new KitList(this));
  resources.add(ipBans=new IPBanList());
  resources.add(whitelist=new WhiteList());
  resources.add(mutelist=new MuteList());
  resources.add(giveAliasList=new GiveAliasList());
  resources.add(data=new GlobalData());
  resources.add(docs=new ReadFiles());
  time=new Time(this);
  bots=new BotController(this);
  systemInput=new SystemInputQueue();
  adminLog=new AdminLog();
  errorLog=new ErrorLog();
  connectionLog=new ConnectionLog();
  commandParser=new CommandParser(options,permissions);
}",0.9023717595146168
151861,"private long lastBackupAge(){
  return age(newestBackup());
}","private long lastBackupAge(){
  long age=age(newestBackup());
  return (age >= 0) ? age : Long.MAX_VALUE;
}",0.6547619047619048
151862,"private static long age(File file){
  try {
    if (file == null) {
      return 0;
    }
 else {
      return System.currentTimeMillis() - date(file);
    }
  }
 catch (  ParseException e) {
    return System.currentTimeMillis() - file.lastModified();
  }
}","private static long age(File file){
  try {
    if (file == null) {
      return -1;
    }
 else {
      return System.currentTimeMillis() - date(file);
    }
  }
 catch (  ParseException e) {
    return System.currentTimeMillis() - file.lastModified();
  }
}",0.9941972920696324
151863,"public boolean allowGuestJoin(){
  return server.options.getBoolean(""String_Node_Str"");
}","public boolean allowGuestJoin(){
  return server.options.getBoolean(""String_Node_Str"") || !server.options.getBoolean(""String_Node_Str"");
}",0.7841409691629956
151864,"public String getInvitedPlayer(String prefix){
  for (  String playerName : getPlayersInvited()) {
    if (playerName.startsWith(prefix)) {
      return playerName;
    }
  }
  return prefix;
}","public String getInvitedPlayer(String prefix){
  if (getPlayersInvited().contains(prefix)) {
    return prefix;
  }
  for (  String playerName : getPlayersInvited()) {
    if (playerName.startsWith(prefix)) {
      return playerName;
    }
  }
  return prefix;
}",0.843956043956044
151865,"public void giveLock(Player player,Coordinate coordinate,String name){
  giveLock(player.getName(),coordinate,name);
}","public void giveLock(Player player,Coordinate coordinate,String name){
  giveLock(player.getName().toLowerCase(),coordinate,name);
}",0.944
151866,"public void teleportSelf(Position position){
  try {
    teleport(position);
  }
 catch (  Exception e) {
    addTMessage(Color.RED,""String_Node_Str"");
    return;
  }
  lastTeleport=new Date().getTime();
}","public void teleportSelf(Position position){
  try {
    teleport(position);
  }
 catch (  Exception e) {
    addTMessage(Color.RED,""String_Node_Str"");
    return;
  }
  lastTeleport=System.currentTimeMillis();
}",0.9282296650717704
151867,"private int cooldownLeft(){
  int cooldown=getGroup().getCooldownMillis();
  if (lastTeleport > new Date().getTime() - cooldown) {
    return (int)(cooldown - new Date().getTime() + lastTeleport);
  }
 else {
    return 0;
  }
}","private int cooldownLeft(){
  int cooldown=getGroup().getCooldownMillis();
  if (lastTeleport > System.currentTimeMillis() - cooldown) {
    return (int)(cooldown - System.currentTimeMillis() + lastTeleport);
  }
 else {
    return 0;
  }
}",0.8290598290598291
151868,"public void execute(Player player,String message){
  Homes homes=player.getServer().data.players.homes;
  String playerName=player.getName();
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    teleportHome(player);
    return;
  }
  String command=arguments[0];
  if (command.equals(""String_Node_Str"")) {
    usage(player);
  }
 else   if (command.equals(""String_Node_Str"")) {
    if (homes.get(playerName) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    homes.set(playerName,homes.makeHomePoint(player.position));
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    if (homes.get(playerName) == null) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    homes.remove(playerName);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic == true) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    home.isPublic=true;
    homes.set(playerName,home);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic == false) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    home.isPublic=false;
    homes.set(playerName,home);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    List<String> list=homes.getHomesPlayerInvitedTo(playerName);
    if (list.isEmpty()) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"",join(list).trim());
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    List<String> list=home.getPlayersInvited();
    if (list.isEmpty()) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"",join(list).trim());
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (arguments.length == 1) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      usage(player);
      return;
    }
    String iPlayer=arguments[1];
    Player onlineTarget=player.getServer().findPlayer(iPlayer);
    if (onlineTarget != null) {
      iPlayer=onlineTarget.getName();
    }
    if (!home.invites.contains(new NBTString(iPlayer))) {
      home.invites.add(new NBTString(iPlayer));
      player.addTMessage(Color.GRAY,""String_Node_Str"",iPlayer);
      if (onlineTarget != null) {
        onlineTarget.addTMessage(Color.GRAY,""String_Node_Str"",getName());
      }
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (arguments.length == 1) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      usage(player);
      return;
    }
    String uiPlayer=home.getInvitedPlayer(arguments[1]);
    if (home.invites.contains(new NBTString(uiPlayer))) {
      home.invites.remove(new NBTString(uiPlayer));
      player.addTMessage(Color.GRAY,""String_Node_Str"",uiPlayer);
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
  }
 else {
    if (command == playerName) {
      teleportHome(player);
      return;
    }
    String target=command;
    String onlinePlayer=player.getServer().findName(target);
    if (onlinePlayer != null) {
      target=onlinePlayer;
    }
 else {
      List<String> list=homes.getHomesPlayerInvitedTo(playerName);
      for (      String p : list) {
        if (p.startsWith(target)) {
          target=p;
          break;
        }
      }
    }
    HomePoint home=homes.get(target);
    if (home == null) {
      usage(player);
      return;
    }
    if ((home.isPublic && player.getServer().findPlayer(target) != null) || home.invites.contains(new NBTString(playerName))) {
      player.teleportWithWarmup(home.position);
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"",command);
    }
  }
}","public void execute(Player player,String message){
  Homes homes=player.getServer().data.players.homes;
  String playerName=player.getName();
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    teleportHome(player);
    return;
  }
  String command=arguments[0];
  if (command.equals(""String_Node_Str"")) {
    usage(player);
  }
 else   if (command.equals(""String_Node_Str"")) {
    if (homes.get(playerName) != null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    homes.set(playerName,homes.makeHomePoint(player.position));
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    if (homes.get(playerName) == null) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    homes.remove(playerName);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic == true) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    home.isPublic=true;
    homes.set(playerName,home);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic == false) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    home.isPublic=false;
    homes.set(playerName,home);
    player.getServer().data.save();
    player.addTMessage(Color.GRAY,""String_Node_Str"");
  }
 else   if (command.equals(""String_Node_Str"")) {
    List<String> inviteList=new LinkedList<String>();
    List<String> publicList=new LinkedList<String>();
    homes.getVisitableHomes(playerName,inviteList,publicList);
    if (inviteList.isEmpty() && publicList.isEmpty()) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"",join(publicList).trim());
    player.addTMessage(Color.GRAY,""String_Node_Str"",join(inviteList).trim());
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (home.isPublic) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    List<String> list=home.getPlayersInvited();
    if (list.isEmpty()) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
    player.addTMessage(Color.GRAY,""String_Node_Str"",join(list).trim());
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (arguments.length == 1) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      usage(player);
      return;
    }
    String iPlayer=arguments[1];
    Player onlineTarget=player.getServer().findPlayer(iPlayer);
    if (onlineTarget != null) {
      iPlayer=onlineTarget.getName();
    }
    if (!home.invites.contains(new NBTString(iPlayer))) {
      home.invites.add(new NBTString(iPlayer));
      player.addTMessage(Color.GRAY,""String_Node_Str"",iPlayer);
      if (onlineTarget != null) {
        onlineTarget.addTMessage(Color.GRAY,""String_Node_Str"",player.getName());
      }
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    HomePoint home=homes.get(playerName);
    if (home == null) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      return;
    }
    if (arguments.length == 1) {
      player.addTMessage(Color.RED,""String_Node_Str"");
      usage(player);
      return;
    }
    String uiPlayer=home.getInvitedPlayer(arguments[1]);
    if (home.invites.contains(new NBTString(uiPlayer))) {
      home.invites.remove(new NBTString(uiPlayer));
      player.addTMessage(Color.GRAY,""String_Node_Str"",uiPlayer);
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
  }
 else {
    if (command.toLowerCase().equals(playerName.toLowerCase())) {
      teleportHome(player);
      return;
    }
    String target=command;
    String onlinePlayer=player.getServer().findName(target);
    if (onlinePlayer != null) {
      target=onlinePlayer;
    }
 else {
      List<String> list=homes.getHomesPlayerInvitedTo(playerName);
      for (      String p : list) {
        if (p.startsWith(target)) {
          target=p;
          break;
        }
      }
    }
    HomePoint home=homes.get(target);
    if (home == null) {
      usage(player);
      return;
    }
    if ((home.isPublic && player.getServer().findPlayer(target) != null) || home.invites.contains(new NBTString(playerName)) || target.toLowerCase().equals(playerName.toLowerCase())) {
      player.teleportWithWarmup(home.position);
    }
 else {
      player.addTMessage(Color.RED,""String_Node_Str"",command);
    }
  }
}",0.5722335567861654
151869,"public List<String> getHomesPlayerInvitedTo(String playerName){
  List<String> invitedTo=new LinkedList<String>();
  for (  String name : playerData.names()) {
    NBTCompound player=playerData.get(name);
    if (player.containsKey(HOME)) {
      HomePoint home=new HomePoint(player.getCompound(HOME));
      if (home.invites.contains(new NBTString(playerName))) {
        invitedTo.add(name);
      }
    }
  }
  return invitedTo;
}","public List<String> getHomesPlayerInvitedTo(String playerName){
  List<String> invitedHomes=new LinkedList<String>();
  for (  String name : playerData.names()) {
    NBTCompound player=playerData.get(name);
    if (player.containsKey(HOME)) {
      HomePoint home=new HomePoint(player.getCompound(HOME));
      if (home.invites.contains(new NBTString(playerName))) {
        invitedHomes.add(name);
      }
    }
  }
  return invitedHomes;
}",0.976
151870,"@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}","@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}",0.9716177861873226
151871,"@Override public void run(){
  while (run) {
    if (needsBackup()) {
      try {
        server.saveLock.acquire();
      }
 catch (      InterruptedException e) {
        continue;
      }
      forceBackup=false;
      server.autoSpaceCheck.check(true);
      if (server.options.getBoolean(""String_Node_Str"")) {
        server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
      }
      server.setSaving(true);
      server.runCommand(""String_Node_Str"",null);
      while (server.isSaving()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
      try {
        backup();
      }
 catch (      IOException e) {
        server.errorLog(e,""String_Node_Str"");
        System.out.println(""String_Node_Str"" + e);
        System.out.println(""String_Node_Str"");
      }
      server.saveLock.release();
      pauseBackup=(server.numPlayers() == 0);
    }
    try {
      Thread.sleep(60000);
    }
 catch (    InterruptedException e) {
    }
  }
}","@Override public void run(){
  while (run) {
    if (needsBackup()) {
      try {
        server.saveLock.acquire();
      }
 catch (      InterruptedException e) {
        continue;
      }
      forceBackup=false;
      server.autoSpaceCheck.check(true);
      if (server.options.getBoolean(""String_Node_Str"")) {
        server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
      }
      server.setSaving(true);
      server.runCommand(""String_Node_Str"",null);
      while (server.isSaving()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
      try {
        backup();
      }
 catch (      IOException e) {
        server.errorLog(e,""String_Node_Str"");
        System.out.println(""String_Node_Str"" + e);
        System.out.println(""String_Node_Str"");
      }
      server.saveLock.release();
      if (server.numPlayers() == 0) {
        pauseBackup=true;
      }
    }
    if (pauseBackup && server.numPlayers() > 0) {
      pauseBackup=false;
    }
    try {
      Thread.sleep(60000);
    }
 catch (    InterruptedException e) {
    }
  }
}",0.9386416861826696
151872,"public void loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (!Translations.getInstance().setLanguage(options.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!options.getBoolean(""String_Node_Str""));
  commandParser.reload();
}","public void loadResources(){
  for (  Resource resource : resources) {
    resource.load();
  }
  if (playerList != null) {
    playerList.updatePlayerGroups();
  }
  if (!Translations.getInstance().setLanguage(options.get(""String_Node_Str""))) {
    options.set(""String_Node_Str"",""String_Node_Str"");
    options.save();
  }
  addressFactory.toggle(!options.getBoolean(""String_Node_Str""));
}",0.967741935483871
151873,"public String getHelpText(String prefix){
  if (name != null) {
    return Color.DARK_GREEN + prefix + helpText;
  }
 else {
    return helpText;
  }
}","public String getHelpText(String prefix){
  if (help != null) {
    return Color.DARK_GREEN + prefix + help+ ""String_Node_Str""+ Color.WHITE+ t(commandCode);
  }
 else {
    return t(commandCode);
  }
}",0.7727272727272727
151874,"protected AbstractCommand(String name,String commandCode){
  if (name != null) {
    helpText=name + Color.WHITE + ""String_Node_Str""+ t(commandCode);
    int splitIndex=name.indexOf(""String_Node_Str"");
    if (splitIndex != -1) {
      name=name.substring(0,splitIndex);
    }
  }
 else {
    helpText=t(commandCode);
  }
  this.name=name;
  this.commandCode=commandCode;
}","protected AbstractCommand(String name,String commandCode){
  help=name;
  if (name != null) {
    int splitIndex=name.indexOf(""String_Node_Str"");
    if (splitIndex != -1) {
      name=name.substring(0,splitIndex);
    }
  }
  this.name=name;
  this.commandCode=commandCode;
}",0.5793528505392912
151875,"public synchronized String getNextAddress(){
  if (!canCycle()) {
    return ""String_Node_Str"";
  }
  if (octets[2] >= 255) {
    if (octets[1] >= 255) {
      if (octets[0] >= 255) {
        octets[0]=0;
      }
 else {
        ++octets[0];
      }
      octets[1]=0;
    }
 else {
      ++octets[1];
    }
    octets[2]=2;
  }
 else {
    ++octets[2];
  }
  return ""String_Node_Str"" + octets[0] + ""String_Node_Str""+ octets[1]+ ""String_Node_Str""+ octets[2];
}","public synchronized String getNextAddress(){
  if (!enabled || !canCycle()) {
    return ""String_Node_Str"";
  }
  if (octets[2] >= 255) {
    if (octets[1] >= 255) {
      if (octets[0] >= 255) {
        octets[0]=0;
      }
 else {
        ++octets[0];
      }
      octets[1]=0;
    }
 else {
      ++octets[1];
    }
    octets[2]=2;
  }
 else {
    ++octets[2];
  }
  return ""String_Node_Str"" + octets[0] + ""String_Node_Str""+ octets[1]+ ""String_Node_Str""+ octets[2];
}",0.9871244635193132
151876,"private void toggle(boolean enabled){
  canCycle=enabled ? null : false;
}","private void toggle(boolean enabled){
  LocalAddressFactory.enabled=enabled;
}",0.7368421052631579
151877,"public void close(){
  if (serverToClient != null) {
    serverToClient.stop();
  }
  if (clientToServer != null) {
    clientToServer.stop();
  }
  if (name != null) {
    server.authenticator.unbanLogin(this);
    if (usedAuthenticator) {
      if (guest) {
        server.authenticator.releaseGuestName(name);
      }
 else {
        server.authenticator.rememberAuthentication(name,getIPAddress());
      }
    }
 else     if (guest) {
      server.authenticator.rememberGuest(name,getIPAddress());
    }
    server.data.players.stats.add(this,StatField.PLAY_TIME,(int)(System.currentTimeMillis() - connected) / 1000 / 60);
    server.data.players.stats.add(this,StatField.BLOCKS_DESTROYED,blocksDestroyed);
    server.data.players.stats.add(this,StatField.BLOCKS_PLACED,blocksPlaced);
    server.data.save();
    server.playerList.removePlayer(this);
    name=null;
  }
}","public void close(){
  if (serverToClient != null) {
    serverToClient.stop();
  }
  if (clientToServer != null) {
    clientToServer.stop();
  }
  if (name != null) {
    server.authenticator.unbanLogin(this);
    if (usedAuthenticator) {
      if (guest) {
        server.authenticator.releaseGuestName(name);
      }
 else {
        server.authenticator.rememberAuthentication(name,getIPAddress());
      }
    }
 else     if (guest) {
      if (isKicked) {
        server.authenticator.releaseGuestName(name);
      }
 else {
        server.authenticator.rememberGuest(name,getIPAddress());
      }
    }
    server.data.players.stats.add(this,StatField.PLAY_TIME,(int)(System.currentTimeMillis() - connected) / 1000 / 60);
    server.data.players.stats.add(this,StatField.BLOCKS_DESTROYED,blocksDestroyed);
    server.data.players.stats.add(this,StatField.BLOCKS_PLACED,blocksPlaced);
    server.data.save();
    server.playerList.removePlayer(this);
    name=null;
  }
}",0.9454937938478144
151878,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
if (server.authenticator.useCustAuth(player) && !server.authenticator.onlineAuthenticate(player)) {
  player.kick(t(""String_Node_Str"",""String_Node_Str""));
  break;
}
player.setEntityId(write(in.readInt()));
write(readUTF16());
server.setMapSeed(write(in.readLong()));
}
 else {
write(in.readInt());
readUTF16();
write(player.getName());
write(in.readLong());
}
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
boolean nameSet=false;
if (isServerTunnel) {
if (!server.authenticator.useCustAuth(player)) {
name=""String_Node_Str"";
}
 else if (!server.authenticator.vanillaOnlineMode()) {
name=player.getConnectionHash();
}
}
 else {
if (name.equals(""String_Node_Str"") || !server.authenticator.isMinecraftUp) {
AuthRequest req=server.authenticator.getAuthRequest(player.getIPAddress());
if (req != null) {
name=req.playerName;
nameSet=server.authenticator.completeLogin(req,player);
}
if (req == null || !nameSet) {
if (!name.equals(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
player.addTMessage(Color.RED,""String_Node_Str"");
}
name=server.authenticator.getFreeGuestName();
nameSet=player.setName(name);
player.setGuest(true);
}
}
 else {
nameSet=player.setName(name);
if (nameSet) {
player.updateRealName(name);
}
}
}
if (isServerTunnel || nameSet) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
if (message.contains(""String_Node_Str"")) {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
 else {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
break;
}
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
Chest adjacent=server.data.chests.adjacentChest(player.openedChest());
if (!server.data.chests.isChest(player.openedChest())) {
if (adjacent == null) {
server.data.chests.addOpenChest(player.openedChest());
}
 else {
server.data.chests.giveLock(adjacent.owner,player.openedChest(),adjacent.name);
}
server.data.save();
}
if (!server.permissions.canOpenChests(player,player.openedChest()) || (adjacent != null && !server.permissions.canOpenChests(player,adjacent.coordinate))) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=(player.nextChestName() == null) ? t(""String_Node_Str"") : player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
if (server.authenticator.useCustAuth(player) && !server.authenticator.onlineAuthenticate(player)) {
  player.kick(t(""String_Node_Str"",""String_Node_Str""));
  break;
}
player.setEntityId(write(in.readInt()));
write(readUTF16());
server.setMapSeed(write(in.readLong()));
}
 else {
write(in.readInt());
readUTF16();
write(player.getName());
write(in.readLong());
}
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
boolean nameSet=false;
if (isServerTunnel) {
if (!server.authenticator.useCustAuth(player)) {
name=""String_Node_Str"";
}
 else if (!server.authenticator.vanillaOnlineMode()) {
name=player.getConnectionHash();
}
}
 else {
if (name.equals(""String_Node_Str"") || !server.authenticator.isMinecraftUp) {
AuthRequest req=server.authenticator.getAuthRequest(player.getIPAddress());
if (req != null) {
name=req.playerName;
nameSet=server.authenticator.completeLogin(req,player);
}
if (req == null || !nameSet) {
if (!name.equals(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
player.addTMessage(Color.RED,""String_Node_Str"");
}
name=server.authenticator.getFreeGuestName();
nameSet=player.setName(name);
player.setGuest(true);
}
}
 else {
nameSet=player.setName(name);
if (nameSet) {
player.updateRealName(name);
}
}
}
if (player.isGuest() && !server.authenticator.allowGuestJoin()) {
player.kick(t(""String_Node_Str""));
nameSet=false;
}
if (isServerTunnel || nameSet) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
if (message.contains(""String_Node_Str"")) {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
 else {
player.addTMessage(Color.YELLOW,""String_Node_Str"",joinMatcher.group(1));
}
break;
}
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
Chest adjacent=server.data.chests.adjacentChest(player.openedChest());
if (!server.data.chests.isChest(player.openedChest())) {
if (adjacent == null) {
server.data.chests.addOpenChest(player.openedChest());
}
 else {
server.data.chests.giveLock(adjacent.owner,player.openedChest(),adjacent.name);
}
server.data.save();
}
if (!server.permissions.canOpenChests(player,player.openedChest()) || (adjacent != null && !server.permissions.canOpenChests(player,adjacent.coordinate))) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=(player.nextChestName() == null) ? t(""String_Node_Str"") : player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}",0.9958905063731978
151879,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(readUTF16());
write(in.readLong());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
}
 else if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
if (!server.permissions.canOpenChests(player,player.openedChest())) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(readUTF16());
write(in.readLong());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
}
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
if (!server.permissions.canOpenChests(player,player.openedChest())) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}",0.999761620977354
151880,"public void execute(Player player,String message){
  String name=extractArgument(message);
  if (name == null) {
    if (player.isAttemptLock()) {
      player.setAttemptedAction(null);
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
 else {
      name=""String_Node_Str"";
    }
  }
  if (name.equals(""String_Node_Str"")) {
    Map<String,Integer> list=player.getServer().data.chests.chestList(player);
    if (list.size() == 0) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      for (      String current : list.keySet()) {
        player.addMessage(Color.GRAY,list.get(current) + ""String_Node_Str"" + current);
      }
    }
  }
 else {
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.setAttemptedAction(Action.Lock);
    player.setChestName(name);
  }
}","public void execute(Player player,String message){
  String name=extractArgument(message);
  if (name == null) {
    if (player.isAttemptLock()) {
      player.setAttemptedAction(null);
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      return;
    }
  }
  if (name != null && name.equals(""String_Node_Str"")) {
    Map<String,Integer> list=player.getServer().data.chests.chestList(player);
    if (list.size() == 0) {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
    }
 else {
      player.addTMessage(Color.GRAY,""String_Node_Str"");
      for (      String current : list.keySet()) {
        player.addMessage(Color.GRAY,list.get(current) + ""String_Node_Str"" + current);
      }
    }
  }
 else {
    player.addTMessage(Color.GRAY,""String_Node_Str"");
    player.setAttemptedAction(Action.Lock);
    player.setChestName(name);
  }
}",0.956170703575548
151881,"@Override public void load(){
  boolean success=false;
  File inFile=getFile();
  try {
    BufferedReader reader=new BufferedReader(new FileReader(inFile));
    try {
      String line;
      while ((line=reader.readLine()) != null) {
        if (!line.startsWith(""String_Node_Str"")) {
          loadLine(line);
        }
      }
      success=true;
    }
  finally {
      reader.close();
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println(getFilename() + ""String_Node_Str"");
    loadDefaults();
    save();
    success=true;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (!success) {
    System.out.println(""String_Node_Str"" + getFilename() + ""String_Node_Str"");
  }
}","@Override public void load(){
  boolean success=false;
  File inFile=getFile();
  try {
    BufferedReader reader=new BufferedReader(new FileReader(inFile));
    try {
      String line;
      while ((line=reader.readLine()) != null) {
        if (!line.startsWith(""String_Node_Str"")) {
          loadLine(line);
        }
      }
      success=true;
    }
  finally {
      reader.close();
    }
  }
 catch (  FileNotFoundException e) {
    missingFile();
    loadDefaults();
    save();
    success=true;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (!success) {
    System.out.println(""String_Node_Str"" + getFilename() + ""String_Node_Str"");
  }
}",0.9563953488372092
151882,"@Override public void load(){
  if (layered) {
    properties=(SortedProperties)defaultProperties.clone();
  }
 else {
    properties=new SortedProperties();
  }
  try {
    InputStream stream=new FileInputStream(getFile());
    try {
      properties.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println(getFilename() + ""String_Node_Str"");
    properties=(SortedProperties)defaultProperties.clone();
    save();
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.out.println(""String_Node_Str"" + getFilename());
  }
}","@Override public void load(){
  if (layered) {
    properties=(SortedProperties)defaultProperties.clone();
  }
 else {
    properties=new SortedProperties();
  }
  try {
    InputStream stream=new FileInputStream(getFile());
    try {
      properties.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  FileNotFoundException e) {
    missingFile();
    properties=(SortedProperties)defaultProperties.clone();
    save();
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.out.println(""String_Node_Str"" + getFilename());
  }
}",0.9553719008264464
151883,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(readUTF16());
write(in.readLong());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
}
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
if (!server.permissions.canOpenChests(player,player.openedChest())) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
  byte dimension;
  Coordinate coordinate;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(readUTF16());
write(in.readLong());
dimension=in.readByte();
if (isServerTunnel) {
player.setDimension(Dimension.get(dimension));
}
write(dimension);
break;
case 0x02:
String name=readUTF16();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
Matcher joinMatcher=JOIN_PATTERN.matcher(message);
if (isServerTunnel && joinMatcher.find()) {
if (server.bots.ninja(joinMatcher.group(1))) {
break;
}
}
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
 else if (cleanMessage.matches(CONSOLE_CHAT_PATTERN) && !server.options.getBoolean(""String_Node_Str"")) {
break;
}
if (server.options.getBoolean(""String_Node_Str"")) {
sendMessage(message);
}
 else {
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
}
 else if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
if (message.length() > MAXIMUM_MESSAGE_SIZE) {
message=message.substring(0,MAXIMUM_MESSAGE_SIZE);
}
write(packetId);
write(message);
}
break;
case 0x04:
write(packetId);
long time=in.readLong();
server.setTime(time);
write(time);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
dimension=in.readByte();
write(dimension);
player.setDimension(Dimension.get(dimension));
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
copyNBytes(1);
break;
case 0x0c:
write(packetId);
copyPlayerLook();
copyNBytes(1);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyPlayerLook();
copyNBytes(1);
break;
case 0x0e:
if (!isServerTunnel) {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
coordinate=new Coordinate(x,y,z,player);
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);
if (!perms[2] && status == 0) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
if (!perms[1] && status == 2) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
boolean locked=server.data.chests.isLocked(coordinate);
if (!locked || player.isAdmin()) {
if (locked && status == BLOCK_DESTROYED_STATUS) {
server.data.chests.releaseLock(coordinate);
server.data.save();
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
coordinate=new Coordinate(x,y,z,player);
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);
if (isServerTunnel || server.data.chests.isChest(coordinate)) {
}
 else if ((dropItem != -1 && !perms[0]) || (dropItem == -1 && !perms[2])) {
if (dropItem == -1) {
player.addTMessage(Color.RED,""String_Node_Str"");
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
}
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);
Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addTMessage(Color.RED,""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(targetBlock);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(coordinate);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
int eid=in.readInt();
name=readUTF16();
if (!server.bots.ninja(name)) {
write(packetId);
write(eid);
write(name);
copyNBytes(16);
}
 else {
skipNBytes(16);
}
break;
case 0x15:
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
int flag=in.readInt();
write(flag);
if (flag > 0) {
write(in.readShort());
write(in.readShort());
write(in.readShort());
}
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
coordinate=new Coordinate(x,y,z,player);
if (blockType == 54 && player.placedChest(coordinate)) {
lockChest(coordinate);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x3d:
write(packetId);
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
byte unknownByte=in.readByte();
if (invtype == 0) {
Chest adjacent=server.data.chests.adjacentChest(player.openedChest());
if (!server.data.chests.isChest(player.openedChest())) {
if (adjacent == null) {
server.data.chests.addOpenChest(player.openedChest());
}
 else {
server.data.chests.giveLock(adjacent.owner,player.openedChest(),adjacent.name);
}
server.data.save();
}
if (!server.permissions.canOpenChests(player,player.openedChest()) || (adjacent != null && !server.permissions.canOpenChests(player,adjacent.coordinate))) {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
 else if (server.data.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.data.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.data.chests.unlock(player.openedChest());
server.data.save();
player.setAttemptedAction(null);
player.addTMessage(Color.RED,""String_Node_Str"");
typeString=t(""String_Node_Str"");
}
 else {
typeString=server.data.chests.chestName(player.openedChest());
}
}
 else {
typeString=t(""String_Node_Str"");
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=(player.nextChestName() == null) ? t(""String_Node_Str"") : player.nextChestName();
}
}
}
 else {
player.addTMessage(Color.RED,""String_Node_Str"");
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(unknownByte);
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x67:
byte type67=in.readByte();
short slot=in.readShort();
short setItem=in.readShort();
write(packetId);
write(type67);
write(slot);
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
break;
case 0x68:
byte type=in.readByte();
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0x83:
write(packetId);
write(in.readShort());
write(in.readShort());
byte length=in.readByte();
write(length);
copyNBytes(0xff & length);
break;
case (byte)0xc8:
write(packetId);
copyNBytes(5);
break;
case (byte)0xe6:
write(packetId);
write(in.readInt());
write(in.readInt());
copyNBytes(write(in.readInt()) * 4);
copyNBytes(write(in.readInt()) * 4);
int sizeString=write(in.readInt());
for (int i=0; i < sizeString; i++) {
copyNBytes(write(in.readInt()));
}
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ Integer.toHexString(lastPacket));
}
}
packetFinished();
lastPacket=packetId;
}",0.9776824034334765
151884,"/** 
 * PERMISSIONS 
 */
public boolean vanillaOnlineMode(){
  return !server.options.getBoolean(""String_Node_Str"") && server.options.getBoolean(""String_Node_Str"");
}","/** 
 * PERMISSIONS 
 */
public boolean vanillaOnlineMode(){
  return false;
}",0.6147540983606558
151885,"@Override public void finalize(){
  timer.cancel();
  cleanLoginRequests();
}","@Override public void finalize(){
  try {
    timer.cancel();
  }
 catch (  Exception e) {
  }
  cleanLoginRequests();
}",0.7817258883248731
151886,"@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (simpleServerOptions.getBoolean(""String_Node_Str"")) {
    options.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  }
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}","@Override public void save(){
  load();
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}",0.1145175834084761
151887,"public void handleOutput(String line){
  if (!server.options.getBoolean(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    return;
  }
  Integer[] ports=server.getRobotPorts();
  if (ports != null) {
    for (    Integer port : ports) {
      if (port != null) {
        if (line.contains(port.toString())) {
          server.removeRobotPort(port);
          return;
        }
      }
    }
  }
  if (line.contains(""String_Node_Str"")) {
synchronized (this) {
      loaded=true;
      notifyAll();
    }
  }
 else   if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
    server.setSaving(false);
    if (server.options.getBoolean(""String_Node_Str"")) {
      server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
    }
  }
 else   if (line.contains(""String_Node_Str"")) {
    handleError(new Exception(line));
  }
 else   if (line.matches(""String_Node_Str"")) {
    return;
  }
 else   if (line.contains(""String_Node_Str"") && server.options.getBoolean(""String_Node_Str"")) {
    return;
  }
 else {
    Matcher connect=CONNECT.matcher(line);
    if (connect.find()) {
      if (server.bots.ninja(connect.group(1))) {
        return;
      }
    }
 else {
      Matcher disconnect=DISCONNECT.matcher(line);
      if (disconnect.find()) {
        if (server.bots.ninja(disconnect.group(1))) {
          return;
        }
      }
    }
  }
  server.addOutputLine(line);
  System.out.println(line);
}","public void handleOutput(String line){
  if (!server.options.getBoolean(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
    return;
  }
  Integer[] ports=server.getRobotPorts();
  if (ports != null) {
    for (    Integer port : ports) {
      if (port != null) {
        if (line.contains(port.toString())) {
          server.removeRobotPort(port);
          return;
        }
      }
    }
  }
  if (ignoreLine()) {
    return;
  }
  if (line.contains(""String_Node_Str"")) {
synchronized (this) {
      loaded=true;
      notifyAll();
    }
  }
 else   if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
    server.setSaving(false);
    if (server.options.getBoolean(""String_Node_Str"")) {
      server.runCommand(""String_Node_Str"",t(""String_Node_Str""));
    }
  }
 else   if (line.contains(""String_Node_Str"")) {
    handleError(new Exception(line));
  }
 else   if (line.matches(""String_Node_Str"")) {
    return;
  }
 else   if (line.contains(""String_Node_Str"") && server.options.getBoolean(""String_Node_Str"")) {
    ignoreNextLines(3);
    return;
  }
 else {
    Matcher connect=CONNECT.matcher(line);
    if (connect.find()) {
      if (server.bots.ninja(connect.group(1))) {
        return;
      }
    }
 else {
      Matcher disconnect=DISCONNECT.matcher(line);
      if (disconnect.find()) {
        if (server.bots.ninja(disconnect.group(1))) {
          return;
        }
      }
    }
  }
  server.addOutputLine(line);
  System.out.println(line);
}",0.9788106630211894
151888,"private void sendMessagePacket(String message) throws IOException {
  if (message.length() > MESSAGE_SIZE) {
    System.out.println(""String_Node_Str"" + message);
    return;
  }
  write(0x03);
  write(message);
  packetFinished();
}","private void sendMessagePacket(String message) throws IOException {
  if (message.length() > MESSAGE_SIZE) {
    System.out.println(""String_Node_Str"" + message);
    return;
  }
  if (message.length() > 0) {
    write(0x03);
    write(message);
    packetFinished();
  }
}",0.9206349206349206
151889,"private void sendMessage(String message) throws IOException {
  if (message.length() > MESSAGE_SIZE) {
    int end=MESSAGE_SIZE - 1;
    while (end > 0 && message.charAt(end) != ' ') {
      end--;
    }
    if (end == 0) {
      end=MESSAGE_SIZE;
    }
 else {
      end++;
    }
    if (message.charAt(end) == '\u00a7') {
      end--;
    }
    String firstPart=message.substring(0,end);
    sendMessagePacket(firstPart);
    sendMessage(getLastColorCode(firstPart) + message.substring(end));
  }
 else {
    int end=message.length();
    if (message.charAt(end - 1) == '\u00a7') {
      end--;
    }
    sendMessagePacket(message.substring(0,end));
  }
}","private void sendMessage(String message) throws IOException {
  if (message.length() > 0) {
    if (message.length() > MESSAGE_SIZE) {
      int end=MESSAGE_SIZE - 1;
      while (end > 0 && message.charAt(end) != ' ') {
        end--;
      }
      if (end == 0) {
        end=MESSAGE_SIZE;
      }
 else {
        end++;
      }
      if (end > 0 && message.charAt(end) == '\u00a7') {
        end--;
      }
      String firstPart=message.substring(0,end);
      sendMessagePacket(firstPart);
      sendMessage(getLastColorCode(firstPart) + message.substring(end));
    }
 else {
      int end=message.length();
      if (message.charAt(end - 1) == '\u00a7') {
        end--;
      }
      sendMessagePacket(message.substring(0,end));
    }
  }
}",0.9195729537366548
151890,"public void execute(Player player,String message){
  PermissionConfig perm=player.getServer().permissions;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addMessage(""String_Node_Str"");
    return;
  }
  if (player.getDimension() != Dimension.EARTH && (arguments[0].equals(""String_Node_Str"") || arguments[0].equals(""String_Node_Str""))) {
    player.addMessage(""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=perm.coordinateFromPlayer(player);
    player.areastart=player.areastart.setY((byte)0);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=perm.coordinateFromPlayer(player);
    player.areaend=player.areaend.setY((byte)0);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (!perm.getCurrentArea(player).equals(""String_Node_Str"")) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (player.areastart == null || player.areaend == null) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    perm.createPlayerArea(player);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (!perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    perm.removePlayerArea(player);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (!perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      if (perm.hasAreaWithName(label)) {
        player.addMessage(""String_Node_Str"");
      }
 else {
        perm.renamePlayerArea(player,label);
        player.addMessage(""String_Node_Str"");
      }
    }
 else {
      player.addMessage(""String_Node_Str"");
    }
  }
}","public void execute(Player player,String message){
  PermissionConfig perm=player.getServer().permissions;
  String arguments[]=extractArguments(message);
  if (arguments.length == 0) {
    player.addMessage(""String_Node_Str"");
    return;
  }
  if (player.getDimension() != Dimension.EARTH && (arguments[0].equals(""String_Node_Str"") || arguments[0].equals(""String_Node_Str""))) {
    player.addMessage(""String_Node_Str"");
    return;
  }
  if (arguments[0].equals(""String_Node_Str"")) {
    player.areastart=perm.coordinateFromPlayer(player);
    player.areastart=player.areastart.setY((byte)0);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    player.areaend=perm.coordinateFromPlayer(player);
    player.areaend=player.areaend.setY((byte)0);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (!perm.getCurrentArea(player).equals(""String_Node_Str"")) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (player.areastart == null || player.areaend == null) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    if (!areaSizeOk(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    perm.createPlayerArea(player);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (!perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    perm.removePlayerArea(player);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments[0].equals(""String_Node_Str"")) {
    if (!perm.playerHasArea(player)) {
      player.addMessage(""String_Node_Str"");
      return;
    }
    String label=extractArgument(message,1);
    if (label != null) {
      if (perm.hasAreaWithName(label)) {
        player.addMessage(""String_Node_Str"");
      }
 else {
        perm.renamePlayerArea(player,label);
        player.addMessage(""String_Node_Str"");
      }
    }
 else {
      player.addMessage(""String_Node_Str"");
    }
  }
 else {
    player.addMessage(""String_Node_Str"");
  }
}",0.9876993166287016
151891,"public void removePlayerArea(Player player){
  String name=player.getName().toLowerCase();
  if (!playerHasArea(player)) {
    return;
  }
  String path=""String_Node_Str"" + escape(name) + ""String_Node_Str"";
  config.clearTree(path);
  if (config.getList(""String_Node_Str"").size() == 0) {
    config.addProperty(""String_Node_Str"",""String_Node_Str"");
  }
}","public void removePlayerArea(Player player){
  String name=player.getName().toLowerCase();
  if (!playerHasArea(player)) {
    return;
  }
  String path=""String_Node_Str"" + escape(name) + ""String_Node_Str"";
  config.clearTree(path);
  if (config.getList(""String_Node_Str"").size() == 0) {
    config.addProperty(""String_Node_Str"",""String_Node_Str"");
  }
  save();
}",0.9860724233983288
151892,"public Chest adjacentChest(Coordinate coordinate){
  Chest chest=chestAt(coordinate);
  if (chest == null)   chest=chestAt(coordinate.add(1,0,0));
  if (chest == null)   chest=chestAt(coordinate.add(1,0,0));
  if (chest == null)   chest=chestAt(coordinate.add(1,0,0));
  return chest;
}","public Chest adjacentChest(Coordinate coordinate){
  Chest chest=chestAt(coordinate);
  if (chest == null)   chest=chestAt(coordinate.add(1,0,0));
  if (chest == null)   chest=chestAt(coordinate.add(-1,0,0));
  if (chest == null)   chest=chestAt(coordinate.add(0,0,1));
  if (chest == null)   chest=chestAt(coordinate.add(0,0,-1));
  return chest;
}",0.8881889763779528
151893,"public Chest adjacentChest(Coordinate coordinate){
  Chest chest=chestAt(coordinate);
  if (chest == null) {
    chest=chestAt(coordinate.add(1,0,0));
  }
  if (chest == null) {
    chest=chestAt(coordinate.add(-1,0,0));
  }
  if (chest == null) {
    chest=chestAt(coordinate.add(0,0,1));
  }
  if (chest == null) {
    chest=chestAt(coordinate.add(0,0,-1));
  }
  return chest;
}","public Chest adjacentChest(Coordinate coordinate){
  Chest chest=chestAt(coordinate.add(1,0,0));
  if (chest == null) {
    chest=chestAt(coordinate.add(-1,0,0));
  }
  if (chest == null) {
    chest=chestAt(coordinate.add(0,0,1));
  }
  if (chest == null) {
    chest=chestAt(coordinate.add(0,0,-1));
  }
  return chest;
}",0.9176136363636364
151894,"public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str""))   message=lastCommand;
  PlayerCommand command=server.getCommandParser().getPlayerCommand(message);
  if (command == null) {
    return false;
  }
  boolean invalidCommand=command.getName() == null;
  if (invalidCommand && !commandAllowed(command.getName())) {
    addMessage(""String_Node_Str"");
    return true;
  }
  command.execute(this,message);
  lastCommand=message;
  return !((server.permissions.commandShouldPassThroughToMod(command.getName()) || server.options.getBoolean(""String_Node_Str"") || invalidCommand) && server.options.contains(""String_Node_Str""));
}","public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str""))   message=lastCommand;
  PlayerCommand command=server.getCommandParser().getPlayerCommand(message);
  if (command == null) {
    return false;
  }
  boolean invalidCommand=command.getName() == null;
  if (!invalidCommand && !commandAllowed(command.getName())) {
    addMessage(""String_Node_Str"");
    return true;
  }
  command.execute(this,message);
  lastCommand=message;
  return !((server.permissions.commandShouldPassThroughToMod(command.getName()) || server.options.getBoolean(""String_Node_Str"") || invalidCommand) && server.options.contains(""String_Node_Str""));
}",0.9993211133740664
151895,"public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str""))   message=lastCommand;
  PlayerCommand command=server.getCommandParser().getPlayerCommand(message);
  if (command == null) {
    return false;
  }
  boolean invalidCommand=command.getName() == null;
  if (!invalidCommand && !commandAllowed(command.getName())) {
    addMessage(""String_Node_Str"");
    return true;
  }
  command.execute(this,message);
  lastCommand=message;
  return !((server.permissions.commandShouldPassThroughToMod(command.getName()) || server.options.getBoolean(""String_Node_Str"") || invalidCommand) && server.options.contains(""String_Node_Str""));
}","public boolean parseCommand(String message){
  if (closed) {
    return true;
  }
  if (message.equals(server.getCommandParser().commandPrefix() + ""String_Node_Str""))   message=lastCommand;
  PlayerCommand command=server.getCommandParser().getPlayerCommand(message);
  if (command == null) {
    return false;
  }
  boolean invalidCommand=command.getName() == null;
  if (!invalidCommand && !commandAllowed(command.getName())) {
    addMessage(""String_Node_Str"");
    return true;
  }
  command.execute(this,message);
  lastCommand=message;
  return !((server.permissions.commandShouldPassThroughToMod(command.getName()) || server.options.getBoolean(""String_Node_Str"") || invalidCommand|| command instanceof ExternalCommand) && server.options.contains(""String_Node_Str""));
}",0.9755129053606882
151896,"private void copyUnknownBlob() throws IOException {
  byte unknown=in.readByte();
  write(unknown);
  while (unknown != 0x7f) {
    int type=(unknown & 0xE0) >> 5;
switch (type) {
case 0:
      write(in.readByte());
    break;
case 1:
  write(in.readShort());
break;
case 2:
write(in.readInt());
break;
case 3:
write(in.readFloat());
break;
case 4:
write(in.readUTF());
break;
case 5:
write(in.readShort());
write(in.readByte());
write(in.readShort());
}
unknown=in.readByte();
write(unknown);
}
}","private void copyUnknownBlob() throws IOException {
  byte unknown=in.readByte();
  write(unknown);
  while (unknown != 0x7f) {
    int type=(unknown & 0xE0) >> 5;
switch (type) {
case 0:
      write(in.readByte());
    break;
case 1:
  write(in.readShort());
break;
case 2:
write(in.readInt());
break;
case 3:
write(in.readFloat());
break;
case 4:
write(readUTF16());
break;
case 5:
write(in.readShort());
write(in.readByte());
write(in.readShort());
}
unknown=in.readByte();
write(unknown);
}
}",0.9949647532729105
151897,"private void sendMessage(String message) throws IOException {
  write(0x03);
  write(message);
  packetFinished();
}","private void sendMessage(String message) throws IOException {
}",0.7039106145251397
151898,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(in.readUTF());
write(in.readUTF());
write(in.readLong());
write(in.readByte());
break;
case 0x02:
String name=in.readUTF();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=in.readUTF();
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
}
if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addMessage(""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
}
write(packetId);
write(message);
break;
case 0x04:
write(packetId);
copyNBytes(8);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
break;
case 0x0c:
write(packetId);
copyNBytes(9);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyNBytes(8);
break;
case 0x0e:
if (!isServerTunnel) {
if (player.getGroupId() < 0) {
skipNBytes(11);
}
 else {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
if (!server.chests.isLocked(x,y,z) || player.isAdmin()) {
if (server.chests.isLocked(x,y,z) && status == BLOCK_DESTROYED_STATUS) {
server.chests.releaseLock(x,y,z);
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
if (isServerTunnel || server.chests.isChest(x,y,z)) {
}
 else if ((player.getGroupId() < 0) || !server.blockFirewall.playerAllowed(player,dropItem)) {
String badBlock=String.format(server.l.get(""String_Node_Str""),player.getName(),Short.toString(dropItem));
server.runCommand(""String_Node_Str"",badBlock);
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Chest adjacentChest=server.chests.adjacentChest(xPosition,yPosition,zPosition);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(new Coordinate(xPosition,yPosition,zPosition));
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(x,y,z);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
write(packetId);
write(in.readInt());
write(in.readUTF());
copyNBytes(16);
break;
case 0x15:
if (player.getGroupId() < 0) {
skipNBytes(24);
break;
}
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
copyNBytes(17);
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(in.readUTF());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
if (blockType == 54 && player.placedChest(x,y,z)) {
lockChest(x,y,z);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
if (invtype == 0) {
if (server.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.chests.unlock(player.openedChest());
player.setAttemptedAction(null);
player.addMessage(""String_Node_Str"");
typeString=""String_Node_Str"";
}
 else {
typeString=server.chests.chestName(player.openedChest());
}
}
 else {
typeString=""String_Node_Str"";
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=player.nextChestName();
}
}
}
 else {
player.addMessage(""String_Node_Str"");
in.readByte();
break;
}
}
write(packetId);
write(id);
write(invtype);
write(typeString);
write(in.readByte());
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
if ((typeFrom < 0 && typeTo < 0) || player.getGroupId() >= 0) {
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
}
 else {
short moveItem=in.readShort();
if (moveItem != -1) {
in.readByte();
in.readShort();
}
}
break;
case 0x67:
byte type67=in.readByte();
if (type67 < 0 || player.getGroupId() >= 0) {
write(packetId);
short slot=in.readShort();
write(type67);
write(slot);
short setItem=in.readShort();
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
}
 else {
in.readShort();
short setItem=in.readShort();
if (setItem != -1) {
in.readByte();
in.readShort();
}
}
break;
case 0x68:
byte type=in.readByte();
if (type < 0 || player.getGroupId() >= 0) {
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
}
 else {
short count=in.readShort();
for (int c=0; c < count; ++c) {
short item=in.readShort();
if (item != -1) {
in.readByte();
in.readShort();
}
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
break;
case (byte)0xff:
write(packetId);
String reason=in.readUTF();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
packetFinished();
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
  int x;
  byte y;
  int z;
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(readUTF16());
write(in.readLong());
write(in.readByte());
break;
case 0x02:
String name=readUTF16();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=readUTF16();
System.out.println(message);
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher colorMatcher=COLOR_PATTERN.matcher(message);
String cleanMessage=colorMatcher.replaceAll(""String_Node_Str"");
Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
}
if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addMessage(""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
if (player.localChat() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.execute(LocalSayCommand.class,message);
break;
}
}
write(packetId);
write(message);
break;
case 0x04:
write(packetId);
copyNBytes(8);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
if (server.options.getBoolean(""String_Node_Str"")) {
player.execute(PlayerListCommand.class);
}
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
break;
case 0x0c:
write(packetId);
copyNBytes(9);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyNBytes(8);
break;
case 0x0e:
if (!isServerTunnel) {
if (player.getGroupId() < 0) {
skipNBytes(11);
}
 else {
byte status=in.readByte();
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte face=in.readByte();
if (!server.chests.isLocked(x,y,z) || player.isAdmin()) {
if (server.chests.isLocked(x,y,z) && status == BLOCK_DESTROYED_STATUS) {
server.chests.releaseLock(x,y,z);
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
if (status == BLOCK_DESTROYED_STATUS) {
player.destroyedBlock();
}
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
x=in.readInt();
y=in.readByte();
z=in.readInt();
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
short uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readShort();
}
boolean writePacket=true;
boolean drop=false;
if (isServerTunnel || server.chests.isChest(x,y,z)) {
}
 else if ((player.getGroupId() < 0) || !server.blockFirewall.playerAllowed(player,dropItem)) {
String badBlock=String.format(server.l.get(""String_Node_Str""),player.getName(),Short.toString(dropItem));
server.runCommand(""String_Node_Str"",badBlock);
writePacket=false;
drop=true;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
Chest adjacentChest=server.chests.adjacentChest(xPosition,yPosition,zPosition);
if (adjacentChest != null && !adjacentChest.isOpen() && !adjacentChest.ownedBy(player)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
drop=true;
}
 else {
player.placingChest(new Coordinate(xPosition,yPosition,zPosition));
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
if (dropItem <= 94 && direction >= 0) {
player.placedBlock();
}
}
player.openingChest(x,y,z);
}
 else if (drop) {
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x11:
write(packetId);
copyNBytes(14);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x13:
write(packetId);
write(in.readInt());
write(in.readByte());
break;
case 0x14:
write(packetId);
write(in.readInt());
write(readUTF16());
copyNBytes(16);
break;
case 0x15:
if (player.getGroupId() < 0) {
skipNBytes(24);
break;
}
write(packetId);
copyNBytes(24);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
copyNBytes(17);
break;
case 0x18:
write(packetId);
write(in.readInt());
write(in.readByte());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readByte());
write(in.readByte());
copyUnknownBlob();
break;
case 0x19:
write(packetId);
write(in.readInt());
write(readUTF16());
write(in.readInt());
write(in.readInt());
write(in.readInt());
write(in.readInt());
break;
case 0x1b:
write(packetId);
copyNBytes(18);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1d:
write(packetId);
copyNBytes(4);
break;
case 0x1e:
write(packetId);
copyNBytes(4);
break;
case 0x1f:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x28:
write(packetId);
write(in.readInt());
copyUnknownBlob();
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
x=in.readInt();
y=in.readByte();
z=in.readInt();
byte blockType=in.readByte();
byte metadata=in.readByte();
if (blockType == 54 && player.placedChest(x,y,z)) {
lockChest(x,y,z);
player.placingChest(null);
}
write(x);
write(y);
write(z);
write(blockType);
write(metadata);
break;
case 0x36:
write(packetId);
copyNBytes(12);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x46:
write(packetId);
copyNBytes(1);
break;
case 0x47:
write(packetId);
copyNBytes(17);
break;
case 0x64:
byte id=in.readByte();
byte invtype=in.readByte();
String typeString=in.readUTF();
if (invtype == 0) {
if (server.chests.canOpen(player,player.openedChest()) || player.isAdmin()) {
if (server.chests.isLocked(player.openedChest())) {
if (player.isAttemptingUnlock()) {
server.chests.unlock(player.openedChest());
player.setAttemptedAction(null);
player.addMessage(""String_Node_Str"");
typeString=""String_Node_Str"";
}
 else {
typeString=server.chests.chestName(player.openedChest());
}
}
 else {
typeString=""String_Node_Str"";
if (player.isAttemptLock()) {
lockChest(player.openedChest());
typeString=player.nextChestName();
}
}
}
 else {
player.addMessage(""String_Node_Str"");
in.readByte();
break;
}
}
write(packetId);
write(id);
write(invtype);
write8(typeString);
write(in.readByte());
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
if ((typeFrom < 0 && typeTo < 0) || player.getGroupId() >= 0) {
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
write(in.readBoolean());
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readShort());
}
}
 else {
short moveItem=in.readShort();
if (moveItem != -1) {
in.readByte();
in.readShort();
}
}
break;
case 0x67:
byte type67=in.readByte();
if (type67 < 0 || player.getGroupId() >= 0) {
write(packetId);
short slot=in.readShort();
write(type67);
write(slot);
short setItem=in.readShort();
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readShort());
}
}
 else {
in.readShort();
short setItem=in.readShort();
if (setItem != -1) {
in.readByte();
in.readShort();
}
}
break;
case 0x68:
byte type=in.readByte();
if (type < 0 || player.getGroupId() >= 0) {
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
}
 else {
short count=in.readShort();
for (int c=0; c < count; ++c) {
short item=in.readShort();
if (item != -1) {
in.readByte();
in.readShort();
}
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(readUTF16());
write(readUTF16());
write(readUTF16());
write(readUTF16());
break;
case (byte)0xc6:
write(packetId);
copyNBytes(5);
break;
case (byte)0xff:
write(packetId);
String reason=readUTF16();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
packetFinished();
}",0.9855607631491738
151899,"@Override public void run(){
  try {
    while (run) {
      lastRead=System.currentTimeMillis();
      try {
        handlePacket();
        if (isServerTunnel) {
          while (player.hasMessages()) {
            sendMessage(player.getMessage());
          }
        }
        flushAll();
      }
 catch (      IOException e) {
        if (run && !player.isRobot()) {
          System.out.println(""String_Node_Str"" + e);
          System.out.println(""String_Node_Str"" + streamType + ""String_Node_Str""+ player.getIPAddress());
        }
        break;
      }
    }
    try {
      if (player.isKicked()) {
        kick(player.getKickMsg());
      }
      flushAll();
    }
 catch (    IOException e) {
    }
  }
  finally {
    if (EXPENSIVE_DEBUG_LOGGING) {
      inputDumper.cleanup();
      outputDumper.cleanup();
    }
  }
}","@Override public void run(){
  try {
    while (run) {
      lastRead=System.currentTimeMillis();
      try {
        handlePacket();
        if (isServerTunnel) {
          while (player.hasMessages()) {
            sendMessage(player.getMessage());
          }
        }
        flushAll();
      }
 catch (      IOException e) {
        if (run && !player.isRobot()) {
          System.out.println(""String_Node_Str"" + e);
          System.out.println(""String_Node_Str"" + streamType + ""String_Node_Str""+ player.getIPAddress());
          e.printStackTrace();
        }
        break;
      }
    }
    try {
      if (player.isKicked()) {
        kick(player.getKickMsg());
      }
      flushAll();
    }
 catch (    IOException e) {
    }
  }
  finally {
    if (EXPENSIVE_DEBUG_LOGGING) {
      inputDumper.cleanup();
      outputDumper.cleanup();
    }
  }
}",0.9817324690630524
151900,"@Override public void execute(Player player,String message){
  player.handleVisitRequests();
}","public void execute(Player player,String message){
  player.handleVisitRequests();
}",0.9438202247191012
151901,"private void freeze(int time){
  if (!frozen) {
    frozen=true;
    timer=new Timer();
    timer.schedule(new TimeFreezer(this,time),0,DELAY);
    player.addMessage(""String_Node_Str"");
  }
}","private void freeze(int time){
  if (!frozen) {
    frozen=true;
    timer=new Timer();
    int delay=DELAY;
    if (time == DAY) {
      delay=DELAY_DAY;
    }
 else     if (time == NIGHT) {
      delay=DELAY_NIGHT;
    }
    timer.schedule(new TimeFreezer(this,time),0,delay);
    player.addMessage(""String_Node_Str"");
  }
}",0.7195357833655706
151902,"public void execute(Player player,String message){
  server=player.getServer();
  this.player=player;
  String[] arguments=extractArguments(message);
  if (arguments.length == 0) {
    setTime(0);
    player.addMessage(""String_Node_Str"");
  }
 else   if (arguments.length >= 1) {
    String argument=arguments[0];
    int time=0;
    if (argument.equals(""String_Node_Str""))     time=DAY;
 else     if (argument.equals(""String_Node_Str""))     time=NIGHT;
 else {
      try {
        time=Integer.parseInt(argument);
      }
 catch (      NumberFormatException e) {
        player.addMessage(""String_Node_Str"");
        return;
      }
      if (time < 0 || time > 23999) {
        player.addMessage(""String_Node_Str"");
        return;
      }
    }
    if (arguments.length < 2)     setTime(time);
    if (arguments.length >= 2) {
      argument=arguments[1];
      if (argument.equals(""String_Node_Str"")) {
        freeze(time);
      }
 else       if (argument.equals(""String_Node_Str"")) {
        unfreeze();
      }
 else {
        player.addMessage(""String_Node_Str"");
      }
    }
  }
}","public void execute(Player player,String message){
  server=player.getServer();
  this.player=player;
  String[] arguments=extractArguments(message);
  if (arguments.length == 0) {
    usage();
  }
 else   if (arguments.length >= 1) {
    String argument=arguments[0];
    int time=0;
    if (argument.equals(""String_Node_Str"")) {
      time=DAY;
    }
 else     if (argument.equals(""String_Node_Str"")) {
      time=NIGHT;
    }
 else     if (argument.equals(""String_Node_Str"") || argument.equals(""String_Node_Str"")) {
      player.addMessage(""String_Node_Str"");
      usage();
      return;
    }
 else     if (argument.equals(""String_Node_Str"")) {
      unfreeze();
      return;
    }
 else {
      try {
        time=Integer.parseInt(argument);
      }
 catch (      NumberFormatException e) {
        player.addMessage(""String_Node_Str"");
        usage();
        return;
      }
      if (time < 0 || time > 23999) {
        player.addMessage(""String_Node_Str"");
        return;
      }
    }
    unfreeze();
    if (arguments.length < 2)     setTime(time);
    if (arguments.length >= 2) {
      argument=arguments[1];
      if (argument.equals(""String_Node_Str"")) {
        freeze(time);
      }
 else {
        player.addMessage(""String_Node_Str"");
      }
    }
  }
}",0.7691008864499789
151903,"public boolean ownsLock(Player player,int x,byte y,int z){
  Coordinate coordinate=new Coordinate(x,y,z);
  Chest chest=locations.get(coordinate);
  return (chest != null) && (chest.owner == player.getName() || chest.isOpen());
}","public boolean ownsLock(Player player,int x,byte y,int z){
  Coordinate coordinate=new Coordinate(x,y,z);
  Chest chest=locations.get(coordinate);
  return (chest != null) && (chest.owner.toLowerCase().equals(player.getName().toLowerCase()) || chest.isOpen());
}",0.9164969450101832
151904,"private void kickAllPlayers(){
  String message=""String_Node_Str"";
  if (restart) {
    message=""String_Node_Str"";
  }
  for (  Player p : playerList.getArray()) {
    p.kick(message);
  }
}","private void kickAllPlayers(){
  String message=""String_Node_Str"";
  if (restart) {
    message=""String_Node_Str"";
  }
  for (  Player player : playerList.getArray()) {
    player.kick(message);
  }
}",0.9743589743589745
151905,"private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(in.readUTF());
write(in.readUTF());
write(in.readLong());
write(in.readByte());
break;
case 0x02:
String name=in.readUTF();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=in.readUTF();
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher messageMatcher=MESSAGE_PATTERN.matcher(message);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
}
if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addMessage(""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
}
write(packetId);
write(message);
break;
case 0x04:
write(packetId);
copyNBytes(8);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
break;
case 0x0c:
write(packetId);
copyNBytes(9);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyNBytes(8);
break;
case 0x0e:
if (!isServerTunnel) {
if (player.getGroupId() < 0) {
skipNBytes(11);
}
 else {
byte status=in.readByte();
int x=in.readInt();
byte y=in.readByte();
int z=in.readInt();
byte face=in.readByte();
if (!server.chests.hasLock(x,y,z) || player.isAdmin()) {
if (server.chests.hasLock(x,y,z) && status == BLOCK_DESTROYED_STATUS) {
server.chests.releaseLock(x,y,z);
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
for (int c=1; c < DESTROY_HITS; ++c) {
packetFinished();
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
}
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
final int x=in.readInt();
final byte y=in.readByte();
final int z=in.readInt();
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
byte uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readByte();
}
boolean writePacket=true;
if (isServerTunnel) {
}
 else if (server.chests.hasLock(x,y,z) && !player.isAdmin() && !server.chests.ownsLock(player.getName(),x,y,z)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
}
 else if ((player.getGroupId() < 0) || !server.blockFirewall.playerAllowed(player,dropItem)) {
String badBlock=String.format(server.l.get(""String_Node_Str""),player.getName(),Short.toString(dropItem));
server.runCommand(""String_Node_Str"",badBlock);
writePacket=false;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
if (server.chests.hasAdjacentLock(xPosition,yPosition,zPosition)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
}
 else if (player.isAttemptLock()) {
if (server.chests.hasLock(xPosition,yPosition,zPosition)) {
player.addMessage(""String_Node_Str"");
}
 else if (server.chests.giveLock(player.getName(),xPosition,yPosition,zPosition,false)) {
player.addMessage(""String_Node_Str"");
}
 else {
player.addMessage(""String_Node_Str"");
}
player.setAttemptLock(false);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
}
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x14:
write(packetId);
write(in.readInt());
write(in.readUTF());
copyNBytes(16);
break;
case 0x15:
if (player.getGroupId() < 0) {
skipNBytes(22);
break;
}
write(packetId);
copyNBytes(22);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
copyNBytes(17);
break;
case 0x18:
write(packetId);
copyNBytes(19);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1D:
write(packetId);
copyNBytes(4);
break;
case 0x1E:
write(packetId);
copyNBytes(4);
break;
case 0x1F:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
copyNBytes(11);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x64:
write(packetId);
write(in.readByte());
write(in.readByte());
write(in.readUTF());
write(in.readByte());
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
if ((typeFrom < 0 && typeTo < 0) || player.getGroupId() >= 0) {
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readByte());
}
}
 else {
short moveItem=in.readShort();
if (moveItem != -1) {
in.readByte();
in.readByte();
}
}
break;
case 0x67:
byte type67=in.readByte();
if (type67 < 0 || player.getGroupId() >= 0) {
write(packetId);
short slot=in.readShort();
write(type67);
write(slot);
short setItem=in.readShort();
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readByte());
}
}
 else {
in.readShort();
short setItem=in.readShort();
if (setItem != -1) {
in.readByte();
in.readByte();
}
}
break;
case 0x68:
byte type=in.readByte();
if (type < 0 || player.getGroupId() >= 0) {
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
}
 else {
short count=in.readShort();
for (int c=0; c < count; ++c) {
short item=in.readShort();
if (item != -1) {
in.readByte();
in.readShort();
}
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
break;
case (byte)0xff:
write(packetId);
String reason=in.readUTF();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
packetFinished();
}","private void handlePacket() throws IOException {
  Byte packetId=in.readByte();
switch (packetId) {
case 0x00:
    write(packetId);
  break;
case 0x01:
write(packetId);
if (isServerTunnel) {
player.setEntityId(in.readInt());
write(player.getEntityId());
}
 else {
write(in.readInt());
}
write(in.readUTF());
write(in.readUTF());
write(in.readLong());
write(in.readByte());
break;
case 0x02:
String name=in.readUTF();
if (isServerTunnel || player.setName(name)) {
tunneler.setName(streamType + ""String_Node_Str"" + player.getName());
write(packetId);
write(name);
}
break;
case 0x03:
String message=in.readUTF();
if (isServerTunnel && server.options.getBoolean(""String_Node_Str"")) {
Matcher messageMatcher=MESSAGE_PATTERN.matcher(message);
if (messageMatcher.find()) {
Player friend=server.findPlayerExact(messageMatcher.group(1));
if (friend != null) {
String color=""String_Node_Str"";
String title=""String_Node_Str"";
String format=server.options.get(""String_Node_Str"");
Group group=friend.getGroup();
if (group != null) {
color=group.getColor();
if (group.showTitle()) {
title=group.getName();
format=server.options.get(""String_Node_Str"");
}
}
try {
message=String.format(format,friend.getName(),title,color) + messageMatcher.group(2);
}
 catch (IllegalFormatException e) {
System.out.println(""String_Node_Str"");
}
}
}
}
if (!isServerTunnel) {
if (player.isMuted() && !message.startsWith(""String_Node_Str"") && !message.startsWith(""String_Node_Str"")) {
player.addMessage(""String_Node_Str"");
break;
}
if (player.parseCommand(message)) {
break;
}
}
write(packetId);
write(message);
break;
case 0x04:
write(packetId);
copyNBytes(8);
break;
case 0x05:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readShort());
break;
case 0x06:
write(packetId);
copyNBytes(12);
break;
case 0x07:
int user=in.readInt();
int target=in.readInt();
Player targetPlayer=server.playerList.findPlayer(target);
if (targetPlayer != null) {
if (targetPlayer.godModeEnabled()) {
in.readBoolean();
break;
}
}
write(packetId);
write(user);
write(target);
write(in.readBoolean());
break;
case 0x08:
write(packetId);
copyNBytes(2);
break;
case 0x09:
write(packetId);
break;
case 0x0a:
write(packetId);
copyNBytes(1);
if (!inGame && !isServerTunnel) {
player.sendMOTD();
inGame=true;
}
break;
case 0x0b:
write(packetId);
copyPlayerLocation();
break;
case 0x0c:
write(packetId);
copyNBytes(9);
break;
case 0x0d:
write(packetId);
copyPlayerLocation();
copyNBytes(8);
break;
case 0x0e:
if (!isServerTunnel) {
if (player.getGroupId() < 0) {
skipNBytes(11);
}
 else {
byte status=in.readByte();
int x=in.readInt();
byte y=in.readByte();
int z=in.readInt();
byte face=in.readByte();
if (!server.chests.hasLock(x,y,z) || player.isAdmin()) {
if (server.chests.hasLock(x,y,z) && status == BLOCK_DESTROYED_STATUS) {
server.chests.releaseLock(x,y,z);
}
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
if (player.instantDestroyEnabled()) {
for (int c=1; c < DESTROY_HITS; ++c) {
packetFinished();
write(packetId);
write(status);
write(x);
write(y);
write(z);
write(face);
}
packetFinished();
write(packetId);
write(BLOCK_DESTROYED_STATUS);
write(x);
write(y);
write(z);
write(face);
}
}
}
}
 else {
write(packetId);
copyNBytes(11);
}
break;
case 0x0f:
final int x=in.readInt();
final byte y=in.readByte();
final int z=in.readInt();
final byte direction=in.readByte();
final short dropItem=in.readShort();
byte itemCount=0;
byte uses=0;
if (dropItem != -1) {
itemCount=in.readByte();
uses=in.readByte();
}
boolean writePacket=true;
if (isServerTunnel) {
}
 else if (server.chests.hasLock(x,y,z) && !player.isAdmin() && !server.chests.ownsLock(player.getName(),x,y,z)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
}
 else if ((player.getGroupId() < 0) || !server.blockFirewall.playerAllowed(player,dropItem)) {
String badBlock=String.format(server.l.get(""String_Node_Str""),player.getName(),Short.toString(dropItem));
server.runCommand(""String_Node_Str"",badBlock);
write((byte)0x0e);
write((byte)0x04);
write(x);
write(y);
write(z);
write(direction);
writePacket=false;
}
 else if (dropItem == 54) {
int xPosition=x;
byte yPosition=y;
int zPosition=z;
switch (direction) {
case 0:
--yPosition;
break;
case 1:
++yPosition;
break;
case 2:
--zPosition;
break;
case 3:
++zPosition;
break;
case 4:
--xPosition;
break;
case 5:
++xPosition;
break;
}
if (server.chests.hasAdjacentLock(xPosition,yPosition,zPosition)) {
player.addMessage(""String_Node_Str"");
writePacket=false;
}
 else if (player.isAttemptLock()) {
if (server.chests.hasLock(xPosition,yPosition,zPosition)) {
player.addMessage(""String_Node_Str"");
}
 else if (server.chests.giveLock(player.getName(),xPosition,yPosition,zPosition,false)) {
player.addMessage(""String_Node_Str"");
}
 else {
player.addMessage(""String_Node_Str"");
}
player.setAttemptLock(false);
}
}
if (writePacket) {
write(packetId);
write(x);
write(y);
write(z);
write(direction);
write(dropItem);
if (dropItem != -1) {
write(itemCount);
write(uses);
}
}
break;
case 0x10:
write(packetId);
copyNBytes(2);
break;
case 0x12:
write(packetId);
copyNBytes(5);
break;
case 0x14:
write(packetId);
write(in.readInt());
write(in.readUTF());
copyNBytes(16);
break;
case 0x15:
if (player.getGroupId() < 0) {
skipNBytes(22);
break;
}
write(packetId);
copyNBytes(22);
break;
case 0x16:
write(packetId);
copyNBytes(8);
break;
case 0x17:
write(packetId);
copyNBytes(17);
break;
case 0x18:
write(packetId);
copyNBytes(19);
break;
case 0x1c:
write(packetId);
copyNBytes(10);
break;
case 0x1D:
write(packetId);
copyNBytes(4);
break;
case 0x1E:
write(packetId);
copyNBytes(4);
break;
case 0x1F:
write(packetId);
copyNBytes(7);
break;
case 0x20:
write(packetId);
copyNBytes(6);
break;
case 0x21:
write(packetId);
copyNBytes(9);
break;
case 0x22:
write(packetId);
copyNBytes(18);
break;
case 0x26:
write(packetId);
copyNBytes(5);
break;
case 0x27:
write(packetId);
copyNBytes(8);
break;
case 0x32:
write(packetId);
copyNBytes(9);
break;
case 0x33:
write(packetId);
copyNBytes(13);
int chunkSize=in.readInt();
write(chunkSize);
copyNBytes(chunkSize);
break;
case 0x34:
write(packetId);
copyNBytes(8);
short arraySize=in.readShort();
write(arraySize);
copyNBytes(arraySize * 4);
break;
case 0x35:
write(packetId);
copyNBytes(11);
break;
case 0x3c:
write(packetId);
copyNBytes(28);
int recordCount=in.readInt();
write(recordCount);
copyNBytes(recordCount * 3);
break;
case 0x64:
write(packetId);
write(in.readByte());
write(in.readByte());
write(in.readUTF());
write(in.readByte());
break;
case 0x65:
write(packetId);
write(in.readByte());
break;
case 0x66:
byte typeFrom=in.readByte();
short slotFrom=in.readShort();
byte typeTo=in.readByte();
short slotTo=in.readShort();
if ((typeFrom < 0 && typeTo < 0) || player.getGroupId() >= 0) {
write(packetId);
write(typeFrom);
write(slotFrom);
write(typeTo);
write(slotTo);
short moveItem=in.readShort();
write(moveItem);
if (moveItem != -1) {
write(in.readByte());
write(in.readByte());
}
}
 else {
short moveItem=in.readShort();
if (moveItem != -1) {
in.readByte();
in.readByte();
}
}
break;
case 0x67:
byte type67=in.readByte();
if (type67 < 0 || player.getGroupId() >= 0) {
write(packetId);
short slot=in.readShort();
write(type67);
write(slot);
short setItem=in.readShort();
write(setItem);
if (setItem != -1) {
write(in.readByte());
write(in.readByte());
}
}
 else {
in.readShort();
short setItem=in.readShort();
if (setItem != -1) {
in.readByte();
in.readByte();
}
}
break;
case 0x68:
byte type=in.readByte();
if (type < 0 || player.getGroupId() >= 0) {
write(packetId);
write(type);
short count=in.readShort();
write(count);
for (int c=0; c < count; ++c) {
short item=in.readShort();
write(item);
if (item != -1) {
write(in.readByte());
write(in.readShort());
}
}
}
 else {
short count=in.readShort();
for (int c=0; c < count; ++c) {
short item=in.readShort();
if (item != -1) {
in.readByte();
in.readShort();
}
}
}
break;
case 0x69:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readShort());
break;
case 0x6a:
write(packetId);
write(in.readByte());
write(in.readShort());
write(in.readByte());
break;
case (byte)0x82:
write(packetId);
write(in.readInt());
write(in.readShort());
write(in.readInt());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
write(in.readUTF());
break;
case (byte)0xff:
write(packetId);
String reason=in.readUTF();
write(reason);
if (reason.startsWith(""String_Node_Str"")) {
server.addRobot(player);
}
player.close();
break;
default :
if (EXPENSIVE_DEBUG_LOGGING) {
while (true) {
skipNBytes(1);
flushAll();
}
}
 else {
throw new IOException(""String_Node_Str"" + streamType + ""String_Node_Str""+ Integer.toHexString(packetId)+ ""String_Node_Str""+ player.getName());
}
}
packetFinished();
}",0.9950397969777368
151906,"public boolean setName(String name){
  name=name.trim();
  if (name.length() == 0 || this.name != null) {
    kick(""String_Node_Str"");
    return false;
  }
  if (server.options.getBoolean(""String_Node_Str"") && !server.whitelist.isWhitelisted(name)) {
    kick(""String_Node_Str"");
    return false;
  }
  this.name=name;
  updateGroup();
  watchdog.setName(""String_Node_Str"" + name);
  server.connectionLog(""String_Node_Str"",extsocket,name);
  server.playerList.addPlayer(this);
  return true;
}","public boolean setName(String name){
  name=name.trim();
  if (name.length() == 0 || this.name != null) {
    kick(""String_Node_Str"");
    return false;
  }
  if (server.options.getBoolean(""String_Node_Str"") && !server.whitelist.isWhitelisted(name)) {
    kick(""String_Node_Str"");
    return false;
  }
  if (server.playerList.findPlayerExact(name) != null) {
    kick(""String_Node_Str"");
    return false;
  }
  this.name=name;
  updateGroup();
  watchdog.setName(""String_Node_Str"" + name);
  server.connectionLog(""String_Node_Str"",extsocket,name);
  server.playerList.addPlayer(this);
  return true;
}",0.9016393442622952
151907,"public void close(){
  serverToClient.stop();
  clientToServer.stop();
}","public void close(){
  if (serverToClient != null) {
    serverToClient.stop();
  }
  if (clientToServer != null) {
    clientToServer.stop();
  }
  if (name != null) {
    server.playerList.removePlayer(this);
    name=null;
  }
}",0.3366336633663366
151908,"private void cleanup(){
  if (!closed) {
    closed=true;
    entityId=0;
    if (serverToClient != null) {
      serverToClient.stop();
    }
    if (clientToServer != null) {
      clientToServer.stop();
    }
    if (name != null) {
      server.playerList.removePlayer(this);
    }
    try {
      extsocket.close();
    }
 catch (    IOException e) {
    }
    try {
      intsocket.close();
    }
 catch (    IOException e) {
    }
    if (!isRobot) {
      System.out.println(""String_Node_Str"" + extsocket.getInetAddress().getHostAddress());
    }
  }
}","private void cleanup(){
  if (!closed) {
    closed=true;
    entityId=0;
    close();
    try {
      extsocket.close();
    }
 catch (    IOException e) {
    }
    try {
      intsocket.close();
    }
 catch (    IOException e) {
    }
    if (!isRobot) {
      System.out.println(""String_Node_Str"" + extsocket.getInetAddress().getHostAddress());
    }
  }
}",0.7665580890336591
151909,"@Override public void run(){
  try {
    while (run) {
      lastRead=System.currentTimeMillis();
      try {
        handlePacket();
        if (isServerTunnel) {
          while (player.hasMessages()) {
            sendMessage(player.getMessage());
          }
        }
        flushAll();
      }
 catch (      IOException e) {
        if (run) {
          e.printStackTrace();
          System.out.println(streamType + ""String_Node_Str"" + player.getName());
        }
        break;
      }
    }
    try {
      if (player.isKicked()) {
        kick(player.getKickMsg());
      }
      flushAll();
    }
 catch (    IOException e) {
    }
  }
  finally {
    if (EXPENSIVE_DEBUG_LOGGING) {
      inputDumper.cleanup();
      outputDumper.cleanup();
    }
  }
}","@Override public void run(){
  try {
    while (run) {
      lastRead=System.currentTimeMillis();
      try {
        handlePacket();
        if (isServerTunnel) {
          while (player.hasMessages()) {
            sendMessage(player.getMessage());
          }
        }
        flushAll();
      }
 catch (      IOException e) {
        if (run) {
          e.printStackTrace();
          System.out.println(streamType + ""String_Node_Str"" + player.getIPAddress());
        }
        break;
      }
    }
    try {
      if (player.isKicked()) {
        kick(player.getKickMsg());
      }
      flushAll();
    }
 catch (    IOException e) {
    }
  }
  finally {
    if (EXPENSIVE_DEBUG_LOGGING) {
      inputDumper.cleanup();
      outputDumper.cleanup();
    }
  }
}",0.9915419648666232
151910,"protected void loadDefaults(){
  defaultOptions=new Properties();
  InputStream stream=getClass().getResourceAsStream(resourceLocation + ""String_Node_Str"" + filename);
  try {
    try {
      defaultOptions.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + filename);
  }
  options=new Properties(defaultOptions);
}","protected void loadDefaults(){
  defaultOptions=new Properties();
  InputStream stream=getClass().getResourceAsStream(resourceLocation + ""String_Node_Str"" + filename);
  try {
    try {
      defaultOptions.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + filename);
  }
  options=(Properties)defaultOptions.clone();
}",0.9835680751173708
151911,"public void load(){
  options=new Properties(defaultOptions);
  File file=new File(filename);
  try {
    InputStream stream=new FileInputStream(file);
    try {
      options.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  FileNotFoundException e) {
    missingFile();
  }
catch (  IOException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + filename);
  }
}","public void load(){
  options=(Properties)defaultOptions.clone();
  File file=new File(filename);
  try {
    InputStream stream=new FileInputStream(file);
    try {
      options.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  FileNotFoundException e) {
    missingFile();
  }
catch (  IOException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + filename);
  }
}",0.983009708737864
151912,"@Override protected void loadDefaults(){
}","@Override protected void loadDefaults(){
  defaultOptions=new Properties();
}",0.7058823529411765
151913,"@Override public void save(){
  options=new Properties();
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}","@Override public void save(){
  load();
  options=new Properties();
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",""String_Node_Str"");
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  options.setProperty(""String_Node_Str"",simpleServerOptions.get(""String_Node_Str""));
  super.save();
}",0.9895833333333334
151914,"public void serialEvent(SerialPortEvent arg0){
  int data;
  try {
    while ((data=in.read()) > -1) {
      if (state == RCV_WAIT) {
        if (data == START_BYTE) {
          state=RCV_MSG;
          buffer_idx=0;
        }
      }
 else       if (state == RCV_MSG) {
        if (data == ESCAPE_BYTE) {
          state=RCV_ESC;
        }
 else         if (data == STOP_BYTE) {
          byte[] packet=new byte[buffer_idx];
          for (int i=0; i < buffer_idx; i++)           packet[i]=buffer[i];
          for (          JArduinoObserver o : observers) {
            o.receiveMsg(packet);
          }
          state=RCV_WAIT;
        }
 else         if (data == START_BYTE) {
          state=RCV_MSG;
          buffer_idx=0;
        }
 else {
          buffer[buffer_idx]=(byte)data;
          buffer_idx++;
        }
      }
 else       if (state == RCV_ESC) {
        buffer[buffer_idx]=(byte)data;
        buffer_idx++;
        state=RCV_MSG;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void serialEvent(SerialPortEvent arg0){
  int data;
  try {
    while ((data=in.read()) > -1) {
      if (state == RCV_WAIT) {
        if (data == START_BYTE) {
          state=RCV_MSG;
          buffer_idx=0;
        }
      }
 else       if (state == RCV_MSG) {
        if (data == ESCAPE_BYTE) {
          state=RCV_ESC;
        }
 else         if (data == STOP_BYTE) {
          byte[] packet=new byte[buffer_idx];
          for (int i=0; i < buffer_idx; i++) {
            packet[i]=buffer[i];
          }
          for (          JArduinoObserver o : observers) {
            o.receiveMsg(packet);
          }
          state=RCV_WAIT;
        }
 else         if (data == START_BYTE) {
          state=RCV_MSG;
          buffer_idx=0;
        }
 else {
          buffer[buffer_idx]=(byte)data;
          buffer_idx++;
        }
      }
 else       if (state == RCV_ESC) {
        buffer[buffer_idx]=(byte)data;
        buffer_idx++;
        state=RCV_MSG;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9922779922779924
151915,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new ToneKeyKeyboard(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new ToneKeyKeyboard(serialPort);
  arduino.runArduinoProcess();
}",0.8593155893536122
151916,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new AnalogInOutSerial(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new AnalogInOutSerial(serialPort);
  arduino.runArduinoProcess();
}",0.5547169811320755
151917,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new AnalogInput(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new AnalogInput(serialPort);
  arduino.runArduinoProcess();
}",0.5675675675675675
151918,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new Blink(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new Blink(serialPort);
  arduino.runArduinoProcess();
}",0.8537549407114624
151919,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new Ping(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new Ping(serialPort);
  arduino.runArduinoProcess();
}",0.8531746031746031
151920,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new SimpleInterrupt(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new SimpleInterrupt(serialPort);
  arduino.runArduinoProcess();
}",0.8593155893536122
151921,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new Button(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new Button(serialPort);
  arduino.runArduinoProcess();
}",0.8543307086614174
151922,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new StateChangeDetection(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new StateChangeDetection(serialPort);
  arduino.runArduinoProcess();
}",0.8619402985074627
151923,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new ToneKeyboard(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new ToneKeyboard(serialPort);
  arduino.runArduinoProcess();
}",0.8576923076923076
151924,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new ToneMelody(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new ToneMelody(serialPort);
  arduino.runArduinoProcess();
}",0.8565891472868217
151925,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new ToneMultiple(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new ToneMultiple(serialPort);
  arduino.runArduinoProcess();
}",0.8576923076923076
151926,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  JArduino arduino=new TonePitchFollower(serialPort);
  arduino.runArduinoProcess();
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  JArduino arduino=new TonePitchFollower(serialPort);
  arduino.runArduinoProcess();
}",0.8603773584905661
151927,"public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=SerialSelectorGUI.selectSerialPort();
  }
  Serial4JArduino device=null;
  try {
    device=new Serial4JArduino(serialPort);
    InteractiveJArduinoDataControllerClient controller2=new InteractiveJArduinoDataControllerClient();
    device.register(controller2);
    controller2.register(device);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    device.close();
  }
}","public static void main(String[] args){
  String serialPort;
  if (args.length == 1) {
    serialPort=args[0];
  }
 else {
    serialPort=Serial4JArduino.selectSerialPort();
  }
  Serial4JArduino device=null;
  try {
    device=new Serial4JArduino(serialPort);
    InteractiveJArduinoDataControllerClient controller2=new InteractiveJArduinoDataControllerClient();
    device.register(controller2);
    controller2.register(device);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    device.close();
  }
}",0.7267552182163188
151928,"public static void main(String[] args){
  Serial4JArduino device=null;
  try {
    String serialPort=""String_Node_Str"";
    if (args.length == 1) {
      serialPort=args[0];
    }
 else {
      serialPort=Serial4JArduino.selectSerialPort();
    }
    device=new Serial4JArduino(serialPort);
    InteractiveJArduinoDataControllerClientAdvanced controller=new InteractiveJArduinoDataControllerClientAdvanced();
    device.register(controller);
    controller.register(device);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    device.close();
  }
}","public static void main(String[] args){
  Serial4JArduino device=null;
  String serialPort=null;
  try {
    if (args.length == 1) {
      serialPort=args[0];
    }
 else {
      serialPort=Serial4JArduino.selectSerialPort();
    }
    InteractiveJArduinoDataControllerClientAdvanced controller=new InteractiveJArduinoDataControllerClientAdvanced();
    if (serialPort != null) {
      device=new Serial4JArduino(serialPort);
      device.register(controller);
      controller.register(device);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (device != null) {
      device.close();
    }
  }
}",0.6822351959966639
151929,"/** 
 * Return a List of Objects from a single table column given a SQL Key using an SQL statement matching the sqlKey String in a properties file loaded via Yank.addSQLStatements(...).
 * @param sqlKey The SQL Key found in a properties file corresponding to the desired SQL statement value
 * @param params The replacement parameters
 * @param columnType The Class of the desired return Objects matching the table
 * @return The Column as a List
 * @throws SQLStatementNotFoundException if an SQL statement could not be found for the given sqlKey String
 */
public static <T>List<T> queryColumnSQLKey(String sqlKey,String columnName,Class<T> columnType,Object[] params){
  String sql=YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(sqlKey);
  if (sql == null || sql.equalsIgnoreCase(""String_Node_Str"")) {
    throw new SQLStatementNotFoundException();
  }
 else {
    return queryBeanList(sql,columnType,params);
  }
}","/** 
 * Return a List of Objects from a single table column given a SQL Key using an SQL statement matching the sqlKey String in a properties file loaded via Yank.addSQLStatements(...).
 * @param sqlKey The SQL Key found in a properties file corresponding to the desired SQL statement value
 * @param params The replacement parameters
 * @param columnType The Class of the desired return Objects matching the table
 * @return The Column as a List
 * @throws SQLStatementNotFoundException if an SQL statement could not be found for the given sqlKey String
 */
public static <T>List<T> queryColumnSQLKey(String sqlKey,String columnName,Class<T> columnType,Object[] params){
  String sql=YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(sqlKey);
  if (sql == null || sql.equalsIgnoreCase(""String_Node_Str"")) {
    throw new SQLStatementNotFoundException();
  }
 else {
    return queryColumn(sql,columnName,columnType,params);
  }
}",0.986566362170876
151930,"/** 
 * Return just one scalar given a SQL Key using an SQL statement matching the sqlKey String in a properties file loaded via Yank.addSQLStatements(...). If more than one row match the query, only the first row is returned.
 * @param sqlKey The SQL Key found in a properties file corresponding to the desired SQL statement value
 * @param scalarType The Class of the desired return scalar matching the table
 * @param params The replacement parameters
 * @return The Object
 * @throws SQLStatementNotFoundException if an SQL statement could not be found for the given sqlKey String
 */
public static <T>T queryScalarSQLKey(String sqlKey,Class<T> scalarType,Object[] params){
  String sql=YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(sqlKey);
  if (sql == null || sql.equalsIgnoreCase(""String_Node_Str"")) {
    throw new SQLStatementNotFoundException();
  }
 else {
    return queryBean(sql,scalarType,params);
  }
}","/** 
 * Return just one scalar given a SQL Key using an SQL statement matching the sqlKey String in a properties file loaded via Yank.addSQLStatements(...). If more than one row match the query, only the first row is returned.
 * @param sqlKey The SQL Key found in a properties file corresponding to the desired SQL statement value
 * @param scalarType The Class of the desired return scalar matching the table
 * @param params The replacement parameters
 * @return The Object
 * @throws SQLStatementNotFoundException if an SQL statement could not be found for the given sqlKey String
 */
public static <T>T queryScalarSQLKey(String sqlKey,Class<T> scalarType,Object[] params){
  String sql=YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(sqlKey);
  if (sql == null || sql.equalsIgnoreCase(""String_Node_Str"")) {
    throw new SQLStatementNotFoundException();
  }
 else {
    return queryScalar(sql,scalarType,params);
  }
}",0.9946178686759956
151931,"/** 
 * Init method without a MYSQL_SQL.properties file
 * @param dbProperties
 */
public void init(Properties dbProperties){
  logger.info(""String_Node_Str"");
  if (dbProperties == null) {
    logger.error(""String_Node_Str"");
  }
  sqlProperties=new Properties();
  loadDriver(dbProperties);
  createPools(dbProperties);
}","/** 
 * Init method without a MYSQL_SQL.properties file
 * @param dbProperties
 */
public void init(Properties dbProperties){
  logger.info(""String_Node_Str"");
  if (dbProperties == null) {
    logger.error(""String_Node_Str"");
  }
  this.sqlProperties=new Properties();
  createPools(dbProperties);
}",0.9149277688603532
151932,"/** 
 * Returns an open connection. If no one is available, and the max number of connections has not been reached, a new connection is created.
 * @param poolName The pool name as defined in the properties file
 * @return Connection, the connection or null
 */
public Connection getConnection(String poolName){
  DBConnectionPool pool=pools.get(poolName);
  if (pool != null) {
    return pool.getConnection();
  }
 else {
    logger.error(""String_Node_Str"" + poolName);
  }
  return null;
}","/** 
 * Returns an open connection. If no one is available, and the max number of connections has not been reached, a new connection is created.
 * @param poolName The pool name as defined in the properties file
 * @return Connection, the connection or null if the number of connections in use exceeds the max allowed connections
 */
public Connection getConnection(String poolName){
  DBConnectionPool pool=pools.get(poolName);
  if (pool != null) {
    return pool.getConnection();
  }
 else {
    logger.error(""String_Node_Str"" + poolName);
    return null;
  }
}",0.9017013232514176
151933,"/** 
 * Creates instances of DBConnectionPool objects based on the properties. A DBConnectionPool can be defined with the following properties: <PRE> poolname.url         The JDBC URL for the database poolname.user        A database user (optional) poolname.password    A database user password (if user specified) poolname.maxconn     The maximal number of connections (optional) </PRE>
 * @param props The connection pool properties
 */
private void createPools(Properties dbProperties){
  Enumeration propNames=dbProperties.propertyNames();
  while (propNames.hasMoreElements()) {
    String name=(String)propNames.nextElement();
    if (name.endsWith(""String_Node_Str"")) {
      String poolName=name.substring(0,name.lastIndexOf('.'));
      String url=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      if (url == null) {
        logger.warn(""String_Node_Str"" + poolName);
        continue;
      }
      String user=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      String password=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      String maxconn=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      int max;
      try {
        max=Integer.valueOf(maxconn).intValue();
      }
 catch (      NumberFormatException e) {
        logger.warn(""String_Node_Str"" + maxconn + ""String_Node_Str""+ poolName);
        max=0;
      }
      DBConnectionPool pool=new DBConnectionPool(url,user,password,max);
      pools.put(poolName,pool);
      logger.info(""String_Node_Str"" + poolName + ""String_Node_Str"");
    }
  }
}","/** 
 * Creates instances of DBConnectionPool objects based on the properties. A DBConnectionPool can be defined with the following properties: <pre> poolname.url         The JDBC URL for the database poolname.user        A database user (optional) poolname.password    A database user password (if user specified) poolname.maxconn     The maximal number of connections (optional) </pre>
 * @param props The connection pool properties
 */
private void createPools(Properties dbProperties){
  Enumeration propNames=dbProperties.propertyNames();
  while (propNames.hasMoreElements()) {
    String name=(String)propNames.nextElement();
    if (name.endsWith(""String_Node_Str"")) {
      String poolName=name.substring(0,name.lastIndexOf('.'));
      String url=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      if (url == null) {
        logger.warn(""String_Node_Str"" + poolName);
        continue;
      }
      String user=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      String password=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      String maxconn=dbProperties.getProperty(poolName + ""String_Node_Str"").trim();
      int max;
      try {
        max=Integer.valueOf(maxconn).intValue();
      }
 catch (      NumberFormatException e) {
        logger.warn(""String_Node_Str"" + maxconn + ""String_Node_Str""+ poolName);
        max=0;
      }
      DBConnectionPool pool=new DBConnectionPool(url,user,password,max);
      pools.put(poolName,pool);
      logger.info(""String_Node_Str"" + poolName + ""String_Node_Str"");
    }
  }
}",0.9962145110410094
151934,"/** 
 * Closes all open connections and deregisters all drivers.
 */
public synchronized void release(){
  logger.info(""String_Node_Str"");
  Set<String> allPools=pools.keySet();
  for (Iterator<String> iterator=allPools.iterator(); iterator.hasNext(); ) {
    String poolName=iterator.next();
    logger.debug(""String_Node_Str"" + poolName + ""String_Node_Str"");
    pools.get(poolName).release();
  }
  try {
    DriverManager.deregisterDriver(jdbcDriver);
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + jdbcDriver.getClass().getName(),e);
  }
  logger.info(""String_Node_Str"" + jdbcDriver.getClass().getName());
}","/** 
 * Closes all open connections
 */
public synchronized void release(){
  logger.info(""String_Node_Str"");
  Set<String> allPools=pools.keySet();
  for (Iterator<String> iterator=allPools.iterator(); iterator.hasNext(); ) {
    String poolName=iterator.next();
    logger.debug(""String_Node_Str"" + poolName + ""String_Node_Str"");
    pools.get(poolName).release();
  }
}",0.7395626242544732
151935,"/** 
 * Checks out a connection from the pool. If no free connection is available, a new connection is created unless the max number of connections has been reached. If a free connection has been closed by the database, it's removed from the pool and this method is called again recursively.
 */
public synchronized Connection getConnection(){
  Connection con=null;
  if (freeConnections.size() > 0) {
    con=freeConnections.firstElement();
    freeConnections.removeElementAt(0);
    try {
      if (con.isClosed()) {
        logger.debug(""String_Node_Str"");
        con=getConnection();
      }
    }
 catch (    SQLException e) {
      logger.debug(""String_Node_Str"",e);
      con=getConnection();
    }
  }
 else   if (maxConn == 0 || checkedOut < maxConn) {
    con=newConnection();
  }
  if (con != null) {
    checkedOut++;
  }
  logger.trace(""String_Node_Str"" + checkedOut);
  return con;
}","/** 
 * * Checks out a connection from the pool. If no free connection is available, a new connection is created unless the max number of connections has been reached. If a free connection has been closed by the database, it is removed from the pool and this method is called again recursively.
 * @return a Connection, null if pool size has been exceeded
 */
public synchronized Connection getConnection(){
  Connection connection=null;
  if (pool.size() > 0) {
    connection=pool.firstElement();
    pool.removeElementAt(0);
    try {
      if (connection.isClosed()) {
        logger.debug(""String_Node_Str"");
        connection=getConnection();
      }
    }
 catch (    SQLException e) {
      logger.debug(""String_Node_Str"",e);
      connection=getConnection();
    }
  }
 else   if (maxConn == 0 || checkedOut < maxConn) {
    connection=newConnection();
  }
  if (connection != null) {
    checkedOut++;
  }
  logger.trace(""String_Node_Str"" + checkedOut);
  return connection;
}",0.9051404345521992
151936,"/** 
 * Checks in a connection to the pool. Notify other Threads that may be waiting for a connection.
 * @param con The connection to check in
 */
public synchronized void freeConnection(Connection con){
  freeConnections.addElement(con);
  checkedOut--;
  notifyAll();
}","/** 
 * Checks in a connection to the pool. Notify other Threads that may be waiting for a connection.
 * @param con The connection to check in
 */
public synchronized void freeConnection(Connection con){
  if (con != null) {
    pool.addElement(con);
    checkedOut--;
    notifyAll();
  }
}",0.9113475177304964
151937,"/** 
 * Closes all available connections.
 */
public synchronized void release(){
  Enumeration<Connection> allConnections=freeConnections.elements();
  while (allConnections.hasMoreElements()) {
    logger.debug(""String_Node_Str"");
    Connection con=allConnections.nextElement();
    try {
      con.close();
      logger.debug(""String_Node_Str"");
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  freeConnections.removeAllElements();
}","/** 
 * Closes all available connections.
 */
public synchronized void release(){
  Enumeration<Connection> allConnections=pool.elements();
  while (allConnections.hasMoreElements()) {
    logger.debug(""String_Node_Str"");
    Connection con=allConnections.nextElement();
    try {
      con.close();
      logger.debug(""String_Node_Str"");
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  pool.removeAllElements();
  checkedOut=0;
}",0.9506398537477148
151938,"/** 
 * Loads a Properties file from the classpath matching the given file name
 * @param pFileName
 * @return
 */
public static Properties getPropertiesFromClasspath(String pFileName){
  Properties props=new Properties();
  try {
    props.load(ClassLoader.getSystemResourceAsStream(pFileName));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
  return props;
}","/** 
 * Loads a Properties file from the classpath matching the given file name
 * @param fileName
 * @return
 */
public static Properties getPropertiesFromClasspath(String fileName){
  Properties props=new Properties();
  try {
    InputStream is=ClassLoader.getSystemResourceAsStream(fileName);
    if (is == null) {
      is=Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);
      logger.debug(""String_Node_Str"");
    }
    props.load(is);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  NullPointerException e) {
    logger.error(""String_Node_Str"",e);
  }
  return props;
}",0.6750972762645915
151939,"/** 
 * Loads a Properties file from the given file name
 * @param pFileName
 * @return
 */
public static Properties getPropertiesFromPath(String pFileName){
  Properties props=new Properties();
  FileInputStream fis;
  try {
    fis=new FileInputStream(pFileName);
    props.load(fis);
    fis.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return props;
}","/** 
 * Loads a Properties file from the given file name
 * @param fileName
 * @return
 */
public static Properties getPropertiesFromPath(String fileName){
  Properties props=new Properties();
  FileInputStream fis;
  try {
    fis=new FileInputStream(fileName);
    props.load(fis);
    fis.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return props;
}",0.5823754789272031
151940,"public void compile() throws Exception {
  LifecycleManager.getDefault().saveAll();
  for (  CoffeeScriptDataObject dataObject : data) {
    ProgressHandle handle=handle=ProgressHandleFactory.createHandle(""String_Node_Str"" + dataObject.getPrimaryFile().getNameExt(),this);
    try {
      handle.start();
      CoffeeScriptCompiler.CompilerResult result=CoffeeScriptSettings.getCompiler().compile(dataObject.getPrimaryFile().asText(),bare);
      if (result == null) {
        return;
      }
      if (result.getJs() != null) {
        FileObject folder=dataObject.getFolder().getPrimaryFile();
        FileObject file=folder.getFileObject(dataObject.getName(),""String_Node_Str"");
        if (file != null) {
          file.delete();
        }
        file=folder.createData(dataObject.getName(),""String_Node_Str"");
        file.getOutputStream().write(result.getJs().getBytes());
      }
 else {
      }
      handleResult(result);
    }
  finally {
      handle.finish();
    }
  }
}","public void compile() throws Exception {
  LifecycleManager.getDefault().saveAll();
  for (  CoffeeScriptDataObject coffeeFile : data) {
    ProgressHandle handle=ProgressHandleFactory.createHandle(""String_Node_Str"" + coffeeFile.getPrimaryFile().getNameExt(),this);
    try {
      handle.start();
      CoffeeScriptCompiler.CompilerResult result=CoffeeScriptSettings.getCompiler().compile(coffeeFile.getPrimaryFile().asText(),bare);
      if (result == null) {
        return;
      }
      if (result.getJs() != null) {
        CoffeeScriptUtils.writeJSForCoffeeScriptFile(result.getJs(),coffeeFile.getPrimaryFile());
      }
      handleResult(result);
    }
  finally {
      handle.finish();
    }
  }
}",0.6564344746162928
151941,"public void run(final CoffeeScriptParser.ParsingResult result,SchedulerEvent event){
  if ((result != null) && !CoffeeScriptAutocompileContext.get().isEnabled(result.getSnapshot().getSource().getFileObject())) {
    return;
  }
  if ((result != null) && (result.getCompilerResult() != null) && (result.getCompilerResult().getJs() != null)) {
    final FileObject coffeeFile=result.getSnapshot().getSource().getFileObject();
    final String js=result.getCompilerResult().getJs();
    try {
      FileObject folder=coffeeFile.getParent();
      FileObject file=folder.getFileObject(coffeeFile.getName(),""String_Node_Str"");
      if (file == null) {
        file=folder.createData(coffeeFile.getName(),""String_Node_Str"");
      }
      if (!file.asText().equals(js)) {
        OutputStream out=file.getOutputStream();
        try {
          out.write(js.getBytes(FileEncodingQuery.getEncoding(coffeeFile)));
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
        }
      }
    }
 catch (    Exception e) {
      Exceptions.printStackTrace(e);
    }
  }
}","public void run(final CoffeeScriptParser.ParsingResult result,SchedulerEvent event){
  if ((result != null) && !CoffeeScriptAutocompileContext.get().isEnabled(result.getSnapshot().getSource().getFileObject())) {
    return;
  }
  if ((result != null) && (result.getCompilerResult() != null) && (result.getCompilerResult().getJs() != null)) {
    FileObject coffeeFile=result.getSnapshot().getSource().getFileObject();
    String js=result.getCompilerResult().getJs();
    CoffeeScriptUtils.writeJSForCoffeeScriptFile(js,coffeeFile);
  }
}",0.5812688821752265
151942,"public void packetReceived(DatagramSocket socket,DatagramPacket packet){
  int type=packet.getData()[1] & ~0x80;
  if (type == 0x60 || type == 0x56) {
    byte[] pktp=packet.getData();
    if (type == 0x56) {
      for (int i=0; i < pktp.length - 4; i++) {
        pktp[i]=packet.getData()[i + 4];
      }
      short seqno=pktp[2];
      this.putPacketInBuffer(seqno,pktp);
    }
  }
}","public void packetReceived(DatagramSocket socket,DatagramPacket packet){
  int type=packet.getData()[1] & ~0x80;
  if (type == 0x60 || type == 0x56) {
    byte[] pktp=packet.getData();
    if (type == 0x56) {
      for (int i=0; i < pktp.length - 4; i++) {
        pktp[i]=packet.getData()[i + 4];
      }
    }
    int seqno=((int)pktp[2] << 8) + (pktp[3] & 0xff);
    this.putPacketInBuffer(seqno,pktp);
  }
}",0.9259723964868256
151943,"private void putPacketInBuffer(short seqno,byte[] data){
}","private void putPacketInBuffer(int seqno,byte[] data){
  if (!ab_synced) {
    ab_write=seqno;
    ab_read=seqno - 1;
    ab_synced=true;
  }
}",0.5373134328358209
151944,"public UDPListener(DatagramSocket socket,UDPDelegate delegate){
  this.socket=socket;
  this.delegate=delegate;
  this.start();
  System.out.println(""String_Node_Str"");
}","public UDPListener(DatagramSocket socket,UDPDelegate delegate){
  this.socket=socket;
  this.delegate=delegate;
  this.start();
}",0.862876254180602
151945,"/** 
 * Adds packet into the buffer
 * @param seqno	seqno of the given packet. Used as index
 * @param data
 */
public void putPacketInBuffer(int seqno,byte[] data){
synchronized (lock) {
    if (!synced) {
      writeIndex=seqno;
      readIndex=seqno;
      synced=true;
    }
    @SuppressWarnings(""String_Node_Str"") int outputSize=0;
    if (seqno == writeIndex) {
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
      writeIndex++;
    }
 else     if (seqno > writeIndex) {
      server.request_resend(writeIndex,seqno);
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
      writeIndex=seqno + 1;
    }
 else     if (seqno > readIndex) {
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
    }
 else {
      System.err.println(""String_Node_Str"" + seqno);
    }
    actualBufSize=writeIndex - readIndex;
    if (decoder_isStopped && actualBufSize > START_FILL) {
      System.err.println(seqno);
      lock.notify();
    }
    if (writeIndex == 65536) {
      writeIndex=1;
    }
  }
}","/** 
 * Adds packet into the buffer
 * @param seqno	seqno of the given packet. Used as index
 * @param data
 */
public void putPacketInBuffer(int seqno,byte[] data){
synchronized (lock) {
    if (!synced) {
      writeIndex=seqno;
      readIndex=seqno;
      synced=true;
    }
    @SuppressWarnings(""String_Node_Str"") int outputSize=0;
    if (seqno == writeIndex) {
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
      writeIndex++;
    }
 else     if (seqno > writeIndex) {
      server.request_resend(writeIndex,seqno);
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
      writeIndex=seqno + 1;
    }
 else     if (seqno > readIndex) {
      outputSize=this.alac_decode(data,audioBuffer[(seqno % BUFFER_FRAMES)].data);
      audioBuffer[(seqno % BUFFER_FRAMES)].ready=true;
    }
 else {
      System.err.println(""String_Node_Str"" + seqno);
    }
    actualBufSize=writeIndex - readIndex;
    if (actualBufSize < 0) {
      actualBufSize=65536 - readIndex + writeIndex;
    }
    if (decoder_isStopped && actualBufSize > START_FILL) {
      System.err.println(seqno);
      lock.notify();
    }
    if (writeIndex == 65536) {
      writeIndex=0;
    }
  }
}",0.881199538638985
151946,"/** 
 * Returns the next ready frame. If none, waiting for one
 * @return
 */
public int[] getNextFrame(){
synchronized (lock) {
    System.err.println(""String_Node_Str"" + readIndex);
    actualBufSize=writeIndex - readIndex;
    if (actualBufSize < 1 || !synced) {
      if (synced) {
        System.err.println(""String_Node_Str"");
      }
      try {
        System.err.println(""String_Node_Str"");
        decoder_isStopped=true;
        lock.wait();
        decoder_isStopped=false;
        System.err.println(""String_Node_Str"");
        readIndex++;
        session.resetFilter();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      return null;
    }
    if (actualBufSize >= BUFFER_FRAMES) {
      System.err.println(""String_Node_Str"");
      readIndex=writeIndex - START_FILL;
    }
    int read=readIndex;
    readIndex++;
    actualBufSize=writeIndex - readIndex;
    session.updateFilter(actualBufSize);
    AudioData buf=audioBuffer[read % BUFFER_FRAMES];
    if (!buf.ready) {
      System.err.println(""String_Node_Str"");
      for (int i=0; i < buf.data.length; i++) {
        buf.data[i]=0;
      }
    }
    buf.ready=false;
    if (readIndex == 65536) {
      readIndex=1;
    }
    return buf.data;
  }
}","/** 
 * Returns the next ready frame. If none, waiting for one
 * @return
 */
public int[] getNextFrame(){
synchronized (lock) {
    System.err.println(""String_Node_Str"" + readIndex);
    actualBufSize=writeIndex - readIndex;
    if (actualBufSize < 0) {
      actualBufSize=65536 - readIndex + writeIndex;
    }
    if (actualBufSize < 1 || !synced) {
      if (synced) {
        System.err.println(""String_Node_Str"");
      }
      try {
        System.err.println(""String_Node_Str"");
        decoder_isStopped=true;
        lock.wait();
        decoder_isStopped=false;
        System.err.println(""String_Node_Str"");
        readIndex++;
        session.resetFilter();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      return null;
    }
    if (actualBufSize >= BUFFER_FRAMES) {
      System.err.println(""String_Node_Str"");
      readIndex=writeIndex - START_FILL;
    }
    int read=readIndex;
    readIndex++;
    actualBufSize=writeIndex - readIndex;
    if (actualBufSize < 0) {
      actualBufSize=65536 - readIndex + writeIndex;
    }
    session.updateFilter(actualBufSize);
    AudioData buf=audioBuffer[read % BUFFER_FRAMES];
    if (!buf.ready) {
      System.err.println(""String_Node_Str"");
      for (int i=0; i < buf.data.length; i++) {
        buf.data[i]=0;
      }
    }
    buf.ready=false;
    if (readIndex == 65536) {
      readIndex=0;
    }
    return buf.data;
  }
}",0.9346696362286564
151947,"private void handleHttpRequest(ChannelHandlerContext ctx,HttpRequest req) throws Exception {
  String reqURI=req.getUri();
  if (reqURI.contains(POLLING_PATH)) {
    String[] parts=reqURI.split(""String_Node_Str"");
    String ID=parts.length > 3 ? parts[3] : ""String_Node_Str"";
    PollingIOClient client=(PollingIOClient)this.pollingClients.get(ID);
    if (client == null) {
      client=connectPoller(ctx);
      client.Reconnect(ctx,req);
      return;
    }
    if (req.getMethod() == GET) {
      client.heartbeat();
      client.Reconnect(ctx,req);
    }
 else {
      QueryStringDecoder decoder=new QueryStringDecoder(""String_Node_Str"" + req.getContent().toString(CharsetUtil.UTF_8));
      String message=decoder.getParameters().get(""String_Node_Str"").get(0);
      handleMessage(client,message);
      sendHttpResponse(ctx,req,new DefaultHttpResponse(HTTP_1_1,OK));
    }
    return;
  }
  String location=""String_Node_Str"";
  if (reqURI.equals(WEBSOCKET_PATH)) {
    location=getWebSocketLocation(req);
  }
 else   if (reqURI.equals(FLASHSOCKET_PATH)) {
    location=getFlashSocketLocation(req);
  }
  if (location != ""String_Node_Str"" && Values.UPGRADE.equalsIgnoreCase(req.getHeader(CONNECTION)) && WEBSOCKET.equalsIgnoreCase(req.getHeader(Names.UPGRADE))) {
    HttpResponse res=new DefaultHttpResponse(HTTP_1_1,new HttpResponseStatus(101,""String_Node_Str""));
    res.addHeader(Names.UPGRADE,WEBSOCKET);
    res.addHeader(CONNECTION,Values.UPGRADE);
    if (req.containsHeader(SEC_WEBSOCKET_KEY1) && req.containsHeader(SEC_WEBSOCKET_KEY2)) {
      res.addHeader(SEC_WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(SEC_WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(SEC_WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(SEC_WEBSOCKET_PROTOCOL,protocol);
      }
      String key1=req.getHeader(SEC_WEBSOCKET_KEY1);
      String key2=req.getHeader(SEC_WEBSOCKET_KEY2);
      int a=(int)(Long.parseLong(key1.replaceAll(""String_Node_Str"",""String_Node_Str"")) / key1.replaceAll(""String_Node_Str"",""String_Node_Str"").length());
      int b=(int)(Long.parseLong(key2.replaceAll(""String_Node_Str"",""String_Node_Str"")) / key2.replaceAll(""String_Node_Str"",""String_Node_Str"").length());
      long c=req.getContent().readLong();
      ChannelBuffer input=ChannelBuffers.buffer(16);
      input.writeInt(a);
      input.writeInt(b);
      input.writeLong(c);
      ChannelBuffer output=ChannelBuffers.wrappedBuffer(MessageDigest.getInstance(""String_Node_Str"").digest(input.array()));
      res.setContent(output);
    }
 else {
      res.addHeader(WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(WEBSOCKET_PROTOCOL,protocol);
      }
    }
    ChannelPipeline p=ctx.getChannel().getPipeline();
    p.remove(""String_Node_Str"");
    p.replace(""String_Node_Str"",""String_Node_Str"",new WebSocketFrameDecoder());
    ctx.getChannel().write(res);
    p.replace(""String_Node_Str"",""String_Node_Str"",new WebSocketFrameEncoder());
    connectSocket(ctx);
    return;
  }
  sendHttpResponse(ctx,req,new DefaultHttpResponse(HTTP_1_1,FORBIDDEN));
}","private void handleHttpRequest(ChannelHandlerContext ctx,HttpRequest req) throws Exception {
  String reqURI=req.getUri();
  if (reqURI.contains(POLLING_PATH)) {
    String[] parts=reqURI.split(""String_Node_Str"");
    String ID=parts.length > 3 ? parts[3] : ""String_Node_Str"";
    PollingIOClient client=(PollingIOClient)this.pollingClients.get(ID);
    if (client == null) {
      client=connectPoller(ctx);
      client.Reconnect(ctx,req);
      return;
    }
    if (req.getMethod() == GET) {
      client.heartbeat();
      client.Reconnect(ctx,req);
    }
 else {
      QueryStringDecoder decoder=new QueryStringDecoder(""String_Node_Str"" + req.getContent().toString(CharsetUtil.UTF_8));
      String message=decoder.getParameters().get(""String_Node_Str"").get(0);
      handleMessage(client,message);
      setKeepAlive(req,false);
      HttpResponse resp=new DefaultHttpResponse(HTTP_1_1,OK);
      resp.addHeader(""String_Node_Str"",""String_Node_Str"");
      sendHttpResponse(ctx,req,resp);
    }
    return;
  }
  String location=""String_Node_Str"";
  if (reqURI.equals(WEBSOCKET_PATH)) {
    location=getWebSocketLocation(req);
  }
 else   if (reqURI.equals(FLASHSOCKET_PATH)) {
    location=getFlashSocketLocation(req);
  }
  if (location != ""String_Node_Str"" && Values.UPGRADE.equalsIgnoreCase(req.getHeader(CONNECTION)) && WEBSOCKET.equalsIgnoreCase(req.getHeader(Names.UPGRADE))) {
    HttpResponse res=new DefaultHttpResponse(HTTP_1_1,new HttpResponseStatus(101,""String_Node_Str""));
    res.addHeader(Names.UPGRADE,WEBSOCKET);
    res.addHeader(CONNECTION,Values.UPGRADE);
    if (req.containsHeader(SEC_WEBSOCKET_KEY1) && req.containsHeader(SEC_WEBSOCKET_KEY2)) {
      res.addHeader(SEC_WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(SEC_WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(SEC_WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(SEC_WEBSOCKET_PROTOCOL,protocol);
      }
      String key1=req.getHeader(SEC_WEBSOCKET_KEY1);
      String key2=req.getHeader(SEC_WEBSOCKET_KEY2);
      int a=(int)(Long.parseLong(key1.replaceAll(""String_Node_Str"",""String_Node_Str"")) / key1.replaceAll(""String_Node_Str"",""String_Node_Str"").length());
      int b=(int)(Long.parseLong(key2.replaceAll(""String_Node_Str"",""String_Node_Str"")) / key2.replaceAll(""String_Node_Str"",""String_Node_Str"").length());
      long c=req.getContent().readLong();
      ChannelBuffer input=ChannelBuffers.buffer(16);
      input.writeInt(a);
      input.writeInt(b);
      input.writeLong(c);
      ChannelBuffer output=ChannelBuffers.wrappedBuffer(MessageDigest.getInstance(""String_Node_Str"").digest(input.array()));
      res.setContent(output);
    }
 else {
      res.addHeader(WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(WEBSOCKET_PROTOCOL,protocol);
      }
    }
    ChannelPipeline p=ctx.getChannel().getPipeline();
    p.remove(""String_Node_Str"");
    p.replace(""String_Node_Str"",""String_Node_Str"",new WebSocketFrameDecoder());
    ctx.getChannel().write(res);
    p.replace(""String_Node_Str"",""String_Node_Str"",new WebSocketFrameEncoder());
    connectSocket(ctx);
    return;
  }
  sendHttpResponse(ctx,req,new DefaultHttpResponse(HTTP_1_1,FORBIDDEN));
}",0.9711971197119712
151948,"private ImmutableList<LinkedHashMap<String,Object>> getDataPoints(){
  ImmutableList.Builder<LinkedHashMap<String,Object>> builder=new ImmutableList.Builder<LinkedHashMap<String,Object>>();
  try {
    for (    String line : (List<String>)IOUtils.readLines(new FileReader(subscriberConfig.getFilePath()))) {
      if (line.trim().length() > 0) {
        map.clear();
        String[] items=line.split(subscriberConfig.getSeparator());
        long dateTime=new DateTime(items[0],DateTimeZone.forID(""String_Node_Str"")).getMillis();
        map.put(""String_Node_Str"",dateTime);
        for (int j=1; j < items.length; j++) {
          double value=Double.valueOf(items[j]);
          map.put(subscriberConfig.getAttributes()[j],value);
        }
        builder.add(new LinkedHashMap(map));
      }
    }
    return builder.build();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + subscriberConfig.getFilePath());
    return null;
  }
}","private ImmutableList<LinkedHashMap<String,Object>> getDataPoints(){
  ImmutableList.Builder<LinkedHashMap<String,Object>> builder=new ImmutableList.Builder<LinkedHashMap<String,Object>>();
  try {
    for (    String line : (List<String>)IOUtils.readLines(new FileReader(subscriberConfig.getFilePath()))) {
      if (line.trim().length() > 0) {
        map.clear();
        String[] items=line.split(subscriberConfig.getSeparator());
        long dateTime=new DateTime(items[0],DateTimeZone.forID(""String_Node_Str"")).getMillis();
        map.put(""String_Node_Str"",dateTime);
        for (int j=1; j < items.length; j++) {
          double value=Double.valueOf(items[j]);
          map.put(subscriberConfig.getAttributes()[j - 1],value);
        }
        builder.add(new LinkedHashMap(map));
      }
    }
    return builder.build();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + subscriberConfig.getFilePath());
    return null;
  }
}",0.9979013641133264
151949,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.help);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  View v=findViewById(R.id.video);
  v.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.help);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  View v=findViewById(R.id.video);
  v.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      try {
        startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
      }
 catch (      Exception e) {
        startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
      }
    }
  }
);
}",0.8409818569903948
151950,"public void onClick(View v){
  startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
}","public void onClick(View v){
  try {
    startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  }
 catch (  Exception e) {
    startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  }
}",0.6371681415929203
151951,"public boolean hasMove(int color){
  Board board=game.boards.get(color);
  for (  Square seed : board.seeds()) {
    for (int p=0; p < board.pieces.size(); p++) {
      Piece piece=board.pieces.get(p);
      for (int r=0; r < piece.rotations; r++, piece.rotate(1)) {
        for (int f=0; f < piece.flips; f++, piece.flip()) {
          for (          Square s : piece.squares()) {
            int i=seed.i - s.i;
            int j=seed.j - s.j;
            if (!board.outside(s,i,j) && game.fits(piece,i,j)) {
              Log.d(tag,""String_Node_Str"" + new Move(piece,i,j));
              game.boards.get(color).over=false;
              return true;
            }
          }
        }
      }
    }
  }
  game.boards.get(color).over=true;
  return false;
}","public boolean hasMove(int color){
  Board board=game.boards.get(color);
  for (  Square seed : board.seeds()) {
    for (int p=0; p < board.pieces.size(); p++) {
      Piece piece=board.pieces.get(p);
      for (int f=0; f < piece.flips; f++, piece.flip()) {
        for (int r=0; r < piece.rotations; r++, piece.rotate(1)) {
          for (          Square s : piece.squares()) {
            int i=seed.i - s.i;
            int j=seed.j - s.j;
            if (!board.outside(s,i,j) && game.fits(piece,i,j)) {
              Log.d(tag,""String_Node_Str"" + new Move(piece,i,j));
              game.boards.get(color).over=false;
              return true;
            }
          }
        }
      }
    }
  }
  game.boards.get(color).over=true;
  return false;
}",0.9513157894736842
151952,"/** 
 * Setup CDI environment for the class.<br> INTERNAL: Do not use.
 */
@BeforeClass(alwaysRun=true) protected void setupCdi(){
  weld=new Weld(){
    @Override protected Deployment createDeployment(    ResourceLoader resourceLoader,    CDI11Bootstrap bootstrap){
      try {
        return new WeldTestUrlDeployment(resourceLoader,bootstrap,clazz);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    protected Deployment createDeployment(    ResourceLoader resourceLoader,    Bootstrap bootstrap){
      try {
        return new WeldTestUrlDeployment(resourceLoader,bootstrap,clazz);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","/** 
 * Setup CDI environment for the class.<br> INTERNAL: Do not use.
 */
@BeforeClass(alwaysRun=true) protected void setupCdi(){
  weld=new Weld(){
    protected Deployment createDeployment(    ResourceLoader resourceLoader,    CDI11Bootstrap bootstrap){
      try {
        return new WeldTestUrlDeployment(resourceLoader,bootstrap,clazz);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    protected Deployment createDeployment(    ResourceLoader resourceLoader,    Bootstrap bootstrap){
      try {
        return new WeldTestUrlDeployment(resourceLoader,bootstrap,clazz);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.9931224209078404
151953,"private Metadata getMetadata() throws IOException, ConfigurationException, DocumentException {
  String cm=configModifier != null ? configModifier : ""String_Node_Str"";
  mdSem.acquireUninterruptibly();
  Metadata md=metadatas.get(cm);
  if (md == null)   try {
    StandardServiceRegistryBuilder ssrb=new StandardServiceRegistryBuilder();
    String propFile;
    String dbPropertiesPrefix=""String_Node_Str"";
    String metadataPrefix=""String_Node_Str"";
    if (configModifier != null) {
      String[] ss=configModifier.split(""String_Node_Str"");
      if (ss.length > 0)       dbPropertiesPrefix=ss[0] + ""String_Node_Str"";
      if (ss.length > 1)       metadataPrefix=ss[1] + ""String_Node_Str"";
    }
    String hibCfg=System.getProperty(""String_Node_Str"",""String_Node_Str"" + dbPropertiesPrefix + ""String_Node_Str"");
    if (getClass().getClassLoader().getResource(hibCfg) == null)     hibCfg=null;
    if (hibCfg == null)     hibCfg=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    ssrb.configure(hibCfg);
    propFile=System.getProperty(dbPropertiesPrefix + ""String_Node_Str"",""String_Node_Str"" + dbPropertiesPrefix + ""String_Node_Str"");
    Properties dbProps=loadProperties(propFile);
    if (dbProps != null) {
      for (      Map.Entry entry : dbProps.entrySet()) {
        ssrb.applySetting((String)entry.getKey(),entry.getValue());
      }
    }
    Space sp=SpaceFactory.getSpace(""String_Node_Str"");
    String user=(String)sp.inp(dbPropertiesPrefix + ""String_Node_Str"");
    String pass=(String)sp.inp(dbPropertiesPrefix + ""String_Node_Str"");
    if (user != null)     ssrb.applySetting(""String_Node_Str"",user);
    if (pass != null)     ssrb.applySetting(""String_Node_Str"",pass);
    MetadataSources mds=new MetadataSources(ssrb.build());
    List<String> moduleConfigs=ModuleUtils.getModuleEntries(MODULES_CONFIG_PATH);
    for (    String moduleConfig : moduleConfigs) {
      if (metadataPrefix.length() == 0 || moduleConfig.substring(MODULES_CONFIG_PATH.length()).startsWith(metadataPrefix)) {
        if ((!metadataPrefix.contains(""String_Node_Str"") && moduleConfig.contains(""String_Node_Str"")) || (!moduleConfig.contains(""String_Node_Str"") && metadataPrefix.contains(""String_Node_Str"")))         continue;
        addMappings(mds,moduleConfig);
      }
    }
    md=mds.buildMetadata();
    metadatas.put(cm,md);
  }
  finally {
    mdSem.release();
  }
  return md;
}","private Metadata getMetadata() throws IOException, ConfigurationException, DocumentException {
  String cm=configModifier != null ? configModifier : ""String_Node_Str"";
  mdSem.acquireUninterruptibly();
  Metadata md=metadatas.get(cm);
  try {
    if (md == null) {
      StandardServiceRegistryBuilder ssrb=new StandardServiceRegistryBuilder();
      String propFile;
      String dbPropertiesPrefix=""String_Node_Str"";
      String metadataPrefix=""String_Node_Str"";
      if (configModifier != null) {
        String[] ss=configModifier.split(""String_Node_Str"");
        if (ss.length > 0)         dbPropertiesPrefix=ss[0] + ""String_Node_Str"";
        if (ss.length > 1)         metadataPrefix=ss[1] + ""String_Node_Str"";
      }
      String hibCfg=System.getProperty(""String_Node_Str"",""String_Node_Str"" + dbPropertiesPrefix + ""String_Node_Str"");
      if (getClass().getClassLoader().getResource(hibCfg) == null)       hibCfg=null;
      if (hibCfg == null)       hibCfg=System.getProperty(""String_Node_Str"",""String_Node_Str"");
      ssrb.configure(hibCfg);
      propFile=System.getProperty(dbPropertiesPrefix + ""String_Node_Str"",""String_Node_Str"" + dbPropertiesPrefix + ""String_Node_Str"");
      Properties dbProps=loadProperties(propFile);
      if (dbProps != null) {
        for (        Map.Entry entry : dbProps.entrySet()) {
          ssrb.applySetting((String)entry.getKey(),entry.getValue());
        }
      }
      Space sp=SpaceFactory.getSpace(""String_Node_Str"");
      String user=(String)sp.inp(dbPropertiesPrefix + ""String_Node_Str"");
      String pass=(String)sp.inp(dbPropertiesPrefix + ""String_Node_Str"");
      if (user != null)       ssrb.applySetting(""String_Node_Str"",user);
      if (pass != null)       ssrb.applySetting(""String_Node_Str"",pass);
      MetadataSources mds=new MetadataSources(ssrb.build());
      List<String> moduleConfigs=ModuleUtils.getModuleEntries(MODULES_CONFIG_PATH);
      for (      String moduleConfig : moduleConfigs) {
        if (metadataPrefix.length() == 0 || moduleConfig.substring(MODULES_CONFIG_PATH.length()).startsWith(metadataPrefix)) {
          if ((!metadataPrefix.contains(""String_Node_Str"") && moduleConfig.contains(""String_Node_Str"")) || (!moduleConfig.contains(""String_Node_Str"") && metadataPrefix.contains(""String_Node_Str"")))           continue;
          addMappings(mds,moduleConfig);
        }
      }
      md=mds.buildMetadata();
      metadatas.put(cm,md);
    }
  }
  finally {
    mdSem.release();
  }
  return md;
}",0.9644607843137256
151954,"/** 
 * Load key, enables decryption
 * @param jobId optional job id
 * @param keyId key to load
 * @param password private key-ring password
 * @throws Exception if invalid key
 */
public void loadKey(String jobId,String keyId,char[] password) throws Exception {
  if (!keys.containsKey(keyId)) {
    String v=(String)DB.execWithTransaction(db -> {
      SysConfigManager mgr=new SysConfigManager(db,""String_Node_Str"");
      return mgr.get(keyId,null);
    }
);
    if (v == null) {
      throw new SecurityException(""String_Node_Str"");
    }
    byte[] key=PGPHelper.decrypt(v.getBytes(),privKeyRing,password);
    keys.put((jobId == null ? ""String_Node_Str"" : jobId) + keyId,new SecretKeySpec(key,0,key.length,""String_Node_Str""));
  }
}","/** 
 * Load key, enables decryption
 * @param jobId optional job id
 * @param keyId key to load
 * @param password private key-ring password
 * @throws Exception if invalid key
 */
public void loadKey(String jobId,String keyId,char[] password) throws Exception {
  if (!keys.containsKey((jobId == null ? ""String_Node_Str"" : jobId) + keyId)) {
    String v=(String)DB.execWithTransaction(db -> {
      SysConfigManager mgr=new SysConfigManager(db,""String_Node_Str"");
      return mgr.get(keyId,null);
    }
);
    if (v == null) {
      throw new SecurityException(""String_Node_Str"");
    }
    byte[] key=PGPHelper.decrypt(v.getBytes(),privKeyRing,password);
    keys.put((jobId == null ? ""String_Node_Str"" : jobId) + keyId,new SecretKeySpec(key,0,key.length,""String_Node_Str""));
  }
}",0.9698558322411532
151955,"public void formatGrid(Grid grid){
  grid.setCellStyleGenerator(cellReference -> {
    if (cellReference.getValue() instanceof BigDecimal)     return ""String_Node_Str"";
    return null;
  }
);
  DecimalFormat nf=new DecimalFormat();
  nf.setGroupingUsed(false);
  if (grid.getColumn(""String_Node_Str"") != null && !String.class.equals(grid.getContainerDataSource().getType(""String_Node_Str"")))   grid.getColumn(""String_Node_Str"").setRenderer(new NumberRenderer(nf));
  for (  Grid.Column c : grid.getColumns()) {
    c.setHidable(true);
    ViewConfig.FieldConfig config=viewConfig.getFields().get(c.getPropertyId());
    if (""String_Node_Str"".equals(c.getPropertyId())) {
      c.setExpandRatio(0);
    }
 else     if (isBooleanColumn(c)) {
      c.setExpandRatio(0);
      c.setConverter(new StringToBooleanConverter(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (isDateColumn(c)) {
      c.setRenderer(new DateRenderer(getDateFormat()));
    }
 else {
      c.setExpandRatio(1);
    }
    if (config != null) {
      if (config.getExpandRatio() != -1)       c.setExpandRatio(config.getExpandRatio());
    }
  }
  grid.setSizeFull();
}","public void formatGrid(Grid grid){
  grid.setCellStyleGenerator(cellReference -> {
    if (cellReference.getValue() instanceof BigDecimal)     return ""String_Node_Str"";
    return null;
  }
);
  DecimalFormat nf=new DecimalFormat();
  nf.setGroupingUsed(false);
  grid.addColumnResizeListener((Grid.ColumnResizeListener)event -> {
    int lastColumnIndex=grid.getColumns().size() - 1;
    grid.getColumns().get(lastColumnIndex).setWidth(1500);
  }
);
  if (grid.getColumn(""String_Node_Str"") != null && !String.class.equals(grid.getContainerDataSource().getType(""String_Node_Str"")))   grid.getColumn(""String_Node_Str"").setRenderer(new NumberRenderer(nf));
  for (  Grid.Column c : grid.getColumns()) {
    c.setHidable(true);
    if (""String_Node_Str"".equals(c.getPropertyId())) {
      c.setExpandRatio(0);
    }
 else     if (isBooleanColumn(c)) {
      c.setExpandRatio(0);
      c.setConverter(new StringToBooleanConverter(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (isDateColumn(c)) {
      c.setRenderer(new DateRenderer(getDateFormat()));
    }
 else {
      c.setExpandRatio(1);
    }
    ViewConfig.FieldConfig config=viewConfig.getFields().get(c.getPropertyId());
    if (config != null) {
      if (config.getExpandRatio() != -1)       c.setExpandRatio(config.getExpandRatio());
    }
  }
  grid.setSizeFull();
}",0.8587525150905433
151956,"@Override public void enter(ViewChangeListener.ViewChangeEvent event){
  super.enter(event);
  setHelper(createHelper());
  showSpecificView(getGeneralRoute() + ""String_Node_Str"" + QI.getQI().getUser().getId());
}","@Override public void enter(ViewChangeListener.ViewChangeEvent event){
  setHelper(createHelper());
  getHelper().setConfiguration(getConfiguration());
  showSpecificView(getGeneralRoute() + ""String_Node_Str"" + QI.getQI().getUser().getId());
}",0.8070175438596491
151957,"private BigDecimal createBalanceCache(Journal journal,Account acct,short[] layers,long maxId) throws HibernateException, GLException {
  BigDecimal balance=null;
  if (acct instanceof CompositeAccount) {
    balance=ZERO;
    Iterator iter=((CompositeAccount)acct).getChildren().iterator();
    while (iter.hasNext()) {
      Account a=(Account)iter.next();
      balance=balance.add(createBalanceCache(journal,a,layers,maxId));
    }
  }
 else   if (acct instanceof FinalAccount) {
    lock(journal,acct);
    balance=getBalances(journal,acct,null,true,layers,maxId)[0];
    BalanceCache c=getBalanceCache(journal,acct,layers);
    if (c == null) {
      c=new BalanceCache();
      c.setJournal(journal);
      c.setAccount(acct);
      c.setLayers(layersToString(layers));
    }
    if (maxId != c.getRef()) {
      c.setRef(maxId);
      c.setBalance(balance);
      session.saveOrUpdate(c);
    }
  }
  return balance;
}","private BigDecimal createBalanceCache(Journal journal,Account acct,short[] layers,long maxId) throws HibernateException, GLException {
  BigDecimal balance=null;
  if (acct instanceof CompositeAccount) {
    balance=ZERO;
    Iterator iter=((CompositeAccount)acct).getChildren().iterator();
    while (iter.hasNext()) {
      Account a=(Account)iter.next();
      balance=balance.add(createBalanceCache(journal,a,layers,maxId));
    }
  }
 else   if (acct instanceof FinalAccount) {
    lock(journal,acct);
    balance=getBalances(journal,acct,null,true,layers,maxId)[0];
    BalanceCache c=getBalanceCache(journal,acct,layers);
    if (c == null) {
      c=new BalanceCache();
      c.setJournal(journal);
      c.setAccount(acct);
      c.setLayers(layersToString(layers));
    }
    if (maxId != c.getRef()) {
      c.setRef(maxId);
      c.setBalance(balance);
      session.saveOrUpdate(c);
    }
  }
  return getBalance(journal,acct,layers);
}",0.9797225186766276
151958,"/** 
 * Creates DB Object using default Hibernate instance
 * @param log Log object
 */
public DB(Log log,String configModifier){
  this(configModifier);
  setLog(log);
}","/** 
 * Creates DB Object using default Hibernate instance
 * @param log Log object
 * @param configModifier modifier
 */
public DB(Log log,String configModifier){
  this(configModifier);
  setLog(log);
}",0.9090909090909092
151959,"/** 
 * Constructs a GLTransaction out of a JDOM Element as defined in <a href=""http://jpos.org/minigl.dtd"">minigl.dtd</a>
 * @param elem '<entry>...</entry>' element.
 */
public GLTransaction(Element elem) throws ParseException {
  super();
  fromXML(elem);
}","/** 
 * Constructs a GLTransaction out of a JDOM Element as defined in <a href=""http://jpos.org/minigl.dtd"">minigl.dtd</a>
 * @param elem {@code '<entry>...</entry>}' element.
 */
public GLTransaction(Element elem) throws ParseException {
  super();
  fromXML(elem);
}",0.9848484848484848
151960,"/** 
 * Transactions should not be posted to this journal using a postDate <= the lockDate.
 * @lockDate lockDate the lock date.
 */
public void setLockDate(Date lockDate){
  this.lockDate=lockDate;
}","/** 
 * Transactions should not be posted to this journal using a postDate &lt;= the lockDate.
 * @param lockDate the lock date.
 */
public void setLockDate(Date lockDate){
  this.lockDate=lockDate;
}",0.955
151961,"/** 
 * Called <em>after</em> the FLUSH protocol has unblocked previously blocked senders, and messages can be sent again. This callback only needs to be implemented if we require a notification of that. <p/> <p/> Note that during new view installation we provide guarantee that unblock invocation strictly follows view installation at some node A belonging to that view . However, some other message M may squeeze in between view and unblock callbacks. <p/> For more details see https://jira.jboss.org/jira/browse/JGRP-986
 */
@Override public void unblock(){
}","/** 
 * Called <em>after</em> the FLUSH protocol has unblocked previously blocked senders, and messages can be sent again. This callback only needs to be implemented if we require a notification of that. <p> Note that during new view installation we provide guarantee that unblock invocation strictly follows view installation at some node A belonging to that view . However, some other message M may squeeze in between view and unblock callbacks. <p> For more details see https://jira.jboss.org/jira/browse/JGRP-986
 */
@Override public void unblock(){
}",0.5640107430617726
151962,"/** 
 * Computes expiration based on last tick + timeout
 * @return true if lasttick+timeout < current-time
 */
public boolean hasExpired(){
  long now=System.currentTimeMillis();
  Date lastTick=getLastTick();
  long timeout=getTimeout();
  if (lastTick == null || timeout == 0)   return false;
  long exp=lastTick.getTime() + timeout;
  return now > exp;
}","/** 
 * Computes expiration based on last tick + timeout
 * @return true if lasttick+timeout &lt; current-time
 */
public boolean hasExpired(){
  long now=System.currentTimeMillis();
  Date lastTick=getLastTick();
  long timeout=getTimeout();
  if (lastTick == null || timeout == 0)   return false;
  long exp=lastTick.getTime() + timeout;
  return now > exp;
}",0.9930458970792768
151963,"/** 
 * factory method used to create a RevisionEntry associated with this user.
 * @param summary information
 * @param detail detailed information
 * @param author change author
 */
public StatusRevision logRevision(String info,User author){
  StatusRevision re=new StatusRevision();
  re.setDate(new Date());
  re.setInfo(info);
  re.setStatus((Status)this);
  re.setAuthor(author);
  getRevisions().add(re);
  return re;
}","/** 
 * factory method used to create a RevisionEntry associated with this user.
 * @param info information<!-- @param detail detailed information -->
 * @param author change author
 */
public StatusRevision logRevision(String info,User author){
  StatusRevision re=new StatusRevision();
  re.setDate(new Date());
  re.setInfo(info);
  re.setStatus((Status)this);
  re.setAuthor(author);
  getRevisions().add(re);
  return re;
}",0.9461358313817332
151964,"/** 
 * @param key status name
 * @param state Status.OK, Status.WARN, Status.ERROR or user defined
 * @param info optional information
 */
public void touch(String key,String state) throws HibernateException, SQLException {
  touch(key,state,null);
}","/** 
 * @param key status name
 * @param state Status.OK, Status.WARN, Status.ERROR or user defined<!-- @param info optional information -->
 */
public void touch(String key,String state) throws HibernateException, SQLException {
  touch(key,state,null);
}",0.9783037475345168
151965,"/** 
 * check if unexpired status entries became expired, and create  appropriate syslog event.
 * @param id status id
 */
public void check() throws HibernateException, SQLException {
  Iterator iter=findByExpired(false).iterator();
  while (iter.hasNext()) {
    check((Status)iter.next());
  }
}","/** 
 * check if unexpired status entries became expired, and create  appropriate syslog event.
 */
public void check() throws HibernateException, SQLException {
  Iterator iter=findByExpired(false).iterator();
  while (iter.hasNext()) {
    check((Status)iter.next());
  }
}",0.9598603839441536
151966,"/** 
 * Hook method to let a subclass change the way the values are compared
 * @param i index of the property being compared in de ordergiven by the <code>properties<code> attribute.
 */
protected boolean equals(int i,Object v1,Object v2){
  if (v1 instanceof Comparable && v2 != null)   return ((Comparable)v1).compareTo(v2) == 0;
 else   if (v1 != null)   return v1.equals(v2);
 else   return v2 == null;
}","/** 
 * Hook method to let a subclass change the way the values are compared
 * @param i index of the property being compared in de ordergiven by the <code>properties</code> attribute.
 */
protected boolean equals(int i,Object v1,Object v2){
  if (v1 instanceof Comparable && v2 != null)   return ((Comparable)v1).compareTo(v2) == 0;
 else   if (v1 != null)   return v1.equals(v2);
 else   return v2 == null;
}",0.9987789987789988
151967,"/** 
 * Creates a JDOM Element as defined in <a href=""http://jpos.org/minigl.dtd"">minigl.dtd</a>
 */
public Element toXML(boolean deep){
  Element elem=new Element(""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",Long.toString(getId()));
  Util.setDateTimeAttribute(elem,""String_Node_Str"",getTimestamp());
  Util.setDateAttribute(elem,""String_Node_Str"",getPostDate());
  if (getDetail() != null) {
    Element detail=new Element(""String_Node_Str"").setText(getDetail());
    elem.addContent(detail);
  }
  if (getTags() != null) {
    Element tags=new Element(""String_Node_Str"").setText(getDetail());
    elem.addContent(tags);
  }
  elem.setAttribute(""String_Node_Str"",getJournal().getName());
  Iterator iter=getEntries().iterator();
  while (iter.hasNext()) {
    GLEntry entry=(GLEntry)iter.next();
    elem.addContent(entry.toXML(deep));
  }
  return elem;
}","/** 
 * Creates a JDOM Element as defined in <a href=""http://jpos.org/minigl.dtd"">minigl.dtd</a>
 */
public Element toXML(boolean deep){
  Element elem=new Element(""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",Long.toString(getId()));
  Util.setDateTimeAttribute(elem,""String_Node_Str"",getTimestamp());
  Util.setDateAttribute(elem,""String_Node_Str"",getPostDate());
  if (getDetail() != null) {
    Element detail=new Element(""String_Node_Str"").setText(getDetail());
    elem.addContent(detail);
  }
  if (getTags() != null) {
    Element tags=new Element(""String_Node_Str"").setText(getTags());
    elem.addContent(tags);
  }
  elem.setAttribute(""String_Node_Str"",getJournal().getName());
  Iterator iter=getEntries().iterator();
  while (iter.hasNext()) {
    GLEntry entry=(GLEntry)iter.next();
    elem.addContent(entry.toXML(deep));
  }
  return elem;
}",0.9942528735632185
151968,"public String toString(){
  return new ToStringBuilder(this).append(""String_Node_Str"",getId()).append(""String_Node_Str"",getId()).toString();
}","public String toString(){
  return new ToStringBuilder(this).append(""String_Node_Str"",getId()).append(""String_Node_Str"",getDetail()).toString();
}",0.9722222222222222
151969,"@Override public void start(final Environment env) throws IOException {
  TtyFilterOutputStream out=new TtyFilterOutputStream(this.out);
  TtyFilterOutputStream err=new TtyFilterOutputStream(this.err);
  final Groovysh shell=new Groovysh(createBinding(bindings,out,err),new IO(in,out,err));
  loadDefaultScripts(shell);
  String threadName=""String_Node_Str"";
  wrapper=new Thread(new Runnable(){
    @Override public void run(){
      try {
        SshTerminal.registerEnvironment(env);
        shell.run();
        callback.onExit(0);
      }
 catch (      RuntimeException e) {
        callback.onExit(-1,e.getMessage());
      }
catch (      Error e) {
        callback.onExit(-1,e.getMessage());
      }
    }
  }
,threadName);
  wrapper.start();
}","@Override public void start(final Environment env) throws IOException {
  TtyFilterOutputStream out=new TtyFilterOutputStream(this.out);
  TtyFilterOutputStream err=new TtyFilterOutputStream(this.err);
  final Groovysh shell=new Groovysh(createBinding(bindings,out,err),new IO(in,out,err));
  try {
    loadDefaultScripts(shell);
  }
 catch (  Exception e) {
    createPrintStream(err).println(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
  }
  String threadName=""String_Node_Str"";
  wrapper=new Thread(new Runnable(){
    @Override public void run(){
      try {
        SshTerminal.registerEnvironment(env);
        shell.run();
        callback.onExit(0);
      }
 catch (      RuntimeException e) {
        callback.onExit(-1,e.getMessage());
      }
catch (      Error e) {
        callback.onExit(-1,e.getMessage());
      }
    }
  }
,threadName);
  wrapper.start();
}",0.9043896572459412
151970,"private Binding createBinding(Map<String,Object> objects,OutputStream out,OutputStream err) throws UnsupportedEncodingException {
  Binding binding=new Binding();
  if (objects != null)   for (  Map.Entry<String,Object> row : objects.entrySet())   binding.setVariable(row.getKey(),row.getValue());
  binding.setVariable(""String_Node_Str"",new PrintStream(out,true,""String_Node_Str""));
  binding.setVariable(""String_Node_Str"",new PrintStream(err,true,""String_Node_Str""));
  binding.setVariable(""String_Node_Str"",new Closure<List<AbstractSession>>(this){
    @Override public List<AbstractSession> call(){
      return sshd.getActiveSessions();
    }
  }
);
  return binding;
}","private Binding createBinding(Map<String,Object> objects,OutputStream out,OutputStream err) throws UnsupportedEncodingException {
  Binding binding=new Binding();
  if (objects != null)   for (  Map.Entry<String,Object> row : objects.entrySet())   binding.setVariable(row.getKey(),row.getValue());
  binding.setVariable(""String_Node_Str"",createPrintStream(out));
  binding.setVariable(""String_Node_Str"",createPrintStream(err));
  binding.setVariable(""String_Node_Str"",new Closure<List<AbstractSession>>(this){
    @Override public List<AbstractSession> call(){
      return sshd.getActiveSessions();
    }
  }
);
  return binding;
}",0.9081163859111792
151971,"/** 
 * Set the comma delimited list of default scripts
 * @param scriptNames script names
 */
public void setDefaultScriptNames(String scriptNames){
  service.setDefaultScripts(asList(scriptNames.split(""String_Node_Str"")));
}","/** 
 * Set the comma delimited list of default scripts
 * @param scriptNames script names
 */
public void setDefaultScriptNames(String scriptNames){
  if (!scriptNames.trim().isEmpty())   service.setDefaultScripts(asList(scriptNames.split(""String_Node_Str"")));
}",0.9243353783231084
151972,"@Override public void start(final Environment env) throws IOException {
  TtyFilterOutputStream out=new TtyFilterOutputStream(this.out);
  TtyFilterOutputStream err=new TtyFilterOutputStream(this.err);
  final Groovysh shell=new Groovysh(createBinding(bindings,out,err),new IO(in,out,err));
  try {
    loadDefaultScripts(shell);
  }
 catch (  Exception e) {
    createPrintStream(err).println(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
  }
  String threadName=""String_Node_Str"";
  wrapper=new Thread(new Runnable(){
    @Override public void run(){
      try {
        SshTerminal.registerEnvironment(env);
        shell.run();
        callback.onExit(0);
      }
 catch (      RuntimeException e) {
        callback.onExit(-1,e.getMessage());
      }
catch (      Error e) {
        callback.onExit(-1,e.getMessage());
      }
    }
  }
,threadName);
  wrapper.start();
}","@Override public void start(final Environment env) throws IOException {
  TtyFilterOutputStream out=new TtyFilterOutputStream(this.out);
  TtyFilterOutputStream err=new TtyFilterOutputStream(this.err);
  IO io=new IO(in,out,err);
  io.setVerbosity(IO.Verbosity.DEBUG);
  final Groovysh shell=new Groovysh(createBinding(bindings,out,err),io);
  shell.setErrorHook(new Closure(this){
    @Override public Object call(    Object... args){
      if (args[0] instanceof InterruptedIOException || args[0] instanceof SshException) {
        shell.getRunner().setRunning(false);
      }
      return shell.getDefaultErrorHook().call(args);
    }
  }
);
  try {
    loadDefaultScripts(shell);
  }
 catch (  Exception e) {
    createPrintStream(err).println(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
  }
  session.setAttribute(SHELL_KEY,shell);
  String threadName=""String_Node_Str"" + session.getIoSession().getRemoteAddress().toString();
  wrapper=new Thread(new Runnable(){
    @Override public void run(){
      try {
        SshTerminal.registerEnvironment(env);
        shell.run();
        callback.onExit(0);
      }
 catch (      RuntimeException e) {
        callback.onExit(-1,e.getMessage());
      }
catch (      Error e) {
        callback.onExit(-1,e.getMessage());
      }
    }
  }
,threadName);
  wrapper.start();
}",0.5589788732394366
151973,"/** 
 * Starts Groovysh
 * @throws IOException thrown if socket cannot be opened
 */
public synchronized void start() throws IOException {
  sshd=SshServer.setUpDefaultServer();
  sshd.setPort(port);
  sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(""String_Node_Str""));
  NamedFactory<UserAuth> a=new UserAuthNone.Factory();
  sshd.setUserAuthFactories(asList(a));
  sshd.setShellFactory(new GroovyShellFactory());
  sshd.start();
}","/** 
 * Starts Groovysh
 * @throws IOException thrown if socket cannot be opened
 */
public synchronized void start() throws IOException {
  sshd=SshServer.setUpDefaultServer();
  sshd.setPort(port);
  Map<String,String> properties=new HashMap<String,String>();
  properties.put(ServerFactoryManager.IDLE_TIMEOUT,""String_Node_Str"");
  sshd.setProperties(properties);
  SessionFactory sessionFactory=new SessionFactory();
  sessionFactory.addListener(new SessionListener(){
    @Override public void sessionCreated(    Session session){
    }
    @Override public void sessionEvent(    Session sesssion,    Event event){
    }
    @Override public void sessionClosed(    Session session){
      Groovysh shell=session.getAttribute(SHELL_KEY);
      if (shell != null)       shell.getRunner().setRunning(false);
    }
  }
);
  sshd.setSessionFactory(sessionFactory);
  sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(""String_Node_Str""));
  NamedFactory<UserAuth> a=new UserAuthNone.Factory();
  sshd.setUserAuthFactories(asList(a));
  sshd.setShellFactory(new GroovyShellFactory());
  sshd.start();
}",0.5022537025112686
151974,"@Override public Void call(){
  try {
    for (    MessageAndMetadata<Message> mam : stream) {
      BagheeraMessage bmsg=BagheeraMessage.parseFrom(ByteString.copyFrom(mam.message().payload()));
      KeyValueSink sink=sinkFactory.getSink(bmsg.getNamespace());
      if (sink == null) {
        LOG.error(""String_Node_Str"" + bmsg.getNamespace());
        break;
      }
      if (bmsg.getOperation() == Operation.CREATE_UPDATE && bmsg.hasId() && bmsg.hasPayload()) {
        if (validationPipeline == null || validationPipeline.isValid(bmsg.getPayload().toByteArray())) {
          if (bmsg.hasTimestamp()) {
            sink.store(bmsg.getId(),bmsg.getPayload().toByteArray(),bmsg.getTimestamp());
          }
 else {
            sink.store(bmsg.getId(),bmsg.getPayload().toByteArray());
          }
        }
 else {
          LOG.warn(""String_Node_Str"" + bmsg.getNamespace());
        }
      }
 else       if (bmsg.getOperation() == Operation.DELETE && bmsg.hasId()) {
        sink.delete(bmsg.getId());
      }
      consumed.mark();
    }
  }
 catch (  InvalidProtocolBufferException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    latch.countDown();
  }
  return null;
}","@Override public Void call(){
  try {
    for (    MessageAndMetadata<Message> mam : stream) {
      BagheeraMessage bmsg=BagheeraMessage.parseFrom(ByteString.copyFrom(mam.message().payload()));
      KeyValueSink sink=sinkFactory.getSink(bmsg.getNamespace());
      if (sink == null) {
        LOG.error(""String_Node_Str"" + bmsg.getNamespace());
        break;
      }
      if (bmsg.getOperation() == Operation.CREATE_UPDATE && bmsg.hasId() && bmsg.hasPayload()) {
        if (validationPipeline == null || validationPipeline.isValid(bmsg.getPayload().toByteArray())) {
          if (bmsg.hasTimestamp()) {
            sink.store(bmsg.getId(),bmsg.getPayload().toByteArray(),bmsg.getTimestamp());
          }
 else {
            sink.store(bmsg.getId(),bmsg.getPayload().toByteArray());
          }
        }
 else {
          invalidMessageMeter.mark();
          LOG.warn(""String_Node_Str"" + bmsg.getNamespace());
        }
      }
 else       if (bmsg.getOperation() == Operation.DELETE && bmsg.hasId()) {
        sink.delete(bmsg.getId());
      }
      consumed.mark();
    }
  }
 catch (  InvalidProtocolBufferException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    latch.countDown();
  }
  return null;
}",0.9859985261606484
151975,"public KafkaConsumer(String topic,Properties props,int numThreads){
  LOG.info(""String_Node_Str"" + numThreads);
  executor=Executors.newFixedThreadPool(numThreads);
  workers=new ArrayList<Future<Void>>(numThreads);
  ConsumerConfig consumerConfig=new ConsumerConfig(props);
  consumerConnector=kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);
  streams=consumerConnector.createMessageStreamsByFilter(new Whitelist(topic),numThreads);
  consumed=Metrics.newMeter(new MetricName(""String_Node_Str"",""String_Node_Str"",topic + ""String_Node_Str""),""String_Node_Str"",TimeUnit.SECONDS);
}","public KafkaConsumer(String topic,Properties props,int numThreads){
  LOG.info(""String_Node_Str"" + numThreads);
  executor=Executors.newFixedThreadPool(numThreads);
  workers=new ArrayList<Future<Void>>(numThreads);
  ConsumerConfig consumerConfig=new ConsumerConfig(props);
  consumerConnector=kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);
  streams=consumerConnector.createMessageStreamsByFilter(new Whitelist(topic),numThreads);
  consumed=Metrics.newMeter(new MetricName(""String_Node_Str"",""String_Node_Str"",topic + ""String_Node_Str""),""String_Node_Str"",TimeUnit.SECONDS);
  invalidMessageMeter=Metrics.newMeter(new MetricName(""String_Node_Str"",""String_Node_Str"",topic + ""String_Node_Str""),""String_Node_Str"",TimeUnit.SECONDS);
}",0.886094674556213
151976,"public void poll(){
  final CountDownLatch latch=new CountDownLatch(streams.size());
  for (  final KafkaStream<Message> stream : streams) {
    workers.add(executor.submit(new Callable<Void>(){
      @Override public Void call(){
        try {
          for (          MessageAndMetadata<Message> mam : stream) {
            BagheeraMessage bmsg=BagheeraMessage.parseFrom(ByteString.copyFrom(mam.message().payload()));
            KeyValueSink sink=sinkFactory.getSink(bmsg.getNamespace());
            if (sink == null) {
              LOG.error(""String_Node_Str"" + bmsg.getNamespace());
              break;
            }
            if (bmsg.getOperation() == Operation.CREATE_UPDATE && bmsg.hasId() && bmsg.hasPayload()) {
              if (validationPipeline == null || validationPipeline.isValid(bmsg.getPayload().toByteArray())) {
                if (bmsg.hasTimestamp()) {
                  sink.store(bmsg.getId(),bmsg.getPayload().toByteArray(),bmsg.getTimestamp());
                }
 else {
                  sink.store(bmsg.getId(),bmsg.getPayload().toByteArray());
                }
              }
 else {
                LOG.warn(""String_Node_Str"" + bmsg.getNamespace());
              }
            }
 else             if (bmsg.getOperation() == Operation.DELETE && bmsg.hasId()) {
              sink.delete(bmsg.getId());
            }
            consumed.mark();
          }
        }
 catch (        InvalidProtocolBufferException e) {
          LOG.error(""String_Node_Str"",e);
        }
catch (        UnsupportedEncodingException e) {
          LOG.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          latch.countDown();
        }
        return null;
      }
    }
));
  }
  try {
    while (true) {
      latch.await(10,TimeUnit.SECONDS);
      if (latch.getCount() != streams.size()) {
        break;
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.info(""String_Node_Str"",e);
  }
  for (  Future<Void> worker : workers) {
    try {
      if (worker.isDone() && !worker.isCancelled()) {
        worker.get(1,TimeUnit.SECONDS);
      }
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    TimeoutException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    CancellationException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","public void poll(){
  final CountDownLatch latch=new CountDownLatch(streams.size());
  for (  final KafkaStream<Message> stream : streams) {
    workers.add(executor.submit(new Callable<Void>(){
      @Override public Void call(){
        try {
          for (          MessageAndMetadata<Message> mam : stream) {
            BagheeraMessage bmsg=BagheeraMessage.parseFrom(ByteString.copyFrom(mam.message().payload()));
            KeyValueSink sink=sinkFactory.getSink(bmsg.getNamespace());
            if (sink == null) {
              LOG.error(""String_Node_Str"" + bmsg.getNamespace());
              break;
            }
            if (bmsg.getOperation() == Operation.CREATE_UPDATE && bmsg.hasId() && bmsg.hasPayload()) {
              if (validationPipeline == null || validationPipeline.isValid(bmsg.getPayload().toByteArray())) {
                if (bmsg.hasTimestamp()) {
                  sink.store(bmsg.getId(),bmsg.getPayload().toByteArray(),bmsg.getTimestamp());
                }
 else {
                  sink.store(bmsg.getId(),bmsg.getPayload().toByteArray());
                }
              }
 else {
                invalidMessageMeter.mark();
                LOG.warn(""String_Node_Str"" + bmsg.getNamespace());
              }
            }
 else             if (bmsg.getOperation() == Operation.DELETE && bmsg.hasId()) {
              sink.delete(bmsg.getId());
            }
            consumed.mark();
          }
        }
 catch (        InvalidProtocolBufferException e) {
          LOG.error(""String_Node_Str"",e);
        }
catch (        UnsupportedEncodingException e) {
          LOG.error(""String_Node_Str"",e);
        }
catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          latch.countDown();
        }
        return null;
      }
    }
));
  }
  try {
    while (true) {
      latch.await(10,TimeUnit.SECONDS);
      if (latch.getCount() != streams.size()) {
        break;
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.info(""String_Node_Str"",e);
  }
  for (  Future<Void> worker : workers) {
    try {
      if (worker.isDone() && !worker.isCancelled()) {
        worker.get(1,TimeUnit.SECONDS);
      }
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    TimeoutException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    CancellationException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9912629070691024
151977,"public static void main(String[] args){
  OptionFactory optFactory=OptionFactory.getInstance();
  Options options=KafkaConsumer.getOptions();
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").required());
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str""));
  CommandLineParser parser=new GnuParser();
  ShutdownHook sh=ShutdownHook.getInstance();
  try {
    CommandLine cmd=parser.parse(options,args);
    final KafkaConsumer consumer=KafkaConsumer.fromOptions(cmd);
    sh.addFirst(consumer);
    SinkConfiguration sinkConfig=new SinkConfiguration();
    if (cmd.hasOption(""String_Node_Str"")) {
      sinkConfig.setInt(""String_Node_Str"",Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")));
    }
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setBoolean(""String_Node_Str"",Boolean.parseBoolean(cmd.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
    KeyValueSinkFactory sinkFactory=KeyValueSinkFactory.getInstance(HBaseSink.class,sinkConfig);
    sh.addLast(sinkFactory);
    consumer.setSinkFactory(sinkFactory);
    MetricsManager.getInstance();
    consumer.poll();
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",e);
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(KafkaHBaseConsumer.class.getName(),options);
  }
}","public static void main(String[] args){
  OptionFactory optFactory=OptionFactory.getInstance();
  Options options=KafkaConsumer.getOptions();
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").required());
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str""));
  CommandLineParser parser=new GnuParser();
  ShutdownHook sh=ShutdownHook.getInstance();
  try {
    CommandLine cmd=parser.parse(options,args);
    final KafkaConsumer consumer=KafkaConsumer.fromOptions(cmd);
    sh.addFirst(consumer);
    SinkConfiguration sinkConfig=new SinkConfiguration();
    if (cmd.hasOption(""String_Node_Str"")) {
      sinkConfig.setInt(""String_Node_Str"",Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")));
    }
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setBoolean(""String_Node_Str"",cmd.hasOption(""String_Node_Str""));
    KeyValueSinkFactory sinkFactory=KeyValueSinkFactory.getInstance(HBaseSink.class,sinkConfig);
    sh.addLast(sinkFactory);
    consumer.setSinkFactory(sinkFactory);
    MetricsManager.getInstance();
    consumer.poll();
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",e);
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(KafkaHBaseConsumer.class.getName(),options);
  }
}",0.9736477115117892
151978,"public static void main(String[] args){
  OptionFactory optFactory=OptionFactory.getInstance();
  Options options=KafkaConsumer.getOptions();
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str""));
  CommandLineParser parser=new GnuParser();
  ShutdownHook sh=ShutdownHook.getInstance();
  try {
    CommandLine cmd=parser.parse(options,args);
    final KafkaConsumer consumer=KafkaConsumer.fromOptions(cmd);
    sh.addFirst(consumer);
    SinkConfiguration sinkConfig=new SinkConfiguration();
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setLong(""String_Node_Str"",Long.parseLong(cmd.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
    sinkConfig.setBoolean(""String_Node_Str"",Boolean.parseBoolean(cmd.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
    KeyValueSinkFactory sinkFactory=KeyValueSinkFactory.getInstance(SequenceFileSink.class,sinkConfig);
    sh.addLast(sinkFactory);
    consumer.setSinkFactory(sinkFactory);
    MetricsManager.getInstance();
    consumer.poll();
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",e);
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(KafkaSequenceFileConsumer.class.getName(),options);
  }
catch (  NumberFormatException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","public static void main(String[] args){
  OptionFactory optFactory=OptionFactory.getInstance();
  Options options=KafkaConsumer.getOptions();
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  options.addOption(optFactory.create(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str""));
  CommandLineParser parser=new GnuParser();
  ShutdownHook sh=ShutdownHook.getInstance();
  try {
    CommandLine cmd=parser.parse(options,args);
    final KafkaConsumer consumer=KafkaConsumer.fromOptions(cmd);
    sh.addFirst(consumer);
    SinkConfiguration sinkConfig=new SinkConfiguration();
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setString(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    sinkConfig.setLong(""String_Node_Str"",Long.parseLong(cmd.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
    sinkConfig.setBoolean(""String_Node_Str"",cmd.hasOption(""String_Node_Str""));
    KeyValueSinkFactory sinkFactory=KeyValueSinkFactory.getInstance(SequenceFileSink.class,sinkConfig);
    sh.addLast(sinkFactory);
    consumer.setSinkFactory(sinkFactory);
    MetricsManager.getInstance();
    consumer.poll();
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",e);
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(KafkaSequenceFileConsumer.class.getName(),options);
  }
catch (  NumberFormatException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9730649277005954
151979,"/** 
 * Takes a given id and gives you an hbase shell compatible string that you can use for get command.
 * @param id
 * @param d
 * @return
 * @throws IOException
 */
public static String hbaseShellId(String id,Date d) throws IOException {
  byte[] idBytes=IdUtil.nonRandByteBucketizeId(id,d);
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(String.format(""String_Node_Str"",idBytes[0]));
  sb.append((new String(idBytes)).substring(1));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public static String hbaseShellId(byte[] idBytes) throws IOException {
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(String.format(""String_Node_Str"",idBytes[0]));
  sb.append((new String(idBytes)).substring(1));
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.622991347342398
151980,"public void run() throws Exception {
  this.configureHealthChecks();
  this.configureWebServer();
  this.configureReporters();
}","public void run() throws Exception {
  this.configureHealthChecks();
  this.configureWebServer();
  this.configureReporters();
  this.configureHttpMetrics();
}",0.89198606271777
151981,"private void updateFailed(HttpMetrics metric,Integer size){
  HttpMetrics global_metric=getHttpMetrics(""String_Node_Str"");
  metric.failedReqsCount.inc();
  metric.failedReqsSize.inc(size);
  metric.totalReqsCount.inc();
  metric.totalReqsSize.inc(size);
  global_metric.failedReqsCount.inc();
  global_metric.failedReqsSize.inc(size);
  global_metric.totalReqsCount.inc();
  global_metric.totalReqsSize.inc(size);
}","private void updateFailed(String namespace,int size){
  MetricsManager.getInstance().getHttpMetricForNamespace(namespace).updateFailed(size);
  MetricsManager.getInstance().getGlobalHttpMetric().updateFailed(size);
}",0.2341772151898734
151982,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  HttpMetrics metric=this.getHttpMetrics(""String_Node_Str"");
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    PathDecoder pd=new PathDecoder(request.getUri());
    String endpoint=pd.getPathElement(ENDPOINT_PATH_IDX);
    if (endpoint != null && ENDPOINT_SUBMIT.equals(endpoint)) {
      String namespace=pd.getPathElement(NAMESPACE_PATH_IDX);
      String id=pd.getPathElement(ID_PATH_IDX);
      if (id == null) {
        id=UUID.randomUUID().toString();
      }
      IMap<String,String> m=Hazelcast.getMap(namespace);
      if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
        handlePost(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.GET) {
        handleGet(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.DELETE) {
        handleDelete(e,request,namespace,id,m);
      }
 else {
        writeResponse(NOT_FOUND,e,null);
      }
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=e.getChannel().getRemoteAddress().toString();
      LOG.warn(String.format(""String_Node_Str"",remoteIpAddress,userAgent));
      writeResponse(NOT_ACCEPTABLE,e,null);
    }
  }
 else {
    writeResponse(INTERNAL_SERVER_ERROR,e,null);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    PathDecoder pd=new PathDecoder(request.getUri());
    String endpoint=pd.getPathElement(ENDPOINT_PATH_IDX);
    if (endpoint != null && ENDPOINT_SUBMIT.equals(endpoint)) {
      String namespace=pd.getPathElement(NAMESPACE_PATH_IDX);
      String id=pd.getPathElement(ID_PATH_IDX);
      if (id == null) {
        id=UUID.randomUUID().toString();
      }
      IMap<String,String> m=Hazelcast.getMap(namespace);
      if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
        handlePost(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.GET) {
        handleGet(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.DELETE) {
        handleDelete(e,request,namespace,id,m);
      }
 else {
        writeResponse(NOT_FOUND,e,null);
      }
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=e.getChannel().getRemoteAddress().toString();
      LOG.warn(String.format(""String_Node_Str"",remoteIpAddress,userAgent));
      writeResponse(NOT_ACCEPTABLE,e,null);
    }
  }
 else {
    writeResponse(INTERNAL_SERVER_ERROR,e,null);
  }
}",0.978753047718565
151983,"private void handlePost(MessageEvent e,HttpRequest request,String namespace,String id,IMap<String,String> m){
  HttpResponseStatus status=NOT_ACCEPTABLE;
  ChannelBuffer content=request.getContent();
  HttpMetrics ns_metric=getHttpMetrics(namespace);
  if (content.readable() && content.readableBytes() > 0) {
    if (NS_METRICS.equals(namespace)) {
      status=metricsProcessor.process(m,id,content.toString(CharsetUtil.UTF_8),e.getChannel().getRemoteAddress().toString(),request.getHeader(""String_Node_Str""));
    }
 else {
      m.put(id,content.toString(CharsetUtil.UTF_8));
      status=CREATED;
    }
  }
  if (status != CREATED) {
    updateFailed(ns_metric,content.readableBytes());
  }
 else {
    updateSuccessful(ns_metric,content.readableBytes());
  }
  writeResponse(status,e,URI.create(id).toString());
}","private void handlePost(MessageEvent e,HttpRequest request,String namespace,String id,IMap<String,String> m){
  HttpResponseStatus status=NOT_ACCEPTABLE;
  ChannelBuffer content=request.getContent();
  if (content.readable() && content.readableBytes() > 0) {
    if (NS_METRICS.equals(namespace)) {
      status=metricsProcessor.process(m,id,content.toString(CharsetUtil.UTF_8),e.getChannel().getRemoteAddress().toString(),request.getHeader(""String_Node_Str""));
    }
 else {
      m.put(id,content.toString(CharsetUtil.UTF_8));
      status=CREATED;
    }
  }
  if (status != CREATED) {
    updateFailed(namespace,content.readableBytes());
  }
 else {
    updateSuccesssful(namespace,content.readableBytes());
  }
  writeResponse(status,e,URI.create(id).toString());
}",0.947103274559194
151984,"public void poll() throws InterruptedException {
  while (true) {
    if (!nsMap.isEmpty()) {
      try {
        List<Put> puts=new ArrayList<Put>();
        for (        String k : nsMap.keySet()) {
          String v=nsMap.remove(k);
          if (v != null) {
            byte[] rowId=prefixDate ? IdUtil.bucketizeId(k) : Bytes.toBytes(k);
            Put p=new Put(rowId);
            p.add(family,qualifier,Bytes.toBytes(v));
            puts.add(p);
            if (puts.size() >= batchSize)             break;
          }
        }
        if (puts.size() > 0) {
          workerPool.submit(new HBaseWorkerThread((HTable)hbasePool.getTable(tableName),puts));
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
        throw new RuntimeException(e);
      }
    }
 else {
      Thread.sleep(sleepTime);
    }
  }
}","public void poll() throws InterruptedException {
  while (true) {
    if (!nsMap.isEmpty()) {
      try {
        List<Put> puts=new ArrayList<Put>();
        for (        String k : nsMap.keySet()) {
          String v=nsMap.remove(k);
          if (v != null) {
            try {
              byte[] rowId=prefixDate ? IdUtil.bucketizeId(k) : Bytes.toBytes(k);
              Put p=new Put(rowId);
              p.add(family,qualifier,Bytes.toBytes(v));
              puts.add(p);
            }
 catch (            NumberFormatException e) {
              LOG.error(""String_Node_Str"" + k,e);
            }
            if (puts.size() >= batchSize)             break;
          }
        }
        if (puts.size() > 0) {
          workerPool.submit(new HBaseWorkerThread((HTable)hbasePool.getTable(tableName),puts));
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
        throw new RuntimeException(e);
      }
    }
 else {
      Thread.sleep(sleepTime);
    }
  }
}",0.906367041198502
151985,"@Override public void storeAll(Map<String,String> pairs){
  HTable table=null;
  try {
    List<Put> puts=new ArrayList<Put>(pairs.size());
    for (    Map.Entry<String,String> pair : pairs.entrySet()) {
      byte[] rowId=prefixDate ? IdUtil.bucketizeId(pair.getKey()) : Bytes.toBytes(pair.getKey());
      Put p=new Put(rowId);
      if (outputFormatType == StoreFormatType.SMILE) {
        p.add(family,qualifier,jsonSmileConverter.convertToSmile(pair.getValue()));
      }
 else {
        p.add(family,qualifier,Bytes.toBytes(pair.getValue()));
      }
      puts.add(p);
    }
    table=(HTable)pool.getTable(tableName);
    table.setAutoFlush(false);
    table.put(puts);
    table.flushCommits();
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (table != null) {
      pool.putTable(table);
    }
  }
}","@Override public void storeAll(Map<String,String> pairs){
  HTable table=null;
  try {
    List<Put> puts=new ArrayList<Put>(pairs.size());
    for (    Map.Entry<String,String> pair : pairs.entrySet()) {
      try {
        byte[] rowId=prefixDate ? IdUtil.bucketizeId(pair.getKey()) : Bytes.toBytes(pair.getKey());
        Put p=new Put(rowId);
        if (outputFormatType == StoreFormatType.SMILE) {
          p.add(family,qualifier,jsonSmileConverter.convertToSmile(pair.getValue()));
        }
 else {
          p.add(family,qualifier,Bytes.toBytes(pair.getValue()));
        }
        puts.add(p);
      }
 catch (      NumberFormatException nfe) {
        LOG.error(""String_Node_Str"" + pair.getKey(),nfe);
      }
    }
    table=(HTable)pool.getTable(tableName);
    table.setAutoFlush(false);
    table.put(puts);
    table.flushCommits();
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (table != null) {
      pool.putTable(table);
    }
  }
}",0.9085002707092582
151986,"@Override public void store(String key,String value){
  HTableInterface table=null;
  try {
    table=pool.getTable(tableName);
    byte[] rowId=prefixDate ? IdUtil.bucketizeId(key) : Bytes.toBytes(key);
    Put p=new Put(rowId);
    if (outputFormatType == StoreFormatType.SMILE) {
      p.add(family,qualifier,jsonSmileConverter.convertToSmile(value));
    }
 else {
      p.add(family,qualifier,Bytes.toBytes(value));
    }
    table.put(p);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (table != null) {
      pool.putTable(table);
    }
  }
}","@Override public void store(String key,String value){
  HTableInterface table=null;
  try {
    table=pool.getTable(tableName);
    try {
      byte[] rowId=prefixDate ? IdUtil.bucketizeId(key) : Bytes.toBytes(key);
      Put p=new Put(rowId);
      if (outputFormatType == StoreFormatType.SMILE) {
        p.add(family,qualifier,jsonSmileConverter.convertToSmile(value));
      }
 else {
        p.add(family,qualifier,Bytes.toBytes(value));
      }
      table.put(p);
    }
 catch (    NumberFormatException nfe) {
      LOG.error(""String_Node_Str"" + key,nfe);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    if (table != null) {
      pool.putTable(table);
    }
  }
}",0.8752869166029075
151987,"public static void main(String[] args){
  int port=Integer.parseInt(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Hazelcast.getDefaultInstance();
  Config config=Hazelcast.getConfig();
  for (  Map.Entry<String,MapConfig> entry : config.getMapConfigs().entrySet()) {
    String mapName=entry.getKey();
    if (!mapName.contains(""String_Node_Str"")) {
      Hazelcast.getMap(entry.getKey());
    }
  }
  NioServerSocketChannelFactory channelFactory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());
  ServerBootstrap sb=new ServerBootstrap(channelFactory);
  HttpServerPipelineFactory pipeFactory;
  try {
    pipeFactory=new HttpServerPipelineFactory(config.getMapConfigs().keySet());
    sb.setPipelineFactory(pipeFactory);
    sb.bind(new InetSocketAddress(port));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","public static void main(String[] args){
  int port=Integer.parseInt(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Hazelcast.getDefaultInstance();
  Config config=Hazelcast.getConfig();
  for (  Map.Entry<String,MapConfig> entry : config.getMapConfigs().entrySet()) {
    String mapName=entry.getKey();
    if (!mapName.contains(""String_Node_Str"")) {
      Hazelcast.getMap(entry.getKey());
    }
  }
  NioServerSocketChannelFactory channelFactory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newFixedThreadPool(DEFAULT_IO_THREADS));
  ServerBootstrap sb=new ServerBootstrap(channelFactory);
  HttpServerPipelineFactory pipeFactory;
  try {
    pipeFactory=new HttpServerPipelineFactory(config.getMapConfigs().keySet());
    sb.setPipelineFactory(pipeFactory);
    sb.setOption(""String_Node_Str"",true);
    sb.setOption(""String_Node_Str"",false);
    sb.bind(new InetSocketAddress(port));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9422875131164744
151988,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    PathDecoder pd=new PathDecoder(request.getUri());
    String endpoint=pd.getPathElement(ENDPOINT_PATH_IDX);
    if (endpoint != null && ENDPOINT_SUBMIT.equals(endpoint)) {
      String namespace=pd.getPathElement(NAMESPACE_PATH_IDX);
      String id=pd.getPathElement(ID_PATH_IDX);
      if (id == null) {
        id=UUID.randomUUID().toString();
      }
      IMap<String,String> m=Hazelcast.getMap(namespace);
      if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
        handlePost(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.GET) {
        handleGet(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.DELETE) {
        handleDelete(e,request,namespace,id,m);
      }
 else {
        writeResponse(NOT_FOUND,e,null);
      }
    }
 else     if (endpoint != null && ENDPOINT_STATS.equals(""String_Node_Str"")) {
      writeResponse(OK,e,null);
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=e.getChannel().getRemoteAddress().toString();
      LOG.warn(String.format(""String_Node_Str"",remoteIpAddress,userAgent));
      writeResponse(NOT_ACCEPTABLE,e,null);
    }
  }
 else {
    writeResponse(INTERNAL_SERVER_ERROR,e,null);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    PathDecoder pd=new PathDecoder(request.getUri());
    String endpoint=pd.getPathElement(ENDPOINT_PATH_IDX);
    if (endpoint != null && ENDPOINT_SUBMIT.equals(endpoint)) {
      String namespace=pd.getPathElement(NAMESPACE_PATH_IDX);
      String id=pd.getPathElement(ID_PATH_IDX);
      if (id == null) {
        id=UUID.randomUUID().toString();
      }
      IMap<String,String> m=Hazelcast.getMap(namespace);
      if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
        handlePost(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.GET) {
        handleGet(e,request,namespace,id,m);
      }
 else       if (request.getMethod() == HttpMethod.DELETE) {
        handleDelete(e,request,namespace,id,m);
      }
 else {
        writeResponse(NOT_FOUND,e,null);
      }
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=e.getChannel().getRemoteAddress().toString();
      LOG.warn(String.format(""String_Node_Str"",remoteIpAddress,userAgent));
      writeResponse(NOT_ACCEPTABLE,e,null);
    }
  }
 else {
    writeResponse(INTERNAL_SERVER_ERROR,e,null);
  }
}",0.9603554340396444
151989,"@Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {
  Throwable cause=e.getCause();
  HttpResponse response=null;
  if (cause instanceof InvalidJsonException) {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,NOT_ACCEPTABLE);
  }
 else   if (cause instanceof TooLongFrameException) {
    response=new DefaultHttpResponse(HTTP_1_1,REQUEST_ENTITY_TOO_LARGE);
  }
 else   if (cause instanceof InvalidPathException) {
    response=new DefaultHttpResponse(HTTP_1_1,NOT_FOUND);
  }
 else   if (cause instanceof SecurityException) {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,FORBIDDEN);
  }
 else {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,INTERNAL_SERVER_ERROR);
  }
  response.addHeader(CONTENT_TYPE,""String_Node_Str"");
  ChannelFuture future=e.getChannel().write(response);
  future.addListener(ChannelFutureListener.CLOSE);
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {
  Throwable cause=e.getCause();
  HttpResponse response=null;
  if (cause instanceof InvalidJsonException) {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,NOT_ACCEPTABLE);
  }
 else   if (cause instanceof TooLongFrameException) {
    response=new DefaultHttpResponse(HTTP_1_1,REQUEST_ENTITY_TOO_LARGE);
  }
 else   if (cause instanceof InvalidPathException) {
    response=new DefaultHttpResponse(HTTP_1_1,NOT_FOUND);
  }
 else   if (cause instanceof HttpSecurityException) {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,FORBIDDEN);
  }
 else {
    LOG.error(cause.getMessage());
    response=new DefaultHttpResponse(HTTP_1_1,INTERNAL_SERVER_ERROR);
  }
  response.addHeader(CONTENT_TYPE,""String_Node_Str"");
  ChannelFuture future=e.getChannel().write(response);
  future.addListener(ChannelFutureListener.CLOSE);
}",0.997969543147208
151990,"private void handlePost(MessageEvent e,HttpRequest request,String namespace,String id,IMap<String,String> m){
  HttpResponseStatus status=NOT_FOUND;
  ChannelBuffer content=request.getContent();
  if (content.readable()) {
    if (NS_METRICS.equals(namespace)) {
      status=metricsProcessor.process(m,id,content.toString(CharsetUtil.UTF_8),e.getChannel().getRemoteAddress().toString(),request.getHeader(""String_Node_Str""));
    }
 else {
      m.put(id,content.toString(CharsetUtil.UTF_8));
      status=CREATED;
    }
  }
  writeResponse(status,e,URI.create(id).toString());
}","private void handlePost(MessageEvent e,HttpRequest request,String namespace,String id,IMap<String,String> m){
  HttpResponseStatus status=NOT_ACCEPTABLE;
  ChannelBuffer content=request.getContent();
  if (content.readable() && content.readableBytes() > 0) {
    if (NS_METRICS.equals(namespace)) {
      status=metricsProcessor.process(m,id,content.toString(CharsetUtil.UTF_8),e.getChannel().getRemoteAddress().toString(),request.getHeader(""String_Node_Str""));
    }
 else {
      m.put(id,content.toString(CharsetUtil.UTF_8));
      status=CREATED;
    }
  }
  writeResponse(status,e,URI.create(id).toString());
}",0.9614740368509213
151991,"public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",new HttpRequestDecoder());
  pipeline.addLast(""String_Node_Str"",new HttpChunkAggregator(maxContentLength));
  pipeline.addLast(""String_Node_Str"",new ContentLengthFilter(maxContentLength));
  pipeline.addLast(""String_Node_Str"",new HttpContentDecompressor());
  pipeline.addLast(""String_Node_Str"",new HttpResponseEncoder());
  pipeline.addLast(""String_Node_Str"",new UriPatternFilter(validator));
  pipeline.addLast(""String_Node_Str"",new AccessFilter(validator,HazelcastMapHandler.NAMESPACE_PATH_IDX,props));
  pipeline.addLast(""String_Node_Str"",new JsonFilter(validator));
  pipeline.addLast(""String_Node_Str"",new HazelcastMapHandler(metricsProcessor));
  return pipeline;
}","public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",new HttpRequestDecoder());
  pipeline.addLast(""String_Node_Str"",new RootResponse());
  pipeline.addLast(""String_Node_Str"",new StatsHandler());
  pipeline.addLast(""String_Node_Str"",new HttpChunkAggregator(maxContentLength));
  pipeline.addLast(""String_Node_Str"",new ContentLengthFilter(maxContentLength));
  pipeline.addLast(""String_Node_Str"",new AccessFilter(validator,HazelcastMapHandler.NAMESPACE_PATH_IDX,props));
  pipeline.addLast(""String_Node_Str"",new HttpContentDecompressor());
  pipeline.addLast(""String_Node_Str"",new JsonFilter(validator));
  pipeline.addLast(""String_Node_Str"",new HttpResponseEncoder());
  pipeline.addLast(""String_Node_Str"",new HazelcastMapHandler(metricsProcessor));
  return pipeline;
}",0.7277079593058049
151992,"public AccessFilter(NamespaceValidator nsValidator,int nsPathIdx,WildcardProperties props){
  this.nsValidator=nsValidator;
  this.nsPathIdx=nsPathIdx;
  this.props=props;
}","public AccessFilter(Validator validator,int nsPathIdx,WildcardProperties props){
  this.validator=validator;
  this.nsPathIdx=nsPathIdx;
  this.props=props;
}",0.9365558912386708
151993,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)msg;
    PathDecoder rpd=new PathDecoder(request.getUri());
    String ns=rpd.getPathElement(nsPathIdx);
    if (ns == null || !nsValidator.isValidNamespace(ns)) {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
      throw new SecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
    }
    if (request.getMethod() == HttpMethod.POST) {
    }
 else     if (request.getMethod() == HttpMethod.GET) {
      boolean allowGetAccess=Boolean.parseBoolean(props.getWildcardProperty(ns + ALLOW_GET_ACCESS,""String_Node_Str""));
      if (!allowGetAccess) {
        String userAgent=request.getHeader(""String_Node_Str"");
        String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
        throw new SecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
      }
    }
 else     if (request.getMethod() == HttpMethod.DELETE) {
      boolean allowDelAccess=Boolean.parseBoolean(props.getWildcardProperty(ns + ALLOW_DELETE_ACCESS,""String_Node_Str""));
      if (!allowDelAccess) {
        String userAgent=request.getHeader(""String_Node_Str"");
        String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
        throw new SecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
      }
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
      throw new SecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
    }
    Channels.fireMessageReceived(ctx,request,e.getRemoteAddress());
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)msg;
    if (!validator.isValidUri(request.getUri())) {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
      throw new InvalidPathException(String.format(""String_Node_Str"",request.getUri(),remoteIpAddress,userAgent));
    }
    PathDecoder rpd=new PathDecoder(request.getUri());
    String ns=rpd.getPathElement(nsPathIdx);
    if (ns == null) {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
      throw new InvalidPathException(String.format(""String_Node_Str"",remoteIpAddress,userAgent));
    }
    if (request.getMethod() == HttpMethod.POST) {
    }
 else     if (request.getMethod() == HttpMethod.GET) {
      boolean allowGetAccess=Boolean.parseBoolean(props.getWildcardProperty(ns + ALLOW_GET_ACCESS,""String_Node_Str""));
      if (!allowGetAccess) {
        String userAgent=request.getHeader(""String_Node_Str"");
        String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
        throw new HttpSecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
      }
    }
 else     if (request.getMethod() == HttpMethod.DELETE) {
      boolean allowDelAccess=Boolean.parseBoolean(props.getWildcardProperty(ns + ALLOW_DELETE_ACCESS,""String_Node_Str""));
      if (!allowDelAccess) {
        String userAgent=request.getHeader(""String_Node_Str"");
        String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
        throw new HttpSecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
      }
    }
 else {
      String userAgent=request.getHeader(""String_Node_Str"");
      String remoteIpAddress=((InetSocketAddress)e.getChannel().getRemoteAddress()).getAddress().getHostAddress();
      throw new HttpSecurityException(String.format(""String_Node_Str"",ns,remoteIpAddress,userAgent));
    }
    Channels.fireMessageReceived(ctx,request,e.getRemoteAddress());
  }
 else {
    ctx.sendUpstream(e);
  }
}",0.907321389073214
151994,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    ChannelBuffer content=request.getContent();
    if (content.readable()) {
      if (!jsonValidator.isValidJson(content.toString(CharsetUtil.UTF_8))) {
        throw new InvalidJsonException(""String_Node_Str"");
      }
 else {
        Channels.fireMessageReceived(ctx,request,e.getRemoteAddress());
      }
    }
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)e.getMessage();
    ChannelBuffer content=request.getContent();
    if (content.readable()) {
      if (!jsonValidator.isValidJson(content.toString(CharsetUtil.UTF_8))) {
        throw new InvalidJsonException(""String_Node_Str"");
      }
    }
    Channels.fireMessageReceived(ctx,request,e.getRemoteAddress());
  }
 else {
    ctx.sendUpstream(e);
  }
}",0.9168141592920354
151995,"public HttpResponseStatus process(IMap<String,String> hcMap,String id,String newDocument,String remoteAddr,String obsoleteDocId){
  HttpResponseStatus status=NOT_ACCEPTABLE;
  try {
    ObjectNode aggregate=objectMapper.readValue(newDocument,ObjectNode.class);
    if (isValidDocument(aggregate)) {
      setGeoLocation(aggregate,remoteAddr);
      hcMap.put(id,objectMapper.writeValueAsString(aggregate));
      if (obsoleteDocId != null) {
        hcMap.remove(id);
      }
      status=HttpResponseStatus.CREATED;
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
 catch (  JsonParseException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  JsonMappingException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return status;
}","public HttpResponseStatus process(IMap<String,String> hcMap,String id,String newDocument,String remoteAddr,String obsoleteDocId){
  HttpResponseStatus status=NOT_ACCEPTABLE;
  try {
    ObjectNode aggregate=objectMapper.readValue(newDocument,ObjectNode.class);
    if (isValidDocument(aggregate)) {
      setGeoLocation(aggregate,remoteAddr);
      hcMap.put(id,objectMapper.writeValueAsString(aggregate));
      if (obsoleteDocId != null) {
        hcMap.remove(obsoleteDocId);
      }
      status=HttpResponseStatus.CREATED;
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
 catch (  JsonParseException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  JsonMappingException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return status;
}",0.9920294297976702
151996,"@GET @Produces(MediaType.TEXT_PLAIN) public Response getStats(){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,Stats> entry : rs.getStatsMap().entrySet()) {
    Stats stats=entry.getValue();
    sb.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numValidRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numInvalidRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numForbiddenRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numPuts.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numGets.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numDels.get());
  }
  return Response.ok(sb.toString(),MediaType.APPLICATION_JSON).build();
}","@GET @Produces(MediaType.TEXT_PLAIN) public Response getStats(){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,Stats> entry : rs.getStatsMap().entrySet()) {
    Stats stats=entry.getValue();
    sb.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numValidRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numInvalidRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numForbiddenRequests.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numPuts.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numGets.get()).append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(stats.numDels.get()).append(""String_Node_Str"");
  }
  return Response.ok(sb.toString(),MediaType.APPLICATION_JSON).build();
}",0.987141444114738
151997,"/** 
 * Add a collection of rules to the Gnip stream
 * @param account The account name for the power track API. (For example: acme)
 * @param streamName the streamName
 * @param rule The Rules object to add to the tracker
 */
void addRules(String account,String streamName,Rules rules);","/** 
 * Add a collection of rules to the Gnip stream
 * @param account The account name for the power track API. (For example: acme)
 * @param streamName the streamName
 * @param rules The Rules object to add to the tracker
 */
void addRules(String account,String streamName,Rules rules);",0.9982608695652174
151998,"/** 
 * Constructs a   {@link Base64.OutputStream} in either ENCODE or DECODEmode. <p> Valid options: <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: don't break lines at 76 characters (only meaningful when encoding)</i> </pre> <p> Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>
 * @param out the <tt>java.io.OutputStream</tt> to which data will be written.
 * @param options Specified options.
 * @see Base64#ENCODE
 * @see Base64#DECODE
 * @see Base64#DO_BREAK_LINES
 * @since 1.3
 */
public OutputStream(final java.io.OutputStream out,final int options){
  super(out);
  this.breakLines=(options & DO_BREAK_LINES) != 0;
  this.encode=(options & ENCODE) != 0;
  this.bufferLength=encode ? 3 : 4;
  this.buffer=new byte[bufferLength];
  this.position=0;
  this.lineLength=0;
  this.suspendEncoding=false;
  this.b4=new byte[4];
  this.options=options;
  this.decodabet=getDecodabet(options);
}","/** 
 * Constructs a   {@link Base64.OutputStream} in either ENCODE or DECODEmode. <p> Valid options: <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: don't break lines at 76 characters (only meaningful when encoding) </pre> <p> Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>
 * @param out the <tt>java.io.OutputStream</tt> to which data will be written.
 * @param options Specified options.
 * @see Base64#ENCODE
 * @see Base64#DECODE
 * @see Base64#DO_BREAK_LINES
 * @since 1.3
 */
public OutputStream(final java.io.OutputStream out,final int options){
  super(out);
  this.breakLines=(options & DO_BREAK_LINES) != 0;
  this.encode=(options & ENCODE) != 0;
  this.bufferLength=encode ? 3 : 4;
  this.buffer=new byte[bufferLength];
  this.position=0;
  this.lineLength=0;
  this.suspendEncoding=false;
  this.b4=new byte[4];
  this.options=options;
  this.decodabet=getDecodabet(options);
}",0.9978700745473909
151999,"/** 
 * Constructs a   {@link Base64.InputStream} in either ENCODE or DECODEmode. <p> Valid options: <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: break lines at 76 characters (only meaningful when encoding)</i> </pre> <p> Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>
 * @param in the <tt>java.io.InputStream</tt> from which to read data.
 * @param options Specified options
 * @see Base64#ENCODE
 * @see Base64#DECODE
 * @see Base64#DO_BREAK_LINES
 * @since 2.0
 */
public InputStream(final java.io.InputStream in,final int options){
  super(in);
  this.options=options;
  this.breakLines=(options & DO_BREAK_LINES) > 0;
  this.encode=(options & ENCODE) > 0;
  this.bufferLength=encode ? 4 : 3;
  this.buffer=new byte[bufferLength];
  this.position=-1;
  this.lineLength=0;
  this.decodabet=getDecodabet(options);
}","/** 
 * Constructs a   {@link Base64.InputStream} in either ENCODE or DECODEmode. <p> Valid options: <pre> ENCODE or DECODE: Encode or Decode as data is read. DO_BREAK_LINES: break lines at 76 characters (only meaningful when encoding) </pre> <p> Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>
 * @param in the <tt>java.io.InputStream</tt> from which to read data.
 * @param options Specified options
 * @see Base64#ENCODE
 * @see Base64#DECODE
 * @see Base64#DO_BREAK_LINES
 * @since 2.0
 */
public InputStream(final java.io.InputStream in,final int options){
  super(in);
  this.options=options;
  this.breakLines=(options & DO_BREAK_LINES) > 0;
  this.encode=(options & ENCODE) > 0;
  this.bufferLength=encode ? 4 : 3;
  this.buffer=new byte[bufferLength];
  this.position=-1;
  this.lineLength=0;
  this.decodabet=getDecodabet(options);
}",0.9976825028968712
152000,"/** 
 * Creates the NextChunkIterator.
 * @param channel
 * @param iterator
 */
public NextChunkUnlimited(final Collection<String> activities){
  super(activities);
}","public NextChunkUnlimited(final Collection<String> activities){
  super(activities);
}",0.6825396825396826
