record_number,buggy_code,fixed_code,code_similarity
102001,"/** 
 * @param value
 */
public void setGenerateDefaultSQL(boolean value){
  this.generateDefaultSQL=value;
}","/** 
 * @param value
 */
public void setGenerateDefaultSQL(boolean value){
  importManager.optToGenerateDefaultSQL(value);
}",0.8927038626609443
102002,"/** 
 * @param monitor
 * @param totalWork
 * @throws Exception
 */
public void save(IProgressMonitor monitor,int totalWork) throws Exception {
  monitor.subTask(DdlImporterI18n.SAVING_MODEL_MSG);
  if (!model.exists()) {
    ModelAnnotation modelAnnotation=model.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(importManager.getModelType());
  }
  importStatus=EmfModelGenerator.INSTANCE.execute(diffReport,model,monitor,totalWork);
  if (importManager.getModelType() == ModelType.VIRTUAL_LITERAL) {
    Properties props=new Properties();
    if (doGenerateDefaultSQL()) {
      props.put(""String_Node_Str"",generateDefaultSQL);
      props.put(""String_Node_Str"",generateDefaultSQL);
    }
    Collection<EObject> targets=new ArrayList<EObject>();
    for (    Object nextObj : model.getEObjects()) {
      if (nextObj instanceof Procedure || nextObj instanceof BaseTable || nextObj instanceof View) {
        try {
          NewModelObjectHelperManager.helpCreate(nextObj,props);
          targets.add((EObject)nextObj);
        }
 catch (        ModelerCoreException err) {
          DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
        }
      }
    }
  }
  model.save(monitor,false);
  monitor.worked(totalWork);
  monitor.done();
}","/** 
 * @param monitor
 * @param totalWork
 * @throws Exception
 */
public void save(IProgressMonitor monitor,int totalWork) throws Exception {
  monitor.subTask(DdlImporterI18n.SAVING_MODEL_MSG);
  if (!model.exists()) {
    ModelAnnotation modelAnnotation=model.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(importManager.getModelType());
  }
  importStatus=EmfModelGenerator.INSTANCE.execute(diffReport,model,monitor,totalWork);
  if (importManager.getModelType() == ModelType.VIRTUAL_LITERAL) {
    Properties props=new Properties();
    boolean doGenerateDefaultSQL=importManager.optToGenerateDefaultSQL();
    if (doGenerateDefaultSQL) {
      props.put(""String_Node_Str"",doGenerateDefaultSQL);
      props.put(""String_Node_Str"",doGenerateDefaultSQL);
    }
    Collection<EObject> targets=new ArrayList<EObject>();
    for (    Object nextObj : model.getEObjects()) {
      if (nextObj instanceof Procedure || nextObj instanceof BaseTable || nextObj instanceof View) {
        try {
          NewModelObjectHelperManager.helpCreate(nextObj,props);
          targets.add((EObject)nextObj);
        }
 catch (        ModelerCoreException err) {
          DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
        }
      }
    }
  }
  model.save(monitor,false);
  monitor.worked(totalWork);
  monitor.done();
}",0.937272064186725
102003,"/** 
 * @throws Exception
 */
public abstract void write() throws Exception ;","/** 
 * @throws Exception
 */
protected void write() throws Exception {
  refreshOutputLocation();
  IProject project=getOutputLocation().getProject();
  project.build(IncrementalProjectBuilder.CLEAN_BUILD,new NullProgressMonitor());
}",0.4038461538461538
102004,"@Override public void write() throws Exception {
  if (isGenerateRequired())   return;
  getArchiveVdb().save();
  refreshOutputLocation();
}","@Override public void write() throws Exception {
  if (isGenerateRequired())   return;
  getArchiveVdb().save();
  super.write();
}",0.8970588235294118
102005,"/** 
 * @throws Exception
 */
@Override public void write() throws Exception {
  checkDynamicVdbGenerated();
  StringWriter writer=new StringWriter();
  getDynamicVdb().write(writer);
  String xml=writer.toString();
  IFile destination=getDestination();
  ByteArrayInputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
  destination.create(inputStream,true,new NullProgressMonitor());
}","/** 
 * @throws Exception
 */
@Override public void write() throws Exception {
  checkDynamicVdbGenerated();
  StringWriter writer=new StringWriter();
  getDynamicVdb().write(writer);
  String xml=writer.toString();
  IFile destination=getDestination();
  ByteArrayInputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
  destination.create(inputStream,true,new NullProgressMonitor());
  super.write();
}",0.9799291617473436
102006,"@SuppressWarnings(""String_Node_Str"") @Override public boolean helpCreate(Object newObject,Map properties,List<EObject> references){
  CoreArgCheck.isNotNull(newObject);
  if (properties == null)   properties=new HashMap();
  boolean defineDefaultTableSQL=properties.get(""String_Node_Str"") != null;
  boolean doValidate=properties.get(""String_Node_Str"") != null;
  if (newObject instanceof EObject) {
    EObject newTarget=(EObject)newObject;
    if (TransformationHelper.isVirtual(newTarget)) {
      MetamodelAspect aspect=AspectManager.getSqlAspect(newTarget);
      if (aspect != null && aspect instanceof SqlTableAspect) {
        SqlTableAspect tableAspect=(SqlTableAspect)aspect;
        if (!TransformationHelper.hasSqlTransformationMappingRoot(newTarget)) {
          EObject newRoot=ModelResourceContainerFactory.createNewSqlTransformationMappingRoot(newTarget,false,this);
          ModelResourceContainerFactory.addMappingHelper(newRoot);
          if (isMapValueTrue(VIRTUAL_TABLE_CLEAR_SUPPORTS_UPDATE,properties,true)) {
            tableAspect.setSupportsUpdate(newTarget,false);
          }
          if (defineDefaultTableSQL) {
            EObject tRoot=TransformationHelper.getMappingRoot(newTarget);
            List columns=tableAspect.getColumns(newTarget);
            int count=0;
            StringBuilder sb=new StringBuilder();
            if (!columns.isEmpty()) {
              sb.append(""String_Node_Str"");
              for (              Object col : columns) {
                String colName=ModelerCore.getModelEditor().getName((EObject)col);
                if (count > 0)                 sb.append(',');
                String seg=""String_Node_Str"" + colName;
                sb.append(seg);
                count++;
              }
              TransformationHelper.setSelectSqlString(tRoot,sb.toString(),false,this);
              TransformationMappingHelper.reconcileMappingsOnSqlChange(tRoot,null);
              TransformationMappingHelper.reconcileTargetAttributes(tRoot,null);
            }
            if (doValidate) {
              QueryValidator validator=new TransformationValidator((SqlTransformationMappingRoot)tRoot);
              validator.validateSql(sb.toString(),QueryValidator.SELECT_TRNS,true);
            }
          }
          return true;
        }
 else         if (defineDefaultTableSQL) {
          EObject tRoot=TransformationHelper.getMappingRoot(newTarget);
          List columns=tableAspect.getColumns(newTarget);
          int count=0;
          StringBuilder sb=new StringBuilder();
          if (!columns.isEmpty()) {
            sb.append(""String_Node_Str"");
            for (            Object col : columns) {
              String colName=ModelerCore.getModelEditor().getName((EObject)col);
              if (count > 0)               sb.append(',');
              String seg=""String_Node_Str"" + colName;
              sb.append(seg);
              count++;
            }
            TransformationHelper.setSelectSqlString(tRoot,sb.toString(),false,this);
            TransformationMappingHelper.reconcileMappingsOnSqlChange(tRoot,null);
            TransformationMappingHelper.reconcileTargetAttributes(tRoot,null);
          }
          if (doValidate) {
            QueryValidator validator=new TransformationValidator((SqlTransformationMappingRoot)tRoot);
            validator.validateSql(sb.toString(),QueryValidator.SELECT_TRNS,true);
          }
        }
      }
 else       if (TransformationHelper.isSqlProcedure(newTarget) && !TransformationHelper.isOperation(newTarget)) {
        if (!TransformationHelper.hasSqlTransformationMappingRoot(newTarget)) {
          EObject newRoot=ModelResourceContainerFactory.createNewSqlTransformationMappingRoot(newTarget,false,this);
          ModelResourceContainerFactory.addMappingHelper(newRoot);
        }
        if (defineDefaultTableSQL) {
          EObject tRoot=TransformationHelper.getMappingRoot(newTarget);
          TransformationHelper.setSelectSqlString(tRoot,VIRTUAL_PROCEDURE_TEMPLATE_SQL,false,this);
        }
        return true;
      }
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean helpCreate(Object newObject,Map properties,List<EObject> references){
  CoreArgCheck.isNotNull(newObject);
  if (properties == null)   properties=new HashMap();
  boolean defineDefaultTableSQL=properties.get(CREATE_OBJECT_GENERATE_DEFAULT_SQL_PROPERTY) != null;
  boolean doValidate=properties.get(CREATE_OBJECT_VALIDATE_PROPERTY) != null;
  String providedSQL=(String)properties.get(CREATE_OBJECT_PROVIDED_SQL_PROPERTY);
  if (!(newObject instanceof EObject))   return false;
  EObject newTarget=(EObject)newObject;
  if (!TransformationHelper.isVirtual(newTarget))   return false;
  MetamodelAspect aspect=AspectManager.getSqlAspect(newTarget);
  if (aspect != null && aspect instanceof SqlTableAspect) {
    SqlTableAspect tableAspect=(SqlTableAspect)aspect;
    if (!TransformationHelper.hasSqlTransformationMappingRoot(newTarget)) {
      EObject newRoot=ModelResourceContainerFactory.createNewSqlTransformationMappingRoot(newTarget,false,this);
      ModelResourceContainerFactory.addMappingHelper(newRoot);
      if (isMapValueTrue(VIRTUAL_TABLE_CLEAR_SUPPORTS_UPDATE,properties,true)) {
        tableAspect.setSupportsUpdate(newTarget,false);
      }
    }
    EObject tRoot=TransformationHelper.getMappingRoot(newTarget);
    String selectSql=TransformationHelper.getSelectSqlString(tRoot);
    if (selectSql != null)     return true;
    if (defineDefaultTableSQL)     selectSql=generateDefaultSQL(newTarget,tableAspect);
 else     if (providedSQL != null) {
      selectSql=providedSQL;
    }
    if (selectSql == null)     return false;
    TransformationHelper.setSelectSqlString(tRoot,selectSql,false,this);
    TransformationMappingHelper.reconcileMappingsOnSqlChange(tRoot,null);
    TransformationMappingHelper.reconcileTargetAttributes(tRoot,null);
    if (doValidate) {
      QueryValidator validator=new TransformationValidator((SqlTransformationMappingRoot)tRoot);
      validator.validateSql(selectSql,QueryValidator.SELECT_TRNS,true);
    }
    return true;
  }
 else   if (TransformationHelper.isSqlProcedure(newTarget) && !TransformationHelper.isOperation(newTarget)) {
    if (!TransformationHelper.hasSqlTransformationMappingRoot(newTarget)) {
      EObject newRoot=ModelResourceContainerFactory.createNewSqlTransformationMappingRoot(newTarget,false,this);
      ModelResourceContainerFactory.addMappingHelper(newRoot);
    }
    EObject tRoot=TransformationHelper.getMappingRoot(newTarget);
    String selectSql=TransformationHelper.getSelectSqlString(tRoot);
    if (selectSql != null)     return true;
    if (defineDefaultTableSQL)     selectSql=VIRTUAL_PROCEDURE_TEMPLATE_SQL;
 else     if (providedSQL != null) {
      selectSql=providedSQL;
    }
    if (selectSql == null)     return false;
    TransformationHelper.setSelectSqlString(tRoot,selectSql,false,this);
    return true;
  }
  return false;
}",0.3653736451796919
102007,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createPanel(Composite parent){
  final String DATA_POLICY_COLUMN_NAME=i18n(""String_Node_Str"");
  final ButtonProvider editProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.EDIT_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return (selection.size() == 1);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      DataRole dataRole=(DataRole)selection.getFirstElement();
      if (dataRole == null) {
        return;
      }
      ContainerImpl tempContainer=null;
      try {
        Collection<File> modelFiles=vdbEditor.getVdb().getModelFiles();
        tempContainer=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
        ModelEditorImpl.setContainer(tempContainer);
        for (        File modelFile : modelFiles) {
          boolean isVisible=true;
          Resource r=tempContainer.getResource(URI.createFileURI(modelFile.getPath()),true);
          if (isVisible && ModelUtil.isModelFile(r) && !ModelUtil.isXsdFile(r)) {
            EObject firstEObj=r.getContents().get(0);
            ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
            String mmURI=ma.getPrimaryMetamodelUri();
            if (RelationalPackage.eNS_URI.equalsIgnoreCase(mmURI) || XmlDocumentPackage.eNS_URI.equalsIgnoreCase(mmURI) || WEB_SERVICES_VIEW_MODEL_URI.equalsIgnoreCase(mmURI)|| ModelIdentifier.FUNCTION_MODEL_URI.equals(mmURI)) {
            }
 else {
              tempContainer.getResources().remove(r);
            }
          }
 else {
            tempContainer.getResources().remove(r);
          }
        }
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
 finally {
        ModelEditorImpl.setContainer(null);
      }
      DataRole dataPolicy=new DataRole(dataRole.getName(),dataRole.getDescription(),dataRole.isAnyAuthenticated(),dataRole.isAllowCreateTempTables(),dataRole.isGrantAll(),dataRole.getRoleNames(),dataRole.getPermissions());
      final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
      Set<String> roleNames=VdbUtil.getDataRoleNames(vdbEditor.getVdb(),dataRole.getName());
      final DataRoleWizard wizard=new DataRoleWizard(tempContainer,dataPolicy,vdbEditor.getVdb().getAllowedLanguages(),roleNames);
      wizard.init(iww.getWorkbench(),new StructuredSelection(vdbEditor.getVdb().getModelEntries()));
      final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
      final int rc=dialog.open();
      if (rc == Window.OK) {
        DataRole dp=wizard.getFinalDataRole();
        if (dp != null) {
          vdbEditor.getVdb().removeDataRole(dataRole.getName());
          vdbEditor.getVdb().addDataRole(dp);
        }
      }
    }
  }
;
  dataRolesGroup=new TableAndToolBar(parent,1,new DefaultTableProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#doubleClicked(java.lang.Object)
 */
    @Override public void doubleClicked(    DataRole element){
      editProvider.selected(new StructuredSelection(element));
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.TableProvider#getElements()
 */
    @Override public DataRole[] getElements(){
      final Collection<DataRole> entries=vdbEditor.getVdb().getDataRoles();
      return entries.toArray(new DataRole[entries.size()]);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#isDoubleClickSupported()
 */
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getImage(java.lang.Object)
 */
    @Override public Image getImage(    final DataRole element){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return DATA_POLICY_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final DataRole element){
      return element.getName();
    }
  }
,new TextColumnProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return DESCRIPTION_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final DataRole element){
      return element.getDescription();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#isEditable(java.lang.Object)
 */
    @Override public boolean isEditable(    final DataRole element){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#setValue(java.lang.Object,java.lang.Object)
 */
    @Override public void setValue(    final DataRole element,    final String value){
      element.setDescription(value);
    }
  }
);
  ButtonProvider newProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.ADD_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      ContainerImpl tempContainer=null;
      try {
        Collection<File> modelFiles=vdbEditor.getVdb().getModelFiles();
        tempContainer=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
        ModelEditorImpl.setContainer(tempContainer);
        for (        File modelFile : modelFiles) {
          boolean isVisible=true;
          Resource r=tempContainer.getResource(URI.createFileURI(modelFile.getPath()),true);
          if (isVisible && ModelUtil.isModelFile(r) && !ModelUtil.isXsdFile(r)) {
            EObject firstEObj=r.getContents().get(0);
            ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
            String mmURI=ma.getPrimaryMetamodelUri();
            if (RelationalPackage.eNS_URI.equalsIgnoreCase(mmURI) || XmlDocumentPackage.eNS_URI.equalsIgnoreCase(mmURI) || WEB_SERVICES_VIEW_MODEL_URI.equalsIgnoreCase(mmURI)|| ModelIdentifier.FUNCTION_MODEL_URI.equals(mmURI)) {
            }
 else {
              tempContainer.getResources().remove(r);
            }
          }
 else {
            tempContainer.getResources().remove(r);
          }
        }
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
 finally {
        ModelEditorImpl.setContainer(null);
      }
      final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
      Set<String> roleNames=VdbUtil.getDataRoleNames(vdbEditor.getVdb(),null);
      final DataRoleWizard wizard=new DataRoleWizard(tempContainer,null,vdbEditor.getVdb().getAllowedLanguages(),roleNames);
      wizard.init(iww.getWorkbench(),new StructuredSelection(vdbEditor.getVdb().getModelEntries()));
      final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
      final int rc=dialog.open();
      if (rc == Window.OK) {
        DataRole dp=wizard.getFinalDataRole();
        if (dp != null) {
          vdbEditor.getVdb().addDataRole(dp);
        }
      }
    }
  }
;
  dataRolesGroup.add(newProvider);
  dataRolesGroup.add(editProvider);
  ButtonProvider removeProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.REMOVE_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return !selection.isEmpty();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      if (ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE)) {
        for (        final Object element : selection.toList()) {
          if (element instanceof DataRole) {
            vdbEditor.getVdb().removeDataRole(((DataRole)element).getName());
          }
        }
      }
    }
  }
;
  dataRolesGroup.add(removeProvider);
  dataRolesGroup.setInput(vdbEditor.getVdb());
  this.cloneDataRoleAction=new Action(i18n(""String_Node_Str"")){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
    @Override public void run(){
      if (selectedDataRole != null) {
        DataRole newDR=new DataRole(selectedDataRole.getName() + i18n(""String_Node_Str""),selectedDataRole.getDescription(),selectedDataRole.isAnyAuthenticated(),selectedDataRole.isAllowCreateTempTables(),selectedDataRole.isGrantAll(),selectedDataRole.getRoleNames(),selectedDataRole.getPermissions());
        vdbEditor.getVdb().addDataRole(newDR);
        dataRolesGroup.getTable().getViewer().refresh();
      }
    }
  }
;
  this.cloneDataRoleAction.setEnabled(true);
  final TableViewer dataRolesViewer=dataRolesGroup.getTable().getViewer();
  final MenuManager dataRolesMenuManager=new MenuManager();
  dataRolesViewer.getControl().setMenu(dataRolesMenuManager.createContextMenu(parent));
  dataRolesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
 */
    @Override public void selectionChanged(    final SelectionChangedEvent event){
      dataRolesMenuManager.removeAll();
      IStructuredSelection sel=(IStructuredSelection)dataRolesViewer.getSelection();
      if (sel.size() == 1) {
        selectedDataRole=(DataRole)sel.getFirstElement();
        dataRolesMenuManager.add(cloneDataRoleAction);
      }
    }
  }
);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createPanel(Composite parent){
  final String DATA_POLICY_COLUMN_NAME=i18n(""String_Node_Str"");
  final ButtonProvider editProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.EDIT_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return (selection.size() == 1);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      DataRole dataRole=(DataRole)selection.getFirstElement();
      if (dataRole == null) {
        return;
      }
      ContainerImpl tempContainer=null;
      try {
        Collection<File> modelFiles=vdbEditor.getVdb().getModelFiles();
        tempContainer=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
        ModelEditorImpl.setContainer(tempContainer);
        for (        File modelFile : modelFiles) {
          boolean isVisible=true;
          Resource r=tempContainer.getResource(URI.createFileURI(modelFile.getPath()),true);
          if (isVisible && ModelUtil.isModelFile(r) && !ModelUtil.isXsdFile(r)) {
            EObject firstEObj=r.getContents().get(0);
            ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
            String mmURI=ma.getPrimaryMetamodelUri();
            if (RelationalPackage.eNS_URI.equalsIgnoreCase(mmURI) || XmlDocumentPackage.eNS_URI.equalsIgnoreCase(mmURI) || WEB_SERVICES_VIEW_MODEL_URI.equalsIgnoreCase(mmURI)|| ModelIdentifier.FUNCTION_MODEL_URI.equals(mmURI)) {
            }
 else {
              tempContainer.getResources().remove(r);
            }
          }
 else {
            tempContainer.getResources().remove(r);
          }
        }
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
 finally {
        ModelEditorImpl.setContainer(null);
      }
      final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
      Set<String> roleNames=VdbUtil.getDataRoleNames(vdbEditor.getVdb(),dataRole.getName());
      final DataRoleWizard wizard=new DataRoleWizard(tempContainer,dataRole,vdbEditor.getVdb().getAllowedLanguages(),roleNames);
      wizard.init(iww.getWorkbench(),new StructuredSelection(vdbEditor.getVdb().getModelEntries()));
      final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
      final int rc=dialog.open();
      if (rc == Window.OK) {
        DataRole dp=wizard.getFinalDataRole();
        if (dp != null) {
          vdbEditor.getVdb().removeDataRole(dataRole.getName());
          vdbEditor.getVdb().addDataRole(dp);
        }
      }
    }
  }
;
  dataRolesGroup=new TableAndToolBar(parent,1,new DefaultTableProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#doubleClicked(java.lang.Object)
 */
    @Override public void doubleClicked(    DataRole element){
      editProvider.selected(new StructuredSelection(element));
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.TableProvider#getElements()
 */
    @Override public DataRole[] getElements(){
      final Collection<DataRole> entries=vdbEditor.getVdb().getDataRoles();
      return entries.toArray(new DataRole[entries.size()]);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#isDoubleClickSupported()
 */
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getImage(java.lang.Object)
 */
    @Override public Image getImage(    final DataRole element){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return DATA_POLICY_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final DataRole element){
      return element.getName();
    }
  }
,new TextColumnProvider<DataRole>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return DESCRIPTION_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final DataRole element){
      return element.getDescription();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#isEditable(java.lang.Object)
 */
    @Override public boolean isEditable(    final DataRole element){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#setValue(java.lang.Object,java.lang.Object)
 */
    @Override public void setValue(    final DataRole element,    final String value){
      element.setDescription(value);
    }
  }
);
  ButtonProvider newProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.ADD_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      ContainerImpl tempContainer=null;
      try {
        Collection<File> modelFiles=vdbEditor.getVdb().getModelFiles();
        tempContainer=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
        ModelEditorImpl.setContainer(tempContainer);
        for (        File modelFile : modelFiles) {
          boolean isVisible=true;
          Resource r=tempContainer.getResource(URI.createFileURI(modelFile.getPath()),true);
          if (isVisible && ModelUtil.isModelFile(r) && !ModelUtil.isXsdFile(r)) {
            EObject firstEObj=r.getContents().get(0);
            ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
            String mmURI=ma.getPrimaryMetamodelUri();
            if (RelationalPackage.eNS_URI.equalsIgnoreCase(mmURI) || XmlDocumentPackage.eNS_URI.equalsIgnoreCase(mmURI) || WEB_SERVICES_VIEW_MODEL_URI.equalsIgnoreCase(mmURI)|| ModelIdentifier.FUNCTION_MODEL_URI.equals(mmURI)) {
            }
 else {
              tempContainer.getResources().remove(r);
            }
          }
 else {
            tempContainer.getResources().remove(r);
          }
        }
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
 finally {
        ModelEditorImpl.setContainer(null);
      }
      final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
      Set<String> roleNames=VdbUtil.getDataRoleNames(vdbEditor.getVdb(),null);
      final DataRoleWizard wizard=new DataRoleWizard(tempContainer,null,vdbEditor.getVdb().getAllowedLanguages(),roleNames);
      wizard.init(iww.getWorkbench(),new StructuredSelection(vdbEditor.getVdb().getModelEntries()));
      final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
      final int rc=dialog.open();
      if (rc == Window.OK) {
        DataRole dp=wizard.getFinalDataRole();
        if (dp != null) {
          vdbEditor.getVdb().addDataRole(dp);
        }
      }
    }
  }
;
  dataRolesGroup.add(newProvider);
  dataRolesGroup.add(editProvider);
  ButtonProvider removeProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.REMOVE_ROLE);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return !selection.isEmpty();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      if (ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE)) {
        for (        final Object element : selection.toList()) {
          if (element instanceof DataRole) {
            vdbEditor.getVdb().removeDataRole(((DataRole)element).getName());
          }
        }
      }
    }
  }
;
  dataRolesGroup.add(removeProvider);
  dataRolesGroup.setInput(vdbEditor.getVdb());
  this.cloneDataRoleAction=new Action(i18n(""String_Node_Str"")){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
    @Override public void run(){
      if (selectedDataRole != null) {
        DataRole newDR=new DataRole(selectedDataRole.getName() + i18n(""String_Node_Str""),selectedDataRole.getDescription(),selectedDataRole.isAnyAuthenticated(),selectedDataRole.isAllowCreateTempTables(),selectedDataRole.isGrantAll(),selectedDataRole.getRoleNames(),selectedDataRole.getPermissions());
        vdbEditor.getVdb().addDataRole(newDR);
        dataRolesGroup.getTable().getViewer().refresh();
      }
    }
  }
;
  this.cloneDataRoleAction.setEnabled(true);
  final TableViewer dataRolesViewer=dataRolesGroup.getTable().getViewer();
  final MenuManager dataRolesMenuManager=new MenuManager();
  dataRolesViewer.getControl().setMenu(dataRolesMenuManager.createContextMenu(parent));
  dataRolesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
 */
    @Override public void selectionChanged(    final SelectionChangedEvent event){
      dataRolesMenuManager.removeAll();
      IStructuredSelection sel=(IStructuredSelection)dataRolesViewer.getSelection();
      if (sel.size() == 1) {
        selectedDataRole=(DataRole)sel.getFirstElement();
        dataRolesMenuManager.add(cloneDataRoleAction);
      }
    }
  }
);
}",0.9906744046427856
102008,"@Override public DynamicVdb dynVdbConvert(IFile destination,Properties options) throws Exception {
  try {
    VdbPlugin.singleton().setConversionInProgress(true);
    DynamicVdb dynVdb=new DynamicVdb(destination);
    populateVdb(dynVdb);
    dynVdb.getProperties().remove(Xml.PREVIEW);
    this.getProperties().remove(Xml.PREVIEW);
    for (    VdbModelEntry entry : getModelEntries()) {
      VdbSourceInfo sourceInfo=entry.getSourceInfo();
      DynamicModel model=new DynamicModel();
      model.setName(entry.getName());
      model.setDescription(entry.getDescription());
      for (      Map.Entry<Object,Object> prop : getProperties().entrySet()) {
        model.setProperty(prop.getKey().toString(),prop.getValue().toString());
      }
      DynamicModel.Type type=DynamicModel.Type.fromString(entry.getType());
      model.setModelType(type);
      model.setAllowMultiSource(sourceInfo.isMultiSource());
      model.setAddColumn(sourceInfo.isAddColumn());
      model.setColumnAlias(sourceInfo.getColumnAlias());
      for (      VdbSource source : sourceInfo.getSources()) {
        VdbSource clone=source.clone();
        model.addSource(clone);
      }
      if (entry.getType().equals(ModelType.Type.VIRTUAL.getName()) || !excludeSourceMetadata) {
        TeiidModelToDdlGenerator generator=new TeiidModelToDdlGenerator();
        IFile entryFile=null;
        if (Synchronization.Synchronized == entry.getSynchronization()) {
          entryFile=entry.findFileInWorkspace();
        }
 else {
          entryFile=createEntryFile(entry);
        }
        ModelWorkspaceManager workspaceManager=ModelWorkspaceManager.getModelWorkspaceManager();
        ModelResource modelResource=(ModelResource)workspaceManager.findModelWorkspaceItem(entryFile,true);
        if (modelResource == null)         throw new Exception(""String_Node_Str"" + entryFile.getLocation().toOSString());
        String ddl=generator.generate(modelResource);
        Metadata metadata=new Metadata(ddl,Metadata.Type.DDL);
        model.setMetadata(metadata);
        dynVdb.addDynamicModel(model);
      }
    }
    return dynVdb;
  }
  finally {
    VdbPlugin.singleton().setConversionInProgress(false);
  }
}","@Override public DynamicVdb dynVdbConvert(IFile destination,Properties options) throws Exception {
  try {
    VdbPlugin.singleton().setConversionInProgress(true);
    DynamicVdb dynVdb=new DynamicVdb(destination);
    populateVdb(dynVdb);
    dynVdb.getProperties().remove(Xml.PREVIEW);
    this.getProperties().remove(Xml.PREVIEW);
    for (    VdbModelEntry entry : getModelEntries()) {
      VdbSourceInfo sourceInfo=entry.getSourceInfo();
      DynamicModel model=new DynamicModel();
      model.setName(entry.getName());
      model.setDescription(entry.getDescription());
      for (      Map.Entry<Object,Object> prop : getProperties().entrySet()) {
        model.setProperty(prop.getKey().toString(),prop.getValue().toString());
      }
      DynamicModel.Type type=DynamicModel.Type.fromString(entry.getType());
      model.setModelType(type);
      model.setAllowMultiSource(sourceInfo.isMultiSource());
      model.setAddColumn(sourceInfo.isAddColumn());
      model.setColumnAlias(sourceInfo.getColumnAlias());
      for (      VdbSource source : sourceInfo.getSources()) {
        VdbSource clone=source.clone();
        model.addSource(clone);
      }
      if (entry.getType().equals(ModelType.Type.VIRTUAL.getName()) || !excludeSourceMetadata) {
        TeiidModelToDdlGenerator generator=new TeiidModelToDdlGenerator();
        IFile entryFile=null;
        if (Synchronization.Synchronized == entry.getSynchronization()) {
          entryFile=entry.findFileInWorkspace();
        }
 else {
          entryFile=createEntryFile(entry);
        }
        ModelWorkspaceManager workspaceManager=ModelWorkspaceManager.getModelWorkspaceManager();
        ModelResource modelResource=(ModelResource)workspaceManager.findModelWorkspaceItem(entryFile,true);
        if (modelResource == null)         throw new Exception(""String_Node_Str"" + entryFile.getLocation().toOSString());
        String ddl=generator.generate(modelResource);
        Metadata metadata=new Metadata(ddl,Metadata.Type.DDL);
        model.setMetadata(metadata);
      }
      dynVdb.addDynamicModel(model);
    }
    return dynVdb;
  }
  finally {
    VdbPlugin.singleton().setConversionInProgress(false);
  }
}",0.996809480401094
102009,"private Synchronization synchronizeEntry() throws Exception {
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return Synchronization.NotApplicable;
  long oldChecksum=0L;
  checksumLock.writeLock().lock();
  try {
    oldChecksum=checksum;
    checksum=computeChecksum(workspaceFile);
    FileUtils.copy(workspaceFile.getLocation().toFile(),new File(getVdb().getStagingFolder(),getName()).getParentFile(),true);
  }
  finally {
    checksumLock.writeLock().unlock();
  }
  setModified(this,ENTRY_CHECKSUM,oldChecksum,checksum);
  return Synchronization.Synchronized;
}","protected Synchronization synchronizeEntry() throws Exception {
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return Synchronization.NotApplicable;
  long oldChecksum=0L;
  checksumLock.writeLock().lock();
  try {
    oldChecksum=checksum;
    checksum=computeChecksum(workspaceFile);
    FileUtils.copy(workspaceFile.getLocation().toFile(),new File(getVdb().getStagingFolder(),getPath().toOSString()).getParentFile(),true);
  }
  finally {
    checksumLock.writeLock().unlock();
  }
  setModified(this,ENTRY_CHECKSUM,oldChecksum,checksum);
  return Synchronization.Synchronized;
}",0.9729286300246104
102010,"/** 
 * @return the associated workspace file, or <code>null</code> if it doesn't exist
 */
public final IFile findFileInWorkspace(){
  IResource resource=ModelerCore.getWorkspace().getRoot().findMember(getPath());
  if (resource == null) {
    if (getVdb() != null && getVdb().getSourceFile() != null && getVdb().getSourceFile().getProject() != null) {
      IProject vdbProject=getVdb().getSourceFile().getProject();
      resource=vdbProject.findMember(getPath());
    }
  }
  if (!(resource instanceof IFile)) {
    setSynchronization(Synchronization.NotApplicable);
    return null;
  }
  return (IFile)resource;
}","/** 
 * @return the associated workspace file, or <code>null</code> if it doesn't exist
 */
public IFile findFileInWorkspace(){
  IResource resource=ModelerCore.getWorkspace().getRoot().findMember(getPath());
  if (resource == null) {
    if (getVdb() != null && getVdb().getSourceFile() != null && getVdb().getSourceFile().getProject() != null) {
      IProject vdbProject=getVdb().getSourceFile().getProject();
      resource=vdbProject.findMember(getPath());
    }
  }
  if (!(resource instanceof IFile)) {
    setSynchronization(Synchronization.NotApplicable);
    return null;
  }
  return (IFile)resource;
}",0.99512987012987
102011,"@Override public void save(final ZipOutputStream out) throws Exception {
  String zipName=getName().toString();
  if (zipName.startsWith(StringConstants.FORWARD_SLASH)) {
    zipName=zipName.substring(1,zipName.length());
  }
  final ZipEntry zipEntry=new ZipEntry(zipName);
  zipEntry.setComment(getDescription());
  IProject vdbProject=getVdb().getSourceFile().getProject();
  File theFile=findUdfFile(vdbProject);
  if (theFile != null && theFile.exists()) {
    save(out,zipEntry,theFile);
  }
}","@Override public void save(final ZipOutputStream out) throws Exception {
  String zipName=getPath().toOSString();
  if (zipName.startsWith(StringConstants.FORWARD_SLASH)) {
    zipName=zipName.substring(1,zipName.length());
  }
  final ZipEntry zipEntry=new ZipEntry(zipName);
  zipEntry.setComment(getDescription());
  File theFile=findSourceFile();
  save(out,zipEntry,theFile);
}",0.8013620885357549
102012,"/** 
 * Constructs a file entry and adds it to the specified VDB. 
 * @param vdb the VDB where the resource is be added to (may not be <code>null</code>)
 * @param element the EntryElement
 * @throws Exception
 */
public VdbFileEntry(final Vdb vdb,final EntryElement element) throws Exception {
  super(vdb,Path.fromPortableString(element.getPath()));
  this.sourceFilePath=Path.fromPortableString(element.getPath());
  if (element.getPath().startsWith(StringConstants.FORWARD_SLASH + VdbFolders.UDF.getReadFolder())) {
    this.fileType=FileEntryType.UDFJar;
  }
 else {
    this.fileType=FileEntryType.UserFile;
  }
  setPath(determinePath(this.sourceFilePath,this.fileType));
}","/** 
 * Constructs a file entry and adds it to the specified VDB. 
 * @param vdb the VDB where the resource is be added to (may not be <code>null</code>)
 * @param element the EntryElement
 * @throws Exception
 */
public VdbFileEntry(final Vdb vdb,final EntryElement element) throws Exception {
  super(vdb,Path.fromPortableString(element.getPath()));
  this.sourceFilePath=Path.fromPortableString(element.getPath());
  if (element.getPath().startsWith(StringConstants.FORWARD_SLASH + VdbFolders.UDF.getReadFolder())) {
    this.fileType=FileEntryType.UDFJar;
  }
 else {
    this.fileType=FileEntryType.UserFile;
  }
  resetPath();
}",0.9497716894977168
102013,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n','('};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(SQL_STATEMENT_START)) {
        for (        char prefixChar : prefixChars) {
          String toReplace=prefixChar + sourceName + '.';
          for (int lineOffset=line.indexOf(toReplace); lineOffset >= 0; lineOffset=line.indexOf(toReplace,lineOffset + 1)) {
            if (lineOffset < 0)             continue;
            int offset=docOffset + lineOffset + 1;
            ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n','('};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(SQL_STATEMENT_START)) {
        for (        char prefixChar : prefixChars) {
          String toReplace=prefixChar + sourceName + '.';
          for (int lineOffset=line.indexOf(toReplace); lineOffset >= 0; lineOffset=line.indexOf(toReplace,lineOffset + 1)) {
            if (lineOffset < 0)             continue;
            int offset=docOffset + lineOffset + 1;
            ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.9681978798586572
102014,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
        lineOffset=line.indexOf(pathPair.getSourceNameNoExtension());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        String sourcePath=pathPair.getSourcePath().replace('\\','/');
        String sourceNameOnly=pathPair.getSourceNameNoExtension();
        boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
        int lineOffset=line.indexOf(sourcePath);
        if (lineOffset > 0) {
          boolean startsWithDQuote=line.charAt(lineOffset - 1) == '""';
          if (sourcePathHasSlash || startsWithDQuote) {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
        lineOffset=line.indexOf(sourceNameOnly);
        boolean startsWithDQuote=false;
        boolean endsWithDQuote=false;
        if (lineOffset > 0) {
          startsWithDQuote=line.charAt(lineOffset - 1) == '""';
          endsWithDQuote=line.charAt(lineOffset + sourceNameOnly.length()) == '""';
        }
        if (lineOffset > 0 && startsWithDQuote && endsWithDQuote) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.7311276794035415
102015,"/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}","/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          String sourcePath=pathPair.getSourcePath().replace('\\','/');
          boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
          int lineOffset=line.indexOf(sourcePath);
          if (lineOffset < 0)           continue;
          if (sourcePathHasSlash || line.charAt(lineOffset - 1) == '""') {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}",0.8830886351277868
102016,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n','('};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(SQL_STATEMENT_START)) {
        for (        char prefixChar : prefixChars) {
          String toReplace=prefixChar + sourceName + '.';
          for (int lineOffset=line.indexOf(toReplace); lineOffset >= 0; lineOffset=line.indexOf(toReplace,lineOffset + 1)) {
            if (lineOffset < 0)             continue;
            int offset=docOffset + lineOffset + 1;
            ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n','('};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(SQL_STATEMENT_START)) {
        for (        char prefixChar : prefixChars) {
          String toReplace=prefixChar + sourceName + '.';
          for (int lineOffset=line.indexOf(toReplace); lineOffset >= 0; lineOffset=line.indexOf(toReplace,lineOffset + 1)) {
            if (lineOffset < 0)             continue;
            int offset=docOffset + lineOffset + 1;
            ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.9681978798586572
102017,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        String sourcePath=pathPair.getSourcePath().replace('\\','/');
        String sourceNameOnly=pathPair.getSourceNameNoExtension();
        boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
        int lineOffset=line.indexOf(sourcePath);
        if (lineOffset > 0) {
          if (sourcePathHasSlash || line.charAt(lineOffset - 1) == '""') {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
        lineOffset=line.indexOf(sourceNameOnly);
        if (lineOffset > 0 && line.charAt(lineOffset - 1) == '""' && line.charAt(lineOffset + sourceNameOnly.length()) == '""') {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        String sourcePath=pathPair.getSourcePath().replace('\\','/');
        String sourceNameOnly=pathPair.getSourceNameNoExtension();
        boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
        int lineOffset=line.indexOf(sourcePath);
        if (lineOffset > 0) {
          boolean startsWithDQuote=line.charAt(lineOffset - 1) == '""';
          if (sourcePathHasSlash || startsWithDQuote) {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
        lineOffset=line.indexOf(sourceNameOnly);
        boolean startsWithDQuote=false;
        boolean endsWithDQuote=false;
        if (lineOffset > 0) {
          startsWithDQuote=line.charAt(lineOffset - 1) == '""';
          endsWithDQuote=line.charAt(lineOffset + sourceNameOnly.length()) == '""';
        }
        if (lineOffset > 0 && startsWithDQuote && endsWithDQuote) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.914273375080976
102018,"/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          String sourcePath=pathPair.getSourcePath().replace('\\','/');
          boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
          int lineOffset=line.indexOf(sourcePath);
          if (lineOffset < 0)           continue;
          if (sourcePathHasSlash || line.charAt(lineOffset - 1) == '""') {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}","/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  boolean isWindows=hasWindowsLineTerminator(nativeFile);
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          String sourcePath=pathPair.getSourcePath().replace('\\','/');
          boolean sourcePathHasSlash=sourcePath.indexOf('/') > -1;
          int lineOffset=line.indexOf(sourcePath);
          if (lineOffset < 0)           continue;
          if (sourcePathHasSlash || line.charAt(lineOffset - 1) == '""') {
            int offset=docOffset + lineOffset;
            ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}",0.9698220273407274
102019,"private void initExpectedResults(){
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
}","private void initExpectedResults(){
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
}",0.997026574986062
102020,"@Override public boolean requiresPassword(IConnectionProfile connectionProfile){
  Properties props=connectionProfile.getBaseProperties();
  String contextFactory=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (contextFactory != null && !contextFactory.equalsIgnoreCase(IWSProfileConstants.SecurityType.None.name())) {
    props.remove(ICredentialsCommon.USERNAME_PROP_ID);
    return true;
  }
  return false;
}","@Override public boolean requiresPassword(IConnectionProfile connectionProfile){
  Properties props=connectionProfile.getBaseProperties();
  String contextFactory=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (contextFactory != null & !contextFactory.isEmpty() && !contextFactory.equalsIgnoreCase(IWSProfileConstants.SecurityType.None.name())) {
    props.remove(ICredentialsCommon.USERNAME_PROP_ID);
    return true;
  }
  return false;
}",0.968181818181818
102021,"@Override public Properties getTeiidRelatedProperties(IConnectionProfile connectionProfile){
  Properties connectionProps=new Properties();
  Properties props=connectionProfile.getBaseProperties();
  String password=props.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
  if (password != null) {
    connectionProps.setProperty(ICredentialsCommon.PASSWORD_PROP_ID,password);
  }
  String url=readEndPointProperty(props);
  if (null != url) {
    connectionProps.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,url);
  }
  String contextFactory=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (null != contextFactory) {
    connectionProps.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,contextFactory);
  }
 else {
    connectionProps.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,SecurityType.None.name());
  }
  if (!connectionProps.getProperty(ICredentialsCommon.SECURITY_TYPE_ID).equals(SecurityType.None.name())) {
    String user=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
    if (null != user & !user.equals(""String_Node_Str"")) {
      connectionProps.setProperty(ICredentialsCommon.USERNAME_PROP_ID,user);
    }
  }
  connectionProps.setProperty(WS_CLASSNAME,WS_CONNECTION_FACTORY);
  return connectionProps;
}","@Override public Properties getTeiidRelatedProperties(IConnectionProfile connectionProfile){
  Properties connectionProps=new Properties();
  Properties props=connectionProfile.getBaseProperties();
  String password=props.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
  if (password != null) {
    connectionProps.setProperty(ICredentialsCommon.PASSWORD_PROP_ID,password);
  }
  String url=readEndPointProperty(props);
  if (null != url) {
    connectionProps.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,url);
  }
  String contextFactory=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (null != contextFactory & !contextFactory.isEmpty()) {
    connectionProps.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,contextFactory);
  }
 else {
    connectionProps.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,SecurityType.None.name());
  }
  if (!connectionProps.getProperty(ICredentialsCommon.SECURITY_TYPE_ID).equals(SecurityType.None.name())) {
    String user=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
    if (null != user & !user.equals(""String_Node_Str"")) {
      connectionProps.setProperty(ICredentialsCommon.USERNAME_PROP_ID,user);
    }
  }
  connectionProps.setProperty(WS_CLASSNAME,WS_CONNECTION_FACTORY);
  return connectionProps;
}",0.9889676910953508
102022,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
          fileChangeRootEdit.addChild(edit);
        }
        lineOffset=line.indexOf(pathPair.getSourceNameNoExtension());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
        lineOffset=line.indexOf(pathPair.getSourceNameNoExtension());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.9901800327332242
102023,"/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          int lineOffset=line.indexOf(pathPair.getSourcePath());
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}","/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}",0.9894982497082848
102024,"/** 
 * handler for convertAll Attributes Button pressed
 */
void changeAllColumnDatatypesPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.hasAttributeConversion()) {
      binding.acceptAttributeConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}","/** 
 * handler for convertAll Attributes Button pressed
 */
void changeAllColumnDatatypesPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.hasAttributeConversion()) {
      binding.acceptAttributeConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh();
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}",0.995991983967936
102025,"/** 
 * handler for convert Selected Sql Button pressed
 */
void convertSelectedSqlPressed(){
  Binding binding=getSelectedBinding();
  if (binding.canConvertSqlSymbol()) {
    binding.acceptSqlConversion();
  }
  updateSymbolConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}","/** 
 * handler for convert Selected Sql Button pressed
 */
void convertSelectedSqlPressed(){
  Binding binding=getSelectedBinding();
  if (binding.canConvertSqlSymbol()) {
    binding.acceptSqlConversion();
  }
  updateSymbolConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(binding);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}",0.986198243412798
102026,"/** 
 * handler for convert Selected Attribute Button pressed
 */
void convertSelectedAttrPressed(){
  Binding binding=getSelectedBinding();
  binding.setNewAttrDatatype(bindingListInput.getTargetDatatype(binding));
  updateAttributeConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}","/** 
 * handler for convert Selected Attribute Button pressed
 */
void convertSelectedAttrPressed(){
  Binding binding=getSelectedBinding();
  binding.setNewAttrDatatype(bindingListInput.getTargetDatatype(binding));
  updateAttributeConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(binding);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}",0.9864364981504316
102027,"/** 
 * handler for convertAll Sql Button pressed
 */
void changeAllColumnDatatypesButtonPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.canConvertSqlSymbol()) {
      binding.acceptSqlConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}","/** 
 * handler for convertAll Sql Button pressed
 */
void changeAllColumnDatatypesButtonPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.canConvertSqlSymbol()) {
      binding.acceptSqlConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh();
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}",0.9959100204498976
102028,"private void initExpectedResults(){
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_2,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
}","private void initExpectedResults(){
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
  addExpectedResult(""String_Node_Str"",VERSION_7_7_0,""String_Node_Str"");
  for (  ITeiidServerVersion version83 : VERSIONS_8_3) {
    addExpectedResult(""String_Node_Str"",version83,""String_Node_Str"");
  }
  for (  ITeiidServerVersion version84 : VERSIONS_8_4) {
    addExpectedResult(""String_Node_Str"",version84,""String_Node_Str"");
  }
}",0.997026574986062
102029,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
          fileChangeRootEdit.addChild(edit);
        }
        lineOffset=line.indexOf(pathPair.getSourceNameNoExtension());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateModelImportsElementLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  boolean isWindows=Platform.getOS().equals(Platform.WS_WIN32);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        StringBuilder sb=new StringBuilder(line);
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          docOffset+=line.length() + 1;
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
        lineOffset=line.indexOf(pathPair.getSourceNameNoExtension());
        if (lineOffset > 0) {
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourceNameNoExtension().length(),pathPair.getTargetNameNoExtension());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (isWindows) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.9901800327332242
102030,"/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          int lineOffset=line.indexOf(pathPair.getSourcePath());
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}","/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (!line.contains(MODEL_IMPORTS_ELEMENT_START)) {
        for (        PathPair pathPair : pathPairs) {
          if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
            continue;
          }
          int lineOffset=line.indexOf(pathPair.getSourcePath().replace('\\','/'));
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset;
          ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath().replace('\\','/'));
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
      if (Platform.getOS().equalsIgnoreCase(Platform.WS_WIN32)) {
        docOffset++;
      }
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}",0.9894982497082848
102031,"/** 
 * Analyzes this object's data values and sets the current <code>IStatus</code>
 */
public void validate(){
  if (isFlatFileLocalMode()) {
    if (this.fileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    ITeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
 else {
    if (this.xmlFileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
  if (getStatus().isOK() && viewModelLocation != null && sourceModelLocation != null) {
    if (viewModelLocation.segmentCount() > 0 && sourceModelLocation.segmentCount() > 0) {
      if (!(viewModelLocation.segment(0).equalsIgnoreCase(sourceModelLocation.segment(0)))) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"")));
      }
    }
  }
}","/** 
 * Analyzes this object's data values and sets the current <code>IStatus</code>
 */
public void validate(){
  if (isFlatFileLocalMode() || isFlatFileUrlMode()) {
    if (this.fileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    ITeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
 else {
    if (this.xmlFileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
  if (getStatus().isOK() && viewModelLocation != null && sourceModelLocation != null) {
    if (viewModelLocation.segmentCount() > 0 && sourceModelLocation.segmentCount() > 0) {
      if (!(viewModelLocation.segment(0).equalsIgnoreCase(sourceModelLocation.segment(0)))) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"")));
      }
    }
  }
}",0.9946123213867416
102032,"private boolean viewAlreadyExists(){
  if (!info.viewModelExists()) {
    return false;
  }
  IPath modelPath=new Path(viewModelFilePath.toOSString()).append(this.viewModelFileText.getText());
  if (!modelPath.toString().toUpperCase().endsWith(""String_Node_Str"")) {
    modelPath=modelPath.addFileExtension(""String_Node_Str"");
  }
  IResource viewModel=ModelerCore.getWorkspace().getRoot().getFile(modelPath);
  ModelResource smr=ModelUtilities.getModelResourceForIFile((IFile)viewModel,false);
  if (smr != null) {
    try {
      String existingName=fileInfo.getViewTableName();
      for (      Object obj : smr.getAllRootEObjects()) {
        EObject eObj=(EObject)obj;
        if (eObj instanceof BaseTable && existingName.equalsIgnoreCase(ModelObjectUtilities.getName(eObj))) {
          return true;
        }
      }
    }
 catch (    ModelWorkspaceException err) {
      Util.log(err);
    }
  }
  return false;
}","private boolean viewAlreadyExists(){
  if (info == null && !info.viewModelExists()) {
    return false;
  }
  IPath modelPath=new Path(viewModelFilePath.toOSString()).append(this.viewModelFileText.getText());
  if (!modelPath.toString().toUpperCase().endsWith(""String_Node_Str"")) {
    modelPath=modelPath.addFileExtension(""String_Node_Str"");
  }
  IResource viewModel=ModelerCore.getWorkspace().getRoot().getFile(modelPath);
  ModelResource smr=ModelUtilities.getModelResourceForIFile((IFile)viewModel,false);
  if (smr != null) {
    try {
      String existingName=fileInfo.getViewTableName();
      for (      Object obj : smr.getAllRootEObjects()) {
        EObject eObj=(EObject)obj;
        if (eObj instanceof BaseTable && existingName.equalsIgnoreCase(ModelObjectUtilities.getName(eObj))) {
          return true;
        }
      }
    }
 catch (    ModelWorkspaceException err) {
      Util.log(err);
    }
  }
  return false;
}",0.9913978494623656
102033,"private void synchronizeUI(){
  synchronizing=true;
  java.io.File dataFile=fileInfo.getDataFile();
  String fileName=dataFile.getName();
  selectedFileText.setText(fileName);
  if (this.info.getViewModelLocation() != null) {
    viewModelContainerText.setText(this.info.getViewModelLocation().makeRelative().toString());
  }
 else {
    this.viewModelContainerText.setText(StringUtilities.EMPTY_STRING);
  }
  if (this.info.getViewModelName() != null) {
    String viewModelName=this.info.getViewModelName();
    this.viewModelFileText.setText(viewModelName);
  }
 else {
    this.viewModelFileText.setText(StringUtilities.EMPTY_STRING);
  }
{
    final String viewTableName=this.fileInfo.getViewTableName();
    if (viewTableName != null) {
      if (!StringUtilities.equalsIgnoreCase(viewTableName,this.viewTableNameText.getText())) {
        this.viewTableNameText.setText(viewTableName);
      }
    }
 else {
      this.viewTableNameText.setText(StringUtilities.EMPTY_STRING);
    }
  }
  synchronizing=false;
}","private void synchronizeUI(){
  synchronizing=true;
  java.io.File dataFile=fileInfo.getDataFile();
  String fileName=dataFile.getName();
  selectedFileText.setText(fileName);
  if (this.info.getViewModelLocation() != null) {
    viewModelContainerText.setText(this.info.getViewModelLocation().makeRelative().toString());
    this.viewModelFilePath=this.info.getViewModelLocation();
  }
 else {
    this.viewModelContainerText.setText(StringUtilities.EMPTY_STRING);
  }
  if (this.info.getViewModelName() != null) {
    String viewModelName=this.info.getViewModelName();
    this.viewModelFileText.setText(viewModelName);
  }
 else {
    this.viewModelFileText.setText(StringUtilities.EMPTY_STRING);
  }
{
    final String viewTableName=this.fileInfo.getViewTableName();
    if (viewTableName != null) {
      if (!StringUtilities.equalsIgnoreCase(viewTableName,this.viewTableNameText.getText())) {
        this.viewTableNameText.setText(viewTableName);
      }
    }
 else {
      this.viewTableNameText.setText(StringUtilities.EMPTY_STRING);
    }
  }
  synchronizing=false;
}",0.9708830548926014
102034,"/** 
 * handler for convertAll Attributes Button pressed
 */
void changeAllColumnDatatypesPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.hasAttributeConversion()) {
      binding.acceptAttributeConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}","/** 
 * handler for convertAll Attributes Button pressed
 */
void changeAllColumnDatatypesPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.hasAttributeConversion()) {
      binding.acceptAttributeConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh();
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}",0.995991983967936
102035,"/** 
 * handler for convert Selected Sql Button pressed
 */
void convertSelectedSqlPressed(){
  Binding binding=getSelectedBinding();
  if (binding.canConvertSqlSymbol()) {
    binding.acceptSqlConversion();
  }
  updateSymbolConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}","/** 
 * handler for convert Selected Sql Button pressed
 */
void convertSelectedSqlPressed(){
  Binding binding=getSelectedBinding();
  if (binding.canConvertSqlSymbol()) {
    binding.acceptSqlConversion();
  }
  updateSymbolConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(binding);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}",0.986198243412798
102036,"/** 
 * handler for convert Selected Attribute Button pressed
 */
void convertSelectedAttrPressed(){
  Binding binding=getSelectedBinding();
  binding.setNewAttrDatatype(bindingListInput.getTargetDatatype(binding));
  updateAttributeConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}","/** 
 * handler for convert Selected Attribute Button pressed
 */
void convertSelectedAttrPressed(){
  Binding binding=getSelectedBinding();
  binding.setNewAttrDatatype(bindingListInput.getTargetDatatype(binding));
  updateAttributeConversionPanel(binding);
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(binding);
  updateRowColors();
  updateMessageArea();
  selectBinding(binding);
}",0.9864364981504316
102037,"/** 
 * handler for convertAll Sql Button pressed
 */
void changeAllColumnDatatypesButtonPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.canConvertSqlSymbol()) {
      binding.acceptSqlConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh(true);
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}","/** 
 * handler for convertAll Sql Button pressed
 */
void changeAllColumnDatatypesButtonPressed(){
  for (int i=0; i < bindingListInput.getBindingList().size(); i++) {
    Binding binding=bindingListInput.getBindingList().get(i);
    if (binding.hasTypeConflict() && binding.canConvertSqlSymbol()) {
      binding.acceptSqlConversion();
    }
  }
  bindingListInput.datatypeChanged();
  bindingTableViewer.refresh();
  updateRowColors();
  updateMessageArea();
  selectFirstBinding();
}",0.9959100204498976
102038,"/** 
 * Analyzes this object's data values and sets the current <code>IStatus</code>
 */
public void validate(){
  if (isFlatFileLocalMode()) {
    if (this.fileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    ITeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
 else {
    if (this.xmlFileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
  if (getStatus().isOK() && viewModelLocation != null && sourceModelLocation != null) {
    if (viewModelLocation.segmentCount() > 0 && sourceModelLocation.segmentCount() > 0) {
      if (!(viewModelLocation.segment(0).equalsIgnoreCase(sourceModelLocation.segment(0)))) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"")));
      }
    }
  }
}","/** 
 * Analyzes this object's data values and sets the current <code>IStatus</code>
 */
public void validate(){
  if (isFlatFileLocalMode() || isFlatFileUrlMode()) {
    if (this.fileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    ITeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidMetadataFileInfo info : fileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
 else {
    if (this.xmlFileInfoMap.isEmpty()) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    boolean noneProcessed=true;
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess()) {
        noneProcessed=false;
      }
    }
    if (noneProcessed) {
      setStatus(new Status(IStatus.ERROR,PLUGIN_ID,getString(""String_Node_Str"")));
      return;
    }
    for (    TeiidXmlFileInfo info : xmlFileInfoMap.values()) {
      if (info.doProcess() && info.getStatus().getSeverity() > IStatus.WARNING) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"",info.getDataFile().getName())));
        return;
      }
    }
    setStatus(Status.OK_STATUS);
  }
  if (getStatus().isOK() && viewModelLocation != null && sourceModelLocation != null) {
    if (viewModelLocation.segmentCount() > 0 && sourceModelLocation.segmentCount() > 0) {
      if (!(viewModelLocation.segment(0).equalsIgnoreCase(sourceModelLocation.segment(0)))) {
        setStatus(new Status(IStatus.ERROR,PLUGIN_ID,Util.getString(I18N_PREFIX + ""String_Node_Str"")));
      }
    }
  }
}",0.9946123213867416
102039,"private boolean viewAlreadyExists(){
  if (!info.viewModelExists()) {
    return false;
  }
  IPath modelPath=new Path(viewModelFilePath.toOSString()).append(this.viewModelFileText.getText());
  if (!modelPath.toString().toUpperCase().endsWith(""String_Node_Str"")) {
    modelPath=modelPath.addFileExtension(""String_Node_Str"");
  }
  IResource viewModel=ModelerCore.getWorkspace().getRoot().getFile(modelPath);
  ModelResource smr=ModelUtilities.getModelResourceForIFile((IFile)viewModel,false);
  if (smr != null) {
    try {
      String existingName=fileInfo.getViewTableName();
      for (      Object obj : smr.getAllRootEObjects()) {
        EObject eObj=(EObject)obj;
        if (eObj instanceof BaseTable && existingName.equalsIgnoreCase(ModelObjectUtilities.getName(eObj))) {
          return true;
        }
      }
    }
 catch (    ModelWorkspaceException err) {
      Util.log(err);
    }
  }
  return false;
}","private boolean viewAlreadyExists(){
  if (info == null && !info.viewModelExists()) {
    return false;
  }
  IPath modelPath=new Path(viewModelFilePath.toOSString()).append(this.viewModelFileText.getText());
  if (!modelPath.toString().toUpperCase().endsWith(""String_Node_Str"")) {
    modelPath=modelPath.addFileExtension(""String_Node_Str"");
  }
  IResource viewModel=ModelerCore.getWorkspace().getRoot().getFile(modelPath);
  ModelResource smr=ModelUtilities.getModelResourceForIFile((IFile)viewModel,false);
  if (smr != null) {
    try {
      String existingName=fileInfo.getViewTableName();
      for (      Object obj : smr.getAllRootEObjects()) {
        EObject eObj=(EObject)obj;
        if (eObj instanceof BaseTable && existingName.equalsIgnoreCase(ModelObjectUtilities.getName(eObj))) {
          return true;
        }
      }
    }
 catch (    ModelWorkspaceException err) {
      Util.log(err);
    }
  }
  return false;
}",0.9913978494623656
102040,"private void synchronizeUI(){
  synchronizing=true;
  java.io.File dataFile=fileInfo.getDataFile();
  String fileName=dataFile.getName();
  selectedFileText.setText(fileName);
  if (this.info.getViewModelLocation() != null) {
    viewModelContainerText.setText(this.info.getViewModelLocation().makeRelative().toString());
  }
 else {
    this.viewModelContainerText.setText(StringUtilities.EMPTY_STRING);
  }
  if (this.info.getViewModelName() != null) {
    String viewModelName=this.info.getViewModelName();
    this.viewModelFileText.setText(viewModelName);
  }
 else {
    this.viewModelFileText.setText(StringUtilities.EMPTY_STRING);
  }
{
    final String viewTableName=this.fileInfo.getViewTableName();
    if (viewTableName != null) {
      if (!StringUtilities.equalsIgnoreCase(viewTableName,this.viewTableNameText.getText())) {
        this.viewTableNameText.setText(viewTableName);
      }
    }
 else {
      this.viewTableNameText.setText(StringUtilities.EMPTY_STRING);
    }
  }
  synchronizing=false;
}","private void synchronizeUI(){
  synchronizing=true;
  java.io.File dataFile=fileInfo.getDataFile();
  String fileName=dataFile.getName();
  selectedFileText.setText(fileName);
  if (this.info.getViewModelLocation() != null) {
    viewModelContainerText.setText(this.info.getViewModelLocation().makeRelative().toString());
    this.viewModelFilePath=this.info.getViewModelLocation();
  }
 else {
    this.viewModelContainerText.setText(StringUtilities.EMPTY_STRING);
  }
  if (this.info.getViewModelName() != null) {
    String viewModelName=this.info.getViewModelName();
    this.viewModelFileText.setText(viewModelName);
  }
 else {
    this.viewModelFileText.setText(StringUtilities.EMPTY_STRING);
  }
{
    final String viewTableName=this.fileInfo.getViewTableName();
    if (viewTableName != null) {
      if (!StringUtilities.equalsIgnoreCase(viewTableName,this.viewTableNameText.getText())) {
        this.viewTableNameText.setText(viewTableName);
      }
    }
 else {
      this.viewTableNameText.setText(StringUtilities.EMPTY_STRING);
    }
  }
  synchronizing=false;
}",0.9708830548926014
102041,"@Since(Version.TEIID_8_9) public static Datatype setDataType(String type,BaseColumn column,Map<String,Datatype> dataTypes,boolean allowNull){
  int arrayDimensions=0;
  while (DataTypeManagerService.isArrayType(type)) {
    arrayDimensions++;
    type=type.substring(0,type.length() - 2);
  }
  Datatype datatype=dataTypes.get(type);
  if (datatype == null && (!allowNull || !DataTypeManagerService.DefaultDataTypes.NULL.equals(type))) {
    throw new RuntimeException(Messages.gs(Messages.TEIID.TEIID60009,type));
  }
  column.setDatatype(datatype,true,arrayDimensions);
  return datatype;
}","@Since(Version.TEIID_8_9) public static Datatype setDataType(String type,BaseColumn column,Map<String,Datatype> dataTypes,boolean allowNull){
  int arrayDimensions=0;
  while (DataTypeManagerService.isArrayType(type)) {
    arrayDimensions++;
    type=type.substring(0,type.length() - 2);
  }
  Datatype datatype=dataTypes.get(type);
  if (datatype == null && (!allowNull || !DataTypeManagerService.DefaultDataTypes.NULL.getId().equals(type))) {
    throw new RuntimeException(Messages.gs(Messages.TEIID.TEIID60009,type));
  }
  column.setDatatype(datatype,true,arrayDimensions);
  return datatype;
}",0.9932885906040269
102042,"/** 
 * Get the conversions that are needed to call the named function with arguments of the given type.  In the case of an exact match, the list will contain all nulls. In other cases the list will contain one or more non-null values where the value is a conversion function that can be used to convert to the proper types for executing the function.
 * @param name Name of function
 * @param returnType
 * @param args 
 * @param types Existing types passed to the function
 * @return Null if no conversion could be found, otherwise an array of conversionsto apply to each argument.  The list should match 1-to-1 with the parameters. Parameters that do not need a conversion are null; parameters that do are FunctionDescriptors.
 * @throws Exception
 */
public ConversionResult determineNecessaryConversions(String name,Class<?> returnType,Expression[] args,Class<?>[] types,boolean hasUnknownType) throws Exception {
  if (types.length == 0) {
    if (getTeiidVersion().isLessThan(Version.TEIID_8_0.get()))     return new ConversionResult(null);
    return null;
  }
  final Collection<FunctionMethod> functionMethods=new LinkedList<FunctionMethod>();
  functionMethods.addAll(this.systemFunctions.findFunctionMethods(name,types.length));
  if (this.userFunctions != null) {
    for (    FunctionTree tree : this.userFunctions) {
      functionMethods.addAll(tree.findFunctionMethods(name,types.length));
    }
  }
  int bestScore=Integer.MAX_VALUE;
  boolean ambiguous=false;
  FunctionMethod result=null;
  boolean isSystem=false;
  boolean narrowing=false;
  outer:   for (  FunctionMethod nextMethod : functionMethods) {
    int currentScore=0;
    boolean nextNarrowing=false;
    final List<FunctionParameter> methodTypes=nextMethod.getInputParameters();
    for (int i=0; i < types.length; i++) {
      final String tmpTypeName=methodTypes.get(Math.min(i,methodTypes.size() - 1)).getType();
      Class<?> targetType=getDataTypeManager().getDataTypeClass(tmpTypeName);
      Class<?> sourceType=types[i];
      if (sourceType == null) {
        currentScore++;
        continue;
      }
      if (sourceType.isArray() && targetType.isArray() && sourceType.getComponentType().equals(targetType.getComponentType())) {
        currentScore++;
        continue;
      }
      if (sourceType.isArray()) {
        if (isVarArgArrayParam(nextMethod,types,i,targetType)) {
          continue;
        }
        sourceType=DataTypeManagerService.DefaultDataTypes.OBJECT.getTypeClass();
      }
      try {
        Transform t=getConvertFunctionDescriptor(sourceType,targetType);
        if (t != null) {
          if (t.isExplicit()) {
            if (!(args[i] instanceof Constant) || ResolverUtil.convertConstant(getDataTypeManager().getDataTypeName(sourceType),tmpTypeName,(Constant)args[i]) == null) {
              continue outer;
            }
            nextNarrowing=true;
            currentScore++;
          }
 else {
            currentScore++;
          }
        }
      }
 catch (      Exception e) {
        continue outer;
      }
    }
    if (currentScore > bestScore) {
      continue;
    }
    if (hasUnknownType) {
      if (returnType != null) {
        try {
          Transform t=getConvertFunctionDescriptor(getDataTypeManager().getDataTypeClass(nextMethod.getOutputParameter().getType()),returnType);
          if (t != null) {
            if (t.isExplicit()) {
              currentScore+=types.length + 1;
              nextNarrowing=true;
            }
 else {
              currentScore++;
            }
          }
        }
 catch (        Exception e) {
          currentScore+=(types.length * types.length);
        }
      }
    }
    if (nextNarrowing && result != null && !narrowing) {
      continue;
    }
    boolean useNext=false;
    if (!nextNarrowing && narrowing) {
      useNext=true;
    }
    boolean isSystemNext=nextMethod.getParent() == null || INTERNAL_SCHEMAS.contains(nextMethod.getParent().getName());
    if ((isSystem && isSystemNext) || (!isSystem && !isSystemNext && result != null)) {
      int partCount=partCount(result.getName());
      int nextPartCount=partCount(nextMethod.getName());
      if (partCount < nextPartCount) {
        continue outer;
      }
      if (nextPartCount < partCount) {
        useNext=true;
      }
    }
 else     if (isSystemNext) {
      useNext=true;
    }
    if (currentScore == bestScore && !useNext) {
      ambiguous=true;
      boolean useCurrent=false;
      List<FunctionParameter> bestParams=result.getInputParameters();
      for (int j=0; j < types.length; j++) {
        String t1=bestParams.get(Math.min(j,bestParams.size() - 1)).getType();
        String t2=methodTypes.get((Math.min(j,methodTypes.size() - 1))).getType();
        if (types[j] == null || t1.equals(t2)) {
          continue;
        }
        String commonType=ResolverUtil.getCommonType(teiidVersion,new String[]{t1,t2});
        if (commonType == null) {
          continue outer;
        }
        if (commonType.equals(t1)) {
          if (!useCurrent) {
            useNext=true;
          }
        }
 else         if (commonType.equals(t2)) {
          if (!useNext) {
            useCurrent=true;
          }
        }
 else {
          continue outer;
        }
      }
      if (useCurrent) {
        ambiguous=false;
      }
 else {
        String sysName=result.getProperty(FunctionMethod.SYSTEM_NAME,false);
        String sysNameOther=nextMethod.getProperty(FunctionMethod.SYSTEM_NAME,false);
        if (sysName != null && sysName.equalsIgnoreCase(sysNameOther)) {
          ambiguous=false;
        }
      }
    }
    if (currentScore < bestScore || useNext) {
      ambiguous=false;
      if (currentScore == 0 && isSystemNext) {
        return new ConversionResult(nextMethod);
      }
      bestScore=currentScore;
      result=nextMethod;
      isSystem=isSystemNext;
      narrowing=nextNarrowing;
    }
  }
  if (ambiguous) {
    throw new Exception();
  }
  ConversionResult cr=new ConversionResult(result);
  if (result != null) {
    cr.needsConverion=(bestScore != 0);
  }
  return cr;
}","/** 
 * Get the conversions that are needed to call the named function with arguments of the given type.  In the case of an exact match, the list will contain all nulls. In other cases the list will contain one or more non-null values where the value is a conversion function that can be used to convert to the proper types for executing the function.
 * @param name Name of function
 * @param returnType
 * @param args 
 * @param types Existing types passed to the function
 * @param hasUnknownType
 * @return Null if no conversion could be found, otherwise an array of conversionsto apply to each argument.  The list should match 1-to-1 with the parameters. Parameters that do not need a conversion are null; parameters that do are FunctionDescriptors.
 * @throws Exception
 */
public ConversionResult determineNecessaryConversions(String name,Class<?> returnType,Expression[] args,Class<?>[] types,boolean hasUnknownType) throws Exception {
  final Collection<FunctionMethod> functionMethods=new LinkedList<FunctionMethod>();
  functionMethods.addAll(this.systemFunctions.findFunctionMethods(name,types.length));
  if (this.userFunctions != null) {
    for (    FunctionTree tree : this.userFunctions) {
      functionMethods.addAll(tree.findFunctionMethods(name,types.length));
    }
  }
  int bestScore=Integer.MAX_VALUE;
  boolean ambiguous=false;
  FunctionMethod result=null;
  boolean isSystem=false;
  boolean narrowing=false;
  outer:   for (  FunctionMethod nextMethod : functionMethods) {
    int currentScore=0;
    boolean nextNarrowing=false;
    final List<FunctionParameter> methodTypes=nextMethod.getInputParameters();
    for (int i=0; i < types.length; i++) {
      final String tmpTypeName=methodTypes.get(Math.min(i,methodTypes.size() - 1)).getType();
      Class<?> targetType=getDataTypeManager().getDataTypeClass(tmpTypeName);
      Class<?> sourceType=types[i];
      if (sourceType == null) {
        currentScore++;
        continue;
      }
      if (sourceType.isArray() && targetType.isArray() && sourceType.getComponentType().equals(targetType.getComponentType())) {
        currentScore++;
        continue;
      }
      if (sourceType.isArray()) {
        if (isVarArgArrayParam(nextMethod,types,i,targetType)) {
          continue;
        }
        sourceType=DataTypeManagerService.DefaultDataTypes.OBJECT.getTypeClass();
      }
      try {
        Transform t=getConvertFunctionDescriptor(sourceType,targetType);
        if (t != null) {
          if (t.isExplicit()) {
            if (!(args[i] instanceof Constant) || ResolverUtil.convertConstant(getDataTypeManager().getDataTypeName(sourceType),tmpTypeName,(Constant)args[i]) == null) {
              continue outer;
            }
            nextNarrowing=true;
            currentScore++;
          }
 else {
            currentScore++;
          }
        }
      }
 catch (      Exception e) {
        continue outer;
      }
    }
    if (currentScore > bestScore) {
      continue;
    }
    if (hasUnknownType) {
      if (returnType != null) {
        try {
          Transform t=getConvertFunctionDescriptor(getDataTypeManager().getDataTypeClass(nextMethod.getOutputParameter().getType()),returnType);
          if (t != null) {
            if (t.isExplicit()) {
              currentScore+=types.length + 1;
              nextNarrowing=true;
            }
 else {
              currentScore++;
            }
          }
        }
 catch (        Exception e) {
          currentScore+=(types.length * types.length);
        }
      }
    }
    if (nextNarrowing && result != null && !narrowing) {
      continue;
    }
    boolean useNext=false;
    if (!nextNarrowing && narrowing) {
      useNext=true;
    }
    boolean isSystemNext=nextMethod.getParent() == null || INTERNAL_SCHEMAS.contains(nextMethod.getParent().getName());
    if ((isSystem && isSystemNext) || (!isSystem && !isSystemNext && result != null)) {
      int partCount=partCount(result.getName());
      int nextPartCount=partCount(nextMethod.getName());
      if (partCount < nextPartCount) {
        continue outer;
      }
      if (nextPartCount < partCount) {
        useNext=true;
      }
    }
 else     if (isSystemNext) {
      useNext=true;
    }
    if (currentScore == bestScore && !useNext) {
      ambiguous=true;
      boolean useCurrent=false;
      List<FunctionParameter> bestParams=result.getInputParameters();
      for (int j=0; j < types.length; j++) {
        String t1=bestParams.get(Math.min(j,bestParams.size() - 1)).getType();
        String t2=methodTypes.get((Math.min(j,methodTypes.size() - 1))).getType();
        if (types[j] == null || t1.equals(t2)) {
          continue;
        }
        String commonType=ResolverUtil.getCommonType(teiidVersion,new String[]{t1,t2});
        if (commonType == null) {
          continue outer;
        }
        if (commonType.equals(t1)) {
          if (!useCurrent) {
            useNext=true;
          }
        }
 else         if (commonType.equals(t2)) {
          if (!useNext) {
            useCurrent=true;
          }
        }
 else {
          continue outer;
        }
      }
      if (useCurrent) {
        ambiguous=false;
      }
 else {
        String sysName=result.getProperty(FunctionMethod.SYSTEM_NAME,false);
        String sysNameOther=nextMethod.getProperty(FunctionMethod.SYSTEM_NAME,false);
        if (sysName != null && sysName.equalsIgnoreCase(sysNameOther)) {
          ambiguous=false;
        }
      }
    }
    if (currentScore < bestScore || useNext) {
      ambiguous=false;
      if (currentScore == 0 && isSystemNext) {
        return new ConversionResult(nextMethod);
      }
      bestScore=currentScore;
      result=nextMethod;
      isSystem=isSystemNext;
      narrowing=nextNarrowing;
    }
  }
  if (ambiguous) {
    throw new Exception();
  }
  ConversionResult cr=new ConversionResult(result);
  if (result != null) {
    cr.needsConverion=(bestScore != 0);
  }
  return cr;
}",0.9854928293127746
102043,"public static final void validateFunctionMethods(ITeiidServerVersion teiidVersion,Collection<FunctionMethod> methods,ValidatorReport report,Map<String,Datatype> runtimeTypeMap){
  if (runtimeTypeMap == null) {
    runtimeTypeMap=SystemMetadata.getInstance(teiidVersion).getRuntimeTypeMap();
  }
  if (methods != null) {
    for (    FunctionMethod method : methods) {
      validateFunctionMethod(teiidVersion,method,report,runtimeTypeMap);
    }
  }
}","public static final void validateFunctionMethods(ITeiidServerVersion teiidVersion,Collection<FunctionMethod> methods,ValidatorReport report,Map<String,Datatype> runtimeTypeMap){
  if (runtimeTypeMap == null && teiidVersion != null && teiidVersion.isGreaterThanOrEqualTo(TeiidServerVersion.Version.TEIID_8_0.get())) {
    runtimeTypeMap=SystemMetadata.getInstance(teiidVersion).getRuntimeTypeMap();
  }
  if (methods != null) {
    for (    FunctionMethod method : methods) {
      validateFunctionMethod(teiidVersion,method,report,runtimeTypeMap);
    }
  }
}",0.8941641938674579
102044,"/** 
 * Determine whether a FunctionMethod is valid.  The following items are validated: <UL> <LI>Validate method name</LI> <LI>Validate description</LI> <LI>Validate category</LI> <LI>Validate invocation method</LI> <LI>Validate all input parameters</LI> <LI>Validate output parameter</LI> </UL>
 * @param teiidVersion teiid version
 * @param method The method to validate
 * @param report The report to update during validation
 * @param runtimeTypeMap runtime type map
 */
public static final void validateFunctionMethod(ITeiidServerVersion teiidVersion,FunctionMethod method,ValidatorReport report,Map<String,Datatype> runtimeTypeMap){
  if (method == null) {
    updateReport(report,method,Messages.getString(Messages.ERR.ERR_015_001_0052,""String_Node_Str""));
    return;
  }
  try {
    validateName(teiidVersion,method.getName());
    validateDescription(method.getDescription());
    validateCategory(method.getCategory());
    validateInvocationMethod(method.getInvocationClass(),method.getInvocationMethod(),method.getPushdown());
    List<FunctionParameter> params=method.getInputParameters();
    if (params != null && !params.isEmpty()) {
      for (int i=0; i < params.size(); i++) {
        FunctionParameter param=params.get(i);
        validateFunctionParameter(teiidVersion,param);
        param.setPosition(i + 1);
        MetadataFactory.setDataType(param.getRuntimeType(),param,runtimeTypeMap,true);
        param.getUUID();
      }
    }
    validateFunctionParameter(teiidVersion,method.getOutputParameter());
    method.getOutputParameter().setPosition(0);
    MetadataFactory.setDataType(method.getOutputParameter().getRuntimeType(),method.getOutputParameter(),runtimeTypeMap,true);
  }
 catch (  Exception e) {
    updateReport(report,method,e.getMessage());
  }
}","/** 
 * Determine whether a FunctionMethod is valid.  The following items are validated: <UL> <LI>Validate method name</LI> <LI>Validate description</LI> <LI>Validate category</LI> <LI>Validate invocation method</LI> <LI>Validate all input parameters</LI> <LI>Validate output parameter</LI> </UL>
 * @param teiidVersion teiid version
 * @param method The method to validate
 * @param report The report to update during validation
 * @param runtimeTypeMap runtime type map
 */
public static final void validateFunctionMethod(ITeiidServerVersion teiidVersion,FunctionMethod method,ValidatorReport report,Map<String,Datatype> runtimeTypeMap){
  if (method == null) {
    updateReport(report,method,Messages.getString(Messages.ERR.ERR_015_001_0052,""String_Node_Str""));
    return;
  }
  try {
    validateName(teiidVersion,method.getName());
    validateDescription(method.getDescription());
    validateCategory(method.getCategory());
    validateInvocationMethod(method.getInvocationClass(),method.getInvocationMethod(),method.getPushdown());
    List<FunctionParameter> params=method.getInputParameters();
    if (params != null && !params.isEmpty()) {
      for (int i=0; i < params.size(); i++) {
        FunctionParameter param=params.get(i);
        validateFunctionParameter(teiidVersion,param);
        if (teiidVersion.isGreaterThanOrEqualTo(TeiidServerVersion.Version.TEIID_8_0.get())) {
          param.setPosition(i + 1);
          MetadataFactory.setDataType(param.getRuntimeType(),param,runtimeTypeMap,true);
          param.getUUID();
        }
      }
    }
    validateFunctionParameter(teiidVersion,method.getOutputParameter());
    if (teiidVersion.isGreaterThanOrEqualTo(TeiidServerVersion.Version.TEIID_8_0.get())) {
      method.getOutputParameter().setPosition(0);
      MetadataFactory.setDataType(method.getOutputParameter().getRuntimeType(),method.getOutputParameter(),runtimeTypeMap,true);
    }
  }
 catch (  Exception e) {
    updateReport(report,method,e.getMessage());
  }
}",0.938818565400844
102045,"/** 
 * Resolve function such that all functions are resolved and type-safe.
 */
void resolveFunction(Function function,FunctionLibrary library) throws Exception {
  if (function.getFunctionDescriptor() != null) {
    return;
  }
  boolean hasArgWithoutType=false;
  Expression[] args=function.getArgs();
  Class<?>[] types=new Class[args.length];
  for (int i=0; i < args.length; i++) {
    types[i]=args[i].getType();
    if (types[i] == null) {
      if (!(args[i] instanceof Reference)) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30067,new Object[]{args[i],function}));
      }
      hasArgWithoutType=true;
    }
  }
  if (FunctionLibrary.isConvert(function) && hasArgWithoutType) {
    Constant constant=(Constant)function.getArg(1);
    Class<?> type=getDataTypeManager().getDataTypeClass((String)constant.getValue());
    setDesiredType(function.getArg(0),type,function);
    types[0]=type;
    hasArgWithoutType=false;
  }
  List<FunctionDescriptor> fds;
  try {
    fds=findWithImplicitConversions(library,function,args,types,hasArgWithoutType);
    if (fds.isEmpty()) {
      if (!library.hasFunctionMethod(function.getName(),args.length)) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30068,function));
      }
      if (hasArgWithoutType) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30069,function));
      }
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30070,function));
    }
    if (fds.size() > 1) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31150,function));
    }
  }
 catch (  Exception e) {
    if (hasArgWithoutType) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30069,function));
    }
    throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31150,function));
  }
  FunctionDescriptor fd=fds.get(0);
  if (fd.getMethod().isVarArgs() && fd.getTypes().length == types.length && library.isVarArgArrayParam(fd.getMethod(),types,types.length - 1,fd.getTypes()[types.length - 1])) {
    fd=fd.clone();
    fd.setCalledWithVarArgArrayParam(true);
  }
  if (fd.isSystemFunction(IFunctionLibrary.FunctionName.CONVERT) || fd.isSystemFunction(IFunctionLibrary.FunctionName.CAST)) {
    String dataType=(String)((Constant)args[1]).getValue();
    Class<?> dataTypeClass=getDataTypeManager().getDataTypeClass(dataType);
    fd=library.findTypedConversionFunction(args[0].getType(),dataTypeClass);
    Class<?> srcTypeClass=args[0].getType();
    if (srcTypeClass != null && dataTypeClass != null && !srcTypeClass.equals(dataTypeClass) && !getDataTypeManager().isTransformable(srcTypeClass,dataTypeClass)) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30071,new Object[]{getDataTypeManager().getDataTypeName(srcTypeClass),dataType}));
    }
  }
 else   if (fd.isSystemFunction(IFunctionLibrary.FunctionName.LOOKUP)) {
    ResolverUtil.ResolvedLookup lookup=ResolverUtil.resolveLookup(function,metadata);
    fd=library.copyFunctionChangeReturnType(fd,lookup.getReturnElement().getType());
  }
 else   if (fd.isSystemFunction(IFunctionLibrary.FunctionName.ARRAY_GET) && args[0].getType().isArray()) {
    if (args[0].getType().isArray()) {
      fd=library.copyFunctionChangeReturnType(fd,args[0].getType().getComponentType());
    }
 else {
      if (function.getType() != null) {
        setDesiredType(args[0],function.getType(),function);
      }
      if (args[0].getType() != DataTypeManagerService.DefaultDataTypes.OBJECT.getTypeClass()) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31145,getDataTypeManager().getDataTypeName(args[0].getType()),function));
      }
    }
  }
 else   if (Boolean.valueOf(fd.getMethod().getProperty(TEIID_PASS_THROUGH_TYPE,false))) {
    fd=library.copyFunctionChangeReturnType(fd,args[0].getType());
  }
  function.setFunctionDescriptor(fd);
  function.setType(fd.getReturnType());
  if (CoreConstants.SYSTEM_MODEL.equals(fd.getSchema()) && StringUtil.startsWithIgnoreCase(function.getName(),SYS_PREFIX)) {
    function.setName(function.getName().substring(SYS_PREFIX.length()));
  }
}","/** 
 * Resolve function such that all functions are resolved and type-safe.
 */
void resolveFunction(Function function,FunctionLibrary library) throws Exception {
  if (function.getFunctionDescriptor() != null) {
    return;
  }
  boolean hasArgWithoutType=false;
  Expression[] args=function.getArgs();
  Class<?>[] types=new Class[args.length];
  for (int i=0; i < args.length; i++) {
    types[i]=args[i].getType();
    if (types[i] == null) {
      if (!(args[i] instanceof Reference)) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30067,new Object[]{args[i],function}));
      }
      hasArgWithoutType=true;
    }
  }
  if (FunctionLibrary.isConvert(function) && hasArgWithoutType) {
    Constant constant=(Constant)function.getArg(1);
    Class<?> type=getDataTypeManager().getDataTypeClass((String)constant.getValue());
    setDesiredType(function.getArg(0),type,function);
    types[0]=type;
    hasArgWithoutType=false;
  }
  List<FunctionDescriptor> fds;
  try {
    fds=findWithImplicitConversions(library,function,args,types,hasArgWithoutType);
    if (fds.isEmpty()) {
      if (!library.hasFunctionMethod(function.getName(),args.length)) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30068,function));
      }
      if (hasArgWithoutType) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30069,function));
      }
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30070,function));
    }
    if (fds.size() > 1) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31150,function));
    }
  }
 catch (  Exception e) {
    if (e instanceof QueryResolverException)     throw e;
    if (hasArgWithoutType) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30069,function));
    }
    throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31150,function));
  }
  FunctionDescriptor fd=fds.get(0);
  if (fd.getMethod().isVarArgs() && fd.getTypes().length == types.length && library.isVarArgArrayParam(fd.getMethod(),types,types.length - 1,fd.getTypes()[types.length - 1])) {
    fd=fd.clone();
    fd.setCalledWithVarArgArrayParam(true);
  }
  if (fd.isSystemFunction(IFunctionLibrary.FunctionName.CONVERT) || fd.isSystemFunction(IFunctionLibrary.FunctionName.CAST)) {
    String dataType=(String)((Constant)args[1]).getValue();
    Class<?> dataTypeClass=getDataTypeManager().getDataTypeClass(dataType);
    fd=library.findTypedConversionFunction(args[0].getType(),dataTypeClass);
    Class<?> srcTypeClass=args[0].getType();
    if (srcTypeClass != null && dataTypeClass != null && !srcTypeClass.equals(dataTypeClass) && !getDataTypeManager().isTransformable(srcTypeClass,dataTypeClass)) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30071,new Object[]{getDataTypeManager().getDataTypeName(srcTypeClass),dataType}));
    }
  }
 else   if (fd.isSystemFunction(IFunctionLibrary.FunctionName.LOOKUP)) {
    ResolverUtil.ResolvedLookup lookup=ResolverUtil.resolveLookup(function,metadata);
    fd=library.copyFunctionChangeReturnType(fd,lookup.getReturnElement().getType());
  }
 else   if (fd.isSystemFunction(IFunctionLibrary.FunctionName.ARRAY_GET) && args[0].getType().isArray()) {
    if (args[0].getType().isArray()) {
      fd=library.copyFunctionChangeReturnType(fd,args[0].getType().getComponentType());
    }
 else {
      if (function.getType() != null) {
        setDesiredType(args[0],function.getType(),function);
      }
      if (args[0].getType() != DataTypeManagerService.DefaultDataTypes.OBJECT.getTypeClass()) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID31145,getDataTypeManager().getDataTypeName(args[0].getType()),function));
      }
    }
  }
 else   if (Boolean.valueOf(fd.getMethod().getProperty(TEIID_PASS_THROUGH_TYPE,false))) {
    fd=library.copyFunctionChangeReturnType(fd,args[0].getType());
  }
  function.setFunctionDescriptor(fd);
  function.setType(fd.getReturnType());
  if (CoreConstants.SYSTEM_MODEL.equals(fd.getSchema()) && StringUtil.startsWithIgnoreCase(function.getName(),SYS_PREFIX)) {
    function.setName(function.getName().substring(SYS_PREFIX.length()));
  }
}",0.993103448275862
102046,"/** 
 * Find possible matches based on implicit conversions of the arguments. NOTE: This method has the side-effect of explicitly inserting conversions into the function arguments, and thereby changing the structure of the function call.
 * @param library
 * @param function
 * @param types
 * @return
 * @throws Exception 
 * @since 4.3
 */
private List<FunctionDescriptor> findWithImplicitConversions(FunctionLibrary library,Function function,Expression[] args,Class<?>[] types,boolean hasArgWithoutType) throws Exception {
  ConversionResult cr=library.determineNecessaryConversions(function.getName(),function.getType(),args,types,hasArgWithoutType);
  if (cr.method == null) {
    return Collections.emptyList();
  }
  Class<?>[] newSignature=types;
  if (cr.needsConverion) {
    FunctionDescriptor[] conversions=library.getConverts(cr.method,types);
    newSignature=new Class[conversions.length];
    for (int i=0; i < conversions.length; i++) {
      Class<?> newType=types[i];
      if (conversions[i] != null) {
        newType=conversions[i].getReturnType();
        setDesiredType(args[i],newType,function);
        if (types[i] != null && newType != DefaultDataTypes.OBJECT.getTypeClass()) {
          function.insertConversion(i,conversions[i]);
        }
      }
      newSignature[i]=newType;
    }
  }
  String name=cr.method.getFullName();
  return library.findAllFunctions(name,newSignature);
}","/** 
 * Find possible matches based on implicit conversions of the arguments. NOTE: This method has the side-effect of explicitly inserting conversions into the function arguments, and thereby changing the structure of the function call.
 * @param library
 * @param function
 * @param types
 * @return
 * @throws Exception 
 * @since 4.3
 */
private List<FunctionDescriptor> findWithImplicitConversions(FunctionLibrary library,Function function,Expression[] args,Class<?>[] types,boolean hasArgWithoutType) throws Exception {
  ConversionResult cr=null;
  try {
    cr=library.determineNecessaryConversions(function.getName(),function.getType(),args,types,hasArgWithoutType);
  }
 catch (  Exception ex) {
    if (getTeiidVersion().isLessThan(TeiidServerVersion.Version.TEIID_8_9.get()))     return Collections.emptyList();
 else     throw ex;
  }
  if (cr.method == null && getTeiidVersion().isGreaterThanOrEqualTo(TeiidServerVersion.Version.TEIID_8_9.get())) {
    return Collections.emptyList();
  }
  Class<?>[] newSignature=types;
  if (cr.needsConverion) {
    FunctionDescriptor[] conversions=library.getConverts(cr.method,types);
    newSignature=new Class[conversions.length];
    for (int i=0; i < conversions.length; i++) {
      Class<?> newType=types[i];
      if (conversions[i] != null) {
        newType=conversions[i].getReturnType();
        setDesiredType(args[i],newType,function);
        if (types[i] != null && newType != DefaultDataTypes.OBJECT.getTypeClass()) {
          function.insertConversion(i,conversions[i]);
        }
      }
      newSignature[i]=newType;
    }
  }
  String name=cr.method != null && cr.method.getFullName() != null ? cr.method.getFullName() : function.getName();
  return library.findAllFunctions(name,newSignature);
}",0.8879120879120879
102047,"private void updateState(){
  String msg=validateName();
  if (StringUtilities.isEmpty(msg)) {
    if (!this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(true);
    }
    if (this.imageLabel.getImage() != null) {
      this.imageLabel.setImage(null);
    }
    this.imageLabel.setImage(getInfoImage());
    msg=UTIL.getString(""String_Node_Str"");
  }
 else {
    if (this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(false);
    }
    this.imageLabel.setImage(getErrorImage());
  }
  this.messageLabel.setText(msg);
  this.messageLabel.pack();
}","private void updateState(){
  String msg=validateName();
  String defaultValueMsg=StringUtilities.isEmpty(this.defaultValue) ? UTIL.getString(""String_Node_Str"") : UTIL.getString(""String_Node_Str"");
  if (StringUtilities.isEmpty(msg)) {
    if (!this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(true);
    }
    if (this.imageLabel.getImage() != null) {
      this.imageLabel.setImage(null);
    }
    this.imageLabel.setImage(getInfoImage());
  }
 else {
    if (this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(false);
    }
    this.imageLabel.setImage(getErrorImage());
  }
  if (!StringUtilities.isEmpty(msg)) {
    this.messageLabel.setText(msg);
  }
 else {
    this.messageLabel.setText(defaultValueMsg);
  }
  this.messageLabel.pack();
}",0.4238714613618974
102048,"@Override protected void setValue(Object element,Object value){
  if (element instanceof Parameter) {
    String key=((Parameter)element).getPropertyKey();
    if (columnID == 1) {
      String oldType=((Parameter)element).getType().toString();
      String newType=(String)value;
      if (newType != null && newType.length() > 0 && !newType.equalsIgnoreCase(oldType)) {
        ((Parameter)element).setType(Parameter.Type.fromValue(newType));
        parameterMap.put(key,element);
        propertiesViewer.refresh();
      }
    }
 else     if (columnID == 2) {
      String oldDefaultValue=((Parameter)element).getDefaultValue();
      String newDefaultValue=(String)value;
      if (newDefaultValue != null && newDefaultValue.length() > 0 && !newDefaultValue.equalsIgnoreCase(oldDefaultValue)) {
        ((Parameter)element).setDefaultValue(newDefaultValue);
        parameterMap.put(key,element);
        propertiesViewer.refresh();
      }
    }
  }
}","@Override protected void setValue(Object element,Object value){
  if (element instanceof Parameter) {
    String key=((Parameter)element).getPropertyKey();
    if (columnID == 1) {
      String oldType=((Parameter)element).getType().toString();
      String newType=(String)value;
      if (newType != null && newType.length() > 0 && !newType.equalsIgnoreCase(oldType)) {
        ((Parameter)element).setType(Parameter.Type.fromValue(newType));
        parameterMap.put(key,element);
        propertiesViewer.refresh(element);
      }
    }
 else     if (columnID == 2) {
      String oldDefaultValue=((Parameter)element).getDefaultValue();
      String newDefaultValue=(String)value;
      if (newDefaultValue != null && newDefaultValue.length() > 0 && !newDefaultValue.equalsIgnoreCase(oldDefaultValue)) {
        ((Parameter)element).setDefaultValue(newDefaultValue);
        parameterMap.put(key,element);
        propertiesViewer.refresh(element);
      }
    }
  }
}",0.9927461139896372
102049,"void handleRemoveProperty(){
  Parameter selectedProperty=getSelectedProperty();
  assert(selectedProperty != null);
  parameterMap.remove(selectedProperty.getName());
  this.propertiesViewer.refresh();
  if (this.wsProfileDetailsWizardPage != null) {
    wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
 else {
    propertyPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
}","void handleRemoveProperty(){
  Parameter selectedProperty=getSelectedProperty();
  assert(selectedProperty != null);
  parameterMap.remove(selectedProperty.getName());
  this.propertiesViewer.refresh();
  if (this.wsProfileDetailsWizardPage != null) {
    wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
    wsProfileDetailsWizardPage.getProfileProperties().remove(selectedProperty.getName());
    wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
 else {
    propertyPage.setParameterMap(this.parameterMap);
    propertyPage.getExtraProperties().remove(Parameter.PREFIX + selectedProperty.getName());
    propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
  }
}",0.7338129496402878
102050,"void handleAddProperty(){
  assert(!this.propertiesViewer.getSelection().isEmpty());
  if (this.parameterMap == null)   this.parameterMap=new LinkedHashMap();
  Set<String> keys=new HashSet<String>();
  for (  Object key : parameterMap.keySet()) {
    keys.add((String)key);
  }
  AddParameterDialog dialog=new AddParameterDialog(propertiesViewer.getControl().getShell(),keys);
  if (dialog.open() == Window.OK) {
    String name=dialog.getName();
    String type=dialog.getType() != null ? dialog.getType() : IWSProfileConstants.QUERY_STRING;
    String defaultValue=dialog.getDefaultValue();
    Parameter parameter=new Parameter(name,defaultValue,Parameter.Type.fromValue(type));
    this.parameterMap.put(name,parameter);
    this.propertiesViewer.refresh();
    Parameter prop=null;
    for (    TableItem item : this.propertiesViewer.getTable().getItems()) {
      if (item.getData() instanceof Parameter && ((Parameter)item.getData()).getName().equals(name)) {
        prop=(Parameter)item.getData();
        break;
      }
    }
    if (prop != null) {
      this.propertiesViewer.setSelection(new StructuredSelection(prop),true);
    }
    if (this.wsProfileDetailsWizardPage != null) {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get((String)key);
        wsProfileDetailsWizardPage.getProfileProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
      wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
    }
 else {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get((String)key);
        propertyPage.getExtraProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      propertyPage.setParameterMap(this.parameterMap);
      propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
    }
  }
}","void handleAddProperty(){
  assert(!this.propertiesViewer.getSelection().isEmpty());
  if (this.parameterMap == null)   this.parameterMap=new LinkedHashMap();
  Set<String> keys=new HashSet<String>();
  for (  Object key : parameterMap.keySet()) {
    keys.add((String)key);
  }
  AddParameterDialog dialog=new AddParameterDialog(propertiesViewer.getControl().getShell(),keys);
  if (dialog.open() == Window.OK) {
    String name=dialog.getName();
    String type=dialog.getType() != null ? dialog.getType() : IWSProfileConstants.QUERY_STRING;
    String defaultValue=dialog.getDefaultValue();
    Parameter parameter=new Parameter(name,defaultValue,Parameter.Type.fromValue(type));
    this.parameterMap.put(name,parameter);
    this.propertiesViewer.refresh();
    Parameter prop=null;
    for (    TableItem item : this.propertiesViewer.getTable().getItems()) {
      if (item.getData() instanceof Parameter && ((Parameter)item.getData()).getName().equals(name)) {
        prop=(Parameter)item.getData();
        break;
      }
    }
    if (prop != null) {
      this.propertiesViewer.setSelection(new StructuredSelection(prop),true);
    }
    if (this.wsProfileDetailsWizardPage != null) {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get(key);
        wsProfileDetailsWizardPage.getProfileProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
      wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
    }
 else {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get(key);
        propertyPage.getExtraProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      propertyPage.setParameterMap(this.parameterMap);
      propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
    }
  }
}",0.9960376423972264
102051,"/** 
 * @return the extraProperties
 */
public Properties getExtraProperties(){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  return this.extraProperties;
}","/** 
 * @return the extraProperties
 */
public Properties getExtraProperties(){
  this.extraProperties=new Properties();
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  return this.extraProperties;
}",0.9364341085271318
102052,"/** 
 * @param extraProperties the extraProperties to set
 */
public void setExtraProperties(Properties extraProperties){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  this.extraProperties=extraProperties;
}","/** 
 * @param extraProperties the extraProperties to set
 */
public void setExtraProperties(Properties extraProperties){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  this.extraProperties=extraProperties;
}",0.992867332382311
102053,"private void updateState(){
  String msg=validateName();
  if (StringUtilities.isEmpty(msg)) {
    if (!this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(true);
    }
    if (this.imageLabel.getImage() != null) {
      this.imageLabel.setImage(null);
    }
    this.imageLabel.setImage(getInfoImage());
    msg=UTIL.getString(""String_Node_Str"");
  }
 else {
    if (this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(false);
    }
    this.imageLabel.setImage(getErrorImage());
  }
  this.messageLabel.setText(msg);
  this.messageLabel.pack();
}","private void updateState(){
  String msg=validateName();
  String defaultValueMsg=StringUtilities.isEmpty(this.defaultValue) ? UTIL.getString(""String_Node_Str"") : UTIL.getString(""String_Node_Str"");
  if (StringUtilities.isEmpty(msg)) {
    if (!this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(true);
    }
    if (this.imageLabel.getImage() != null) {
      this.imageLabel.setImage(null);
    }
    this.imageLabel.setImage(getInfoImage());
  }
 else {
    if (this.btnOk.isEnabled()) {
      this.btnOk.setEnabled(false);
    }
    this.imageLabel.setImage(getErrorImage());
  }
  if (!StringUtilities.isEmpty(msg)) {
    this.messageLabel.setText(msg);
  }
 else {
    this.messageLabel.setText(defaultValueMsg);
  }
  this.messageLabel.pack();
}",0.4238714613618974
102054,"@Override protected void setValue(Object element,Object value){
  if (element instanceof Parameter) {
    String key=((Parameter)element).getPropertyKey();
    if (columnID == 1) {
      String oldType=((Parameter)element).getType().toString();
      String newType=(String)value;
      if (newType != null && newType.length() > 0 && !newType.equalsIgnoreCase(oldType)) {
        ((Parameter)element).setType(Parameter.Type.fromValue(newType));
        parameterMap.put(key,element);
        propertiesViewer.refresh();
      }
    }
 else     if (columnID == 2) {
      String oldDefaultValue=((Parameter)element).getDefaultValue();
      String newDefaultValue=(String)value;
      if (newDefaultValue != null && newDefaultValue.length() > 0 && !newDefaultValue.equalsIgnoreCase(oldDefaultValue)) {
        ((Parameter)element).setDefaultValue(newDefaultValue);
        parameterMap.put(key,element);
        propertiesViewer.refresh();
      }
    }
  }
}","@Override protected void setValue(Object element,Object value){
  if (element instanceof Parameter) {
    String key=((Parameter)element).getPropertyKey();
    if (columnID == 1) {
      String oldType=((Parameter)element).getType().toString();
      String newType=(String)value;
      if (newType != null && newType.length() > 0 && !newType.equalsIgnoreCase(oldType)) {
        ((Parameter)element).setType(Parameter.Type.fromValue(newType));
        parameterMap.put(key,element);
        propertiesViewer.refresh(element);
      }
    }
 else     if (columnID == 2) {
      String oldDefaultValue=((Parameter)element).getDefaultValue();
      String newDefaultValue=(String)value;
      if (newDefaultValue != null && newDefaultValue.length() > 0 && !newDefaultValue.equalsIgnoreCase(oldDefaultValue)) {
        ((Parameter)element).setDefaultValue(newDefaultValue);
        parameterMap.put(key,element);
        propertiesViewer.refresh(element);
      }
    }
  }
}",0.9927461139896372
102055,"void handleRemoveProperty(){
  Parameter selectedProperty=getSelectedProperty();
  assert(selectedProperty != null);
  parameterMap.remove(selectedProperty.getName());
  this.propertiesViewer.refresh();
  if (this.wsProfileDetailsWizardPage != null) {
    wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
 else {
    propertyPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
}","void handleRemoveProperty(){
  Parameter selectedProperty=getSelectedProperty();
  assert(selectedProperty != null);
  parameterMap.remove(selectedProperty.getName());
  this.propertiesViewer.refresh();
  if (this.wsProfileDetailsWizardPage != null) {
    wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
    wsProfileDetailsWizardPage.getProfileProperties().remove(selectedProperty.getName());
    wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
  }
 else {
    propertyPage.setParameterMap(this.parameterMap);
    propertyPage.getExtraProperties().remove(Parameter.PREFIX + selectedProperty.getName());
    propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
  }
}",0.7338129496402878
102056,"void handleAddProperty(){
  assert(!this.propertiesViewer.getSelection().isEmpty());
  if (this.parameterMap == null)   this.parameterMap=new LinkedHashMap();
  Set<String> keys=new HashSet<String>();
  for (  Object key : parameterMap.keySet()) {
    keys.add((String)key);
  }
  AddParameterDialog dialog=new AddParameterDialog(propertiesViewer.getControl().getShell(),keys);
  if (dialog.open() == Window.OK) {
    String name=dialog.getName();
    String type=dialog.getType() != null ? dialog.getType() : IWSProfileConstants.QUERY_STRING;
    String defaultValue=dialog.getDefaultValue();
    Parameter parameter=new Parameter(name,defaultValue,Parameter.Type.fromValue(type));
    this.parameterMap.put(name,parameter);
    this.propertiesViewer.refresh();
    Parameter prop=null;
    for (    TableItem item : this.propertiesViewer.getTable().getItems()) {
      if (item.getData() instanceof Parameter && ((Parameter)item.getData()).getName().equals(name)) {
        prop=(Parameter)item.getData();
        break;
      }
    }
    if (prop != null) {
      this.propertiesViewer.setSelection(new StructuredSelection(prop),true);
    }
    if (this.wsProfileDetailsWizardPage != null) {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get((String)key);
        wsProfileDetailsWizardPage.getProfileProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
      wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
    }
 else {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get((String)key);
        propertyPage.getExtraProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      propertyPage.setParameterMap(this.parameterMap);
      propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
    }
  }
}","void handleAddProperty(){
  assert(!this.propertiesViewer.getSelection().isEmpty());
  if (this.parameterMap == null)   this.parameterMap=new LinkedHashMap();
  Set<String> keys=new HashSet<String>();
  for (  Object key : parameterMap.keySet()) {
    keys.add((String)key);
  }
  AddParameterDialog dialog=new AddParameterDialog(propertiesViewer.getControl().getShell(),keys);
  if (dialog.open() == Window.OK) {
    String name=dialog.getName();
    String type=dialog.getType() != null ? dialog.getType() : IWSProfileConstants.QUERY_STRING;
    String defaultValue=dialog.getDefaultValue();
    Parameter parameter=new Parameter(name,defaultValue,Parameter.Type.fromValue(type));
    this.parameterMap.put(name,parameter);
    this.propertiesViewer.refresh();
    Parameter prop=null;
    for (    TableItem item : this.propertiesViewer.getTable().getItems()) {
      if (item.getData() instanceof Parameter && ((Parameter)item.getData()).getName().equals(name)) {
        prop=(Parameter)item.getData();
        break;
      }
    }
    if (prop != null) {
      this.propertiesViewer.setSelection(new StructuredSelection(prop),true);
    }
    if (this.wsProfileDetailsWizardPage != null) {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get(key);
        wsProfileDetailsWizardPage.getProfileProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      wsProfileDetailsWizardPage.setParameterMap(this.parameterMap);
      wsProfileDetailsWizardPage.urlPreviewText.setText(wsProfileDetailsWizardPage.updateUrlPreview().toString());
    }
 else {
      for (      Object key : this.parameterMap.keySet()) {
        Parameter para=(Parameter)this.parameterMap.get(key);
        propertyPage.getExtraProperties().put(para.getPropertyKey(),para.getPropertyValue());
      }
      propertyPage.setParameterMap(this.parameterMap);
      propertyPage.urlPreviewText.setText(propertyPage.updateUrlPreview().toString());
    }
  }
}",0.9960376423972264
102057,"/** 
 * @return the extraProperties
 */
public Properties getExtraProperties(){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  return this.extraProperties;
}","/** 
 * @return the extraProperties
 */
public Properties getExtraProperties(){
  this.extraProperties=new Properties();
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  return this.extraProperties;
}",0.9364341085271318
102058,"/** 
 * @param extraProperties the extraProperties to set
 */
public void setExtraProperties(Properties extraProperties){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    this.extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  this.extraProperties=extraProperties;
}","/** 
 * @param extraProperties the extraProperties to set
 */
public void setExtraProperties(Properties extraProperties){
  for (  String key : this.getParameterMap().keySet()) {
    Parameter para=this.getParameterMap().get(key);
    extraProperties.put(para.getPropertyKey(),para.getPropertyValue());
  }
  this.extraProperties=extraProperties;
}",0.992867332382311
102059,"@Override public void setConnectionInfo(ModelResource modelResource,IConnectionProfile connectionProfile) throws ModelWorkspaceException {
  Properties connectionProps=getCommonProfileProperties(connectionProfile);
  Properties props=connectionProfile.getBaseProperties();
  String url=readEndPointProperty(props);
  if (null != url) {
    connectionProps.setProperty(CONNECTION_NAMESPACE + IWSProfileConstants.END_POINT_URI_PROP_ID,url);
  }
  String user=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
  if (null != user & !user.isEmpty()) {
    connectionProps.setProperty(CONNECTION_NAMESPACE + ICredentialsCommon.USERNAME_PROP_ID,user);
  }
  String security=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (security == null) {
    security=SecurityType.None.name();
  }
  connectionProps.setProperty(CONNECTION_NAMESPACE + ICredentialsCommon.SECURITY_TYPE_ID,security);
  getHelper().removeProperties(modelResource,CONNECTION_PROFILE_NAMESPACE);
  getHelper().removeProperties(modelResource,TRANSLATOR_NAMESPACE);
  getHelper().removeProperties(modelResource,CONNECTION_NAMESPACE);
  connectionProps.put(TRANSLATOR_NAMESPACE + TRANSLATOR_NAME_KEY,""String_Node_Str"");
  getHelper().setProperties(modelResource,connectionProps);
}","@Override public void setConnectionInfo(ModelResource modelResource,IConnectionProfile connectionProfile) throws ModelWorkspaceException {
  Properties connectionProps=getCommonProfileProperties(connectionProfile);
  Properties props=connectionProfile.getBaseProperties();
  String url=readEndPointProperty(props);
  if (null != url) {
    connectionProps.setProperty(CONNECTION_NAMESPACE + IWSProfileConstants.END_POINT_URI_PROP_ID,url);
  }
  String user=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
  if (null != user && user.isEmpty()) {
    connectionProps.setProperty(CONNECTION_NAMESPACE + ICredentialsCommon.USERNAME_PROP_ID,user);
  }
  String security=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (security == null) {
    security=SecurityType.None.name();
  }
  connectionProps.setProperty(CONNECTION_NAMESPACE + ICredentialsCommon.SECURITY_TYPE_ID,security);
  getHelper().removeProperties(modelResource,CONNECTION_PROFILE_NAMESPACE);
  getHelper().removeProperties(modelResource,TRANSLATOR_NAMESPACE);
  getHelper().removeProperties(modelResource,CONNECTION_NAMESPACE);
  connectionProps.put(TRANSLATOR_NAMESPACE + TRANSLATOR_NAME_KEY,""String_Node_Str"");
  getHelper().setProperties(modelResource,connectionProps);
}",0.998407643312102
102060,"@Override protected void addConnectionProfileInfoToModel(ModelResource sourceModel,IConnectionProfile profile) throws ModelWorkspaceException {
  if (profile != null) {
    IConnectionInfoProvider provider=null;
    if (getInfo().isXmlLocalFileMode()) {
      provider=new XmlFileConnectionInfoProvider();
    }
 else     if (getInfo().isXmlUrlFileMode()) {
      if (IWSProfileConstants.TEIID_WS_CONNECTION_PROFILE_ID.equalsIgnoreCase(profile.getProviderId())) {
        provider=new WSConnectionInfoProvider();
      }
 else {
        provider=new XmlUrlConnectionInfoProvider();
      }
    }
    if (provider != null) {
      provider.setConnectionInfo(sourceModel,profile);
    }
  }
}","@Override protected void addConnectionProfileInfoToModel(ModelResource sourceModel,IConnectionProfile profile) throws ModelWorkspaceException {
  if (profile != null) {
    IConnectionInfoProvider provider=null;
    if (getInfo().isXmlLocalFileMode()) {
      provider=new XmlFileConnectionInfoProvider();
    }
 else     if (getInfo().isRestUrlFileMode()) {
      if (IWSProfileConstants.TEIID_WS_CONNECTION_PROFILE_ID.equalsIgnoreCase(profile.getProviderId())) {
        provider=new WSConnectionInfoProvider();
      }
 else {
        provider=new XmlUrlConnectionInfoProvider();
      }
    }
    if (provider != null) {
      provider.setConnectionInfo(sourceModel,profile);
    }
  }
}",0.994931209268646
102061,"@Override public void setVisible(boolean visible){
  if (visible == true && endPointCombo != null) {
    UiBusyIndicator.showWhile(getControl().getDisplay(),new Runnable(){
      @Override public void run(){
        try {
          WSDLReader wsdlReader=wizard.getWsdlReader();
          wsdlModel=wsdlReader.getModel();
          if (wsdlModel != null) {
            endPointCombo.setItems(wsdlModel.getModelablePortNames());
          }
 else {
            endPointCombo.removeAll();
          }
        }
 catch (        ModelGenerationException ex) {
          setErrorMessage(ex.getLocalizedMessage());
        }
      }
    }
);
  }
  profileText.setText(wizard.getProfileName());
  descriptionText.setText(wizard.getProfileDescription());
  super.setVisible(visible);
}","@Override public void setVisible(boolean visible){
  if (visible == true && endPointCombo != null) {
    UiBusyIndicator.showWhile(getControl().getDisplay(),new Runnable(){
      @Override public void run(){
        try {
          WSDLReader wsdlReader=wizard.getWsdlReader();
          wsdlModel=wsdlReader.getModel();
          if (wsdlModel != null) {
            endPointCombo.setItems(wsdlModel.getModelablePortNames());
          }
 else {
            endPointCombo.removeAll();
          }
        }
 catch (        ModelGenerationException ex) {
          setErrorMessage(ex.getLocalizedMessage());
        }
        String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
        if (null != endPointName && !endPointName.isEmpty()) {
          if (endPointCombo.getItemCount() == 1) {
            endPointCombo.select(0);
          }
 else           if (endPointCombo.getItemCount() > 0) {
            String[] endPoints=endPointCombo.getItems();
            int i=0;
            for (            String next : endPoints) {
              if (next.equals(endPointName)) {
                endPointCombo.select(i);
                break;
              }
              i++;
            }
          }
        }
      }
    }
);
  }
  profileText.setText(wizard.getProfileName());
  descriptionText.setText(wizard.getProfileDescription());
  super.setVisible(visible);
}",0.708675799086758
102062,"private void updateState(){
  String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  if (null == endPointName || endPointName.isEmpty()) {
    setErrorMessage(UTIL.getString(""String_Node_Str""));
    return;
  }
  setErrorMessage(null);
  try {
    Port port=wsdlModel.getPort(endPointName);
    new URL(port.getLocationURI());
    profileProperties.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,port.getLocationURI());
    profileProperties.setProperty(IWSProfileConstants.SOAP_BINDING,port.getBindingType());
  }
 catch (  Exception e) {
    setErrorMessage(UTIL.getString(""String_Node_Str""));
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
  setMessage(UTIL.getString(""String_Node_Str""));
}","private void updateState(){
  String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  if (null == endPointName || endPointName.isEmpty()) {
    setErrorMessage(UTIL.getString(""String_Node_Str""));
    return;
  }
  setErrorMessage(null);
  try {
    Port port=wsdlModel.getPort(endPointName);
    new URL(port.getLocationURI());
    String bindingType=port.getBindingType();
    profileProperties.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,port.getLocationURI());
    if (bindingType != null) {
      profileProperties.setProperty(IWSProfileConstants.SOAP_BINDING,bindingType);
      defaultBindingText.setText(bindingType);
    }
  }
 catch (  Exception e) {
    setErrorMessage(UTIL.getString(""String_Node_Str""));
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
  setMessage(UTIL.getString(""String_Node_Str""));
}",0.9087591240875912
102063,"@Override public void run(){
  try {
    WSDLReader wsdlReader=wizard.getWsdlReader();
    wsdlModel=wsdlReader.getModel();
    if (wsdlModel != null) {
      endPointCombo.setItems(wsdlModel.getModelablePortNames());
    }
 else {
      endPointCombo.removeAll();
    }
  }
 catch (  ModelGenerationException ex) {
    setErrorMessage(ex.getLocalizedMessage());
  }
}","@Override public void run(){
  try {
    WSDLReader wsdlReader=wizard.getWsdlReader();
    wsdlModel=wsdlReader.getModel();
    if (wsdlModel != null) {
      endPointCombo.setItems(wsdlModel.getModelablePortNames());
    }
 else {
      endPointCombo.removeAll();
    }
  }
 catch (  ModelGenerationException ex) {
    setErrorMessage(ex.getLocalizedMessage());
  }
  String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  if (null != endPointName && !endPointName.isEmpty()) {
    if (endPointCombo.getItemCount() == 1) {
      endPointCombo.select(0);
    }
 else     if (endPointCombo.getItemCount() > 0) {
      String[] endPoints=endPointCombo.getItems();
      int i=0;
      for (      String next : endPoints) {
        if (next.equals(endPointName)) {
          endPointCombo.select(i);
          break;
        }
        i++;
      }
    }
  }
}",0.5797788309636651
102064,"@Override public void createCustomControl(Composite parent){
  wizard=(WSSoapConnectionProfileWizard)getWizard();
  profileProperties=wizard.getProfileProperties();
  Group group=WidgetFactory.createSimpleGroup(parent,null);
  scrolled=new Composite(group,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(5,5).applyTo(scrolled);
  Label title=new Label(scrolled,SWT.NONE);
  title.setText(UTIL.getString(""String_Node_Str""));
  title.setFont(JFaceResources.getBannerFont());
  GridDataFactory.fillDefaults().grab(true,false).span(2,1).align(SWT.CENTER,SWT.CENTER).applyTo(title);
  profileLabel=new Label(scrolled,SWT.NONE);
  profileLabel.setText(UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().applyTo(profileLabel);
  profileText=WidgetFactory.createLabel(scrolled,wizard.getProfileName(),SWT.SINGLE);
  GridDataFactory.swtDefaults().applyTo(profileText);
  descriptionLabel=new Label(scrolled,SWT.NONE);
  descriptionLabel.setText(UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().applyTo(descriptionLabel);
  descriptionText=WidgetFactory.createTextBox(scrolled,SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY,GridData.FILL);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(descriptionText);
  descriptionText.setText(wizard.getProfileDescription());
  descriptionText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  Label label=WidgetFactory.createLabel(scrolled,UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(label);
  endPointCombo=WidgetFactory.createCombo(scrolled,SWT.READ_ONLY,GridData.FILL_HORIZONTAL,new String[0],true);
  endPointCombo.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(endPointCombo);
  endPointCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      handlePortNameSelected();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  endPointCombo.setVisibleItemCount(10);
}","@Override public void createCustomControl(Composite parent){
  wizard=(WSSoapConnectionProfileWizard)getWizard();
  profileProperties=wizard.getProfileProperties();
  Group group=WidgetFactory.createSimpleGroup(parent,null);
  scrolled=new Composite(group,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(5,5).applyTo(scrolled);
  Label title=new Label(scrolled,SWT.NONE);
  title.setText(UTIL.getString(""String_Node_Str""));
  title.setFont(JFaceResources.getBannerFont());
  GridDataFactory.fillDefaults().grab(true,false).span(2,1).align(SWT.CENTER,SWT.CENTER).applyTo(title);
  profileLabel=new Label(scrolled,SWT.NONE);
  profileLabel.setText(UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().applyTo(profileLabel);
  profileText=WidgetFactory.createLabel(scrolled,wizard.getProfileName(),SWT.SINGLE);
  GridDataFactory.swtDefaults().applyTo(profileText);
  descriptionLabel=new Label(scrolled,SWT.NONE);
  descriptionLabel.setText(UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().applyTo(descriptionLabel);
  descriptionText=WidgetFactory.createTextBox(scrolled,SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY,GridData.FILL);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(descriptionText);
  descriptionText.setText(wizard.getProfileDescription());
  descriptionText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  Label label=WidgetFactory.createLabel(scrolled,UTIL.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(label);
  endPointCombo=WidgetFactory.createCombo(scrolled,SWT.READ_ONLY,GridData.FILL_HORIZONTAL,new String[0],true);
  endPointCombo.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(endPointCombo);
  endPointCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      handlePortNameSelected();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  endPointCombo.setVisibleItemCount(10);
  label=WidgetFactory.createLabel(scrolled,UTIL.getString(""String_Node_Str""));
  GridData gd=new GridData();
  gd.verticalAlignment=SWT.CENTER;
  label.setLayoutData(gd);
  label.setToolTipText(UTIL.getString(""String_Node_Str""));
  defaultBindingText=new Text(scrolled,SWT.BORDER | SWT.SINGLE);
  defaultBindingText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  defaultBindingText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(defaultBindingText);
  defaultBindingText.setToolTipText(UTIL.getString(""String_Node_Str""));
}",0.8712789981523301
102065,"@Override public List getSummaryData(){
  List result=super.getSummaryData();
  String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),endPointName});
  String endPointURI=profileProperties.getProperty(IWSProfileConstants.END_POINT_URI_PROP_ID);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),endPointURI});
  String binding=profileProperties.getProperty(IWSProfileConstants.SOAP_BINDING);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),binding});
  return result;
}","@Override public List<String[]> getSummaryData(){
  @SuppressWarnings(""String_Node_Str"") List<String[]> result=super.getSummaryData();
  String endPointName=profileProperties.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),endPointName});
  String endPointURI=profileProperties.getProperty(IWSProfileConstants.END_POINT_URI_PROP_ID);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),endPointURI});
  String binding=profileProperties.getProperty(IWSProfileConstants.SOAP_BINDING);
  result.add(new String[]{UTIL.getString(""String_Node_Str""),binding});
  return result;
}",0.9540692989524576
102066,"/** 
 * @param parentShell
 * @param title
 * @param message
 * @param permission
 * @param okEnabled
 */
public SecurityDefinitionDialog(Shell parentShell,String title,String message,Permission permission,boolean allowsFilter,boolean allowsMasking){
  super(parentShell,title,message,true);
  this.targetName=permission.getTargetName();
  isEdit=true;
  if (permission.getCondition() != null) {
    this.conditionString=permission.getCondition();
    this.constraint=permission.isConstraint();
  }
  if (permission.getMask() != null) {
    this.maskString=permission.getMask();
    this.order=permission.getOrder();
  }
  this.allowsFilter=allowsFilter;
  this.allowsMasking=allowsMasking;
}","/** 
 * @param parentShell
 * @param title
 * @param message
 * @param permission
 * @param okEnabled
 */
public SecurityDefinitionDialog(Shell parentShell,String title,String message,Permission permission,boolean allowsFilter,boolean allowsMasking,boolean existingSecurity){
  super(parentShell,title,message,existingSecurity);
  this.targetName=permission.getTargetName();
  isEdit=true;
  if (permission.getCondition() != null) {
    this.conditionString=permission.getCondition();
    this.constraint=permission.isConstraint();
  }
  if (permission.getMask() != null) {
    this.maskString=permission.getMask();
    this.order=permission.getOrder();
  }
  this.allowsFilter=allowsFilter;
  this.allowsMasking=allowsMasking;
}",0.9697396199859254
102067,"@Override protected void validate(){
  boolean enable=true;
  setErrorMessage(null);
  setMessage(Messages.clickOkToFinish);
  this.conditionString=conditionTextEditor.getText();
  this.maskString=maskTextEditor.getText();
  this.constraint=constraintButton.getSelection();
  boolean conditionEmpty=(this.conditionString == null || this.conditionString.trim().isEmpty());
  if (conditionEmpty && allowsFilter) {
    enable=false;
    setErrorMessage(Messages.conditionIsUndefined);
  }
  if (this.allowsMasking) {
    boolean maskEmpty=(maskString == null || maskString.trim().isEmpty());
    if (maskEmpty && conditionEmpty) {
      enable=false;
      setErrorMessage(Messages.noMaskOrConditionDefined);
    }
    if (this.orderText.getText() != null) {
      try {
        order=Integer.parseInt(orderText.getText());
      }
 catch (      NumberFormatException ex) {
        enable=false;
        setErrorMessage(Messages.orderMustBeAnInteger);
        return;
      }
    }
 else {
      enable=false;
      setErrorMessage(Messages.orderMustNotBeNull);
      return;
    }
  }
  getButton(IDialogConstants.OK_ID).setEnabled(enable);
}","@Override protected void validate(){
  boolean enable=true;
  setErrorMessage(null);
  setMessage(Messages.clickOkToFinish);
  this.conditionString=conditionTextEditor.getText();
  this.maskString=maskTextEditor.getText();
  this.constraint=constraintButton.getSelection();
  boolean conditionEmpty=(this.conditionString == null || this.conditionString.trim().isEmpty());
  if (this.allowsMasking) {
    boolean maskEmpty=(maskString == null || maskString.trim().isEmpty());
    if (maskEmpty && conditionEmpty) {
      enable=false;
      setErrorMessage(Messages.noMaskOrConditionDefined);
    }
    if (this.orderText.getText() != null) {
      try {
        order=Integer.parseInt(orderText.getText());
      }
 catch (      NumberFormatException ex) {
        enable=false;
        setErrorMessage(Messages.orderMustBeAnInteger);
        return;
      }
    }
 else {
      enable=false;
      setErrorMessage(Messages.orderMustNotBeNull);
      return;
    }
  }
 else   if (conditionEmpty && allowsFilter) {
    enable=false;
    setErrorMessage(Messages.conditionIsUndefined);
  }
  getButton(IDialogConstants.OK_ID).setEnabled(enable);
}",0.4654418197725284
102068,"private void handleDoubleClick(int column,Object target){
  if (column == 1 && getTreeProvider().allowsSecurity(target)) {
    Permission perm=getTreeProvider().getPermission(target);
    if (perm == null) {
      perm=getTreeProvider().createPermission(target);
    }
    boolean allowsCondition=getTreeProvider().allowsCondition(target);
    boolean allowsMask=getTreeProvider().allowsMasking(target);
    String message=getTreeProvider().getSecurityDialogMessage(target);
    SecurityDefinitionDialog dialog=new SecurityDefinitionDialog(getShell(),Messages.setSecurityValuesTitle,message,perm,allowsCondition,allowsMask);
    if (dialog.open() == Window.OK) {
      if (allowsCondition) {
        perm.setCondition(dialog.getCondition());
        perm.setConstraint(dialog.getConstraintValue());
      }
      if (allowsMask) {
        perm.setMask(dialog.getMask());
        perm.setOrder(dialog.getOrder());
      }
      getWizard().refreshAllTabs();
      validateInputs();
    }
  }
}","private void handleDoubleClick(int column,Object target){
  if (column == 1 && getTreeProvider().allowsSecurity(target)) {
    Permission perm=getTreeProvider().getPermission(target);
    boolean existingPerm=perm != null;
    if (perm == null) {
      perm=getTreeProvider().createPermission(target);
    }
    boolean allowsCondition=getTreeProvider().allowsCondition(target);
    boolean allowsMask=getTreeProvider().allowsMasking(target);
    String message=getTreeProvider().getSecurityDialogMessage(target);
    SecurityDefinitionDialog dialog=new SecurityDefinitionDialog(getShell(),Messages.setSecurityValuesTitle,message,perm,allowsCondition,allowsMask,existingPerm);
    if (dialog.open() == Window.OK) {
      if (allowsCondition) {
        perm.setCondition(dialog.getCondition());
        perm.setConstraint(dialog.getConstraintValue());
      }
      if (allowsMask) {
        perm.setMask(dialog.getMask());
        perm.setOrder(dialog.getOrder());
      }
      getWizard().refreshAllTabs();
      validateInputs();
    }
  }
}",0.974459724950884
102069,"/** 
 * Create the tableViewer Panel
 */
@SuppressWarnings(""String_Node_Str"") private void createTableViewerPanel(Composite theParent){
  Composite tablePanel=new Composite(theParent,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  tablePanel.setLayout(gridLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  tablePanel.setLayoutData(gridData);
  HEADER_PANEL: {
    Composite headerPanel=WidgetFactory.createPanel(tablePanel);
    headerPanel.setLayout(new GridLayout());
    ((GridLayout)headerPanel.getLayout()).numColumns=3;
    headerPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
    ((GridData)headerPanel.getLayoutData()).minimumHeight=80;
{
      helpText=new Text(headerPanel,SWT.WRAP | SWT.READ_ONLY);
      helpText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
      helpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
      helpText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
      ((GridData)helpText.getLayoutData()).horizontalSpan=3;
      ((GridData)helpText.getLayoutData()).heightHint=40;
      ((GridData)helpText.getLayoutData()).widthHint=360;
      helpText.setText(Messages.datatypeReconciler_helpText);
    }
    this.convertAllSqlSymbolsButton=WidgetFactory.createButton(headerPanel,Messages.datatypeReconciler_convertAllSqlSymbolsLabel);
    this.convertAllSqlSymbolsButton.setToolTipText(Messages.datatypeReconciler_convertAllSqlSymbolsTooltip);
    this.convertAllSqlSymbolsButton.setImage(UiPlugin.getDefault().getImage(PluginConstants.Images.ARROW_LEFT_ICON));
    this.convertAllSqlSymbolsButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent event){
        changeAllColumnDatatypesButtonPressed();
      }
    }
);
    WidgetFactory.createLabel(headerPanel,""String_Node_Str"");
    this.changeAllColumnDatatypesButton=WidgetFactory.createButton(headerPanel,Messages.datatypeReconciler_convertAllColumnDatatypesLabel);
    this.changeAllColumnDatatypesButton.setToolTipText(Messages.datatypeReconciler_convertAllColumnDatatypesTooltip);
    this.changeAllColumnDatatypesButton.setImage(UiPlugin.getDefault().getImage(PluginConstants.Images.ARROW_RIGHT_ICON));
    this.changeAllColumnDatatypesButton.setEnabled(false);
    this.changeAllColumnDatatypesButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent event){
        changeAllColumnDatatypesPressed();
      }
    }
);
  }
  BINDING_TABLE: {
    table=new Table(tablePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    table.setLayout(new TableLayout());
    GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
    gd.heightHint=200;
    table.setLayoutData(gd);
    this.bindingTableViewer=new TableViewer(table);
    this.bindingTableViewer.getControl().setLayoutData(gd);
    this.bindingContentProvider=new BindingContentProvider();
    TableViewerColumn column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.setLabelProvider(new TheBindingColumnLabelProvider(0));
    column.getColumn().setText(getSpaces(8));
    column.getColumn().pack();
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_sourceSqlSymbolLabel + getSpaces(100));
    column.setLabelProvider(new TheBindingColumnLabelProvider(1));
    column.getColumn().pack();
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(getSpaces(8));
    column.setLabelProvider(new TheBindingColumnLabelProvider(2));
    column.setEditingSupport(new ConvertSymbolEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_convertSourceDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_matchedTypeLabel + getSpaces(60));
    column.setLabelProvider(new TheBindingColumnLabelProvider(3));
    column.setEditingSupport(new ChangeProposedDatatypeEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_matchedDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(getSpaces(8));
    column.setLabelProvider(new TheBindingColumnLabelProvider(4));
    column.setEditingSupport(new ChangeDatatypeEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_changeTargetDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_targetColumnLabel + getSpaces(25));
    column.setLabelProvider(new TheBindingColumnLabelProvider(5));
    column.getColumn().pack();
    bindingTableViewer.setUseHashlookup(true);
    bindingTableViewer.setContentProvider(this.bindingContentProvider);
    bindingTableViewer.setInput(this.bindingListInput);
    updateRowColors();
  }
  SELECTION_STATUS_PANEL: {
    Composite selectionPanel=WidgetFactory.createGroup(tablePanel,Messages.datatypeReconciler_selectionPanelInfoLabel,1,2);
    selectionPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
    ((GridData)selectionPanel.getLayoutData()).minimumHeight=80;
    symbolConversionLabel=new Label(selectionPanel,SWT.NONE);
    symbolConversionLabel.setText(PluginConstants.EMPTY_STRING);
    symbolConversionLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    symbolConversionLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    Label messageLabel=new Label(selectionPanel,SWT.NONE);
    symbolWarningLabel=new Label(selectionPanel,SWT.NONE);
    symbolWarningLabel.setText(PluginConstants.EMPTY_STRING);
    symbolWarningLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    symbolWarningLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  }
}","/** 
 * Create the tableViewer Panel
 */
@SuppressWarnings(""String_Node_Str"") private void createTableViewerPanel(Composite theParent){
  Composite tablePanel=new Composite(theParent,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  tablePanel.setLayout(gridLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  tablePanel.setLayoutData(gridData);
  HEADER_PANEL: {
    Composite headerPanel=WidgetFactory.createPanel(tablePanel);
    headerPanel.setLayout(new GridLayout());
    ((GridLayout)headerPanel.getLayout()).numColumns=3;
    headerPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
    ((GridData)headerPanel.getLayoutData()).minimumHeight=80;
{
      helpText=new Text(headerPanel,SWT.WRAP | SWT.READ_ONLY);
      helpText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
      helpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
      helpText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
      ((GridData)helpText.getLayoutData()).horizontalSpan=3;
      ((GridData)helpText.getLayoutData()).heightHint=40;
      ((GridData)helpText.getLayoutData()).widthHint=360;
      helpText.setText(Messages.datatypeReconciler_helpText);
    }
    this.convertAllSqlSymbolsButton=WidgetFactory.createButton(headerPanel,Messages.datatypeReconciler_convertAllSqlSymbolsLabel);
    this.convertAllSqlSymbolsButton.setToolTipText(Messages.datatypeReconciler_convertAllSqlSymbolsTooltip);
    this.convertAllSqlSymbolsButton.setImage(UiPlugin.getDefault().getImage(PluginConstants.Images.ARROW_LEFT_ICON));
    this.convertAllSqlSymbolsButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent event){
        changeAllColumnDatatypesButtonPressed();
      }
    }
);
    WidgetFactory.createLabel(headerPanel,""String_Node_Str"");
    this.changeAllColumnDatatypesButton=WidgetFactory.createButton(headerPanel,Messages.datatypeReconciler_convertAllColumnDatatypesLabel);
    this.changeAllColumnDatatypesButton.setToolTipText(Messages.datatypeReconciler_convertAllColumnDatatypesTooltip);
    this.changeAllColumnDatatypesButton.setImage(UiPlugin.getDefault().getImage(PluginConstants.Images.ARROW_RIGHT_ICON));
    this.changeAllColumnDatatypesButton.setEnabled(false);
    this.changeAllColumnDatatypesButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent event){
        changeAllColumnDatatypesPressed();
      }
    }
);
  }
  BINDING_TABLE: {
    this.bindingTableViewer=new TableViewer(tablePanel,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
    table=this.bindingTableViewer.getTable();
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    table.setLayout(new TableLayout());
    GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
    gd.heightHint=200;
    table.setLayoutData(gd);
    this.bindingTableViewer.getControl().setLayoutData(gd);
    this.bindingContentProvider=new BindingContentProvider();
    TableViewerColumn column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.setLabelProvider(new TheBindingColumnLabelProvider(0));
    column.getColumn().setText(getSpaces(8));
    column.getColumn().pack();
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_sourceSqlSymbolLabel + getSpaces(100));
    column.setLabelProvider(new TheBindingColumnLabelProvider(1));
    column.getColumn().pack();
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(getSpaces(8));
    column.setLabelProvider(new TheBindingColumnLabelProvider(2));
    column.setEditingSupport(new ConvertSymbolEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_convertSourceDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_matchedTypeLabel + getSpaces(60));
    column.setLabelProvider(new TheBindingColumnLabelProvider(3));
    column.setEditingSupport(new ChangeProposedDatatypeEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_matchedDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(getSpaces(8));
    column.setLabelProvider(new TheBindingColumnLabelProvider(4));
    column.setEditingSupport(new ChangeDatatypeEditingSupport(this.bindingTableViewer));
    column.getColumn().pack();
    column.getColumn().setToolTipText(Messages.datatypeReconciler_changeTargetDatatypeTooltip);
    column=new TableViewerColumn(this.bindingTableViewer,SWT.LEFT);
    column.getColumn().setText(Messages.datatypeReconciler_targetColumnLabel + getSpaces(25));
    column.setLabelProvider(new TheBindingColumnLabelProvider(5));
    column.getColumn().pack();
    bindingTableViewer.setUseHashlookup(true);
    bindingTableViewer.setContentProvider(this.bindingContentProvider);
    bindingTableViewer.setInput(this.bindingListInput);
    updateRowColors();
  }
  SELECTION_STATUS_PANEL: {
    Composite selectionPanel=WidgetFactory.createGroup(tablePanel,Messages.datatypeReconciler_selectionPanelInfoLabel,1,2);
    selectionPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
    ((GridData)selectionPanel.getLayoutData()).minimumHeight=80;
    symbolConversionLabel=new Label(selectionPanel,SWT.NONE);
    symbolConversionLabel.setText(PluginConstants.EMPTY_STRING);
    symbolConversionLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    symbolConversionLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    Label messageLabel=new Label(selectionPanel,SWT.NONE);
    symbolWarningLabel=new Label(selectionPanel,SWT.NONE);
    symbolWarningLabel.setText(PluginConstants.EMPTY_STRING);
    symbolWarningLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    symbolWarningLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  }
}",0.9877931256023128
102070,"private void createDelimitedColumnInfoGroup(Composite parent){
  Group theGroup=WidgetFactory.createGroup(parent,getString(""String_Node_Str""),SWT.NONE,2,4);
  GridData groupGD=new GridData(GridData.FILL_BOTH);
  groupGD.heightHint=140;
  theGroup.setLayoutData(groupGD);
  Table table=new Table(theGroup,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayout(new TableLayout());
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  this.delimitedColumnsViewer=new TableViewer(table);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  this.delimitedColumnsViewer.getControl().setLayoutData(data);
  TableViewerColumn column=new TableViewerColumn(this.delimitedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(36));
  column.setEditingSupport(new ColumnNameEditingSupport(this.delimitedColumnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.delimitedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.delimitedColumnsViewer));
  column.getColumn().pack();
  if (this.dataFileInfo != null) {
    for (    ITeiidColumnInfo row : this.dataFileInfo.getColumnInfoList()) {
      this.delimitedColumnsViewer.add(row);
    }
  }
  addColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  addColumnDelimitedButton.setText(getString(""String_Node_Str""));
  addColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  addColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      createColumn();
    }
  }
);
  deleteColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  deleteColumnDelimitedButton.setText(getString(""String_Node_Str""));
  deleteColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  deleteColumnDelimitedButton.setEnabled(false);
  deleteColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ITeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(ITeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        dataFileInfo.removeColumn(info);
        handleInfoChanged(false);
        deleteColumnDelimitedButton.setEnabled(false);
      }
    }
  }
);
  upColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  upColumnDelimitedButton.setText(getString(""String_Node_Str""));
  upColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  upColumnDelimitedButton.setEnabled(false);
  upColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(TeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=delimitedColumnsViewer.getTable().getSelectionIndex();
        dataFileInfo.moveColumnUp(info);
        handleInfoChanged(false);
        delimitedColumnsViewer.getTable().select(selectedIndex - 1);
        downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(info));
        upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(info));
      }
    }
  }
);
  downColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  downColumnDelimitedButton.setText(getString(""String_Node_Str""));
  downColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  downColumnDelimitedButton.setEnabled(false);
  downColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(TeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=delimitedColumnsViewer.getTable().getSelectionIndex();
        dataFileInfo.moveColumnDown(info);
        handleInfoChanged(false);
        delimitedColumnsViewer.getTable().select(selectedIndex + 1);
        downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(info));
        upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(info));
      }
    }
  }
);
  this.delimitedColumnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnDelimitedButton.setEnabled(false);
        upColumnDelimitedButton.setEnabled(false);
        downColumnDelimitedButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        ITeiidColumnInfo columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof ITeiidColumnInfo)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(ITeiidColumnInfo)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnDelimitedButton.setEnabled(enable);
        if (enable) {
          upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(columnInfo));
          downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(columnInfo));
        }
      }
    }
  }
);
}","private void createDelimitedColumnInfoGroup(Composite parent){
  Group theGroup=WidgetFactory.createGroup(parent,getString(""String_Node_Str""),SWT.NONE,2,4);
  GridData groupGD=new GridData(GridData.FILL_BOTH);
  groupGD.heightHint=140;
  theGroup.setLayoutData(groupGD);
  this.delimitedColumnsViewer=new TableViewer(theGroup,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table table=this.delimitedColumnsViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayout(new TableLayout());
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  this.delimitedColumnsViewer.getControl().setLayoutData(data);
  TableViewerColumn column=new TableViewerColumn(this.delimitedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(36));
  column.setEditingSupport(new ColumnNameEditingSupport(this.delimitedColumnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.delimitedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.delimitedColumnsViewer));
  column.getColumn().pack();
  if (this.dataFileInfo != null) {
    for (    ITeiidColumnInfo row : this.dataFileInfo.getColumnInfoList()) {
      this.delimitedColumnsViewer.add(row);
    }
  }
  addColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  addColumnDelimitedButton.setText(getString(""String_Node_Str""));
  addColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  addColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      createColumn();
    }
  }
);
  deleteColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  deleteColumnDelimitedButton.setText(getString(""String_Node_Str""));
  deleteColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  deleteColumnDelimitedButton.setEnabled(false);
  deleteColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ITeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(ITeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        dataFileInfo.removeColumn(info);
        handleInfoChanged(false);
        deleteColumnDelimitedButton.setEnabled(false);
      }
    }
  }
);
  upColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  upColumnDelimitedButton.setText(getString(""String_Node_Str""));
  upColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  upColumnDelimitedButton.setEnabled(false);
  upColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(TeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=delimitedColumnsViewer.getTable().getSelectionIndex();
        dataFileInfo.moveColumnUp(info);
        handleInfoChanged(false);
        delimitedColumnsViewer.getTable().select(selectedIndex - 1);
        downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(info));
        upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(info));
      }
    }
  }
);
  downColumnDelimitedButton=new Button(theGroup,SWT.PUSH);
  downColumnDelimitedButton.setText(getString(""String_Node_Str""));
  downColumnDelimitedButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  downColumnDelimitedButton.setEnabled(false);
  downColumnDelimitedButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TeiidColumnInfo info=null;
      IStructuredSelection selection=(IStructuredSelection)delimitedColumnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof ITeiidColumnInfo) {
          info=(TeiidColumnInfo)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=delimitedColumnsViewer.getTable().getSelectionIndex();
        dataFileInfo.moveColumnDown(info);
        handleInfoChanged(false);
        delimitedColumnsViewer.getTable().select(selectedIndex + 1);
        downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(info));
        upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(info));
      }
    }
  }
);
  this.delimitedColumnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnDelimitedButton.setEnabled(false);
        upColumnDelimitedButton.setEnabled(false);
        downColumnDelimitedButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        ITeiidColumnInfo columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof ITeiidColumnInfo)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(ITeiidColumnInfo)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnDelimitedButton.setEnabled(enable);
        if (enable) {
          upColumnDelimitedButton.setEnabled(dataFileInfo.canMoveUp(columnInfo));
          downColumnDelimitedButton.setEnabled(dataFileInfo.canMoveDown(columnInfo));
        }
      }
    }
  }
);
}",0.9844710449692656
102071,"private String getSpaces(int nSpaces){
  StringBuffer sb=new StringBuffer(nSpaces);
  for (int i=0; i < nSpaces; i++) {
    sb.append(StringUtilities.SPACE);
  }
  return sb.toString();
}","private String getSpaces(int nSpaces){
  StringBuffer sb=new StringBuffer(nSpaces);
  for (int i=0; i < nSpaces; i++) {
    sb.append(StringConstants.SPACE);
  }
  return sb.toString();
}",0.9679144385026738
102072,"private void createFixedColumnInfoGroup(Composite parent){
  Group columnInfoGroup=WidgetFactory.createGroup(parent,getString(""String_Node_Str""),SWT.NONE,1,1);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=GROUP_HEIGHT_160;
  columnInfoGroup.setLayoutData(gd);
  Table table=new Table(columnInfoGroup,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayout(new TableLayout());
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  this.fixedColumnsViewer=new TableViewer(table);
  GridData data=new GridData(GridData.FILL_BOTH);
  this.fixedColumnsViewer.getControl().setLayoutData(data);
  TableViewerColumn column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(36));
  column.setEditingSupport(new ColumnNameEditingSupport(this.fixedColumnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.fixedColumnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.fixedColumnsViewer));
  column.getColumn().pack();
  if (this.dataFileInfo != null) {
    for (    ITeiidColumnInfo row : this.dataFileInfo.getColumnInfoList()) {
      this.fixedColumnsViewer.add(row);
    }
  }
  this.fixedColumnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnFixedButton.setEnabled(false);
        upColumnFixedButton.setEnabled(false);
        downColumnFixedButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        ITeiidColumnInfo columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof ITeiidColumnInfo)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(ITeiidColumnInfo)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnFixedButton.setEnabled(enable);
        if (enable) {
          upColumnFixedButton.setEnabled(dataFileInfo.canMoveUp(columnInfo));
          downColumnFixedButton.setEnabled(dataFileInfo.canMoveDown(columnInfo));
        }
      }
    }
  }
);
}","private void createFixedColumnInfoGroup(Composite parent){
  Group columnInfoGroup=WidgetFactory.createGroup(parent,getString(""String_Node_Str""),SWT.NONE,1,1);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=GROUP_HEIGHT_160;
  columnInfoGroup.setLayoutData(gd);
  this.fixedColumnsViewer=new TableViewer(columnInfoGroup,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table table=this.fixedColumnsViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayout(new TableLayout());
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  GridData data=new GridData(GridData.FILL_BOTH);
  this.fixedColumnsViewer.getControl().setLayoutData(data);
  TableViewerColumn column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(36));
  column.setEditingSupport(new ColumnNameEditingSupport(this.fixedColumnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.fixedColumnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.fixedColumnsViewer,SWT.LEFT);
  column.getColumn().setText(getString(""String_Node_Str"") + getSpaces(12));
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.fixedColumnsViewer));
  column.getColumn().pack();
  if (this.dataFileInfo != null) {
    for (    ITeiidColumnInfo row : this.dataFileInfo.getColumnInfoList()) {
      this.fixedColumnsViewer.add(row);
    }
  }
  this.fixedColumnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnFixedButton.setEnabled(false);
        upColumnFixedButton.setEnabled(false);
        downColumnFixedButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        ITeiidColumnInfo columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof ITeiidColumnInfo)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(ITeiidColumnInfo)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnFixedButton.setEnabled(enable);
        if (enable) {
          upColumnFixedButton.setEnabled(dataFileInfo.canMoveUp(columnInfo));
          downColumnFixedButton.setEnabled(dataFileInfo.canMoveDown(columnInfo));
        }
      }
    }
  }
);
}",0.97239263803681
102073,"@Override void createControl(){
  treeViewer=new TreeViewer(getPrimaryPanel(),SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  Tree tree=treeViewer.getTree();
  final GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  treeViewer.getControl().setLayoutData(gridData);
  tree.addMouseListener(new MouseListener(){
    @Override public void mouseUp(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      if (treeViewer.getCell(pt) != null && treeViewer.getCell(pt).getViewerRow() != null && treeViewer.getCell(pt).getViewerRow().getItem() != null) {
        handleSelection((treeViewer.getCell(pt).getColumnIndex()),treeViewer.getCell(pt).getViewerRow().getItem().getData());
      }
    }
    @Override public void mouseDoubleClick(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      if (treeViewer.getCell(pt) != null && treeViewer.getCell(pt).getViewerRow() != null && treeViewer.getCell(pt).getViewerRow().getItem() != null) {
        handleDoubleClick((treeViewer.getCell(pt).getColumnIndex()),treeViewer.getCell(pt).getViewerRow().getItem().getData());
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  TreeColumn treeColumn=new TreeColumn(tree,SWT.LEFT);
  treeColumn.setText(Messages.model);
  TreeViewerColumn treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT);
  treeViewerColumn.getColumn().setText(Messages.security);
  treeViewerColumn.getColumn().setToolTipText(Messages.securityTooltip);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.create);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.read);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.update);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.delete);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.execute);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.alter);
  TableLayout layout=new TableLayout();
  layout.addColumnData(new ColumnWeightData(60));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(8));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(11));
  layout.addColumnData(new ColumnWeightData(8));
  tree.setLayout(layout);
  treeViewer.setContentProvider(getTreeProvider());
  treeViewer.setLabelProvider(getTreeProvider());
  treeViewer.setInput(getWizard().getTempContainer());
}","@Override void createControl(){
  treeViewer=new TreeViewer(getPrimaryPanel(),SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL);
  Tree tree=treeViewer.getTree();
  final GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  treeViewer.getControl().setLayoutData(gridData);
  tree.addMouseListener(new MouseListener(){
    @Override public void mouseUp(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      if (treeViewer.getCell(pt) != null && treeViewer.getCell(pt).getViewerRow() != null && treeViewer.getCell(pt).getViewerRow().getItem() != null) {
        handleSelection((treeViewer.getCell(pt).getColumnIndex()),treeViewer.getCell(pt).getViewerRow().getItem().getData());
      }
    }
    @Override public void mouseDoubleClick(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      if (treeViewer.getCell(pt) != null && treeViewer.getCell(pt).getViewerRow() != null && treeViewer.getCell(pt).getViewerRow().getItem() != null) {
        handleDoubleClick((treeViewer.getCell(pt).getColumnIndex()),treeViewer.getCell(pt).getViewerRow().getItem().getData());
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  TreeColumn treeColumn=new TreeColumn(tree,SWT.LEFT);
  treeColumn.setText(Messages.model);
  TreeViewerColumn treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT);
  treeViewerColumn.getColumn().setText(Messages.security);
  treeViewerColumn.getColumn().setToolTipText(Messages.securityTooltip);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.create);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.read);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.update);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.delete);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.execute);
  treeViewerColumn=new TreeViewerColumn(treeViewer,SWT.LEFT | SWT.CHECK);
  treeViewerColumn.getColumn().setText(Messages.alter);
  TableLayout layout=new TableLayout();
  layout.addColumnData(new ColumnWeightData(60));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(8));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(10));
  layout.addColumnData(new ColumnWeightData(11));
  layout.addColumnData(new ColumnWeightData(8));
  tree.setLayout(layout);
  treeViewer.setContentProvider(getTreeProvider());
  treeViewer.setLabelProvider(getTreeProvider());
  treeViewer.setInput(getWizard().getTempContainer());
}",0.996345514950166
102074,"private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(Messages.includeLabel);
  this.includeResultSetCB.setToolTipText(Messages.includeResultSetTooltip);
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(Messages.addLabel);
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  this.addColumnButton.setEnabled(false);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(Messages.deleteLabel);
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(Messages.moveUpLabel);
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(Messages.moveDownLabel);
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(Messages.includeLabel);
  this.includeResultSetCB.setToolTipText(Messages.includeResultSetTooltip);
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(Messages.addLabel);
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  this.addColumnButton.setEnabled(false);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(Messages.deleteLabel);
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(Messages.moveUpLabel);
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(Messages.moveDownLabel);
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  this.columnsViewer=new TableViewer(thePanel,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table columnTable=this.columnsViewer.getTable();
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.989882823663904
102075,"private Composite createParameterTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addParameterButton=new Button(buttonPanel,SWT.PUSH);
  addParameterButton.setText(Messages.addLabel);
  GridDataFactory.fillDefaults().applyTo(addParameterButton);
  addParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createParameter();
      handleInfoChanged();
    }
  }
);
  deleteParameterButton=new Button(buttonPanel,SWT.PUSH);
  deleteParameterButton.setText(Messages.deleteLabel);
  GridDataFactory.fillDefaults().applyTo(deleteParameterButton);
  deleteParameterButton.setEnabled(false);
  deleteParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter parameter=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          parameter=(RelationalParameter)obj;
          break;
        }
      }
      if (parameter != null) {
        getRelationalReference().removeParameter(parameter);
        deleteParameterButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upParameterButton=new Button(buttonPanel,SWT.PUSH);
  upParameterButton.setText(Messages.moveUpLabel);
  GridDataFactory.fillDefaults().applyTo(upParameterButton);
  upParameterButton.setEnabled(false);
  upParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterUp(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex - 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  downParameterButton=new Button(buttonPanel,SWT.PUSH);
  downParameterButton.setText(Messages.moveDownLabel);
  GridDataFactory.fillDefaults().applyTo(downParameterButton);
  downParameterButton.setEnabled(false);
  downParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterDown(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex + 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.parametersViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,150).applyTo(this.parametersViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.parameterNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ParameterNameEditingSupport(this.parametersViewer));
  column.setLabelProvider(new ParameterDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ParameterDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(2));
  column.setEditingSupport(new ParameterWidthEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.directionLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(3));
  column.setEditingSupport(new DirectionEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalParameter row : this.getRelationalReference().getParameters()) {
      this.parametersViewer.add(row);
    }
  }
  this.parametersViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteParameterButton.setEnabled(false);
        upParameterButton.setEnabled(false);
        downParameterButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalParameter columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalParameter)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalParameter)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteParameterButton.setEnabled(enable);
        if (enable) {
          upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(columnInfo));
          downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createParameterTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addParameterButton=new Button(buttonPanel,SWT.PUSH);
  addParameterButton.setText(Messages.addLabel);
  GridDataFactory.fillDefaults().applyTo(addParameterButton);
  addParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createParameter();
      handleInfoChanged();
    }
  }
);
  deleteParameterButton=new Button(buttonPanel,SWT.PUSH);
  deleteParameterButton.setText(Messages.deleteLabel);
  GridDataFactory.fillDefaults().applyTo(deleteParameterButton);
  deleteParameterButton.setEnabled(false);
  deleteParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter parameter=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          parameter=(RelationalParameter)obj;
          break;
        }
      }
      if (parameter != null) {
        getRelationalReference().removeParameter(parameter);
        deleteParameterButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upParameterButton=new Button(buttonPanel,SWT.PUSH);
  upParameterButton.setText(Messages.moveUpLabel);
  GridDataFactory.fillDefaults().applyTo(upParameterButton);
  upParameterButton.setEnabled(false);
  upParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterUp(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex - 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  downParameterButton=new Button(buttonPanel,SWT.PUSH);
  downParameterButton.setText(Messages.moveDownLabel);
  GridDataFactory.fillDefaults().applyTo(downParameterButton);
  downParameterButton.setEnabled(false);
  downParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterDown(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex + 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  this.parametersViewer=new TableViewer(thePanel,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table columnTable=this.parametersViewer.getTable();
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,150).applyTo(this.parametersViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.parameterNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ParameterNameEditingSupport(this.parametersViewer));
  column.setLabelProvider(new ParameterDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ParameterDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(2));
  column.setEditingSupport(new ParameterWidthEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.directionLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(3));
  column.setEditingSupport(new DirectionEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalParameter row : this.getRelationalReference().getParameters()) {
      this.parametersViewer.add(row);
    }
  }
  this.parametersViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteParameterButton.setEnabled(false);
        upParameterButton.setEnabled(false);
        downParameterButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalParameter columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalParameter)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalParameter)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteParameterButton.setEnabled(enable);
        if (enable) {
          upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(columnInfo));
          downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.9852002321532212
102076,"private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  this.columnsViewer=new TableViewer(thePanel,SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table columnTable=this.columnsViewer.getTable();
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.985854525778774
102077,"@Override public Map<String,Object> getParameterMap(){
  return this.parameterMap;
}","@Override public Map<String,Object> getParameterMap(){
  return this.parameterMap == null ? Collections.EMPTY_MAP : this.parameterMap;
}",0.7636363636363637
102078,"/** 
 * This method allows setting the values in the current info object using the values from an external info object
 * @param info the data file info object
 */
public void inject(TeiidXmlFileInfo info){
  CoreArgCheck.isNotNull(info.getDataFile(),""String_Node_Str"");
  this.cachedFirstLines=info.cachedFirstLines;
  this.numberOfLinesInFile=info.getNumberOfLinesInFile();
  this.rootPath=info.getRootPath();
  this.parameterMap=info.parameterMap;
  this.columnInfoList=new ArrayList<TeiidXmlColumnInfo>();
  for (  ITeiidXmlColumnInfo iColInfo : info.getColumnInfoList()) {
    TeiidXmlColumnInfo colInfo=(TeiidXmlColumnInfo)iColInfo;
    this.columnInfoList.add(new TeiidXmlColumnInfo(colInfo.getXmlElement(),colInfo.getXmlAttribute(),colInfo.getSymbolName(),colInfo.getOrdinality(),colInfo.getDatatype(),colInfo.getDefaultValue(),getRootPath(),colInfo.getFullXmlPath()));
  }
  setStatus(info.getStatus());
  if (info.getViewTableName() != null) {
    setViewTableName(info.getViewTableName());
  }
 else {
    setViewTableName(StringUtilities.EMPTY_STRING);
  }
  if (info.getViewProcedureName() != null) {
    setViewProcedureName(info.getViewProcedureName());
  }
 else {
    setViewProcedureName(StringUtilities.EMPTY_STRING);
  }
  validate();
}","/** 
 * This method allows setting the values in the current info object using the values from an external info object
 * @param info the data file info object
 */
public void inject(TeiidXmlFileInfo info){
  CoreArgCheck.isNotNull(info.getDataFile(),""String_Node_Str"");
  this.cachedFirstLines=info.cachedFirstLines;
  this.numberOfLinesInFile=info.getNumberOfLinesInFile();
  this.rootPath=info.getRootPath();
  this.parameterMap=info.parameterMap;
  this.columnInfoList=new ArrayList<TeiidXmlColumnInfo>();
  for (  ITeiidXmlColumnInfo iColInfo : info.getColumnInfoList()) {
    TeiidXmlColumnInfo colInfo=(TeiidXmlColumnInfo)iColInfo;
    this.columnInfoList.add(new TeiidXmlColumnInfo(colInfo.getXmlElement(),colInfo.getXmlAttribute(),colInfo.getSymbolName(),colInfo.getOrdinality(),colInfo.getDatatype(),colInfo.getDefaultValue(),getRootPath(),colInfo.getFullXmlPath()));
  }
  setStatus(info.getStatus());
  if (info.getViewTableName() != null) {
    setViewTableName(info.getViewTableName());
  }
 else {
    setViewTableName(StringConstants.EMPTY_STRING);
  }
  if (info.getViewProcedureName() != null) {
    setViewProcedureName(info.getViewProcedureName());
  }
 else {
    setViewProcedureName(StringConstants.EMPTY_STRING);
  }
  validate();
}",0.9872611464968152
102079,"@SuppressWarnings(""String_Node_Str"") private void createPanel(Composite parent){
  Composite mainPanel=WidgetFactory.createPanel(parent,SWT.NONE,GridData.FILL_BOTH,1,1);
  Composite headerPanel=WidgetFactory.createPanel(mainPanel,SWT.NONE,GridData.FILL_HORIZONTAL,1,2);
  headerPanel.setLayout(new GridLayout(2,false));
  Label label=new Label(headerPanel,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.modelNameText=new Text(headerPanel,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  this.modelNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  this.modelNameText.setBackground(headerPanel.getBackground());
  this.modelNameText.setForeground(GlobalUiColorManager.EMPHASIS_COLOR);
  label=new Label(headerPanel,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.modelLocationText=new Text(headerPanel,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  this.modelLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  this.modelLocationText.setBackground(headerPanel.getBackground());
  this.modelLocationText.setForeground(GlobalUiColorManager.EMPHASIS_COLOR);
  CTabFolder tabFolder=WidgetFactory.createTabFolder(mainPanel);
  CTabItem bindingsTab=new CTabItem(tabFolder,SWT.NONE);
  bindingsTab.setText(Messages.modelDetailsPanel_sourceBindingDefinition);
  bindingsTab.setToolTipText(Messages.modelDetailsPanel_sourceBindingDefinitionTooltip);
  Composite sourceBindingsGroup=new Composite(tabFolder,SWT.NONE);
  sourceBindingsGroup.setLayout(new GridLayout(1,false));
  sourceBindingsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  bindingsTab.setControl(sourceBindingsGroup);
  SOURCE_BINDING_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_HORIZONTAL,1,4);
    subPanel_1.setLayout(new GridLayout(4,false));
    multiSourceCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_multiSourceLabel,SWT.NONE,1,SWT.CHECK);
    multiSourceCB.setToolTipText(Messages.modelDetailsPanel_multiSourceCheckBoxTooltip);
    multiSourceCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setIsMultiSource(multiSourceCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    addColumnCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_addColumnLabel + ""String_Node_Str"",SWT.NONE,1,SWT.CHECK);
    addColumnCB.setToolTipText(Messages.modelDetailsPanel_addColumnCheckBoxTooltip);
    addColumnCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setAddColumn(addColumnCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    columnAliaslabel=new Label(subPanel_1,SWT.NONE);
    columnAliaslabel.setText(""String_Node_Str"");
    columnAliaslabel.setToolTipText(Messages.modelDetailsPanel_columnAliaslabelTooltip);
    columnAliasText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE);
    columnAliasText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    columnAliasText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        selectedVdbModelEntry.getSourceInfo().setColumnAlias(columnAliasText.getText());
      }
    }
);
    Composite lowerPanel=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_BOTH,2,1);
    lowerPanel.setLayout(new GridLayout(2,false));
    GridData gridData=new GridData(GridData.FILL_BOTH | GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);
    gridData.grabExcessHorizontalSpace=true;
    gridData.grabExcessVerticalSpace=true;
    lowerPanel.setLayoutData(gridData);
    Composite leftToolbarPanel=WidgetFactory.createPanel(lowerPanel,SWT.NONE,GridData.FILL_VERTICAL);
    GridLayout tbGL=new GridLayout();
    tbGL.marginHeight=0;
    tbGL.marginWidth=0;
    tbGL.verticalSpacing=2;
    leftToolbarPanel.setLayout(tbGL);
    addButton=new Button(leftToolbarPanel,SWT.PUSH);
    addButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
    addButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    addButton.setEnabled(false);
    addButton.setToolTipText(Messages.modelDetailsPanel_addButtonTooltip);
    addButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int numSources=selectedVdbModelEntry.getSourceInfo().getSources().size();
        boolean added=false;
        while (!added) {
          String newName=""String_Node_Str"" + numSources;
          added=selectedVdbModelEntry.getSourceInfo().add(newName,""String_Node_Str"",""String_Node_Str"");
          if (!added)           numSources++;
        }
        refreshModelDetails();
      }
    }
);
    deleteButton=new Button(leftToolbarPanel,SWT.PUSH);
    deleteButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
    deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    deleteButton.setEnabled(false);
    deleteButton.setToolTipText(Messages.modelDetailsPanel_deleteButtonTooltip);
    deleteButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IStructuredSelection selection=(IStructuredSelection)bindingsViewer.getSelection();
        for (        Object obj : selection.toArray()) {
          if (obj instanceof VdbSource) {
            selectedVdbModelEntry.getSourceInfo().removeSource((VdbSource)obj);
            refreshModelDetails();
          }
        }
      }
    }
);
    BINDING_TABLE: {
      int tableStyle=SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
      bindingsViewer=new TableViewer(lowerPanel,tableStyle);
      Table table=bindingsViewer.getTable();
      table.setLayout(new TableLayout());
      final GridData tblGD=new GridData(GridData.FILL_BOTH);
      tblGD.grabExcessHorizontalSpace=true;
      tblGD.grabExcessVerticalSpace=true;
      table.setLayoutData(tblGD);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      TableViewerColumn column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_sourceNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new SourceNameTextEditingSupport(bindingsViewer));
      column.setLabelProvider(new BindingDataLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_translatorNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new TranslatorEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_jndiNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new JndiEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(2));
      column.getColumn().pack();
      bindingsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          IStructuredSelection sel=(IStructuredSelection)event.getSelection();
          if (sel.isEmpty()) {
            deleteButton.setEnabled(false);
          }
 else           if (selectedVdbModelEntry.getSourceInfo().isMultiSource()) {
            boolean enable=true;
            Object[] objs=sel.toArray();
            for (            Object obj : objs) {
              if (!(obj instanceof VdbSource)) {
                enable=false;
                break;
              }
            }
            if (objs.length == 0) {
              enable=false;
            }
            deleteButton.setEnabled(enable);
          }
        }
      }
);
    }
  }
  CTabItem modelsTab=new CTabItem(tabFolder,SWT.NONE);
  modelsTab.setText(i18n(""String_Node_Str""));
  modelsTab.setToolTipText(Messages.modelDetailsPanel_modelDetailsTooltip);
  Composite modelDetailsPanel=new Composite(tabFolder,SWT.NONE);
  modelDetailsPanel.setLayout(new GridLayout(1,false));
  modelDetailsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelDetailsPanel.getLayoutData()).widthHint=200;
  modelsTab.setControl(modelDetailsPanel);
  NAME_LOCATION_DESCRIPTION_PANEL: {
    this.modelDescriptionEditor=new StyledTextEditor(modelDetailsPanel,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
    final GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.horizontalSpan=1;
    this.modelDescriptionEditor.setLayoutData(gridData);
    this.modelDescriptionEditor.getDocument().addDocumentListener(new IDocumentListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentAboutToBeChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentAboutToBeChanged(      final DocumentEvent event){
      }
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentChanged(      final DocumentEvent event){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.setDescription(modelDescriptionEditor.getText());
        }
      }
    }
);
    selectedVdbModelEntry=null;
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
    modelDescriptionEditor.getTextViewer().setEditable(false);
  }
  CTabItem problemsTab=new CTabItem(tabFolder,SWT.NONE);
  problemsTab.setText(Messages.modelDetailsPanel_problemsTabLabel);
  problemsTab.setToolTipText(Messages.modelDetailsPanel_problemsTabTooltip);
  Composite modelProblemsPanel=new Composite(tabFolder,SWT.NONE);
  modelProblemsPanel.setLayout(new GridLayout(1,false));
  modelProblemsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelProblemsPanel.getLayoutData()).widthHint=200;
  problemsTab.setControl(modelProblemsPanel);
  MODEL_PROBLEMS_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(modelProblemsPanel,SWT.NONE,GridData.FILL_BOTH,1,1);
    subPanel_1.setLayout(new GridLayout(1,false));
    PROBLEMS_TABLE: {
      int tableStyle=SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
      problemsViewer=new TableViewer(subPanel_1,tableStyle);
      Table table=problemsViewer.getTable();
      table.setLayout(new TableLayout());
      final GridData tblGD=new GridData(GridData.FILL_BOTH);
      tblGD.grabExcessHorizontalSpace=true;
      tblGD.grabExcessVerticalSpace=true;
      table.setLayoutData(tblGD);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      TableViewerColumn column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_problemPathLabel + ""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_problemDescriptionLabel + ""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(2));
      column.getColumn().pack();
    }
  }
  tabFolder.setSelection(0);
  multiSourceCB.setEnabled(false);
  addColumnCB.setEnabled(false);
  columnAliasText.setEnabled(false);
  addButton.setEnabled(false);
  deleteButton.setEnabled(false);
  columnAliaslabel.setEnabled(false);
  columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
}","@SuppressWarnings(""String_Node_Str"") private void createPanel(Composite parent){
  Composite mainPanel=WidgetFactory.createPanel(parent,SWT.NONE,GridData.FILL_BOTH,1,1);
  Composite headerPanel=WidgetFactory.createPanel(mainPanel,SWT.NONE,GridData.FILL_HORIZONTAL,1,2);
  headerPanel.setLayout(new GridLayout(2,false));
  Label label=new Label(headerPanel,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.modelNameText=new Text(headerPanel,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  this.modelNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  this.modelNameText.setBackground(headerPanel.getBackground());
  this.modelNameText.setForeground(GlobalUiColorManager.EMPHASIS_COLOR);
  label=new Label(headerPanel,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.modelLocationText=new Text(headerPanel,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  this.modelLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  this.modelLocationText.setBackground(headerPanel.getBackground());
  this.modelLocationText.setForeground(GlobalUiColorManager.EMPHASIS_COLOR);
  CTabFolder tabFolder=WidgetFactory.createTabFolder(mainPanel);
  CTabItem bindingsTab=new CTabItem(tabFolder,SWT.NONE);
  bindingsTab.setText(Messages.modelDetailsPanel_sourceBindingDefinition);
  bindingsTab.setToolTipText(Messages.modelDetailsPanel_sourceBindingDefinitionTooltip);
  Composite sourceBindingsGroup=new Composite(tabFolder,SWT.NONE);
  sourceBindingsGroup.setLayout(new GridLayout(1,false));
  sourceBindingsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  bindingsTab.setControl(sourceBindingsGroup);
  SOURCE_BINDING_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_HORIZONTAL,1,4);
    subPanel_1.setLayout(new GridLayout(4,false));
    multiSourceCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_multiSourceLabel,SWT.NONE,1,SWT.CHECK);
    multiSourceCB.setToolTipText(Messages.modelDetailsPanel_multiSourceCheckBoxTooltip);
    multiSourceCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setIsMultiSource(multiSourceCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    addColumnCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_addColumnLabel + ""String_Node_Str"",SWT.NONE,1,SWT.CHECK);
    addColumnCB.setToolTipText(Messages.modelDetailsPanel_addColumnCheckBoxTooltip);
    addColumnCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setAddColumn(addColumnCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    columnAliaslabel=new Label(subPanel_1,SWT.NONE);
    columnAliaslabel.setText(""String_Node_Str"");
    columnAliaslabel.setToolTipText(Messages.modelDetailsPanel_columnAliaslabelTooltip);
    columnAliasText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE);
    columnAliasText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    columnAliasText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        selectedVdbModelEntry.getSourceInfo().setColumnAlias(columnAliasText.getText());
      }
    }
);
    Composite lowerPanel=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_BOTH,2,1);
    lowerPanel.setLayout(new GridLayout(2,false));
    GridData gridData=new GridData(GridData.FILL_BOTH | GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);
    gridData.grabExcessHorizontalSpace=true;
    gridData.grabExcessVerticalSpace=true;
    lowerPanel.setLayoutData(gridData);
    Composite leftToolbarPanel=WidgetFactory.createPanel(lowerPanel,SWT.NONE,GridData.FILL_VERTICAL);
    GridLayout tbGL=new GridLayout();
    tbGL.marginHeight=0;
    tbGL.marginWidth=0;
    tbGL.verticalSpacing=2;
    leftToolbarPanel.setLayout(tbGL);
    addButton=new Button(leftToolbarPanel,SWT.PUSH);
    addButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
    addButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    addButton.setEnabled(false);
    addButton.setToolTipText(Messages.modelDetailsPanel_addButtonTooltip);
    addButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int numSources=selectedVdbModelEntry.getSourceInfo().getSources().size();
        boolean added=false;
        while (!added) {
          String newName=""String_Node_Str"" + numSources;
          added=selectedVdbModelEntry.getSourceInfo().add(newName,""String_Node_Str"",""String_Node_Str"");
          if (!added)           numSources++;
        }
        refreshModelDetails();
      }
    }
);
    deleteButton=new Button(leftToolbarPanel,SWT.PUSH);
    deleteButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
    deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    deleteButton.setEnabled(false);
    deleteButton.setToolTipText(Messages.modelDetailsPanel_deleteButtonTooltip);
    deleteButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IStructuredSelection selection=(IStructuredSelection)bindingsViewer.getSelection();
        for (        Object obj : selection.toArray()) {
          if (obj instanceof VdbSource) {
            selectedVdbModelEntry.getSourceInfo().removeSource((VdbSource)obj);
            refreshModelDetails();
          }
        }
      }
    }
);
    BINDING_TABLE: {
      int tableStyle=SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER;
      bindingsViewer=new TableViewer(lowerPanel,tableStyle);
      Table table=bindingsViewer.getTable();
      table.setLayout(new TableLayout());
      final GridData tblGD=new GridData(GridData.FILL_BOTH);
      tblGD.grabExcessHorizontalSpace=true;
      tblGD.grabExcessVerticalSpace=true;
      table.setLayoutData(tblGD);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      TableViewerColumn column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_sourceNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new SourceNameTextEditingSupport(bindingsViewer));
      column.setLabelProvider(new BindingDataLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_translatorNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new TranslatorEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_jndiNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new JndiEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(2));
      column.getColumn().pack();
      bindingsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          IStructuredSelection sel=(IStructuredSelection)event.getSelection();
          if (sel.isEmpty()) {
            deleteButton.setEnabled(false);
          }
 else           if (selectedVdbModelEntry.getSourceInfo().isMultiSource()) {
            boolean enable=true;
            Object[] objs=sel.toArray();
            for (            Object obj : objs) {
              if (!(obj instanceof VdbSource)) {
                enable=false;
                break;
              }
            }
            if (objs.length == 0) {
              enable=false;
            }
            deleteButton.setEnabled(enable);
          }
        }
      }
);
    }
  }
  CTabItem modelsTab=new CTabItem(tabFolder,SWT.NONE);
  modelsTab.setText(i18n(""String_Node_Str""));
  modelsTab.setToolTipText(Messages.modelDetailsPanel_modelDetailsTooltip);
  Composite modelDetailsPanel=new Composite(tabFolder,SWT.NONE);
  modelDetailsPanel.setLayout(new GridLayout(1,false));
  modelDetailsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelDetailsPanel.getLayoutData()).widthHint=200;
  modelsTab.setControl(modelDetailsPanel);
  NAME_LOCATION_DESCRIPTION_PANEL: {
    this.modelDescriptionEditor=new StyledTextEditor(modelDetailsPanel,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
    final GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.horizontalSpan=1;
    this.modelDescriptionEditor.setLayoutData(gridData);
    this.modelDescriptionEditor.getDocument().addDocumentListener(new IDocumentListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentAboutToBeChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentAboutToBeChanged(      final DocumentEvent event){
      }
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentChanged(      final DocumentEvent event){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.setDescription(modelDescriptionEditor.getText());
        }
      }
    }
);
    selectedVdbModelEntry=null;
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
    modelDescriptionEditor.getTextViewer().setEditable(false);
  }
  CTabItem problemsTab=new CTabItem(tabFolder,SWT.NONE);
  problemsTab.setText(Messages.modelDetailsPanel_problemsTabLabel);
  problemsTab.setToolTipText(Messages.modelDetailsPanel_problemsTabTooltip);
  Composite modelProblemsPanel=new Composite(tabFolder,SWT.NONE);
  modelProblemsPanel.setLayout(new GridLayout(1,false));
  modelProblemsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelProblemsPanel.getLayoutData()).widthHint=200;
  problemsTab.setControl(modelProblemsPanel);
  MODEL_PROBLEMS_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(modelProblemsPanel,SWT.NONE,GridData.FILL_BOTH,1,1);
    subPanel_1.setLayout(new GridLayout(1,false));
    PROBLEMS_TABLE: {
      int tableStyle=SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
      problemsViewer=new TableViewer(subPanel_1,tableStyle);
      Table table=problemsViewer.getTable();
      table.setLayout(new TableLayout());
      final GridData tblGD=new GridData(GridData.FILL_BOTH);
      tblGD.grabExcessHorizontalSpace=true;
      tblGD.grabExcessVerticalSpace=true;
      table.setLayoutData(tblGD);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      TableViewerColumn column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_problemPathLabel + ""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(problemsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_problemDescriptionLabel + ""String_Node_Str"");
      column.setLabelProvider(new ProblemMarkerLabelProvider(2));
      column.getColumn().pack();
    }
  }
  tabFolder.setSelection(0);
  multiSourceCB.setEnabled(false);
  addColumnCB.setEnabled(false);
  columnAliasText.setEnabled(false);
  addButton.setEnabled(false);
  deleteButton.setEnabled(false);
  columnAliaslabel.setEnabled(false);
  columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
}",0.9991126169732172
102080,"/** 
 * @param defaultValue the column defaultValue
 */
public void setDefaultValue(String defaultValue){
  if (defaultValue == null) {
    this.defaultValue=StringUtilities.EMPTY_STRING;
  }
 else {
    this.defaultValue=defaultValue;
  }
  validate();
}","/** 
 * @param defaultValue the column defaultValue
 */
public void setDefaultValue(String defaultValue){
  if (defaultValue == null) {
    this.defaultValue=StringConstants.EMPTY_STRING;
  }
 else {
    this.defaultValue=defaultValue;
  }
  validate();
}",0.9686274509803922
102081,"/** 
 * @param name the column name (never <code>null</code> or empty).
 * @param datatype the column datatype (never <code>null</code> or empty).
 */
public TeiidXmlColumnInfo(XmlElement element,XmlAttribute attribute,String name,boolean ordinality,String datatype,String defaultValue,String rootPath,String fullXmlPath){
  super();
  initializing=true;
  this.xmlElement=element;
  this.xmlAttribute=attribute;
  setRootPath(rootPath);
  setRelativePathInternal(element);
  initNameSymbol(name);
  this.datatype=datatype;
  this.forOrdinality=ordinality;
  if (defaultValue == null) {
    this.defaultValue=StringUtilities.EMPTY_STRING;
  }
 else {
    this.defaultValue=defaultValue;
  }
  initializing=false;
}","/** 
 * @param name the column name (never <code>null</code> or empty).
 * @param datatype the column datatype (never <code>null</code> or empty).
 */
public TeiidXmlColumnInfo(XmlElement element,XmlAttribute attribute,String name,boolean ordinality,String datatype,String defaultValue,String rootPath,String fullXmlPath){
  super();
  initializing=true;
  this.xmlElement=element;
  this.xmlAttribute=attribute;
  setRootPath(rootPath);
  setRelativePathInternal(element);
  initNameSymbol(name);
  this.datatype=datatype;
  this.forOrdinality=ordinality;
  if (defaultValue == null) {
    this.defaultValue=StringConstants.EMPTY_STRING;
  }
 else {
    this.defaultValue=defaultValue;
  }
  initializing=false;
}",0.988795518207283
102082,"/** 
 * @param xmlPath the column xmlPath
 */
public void setRelativePath(String relativePath){
  this.relativePath=new Path(relativePath);
  validate();
}","/** 
 * @param xmlPath the column xmlPath
 */
public void setRelativePath(String relativePath){
  this.relativePath=relativePath;
  validate();
}",0.9666666666666668
102083,"private void setRelativePathInternal(Object obj){
  IPath rootPath=this.rootXmlPath;
  if (obj instanceof XmlElement) {
    XmlElement element=(XmlElement)obj;
    IPath fullPath=new Path(element.getFullPath());
    IPath relativePath=fullPath.makeRelativeTo(rootPath).append(TEXT_SEGMENT);
    setRelativePath(relativePath.toString());
    return;
  }
  if (obj instanceof XmlAttribute) {
    XmlAttribute attr=(XmlAttribute)obj;
    XmlElement element=attr.getElement();
    IPath fullPath=new Path(element.getFullPath());
    IPath relativePath=fullPath.makeRelativeTo(rootPath).append('@' + attr.getName());
    setRelativePath(relativePath.toString());
    return;
  }
}","private void setRelativePathInternal(Object obj){
  String rootPath=this.rootXmlPath;
  if (obj instanceof XmlElement) {
    XmlElement element=(XmlElement)obj;
    String fullPath=element.getFullPath();
    StringBuffer relativePathBuff=new StringBuffer(getRelativePath(fullPath,rootPath));
    if (!relativePathBuff.toString().isEmpty() && !relativePathBuff.toString().endsWith(XmlElement.SEPARATOR)) {
      relativePathBuff.append(XmlElement.SEPARATOR);
    }
    relativePathBuff.append(TEXT_SEGMENT);
    setRelativePath(relativePathBuff.toString());
    return;
  }
  if (obj instanceof XmlAttribute) {
    XmlAttribute attr=(XmlAttribute)obj;
    XmlElement element=attr.getElement();
    String fullPath=element.getFullPath();
    StringBuffer relativePathBuff=new StringBuffer(getRelativePath(fullPath,rootPath));
    if (!relativePathBuff.toString().isEmpty() && !relativePathBuff.toString().endsWith(XmlElement.SEPARATOR)) {
      relativePathBuff.append(XmlElement.SEPARATOR);
    }
    relativePathBuff.append(AT_SIGN + attr.getName());
    setRelativePath(relativePathBuff.toString());
    return;
  }
}",0.5454545454545454
102084,"/** 
 * @return xmlPath the column xmlPath
 */
public String getFullXmlPath(){
  return this.rootXmlPath.append(this.relativePath).toString();
}","/** 
 * @return xmlPath the column xmlPath
 */
public String getFullXmlPath(){
  return this.rootXmlPath + XmlElement.SEPARATOR + this.relativePath;
}",0.8571428571428571
102085,"public void setRootPath(String thePath){
  boolean rootPathChanged=false;
  IPath newRootPath=null;
  if (thePath != null && thePath.length() > 0) {
    newRootPath=new Path(thePath);
  }
 else {
    newRootPath=EMPTY_PATH;
  }
  if (!this.rootXmlPath.equals(newRootPath)) {
    rootPathChanged=true;
  }
  if (rootPathChanged) {
    if (!initializing && fullPathExists()) {
      if (isXmlAttribute()) {
        String lastSegment=this.relativePath.lastSegment().toString();
        IPath fullPath=new Path(this.xmlElement.getFullPath());
        IPath relativePath=fullPath.makeRelativeTo(newRootPath).append(lastSegment);
        setRelativePath(relativePath.toString());
      }
 else {
        IPath fullPath=new Path(this.xmlElement.getFullPath());
        if (this.relativePath != null && !this.relativePath.isEmpty() && this.relativePath.lastSegment().equalsIgnoreCase(TEXT_SEGMENT)) {
          IPath shortPath=fullPath;
          IPath newFullPath=shortPath.append(TEXT_SEGMENT);
          IPath relativePath=newFullPath.makeRelativeTo(newRootPath);
          setRelativePath(relativePath.toString());
        }
 else {
          IPath theFullPath=new Path(this.xmlElement.getFullPath());
          IPath relativePath=theFullPath.makeRelativeTo(newRootPath);
          setRelativePath(relativePath.toString());
        }
      }
    }
    this.rootXmlPath=newRootPath;
  }
  if (!initializing) {
    validate();
  }
}","public void setRootPath(String thePath){
  boolean rootPathChanged=false;
  String newRootPath=null;
  if (thePath != null && thePath.length() > 0) {
    newRootPath=thePath;
  }
 else {
    newRootPath=StringConstants.EMPTY_STRING;
  }
  if (!this.rootXmlPath.equalsIgnoreCase(newRootPath)) {
    rootPathChanged=true;
  }
  if (rootPathChanged) {
    if (!initializing && fullPathExists()) {
      if (isXmlAttribute()) {
        String fullPath=this.xmlElement.getFullPath() + XmlElement.SEPARATOR + AT_SIGN+ getXmlAttribute().getName();
        String relativePath=getRelativePath(fullPath,newRootPath);
        setRelativePath(relativePath);
      }
 else {
        String fullPath=this.xmlElement.getFullPath();
        if (this.relativePath != null && !this.relativePath.isEmpty() && TEXT_SEGMENT.equalsIgnoreCase(getLastSegment(this.relativePath))) {
          String shortPath=fullPath;
          String newFullPath=shortPath + XmlElement.SEPARATOR + TEXT_SEGMENT;
          String relativePath=getRelativePath(newFullPath,newRootPath);
          setRelativePath(relativePath);
        }
 else {
          String theFullPath=this.xmlElement.getFullPath();
          String relativePath=getRelativePath(theFullPath,newRootPath);
          setRelativePath(relativePath);
        }
      }
    }
    this.rootXmlPath=newRootPath;
  }
  if (!initializing) {
    validate();
  }
}",0.2924226254002134
102086,"private boolean fullPathExists(){
  IPath fullXmlElementPath=new Path(this.xmlElement.getFullPath());
  boolean pathOK=true;
  if (isXmlAttribute()) {
    IPath thisFullPath=new Path(getFullXmlPath());
    IPath shortPath=thisFullPath.removeLastSegments(1);
    int nSegs=shortPath.segmentCount();
    if (fullXmlElementPath.matchingFirstSegments(shortPath) != nSegs) {
      pathOK=false;
    }
  }
 else {
    IPath thisFullPath=new Path(getFullXmlPath());
    if (thisFullPath.lastSegment().equalsIgnoreCase(TEXT_SEGMENT)) {
      IPath shortPath=thisFullPath.removeLastSegments(1);
      int nSegs=shortPath.segmentCount();
      if (fullXmlElementPath.matchingFirstSegments(shortPath) != nSegs) {
        pathOK=false;
      }
    }
 else {
      pathOK=thisFullPath.equals(fullXmlElementPath);
    }
  }
  return pathOK;
}","private boolean fullPathExists(){
  String fullXmlElementPath=this.xmlElement.getFullPath();
  boolean pathOK=true;
  if (isXmlAttribute()) {
    String thisFullPath=getFullXmlPath();
    thisFullPath=collapseDotDots(thisFullPath);
    String shortPath=removeLastSegment(thisFullPath);
    int nSegs=getPathSegments(shortPath).size();
    if (getMatchingSegmentCount(fullXmlElementPath,shortPath) != nSegs) {
      pathOK=false;
    }
  }
 else {
    String thisFullPath=getFullXmlPath();
    if (TEXT_SEGMENT.equalsIgnoreCase(getLastSegment(thisFullPath))) {
      thisFullPath=collapseDotDots(thisFullPath);
      String shortPath=removeLastSegment(thisFullPath);
      int nSegs=getPathSegments(shortPath).size();
      if (getMatchingSegmentCount(fullXmlElementPath,shortPath) != nSegs) {
        pathOK=false;
      }
    }
 else {
      pathOK=thisFullPath.equals(fullXmlElementPath);
    }
  }
  return pathOK;
}",0.5403548941041786
102087,"/** 
 * @return xmlPath the column xmlPath
 */
public String getRelativePath(){
  return this.relativePath.toString();
}","/** 
 * Form the relative path from the full path and the root path
 * @param fullPath the full path
 * @param rootPath the root path
 * @return the relative path
 */
private String getRelativePath(String fullPath,String rootPath){
  StringBuffer resultBuff=new StringBuffer();
  int nMatch=getMatchingSegmentCount(fullPath,rootPath);
  int extraSegs=getPathSegments(rootPath).size() - nMatch;
  List<String> segments=getPathSegments(fullPath);
  for (int i=0; i < segments.size(); i++) {
    if (i >= nMatch) {
      if (i != nMatch)       resultBuff.append(XmlElement.SEPARATOR);
      resultBuff.append(segments.get(i));
    }
  }
  for (int i=0; i < extraSegs; i++) {
    resultBuff.insert(0,DOT_DOT + XmlElement.SEPARATOR);
  }
  return resultBuff.toString();
}",0.0564334085778781
102088,"/** 
 * @param < V >
 * @param parent
 * @param tableProvider
 * @param columnProviders
 */
public <V>Table(final Composite parent,final TableProvider<T> tableProvider,final ColumnProvider<T,V>... columnProviders){
  viewer=new TableViewer(parent);
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public void dispose(){
    }
    @Override public Object[] getElements(    final Object inputElement){
      return tableProvider.getElements();
    }
    @Override public void inputChanged(    final Viewer viewer,    final Object oldInput,    final Object newInput){
    }
  }
);
  ColumnViewerToolTipSupport.enableFor(viewer);
  final org.eclipse.swt.widgets.Table table=viewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  this.columns=new ArrayList<TableViewerColumn>();
  for (  final ColumnProvider<T,V> columnProvider : columnProviders) {
    final TableViewerColumn viewerCol=new TableViewerColumn(viewer,columnProvider.getAlignment());
    this.columns.add(viewerCol);
    viewerCol.setLabelProvider(new ColumnLabelProvider(){
      @SuppressWarnings(""String_Node_Str"") @Override public Image getImage(      final Object element){
        if (columnProvider.getAlignment() != SWT.LEFT)         return null;
        return columnProvider.getImage((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override public String getText(      final Object element){
        return columnProvider.getText((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override public String getToolTipText(      final Object element){
        return columnProvider.getToolTip((T)element);
      }
    }
);
    viewerCol.setEditingSupport(new EditingSupport(viewer){
      @SuppressWarnings(""String_Node_Str"") @Override protected boolean canEdit(      final Object element){
        return columnProvider.isEditable((T)element);
      }
      @Override protected CellEditor getCellEditor(      final Object element){
        try {
          return columnProvider.getEditorClass().getConstructor(Composite.class).newInstance(table);
        }
 catch (        final Exception error) {
          throw new RuntimeException(error);
        }
      }
      @SuppressWarnings(""String_Node_Str"") @Override protected Object getValue(      final Object element){
        return columnProvider.getValue((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override protected void setValue(      final Object element,      final Object value){
        columnProvider.setValue((T)element,(V)value);
        viewer.update(element,null);
      }
    }
);
    final TableColumn col=viewerCol.getColumn();
    if (columnProvider.getName() != null) {
      col.setText(columnProvider.getName());
    }
 else     if (columnProvider.getImage() != null) {
      col.setImage(columnProvider.getImage());
    }
    col.setMoveable(false);
    col.setResizable(columnProvider.isResizable());
  }
  final Listener paintListener=new Listener(){
    @Override @SuppressWarnings(""String_Node_Str"") public void handleEvent(    final Event event){
      final ColumnProvider<T,V> columnProvider=columnProviders[event.index];
      final Image image=(columnProvider.getAlignment() == SWT.LEFT ? null : columnProvider.getImage((T)event.item.getData()));
      if (image == null)       return;
      final int cellWidth=table.getColumn(event.index).getWidth();
switch (event.type) {
case SWT.MeasureItem:
{
          final Rectangle rect=image.getBounds();
          event.width=cellWidth;
          event.height=Math.max(event.height,rect.height);
          break;
        }
case SWT.PaintItem:
{
        final Rectangle rect=image.getBounds();
        final int xOffset=(cellWidth - rect.width) / 2;
        final int yOffset=(event.height - rect.height) / 2;
        event.gc.drawImage(image,event.x + xOffset,event.y + yOffset);
        break;
      }
  }
}
}
;
table.addListener(SWT.MeasureItem,paintListener);
table.addListener(SWT.PaintItem,paintListener);
viewer.setSorter(new ViewerSorter(){
private final Integer[] indexes;
{
  final List<Integer> indexes=new ArrayList<Integer>();
  for (int ndx=0, len=columnProviders.length; ndx < len; ++ndx)   if (columnProviders[ndx].isSortable())   indexes.add(ndx);
  this.indexes=indexes.toArray(new Integer[indexes.size()]);
}
@SuppressWarnings(""String_Node_Str"") @Override public int compare(final Viewer viewer,final Object element1,final Object element2){
  for (  final Integer ndx : indexes) {
    final int result=columnProviders[ndx].compare((T)element1,(T)element2);
    if (result != 0)     return result;
  }
  return 0;
}
}
);
}","/** 
 * @param < V >
 * @param parent parent composite
 * @param tableStyle table style 
 * @param tableProvider table provider
 * @param columnProviders column providers
 */
public <V>Table(final Composite parent,final int tableStyle,final TableProvider<T> tableProvider,final ColumnProvider<T,V>... columnProviders){
  if (tableStyle == -1) {
    viewer=new TableViewer(parent);
  }
 else {
    viewer=new TableViewer(parent,tableStyle);
  }
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public void dispose(){
    }
    @Override public Object[] getElements(    final Object inputElement){
      return tableProvider.getElements();
    }
    @Override public void inputChanged(    final Viewer viewer,    final Object oldInput,    final Object newInput){
    }
  }
);
  ColumnViewerToolTipSupport.enableFor(viewer);
  final org.eclipse.swt.widgets.Table table=viewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  this.columns=new ArrayList<TableViewerColumn>();
  for (  final ColumnProvider<T,V> columnProvider : columnProviders) {
    final TableViewerColumn viewerCol=new TableViewerColumn(viewer,columnProvider.getAlignment());
    this.columns.add(viewerCol);
    viewerCol.setLabelProvider(new ColumnLabelProvider(){
      @SuppressWarnings(""String_Node_Str"") @Override public Image getImage(      final Object element){
        if (columnProvider.getAlignment() != SWT.LEFT)         return null;
        return columnProvider.getImage((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override public String getText(      final Object element){
        return columnProvider.getText((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override public String getToolTipText(      final Object element){
        return columnProvider.getToolTip((T)element);
      }
    }
);
    viewerCol.setEditingSupport(new EditingSupport(viewer){
      @SuppressWarnings(""String_Node_Str"") @Override protected boolean canEdit(      final Object element){
        return columnProvider.isEditable((T)element);
      }
      @Override protected CellEditor getCellEditor(      final Object element){
        try {
          return columnProvider.getEditorClass().getConstructor(Composite.class).newInstance(table);
        }
 catch (        final Exception error) {
          throw new RuntimeException(error);
        }
      }
      @SuppressWarnings(""String_Node_Str"") @Override protected Object getValue(      final Object element){
        return columnProvider.getValue((T)element);
      }
      @SuppressWarnings(""String_Node_Str"") @Override protected void setValue(      final Object element,      final Object value){
        columnProvider.setValue((T)element,(V)value);
        viewer.update(element,null);
      }
    }
);
    final TableColumn col=viewerCol.getColumn();
    if (columnProvider.getName() != null) {
      col.setText(columnProvider.getName());
    }
 else     if (columnProvider.getImage() != null) {
      col.setImage(columnProvider.getImage());
    }
    col.setMoveable(false);
    col.setResizable(columnProvider.isResizable());
  }
  final Listener paintListener=new Listener(){
    @Override @SuppressWarnings(""String_Node_Str"") public void handleEvent(    final Event event){
      final ColumnProvider<T,V> columnProvider=columnProviders[event.index];
      final Image image=(columnProvider.getAlignment() == SWT.LEFT ? null : columnProvider.getImage((T)event.item.getData()));
      if (image == null)       return;
      final int cellWidth=table.getColumn(event.index).getWidth();
switch (event.type) {
case SWT.MeasureItem:
{
          final Rectangle rect=image.getBounds();
          event.width=cellWidth;
          event.height=Math.max(event.height,rect.height);
          break;
        }
case SWT.PaintItem:
{
        final Rectangle rect=image.getBounds();
        final int xOffset=(cellWidth - rect.width) / 2;
        final int yOffset=(event.height - rect.height) / 2;
        event.gc.drawImage(image,event.x + xOffset,event.y + yOffset);
        break;
      }
  }
}
}
;
table.addListener(SWT.MeasureItem,paintListener);
table.addListener(SWT.PaintItem,paintListener);
viewer.setSorter(new ViewerSorter(){
private final Integer[] indexes;
{
  final List<Integer> indexes=new ArrayList<Integer>();
  for (int ndx=0, len=columnProviders.length; ndx < len; ++ndx)   if (columnProviders[ndx].isSortable())   indexes.add(ndx);
  this.indexes=indexes.toArray(new Integer[indexes.size()]);
}
@SuppressWarnings(""String_Node_Str"") @Override public int compare(final Viewer viewer,final Object element1,final Object element2){
  for (  final Integer ndx : indexes) {
    final int result=columnProviders[ndx].compare((T)element1,(T)element2);
    if (result != 0)     return result;
  }
  return 0;
}
}
);
}",0.979710748101134
102089,"/** 
 * @param < V >
 * @param parent the parent panel (never <code>null</code>)
 * @param span the layout data horizontal span
 * @param tableProvider
 * @param columnProviders
 */
public <V>TableAndToolBar(final Composite parent,final int span,final TableProvider<T> tableProvider,final ColumnProvider<T,V>... columnProviders){
  table=new Table<T>(parent,tableProvider,columnProviders);
  ToolBar toolBar=new ToolBar(parent,SWT.PUSH | SWT.BORDER);
  this.toolBarMgr=new ToolBarManager(toolBar);
  if (tableProvider.isDoubleClickSupported()) {
    getViewer().addDoubleClickListener(new IDoubleClickListener(){
      @Override public void doubleClick(      final DoubleClickEvent event){
        tableProvider.doubleClicked((T)((IStructuredSelection)event.getSelection()).getFirstElement());
      }
    }
);
  }
}","/** 
 * @param < V >
 * @param parent the parent panel (never <code>null</code>)
 * @param tableStyle the table style
 * @param span the layout data horizontal span
 * @param tableProvider the table provider
 * @param columnProviders the column providers
 */
public <V>TableAndToolBar(final Composite parent,final int tableStyle,final int span,final TableProvider<T> tableProvider,final ColumnProvider<T,V>... columnProviders){
  if (tableStyle == -1) {
    table=new Table<T>(parent,tableProvider,columnProviders);
  }
 else {
    table=new Table<T>(parent,tableStyle,tableProvider,columnProviders);
  }
  ToolBar toolBar=new ToolBar(parent,SWT.PUSH | SWT.BORDER);
  this.toolBarMgr=new ToolBarManager(toolBar);
  if (tableProvider.isDoubleClickSupported()) {
    getViewer().addDoubleClickListener(new IDoubleClickListener(){
      @Override public void doubleClick(      final DoubleClickEvent event){
        tableProvider.doubleClicked((T)((IStructuredSelection)event.getSelection()).getFirstElement());
      }
    }
);
  }
}",0.8619382782891175
102090,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createModelsSection(Composite parent){
  modelsGroup=new TableAndToolBar(parent,1,new DefaultTableProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#doubleClicked(java.lang.Object)
 */
    @Override public void doubleClicked(    final VdbModelEntry element){
      openEditor(element);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.TableProvider#getElements()
 */
    @Override public VdbModelEntry[] getElements(){
      final Set<VdbModelEntry> modelEntries=getVdb().getModelEntries();
      return modelEntries.toArray(new VdbModelEntry[modelEntries.size()]);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#isDoubleClickSupported()
 */
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getImage(java.lang.Object)
 */
    @Override public Image getImage(    final VdbModelEntry element){
      return ModelIdentifier.getModelImage(element.findFileInWorkspace());
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return MODEL_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final VdbModelEntry element){
      return element.getName().lastSegment();
    }
  }
,this.syncColumnProvider,new CheckBoxColumnProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return VdbUiPlugin.singleton.getImage(VdbUiConstants.Images.VISIBLE_ICON);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getToolTip(java.lang.Object)
 */
    @Override public String getToolTip(    final VdbModelEntry element){
      return element.isVisible() ? VISIBLE_TOOLTIP : NOT_VISIBLE_TOOLTIP;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public Boolean getValue(    final VdbModelEntry element){
      return element.isVisible();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#isEditable(java.lang.Object)
 */
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#setValue(java.lang.Object,java.lang.Object)
 */
    @Override public void setValue(    final VdbModelEntry element,    final Boolean value){
      element.setVisible(value);
    }
  }
);
  ButtonProvider addProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.ADD_MODEL);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      final ViewerFilter filter=new ViewerFilter(){
        /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ViewerFilter#select(org.eclipse.jface.viewers.Viewer,java.lang.Object,java.lang.Object)
 */
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer) {
            IProject proj=((IContainer)element).getProject();
            IProject vdbProject=getVdb().getFile().getProject();
            if (proj.isOpen() && proj.equals(vdbProject)) {
              return true;
            }
            return false;
          }
          final IFile file=(IFile)element;
          if (!ModelUtilities.isModelFile(file)) {
            return false;
          }
          if (ModelUtil.isXsdFile(file)) {
            return false;
          }
          for (          final VdbModelEntry modelEntry : getVdb().getModelEntries())           if (file.equals(modelEntry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      ModelingResourceFilter wsFilter=new ModelingResourceFilter(filter);
      wsFilter.setShowHiddenProjects(false);
      final Object[] models=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,wsFilter,getModelSelectionValidator(),getModelLabelProvider());
      if (!getVdb().getDataPolicyEntries().isEmpty()) {
        MessageDialog.openInformation(Display.getCurrent().getActiveShell(),VdbEditor.CONFIRM_DIALOG_TITLE,INFORM_DATA_ROLES_ON_ADD_MESSAGE);
      }
      boolean firstTime=(modelsGroup.getTable().getViewer().getTable().getItemCount() == 0);
      boolean success=false;
      boolean foundDuplicateNames=false;
      boolean proceed=false;
      try {
        for (        final Object model : models) {
          boolean canAdd=VdbUtil.canAddModelToVdb((IFile)model,getVdb());
          if (!canAdd) {
            MessageDialog.openError(Display.getCurrent().getActiveShell(),VdbEditor.CANNOT_ADD_DUPLICATE_MODEL_NAME_TITLE,CANNOT_ADD_DUPLICATE_MODEL_NAME_MESSAGE);
            foundDuplicateNames=true;
          }
          break;
        }
        success=true;
      }
 catch (      Exception ex) {
        ErrorHandler.toExceptionDialog(ex);
      }
 finally {
        if (success) {
          proceed=!foundDuplicateNames;
        }
      }
      if (proceed) {
        try {
          for (          final Object model : models) {
            getVdb().addEntry(((IFile)model).getFullPath(),new NullProgressMonitor());
          }
        }
 catch (        Exception ex) {
          ErrorHandler.toExceptionDialog(ex);
        }
      }
      modelsGroup.getTable().getViewer().refresh();
      pnlTranslatorOverrides.refresh();
      udfJarsGroup.getTable().getViewer().refresh();
      if (firstTime) {
        packModelsGroup();
      }
      showImportVdbsButton.setEnabled(!getVdb().getImportVdbEntries().isEmpty());
    }
  }
;
  modelsGroup.add(addProvider);
  ButtonProvider removeProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.REMOVE_MODEL);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return !selection.isEmpty();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      if (!ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE))       return;
      final Set<VdbEntry> entries=new HashSet<VdbEntry>();
      final Set<VdbModelEntry> importedBy=new HashSet<VdbModelEntry>();
      for (      final Object element : selection.toList()) {
        entries.add((VdbEntry)element);
        if (element instanceof VdbModelEntry)         importedBy.addAll(((VdbModelEntry)element).getImportedBy());
      }
      if (!importedBy.isEmpty())       importedBy.removeAll(entries);
      if (!importedBy.isEmpty()) {
        if (!ConfirmationDialog.confirm(new ConfirmationDialog(CONFIRM_REMOVE_IMPORTED_BY_MESSAGE){
          /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.dialogs.MessageDialog#createCustomArea(org.eclipse.swt.widgets.Composite)
 */
          @Override protected Control createCustomArea(          final Composite parent){
            final ListViewer viewer=new ListViewer(parent);
            viewer.setContentProvider(new DefaultContentProvider());
            viewer.setLabelProvider(new LabelProvider(){
              /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.LabelProvider#getText(java.lang.Object)
 */
              @Override public String getText(              final Object element){
                return ((VdbEntry)element).getName().toString();
              }
            }
);
            viewer.getList().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            viewer.setInput(importedBy);
            return viewer.getControl();
          }
        }
))         return;
        entries.addAll(importedBy);
      }
      dataRoleResolver.modelEntriesRemoved(entries);
      for (      final VdbEntry entry : entries) {
        getVdb().removeEntry(entry);
      }
      udfJarsGroup.getTable().getViewer().refresh();
      showImportVdbsButton.setEnabled(!getVdb().getImportVdbEntries().isEmpty());
    }
  }
;
  modelsGroup.add(removeProvider);
  final TableViewer viewer=modelsGroup.getTable().getViewer();
  final MenuManager menuManager=new MenuManager();
  viewer.getControl().setMenu(menuManager.createContextMenu(parent));
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
 */
    @Override public void selectionChanged(    final SelectionChangedEvent event){
      menuManager.removeAll();
      final Object[] actions=SourceHandlerExtensionManager.findApplicableActions(viewer.getSelection());
      if (actions != null)       for (      final Object action : actions) {
        if (action instanceof IAction)         menuManager.add((IAction)action);
      }
      IStructuredSelection sel=(IStructuredSelection)viewer.getSelection();
      VdbModelEntry selectedEntry=null;
      if (sel.getFirstElement() instanceof VdbModelEntry) {
        selectedEntry=(VdbModelEntry)sel.getFirstElement();
      }
      modelDetailsPanel.setSelectedVdbModelEntry(selectedEntry);
    }
  }
);
  modelsGroup.setInput(vdb);
  packModelsGroup();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createModelsSection(Composite parent){
  modelsGroup=new TableAndToolBar(parent,SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER,1,new DefaultTableProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#doubleClicked(java.lang.Object)
 */
    @Override public void doubleClicked(    final VdbModelEntry element){
      openEditor(element);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.TableProvider#getElements()
 */
    @Override public VdbModelEntry[] getElements(){
      final Set<VdbModelEntry> modelEntries=getVdb().getModelEntries();
      return modelEntries.toArray(new VdbModelEntry[modelEntries.size()]);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultTableProvider#isDoubleClickSupported()
 */
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getImage(java.lang.Object)
 */
    @Override public Image getImage(    final VdbModelEntry element){
      return ModelIdentifier.getModelImage(element.findFileInWorkspace());
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return MODEL_COLUMN_NAME;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public String getValue(    final VdbModelEntry element){
      return element.getName().lastSegment();
    }
  }
,this.syncColumnProvider,new CheckBoxColumnProvider<VdbModelEntry>(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getName()
 */
    @Override public String getName(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getImage()
 */
    @Override public Image getImage(){
      return VdbUiPlugin.singleton.getImage(VdbUiConstants.Images.VISIBLE_ICON);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#getToolTip(java.lang.Object)
 */
    @Override public String getToolTip(    final VdbModelEntry element){
      return element.isVisible() ? VISIBLE_TOOLTIP : NOT_VISIBLE_TOOLTIP;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ColumnProvider#getValue(java.lang.Object)
 */
    @Override public Boolean getValue(    final VdbModelEntry element){
      return element.isVisible();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#isEditable(java.lang.Object)
 */
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.DefaultColumnProvider#setValue(java.lang.Object,java.lang.Object)
 */
    @Override public void setValue(    final VdbModelEntry element,    final Boolean value){
      element.setVisible(value);
    }
  }
);
  ButtonProvider addProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.ADD_MODEL);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return true;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      final ViewerFilter filter=new ViewerFilter(){
        /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ViewerFilter#select(org.eclipse.jface.viewers.Viewer,java.lang.Object,java.lang.Object)
 */
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer) {
            IProject proj=((IContainer)element).getProject();
            IProject vdbProject=getVdb().getFile().getProject();
            if (proj.isOpen() && proj.equals(vdbProject)) {
              return true;
            }
            return false;
          }
          final IFile file=(IFile)element;
          if (!ModelUtilities.isModelFile(file)) {
            return false;
          }
          if (ModelUtil.isXsdFile(file)) {
            return false;
          }
          for (          final VdbModelEntry modelEntry : getVdb().getModelEntries())           if (file.equals(modelEntry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      ModelingResourceFilter wsFilter=new ModelingResourceFilter(filter);
      wsFilter.setShowHiddenProjects(false);
      final Object[] models=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,wsFilter,getModelSelectionValidator(),getModelLabelProvider());
      if (!getVdb().getDataPolicyEntries().isEmpty()) {
        MessageDialog.openInformation(Display.getCurrent().getActiveShell(),VdbEditor.CONFIRM_DIALOG_TITLE,INFORM_DATA_ROLES_ON_ADD_MESSAGE);
      }
      boolean firstTime=(modelsGroup.getTable().getViewer().getTable().getItemCount() == 0);
      boolean success=false;
      boolean foundDuplicateNames=false;
      boolean proceed=false;
      try {
        for (        final Object model : models) {
          boolean canAdd=VdbUtil.canAddModelToVdb((IFile)model,getVdb());
          if (!canAdd) {
            MessageDialog.openError(Display.getCurrent().getActiveShell(),VdbEditor.CANNOT_ADD_DUPLICATE_MODEL_NAME_TITLE,CANNOT_ADD_DUPLICATE_MODEL_NAME_MESSAGE);
            foundDuplicateNames=true;
          }
          break;
        }
        success=true;
      }
 catch (      Exception ex) {
        ErrorHandler.toExceptionDialog(ex);
      }
 finally {
        if (success) {
          proceed=!foundDuplicateNames;
        }
      }
      if (proceed) {
        try {
          for (          final Object model : models) {
            getVdb().addEntry(((IFile)model).getFullPath(),new NullProgressMonitor());
          }
        }
 catch (        Exception ex) {
          ErrorHandler.toExceptionDialog(ex);
        }
      }
      modelsGroup.getTable().getViewer().refresh();
      pnlTranslatorOverrides.refresh();
      udfJarsGroup.getTable().getViewer().refresh();
      if (firstTime) {
        packModelsGroup();
      }
      showImportVdbsButton.setEnabled(!getVdb().getImportVdbEntries().isEmpty());
    }
  }
;
  modelsGroup.add(addProvider);
  ButtonProvider removeProvider=new ButtonProvider(){
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getImageDescriptor()
 */
    @Override public ImageDescriptor getImageDescriptor(){
      return VdbUiPlugin.singleton.getImageDescriptor(Images.REMOVE_MODEL);
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getText()
 */
    @Override public String getText(){
      return null;
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#getToolTip()
 */
    @Override public String getToolTip(){
      return i18n(""String_Node_Str"");
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#isEnabled(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public boolean isEnabled(    IStructuredSelection selection){
      return !selection.isEmpty();
    }
    /** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.widget.ButtonProvider#selected(org.eclipse.jface.viewers.IStructuredSelection)
 */
    @Override public void selected(    IStructuredSelection selection){
      if (!ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE))       return;
      final Set<VdbEntry> entries=new HashSet<VdbEntry>();
      final Set<VdbModelEntry> importedBy=new HashSet<VdbModelEntry>();
      for (      final Object element : selection.toList()) {
        entries.add((VdbEntry)element);
        if (element instanceof VdbModelEntry)         importedBy.addAll(((VdbModelEntry)element).getImportedBy());
      }
      if (!importedBy.isEmpty())       importedBy.removeAll(entries);
      if (!importedBy.isEmpty()) {
        if (!ConfirmationDialog.confirm(new ConfirmationDialog(CONFIRM_REMOVE_IMPORTED_BY_MESSAGE){
          /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.dialogs.MessageDialog#createCustomArea(org.eclipse.swt.widgets.Composite)
 */
          @Override protected Control createCustomArea(          final Composite parent){
            final ListViewer viewer=new ListViewer(parent);
            viewer.setContentProvider(new DefaultContentProvider());
            viewer.setLabelProvider(new LabelProvider(){
              /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.LabelProvider#getText(java.lang.Object)
 */
              @Override public String getText(              final Object element){
                return ((VdbEntry)element).getName().toString();
              }
            }
);
            viewer.getList().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            viewer.setInput(importedBy);
            return viewer.getControl();
          }
        }
))         return;
        entries.addAll(importedBy);
      }
      dataRoleResolver.modelEntriesRemoved(entries);
      for (      final VdbEntry entry : entries) {
        getVdb().removeEntry(entry);
      }
      udfJarsGroup.getTable().getViewer().refresh();
      showImportVdbsButton.setEnabled(!getVdb().getImportVdbEntries().isEmpty());
    }
  }
;
  modelsGroup.add(removeProvider);
  final TableViewer viewer=modelsGroup.getTable().getViewer();
  final MenuManager menuManager=new MenuManager();
  viewer.getControl().setMenu(menuManager.createContextMenu(parent));
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
 */
    @Override public void selectionChanged(    final SelectionChangedEvent event){
      menuManager.removeAll();
      final Object[] actions=SourceHandlerExtensionManager.findApplicableActions(viewer.getSelection());
      if (actions != null)       for (      final Object action : actions) {
        if (action instanceof IAction)         menuManager.add((IAction)action);
      }
      IStructuredSelection sel=(IStructuredSelection)viewer.getSelection();
      VdbModelEntry selectedEntry=null;
      if (sel.getFirstElement() instanceof VdbModelEntry) {
        selectedEntry=(VdbModelEntry)sel.getFirstElement();
      }
      modelDetailsPanel.setSelectedVdbModelEntry(selectedEntry);
    }
  }
);
  modelsGroup.setInput(vdb);
  packModelsGroup();
}",0.9969230769230768
102091,"public static void doCreateDataSource(String vdbName,ITeiidServer teiidServer) throws Exception {
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  VdbDataSourceInfo info=new VdbDataSourceInfo(vdbName,vdbName,vdbName);
  info.setPassword(teiidServer.getTeiidJdbcInfo().getPassword());
  info.setUsername(teiidServer.getTeiidJdbcInfo().getUsername());
  ITeiidDataSource vdbDS=teiidServer.getDataSource(info.getJndiName());
  if (vdbDS != null) {
    boolean overwrite=MessageDialog.openQuestion(iww.getShell(),getString(""String_Node_Str""),getString(""String_Node_Str"",info.getJndiName(),vdbName));
    if (!overwrite)     return;
  }
  final CreateVdbDataSourceDialog dialog=new CreateVdbDataSourceDialog(iww.getShell(),info,teiidServer);
  final int rc=dialog.open();
  if (rc != Window.OK)   return;
  teiidServer.getOrCreateDataSource(info.getDisplayName(),info.getJndiName(),""String_Node_Str"",info.getProperties());
}","/** 
 * Creates Data Source for a VDB
 * @param vdbName the VDB name
 * @param teiidServer the TeiidServer
 * @param withDeployment 'true' if dialog is shown during deployment, 'false' if not
 * @throws Exception the exception
 */
public static void doCreateDataSource(String vdbName,ITeiidServer teiidServer,boolean withDeployment) throws Exception {
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  VdbDataSourceInfo info=new VdbDataSourceInfo(vdbName,vdbName,vdbName);
  info.setPassword(teiidServer.getTeiidJdbcInfo().getPassword());
  info.setUsername(teiidServer.getTeiidJdbcInfo().getUsername());
  final CreateVdbDataSourceDialog dialog=new CreateVdbDataSourceDialog(iww.getShell(),info,teiidServer,withDeployment);
  final int rc=dialog.open();
  if (rc != Window.OK)   return;
  ITeiidDataSource vdbDS=teiidServer.getDataSource(info.getJndiName());
  if (vdbDS != null) {
    teiidServer.deleteDataSource(info.getJndiName());
  }
  teiidServer.getOrCreateDataSource(info.getDisplayName(),info.getJndiName(),""String_Node_Str"",info.getProperties());
}",0.49706457925636
102092,"/** 
 * @see org.eclipse.jface.action.IAction#run()
 * @since 5.0
 */
@Override public void run(){
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  IFile selectedVdb=null;
  if (!getSelection().isEmpty()) {
    selectedVdb=(IFile)SelectionUtilities.getSelectedObjects(getSelection()).get(0);
  }
  try {
    ITeiidServer teiidServer=cachedServer;
    if (teiidServer == null) {
      teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
      if (teiidServer == null) {
        if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""),true)) {
          teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
          teiidServer.connect();
        }
 else {
          return;
        }
      }
 else {
        if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""),false)) {
          teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
          teiidServer.connect();
        }
 else {
          return;
        }
      }
    }
    String vdbName=cachedVdbName;
    if (vdbName == null) {
      vdbName=selectedVdb.getLocation().removeFileExtension().lastSegment();
    }
    ITeiidVdb deployedVDB=teiidServer.getVdb(vdbName);
    if (deployedVDB == null) {
      boolean result=MessageDialog.openQuestion(iww.getShell(),getString(""String_Node_Str""),getString(""String_Node_Str"",vdbName));
      if (!result)       return;
    }
    doCreateDataSource(vdbName,teiidServer);
  }
 catch (  Exception e) {
    if (selectedVdb != null) {
      MessageDialog.openError(getShell(),getString(""String_Node_Str"",selectedVdb.getName()),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str"",selectedVdb.getName()));
    }
 else {
      MessageDialog.openError(getShell(),getString(""String_Node_Str""),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str""));
    }
  }
}","/** 
 * @see org.eclipse.jface.action.IAction#run()
 * @since 5.0
 */
@Override public void run(){
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  IFile selectedVdb=null;
  if (!getSelection().isEmpty()) {
    selectedVdb=(IFile)SelectionUtilities.getSelectedObjects(getSelection()).get(0);
  }
  try {
    ITeiidServer teiidServer=cachedServer;
    if (teiidServer == null) {
      teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
      if (teiidServer == null) {
        if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""),true)) {
          teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
          teiidServer.connect();
        }
 else {
          return;
        }
      }
 else {
        if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""),false)) {
          teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
          teiidServer.connect();
        }
 else {
          return;
        }
      }
    }
    String vdbName=cachedVdbName;
    if (vdbName == null) {
      vdbName=selectedVdb.getLocation().removeFileExtension().lastSegment();
    }
    ITeiidVdb deployedVDB=teiidServer.getVdb(vdbName);
    if (deployedVDB == null) {
      boolean result=MessageDialog.openQuestion(iww.getShell(),getString(""String_Node_Str""),getString(""String_Node_Str"",vdbName));
      if (!result)       return;
    }
    doCreateDataSource(vdbName,teiidServer,false);
  }
 catch (  Exception e) {
    if (selectedVdb != null) {
      MessageDialog.openError(getShell(),getString(""String_Node_Str"",selectedVdb.getName()),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str"",selectedVdb.getName()));
    }
 else {
      MessageDialog.openError(getShell(),getString(""String_Node_Str""),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str""));
    }
  }
}",0.9985693848354792
102093,"/** 
 * CreateDataSourceDialog constructor
 * @param shell the shell
 * @param teiidImportServer the TeiidServer
 * @param editDSName if non-null, this is edit of an existing source.  Otherwise this iscreation of a new source.
 */
public CreateVdbDataSourceDialog(Shell shell,VdbDataSourceInfo vdbDataSourceInfo,ITeiidServer server){
  super(shell);
  this.vdbName=vdbDataSourceInfo.getVdbName();
  this.vdbDataSourceInfo=vdbDataSourceInfo;
  this.nameValidator=new StringNameValidator(new char[]{'_','-'});
  this.server=server;
}","/** 
 * CreateDataSourceDialog constructor
 * @param shell the shell
 * @param teiidImportServer the TeiidServer
 * @param editDSName if non-null, this is edit of an existing source.  Otherwise this is
 * @param withDeployment 'true' if dialog is called as part of a deployment, 'false' if not.creation of a new source.
 */
public CreateVdbDataSourceDialog(Shell shell,VdbDataSourceInfo vdbDataSourceInfo,ITeiidServer server,boolean withDeployment){
  super(shell);
  this.vdbName=vdbDataSourceInfo.getVdbName();
  this.vdbDataSourceInfo=vdbDataSourceInfo;
  this.nameValidator=new StringNameValidator(new char[]{'_','-'});
  this.server=server;
  this.withDeployment=withDeployment;
}",0.8733552631578947
102094,"@Override public void modifyText(ModifyEvent e){
  String text=dataSourceNameText.getText();
  if (text != null && text.trim().length() > 0) {
    vdbDataSourceInfo.setJndiName(text);
  }
  validate();
}","@Override public void modifyText(ModifyEvent e){
  String text=dataSourceNameText.getText();
  vdbDataSourceInfo.setJndiName(text);
  validate();
}",0.84
102095,"/** 
 * @see org.eclipse.jface.dialogs.Dialog#createButtonBar(org.eclipse.swt.widgets.Composite)
 */
@Override protected Control createButtonBar(Composite parent){
  Control buttonBar=super.createButtonBar(parent);
  getButton(OK).setEnabled(true);
  validate();
  return buttonBar;
}","/** 
 * @see org.eclipse.jface.dialogs.Dialog#createButtonBar(org.eclipse.swt.widgets.Composite)
 */
@Override protected Control createButtonBar(Composite parent){
  Control buttonBar=super.createButtonBar(parent);
  getButton(OK).setEnabled(true);
  if (this.withDeployment) {
    getButton(OK).setText(getString(""String_Node_Str""));
    getButton(CANCEL).setText(getString(""String_Node_Str""));
  }
  validate();
  return buttonBar;
}",0.7899860917941586
102096,"/** 
 * @see org.eclipse.jface.dialogs.TitleAreaDialog#createDialogArea(org.eclipse.swt.widgets.Composite)
 * @since 5.5.3
 */
@Override protected Control createDialogArea(Composite parent){
  setTitle(getString(""String_Node_Str""));
  setMessage(getString(""String_Node_Str""));
  Composite pnl=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).equalWidth(false).applyTo(pnl);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(pnl);
  WidgetFactory.createLabel(pnl,getString(""String_Node_Str""));
  vdbNameText=new Text(pnl,SWT.NONE);
  vdbNameText.setText(this.vdbName);
  vdbNameText.setEditable(false);
  vdbNameText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(vdbNameText);
  Label label=WidgetFactory.createLabel(pnl,getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(label);
  dataSourceNameText=new Text(pnl,SWT.BORDER);
  dataSourceNameText.setText(this.vdbDataSourceInfo.getJndiName());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(dataSourceNameText);
  dataSourceNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String text=dataSourceNameText.getText();
      if (text != null && text.trim().length() > 0) {
        vdbDataSourceInfo.setJndiName(text);
      }
      validate();
    }
  }
);
  passThroughButton=new Button(pnl,SWT.CHECK);
  passThroughButton.setText(getString(""String_Node_Str""));
  passThroughButton.setToolTipText(getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(2,1).applyTo(passThroughButton);
  passThroughButton.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      vdbDataSourceInfo.setPassThroughAuthentication(passThroughButton.getSelection());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return pnl;
}","/** 
 * @see org.eclipse.jface.dialogs.TitleAreaDialog#createDialogArea(org.eclipse.swt.widgets.Composite)
 * @since 5.5.3
 */
@Override protected Control createDialogArea(Composite parent){
  setTitle(getString(""String_Node_Str""));
  setMessage(getString(""String_Node_Str""));
  Composite pnl=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).equalWidth(false).applyTo(pnl);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(pnl);
  WidgetFactory.createLabel(pnl,getString(""String_Node_Str""));
  vdbNameText=new Text(pnl,SWT.NONE);
  vdbNameText.setText(this.vdbName);
  vdbNameText.setEditable(false);
  vdbNameText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(vdbNameText);
  Label label=WidgetFactory.createLabel(pnl,getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(label);
  dataSourceNameText=new Text(pnl,SWT.BORDER);
  dataSourceNameText.setText(this.vdbDataSourceInfo.getJndiName());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(dataSourceNameText);
  dataSourceNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String text=dataSourceNameText.getText();
      vdbDataSourceInfo.setJndiName(text);
      validate();
    }
  }
);
  passThroughButton=new Button(pnl,SWT.CHECK);
  passThroughButton.setText(getString(""String_Node_Str""));
  passThroughButton.setToolTipText(getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(2,1).applyTo(passThroughButton);
  passThroughButton.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      vdbDataSourceInfo.setPassThroughAuthentication(passThroughButton.getSelection());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return pnl;
}",0.9686254980079682
102097,"private boolean validate(){
  String errorMessage=null;
  String warningMessage=null;
  if (!this.nameValidator.isValidName(this.vdbDataSourceInfo.getJndiName())) {
    errorMessage=getString(""String_Node_Str"");
  }
  if (errorMessage == null) {
    try {
      if (server.getDataSource(this.vdbDataSourceInfo.getJndiName()) != null) {
        warningMessage=getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName());
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  if (errorMessage == null) {
    setErrorMessage(null);
    getButton(OK).setEnabled(true);
    if (warningMessage != null) {
      setMessage(warningMessage,IMessageProvider.WARNING);
    }
 else {
      setMessage(getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName()),IMessageProvider.NONE);
    }
  }
 else {
    getButton(OK).setEnabled(false);
    setErrorMessage(errorMessage);
  }
  return true;
}","private boolean validate(){
  String errorMessage=null;
  String warningMessage=null;
  if (!this.nameValidator.isValidName(this.vdbDataSourceInfo.getJndiName())) {
    errorMessage=getString(""String_Node_Str"");
  }
  if (errorMessage == null) {
    try {
      if (server.getDataSource(this.vdbDataSourceInfo.getJndiName()) != null) {
        if (this.withDeployment) {
          warningMessage=getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName());
        }
 else {
          warningMessage=getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName());
        }
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  if (errorMessage == null) {
    setErrorMessage(null);
    getButton(OK).setEnabled(true);
    if (warningMessage != null) {
      setMessage(warningMessage,IMessageProvider.WARNING);
    }
 else {
      if (this.withDeployment) {
        setMessage(getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName()),IMessageProvider.NONE);
      }
 else {
        setMessage(getString(""String_Node_Str"",this.vdbDataSourceInfo.getJndiName()),IMessageProvider.NONE);
      }
    }
  }
 else {
    getButton(OK).setEnabled(false);
    setErrorMessage(errorMessage);
  }
  return true;
}",0.8502994011976048
102098,"/** 
 * @see WebArchiveBuilder#createWebArchive(Properties,IProgressMonitor)
 * @since 7.1
 */
@Override public IStatus createWebArchive(Properties properties,IProgressMonitor monitor){
  try {
    final String contextName=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_CONTEXT_NAME);
    IStatus status=validateContextName(contextName);
    if (IStatus.ERROR == status.getSeverity()) {
      throw new Exception(status.getException());
    }
    final String webServicePluginPath=WebServiceLibPlugin.getDefault().getInstallPath().toOSString();
    final String buildDirectoryName=webServicePluginPath + File.separator + WebArchiveBuilderConstants.BUILD_DIR;
    File buildDirectory=new File(buildDirectoryName);
    buildDirectory.mkdir();
    monitor.subTask(TASK_CREATE_DIRECTORIES);
    final String workDirectoryName=buildDirectoryName + File.separator + WebArchiveBuilderConstants.WORK_DIR;
    File workDirectory=new File(workDirectoryName);
    workDirectory.mkdir();
    FileUtils.removeChildrenRecursively(workDirectory);
    final TempDirectory tempDir=TempDirectory.getTempDirectory(workDirectoryName);
    final String tempDirectoryName=tempDir.getPath();
    final String contextDirectoryName=tempDirectoryName + File.separator + contextName;
    final File contextDirectory=new File(contextDirectoryName);
    contextDirectory.mkdir();
    final String imagesDirectoryName=contextDirectoryName + File.separator + IMAGES;
    final File imagesDirectory=new File(imagesDirectoryName);
    imagesDirectory.mkdir();
    final String webInfDirectoryName=contextDirectoryName + File.separator + WEB_INF;
    final File webInfDirectory=new File(webInfDirectoryName);
    webInfDirectory.mkdir();
    final String webInfWsdlDirectoryName=webInfDirectoryName + File.separator + WSDL;
    final File webInfWsdlDirectory=new File(webInfWsdlDirectoryName);
    final String webInfClassesDirectoryName=webInfDirectoryName + File.separator + CLASSES;
    final String webInfLibDirectoryName=webInfDirectoryName + File.separator + LIB;
    final File webInfClassesDirectory=new File(webInfClassesDirectoryName);
    final File webInfLibDirectory=new File(webInfLibDirectoryName);
    webInfLibDirectory.mkdir();
    webInfClassesDirectory.mkdir();
    monitor.worked(10);
    monitor.subTask(TASK_CREATING_WSDL_FILE);
    boolean containsGlobalDataTypes=generateWsdl(properties,webInfWsdlDirectory);
    monitor.subTask(TASK_COPYING_FILES);
    getWebFiles(contextDirectory,webInfDirectory,containsGlobalDataTypes);
    SecurityCredentials securityCredentials=new SecurityCredentials(properties);
    if (securityCredentials.hasType(WarDeploymentInfoPanel.BASIC)) {
      replaceJBossWebXmlVariables(webInfDirectoryName,securityCredentials.getSecurityRealm());
    }
    replaceWebXmlVariables(webInfDirectoryName,securityCredentials,contextName);
    replaceJBossWSCXFVariables(webInfDirectoryName,properties,securityCredentials);
    createPropertiesFile(webInfClassesDirectory,properties);
    createProviderJavaClasses(webInfLibDirectory,webInfClassesDirectory,properties,securityCredentials);
    monitor.worked(10);
    monitor.subTask(TASK_CREATING_WAR_ARCHIVE);
    final String warFileName=tempDirectoryName + File.separator + contextName+ DOT_WAR;
    AntTasks.zip(contextDirectoryName,warFileName);
    monitor.worked(20);
    final String newWarFileDir=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_FILE_SAVE_LOCATION);
    File newWarDir=new File(newWarFileDir);
    if (!newWarDir.exists()) {
      newWarDir.mkdir();
    }
    monitor.subTask(TASK_COPYING_WAR_FILE);
    final File warFile=new File(warFileName);
    final String newWarFileName=getFileName((String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_FILE_SAVE_LOCATION),contextName + DOT_WAR);
    File newWarFile=new File(newWarFileName);
    if (newWarFile.exists()) {
      if (!newWarFile.delete()) {
        String msg=getString(""String_Node_Str"");
        throw new Exception(msg);
      }
    }
    if (!warFile.renameTo(newWarFile)) {
      String msg=getString(""String_Node_Str"");
      throw new Exception(msg);
    }
    monitor.subTask(TASK_CLEANUP);
    tempDir.remove();
    monitor.worked(5);
  }
 catch (  Exception e) {
    final String msg=getString(""String_Node_Str"");
    final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,WebArchiveBuilderConstants.STATUS_CODE_WAR_FILE_CREATION_FAILED,msg,e);
    WebServicePlugin.Util.log(status);
    return status;
  }
  final String msg=getString(""String_Node_Str"");
  final IStatus status=new Status(IStatus.OK,WebServicePlugin.PLUGIN_ID,WebArchiveBuilderConstants.STATUS_CODE_WAR_FILE_CREATION_SUCCEEDED,msg,null);
  return status;
}","/** 
 * @see WebArchiveBuilder#createWebArchive(Properties,IProgressMonitor)
 * @since 7.1
 */
@Override public IStatus createWebArchive(Properties properties,IProgressMonitor monitor){
  try {
    final String contextName=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_CONTEXT_NAME);
    IStatus status=validateContextName(contextName);
    if (IStatus.ERROR == status.getSeverity()) {
      throw new Exception(status.getException());
    }
    final String webServicePluginPath=WebServiceLibPlugin.getDefault().getInstallPath().toOSString();
    final String buildDirectoryName=webServicePluginPath + File.separator + WebArchiveBuilderConstants.BUILD_DIR;
    File buildDirectory=new File(buildDirectoryName);
    buildDirectory.mkdir();
    monitor.subTask(TASK_CREATE_DIRECTORIES);
    final String workDirectoryName=buildDirectoryName + File.separator + WebArchiveBuilderConstants.WORK_DIR;
    File workDirectory=new File(workDirectoryName);
    workDirectory.mkdir();
    FileUtils.removeChildrenRecursively(workDirectory);
    final TempDirectory tempDir=TempDirectory.getTempDirectory(workDirectoryName);
    final String tempDirectoryName=tempDir.getPath();
    final String contextDirectoryName=tempDirectoryName + File.separator + contextName;
    final File contextDirectory=new File(contextDirectoryName);
    contextDirectory.mkdir();
    final String imagesDirectoryName=contextDirectoryName + File.separator + IMAGES;
    final File imagesDirectory=new File(imagesDirectoryName);
    imagesDirectory.mkdir();
    final String webInfDirectoryName=contextDirectoryName + File.separator + WEB_INF;
    final File webInfDirectory=new File(webInfDirectoryName);
    webInfDirectory.mkdir();
    final String webInfWsdlDirectoryName=webInfDirectoryName + File.separator + WSDL;
    final File webInfWsdlDirectory=new File(webInfWsdlDirectoryName);
    webInfWsdlDirectory.mkdir();
    final String webInfClassesDirectoryName=webInfDirectoryName + File.separator + CLASSES;
    final String webInfLibDirectoryName=webInfDirectoryName + File.separator + LIB;
    final File webInfClassesDirectory=new File(webInfClassesDirectoryName);
    final File webInfLibDirectory=new File(webInfLibDirectoryName);
    webInfLibDirectory.mkdir();
    webInfClassesDirectory.mkdir();
    monitor.worked(10);
    monitor.subTask(TASK_CREATING_WSDL_FILE);
    boolean containsGlobalDataTypes=generateWsdl(properties,webInfWsdlDirectory);
    monitor.subTask(TASK_COPYING_FILES);
    getWebFiles(contextDirectory,webInfDirectory,containsGlobalDataTypes);
    SecurityCredentials securityCredentials=new SecurityCredentials(properties);
    if (securityCredentials.hasType(WarDeploymentInfoPanel.BASIC)) {
      replaceJBossWebXmlVariables(webInfDirectoryName,securityCredentials.getSecurityRealm());
    }
    replaceWebXmlVariables(webInfDirectoryName,securityCredentials,contextName);
    replaceJBossWSCXFVariables(webInfDirectoryName,properties,securityCredentials);
    createPropertiesFile(webInfClassesDirectory,properties);
    createProviderJavaClasses(webInfLibDirectory,webInfClassesDirectory,properties,securityCredentials);
    monitor.worked(10);
    monitor.subTask(TASK_CREATING_WAR_ARCHIVE);
    final String warFileName=tempDirectoryName + File.separator + contextName+ DOT_WAR;
    AntTasks.zip(contextDirectoryName,warFileName);
    monitor.worked(20);
    final String newWarFileDir=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_FILE_SAVE_LOCATION);
    File newWarDir=new File(newWarFileDir);
    if (!newWarDir.exists()) {
      newWarDir.mkdir();
    }
    monitor.subTask(TASK_COPYING_WAR_FILE);
    final File warFile=new File(warFileName);
    final String newWarFileName=getFileName((String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_FILE_SAVE_LOCATION),contextName + DOT_WAR);
    File newWarFile=new File(newWarFileName);
    if (newWarFile.exists()) {
      if (!newWarFile.delete()) {
        String msg=getString(""String_Node_Str"");
        throw new Exception(msg);
      }
    }
    if (!warFile.renameTo(newWarFile)) {
      String msg=getString(""String_Node_Str"");
      throw new Exception(msg);
    }
    monitor.subTask(TASK_CLEANUP);
    tempDir.remove();
    monitor.worked(5);
  }
 catch (  Exception e) {
    final String msg=getString(""String_Node_Str"");
    final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,WebArchiveBuilderConstants.STATUS_CODE_WAR_FILE_CREATION_FAILED,msg,e);
    WebServicePlugin.Util.log(status);
    return status;
  }
  final String msg=getString(""String_Node_Str"");
  final IStatus status=new Status(IStatus.OK,WebServicePlugin.PLUGIN_ID,WebArchiveBuilderConstants.STATUS_CODE_WAR_FILE_CREATION_SUCCEEDED,msg,null);
  return status;
}",0.996523754345307
102099,"public static boolean containsGlobalDataTypeImport(final XSDSchema schema){
  boolean containsImport=false;
  if (schema != null) {
    final List<XSDSchemaContent> contents=schema.getContents();
    for (int i=0; i < contents.size(); i++) {
      final Object content=contents.get(i);
      if (content instanceof XSDImport) {
        if (DatatypeConstants.BUILTIN_DATATYPES_URI.equals(((XSDImport)content).getNamespace())) {
          containsImport=true;
          break;
        }
      }
    }
  }
  return containsImport;
}","private boolean containsGlobalDataTypeImport(final XSDSchema schema){
  boolean containsImport=false;
  if (schema != null) {
    final List<XSDSchemaContent> contents=schema.getContents();
    for (int i=0; i < contents.size(); i++) {
      final Object content=contents.get(i);
      if (content instanceof XSDImport) {
        if (DatatypeConstants.BUILTIN_DATATYPES_URI.equals(((XSDImport)content).getNamespace())) {
          containsImport=true;
          break;
        }
      }
    }
  }
  return containsImport;
}",0.9828897338403042
102100,"public XSDSchema importSchema(String path){
  XSDParser parser=new XSDParser(null);
  parser.parse(path);
  XSDSchema schema=parser.getSchema();
  schema.setSchemaLocation(path);
  return schema;
}","private XSDSchema importSchema(String path){
  XSDParser parser=new XSDParser(null);
  parser.parse(path);
  XSDSchema schema=parser.getSchema();
  schema.setSchemaLocation(path);
  return schema;
}",0.9772151898734176
102101,"public boolean generateWsdl(Properties properties,File webinfWsdlFolder) throws IOException, CoreException {
  BasicWsdlGenerator wsdlGenerator=new BasicWsdlGenerator();
  Resource wsModel=null;
  final String contextName=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_CONTEXT_NAME);
  final String host=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_HOST);
  final String port=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_PORT);
  final String tns=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WSDL_TNS);
  String webServiceName=contextName;
  String vdbFileName=properties.getProperty(WebArchiveBuilderConstants.PROPERTY_VDB_FILE_NAME);
  IPath vdbPath=new Path(vdbFileName);
  IFile vdbFile=ModelerCore.getWorkspace().getRoot().getFile(vdbPath);
  boolean hasGlobalDataType=false;
  VdbResourceFinder vdbResourceFinder=new VdbResourceFinder(vdbFile);
  for (  Resource webServiceModel : vdbResourceFinder.getWebServiceResources()) {
    try {
      wsModel=webServiceModel;
      wsdlGenerator.addWebServiceModel(wsModel);
      ArrayList<Resource> dependentSchemas=new ArrayList<Resource>();
      Resource[] resources=vdbResourceFinder.getDependentResources(wsModel);
      vdbResourceFinder.getAllDependentSchemas(resources,dependentSchemas);
      for (      Resource resource : dependentSchemas) {
        if (ModelUtil.isXsdFile(resource)) {
          String fullFilePath=resource.getURI().path();
          String fileNameWithExtension=new Path(fullFilePath).lastSegment();
          IPath fileLocationPath=new Path(fullFilePath).removeLastSegments(1);
          XSDSchema xsdSchema=importSchema(fullFilePath);
          if (containsGlobalDataTypeImport(xsdSchema)) {
            hasGlobalDataType=true;
            File xsd=new File(fullFilePath);
            FileUtils.copy(xsd,webinfWsdlFolder,true);
            File xsdCopy=new File(webinfWsdlFolder.getPath() + FORWARD_SLASH + fileNameWithExtension);
            AntTasks.replace(xsdCopy,""String_Node_Str"",""String_Node_Str"");
          }
 else {
            File schemaFile=new File(fullFilePath);
            FileUtils.copy(schemaFile,webinfWsdlFolder,true);
          }
          wsdlGenerator.addXsdModel(xsdSchema,fileLocationPath);
        }
      }
    }
 catch (    Exception e) {
      vdbResourceFinder.dispose();
      throw new RuntimeException(e.getMessage());
    }
  }
  vdbResourceFinder.dispose();
  wsdlGenerator.setName(webServiceName);
  wsdlGenerator.setTargetNamespace(tns);
  wsdlGenerator.setUrlRootForReferences(CoreStringUtil.Constants.EMPTY_STRING);
  wsdlGenerator.setUrlSuffixForReferences(CoreStringUtil.Constants.EMPTY_STRING);
  wsdlGenerator.setUrlForWsdlService(""String_Node_Str"" + host + ""String_Node_Str""+ port+ FORWARD_SLASH+ contextName+ FORWARD_SLASH);
  final IStatus status=wsdlGenerator.generate(new NullProgressMonitor());
  if (status.getSeverity() == IStatus.ERROR) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String fileName=webServiceName + ""String_Node_Str"";
  wsdlFilename=fileName;
  try {
    OutputStream stream=new FileOutputStream(new File(webinfWsdlFolder,fileName));
    wsdlGenerator.write(stream);
    IFile iFile=vdbFile;
    iFile.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
    setPorts(wsdlGenerator.getPorts());
    setOperationToProcedureMap(wsdlGenerator.getOperationToProcedureMap());
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage());
  }
catch (  CoreException e) {
    throw new RuntimeException(e.getMessage());
  }
  return hasGlobalDataType;
}","/** 
 * @param properties
 * @param webinfWsdlFolder
 * @return status of wsdl generation
 * @throws IOException
 * @throws CoreException
 */
public boolean generateWsdl(Properties properties,File webinfWsdlFolder) throws IOException, CoreException {
  BasicWsdlGenerator wsdlGenerator=new BasicWsdlGenerator();
  Resource wsModel=null;
  final String contextName=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_CONTEXT_NAME);
  final String host=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_HOST);
  final String port=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WAR_PORT);
  final String tns=(String)properties.get(WebArchiveBuilderConstants.PROPERTY_WSDL_TNS);
  String webServiceName=contextName;
  String vdbFileName=properties.getProperty(WebArchiveBuilderConstants.PROPERTY_VDB_FILE_NAME);
  IPath vdbPath=new Path(vdbFileName);
  IFile vdbFile=ModelerCore.getWorkspace().getRoot().getFile(vdbPath);
  boolean hasGlobalDataType=false;
  VdbResourceFinder vdbResourceFinder=new VdbResourceFinder(vdbFile);
  for (  Resource webServiceModel : vdbResourceFinder.getWebServiceResources()) {
    try {
      wsModel=webServiceModel;
      wsdlGenerator.addWebServiceModel(wsModel);
      ArrayList<Resource> dependentSchemas=new ArrayList<Resource>();
      Resource[] resources=vdbResourceFinder.getDependentResources(wsModel);
      vdbResourceFinder.getAllDependentSchemas(resources,dependentSchemas);
      for (      Resource resource : dependentSchemas) {
        if (!ModelUtil.isXsdFile(resource))         continue;
        String fullFilePath=resource.getURI().path();
        String fileNameWithExtension=new Path(fullFilePath).lastSegment();
        IPath fileLocationPath=new Path(fullFilePath).removeLastSegments(1);
        XSDSchema xsdSchema=importSchema(fullFilePath);
        if (containsGlobalDataTypeImport(xsdSchema)) {
          hasGlobalDataType=true;
          File xsd=new File(fullFilePath);
          FileUtils.copy(xsd,webinfWsdlFolder,true);
          File xsdCopy=new File(webinfWsdlFolder.getPath() + FORWARD_SLASH + fileNameWithExtension);
          AntTasks.replace(xsdCopy,""String_Node_Str"",""String_Node_Str"");
        }
 else {
          File schemaFile=new File(fullFilePath);
          FileUtils.copy(schemaFile,webinfWsdlFolder,true);
        }
        wsdlGenerator.addXsdModel(xsdSchema,fileLocationPath);
      }
    }
 catch (    Exception e) {
      vdbResourceFinder.dispose();
      throw ErrorHandler.toCoreException(e);
    }
  }
  vdbResourceFinder.dispose();
  wsdlGenerator.setName(webServiceName);
  wsdlGenerator.setTargetNamespace(tns);
  wsdlGenerator.setUrlRootForReferences(CoreStringUtil.Constants.EMPTY_STRING);
  wsdlGenerator.setUrlSuffixForReferences(CoreStringUtil.Constants.EMPTY_STRING);
  wsdlGenerator.setUrlForWsdlService(""String_Node_Str"" + host + ""String_Node_Str""+ port+ FORWARD_SLASH+ contextName+ FORWARD_SLASH);
  final IStatus status=wsdlGenerator.generate(new NullProgressMonitor());
  if (status.getSeverity() == IStatus.ERROR) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String fileName=webServiceName + ""String_Node_Str"";
  wsdlFilename=fileName;
  try {
    OutputStream stream=new FileOutputStream(new File(webinfWsdlFolder,fileName));
    wsdlGenerator.write(stream);
    IFile iFile=vdbFile;
    iFile.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
    setPorts(wsdlGenerator.getPorts());
    setOperationToProcedureMap(wsdlGenerator.getOperationToProcedureMap());
  }
 catch (  Exception e) {
    throw ErrorHandler.toCoreException(e);
  }
  return hasGlobalDataType;
}",0.9492743607463718
102102,"/** 
 * Copies Web files into the WAR build directory structure.
 * @param contextDirectory
 * @param webInfDirectory
 * @since 7.1
 */
private void getWebFiles(File contextDirectory,File webInfDirectory,boolean containsGlobalDataTypes) throws Exception {
  final String webLibPath=WebServiceLibPlugin.getDefault().getSoapWebLibDirectoryPath();
  final String webAppsDirectoryName=webLibPath + File.separator + WEBAPPS;
  final File webAppsDirectory=new File(webAppsDirectoryName);
  FileUtils.copyRecursively(webAppsDirectory,contextDirectory,null,false);
  if (!containsGlobalDataTypes) {
    File builtInDataTypeSchemaFile=new File(webInfDirectory.getPath() + ""String_Node_Str"" + DatatypeConstants.DATATYPES_MODEL_FILE_NAME);
    boolean deleted=builtInDataTypeSchemaFile.delete();
  }
}","/** 
 * Copies Web files into the WAR build directory structure.
 * @param contextDirectory
 * @param webInfDirectory
 * @since 7.1
 */
private void getWebFiles(File contextDirectory,File webInfDirectory,boolean containsGlobalDataTypes) throws Exception {
  final String webLibPath=WebServiceLibPlugin.getDefault().getSoapWebLibDirectoryPath();
  final String webAppsDirectoryName=webLibPath + File.separator + WEBAPPS;
  final File webAppsDirectory=new File(webAppsDirectoryName);
  FileUtils.copyRecursively(webAppsDirectory,contextDirectory,null,false);
  if (!containsGlobalDataTypes) {
    File builtInDataTypeSchemaFile=new File(webInfDirectory.getPath() + ""String_Node_Str"" + DatatypeConstants.DATATYPES_MODEL_FILE_NAME);
    builtInDataTypeSchemaFile.delete();
  }
}",0.9578005115089514
102103,"/** 
 * Return the Resource instance corresponding to the specified URI string. The URI represents a relative path within the workspace to particular file resource. If the URI is one of the well-known Teiid Designer/EMF identifiers to a global resource such as <p> ""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance"" ""http://www.w3.org/2001/XMLSchema"" ""http://www.w3.org/2001/MagicXMLSchema"" ""http://www.w3.org/2001/XMLSchema-instance"" </p> then null is returned since there is no Resource in the workspace that represents any one of those models.
 * @param workspaceUri the URI string
 * @return the IResource identified by the URI if it exists; may return null
 */
public Resource findResource(final String workspaceUri){
  if (!WorkspaceResourceFinderUtil.isValidWorkspaceUri(workspaceUri))   return null;
  final String normalizedUriString=WorkspaceResourceFinderUtil.normalizeUriString(workspaceUri);
  File modelFile=new File(normalizedUriString);
  if (modelFile.exists()) {
    return getExistingVdbResource(modelFile);
  }
  Resource fileResource=null;
  final Resource[] fileResources=this.vdbModelFiles;
  fileResource=getResourceStartsWithHttp(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  fileResource=getResourceStartsWithPathSeparator(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  fileResource=getResourceByLocation(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  return null;
}","/** 
 * Return the Resource instance corresponding to the specified URI string. The URI represents a relative path within the workspace to particular file resource. If the URI is one of the well-known Teiid Designer/EMF identifiers to a global resource such as <p> ""http://www.metamatrix.com/metamodels/SimpleDatatypes-instance"" ""http://www.w3.org/2001/XMLSchema"" ""http://www.w3.org/2001/MagicXMLSchema"" ""http://www.w3.org/2001/XMLSchema-instance"" </p> then null is returned since there is no Resource in the workspace that represents any one of those models.
 * @param workspaceUri the URI string
 * @return the IResource identified by the URI if it exists; may return null
 */
public Resource findResource(final String workspaceUri){
  if (!WorkspaceResourceFinderUtil.isValidWorkspaceUri(workspaceUri))   return null;
  final String normalizedUriString=WorkspaceResourceFinderUtil.normalizeUriString(workspaceUri);
  File modelFile=new File(normalizedUriString);
  if (modelFile.exists()) {
    return getExistingVdbResource(modelFile);
  }
  Resource fileResource=null;
  final Collection<Resource> fileResources=this.vdbResourceFiles;
  fileResource=getResourceStartsWithHttp(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  fileResource=getResourceStartsWithPathSeparator(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  fileResource=getResourceByLocation(fileResources,normalizedUriString);
  if (fileResource != null)   return fileResource;
  return null;
}",0.9860253493662658
102104,"private Resource getExistingVdbResource(File file){
  for (  Resource modelFile : this.vdbModelFiles) {
    String vdbFileStr=WorkspaceResourceFinderUtil.normalizeUriString(modelFile.getURI().toFileString());
    String prefix=vdbFileStr.substring(0,vdbFileStr.indexOf(""String_Node_Str"") > -1 ? vdbFileStr.indexOf(""String_Node_Str"") : 0);
    if (prefix.length() > 0 && prefix.contains(""String_Node_Str"")) {
      vdbFileStr=vdbFileStr.replace(prefix,""String_Node_Str"");
    }
    String fileStr=file.getPath();
    if (vdbFileStr.equals(fileStr)) {
      return modelFile;
    }
  }
  return null;
}","private Resource getExistingVdbResource(File file){
  for (  Resource modelFile : this.vdbResourceFiles) {
    String vdbFileStr=WorkspaceResourceFinderUtil.normalizeUriString(modelFile.getURI().toFileString());
    String prefix=vdbFileStr.substring(0,vdbFileStr.indexOf(""String_Node_Str"") > -1 ? vdbFileStr.indexOf(""String_Node_Str"") : 0);
    if (prefix.length() > 0 && prefix.contains(""String_Node_Str"")) {
      vdbFileStr=vdbFileStr.replace(prefix,""String_Node_Str"");
    }
    String fileStr=file.getPath();
    if (vdbFileStr.equals(fileStr)) {
      return modelFile;
    }
  }
  return null;
}",0.9891936824605154
102105,"private static Resource getResourceByLocation(final Resource[] fileResources,final String workspaceUri){
  Resource fileResource=null;
  String resourceLocation;
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    resourceLocation=fileResource.getURI().toString();
    if (workspaceUri.endsWith(resourceLocation))     return fileResource;
  }
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    final String fileNameSegment=fileResource.getURI().lastSegment();
    if (fileNameSegment != null && fileNameSegment.equalsIgnoreCase(workspaceUri))     return fileResource;
  }
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    final IPath resrcLocation=new Path(fileResource.getURI().toFileString());
    resourceLocation=resrcLocation.toOSString();
    if (resourceLocation.endsWith(workspaceUri))     return fileResource;
    resourceLocation=resrcLocation.toString();
    resourceLocation=resourceLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
    resourceLocation=resourceLocation.replaceAll(StringUtilities.SPACE,""String_Node_Str"");
    if (resourceLocation.endsWith(workspaceUri))     return fileResource;
  }
  return null;
}","private static Resource getResourceByLocation(final Collection<Resource> fileResources,final String workspaceUri){
  Resource fileResource=null;
  String resourceLocation;
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    resourceLocation=fileResource.getURI().toString();
    if (workspaceUri.endsWith(resourceLocation))     return fileResource;
  }
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    final String fileNameSegment=fileResource.getURI().lastSegment();
    if (fileNameSegment != null && fileNameSegment.equalsIgnoreCase(workspaceUri))     return fileResource;
  }
  for (  final Resource fileResource2 : fileResources) {
    fileResource=fileResource2;
    final IPath resrcLocation=new Path(fileResource.getURI().toFileString());
    resourceLocation=resrcLocation.toOSString();
    if (resourceLocation.endsWith(workspaceUri))     return fileResource;
    resourceLocation=resrcLocation.toString();
    resourceLocation=resourceLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
    resourceLocation=resourceLocation.replaceAll(StringConstants.SPACE,""String_Node_Str"");
    if (resourceLocation.endsWith(workspaceUri))     return fileResource;
  }
  return null;
}",0.9818754925137904
102106,"private Resource getResourceStartsWithHttp(final Resource[] fileResources,final String workspaceUri){
  File file=null;
  String targetNamespace;
  if (workspaceUri.startsWith(""String_Node_Str"")) {
    for (    final Resource fileResource2 : fileResources) {
      File modelFile=new File(fileResource2.getURI().toFileString());
      file=modelFile;
      targetNamespace=getXsdTargetNamespace(file);
      if (workspaceUri.equals(targetNamespace))       return fileResource2;
    }
  }
  return null;
}","private Resource getResourceStartsWithHttp(final Collection<Resource> fileResources,final String workspaceUri){
  File file=null;
  String targetNamespace;
  if (workspaceUri.startsWith(""String_Node_Str"")) {
    for (    final Resource fileResource2 : fileResources) {
      File modelFile=new File(fileResource2.getURI().toFileString());
      file=modelFile;
      targetNamespace=getXsdTargetNamespace(file);
      if (workspaceUri.equals(targetNamespace))       return fileResource2;
    }
  }
  return null;
}",0.9705304518664049
102107,"private static Resource getResourceStartsWithPathSeparator(final Resource[] fileResources,final String workspaceUri){
  Resource fileResource=null;
  IPath pathInWorkspace;
  if (workspaceUri.charAt(0) == IPath.SEPARATOR) {
    pathInWorkspace=new Path(workspaceUri);
    URI pathInWorkspaceURI=URI.createURI(pathInWorkspace.toString());
    for (    final Resource fileResource2 : fileResources) {
      fileResource=fileResource2;
      if (fileResource != null && fileResource.getURI().equals(pathInWorkspaceURI))       return fileResource;
    }
  }
  return null;
}","private static Resource getResourceStartsWithPathSeparator(final Collection<Resource> fileResources,final String workspaceUri){
  Resource fileResource=null;
  IPath pathInWorkspace;
  if (workspaceUri.charAt(0) == IPath.SEPARATOR) {
    pathInWorkspace=new Path(workspaceUri);
    URI pathInWorkspaceURI=URI.createURI(pathInWorkspace.toString());
    for (    final Resource fileResource2 : fileResources) {
      fileResource=fileResource2;
      if (fileResource != null && fileResource.getURI().equals(pathInWorkspaceURI))       return fileResource;
    }
  }
  return null;
}",0.9739130434782608
102108,"/** 
 * @return collection of Resource's
 */
public Collection<Resource> getWebServiceResources(){
  Collection<Resource> webServiceModels=new ArrayList<Resource>();
  try {
    Collection<File> modelFiles=getVdb().getModelFiles();
    for (    File modelFile : modelFiles) {
      boolean isVisible=true;
      Resource res=this.container.getResource(URI.createFileURI(modelFile.getPath()),true);
      if (isVisible && ModelUtil.isModelFile(res) && !ModelUtil.isXsdFile(res)) {
        EObject firstEObj=res.getContents().get(0);
        ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
        String mmURI=ma.getPrimaryMetamodelUri();
        if (ModelUtil.URI_WEB_SERVICES_VIEW_MODEL.equalsIgnoreCase(mmURI)) {
          webServiceModels.add(res);
        }
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return webServiceModels;
}","/** 
 * @return collection of Resource's
 * @throws CoreException
 */
public Collection<Resource> getWebServiceResources() throws CoreException {
  Collection<Resource> webServiceModels=new ArrayList<Resource>();
  Collection<File> modelFiles=getVdb().getModelFiles();
  for (  File modelFile : modelFiles) {
    boolean isVisible=true;
    Resource res=this.container.getResource(URI.createFileURI(modelFile.getPath()),true);
    if (isVisible && ModelUtil.isModelFile(res) && !ModelUtil.isXsdFile(res)) {
      EObject firstEObj=res.getContents().get(0);
      ModelAnnotation ma=ModelerCore.getModelEditor().getModelAnnotation(firstEObj);
      String mmURI=ma.getPrimaryMetamodelUri();
      if (ModelUtil.URI_WEB_SERVICES_VIEW_MODEL.equalsIgnoreCase(mmURI)) {
        webServiceModels.add(res);
      }
    }
  }
  return webServiceModels;
}",0.6655192197360872
102109,"private void initialize() throws CoreException {
  this.container=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
  ModelEditorImpl.setContainer(this.container);
  try {
    this.vdb=new Vdb(vdbFile,false,new NullProgressMonitor());
  }
 catch (  Exception ex) {
    throw ErrorHandler.toCoreException(ex);
  }
  Collection<Resource> theFiles=new ArrayList<Resource>();
  Collection<File> modelFiles=getVdb().getModelFiles();
  for (  File modelFile : modelFiles) {
    Resource res=this.container.getResource(URI.createFileURI(modelFile.getPath()),true);
    theFiles.add(res);
  }
  this.vdbModelFiles=theFiles.toArray(new Resource[0]);
}","private void initialize() throws CoreException {
  this.container=(ContainerImpl)ModelerCore.createContainer(""String_Node_Str"");
  ModelEditorImpl.setContainer(this.container);
  try {
    this.vdb=new Vdb(vdbFile,false,new NullProgressMonitor());
  }
 catch (  Exception ex) {
    throw ErrorHandler.toCoreException(ex);
  }
  Collection<Resource> resourceFiles=new ArrayList<Resource>();
  Collection<File> modelFiles=getVdb().getModelFiles();
  for (  File modelFile : modelFiles) {
    Resource res=this.container.getResource(URI.createFileURI(modelFile.getPath()),true);
    resourceFiles.add(res);
  }
  Collection<File> schemaFiles=getVdb().getSchemaFiles();
  for (  File modelFile : schemaFiles) {
    Resource res=this.container.getResource(URI.createFileURI(modelFile.getPath()),true);
    resourceFiles.add(res);
  }
  this.vdbResourceFiles=resourceFiles;
}",0.8044619422572179
102110,"/** 
 * Method to return the File objects associated with each model in this VDB. The intention is to allow the Data Policy wizard to display contents of these models in EMF form so users can  pick/chose and set-up their data entitlements.
 * @return the immutable list of model files within this VDB
 */
public final Collection<File> getModelFiles(){
  final Collection<File> modelFiles=new ArrayList<File>();
  for (  VdbModelEntry modelEntry : getModelEntries()) {
    IPath modelPath=new Path(folder.getAbsolutePath() + modelEntry.getName());
    modelFiles.add(modelPath.toFile());
  }
  return Collections.unmodifiableCollection(modelFiles);
}","/** 
 * Method to return the File objects associated with each model in this VDB. The intention is to allow the Data Policy wizard to display contents of these models in EMF form so users can  pick/chose and set-up their data entitlements. Note: This will no longer return the schema files since they have their own collection and convert getter method.
 * @return the immutable list of model files within this VDB
 */
public final Collection<File> getModelFiles(){
  return convertEntries(getModelEntries());
}",0.6379310344827587
102111,"protected TabFolder createTabFolder(Composite parent){
  TabFolder tabFolder=new TabFolder(parent,SWT.TOP | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(tabFolder);
  return tabFolder;
}","protected TabFolder createTabFolder(Composite parent){
  TabFolder tabFolder=new TabFolder(parent,SWT.TOP | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(tabFolder);
  return tabFolder;
}",0.983451536643026
102112,"protected Composite createDescriptionPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(true).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(thePanel);
  final Group descGroup=WidgetFactory.createGroup(thePanel,UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DESCRIPTION),GridData.FILL_BOTH,3);
  descriptionTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,120).minSize(SWT.DEFAULT,30).applyTo(descriptionTextEditor.getTextWidget());
  descriptionTextEditor.setText(""String_Node_Str"");
  descriptionTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setDescription(descriptionTextEditor.getText());
    }
  }
);
  return thePanel;
}","protected Composite createDescriptionPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(true).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  final Group descGroup=WidgetFactory.createGroup(thePanel,UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DESCRIPTION),GridData.FILL_BOTH,3);
  descriptionTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,120).minSize(SWT.DEFAULT,30).applyTo(descriptionTextEditor.getTextWidget());
  descriptionTextEditor.setText(""String_Node_Str"");
  descriptionTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setDescription(descriptionTextEditor.getText());
    }
  }
);
  return thePanel;
}",0.99304865938431
102113,"private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}","private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,40).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}",0.9955489614243324
102114,"private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeResultSetCB.setToolTipText(Messages.includeResultSetTooltip);
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  this.addColumnButton.setEnabled(false);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeResultSetCB.setToolTipText(Messages.includeResultSetTooltip);
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  this.addColumnButton.setEnabled(false);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.9996087418254987
102115,"private Composite createParameterTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addParameterButton=new Button(buttonPanel,SWT.PUSH);
  addParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addParameterButton);
  addParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createParameter();
      handleInfoChanged();
    }
  }
);
  deleteParameterButton=new Button(buttonPanel,SWT.PUSH);
  deleteParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteParameterButton);
  deleteParameterButton.setEnabled(false);
  deleteParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter parameter=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          parameter=(RelationalParameter)obj;
          break;
        }
      }
      if (parameter != null) {
        getRelationalReference().removeParameter(parameter);
        deleteParameterButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upParameterButton=new Button(buttonPanel,SWT.PUSH);
  upParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upParameterButton);
  upParameterButton.setEnabled(false);
  upParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterUp(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex - 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  downParameterButton=new Button(buttonPanel,SWT.PUSH);
  downParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downParameterButton);
  downParameterButton.setEnabled(false);
  downParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterDown(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex + 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.parametersViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,150).applyTo(this.parametersViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.parameterNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ParameterNameEditingSupport(this.parametersViewer));
  column.setLabelProvider(new ParameterDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ParameterDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(2));
  column.setEditingSupport(new ParameterWidthEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.directionLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(3));
  column.setEditingSupport(new DirectionEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalParameter row : this.getRelationalReference().getParameters()) {
      this.parametersViewer.add(row);
    }
  }
  this.parametersViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteParameterButton.setEnabled(false);
        upParameterButton.setEnabled(false);
        downParameterButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalParameter columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalParameter)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalParameter)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteParameterButton.setEnabled(enable);
        if (enable) {
          upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(columnInfo));
          downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createParameterTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addParameterButton=new Button(buttonPanel,SWT.PUSH);
  addParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addParameterButton);
  addParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createParameter();
      handleInfoChanged();
    }
  }
);
  deleteParameterButton=new Button(buttonPanel,SWT.PUSH);
  deleteParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteParameterButton);
  deleteParameterButton.setEnabled(false);
  deleteParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter parameter=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          parameter=(RelationalParameter)obj;
          break;
        }
      }
      if (parameter != null) {
        getRelationalReference().removeParameter(parameter);
        deleteParameterButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upParameterButton=new Button(buttonPanel,SWT.PUSH);
  upParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upParameterButton);
  upParameterButton.setEnabled(false);
  upParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterUp(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex - 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  downParameterButton=new Button(buttonPanel,SWT.PUSH);
  downParameterButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downParameterButton);
  downParameterButton.setEnabled(false);
  downParameterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalParameter info=null;
      IStructuredSelection selection=(IStructuredSelection)parametersViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalParameter) {
          info=(RelationalParameter)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=parametersViewer.getTable().getSelectionIndex();
        getRelationalReference().moveParameterDown(info);
        handleInfoChanged();
        parametersViewer.getTable().select(selectedIndex + 1);
        downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(info));
        upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.parametersViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,150).applyTo(this.parametersViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.parameterNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ParameterNameEditingSupport(this.parametersViewer));
  column.setLabelProvider(new ParameterDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ParameterDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(2));
  column.setEditingSupport(new ParameterWidthEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.parametersViewer,SWT.LEFT);
  column.getColumn().setText(Messages.directionLabel);
  column.setLabelProvider(new ParameterDataLabelProvider(3));
  column.setEditingSupport(new DirectionEditingSupport(this.parametersViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalParameter row : this.getRelationalReference().getParameters()) {
      this.parametersViewer.add(row);
    }
  }
  this.parametersViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteParameterButton.setEnabled(false);
        upParameterButton.setEnabled(false);
        downParameterButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalParameter columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalParameter)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalParameter)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteParameterButton.setEnabled(enable);
        if (enable) {
          upParameterButton.setEnabled(getRelationalReference().canMoveParameterUp(columnInfo));
          downParameterButton.setEnabled(getRelationalReference().canMoveParameterDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.99950131794543
102116,"private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,40).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}","private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,40).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}",0.9975969790593888
102117,"private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.9994592506759368
102118,"private Composite createIndexesPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text indexesHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    indexesHelpText.setBackground(parent.getBackground());
    indexesHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(indexesHelpText);
    indexesHelpText.setText(Messages.indexesNotSupportedForViews);
  }
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.addIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addIndexButton);
  this.addIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex newIndex=new RelationalIndex();
      EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),newIndex,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addIndex(newIndex);
      }
      handleInfoChanged();
    }
  }
);
  this.editIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.editIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editIndexButton);
  this.editIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)indexesViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),index,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteIndexButton);
  this.deleteIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        getRelationalReference().removeIndex(index);
        deleteIndexButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.indexesViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(this.indexesViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.indexesViewer,SWT.LEFT);
  column.getColumn().setText(Messages.indexLabel);
  column.setLabelProvider(new IndexDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getIndexes() != null) {
    for (    RelationalIndex row : getRelationalReference().getIndexes()) {
      this.indexesViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createIndexesPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text indexesHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    indexesHelpText.setBackground(parent.getBackground());
    indexesHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(indexesHelpText);
    indexesHelpText.setText(Messages.indexesNotSupportedForViews);
  }
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.addIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addIndexButton);
  this.addIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex newIndex=new RelationalIndex();
      EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),newIndex,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addIndex(newIndex);
      }
      handleInfoChanged();
    }
  }
);
  this.editIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.editIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editIndexButton);
  this.editIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)indexesViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),index,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteIndexButton);
  this.deleteIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        getRelationalReference().removeIndex(index);
        deleteIndexButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.indexesViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(this.indexesViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.indexesViewer,SWT.LEFT);
  column.getColumn().setText(Messages.indexLabel);
  column.setLabelProvider(new IndexDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getIndexes() != null) {
    for (    RelationalIndex row : getRelationalReference().getIndexes()) {
      this.indexesViewer.add(row);
    }
  }
  return thePanel;
}",0.999145612107897
102119,"private Composite createForeignKeysPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text fkHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    fkHelpText.setBackground(parent.getBackground());
    fkHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(fkHelpText);
    fkHelpText.setText(Messages.foreignKeysNotSupportedForViews);
  }
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addFKButton=new Button(buttonPanel,SWT.PUSH);
  this.addFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addFKButton);
  this.addFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey newFK=new RelationalForeignKey();
      EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),newFK,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addForeignKey(newFK);
      }
      handleInfoChanged();
    }
  }
);
  this.editFKButton=new Button(buttonPanel,SWT.PUSH);
  this.editFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editFKButton);
  this.editFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),fk,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteFKButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteFKButton);
  this.deleteFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        getRelationalReference().removeForeignKey(fk);
        deleteFKButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.fkViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(this.fkViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.fkViewer,SWT.LEFT);
  column.getColumn().setText(Messages.fkNameLabel);
  column.setLabelProvider(new FKDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalForeignKey row : getRelationalReference().getForeignKeys()) {
      this.fkViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createForeignKeysPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text fkHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    fkHelpText.setBackground(parent.getBackground());
    fkHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(fkHelpText);
    fkHelpText.setText(Messages.foreignKeysNotSupportedForViews);
  }
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addFKButton=new Button(buttonPanel,SWT.PUSH);
  this.addFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addFKButton);
  this.addFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey newFK=new RelationalForeignKey();
      EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),newFK,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addForeignKey(newFK);
      }
      handleInfoChanged();
    }
  }
);
  this.editFKButton=new Button(buttonPanel,SWT.PUSH);
  this.editFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editFKButton);
  this.editFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),fk,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteFKButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteFKButton);
  this.deleteFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        getRelationalReference().removeForeignKey(fk);
        deleteFKButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.fkViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(this.fkViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.fkViewer,SWT.LEFT);
  column.getColumn().setText(Messages.fkNameLabel);
  column.setLabelProvider(new FKDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalForeignKey row : getRelationalReference().getForeignKeys()) {
      this.fkViewer.add(row);
    }
  }
  return thePanel;
}",0.9991337705729488
102120,"private Composite createUniqueConstraintPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text ucHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    ucHelpText.setBackground(parent.getBackground());
    ucHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(ucHelpText);
    ucHelpText.setText(Messages.uniqueConstraintsNotSupportedForViews);
  }
  this.includeUniqueConstraintCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includeUniqueConstraintCB);
  this.includeUniqueConstraintCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeUniqueConstraintCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeUniqueConstraintCB.getSelection()) {
        if (getRelationalReference().getUniqueContraint() == null) {
          RelationalUniqueConstraint key=new RelationalUniqueConstraint();
          if (uniqueConstraintNameText.getText() != null) {
            key.setName(uniqueConstraintNameText.getText());
          }
          getRelationalReference().setUniqueConstraint(key);
        }
      }
 else {
        getRelationalReference().setUniqueConstraint(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNameText);
  this.uniqueConstraintNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNISText);
  this.uniqueConstraintNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changeUcColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changeUcColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changeUcColumnsButton);
  this.changeUcColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),false);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getUniqueContraint().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getUniqueContraint().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.ucColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.ucColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.ucColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getUniqueContraint() != null) {
    for (    RelationalColumn row : getRelationalReference().getUniqueContraint().getColumns()) {
      this.ucColumnsViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createUniqueConstraintPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text ucHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    ucHelpText.setBackground(parent.getBackground());
    ucHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(ucHelpText);
    ucHelpText.setText(Messages.uniqueConstraintsNotSupportedForViews);
  }
  this.includeUniqueConstraintCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includeUniqueConstraintCB);
  this.includeUniqueConstraintCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeUniqueConstraintCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeUniqueConstraintCB.getSelection()) {
        if (getRelationalReference().getUniqueContraint() == null) {
          RelationalUniqueConstraint key=new RelationalUniqueConstraint();
          if (uniqueConstraintNameText.getText() != null) {
            key.setName(uniqueConstraintNameText.getText());
          }
          getRelationalReference().setUniqueConstraint(key);
        }
      }
 else {
        getRelationalReference().setUniqueConstraint(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNameText);
  this.uniqueConstraintNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNISText);
  this.uniqueConstraintNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changeUcColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changeUcColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changeUcColumnsButton);
  this.changeUcColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),false);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getUniqueContraint().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getUniqueContraint().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.ucColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,100).applyTo(this.ucColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.ucColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getUniqueContraint() != null) {
    for (    RelationalColumn row : getRelationalReference().getUniqueContraint().getColumns()) {
      this.ucColumnsViewer.add(row);
    }
  }
  return thePanel;
}",0.9993733774953004
102121,"private Composite createPrimaryKeyPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text pkHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    pkHelpText.setBackground(parent.getBackground());
    pkHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(pkHelpText);
    pkHelpText.setText(Messages.primaryKeysNotSupportedForViews);
  }
  this.includePrimaryKeyCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includePrimaryKeyCB);
  this.includePrimaryKeyCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includePrimaryKeyCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includePrimaryKeyCB.getSelection()) {
        if (getRelationalReference().getPrimaryKey() == null) {
          RelationalPrimaryKey key=new RelationalPrimaryKey();
          if (primaryKeyNameText.getText() != null) {
            key.setName(primaryKeyNameText.getText());
          }
          getRelationalReference().setPrimaryKey(key);
        }
      }
 else {
        getRelationalReference().setPrimaryKey(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNameText);
  this.primaryKeyNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNISText);
  this.primaryKeyNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changePkColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changePkColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changePkColumnsButton);
  this.changePkColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),true);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getPrimaryKey().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getPrimaryKey().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.pkColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.pkColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.pkColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getPrimaryKey() != null) {
    for (    RelationalColumn row : getRelationalReference().getPrimaryKey().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createPrimaryKeyPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  if (isRelationalView()) {
    Text pkHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
    pkHelpText.setBackground(parent.getBackground());
    pkHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
    GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).span(2,1).applyTo(pkHelpText);
    pkHelpText.setText(Messages.primaryKeysNotSupportedForViews);
  }
  this.includePrimaryKeyCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includePrimaryKeyCB);
  this.includePrimaryKeyCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includePrimaryKeyCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includePrimaryKeyCB.getSelection()) {
        if (getRelationalReference().getPrimaryKey() == null) {
          RelationalPrimaryKey key=new RelationalPrimaryKey();
          if (primaryKeyNameText.getText() != null) {
            key.setName(primaryKeyNameText.getText());
          }
          getRelationalReference().setPrimaryKey(key);
        }
      }
 else {
        getRelationalReference().setPrimaryKey(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNameText);
  this.primaryKeyNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNISText);
  this.primaryKeyNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changePkColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changePkColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changePkColumnsButton);
  this.changePkColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),true);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getPrimaryKey().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getPrimaryKey().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.pkColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,100).applyTo(this.pkColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.pkColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getPrimaryKey() != null) {
    for (    RelationalColumn row : getRelationalReference().getPrimaryKey().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  return thePanel;
}",0.9993503480278422
102122,"private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createColumnTableGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.9976030310059536
102123,"private Composite createIndexesPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.addIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addIndexButton);
  this.addIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex newIndex=new RelationalIndex();
      EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),newIndex,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addIndex(newIndex);
      }
      handleInfoChanged();
    }
  }
);
  this.editIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.editIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editIndexButton);
  this.editIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)indexesViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),index,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteIndexButton);
  this.deleteIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        getRelationalReference().removeIndex(index);
        deleteIndexButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.indexesViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(this.indexesViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.indexesViewer,SWT.LEFT);
  column.getColumn().setText(Messages.indexLabel);
  column.setLabelProvider(new IndexDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getIndexes() != null) {
    for (    RelationalIndex row : this.getRelationalReference().getIndexes()) {
      this.indexesViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createIndexesPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.addIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addIndexButton);
  this.addIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex newIndex=new RelationalIndex();
      EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),newIndex,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addIndex(newIndex);
      }
      handleInfoChanged();
    }
  }
);
  this.editIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.editIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editIndexButton);
  this.editIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)indexesViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        EditIndexDialog dialog=new EditIndexDialog(getShell(),getRelationalReference(),index,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteIndexButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteIndexButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteIndexButton);
  this.deleteIndexButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalIndex index=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalIndex) {
          index=(RelationalIndex)obj;
          break;
        }
      }
      if (index != null) {
        getRelationalReference().removeIndex(index);
        deleteIndexButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.indexesViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(this.indexesViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.indexesViewer,SWT.LEFT);
  column.getColumn().setText(Messages.indexLabel);
  column.setLabelProvider(new IndexDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getIndexes() != null) {
    for (    RelationalIndex row : this.getRelationalReference().getIndexes()) {
      this.indexesViewer.add(row);
    }
  }
  return thePanel;
}",0.9990451507297776
102124,"private Composite createForeignKeysPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addFKButton=new Button(buttonPanel,SWT.PUSH);
  this.addFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addFKButton);
  this.addFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey newFK=new RelationalForeignKey();
      EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),newFK,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addForeignKey(newFK);
      }
      handleInfoChanged();
    }
  }
);
  this.editFKButton=new Button(buttonPanel,SWT.PUSH);
  this.editFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editFKButton);
  this.editFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),fk,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteFKButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteFKButton);
  this.deleteFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        getRelationalReference().removeForeignKey(fk);
        deleteFKButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.fkViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,200).applyTo(this.fkViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.fkViewer,SWT.LEFT);
  column.getColumn().setText(Messages.fkNameLabel);
  column.setLabelProvider(new FKDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalForeignKey row : this.getRelationalReference().getForeignKeys()) {
      this.fkViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createForeignKeysPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(3).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(buttonPanel);
  this.addFKButton=new Button(buttonPanel,SWT.PUSH);
  this.addFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(this.addFKButton);
  this.addFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey newFK=new RelationalForeignKey();
      EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),newFK,false);
      int result=dialog.open();
      if (result == Window.OK) {
        getRelationalReference().addForeignKey(newFK);
      }
      handleInfoChanged();
    }
  }
);
  this.editFKButton=new Button(buttonPanel,SWT.PUSH);
  this.editFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.EDIT_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.editFKButton);
  this.editFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        EditForeignKeyDialog dialog=new EditForeignKeyDialog(getShell(),getModelFile(),getRelationalReference(),fk,true);
        int result=dialog.open();
        if (result == Window.OK) {
        }
        handleInfoChanged();
      }
    }
  }
);
  this.deleteFKButton=new Button(buttonPanel,SWT.PUSH);
  this.deleteFKButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(this.deleteFKButton);
  this.deleteFKButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalForeignKey fk=null;
      IStructuredSelection selection=(IStructuredSelection)fkViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalForeignKey) {
          fk=(RelationalForeignKey)obj;
          break;
        }
      }
      if (fk != null) {
        getRelationalReference().removeForeignKey(fk);
        deleteFKButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.fkViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(this.fkViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.fkViewer,SWT.LEFT);
  column.getColumn().setText(Messages.fkNameLabel);
  column.setLabelProvider(new FKDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null) {
    for (    RelationalForeignKey row : this.getRelationalReference().getForeignKeys()) {
      this.fkViewer.add(row);
    }
  }
  return thePanel;
}",0.9990359454620577
102125,"private Composite createUniqueConstraintPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeUniqueConstraintCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includeUniqueConstraintCB);
  this.includeUniqueConstraintCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeUniqueConstraintCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeUniqueConstraintCB.getSelection()) {
        if (getRelationalReference().getUniqueContraint() == null) {
          RelationalUniqueConstraint key=new RelationalUniqueConstraint();
          if (uniqueConstraintNameText.getText() != null) {
            key.setName(uniqueConstraintNameText.getText());
          }
          getRelationalReference().setUniqueConstraint(key);
        }
      }
 else {
        getRelationalReference().setUniqueConstraint(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNameText);
  this.uniqueConstraintNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNISText);
  this.uniqueConstraintNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changeUcColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changeUcColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changeUcColumnsButton);
  this.changeUcColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),false);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getUniqueContraint().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getUniqueContraint().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.ucColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.ucColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.ucColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getUniqueContraint() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getUniqueContraint().getColumns()) {
      this.ucColumnsViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createUniqueConstraintPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeUniqueConstraintCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includeUniqueConstraintCB);
  this.includeUniqueConstraintCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeUniqueConstraintCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeUniqueConstraintCB.getSelection()) {
        if (getRelationalReference().getUniqueContraint() == null) {
          RelationalUniqueConstraint key=new RelationalUniqueConstraint();
          if (uniqueConstraintNameText.getText() != null) {
            key.setName(uniqueConstraintNameText.getText());
          }
          getRelationalReference().setUniqueConstraint(key);
        }
      }
 else {
        getRelationalReference().setUniqueConstraint(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNameText);
  this.uniqueConstraintNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.uniqueConstraintNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.uniqueConstraintNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.uniqueConstraintNISText);
  this.uniqueConstraintNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=uniqueConstraintNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getUniqueContraint() != null) {
        RelationalUniqueConstraint key=getRelationalReference().getUniqueContraint();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changeUcColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changeUcColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changeUcColumnsButton);
  this.changeUcColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),false);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getUniqueContraint().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getUniqueContraint().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.ucColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,100).applyTo(this.ucColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.ucColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getUniqueContraint() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getUniqueContraint().getColumns()) {
      this.ucColumnsViewer.add(row);
    }
  }
  return thePanel;
}",0.999322951929587
102126,"private Composite createPrimaryKeyPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includePrimaryKeyCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includePrimaryKeyCB);
  this.includePrimaryKeyCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includePrimaryKeyCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includePrimaryKeyCB.getSelection()) {
        if (getRelationalReference().getPrimaryKey() == null) {
          RelationalPrimaryKey key=new RelationalPrimaryKey();
          if (primaryKeyNameText.getText() != null) {
            key.setName(primaryKeyNameText.getText());
          }
          getRelationalReference().setPrimaryKey(key);
        }
      }
 else {
        getRelationalReference().setPrimaryKey(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNameText);
  this.primaryKeyNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNISText);
  this.primaryKeyNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changePkColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changePkColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changePkColumnsButton);
  this.changePkColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),true);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getPrimaryKey().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getPrimaryKey().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.pkColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.pkColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.pkColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getPrimaryKey() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getPrimaryKey().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  return thePanel;
}","private Composite createPrimaryKeyPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includePrimaryKeyCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).span(2,1).applyTo(this.includePrimaryKeyCB);
  this.includePrimaryKeyCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includePrimaryKeyCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includePrimaryKeyCB.getSelection()) {
        if (getRelationalReference().getPrimaryKey() == null) {
          RelationalPrimaryKey key=new RelationalPrimaryKey();
          if (primaryKeyNameText.getText() != null) {
            key.setName(primaryKeyNameText.getText());
          }
          getRelationalReference().setPrimaryKey(key);
        }
      }
 else {
        getRelationalReference().setPrimaryKey(null);
      }
      handleInfoChanged();
    }
  }
);
  Label label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNameText);
  this.primaryKeyNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE | SWT.RIGHT);
  label.setText(Messages.nameInSourceLabel);
  GridDataFactory.fillDefaults().applyTo(label);
  this.primaryKeyNISText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.primaryKeyNISText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().applyTo(this.primaryKeyNISText);
  this.primaryKeyNISText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=primaryKeyNISText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getPrimaryKey() != null) {
        RelationalPrimaryKey key=getRelationalReference().getPrimaryKey();
        key.setNameInSource(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=new Composite(thePanel,SWT.NONE);
  GridLayoutFactory.fillDefaults().applyTo(buttonPanel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(buttonPanel);
  this.changePkColumnsButton=new Button(buttonPanel,SWT.PUSH);
  this.changePkColumnsButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.CHANGE_ELIPSIS));
  GridDataFactory.fillDefaults().applyTo(this.changePkColumnsButton);
  this.changePkColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectColumnsDialog dialog=new SelectColumnsDialog(getShell(),getRelationalReference(),true);
      int result=dialog.open();
      if (result == Window.OK) {
        Collection<RelationalColumn> selectedColumns=dialog.getSelectedColumns();
        if (!selectedColumns.isEmpty()) {
          getRelationalReference().getPrimaryKey().setColumns(selectedColumns);
        }
 else {
          getRelationalReference().getPrimaryKey().setColumns(Collections.EMPTY_LIST);
        }
      }
      handleInfoChanged();
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.pkColumnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,100).applyTo(this.pkColumnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.pkColumnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  if (getRelationalReference() != null && getRelationalReference().getPrimaryKey() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getPrimaryKey().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  return thePanel;
}",0.9992968357609242
102127,"private void validateNamespaceUri(){
  if (getMed().isBuiltIn()) {
    this.namespaceUriError.setStatus(ValidationStatus.OK_STATUS);
  }
 else {
    this.namespaceUriError.setStatus(ModelExtensionDefinitionValidator.validateNamespaceUri(getMed().getNamespaceUri(),getRegistry().getAllNamespaceUris()));
  }
  updateMessage(this.namespaceUriError);
}","private void validateNamespaceUri(){
  if (getMed().isBuiltIn() || getMed().isImported()) {
    this.namespaceUriError.setStatus(ValidationStatus.OK_STATUS);
  }
 else {
    this.namespaceUriError.setStatus(ModelExtensionDefinitionValidator.validateNamespaceUri(getMed().getNamespaceUri(),getRegistry().getAllNamespaceUris()));
  }
  updateMessage(this.namespaceUriError);
}",0.9654218533886584
102128,"private void validateNamespacePrefix(){
  if (getMed().isBuiltIn()) {
    this.namespacePrefixError.setStatus(ValidationStatus.OK_STATUS);
  }
 else {
    this.namespacePrefixError.setStatus(ModelExtensionDefinitionValidator.validateNamespacePrefix(getMed().getNamespacePrefix(),getRegistry().getAllNamespacePrefixes()));
  }
  updateMessage(this.namespacePrefixError);
}","private void validateNamespacePrefix(){
  if (getMed().isBuiltIn() || getMed().isImported()) {
    this.namespacePrefixError.setStatus(ValidationStatus.OK_STATUS);
  }
 else {
    this.namespacePrefixError.setStatus(ModelExtensionDefinitionValidator.validateNamespacePrefix(getMed().getNamespacePrefix(),getRegistry().getAllNamespacePrefixes()));
  }
  updateMessage(this.namespacePrefixError);
}",0.967405475880052
102129,"/** 
 * @param med the MED being validated (cannot be <code>null</code>)
 * @param existingNamespacePrefixes the namespace prefixes defined in the MED (can be <code>null</code>)
 * @param existingNamespaceUris the namespace URIs defined in the MED (can be <code>null</code>) 
 * @param extendableMetamodelUris the valid metamodel URIs that can be extended (can be <code>null</code>)
 * @param validModelTypes the valid model types (can be <code>null</code>)
 * @return the validation status (never <code>null</code>)
 */
public static MedStatus validateMed(final ModelExtensionDefinition med,final Collection<String> existingNamespacePrefixes,final Collection<String> existingNamespaceUris,final Collection<String> extendableMetamodelUris,final Set<String> validModelTypes){
  boolean builtIn=med.isBuiltIn();
  if (!builtIn) {
    MedStatus status=validateMedHeader(med.getHeader(),existingNamespacePrefixes,existingNamespaceUris,extendableMetamodelUris,validModelTypes);
    status=addStatus(status,validateMetaclassNames(med.getExtendedMetaclasses(),true));
    return addStatus(status,validatePropertyDefinitions(med.getPropertyDefinitions()));
  }
 else {
    return ValidationStatus.OK_STATUS;
  }
}","/** 
 * @param med the MED being validated (cannot be <code>null</code>)
 * @param existingNamespacePrefixes the namespace prefixes defined in the MED (can be <code>null</code>)
 * @param existingNamespaceUris the namespace URIs defined in the MED (can be <code>null</code>) 
 * @param extendableMetamodelUris the valid metamodel URIs that can be extended (can be <code>null</code>)
 * @param validModelTypes the valid model types (can be <code>null</code>)
 * @return the validation status (never <code>null</code>)
 */
public static MedStatus validateMed(final ModelExtensionDefinition med,final Collection<String> existingNamespacePrefixes,final Collection<String> existingNamespaceUris,final Collection<String> extendableMetamodelUris,final Set<String> validModelTypes){
  boolean builtIn=med.isBuiltIn();
  boolean imported=med.isImported();
  if (!builtIn && !imported) {
    MedStatus status=validateMedHeader(med.getHeader(),existingNamespacePrefixes,existingNamespaceUris,extendableMetamodelUris,validModelTypes);
    status=addStatus(status,validateMetaclassNames(med.getExtendedMetaclasses(),true));
    return addStatus(status,validatePropertyDefinitions(med.getPropertyDefinitions()));
  }
 else {
    return ValidationStatus.OK_STATUS;
  }
}",0.9796747967479674
102130,"protected Composite createDescriptionPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(true).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(thePanel);
  final Group descGroup=WidgetFactory.createGroup(thePanel,UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DESCRIPTION),GridData.FILL_BOTH,3);
  descriptionTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(descriptionTextEditor.getTextWidget());
  descriptionTextEditor.setText(""String_Node_Str"");
  descriptionTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setDescription(descriptionTextEditor.getText());
    }
  }
);
  return thePanel;
}","protected Composite createDescriptionPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(true).margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(thePanel);
  final Group descGroup=WidgetFactory.createGroup(thePanel,UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DESCRIPTION),GridData.FILL_BOTH,3);
  descriptionTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,120).minSize(SWT.DEFAULT,30).applyTo(descriptionTextEditor.getTextWidget());
  descriptionTextEditor.setText(""String_Node_Str"");
  descriptionTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setDescription(descriptionTextEditor.getText());
    }
  }
);
  return thePanel;
}",0.9955334987593052
102131,"protected Composite createNameGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false);
  GridDataFactory.fillDefaults().grab(true,false).minSize(SWT.DEFAULT,120).applyTo(thePanel);
  Label label=new Label(thePanel,SWT.NONE);
  label.setText(Messages.modelFileLabel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(label);
  this.modelNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.modelNameText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  this.modelNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.modelNameText);
  if (getModelFile() != null) {
    modelNameText.setText(getModelFile().getName());
  }
  label=new Label(thePanel,SWT.NONE);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  this.nameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.nameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.nameText);
  this.nameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=nameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      getRelationalReference().setName(value);
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE);
  label.setText(Messages.nameInSourceLabel);
  this.nameInSourceText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.nameInSourceText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.nameInSourceText);
  this.nameInSourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=nameInSourceText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      getRelationalReference().setNameInSource(value);
      handleInfoChanged();
    }
  }
);
  return thePanel;
}","protected Composite createNameGroup(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false);
  GridDataFactory.fillDefaults().grab(true,false).minSize(SWT.DEFAULT,120).applyTo(thePanel);
  Label label=new Label(thePanel,SWT.NONE);
  label.setText(Messages.modelFileLabel);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.BEGINNING).applyTo(label);
  this.modelNameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.modelNameText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  this.modelNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.modelNameText);
  if (getModelFile() != null) {
    modelNameText.setText(getModelFile().getName());
  }
  label=new Label(thePanel,SWT.NONE);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  this.nameText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.nameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.nameText);
  this.nameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=nameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      getRelationalReference().setName(value);
      handleInfoChanged();
    }
  }
);
  label=new Label(thePanel,SWT.NONE);
  label.setText(Messages.nameInSourceLabel);
  this.nameInSourceText=new Text(thePanel,SWT.BORDER | SWT.SINGLE);
  this.nameInSourceText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(this.nameInSourceText);
  this.nameInSourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=nameInSourceText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      getRelationalReference().setNameInSource(value);
      handleInfoChanged();
    }
  }
);
  return thePanel;
}",0.9995483288166216
102132,"private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,100).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}","private Composite createNativeQueryPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,3);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  nativeQueryHelpText=new Text(thePanel,SWT.WRAP | SWT.READ_ONLY);
  nativeQueryHelpText.setBackground(parent.getBackground());
  nativeQueryHelpText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).hint(250,40).applyTo(nativeQueryHelpText);
  nativeQueryHelpText.setText(Messages.nativeQueryHelpText);
  final Group descGroup=WidgetFactory.createGroup(thePanel,Messages.sqlLabel,GridData.FILL_BOTH,3);
  nativeQueryTextEditor=new StyledTextEditor(descGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).minSize(SWT.DEFAULT,30).applyTo(nativeQueryTextEditor.getTextWidget());
  nativeQueryTextEditor.setText(""String_Node_Str"");
  nativeQueryTextEditor.getTextWidget().setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  nativeQueryTextEditor.getTextWidget().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getRelationalReference().setNativeQuery(nativeQueryTextEditor.getText());
      handleInfoChanged();
    }
  }
);
  return thePanel;
}",0.9989701338825951
102133,"/** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
@Override public void run(){
  refreshMed();
}","/** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
@Override public void run(){
  if (!getShell().isDisposed()) {
    for (    MedEditorPage medEditorPage : accessMedEditorPages().keySet()) {
      medEditorPage.updateAllMessages();
    }
  }
}",0.5546218487394958
102134,"private void createMed() throws Exception {
  ModelExtensionDefinitionParser parser=new ModelExtensionDefinitionParser(ExtensionPlugin.getInstance().getMedSchema());
  this.originalMed=parser.parse(getFile().getContents(),ExtensionPlugin.getInstance().createDefaultModelObjectExtensionAssistant());
  Collection<String> fatals=parser.getFatalErrors();
  if ((fatals != null) && !fatals.isEmpty()) {
    throw new RuntimeException(fatals.iterator().next());
  }
  if (this.medBeingEdited != null) {
    this.medBeingEdited.removeListener(this);
  }
  this.medBeingEdited=new ModelExtensionDefinition(ExtensionPlugin.getInstance().createDefaultModelObjectExtensionAssistant());
  this.medBeingEdited.setDescription(this.originalMed.getDescription());
  this.medBeingEdited.setMetamodelUri(this.originalMed.getMetamodelUri());
  this.medBeingEdited.setNamespacePrefix(this.originalMed.getNamespacePrefix());
  this.medBeingEdited.setNamespaceUri(this.originalMed.getNamespaceUri());
  this.medBeingEdited.setVersion(this.originalMed.getVersion());
  for (  String modelType : this.originalMed.getSupportedModelTypes()) {
    this.medBeingEdited.addModelType(modelType);
  }
  for (  String metaclassName : this.originalMed.getExtendedMetaclasses()) {
    this.medBeingEdited.addMetaclass(metaclassName);
    for (    ModelExtensionPropertyDefinition propDefn : this.originalMed.getPropertyDefinitions(metaclassName)) {
      ModelExtensionPropertyDefinition copy=(ModelExtensionPropertyDefinition)propDefn.clone();
      copy.setNamespaceProvider(this.medBeingEdited);
      this.medBeingEdited.addPropertyDefinition(metaclassName,copy);
    }
  }
  IFile medFile=getFile();
  String projName=medFile.getProject().getName();
  if (projName != null && projName.equals(ExtensionConstants.BUILTIN_MEDS_PROJECT_NAME)) {
    this.medBeingEdited.markAsBuiltIn();
  }
  if (this.selectionSynchronizer == null) {
    this.selectionSynchronizer=new MedSelectionSynchronizer(this);
  }
 else {
    this.selectionSynchronizer.setMed(this.medBeingEdited);
  }
  this.medBeingEdited.addListener(this);
}","private void createMed() throws Exception {
  ModelExtensionDefinitionParser parser=new ModelExtensionDefinitionParser(ExtensionPlugin.getInstance().getMedSchema());
  this.originalMed=parser.parse(getFile().getContents(),ExtensionPlugin.getInstance().createDefaultModelObjectExtensionAssistant());
  Collection<String> fatals=parser.getFatalErrors();
  if ((fatals != null) && !fatals.isEmpty()) {
    throw new RuntimeException(fatals.iterator().next());
  }
  if (this.medBeingEdited != null) {
    this.medBeingEdited.removeListener(this);
  }
  this.medBeingEdited=new ModelExtensionDefinition(ExtensionPlugin.getInstance().createDefaultModelObjectExtensionAssistant());
  this.medBeingEdited.setDescription(this.originalMed.getDescription());
  this.medBeingEdited.setMetamodelUri(this.originalMed.getMetamodelUri());
  this.medBeingEdited.setNamespacePrefix(this.originalMed.getNamespacePrefix());
  this.medBeingEdited.setNamespaceUri(this.originalMed.getNamespaceUri());
  this.medBeingEdited.setVersion(this.originalMed.getVersion());
  for (  String modelType : this.originalMed.getSupportedModelTypes()) {
    this.medBeingEdited.addModelType(modelType);
  }
  for (  String metaclassName : this.originalMed.getExtendedMetaclasses()) {
    this.medBeingEdited.addMetaclass(metaclassName);
    for (    ModelExtensionPropertyDefinition propDefn : this.originalMed.getPropertyDefinitions(metaclassName)) {
      ModelExtensionPropertyDefinition copy=(ModelExtensionPropertyDefinition)propDefn.clone();
      copy.setNamespaceProvider(this.medBeingEdited);
      this.medBeingEdited.addPropertyDefinition(metaclassName,copy);
    }
  }
  IFile medFile=getFile();
  if (isImported(medFile))   this.medBeingEdited.markAsImported();
 else   if (isBuiltIn(medFile))   this.medBeingEdited.markAsBuiltIn();
  if (this.selectionSynchronizer == null) {
    this.selectionSynchronizer=new MedSelectionSynchronizer(this);
  }
 else {
    this.selectionSynchronizer.setMed(this.medBeingEdited);
  }
  this.medBeingEdited.addListener(this);
}",0.9442559379544352
102135,"/** 
 * Checks the *.mxd file permissions and notifies the editor's pages if the permissions have changed.
 */
private void refreshReadOnlyState(){
  ResourceAttributes attributes=getFile().getResourceAttributes();
  boolean newValue=((attributes == null) ? true : attributes.isReadOnly());
  if (isReadOnly() != newValue) {
    this.readOnly=newValue;
    for (    MedEditorPage page : this.medEditorPages.keySet()) {
      page.setResourceReadOnly(this.readOnly);
      IManagedForm mf=page.getManagedForm();
      if (mf != null)       mf.refresh();
    }
  }
}","/** 
 * Checks the *.mxd file permissions and notifies the editor's pages if the permissions have changed.
 */
private void refreshReadOnlyState(){
  ResourceAttributes attributes=getFile().getResourceAttributes();
  if (isImported(getFile()))   attributes.setReadOnly(true);
  boolean newValue=((attributes == null) ? true : attributes.isReadOnly());
  if (isReadOnly() != newValue) {
    this.readOnly=newValue;
    for (    MedEditorPage page : this.medEditorPages.keySet()) {
      page.setResourceReadOnly(this.readOnly);
      IManagedForm mf=page.getManagedForm();
      if (mf != null)       mf.refresh();
    }
  }
}",0.9486963835155592
102136,"void refreshMed(){
  if (!isSynchronized()) {
    unhookRefreshListener();
    if (MessageFormDialog.openQuestion(getShell(),Messages.medChangedOnFileSystemDialogTitle,Activator.getDefault().getImage(MED_EDITOR),NLS.bind(Messages.medChangedOnFileSystemDialogMsg,getFile().getName()))) {
      try {
        getFile().refreshLocal(IResource.DEPTH_ONE,null);
        this.modificationStamp=this.documentProvider.getModificationStamp(getEditorInput());
        createMed();
        for (        MedEditorPage page : this.medEditorPages.keySet()) {
          page.handleMedReloaded();
        }
      }
 catch (      Exception e) {
        UTIL.log(e);
        MessageFormDialog.openError(getShell(),Messages.medEditorRefreshErrorTitle,Activator.getDefault().getImage(MED_EDITOR),Messages.medEditorRefreshErrorMsg);
      }
    }
    hookRefreshListener();
  }
}","void refreshMed(){
  if (getContainer() == null || getContainer().isDisposed())   return;
  if (!isSynchronized()) {
    unhookRefreshListener();
    if (MessageFormDialog.openQuestion(getShell(),Messages.medChangedOnFileSystemDialogTitle,Activator.getDefault().getImage(MED_EDITOR),NLS.bind(Messages.medChangedOnFileSystemDialogMsg,getFile().getName()))) {
      try {
        getFile().refreshLocal(IResource.DEPTH_ONE,null);
        this.modificationStamp=this.documentProvider.getModificationStamp(getEditorInput());
        createMed();
        for (        MedEditorPage page : this.medEditorPages.keySet()) {
          page.handleMedReloaded();
        }
      }
 catch (      Exception e) {
        UTIL.log(e);
        MessageFormDialog.openError(getShell(),Messages.medEditorRefreshErrorTitle,Activator.getDefault().getImage(MED_EDITOR),Messages.medEditorRefreshErrorMsg);
      }
    }
    hookRefreshListener();
  }
}",0.9602686066032456
102137,"/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResourceChangeListener#resourceChanged(org.eclipse.core.resources.IResourceChangeEvent)
 */
@Override public void resourceChanged(final IResourceChangeEvent event){
  int type=event.getType();
  if (type == IResourceChangeEvent.POST_CHANGE) {
    IResourceDelta delta=event.getDelta();
    if (delta == null) {
      return;
    }
    try {
      delta.accept(new IResourceDeltaVisitor(){
        /** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)
 */
        @Override public boolean visit(        IResourceDelta delta){
          if (delta.getResource().equals(getFile())) {
            if ((delta.getKind() & IResourceDelta.REMOVED) != 0) {
              if (!getShell().isDisposed()) {
                getShell().getDisplay().asyncExec(new Runnable(){
                  /** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
                  @Override public void run(){
                    getEditorSite().getPage().closeEditor(accessThis(),false);
                  }
                }
);
              }
            }
 else             if (ResourceChangeUtilities.isContentChanged(delta)) {
              if (!getShell().isDisposed()) {
                getShell().getDisplay().asyncExec(new Runnable(){
                  /** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
                  @Override public void run(){
                    refreshMed();
                  }
                }
);
              }
            }
            return false;
          }
          return true;
        }
      }
);
    }
 catch (    Exception e) {
      UTIL.log(IStatus.ERROR,e,e.getMessage());
    }
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResourceChangeListener#resourceChanged(org.eclipse.core.resources.IResourceChangeEvent)
 */
@Override public void resourceChanged(final IResourceChangeEvent event){
  int type=event.getType();
  if (type != IResourceChangeEvent.POST_CHANGE)   return;
  IResourceDelta delta=event.getDelta();
  if (delta == null)   return;
  try {
    delta.accept(this);
  }
 catch (  Exception e) {
    UTIL.log(IStatus.ERROR,e,e.getMessage());
  }
}",0.3784505788067676
102138,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.forms.editor.SharedHeaderFormEditor#dispose()
 */
@Override public void dispose(){
  getRegistry().removeListener(this);
  super.dispose();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.forms.editor.SharedHeaderFormEditor#dispose()
 */
@Override public void dispose(){
  if (medEditorPages != null)   medEditorPages.clear();
  getRegistry().removeListener(this);
  if (medResourceListener != null)   ModelerCore.getWorkspace().removeResourceChangeListener(medResourceListener);
  super.dispose();
}",0.6335174953959485
102139,"/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)
 */
@Override public boolean visit(IResourceDelta delta){
  if (delta.getResource().equals(getFile())) {
    if ((delta.getKind() & IResourceDelta.REMOVED) != 0) {
      if (!getShell().isDisposed()) {
        getShell().getDisplay().asyncExec(new Runnable(){
          /** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
          @Override public void run(){
            getEditorSite().getPage().closeEditor(accessThis(),false);
          }
        }
);
      }
    }
 else     if (ResourceChangeUtilities.isContentChanged(delta)) {
      if (!getShell().isDisposed()) {
        getShell().getDisplay().asyncExec(new Runnable(){
          /** 
 * {@inheritDoc}
 * @see java.lang.Runnable#run()
 */
          @Override public void run(){
            refreshMed();
          }
        }
);
      }
    }
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)
 */
@Override public boolean visit(IResourceDelta delta){
  final Collection<IEditorPart> openEditors=UiUtil.getEditorsForFile(file);
  if (openEditors.isEmpty())   return false;
  if (!delta.getResource().equals(file))   return true;
  Runnable runnable=null;
  if ((delta.getKind() & IResourceDelta.REMOVED) != 0) {
    runnable=new Runnable(){
      @Override public void run(){
        for (        IEditorPart editor : openEditors)         editor.getSite().getPage().closeEditor(editor,false);
      }
    }
;
  }
 else   if (ResourceChangeUtilities.isContentChanged(delta)) {
    runnable=new Runnable(){
      @Override public void run(){
        for (        IEditorPart editor : openEditors) {
          if (editor instanceof ModelExtensionDefinitionEditor)           ((ModelExtensionDefinitionEditor)editor).refreshMed();
        }
      }
    }
;
  }
  if (runnable != null)   UiUtil.runInSwtThread(runnable,true);
  return false;
}",0.5134211810639336
102140,"/** 
 * @param translator the translator whose properties are being changed (never <code>null</code>)
 * @param changedProperties a collection of properties that have changed (never <code>null</code> or empty)
 * @throws Exception if there is a problem changing the properties
 * @since 7.0
 */
public void setProperties(ITeiidTranslator translator,Properties changedProperties,TranslatorPropertyType type) throws Exception {
  ArgCheck.isNotNull(translator,""String_Node_Str"");
  ArgCheck.isNotNull(changedProperties,""String_Node_Str"");
  ArgCheck.isNotEmpty(changedProperties.entrySet(),""String_Node_Str"");
  if (changedProperties.size() == 1) {
    String name=changedProperties.stringPropertyNames().iterator().next();
    setPropertyValue(translator,name,changedProperties.getProperty(name),type);
  }
 else {
    for (    String name : changedProperties.stringPropertyNames()) {
      internalSetPropertyValue(translator,name,changedProperties.getProperty(name),type,false);
    }
  }
}","/** 
 * @param translator the translator whose properties are being changed (never <code>null</code>)
 * @param changedProperties a collection of properties that have changed (never <code>null</code> or empty)
 * @param type the translator property type
 * @throws Exception if there is a problem changing the properties
 * @since 7.0
 */
public void setProperties(ITeiidTranslator translator,Properties changedProperties,TranslatorPropertyType type) throws Exception {
  ArgCheck.isNotNull(translator,""String_Node_Str"");
  ArgCheck.isNotNull(changedProperties,""String_Node_Str"");
  ArgCheck.isNotEmpty(changedProperties.entrySet(),""String_Node_Str"");
  if (changedProperties.size() == 1) {
    String name=changedProperties.stringPropertyNames().iterator().next();
    setPropertyValue(translator,name,changedProperties.getProperty(name),type);
  }
 else {
    for (    String name : changedProperties.stringPropertyNames()) {
      internalSetPropertyValue(translator,name,changedProperties.getProperty(name),type,false);
    }
  }
}",0.9782823297137216
102141,"private void waitForVDBLoad(String vdbName) throws Exception {
  long waitUntil=System.currentTimeMillis() + VDB_LOADING_TIMEOUT_SEC * 1000;
  boolean first=true;
  do {
    if (!first) {
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
 else {
      first=false;
    }
    refresh();
    ITeiidVdb vdb=getVdb(vdbName);
    if (vdb != null) {
      boolean hasValidityErrors=!vdb.getValidityErrors().isEmpty();
      if (!vdb.hasModels() || vdb.hasFailed() || !vdb.isLoading()|| vdb.isActive()|| vdb.wasRemoved()|| hasValidityErrors) {
        return;
      }
    }
 else {
      return;
    }
  }
 while (System.currentTimeMillis() < waitUntil);
  refresh();
  return;
}","private void waitForVDBLoad(String vdbName) throws Exception {
  long waitUntil=System.currentTimeMillis() + VDB_LOADING_TIMEOUT_SEC * 1000;
  boolean first=true;
  do {
    if (!first) {
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
 else {
      first=false;
    }
    refreshVDBs();
    ITeiidVdb vdb=getVdb(vdbName);
    if (vdb != null) {
      boolean hasValidityErrors=!vdb.getValidityErrors().isEmpty();
      if (!vdb.hasModels() || vdb.hasFailed() || !vdb.isLoading()|| vdb.isActive()|| vdb.wasRemoved()|| hasValidityErrors) {
        return;
      }
    }
 else {
      return;
    }
  }
 while (System.currentTimeMillis() < waitUntil);
  refreshVDBs();
  return;
}",0.9946164199192464
102142,"/** 
 * Refreshes the local collection of Translators on the referenced Teiid server.
 * @param translators
 * @throws Exception
 */
protected void refreshTranslators(Collection<? extends Translator> translators) throws Exception {
  for (  Translator translator : translators) {
    if (translator.getName() != null) {
      if (teiidServer.getServerVersion().isLessThan(Version.TEIID_8_6.get())) {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTemplatePropertyDefinitions(translator.getName());
        this.translatorByNameMap.put(translator.getName(),new TeiidTranslator(translator,propDefs,teiidServer));
      }
 else       if (teiidServer.getServerVersion().isLessThan(Version.TEIID_8_7.get())) {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName());
      }
 else {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.OVERRIDE);
        Collection<? extends PropertyDefinition> importPropDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.IMPORT);
        Collection<? extends PropertyDefinition> extPropDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.EXTENSION_METADATA);
        this.translatorByNameMap.put(translator.getName(),new TeiidTranslator(translator,propDefs,importPropDefs,extPropDefs,teiidServer));
      }
    }
  }
}","/** 
 * Refreshes the local collection of Translators on the referenced Teiid server.
 * @param translators
 * @throws Exception
 */
protected void refreshTranslators(Collection<? extends Translator> translators) throws Exception {
  for (  Translator translator : translators) {
    if (translator.getName() != null) {
      if (teiidServer.getServerVersion().isLessThan(Version.TEIID_8_6.get())) {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTemplatePropertyDefinitions(translator.getName());
        this.translatorByNameMap.put(translator.getName(),new TeiidTranslator(translator,propDefs,teiidServer));
      }
 else       if (teiidServer.getServerVersion().isLessThan(Version.TEIID_8_7.get())) {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName());
        this.translatorByNameMap.put(translator.getName(),new TeiidTranslator(translator,propDefs,teiidServer));
      }
 else {
        Collection<? extends PropertyDefinition> propDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.OVERRIDE);
        Collection<? extends PropertyDefinition> importPropDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.IMPORT);
        Collection<? extends PropertyDefinition> extPropDefs=this.admin.getTranslatorPropertyDefinitions(translator.getName(),Admin.TranlatorPropertyType.EXTENSION_METADATA);
        this.translatorByNameMap.put(translator.getName(),new TeiidTranslator(translator,propDefs,importPropDefs,extPropDefs,teiidServer));
      }
    }
  }
}",0.9644542308902172
102143,"/** 
 * @param translator the translator whose property is being changed (never <code>null</code>)
 * @param propName the name of the property being changed (never <code>null</code> or empty)
 * @param value the new value
 * @throws Exception if there is a problem setting the property
 * @since 7.0
 */
public void setPropertyValue(ITeiidTranslator translator,String propName,String value,TranslatorPropertyType type) throws Exception {
  ArgCheck.isNotNull(translator,""String_Node_Str"");
  ArgCheck.isNotEmpty(propName,""String_Node_Str"");
  ArgCheck.isNotEmpty(value,""String_Node_Str"");
  internalSetPropertyValue(translator,propName,value,type,true);
}","/** 
 * @param translator the translator whose property is being changed (never <code>null</code>)
 * @param propName the name of the property being changed (never <code>null</code> or empty)
 * @param value the new value
 * @param type the translator property type
 * @throws Exception if there is a problem setting the property
 * @since 7.0
 */
public void setPropertyValue(ITeiidTranslator translator,String propName,String value,TranslatorPropertyType type) throws Exception {
  ArgCheck.isNotNull(translator,""String_Node_Str"");
  ArgCheck.isNotEmpty(propName,""String_Node_Str"");
  ArgCheck.isNotEmpty(value,""String_Node_Str"");
  internalSetPropertyValue(translator,propName,value,type,true);
}",0.967503692762186
102144,"/** 
 * Set the Target Model Location
 * @param targetPath the location path for the target
 */
public void setTargetModelLocation(IPath targetPath){
  this.targetModelLocation=targetPath;
  if (this.ddlImporter != null) {
    this.ddlImporter.setModelFolder(targetPath.toOSString());
  }
}","/** 
 * Set the Target Model Location
 * @param targetPath the location path for the target
 */
public void setTargetModelLocation(IPath targetPath){
  this.targetModelLocation=targetPath;
  if (this.ddlImporter != null) {
    this.ddlImporter.setModelFolder(targetPath.toString());
  }
}",0.9965397923875432
102145,"private void addMessage(ErrorMessage errorMsg){
  errorMsg.update(this.scrolledForm.getMessageManager());
}","private void addMessage(ErrorMessage errorMsg){
  errorMsg.update(this.scrolledForm.getMessageManager());
  if (errorMsg.isOk()) {
    this.scrolledForm.setMessage(errorMsg.getMessage(),IMessageProvider.NONE);
  }
}",0.6645962732919255
102146,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.forms.FormDialog#createFormContent(org.eclipse.ui.forms.IManagedForm)
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void createFormContent(IManagedForm managedForm){
  this.scrolledForm=managedForm.getForm();
  this.scrolledForm.setText(this.title);
  this.scrolledForm.setImage(Activator.getDefault().getImage(MED_EDITOR));
  this.scrolledForm.setMessage(Messages.translationDialogMsg,IMessageProvider.NONE);
  FormToolkit toolkit=managedForm.getToolkit();
  toolkit.decorateFormHeading(this.scrolledForm.getForm());
  Composite body=this.scrolledForm.getBody();
  body.setLayout(new GridLayout(2,false));
  final Control cbx;
  LOCALE: {
    Label lblLocale=toolkit.createLabel(body,Messages.localeLabel,SWT.NONE);
    lblLocale.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
    CCombo cbxLocales=new CCombo(body,COMBO_STYLE);
    this.localeError.setControl(cbxLocales);
    cbx=cbxLocales;
    toolkit.adapt(cbxLocales,true,false);
    cbxLocales.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    ((GridData)cbxLocales.getLayoutData()).widthHint=(int)(getParentShell().getSize().x * 0.8);
    ((GridData)cbxLocales.getLayoutData()).heightHint=cbxLocales.getItemHeight() + 4;
    final List<Locale> locales=new ArrayList<Locale>(Arrays.asList(Locale.getAvailableLocales()));
    Collections.sort(locales,ExtensionConstants.LOCALE_COMPARATOR);
    for (    Locale locale : locales) {
      cbxLocales.add(locale.getDisplayName());
    }
    if (isEditMode()) {
      String current=this.translationBeingEdited.getLocale().getDisplayName();
      int index=cbxLocales.indexOf(current);
      if (index != -1) {
        cbxLocales.select(index);
      }
    }
    cbxLocales.addSelectionListener(new SelectionAdapter(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
      @Override public void widgetSelected(      SelectionEvent e){
        int index=((CCombo)e.widget).getSelectionIndex();
        handleLocaleChanged(locales.get(index));
      }
    }
);
    final LocaleProposalProvider proposalProvider=new LocaleProposalProvider(cbxLocales);
    proposalProvider.init();
  }
  TRANSLATION: {
    Label lblTranslation=toolkit.createLabel(body,Messages.translationLabel,SWT.NONE);
    lblTranslation.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
    Text txtTranslation=toolkit.createText(body,null,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.WRAP);
    this.translationError.setControl(txtTranslation);
    txtTranslation.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    ((GridData)txtTranslation.getLayoutData()).verticalIndent+=((GridLayout)body.getLayout()).verticalSpacing;
    ((GridData)txtTranslation.getLayoutData()).heightHint=txtTranslation.getLineHeight() * 3;
    ((GridData)txtTranslation.getLayoutData()).widthHint=(int)(getParentShell().getSize().x * 0.8);
    if (isEditMode()) {
      txtTranslation.setText(this.translationBeingEdited.getTranslation());
    }
    txtTranslation.addModifyListener(new ModifyListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.ModifyListener#modifyText(org.eclipse.swt.events.ModifyEvent)
 */
      @Override public void modifyText(      ModifyEvent e){
        handleTranslationChanged(((Text)e.widget).getText());
      }
    }
);
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.forms.FormDialog#createFormContent(org.eclipse.ui.forms.IManagedForm)
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void createFormContent(IManagedForm managedForm){
  this.scrolledForm=managedForm.getForm();
  this.scrolledForm.setText(this.title);
  this.scrolledForm.setImage(Activator.getDefault().getImage(MED_EDITOR));
  this.scrolledForm.setMessage(Messages.translationDialogMsg,IMessageProvider.NONE);
  FormToolkit toolkit=managedForm.getToolkit();
  toolkit.decorateFormHeading(this.scrolledForm.getForm());
  Composite body=this.scrolledForm.getBody();
  body.setLayout(new GridLayout(2,false));
  final Control cbx;
  LOCALE: {
    Label lblLocale=toolkit.createLabel(body,Messages.localeLabel,SWT.NONE);
    lblLocale.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
    CCombo cbxLocales=new CCombo(body,COMBO_STYLE);
    this.localeError.setControl(cbxLocales);
    cbx=cbxLocales;
    toolkit.adapt(cbxLocales,true,false);
    cbxLocales.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    ((GridData)cbxLocales.getLayoutData()).widthHint=(int)(getParentShell().getSize().x * 0.8);
    ((GridData)cbxLocales.getLayoutData()).heightHint=cbxLocales.getItemHeight() + 4;
    final List<Locale> locales=new ArrayList<Locale>(Arrays.asList(Locale.getAvailableLocales()));
    Collections.sort(locales,ExtensionConstants.LOCALE_COMPARATOR);
    for (    Locale locale : locales) {
      cbxLocales.add(locale.getDisplayName());
    }
    if (isEditMode()) {
      String current=this.translationBeingEdited.getLocale().getDisplayName();
      int index=cbxLocales.indexOf(current);
      if (index != -1) {
        cbxLocales.select(index);
      }
    }
    cbxLocales.addSelectionListener(new SelectionAdapter(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
      @Override public void widgetSelected(      SelectionEvent e){
        int index=((CCombo)e.widget).getSelectionIndex();
        handleLocaleChanged(locales.get(index));
      }
    }
);
    cbxLocales.addKeyListener(new KeyListener(){
      @Override public void keyReleased(      KeyEvent e){
        if (e.keyCode == 13) {
          int index=((CCombo)e.widget).getSelectionIndex();
          handleLocaleChanged(locales.get(index));
        }
      }
      @Override public void keyPressed(      KeyEvent e){
      }
    }
);
    cbxLocales.addFocusListener(new FocusListener(){
      @Override public void focusLost(      FocusEvent e){
        int index=((CCombo)e.widget).getSelectionIndex();
        if (!locales.isEmpty() && index > 0 && index < locales.size()) {
          handleLocaleChanged(locales.get(index));
        }
      }
      @Override public void focusGained(      FocusEvent e){
      }
    }
);
    final LocaleProposalProvider proposalProvider=new LocaleProposalProvider(cbxLocales);
    proposalProvider.init();
  }
  TRANSLATION: {
    Label lblTranslation=toolkit.createLabel(body,Messages.translationLabel,SWT.NONE);
    lblTranslation.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
    Text txtTranslation=toolkit.createText(body,null,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.WRAP);
    this.translationError.setControl(txtTranslation);
    txtTranslation.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    ((GridData)txtTranslation.getLayoutData()).verticalIndent+=((GridLayout)body.getLayout()).verticalSpacing;
    ((GridData)txtTranslation.getLayoutData()).heightHint=txtTranslation.getLineHeight() * 3;
    ((GridData)txtTranslation.getLayoutData()).widthHint=(int)(getParentShell().getSize().x * 0.8);
    if (isEditMode()) {
      txtTranslation.setText(this.translationBeingEdited.getTranslation());
    }
    txtTranslation.addModifyListener(new ModifyListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.ModifyListener#modifyText(org.eclipse.swt.events.ModifyEvent)
 */
      @Override public void modifyText(      ModifyEvent e){
        handleTranslationChanged(((Text)e.widget).getText());
      }
    }
);
  }
}",0.9034637165810616
102147,"void chooseDdlFileFromWorkspace(){
  final ChooseFileDialog dlg=new ChooseFileDialog(DdlImporterUiI18n.CHOOSE_DDL_FILE_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_DDL_FILE_DIALOG_MSG,new ChooseFileDialogContentProvider(){
    @Override boolean validFile(    final IFile file){
      String ext=file.getFileExtension();
      if (ext == null)       return false;
      ext=ext.toLowerCase();
      return ""String_Node_Str"".equals(ext) || ""String_Node_Str"".equals(ext);
    }
  }
);
  final IPath choice=showChooseDialog(dlg);
  if (choice == null)   return;
  ddlFileCombo.setText(choice.toString());
  tabFromDdlFileCombo();
}","void chooseDdlFileFromWorkspace(){
  final ChooseFileDialog dlg=new ChooseFileDialog(DdlImporterUiI18n.CHOOSE_DDL_FILE_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_DDL_FILE_DIALOG_MSG,new ChooseFileDialogContentProvider(){
    @Override boolean validFile(    final IFile file){
      String ext=file.getFileExtension();
      if (ext == null)       return false;
      ext=ext.toLowerCase();
      return ""String_Node_Str"".equals(ext) || ""String_Node_Str"".equals(ext);
    }
  }
);
  final IResource choice=showChooseDialog(dlg);
  if (choice == null)   return;
  ddlFileCombo.setText(choice.getFullPath().removeFileExtension().toString());
  tabFromDdlFileCombo();
}",0.9625
102148,"void chooseModel(){
  final ChooseFileDialog dlg=new ChooseFileDialog(DdlImporterUiI18n.CHOOSE_MODEL_FILE_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_MODEL_FILE_DIALOG_MSG,new ChooseFileDialogContentProvider(){
    @Override boolean validFile(    final IFile file){
      return relationalModel(file);
    }
  }
);
  if (importer.modelFile() != null)   dlg.setInitialSelection(importer.modelFile());
  final IPath choice=showChooseDialog(dlg);
  if (choice == null)   return;
  ddlFileCombo.setText(choice.removeFileExtension().lastSegment());
}","void chooseModel(){
  final ChooseFileDialog dlg=new ChooseFileDialog(DdlImporterUiI18n.CHOOSE_MODEL_FILE_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_MODEL_FILE_DIALOG_MSG,new ChooseFileDialogContentProvider(){
    @Override boolean validFile(    final IFile file){
      return relationalModel(file);
    }
  }
);
  if (importer.modelFile() != null)   dlg.setInitialSelection(importer.modelFile());
  final IResource choice=showChooseDialog(dlg);
  if (choice == null)   return;
  this.modelNameFld.setText(choice.getFullPath().removeFileExtension().lastSegment().toString());
  IPath folder=choice.getFullPath().removeLastSegments(1);
  this.modelFolderFld.setText(folder.toString());
}",0.8566748566748567
102149,"void chooseModelFolder(){
  final ChooseDialog dlg=new ChooseDialog(DdlImporterUiI18n.CHOOSE_MODEL_FOLDER_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_MODEL_FOLDER_DIALOG_MSG,new ChooseDialogContentProvider(){
    @Override public final IResource[] getChildren(    final IContainer container){
      final List<IResource> children=new ArrayList<IResource>();
      try {
        for (        final IResource resource : container.members())         if (resource instanceof IContainer)         children.add(resource);
      }
 catch (      final CoreException error) {
        throw CoreModelerPlugin.toRuntimeException(error);
      }
      return children.toArray(new IResource[children.size()]);
    }
    @Override public final boolean hasChildren(    final IContainer container){
      try {
        for (        final IResource resource : container.members())         if (resource instanceof IContainer)         return true;
      }
 catch (      final CoreException error) {
        throw CoreModelerPlugin.toRuntimeException(error);
      }
      return false;
    }
  }
);
  if (importer.modelFolder() != null)   dlg.setInitialSelection(importer.modelFolder());
  final IPath choice=showChooseDialog(dlg);
  if (choice == null)   return;
  modelFolderFld.setText(choice.toString());
  modelNameFld.setFocus();
}","void chooseModelFolder(){
  final ChooseDialog dlg=new ChooseDialog(DdlImporterUiI18n.CHOOSE_MODEL_FOLDER_DIALOG_TITLE,DdlImporterUiI18n.CHOOSE_MODEL_FOLDER_DIALOG_MSG,new ChooseDialogContentProvider(){
    @Override public final IResource[] getChildren(    final IContainer container){
      final List<IResource> children=new ArrayList<IResource>();
      try {
        for (        final IResource resource : container.members())         if (resource instanceof IContainer)         children.add(resource);
      }
 catch (      final CoreException error) {
        throw CoreModelerPlugin.toRuntimeException(error);
      }
      return children.toArray(new IResource[children.size()]);
    }
    @Override public final boolean hasChildren(    final IContainer container){
      try {
        for (        final IResource resource : container.members())         if (resource instanceof IContainer)         return true;
      }
 catch (      final CoreException error) {
        throw CoreModelerPlugin.toRuntimeException(error);
      }
      return false;
    }
  }
);
  if (importer.modelFolder() != null)   dlg.setInitialSelection(importer.modelFolder());
  final IResource choice=showChooseDialog(dlg);
  if (choice == null)   return;
  modelFolderFld.setText(choice.getFullPath().toString());
  modelNameFld.setFocus();
}",0.9901515151515152
102150,"private IPath showChooseDialog(final ElementTreeSelectionDialog dialog){
  return dialog.open() == Window.OK ? ((IResource)dialog.getFirstResult()).getLocation() : null;
}","private IResource showChooseDialog(final ElementTreeSelectionDialog dialog){
  return dialog.open() == Window.OK ? ((IResource)dialog.getFirstResult()) : null;
}",0.9216867469879518
102151,"/** 
 * @see org.teiid.core.designer.event.EventObjectListener#processEvent(java.util.EventObject)
 * @since 4.2
 */
@Override public void processEvent(EventObject obj){
  ModelResourceEvent event=(ModelResourceEvent)obj;
  if (ModelIdentifier.isFunctionModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          registerFunctionModel(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          registerFunctionModel(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          registerFunctionModel(event.getModelResource(),true);
          registerFunctionModel(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
 else   if (ModelIdentifier.isRelationalSourceModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          notifySourceModelChanged(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          notifySourceModelChanged(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          notifySourceModelChanged(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
}","/** 
 * @see org.teiid.core.designer.event.EventObjectListener#processEvent(java.util.EventObject)
 * @since 4.2
 */
@Override public void processEvent(EventObject obj){
  ModelResourceEvent event=(ModelResourceEvent)obj;
  if (ModelIdentifier.isFunctionModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          registerFunctionModel(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          registerFunctionModel(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          registerFunctionModel(event.getModelResource(),true);
          registerFunctionModel(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
 else   if (ModelIdentifier.isRelationalSourceModel(event.getModelResource()) || ModelIdentifier.isRelationalViewModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          notifySourceModelChanged(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          notifySourceModelChanged(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          notifySourceModelChanged(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
}",0.986142709410548
102152,"/** 
 * Get the FunctionLibrary
 * @return the FunctionLibrary
 */
public synchronized IFunctionLibrary<IFunctionForm,IFunctionDescriptor> getFunctionLibrary(){
  if (!changed && this.cachedFunctionLibrary != null) {
    return this.cachedFunctionLibrary;
  }
  List<FunctionMethodDescriptor> functionMethodDescriptors=new ArrayList<FunctionMethodDescriptor>();
  for (  ModelResource functionModelResource : functionModels) {
    ScalarFunction[] functions=getScalarFunctions(functionModelResource);
    if (functions.length == 0)     continue;
    IMarker[] markers=getMarkers(functionModelResource);
    String schema=FileUtils.getFilenameWithoutExtension(functionModelResource.getItemName());
    for (    ScalarFunction function : functions) {
      if (!isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource) || function.getReturnParameter() == null || !isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(function);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      Object inputParam : function.getInputParameters()) {
        if (inputParam instanceof org.teiid.designer.metamodels.function.FunctionParameter) {
          org.teiid.designer.metamodels.function.FunctionParameter param=(org.teiid.designer.metamodels.function.FunctionParameter)inputParam;
          fParams.add(new FunctionParameterDescriptor(param.getName(),param.getType()));
          if (!functionPamameterHasError && !isFunctionObjectErrorFree(param,markers,functionModelResource)) {
            functionPamameterHasError=true;
          }
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String returnParamName=ModelerCore.getModelEditor().getName(function.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,function.getReturnParameter().getType());
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(function,function.getName(),description,function.getCategory(),function.getInvocationClass(),function.getInvocationMethod(),fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(function.getPushDown().getLiteral());
      fMethodDescriptor.setDeterministic(function.isDeterministic());
      boolean varArgs=false;
      String propValue=FunctionPlugin.getExtensionProperty(function,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  for (  ModelResource sourceModel : getRelationalModels()) {
    IMarker[] markers=getMarkers(sourceModel);
    String schema=FileUtils.getFilenameWithoutExtension(sourceModel.getItemName());
    for (    Procedure procedure : getFunctions(sourceModel)) {
      boolean isPhysical=ModelUtil.isPhysical(procedure);
      ProcedureWrapper wrappedProcedure=new ProcedureWrapper(procedure);
      if (!isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel) || wrappedProcedure.getReturnParameter() == null || !isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(procedure);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      ProcedureParameter inputParam : wrappedProcedure.getInputParameters()) {
        String dTypeName=ModelerCore.getModelEditor().getName(inputParam.getType());
        fParams.add(new FunctionParameterDescriptor(inputParam.getName(),dTypeName));
        if (!functionPamameterHasError && !isFunctionObjectErrorFree(inputParam,markers,sourceModel)) {
          functionPamameterHasError=true;
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String dTypeName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter().getType());
      String returnParamName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,dTypeName);
      String category=wrappedProcedure.getCategory();
      String javaClass=wrappedProcedure.getJavaClass();
      String javaMethod=wrappedProcedure.getJavaMethod();
      boolean javaClassAndMethodEmpty=(javaClass == null && javaMethod == null) ? true : false;
      if (isPhysical && javaClassAndMethodEmpty) {
        category=sourceModel.getItemName();
        if (category.endsWith(""String_Node_Str"")) {
          category=category.replaceAll(""String_Node_Str"",StringUtilities.EMPTY_STRING);
        }
      }
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(procedure,wrappedProcedure.getName(),description,category,javaClass,javaMethod,fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(Boolean.toString(true));
      fMethodDescriptor.setDeterministic(wrappedProcedure.isDeterministic());
      boolean varArgs=false;
      String propValue=RelationalPlugin.getExtensionProperty(procedure,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  IQueryService queryService=ModelerCore.getTeiidQueryService();
  this.cachedFunctionLibrary=queryService.createFunctionLibrary(functionMethodDescriptors);
  this.changed=false;
  return this.cachedFunctionLibrary;
}","/** 
 * Get the FunctionLibrary
 * @return the FunctionLibrary
 */
public synchronized IFunctionLibrary<IFunctionForm,IFunctionDescriptor> getFunctionLibrary(){
  if (!changed && this.cachedFunctionLibrary != null) {
    return this.cachedFunctionLibrary;
  }
  List<FunctionMethodDescriptor> functionMethodDescriptors=new ArrayList<FunctionMethodDescriptor>();
  for (  ModelResource functionModelResource : functionModels) {
    ScalarFunction[] functions=getScalarFunctions(functionModelResource);
    if (functions.length == 0)     continue;
    IMarker[] markers=getMarkers(functionModelResource);
    String schema=FileUtils.getFilenameWithoutExtension(functionModelResource.getItemName());
    for (    ScalarFunction function : functions) {
      if (!isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource) || function.getReturnParameter() == null || !isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(function);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      Object inputParam : function.getInputParameters()) {
        if (inputParam instanceof org.teiid.designer.metamodels.function.FunctionParameter) {
          org.teiid.designer.metamodels.function.FunctionParameter param=(org.teiid.designer.metamodels.function.FunctionParameter)inputParam;
          fParams.add(new FunctionParameterDescriptor(param.getName(),param.getType()));
          if (!functionPamameterHasError && !isFunctionObjectErrorFree(param,markers,functionModelResource)) {
            functionPamameterHasError=true;
          }
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String returnParamName=ModelerCore.getModelEditor().getName(function.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,function.getReturnParameter().getType());
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(function,function.getName(),description,function.getCategory(),function.getInvocationClass(),function.getInvocationMethod(),fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(function.getPushDown().getLiteral());
      fMethodDescriptor.setDeterministic(function.isDeterministic());
      boolean varArgs=false;
      String propValue=FunctionPlugin.getExtensionProperty(function,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  for (  ModelResource sourceModel : getRelationalModels()) {
    IMarker[] markers=getMarkers(sourceModel);
    String schema=FileUtils.getFilenameWithoutExtension(sourceModel.getItemName());
    for (    Procedure procedure : getFunctions(sourceModel)) {
      boolean isPhysical=ModelUtil.isPhysical(procedure);
      ProcedureWrapper wrappedProcedure=new ProcedureWrapper(procedure);
      if (!isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel) || wrappedProcedure.getReturnParameter() == null || !isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(procedure);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      ProcedureParameter inputParam : wrappedProcedure.getInputParameters()) {
        String dTypeName=ModelerCore.getModelEditor().getName(inputParam.getType());
        fParams.add(new FunctionParameterDescriptor(inputParam.getName(),dTypeName));
        if (!functionPamameterHasError && !isFunctionObjectErrorFree(inputParam,markers,sourceModel)) {
          functionPamameterHasError=true;
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String dTypeName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter().getType());
      String returnParamName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,dTypeName);
      String category=wrappedProcedure.getCategory();
      String javaClass=wrappedProcedure.getJavaClass();
      String javaMethod=wrappedProcedure.getJavaMethod();
      boolean javaClassAndMethodEmpty=(javaClass == null && javaMethod == null) ? true : false;
      boolean isPushdown=false;
      if (isPhysical && javaClassAndMethodEmpty) {
        isPushdown=true;
        category=sourceModel.getItemName();
        if (category.endsWith(""String_Node_Str"")) {
          category=category.replaceAll(""String_Node_Str"",StringUtilities.EMPTY_STRING);
        }
      }
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(procedure,wrappedProcedure.getName(),description,category,javaClass,javaMethod,fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      if (isPushdown) {
        fMethodDescriptor.setPushDown(Boolean.toString(true));
      }
      fMethodDescriptor.setDeterministic(wrappedProcedure.isDeterministic());
      boolean varArgs=false;
      String propValue=RelationalPlugin.getExtensionProperty(procedure,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  IQueryService queryService=ModelerCore.getTeiidQueryService();
  this.cachedFunctionLibrary=queryService.createFunctionLibrary(functionMethodDescriptors);
  this.changed=false;
  return this.cachedFunctionLibrary;
}",0.9928057553956836
102153,"/** 
 * Get string representation of the value for the modelObject for the indexed property.
 * @param index the column index
 * @return the value object
 */
public final Object getValue(int index){
  if (modelObject.eIsProxy()) {
    return null;
  }
  Object result=null;
  Object propertyId=tableModel.getPropertyIdAtIndex(index);
  if (tableModel.isLocationColumn(propertyId)) {
    EObject container=modelObject.eContainer();
    if (container != null) {
      result=ModelUtilities.getEMFLabelProvider().getText(modelObject.eContainer());
    }
 else {
      result=ModelUtilities.getModelName(modelObject);
    }
  }
 else   if (tableModel.isDescriptionColumn(propertyId)) {
    result=ModelObjectUtilities.getDescription(modelObject);
  }
 else {
    IPropertyDescriptor descriptor=getPropertyDescriptor(propertyId);
    if (descriptor != null) {
      if (propertyId instanceof ModelExtensionPropertyDescriptor) {
        propertyId=descriptor.getId();
      }
      result=descriptor.getLabelProvider().getText(propertySource.getPropertyValue(propertyId));
    }
  }
  return result;
}","/** 
 * Get string representation of the value for the modelObject for the indexed property.
 * @param index the column index
 * @return the value object
 */
public final Object getValue(int index){
  if (modelObject.eIsProxy()) {
    return null;
  }
  Object result=null;
  Object propertyId=tableModel.getPropertyIdAtIndex(index);
  if (tableModel.isLocationColumn(propertyId)) {
    EObject container=modelObject.eContainer();
    if (container != null) {
      result=ModelUtilities.getEMFLabelProvider().getText(modelObject.eContainer());
    }
 else {
      try {
        ModelResource mr=ModelUtilities.getModelResource(modelObject);
        if (mr != null && mr.getCorrespondingResource() != null) {
          result=ModelUtilities.getModelName(modelObject);
        }
      }
 catch (      ModelWorkspaceException ex) {
        String message=""String_Node_Str"";
        UiConstants.Util.log(IStatus.ERROR,ex,message);
      }
    }
  }
 else   if (tableModel.isDescriptionColumn(propertyId)) {
    result=ModelObjectUtilities.getDescription(modelObject);
  }
 else {
    IPropertyDescriptor descriptor=getPropertyDescriptor(propertyId);
    if (descriptor != null) {
      if (propertyId instanceof ModelExtensionPropertyDescriptor) {
        propertyId=descriptor.getId();
      }
      result=descriptor.getLabelProvider().getText(propertySource.getPropertyValue(propertyId));
    }
  }
  return result;
}",0.8240445859872612
102154,"/** 
 * @see org.teiid.core.designer.event.EventObjectListener#processEvent(java.util.EventObject)
 * @since 4.2
 */
@Override public void processEvent(EventObject obj){
  ModelResourceEvent event=(ModelResourceEvent)obj;
  if (ModelIdentifier.isFunctionModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          registerFunctionModel(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          registerFunctionModel(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          registerFunctionModel(event.getModelResource(),true);
          registerFunctionModel(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
 else   if (ModelIdentifier.isRelationalSourceModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          notifySourceModelChanged(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          notifySourceModelChanged(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          notifySourceModelChanged(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
}","/** 
 * @see org.teiid.core.designer.event.EventObjectListener#processEvent(java.util.EventObject)
 * @since 4.2
 */
@Override public void processEvent(EventObject obj){
  ModelResourceEvent event=(ModelResourceEvent)obj;
  if (ModelIdentifier.isFunctionModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          registerFunctionModel(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          registerFunctionModel(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          registerFunctionModel(event.getModelResource(),true);
          registerFunctionModel(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
 else   if (ModelIdentifier.isRelationalSourceModel(event.getModelResource()) || ModelIdentifier.isRelationalViewModel(event.getModelResource())) {
    try {
      IFile file=(IFile)event.getModelResource().getCorrespondingResource();
      final IPath path=ModelUtil.getLocation(file);
      if (path != null) {
        if (event.getType() == ModelResourceEvent.RELOADED || event.getType() == ModelResourceEvent.ADDED) {
          if (!event.getModelResource().isOpen()) {
            event.getModelResource().open(new NullProgressMonitor());
          }
          notifySourceModelChanged(event.getModelResource(),false);
        }
 else         if (event.getType() == ModelResourceEvent.REMOVED) {
          notifySourceModelChanged(event.getModelResource(),true);
        }
 else         if (event.getType() == ModelResourceEvent.CHANGED) {
          notifySourceModelChanged(event.getModelResource(),false);
        }
      }
 else {
        UdfUiPlugin.UTIL.log(IStatus.ERROR,""String_Node_Str"" + event.getModelResource().getItemName());
      }
    }
 catch (    Exception ex) {
      UdfUiPlugin.UTIL.log(ex);
    }
  }
}",0.986142709410548
102155,"/** 
 * Get the FunctionLibrary
 * @return the FunctionLibrary
 */
public synchronized IFunctionLibrary<IFunctionForm,IFunctionDescriptor> getFunctionLibrary(){
  if (!changed && this.cachedFunctionLibrary != null) {
    return this.cachedFunctionLibrary;
  }
  List<FunctionMethodDescriptor> functionMethodDescriptors=new ArrayList<FunctionMethodDescriptor>();
  for (  ModelResource functionModelResource : functionModels) {
    ScalarFunction[] functions=getScalarFunctions(functionModelResource);
    if (functions.length == 0)     continue;
    IMarker[] markers=getMarkers(functionModelResource);
    String schema=FileUtils.getFilenameWithoutExtension(functionModelResource.getItemName());
    for (    ScalarFunction function : functions) {
      if (!isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource) || function.getReturnParameter() == null || !isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(function);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      Object inputParam : function.getInputParameters()) {
        if (inputParam instanceof org.teiid.designer.metamodels.function.FunctionParameter) {
          org.teiid.designer.metamodels.function.FunctionParameter param=(org.teiid.designer.metamodels.function.FunctionParameter)inputParam;
          fParams.add(new FunctionParameterDescriptor(param.getName(),param.getType()));
          if (!functionPamameterHasError && !isFunctionObjectErrorFree(param,markers,functionModelResource)) {
            functionPamameterHasError=true;
          }
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String returnParamName=ModelerCore.getModelEditor().getName(function.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,function.getReturnParameter().getType());
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(function,function.getName(),description,function.getCategory(),function.getInvocationClass(),function.getInvocationMethod(),fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(function.getPushDown().getLiteral());
      fMethodDescriptor.setDeterministic(function.isDeterministic());
      boolean varArgs=false;
      String propValue=FunctionPlugin.getExtensionProperty(function,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  for (  ModelResource sourceModel : getRelationalModels()) {
    IMarker[] markers=getMarkers(sourceModel);
    String schema=FileUtils.getFilenameWithoutExtension(sourceModel.getItemName());
    for (    Procedure procedure : getFunctions(sourceModel)) {
      boolean isPhysical=ModelUtil.isPhysical(procedure);
      ProcedureWrapper wrappedProcedure=new ProcedureWrapper(procedure);
      if (!isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel) || wrappedProcedure.getReturnParameter() == null || !isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(procedure);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      ProcedureParameter inputParam : wrappedProcedure.getInputParameters()) {
        String dTypeName=ModelerCore.getModelEditor().getName(inputParam.getType());
        fParams.add(new FunctionParameterDescriptor(inputParam.getName(),dTypeName));
        if (!functionPamameterHasError && !isFunctionObjectErrorFree(inputParam,markers,sourceModel)) {
          functionPamameterHasError=true;
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String dTypeName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter().getType());
      String returnParamName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,dTypeName);
      String category=wrappedProcedure.getCategory();
      String javaClass=wrappedProcedure.getJavaClass();
      String javaMethod=wrappedProcedure.getJavaMethod();
      boolean javaClassAndMethodEmpty=(javaClass == null && javaMethod == null) ? true : false;
      if (isPhysical && javaClassAndMethodEmpty) {
        category=sourceModel.getItemName();
        if (category.endsWith(""String_Node_Str"")) {
          category=category.replaceAll(""String_Node_Str"",StringUtilities.EMPTY_STRING);
        }
      }
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(procedure,wrappedProcedure.getName(),description,category,javaClass,javaMethod,fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(Boolean.toString(true));
      fMethodDescriptor.setDeterministic(wrappedProcedure.isDeterministic());
      boolean varArgs=false;
      String propValue=RelationalPlugin.getExtensionProperty(procedure,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  IQueryService queryService=ModelerCore.getTeiidQueryService();
  this.cachedFunctionLibrary=queryService.createFunctionLibrary(functionMethodDescriptors);
  this.changed=false;
  return this.cachedFunctionLibrary;
}","/** 
 * Get the FunctionLibrary
 * @return the FunctionLibrary
 */
public synchronized IFunctionLibrary<IFunctionForm,IFunctionDescriptor> getFunctionLibrary(){
  if (!changed && this.cachedFunctionLibrary != null) {
    return this.cachedFunctionLibrary;
  }
  List<FunctionMethodDescriptor> functionMethodDescriptors=new ArrayList<FunctionMethodDescriptor>();
  for (  ModelResource functionModelResource : functionModels) {
    ScalarFunction[] functions=getScalarFunctions(functionModelResource);
    if (functions.length == 0)     continue;
    IMarker[] markers=getMarkers(functionModelResource);
    String schema=FileUtils.getFilenameWithoutExtension(functionModelResource.getItemName());
    for (    ScalarFunction function : functions) {
      if (!isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource) || function.getReturnParameter() == null || !isFunctionObjectErrorFree(function.getReturnParameter(),markers,functionModelResource)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(function);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      Object inputParam : function.getInputParameters()) {
        if (inputParam instanceof org.teiid.designer.metamodels.function.FunctionParameter) {
          org.teiid.designer.metamodels.function.FunctionParameter param=(org.teiid.designer.metamodels.function.FunctionParameter)inputParam;
          fParams.add(new FunctionParameterDescriptor(param.getName(),param.getType()));
          if (!functionPamameterHasError && !isFunctionObjectErrorFree(param,markers,functionModelResource)) {
            functionPamameterHasError=true;
          }
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String returnParamName=ModelerCore.getModelEditor().getName(function.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,function.getReturnParameter().getType());
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(function,function.getName(),description,function.getCategory(),function.getInvocationClass(),function.getInvocationMethod(),fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      fMethodDescriptor.setPushDown(function.getPushDown().getLiteral());
      fMethodDescriptor.setDeterministic(function.isDeterministic());
      boolean varArgs=false;
      String propValue=FunctionPlugin.getExtensionProperty(function,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  for (  ModelResource sourceModel : getRelationalModels()) {
    IMarker[] markers=getMarkers(sourceModel);
    String schema=FileUtils.getFilenameWithoutExtension(sourceModel.getItemName());
    for (    Procedure procedure : getFunctions(sourceModel)) {
      boolean isPhysical=ModelUtil.isPhysical(procedure);
      ProcedureWrapper wrappedProcedure=new ProcedureWrapper(procedure);
      if (!isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel) || wrappedProcedure.getReturnParameter() == null || !isFunctionObjectErrorFree(wrappedProcedure.getReturnParameter(),markers,sourceModel)) {
        continue;
      }
      String description=null;
      try {
        description=ModelerCore.getModelEditor().getDescription(procedure);
      }
 catch (      ModelerCoreException ex) {
        UdfPlugin.UTIL.log(ex);
      }
      boolean functionPamameterHasError=false;
      Collection<FunctionParameterDescriptor> fParams=new ArrayList<FunctionParameterDescriptor>();
      for (      ProcedureParameter inputParam : wrappedProcedure.getInputParameters()) {
        String dTypeName=ModelerCore.getModelEditor().getName(inputParam.getType());
        fParams.add(new FunctionParameterDescriptor(inputParam.getName(),dTypeName));
        if (!functionPamameterHasError && !isFunctionObjectErrorFree(inputParam,markers,sourceModel)) {
          functionPamameterHasError=true;
        }
      }
      if (functionPamameterHasError) {
        continue;
      }
      String dTypeName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter().getType());
      String returnParamName=ModelerCore.getModelEditor().getName(wrappedProcedure.getReturnParameter());
      FunctionParameterDescriptor outputParam=new FunctionParameterDescriptor(returnParamName,dTypeName);
      String category=wrappedProcedure.getCategory();
      String javaClass=wrappedProcedure.getJavaClass();
      String javaMethod=wrappedProcedure.getJavaMethod();
      boolean javaClassAndMethodEmpty=(javaClass == null && javaMethod == null) ? true : false;
      boolean isPushdown=false;
      if (isPhysical && javaClassAndMethodEmpty) {
        isPushdown=true;
        category=sourceModel.getItemName();
        if (category.endsWith(""String_Node_Str"")) {
          category=category.replaceAll(""String_Node_Str"",StringUtilities.EMPTY_STRING);
        }
      }
      FunctionMethodDescriptor fMethodDescriptor=new FunctionMethodDescriptor(procedure,wrappedProcedure.getName(),description,category,javaClass,javaMethod,fParams.toArray(new FunctionParameterDescriptor[0]),outputParam,schema);
      if (isPushdown) {
        fMethodDescriptor.setPushDown(Boolean.toString(true));
      }
      fMethodDescriptor.setDeterministic(wrappedProcedure.isDeterministic());
      boolean varArgs=false;
      String propValue=RelationalPlugin.getExtensionProperty(procedure,""String_Node_Str"");
      if (propValue != null && propValue.length() > 0) {
        varArgs=Boolean.parseBoolean(propValue);
      }
      fMethodDescriptor.setVariableArgs(varArgs);
      functionMethodDescriptors.add(fMethodDescriptor);
    }
  }
  IQueryService queryService=ModelerCore.getTeiidQueryService();
  this.cachedFunctionLibrary=queryService.createFunctionLibrary(functionMethodDescriptors);
  this.changed=false;
  return this.cachedFunctionLibrary;
}",0.9928057553956836
102156,"/** 
 * Get string representation of the value for the modelObject for the indexed property.
 * @param index the column index
 * @return the value object
 */
public final Object getValue(int index){
  if (modelObject.eIsProxy()) {
    return null;
  }
  Object result=null;
  Object propertyId=tableModel.getPropertyIdAtIndex(index);
  if (tableModel.isLocationColumn(propertyId)) {
    EObject container=modelObject.eContainer();
    if (container != null) {
      result=ModelUtilities.getEMFLabelProvider().getText(modelObject.eContainer());
    }
 else {
      result=ModelUtilities.getModelName(modelObject);
    }
  }
 else   if (tableModel.isDescriptionColumn(propertyId)) {
    result=ModelObjectUtilities.getDescription(modelObject);
  }
 else {
    IPropertyDescriptor descriptor=getPropertyDescriptor(propertyId);
    if (descriptor != null) {
      if (propertyId instanceof ModelExtensionPropertyDescriptor) {
        propertyId=descriptor.getId();
      }
      result=descriptor.getLabelProvider().getText(propertySource.getPropertyValue(propertyId));
    }
  }
  return result;
}","/** 
 * Get string representation of the value for the modelObject for the indexed property.
 * @param index the column index
 * @return the value object
 */
public final Object getValue(int index){
  if (modelObject.eIsProxy()) {
    return null;
  }
  Object result=null;
  Object propertyId=tableModel.getPropertyIdAtIndex(index);
  if (tableModel.isLocationColumn(propertyId)) {
    EObject container=modelObject.eContainer();
    if (container != null) {
      result=ModelUtilities.getEMFLabelProvider().getText(modelObject.eContainer());
    }
 else {
      try {
        ModelResource mr=ModelUtilities.getModelResource(modelObject);
        if (mr != null && mr.getCorrespondingResource() != null) {
          result=ModelUtilities.getModelName(modelObject);
        }
      }
 catch (      ModelWorkspaceException ex) {
        String message=""String_Node_Str"";
        UiConstants.Util.log(IStatus.ERROR,ex,message);
      }
    }
  }
 else   if (tableModel.isDescriptionColumn(propertyId)) {
    result=ModelObjectUtilities.getDescription(modelObject);
  }
 else {
    IPropertyDescriptor descriptor=getPropertyDescriptor(propertyId);
    if (descriptor != null) {
      if (propertyId instanceof ModelExtensionPropertyDescriptor) {
        propertyId=descriptor.getId();
      }
      result=descriptor.getLabelProvider().getText(propertySource.getPropertyValue(propertyId));
    }
  }
  return result;
}",0.8240445859872612
102157,"/** 
 * Extract an   {@link URL} from the given {@link IConnectionProfile} usingthe given property key and test its connectivity. <p> If the URL requires authentication then the authentication security type, username and password will all be extracted from the {@link IConnectionProfile}. Thus, the values for the authentication should be stored in the connection profile using the keys from  {@link ICredentialsCommon}.
 * @param connectionProfile
 * @param propertyKey
 * @return
 */
public static Exception testURLConnection(IConnectionProfile connectionProfile,final String propertyKey){
  Properties connProperties=connectionProfile.getBaseProperties();
  String xmlFile=connProperties == null ? null : (String)connProperties.get(propertyKey);
  try {
    URL url=URLHelper.buildURL(xmlFile);
    String securityType=connProperties.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
    boolean resolved=false;
    Map<String,String> connPropMap=new HashMap<String,String>();
    connPropMap.put(""String_Node_Str"",""String_Node_Str"");
    if (securityType == null || SecurityType.None.name().equals(securityType)) {
      resolved=URLHelper.resolveUrl(url,null,null,connPropMap,true);
    }
 else {
      String userName=connProperties.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
      String password=connProperties.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
      resolved=URLHelper.resolveUrl(url,userName,password,connPropMap,true);
    }
    if (!resolved) {
      throw new Exception(DatatoolsUiConstants.UTIL.getString(""String_Node_Str""));
    }
  }
 catch (  Exception ex) {
    return ex;
  }
  return null;
}","/** 
 * Extract an   {@link URL} from the given {@link IConnectionProfile} usingthe given property key and test its connectivity. <p> If the URL requires authentication then the authentication security type, username and password will all be extracted from the {@link IConnectionProfile}. Thus, the values for the authentication should be stored in the connection profile using the keys from  {@link ICredentialsCommon}.
 * @param connectionProfile
 * @param propertyKey
 * @return
 */
public static Exception testURLConnection(IConnectionProfile connectionProfile,final String propertyKey){
  Properties connProperties=connectionProfile.getBaseProperties();
  String xmlFile=connProperties == null ? null : (String)connProperties.get(propertyKey);
  try {
    URL url=URLHelper.buildURL(xmlFile);
    String securityType=connProperties.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
    boolean resolved=false;
    Map<String,String> connPropMap=new HashMap<String,String>();
    connPropMap.put(""String_Node_Str"",""String_Node_Str"");
    connPropMap.put(""String_Node_Str"",""String_Node_Str"");
    if (securityType == null || SecurityType.None.name().equals(securityType)) {
      resolved=URLHelper.resolveUrl(url,null,null,connPropMap,true);
    }
 else {
      String userName=connProperties.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
      String password=connProperties.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
      resolved=URLHelper.resolveUrl(url,userName,password,connPropMap,true);
    }
    if (!resolved) {
      throw new Exception(DatatoolsUiConstants.UTIL.getString(""String_Node_Str""));
    }
  }
 catch (  Exception ex) {
    return ex;
  }
  return null;
}",0.9825616355983164
102158,"private File getXmlFileFromRestUrl(IConnectionProfile profile){
  Properties props=profile.getBaseProperties();
  String endpoint=ConnectionInfoHelper.readEndPointProperty(props);
  String username=(String)props.get(ICredentialsCommon.USERNAME_PROP_ID);
  String password=(String)props.get(ICredentialsCommon.PASSWORD_PROP_ID);
  File xmlFile=null;
  FileOutputStream fos=null;
  try {
    final URL url=new URL(endpoint);
    final HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
    String filePath=formatPath(url);
    if (username != null && !username.isEmpty()) {
      httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Base64.encodeBytes((username + ':' + password).getBytes()));
    }
    httpConn.setDoOutput(true);
    httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    InputStream is=httpConn.getInputStream();
    xmlFile=File.createTempFile(CoreStringUtil.createFileName(filePath),DOT_XML_LOWER);
    FileOutputStream os=new FileOutputStream(xmlFile);
    write(os,is);
  }
 catch (  MalformedURLException ex) {
    throw new RuntimeException(ex);
  }
catch (  ProtocolException ex) {
    throw new RuntimeException(ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
 finally {
    try {
      if (fos != null) {
        fos.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return xmlFile;
}","private File getXmlFileFromRestUrl(IConnectionProfile profile){
  Properties props=profile.getBaseProperties();
  String endpoint=ConnectionInfoHelper.readEndPointProperty(props);
  String username=(String)props.get(ICredentialsCommon.USERNAME_PROP_ID);
  String password=(String)props.get(ICredentialsCommon.PASSWORD_PROP_ID);
  File xmlFile=null;
  FileOutputStream fos=null;
  try {
    final URL url=new URL(endpoint);
    final HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
    String filePath=formatPath(url);
    if (username != null && !username.isEmpty()) {
      httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Base64.encodeBytes((username + ':' + password).getBytes()));
    }
    httpConn.setDoOutput(true);
    httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    InputStream is=httpConn.getInputStream();
    xmlFile=File.createTempFile(CoreStringUtil.createFileName(filePath),DOT_XML_LOWER);
    FileOutputStream os=new FileOutputStream(xmlFile);
    write(os,is);
  }
 catch (  MalformedURLException ex) {
    throw new RuntimeException(ex);
  }
catch (  ProtocolException ex) {
    throw new RuntimeException(ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
 finally {
    try {
      if (fos != null) {
        fos.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return xmlFile;
}",0.976027397260274
102159,"/** 
 */
public void refreshModelDetails(){
  if (selectedVdbModelEntry == null) {
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
    bindingsViewer.getTable().removeAll();
    multiSourceCB.setEnabled(false);
    addColumnCB.setEnabled(false);
    columnAliasText.setEnabled(false);
    addButton.setEnabled(false);
    deleteButton.setEnabled(false);
    columnAliaslabel.setEnabled(false);
    columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  }
 else {
    modelNameText.setText(selectedVdbModelEntry.getName().lastSegment());
    modelLocationText.setText(selectedVdbModelEntry.getName().removeLastSegments(1).toString());
    modelDescriptionEditor.setText(selectedVdbModelEntry.getDescription());
    bindingsViewer.getTable().removeAll();
    for (    VdbSource vdbSource : selectedVdbModelEntry.getSourceInfo().getSources()) {
      bindingsViewer.add(vdbSource);
    }
    boolean enable=selectedVdbModelEntry.getSourceInfo().isMultiSource();
    multiSourceCB.setEnabled(true);
    multiSourceCB.setSelection(enable);
    addColumnCB.setEnabled(enable);
    columnAliasText.setEnabled(enable);
    addButton.setEnabled(enable);
    deleteButton.setEnabled(selectedVdbModelEntry.getSourceInfo().getSourceCount() > 1);
    columnAliaslabel.setEnabled(enable);
    if (enable) {
      columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    }
 else {
      columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
    }
  }
}","/** 
 */
public void refreshModelDetails(){
  if (selectedVdbModelEntry == null) {
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
    bindingsViewer.getTable().removeAll();
    multiSourceCB.setEnabled(false);
    addColumnCB.setEnabled(false);
    columnAliasText.setEnabled(false);
    addButton.setEnabled(false);
    deleteButton.setEnabled(false);
    columnAliaslabel.setEnabled(false);
    columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  }
 else {
    modelNameText.setText(selectedVdbModelEntry.getName().lastSegment());
    modelLocationText.setText(selectedVdbModelEntry.getName().removeLastSegments(1).toString());
    modelDescriptionEditor.setText(selectedVdbModelEntry.getDescription());
    bindingsViewer.getTable().removeAll();
    for (    VdbSource vdbSource : selectedVdbModelEntry.getSourceInfo().getSources()) {
      bindingsViewer.add(vdbSource);
    }
    boolean enable=selectedVdbModelEntry.getSourceInfo().isMultiSource();
    multiSourceCB.setEnabled(true);
    multiSourceCB.setSelection(enable);
    addColumnCB.setEnabled(enable);
    columnAliasText.setEnabled(enable);
    addButton.setEnabled(enable);
    deleteButton.setEnabled(selectedVdbModelEntry.getSourceInfo().getSourceCount() > 1 && !bindingsViewer.getSelection().isEmpty());
    columnAliaslabel.setEnabled(enable);
    if (enable) {
      columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    }
 else {
      columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
    }
  }
}",0.9870283018867924
102160,"@SuppressWarnings(""String_Node_Str"") private void createPanel(Composite parent){
  CTabFolder tabFolder=WidgetFactory.createTabFolder(parent);
  CTabItem modelsTab=new CTabItem(tabFolder,SWT.NONE);
  modelsTab.setText(Messages.modelDetailsPanel_modelDetails);
  modelsTab.setToolTipText(Messages.modelDetailsPanel_modelDetailsTooltip);
  Composite modelDetailsPanel=new Composite(tabFolder,SWT.NONE);
  modelDetailsPanel.setLayout(new GridLayout(1,false));
  modelDetailsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelDetailsPanel.getLayoutData()).widthHint=200;
  modelsTab.setControl(modelDetailsPanel);
  NAME_LOCATION_DESCRIPTION_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(modelDetailsPanel,SWT.NONE,GridData.FILL_BOTH,1,2);
    subPanel_1.setLayout(new GridLayout(2,false));
    Label label=new Label(subPanel_1,SWT.NONE);
    label.setText(""String_Node_Str"");
    this.modelNameText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
    this.modelNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    this.modelNameText.setBackground(subPanel_1.getBackground());
    label=new Label(subPanel_1,SWT.NONE);
    label.setText(""String_Node_Str"");
    this.modelLocationText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
    this.modelLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    this.modelLocationText.setBackground(subPanel_1.getBackground());
    Group descriptionGroup=WidgetFactory.createGroup(subPanel_1,i18n(""String_Node_Str""),GridData.FILL_BOTH,2,1);
    this.modelDescriptionEditor=new StyledTextEditor(descriptionGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
    final GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.horizontalSpan=1;
    this.modelDescriptionEditor.setLayoutData(gridData);
    this.modelDescriptionEditor.getDocument().addDocumentListener(new IDocumentListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentAboutToBeChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentAboutToBeChanged(      final DocumentEvent event){
      }
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentChanged(      final DocumentEvent event){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.setDescription(modelDescriptionEditor.getText());
        }
      }
    }
);
    selectedVdbModelEntry=null;
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
  }
  CTabItem bindingsTab=new CTabItem(tabFolder,SWT.NONE);
  bindingsTab.setText(Messages.modelDetailsPanel_sourceBindingDefinition);
  bindingsTab.setToolTipText(Messages.modelDetailsPanel_sourceBindingDefinitionTooltip);
  Composite sourceBindingsGroup=new Composite(tabFolder,SWT.NONE);
  sourceBindingsGroup.setLayout(new GridLayout(2,false));
  sourceBindingsGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  bindingsTab.setControl(sourceBindingsGroup);
  SOURCE_BINDING_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_BOTH,2,4);
    subPanel_1.setLayout(new GridLayout(4,false));
    multiSourceCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_multiSourceLabel,SWT.NONE,1,SWT.CHECK);
    multiSourceCB.setToolTipText(Messages.modelDetailsPanel_multiSourceCheckBoxTooltip);
    multiSourceCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setIsMultiSource(multiSourceCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    addColumnCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_addColumnLabel + ""String_Node_Str"",SWT.NONE,1,SWT.CHECK);
    addColumnCB.setToolTipText(Messages.modelDetailsPanel_addColumnCheckBoxTooltip);
    addColumnCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setAddColumn(addColumnCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    columnAliaslabel=new Label(subPanel_1,SWT.NONE);
    columnAliaslabel.setText(""String_Node_Str"");
    columnAliaslabel.setToolTipText(Messages.modelDetailsPanel_columnAliaslabelTooltip);
    columnAliasText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE);
    columnAliasText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    columnAliasText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        selectedVdbModelEntry.getSourceInfo().setColumnAlias(columnAliasText.getText());
      }
    }
);
    Composite leftToolbarPanel=new Composite(sourceBindingsGroup,SWT.NONE);
    GridLayout tbGL=new GridLayout();
    tbGL.marginHeight=0;
    tbGL.marginWidth=0;
    tbGL.verticalSpacing=2;
    leftToolbarPanel.setLayout(tbGL);
    GridData ltpGD=new GridData(GridData.FILL_VERTICAL);
    ltpGD.heightHint=100;
    leftToolbarPanel.setLayoutData(ltpGD);
    addButton=new Button(leftToolbarPanel,SWT.PUSH);
    addButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
    addButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    addButton.setEnabled(false);
    addButton.setToolTipText(Messages.modelDetailsPanel_addButtonTooltip);
    addButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int numSources=selectedVdbModelEntry.getSourceInfo().getSources().size();
        String newName=""String_Node_Str"" + numSources;
        selectedVdbModelEntry.getSourceInfo().add(newName,""String_Node_Str"",""String_Node_Str"");
        refreshModelDetails();
      }
    }
);
    deleteButton=new Button(leftToolbarPanel,SWT.PUSH);
    deleteButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
    deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    deleteButton.setEnabled(false);
    deleteButton.setToolTipText(Messages.modelDetailsPanel_deleteButtonTooltip);
    deleteButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IStructuredSelection selection=(IStructuredSelection)bindingsViewer.getSelection();
        for (        Object obj : selection.toArray()) {
          if (obj instanceof VdbSource) {
            selectedVdbModelEntry.getSourceInfo().removeSource((VdbSource)obj);
            refreshModelDetails();
          }
        }
      }
    }
);
    BINDING_TABLE: {
      Table table=new Table(sourceBindingsGroup,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      table.setLayout(new TableLayout());
      GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
      table.setLayoutData(gd);
      bindingsViewer=new TableViewer(table);
      bindingsViewer.getControl().setLayoutData(gd);
      TableViewerColumn column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_sourceNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new SourceNameTextEditingSupport(bindingsViewer));
      column.setLabelProvider(new BindingDataLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_translatorNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new TranslatorEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_jndiNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new JndiEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(2));
      column.getColumn().pack();
      bindingsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          IStructuredSelection sel=(IStructuredSelection)event.getSelection();
          if (sel.isEmpty()) {
            deleteButton.setEnabled(false);
          }
 else           if (selectedVdbModelEntry.getSourceInfo().isMultiSource()) {
            boolean enable=true;
            Object[] objs=sel.toArray();
            for (            Object obj : objs) {
              if (!(obj instanceof VdbSource)) {
                enable=false;
                break;
              }
            }
            if (objs.length == 0) {
              enable=false;
            }
            deleteButton.setEnabled(enable);
          }
        }
      }
);
    }
  }
  tabFolder.setSelection(0);
  multiSourceCB.setEnabled(false);
  addColumnCB.setEnabled(false);
  columnAliasText.setEnabled(false);
  addButton.setEnabled(false);
  deleteButton.setEnabled(false);
  columnAliaslabel.setEnabled(false);
  columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
}","@SuppressWarnings(""String_Node_Str"") private void createPanel(Composite parent){
  CTabFolder tabFolder=WidgetFactory.createTabFolder(parent);
  CTabItem modelsTab=new CTabItem(tabFolder,SWT.NONE);
  modelsTab.setText(Messages.modelDetailsPanel_modelDetails);
  modelsTab.setToolTipText(Messages.modelDetailsPanel_modelDetailsTooltip);
  Composite modelDetailsPanel=new Composite(tabFolder,SWT.NONE);
  modelDetailsPanel.setLayout(new GridLayout(1,false));
  modelDetailsPanel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  ((GridData)modelDetailsPanel.getLayoutData()).widthHint=200;
  modelsTab.setControl(modelDetailsPanel);
  NAME_LOCATION_DESCRIPTION_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(modelDetailsPanel,SWT.NONE,GridData.FILL_BOTH,1,2);
    subPanel_1.setLayout(new GridLayout(2,false));
    Label label=new Label(subPanel_1,SWT.NONE);
    label.setText(""String_Node_Str"");
    this.modelNameText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
    this.modelNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    this.modelNameText.setBackground(subPanel_1.getBackground());
    label=new Label(subPanel_1,SWT.NONE);
    label.setText(""String_Node_Str"");
    this.modelLocationText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
    this.modelLocationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    this.modelLocationText.setBackground(subPanel_1.getBackground());
    Group descriptionGroup=WidgetFactory.createGroup(subPanel_1,i18n(""String_Node_Str""),GridData.FILL_BOTH,2,1);
    this.modelDescriptionEditor=new StyledTextEditor(descriptionGroup,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP| SWT.BORDER);
    final GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.horizontalSpan=1;
    this.modelDescriptionEditor.setLayoutData(gridData);
    this.modelDescriptionEditor.getDocument().addDocumentListener(new IDocumentListener(){
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentAboutToBeChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentAboutToBeChanged(      final DocumentEvent event){
      }
      /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.text.IDocumentListener#documentChanged(org.eclipse.jface.text.DocumentEvent)
 */
      @Override public void documentChanged(      final DocumentEvent event){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.setDescription(modelDescriptionEditor.getText());
        }
      }
    }
);
    selectedVdbModelEntry=null;
    modelNameText.setText(Messages.noSelection);
    modelLocationText.setText(Messages.noSelection);
    modelDescriptionEditor.setText(EMPTY_STRING);
  }
  CTabItem bindingsTab=new CTabItem(tabFolder,SWT.NONE);
  bindingsTab.setText(Messages.modelDetailsPanel_sourceBindingDefinition);
  bindingsTab.setToolTipText(Messages.modelDetailsPanel_sourceBindingDefinitionTooltip);
  Composite sourceBindingsGroup=new Composite(tabFolder,SWT.NONE);
  sourceBindingsGroup.setLayout(new GridLayout(1,false));
  sourceBindingsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  bindingsTab.setControl(sourceBindingsGroup);
  SOURCE_BINDING_PANEL: {
    Composite subPanel_1=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_HORIZONTAL,1,4);
    subPanel_1.setLayout(new GridLayout(4,false));
    multiSourceCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_multiSourceLabel,SWT.NONE,1,SWT.CHECK);
    multiSourceCB.setToolTipText(Messages.modelDetailsPanel_multiSourceCheckBoxTooltip);
    multiSourceCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setIsMultiSource(multiSourceCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    addColumnCB=WidgetFactory.createButton(subPanel_1,Messages.modelDetailsPanel_addColumnLabel + ""String_Node_Str"",SWT.NONE,1,SWT.CHECK);
    addColumnCB.setToolTipText(Messages.modelDetailsPanel_addColumnCheckBoxTooltip);
    addColumnCB.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (selectedVdbModelEntry != null) {
          selectedVdbModelEntry.getSourceInfo().setAddColumn(addColumnCB.getSelection());
        }
        refreshModelDetails();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    columnAliaslabel=new Label(subPanel_1,SWT.NONE);
    columnAliaslabel.setText(""String_Node_Str"");
    columnAliaslabel.setToolTipText(Messages.modelDetailsPanel_columnAliaslabelTooltip);
    columnAliasText=new Text(subPanel_1,SWT.BORDER | SWT.SINGLE);
    columnAliasText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    columnAliasText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        selectedVdbModelEntry.getSourceInfo().setColumnAlias(columnAliasText.getText());
      }
    }
);
    Composite lowerPanel=WidgetFactory.createPanel(sourceBindingsGroup,SWT.NONE,GridData.FILL_BOTH,2,1);
    lowerPanel.setLayout(new GridLayout(2,false));
    GridData gridData=new GridData(GridData.FILL_BOTH | GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);
    gridData.grabExcessHorizontalSpace=true;
    gridData.grabExcessVerticalSpace=true;
    lowerPanel.setLayoutData(gridData);
    Composite leftToolbarPanel=WidgetFactory.createPanel(lowerPanel,SWT.NONE,GridData.FILL_VERTICAL);
    GridLayout tbGL=new GridLayout();
    tbGL.marginHeight=0;
    tbGL.marginWidth=0;
    tbGL.verticalSpacing=2;
    leftToolbarPanel.setLayout(tbGL);
    addButton=new Button(leftToolbarPanel,SWT.PUSH);
    addButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
    addButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    addButton.setEnabled(false);
    addButton.setToolTipText(Messages.modelDetailsPanel_addButtonTooltip);
    addButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int numSources=selectedVdbModelEntry.getSourceInfo().getSources().size();
        boolean added=false;
        while (!added) {
          String newName=""String_Node_Str"" + numSources;
          added=selectedVdbModelEntry.getSourceInfo().add(newName,""String_Node_Str"",""String_Node_Str"");
          if (!added)           numSources++;
        }
        refreshModelDetails();
      }
    }
);
    deleteButton=new Button(leftToolbarPanel,SWT.PUSH);
    deleteButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
    deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    deleteButton.setEnabled(false);
    deleteButton.setToolTipText(Messages.modelDetailsPanel_deleteButtonTooltip);
    deleteButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IStructuredSelection selection=(IStructuredSelection)bindingsViewer.getSelection();
        for (        Object obj : selection.toArray()) {
          if (obj instanceof VdbSource) {
            selectedVdbModelEntry.getSourceInfo().removeSource((VdbSource)obj);
            refreshModelDetails();
          }
        }
      }
    }
);
    BINDING_TABLE: {
      int tableStyle=SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
      bindingsViewer=new TableViewer(lowerPanel,tableStyle);
      Table table=bindingsViewer.getTable();
      table.setLayout(new TableLayout());
      final GridData tblGD=new GridData(GridData.FILL_BOTH);
      tblGD.grabExcessHorizontalSpace=true;
      tblGD.grabExcessVerticalSpace=true;
      table.setLayoutData(tblGD);
      table.setHeaderVisible(true);
      table.setLinesVisible(true);
      TableViewerColumn column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_sourceNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new SourceNameTextEditingSupport(bindingsViewer));
      column.setLabelProvider(new BindingDataLabelProvider(0));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_translatorNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new TranslatorEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(1));
      column.getColumn().pack();
      column=new TableViewerColumn(bindingsViewer,SWT.LEFT);
      column.getColumn().setText(Messages.modelDetailsPanel_jndiNameLabel + ""String_Node_Str"");
      column.setEditingSupport(new JndiEditingSupport(bindingsViewer,vdbEditor.getVdb().getFile()));
      column.setLabelProvider(new BindingDataLabelProvider(2));
      column.getColumn().pack();
      bindingsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          IStructuredSelection sel=(IStructuredSelection)event.getSelection();
          if (sel.isEmpty()) {
            deleteButton.setEnabled(false);
          }
 else           if (selectedVdbModelEntry.getSourceInfo().isMultiSource()) {
            boolean enable=true;
            Object[] objs=sel.toArray();
            for (            Object obj : objs) {
              if (!(obj instanceof VdbSource)) {
                enable=false;
                break;
              }
            }
            if (objs.length == 0) {
              enable=false;
            }
            deleteButton.setEnabled(enable);
          }
        }
      }
);
    }
  }
  tabFolder.setSelection(0);
  multiSourceCB.setEnabled(false);
  addColumnCB.setEnabled(false);
  columnAliasText.setEnabled(false);
  addButton.setEnabled(false);
  deleteButton.setEnabled(false);
  columnAliaslabel.setEnabled(false);
  columnAliasText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
}",0.9223475396746182
102161,"@Override protected void setValue(Object element,Object value){
  if (element instanceof VdbSource) {
    String oldValue=((VdbSource)element).getName();
    String newValue=(String)value;
    if (newValue != null && newValue.length() > 0 && !newValue.equalsIgnoreCase(oldValue)) {
      ((VdbSource)element).setName(newValue);
      refreshModelDetails();
    }
  }
}","@Override protected void setValue(Object element,Object value){
  if (element instanceof VdbSource) {
    String oldValue=((VdbSource)element).getName();
    String newValue=(String)value;
    if (newValue != null && newValue.length() > 0 && !newValue.equalsIgnoreCase(oldValue)) {
      String newName=ensureUniqueName(newValue,(VdbSource)element);
      ((VdbSource)element).setName(newName);
      refreshModelDetails();
      bindingsViewer.setSelection(new StructuredSelection(element));
    }
  }
}",0.8348623853211009
102162,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ResourceEditingSupport#setElementValue(java.lang.Object,java.lang.String)
 */
@Override protected void setElementValue(Object element,String newValue){
  if (newValue == null) {
    newValue=""String_Node_Str"";
  }
  ((VdbSource)element).setJndiName(newValue);
  refreshModelDetails();
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.ui.common.table.ResourceEditingSupport#setElementValue(java.lang.Object,java.lang.String)
 */
@Override protected void setElementValue(Object element,String newValue){
  if (newValue == null) {
    newValue=""String_Node_Str"";
  }
  ((VdbSource)element).setJndiName(newValue);
  refreshModelDetails();
  bindingsViewer.setSelection(new StructuredSelection(element));
}",0.9152542372881356
102163,"/** 
 * @param name
 * @param jndiName
 * @param translatorName
 * @return true if new VdbSource added
 */
public boolean add(String name,String jndiName,String translatorName){
  if (this.sources.get(name) == null) {
    this.sources.put(name,new VdbSource(getVdb(),name,jndiName,translatorName));
    getVdb().setModified(this,MODEL_SOURCES,null,this.sources.get(name));
    return true;
  }
  return false;
}","/** 
 * @param name
 * @param jndiName
 * @param translatorName
 * @return true if new VdbSource added
 */
public boolean add(String name,String jndiName,String translatorName){
  if (getSource(name) == null) {
    VdbSource vdbSource=new VdbSource(getVdb(),name,jndiName,translatorName);
    this.sources.add(vdbSource);
    getVdb().setModified(this,MODEL_SOURCES,null,vdbSource);
    return true;
  }
  return false;
}",0.75
102164,"/** 
 * @param source
 * @return true if new VdbSource removed
 */
public boolean removeSource(VdbSource source){
  CoreArgCheck.isNotNull(source,""String_Node_Str"");
  if (this.sources.get(source.getName()) != null) {
    this.sources.remove(source.getName());
    getVdb().setModified(this,MODEL_SOURCES,source,null);
    return true;
  }
  return false;
}","/** 
 * @param source
 * @return true if new VdbSource removed
 */
public boolean removeSource(VdbSource source){
  CoreArgCheck.isNotNull(source,""String_Node_Str"");
  Iterator iter=this.sources.iterator();
  while (iter.hasNext()) {
    VdbSource theSource=(VdbSource)iter.next();
    if (theSource.getName().equalsIgnoreCase(source.getName())) {
      iter.remove();
      getVdb().setModified(this,MODEL_SOURCES,theSource,null);
      return true;
    }
  }
  return false;
}",0.651497005988024
102165,"/** 
 * @return the sources
 */
public Collection<VdbSource> getSources(){
  return this.sources.values();
}","/** 
 * @return the sources
 */
public Collection<VdbSource> getSources(){
  return this.sources;
}",0.9565217391304348
102166,"/** 
 * @param index the source array index
 * @return the VdbSource instance if it exists in the sources map
 */
public VdbSource getSource(int index){
  if (sources.isEmpty()) {
    add(DEFAULT_SOURCE_NAME,null,null);
  }
  if (index < sources.size()) {
    for (int i=0; i < sources.size(); i++) {
      VdbSource source=sources.values().iterator().next();
      if (i == index)       return source;
    }
  }
  return null;
}","/** 
 * @param index the source array index
 * @return the VdbSource instance if it exists in the sources map
 */
public VdbSource getSource(int index){
  if (sources.isEmpty()) {
    add(DEFAULT_SOURCE_NAME,null,null);
  }
  if (index >= 0 && index < sources.size()) {
    VdbSource source=sources.get(index);
    return source;
  }
  return null;
}",0.6829268292682927
102167,"/** 
 * @param vdb
 * @param sources
 */
public VdbSourceInfo(final Vdb vdb,final Collection<SourceElement> sources){
  this(vdb);
  for (  SourceElement element : sources) {
    sources.add(element);
  }
}","/** 
 * @param vdb 
 */
public VdbSourceInfo(final Vdb vdb){
  super();
  this.vdb=vdb;
  this.sources=new ArrayList<VdbSource>();
}",0.5029585798816568
102168,"/** 
 * @return dataFile the teiid-formatted data <code>File</code>
 */
public File getDataFile(){
  return this.dataFile;
}","/** 
 * @return dataFile the teiid-formatted data <code>File</code>
 */
@Override public File getDataFile(){
  return this.dataFile;
}",0.9612403100775194
102169,"public String getModelNameWithoutExtension(String fullModelName){
  String modelName=fullModelName;
  if (modelName.toUpperCase().endsWith(""String_Node_Str"")) {
    modelName=modelName.substring(0,modelName.length() - 4);
  }
  return modelName;
}","public String getModelNameWithoutExtension(String fullModelName){
  IPath filePath=new Path(fullModelName);
  String modelName=filePath.removeFileExtension().lastSegment();
  return modelName;
}",0.5804988662131519
102170,"private void initialize(){
  setStatus(Status.OK_STATUS);
  this.cachedFirstLines=new String[0];
  this.columnInfoList=new ArrayList<ITeiidColumnInfo>();
  String fileName=getDataFile().getName();
  if (fileName.toLowerCase().endsWith(""String_Node_Str"")) {
    fileName=fileName.substring(0,fileName.length() - 4);
  }
  setViewTableName(fileName + ""String_Node_Str"");
}","private void initialize(){
  setStatus(Status.OK_STATUS);
  this.cachedFirstLines=new String[0];
  this.columnInfoList=new ArrayList<ITeiidColumnInfo>();
  IPath filePath=new Path(getDataFile().getName());
  String fileName=filePath.removeFileExtension().lastSegment();
  setViewTableName(fileName + ""String_Node_Str"");
}",0.7120115774240231
102171,"/** 
 */
private void initControls(){
  IConnectionProfile profile=getConnectionProfile();
  Properties props=profile.getBaseProperties();
  String url=props.getProperty(IWSProfileConstants.WSDL_URI_PROP_ID);
  if (null != url) {
    urlText.setText(url);
  }
  String securityType=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (null != securityType) {
    credentialsComposite.setSecurityOption(securityType);
  }
  String username=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
  if (null != username) {
    credentialsComposite.setUserName(username);
  }
  String password=props.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
  if (null != password) {
    credentialsComposite.setPassword(password);
  }
  String endPoint=ConnectionInfoHelper.readEndPointProperty(props);
  if (null != endPoint) {
    endPointText.setText(endPoint);
  }
}","/** 
 */
private void initControls(){
  IConnectionProfile profile=getConnectionProfile();
  Properties props=profile.getBaseProperties();
  String url=props.getProperty(IWSProfileConstants.WSDL_URI_PROP_ID);
  if (null != url) {
    urlText.setText(url);
  }
  String securityType=props.getProperty(ICredentialsCommon.SECURITY_TYPE_ID);
  if (null != securityType) {
    credentialsComposite.setSecurityOption(securityType);
  }
  String username=props.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
  if (null != username) {
    credentialsComposite.setUserName(username);
  }
  String password=props.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
  if (null != password) {
    credentialsComposite.setPassword(password);
  }
  String endPoint=ConnectionInfoHelper.readEndPointProperty(props);
  if (null != endPoint) {
    endPointText.setText(endPoint);
  }
  String endPointName=props.getProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID);
  if (null != endPointName) {
    endPointNameText.setText(endPointName);
  }
  String bindingType=props.getProperty(IWSProfileConstants.SOAP_BINDING);
  if (null != bindingType) {
    bindingTypeText.setText(bindingType);
  }
}",0.8478048780487805
102172,"/** 
 * {@inheritDoc}
 * @see org.eclipse.datatools.connectivity.ui.wizards.ProfileDetailsPropertyPage#collectProperties()
 */
@Override protected Properties collectProperties(){
  Properties result=super.collectProperties();
  if (null == result) {
    result=new Properties();
  }
  result.setProperty(IWSProfileConstants.WSDL_URI_PROP_ID,urlText.getText());
  result.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,credentialsComposite.getSecurityOption().name());
  if (credentialsComposite.getUserName() != null) {
    result.setProperty(ICredentialsCommon.USERNAME_PROP_ID,credentialsComposite.getUserName());
  }
  if (credentialsComposite.getPassword() != null) {
    result.setProperty(ICredentialsCommon.PASSWORD_PROP_ID,credentialsComposite.getPassword());
  }
  result.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,endPointText.getText());
  return result;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.datatools.connectivity.ui.wizards.ProfileDetailsPropertyPage#collectProperties()
 */
@Override protected Properties collectProperties(){
  Properties result=super.collectProperties();
  if (null == result) {
    IConnectionProfile profile=getConnectionProfile();
    result=(Properties)profile.getBaseProperties().clone();
  }
  result.setProperty(IWSProfileConstants.WSDL_URI_PROP_ID,urlText.getText());
  result.setProperty(ICredentialsCommon.SECURITY_TYPE_ID,credentialsComposite.getSecurityOption().name());
  if (credentialsComposite.getUserName() != null) {
    result.setProperty(ICredentialsCommon.USERNAME_PROP_ID,credentialsComposite.getUserName());
  }
  if (credentialsComposite.getPassword() != null) {
    result.setProperty(ICredentialsCommon.PASSWORD_PROP_ID,credentialsComposite.getPassword());
  }
  result.setProperty(IWSProfileConstants.END_POINT_URI_PROP_ID,endPointText.getText());
  result.setProperty(IWSProfileConstants.END_POINT_NAME_PROP_ID,endPointNameText.getText());
  result.setProperty(IWSProfileConstants.SOAP_BINDING,bindingTypeText.getText());
  return result;
}",0.8398611799702529
102173,"@Override protected void createCustomContents(Composite parent){
  GridData gd;
  Group group=new Group(parent,SWT.BORDER);
  group.setText(UTIL.getString(""String_Node_Str""));
  FillLayout fl=new FillLayout();
  fl.type=SWT.HORIZONTAL;
  group.setLayout(new FillLayout());
  scrolled=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  scrolled.setLayout(gridLayout);
  urlLabel=new Label(scrolled,SWT.NONE);
  urlLabel.setText(UTIL.getString(""String_Node_Str""));
  urlLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  urlLabel.setLayoutData(gd);
  urlText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  urlText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  urlText.setLayoutData(gd);
  Label spacerLabel=new Label(scrolled,SWT.NONE);
  spacerLabel.setVisible(false);
  GridDataFactory.swtDefaults().grab(false,false).applyTo(spacerLabel);
  credentialsComposite=new CredentialsComposite(scrolled,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  credentialsComposite.setLayoutData(gd);
  endPointLabel=new Label(scrolled,SWT.NONE);
  endPointLabel.setText(UTIL.getString(""String_Node_Str""));
  endPointLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  endPointLabel.setLayoutData(gd);
  endPointText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  endPointText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  endPointText.setLayoutData(gd);
  initControls();
  addlisteners();
}","@Override protected void createCustomContents(Composite parent){
  GridData gd;
  Group group=new Group(parent,SWT.BORDER);
  group.setText(UTIL.getString(""String_Node_Str""));
  FillLayout fl=new FillLayout();
  fl.type=SWT.HORIZONTAL;
  group.setLayout(new FillLayout());
  scrolled=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  scrolled.setLayout(gridLayout);
  urlLabel=new Label(scrolled,SWT.NONE);
  urlLabel.setText(UTIL.getString(""String_Node_Str""));
  urlLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  urlLabel.setLayoutData(gd);
  urlText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  urlText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  urlText.setLayoutData(gd);
  Label spacerLabel=new Label(scrolled,SWT.NONE);
  spacerLabel.setVisible(false);
  GridDataFactory.swtDefaults().grab(false,false).applyTo(spacerLabel);
  credentialsComposite=new CredentialsComposite(scrolled,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  credentialsComposite.setLayoutData(gd);
  endPointLabel=new Label(scrolled,SWT.NONE);
  endPointLabel.setText(UTIL.getString(""String_Node_Str""));
  endPointLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  endPointLabel.setLayoutData(gd);
  endPointText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  endPointText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  endPointText.setLayoutData(gd);
  endPointNameLabel=new Label(scrolled,SWT.NONE);
  endPointNameLabel.setText(UTIL.getString(""String_Node_Str""));
  endPointNameLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  endPointNameLabel.setLayoutData(gd);
  endPointNameText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  endPointNameText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  endPointNameText.setLayoutData(gd);
  bindingTypeLabel=new Label(scrolled,SWT.NONE);
  bindingTypeLabel.setText(UTIL.getString(""String_Node_Str""));
  bindingTypeLabel.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  bindingTypeLabel.setLayoutData(gd);
  bindingTypeText=new Text(scrolled,SWT.SINGLE | SWT.BORDER);
  bindingTypeText.setToolTipText(UTIL.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  gd.verticalAlignment=GridData.BEGINNING;
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalSpan=1;
  bindingTypeText.setLayoutData(gd);
  initControls();
  addlisteners();
}",0.7562463112335235
102174,"private void addlisteners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    Event event){
      validate();
    }
  }
;
  urlText.addListener(SWT.Modify,listener);
  endPointText.addListener(SWT.Modify,listener);
  credentialsComposite.addSecurityOptionListener(SWT.Modify,listener);
  credentialsComposite.addUserNameListener(SWT.Modify,listener);
  credentialsComposite.addPasswordListener(SWT.Modify,listener);
}","private void addlisteners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    Event event){
      validate();
    }
  }
;
  urlText.addListener(SWT.Modify,listener);
  endPointText.addListener(SWT.Modify,listener);
  endPointNameText.addListener(SWT.Modify,listener);
  bindingTypeText.addListener(SWT.Modify,listener);
  credentialsComposite.addSecurityOptionListener(SWT.Modify,listener);
  credentialsComposite.addUserNameListener(SWT.Modify,listener);
  credentialsComposite.addPasswordListener(SWT.Modify,listener);
}",0.8946840521564694
102175,"protected void validate(){
  String errorMessage=null;
  boolean valid=true;
  if (null == urlText.getText() || urlText.getText().isEmpty()) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  if (valid && (null == endPointText.getText() || endPointText.getText().isEmpty())) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  setErrorMessage(errorMessage);
  setValid(valid);
}","protected void validate(){
  String errorMessage=null;
  boolean valid=true;
  if (null == urlText.getText() || urlText.getText().isEmpty()) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  if (valid && (null == endPointText.getText() || endPointText.getText().isEmpty())) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  if (valid && (null == endPointNameText.getText() || endPointNameText.getText().isEmpty())) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  if (valid && (null == bindingTypeText.getText() || bindingTypeText.getText().isEmpty())) {
    errorMessage=UTIL.getString(""String_Node_Str"");
    valid=false;
  }
  setErrorMessage(errorMessage);
  setValid(valid);
}",0.7130872483221476
102176,"@Override public IFile getKey(VdbResourceChange value){
  return value.getVdb();
}","@Override public String getKey(VdbResourceChange value){
  return value.getParentFolder() + value.getVdbName();
}",0.8
102177,"protected void addVdbChange(IFile vdbFile,IPath invalidResourcePath,IPath newResourcePath){
  VdbResourceChange change=vdbChanges.get(vdbFile);
  if (change == null) {
    change=new VdbResourceChange(vdbFile);
  }
  change.addReplacement(invalidResourcePath.toOSString(),newResourcePath.toOSString());
  vdbChanges.add(change);
}","protected void addVdbChange(IFile vdbFile,IPath invalidResourcePath,IPath newResourcePath){
  VdbResourceChange change=vdbChanges.get(vdbFile.getParent().getName() + vdbFile.getName());
  if (change == null) {
    change=new VdbResourceChange(vdbFile);
  }
  change.addReplacement(invalidResourcePath.toOSString(),newResourcePath.toOSString());
  vdbChanges.add(change);
}",0.9401709401709402
102178,"/** 
 * Create new instance
 * @param name
 * @param resources
 */
public AbstractResourcesRefactoring(String name,List<IResource> resources){
  super();
  this.name=name;
  this.resources=resources;
  this.vdbChanges=new KeyInValueHashMap<IFile,VdbResourceChange>(new VdbResourceChangeAdapter());
}","/** 
 * Create new instance
 * @param name
 * @param resources
 */
public AbstractResourcesRefactoring(String name,List<IResource> resources){
  super();
  this.name=name;
  this.resources=resources;
  this.vdbChanges=new KeyInValueHashMap<String,VdbResourceChange>(new VdbResourceChangeAdapter());
}",0.9816360601001668
102179,"/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      for (      PathPair pathPair : pathPairs) {
        int lineOffset=line.indexOf(pathPair.getSourcePath());
        if (lineOffset < 0)         continue;
        int offset=docOffset + lineOffset;
        ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
        fileChangeRootEdit.addChild(edit);
      }
      docOffset+=line.length() + 1;
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}","/** 
 * Calculates a   {@link TextFileChange} for all the substitutions that need to take place in thegiven file based on the collection of path pairs.
 * @param file
 * @param pathPairs
 * @return text file change
 * @throws Exception
 */
public static TextFileChange calculateTextChanges(IFile file,Collection<PathPair> pathPairs) throws Exception {
  File nativeFile=ModelUtil.getLocation(file).makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextFileChange textFileChange=new TextFileChange(file.getName(),file);
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  if (pathPairs.isEmpty()) {
    return textFileChange;
  }
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      for (      PathPair pathPair : pathPairs) {
        if (pathPair.getSourcePath().equals(pathPair.getTargetPath())) {
          continue;
        }
        int lineOffset=line.indexOf(pathPair.getSourcePath());
        if (lineOffset < 0)         continue;
        int offset=docOffset + lineOffset;
        ReplaceEdit edit=new ReplaceEdit(offset,pathPair.getSourcePath().length(),pathPair.getTargetPath());
        fileChangeRootEdit.addChild(edit);
      }
      docOffset+=line.length() + 1;
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
  return textFileChange;
}",0.9647381033892504
102180,"@Override public void indexVdb(IResource resource,IFile vdbFile,RefactoringStatus status){
  IPath oldResourcePath=resource.getFullPath();
  IPath newResourcePath=oldResourcePath.removeLastSegments(1).append(getNewResourceName());
  addVdbChange(vdbFile,oldResourcePath,newResourcePath);
}","@Override public void indexVdb(IResource resource,IFile vdbFile,RefactoringStatus status){
  IPath oldResourcePath=resource.getFullPath();
  IPath newResourcePath=null;
  if (getResource().equals(resource)) {
    newResourcePath=oldResourcePath.removeLastSegments(1).append(getNewResourceName());
  }
 else   if (getResource().getFullPath().isPrefixOf(oldResourcePath)) {
    IPath oldRResPath=getResource().getFullPath();
    IPath newRResPath=oldRResPath.removeLastSegments(1).append(getNewResourceName());
    int segmentCount=oldRResPath.matchingFirstSegments(oldResourcePath);
    newResourcePath=oldResourcePath.removeFirstSegments(segmentCount);
    newResourcePath=newRResPath.append(newResourcePath);
  }
 else {
    newResourcePath=oldResourcePath;
  }
  addVdbChange(vdbFile,oldResourcePath,newResourcePath);
}",0.5207207207207207
102181,"@Override public void indexFile(IResource resource,IFile relatedFile,RefactoringStatus status) throws Exception {
  RefactorResourcesUtils.unloadModelResource(relatedFile);
  IPath relatedFilePath=ModelUtil.getLocation(relatedFile).makeAbsolute();
  IPath relatedParentPath=relatedFilePath.removeLastSegments(1);
  PathPair relativePathPair=RefactorResourcesUtils.getRelativePath(relatedParentPath.toOSString(),pathPair);
  TextFileChange textFileChange=RefactorResourcesUtils.calculateTextChanges(relatedFile,Collections.singleton(relativePathPair));
  if (ModelUtil.isModelFile(getResource())) {
    RefactorResourcesUtils.calculateSQLChanges(relatedFile,relativePathPair,textFileChange);
  }
  if (addTextChange(relatedFile,textFileChange)) {
    RefactorResourcesUtils.calculateRelatedVdbResources(relatedFile,status,this);
  }
}","@Override public void indexFile(IResource resource,IFile relatedFile,RefactoringStatus status) throws Exception {
  RefactorResourcesUtils.unloadModelResource(relatedFile);
  IPath relatedFilePath=ModelUtil.getLocation(relatedFile).makeAbsolute();
  IPath relatedParentPath=relatedFilePath.removeLastSegments(1);
  PathPair relativePathPair=RefactorResourcesUtils.getRelativePath(relatedParentPath.toOSString(),pathPair);
  TextFileChange textFileChange=RefactorResourcesUtils.calculateTextChanges(relatedFile,Collections.singleton(relativePathPair));
  if (ModelUtil.isModelFile(getResource())) {
    RefactorResourcesUtils.calculateSQLChanges(relatedFile,relativePathPair,textFileChange);
  }
  if (addTextChange(relatedFile,textFileChange) || getResource() instanceof IContainer) {
    RefactorResourcesUtils.calculateRelatedVdbResources(relatedFile,status,this);
  }
}",0.9771260997067448
102182,"/** 
 * @param theVdb the VDB
 * @param extractMissingModels
 * @param updateValidationVersion
 */
public static void synchronizeVdb(final IFile theVdb,boolean extractMissingModels,boolean updateValidationVersion){
  if (!theVdb.exists())   return;
  IProject theProject=theVdb.getProject();
  VdbElement manifest=VdbUtil.getVdbManifest(theVdb);
  if (manifest == null)   return;
  if (extractMissingModels) {
    synchronizeWorkspace(theVdb);
  }
  Vdb actualVDB=new Vdb(theVdb,true,new NullProgressMonitor());
  Set<ModelElement> modelsToReplace=new HashSet<ModelElement>();
  Collection<IResource> matchingResources=new ArrayList<IResource>();
  Set<ModelElement> modelsNotInWorkspace=new HashSet<ModelElement>();
  Map<String,IResource> oldModelPathToResourceMap=new HashMap<String,IResource>();
  Set<String> dependentViewModelPaths=new HashSet<String>();
  for (  ModelElement model : manifest.getModels()) {
    Collection<String> modelImports=VdbUtil.getModelImports(model);
    for (    String importedModelPath : modelImports) {
      for (      ModelElement model_2 : manifest.getModels()) {
        if (model_2.getPath().equals(importedModelPath)) {
          dependentViewModelPaths.add(model.getPath());
          break;
        }
      }
    }
  }
  for (  ModelElement model : manifest.getModels()) {
    String modelName=model.getName();
    String modelUuid=VdbUtil.getUuid(model);
    IResource resource=null;
    boolean addTheUuid=(modelUuid == null);
    boolean nameWasChanged=false;
    if (!addTheUuid) {
      resource=WorkspaceResourceFinderUtil.findIResourceByUUID(modelUuid);
      if (resource != null) {
        nameWasChanged=!resource.getFullPath().removeFileExtension().lastSegment().equalsIgnoreCase(modelName);
      }
    }
 else {
      Collection<IFile> resources=WorkspaceResourceFinderUtil.findIResourceInProjectByName(model.getName() + ModelUtil.DOT_EXTENSION_XMI,theProject);
      if (resources.size() == 1) {
        resource=resources.iterator().next();
      }
    }
    if (resource != null) {
      String path=model.getPath();
      IPath iPath=new Path(path);
      IResource expectedResourceAtPath=ModelerCore.getWorkspace().getRoot().findMember(iPath);
      boolean fixThePath=(expectedResourceAtPath == null);
      oldModelPathToResourceMap.put(model.getPath(),resource);
      if (fixThePath || nameWasChanged || addTheUuid) {
        for (        VdbModelEntry modelEntry : actualVDB.getModelEntries()) {
          if (modelEntry.getName().removeFileExtension().lastSegment().equalsIgnoreCase(modelName)) {
            modelsToReplace.add(model);
            matchingResources.add(resource);
            break;
          }
        }
      }
    }
 else {
      modelsNotInWorkspace.add(model);
    }
  }
  if (!modelsNotInWorkspace.isEmpty()) {
    for (    ModelElement missingModel : modelsNotInWorkspace) {
      if (dependentViewModelPaths.contains(missingModel.getPath())) {
        return;
      }
    }
  }
  Collection<String> modelPathsToReplace=new ArrayList<String>();
  for (  ModelElement element : modelsToReplace) {
    VdbModelEntry modelEntry=getVdbModelEntry(element,actualVDB);
    if (modelEntry != null) {
      modelPathsToReplace.add(element.getPath());
      actualVDB.removeEntry(modelEntry);
    }
  }
  for (  String thePath : modelPathsToReplace) {
    IResource matchingResource=oldModelPathToResourceMap.get(thePath);
    if (matchingResource != null) {
      actualVDB.addModelEntry(matchingResource.getFullPath(),new NullProgressMonitor());
    }
  }
  for (  String thePath : dependentViewModelPaths) {
    IResource matchingResource=oldModelPathToResourceMap.get(thePath);
    if (matchingResource != null) {
      actualVDB.addModelEntry(matchingResource.getFullPath(),new NullProgressMonitor());
    }
  }
  actualVDB.synchronize(new NullProgressMonitor());
  if (updateValidationVersion) {
    actualVDB.setValidationDateTime(new Date());
    actualVDB.setValidationVersion(ModelerCore.getTeiidServerVersion().toString());
  }
  actualVDB.save(new NullProgressMonitor());
  try {
    theVdb.refreshLocal(IResource.DEPTH_ONE,new NullProgressMonitor());
  }
 catch (  CoreException ex) {
    VdbPlugin.UTIL.log(IStatus.ERROR,ex,ex.getMessage());
  }
}","/** 
 * @param theVdb the VDB
 * @param extractMissingModels
 * @param updateValidationVersion
 */
public static void synchronizeVdb(final IFile theVdb,boolean extractMissingModels,boolean updateValidationVersion){
  if (!theVdb.exists())   return;
  IProject theProject=theVdb.getProject();
  VdbElement manifest=VdbUtil.getVdbManifest(theVdb);
  if (manifest == null)   return;
  if (extractMissingModels) {
    synchronizeWorkspace(theVdb);
  }
  Vdb actualVDB=new Vdb(theVdb,true,new NullProgressMonitor());
  Set<ModelElement> modelsToReplace=new HashSet<ModelElement>();
  Collection<IResource> matchingResources=new ArrayList<IResource>();
  Set<ModelElement> modelsNotInWorkspace=new HashSet<ModelElement>();
  Map<String,IResource> oldModelPathToResourceMap=new HashMap<String,IResource>();
  Set<String> dependentViewModelPaths=new HashSet<String>();
  for (  ModelElement model : manifest.getModels()) {
    Collection<String> modelImports=VdbUtil.getModelImports(model);
    for (    String importedModelPath : modelImports) {
      for (      ModelElement model_2 : manifest.getModels()) {
        if (model_2.getPath().equals(importedModelPath)) {
          dependentViewModelPaths.add(model.getPath());
          break;
        }
      }
    }
  }
  for (  ModelElement model : manifest.getModels()) {
    String modelName=model.getName();
    String modelUuid=VdbUtil.getUuid(model);
    IResource resource=null;
    boolean addTheUuid=(modelUuid == null);
    boolean nameWasChanged=false;
    if (!addTheUuid) {
      resource=WorkspaceResourceFinderUtil.findIResourceByUUID(modelUuid);
      if (resource != null) {
        nameWasChanged=!resource.getFullPath().removeFileExtension().lastSegment().equalsIgnoreCase(modelName);
      }
    }
 else {
      IPath modelPath=new Path(model.getPath());
      Collection<IFile> resources=WorkspaceResourceFinderUtil.findIResourceInProjectByName(model.getName() + CoreStringUtil.Constants.DOT + modelPath.getFileExtension(),theProject);
      if (resources.size() == 1) {
        resource=resources.iterator().next();
      }
    }
    if (resource != null) {
      String path=model.getPath();
      IPath iPath=new Path(path);
      IResource expectedResourceAtPath=ModelerCore.getWorkspace().getRoot().findMember(iPath);
      boolean fixThePath=(expectedResourceAtPath == null);
      oldModelPathToResourceMap.put(model.getPath(),resource);
      if (fixThePath || nameWasChanged || addTheUuid) {
        for (        VdbModelEntry modelEntry : actualVDB.getModelEntries()) {
          if (modelEntry.getName().removeFileExtension().lastSegment().equalsIgnoreCase(modelName)) {
            modelsToReplace.add(model);
            matchingResources.add(resource);
            break;
          }
        }
      }
    }
 else {
      modelsNotInWorkspace.add(model);
    }
  }
  if (!modelsNotInWorkspace.isEmpty()) {
    for (    ModelElement missingModel : modelsNotInWorkspace) {
      if (dependentViewModelPaths.contains(missingModel.getPath())) {
        return;
      }
    }
  }
  Collection<String> modelPathsToReplace=new ArrayList<String>();
  for (  ModelElement element : modelsToReplace) {
    VdbModelEntry modelEntry=getVdbModelEntry(element,actualVDB);
    if (modelEntry != null) {
      modelPathsToReplace.add(element.getPath());
      actualVDB.removeEntry(modelEntry);
    }
  }
  for (  String thePath : modelPathsToReplace) {
    IResource matchingResource=oldModelPathToResourceMap.get(thePath);
    if (matchingResource != null) {
      actualVDB.addModelEntry(matchingResource.getFullPath(),new NullProgressMonitor());
    }
  }
  for (  String thePath : dependentViewModelPaths) {
    IResource matchingResource=oldModelPathToResourceMap.get(thePath);
    if (matchingResource != null) {
      actualVDB.addModelEntry(matchingResource.getFullPath(),new NullProgressMonitor());
    }
  }
  actualVDB.synchronize(new NullProgressMonitor());
  if (updateValidationVersion) {
    actualVDB.setValidationDateTime(new Date());
    actualVDB.setValidationVersion(ModelerCore.getTeiidServerVersion().toString());
  }
  actualVDB.save(new NullProgressMonitor());
  try {
    theVdb.refreshLocal(IResource.DEPTH_ONE,new NullProgressMonitor());
  }
 catch (  CoreException ex) {
    VdbPlugin.UTIL.log(IStatus.ERROR,ex,ex.getMessage());
  }
}",0.9863461314038978
102183,"/** 
 * @see org.eclipse.jface.action.IAction#run()
 * @since 5.0
 */
@Override public void run(){
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  ModelResource modelResource=null;
  if (!getSelection().isEmpty()) {
    IFile modelFile=(IFile)SelectionUtilities.getSelectedObjects(getSelection()).get(0);
    modelResource=ModelUtilities.getModelResource(modelFile);
  }
  try {
    ITeiidServer teiidServer=cachedServer;
    if (teiidServer == null) {
      if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""))) {
        teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
        teiidServer.connect();
      }
 else {
        return;
      }
    }
    Collection<ModelResource> relationalModels=getRelationalModelsWithConnections();
    final CreateDataSourceWizard wizard=new CreateDataSourceWizard(teiidServer,relationalModels,modelResource);
    wizard.init(iww.getWorkbench(),new StructuredSelection());
    final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
    final int rc=dialog.open();
    if (rc == Window.OK) {
      TeiidDataSourceInfo info=wizard.getTeiidDataSourceInfo();
      Properties props=info.getProperties();
      IConnectionInfoProvider provider=info.getConnectionInfoProvider();
      boolean cancelledPassword=false;
      if (null != provider.getDataSourcePasswordPropertyKey() && props.get(provider.getDataSourcePasswordPropertyKey()) == null) {
        if (provider.requiresPassword(provider.getConnectionProfile(modelResource))) {
          int result=new AbstractPasswordDialog(iww.getShell(),getString(""String_Node_Str""),null){
            @SuppressWarnings(""String_Node_Str"") @Override protected boolean isPasswordValid(            final String password){
              pwd=password;
              return true;
            }
          }
.open();
          if (result == Window.OK) {
            props.put(provider.getDataSourcePasswordPropertyKey(),this.pwd);
          }
 else {
            cancelledPassword=true;
          }
        }
      }
      if (!cancelledPassword) {
        teiidServer.getOrCreateDataSource(info.getDisplayName(),info.getJndiName(),provider.getDataSourceType(),props);
      }
    }
  }
 catch (  Exception e) {
    if (modelResource != null) {
      MessageDialog.openError(getShell(),getString(""String_Node_Str"",modelResource.getItemName()),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str"",modelResource.getItemName()));
    }
 else {
      MessageDialog.openError(getShell(),getString(""String_Node_Str""),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str""));
    }
  }
}","/** 
 * @see org.eclipse.jface.action.IAction#run()
 * @since 5.0
 */
@Override public void run(){
  final IWorkbenchWindow iww=VdbUiPlugin.singleton.getCurrentWorkbenchWindow();
  ModelResource modelResource=null;
  if (!getSelection().isEmpty()) {
    IFile modelFile=(IFile)SelectionUtilities.getSelectedObjects(getSelection()).get(0);
    modelResource=ModelUtilities.getModelResource(modelFile);
  }
  try {
    ITeiidServer teiidServer=cachedServer;
    if (teiidServer == null) {
      if (RuntimeAssistant.ensureServerConnection(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),getString(""String_Node_Str""))) {
        teiidServer=DqpPlugin.getInstance().getServerManager().getDefaultServer();
        teiidServer.connect();
      }
 else {
        return;
      }
    }
    Collection<ModelResource> relationalModels=getRelationalModelsWithConnections();
    final CreateDataSourceWizard wizard=new CreateDataSourceWizard(teiidServer,relationalModels,modelResource);
    wizard.init(iww.getWorkbench(),new StructuredSelection());
    final WizardDialog dialog=new WizardDialog(wizard.getShell(),wizard);
    final int rc=dialog.open();
    if (rc != Window.OK)     return;
    TeiidDataSourceInfo info=wizard.getTeiidDataSourceInfo();
    Properties props=info.getProperties();
    IConnectionInfoProvider provider=info.getConnectionInfoProvider();
    boolean cancelledPassword=false;
    if (null != provider.getDataSourcePasswordPropertyKey() && props.get(provider.getDataSourcePasswordPropertyKey()) == null) {
      if (info.requiresPassword()) {
        int result=new AbstractPasswordDialog(iww.getShell(),getString(""String_Node_Str""),null){
          @SuppressWarnings(""String_Node_Str"") @Override protected boolean isPasswordValid(          final String password){
            pwd=password;
            return true;
          }
        }
.open();
        if (result == Window.OK) {
          props.put(provider.getDataSourcePasswordPropertyKey(),this.pwd);
        }
 else {
          cancelledPassword=true;
        }
      }
    }
    if (!cancelledPassword) {
      teiidServer.getOrCreateDataSource(info.getDisplayName(),info.getJndiName(),provider.getDataSourceType(),props);
    }
  }
 catch (  Exception e) {
    if (modelResource != null) {
      MessageDialog.openError(getShell(),getString(""String_Node_Str"",modelResource.getItemName()),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str"",modelResource.getItemName()));
    }
 else {
      MessageDialog.openError(getShell(),getString(""String_Node_Str""),e.getMessage());
      DqpUiConstants.UTIL.log(IStatus.ERROR,e,getString(""String_Node_Str""));
    }
  }
}",0.8373538011695907
102184,"void setConnectionProperties(){
  Properties props=new Properties();
  currentProvider=null;
  if (useModelCheckBox.getSelection()) {
    if (selectedModelResource != null) {
      try {
        IConnectionInfoProvider provider=getProvider(selectedModelResource);
        if (provider != null) {
          currentProvider=provider;
          IConnectionProfile modelCP=provider.getConnectionProfile(selectedModelResource);
          props=provider.getTeiidRelatedProperties(modelCP);
        }
      }
 catch (      ModelWorkspaceException e) {
        DqpUiConstants.UTIL.log(e);
      }
catch (      Exception e) {
      }
    }
  }
 else   if (profileWorker.getConnectionProfile() != null) {
    try {
      IConnectionInfoProvider provider=getProvider(profileWorker.getConnectionProfile());
      if (provider != null) {
        currentProvider=provider;
        props=provider.getTeiidRelatedProperties(profileWorker.getConnectionProfile());
      }
    }
 catch (    ModelWorkspaceException e) {
      DqpUiConstants.UTIL.log(e);
    }
catch (    Exception e) {
      DqpUiConstants.UTIL.log(e);
    }
  }
  if (props != null && !props.isEmpty()) {
    teiidDataSourceProperties=props;
    Collection<StringKeyValuePair> propsColl=new ArrayList<StringKeyValuePair>();
    for (    Object key : props.keySet()) {
      String keyStr=(String)key;
      String value=props.getProperty((String)key);
      if (keyStr.equalsIgnoreCase(PASSWORD)) {
        value=HIDDEN_PASSWORD;
      }
      propsColl.add(new StringKeyValuePair(keyStr,value));
    }
    propsViewer.setInput(propsColl);
  }
 else {
    teiidDataSourceProperties.clear();
    propsViewer.setInput(new ArrayList<StringKeyValuePair>());
  }
  validateInputs();
}","void setConnectionProperties(){
  Properties props=new Properties();
  currentProvider=null;
  if (useModelCheckBox.getSelection()) {
    if (selectedModelResource != null) {
      try {
        IConnectionInfoProvider provider=getProvider(selectedModelResource);
        if (provider != null) {
          currentProvider=provider;
          IConnectionProfile modelCP=provider.getConnectionProfile(selectedModelResource);
          props=provider.getTeiidRelatedProperties(modelCP);
          connRequiresPassword=provider.requiresPassword(provider.getConnectionProfile(selectedModelResource));
        }
      }
 catch (      ModelWorkspaceException e) {
        DqpUiConstants.UTIL.log(e);
      }
catch (      Exception e) {
      }
    }
  }
 else   if (profileWorker.getConnectionProfile() != null) {
    try {
      IConnectionInfoProvider provider=getProvider(profileWorker.getConnectionProfile());
      if (provider != null) {
        currentProvider=provider;
        props=provider.getTeiidRelatedProperties(profileWorker.getConnectionProfile());
        connRequiresPassword=provider.requiresPassword(profileWorker.getConnectionProfile());
      }
    }
 catch (    ModelWorkspaceException e) {
      DqpUiConstants.UTIL.log(e);
    }
catch (    Exception e) {
      DqpUiConstants.UTIL.log(e);
    }
  }
  if (props != null && !props.isEmpty()) {
    teiidDataSourceProperties=props;
    Collection<StringKeyValuePair> propsColl=new ArrayList<StringKeyValuePair>();
    for (    Object key : props.keySet()) {
      String keyStr=(String)key;
      String value=props.getProperty((String)key);
      if (keyStr.equalsIgnoreCase(PASSWORD)) {
        value=HIDDEN_PASSWORD;
      }
      propsColl.add(new StringKeyValuePair(keyStr,value));
    }
    propsViewer.setInput(propsColl);
  }
 else {
    teiidDataSourceProperties.clear();
    propsViewer.setInput(new ArrayList<StringKeyValuePair>());
  }
  validateInputs();
}",0.9437772925764192
102185,"public TeiidDataSourceInfo getTeiidDataSourceInfo(){
  TeiidDataSourceInfo info=new TeiidDataSourceInfo(dataSourceName,dataSourceName,teiidDataSourceProperties,currentProvider);
  return info;
}","public TeiidDataSourceInfo getTeiidDataSourceInfo(){
  TeiidDataSourceInfo info=new TeiidDataSourceInfo(dataSourceName,dataSourceName,teiidDataSourceProperties,currentProvider,connRequiresPassword);
  return info;
}",0.9486552567237164
102186,"/** 
 * @param displayName
 * @param jndiName
 * @param properties
 * @param connectionInfoProvider
 */
public TeiidDataSourceInfo(String displayName,String jndiName,Properties properties,IConnectionInfoProvider connectionInfoProvider){
  super();
  this.displayName=displayName;
  this.jndiName=jndiName;
  this.properties=properties;
  this.connectionInfoProvider=connectionInfoProvider;
}","/** 
 * @param displayName
 * @param jndiName
 * @param properties
 * @param connectionInfoProvider
 * @param requiresPassword
 */
public TeiidDataSourceInfo(String displayName,String jndiName,Properties properties,IConnectionInfoProvider connectionInfoProvider,boolean requiresPassword){
  super();
  this.displayName=displayName;
  this.jndiName=jndiName;
  this.properties=properties;
  this.connectionInfoProvider=connectionInfoProvider;
  this.requiresPassword=requiresPassword;
}",0.8926940639269406
102187,"@Override public void fillContextMenu(IMenuManager manager){
  List<Object> selectedObjs=getSelectedObjects();
  manager.removeAll();
  manager.add(new Separator());
  manager.add(newServerAction);
  manager.add(refreshAction);
  manager.add(new Separator());
  if (selectedObjs == null || selectedObjs.isEmpty()) {
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  ITeiidServer teiidServer=null;
  if (selectedObjs.size() == 1) {
    Object selection=selectedObjs.get(0);
    teiidServer=RuntimeAssistant.adapt(selection,ITeiidServer.class);
    if (teiidServer != null) {
      boolean teiidServerConnected=teiidServer.isConnected();
      if (this.setDefaultServerAction.isEnabled()) {
        manager.add(this.setDefaultServerAction);
      }
      if (teiidServerConnected) {
        manager.add(this.disconnectAction);
      }
      if (teiidServerConnected) {
        manager.add(this.createDataSourceAction);
      }
      manager.add(new Separator());
      manager.add(this.editServerAction);
      manager.add(new Separator());
    }
    if (RuntimeAssistant.adapt(selection,ITeiidDataSource.class) != null) {
      manager.add(this.deleteDataSourceAction);
      manager.add(new Separator());
    }
    if (RuntimeAssistant.adapt(selection,ITeiidVdb.class) != null) {
      ITeiidVdb teiidVdb=RuntimeAssistant.adapt(selection,ITeiidVdb.class);
      this.executeVdbAction.setEnabled(teiidVdb.isActive());
      manager.add(this.executeVdbAction);
      manager.add(new Separator());
      manager.add(this.undeployVdbAction);
    }
    if (selection instanceof DataSourcesFolder) {
      manager.add(this.createDataSourceAction);
    }
  }
 else {
    boolean allDataSources=true;
    for (    Object obj : selectedObjs) {
      if (RuntimeAssistant.adapt(obj,ITeiidDataSource.class) == null) {
        allDataSources=false;
        break;
      }
    }
    if (allDataSources) {
      manager.add(this.deleteDataSourceAction);
    }
    boolean allVdbs=true;
    for (    Object obj : selectedObjs) {
      if (RuntimeAssistant.adapt(obj,ITeiidVdb.class) == null) {
        allVdbs=false;
        break;
      }
    }
    if (allVdbs) {
      manager.add(this.undeployVdbAction);
    }
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  }
}","@Override public void fillContextMenu(IMenuManager manager){
  List<Object> selectedObjs=getSelectedObjects();
  manager.removeAll();
  manager.add(new Separator());
  manager.add(newServerAction);
  manager.add(refreshAction);
  manager.add(new Separator());
  if (selectedObjs == null || selectedObjs.isEmpty()) {
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  ITeiidServer teiidServer=null;
  if (selectedObjs.size() == 1) {
    Object selection=selectedObjs.get(0);
    teiidServer=RuntimeAssistant.adapt(selection,ITeiidServer.class);
    if (teiidServer != null) {
      boolean teiidServerConnected=teiidServer.isConnected();
      if (this.setDefaultServerAction.isEnabled()) {
        manager.add(this.setDefaultServerAction);
      }
      if (teiidServerConnected) {
        manager.add(this.disconnectAction);
      }
      manager.add(new Separator());
      manager.add(this.editServerAction);
      manager.add(new Separator());
      if (teiidServerConnected && selection instanceof DataSourcesFolder) {
        manager.add(this.createDataSourceAction);
      }
    }
    if (RuntimeAssistant.adapt(selection,ITeiidDataSource.class) != null) {
      manager.add(this.deleteDataSourceAction);
      manager.add(new Separator());
    }
    if (RuntimeAssistant.adapt(selection,ITeiidVdb.class) != null) {
      ITeiidVdb teiidVdb=RuntimeAssistant.adapt(selection,ITeiidVdb.class);
      this.executeVdbAction.setEnabled(teiidVdb.isActive());
      manager.add(this.executeVdbAction);
      manager.add(new Separator());
      manager.add(this.undeployVdbAction);
    }
  }
 else {
    boolean allDataSources=true;
    for (    Object obj : selectedObjs) {
      if (RuntimeAssistant.adapt(obj,ITeiidDataSource.class) == null) {
        allDataSources=false;
        break;
      }
    }
    if (allDataSources) {
      manager.add(this.deleteDataSourceAction);
    }
    boolean allVdbs=true;
    for (    Object obj : selectedObjs) {
      if (RuntimeAssistant.adapt(obj,ITeiidVdb.class) == null) {
        allVdbs=false;
        break;
      }
    }
    if (allVdbs) {
      manager.add(this.undeployVdbAction);
    }
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  }
}",0.9181619256017506
102188,"@Override protected void synchronizeExtendedUI(){
  generalPropertiesTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.TABLE,getRelationalReference().getModelType(),Status.OK_STATUS));
  this.parametersViewer.getTable().removeAll();
  IStatus maxStatus=Status.OK_STATUS;
  for (  RelationalParameter row : getRelationalReference().getParameters()) {
    if (row.getStatus().getSeverity() > maxStatus.getSeverity()) {
      maxStatus=row.getStatus();
    }
    this.parametersViewer.add(row);
  }
  parametersTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.PARAMETER,getRelationalReference().getModelType(),maxStatus));
  if (!this.getRelationalReference().isSourceFunction()) {
    if (this.getRelationalReference().getResultSet() == null) {
      if (WidgetUtil.widgetValueChanged(includeResultSetCB,false)) {
        this.includeResultSetCB.setSelection(false);
      }
      this.resultSetNameText.setEnabled(false);
      if (WidgetUtil.widgetValueChanged(resultSetNameText,EMPTY_STRING)) {
        this.resultSetNameText.setText(EMPTY_STRING);
      }
      this.columnsViewer.getTable().removeAll();
      this.columnsViewer.getTable().setEnabled(false);
      this.resultSetTab.setImage(UiPlugin.getDefault().getImage(UiConstants.Images.TABLE_ICON));
    }
 else {
      this.columnsViewer.getTable().setEnabled(true);
      if (WidgetUtil.widgetValueChanged(includeResultSetCB,true)) {
        this.includeResultSetCB.setSelection(true);
      }
      this.resultSetNameText.setEnabled(true);
      if (this.getRelationalReference().getResultSet().getName() != null && WidgetUtil.widgetValueChanged(resultSetNameText,this.getRelationalReference().getResultSet().getName())) {
        this.resultSetNameText.setText(this.getRelationalReference().getResultSet().getName());
      }
      this.columnsViewer.getTable().removeAll();
      if (!this.getRelationalReference().getResultSet().getColumns().isEmpty()) {
        for (        RelationalColumn column : this.getRelationalReference().getResultSet().getColumns()) {
          this.columnsViewer.add(column);
        }
      }
      resultSetTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.TABLE,getRelationalReference().getResultSet().getModelType(),this.getRelationalReference().getResultSet().getStatus()));
    }
    if (this.getRelationalReference().isFunction()) {
      if (this.getRelationalReference().getUdfJarPath() != null) {
        this.udfJarPathText.setText(this.getRelationalReference().getUdfJarPath());
      }
    }
  }
}","@Override protected void synchronizeExtendedUI(){
  generalPropertiesTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.TABLE,getRelationalReference().getModelType(),Status.OK_STATUS));
  this.parametersViewer.getTable().removeAll();
  IStatus maxStatus=Status.OK_STATUS;
  for (  RelationalParameter row : getRelationalReference().getParameters()) {
    if (row.getStatus().getSeverity() > maxStatus.getSeverity()) {
      maxStatus=row.getStatus();
    }
    this.parametersViewer.add(row);
  }
  parametersTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.PARAMETER,getRelationalReference().getModelType(),maxStatus));
  if (!this.getRelationalReference().isSourceFunction()) {
    if (this.getRelationalReference().getResultSet() == null) {
      if (WidgetUtil.widgetValueChanged(includeResultSetCB,false)) {
        this.includeResultSetCB.setSelection(false);
        this.addColumnButton.setEnabled(false);
      }
      this.resultSetNameText.setEnabled(false);
      if (WidgetUtil.widgetValueChanged(resultSetNameText,EMPTY_STRING)) {
        this.resultSetNameText.setText(EMPTY_STRING);
      }
      this.columnsViewer.getTable().removeAll();
      this.columnsViewer.getTable().setEnabled(false);
      this.resultSetTab.setImage(UiPlugin.getDefault().getImage(UiConstants.Images.TABLE_ICON));
    }
 else {
      this.columnsViewer.getTable().setEnabled(true);
      if (WidgetUtil.widgetValueChanged(includeResultSetCB,true)) {
        this.includeResultSetCB.setSelection(true);
      }
      this.resultSetNameText.setEnabled(true);
      if (this.getRelationalReference().getResultSet().getName() != null && WidgetUtil.widgetValueChanged(resultSetNameText,this.getRelationalReference().getResultSet().getName())) {
        this.resultSetNameText.setText(this.getRelationalReference().getResultSet().getName());
      }
      this.columnsViewer.getTable().removeAll();
      if (!this.getRelationalReference().getResultSet().getColumns().isEmpty()) {
        for (        RelationalColumn column : this.getRelationalReference().getResultSet().getColumns()) {
          this.columnsViewer.add(column);
        }
      }
      resultSetTab.setImage(RelationalUiUtil.getRelationalImage(TYPES.TABLE,getRelationalReference().getResultSet().getModelType(),this.getRelationalReference().getResultSet().getStatus()));
    }
    if (this.getRelationalReference().isFunction()) {
      if (this.getRelationalReference().getUdfJarPath() != null) {
        this.udfJarPathText.setText(this.getRelationalReference().getUdfJarPath());
      }
    }
  }
}",0.9905660377358492
102189,"private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}","private Composite createResultSetPanel(Composite parent){
  Composite thePanel=WidgetFactory.createPanel(parent,SWT.NONE,1,2);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(thePanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(thePanel);
  this.includeResultSetCB=new Button(thePanel,SWT.CHECK | SWT.RIGHT);
  GridDataFactory.fillDefaults().align(SWT.LEFT,SWT.CENTER).applyTo(this.includeResultSetCB);
  this.includeResultSetCB.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.INCLUDE));
  this.includeResultSetCB.setToolTipText(Messages.includeResultSetTooltip);
  this.includeResultSetCB.addSelectionListener(new SelectionAdapter(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
 */
    @Override public void widgetSelected(    SelectionEvent e){
      if (includeResultSetCB.getSelection()) {
        if (getRelationalReference().getResultSet() == null) {
          RelationalProcedureResultSet resultSet=new RelationalProcedureResultSet();
          if (resultSetNameText.getText() != null) {
            resultSet.setName(resultSetNameText.getText());
          }
          getRelationalReference().setResultSet(resultSet);
        }
      }
 else {
        getRelationalReference().setResultSet(null);
      }
      handleInfoChanged();
    }
  }
);
  Composite namePanel=WidgetFactory.createPanel(thePanel,SWT.NONE,2,2);
  GridLayoutFactory.fillDefaults().numColumns(2).applyTo(namePanel);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(namePanel);
  Label label=new Label(namePanel,SWT.NONE | SWT.RIGHT);
  label.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.NAME));
  GridDataFactory.fillDefaults().applyTo(label);
  this.resultSetNameText=new Text(namePanel,SWT.BORDER | SWT.SINGLE);
  this.resultSetNameText.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_BLUE));
  GridDataFactory.fillDefaults().grab(true,false).minSize(50,SWT.DEFAULT).applyTo(this.resultSetNameText);
  this.resultSetNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      String value=resultSetNameText.getText();
      if (value == null) {
        value=EMPTY_STRING;
      }
      if (getRelationalReference().getResultSet() != null) {
        RelationalProcedureResultSet resultSet=getRelationalReference().getResultSet();
        resultSet.setName(value);
      }
      handleInfoChanged();
    }
  }
);
  Composite buttonPanel=WidgetFactory.createPanel(thePanel,SWT.NONE,1,4);
  GridLayoutFactory.fillDefaults().numColumns(4).applyTo(buttonPanel);
  GridDataFactory.fillDefaults().span(2,1).applyTo(buttonPanel);
  addColumnButton=new Button(buttonPanel,SWT.PUSH);
  addColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.ADD));
  GridDataFactory.fillDefaults().applyTo(addColumnButton);
  addColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getRelationalReference().getResultSet().createColumn();
      handleInfoChanged();
    }
  }
);
  this.addColumnButton.setEnabled(false);
  deleteColumnButton=new Button(buttonPanel,SWT.PUSH);
  deleteColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.DELETE));
  GridDataFactory.fillDefaults().applyTo(deleteColumnButton);
  deleteColumnButton.setEnabled(false);
  deleteColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn column=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          column=(RelationalColumn)obj;
          break;
        }
      }
      if (column != null) {
        getRelationalReference().getResultSet().removeColumn(column);
        deleteColumnButton.setEnabled(false);
        handleInfoChanged();
      }
    }
  }
);
  upColumnButton=new Button(buttonPanel,SWT.PUSH);
  upColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_UP));
  GridDataFactory.fillDefaults().applyTo(upColumnButton);
  upColumnButton.setEnabled(false);
  upColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnUp(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex - 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  downColumnButton=new Button(buttonPanel,SWT.PUSH);
  downColumnButton.setText(UILabelUtil.getLabel(UiLabelConstants.LABEL_IDS.MOVE_DOWN));
  GridDataFactory.fillDefaults().applyTo(downColumnButton);
  downColumnButton.setEnabled(false);
  downColumnButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RelationalColumn info=null;
      IStructuredSelection selection=(IStructuredSelection)columnsViewer.getSelection();
      for (      Object obj : selection.toArray()) {
        if (obj instanceof RelationalColumn) {
          info=(RelationalColumn)obj;
          break;
        }
      }
      if (info != null) {
        int selectedIndex=columnsViewer.getTable().getSelectionIndex();
        getRelationalReference().getResultSet().moveColumnDown(info);
        handleInfoChanged();
        columnsViewer.getTable().select(selectedIndex + 1);
        downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(info));
        upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(info));
      }
    }
  }
);
  Table columnTable=new Table(thePanel,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  columnTable.setHeaderVisible(true);
  columnTable.setLinesVisible(true);
  columnTable.setLayout(new TableLayout());
  this.columnsViewer=new TableViewer(columnTable);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,100).applyTo(this.columnsViewer.getControl());
  TableViewerColumn column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.columnNameLabel + ""String_Node_Str"");
  column.setEditingSupport(new ColumnNameEditingSupport(this.columnsViewer));
  column.setLabelProvider(new ColumnDataLabelProvider(0));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.dataTypeLabel + ""String_Node_Str"");
  column.setLabelProvider(new ColumnDataLabelProvider(1));
  column.setEditingSupport(new DatatypeEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  column=new TableViewerColumn(this.columnsViewer,SWT.LEFT);
  column.getColumn().setText(Messages.lengthLabel);
  column.setLabelProvider(new ColumnDataLabelProvider(2));
  column.setEditingSupport(new ColumnWidthEditingSupport(this.columnsViewer));
  column.getColumn().pack();
  if (this.getRelationalReference().getResultSet() != null) {
    for (    RelationalColumn row : this.getRelationalReference().getResultSet().getColumns()) {
      this.columnsViewer.add(row);
    }
  }
  this.columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)event.getSelection();
      if (sel.isEmpty()) {
        deleteColumnButton.setEnabled(false);
        upColumnButton.setEnabled(false);
        downColumnButton.setEnabled(false);
      }
 else {
        boolean enable=true;
        Object[] objs=sel.toArray();
        RelationalColumn columnInfo=null;
        for (        Object obj : objs) {
          if (!(obj instanceof RelationalColumn)) {
            enable=false;
            break;
          }
 else {
            columnInfo=(RelationalColumn)obj;
          }
        }
        if (objs.length == 0) {
          enable=false;
        }
        deleteColumnButton.setEnabled(enable);
        if (enable) {
          upColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnUp(columnInfo));
          downColumnButton.setEnabled(getRelationalReference().getResultSet().canMoveColumnDown(columnInfo));
        }
      }
    }
  }
);
  return thePanel;
}",0.9933610892314616
102190,"private void setUiState(){
  if (getRelationalReference().isFunction()) {
    boolean functionState=true;
    if (this.deterministicCB != null)     this.deterministicCB.setEnabled(functionState);
    if (this.returnsNullCB != null)     this.returnsNullCB.setEnabled(functionState);
    if (this.variableArgsCB != null)     this.variableArgsCB.setEnabled(functionState);
    if (this.aggregateCB != null) {
      this.aggregateCB.setEnabled(functionState);
      boolean aggregateState=functionState;
      if (aggregateState) {
        aggregateState=aggregateCB.getSelection();
      }
      if (this.allowsDistinctCB != null)       this.allowsDistinctCB.setEnabled(aggregateState);
      if (this.allowsOrderByCB != null)       this.allowsOrderByCB.setEnabled(aggregateState);
      if (this.analyticCB != null)       this.analyticCB.setEnabled(aggregateState);
      if (this.decomposableCB != null)       this.decomposableCB.setEnabled(aggregateState);
      if (this.useDistinctRowsCB != null)       this.useDistinctRowsCB.setEnabled(aggregateState);
    }
  }
}","private void setUiState(){
  if (getRelationalReference().isFunction()) {
    boolean functionState=true;
    if (this.deterministicCB != null)     this.deterministicCB.setEnabled(functionState);
    if (this.returnsNullCB != null)     this.returnsNullCB.setEnabled(functionState);
    if (this.variableArgsCB != null)     this.variableArgsCB.setEnabled(functionState);
    if (this.aggregateCB != null) {
      this.aggregateCB.setEnabled(functionState);
      boolean aggregateState=functionState;
      if (aggregateState) {
        aggregateState=aggregateCB.getSelection();
      }
      if (this.allowsDistinctCB != null)       this.allowsDistinctCB.setEnabled(aggregateState);
      if (this.allowsOrderByCB != null)       this.allowsOrderByCB.setEnabled(aggregateState);
      if (this.analyticCB != null)       this.analyticCB.setEnabled(aggregateState);
      if (this.decomposableCB != null)       this.decomposableCB.setEnabled(aggregateState);
      if (this.useDistinctRowsCB != null)       this.useDistinctRowsCB.setEnabled(aggregateState);
    }
  }
 else {
    if (this.addColumnButton != null && this.includeResultSetCB != null) {
      boolean enable=this.includeResultSetCB.getSelection();
      this.addColumnButton.setEnabled(enable);
      if (!enable) {
        this.deleteColumnButton.setEnabled(false);
        this.downColumnButton.setEnabled(false);
        this.upColumnButton.setEnabled(false);
      }
    }
  }
}",0.8498606133014736
102191,"private void launchGuidesAction(String actionId){
  String guideId=actionGroupCombo.getText();
  Properties properties=propertiesManager.getProperties(guideId);
  AdvisorActionFactory.executeAction(actionId,properties,true);
}","private void launchGuidesAction(String actionId){
  String guideId=actionGroupCombo.getText();
  Properties properties=propertiesManager.getProperties(guideId);
  if (properties != null && !properties.isEmpty()) {
    cleanProperties(properties);
  }
  AdvisorActionFactory.executeAction(actionId,properties,true);
}",0.8339483394833949
102192,"@Override public void setProperties(Properties props){
  this.designerProperties=props;
  if (this.folder == null) {
    IContainer project=DesignerPropertiesUtil.getProject(designerProperties);
    IContainer srcFolder=DesignerPropertiesUtil.getSourcesFolder(this.designerProperties);
    if (srcFolder != null) {
      setFolder(srcFolder);
    }
 else     if (project != null) {
      setFolder(project);
    }
  }
  if (this.connectionProfile == null) {
    String profileName=DesignerPropertiesUtil.getConnectionProfileName(this.designerProperties);
    if (profileName != null && !profileName.isEmpty()) {
      srcPg.selectConnectionProfile(profileName);
    }
  }
  if (this.designerProperties != null && !this.openProjectExists) {
    DesignerPropertiesUtil.setProjectStatus(this.designerProperties,IPropertiesContext.NO_OPEN_PROJECT);
  }
}","@Override public void setProperties(Properties props){
  this.designerProperties=props;
  if (this.folder == null) {
    IContainer project=DesignerPropertiesUtil.getProject(designerProperties);
    IContainer srcFolder=DesignerPropertiesUtil.getSourcesFolder(this.designerProperties);
    if (srcFolder != null) {
      setFolder(srcFolder);
    }
 else     if (project != null) {
      setFolder(project);
    }
  }
  if (this.connectionProfile == null) {
    String profileName=DesignerPropertiesUtil.getConnectionProfileName(this.designerProperties);
    if (profileName != null && !profileName.isEmpty()) {
      srcPg.selectConnectionProfile(profileName);
    }
  }
}",0.8837820091923835
102193,"@Override public boolean finish(){
  final TeiidXmlFileImportProcessor processor=new TeiidXmlFileImportProcessor(getFileInfo(),this.getShell());
  UiUtil.runInSwtThread(new Runnable(){
    @Override public void run(){
      processor.execute();
    }
  }
,false);
  if (this.designerProperties != null) {
    DesignerPropertiesUtil.setSourceModelName(this.designerProperties,getFileInfo().getSourceModelName());
    DesignerPropertiesUtil.setViewModelName(this.designerProperties,getFileInfo().getViewModelName());
  }
  return true;
}","@Override public boolean finish(){
  final TeiidXmlFileImportProcessor processor=new TeiidXmlFileImportProcessor(getFileInfo(),this.getShell());
  UiUtil.runInSwtThread(new Runnable(){
    @Override public void run(){
      processor.execute();
    }
  }
,false);
  if (getDesignerProperties() != null) {
    DesignerPropertiesUtil.setSourceModelName(getDesignerProperties(),getFileInfo().getSourceModelName());
    DesignerPropertiesUtil.setViewModelName(getDesignerProperties(),getFileInfo().getViewModelName());
  }
  return true;
}",0.8710280373831776
102194,"@Override protected void updateForProperties(){
  if (this.designerProperties == null || this.designerProperties.isEmpty()) {
    return;
  }
  IContainer project=DesignerPropertiesUtil.getProject(designerProperties);
  IContainer srcFolderResrc=DesignerPropertiesUtil.getSourcesFolder(this.designerProperties);
  IContainer viewFolderResrc=DesignerPropertiesUtil.getViewsFolder(this.designerProperties);
  if (srcFolderResrc != null) {
    getFileInfo().setSourceModelLocation(srcFolderResrc.getFullPath());
  }
 else   if (project != null) {
    getFileInfo().setSourceModelLocation(project.getFullPath());
  }
  if (viewFolderResrc != null) {
    getFileInfo().setViewModelLocation(viewFolderResrc.getFullPath());
  }
 else   if (project != null) {
    getFileInfo().setViewModelLocation(project.getFullPath());
  }
  String profileName=DesignerPropertiesUtil.getConnectionProfileName(this.designerProperties);
  if (profileName != null && !profileName.isEmpty()) {
    sourcePage.setDesignerProperties(this.designerProperties);
  }
  this.optionsPage.setDesignerProperties(this.designerProperties);
  if (!openProjectExists()) {
    DesignerPropertiesUtil.setProjectStatus(this.designerProperties,IPropertiesContext.NO_OPEN_PROJECT);
  }
}","@Override protected void updateForProperties(){
  Properties desProps=getDesignerProperties();
  if (desProps == null || desProps.isEmpty()) {
    return;
  }
  IContainer project=DesignerPropertiesUtil.getProject(getDesignerProperties());
  IContainer srcFolderResrc=DesignerPropertiesUtil.getSourcesFolder(desProps);
  IContainer viewFolderResrc=DesignerPropertiesUtil.getViewsFolder(desProps);
  if (srcFolderResrc != null) {
    getFileInfo().setSourceModelLocation(srcFolderResrc.getFullPath());
  }
 else   if (project != null) {
    getFileInfo().setSourceModelLocation(project.getFullPath());
  }
  if (viewFolderResrc != null) {
    getFileInfo().setViewModelLocation(viewFolderResrc.getFullPath());
  }
 else   if (project != null) {
    getFileInfo().setViewModelLocation(project.getFullPath());
  }
  String profileName=DesignerPropertiesUtil.getConnectionProfileName(desProps);
  if (profileName != null && !profileName.isEmpty()) {
    sourcePage.setDesignerProperties(desProps);
  }
  this.optionsPage.setDesignerProperties(desProps);
  if (!openProjectExists()) {
    DesignerPropertiesUtil.setProjectStatus(desProps,IPropertiesContext.NO_OPEN_PROJECT);
  }
}",0.8560794044665012
102195,"private void handleBrowseWorkspaceForObjectPressed(){
  ModelWorkspaceDialog sdDialog=createProjectSelector();
  sdDialog.addFilter(new ClosedProjectFilter());
  sdDialog.open();
  if (sdDialog.getReturnCode() == Window.OK) {
    Object[] selections=sdDialog.getResult();
    IProject selectedProject=(IProject)selections[0];
    if (this.project != null && selectedProject != null && selectedProject.getName().equals(this.project.getName())) {
      return;
    }
    this.designerProperties.clear();
    this.project=selectedProject;
    String pName=(this.project != null) ? this.project.getName() : ""String_Node_Str"";
    this.selectedProjectText.setText(pName);
    DesignerPropertiesUtil.setProjectName(this.designerProperties,pName);
    if (this.project != null) {
      try {
        for (        IResource res : project.members()) {
          if (res instanceof IContainer) {
            if (((IContainer)res).getName().equalsIgnoreCase(""String_Node_Str"")) {
              DesignerPropertiesUtil.setSourcesFolderName(this.designerProperties,""String_Node_Str"");
            }
 else             if (((IContainer)res).getName().equalsIgnoreCase(""String_Node_Str"")) {
              DesignerPropertiesUtil.setViewsFolderName(this.designerProperties,""String_Node_Str"");
            }
          }
        }
      }
 catch (      CoreException ex) {
        ex.printStackTrace();
      }
    }
    updateState();
  }
}","private void handleBrowseWorkspaceForObjectPressed(){
  ModelWorkspaceDialog sdDialog=createProjectSelector();
  sdDialog.addFilter(new ClosedProjectFilter());
  sdDialog.open();
  if (sdDialog.getReturnCode() == Window.OK) {
    Object[] selections=sdDialog.getResult();
    IProject selectedProject=(IProject)selections[0];
    if (this.project != null && selectedProject != null && selectedProject.getName().equals(this.project.getName())) {
      return;
    }
    this.designerProperties.clear();
    this.project=selectedProject;
    String pName=(this.project != null) ? this.project.getName() : ""String_Node_Str"";
    this.selectedProjectText.setText(pName);
    DesignerPropertiesUtil.setProjectName(this.designerProperties,pName);
    if (this.project != null) {
      DesignerPropertiesUtil.setProjectStatus(this.designerProperties,IPropertiesContext.OPEN_PROJECTS_EXIST);
      try {
        for (        IResource res : project.members()) {
          if (res instanceof IContainer) {
            if (((IContainer)res).getName().equalsIgnoreCase(""String_Node_Str"")) {
              DesignerPropertiesUtil.setSourcesFolderName(this.designerProperties,""String_Node_Str"");
            }
 else             if (((IContainer)res).getName().equalsIgnoreCase(""String_Node_Str"")) {
              DesignerPropertiesUtil.setViewsFolderName(this.designerProperties,""String_Node_Str"");
            }
          }
        }
      }
 catch (      CoreException ex) {
        ex.printStackTrace();
      }
    }
    updateState();
  }
}",0.9623856319891562
102196,"public static void setProjectName(Properties properties,String projectName){
  properties.put(IPropertiesContext.KEY_PROJECT_NAME,projectName);
}","public static void setProjectName(Properties properties,String projectName){
  if (projectName == null) {
    properties.remove(IPropertiesContext.KEY_PROJECT_NAME);
  }
 else {
    properties.put(IPropertiesContext.KEY_PROJECT_NAME,projectName);
  }
}",0.6649874055415617
102197,"public static void setProjectStatus(Properties properties,String status){
  properties.put(IPropertiesContext.KEY_PROJECT_STATUS,status);
}","public static void setProjectStatus(Properties properties,String status){
  if (status == null) {
    properties.remove(IPropertiesContext.KEY_PROJECT_STATUS);
  }
 else {
    properties.put(IPropertiesContext.KEY_PROJECT_STATUS,status);
  }
}",0.6544502617801047
102198,"/** 
 * Launches the given wizard and initializes with the given selection
 * @param wizard
 * @param selection
 */
public static void launchWizard(final IWorkbenchWizard wizard,final IStructuredSelection selection,final Properties properties,boolean synchronous){
  if (synchronous) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        wizard.init(PlatformUI.getWorkbench(),selection);
        if (properties != null && wizard instanceof IPropertiesContext) {
          ((IPropertiesContext)wizard).setProperties(properties);
        }
        WizardDialog wd=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
        wd.create();
        String openProjectStatus=null;
        if (properties != null) {
          openProjectStatus=DesignerPropertiesUtil.getProjectStatus(properties);
        }
        if (openProjectStatus == null || !IPropertiesContext.NO_OPEN_PROJECT.equalsIgnoreCase(openProjectStatus)) {
          wd.setTitle(wizard.getWindowTitle());
          wd.open();
        }
      }
    }
);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        wizard.init(PlatformUI.getWorkbench(),selection);
        if (properties != null && wizard instanceof IPropertiesContext) {
          ((IPropertiesContext)wizard).setProperties(properties);
        }
        WizardDialog wd=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
        wd.create();
        String openProjectStatus=null;
        if (properties != null) {
          openProjectStatus=DesignerPropertiesUtil.getProjectStatus(properties);
        }
        if (openProjectStatus == null || !IPropertiesContext.NO_OPEN_PROJECT.equalsIgnoreCase(openProjectStatus)) {
          wd.setTitle(wizard.getWindowTitle());
          wd.open();
        }
      }
    }
);
  }
}","/** 
 * Launches the given wizard and initializes with the given selection
 * @param wizard
 * @param selection
 */
public static void launchWizard(final IWorkbenchWizard wizard,final IStructuredSelection selection,final Properties properties,boolean synchronous){
  if (synchronous) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        wizard.init(PlatformUI.getWorkbench(),selection);
        if (properties != null && wizard instanceof IPropertiesContext) {
          ((IPropertiesContext)wizard).setProperties(properties);
        }
        WizardDialog wd=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
        wd.create();
        String openProjectStatus=null;
        if (properties != null) {
          openProjectStatus=DesignerPropertiesUtil.getProjectStatus(properties);
        }
        if (wizard instanceof NewModelProjectWizard || openProjectStatus == null || !IPropertiesContext.NO_OPEN_PROJECT.equalsIgnoreCase(openProjectStatus)) {
          wd.setTitle(wizard.getWindowTitle());
          wd.open();
        }
      }
    }
);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        wizard.init(PlatformUI.getWorkbench(),selection);
        if (properties != null && wizard instanceof IPropertiesContext) {
          ((IPropertiesContext)wizard).setProperties(properties);
        }
        WizardDialog wd=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
        wd.create();
        String openProjectStatus=null;
        if (properties != null) {
          openProjectStatus=DesignerPropertiesUtil.getProjectStatus(properties);
        }
        if (openProjectStatus == null || !IPropertiesContext.NO_OPEN_PROJECT.equalsIgnoreCase(openProjectStatus)) {
          wd.setTitle(wizard.getWindowTitle());
          wd.open();
        }
      }
    }
);
  }
}",0.9888802689423326
102199,"/** 
 * Method to check if the uer's workspace has any Open Teiid Model Projects
 * @return true if one or more projects exists and are open
 */
public static boolean workspaceHasOpenModelProjects(){
  try {
    ModelProject[] mProjects=ModelWorkspaceManager.getModelWorkspaceManager().getModelWorkspace().getModelProjects();
    for (    ModelProject proj : mProjects) {
      if (proj.isOpen()) {
        return true;
      }
    }
  }
 catch (  ModelWorkspaceException ex) {
    ex.printStackTrace();
  }
  return false;
}","/** 
 * Method to check if the uer's workspace has any Open Teiid Model Projects
 * @return true if one or more projects exists and are open
 */
public static boolean workspaceHasOpenModelProjects(){
  return !getOpenModelProjects().isEmpty();
}",0.5766233766233766
102200,"/** 
 * @see org.eclipse.ui.wizards.newresource.BasicNewProjectResourceWizard#performFinish()
 * @since 4.0
 */
@Override public boolean performFinish(){
  IWizardPage mainPage=super.getPage(""String_Node_Str"");
  if (mainPage instanceof WizardNewProjectCreationPage) {
    String projName=((WizardNewProjectCreationPage)mainPage).getProjectName();
    final ValidationResultImpl result=new ValidationResultImpl(projName);
    checkInvalidChars(result,projName,UiConstants.NamingAttributes.VALID_PROJECT_CHARS);
    if (result.hasProblems()) {
      String eMsg=Util.getString(""String_Node_Str"") + '\n' + result.getProblems()[0].getMessage();
      String eTitle=Util.getString(""String_Node_Str"");
      MessageDialog.openWarning(getShell(),eTitle,eMsg);
      return false;
    }
    checkReservedProjName(result,projName);
    if (result.hasProblems()) {
      String eMsg=Util.getString(""String_Node_Str"") + '\n' + result.getProblems()[0].getMessage();
      String eTitle=Util.getString(""String_Node_Str"");
      MessageDialog.openWarning(getShell(),eTitle,eMsg);
      return false;
    }
  }
  super.performFinish();
  final IProject project=getNewProject();
  if (project == null)   return false;
  try {
    final IProjectDescription desc=project.getDescription();
    desc.setNatureIds(MODEL_NATURES);
    if (ProductCustomizerMgr.getInstance() != null) {
      String productName=ProductCustomizerMgr.getInstance().getProductName();
      if (!CoreStringUtil.isEmpty(productName)) {
        desc.setComment(productName + ""String_Node_Str"" + ModelerCore.ILicense.VERSION);
      }
    }
    project.setDescription(desc,null);
    if (designerProperties != null) {
      DesignerPropertiesUtil.setProjectName(designerProperties,project.getName());
    }
    createFolders(project);
    refreshModelExplorerResourceNavigatorTree();
    return true;
  }
 catch (  final CoreException err) {
    Util.log(IStatus.ERROR,err,err.getMessage());
    return false;
  }
}","/** 
 * @see org.eclipse.ui.wizards.newresource.BasicNewProjectResourceWizard#performFinish()
 * @since 4.0
 */
@Override public boolean performFinish(){
  IWizardPage mainPage=super.getPage(""String_Node_Str"");
  if (mainPage instanceof WizardNewProjectCreationPage) {
    String projName=((WizardNewProjectCreationPage)mainPage).getProjectName();
    final ValidationResultImpl result=new ValidationResultImpl(projName);
    checkInvalidChars(result,projName,UiConstants.NamingAttributes.VALID_PROJECT_CHARS);
    if (result.hasProblems()) {
      String eMsg=Util.getString(""String_Node_Str"") + '\n' + result.getProblems()[0].getMessage();
      String eTitle=Util.getString(""String_Node_Str"");
      MessageDialog.openWarning(getShell(),eTitle,eMsg);
      return false;
    }
    checkReservedProjName(result,projName);
    if (result.hasProblems()) {
      String eMsg=Util.getString(""String_Node_Str"") + '\n' + result.getProblems()[0].getMessage();
      String eTitle=Util.getString(""String_Node_Str"");
      MessageDialog.openWarning(getShell(),eTitle,eMsg);
      return false;
    }
  }
  super.performFinish();
  final IProject project=getNewProject();
  if (project == null)   return false;
  try {
    final IProjectDescription desc=project.getDescription();
    desc.setNatureIds(MODEL_NATURES);
    if (ProductCustomizerMgr.getInstance() != null) {
      String productName=ProductCustomizerMgr.getInstance().getProductName();
      if (!CoreStringUtil.isEmpty(productName)) {
        desc.setComment(productName + ""String_Node_Str"" + ModelerCore.ILicense.VERSION);
      }
    }
    project.setDescription(desc,null);
    if (designerProperties != null) {
      DesignerPropertiesUtil.setProjectName(designerProperties,project.getName());
      DesignerPropertiesUtil.setProjectStatus(this.designerProperties,IPropertiesContext.OPEN_PROJECTS_EXIST);
    }
    createFolders(project);
    refreshModelExplorerResourceNavigatorTree();
    return true;
  }
 catch (  final CoreException err) {
    Util.log(IStatus.ERROR,err,err.getMessage());
    return false;
  }
}",0.972585823660163
102201,"/** 
 * Get the SingleElementSymbol type. The ""type"" will be one of three things (1) null - When the SingleElementSymbol is not resolve / no type (2) Datatype - SingleElementSymbol is not resolved - Datatype of the SqlColumn (3) java class type - SingleElementSymbol is IExpression, etc, type is Class
 * @param symbol the SingleElementSymbol
 * @return the symbols type
 */
public static Object getElementSymbolType(IExpression symbol){
  Object datatype=null;
  if (symbol instanceof IAliasSymbol) {
    symbol=((IAliasSymbol)symbol).getSymbol();
  }
  if (symbol instanceof IElementSymbol) {
    IElementSymbol eSymbol=(IElementSymbol)symbol;
    Object idObj=eSymbol.getMetadataID();
    if (idObj instanceof MetadataRecord) {
      EObject recordEObj=(EObject)((MetadataRecord)idObj).getEObject();
      if (recordEObj != null && TransformationHelper.isSqlColumn(recordEObj)) {
        SqlColumnAspect columnAspect=((SqlColumnAspect)AspectManager.getSqlAspect(recordEObj));
        datatype=columnAspect.getDatatype(recordEObj);
      }
    }
 else     if (idObj instanceof IMetadataID) {
      datatype=((IMetadataID)idObj).getType();
    }
 else     if (idObj == null) {
      datatype=eSymbol.getType();
    }
  }
 else   if (symbol instanceof IExpressionSymbol) {
    IExpressionSymbol exSymbol=(IExpressionSymbol)symbol;
    datatype=exSymbol.getType();
  }
  return datatype;
}","/** 
 * Get the SingleElementSymbol type. The ""type"" will be one of three things (1) null - When the SingleElementSymbol is not resolve / no type (2) Datatype - SingleElementSymbol is not resolved - Datatype of the SqlColumn (3) java class type - SingleElementSymbol is IExpression, etc, type is Class
 * @param symbol the SingleElementSymbol
 * @return the symbols type
 */
public static Object getElementSymbolType(IExpression symbol){
  Object datatype=null;
  if (symbol instanceof IAliasSymbol) {
    symbol=((IAliasSymbol)symbol).getSymbol();
  }
  if (symbol instanceof IElementSymbol) {
    IElementSymbol eSymbol=(IElementSymbol)symbol;
    Object idObj=eSymbol.getMetadataID();
    if (idObj instanceof MetadataRecord) {
      EObject recordEObj=(EObject)((MetadataRecord)idObj).getEObject();
      if (recordEObj != null && TransformationHelper.isSqlColumn(recordEObj)) {
        SqlColumnAspect columnAspect=((SqlColumnAspect)AspectManager.getSqlAspect(recordEObj));
        datatype=columnAspect.getDatatype(recordEObj);
      }
    }
 else     if (idObj instanceof IMetadataID) {
      datatype=((IMetadataID)idObj).getType();
    }
 else     if (idObj == null) {
      datatype=eSymbol.getType();
    }
  }
 else {
    datatype=symbol.getType();
  }
  return datatype;
}",0.9292929292929292
102202,"public Collection<IFile> findRelatedResources(Relationship typeOfRelationship){
switch (typeOfRelationship) {
case DEPENDENT:
    return findDependentResources();
case DEPENDENCY:
  return findDependencyResources();
case ALL:
Set<IFile> files=new HashSet<IFile>();
files.addAll(findDependentResources());
files.addAll(findDependentResources());
return files;
}
throw new IllegalStateException();
}","public Collection<IFile> findRelatedResources(Relationship typeOfRelationship){
switch (typeOfRelationship) {
case DEPENDENT:
    return findDependentResources();
case DEPENDENCY:
  return findDependencyResources();
case ALL:
Set<IFile> files=new HashSet<IFile>();
files.addAll(findDependentResources());
files.addAll(findDependencyResources());
return files;
}
throw new IllegalStateException();
}",0.9962264150943396
102203,"/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=file.getRawLocation().makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n'};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        for (        char prefixChar : prefixChars) {
          int lineOffset=line.indexOf(prefixChar + sourceName + '.');
          if (lineOffset < 0)           continue;
          int offset=docOffset + lineOffset + 1;
          ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
          fileChangeRootEdit.addChild(edit);
        }
      }
      docOffset+=line.length() + 1;
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}","/** 
 * Calculate changes to user-generated sql
 * @param file
 * @param pathPair
 * @param textFileChange
 * @throws Exception 
 */
public static void calculateSQLChanges(IFile file,PathPair pathPair,TextFileChange textFileChange) throws Exception {
  if (!ModelUtil.isModelFile(file)) {
    return;
  }
  IPath sourcePath=new Path(pathPair.getSourcePath());
  IPath targetPath=new Path(pathPair.getTargetPath());
  String sourceName=sourcePath.removeFileExtension().lastSegment();
  String targetName=targetPath.removeFileExtension().lastSegment();
  if (sourceName.equals(targetName))   return;
  File nativeFile=file.getRawLocation().makeAbsolute().toFile();
  if (nativeFile == null || !nativeFile.exists())   throw new Exception(getString(""String_Node_Str"",file.getFullPath()));
  TextEdit fileChangeRootEdit=setRootEdit(textFileChange);
  BufferedReader reader=null;
  String line;
  int docOffset=0;
  char[] prefixChars={' ',',',';','\t','\n'};
  try {
    reader=new BufferedReader(new FileReader(nativeFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        for (        char prefixChar : prefixChars) {
          String toReplace=prefixChar + sourceName + '.';
          for (int lineOffset=line.indexOf(toReplace); lineOffset >= 0; lineOffset=line.indexOf(toReplace,lineOffset + 1)) {
            if (lineOffset < 0)             continue;
            int offset=docOffset + lineOffset + 1;
            ReplaceEdit edit=new ReplaceEdit(offset,sourceName.length(),targetName);
            fileChangeRootEdit.addChild(edit);
          }
        }
      }
      docOffset+=line.length() + 1;
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}",0.7444947209653092
102204,"@Override public RefactoringStatus checkFinalConditions(IProgressMonitor progressMonitor) throws OperationCanceledException {
  clearChanges();
  RefactoringStatus status=new RefactoringStatus();
  try {
    progressMonitor.beginTask(RefactorResourcesUtils.getString(""String_Node_Str""),2);
    for (    IResource resource : getResources()) {
      addChange(resource,new RenameResourceChange(resource.getFullPath(),getNewResourceName()));
      IPath absPath=resource.getRawLocation().makeAbsolute();
      IPath destination=absPath.removeLastSegments(1).append(getNewResourceName());
      String destinationPath=destination.toOSString();
      PathPair pathPair=new PathPair(absPath.toOSString(),destinationPath);
      RelatedResourceCallback callback=new RelatedResourceCallback(pathPair);
      if (ModelUtil.isModelFile(resource)) {
        try {
          TextFileChange textFileChange=new TextFileChange(resource.getName(),(IFile)resource);
          RefactorResourcesUtils.calculateSQLChanges((IFile)resource,pathPair,textFileChange);
          addChange(resource,textFileChange);
          RefactorResourcesUtils.calculateRelatedVdbResources(resource,status,callback);
        }
 catch (        Exception ex) {
          UiConstants.Util.log(ex);
          status.merge(RefactoringStatus.createFatalErrorStatus(ex.getMessage()));
        }
      }
      RefactorResourcesUtils.calculateRelatedResources(resource,status,callback,Relationship.DEPENDENT);
    }
  }
  finally {
    progressMonitor.done();
  }
  return status;
}","@Override public RefactoringStatus checkFinalConditions(IProgressMonitor progressMonitor) throws OperationCanceledException {
  clearChanges();
  RefactoringStatus status=new RefactoringStatus();
  try {
    progressMonitor.beginTask(RefactorResourcesUtils.getString(""String_Node_Str""),2);
    for (    IResource resource : getResources()) {
      addChange(resource,new RenameResourceChange(resource.getFullPath(),getNewResourceName()));
      IPath absPath=resource.getRawLocation().makeAbsolute();
      IPath destination=absPath.removeLastSegments(1).append(getNewResourceName());
      String destinationPath=destination.toOSString();
      PathPair pathPair=new PathPair(absPath.toOSString(),destinationPath);
      RelatedResourceCallback callback=new RelatedResourceCallback(pathPair);
      if (ModelUtil.isModelFile(resource)) {
        try {
          TextFileChange textFileChange=new TextFileChange(resource.getName(),(IFile)resource);
          RefactorResourcesUtils.calculateSQLChanges((IFile)resource,pathPair,textFileChange);
          if (textFileChange.getEdit() != null && textFileChange.getEdit().hasChildren()) {
            addChange(resource,textFileChange);
          }
          RefactorResourcesUtils.calculateRelatedVdbResources(resource,status,callback);
        }
 catch (        Exception ex) {
          UiConstants.Util.log(ex);
          status.merge(RefactoringStatus.createFatalErrorStatus(ex.getMessage()));
        }
      }
      RefactorResourcesUtils.calculateRelatedResources(resource,status,callback,Relationship.DEPENDENT);
    }
  }
  finally {
    progressMonitor.done();
  }
  return status;
}",0.966624685138539
102205,"/** 
 * @return <code>true</code> if a connection to this server exists and is working
 */
@Override public boolean isConnected(){
  if (!isParentConnected() && this.admin == null) {
    return false;
  }
  return ping().isOK();
}","/** 
 * @return <code>true</code> if a connection to this server exists and is working
 */
@Override public boolean isConnected(){
  if (!isParentConnected() || this.admin == null) {
    return false;
  }
  return ping().isOK();
}",0.991304347826087
102206,"/** 
 * @param iFile the model file
 * @param key the property key including ns prefix (i.e. core:vdb-name)
 * @return the string property value
 * @throws ModelWorkspaceException if problem finding model resource or finding property value
 */
public static String getModelAnnotationPropertyValue(final IFile iFile,final String key) throws ModelWorkspaceException {
  ModelResource mr=getModelResource(iFile,true);
  if (mr != null) {
    ResourceAnnotationHelper helper=new ResourceAnnotationHelper();
    return (String)helper.getPropertyValue(mr,key);
  }
  return null;
}","/** 
 * Get a Model Annotation property value
 * @param modelResource the model resource
 * @param propertyKey the property key including ns prefix (i.e. core:vdb-name)
 * @return the string property value
 * @throws ModelWorkspaceException if problem finding property value
 */
public static String getModelAnnotationPropertyValue(final ModelResource modelResource,final String propertyKey) throws ModelWorkspaceException {
  CoreArgCheck.isNotNull(modelResource,""String_Node_Str"");
  CoreArgCheck.isNotEmpty(propertyKey,""String_Node_Str"");
  ResourceAnnotationHelper helper=new ResourceAnnotationHelper();
  return (String)helper.getPropertyValue(modelResource,propertyKey);
}",0.7118914604948124
102207,"@Override public void run(){
  if (vdbModelEntry != null) {
    String transName=vdbModelEntry.getSourceInfo().getSource().getTranslatorName();
    SelectTranslatorDialog dialog=new SelectTranslatorDialog(Display.getCurrent().getActiveShell());
    ITeiidTranslator initialSelection=null;
    ITeiidServer defServer=getDefaultServer();
    if (defServer != null && defServer.isConnected()) {
      try {
        initialSelection=defServer.getTranslator(transName);
      }
 catch (      Exception e) {
        UTIL.log(IStatus.ERROR,e,UTIL.getString(""String_Node_Str"",transName));
      }
      dialog.setInitialSelection(initialSelection);
    }
    dialog.open();
    if (dialog.getReturnCode() == Window.OK) {
      Object result=dialog.getFirstResult();
      if (result != null && result instanceof ITeiidTranslator) {
        vdbModelEntry.setTranslatorName(0,((ITeiidTranslator)result).getName());
      }
    }
  }
}","@Override public void run(){
  if (vdbModelEntry != null) {
    String transName=vdbModelEntry.getSourceInfo().getSource(0).getTranslatorName();
    SelectTranslatorDialog dialog=new SelectTranslatorDialog(Display.getCurrent().getActiveShell());
    ITeiidTranslator initialSelection=null;
    ITeiidServer defServer=getDefaultServer();
    if (defServer != null && defServer.isConnected()) {
      try {
        initialSelection=defServer.getTranslator(transName);
      }
 catch (      Exception e) {
        UTIL.log(IStatus.ERROR,e,UTIL.getString(""String_Node_Str"",transName));
      }
      dialog.setInitialSelection(initialSelection);
    }
    dialog.open();
    if (dialog.getReturnCode() == Window.OK) {
      Object result=dialog.getFirstResult();
      if (result != null && result instanceof ITeiidTranslator) {
        vdbModelEntry.setTranslatorName(0,((ITeiidTranslator)result).getName());
      }
    }
  }
}",0.9994591671173608
102208,"/** 
 * @param modelEntry the model entry whose translator entry is being validated
 * @return <code>true</code> if model entry has a valid translator
 * @throws Exception
 */
private boolean hasValidTranslator(VdbModelEntry modelEntry) throws Exception {
  String translatorName=modelEntry.getSourceInfo().getSource().getTranslatorName();
  if (StringUtilities.isEmpty(translatorName)) {
    return false;
  }
  boolean isValid=(teiidServer.getTranslator(translatorName) != null);
  if (!isValid && !this.vdb.getTranslators().isEmpty()) {
    for (    TranslatorOverride override : this.vdb.getTranslators()) {
      if (override.getName().equalsIgnoreCase(translatorName)) {
        isValid=(teiidServer.getTranslator(override.getType()) != null);
        break;
      }
    }
  }
  return isValid;
}","/** 
 * @param modelEntry the model entry whose translator entry is being validated
 * @return <code>true</code> if model entry has a valid translator
 * @throws Exception
 */
private boolean hasValidTranslator(VdbModelEntry modelEntry) throws Exception {
  String translatorName=modelEntry.getSourceInfo().getSource(0).getTranslatorName();
  if (StringUtilities.isEmpty(translatorName)) {
    return false;
  }
  boolean isValid=(teiidServer.getTranslator(translatorName) != null);
  if (!isValid && !this.vdb.getTranslators().isEmpty()) {
    for (    TranslatorOverride override : this.vdb.getTranslators()) {
      if (override.getName().equalsIgnoreCase(translatorName)) {
        isValid=(teiidServer.getTranslator(override.getType()) != null);
        break;
      }
    }
  }
  return isValid;
}",0.9993769470404984
102209,"/** 
 * Test the jdbc connection
 * @param host
 * @param port
 * @param username
 * @param password
 * @return status as to the ping's success
 */
@Override public IStatus testJDBCPing(String host,String port,String username,String password){
  try {
    boolean testCausesConnect=false;
    if (admin == null) {
      connect();
      testCausesConnect=true;
    }
    admin.ping(PingType.JDBC);
    if (testCausesConnect) {
      disconnect();
    }
  }
 catch (  Exception e) {
    String msg=Util.getString(""String_Node_Str"",this);
    return new Status(IStatus.ERROR,PLUGIN_ID,msg,e);
  }
  return Status.OK_STATUS;
}","/** 
 * Test the jdbc connection
 * @param host
 * @param port
 * @param username
 * @param password
 * @return status as to the ping's success
 */
@Override public IStatus testJDBCPing(String host,String port,String username,String password){
  IStatus pingStatus=Status.OK_STATUS;
  try {
    boolean testCausesConnect=false;
    if (admin == null) {
      connect();
      testCausesConnect=true;
    }
    pingStatus=admin.ping(PingType.JDBC);
    if (testCausesConnect) {
      disconnect();
    }
  }
 catch (  Exception e) {
    String msg=Util.getString(""String_Node_Str"",this);
    return new Status(IStatus.ERROR,PLUGIN_ID,msg,e);
  }
  return pingStatus;
}",0.9410852713178296
102210,"void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      if (!this.getSourceInfo().isMultiSource()) {
        final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
        final ConnectionInfoHelper helper=new ConnectionInfoHelper();
        String translatorName=this.sourceInfo.getSource().getTranslatorName();
        if (CoreStringUtil.isEmpty(translatorName)) {
          final String translator=helper.getTranslatorName(mr);
          this.sourceInfo.getSource().setTranslatorName(translator == null ? EMPTY_STR : translator);
        }
        Properties translatorProps=helper.getTranslatorProperties(mr);
        if (!translatorProps.isEmpty()) {
          updateTranslatorOverrides(translatorProps);
        }
      }
    }
    if (containsUdf()) {
      updateUdfJars(model);
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      importVdbNames.clear();
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          java.net.URI uri=java.net.URI.create(importedModel.getURI().toString());
          IFile[] modelFiles=ModelerCore.getWorkspace().getRoot().findFilesForLocationURI(uri);
          final IPath name=modelFiles[0].getFullPath();
          final String importVdbName=ModelUtil.getModelAnnotationPropertyValue(modelFiles[0],VdbConstants.VDB_NAME_KEY);
          if (importVdbName != null) {
            importVdbNames.add(importVdbName);
          }
 else {
            VdbModelEntry importedEntry=null;
            for (            final VdbModelEntry entry : getVdb().getModelEntries()) {
              if (name.equals(entry.getName())) {
                importedEntry=entry;
                break;
              }
            }
            if (importedEntry == null)             importedEntry=getVdb().addModelEntry(name,monitor);
            imports.add(importedEntry);
            importedEntry.importedBy.add(this);
          }
        }
      }
      getVdb().registerImportVdbs(importVdbNames,this.getName().toString(),monitor);
      getVdb().synchronizeUdfJars(udfJars);
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}","void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      if (!this.getSourceInfo().isMultiSource()) {
        final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
        final ConnectionInfoHelper helper=new ConnectionInfoHelper();
        String translatorName=this.sourceInfo.getSource(0).getTranslatorName();
        if (CoreStringUtil.isEmpty(translatorName)) {
          final String translator=helper.getTranslatorName(mr);
          this.sourceInfo.getSource(0).setTranslatorName(translator == null ? EMPTY_STR : translator);
        }
        Properties translatorProps=helper.getTranslatorProperties(mr);
        if (!translatorProps.isEmpty()) {
          updateTranslatorOverrides(translatorProps);
        }
      }
    }
    if (containsUdf()) {
      updateUdfJars(model);
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      importVdbNames.clear();
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          java.net.URI uri=java.net.URI.create(importedModel.getURI().toString());
          IFile[] modelFiles=ModelerCore.getWorkspace().getRoot().findFilesForLocationURI(uri);
          final IPath name=modelFiles[0].getFullPath();
          final String importVdbName=ModelUtil.getModelAnnotationPropertyValue(modelFiles[0],VdbConstants.VDB_NAME_KEY);
          if (importVdbName != null) {
            importVdbNames.add(importVdbName);
          }
 else {
            VdbModelEntry importedEntry=null;
            for (            final VdbModelEntry entry : getVdb().getModelEntries()) {
              if (name.equals(entry.getName())) {
                importedEntry=entry;
                break;
              }
            }
            if (importedEntry == null)             importedEntry=getVdb().addModelEntry(name,monitor);
            imports.add(importedEntry);
            importedEntry.importedBy.add(this);
          }
        }
      }
      getVdb().registerImportVdbs(importVdbNames,this.getName().toString(),monitor);
      getVdb().synchronizeUdfJars(udfJars);
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}",0.9997091332169866
102211,"/** 
 * @param index
 * @param name
 */
public final void setTranslatorName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource().getTranslatorName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setTranslatorName(name);
}","/** 
 * @param index
 * @param name
 */
public final void setTranslatorName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource(index).getTranslatorName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setTranslatorName(name);
}",0.9937733499377336
102212,"void updateTranslatorOverrides(Properties props){
  if (this.sourceInfo.isMultiSource()) {
    return;
  }
  if (props.size() == 1 && ((String)props.keySet().toArray()[0]).equalsIgnoreCase(VdbConstants.Translator.NAME_KEY)) {
    return;
  }
  TranslatorOverride to=getTranslatorOverride();
  String oldTranslator=this.sourceInfo.getSource().getTranslatorName();
  String newTranslator=null;
  if (to == null) {
    String toName=null;
    if (!oldTranslator.startsWith(this.sourceInfo.getSource().getName())) {
      toName=this.sourceInfo.getSource().getName() + '_' + oldTranslator;
    }
    to=new TranslatorOverride(getVdb(),toName,oldTranslator,null);
    newTranslator=toName;
    this.sourceInfo.getSource().setTranslatorName(toName);
    getVdb().addTranslator(to,new NullProgressMonitor());
  }
  TranslatorOverrideProperty[] toProps=to.getProperties();
  Set<Object> keys=props.keySet();
  for (  Object nextKey : keys) {
    boolean existing=""String_Node_Str"".equals(nextKey);
    for (    TranslatorOverrideProperty toProp : toProps) {
      if (toProp.getDefinition().getId().equals(nextKey)) {
        toProp.setValue(props.getProperty((String)nextKey));
        existing=true;
        break;
      }
    }
    if (!existing) {
      to.addProperty(new TranslatorOverrideProperty(new TranslatorPropertyDefinition((String)nextKey,""String_Node_Str""),props.getProperty((String)nextKey)));
    }
  }
  getVdb().setModified(this,MODEL_TRANSLATOR,oldTranslator,newTranslator);
}","void updateTranslatorOverrides(Properties props){
  if (this.sourceInfo.isMultiSource()) {
    return;
  }
  if (props.size() == 1 && ((String)props.keySet().toArray()[0]).equalsIgnoreCase(VdbConstants.Translator.NAME_KEY)) {
    return;
  }
  TranslatorOverride to=getTranslatorOverride();
  String oldTranslator=this.sourceInfo.getSource(0).getTranslatorName();
  String newTranslator=null;
  if (to == null) {
    String toName=null;
    if (!oldTranslator.startsWith(this.sourceInfo.getSource(0).getName())) {
      toName=this.sourceInfo.getSource(0).getName() + '_' + oldTranslator;
    }
    to=new TranslatorOverride(getVdb(),toName,oldTranslator,null);
    newTranslator=toName;
    this.sourceInfo.getSource(0).setTranslatorName(toName);
    getVdb().addTranslator(to,new NullProgressMonitor());
  }
  TranslatorOverrideProperty[] toProps=to.getProperties();
  Set<Object> keys=props.keySet();
  for (  Object nextKey : keys) {
    boolean existing=""String_Node_Str"".equals(nextKey);
    for (    TranslatorOverrideProperty toProp : toProps) {
      if (toProp.getDefinition().getId().equals(nextKey)) {
        toProp.setValue(props.getProperty((String)nextKey));
        existing=true;
        break;
      }
    }
    if (!existing) {
      to.addProperty(new TranslatorOverrideProperty(new TranslatorPropertyDefinition((String)nextKey,""String_Node_Str""),props.getProperty((String)nextKey)));
    }
  }
  getVdb().setModified(this,MODEL_TRANSLATOR,oldTranslator,newTranslator);
}",0.9986577181208054
102213,"/** 
 * @param index
 * @param name
 */
public final void setSourceName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource().getName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setName(name);
}","/** 
 * @param index
 * @param name
 */
public final void setSourceName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource(index).getName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setName(name);
}",0.9933774834437086
102214,"/** 
 * @param index
 * @param name 
 */
public void setJndiName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource().getJndiName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setJndiName(name);
}","/** 
 * @param index
 * @param name 
 */
public void setJndiName(int index,String name){
  CoreArgCheck.isTrue(index < sourceInfo.getSourceCount(),""String_Node_Str"");
  if (StringUtilities.isEmpty(name))   name=null;
  String oldName=sourceInfo.getSource(index).getJndiName();
  if (StringUtilities.equals(name,oldName))   return;
  sourceInfo.getSource(index).setJndiName(name);
}",0.9933949801849404
102215,"/** 
 * @param index the source array index
 * @return the VdbSource instance if it exists in the sources map
 */
public VdbSource getSource(int index){
  if (!sources.isEmpty() && sources.size() < index) {
    for (int i=0; i < sources.size(); i++) {
      VdbSource source=sources.values().iterator().next();
      if (i == index)       return source;
    }
  }
  return null;
}","/** 
 * @param index the source array index
 * @return the VdbSource instance if it exists in the sources map
 */
public VdbSource getSource(int index){
  if (sources.isEmpty()) {
    add(DEFAULT_SOURCE_NAME,null,null);
  }
  if (index < sources.size()) {
    for (int i=0; i < sources.size(); i++) {
      VdbSource source=sources.values().iterator().next();
      if (i == index)       return source;
    }
  }
  return null;
}",0.9097651421508036
102216,"@Test public void shouldReflectJndiNameAsSimpleModelName() throws Exception {
  assertThat(entry.getSourceInfo().getSource().getJndiName(),is(modelResourceFileName));
}","@Test public void shouldReflectJndiNameAsSimpleModelName() throws Exception {
  assertThat(entry.getSourceInfo().getSource(0).getJndiName(),is(modelResourceFileName));
}",0.9970326409495548
102217,"@Test public void shouldReflectSourceNameAsSimpleModelName() throws Exception {
  assertThat(entry.getSourceInfo().getSource().getName(),is(modelResourceFileName));
}","@Test public void shouldReflectSourceNameAsSimpleModelName() throws Exception {
  assertThat(entry.getSourceInfo().getSource(0).getName(),is(modelResourceFileName));
}",0.996996996996997
102218,"@Override final public IStatus execute(IProgressMonitor monitor){
  problems.clear();
  try {
    final String msg=ModelerCore.Util.getString(""String_Node_Str"");
    IStatus result=new Status(IStatus.OK,PID,EXECUTE_SUCCEEDED,msg,null);
    final IStatus okayStatus=result;
    if (result.getSeverity() == IStatus.ERROR) {
      return result;
    }
    int severity=checkDependentResources(NOT_UNDO_REQUEST);
    if (severity < IStatus.ERROR) {
      result=modifyResource(this.getResource(),monitor);
      if (result == null || result.getSeverity() < IStatus.ERROR) {
        final Map refactoredPaths=getMovedResourcePathMap(false);
        result=refactorModelContents(monitor,refactoredPaths);
      }
      if (result == null || result.getSeverity() < IStatus.ERROR) {
        final Map refactoredPaths=getMovedResourcePathMap(false);
        result=refactorDependentResources(monitor,refactoredPaths);
      }
    }
 else {
      final String msg2=ModelerCore.Util.getString(""String_Node_Str"");
      return new Status(severity,PID,ERROR_READONLY_RESOURCE,msg2,null);
    }
    if (result.isOK()) {
      return okayStatus;
    }
    return result;
  }
  finally {
    if (monitor != null)     monitor.done();
  }
}","@Override final public IStatus execute(IProgressMonitor monitor){
  problems.clear();
  try {
    final String msg=ModelerCore.Util.getString(""String_Node_Str"");
    IStatus result=new Status(IStatus.OK,PID,EXECUTE_SUCCEEDED,msg,null);
    final IStatus okayStatus=result;
    if (result.getSeverity() == IStatus.ERROR) {
      return result;
    }
    int severity=checkDependentResources(NOT_UNDO_REQUEST);
    if (severity < IStatus.ERROR) {
      unloadDependentResources();
      result=modifyResource(this.getResource(),monitor);
      if (result == null || result.getSeverity() < IStatus.ERROR) {
        final Map refactoredPaths=getMovedResourcePathMap(false);
        result=refactorModelContents(monitor,refactoredPaths);
      }
      if (result == null || result.getSeverity() < IStatus.ERROR) {
        final Map refactoredPaths=getMovedResourcePathMap(false);
        result=refactorDependentResources(monitor,refactoredPaths);
      }
    }
 else {
      final String msg2=ModelerCore.Util.getString(""String_Node_Str"");
      return new Status(severity,PID,ERROR_READONLY_RESOURCE,msg2,null);
    }
    if (result.isOK()) {
      return okayStatus;
    }
    return result;
  }
 catch (  Exception ex) {
    return new Status(IStatus.ERROR,PID,ex.getMessage(),ex);
  }
 finally {
    if (monitor != null)     monitor.done();
  }
}",0.9517133956386292
102219,"private void validateMetaclasses(){
  final String[] metaclasses=getMed().getExtendedMetaclasses();
  ValidationStatus status=ModelExtensionDefinitionValidator.validateMetaclassNames(metaclasses,true);
  if (!status.isError()) {
    ExtendableMetaclassNameProvider provider=ExtensionPlugin.getInstance().getMetaclassNameProvider(getMed().getMetamodelUri());
    if (provider instanceof ModelTypeMetaclassNameFactory) {
      provider=((ModelTypeMetaclassNameFactory)provider).getProvider(getMed().getSupportedModelTypes());
    }
    OUTER:     for (    final String metaclass : metaclasses) {
      INNER:       for (      final String metaclassRoot : provider.getExtendableMetaclassRoots()) {
        boolean confirmed=confirmMetaclass(metaclass,provider,metaclassRoot);
        if (confirmed) {
          break INNER;
        }
 else {
          status=ValidationStatus.createErrorMessage(NLS.bind(Messages.metaclassNotFoundByProvider,metaclass));
          break OUTER;
        }
      }
    }
  }
  this.metaclassError.setStatus(status);
  updateMessage(this.metaclassError);
  validatePropertyDefinitions();
}","private void validateMetaclasses(){
  final String[] metaclasses=getMed().getExtendedMetaclasses();
  ValidationStatus status=ModelExtensionDefinitionValidator.validateMetaclassNames(metaclasses,true);
  if (!status.isError()) {
    ExtendableMetaclassNameProvider provider=ExtensionPlugin.getInstance().getMetaclassNameProvider(getMed().getMetamodelUri());
    if (provider instanceof ModelTypeMetaclassNameFactory) {
      provider=((ModelTypeMetaclassNameFactory)provider).getProvider(getMed().getSupportedModelTypes());
    }
    OUTER:     for (    final String metaclass : metaclasses) {
      boolean confirmed=false;
      INNER:       for (      final String metaclassRoot : provider.getExtendableMetaclassRoots()) {
        confirmed=confirmMetaclass(metaclass,provider,metaclassRoot);
        if (confirmed) {
          break INNER;
        }
      }
      if (!confirmed) {
        status=ValidationStatus.createErrorMessage(NLS.bind(Messages.metaclassNotFoundByProvider,metaclass));
        break OUTER;
      }
    }
  }
  this.metaclassError.setStatus(status);
  updateMessage(this.metaclassError);
  validatePropertyDefinitions();
}",0.962439239946973
102220,"/** 
 * Find an existing index that is a match for the supplied information, and optionally create one if needed (and the index should be created).
 * @param table
 * @param spec
 * @param tableNode
 * @param context
 * @param createIfRequired
 * @return
 */
protected Index findIndex(final Table table,final IndexSpec spec,final JdbcTable tableNode,final Context context,final boolean createIfRequired,List problems){
  final EObject tableOwner=table.eContainer();
  if (tableOwner != null) {
    List existingIndexes=null;
    if (tableOwner instanceof Catalog) {
      existingIndexes=((Catalog)tableOwner).getIndexes();
    }
 else     if (tableOwner instanceof Schema) {
      existingIndexes=((Schema)tableOwner).getIndexes();
    }
    final Iterator iter=existingIndexes.iterator();
    while (iter.hasNext()) {
      final Index index=(Index)iter.next();
      final boolean isMatch=isMatchingIndex(index,spec);
      if (isMatch) {
        setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
        return index;
      }
    }
  }
 else {
    final Resource resource=table.eResource();
    if (resource != null) {
      final Iterator iter=resource.getContents().iterator();
      while (iter.hasNext()) {
        final Object rootObj=iter.next();
        if (rootObj instanceof Index) {
          final Index index=(Index)rootObj;
          if (isMatchingIndex(index,spec)) {
            setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
            return index;
          }
        }
      }
    }
  }
  if (table instanceof BaseTable) {
    final String objectName=convertName(spec.indexName,context);
    final PrimaryKey pk=((BaseTable)table).getPrimaryKey();
    if (pk != null) {
      if (objectName.equals(pk.getName())) {
        return null;
      }
    }
  }
  final Index index=this.factory.createIndex();
  if (tableOwner != null) {
    if (tableOwner instanceof Catalog) {
      index.setCatalog((Catalog)tableOwner);
    }
 else     if (tableOwner instanceof Schema) {
      index.setSchema((Schema)tableOwner);
    }
  }
 else {
    final Resource resource=table.eResource();
    CoreArgCheck.isNotNull(resource);
    resource.getContents().add(index);
  }
  setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
  index.setUnique(!spec.nonUnique);
  index.getColumns().addAll(spec.columns);
  index.setFilterCondition(spec.filterCondition);
  return index;
}","/** 
 * Find an existing index that is a match for the supplied information, and optionally create one if needed (and the index should be created).
 * @param table
 * @param spec
 * @param tableNode
 * @param context
 * @param createIfRequired
 * @return
 */
protected Index findIndex(final Table table,final IndexSpec spec,final JdbcTable tableNode,final Context context,final boolean createIfRequired,List problems){
  final EObject tableOwner=table.eContainer();
  if (tableOwner != null) {
    List existingIndexes=null;
    if (tableOwner instanceof Catalog) {
      existingIndexes=((Catalog)tableOwner).getIndexes();
    }
 else     if (tableOwner instanceof Schema) {
      existingIndexes=((Schema)tableOwner).getIndexes();
    }
    final Iterator iter=existingIndexes.iterator();
    while (iter.hasNext()) {
      final Index index=(Index)iter.next();
      final boolean isMatch=isMatchingIndex(index,spec);
      if (isMatch) {
        setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
        return index;
      }
    }
  }
 else {
    final Resource resource=table.eResource();
    if (resource != null) {
      final Iterator iter=resource.getContents().iterator();
      while (iter.hasNext()) {
        final Object rootObj=iter.next();
        if (rootObj instanceof Index) {
          final Index index=(Index)rootObj;
          if (isMatchingIndex(index,spec)) {
            setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
            return index;
          }
        }
      }
    }
  }
  if (table instanceof BaseTable) {
    final String objectName=convertName(spec.indexName,context);
    final PrimaryKey pk=((BaseTable)table).getPrimaryKey();
    if (pk != null) {
      if (objectName.equals(pk.getName())) {
        return null;
      }
    }
  }
  final Index index=this.factory.createIndex();
  if (tableOwner != null) {
    if (tableOwner instanceof Catalog) {
      index.setCatalog((Catalog)tableOwner);
    }
 else     if (tableOwner instanceof Schema) {
      index.setSchema((Schema)tableOwner);
    }
  }
 else {
    final Resource resource=table.eResource();
    CoreArgCheck.isNotNull(resource);
    resource.getContents().add(index);
  }
  setNameAndNameInSource(index,spec.indexName,tableNode,context,problems);
  String quoteStr=getQuoteString(context,problems);
  String nis=index.getNameInSource() + '.' + quoteStr+ spec.indexName+ quoteStr;
  index.setNameInSource(nis);
  index.setUnique(!spec.nonUnique);
  index.getColumns().addAll(spec.columns);
  index.setFilterCondition(spec.filterCondition);
  return index;
}",0.9678183613030602
102221,"/** 
 * @see org.teiid.designer.jdbc.relational.impl.RelationalModelProcessorImpl#createIndexes(org.teiid.designer.jdbc.metadata.JdbcTable,org.teiid.designer.metamodels.relational.Table,org.teiid.designer.jdbc.relational.impl.Context,java.util.List)
 * @since 4.2
 */
@Override protected List createIndexes(final JdbcTable tableNode,final Table table,final Context context,final List problems){
  final List indexes=super.createIndexes(tableNode,table,context,problems);
  if (table instanceof BaseTable) {
    final BaseTable theTable=(BaseTable)table;
    final PrimaryKey pk=theTable.getPrimaryKey();
    if (pk != null) {
      final String pkName=pk.getName();
      if (pkName == null || pkName.trim().length() != 0) {
        final List pkColumns=pk.getColumns();
        boolean foundMatchingIndex=false;
        final Iterator iter=indexes.iterator();
        while (iter.hasNext()) {
          final Index index=(Index)iter.next();
          final String indexName=index.getName();
          if (indexName == null || indexName.trim().length() == 0) {
            continue;
          }
          final List indexColumns=index.getColumns();
          if (indexColumns.size() == pkColumns.size()) {
            final Iterator indexColumnIter=indexColumns.iterator();
            final Iterator pkColumnIter=pkColumns.iterator();
            while (pkColumnIter.hasNext() && indexColumnIter.hasNext()) {
              final Column indexColumn=(Column)indexColumnIter.next();
              final Column pkColumn=(Column)pkColumnIter.next();
              if (indexColumn != pkColumn) {
                break;
              }
            }
            foundMatchingIndex=true;
          }
          if (foundMatchingIndex) {
            setNameAndNameInSource(pk,indexName,tableNode,context,problems);
            break;
          }
        }
      }
    }
  }
  return indexes;
}","/** 
 * @see org.teiid.designer.jdbc.relational.impl.RelationalModelProcessorImpl#createIndexes(org.teiid.designer.jdbc.metadata.JdbcTable,org.teiid.designer.metamodels.relational.Table,org.teiid.designer.jdbc.relational.impl.Context,java.util.List)
 * @since 4.2
 */
@Override protected List createIndexes(final JdbcTable tableNode,final Table table,final Context context,final List problems){
  final List indexes=super.createIndexes(tableNode,table,context,problems);
  if (table instanceof BaseTable) {
    final BaseTable theTable=(BaseTable)table;
    final PrimaryKey pk=theTable.getPrimaryKey();
    if (pk != null) {
      final String pkName=pk.getName();
      if (pkName == null || pkName.trim().length() == 0) {
        final List pkColumns=pk.getColumns();
        boolean foundMatchingIndex=false;
        final Iterator iter=indexes.iterator();
        while (iter.hasNext()) {
          final Index index=(Index)iter.next();
          final String indexName=index.getName();
          if (indexName == null || indexName.trim().length() == 0) {
            continue;
          }
          final List indexColumns=index.getColumns();
          if (indexColumns.size() == pkColumns.size()) {
            final Iterator indexColumnIter=indexColumns.iterator();
            final Iterator pkColumnIter=pkColumns.iterator();
            while (pkColumnIter.hasNext() && indexColumnIter.hasNext()) {
              final Column indexColumn=(Column)indexColumnIter.next();
              final Column pkColumn=(Column)pkColumnIter.next();
              if (indexColumn != pkColumn) {
                break;
              }
            }
            foundMatchingIndex=true;
          }
          if (foundMatchingIndex) {
            setNameAndNameInSource(pk,indexName,tableNode,context,problems);
            break;
          }
        }
      }
    }
  }
  return indexes;
}",0.9994692144373672
102222,"/** 
 * handler for Create Relationships Model Button pressed
 */
private ModelResource createRelationalModel(IResource targetRes,String sNewRelationshipModelName){
  ModelResource mrRelationshipModel=constructRelationalModel(targetRes,sNewRelationshipModelName);
  try {
    if (mrRelationshipModel != null) {
      mrRelationshipModel.save(null,false);
    }
  }
 catch (  ModelWorkspaceException mwe) {
    UiConstants.Util.log(mwe);
  }
  return mrRelationshipModel;
}","/** 
 * handler for Create Relationships Model Button pressed
 */
private ModelResource createRelationalModel(IResource targetRes,String sNewRelationshipModelName){
  ModelResource mr=constructRelationalModel(targetRes,sNewRelationshipModelName);
  try {
    if (mr != null) {
      mr.save(null,false);
    }
  }
 catch (  ModelWorkspaceException mwe) {
    UiConstants.Util.log(mwe);
  }
  return mr;
}",0.8310502283105022
102223,"/** 
 * Create instance with custom functions
 * @param functionTrees
 */
public FunctionLibraryImpl(Collection<FunctionTree> functionTrees){
  functionLibrary=new FunctionLibrary(systemFunctionManager.getSystemFunctions(),functionTrees.toArray(new FunctionTree[0]));
}","/** 
 * Create instance with custom functions
 * @param functionTrees
 */
public FunctionLibraryImpl(Collection<FunctionTree> functionTrees){
  systemFunctionManager.setClassloader(getClass().getClassLoader());
  functionLibrary=new FunctionLibrary(systemFunctionManager.getSystemFunctions(),functionTrees.toArray(new FunctionTree[0]));
}",0.886326194398682
102224,"@Override public IMappingNode getRootElement(){
  return new MappingNodeImpl(document.getRootNode());
}","@Override public IMappingNode getRootElement(){
  if (document.getRootNode() instanceof MappingAllNode) {
    return new MappingAllNodeImpl((MappingAllNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingChoiceNode) {
    return new MappingChoiceNodeImpl((MappingChoiceNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingCriteriaNode) {
    return new MappingCriteriaNodeImpl((MappingCriteriaNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingRecursiveElement) {
    return new MappingRecursiveElementImpl((MappingRecursiveElement)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingElement) {
    return new MappingElementImpl((MappingElement)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingSequenceNode) {
    return new MappingSequenceNodeImpl((MappingSequenceNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingSourceNode) {
    return new MappingSourceNodeImpl((MappingSourceNode)document.getRootNode());
  }
  return new MappingNodeImpl(document.getRootNode());
}",0.1661290322580645
102225,"@Override public void setSource(String source){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).setSource(source);
  }
  throw new UnsupportedOperationException();
}","@Override public void setSource(String source){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).setSource(source);
    return;
  }
  throw new UnsupportedOperationException();
}",0.970873786407767
102226,"private void addSequenceNode(IMappingSequenceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSequenceNodeImpl nodeImpl=(MappingSequenceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSequenceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addSequenceNode(IMappingSequenceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSequenceNodeImpl nodeImpl=(MappingSequenceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSequenceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9805194805194806
102227,"private void addChildElement(IMappingElement element){
  if (mappingNode instanceof MappingBaseNode) {
    MappingElementImpl elementImpl=(MappingElementImpl)element;
    ((MappingBaseNode)mappingNode).addChildElement(elementImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addChildElement(IMappingElement element){
  if (mappingNode instanceof MappingBaseNode) {
    MappingElementImpl elementImpl=(MappingElementImpl)element;
    ((MappingBaseNode)mappingNode).addChildElement(elementImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.980327868852459
102228,"private void addCriteriaNode(IMappingCriteriaNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingCriteriaNodeImpl nodeImpl=(MappingCriteriaNodeImpl)node;
    ((MappingBaseNode)mappingNode).addCriteriaNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addCriteriaNode(IMappingCriteriaNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingCriteriaNodeImpl nodeImpl=(MappingCriteriaNodeImpl)node;
    ((MappingBaseNode)mappingNode).addCriteriaNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9805194805194806
102229,"@Override public void addStagingTable(String stagingTable){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).addStagingTable(stagingTable);
  }
  throw new UnsupportedOperationException();
}","@Override public void addStagingTable(String stagingTable){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).addStagingTable(stagingTable);
    return;
  }
  throw new UnsupportedOperationException();
}",0.9739130434782608
102230,"private void addSourceNode(IMappingSourceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSourceNodeImpl nodeImpl=(MappingSourceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSourceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addSourceNode(IMappingSourceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSourceNodeImpl nodeImpl=(MappingSourceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSourceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9798657718120806
102231,"private void addChoiceNode(IMappingChoiceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingChoiceNodeImpl nodeImpl=(MappingChoiceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addChoiceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addChoiceNode(IMappingChoiceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingChoiceNodeImpl nodeImpl=(MappingChoiceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addChoiceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9798657718120806
102232,"private void addAllNode(IMappingAllNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingAllNodeImpl nodeImpl=(MappingAllNodeImpl)node;
    ((MappingBaseNode)mappingNode).addAllNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addAllNode(IMappingAllNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingAllNodeImpl nodeImpl=(MappingAllNodeImpl)node;
    ((MappingBaseNode)mappingNode).addAllNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.978798586572438
102233,"/** 
 * @param name
 * @param namespace
 * @param recursionMappingClass 
 */
public MappingRecursiveElementImpl(String name,Namespace namespace,String recursionMappingClass){
  super(new MappingRecursiveElement(name,namespace,recursionMappingClass));
}","/** 
 * @param element
 */
public MappingRecursiveElementImpl(MappingRecursiveElement element){
  super(element);
}",0.4959128065395095
102234,"/** 
 * Create instance with custom functions
 * @param functionTrees
 */
public FunctionLibraryImpl(Collection<FunctionTree> functionTrees){
  functionLibrary=new FunctionLibrary(systemFunctionManager.getSystemFunctions(),functionTrees.toArray(new FunctionTree[0]));
}","/** 
 * Create instance with custom functions
 * @param functionTrees
 */
public FunctionLibraryImpl(Collection<FunctionTree> functionTrees){
  systemFunctionManager.setClassloader(getClass().getClassLoader());
  functionLibrary=new FunctionLibrary(systemFunctionManager.getSystemFunctions(),functionTrees.toArray(new FunctionTree[0]));
}",0.886326194398682
102235,"@Override public IMappingNode getRootElement(){
  return new MappingNodeImpl(document.getRootNode());
}","@Override public IMappingNode getRootElement(){
  if (document.getRootNode() instanceof MappingAllNode) {
    return new MappingAllNodeImpl((MappingAllNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingChoiceNode) {
    return new MappingChoiceNodeImpl((MappingChoiceNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingCriteriaNode) {
    return new MappingCriteriaNodeImpl((MappingCriteriaNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingRecursiveElement) {
    return new MappingRecursiveElementImpl((MappingRecursiveElement)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingElement) {
    return new MappingElementImpl((MappingElement)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingSequenceNode) {
    return new MappingSequenceNodeImpl((MappingSequenceNode)document.getRootNode());
  }
  if (document.getRootNode() instanceof MappingSourceNode) {
    return new MappingSourceNodeImpl((MappingSourceNode)document.getRootNode());
  }
  return new MappingNodeImpl(document.getRootNode());
}",0.1661290322580645
102236,"@Override public void setSource(String source){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).setSource(source);
  }
  throw new UnsupportedOperationException();
}","@Override public void setSource(String source){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).setSource(source);
    return;
  }
  throw new UnsupportedOperationException();
}",0.970873786407767
102237,"private void addSequenceNode(IMappingSequenceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSequenceNodeImpl nodeImpl=(MappingSequenceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSequenceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addSequenceNode(IMappingSequenceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSequenceNodeImpl nodeImpl=(MappingSequenceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSequenceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9805194805194806
102238,"private void addChildElement(IMappingElement element){
  if (mappingNode instanceof MappingBaseNode) {
    MappingElementImpl elementImpl=(MappingElementImpl)element;
    ((MappingBaseNode)mappingNode).addChildElement(elementImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addChildElement(IMappingElement element){
  if (mappingNode instanceof MappingBaseNode) {
    MappingElementImpl elementImpl=(MappingElementImpl)element;
    ((MappingBaseNode)mappingNode).addChildElement(elementImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.980327868852459
102239,"private void addCriteriaNode(IMappingCriteriaNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingCriteriaNodeImpl nodeImpl=(MappingCriteriaNodeImpl)node;
    ((MappingBaseNode)mappingNode).addCriteriaNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addCriteriaNode(IMappingCriteriaNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingCriteriaNodeImpl nodeImpl=(MappingCriteriaNodeImpl)node;
    ((MappingBaseNode)mappingNode).addCriteriaNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9805194805194806
102240,"@Override public void addStagingTable(String stagingTable){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).addStagingTable(stagingTable);
  }
  throw new UnsupportedOperationException();
}","@Override public void addStagingTable(String stagingTable){
  if (mappingNode instanceof MappingBaseNode) {
    ((MappingBaseNode)mappingNode).addStagingTable(stagingTable);
    return;
  }
  throw new UnsupportedOperationException();
}",0.9739130434782608
102241,"private void addSourceNode(IMappingSourceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSourceNodeImpl nodeImpl=(MappingSourceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSourceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addSourceNode(IMappingSourceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingSourceNodeImpl nodeImpl=(MappingSourceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addSourceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9798657718120806
102242,"private void addChoiceNode(IMappingChoiceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingChoiceNodeImpl nodeImpl=(MappingChoiceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addChoiceNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addChoiceNode(IMappingChoiceNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingChoiceNodeImpl nodeImpl=(MappingChoiceNodeImpl)node;
    ((MappingBaseNode)mappingNode).addChoiceNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.9798657718120806
102243,"private void addAllNode(IMappingAllNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingAllNodeImpl nodeImpl=(MappingAllNodeImpl)node;
    ((MappingBaseNode)mappingNode).addAllNode(nodeImpl.getMappingNode());
  }
  throw new UnsupportedOperationException();
}","private void addAllNode(IMappingAllNode node){
  if (mappingNode instanceof MappingBaseNode) {
    MappingAllNodeImpl nodeImpl=(MappingAllNodeImpl)node;
    ((MappingBaseNode)mappingNode).addAllNode(nodeImpl.getMappingNode());
    return;
  }
  throw new UnsupportedOperationException();
}",0.978798586572438
102244,"/** 
 * @param name
 * @param namespace
 * @param recursionMappingClass 
 */
public MappingRecursiveElementImpl(String name,Namespace namespace,String recursionMappingClass){
  super(new MappingRecursiveElement(name,namespace,recursionMappingClass));
}","/** 
 * @param element
 */
public MappingRecursiveElementImpl(MappingRecursiveElement element){
  super(element);
}",0.4959128065395095
102245,"private Collection<String> getRowsFromLine(String str){
  Collection<String> strings=new ArrayList<String>();
  String theString=str;
  while (theString.length() > 0) {
    if ((str.indexOf(CR_1) > -1 || str.indexOf(CR_2) > -1)) {
      int lf_1_index=theString.indexOf(CR_1);
      int lf_2_index=theString.indexOf(CR_2);
      if (lf_1_index > -1 && lf_2_index > lf_1_index) {
        String seg=theString.substring(0,lf_1_index);
        strings.add(seg);
        int strLen=theString.length();
        int lengthLeft=(strLen - 1) - (lf_1_index + 4);
        if (lengthLeft > 0) {
          theString=theString.substring((lf_1_index + 4),(strLen)).trim();
        }
 else {
          theString=EMPTY_STR;
        }
      }
 else       if (lf_2_index > -1) {
        String seg=theString.substring(0,lf_2_index);
        strings.add(seg);
        int strLen=theString.length();
        int lengthLeft=(strLen - 1) - (lf_2_index + 2);
        if (lengthLeft > 0) {
          theString=theString.substring((lf_2_index + 2),(strLen)).trim();
        }
 else {
        }
      }
    }
 else {
      strings.add(theString);
      theString=EMPTY_STR;
    }
  }
  return strings;
}","private Collection<String> getRowsFromLine(String str){
  Collection<String> strings=new ArrayList<String>();
  String theString=str;
  while (theString.length() > 0) {
    if ((theString.indexOf(CR_1) > -1 || theString.indexOf(CR_2) > -1)) {
      int lf_1_index=theString.indexOf(CR_1);
      int lf_2_index=theString.indexOf(CR_2);
      if (lf_1_index > -1 && lf_2_index > lf_1_index) {
        String seg=theString.substring(0,lf_1_index);
        strings.add(seg);
        int strLen=theString.length();
        int lengthLeft=(strLen - 1) - (lf_1_index + 4);
        if (lengthLeft > 0) {
          theString=theString.substring((lf_1_index + 4),(strLen)).trim();
        }
 else {
          theString=EMPTY_STR;
        }
      }
 else       if (lf_2_index > -1) {
        String seg=theString.substring(0,lf_2_index);
        strings.add(seg);
        int strLen=theString.length();
        int lengthLeft=(strLen - 1) - (lf_2_index + 2);
        if (lengthLeft > 0) {
          theString=theString.substring((lf_2_index + 2),(strLen)).trim();
        }
 else {
        }
      }
    }
 else {
      strings.add(theString);
      theString=EMPTY_STR;
    }
  }
  return strings;
}",0.9898562975486052
102246,"@Override public void visit(IUpdate update){
}","@Override public void visit(ILanguageObject languageObject){
}",0.6851851851851852
102247,"@Override public boolean hasChildren(){
  return dirty || (children != null && !children.isEmpty());
}","@Override public boolean hasChildren(){
  return !dirty || (children != null && !children.isEmpty());
}",0.9951219512195122
102248,"/** 
 * Adapt to a   {@link TeiidServerContainerNode}
 * @param adaptableObject
 * @return
 */
private TeiidServerContainerNode adaptToTeiidServerContainerNode(ITeiidResourceNode teiidResourceNode){
  if (teiidResourceNode.hasChildren()) {
    List<? extends ITeiidContentNode<?>> children=teiidResourceNode.getChildren();
    return (TeiidServerContainerNode)children.get(0);
  }
  return null;
}","/** 
 * Adapt to a   {@link TeiidServerContainerNode}
 * @param adaptableObject
 * @return
 */
private TeiidServerContainerNode adaptToTeiidServerContainerNode(ITeiidResourceNode teiidResourceNode){
  if (teiidResourceNode.hasChildren()) {
    List<? extends ITeiidContentNode<?>> children=teiidResourceNode.getChildren();
    ITeiidContentNode<?> child=children.get(0);
    if (child instanceof TeiidServerContainerNode)     return (TeiidServerContainerNode)child;
  }
  return null;
}",0.8244620611551529
102249,"@Override public void run(){
  if (viewer.getTree().isDisposed())   return;
  Tree tree=viewer.getTree();
  TeiidResourceNode trn=null;
  int selectionCount=tree.getSelectionCount();
  ISelection currentSelection=viewer.getSelection();
  viewer.refresh();
  TreePath[] expandedElements=viewer.getExpandedTreePaths();
  for (  TreePath o : expandedElements) {
    Object element=o.getLastSegment();
    if (isTeiidResourceNode(element)) {
      trn=(TeiidResourceNode)element;
      break;
    }
    Object[] children=TeiidServerContentProvider.this.getChildren(element);
    for (    Object child : children) {
      if (isTeiidResourceNode(child)) {
        trn=(TeiidResourceNode)child;
        break;
      }
    }
    if (isTeiidResourceNode(trn)) {
      break;
    }
  }
  if (trn != null) {
    viewer.setExpandedState(trn,true);
    viewer.expandToLevel(trn,2);
  }
  if (selectionCount == 1) {
    viewer.setSelection(new StructuredSelection());
    viewer.setSelection(currentSelection);
  }
  ModelerUiViewUtils.refreshModelExplorerResourceNavigatorTree();
}","@Override public void run(){
  if (viewer.getControl().isDisposed())   return;
  for (  Object node : updated) {
    pendingUpdates.remove(node);
    viewer.refresh(node);
    if (node instanceof TeiidResourceNode) {
      viewer.setExpandedState(node,true);
      viewer.expandToLevel(node,2);
    }
  }
}",0.2661818181818182
102250,"@Override public void configurationChanged(final ExecutionConfigurationEvent event){
  UiUtil.runInSwtThread(new Runnable(){
    @Override public void run(){
      if (viewer.getTree().isDisposed())       return;
      Tree tree=viewer.getTree();
      TeiidResourceNode trn=null;
      int selectionCount=tree.getSelectionCount();
      ISelection currentSelection=viewer.getSelection();
      viewer.refresh();
      TreePath[] expandedElements=viewer.getExpandedTreePaths();
      for (      TreePath o : expandedElements) {
        Object element=o.getLastSegment();
        if (isTeiidResourceNode(element)) {
          trn=(TeiidResourceNode)element;
          break;
        }
        Object[] children=TeiidServerContentProvider.this.getChildren(element);
        for (        Object child : children) {
          if (isTeiidResourceNode(child)) {
            trn=(TeiidResourceNode)child;
            break;
          }
        }
        if (isTeiidResourceNode(trn)) {
          break;
        }
      }
      if (trn != null) {
        viewer.setExpandedState(trn,true);
        viewer.expandToLevel(trn,2);
      }
      if (selectionCount == 1) {
        viewer.setSelection(new StructuredSelection());
        viewer.setSelection(currentSelection);
      }
      ModelerUiViewUtils.refreshModelExplorerResourceNavigatorTree();
    }
    private boolean isTeiidResourceNode(    Object o){
      return o instanceof TeiidResourceNode;
    }
  }
,false);
}","@Override public void configurationChanged(final ExecutionConfigurationEvent event){
  TeiidServer eventServer=event.getServer();
  if (eventServer == null)   return;
  refreshThread.refresh();
}",0.1768953068592057
102251,"/** 
 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
 * @since 4.2
 */
@Override public String getText(Object element){
  if (element instanceof IContentNode) {
    IContentNode node=(IContentNode)element;
    return node.getName();
  }
  if (element instanceof String) {
    return (String)element;
  }
  if (element == TeiidServerContentProvider.PENDING) {
    return DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"");
  }
  return super.getText(element);
}","/** 
 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
 * @since 4.2
 */
@Override public String getText(Object element){
  if (element instanceof IContentNode) {
    IContentNode node=(IContentNode)element;
    return node.getName();
  }
  if (element instanceof String) {
    return (String)element;
  }
  if (element == TeiidServerContentProvider.getPending()) {
    return DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"");
  }
  return super.getText(element);
}",0.9835430784123912
102252,"@Override public final void load(){
  if (getServer().getServerState() != IServer.STATE_STARTED) {
    setError(new TeiidErrorNode(this,null,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
    return;
  }
  try {
    children=new ArrayList<IContentNode<? extends IContainerNode<?>>>();
    teiidServer=(TeiidServer)getServer().loadAdapter(TeiidServer.class,null);
    if (teiidServer != null) {
      if (teiidServer.isConnected())       children.add(new TeiidServerContainerNode(this,provider));
 else {
        setError(new TeiidErrorNode(this,teiidServer,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
        return;
      }
    }
    clearError();
  }
 catch (  Exception e) {
    setError(new TeiidErrorNode(this,teiidServer,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
  }
}","@Override public final void load(){
  if (getServer().getServerState() != IServer.STATE_STARTED) {
    setError(new TeiidErrorNode(this,null,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
    return;
  }
  try {
    teiidServer=(TeiidServer)getServer().loadAdapter(TeiidServer.class,null);
    if (teiidServer != null) {
      if (teiidServer.isConnected()) {
        if (children == null)         children=new ArrayList<IContentNode<? extends IContainerNode<?>>>();
        children.add(new TeiidServerContainerNode(this,provider));
      }
 else {
        setError(new TeiidErrorNode(this,teiidServer,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
        return;
      }
    }
    clearError();
  }
 catch (  Exception e) {
    DqpUiConstants.UTIL.log(e);
    setError(new TeiidErrorNode(this,teiidServer,DqpUiConstants.UTIL.getString(getClass().getSimpleName() + ""String_Node_Str"")));
  }
}",0.8017334777898159
102253,"/** 
 * @param vdb
 * @return
 */
public void undeployVdb(VDB vdb) throws Exception {
  CoreArgCheck.isNotNull(vdb,""String_Node_Str"");
  admin.undeploy(vdb.getName() + ModelerCore.VDB_FILE_EXTENSION);
  refreshVDBs();
  this.eventManager.notifyListeners(ExecutionConfigurationEvent.createUnDeployVDBEvent(vdb));
}","/** 
 * @param vdb
 * @return
 */
public void undeployVdb(VDB vdb) throws Exception {
  CoreArgCheck.isNotNull(vdb,""String_Node_Str"");
  admin.undeploy(appendVdbExtension(vdb.getName()));
  refreshVDBs();
  this.eventManager.notifyListeners(ExecutionConfigurationEvent.createUnDeployVDBEvent(vdb));
}",0.9135399673735726
102254,"/** 
 * @param sourceVdbName (excluding .vdb extension) the name of the VDB being merged into the target VDB
 * @param sourceVdbVersion the version of the source VDB
 * @param targetVdbName (excluding .vdb extension) the name of the VDB being merged into
 * @param targetVdbVersion the version of the target VDB
 * @throws Exception if there is a problem with the merge
 */
public void mergeVdbs(List<IFile> pvdbsToMerge,String ptargetVdbName,int ptargetVdbVersion,IFile ptargetvdbToMerge) throws Exception {
  VDB projectVdb=getVdb(ptargetVdbName);
  String name=projectVdb.getPropertyValue(""String_Node_Str"");
  Vdb vdb=new Vdb(ptargetvdbToMerge,new NullProgressMonitor());
  for (  IFile pvdbToMerge : pvdbsToMerge) {
    if (ptargetvdbToMerge.equals(pvdbToMerge))     continue;
    String sourceVdbName=pvdbToMerge.getFullPath().removeFileExtension().lastSegment().toString();
    if (!sourceVdbName.contains(""String_Node_Str"")) {
      vdb.addImportVdb(sourceVdbName);
    }
  }
  this.admin.undeploy(name + ModelerCore.VDB_FILE_EXTENSION);
  vdb.save(null);
  ptargetvdbToMerge.refreshLocal(IResource.DEPTH_INFINITE,null);
  deployVdb(vdb.getFile());
}","/** 
 * @param sourceVdbName (excluding .vdb extension) the name of the VDB being merged into the target VDB
 * @param sourceVdbVersion the version of the source VDB
 * @param targetVdbName (excluding .vdb extension) the name of the VDB being merged into
 * @param targetVdbVersion the version of the target VDB
 * @throws Exception if there is a problem with the merge
 */
public void mergeVdbs(List<IFile> pvdbsToMerge,String ptargetVdbName,int ptargetVdbVersion,IFile ptargetvdbToMerge) throws Exception {
  VDB projectVdb=getVdb(ptargetVdbName);
  String name=projectVdb.getPropertyValue(""String_Node_Str"");
  Vdb vdb=new Vdb(ptargetvdbToMerge,new NullProgressMonitor());
  for (  IFile pvdbToMerge : pvdbsToMerge) {
    if (ptargetvdbToMerge.equals(pvdbToMerge))     continue;
    String sourceVdbName=pvdbToMerge.getFullPath().removeFileExtension().lastSegment().toString();
    if (!sourceVdbName.contains(""String_Node_Str"")) {
      vdb.addImportVdb(sourceVdbName);
    }
  }
  this.admin.undeploy(appendVdbExtension(name));
  vdb.save(null);
  ptargetvdbToMerge.refreshLocal(IResource.DEPTH_INFINITE,null);
  deployVdb(vdb.getFile());
}",0.9743812418584455
102255,"private IFile getFile(Resource resource){
  IFile resultFile=null;
  if (resource != null) {
    URI uri=resource.getURI();
    String fileString=URI.decode(uri.path());
    resultFile=ModelerCore.getWorkspace().getRoot().getFileForLocation(new Path(fileString));
  }
  return resultFile;
}","private IFile getFile(Resource resource){
  IFile resultFile=null;
  if (resource != null) {
    IProject[] allProj=ModelerCore.getWorkspace().getRoot().getProjects();
    List<String> projNameList=new ArrayList();
    for (int i=0; i < allProj.length; i++) {
      projNameList.add(allProj[i].getName());
    }
    URI uri=resource.getURI();
    uri=validateURI(uri,projNameList);
    String fileString=URI.decode(uri.path());
    IResource iResc=ModelerCore.getWorkspace().getRoot().findMember(new Path(fileString));
    if (iResc instanceof IFile) {
      resultFile=(IFile)iResc;
    }
  }
  return resultFile;
}",0.5364238410596026
102256,"void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final ConnectionInfoHelper helper=new ConnectionInfoHelper();
      if (CoreStringUtil.isEmpty(this.translator.get())) {
        final String translator=helper.getTranslatorName(mr);
        this.translator.set(translator == null ? EMPTY_STR : translator);
      }
      Properties translatorProps=helper.getTranslatorProperties(mr);
      if (!translatorProps.isEmpty()) {
        updateTranslatorOverrides(translatorProps);
      }
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          IFile modelFile=getFile(importedModel);
          IPath name=null;
          if (modelFile != null) {
            name=modelFile.getFullPath();
          }
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name != null && name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}","void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final ConnectionInfoHelper helper=new ConnectionInfoHelper();
      if (CoreStringUtil.isEmpty(this.translator.get())) {
        final String translator=helper.getTranslatorName(mr);
        this.translator.set(translator == null ? EMPTY_STR : translator);
      }
      Properties translatorProps=helper.getTranslatorProperties(mr);
      if (!translatorProps.isEmpty()) {
        updateTranslatorOverrides(translatorProps);
      }
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          IFile modelFile=getFile(importedModel);
          IPath name=null;
          if (modelFile != null) {
            name=modelFile.getFullPath();
          }
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name != null && name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null && name != null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}",0.9970738844184344
102257,"void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final ConnectionInfoHelper helper=new ConnectionInfoHelper();
      if (CoreStringUtil.isEmpty(this.translator.get())) {
        final String translator=helper.getTranslatorName(mr);
        this.translator.set(translator == null ? EMPTY_STR : translator);
      }
      Properties translatorProps=helper.getTranslatorProperties(mr);
      if (!translatorProps.isEmpty()) {
        updateTranslatorOverrides(translatorProps);
      }
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          java.net.URI uri=java.net.URI.create(importedModel.getURI().toString());
          IFile[] modelFiles=ModelerCore.getWorkspace().getRoot().findFilesForLocationURI(uri);
          final IPath name=modelFiles[0].getFullPath();
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}","void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final ConnectionInfoHelper helper=new ConnectionInfoHelper();
      if (CoreStringUtil.isEmpty(this.translator.get())) {
        final String translator=helper.getTranslatorName(mr);
        this.translator.set(translator == null ? EMPTY_STR : translator);
      }
      Properties translatorProps=helper.getTranslatorProperties(mr);
      if (!translatorProps.isEmpty()) {
        updateTranslatorOverrides(translatorProps);
      }
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          IFile modelFile=getFile(importedModel);
          IPath name=null;
          if (modelFile != null) {
            name=modelFile.getFullPath();
          }
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name != null && name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}",0.940236148955495
102258,"@Override protected void inputChanged(Object input,Object oldInput){
  if (input == null) {
    return;
  }
  InputStream isRight=null;
  IPath pathRight=null;
  IResource resLeft=null;
  IResource resRight=null;
  DiffNode node=(DiffNode)input;
  ITypedElement teLeft=node.getLeft();
  if (teLeft instanceof ResourceNode) {
    rnLeft=(ResourceNode)teLeft;
    resLeft=rnLeft.getResource();
  }
  ITypedElement teRight=node.getRight();
  if (teRight instanceof ResourceNode) {
    iCompareType=RESOURCE_NODE_TO_RESOURCE_NODE;
    rnRight=(ResourceNode)teRight;
    resRight=rnRight.getResource();
  }
 else   if (teRight instanceof HistoryItem) {
    iCompareType=RESOURCE_NODE_TO_INPUT_STREAM;
    rnRight=null;
    hiRight=(HistoryItem)teRight;
    pathRight=new Path(hiRight.getName());
    try {
      isRight=hiRight.getContents();
    }
 catch (    CoreException ce) {
      UiConstants.Util.log(ce);
    }
  }
  if (iCompareType == RESOURCE_NODE_TO_RESOURCE_NODE) {
    try {
      ModelResource mrLeft=findModelResource(resLeft,true);
      ModelResource mrRight=findModelResource(resRight,true);
      dpProcessor=ModelerComparePlugin.createDifferenceProcessor(mrLeft,mrRight);
    }
 catch (    ModelWorkspaceException mwe) {
      UiConstants.Util.log(mwe);
    }
  }
 else {
    IProject project=resLeft.getProject();
    if ((project != null) && project.isOpen() && ModelerCore.hasModelNature(project)&& (resLeft.getType() == IResource.FILE)) {
      try {
        ModelResource mrLeft=findModelResource(resLeft,true);
        if (mrLeft != null) {
          dpProcessor=ModelerComparePlugin.createDifferenceProcessor(isRight,pathRight,mrLeft,mrLeft.getDescription());
        }
      }
 catch (      ModelWorkspaceException mwe) {
        UiConstants.Util.log(mwe);
      }
    }
  }
  dpProcessor.execute(new NullProgressMonitor());
  drReport=dpProcessor.getDifferenceReport();
  getDifferenceReportsPanel().setTerminologyStyle(getTerminologyStyle(iCompareType));
  getDifferenceReportsPanel().setDifferenceReports(Collections.singletonList(drReport));
  if (iCompareType == RESOURCE_NODE_TO_RESOURCE_NODE) {
    getDifferenceReportsPanel().setObjectNames(getLeftObjectName(),getRightObjectName());
  }
 else   if (iCompareType == RESOURCE_NODE_TO_INPUT_STREAM) {
    getDifferenceReportsPanel().setObjectNames(getRightObjectName(),getLeftObjectName());
  }
}","@Override protected void inputChanged(Object input,Object oldInput){
  if (input == null) {
    return;
  }
  InputStream isRight=null;
  IPath pathRight=null;
  IResource resLeft=null;
  IResource resRight=null;
  DiffNode node=(DiffNode)input;
  ITypedElement teLeft=node.getLeft();
  if (teLeft instanceof ResourceNode) {
    rnLeft=(ResourceNode)teLeft;
    resLeft=rnLeft.getResource();
  }
  ITypedElement teRight=node.getRight();
  if (teRight instanceof ResourceNode) {
    iCompareType=RESOURCE_NODE_TO_RESOURCE_NODE;
    rnRight=(ResourceNode)teRight;
    resRight=rnRight.getResource();
  }
 else   if (teRight instanceof HistoryItem) {
    iCompareType=RESOURCE_NODE_TO_INPUT_STREAM;
    rnRight=null;
    hiRight=(HistoryItem)teRight;
    pathRight=new Path(hiRight.getName());
    try {
      isRight=hiRight.getContents();
    }
 catch (    CoreException ce) {
      UiConstants.Util.log(ce);
    }
  }
  if (iCompareType == RESOURCE_NODE_TO_RESOURCE_NODE) {
    try {
      ModelResource mrLeft=findModelResource(resLeft,true);
      ModelResource mrRight=findModelResource(resRight,true);
      dpProcessor=ModelerComparePlugin.createDifferenceProcessor(mrLeft,mrRight);
    }
 catch (    ModelWorkspaceException mwe) {
      UiConstants.Util.log(mwe);
    }
  }
 else {
    IProject project=null;
    if (resLeft != null) {
      project=resLeft.getProject();
    }
    if ((project != null) && project.isOpen() && ModelerCore.hasModelNature(project)&& (resLeft.getType() == IResource.FILE)) {
      try {
        ModelResource mrLeft=findModelResource(resLeft,true);
        if (mrLeft != null) {
          dpProcessor=ModelerComparePlugin.createDifferenceProcessor(isRight,pathRight,mrLeft,mrLeft.getDescription());
        }
      }
 catch (      ModelWorkspaceException mwe) {
        UiConstants.Util.log(mwe);
      }
    }
  }
  dpProcessor.execute(new NullProgressMonitor());
  drReport=dpProcessor.getDifferenceReport();
  getDifferenceReportsPanel().setTerminologyStyle(getTerminologyStyle(iCompareType));
  getDifferenceReportsPanel().setDifferenceReports(Collections.singletonList(drReport));
  if (iCompareType == RESOURCE_NODE_TO_RESOURCE_NODE) {
    getDifferenceReportsPanel().setObjectNames(getLeftObjectName(),getRightObjectName());
  }
 else   if (iCompareType == RESOURCE_NODE_TO_INPUT_STREAM) {
    getDifferenceReportsPanel().setObjectNames(getRightObjectName(),getLeftObjectName());
  }
}",0.9889698231009364
102259,"/** 
 * Return a   {@link ValidationDescriptor} instance for the specified {@link IExtension} representing an extension to the<code>ModelerCore.EXTENSION_POINT.VALIDATION</code> extension point.
 * @param extension
 */
public static List createValidationDescriptor(final IExtension extension){
  if (extension == null) {
    CoreArgCheck.isNotNull(extension,ModelerCore.Util.getString(""String_Node_Str""));
  }
  final String uniqueId=extension.getExtensionPointUniqueIdentifier();
  if (!ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID.equals(uniqueId)) {
    CoreArgCheck.isTrue(ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID.equals(uniqueId),ModelerCore.Util.getString(""String_Node_Str"",ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID,uniqueId));
  }
  if (ModelerCore.DEBUG_VALIDATION) {
    ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str""));
  }
  if (ModelerCore.DEBUG_VALIDATION) {
    final Object[] params=new Object[]{extension.getSimpleIdentifier()};
    ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",params));
  }
  final IConfigurationElement[] elems=extension.getConfigurationElements();
  List descriptors=new ArrayList(elems.length);
  for (int j=0; j < elems.length; j++) {
    final IConfigurationElement elem=elems[j];
    final String elemName=elem.getName();
    if (elemName == null) {
      continue;
    }
    if (elemName.equals(ModelerCore.EXTENSION_POINT.VALIDATION.ELEMENTS.PREFERENCE)) {
      final String prefName=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.NAME);
      final String prefLabel=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.LABEL);
      final String prefCategory=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.CATEGORY);
      final String prefToolTip=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.TOOL_TIP);
      final String defaultValue=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.DEFAULT);
      if (prefName == null) {
        continue;
      }
      final ValidationDescriptorImpl descriptor=new ValidationDescriptorImpl();
      descriptor.setExtensionID(extension.getSimpleIdentifier());
      descriptor.setPrefernceName(prefName);
      descriptor.setPrefernceLabel(prefLabel);
      descriptor.setPrefernceCategory(prefCategory);
      descriptor.setPrefernceToolTip(prefToolTip);
      descriptor.setDefaultOption(defaultValue);
      if (ModelerCore.DEBUG_VALIDATION) {
        ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefName}));
        ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefLabel}));
        if (prefCategory != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefCategory}));
        }
        if (prefToolTip != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefToolTip}));
        }
        if (defaultValue != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"") + new Object[]{defaultValue});
        }
      }
      descriptors.add(descriptor);
    }
  }
  return descriptors;
}","/** 
 * Return a   {@link ValidationDescriptor} instance for the specified {@link IExtension} representing an extension to the<code>ModelerCore.EXTENSION_POINT.VALIDATION</code> extension point.
 * @param extension
 */
public static List createValidationDescriptor(final IExtension extension){
  if (extension == null) {
    CoreArgCheck.isNotNull(extension,ModelerCore.Util.getString(""String_Node_Str""));
  }
  final String uniqueId=extension.getExtensionPointUniqueIdentifier();
  if (!ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID.equals(uniqueId)) {
    CoreArgCheck.isTrue(ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID.equals(uniqueId),ModelerCore.Util.getString(""String_Node_Str"",ModelerCore.EXTENSION_POINT.VALIDATION.UNIQUE_ID,uniqueId));
  }
  if (ModelerCore.DEBUG_VALIDATION) {
    ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str""));
  }
  if (ModelerCore.DEBUG_VALIDATION) {
    final Object[] params=new Object[]{extension.getSimpleIdentifier()};
    ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",params));
  }
  final IConfigurationElement[] elems=extension.getConfigurationElements();
  List descriptors=new ArrayList(elems.length);
  for (int j=0; j < elems.length; j++) {
    final IConfigurationElement elem=elems[j];
    final String elemName=elem.getName();
    if (elemName == null) {
      continue;
    }
    if (elemName.equals(ModelerCore.EXTENSION_POINT.VALIDATION.ELEMENTS.PREFERENCE)) {
      final String prefName=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.NAME);
      final String prefLabel=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.LABEL);
      final String prefCategory=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.CATEGORY);
      final String prefToolTip=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.TOOL_TIP);
      final String defaultValue=elem.getAttribute(ModelerCore.EXTENSION_POINT.VALIDATION.ATTRIBUTES.DEFAULT);
      if (prefName == null) {
        continue;
      }
      final ValidationDescriptorImpl descriptor=new ValidationDescriptorImpl();
      descriptor.setExtensionID(extension.getSimpleIdentifier());
      descriptor.setPrefernceName(prefName);
      descriptor.setPrefernceLabel(prefLabel);
      descriptor.setPrefernceCategory(prefCategory);
      descriptor.setPrefernceToolTip(prefToolTip);
      descriptor.setDefaultOption(defaultValue);
      if (ModelerCore.DEBUG_VALIDATION) {
        ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefName}));
        ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefLabel}));
        if (prefCategory != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefCategory}));
        }
        if (prefToolTip != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{prefToolTip}));
        }
        if (defaultValue != null) {
          ModelerCore.Util.log(IStatus.INFO,ModelerCore.Util.getString(""String_Node_Str"",new Object[]{defaultValue}));
        }
      }
      descriptors.add(descriptor);
    }
  }
  return descriptors;
}",0.99909338168631
102260,"/** 
 * Test whether it's possible to read and write files in the specified directory.
 * @param dirPath Name of the directory to test
 * @throws MetaMatrixCoreException
 * @since 4.3
 */
public static void testDirectoryPermissions(final String dirPath) throws TeiidException {
  final File tmpFile=new File(dirPath + File.separatorChar + TEMP_FILE);
  boolean success=false;
  try {
    success=tmpFile.createNewFile();
  }
 catch (  final IOException e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  if (!tmpFile.canWrite()) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  if (!tmpFile.canRead()) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  final File newFile=new File(dirPath + File.separatorChar + TEMP_FILE_RENAMED);
  success=false;
  try {
    success=tmpFile.renameTo(newFile);
  }
 catch (  final Exception e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  success=false;
  try {
    success=newFile.delete();
  }
 catch (  final Exception e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
}","/** 
 * Test whether it's possible to read and write files in the specified directory.
 * @param dirPath Name of the directory to test
 * @throws TeiidException
 * @since 4.3
 */
public static void testDirectoryPermissions(final String dirPath) throws TeiidException {
  final File tmpFile=new File(dirPath + File.separatorChar + TEMP_FILE);
  boolean success=false;
  try {
    success=tmpFile.createNewFile();
  }
 catch (  final IOException e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  if (!tmpFile.canWrite()) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  if (!tmpFile.canRead()) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  final File newFile=new File(dirPath + File.separatorChar + TEMP_FILE_RENAMED);
  success=false;
  try {
    success=tmpFile.renameTo(newFile);
  }
 catch (  final Exception e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
  success=false;
  try {
    success=newFile.delete();
  }
 catch (  final Exception e) {
  }
  if (!success) {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",dirPath);
    throw new TeiidException(msg);
  }
}",0.9934595524956972
102261,"/** 
 * Copy a file
 * @param fromFileName
 * @param toFileName
 * @param overwrite whether to overwrite the destination file if it exists.
 * @throws MetaMatrixCoreException
 * @since 4.3
 */
public static void copy(final String fromFileName,final String toFileName,final boolean overwrite) throws IOException {
  final File toFile=new File(toFileName);
  if (toFile.exists())   if (overwrite)   toFile.delete();
 else {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",toFileName);
    throw new IOException(msg);
  }
  final File fromFile=new File(fromFileName);
  if (!fromFile.exists())   throw new FileNotFoundException(CoreModelerPlugin.Util.getString(""String_Node_Str"",fromFileName));
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(fromFile);
    write(fis,toFileName);
  }
  finally {
    if (fis != null)     fis.close();
  }
}","/** 
 * Copy a file
 * @param fromFileName
 * @param toFileName
 * @param overwrite whether to overwrite the destination file if it exists.
 * @throws IOException
 * @since 4.3
 */
public static void copy(final String fromFileName,final String toFileName,final boolean overwrite) throws IOException {
  final File toFile=new File(toFileName);
  if (toFile.exists())   if (overwrite)   toFile.delete();
 else {
    final String msg=CoreModelerPlugin.Util.getString(""String_Node_Str"",toFileName);
    throw new IOException(msg);
  }
  final File fromFile=new File(fromFileName);
  if (!fromFile.exists())   throw new FileNotFoundException(CoreModelerPlugin.Util.getString(""String_Node_Str"",fromFileName));
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(fromFile);
    write(fis,toFileName);
  }
  finally {
    if (fis != null)     fis.close();
  }
}",0.6061997703788748
102262,"/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ObjectIDDescriptor#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new IntegerID(Integer.parseInt(value));
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}","/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ParsedObjectID#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new IntegerID(Integer.parseInt(value));
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}",0.9930191972076788
102263,"/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ObjectIDDescriptor#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new LongID(Long.parseLong(value));
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}","/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ParsedObjectID#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new LongID(Long.parseLong(value));
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}",0.992988606485539
102264,"/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ObjectIDDescriptor#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException ;","/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ParsedObjectID#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException ;",0.991332611050921
102265,"/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ObjectIDDescriptor#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new StringID(value);
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}","/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ParsedObjectID#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  try {
    return new StringID(value);
  }
 catch (  NumberFormatException e) {
    throw new InvalidIDException(CorePlugin.Util.getString(""String_Node_Str"",value,getProtocol()));
  }
}",0.9929015084294588
102266,"/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ObjectIDDescriptor#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  return UUID.stringToObject(value);
}","/** 
 * Attempt to convert the specified string to the appropriate ObjectID instance. This method is called by the   {@link IDGenerator#stringToObject(String)} method, whichmust process the protocol to determine the correct parser to use.  As such, it guarantees that the parser that receives this call can assume that the protocol was equal to the protocol returned by the parser's  {@link ParsedObjectID#getProtocol()}.
 * @param value the stringified id with the protocol and ObjectID.DELIMITER alreadyremoved, and should never null or zero length
 * @return the ObjectID instance for the stringified ID if this factory is ableto parse the string, or null if the factory is unaware of the specified format.
 * @throws InvalidIDException if the parser is aware of this protocol, but it is of the wrongformat for this type of ObjectID.
 */
@Override public ObjectID stringWithoutProtocolToObject(String value) throws InvalidIDException {
  return UUID.stringToObject(value);
}",0.9918283963227784
102267,"/** 
 * Starts up the plugin framework located at the specified install path, and which uses the specified metadata path to store metadata.
 * @param installPath The path identifying the folder where the application is installed.
 * @param metadataPath The path identifying the folder under which the Eclipse metadata folder should be created.
 * @return An instance of ApplicationExtension, or null if no extension with the specified ID is found.
 * @throws ClassNotFoundException If the {@link BootLoader} class could not be found in the boot jar file.
 * @throws CoreException If the boot plugin folder could not be found.
 * @throws IllegalAccessException If one of the reflectively accessed BootLoader methods is not public.
 * @throws InvocationTargetException If one of the reflectively called BootLoader methods throws a {@link RuntimeException}.
 * @throws MalformedURLException If installPath contains an invalid path.
 * @throws NoSuchMethodException If one of the reflectively accessed BootLoader or ApplicationExtension methods does notexist.
 * @since 3.1
 */
public static void startup(String installPath,String metadataPath) throws ClassNotFoundException, CoreException, IllegalAccessException, InvocationTargetException, MalformedURLException, NoSuchMethodException {
  CoreArgCheck.isNotEmpty(installPath,CoreModelerPlugin.Util.getString(""String_Node_Str""));
  if (PluginUtilities.bootLoader == null) {
    if (metadataPath == null) {
      metadataPath=TEMPORARY_METADATA_PATH;
    }
    final StringBuffer bootFolderPath=new StringBuffer(installPath);
    final char lastChr=bootFolderPath.charAt(bootFolderPath.length() - 1);
    if (lastChr != '/' && lastChr != '\\') {
      bootFolderPath.append('/');
    }
    bootFolderPath.append(PLUGINS_FOLDER);
    final File[] bootPluginFolders=new File(bootFolderPath.toString()).listFiles(new FileFilter(){
      @Override public boolean accept(      final File file){
        if (file.isDirectory() && file.getName().startsWith(BOOT_PLUGIN_FOLDER)) {
          return true;
        }
        return false;
      }
    }
);
    if (bootPluginFolders.length == 0) {
      final IStatus status=new Status(IStatus.ERROR,BOOT_PLUGIN_FOLDER,BOOT_PLUGIN_FOLDER_NOT_FOUND_CODE,BOOT_PLUGIN_FOLDER_NOT_FOUND_MESSAGE,null);
      throw new CoreException(status);
    }
    final String bootJarPath=new File(bootPluginFolders[0],BOOT_JAR).getAbsolutePath().replace(File.separatorChar,'/');
    final URL bootUrl=new URL(PROTOCOL,null,bootJarPath);
    final Class bootLoader=new URLClassLoader(new URL[]{bootUrl},null).loadClass(BOOT_LOADER);
    final Method startupMeth=bootLoader.getMethod(STARTUP_METHOD,new Class[]{URL.class,String.class,String[].class});
    startupMeth.invoke(bootLoader,new Object[]{null,metadataPath,PluginUtilities.startupArgs});
    PluginUtilities.bootLoader=bootLoader;
  }
}","/** 
 * Starts up the plugin framework located at the specified install path, and which uses the specified metadata path to store metadata.
 * @param installPath The path identifying the folder where the application is installed.
 * @param metadataPath The path identifying the folder under which the Eclipse metadata folder should be created.
 * @return An instance of ApplicationExtension, or null if no extension with the specified ID is found.
 * @throws ClassNotFoundException If the BootLoader class could not be found in the boot jar file.
 * @throws CoreException If the boot plugin folder could not be found.
 * @throws IllegalAccessException If one of the reflectively accessed BootLoader methods is not public.
 * @throws InvocationTargetException If one of the reflectively called BootLoader methods throws a {@link RuntimeException}.
 * @throws MalformedURLException If installPath contains an invalid path.
 * @throws NoSuchMethodException If one of the reflectively accessed BootLoader or ApplicationExtension methods does notexist.
 * @since 3.1
 */
public static void startup(String installPath,String metadataPath) throws ClassNotFoundException, CoreException, IllegalAccessException, InvocationTargetException, MalformedURLException, NoSuchMethodException {
  CoreArgCheck.isNotEmpty(installPath,CoreModelerPlugin.Util.getString(""String_Node_Str""));
  if (PluginUtilities.bootLoader == null) {
    if (metadataPath == null) {
      metadataPath=TEMPORARY_METADATA_PATH;
    }
    final StringBuffer bootFolderPath=new StringBuffer(installPath);
    final char lastChr=bootFolderPath.charAt(bootFolderPath.length() - 1);
    if (lastChr != '/' && lastChr != '\\') {
      bootFolderPath.append('/');
    }
    bootFolderPath.append(PLUGINS_FOLDER);
    final File[] bootPluginFolders=new File(bootFolderPath.toString()).listFiles(new FileFilter(){
      @Override public boolean accept(      final File file){
        if (file.isDirectory() && file.getName().startsWith(BOOT_PLUGIN_FOLDER)) {
          return true;
        }
        return false;
      }
    }
);
    if (bootPluginFolders.length == 0) {
      final IStatus status=new Status(IStatus.ERROR,BOOT_PLUGIN_FOLDER,BOOT_PLUGIN_FOLDER_NOT_FOUND_CODE,BOOT_PLUGIN_FOLDER_NOT_FOUND_MESSAGE,null);
      throw new CoreException(status);
    }
    final String bootJarPath=new File(bootPluginFolders[0],BOOT_JAR).getAbsolutePath().replace(File.separatorChar,'/');
    final URL bootUrl=new URL(PROTOCOL,null,bootJarPath);
    final Class bootLoader=new URLClassLoader(new URL[]{bootUrl},null).loadClass(BOOT_LOADER);
    final Method startupMeth=bootLoader.getMethod(STARTUP_METHOD,new Class[]{URL.class,String.class,String[].class});
    startupMeth.invoke(bootLoader,new Object[]{null,metadataPath,PluginUtilities.startupArgs});
    PluginUtilities.bootLoader=bootLoader;
  }
}",0.9985999299964998
102268,"/** 
 * Logs the given Throwable. <p> If this class is initialized by the Eclipse Platform, then this will forward the request to the  {@link org.eclipse.core.runtime.ILog#log(org.eclipse.core.runtime.IStatus)}method. In other cases (e.g., JUnit), the status is sent to the   {@link SystemLogger}. </p>
 * @param throwable the Throwable to log; may not be null
 */
@Override public void log(final Throwable throwable){
  log(IStatus.ERROR,throwable,throwable.getLocalizedMessage());
}","/** 
 * Logs the given Throwable. <p> If this class is initialized by the Eclipse Platform, then this will forward the request to the  {@link org.eclipse.core.runtime.ILog#log(org.eclipse.core.runtime.IStatus)}method. </p>
 * @param throwable the Throwable to log; may not be null
 */
@Override public void log(final Throwable throwable){
  log(IStatus.ERROR,throwable,throwable.getLocalizedMessage());
}",0.90990990990991
102269,"/** 
 * Logs the given Throwable. <p> If this class is initialized by the Eclipse Platform, then this will forward the request to the  {@link org.eclipse.core.runtime.ILog#log(org.eclipse.core.runtime.IStatus)}method. In other cases (e.g., JUnit), the status is sent to the   {@link SystemLogger}. </p>
 * @param throwable the Throwable to log; may not be null
 */
@Override public void log(final Throwable throwable){
  log(IStatus.ERROR,throwable,throwable.getLocalizedMessage());
}","/** 
 * Logs the given Throwable. <p> If this class is initialized by the Eclipse Platform, then this will forward the request to the  {@link org.eclipse.core.runtime.ILog#log(org.eclipse.core.runtime.IStatus)}method. </p>
 * @param throwable the Throwable to log; may not be null
 */
@Override public void log(final Throwable throwable){
  log(IStatus.ERROR,throwable,throwable.getLocalizedMessage());
}",0.90990990990991
102270,"/** 
 * If the stopwatch is active, record the starting time for a time segment. If the stopwatch is inactive, the method returns immediately.
 * @see isActive
 */
public void start(boolean reset){
  if (reset)   reset();
  start();
}","/** 
 * If the stopwatch is active, record the starting time for a time segment. If the stopwatch is inactive, the method returns immediately.
 * @see #isActive
 */
public void start(boolean reset){
  if (reset)   reset();
  start();
}",0.997867803837953
102271,"/** 
 * If the stopwatch is active, record the ending time for a time segment. If the stopwatch is inactive, the method returns immediately.
 * @see isActive
 */
public void stop(){
  if (active) {
    stop=System.currentTimeMillis();
    stats.add(stop - start);
  }
}","/** 
 * If the stopwatch is active, record the ending time for a time segment. If the stopwatch is inactive, the method returns immediately.
 * @see #isActive
 */
public void stop(){
  if (active) {
    stop=System.currentTimeMillis();
    stats.add(stop - start);
  }
}",0.9981447124304268
102272,"/** 
 * @see org.teiid.designer.ui.common.widget.DefaultContentProvider#getElements(java.lang.Object)
 * @since 5.0.1
 */
@Override public Object[] getElements(Object inputElement){
  return getChildren(inputElement);
}","/** 
 * @since 5.0.1
 */
@Override public Object[] getElements(Object inputElement){
  return getChildren(inputElement);
}",0.7155425219941349
102273,"/** 
 * @see org.eclipse.ui.advisor.core.vdbview.ui.webservices.InfoPopAction#getAction()
 * @since 5.0
 */
@Override public IAction getAction(){
  if (super.getAction() == null) {
    IAction action=null;
    try {
      action=AdvisorUiPlugin.getDefault().getActionService().getAction(this.actionClass);
    }
 catch (    CoreException theException) {
      action=GlobalActionsMap.UNSUPPORTED_ACTION;
    }
    setAction(action);
  }
  IAction theAction=super.getAction();
  return theAction;
}","/** 
 * @see InfoPopAction#getAction()
 * @since 5.0
 */
@Override public IAction getAction(){
  if (super.getAction() == null) {
    IAction action=null;
    try {
      action=AdvisorUiPlugin.getDefault().getActionService().getAction(this.actionClass);
    }
 catch (    CoreException theException) {
      action=GlobalActionsMap.UNSUPPORTED_ACTION;
    }
    setAction(action);
  }
  IAction theAction=super.getAction();
  return theAction;
}",0.9459172852598092
102274,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.IAdvisorActionHandler.AdvisorActionHandler#getStatus()
 */
@Override public AdvisorStatus getStatus(){
  return status;
}","/** 
 * {@inheritDoc}
 * @see IAdvisorActionHandler#getStatus()
 */
@Override public AdvisorStatus getStatus(){
  return status;
}",0.8783783783783784
102275,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.IAdvisorActionHandler.AdvisorActionHandler#setStatus(org.eclipse.core.runtime.IStatus)
 */
@Override public void setStatus(AdvisorStatus status){
  this.status=status;
}","/** 
 * {@inheritDoc}
 * @see IAdvisorActionHandler#setStatus(org.eclipse.core.runtime.IStatus)
 */
@Override public void setStatus(AdvisorStatus status){
  this.status=status;
}",0.9081632653061223
102276,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getText(int)
 */
@Override public String getText(int id){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getText(int)
 */
@Override public String getText(int id){
  return ""String_Node_Str"";
}",0.813953488372093
102277,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getRowsProviders()
 */
@Override public IStatusRowProvider[] getRowsProviders(){
  if (this.providers == null) {
    initRowProviders();
  }
  return this.providers;
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getRowsProviders()
 */
@Override public IStatusRowProvider[] getRowsProviders(){
  if (this.providers == null) {
    initRowProviders();
  }
  return this.providers;
}",0.873015873015873
102278,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getLinkTooltip(int)
 */
@Override public String getLinkTooltip(int id){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getLinkTooltip(int)
 */
@Override public String getLinkTooltip(int id){
  return ""String_Node_Str"";
}",0.8279569892473119
102279,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getStatus(int)
 */
@Override public IStatus getStatus(int id){
  return statusManager.getCurrentStatus().get(id);
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getStatus(int)
 */
@Override public IStatus getStatus(int id){
  return statusManager.getCurrentStatus().get(id);
}",0.84
102280,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getDescription()
 */
@Override public String getDescription(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getDescription()
 */
@Override public String getDescription(){
  return ""String_Node_Str"";
}",0.8192090395480226
102281,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getStatusImage(int)
 */
@Override public Image getStatusImage(int id){
  return AdvisorUiPlugin.getImageHelper().CHECKED_BOX_IMAGE;
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getStatusImage(int)
 */
@Override public Image getStatusImage(int id){
  return AdvisorUiPlugin.getImageHelper().CHECKED_BOX_IMAGE;
}",0.8532110091743119
102282,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getTitle()
 */
@Override public String getTitle(){
  if (statusManager == null || statusManager.getCurrentObject() == null) {
    return ""String_Node_Str"";
  }
  return ((IProject)statusManager.getCurrentObject()).getName();
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getTitle()
 */
@Override public String getTitle(){
  if (statusManager == null || statusManager.getCurrentObject() == null) {
    return ""String_Node_Str"";
  }
  return ((IProject)statusManager.getCurrentObject()).getName();
}",0.8971061093247589
102283,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getImage(int)
 */
@Override public Image getImage(int id){
  return AdvisorUiPlugin.getImageHelper().EMPTY_BOX_IMAGE;
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getImage(int)
 */
@Override public Image getImage(int id){
  return AdvisorUiPlugin.getImageHelper().EMPTY_BOX_IMAGE;
}",0.8431372549019608
102284,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.advisor.ui.core.status.IStatusContentProvider.StatusContentProvider#getDefaultStatus()
 */
@Override public IStatus getDefaultStatus(){
  return StatusValidationConstants.STATUS_MSGS.ADVISOR_NO_PROJECT_SELECTED;
}","/** 
 * {@inheritDoc}
 * @see IStatusContentProvider#getDefaultStatus()
 */
@Override public IStatus getDefaultStatus(){
  return StatusValidationConstants.STATUS_MSGS.ADVISOR_NO_PROJECT_SELECTED;
}",0.8608695652173913
102285,"/** 
 * @see org.eclipse.jface.viewers.ILabelProviderListener#labelProviderChanged(org.eclipse.jface.viewers.LabelProviderChangedEvent)
 */
public void labelProviderChanged(final LabelProviderChangedEvent event){
  boolean modelChanged=false;
  final Object[] elements=event.getElements();
  if (elements != null && elements.length > 1)   for (  final Object nextElement : elements) {
    if (nextElement instanceof EObject) {
      if (ModelUtilities.areModelResourcesSame((EObject)nextElement,getDiagram()))       modelChanged=true;
    }
 else     if (nextElement instanceof IResource)     if (ModelUtilities.isModelFile((IResource)nextElement)) {
      ModelResource modelResource=null;
      try {
        modelResource=ModelUtil.getModelResource((IFile)nextElement,false);
      }
 catch (      final ModelWorkspaceException e) {
        DiagramUiConstants.Util.log(IStatus.ERROR,e,""String_Node_Str"");
      }
      if (modelResource != null && modelResource.equals(modelResource))       modelChanged=true;
    }
    if (modelChanged)     break;
  }
  if (getModelFactory() != null && getCurrentModel() != null && modelChanged)   getDecoratorHandler().handleLabelProviderChanged();
}","/** 
 * @see org.eclipse.jface.viewers.ILabelProviderListener#labelProviderChanged(org.eclipse.jface.viewers.LabelProviderChangedEvent)
 */
public void labelProviderChanged(final LabelProviderChangedEvent event){
  boolean modelChanged=false;
  final Object[] elements=event.getElements();
  if (elements == null) {
    return;
  }
  for (  final Object nextElement : elements) {
    if (nextElement instanceof EObject && ModelUtilities.areModelResourcesSame((EObject)nextElement,getDiagram())) {
      modelChanged=true;
      break;
    }
 else     if (nextElement instanceof IResource && ModelUtilities.isModelFile((IResource)nextElement)) {
      ModelResource modelResource=null;
      ModelResource diagramModelResource=null;
      try {
        modelResource=ModelUtil.getModelResource((IFile)nextElement,false);
        diagramModelResource=ModelUtil.getModel(getDiagram());
      }
 catch (      final ModelWorkspaceException e) {
        DiagramUiConstants.Util.log(IStatus.ERROR,e,""String_Node_Str"");
      }
      if (modelResource != null && diagramModelResource != null && modelResource.equals(diagramModelResource)) {
        modelChanged=true;
        break;
      }
    }
  }
  if (getModelFactory() != null && getCurrentModel() != null && modelChanged)   getDecoratorHandler().handleLabelProviderChanged();
}",0.7809145129224652
102286,"int run(LayoutNode[] nodeArray,double deltaX,double deltaY){
  int nNodes=nodeArray.length;
  Spring spring=new Spring(this);
  if (nNodes == 0)   return 0;
  Rectangle rectangle2d;
  if (_specifyLayoutSize)   rectangle2d=new Rectangle(getStartX(),getStartY(),(int)_layoutSize,(int)_layoutSize);
 else {
    int length=(int)getSizeEstimate();
    rectangle2d=new Rectangle(getStartX(),getStartY(),length,length);
  }
  spring.setRectangle(rectangle2d);
  spring.setAutoEdgeLength(_autoEdgeLength);
  spring.setEdgeLength(_edgeLength);
  spring.setWidthIgnored(!_useObjectsSizes);
  spring.setHeightIgnored(!_useObjectsSizes);
  spring.setRepaintPeriod(_repaintPeriod);
  spring.setEpsilon(_epsilon);
  spring.setNodeConstraints(_nodeConstraints);
  spring.setLinkConstraints(_linkConstraints);
  String string=spring.compute(nodeArray,nNodes);
  for (int i=0; i < i; i++) {
    LayoutNode nextNode=nodeArray[i];
    nextNode.setCenterXY(spring.centerX[i],spring.centerY[i]);
  }
  Rectangle rectangle=new Rectangle(nodeArray[0].getBounds());
  double startX=rectangle.x;
  double startY=rectangle.y;
  double currentW=rectangle.width;
  double currentH=rectangle.height;
  for (int i=1; i < i; i++) {
    double thisX=nodeArray[i].getX();
    double thisY=nodeArray[i].getX();
    double thisW=nodeArray[i].getBounds().width;
    double thisH=nodeArray[i].getBounds().height;
    startX=Math.min(thisX,startX);
    startY=Math.min(thisY,startY);
    currentW=Math.max(currentW,thisW);
    currentH=Math.max(currentH,thisH);
  }
  double xOffset;
  double totalCenterX=rectangle.getCenter().x;
  double totalCenterY=rectangle.getCenter().y;
  if (_horizontalAlignment == 0)   xOffset=-deltaX + rectangle.x - getStartX();
 else   if (_horizontalAlignment == 2)   xOffset=(-deltaX + rectangle.x + rectangle.width * 0.5 - totalCenterX);
 else   xOffset=(-deltaX + rectangle.x + rectangle.width - getStartX() - this.getWidth());
  double yOffset;
  if (_verticalAlignment == 2)   yOffset=(-deltaY + rectangle.y + rectangle.height * 0.5 - totalCenterY);
 else   yOffset=-deltaY + rectangle.y - getStartY();
  for (int i=0; i < nNodes; i++) {
    LayoutNode nextNode=nodeArray[i];
    nextNode.setCenterXY(spring.centerX[i] - xOffset,spring.centerY[i] - yOffset);
  }
  if (string == null)   return 0;
  if (string.endsWith(""String_Node_Str""))   return 1;
  if (string.endsWith(""String_Node_Str""))   return 2;
  return 3;
}","int run(LayoutNode[] nodeArray,double deltaX,double deltaY){
  int nNodes=nodeArray.length;
  Spring spring=new Spring(this);
  if (nNodes == 0)   return 0;
  Rectangle rectangle2d;
  if (_specifyLayoutSize)   rectangle2d=new Rectangle(getStartX(),getStartY(),(int)_layoutSize,(int)_layoutSize);
 else {
    int length=(int)getSizeEstimate();
    rectangle2d=new Rectangle(getStartX(),getStartY(),length,length);
  }
  spring.setRectangle(rectangle2d);
  spring.setAutoEdgeLength(_autoEdgeLength);
  spring.setEdgeLength(_edgeLength);
  spring.setWidthIgnored(!_useObjectsSizes);
  spring.setHeightIgnored(!_useObjectsSizes);
  spring.setRepaintPeriod(_repaintPeriod);
  spring.setEpsilon(_epsilon);
  spring.setNodeConstraints(_nodeConstraints);
  spring.setLinkConstraints(_linkConstraints);
  String string=spring.compute(nodeArray,nNodes);
  for (int i=0; i < nodeArray.length; i++) {
    LayoutNode nextNode=nodeArray[i];
    nextNode.setCenterXY(spring.centerX[i],spring.centerY[i]);
  }
  Rectangle rectangle=new Rectangle(nodeArray[0].getBounds());
  double startX=rectangle.x;
  double startY=rectangle.y;
  double currentW=rectangle.width;
  double currentH=rectangle.height;
  for (int i=1; i < nodeArray.length; i++) {
    double thisX=nodeArray[i].getX();
    double thisY=nodeArray[i].getY();
    double thisW=nodeArray[i].getBounds().width;
    double thisH=nodeArray[i].getBounds().height;
    startX=Math.min(thisX,startX);
    startY=Math.min(thisY,startY);
    currentW=Math.max(currentW,thisW);
    currentH=Math.max(currentH,thisH);
  }
  double xOffset;
  double totalCenterX=rectangle.getCenter().x;
  double totalCenterY=rectangle.getCenter().y;
  if (_horizontalAlignment == 0)   xOffset=-deltaX + rectangle.x - getStartX();
 else   if (_horizontalAlignment == 2)   xOffset=(-deltaX + rectangle.x + rectangle.width * 0.5 - totalCenterX);
 else   xOffset=(-deltaX + rectangle.x + rectangle.width - getStartX() - this.getWidth());
  double yOffset;
  if (_verticalAlignment == 2)   yOffset=(-deltaY + rectangle.y + rectangle.height * 0.5 - totalCenterY);
 else   yOffset=-deltaY + rectangle.y - getStartY();
  for (int i=0; i < nNodes; i++) {
    LayoutNode nextNode=nodeArray[i];
    nextNode.setCenterXY(spring.centerX[i] - xOffset,spring.centerY[i] - yOffset);
  }
  if (string == null)   return 0;
  if (string.endsWith(""String_Node_Str""))   return 1;
  if (string.endsWith(""String_Node_Str""))   return 2;
  return 3;
}",0.9925956396544632
102287,"void displayFunctionChange(){
  if ((cbxFunction.getSelectionIndex() == -1) || !cbxFunction.getText().equals(model.getFunction())) {
    cbxFunction.setText(model.getFunctionName());
    cbxFunction.setToolTipText(model.getFunctionDescription());
    viewer.refresh();
    for (int i=0; i < TBL_HDRS.length; table.getColumn(i++).pack()) {
    }
  }
}","void displayFunctionChange(){
  if ((cbxFunction.getSelectionIndex() == -1) || !cbxFunction.getText().equals(model.getFunction().toString())) {
    cbxFunction.setText(model.getFunctionName());
    cbxFunction.setToolTipText(model.getFunctionDescription());
    viewer.refresh();
    for (int i=0; i < TBL_HDRS.length; table.getColumn(i++).pack()) {
    }
  }
}",0.9845288326300984
102288,"private static Resource getResourceStartsWithPathSeparator(final Resource[] fileResources,final String workspaceUri){
  Resource fileResource=null;
  IPath pathInWorkspace;
  if (workspaceUri.charAt(0) == IPath.SEPARATOR) {
    pathInWorkspace=new Path(workspaceUri);
    for (    final Resource fileResource2 : fileResources) {
      fileResource=fileResource2;
      if (fileResource != null && fileResource.getURI().equals(pathInWorkspace))       return fileResource;
    }
  }
  return null;
}","private static Resource getResourceStartsWithPathSeparator(final Resource[] fileResources,final String workspaceUri){
  Resource fileResource=null;
  IPath pathInWorkspace;
  if (workspaceUri.charAt(0) == IPath.SEPARATOR) {
    pathInWorkspace=new Path(workspaceUri);
    URI pathInWorkspaceURI=URI.createURI(pathInWorkspace.toString());
    for (    final Resource fileResource2 : fileResources) {
      fileResource=fileResource2;
      if (fileResource != null && fileResource.getURI().equals(pathInWorkspaceURI))       return fileResource;
    }
  }
  return null;
}",0.9315838800374884
102289,"/** 
 * @since 3.1
 */
protected static Test suite(){
  return new TestSuite(TestAbstractProxyContainer.class);
}","/** 
 * @since 3.1
 */
public static Test suite(){
  return new TestSuite(TestAbstractProxyContainer.class);
}",0.9506726457399104
102290,"public boolean visit(final JdbcNode node){
  visitedNodes.add(node);
  node.allowsChildren();
  Assert.assertTrue(node.equals(node));
  node.getFullyQualifiedName();
  Assert.assertNotNull(node.getJdbcDatabase());
  Assert.assertNotNull(node.getName());
  if (!(node instanceof JdbcDatabase)) {
    Assert.assertNotNull(node.getParent());
  }
  node.getParentDatabaseObject(true,true);
  node.getParentDatabaseObject(true,false);
  node.getParentDatabaseObject(false,true);
  node.getParentDatabaseObject(false,false);
  final IPath path=node.getPath();
  Assert.assertNotNull(path);
  node.getPathInSource();
  node.getSelectionMode();
  final int type=node.getType();
  Assert.assertTrue(type >= JdbcNode.DATABASE && type <= JdbcNode.PROCEDURE_TYPE);
  final String typeName=node.getTypeName();
  Assert.assertTrue(node.hashCode() != 0);
  final boolean dbObj=node.isDatabaseObject();
  if (node instanceof JdbcDatabase || node instanceof JdbcTableType || node instanceof JdbcProcedureType) {
    Assert.assertEquals(""String_Node_Str"" + path + ""String_Node_Str""+ typeName+ ""String_Node_Str"",false,dbObj);
  }
  return true;
}","public boolean visit(final JdbcNode node){
  visitedNodes.add(node);
  node.allowsChildren();
  node.getFullyQualifiedName();
  Assert.assertNotNull(node.getJdbcDatabase());
  Assert.assertNotNull(node.getName());
  if (!(node instanceof JdbcDatabase)) {
    Assert.assertNotNull(node.getParent());
  }
  node.getParentDatabaseObject(true,true);
  node.getParentDatabaseObject(true,false);
  node.getParentDatabaseObject(false,true);
  node.getParentDatabaseObject(false,false);
  final IPath path=node.getPath();
  Assert.assertNotNull(path);
  node.getPathInSource();
  node.getSelectionMode();
  final int type=node.getType();
  Assert.assertTrue(type >= JdbcNode.DATABASE && type <= JdbcNode.PROCEDURE_TYPE);
  final String typeName=node.getTypeName();
  Assert.assertTrue(node.hashCode() != 0);
  final boolean dbObj=node.isDatabaseObject();
  if (node instanceof JdbcDatabase || node instanceof JdbcTableType || node instanceof JdbcProcedureType) {
    Assert.assertEquals(""String_Node_Str"" + path + ""String_Node_Str""+ typeName+ ""String_Node_Str"",false,dbObj);
  }
  return true;
}",0.98193315266486
102291,"public void testSetGetFaults(){
  Operation oper=new OperationImpl(ModelElementFactory.getTestBinding(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Fault[] faults=new Fault[]{ModelElementFactory.getTestFault(""String_Node_Str"",""String_Node_Str"",oper)};
  oper.setFaults(faults);
  assertEquals(faults,oper.getFaults());
}","public void testSetGetFaults(){
  Operation oper=new OperationImpl(ModelElementFactory.getTestBinding(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Fault[] faults=new Fault[]{ModelElementFactory.getTestFault(""String_Node_Str"",""String_Node_Str"",oper)};
  oper.setFaults(faults);
  assertSame(faults,oper.getFaults());
}",0.9857142857142858
102292,"protected static Test suite(){
  return new TestSuite(TestSelectionUtilities.class);
}","public static Test suite(){
  return new TestSuite(TestSelectionUtilities.class);
}",0.9349112426035504
102293,"protected static Test suite(){
  return new TestSuite(TestModelUtilities.class);
}","public static Test suite(){
  return new TestSuite(TestModelUtilities.class);
}",0.9316770186335404
102294,"/** 
 * Utility method (mostly for testing) that allows one to add a child node one at a time. This method does <i>not</i> check whether the node already exists as a child of this node.
 */
void addChild(final JdbcNode node) throws JdbcException {
  final JdbcNode[] currentChildren=this.getChildren();
  final int currentNumChildren=currentChildren.length;
  if (currentNumChildren != 0) {
    final JdbcNode[] newChildren=new JdbcNode[currentNumChildren + 1];
    System.arraycopy(currentChildren,0,newChildren,0,currentNumChildren);
    newChildren[currentNumChildren]=node;
    children=newChildren;
  }
 else {
    children=new JdbcNode[]{node};
  }
  final InternalJdbcDatabase dbNode=(InternalJdbcDatabase)getJdbcDatabase();
  dbNode.getJdbcNodeCache().put(node);
}","/** 
 * Utility method (mostly for testing) that allows one to add a child node one at a time. This method does <i>not</i> check whether the node already exists as a child of this node. Warning: this method is only made public to allow for unit testing. Other uses are discouraged.
 */
public void addChild(final JdbcNode node) throws JdbcException {
  final JdbcNode[] currentChildren=this.getChildren();
  final int currentNumChildren=currentChildren.length;
  if (currentNumChildren != 0) {
    final JdbcNode[] newChildren=new JdbcNode[currentNumChildren + 1];
    System.arraycopy(currentChildren,0,newChildren,0,currentNumChildren);
    newChildren[currentNumChildren]=node;
    children=newChildren;
  }
 else {
    children=new JdbcNode[]{node};
  }
  final InternalJdbcDatabase dbNode=(InternalJdbcDatabase)getJdbcDatabase();
  dbNode.getJdbcNodeCache().put(node);
}",0.9374620522161504
102295,"/** 
 * Set the name of the target view relational Model.
 * @param targetModelName the target view Model Name
 */
public void setViewModelName(String targetModelName){
  this.viewModelName=targetModelName;
}","/** 
 * Set the name of the target view relational Model.
 * @param targetModelName the target view Model Name
 */
public void setViewModelName(String targetModelName){
  this.viewModelName=targetModelName;
  setChanged(true);
}",0.9541284403669724
102296,"/** 
 * @param translatorDefaultServiceMode the translatorDefaultServiceMode to set
 */
public void setTranslatorDefaultServiceMode(String translatorDefaultServiceMode){
  this.translatorDefaultServiceMode=translatorDefaultServiceMode;
}","/** 
 * @param translatorDefaultServiceMode the translatorDefaultServiceMode to set
 */
public void setTranslatorDefaultServiceMode(String translatorDefaultServiceMode){
  this.translatorDefaultServiceMode=translatorDefaultServiceMode;
  setChanged(true);
}",0.9595141700404858
102297,"/** 
 * @param connectionProfile Sets connectionProfile to the specified value.
 */
public void setConnectionProfile(IConnectionProfile connectionProfile){
  this.connectionProfile=connectionProfile;
}","/** 
 * @param connectionProfile Sets connectionProfile to the specified value.
 */
public void setConnectionProfile(IConnectionProfile connectionProfile){
  this.connectionProfile=connectionProfile;
  setChanged(true);
}",0.95260663507109
102298,"/** 
 * @param sourceModelName (never <code>null</code> or empty).
 */
public void setSourceModelName(String sourceModelName){
  this.sourceModelName=sourceModelName;
}","/** 
 * @param sourceModelName (never <code>null</code> or empty).
 */
public void setSourceModelName(String sourceModelName){
  this.sourceModelName=sourceModelName;
  setChanged(true);
}",0.9438202247191012
102299,"public void setViewModelExists(boolean viewModelExists){
  this.viewModelExists=viewModelExists;
  if (this.viewModelExists) {
    for (    ProcedureGenerator generator : this.procedureGenerators.values()) {
      if (!generator.doOverwriteExistingProcedures()) {
        String validRequestName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getRequestInfo().getDefaultProcedureName(),false,false);
        generator.getRequestInfo().setProcedureName(validRequestName);
        String validResponseName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getResponseInfo().getDefaultProcedureName(),false,false);
        generator.getResponseInfo().setProcedureName(validResponseName);
        String validWrapperName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getDefaultWrapperProcedureName(),false,false);
        generator.setWrapperProcedureName(validWrapperName);
      }
    }
  }
 else {
    for (    ProcedureGenerator generator : this.procedureGenerators.values()) {
      generator.getRequestInfo().setProcedureName(generator.getRequestInfo().getDefaultProcedureName());
      generator.getResponseInfo().setProcedureName(generator.getResponseInfo().getDefaultProcedureName());
      String validWrapperName=generator.getWrapperProcedureName();
      if (validWrapperName.startsWith(generator.getDefaultWrapperProcedureName())) {
        generator.setWrapperProcedureName(generator.getWrapperProcedureName());
      }
    }
  }
}","public void setViewModelExists(boolean viewModelExists){
  this.viewModelExists=viewModelExists;
  if (this.viewModelExists) {
    for (    ProcedureGenerator generator : this.procedureGenerators.values()) {
      if (!generator.doOverwriteExistingProcedures()) {
        String validRequestName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getRequestInfo().getDefaultProcedureName(),false,false);
        generator.getRequestInfo().setProcedureName(validRequestName);
        String validResponseName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getResponseInfo().getDefaultProcedureName(),false,false);
        generator.getResponseInfo().setProcedureName(validResponseName);
        String validWrapperName=ModelGeneratorWsdlUiUtil.getUniqueName(getViewModelLocation().getFullPath().toString(),getViewModelName(),generator.getDefaultWrapperProcedureName(),false,false);
        generator.setWrapperProcedureName(validWrapperName);
      }
    }
  }
 else {
    for (    ProcedureGenerator generator : this.procedureGenerators.values()) {
      generator.getRequestInfo().setProcedureName(generator.getRequestInfo().getDefaultProcedureName());
      generator.getResponseInfo().setProcedureName(generator.getResponseInfo().getDefaultProcedureName());
      String validWrapperName=generator.getWrapperProcedureName();
      if (validWrapperName.startsWith(generator.getDefaultWrapperProcedureName())) {
        generator.setWrapperProcedureName(generator.getWrapperProcedureName());
      }
    }
  }
  setChanged(true);
}",0.9939613526570048
102300,"public void setGenerateDefaultProcedures(boolean generateDefaultProcedures){
  this.generateDefaultProcedures=generateDefaultProcedures;
}","public void setGenerateDefaultProcedures(boolean generateDefaultProcedures){
  this.generateDefaultProcedures=generateDefaultProcedures;
  setChanged(true);
}",0.9324324324324323
102301,"/** 
 * Set the WSDL File URI String
 * @param fileUri the specified file uri
 */
public void setWSDLFileUri(String fileUri){
  if (this.wsdlReader.getWSDLUri() == null) {
    this.wsdlReader.setWSDLUri(fileUri);
  }
 else   if (!(this.wsdlReader.getWSDLUri().equals(fileUri))) {
    this.wsdlReader.setWSDLUri(fileUri);
    this.wsdlModel=null;
  }
}","/** 
 * Set the WSDL File URI String
 * @param fileUri the specified file uri
 */
public void setWSDLFileUri(String fileUri){
  if (this.wsdlReader.getWSDLUri() == null) {
    this.wsdlReader.setWSDLUri(fileUri);
  }
 else   if (!(this.wsdlReader.getWSDLUri().equals(fileUri))) {
    this.wsdlReader.setWSDLUri(fileUri);
    this.wsdlModel=null;
  }
  setChanged(true);
}",0.9722991689750692
102302,"/** 
 * Set the location where the target Model is to be generated.
 * @param viewModelLocation the target Model location
 */
public void setViewModelLocation(IContainer viewModelLocation){
  this.viewModelLocation=viewModelLocation;
}","/** 
 * Set the location where the target Model is to be generated.
 * @param viewModelLocation the target Model location
 */
public void setViewModelLocation(IContainer viewModelLocation){
  this.viewModelLocation=viewModelLocation;
  setChanged(true);
}",0.9591836734693876
102303,"public void setSourceModelExists(boolean sourceModelExists){
  this.sourceModelExists=sourceModelExists;
}","public void setSourceModelExists(boolean sourceModelExists){
  this.sourceModelExists=sourceModelExists;
  setChanged(true);
}",0.913793103448276
102304,"/** 
 * Set the source of the WSDL URI
 * @param uriSource Integer indicating the source of the WSDL URI
 */
public void setUriSource(int uriSource){
  this.uriSource=uriSource;
}","/** 
 * Set the source of the WSDL URI
 * @param uriSource Integer indicating the source of the WSDL URI
 */
public void setUriSource(int uriSource){
  this.uriSource=uriSource;
  setChanged(true);
}",0.9470899470899472
102305,"public WSDLImportWizardManager(){
  this.wsdlReader=new WSDLReader();
  this.selectedOperations=new ArrayList();
  this.procedureGenerators=new HashMap<Operation,ProcedureGenerator>();
}","public WSDLImportWizardManager(){
  this.wsdlReader=new WSDLReader();
  this.selectedOperations=new ArrayList();
  this.procedureGenerators=new HashMap<Operation,ProcedureGenerator>();
  this.listeners=new ArrayList<IChangeListener>(5);
  this.validator=new ImportManagerValidator(this);
  setChanged(true);
}",0.7515151515151515
102306,"/** 
 * @return location the target location where the view model either exists or is going to be created
 */
public void setSourceModelLocation(IContainer location){
  this.sourceModelLocation=location;
}","/** 
 * @return location the target location where the view model either exists or is going to be created
 */
public void setSourceModelLocation(IContainer location){
  this.sourceModelLocation=location;
  setChanged(true);
}",0.9534883720930232
102307,"/** 
 * @param translatorDefaultBinding the translatorDefaultBinding to set
 */
public void setTranslatorDefaultBinding(String translatorDefaultBinding){
  this.translatorDefaultBinding=translatorDefaultBinding;
}","/** 
 * @param translatorDefaultBinding the translatorDefaultBinding to set
 */
public void setTranslatorDefaultBinding(String translatorDefaultBinding){
  this.translatorDefaultBinding=translatorDefaultBinding;
  setChanged(true);
}",0.9551569506726456
102308,"public IStatus validate(){
  IStatus returnStatus=Status.OK_STATUS;
  if (this.procedureGenerators.isEmpty()) {
    return new Status(IStatus.WARNING,ProcedureGenerator.PLUGIN_ID,Messages.Error_NoOperationsSelected);
  }
  for (  ProcedureGenerator generator : this.procedureGenerators.values()) {
    IStatus status=generator.validate();
    if (status.getSeverity() > IStatus.WARNING) {
      return status;
    }
 else     if (status.getSeverity() == IStatus.WARNING && returnStatus.getSeverity() == IStatus.OK) {
      returnStatus=status;
    }
  }
  return returnStatus;
}","public void validate(){
  if (isChanged()) {
    this.validator.validate();
  }
  setChanged(false);
}",0.2352941176470588
102309,"/** 
 * Set the endpoint for the selected port
 * @param endPoint
 */
public void setEndPoint(String endPoint){
  this.endPoint=endPoint;
}","/** 
 * Set the endpoint for the selected port
 * @param endPoint
 */
public void setEndPoint(String endPoint){
  this.endPoint=endPoint;
  setChanged(true);
}",0.9328859060402684
102310,"/** 
 * Set the selected operations to process
 * @param operations the list of operations
 */
public void setSelectedOperations(List<Operation> operations){
  this.selectedOperations=operations;
  synchronizeProcedureGenerators();
}","/** 
 * Set the selected operations to process
 * @param operations the list of operations
 */
public void setSelectedOperations(List<Operation> operations){
  this.selectedOperations=operations;
  synchronizeProcedureGenerators();
  setChanged(true);
}",0.9588477366255144
102311,"/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 * @since 4.2
 */
@SuppressWarnings(""String_Node_Str"") public void createControl(Composite theParent){
  final int COLUMNS=1;
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(COLUMNS,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  pnlMain.addControlListener(new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      System.out.println(""String_Node_Str"");
    }
    @Override public void controlMoved(    ControlEvent e){
    }
  }
);
  MODEL_DEFINITION: {
    importOptionsPanel=new ImportOptionsPanel(pnlMain,this.importManager);
  }
  ;
  GENERATE_PROCEDURE_OPTION: {
    Group group=WidgetFactory.createGroup(pnlMain,Messages.ProcedureGenerationOptions,SWT.NONE | SWT.BORDER,1);
    group.setLayout(new GridLayout(1,false));
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    generateCustomProceduresButton=WidgetFactory.createRadioButton(group,Messages.CustomProcedures,true);
    generateCustomProceduresButton.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        handleGenerateOptionChanged();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    Text customProceduresHelpText=new Text(group,SWT.WRAP | SWT.READ_ONLY);
    customProceduresHelpText.setBackground(WidgetUtil.getReadOnlyBackgroundColor());
    customProceduresHelpText.setForeground(WidgetUtil.getDarkBlueColor());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.heightHint=40;
    customProceduresHelpText.setLayoutData(gd);
    customProceduresHelpText.setText(Messages.OptionDefineCustomProcures);
    generateDefaultProceduresButton=WidgetFactory.createRadioButton(group,Messages.DefaultProcedures,false);
    generateDefaultProceduresButton.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        handleGenerateOptionChanged();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    Text defaultProceduresHelpText=new Text(group,SWT.WRAP | SWT.READ_ONLY);
    defaultProceduresHelpText.setBackground(WidgetUtil.getReadOnlyBackgroundColor());
    defaultProceduresHelpText.setForeground(WidgetUtil.getDarkBlueColor());
    gd=new GridData(GridData.FILL_VERTICAL);
    gd.heightHint=40;
    defaultProceduresHelpText.setLayoutData(gd);
    defaultProceduresHelpText.setText(Messages.OptionDefineDefaultProcedures);
  }
  restoreState();
}","/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 * @since 4.2
 */
@SuppressWarnings(""String_Node_Str"") public void createControl(Composite theParent){
  final int COLUMNS=1;
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(COLUMNS,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  MODEL_DEFINITION: {
    importOptionsPanel=new ImportOptionsPanel(pnlMain,this.importManager);
  }
  GENERATE_PROCEDURE_OPTION: {
    Group group=WidgetFactory.createGroup(pnlMain,Messages.ProcedureGenerationOptions,SWT.NONE | SWT.BORDER,1);
    group.setLayout(new GridLayout(1,false));
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    generateCustomProceduresButton=WidgetFactory.createRadioButton(group,Messages.CustomProcedures,true);
    generateCustomProceduresButton.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        handleGenerateOptionChanged();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    Text customProceduresHelpText=new Text(group,SWT.WRAP | SWT.READ_ONLY);
    customProceduresHelpText.setBackground(WidgetUtil.getReadOnlyBackgroundColor());
    customProceduresHelpText.setForeground(WidgetUtil.getDarkBlueColor());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.heightHint=40;
    customProceduresHelpText.setLayoutData(gd);
    customProceduresHelpText.setText(Messages.OptionDefineCustomProcures);
    generateDefaultProceduresButton=WidgetFactory.createRadioButton(group,Messages.DefaultProcedures,false);
    generateDefaultProceduresButton.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        handleGenerateOptionChanged();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
    Text defaultProceduresHelpText=new Text(group,SWT.WRAP | SWT.READ_ONLY);
    defaultProceduresHelpText.setBackground(WidgetUtil.getReadOnlyBackgroundColor());
    defaultProceduresHelpText.setForeground(WidgetUtil.getDarkBlueColor());
    gd=new GridData(GridData.FILL_VERTICAL);
    gd.heightHint=40;
    defaultProceduresHelpText.setLayoutData(gd);
    defaultProceduresHelpText.setText(Messages.OptionDefineDefaultProcedures);
  }
}",0.9493769470404984
102312,"public String createResponseColumn(int responseType){
  if (responseType == ProcedureInfo.TYPE_BODY) {
    return this.responseBodySchemaContentsGroup.createResponseColumn();
  }
 else {
    return this.responseHeaderSchemaContentsGroup.createResponseColumn();
  }
}","public String createResponseColumn(int responseType){
  if (responseType == ProcedureInfo.TYPE_BODY) {
    return this.responseBodySchemaContentsGroup.createResponseColumn();
  }
  return this.responseHeaderSchemaContentsGroup.createResponseColumn();
}",0.972972972972973
102313,"/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 * @since 4.2
 */
public void createControl(Composite theParent){
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(2,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  createOperationsSelectionPanel(pnlMain);
  createTabbedDetailsPanel(pnlMain);
  restoreState();
}","/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 * @since 4.2
 */
public void createControl(Composite theParent){
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(2,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  createOperationsSelectionPanel(pnlMain);
  createTabbedDetailsPanel(pnlMain);
}",0.979498861047836
102314,"public String createRequestColumn(int requestType){
  if (requestType == ProcedureInfo.TYPE_BODY) {
    return this.requestBodySchemaContentsGroup.createRequestColumn();
  }
 else {
    return this.requestHeaderSchemaContentsGroup.createRequestColumn();
  }
}","public String createRequestColumn(int requestType){
  if (requestType == ProcedureInfo.TYPE_BODY) {
    return this.requestBodySchemaContentsGroup.createRequestColumn();
  }
  return this.requestHeaderSchemaContentsGroup.createRequestColumn();
}",0.9722222222222222
102315,"/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite theParent){
  this.profileWorker=new ConnectionProfileWorker(this.getShell(),ConnectionProfileWorker.CATEGORY_WS,this);
  final int COLUMNS=1;
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(COLUMNS,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  IWorkbenchHelpSystem helpSystem=UiUtil.getWorkbench().getHelpSystem();
  helpSystem.setHelp(pnlMain,WSDL_SELECTION_PAGE);
  createSourceSelectionComposite(pnlMain);
  createWsdlOperationsPanel(pnlMain);
  setPageStatus();
  restoreState();
}","/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite theParent){
  this.profileWorker=new ConnectionProfileWorker(this.getShell(),ConnectionProfileWorker.CATEGORY_WS,this);
  final int COLUMNS=1;
  Composite pnlMain=WidgetFactory.createPanel(theParent,SWT.NONE,GridData.FILL_BOTH);
  GridLayout layout=new GridLayout(COLUMNS,false);
  pnlMain.setLayout(layout);
  setControl(pnlMain);
  IWorkbenchHelpSystem helpSystem=UiUtil.getWorkbench().getHelpSystem();
  helpSystem.setHelp(pnlMain,WSDL_SELECTION_PAGE);
  createSourceSelectionComposite(pnlMain);
  createWsdlOperationsPanel(pnlMain);
  setPageStatus();
}",0.9872521246458924
102316,"/** 
 * @see com.metamatrix.ui.internal.widget.ITreeViewerController#itemExpanded(org.eclipse.jface.viewers.TreeExpansionEvent)
 * @since 4.0
 */
@Override public void itemExpanded(final TreeExpansionEvent event){
  if (treeExpanded) {
    super.itemExpanded(event);
  }
 else {
    final TreeItem item=((TreeViewer)event.getTreeViewer()).getTree().getSelection()[0];
    if (item.getData() != null) {
      updateChildren(item,false);
    }
    treeExpanded=true;
  }
  updateTreeSelectionDetails();
}","/** 
 * @see com.metamatrix.ui.internal.widget.ITreeViewerController#itemExpanded(org.eclipse.jface.viewers.TreeExpansionEvent)
 * @since 4.0
 */
@Override public void itemExpanded(final TreeExpansionEvent event){
  if (treeExpanded) {
    super.itemExpanded(event);
  }
 else {
    if (((TreeViewer)event.getTreeViewer()).getTree().getSelection().length > 0) {
      final TreeItem item=((TreeViewer)event.getTreeViewer()).getTree().getSelection()[0];
      if (item.getData() != null) {
        updateChildren(item,false);
      }
      treeExpanded=true;
    }
  }
  updateTreeSelectionDetails();
}",0.9102447869446962
102317,"/** 
 * @return
 */
public XSDTypeDefinition getSchemaForSelectedOperation(final int type){
  Model wsdlModel=null;
  XSDTypeDefinition elementDeclaration=null;
  try {
    wsdlModel=importManager.getWSDLModel();
  }
 catch (  ModelGenerationException e) {
    e.printStackTrace();
  }
  XSDSchema[] schemas=wsdlModel.getSchemas();
  Operation selectedOperation=procedureGenerator.getOperation();
  String partElementName=null;
  if (type == REQUEST) {
    partElementName=selectedOperation.getInputMessage().getParts()[0].getTypeName();
    if (partElementName == null) {
      partElementName=selectedOperation.getInputMessage().getParts()[0].getElementName();
    }
  }
 else {
    partElementName=selectedOperation.getOutputMessage().getParts()[0].getTypeName();
    if (partElementName == null) {
      partElementName=selectedOperation.getOutputMessage().getParts()[0].getElementName();
    }
  }
  for (  XSDSchema schema : schemas) {
    xsdSchema=schema;
    EList<XSDTypeDefinition> types=schema.getTypeDefinitions();
    for (    XSDTypeDefinition xsdType : types) {
      String elementName=xsdType.getName();
      if (xsdType.getName().equals(partElementName)) {
        elementDeclaration=xsdType;
        break;
      }
    }
    if (elementDeclaration == null) {
      EList<XSDElementDeclaration> elements=schema.getElementDeclarations();
      for (      XSDElementDeclaration element : elements) {
        String elementName=element.getName();
        if (element.getName().equals(partElementName)) {
          elementDeclaration=element.getTypeDefinition();
          break;
        }
      }
    }
  }
  return elementDeclaration;
}","/** 
 * @return
 */
public XSDTypeDefinition getSchemaForSelectedOperation(final int type){
  Model wsdlModel=null;
  XSDTypeDefinition elementDeclaration=null;
  try {
    wsdlModel=importManager.getWSDLModel();
  }
 catch (  ModelGenerationException e) {
    e.printStackTrace();
  }
  XSDSchema[] schemas=wsdlModel.getSchemas();
  Operation selectedOperation=procedureGenerator.getOperation();
  String partElementName=null;
  if (type == REQUEST) {
    if (selectedOperation.getInputMessage() != null) {
      partElementName=selectedOperation.getInputMessage().getParts()[0].getTypeName();
      if (partElementName == null) {
        partElementName=selectedOperation.getInputMessage().getParts()[0].getElementName();
      }
    }
  }
 else {
    if (selectedOperation.getOutputMessage() != null) {
      partElementName=selectedOperation.getOutputMessage().getParts()[0].getTypeName();
      if (partElementName == null) {
        partElementName=selectedOperation.getOutputMessage().getParts()[0].getElementName();
      }
    }
  }
  for (  XSDSchema schema : schemas) {
    xsdSchema=schema;
    EList<XSDTypeDefinition> types=schema.getTypeDefinitions();
    for (    XSDTypeDefinition xsdType : types) {
      String elementName=xsdType.getName();
      if (elementName.equals(partElementName)) {
        elementDeclaration=xsdType;
        break;
      }
    }
    if (elementDeclaration == null) {
      EList<XSDElementDeclaration> elements=schema.getElementDeclarations();
      for (      XSDElementDeclaration element : elements) {
        String elementName=element.getName();
        if (elementName.equals(partElementName)) {
          elementDeclaration=element.getTypeDefinition();
          break;
        }
      }
    }
  }
  return elementDeclaration;
}",0.7109170305676856
102318,"public String getWrapperSqlString(){
  StringBuilder sb=new StringBuilder();
  String tableAlias=""String_Node_Str"";
  sb.append(SQL_BEGIN);
  sb.append(TAB).append(SELECT).append(SPACE).append(tableAlias).append(DOT).append(STAR).append(SPACE).append(FROM).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC);
  sb.append(getModelNameWithoutExtension(importManager.getSourceModelName()));
  sb.append(DOT).append(getRequestProcedureName());
  sb.append(L_PAREN);
  int nColumns=this.requestInfo.getColumnInfoList().length;
  int i=0;
  for (  ColumnInfo columnInfo : this.requestInfo.getColumnInfoList()) {
    String name=columnInfo.getName();
    sb.append(getParamaterFullName(name));
    if (i < (nColumns - 1)) {
      sb.append(COMMA).append(SPACE);
    }
    i++;
  }
  sb.append(R_PAREN).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(REQUEST_LOWER).append(COMMA).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC).append(getModelNameWithoutExtension(importManager.getSourceModelName())).append(DOT).append(INVOKE_SEGMENT).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(RESPONSE_LOWER).append(COMMA).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC).append(getModelNameWithoutExtension(importManager.getViewModelName())).append(DOT).append(getResponseProcedureName()).append(L_PAREN).append(RESPONSE).append(DOT).append(RESULT_LOWER).append(R_PAREN).append(R_PAREN).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(tableAlias).append(SEMI_COLON).append(RETURN);
  sb.append(SQL_END);
  return sb.toString();
}","public String getWrapperSqlString(){
  StringBuilder sb=new StringBuilder();
  String tableAlias=""String_Node_Str"";
  sb.append(SQL_BEGIN);
  sb.append(TAB).append(SELECT).append(SPACE).append(tableAlias).append(DOT).append(STAR).append(SPACE).append(FROM).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC);
  sb.append(getModelNameWithoutExtension(importManager.getViewModelName()));
  sb.append(DOT).append(getRequestProcedureName());
  sb.append(L_PAREN);
  int nColumns=this.requestInfo.getColumnInfoList().length;
  int i=0;
  for (  ColumnInfo columnInfo : this.requestInfo.getColumnInfoList()) {
    String name=columnInfo.getName();
    sb.append(getParamaterFullName(name));
    if (i < (nColumns - 1)) {
      sb.append(COMMA).append(SPACE);
    }
    i++;
  }
  sb.append(R_PAREN).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(REQUEST_LOWER).append(COMMA).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC).append(getModelNameWithoutExtension(importManager.getSourceModelName())).append(DOT).append(INVOKE_SEGMENT).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(RESPONSE_LOWER).append(COMMA).append(RETURN);
  sb.append(TAB).append(TAB).append(TABLE_EXEC).append(getModelNameWithoutExtension(importManager.getViewModelName())).append(DOT).append(getResponseProcedureName()).append(L_PAREN).append(RESPONSE).append(DOT).append(RESULT_LOWER).append(R_PAREN).append(R_PAREN).append(RETURN);
  sb.append(TAB).append(AS).append(SPACE).append(tableAlias).append(SEMI_COLON).append(RETURN);
  sb.append(SQL_END);
  return sb.toString();
}",0.9968886123210952
102319,"public String getParamaterFullName(String name){
  StringBuilder builder=new StringBuilder();
  builder.append(this.getViewModelName());
  builder.append('.').append(this.operation.getName()).append('.').append(name);
  return builder.toString();
}","public String getParamaterFullName(String name){
  StringBuilder builder=new StringBuilder();
  builder.append(this.getViewModelName());
  builder.append('.').append(getWrappedProcedureName()).append('.').append(name);
  return builder.toString();
}",0.7203219315895373
102320,"private void handleWrapperProcedureNameChanged(){
  this.detailsPage.getProcedureGenerator().setWrapperProcedureName(this.wrapperProcedureText.getText());
  validate();
}","private void handleWrapperProcedureNameChanged(){
  this.detailsPage.getProcedureGenerator().setWrapperProcedureName(this.wrapperProcedureText.getText());
  this.sqlTextViewer.getDocument().set(detailsPage.getProcedureGenerator().getWrapperSqlString());
  validate();
}",0.7744874715261959
102321,"/** 
 * @throws JdbcException
 * @since 5.0
 */
public void setUpdatedModelSettings() throws JdbcException {
  if (this.db == null) {
    return;
  }
  final JdbcImportSettings settings=this.src.getImportSettings();
  if (settings != null) {
    for (final Iterator objIter=settings.getExcludedObjectPaths().iterator(); objIter.hasNext(); ) {
      final IPath path=new Path((String)objIter.next());
      final JdbcNode node=findNode(path,this.db);
      if (node != null) {
        node.setSelected(false);
      }
    }
    final Includes includes=this.db.getIncludes();
    final List types=settings.getIncludedTableTypes();
    includes.setIncludedTableTypes((String[])types.toArray(new String[types.size()]));
    includes.setApproximateIndexes(settings.isIncludeApproximateIndexes());
    includes.setIncludeForeignKeys(settings.isIncludeForeignKeys());
    includes.setIncludeIndexes(settings.isIncludeIndexes());
    includes.setIncludeProcedures(settings.isIncludeProcedures());
    includes.setUniqueIndexesOnly(settings.isIncludeUniqueIndexes());
  }
}","/** 
 * @throws JdbcException
 * @since 5.0
 */
public void setUpdatedModelSettings() throws JdbcException {
  if (this.db == null) {
    return;
  }
  JdbcImportSettings settings=null;
  if (this.updateSrc != null) {
    settings=this.updateSrc.getImportSettings();
  }
 else   if (this.src != null) {
    settings=this.src.getImportSettings();
  }
  if (settings != null) {
    for (final Iterator objIter=settings.getExcludedObjectPaths().iterator(); objIter.hasNext(); ) {
      final IPath path=new Path((String)objIter.next());
      final JdbcNode node=findNode(path,this.db);
      if (node != null) {
        node.setSelected(false);
      }
    }
    final Includes includes=this.db.getIncludes();
    final List types=settings.getIncludedTableTypes();
    includes.setIncludedTableTypes((String[])types.toArray(new String[types.size()]));
    includes.setApproximateIndexes(settings.isIncludeApproximateIndexes());
    includes.setIncludeForeignKeys(settings.isIncludeForeignKeys());
    includes.setIncludeIndexes(settings.isIncludeIndexes());
    includes.setIncludeProcedures(settings.isIncludeProcedures());
    includes.setUniqueIndexesOnly(settings.isIncludeUniqueIndexes());
  }
}",0.9301503094606542
102322,"/** 
 * @since 4.0
 */
public void setUpdatedModel(final ModelResource model) throws ModelWorkspaceException {
  this.updatedModel=null;
  if (model != null) {
    for (final Iterator modelIter=model.getAllRootEObjects().iterator(); modelIter.hasNext(); ) {
      final Object obj=modelIter.next();
      if (obj instanceof JdbcSource) {
        this.updatedModel=model;
        try {
          this.src=(JdbcSource)ModelerCore.getModelEditor().copy((JdbcSource)obj);
          setUpdatedModelSettings();
          break;
        }
 catch (        final Exception err) {
          throw new ModelWorkspaceException(err);
        }
      }
    }
  }
}","/** 
 * @since 4.0
 */
public void setUpdatedModel(final ModelResource model) throws ModelWorkspaceException {
  this.updatedModel=null;
  this.updateSrc=null;
  if (model != null) {
    for (final Iterator modelIter=model.getAllRootEObjects().iterator(); modelIter.hasNext(); ) {
      final Object obj=modelIter.next();
      if (obj instanceof JdbcSource) {
        this.updatedModel=model;
        try {
          this.updateSrc=(JdbcSource)ModelerCore.getModelEditor().copy((JdbcSource)obj);
          setUpdatedModelSettings();
          break;
        }
 catch (        final Exception err) {
          throw new ModelWorkspaceException(err);
        }
      }
    }
  }
 else {
    try {
      setUpdatedModelSettings();
    }
 catch (    final Exception err) {
      throw new ModelWorkspaceException(err);
    }
  }
}",0.8788083953960731
102323,"/** 
 * @since 4.0
 */
public IStatus importModel(final IProgressMonitor monitor) throws ModelWorkspaceException {
  final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(this.src);
  final IStatus status=processor.execute(this.updatedModel,this.db,this.src.getImportSettings(),monitor);
  return status;
}","/** 
 * @since 4.0
 */
public IStatus importModel(final IProgressMonitor monitor) throws ModelWorkspaceException {
  final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor();
  final IStatus status=processor.execute(this.updatedModel,this.db,this.updateSrc.getImportSettings(),monitor);
  return status;
}",0.9770773638968482
102324,"/** 
 * Create a new   {@link RelationalModelProcessor Relational model processor} that can transform{@link com.metamatrix.modeler.jdbc.metadata.JdbcDatabase JDBC metadata} into a{@link com.metamatrix.metamodels.relational.RelationalPackage Relational} model.<p>
 * @param source
 * @param processorType
 * @return the new model processor
 */
public static RelationalModelProcessor createRelationalModelProcessor(final JdbcSource source,final String processorType){
  return createRelationalModelProcessor(source,RelationalTypeMappingImpl.getInstance(),processorType);
}","/** 
 * Create a new   {@link RelationalModelProcessor Relational model processor} that can transform{@link com.metamatrix.modeler.jdbc.metadata.JdbcDatabase JDBC metadata} into a{@link com.metamatrix.metamodels.relational.RelationalPackage Relational} model.<p>
 * @param source
 * @param processorType
 * @return the new model processor
 */
public static RelationalModelProcessor createRelationalModelProcessor(final String processorType){
  return createRelationalModelProcessor(RelationalTypeMappingImpl.getInstance(),processorType);
}",0.9720468890892696
102325,"void runFinish(IProgressMonitor monitor) throws InvocationTargetException {
  Stopwatch totalWatch=new Stopwatch();
  totalWatch.start();
  Stopwatch sWatch=new Stopwatch();
  try {
    sWatch.start();
    if (ppProcessorPack == null) {
      final JdbcSource src=getSource();
      final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src,srcPg.getMetadataProcessor());
      final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
      processor.setIncludeIncompleteFKs(includeIncompleteFKs);
      processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
      final IFile modelFile=getFolder().getFile(new Path(getModelName()));
      final ModelResource resrc=ModelerCore.create(modelFile);
      final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
      modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
      modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
      if (resrc instanceof ModelResourceImpl) {
        ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
      }
      ModelUtilities.initializeModelContainers(resrc,""String_Node_Str"",this);
      if (this.connectionProfile != null) {
        IConnectionInfoProvider provider=new JDBCConnectionInfoProvider();
        provider.setConnectionInfo(resrc,this.connectionProfile);
      }
      JdbcImportWizard.this.status=processor.execute(resrc,getDatabase(),src.getImportSettings(),monitor);
      ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
    }
 else {
      JdbcImportWizard.this.status=ppProcessorPack.getProcessor().execute(ppProcessorPack.getModelResource(),getDatabase(),ppProcessorPack.getJdbcSource().getImportSettings(),monitor);
    }
    sWatch.stop();
    if (!monitor.isCanceled() && JdbcImportWizard.this.status.getSeverity() != IStatus.ERROR) {
      IJdbcImportPostProcessor[] processors=getPostProcessors();
      for (int i=0; i < processors.length; ++i) {
        try {
          processors[i].postProcess(getImportInfoProvider());
        }
 catch (        Exception theException) {
          Util.log(IStatus.ERROR,theException,Util.getString(I18N_PREFIX + ""String_Node_Str"",processors[i].getClass()));
        }
      }
    }
    if (JdbcImportWizard.this.status.getSeverity() != IStatus.ERROR) {
      sWatch.start(true);
      final List objs=ppProcessorPack.getModelResource().getAllRootEObjects();
      for (final Iterator iter=objs.iterator(); iter.hasNext(); ) {
        if (iter.next() instanceof JdbcSource) {
          iter.remove();
          break;
        }
      }
      ppProcessorPack.getJdbcSource().setJdbcDriver(null);
      objs.add(ppProcessorPack.getJdbcSource());
      sWatch.stop();
      sWatch.start(true);
      ppProcessorPack.getModelResource().save(monitor,true);
      sWatch.stop();
      sWatch.start(true);
      final IResource resrc=this.folder.findMember(getModelName());
      if (resrc != null) {
        resrc.refreshLocal(IResource.DEPTH_INFINITE,monitor);
      }
      sWatch.stop();
      sWatch.start(true);
      ModelEditorManager.activate(ppProcessorPack.getModelFile(),true);
      sWatch.stop();
    }
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
    ppProcessorPack=null;
    totalWatch.stop();
  }
}","void runFinish(IProgressMonitor monitor) throws InvocationTargetException {
  Stopwatch totalWatch=new Stopwatch();
  totalWatch.start();
  Stopwatch sWatch=new Stopwatch();
  try {
    sWatch.start();
    if (ppProcessorPack == null) {
      final JdbcSource src=getSource();
      final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(srcPg.getMetadataProcessor());
      final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
      processor.setIncludeIncompleteFKs(includeIncompleteFKs);
      processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
      final IFile modelFile=getFolder().getFile(new Path(getModelName()));
      final ModelResource resrc=ModelerCore.create(modelFile);
      final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
      modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
      modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
      if (resrc instanceof ModelResourceImpl) {
        ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
      }
      ModelUtilities.initializeModelContainers(resrc,""String_Node_Str"",this);
      if (this.connectionProfile != null) {
        IConnectionInfoProvider provider=new JDBCConnectionInfoProvider();
        provider.setConnectionInfo(resrc,this.connectionProfile);
      }
      JdbcImportWizard.this.status=processor.execute(resrc,getDatabase(),src.getImportSettings(),monitor);
      ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
    }
 else {
      JdbcImportWizard.this.status=ppProcessorPack.getProcessor().execute(ppProcessorPack.getModelResource(),getDatabase(),ppProcessorPack.getJdbcSource().getImportSettings(),monitor);
    }
    sWatch.stop();
    if (!monitor.isCanceled() && JdbcImportWizard.this.status.getSeverity() != IStatus.ERROR) {
      IJdbcImportPostProcessor[] processors=getPostProcessors();
      for (int i=0; i < processors.length; ++i) {
        try {
          processors[i].postProcess(getImportInfoProvider());
        }
 catch (        Exception theException) {
          Util.log(IStatus.ERROR,theException,Util.getString(I18N_PREFIX + ""String_Node_Str"",processors[i].getClass()));
        }
      }
    }
    if (JdbcImportWizard.this.status.getSeverity() != IStatus.ERROR) {
      sWatch.start(true);
      final List objs=ppProcessorPack.getModelResource().getAllRootEObjects();
      for (final Iterator iter=objs.iterator(); iter.hasNext(); ) {
        if (iter.next() instanceof JdbcSource) {
          iter.remove();
          break;
        }
      }
      ppProcessorPack.getJdbcSource().setJdbcDriver(null);
      objs.add(ppProcessorPack.getJdbcSource());
      sWatch.stop();
      sWatch.start(true);
      ppProcessorPack.getModelResource().save(monitor,true);
      sWatch.stop();
      sWatch.start(true);
      final IResource resrc=this.folder.findMember(getModelName());
      if (resrc != null) {
        resrc.refreshLocal(IResource.DEPTH_INFINITE,monitor);
      }
      sWatch.stop();
      sWatch.start(true);
      ModelEditorManager.activate(ppProcessorPack.getModelFile(),true);
      sWatch.stop();
    }
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
    ppProcessorPack=null;
    totalWatch.stop();
  }
}",0.999415546464056
102326,"/** 
 * @see com.metamatrix.modeler.jdbc.ui.wizards.IJdbcImportInfoProvider#getDifferenceReport()
 * @since 5.0
 */
public List getDifferenceReports(){
  final List reports=new ArrayList();
  if (drDifferenceReport == null || diffTargetChanged(drDifferenceReport)) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src,srcPg.getMetadataProcessor());
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
          processor.setIncludeIncompleteFKs(includeIncompleteFKs);
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          if (processor instanceof RelationalModelProcessorImpl) {
            JdbcImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
          }
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 catch (        final OperationCanceledException err) {
        }
catch (        final Exception err) {
          throw new InvocationTargetException(err);
        }
 finally {
          monitor.done();
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,op);
    }
 catch (    Throwable err) {
      if (err instanceof InvocationTargetException) {
        err=((InvocationTargetException)err).getTargetException();
      }
      JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
    }
  }
  if (drDifferenceReport != null) {
    reports.add(drDifferenceReport);
  }
  return reports;
}","/** 
 * @see com.metamatrix.modeler.jdbc.ui.wizards.IJdbcImportInfoProvider#getDifferenceReport()
 * @since 5.0
 */
public List getDifferenceReports(){
  final List reports=new ArrayList();
  if (drDifferenceReport == null || diffTargetChanged(drDifferenceReport)) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(srcPg.getMetadataProcessor());
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
          processor.setIncludeIncompleteFKs(includeIncompleteFKs);
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          if (processor instanceof RelationalModelProcessorImpl) {
            JdbcImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
          }
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 catch (        final OperationCanceledException err) {
        }
catch (        final Exception err) {
          throw new InvocationTargetException(err);
        }
 finally {
          monitor.done();
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,op);
    }
 catch (    Throwable err) {
      if (err instanceof InvocationTargetException) {
        err=((InvocationTargetException)err).getTargetException();
      }
      JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
    }
  }
  if (drDifferenceReport != null) {
    reports.add(drDifferenceReport);
  }
  return reports;
}",0.9991423670668954
102327,"public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final JdbcSource src=getSource();
    final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src,srcPg.getMetadataProcessor());
    processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
    final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
    processor.setIncludeIncompleteFKs(includeIncompleteFKs);
    final IFile modelFile=getFolder().getFile(new Path(getModelName()));
    final ModelResource resrc=ModelerCore.create(modelFile);
    final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
    if (resrc instanceof ModelResourceImpl) {
      ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
    }
    if (processor instanceof RelationalModelProcessorImpl) {
      JdbcImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
    }
    ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}","public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final JdbcSource src=getSource();
    final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(srcPg.getMetadataProcessor());
    processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
    final boolean includeIncompleteFKs=getDatabase().getIncludes().includeIncompleteFKs();
    processor.setIncludeIncompleteFKs(includeIncompleteFKs);
    final IFile modelFile=getFolder().getFile(new Path(getModelName()));
    final ModelResource resrc=ModelerCore.create(modelFile);
    final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
    if (resrc instanceof ModelResourceImpl) {
      ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
    }
    if (processor instanceof RelationalModelProcessorImpl) {
      JdbcImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
    }
    ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}",0.9985925404644616
102328,"public DifferenceReport getDifferenceReport(){
  if (drDifferenceReport == null) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src);
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          if (processor instanceof RelationalModelProcessorImpl) {
            XsdAsRelationalImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
          }
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 catch (        final OperationCanceledException err) {
        }
catch (        final Exception err) {
          throw new InvocationTargetException(err);
        }
 finally {
          monitor.done();
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,op);
    }
 catch (    Throwable err) {
      if (err instanceof InvocationTargetException) {
        err=((InvocationTargetException)err).getTargetException();
      }
      JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
    }
  }
  return drDifferenceReport;
}","public DifferenceReport getDifferenceReport(){
  if (drDifferenceReport == null) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor();
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          if (processor instanceof RelationalModelProcessorImpl) {
            XsdAsRelationalImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
          }
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 catch (        final OperationCanceledException err) {
        }
catch (        final Exception err) {
          throw new InvocationTargetException(err);
        }
 finally {
          monitor.done();
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,op);
    }
 catch (    Throwable err) {
      if (err instanceof InvocationTargetException) {
        err=((InvocationTargetException)err).getTargetException();
      }
      JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
    }
  }
  return drDifferenceReport;
}",0.9992107340173638
102329,"public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final JdbcSource src=getSource();
    final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src);
    processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
    final IFile modelFile=getFolder().getFile(new Path(getModelName()));
    final ModelResource resrc=ModelerCore.create(modelFile);
    final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
    if (resrc instanceof ModelResourceImpl) {
      ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
    }
    if (processor instanceof RelationalModelProcessorImpl) {
      XsdAsRelationalImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
    }
    ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}","public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final JdbcSource src=getSource();
    final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor();
    processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
    final IFile modelFile=getFolder().getFile(new Path(getModelName()));
    final ModelResource resrc=ModelerCore.create(modelFile);
    final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
    if (resrc instanceof ModelResourceImpl) {
      ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
    }
    if (processor instanceof RelationalModelProcessorImpl) {
      XsdAsRelationalImportWizard.this.drDifferenceReport=((RelationalModelProcessorImpl)processor).generateDifferenceReport(resrc,getDatabase(),src.getImportSettings(),monitor);
    }
    ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
  }
 catch (  final OperationCanceledException err) {
  }
catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}",0.9988014382740712
102330,"/** 
 * @see org.eclipse.jface.wizard.IWizard#performFinish()
 * @since 4.0
 */
@Override public boolean finish(){
  boolean result=false;
  final IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    final IProgressMonitor monitor) throws InvocationTargetException {
      try {
        if (ppProcessorPack == null) {
          XPackage xPackage=getExtensionPackage(getFolder());
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(src);
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (xPackage == null) {
            util.log(IStatus.WARNING,util.getString(""String_Node_Str""));
          }
 else {
            modelAnnotation.setExtensionPackage(xPackage);
          }
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          XsdAsRelationalImportWizard.this.status=processor.execute(resrc,getDatabase(),src.getImportSettings(),monitor);
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 else {
          XsdAsRelationalImportWizard.this.status=ppProcessorPack.getProcessor().execute(ppProcessorPack.getModelResource(),getDatabase(),ppProcessorPack.getJdbcSource().getImportSettings(),monitor);
        }
        if (XsdAsRelationalImportWizard.this.status.getSeverity() != IStatus.ERROR) {
          final List objs=ppProcessorPack.getModelResource().getAllRootEObjects();
          for (final Iterator iter=objs.iterator(); iter.hasNext(); ) {
            if (iter.next() instanceof JdbcSource) {
              iter.remove();
              break;
            }
          }
          ppProcessorPack.getJdbcSource().setJdbcDriver(null);
          objs.add(ppProcessorPack.getJdbcSource());
          ppProcessorPack.getModelResource().save(monitor,true);
          getFolder().refreshLocal(IResource.DEPTH_INFINITE,monitor);
          ModelEditorManager.activate(ppProcessorPack.getModelFile(),true);
        }
      }
 catch (      final OperationCanceledException err) {
      }
catch (      final Exception err) {
        throw new InvocationTargetException(err);
      }
 finally {
        monitor.done();
        ppProcessorPack=null;
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(getShell()).run(true,true,op);
switch (this.status.getSeverity()) {
case IStatus.WARNING:
case IStatus.INFO:
case IStatus.OK:
      break;
case IStatus.ERROR:
default :
    util.log(this.status);
  WidgetUtil.showError(IMPORT_ERROR_MESSAGE);
break;
}
result=true;
}
 catch (Throwable err) {
if (err instanceof InvocationTargetException) {
err=((InvocationTargetException)err).getTargetException();
}
JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
}
return result;
}","/** 
 * @see org.eclipse.jface.wizard.IWizard#performFinish()
 * @since 4.0
 */
@Override public boolean finish(){
  boolean result=false;
  final IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    final IProgressMonitor monitor) throws InvocationTargetException {
      try {
        if (ppProcessorPack == null) {
          XPackage xPackage=getExtensionPackage(getFolder());
          final JdbcSource src=getSource();
          final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor();
          processor.setMoveRatherThanCopyAdds(!isUpdatedModel());
          final IFile modelFile=getFolder().getFile(new Path(getModelName()));
          final ModelResource resrc=ModelerCore.create(modelFile);
          final ModelAnnotation modelAnnotation=resrc.getModelAnnotation();
          modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
          modelAnnotation.setModelType(ModelType.PHYSICAL_LITERAL);
          if (xPackage == null) {
            util.log(IStatus.WARNING,util.getString(""String_Node_Str""));
          }
 else {
            modelAnnotation.setExtensionPackage(xPackage);
          }
          if (resrc instanceof ModelResourceImpl) {
            ((ModelResourceImpl)resrc).setModelType(ModelType.PHYSICAL_LITERAL);
          }
          XsdAsRelationalImportWizard.this.status=processor.execute(resrc,getDatabase(),src.getImportSettings(),monitor);
          ppProcessorPack=new ProcessorPack(processor,src,modelFile,resrc);
        }
 else {
          XsdAsRelationalImportWizard.this.status=ppProcessorPack.getProcessor().execute(ppProcessorPack.getModelResource(),getDatabase(),ppProcessorPack.getJdbcSource().getImportSettings(),monitor);
        }
        if (XsdAsRelationalImportWizard.this.status.getSeverity() != IStatus.ERROR) {
          final List objs=ppProcessorPack.getModelResource().getAllRootEObjects();
          for (final Iterator iter=objs.iterator(); iter.hasNext(); ) {
            if (iter.next() instanceof JdbcSource) {
              iter.remove();
              break;
            }
          }
          ppProcessorPack.getJdbcSource().setJdbcDriver(null);
          objs.add(ppProcessorPack.getJdbcSource());
          ppProcessorPack.getModelResource().save(monitor,true);
          getFolder().refreshLocal(IResource.DEPTH_INFINITE,monitor);
          ModelEditorManager.activate(ppProcessorPack.getModelFile(),true);
        }
      }
 catch (      final OperationCanceledException err) {
      }
catch (      final Exception err) {
        throw new InvocationTargetException(err);
      }
 finally {
        monitor.done();
        ppProcessorPack=null;
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(getShell()).run(true,true,op);
switch (this.status.getSeverity()) {
case IStatus.WARNING:
case IStatus.INFO:
case IStatus.OK:
      break;
case IStatus.ERROR:
default :
    util.log(this.status);
  WidgetUtil.showError(IMPORT_ERROR_MESSAGE);
break;
}
result=true;
}
 catch (Throwable err) {
if (err instanceof InvocationTargetException) {
err=((InvocationTargetException)err).getTargetException();
}
JdbcUiUtil.showError(err,IMPORT_ERROR_MESSAGE);
}
return result;
}",0.9995346672871104
102331,"public void testCreateRelationalModelProcessorWithTypeMapping(){
  RelationalTypeMapping fakeMapping=new RelationalTypeMapping(){
    @Override public EObject getDatatype(    String jdbcTypeName){
      return null;
    }
    @Override public EObject getDatatype(    int jdbcType){
      return null;
    }
    @Override public SearchabilityType getSearchabilityType(    EObject datatype){
      return null;
    }
  }
;
  final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(null,fakeMapping,""String_Node_Str"");
  assertNotNull(processor);
  assertTrue(processor instanceof RelationalModelProcessorImpl);
}","public void testCreateRelationalModelProcessorWithTypeMapping(){
  RelationalTypeMapping fakeMapping=new RelationalTypeMapping(){
    @Override public EObject getDatatype(    String jdbcTypeName){
      return null;
    }
    @Override public EObject getDatatype(    int jdbcType){
      return null;
    }
    @Override public SearchabilityType getSearchabilityType(    EObject datatype){
      return null;
    }
  }
;
  final RelationalModelProcessor processor=JdbcModelProcessorManager.createRelationalModelProcessor(fakeMapping,""String_Node_Str"");
  assertNotNull(processor);
  assertTrue(processor instanceof RelationalModelProcessorImpl);
}",0.9961508852963818
102332,"void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final String translator=new ConnectionInfoHelper().getTranslatorName(mr);
      this.translator.set(translator == null ? EMPTY_STR : translator);
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          java.net.URI uri=java.net.URI.create(importedModel.getURI().toString());
          IFile[] modelFiles=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(uri);
          final IPath name=modelFiles[0].getFullPath();
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}","void synchronizeModelEntry(final IProgressMonitor monitor){
  final IFile workspaceFile=findFileInWorkspace();
  if (workspaceFile == null)   return;
  clean();
  try {
    final Resource model=findModel();
    if (ModelUtil.isPhysical(model)) {
      final ModelResource mr=ModelerCore.getModelEditor().findModelResource(workspaceFile);
      final String translator=new ConnectionInfoHelper().getTranslatorName(mr);
      this.translator.set(translator == null ? EMPTY_STR : translator);
    }
    IPath indexPath=new Path(IndexUtil.INDEX_PATH + indexName);
    File indexFile=indexPath.toFile();
    long indexDate=-1;
    if (indexFile.exists()) {
      indexDate=indexFile.lastModified();
    }
    if (workspaceFile.getLocalTimeStamp() > indexDate) {
      getVdb().getBuilder().buildResources(monitor,Collections.singleton(workspaceFile),ModelerCore.getModelContainer(),false);
    }
    for (    final IMarker marker : workspaceFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE)) {
      Object attr=marker.getAttribute(IMarker.SEVERITY);
      if (attr == null) {
        continue;
      }
      final int severity=((Integer)attr).intValue();
      if (severity == IMarker.SEVERITY_ERROR || severity == IMarker.SEVERITY_WARNING) {
        problems.add(new Problem(marker));
      }
    }
    if (!getVdb().isPreview()) {
      Resource[] refs=getFinder().findReferencesFrom(model,true,false);
      if (refs != null) {
        for (        final Resource importedModel : refs) {
          java.net.URI uri=URIUtil.fromString(importedModel.getURI().toString());
          IFile[] modelFiles=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(uri);
          final IPath name=modelFiles[0].getFullPath();
          VdbModelEntry importedEntry=null;
          for (          final VdbModelEntry entry : getVdb().getModelEntries()) {
            if (name.equals(entry.getName())) {
              importedEntry=entry;
              break;
            }
          }
          if (importedEntry == null)           importedEntry=getVdb().addModelEntry(name,monitor);
          imports.add(importedEntry);
          importedEntry.importedBy.add(this);
        }
      }
    }
    final Index index=IndexUtil.getIndexFile(indexName,IndexUtil.INDEX_PATH + indexName,getName().lastSegment());
    FileUtils.copy(index.getIndexFile(),getIndexFile().getParentFile(),true);
  }
 catch (  final Exception error) {
    throw CoreModelerPlugin.toRuntimeException(error);
  }
}",0.9937863299258368
102333,"public void build(int kind,String builderName,Map args,IProgressMonitor monitor){
}","@Override public void build(int kind,String builderName,Map<String,String> args,IProgressMonitor monitor) throws CoreException {
}",0.7793427230046949
102334,"/** 
 * Resets all PVDBs deploy status to needing to be deployed.
 */
private void resetAllDeployedStatuses(){
  try {
    this.statusLock.writeLock().lock();
    for (    Map.Entry<IPath,Set<PreviewVdbStatus>> entry : this.deploymentStatusMap.entrySet()) {
      for (      PreviewVdbStatus status : entry.getValue()) {
        status.setDeploy(true);
      }
    }
  }
  finally {
    this.statusLock.writeLock().unlock();
  }
}","/** 
 * Resets all PVDBs deploy status to needing to be deployed.
 */
private void resetAllDeployedStatuses(){
  try {
    this.statusLock.readLock().lock();
    for (    Map.Entry<IPath,Set<PreviewVdbStatus>> entry : this.deploymentStatusMap.entrySet()) {
      for (      PreviewVdbStatus status : entry.getValue()) {
        status.setDeploy(true);
      }
    }
  }
  finally {
    this.statusLock.readLock().unlock();
  }
}",0.9790209790209792
102335,"/** 
 * @param project the project whose Preview VDBs are being requested
 * @param onlyThoseNeedingToBeDeployed <code>true</code> if only Preview VDBs needing to be deployed should be returned
 * @return the project Preview VDBs (never <code>null</code>)
 */
List<IFile> findProjectPvdbs(IProject project,boolean onlyThoseNeedingToBeDeployed){
  List<IFile> pvdbsToDeploy=new ArrayList<IFile>();
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(project.getFullPath());
    if ((statuses != null) && !statuses.isEmpty()) {
      statuses=new ArrayList<PreviewVdbStatus>(statuses);
    }
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  if ((statuses != null) && !statuses.isEmpty()) {
    Collection<PreviewVdbStatus> missingPvdbs=new ArrayList<PreviewVdbStatus>();
    for (    PreviewVdbStatus status : statuses) {
      IFile pvdbFile=status.getFile();
      if (pvdbFile.exists()) {
        if (!onlyThoseNeedingToBeDeployed) {
          pvdbsToDeploy.add(this.context.getPreviewVdb(status.getFile()));
        }
 else {
          if (needsToBeDeployed(pvdbFile)) {
            pvdbsToDeploy.add(this.context.getPreviewVdb(pvdbFile));
          }
        }
      }
 else {
        missingPvdbs.add(status);
      }
    }
    if (!missingPvdbs.isEmpty()) {
      Util.log(Messages.DeployStatusCacheError);
      try {
        this.statusLock.writeLock().lock();
        for (        PreviewVdbStatus status : missingPvdbs) {
          statuses.remove(status);
        }
      }
  finally {
        this.statusLock.writeLock().unlock();
      }
    }
  }
  return pvdbsToDeploy;
}","/** 
 * @param project the project whose Preview VDBs are being requested
 * @param onlyThoseNeedingToBeDeployed <code>true</code> if only Preview VDBs needing to be deployed should be returned
 * @return the project Preview VDBs (never <code>null</code>)
 */
List<IFile> findProjectPvdbs(IProject project,boolean onlyThoseNeedingToBeDeployed){
  List<IFile> pvdbsToDeploy=new ArrayList<IFile>();
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(project.getFullPath());
    if ((statuses != null) && !statuses.isEmpty()) {
      statuses=new ArrayList<PreviewVdbStatus>(statuses);
    }
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  if ((statuses != null) && !statuses.isEmpty()) {
    Collection<PreviewVdbStatus> missingPvdbs=new ArrayList<PreviewVdbStatus>();
    for (    PreviewVdbStatus status : statuses) {
      IFile pvdbFile=status.getFile();
      if (pvdbFile.exists()) {
        if (!onlyThoseNeedingToBeDeployed) {
          pvdbsToDeploy.add(this.context.getPreviewVdb(status.getFile()));
        }
 else {
          if (needsToBeDeployed(pvdbFile)) {
            pvdbsToDeploy.add(this.context.getPreviewVdb(pvdbFile));
          }
        }
      }
 else {
        missingPvdbs.add(status);
      }
    }
    if (!missingPvdbs.isEmpty()) {
      Util.log(Messages.DeployStatusCacheError);
      try {
        this.statusLock.writeLock().lock();
        statuses=this.deploymentStatusMap.get(project.getFullPath());
        for (        PreviewVdbStatus status : missingPvdbs) {
          statuses.remove(status);
        }
      }
  finally {
        this.statusLock.writeLock().unlock();
      }
    }
  }
  return pvdbsToDeploy;
}",0.9796156086196856
102336,"private PreviewVdbStatus getStatus(IPath pvdbPath){
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(getProjectPath(pvdbPath));
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  for (  PreviewVdbStatus status : statuses) {
    if (status.getPath().equals(pvdbPath))     return status;
  }
  return null;
}","private PreviewVdbStatus getStatus(IPath pvdbPath){
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(getProjectPath(pvdbPath));
    if ((statuses != null) && !statuses.isEmpty()) {
      statuses=new ArrayList<PreviewVdbStatus>(statuses);
    }
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  for (  PreviewVdbStatus status : statuses) {
    if (status.getPath().equals(pvdbPath))     return status;
  }
  return null;
}",0.7481081081081081
102337,"public IFile getFile(){
  return this.pvdb;
}","/** 
 * @return the Preview VDB
 */
public IFile getFile(){
  return this.pvdb;
}",0.7142857142857143
102338,"public IPath getPath(){
  return this.pvdb.getFullPath();
}","/** 
 * @return the full workspace path of the Preview VDB
 */
public IPath getPath(){
  return this.pvdb.getFullPath();
}",0.6519337016574586
102339,"/** 
 * Resets all PVDBs deploy status to needing to be deployed.
 */
private void resetAllDeployedStatuses(){
  try {
    this.statusLock.writeLock().lock();
    for (    Map.Entry<IPath,Collection<PreviewVdbStatus>> entry : this.deploymentStatusMap.entrySet()) {
      for (      PreviewVdbStatus status : entry.getValue()) {
        status.setDeploy(true);
      }
    }
  }
  finally {
    this.statusLock.writeLock().unlock();
  }
}","/** 
 * Resets all PVDBs deploy status to needing to be deployed.
 */
private void resetAllDeployedStatuses(){
  try {
    this.statusLock.writeLock().lock();
    for (    Map.Entry<IPath,Set<PreviewVdbStatus>> entry : this.deploymentStatusMap.entrySet()) {
      for (      PreviewVdbStatus status : entry.getValue()) {
        status.setDeploy(true);
      }
    }
  }
  finally {
    this.statusLock.writeLock().unlock();
  }
}",0.9850057670126874
102340,"/** 
 * @param project the project whose Preview VDBs are being requested
 * @param onlyThoseNeedingToBeDeployed <code>true</code> if only Preview VDBs needing to be deployed should be returned
 * @return the project Preview VDBs (never <code>null</code>)
 */
List<IFile> findProjectPvdbs(IProject project,boolean onlyThoseNeedingToBeDeployed){
  List<IFile> pvdbsToDeploy=new ArrayList<IFile>();
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(project.getFullPath());
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  if ((statuses != null) && !statuses.isEmpty()) {
    for (    PreviewVdbStatus status : statuses) {
      if (!onlyThoseNeedingToBeDeployed) {
        pvdbsToDeploy.add(this.context.getPreviewVdb(status.getFile()));
      }
 else {
        IFile pvdbFile=status.getFile();
        if (needsToBeDeployed(pvdbFile)) {
          pvdbsToDeploy.add(this.context.getPreviewVdb(pvdbFile));
        }
      }
    }
  }
  return pvdbsToDeploy;
}","/** 
 * @param project the project whose Preview VDBs are being requested
 * @param onlyThoseNeedingToBeDeployed <code>true</code> if only Preview VDBs needing to be deployed should be returned
 * @return the project Preview VDBs (never <code>null</code>)
 */
List<IFile> findProjectPvdbs(IProject project,boolean onlyThoseNeedingToBeDeployed){
  List<IFile> pvdbsToDeploy=new ArrayList<IFile>();
  Collection<PreviewVdbStatus> statuses=null;
  try {
    this.statusLock.readLock().lock();
    statuses=this.deploymentStatusMap.get(project.getFullPath());
    if ((statuses != null) && !statuses.isEmpty()) {
      statuses=new ArrayList<PreviewVdbStatus>(statuses);
    }
  }
  finally {
    this.statusLock.readLock().unlock();
  }
  if ((statuses != null) && !statuses.isEmpty()) {
    Collection<PreviewVdbStatus> missingPvdbs=new ArrayList<PreviewVdbStatus>();
    for (    PreviewVdbStatus status : statuses) {
      IFile pvdbFile=status.getFile();
      if (pvdbFile.exists()) {
        if (!onlyThoseNeedingToBeDeployed) {
          pvdbsToDeploy.add(this.context.getPreviewVdb(status.getFile()));
        }
 else {
          if (needsToBeDeployed(pvdbFile)) {
            pvdbsToDeploy.add(this.context.getPreviewVdb(pvdbFile));
          }
        }
      }
 else {
        missingPvdbs.add(status);
      }
    }
    if (!missingPvdbs.isEmpty()) {
      Util.log(Messages.DeployStatusCacheError);
      try {
        this.statusLock.writeLock().lock();
        for (        PreviewVdbStatus status : missingPvdbs) {
          statuses.remove(status);
        }
      }
  finally {
        this.statusLock.writeLock().unlock();
      }
    }
  }
  return pvdbsToDeploy;
}",0.6722689075630253
102341,"/** 
 * @param pvdb the PVDB being added to the workspace
 */
private void addWorkspacePvdb(IFile pvdb){
  IPath projectPath=pvdb.getProject().getFullPath();
  try {
    this.statusLock.writeLock().lock();
    Collection<PreviewVdbStatus> statuses=this.deploymentStatusMap.get(projectPath);
    if (statuses == null) {
      statuses=new ArrayList<PreviewVdbStatus>();
      this.deploymentStatusMap.put(projectPath,statuses);
    }
    statuses.add(new PreviewVdbStatus(pvdb));
  }
  finally {
    this.statusLock.writeLock().unlock();
  }
}","/** 
 * @param pvdb the PVDB being added to the workspace
 */
private void addWorkspacePvdb(IFile pvdb){
  IPath projectPath=pvdb.getProject().getFullPath();
  try {
    this.statusLock.writeLock().lock();
    Set<PreviewVdbStatus> statuses=this.deploymentStatusMap.get(projectPath);
    if (statuses == null) {
      statuses=new HashSet<PreviewVdbStatus>();
      this.deploymentStatusMap.put(projectPath,statuses);
    }
    statuses.add(new PreviewVdbStatus(pvdb));
  }
  finally {
    this.statusLock.writeLock().unlock();
  }
}",0.9748837209302326
102342,"public boolean shouldDeploy(){
  return this.deploy;
}","/** 
 * @return <code>true</code> if the Preview VDB needs to be deployed
 */
public boolean shouldDeploy(){
  return this.deploy;
}",0.5806451612903226
102343,"/** 
 * Handler for when a   {@link ModelProjectOpenedJob} has finished.
 * @param job the job being processed
 */
private void handleModelProjectOpened(ModelProjectOpenedJob job){
  IProject project=job.getProject();
  List<IPath> pvdbPaths=new ArrayList<IPath>();
  try {
    findPvdbs(project,pvdbPaths);
    if (!pvdbPaths.isEmpty()) {
      CompositePreviewJob batchJob=new CompositePreviewJob(NLS.bind(Messages.DeleteOrphanedPreviewVdbsJob,project.getName()),this.context,getPreviewServer());
      Collection<PreviewVdbStatus> statuses=null;
      try {
        this.statusLock.readLock().lock();
        statuses=this.deploymentStatusMap.get(project.getFullPath());
      }
  finally {
        this.statusLock.readLock().unlock();
      }
      for (      IPath pvdbPath : pvdbPaths) {
        boolean delete=true;
        for (        PreviewVdbStatus status : statuses) {
          if (status.getPath().equals(pvdbPath)) {
            delete=false;
            break;
          }
        }
        if (delete) {
          IPath path=pvdbPath.removeFirstSegments(1);
          DeletePreviewVdbJob deletePvdbJob=new DeletePreviewVdbJob(project.getFile(path),this.context);
          batchJob.add(deletePvdbJob);
        }
      }
      if (!batchJob.getJobs().isEmpty()) {
        batchJob.schedule();
      }
    }
  }
 catch (  Exception e) {
    Util.log(IStatus.ERROR,e,NLS.bind(Messages.DeleteOrphanedPreviewVdbsJobError,project.getName()));
  }
}","/** 
 * Handler for when a   {@link ModelProjectOpenedJob} has finished.
 * @param job the job being processed
 */
private void handleModelProjectOpened(ModelProjectOpenedJob job){
  IProject project=job.getProject();
  List<IPath> pvdbPaths=new ArrayList<IPath>();
  try {
    findPvdbs(project,pvdbPaths);
    if (!pvdbPaths.isEmpty()) {
      CompositePreviewJob batchJob=new CompositePreviewJob(NLS.bind(Messages.DeleteOrphanedPreviewVdbsJob,project.getName()),this.context,getPreviewServer());
      Collection<PreviewVdbStatus> statuses=null;
      try {
        this.statusLock.readLock().lock();
        statuses=this.deploymentStatusMap.get(project.getFullPath());
        if ((statuses != null) && !statuses.isEmpty()) {
          statuses=new ArrayList<PreviewVdbStatus>(statuses);
        }
      }
  finally {
        this.statusLock.readLock().unlock();
      }
      for (      IPath pvdbPath : pvdbPaths) {
        boolean delete=true;
        for (        PreviewVdbStatus status : statuses) {
          if (status.getPath().equals(pvdbPath)) {
            delete=false;
            break;
          }
        }
        if (delete) {
          IPath path=pvdbPath.removeFirstSegments(1);
          DeletePreviewVdbJob deletePvdbJob=new DeletePreviewVdbJob(project.getFile(path),this.context);
          batchJob.add(deletePvdbJob);
        }
      }
      if (!batchJob.getJobs().isEmpty()) {
        batchJob.schedule();
      }
    }
  }
 catch (  Exception e) {
    Util.log(IStatus.ERROR,e,NLS.bind(Messages.DeleteOrphanedPreviewVdbsJobError,project.getName()));
  }
}",0.9576910462446704
102344,"/** 
 * @param job the job being added to the list of jobs to be run (may not be <code>null</code>)
 */
public void add(PreviewVdbJob job){
  assert(job != null);
  this.jobs.add(job);
  if (job instanceof WorkspacePreviewVdbJob) {
    ((WorkspacePreviewVdbJob)job).setStandalone(false);
    this.waitForBuildToFinish=true;
  }
}","/** 
 * @param job the job being added to the list of jobs to be run (may not be <code>null</code>)
 */
public void add(PreviewVdbJob job){
  assert(job != null);
  this.jobs.add(job);
}",0.7223300970873786
102345,"/** 
 * {@inheritDoc}
 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus run(IProgressMonitor monitor){
  assert(!this.jobs.isEmpty());
  monitor.beginTask(getName(),getJobs().size());
  try {
    if (this.waitForBuildToFinish) {
      Job.getJobManager().join(ResourcesPlugin.FAMILY_AUTO_BUILD,monitor);
    }
    for (    PreviewVdbJob previewJob : this.jobs) {
      assert(previewJob instanceof Job);
      Job job=(Job)previewJob;
      job.setProgressGroup(monitor,1);
      if (this.listener != null)       job.addJobChangeListener(this.listener);
      job.schedule();
      if (this.runInSequence) {
        job.join();
      }
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
    }
  }
 catch (  OperationCanceledException e) {
    Util.log(new Status(IStatus.CANCEL,PLUGIN_ID,NLS.bind(Messages.JobCanceled,getName())));
  }
catch (  InterruptedException e) {
    Util.log(e);
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus run(IProgressMonitor monitor){
  assert(!this.jobs.isEmpty());
  monitor.beginTask(getName(),getJobs().size());
  try {
    for (    PreviewVdbJob previewJob : this.jobs) {
      assert(previewJob instanceof Job);
      Job job=(Job)previewJob;
      job.setProgressGroup(monitor,1);
      if (this.listener != null)       job.addJobChangeListener(this.listener);
      job.schedule();
      if (this.runInSequence) {
        job.join();
      }
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
    }
  }
 catch (  OperationCanceledException e) {
    Util.log(new Status(IStatus.CANCEL,PLUGIN_ID,NLS.bind(Messages.JobCanceled,getName())));
  }
catch (  InterruptedException e) {
    Util.log(e);
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}",0.941351888667992
102346,"/** 
 * <strong>Must be called by constructors.</strong>
 */
private void initialize(){
  IResource resource=(project == null) ? this.model : this.project;
  int size=(project == null) ? 3 : 2;
  this.pvdbFile=getContext().getPreviewVdb(resource);
  ISchedulingRule[] rules=new ISchedulingRule[size];
  rules[0]=getSchedulingRuleFactory().createRule(this.pvdbFile);
  rules[1]=getSchedulingRuleFactory().modifyRule(this.pvdbFile);
  if (size == 3) {
    rules[2]=getSchedulingRuleFactory().modifyRule(this.model);
  }
  setRule(MultiRule.combine(rules));
}","/** 
 * <strong>Must be called by constructors.</strong>
 */
private void initialize(){
  IResource resource=(project == null) ? this.model : this.project;
  int size=(project == null) ? 4 : 3;
  this.pvdbFile=getContext().getPreviewVdb(resource);
  ISchedulingRule[] rules=new ISchedulingRule[size];
  rules[0]=getSchedulingRuleFactory().createRule(this.pvdbFile);
  rules[1]=getSchedulingRuleFactory().modifyRule(this.pvdbFile);
  rules[2]=getSchedulingRuleFactory().buildRule();
  if (size == 4) {
    rules[3]=getSchedulingRuleFactory().modifyRule(this.model);
  }
  setRule(MultiRule.combine(rules));
}",0.9131556319862424
102347,"/** 
 * @param changedModel the model whose Preview VDB needs to be updated (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 * @param previewServer the server where the preview is being performed (may be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB path
 */
public UpdatePreviewVdbJob(IFile changedModel,Server previewServer,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.UpdatePreviewVdbJob,changedModel.getFullPath().removeFileExtension()),context);
  this.model=changedModel;
  this.previewServer=previewServer;
  this.pvdbFile=getContext().getPreviewVdb(this.model);
  setRule(getSchedulingRuleFactory().modifyRule(getPreviewVdb()));
}","/** 
 * @param changedModel the model whose Preview VDB needs to be updated (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 * @param previewServer the server where the preview is being performed (may be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB path
 */
public UpdatePreviewVdbJob(IFile changedModel,Server previewServer,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.UpdatePreviewVdbJob,changedModel.getFullPath().removeFileExtension()),context);
  this.model=changedModel;
  this.previewServer=previewServer;
  this.pvdbFile=getContext().getPreviewVdb(this.model);
  ISchedulingRule[] rules=new ISchedulingRule[2];
  rules[0]=getSchedulingRuleFactory().modifyRule(this.pvdbFile);
  rules[1]=getSchedulingRuleFactory().buildRule();
  setRule(MultiRule.combine(rules));
}",0.8906832298136645
102348,"/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.WorkspaceJob#runInWorkspace(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public final IStatus runInWorkspace(IProgressMonitor monitor){
  if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_START)) {
    Util.log(IStatus.INFO,NLS.bind(Messages.JobStarted,getName()));
  }
  IStatus results=null;
  long startTime=System.currentTimeMillis();
  monitor.setTaskName(getName());
  try {
    if (this.standalone) {
      Job.getJobManager().join(ResourcesPlugin.FAMILY_AUTO_BUILD,monitor);
    }
    results=runImpl(monitor);
    assert(results != null);
    return results;
  }
 catch (  Exception e) {
    if (e instanceof InterruptedException) {
      return new Status(IStatus.WARNING,PLUGIN_ID,NLS.bind(Messages.JobCanceled,getName()),e);
    }
    return new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UnexpectedErrorRunningJob,getName()),e);
  }
 finally {
    if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_DONE)) {
      Util.log(IStatus.INFO,NLS.bind(Messages.JobFinished,getName(),(results.getSeverity() != IStatus.ERROR)));
    }
    monitor.done();
    if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_DURATION)) {
      String msg;
      long milliseconds=(System.currentTimeMillis() - startTime);
      long hours=milliseconds / (1000 * 60 * 60);
      long minutes=(milliseconds % (1000 * 60 * 60)) / (1000 * 60);
      long seconds=((milliseconds % (1000 * 60 * 60)) % (1000 * 60)) / 1000;
      if (hours > 0) {
        msg=NLS.bind(Messages.LongDurationJob,new Object[]{getName(),hours,minutes,seconds});
      }
 else       if (minutes > 0) {
        msg=NLS.bind(Messages.LessThanAnHourDurationJob,new Object[]{getName(),minutes,seconds});
      }
 else       if (seconds > 0) {
        msg=NLS.bind(Messages.LessThanAMinuteDurationJob,getName(),seconds);
      }
 else {
        msg=NLS.bind(Messages.LessThanASecondDurationJob,getName());
      }
      Util.log(IStatus.INFO,msg);
    }
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.WorkspaceJob#runInWorkspace(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public final IStatus runInWorkspace(IProgressMonitor monitor){
  if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_START)) {
    Util.log(IStatus.INFO,NLS.bind(Messages.JobStarted,getName()));
  }
  IStatus results=null;
  long startTime=System.currentTimeMillis();
  monitor.setTaskName(getName());
  try {
    results=runImpl(monitor);
    assert(results != null);
    return results;
  }
 catch (  Exception e) {
    if (e instanceof InterruptedException) {
      return new Status(IStatus.WARNING,PLUGIN_ID,NLS.bind(Messages.JobCanceled,getName()),e);
    }
    return new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UnexpectedErrorRunningJob,getName()),e);
  }
 finally {
    if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_DONE)) {
      Util.log(IStatus.INFO,NLS.bind(Messages.JobFinished,getName(),(results.getSeverity() != IStatus.ERROR)));
    }
    monitor.done();
    if (DqpPlugin.getInstance().isDebugOptionEnabled(DebugConstants.PREVIEW_JOB_DURATION)) {
      String msg;
      long milliseconds=(System.currentTimeMillis() - startTime);
      long hours=milliseconds / (1000 * 60 * 60);
      long minutes=(milliseconds % (1000 * 60 * 60)) / (1000 * 60);
      long seconds=((milliseconds % (1000 * 60 * 60)) % (1000 * 60)) / 1000;
      if (hours > 0) {
        msg=NLS.bind(Messages.LongDurationJob,new Object[]{getName(),hours,minutes,seconds});
      }
 else       if (minutes > 0) {
        msg=NLS.bind(Messages.LessThanAnHourDurationJob,new Object[]{getName(),minutes,seconds});
      }
 else       if (seconds > 0) {
        msg=NLS.bind(Messages.LessThanAMinuteDurationJob,getName(),seconds);
      }
 else {
        msg=NLS.bind(Messages.LessThanASecondDurationJob,getName());
      }
      Util.log(IStatus.INFO,msg);
    }
  }
}",0.9731476877175534
102349,"/** 
 * Handler for when a   {@link CreatePreviewVdbJob} has finished.
 * @param job the job being processed
 */
private void handlePreviewVdbCreated(CreatePreviewVdbJob job){
  IFile pvdb=job.getPvdb();
  addWorkspacePvdb(pvdb);
}","/** 
 * Handler for when a   {@link CreatePreviewVdbJob} has finished.
 * @param job the job being processed
 */
private void handlePreviewVdbCreated(CreatePreviewVdbJob job){
  IFile pvdb=job.getPreviewVdb();
  addWorkspacePvdb(pvdb);
}",0.9829059829059827
102350,"/** 
 * @param job the job being added to the list of jobs to be run (may not be <code>null</code>)
 */
public void add(PreviewVdbJob job){
  assert(job != null);
  this.jobs.add(job);
}","/** 
 * @param job the job being added to the list of jobs to be run (may not be <code>null</code>)
 */
public void add(PreviewVdbJob job){
  assert(job != null);
  this.jobs.add(job);
  if (job instanceof WorkspacePreviewVdbJob) {
    ((WorkspacePreviewVdbJob)job).setStandalone(false);
    this.waitForBuildToFinish=true;
  }
}",0.7223300970873786
102351,"/** 
 * {@inheritDoc}
 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus run(IProgressMonitor monitor){
  assert(!this.jobs.isEmpty());
  monitor.beginTask(getName(),getJobs().size());
  try {
    for (    PreviewVdbJob previewJob : this.jobs) {
      assert(previewJob instanceof Job);
      Job job=(Job)previewJob;
      job.setProgressGroup(monitor,1);
      if (this.listener != null)       job.addJobChangeListener(this.listener);
      job.schedule();
      if (this.runInSequence) {
        job.join();
      }
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
    }
  }
 catch (  OperationCanceledException e) {
    Util.log(new Status(IStatus.CANCEL,PLUGIN_ID,Messages.bind(Messages.JobCanceled,getName())));
  }
catch (  InterruptedException e) {
    Util.log(e);
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus run(IProgressMonitor monitor){
  assert(!this.jobs.isEmpty());
  monitor.beginTask(getName(),getJobs().size());
  try {
    if (this.waitForBuildToFinish) {
      Job.getJobManager().join(ResourcesPlugin.FAMILY_AUTO_BUILD,monitor);
    }
    for (    PreviewVdbJob previewJob : this.jobs) {
      assert(previewJob instanceof Job);
      Job job=(Job)previewJob;
      job.setProgressGroup(monitor,1);
      if (this.listener != null)       job.addJobChangeListener(this.listener);
      job.schedule();
      if (this.runInSequence) {
        job.join();
      }
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
    }
  }
 catch (  OperationCanceledException e) {
    Util.log(new Status(IStatus.CANCEL,PLUGIN_ID,NLS.bind(Messages.JobCanceled,getName())));
  }
catch (  InterruptedException e) {
    Util.log(e);
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}",0.9360436291522064
102352,"/** 
 * @param project the project whose Preview VDB is being created (may not be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB
 */
public CreatePreviewVdbJob(IProject project,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.CreatePreviewVdbJob,project.getFullPath()),context);
  this.project=project;
  this.model=null;
}","/** 
 * @param project the project whose Preview VDB is being created (may not be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB
 */
public CreatePreviewVdbJob(IProject project,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.CreatePreviewVdbJob,project.getFullPath()),context);
  this.project=project;
  this.model=null;
  initialize();
}",0.97911227154047
102353,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IResource resource=((this.project == null) ? this.model : this.project);
  this.pvdbFile=getContext().getPreviewVdb(resource);
  if (this.pvdbFile.exists() && !this.pvdbFile.getLocation().toFile().exists()) {
    this.pvdbFile.delete(true,monitor);
  }
  boolean isNew=false;
  if (!this.pvdbFile.exists()) {
    isNew=true;
    this.pvdbFile.create(new ByteArrayInputStream(new byte[0]),false,null);
  }
  this.pvdbFile.setHidden(true);
  try {
    Vdb pvdb=new Vdb(this.pvdbFile,true,monitor);
    if (resource instanceof IFile) {
      if (pvdb.getModelEntries().isEmpty()) {
        pvdb.addModelEntry(this.model.getFullPath(),monitor);
      }
    }
    if (isNew || pvdb.isModified()) {
      pvdb.save(monitor);
    }
  }
 catch (  Exception e) {
    IPath path=((this.project == null) ? this.model.getFullPath() : this.project.getFullPath());
    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobError,path),e));
  }
  return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IResource resource=((this.project == null) ? this.model : this.project);
  if (this.pvdbFile.exists() && !this.pvdbFile.getLocation().toFile().exists()) {
    this.pvdbFile.delete(true,monitor);
  }
  boolean isNew=false;
  if (!this.pvdbFile.exists()) {
    isNew=true;
    this.pvdbFile.create(new ByteArrayInputStream(new byte[0]),false,null);
  }
  this.pvdbFile.setHidden(true);
  try {
    Vdb pvdb=new Vdb(this.pvdbFile,true,monitor);
    if (resource instanceof IFile) {
      if (pvdb.getModelEntries().isEmpty()) {
        pvdb.addModelEntry(this.model.getFullPath(),monitor);
      }
    }
    if (isNew || pvdb.isModified()) {
      pvdb.save(monitor);
    }
  }
 catch (  Exception e) {
    IPath path=((this.project == null) ? this.model.getFullPath() : this.project.getFullPath());
    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobError,path),e));
  }
  return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
}",0.9793577981651376
102354,"/** 
 * Deletes the Preview VDB associated with the specified model.
 * @param context the preview context (may not be <code>null</code>)
 * @param deletedModel the model that was just deleted (may not be <code>null</code>)
 * @throws Exception if there is a problem getting the Preview VDB for the deleted model
 */
public DeletePreviewVdbJob(PreviewContext context,IFile deletedModel) throws Exception {
  super(Messages.bind(Messages.DeletePreviewVdbJobForModel,deletedModel.getFullPath()),context);
  this.pvdb=context.getPreviewVdb(deletedModel);
  assert(this.pvdb != null);
}","/** 
 * Deletes the Preview VDB associated with the specified model.
 * @param context the preview context (may not be <code>null</code>)
 * @param deletedModel the model that was just deleted (may not be <code>null</code>)
 * @throws Exception if there is a problem getting the Preview VDB for the deleted model
 */
public DeletePreviewVdbJob(PreviewContext context,IFile deletedModel) throws Exception {
}",0.8230535894843276
102355,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  try {
    this.pvdb.delete(true,monitor);
    return new Status(IStatus.OK,PLUGIN_ID,Messages.bind(Messages.DeletePreviewVdbJobSuccessfullyCompleted,this.pvdb.getFullPath()));
  }
 catch (  Exception e) {
    return new Status(IStatus.ERROR,PLUGIN_ID,Messages.bind(Messages.DeletePreviewVdbJobError,this.pvdb.getFullPath()),e);
  }
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  try {
    this.pvdbFile.delete(true,monitor);
    return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.DeletePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
  }
 catch (  Exception e) {
    return new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.DeletePreviewVdbJobError,this.pvdbFile.getFullPath()),e);
  }
}",0.952212389380531
102356,"/** 
 * @param project the project just opened (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 */
public ModelProjectOpenedJob(IProject project,PreviewContext context) throws Exception {
  super(Messages.bind(Messages.ModelProjectOpenedJob,project),context,null,true);
  assert(project != null);
  assert(ModelerCore.hasModelNature(project));
  this.project=project;
  CreatePreviewVdbJob job=new CreatePreviewVdbJob(project,context);
  add(job);
  process(this.project);
}","/** 
 * @param project the project just opened (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 */
public ModelProjectOpenedJob(IProject project,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.ModelProjectOpenedJob,project),context,null,true);
  assert(project != null);
  assert(ModelerCore.hasModelNature(project));
  this.project=project;
  CreatePreviewVdbJob job=new CreatePreviewVdbJob(project,context);
  add(job);
  process(this.project);
}",0.9892891918208374
102357,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IStatus error=null;
  IFile pvdbFile=getContext().getPreviewVdb(this.model);
  Vdb pvdb=new Vdb(pvdbFile,true,monitor);
  if (this.previewServer != null) {
    try {
      getContext().ensureConnectionInfoIsValid(pvdb,this.previewServer);
    }
 catch (    Exception e) {
      error=new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),e);
    }
  }
  try {
    if (!pvdb.isSynchronized()) {
      pvdb.synchronize(monitor);
      pvdb.save(monitor);
    }
 else {
      if (pvdb.isModified()) {
        pvdb.save(monitor);
      }
    }
    return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobSuccessfullyCompleted,pvdbFile.getFullPath()));
  }
 catch (  Exception e) {
    IStatus status=new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),e);
    if (error == null) {
      error=status;
    }
 else {
      IStatus[] statuses=new IStatus[2];
      statuses[0]=error;
      statuses[1]=status;
      error=new MultiStatus(PLUGIN_ID,IStatus.OK,statuses,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),null);
    }
  }
  return error;
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IStatus error=null;
  Vdb pvdb=new Vdb(this.pvdbFile,true,monitor);
  if (this.previewServer != null) {
    try {
      getContext().ensureConnectionInfoIsValid(pvdb,this.previewServer);
    }
 catch (    Exception e) {
      error=new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),e);
    }
  }
  try {
    if (!pvdb.isSynchronized()) {
      pvdb.synchronize(monitor);
      pvdb.save(monitor);
    }
 else {
      if (pvdb.isModified()) {
        pvdb.save(monitor);
      }
    }
    return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
  }
 catch (  Exception e) {
    IStatus status=new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),e);
    if (error == null) {
      error=status;
    }
 else {
      IStatus[] statuses=new IStatus[2];
      statuses[0]=error;
      statuses[1]=status;
      error=new MultiStatus(PLUGIN_ID,IStatus.OK,statuses,NLS.bind(Messages.UpdatePreviewVdbJobError,this.model.getFullPath()),null);
    }
  }
  return error;
}",0.9709364908503768
102358,"/** 
 * @param changedModel the model whose Preview VDB needs to be updated (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 * @param previewServer the server where the preview is being performed (may be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB path
 */
public UpdatePreviewVdbJob(IFile changedModel,Server previewServer,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.UpdatePreviewVdbJob,changedModel.getFullPath().removeFileExtension()),context);
  this.model=changedModel;
  this.previewServer=previewServer;
}","/** 
 * @param changedModel the model whose Preview VDB needs to be updated (never <code>null</code>)
 * @param context the preview context (never <code>null</code>)
 * @param previewServer the server where the preview is being performed (may be <code>null</code>)
 * @throws Exception if unable to construct the Preview VDB path
 */
public UpdatePreviewVdbJob(IFile changedModel,Server previewServer,PreviewContext context) throws Exception {
  super(NLS.bind(Messages.UpdatePreviewVdbJob,changedModel.getFullPath().removeFileExtension()),context);
  this.model=changedModel;
  this.previewServer=previewServer;
  this.pvdbFile=getContext().getPreviewVdb(this.model);
  setRule(getSchedulingRuleFactory().modifyRule(getPreviewVdb()));
}",0.9089563286454478
102359,"/** 
 * Returns an actual Model Object (EObject or Resource) for the specified Permission
 * @param perm
 * @return
 */
public Object getPermissionTargetObject(Permission perm){
  String targetName=perm.getTargetName();
  for (  Resource res : resources) {
    if (getTargetName(res).equals(targetName)) {
      return res;
    }
    for (    Object child : getChildren(res)) {
      Object target=getTargetObjectInChildren(child,targetName);
      if (target != null) {
        return target;
      }
    }
  }
  return null;
}","/** 
 * Returns an actual Model Object (EObject or Resource) for the specified Permission
 * @param perm
 * @return
 */
public Object getPermissionTargetObject(Permission perm){
  String targetName=perm.getTargetName();
  for (  Resource res : resources) {
    if (getTargetName(res).equals(targetName)) {
      return res;
    }
    for (    Object child : getChildren(res)) {
      if (getTargetName(child).equals(targetName)) {
        return child;
      }
      Object target=getTargetObjectInChildren(child,targetName);
      if (target != null) {
        return target;
      }
    }
  }
  return null;
}",0.9271290605794557
102360,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IResource resource=((this.project == null) ? this.model : this.project);
  this.pvdbFile=getContext().getPreviewVdb(resource);
  if (this.pvdbFile.exists() && !this.pvdbFile.getLocation().toFile().exists()) {
    this.pvdbFile.delete(true,monitor);
  }
  if (!this.pvdbFile.exists()) {
    this.pvdbFile.create(new ByteArrayInputStream(new byte[0]),false,null);
  }
  this.pvdbFile.setHidden(true);
  try {
    Vdb pvdb=new Vdb(this.pvdbFile,true,monitor);
    if (resource instanceof IFile) {
      if (pvdb.getModelEntries().isEmpty()) {
        pvdb.addModelEntry(this.model.getFullPath(),monitor);
      }
    }
    if (pvdb.isModified()) {
      pvdb.save(monitor);
    }
  }
 catch (  Exception e) {
    IPath path=((this.project == null) ? this.model.getFullPath() : this.project.getFullPath());
    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobError,path),e));
  }
  return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.runtime.preview.jobs.WorkspacePreviewVdbJob#runImpl(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override protected IStatus runImpl(IProgressMonitor monitor) throws Exception {
  IResource resource=((this.project == null) ? this.model : this.project);
  this.pvdbFile=getContext().getPreviewVdb(resource);
  if (this.pvdbFile.exists() && !this.pvdbFile.getLocation().toFile().exists()) {
    this.pvdbFile.delete(true,monitor);
  }
  boolean isNew=false;
  if (!this.pvdbFile.exists()) {
    isNew=true;
    this.pvdbFile.create(new ByteArrayInputStream(new byte[0]),false,null);
  }
  this.pvdbFile.setHidden(true);
  try {
    Vdb pvdb=new Vdb(this.pvdbFile,true,monitor);
    if (resource instanceof IFile) {
      if (pvdb.getModelEntries().isEmpty()) {
        pvdb.addModelEntry(this.model.getFullPath(),monitor);
      }
    }
    if (isNew || pvdb.isModified()) {
      pvdb.save(monitor);
    }
  }
 catch (  Exception e) {
    IPath path=((this.project == null) ? this.model.getFullPath() : this.project.getFullPath());
    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobError,path),e));
  }
  return new Status(IStatus.OK,PLUGIN_ID,NLS.bind(Messages.CreatePreviewVdbJobSuccessfullyCompleted,this.pvdbFile.getFullPath()));
}",0.98093058733791
102361,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void createPartControl(final Composite parent){
  final GC gc=new GC(parent);
  gc.setFont(parent.getFont());
  final int height=Dialog.convertHeightInCharsToPixels(gc.getFontMetrics(),4);
  gc.dispose();
  final ScrolledComposite scroller=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  scroller.setLayout(new GridLayout());
  scroller.setExpandHorizontal(true);
  scroller.setExpandVertical(true);
  ScrollBar bar=scroller.getHorizontalBar();
  if (bar != null)   bar.setIncrement(height / 4);
  bar=scroller.getVerticalBar();
  if (bar != null)   bar.setIncrement(height / 4);
  final Composite pg=WidgetFactory.createPanel(scroller,SWT.NONE,GridData.FILL_BOTH,1,1);
  scroller.setContent(pg);
  final Group group=WidgetFactory.createGroup(pg,DESCRIPTION_GROUP,GridData.FILL_HORIZONTAL);
  this.textEditor=new StyledTextEditor(group,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP);
  final GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=1;
  gridData.heightHint=height;
  gridData.minimumHeight=height;
  this.textEditor.setLayoutData(gridData);
  this.textEditor.setText(vdb.getDescription());
  this.textEditor.getDocument().addDocumentListener(new IDocumentListener(){
    public void documentAboutToBeChanged(    final DocumentEvent event){
    }
    public void documentChanged(    final DocumentEvent event){
      vdb.setDescription(textEditor.getText());
    }
  }
);
  final TextColumnProvider pathColumnProvider=new TextColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return PATH_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getName().removeLastSegments(1).toString();
    }
  }
;
  final CheckBoxColumnProvider syncColumnProvider=new CheckBoxColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return SYNCHRONIZED_COLUMN_NAME;
    }
    @Override public String getToolTip(    final VdbEntry element){
      if (element.getSynchronization() == Synchronization.Synchronized)       return SYNCHRONIZED_TOOLTIP;
      if (element.getSynchronization() == Synchronization.NotSynchronized)       return UNSYNCHRONIZED_TOOLTIP;
      return SYNCHRONIZATION_NOT_APPLICABLE_TOOLTIP;
    }
    @Override public Boolean getValue(    final VdbEntry element){
      return element.getSynchronization() == Synchronization.Synchronized;
    }
    @Override public boolean isEditable(    final VdbEntry element){
      return element.getSynchronization() == Synchronization.NotSynchronized;
    }
    @Override public void setValue(    final VdbEntry element,    final Boolean value){
      if (ConfirmationDialog.confirm(CONFIRM_SYNCHRONIZE_MESSAGE))       element.synchronize(new NullProgressMonitor());
    }
  }
;
  final TextColumnProvider descriptionColumnProvider=new TextColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return DESCRIPTION_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getDescription();
    }
    @Override public boolean isEditable(    final VdbEntry element){
      return true;
    }
    @Override public void setValue(    final VdbEntry element,    final String value){
      element.setDescription(value);
    }
  }
;
  modelsGroup=new TableAndButtonsGroup(pg,MODELS_GROUP,new DefaultTableProvider<VdbModelEntry>(){
    @Override public void doubleClicked(    final VdbModelEntry element){
      openEditor(element);
    }
    @Override public VdbModelEntry[] getElements(){
      final Set<VdbModelEntry> modelEntries=vdb.getModelEntries();
      return modelEntries.toArray(new VdbModelEntry[modelEntries.size()]);
    }
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public Image getImage(    final VdbModelEntry element){
      return ModelIdentifier.getModelImage(element.findFileInWorkspace());
    }
    @Override public String getName(){
      return MODEL_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      return element.getName().lastSegment();
    }
  }
,pathColumnProvider,syncColumnProvider,new CheckBoxColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return VISIBLE_COLUMN_NAME;
    }
    @Override public String getToolTip(    final VdbModelEntry element){
      return element.isVisible() ? VISIBLE_TOOLTIP : NOT_VISIBLE_TOOLTIP;
    }
    @Override public Boolean getValue(    final VdbModelEntry element){
      return element.isVisible();
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final Boolean value){
      element.setVisible(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return SOURCE_NAME_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getSourceName();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setSourceName(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return TRANSLATOR_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getTranslator();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setTranslator(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return JNDI_NAME_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getJndiName();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setJndiName(value);
    }
  }
,descriptionColumnProvider);
  final ModelLabelProvider modelLabelProvider=new ModelLabelProvider();
  final ISelectionStatusValidator validator=new ISelectionStatusValidator(){
    public IStatus validate(    final Object[] selection){
      for (int ndx=selection.length; --ndx >= 0; )       if (selection[ndx] instanceof IContainer)       return new Status(IStatus.ERROR,VdbUiConstants.PLUGIN_ID,0,ADD_FILE_DIALOG_INVALID_SELECTION_MESSAGE,null);
      return new Status(IStatus.OK,VdbUiConstants.PLUGIN_ID,0,EMPTY_STRING,null);
    }
  }
;
  modelsGroup.add(modelsGroup.new AddButtonProvider(){
    @Override protected void add(){
      final ViewerFilter filter=new ViewerFilter(){
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer)           return true;
          final IFile file=(IFile)element;
          if (!ModelUtilities.isModelFile(file) && !ModelUtil.isXsdFile(file))           return false;
          for (          final VdbModelEntry modelEntry : vdb.getModelEntries())           if (file.equals(modelEntry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      final Object[] models=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,new ModelingResourceFilter(filter),validator,modelLabelProvider);
      for (      final Object model : models)       vdb.addModelEntry(((IFile)model).getFullPath(),new NullProgressMonitor());
    }
  }
);
  final RemoveButtonProvider removeButtonProvider=modelsGroup.new RemoveButtonProvider(){
    @Override public void selected(    final IStructuredSelection selection){
      if (!ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE))       return;
      final Set<VdbEntry> entries=new HashSet<VdbEntry>();
      final Set<VdbModelEntry> importedBy=new HashSet<VdbModelEntry>();
      for (      final Object element : selection.toList()) {
        entries.add((VdbEntry)element);
        if (element instanceof VdbModelEntry)         importedBy.addAll(((VdbModelEntry)element).getImportedBy());
      }
      if (!importedBy.isEmpty())       importedBy.removeAll(entries);
      if (!importedBy.isEmpty()) {
        if (!ConfirmationDialog.confirm(new ConfirmationDialog(CONFIRM_REMOVE_IMPORTED_BY_MESSAGE){
          @Override protected Control createCustomArea(          final Composite parent){
            final ListViewer viewer=new ListViewer(parent);
            viewer.setContentProvider(new DefaultContentProvider());
            viewer.setLabelProvider(new LabelProvider(){
              @Override public String getText(              final Object element){
                return ((VdbEntry)element).getName().toString();
              }
            }
);
            viewer.getList().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            viewer.setInput(importedBy);
            return viewer.getControl();
          }
        }
))         return;
        entries.addAll(importedBy);
      }
      for (      final VdbEntry entry : entries)       vdb.removeEntry(entry);
    }
  }
;
  modelsGroup.add(removeButtonProvider);
  final TableViewer viewer=modelsGroup.getTable().getViewer();
  final MenuManager menuManager=new MenuManager();
  viewer.getControl().setMenu(menuManager.createContextMenu(pg));
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    final SelectionChangedEvent event){
      menuManager.removeAll();
      final Object[] actions=SourceHandlerExtensionManager.findApplicableActions(viewer.getSelection());
      if (actions != null)       for (      final Object action : actions) {
        if (action instanceof IAction)         menuManager.add((IAction)action);
      }
    }
  }
);
  modelsGroup.setInput(vdb);
  final WorkbenchLabelProvider workbenchLabelProvider=new WorkbenchLabelProvider();
  otherFilesGroup=new TableAndButtonsGroup(pg,OTHER_FILES_GROUP,new DefaultTableProvider<VdbEntry>(){
    @Override public VdbEntry[] getElements(){
      final Set<VdbEntry> entries=vdb.getEntries();
      return entries.toArray(new VdbEntry[entries.size()]);
    }
  }
,new TextColumnProvider<VdbEntry>(){
    @Override public Image getImage(    final VdbEntry element){
      return workbenchLabelProvider.getImage(element.findFileInWorkspace());
    }
    @Override public String getName(){
      return FILE_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getName().lastSegment();
    }
  }
,pathColumnProvider,syncColumnProvider,descriptionColumnProvider);
  otherFilesGroup.add(otherFilesGroup.new AddButtonProvider(){
    @Override protected void add(){
      final ViewerFilter filter=new ViewerFilter(){
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer)           return true;
          final IFile file=(IFile)element;
          if (ModelUtilities.isModelFile(file) || ModelUtil.isXsdFile(file) || ModelUtil.isVdbArchiveFile(file))           return false;
          for (          final VdbEntry entry : vdb.getEntries())           if (file.equals(entry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      final Object[] files=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,new ModelingResourceFilter(filter),validator,modelLabelProvider);
      for (      final Object file : files)       vdb.addEntry(((IFile)file).getFullPath(),new NullProgressMonitor());
    }
  }
);
  otherFilesGroup.add(removeButtonProvider);
  otherFilesGroup.setInput(vdb);
  synchronizeAllButton=WidgetFactory.createButton(pg,SYNCHRONIZE_ALL_BUTTON,GridData.HORIZONTAL_ALIGN_CENTER);
  synchronizeAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      if (!ConfirmationDialog.confirm(CONFIRM_SYNCHRONIZE_ALL_MESSAGE))       return;
      vdb.synchronize(new NullProgressMonitor());
      modelsGroup.getTable().getViewer().refresh();
      otherFilesGroup.getTable().getViewer().refresh();
    }
  }
);
  synchronizeAllButton.setEnabled(!vdb.isSynchronized());
  group.setFont(modelsGroup.getGroup().getFont());
  pg.pack(true);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void createPartControl(final Composite parent){
  final GC gc=new GC(parent);
  gc.setFont(parent.getFont());
  final int height=Dialog.convertHeightInCharsToPixels(gc.getFontMetrics(),4);
  gc.dispose();
  final ScrolledComposite scroller=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  scroller.setLayout(new GridLayout());
  scroller.setExpandHorizontal(true);
  scroller.setExpandVertical(true);
  ScrollBar bar=scroller.getHorizontalBar();
  if (bar != null)   bar.setIncrement(height / 4);
  bar=scroller.getVerticalBar();
  if (bar != null)   bar.setIncrement(height / 4);
  final Composite pg=WidgetFactory.createPanel(scroller,SWT.NONE,GridData.FILL_BOTH,1,1);
  scroller.setContent(pg);
  final Group group=WidgetFactory.createGroup(pg,DESCRIPTION_GROUP,GridData.FILL_HORIZONTAL);
  this.textEditor=new StyledTextEditor(group,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP);
  final GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=1;
  gridData.heightHint=height;
  gridData.minimumHeight=height;
  this.textEditor.setLayoutData(gridData);
  this.textEditor.setText(vdb.getDescription());
  this.textEditor.getDocument().addDocumentListener(new IDocumentListener(){
    public void documentAboutToBeChanged(    final DocumentEvent event){
    }
    public void documentChanged(    final DocumentEvent event){
      vdb.setDescription(textEditor.getText());
    }
  }
);
  final TextColumnProvider pathColumnProvider=new TextColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return PATH_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getName().removeLastSegments(1).toString();
    }
  }
;
  final CheckBoxColumnProvider syncColumnProvider=new CheckBoxColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return SYNCHRONIZED_COLUMN_NAME;
    }
    @Override public String getToolTip(    final VdbEntry element){
      if (element.getSynchronization() == Synchronization.Synchronized)       return SYNCHRONIZED_TOOLTIP;
      if (element.getSynchronization() == Synchronization.NotSynchronized)       return UNSYNCHRONIZED_TOOLTIP;
      return SYNCHRONIZATION_NOT_APPLICABLE_TOOLTIP;
    }
    @Override public Boolean getValue(    final VdbEntry element){
      return element.getSynchronization() == Synchronization.Synchronized;
    }
    @Override public boolean isEditable(    final VdbEntry element){
      return element.getSynchronization() == Synchronization.NotSynchronized;
    }
    @Override public void setValue(    final VdbEntry element,    final Boolean value){
      if (ConfirmationDialog.confirm(CONFIRM_SYNCHRONIZE_MESSAGE))       element.synchronize(new NullProgressMonitor());
    }
  }
;
  final TextColumnProvider descriptionColumnProvider=new TextColumnProvider<VdbEntry>(){
    @Override public String getName(){
      return DESCRIPTION_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getDescription();
    }
    @Override public boolean isEditable(    final VdbEntry element){
      return true;
    }
    @Override public void setValue(    final VdbEntry element,    final String value){
      element.setDescription(value);
    }
  }
;
  modelsGroup=new TableAndButtonsGroup(pg,MODELS_GROUP,new DefaultTableProvider<VdbModelEntry>(){
    @Override public void doubleClicked(    final VdbModelEntry element){
      openEditor(element);
    }
    @Override public VdbModelEntry[] getElements(){
      final Set<VdbModelEntry> modelEntries=vdb.getModelEntries();
      return modelEntries.toArray(new VdbModelEntry[modelEntries.size()]);
    }
    @Override public boolean isDoubleClickSupported(){
      return true;
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public Image getImage(    final VdbModelEntry element){
      return ModelIdentifier.getModelImage(element.findFileInWorkspace());
    }
    @Override public String getName(){
      return MODEL_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      return element.getName().lastSegment();
    }
  }
,pathColumnProvider,syncColumnProvider,new CheckBoxColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return VISIBLE_COLUMN_NAME;
    }
    @Override public String getToolTip(    final VdbModelEntry element){
      return element.isVisible() ? VISIBLE_TOOLTIP : NOT_VISIBLE_TOOLTIP;
    }
    @Override public Boolean getValue(    final VdbModelEntry element){
      return element.isVisible();
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final Boolean value){
      element.setVisible(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return SOURCE_NAME_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getSourceName();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setSourceName(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return TRANSLATOR_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getTranslator();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setTranslator(value);
    }
  }
,new TextColumnProvider<VdbModelEntry>(){
    @Override public String getName(){
      return JNDI_NAME_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbModelEntry element){
      final String value=element.getJndiName();
      return value == null ? EMPTY_STRING : value;
    }
    @Override public boolean isEditable(    final VdbModelEntry element){
      return true;
    }
    @Override public void setValue(    final VdbModelEntry element,    final String value){
      element.setJndiName(value);
    }
  }
,descriptionColumnProvider);
  final ModelLabelProvider modelLabelProvider=new ModelLabelProvider();
  final ISelectionStatusValidator validator=new ISelectionStatusValidator(){
    public IStatus validate(    final Object[] selection){
      for (int ndx=selection.length; --ndx >= 0; )       if (selection[ndx] instanceof IContainer)       return new Status(IStatus.ERROR,VdbUiConstants.PLUGIN_ID,0,ADD_FILE_DIALOG_INVALID_SELECTION_MESSAGE,null);
      return new Status(IStatus.OK,VdbUiConstants.PLUGIN_ID,0,EMPTY_STRING,null);
    }
  }
;
  modelsGroup.add(modelsGroup.new AddButtonProvider(){
    @Override protected void add(){
      final ViewerFilter filter=new ViewerFilter(){
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer)           return true;
          final IFile file=(IFile)element;
          if (!ModelUtilities.isModelFile(file) && !ModelUtil.isXsdFile(file))           return false;
          for (          final VdbModelEntry modelEntry : vdb.getModelEntries())           if (file.equals(modelEntry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      ModelingResourceFilter wsFilter=new ModelingResourceFilter(filter);
      wsFilter.setShowHiddenProjects(true);
      final Object[] models=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,wsFilter,validator,modelLabelProvider);
      for (      final Object model : models)       vdb.addModelEntry(((IFile)model).getFullPath(),new NullProgressMonitor());
    }
  }
);
  final RemoveButtonProvider removeButtonProvider=modelsGroup.new RemoveButtonProvider(){
    @Override public void selected(    final IStructuredSelection selection){
      if (!ConfirmationDialog.confirm(CONFIRM_REMOVE_MESSAGE))       return;
      final Set<VdbEntry> entries=new HashSet<VdbEntry>();
      final Set<VdbModelEntry> importedBy=new HashSet<VdbModelEntry>();
      for (      final Object element : selection.toList()) {
        entries.add((VdbEntry)element);
        if (element instanceof VdbModelEntry)         importedBy.addAll(((VdbModelEntry)element).getImportedBy());
      }
      if (!importedBy.isEmpty())       importedBy.removeAll(entries);
      if (!importedBy.isEmpty()) {
        if (!ConfirmationDialog.confirm(new ConfirmationDialog(CONFIRM_REMOVE_IMPORTED_BY_MESSAGE){
          @Override protected Control createCustomArea(          final Composite parent){
            final ListViewer viewer=new ListViewer(parent);
            viewer.setContentProvider(new DefaultContentProvider());
            viewer.setLabelProvider(new LabelProvider(){
              @Override public String getText(              final Object element){
                return ((VdbEntry)element).getName().toString();
              }
            }
);
            viewer.getList().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            viewer.setInput(importedBy);
            return viewer.getControl();
          }
        }
))         return;
        entries.addAll(importedBy);
      }
      for (      final VdbEntry entry : entries)       vdb.removeEntry(entry);
    }
  }
;
  modelsGroup.add(removeButtonProvider);
  final TableViewer viewer=modelsGroup.getTable().getViewer();
  final MenuManager menuManager=new MenuManager();
  viewer.getControl().setMenu(menuManager.createContextMenu(pg));
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    final SelectionChangedEvent event){
      menuManager.removeAll();
      final Object[] actions=SourceHandlerExtensionManager.findApplicableActions(viewer.getSelection());
      if (actions != null)       for (      final Object action : actions) {
        if (action instanceof IAction)         menuManager.add((IAction)action);
      }
    }
  }
);
  modelsGroup.setInput(vdb);
  final WorkbenchLabelProvider workbenchLabelProvider=new WorkbenchLabelProvider();
  otherFilesGroup=new TableAndButtonsGroup(pg,OTHER_FILES_GROUP,new DefaultTableProvider<VdbEntry>(){
    @Override public VdbEntry[] getElements(){
      final Set<VdbEntry> entries=vdb.getEntries();
      return entries.toArray(new VdbEntry[entries.size()]);
    }
  }
,new TextColumnProvider<VdbEntry>(){
    @Override public Image getImage(    final VdbEntry element){
      return workbenchLabelProvider.getImage(element.findFileInWorkspace());
    }
    @Override public String getName(){
      return FILE_COLUMN_NAME;
    }
    @Override public String getValue(    final VdbEntry element){
      return element.getName().lastSegment();
    }
  }
,pathColumnProvider,syncColumnProvider,descriptionColumnProvider);
  otherFilesGroup.add(otherFilesGroup.new AddButtonProvider(){
    @Override protected void add(){
      final ViewerFilter filter=new ViewerFilter(){
        @Override public boolean select(        final Viewer viewer,        final Object parent,        final Object element){
          if (element instanceof IContainer)           return true;
          final IFile file=(IFile)element;
          if (ModelUtilities.isModelFile(file) || ModelUtil.isXsdFile(file) || ModelUtil.isVdbArchiveFile(file))           return false;
          for (          final VdbEntry entry : vdb.getEntries())           if (file.equals(entry.findFileInWorkspace()))           return false;
          return true;
        }
      }
;
      final Object[] files=WidgetUtil.showWorkspaceObjectSelectionDialog(ADD_FILE_DIALOG_TITLE,ADD_FILE_DIALOG_MESSAGE,true,null,new ModelingResourceFilter(filter),validator,modelLabelProvider);
      for (      final Object file : files)       vdb.addEntry(((IFile)file).getFullPath(),new NullProgressMonitor());
    }
  }
);
  otherFilesGroup.add(removeButtonProvider);
  otherFilesGroup.setInput(vdb);
  synchronizeAllButton=WidgetFactory.createButton(pg,SYNCHRONIZE_ALL_BUTTON,GridData.HORIZONTAL_ALIGN_CENTER);
  synchronizeAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      if (!ConfirmationDialog.confirm(CONFIRM_SYNCHRONIZE_ALL_MESSAGE))       return;
      vdb.synchronize(new NullProgressMonitor());
      modelsGroup.getTable().getViewer().refresh();
      otherFilesGroup.getTable().getViewer().refresh();
    }
  }
);
  synchronizeAllButton.setEnabled(!vdb.isSynchronized());
  group.setFont(modelsGroup.getGroup().getFont());
  pg.pack(true);
}",0.9944338543652308
102362,"/** 
 * @param description (never <code>null</code>)
 */
public final void setDescription(String description){
  if (StringUtilities.isEmpty(description))   description=null;
  final String oldDescription=this.description.get();
  if (StringUtilities.equals(description,oldDescription))   return;
  this.description.set(description);
  vdb.setModified(this,Vdb.ENTRY_DESCRIPTION,oldDescription,description);
}","/** 
 * @param description (never <code>null</code>)
 */
public final void setDescription(String description){
  final String oldDescription=this.description.get();
  if (StringUtilities.equals(description,oldDescription))   return;
  this.description.set(description);
  vdb.setModified(this,Vdb.ENTRY_DESCRIPTION,oldDescription,description);
}",0.9151193633952256
102363,"/** 
 * @param translator
 */
public final void setTranslator(String translator){
  if (StringUtilities.isEmpty(translator))   translator=null;
  final String oldTranslator=getTranslator();
  if (StringUtilities.equals(translator,oldTranslator))   return;
  this.translator.set(translator);
  getVdb().setModified(this,Vdb.MODEL_TRANSLATOR,oldTranslator,translator);
}","/** 
 * @param translator
 */
public final void setTranslator(String translator){
  final String oldTranslator=getTranslator();
  if (StringUtilities.equals(translator,oldTranslator))   return;
  this.translator.set(translator);
  getVdb().setModified(this,Vdb.MODEL_TRANSLATOR,oldTranslator,translator);
}",0.9080118694362018
102364,"VdbModelEntry(final Vdb vdb,final ModelElement element,final IProgressMonitor monitor){
  super(vdb,element,monitor);
  this.element=element;
  type=ModelType.get(element.getType());
  visible.set(element.isVisible());
  for (  final SourceElement source : element.getSources()) {
    this.source.set(source.getName());
    translator.set(source.getTranslatorName());
    jndiName.set(source.getJndiName());
    break;
  }
  for (  final ProblemElement problem : element.getProblems())   problems.add(new Problem(problem));
  boolean builtIn=false;
  String indexName=null;
  for (  final PropertyElement property : element.getProperties()) {
    final String name=property.getName();
    if (ModelElement.BUILT_IN.equals(name))     builtIn=Boolean.parseBoolean(property.getValue());
 else     if (ModelElement.INDEX_NAME.equals(name))     indexName=property.getValue();
  }
  this.builtIn=builtIn;
  this.indexName=indexName;
}","VdbModelEntry(final Vdb vdb,final ModelElement element,final IProgressMonitor monitor){
  super(vdb,element,monitor);
  this.element=element;
  type=ModelType.get(element.getType());
  visible.set(element.isVisible());
  if (element.getSources() != null && !element.getSources().isEmpty()) {
    for (    final SourceElement source : element.getSources()) {
      this.source.set(source.getName());
      this.translator.set(source.getTranslatorName() == null ? StringUtilities.EMPTY_STRING : source.getTranslatorName());
      this.jndiName.set(source.getJndiName());
      break;
    }
  }
 else {
    this.translator.set(EMPTY_STR);
  }
  for (  final ProblemElement problem : element.getProblems())   problems.add(new Problem(problem));
  boolean builtIn=false;
  String indexName=null;
  for (  final PropertyElement property : element.getProperties()) {
    final String name=property.getName();
    if (ModelElement.BUILT_IN.equals(name))     builtIn=Boolean.parseBoolean(property.getValue());
 else     if (ModelElement.INDEX_NAME.equals(name))     indexName=property.getValue();
  }
  this.builtIn=builtIn;
  this.indexName=indexName;
}",0.8683068017366136
102365,"EntryElement(final VdbEntry entry){
  path=entry.getName().toString();
  description=entry.getDescription();
  getProperties().add(new PropertyElement(CHECKSUM,Long.toString(entry.getChecksum())));
}","EntryElement(final VdbEntry entry){
  path=entry.getName().toString();
  if (entry.getDescription() != null && !entry.getDescription().isEmpty()) {
    description=entry.getDescription();
  }
  getProperties().add(new PropertyElement(CHECKSUM,Long.toString(entry.getChecksum())));
}",0.7817047817047817
102366,"/** 
 * @see org.eclipse.core.resources.IResource#setDerived(boolean)
 * @since 4.2
 */
public void setDerived(boolean isDerived){
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResource#setDerived(boolean,org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public void setDerived(boolean arg0,IProgressMonitor arg1) throws CoreException {
}",0.6033519553072626
102367,"public void setDerived(boolean isDerived){
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResource#setDerived(boolean,org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public void setDerived(boolean arg0,IProgressMonitor arg1) throws CoreException {
}",0.2148148148148148
102368,"public void setDerived(boolean isDerived){
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.core.resources.IResource#setDerived(boolean,org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public void setDerived(boolean arg0,IProgressMonitor arg1) throws CoreException {
}",0.2148148148148148
102369,"/** 
 * Retrieves the tagged resource <code>Annotation</code> object referenced to a <code>ModelResource</code>'s <code>ModelAnnotation</code>
 * @param modelResource the <code>ModelResource</code>. may not be null
 * @param forceCreate forces creation of the annotation if it does not exist.
 * @return the <code>Annotation</code>
 * @throws ModelWorkspaceException
 */
public Annotation getResourceAnnotation(final ModelResource modelResource,final boolean forceCreate) throws ModelWorkspaceException {
  CoreArgCheck.isNotNull(modelResource,""String_Node_Str"");
  Annotation annotation=modelResource.getAnnotations().getAnnotation(modelResource.getModelAnnotation());
  if (annotation == null && forceCreate) {
    annotation=ModelResourceContainerFactory.createNewAnnotation(modelResource.getModelAnnotation());
    ModelContents contents=ModelerCore.getModelEditor().getModelContents(modelResource);
    AnnotationContainer ac=contents.getAnnotationContainer(false);
    if (ac != null)     annotation.setAnnotationContainer(ac);
  }
  return annotation;
}","/** 
 * Retrieves the tagged resource <code>Annotation</code> object referenced to a <code>ModelResource</code>'s <code>ModelAnnotation</code>
 * @param modelResource the <code>ModelResource</code>. may not be null
 * @param forceCreate forces creation of the annotation if it does not exist.
 * @return the <code>Annotation</code>
 * @throws ModelWorkspaceException
 */
public Annotation getResourceAnnotation(final ModelResource modelResource,final boolean forceCreate) throws ModelWorkspaceException {
  CoreArgCheck.isNotNull(modelResource,""String_Node_Str"");
  Annotation annotation=modelResource.getAnnotations().getAnnotation(modelResource.getModelAnnotation());
  if (annotation == null && forceCreate) {
    annotation=ModelResourceContainerFactory.createNewAnnotation(modelResource.getModelAnnotation(),modelResource.getEmfResource());
    ModelContents contents=ModelerCore.getModelEditor().getModelContents(modelResource);
    AnnotationContainer ac=contents.getAnnotationContainer(false);
    if (ac != null)     annotation.setAnnotationContainer(ac);
  }
  return annotation;
}",0.98558809855881
102370,"final void fileChanged(final IResourceDelta delta){
  if ((delta.getFlags() & (IResourceDelta.REPLACED | IResourceDelta.MOVED_FROM | IResourceDelta.MOVED_TO)) > 0)   throw new UnsupportedOperationException(toString(delta));
  final int kind=delta.getKind();
  if (kind == IResourceDelta.REMOVED)   setSynchronization(Synchronization.NotApplicable);
 else   if (kind == IResourceDelta.ADDED || kind == IResourceDelta.CHANGED) {
    if (getChecksum() != computeChecksum((IFile)delta.getResource()))     setSynchronization(Synchronization.NotSynchronized);
 else     setSynchronization(Synchronization.Synchronized);
  }
 else   throw new UnsupportedOperationException(toString(delta));
}","final void fileChanged(final IResourceDelta delta){
  if ((delta.getFlags() & (IResourceDelta.REPLACED | IResourceDelta.MOVED_FROM | IResourceDelta.MOVED_TO)) > 0)   return;
  final int kind=delta.getKind();
  if (kind == IResourceDelta.REMOVED)   setSynchronization(Synchronization.NotApplicable);
 else   if (kind == IResourceDelta.ADDED || kind == IResourceDelta.CHANGED) {
    if (getChecksum() != computeChecksum((IFile)delta.getResource()))     setSynchronization(Synchronization.NotSynchronized);
 else     setSynchronization(Synchronization.Synchronized);
  }
 else   throw new UnsupportedOperationException(toString(delta));
}",0.953030303030303
102371,"public void resourceChanged(final IResourceChangeEvent event){
  if (event.getDelta() == null)   return;
  final IResourceDelta delta=event.getDelta().findMember(name);
  if (delta == null)   return;
  fileChanged(delta);
}","public void resourceChanged(final IResourceChangeEvent event){
  final IResourceDelta delta=event.getDelta() == null ? null : event.getDelta().findMember(name);
  if (delta == null)   return;
  fileChanged(delta);
}",0.8264840182648402
102372,"/** 
 * @param description (never <code>null</code>)
 */
public final void setDescription(String description){
  if (StringUtilities.isEmpty(description))   description=StringUtilities.EMPTY_STRING;
  final String oldDescription=this.description.get();
  if (StringUtilities.equals(description,oldDescription))   return;
  this.description.set(description);
  vdb.setModified(this,Vdb.ENTRY_DESCRIPTION,oldDescription,description);
}","/** 
 * @param description (never <code>null</code>)
 */
public final void setDescription(String description){
  if (StringUtilities.isEmpty(description))   description=null;
  final String oldDescription=this.description.get();
  if (StringUtilities.equals(description,oldDescription))   return;
  this.description.set(description);
  vdb.setModified(this,Vdb.ENTRY_DESCRIPTION,oldDescription,description);
}",0.9619952494061758
102373,"VdbModelEntry(final Vdb vdb,final ModelElement element,final IProgressMonitor monitor){
  super(vdb,element,monitor);
  this.element=element;
  type=ModelType.get(element.getType());
  visible.set(element.isVisible());
  for (  final SourceElement source : element.getSources()) {
    this.source.set(source.getName());
    translator.set(source.getTranslatorName());
    jndiName.set(source.getJndiName());
    break;
  }
  String desc=StringUtilities.EMPTY_STRING;
  if (element.getDescription() != null) {
    desc=element.getDescription();
  }
  description.set(desc);
  for (  final ProblemElement problem : element.getProblems())   problems.add(new Problem(problem));
  boolean builtIn=false;
  String indexName=null;
  for (  final PropertyElement property : element.getProperties()) {
    final String name=property.getName();
    if (ModelElement.BUILT_IN.equals(name))     builtIn=Boolean.parseBoolean(property.getValue());
 else     if (ModelElement.INDEX_NAME.equals(name))     indexName=property.getValue();
  }
  this.builtIn=builtIn;
  this.indexName=indexName;
}","VdbModelEntry(final Vdb vdb,final ModelElement element,final IProgressMonitor monitor){
  super(vdb,element,monitor);
  this.element=element;
  type=ModelType.get(element.getType());
  visible.set(element.isVisible());
  for (  final SourceElement source : element.getSources()) {
    this.source.set(source.getName());
    translator.set(source.getTranslatorName());
    jndiName.set(source.getJndiName());
    break;
  }
  for (  final ProblemElement problem : element.getProblems())   problems.add(new Problem(problem));
  boolean builtIn=false;
  String indexName=null;
  for (  final PropertyElement property : element.getProperties()) {
    final String name=property.getName();
    if (ModelElement.BUILT_IN.equals(name))     builtIn=Boolean.parseBoolean(property.getValue());
 else     if (ModelElement.INDEX_NAME.equals(name))     indexName=property.getValue();
  }
  this.builtIn=builtIn;
  this.indexName=indexName;
}",0.9252243270189432
102374,"/** 
 * Create the child nodes for this type of DisplayNode.
 */
private void createChildNodes(){
  childNodeList=new ArrayList();
  JoinPredicate joinPredicate=(JoinPredicate)this.getLanguageObject();
  FromClause clause=joinPredicate.getLeftClause();
  if (clause == null) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,clause));
  }
  clause=joinPredicate.getRightClause();
  if (clause == null) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,clause));
  }
  Iterator iter=joinPredicate.getJoinCriteria().iterator();
  while (iter.hasNext()) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,iter.next()));
  }
  createDisplayNodeList();
}","/** 
 * Create the child nodes for this type of DisplayNode.
 */
private void createChildNodes(){
  childNodeList=new ArrayList();
  JoinPredicate joinPredicate=(JoinPredicate)this.getLanguageObject();
  FromClause clause=joinPredicate.getLeftClause();
  if (clause == null) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,clause));
  }
  clause=joinPredicate.getRightClause();
  if (clause == null) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,clause));
  }
  Iterator iter=joinPredicate.getJoinCriteria().iterator();
  while (iter.hasNext()) {
    childNodeList.add(DisplayNodeFactory.createDisplayNode(this,clause));
  }
  createDisplayNodeList();
}",0.9901563404748118
102375,"/** 
 * Create the DisplayNode list for this type of DisplayNode. This is a list of all the lowest level nodes for this DisplayNode.
 */
private void createDisplayNodeList(){
  displayNodeList=new ArrayList();
  JoinPredicate joinPredicate=(JoinPredicate)this.getLanguageObject();
  if (joinPredicate.isOptional()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,OPTIONAL_COMMENTS));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
  }
  if (joinPredicate.hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
  }
  DisplayNode child=(DisplayNode)childNodeList.get(0);
  if (child instanceof JoinPredicateDisplayNode && !joinPredicate.getLeftClause().hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
 else {
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
  }
  JoinType joinType=joinPredicate.getJoinType();
  if (joinType == null) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,joinType.toString()));
  }
  displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
  child=(DisplayNode)childNodeList.get(1);
  if (child instanceof JoinPredicateDisplayNode && !joinPredicate.getRightClause().hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
 else {
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
  }
  if (childNodeList.size() > 2) {
    Iterator iter=childNodeList.iterator();
    if (iter.hasNext())     iter.next();
    if (iter.hasNext())     iter.next();
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ReservedWords.ON));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    while (iter.hasNext()) {
      child=(DisplayNode)iter.next();
      if (child instanceof PredicateCriteriaDisplayNode) {
        if (child.hasDisplayNodes()) {
          displayNodeList.addAll(child.getDisplayNodeList());
        }
 else {
          displayNodeList.add(child);
        }
      }
 else {
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
        if (child.hasDisplayNodes()) {
          displayNodeList.addAll(child.getDisplayNodeList());
        }
 else {
          displayNodeList.add(child);
        }
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
      }
      if (iter.hasNext()) {
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ReservedWords.AND));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
      }
    }
  }
  if (joinPredicate.hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
  addFromClauseDepOptions(joinPredicate);
}","/** 
 * Create the DisplayNode list for this type of DisplayNode. This is a list of all the lowest level nodes for this DisplayNode.
 */
private void createDisplayNodeList(){
  displayNodeList=new ArrayList();
  JoinPredicate joinPredicate=(JoinPredicate)this.getLanguageObject();
  if (joinPredicate.isOptional()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,OPTIONAL_COMMENTS));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
  }
  if (joinPredicate.hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
  }
  DisplayNode child=(DisplayNode)childNodeList.get(0);
  if (child instanceof JoinPredicateDisplayNode && !joinPredicate.getLeftClause().hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
 else {
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
  }
  JoinType joinType=joinPredicate.getJoinType();
  if (joinType == null) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ERROR));
  }
 else {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,joinType.toString()));
  }
  displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
  child=(DisplayNode)childNodeList.get(1);
  if (child instanceof JoinPredicateDisplayNode && !joinPredicate.getRightClause().hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
 else {
    if (child.hasDisplayNodes()) {
      displayNodeList.addAll(child.getDisplayNodeList());
    }
 else {
      displayNodeList.add(child);
    }
  }
  List joinCriteria=joinPredicate.getJoinCriteria();
  if (joinCriteria != null && joinCriteria.size() > 0) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ReservedWords.ON));
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
    Iterator critIter=joinCriteria.iterator();
    while (critIter.hasNext()) {
      Criteria crit=(Criteria)critIter.next();
      if (crit instanceof PredicateCriteria) {
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,crit));
      }
 else {
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,LTPAREN));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,crit));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
      }
      if (critIter.hasNext()) {
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,ReservedWords.AND));
        displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,SPACE));
      }
    }
  }
  if (joinPredicate.hasHint()) {
    displayNodeList.add(DisplayNodeFactory.createDisplayNode(this,RTPAREN));
  }
  addFromClauseDepOptions(joinPredicate);
}",0.8910221741481882
102376,"/** 
 * Used by the   {@link #computeModelResources(IContainer,ArrayList)} method.
 * @param resource
 * @return
 */
protected ModelResource createModelResource(final IFile resource){
  ModelWorkspaceItem parent=findParent(resource);
  return new ModelResourceImpl(parent,resource.getName());
}","/** 
 * Used by the   {@link #computeModelResources(IContainer,ArrayList)} method.
 * @param resource
 * @return
 */
protected ModelResource createModelResource(final IFile resource){
  ModelWorkspaceItem parent=findParent(resource);
  if (!ModelUtil.isVdbArchiveFile(resource)) {
    return new ModelResourceImpl(parent,resource.getName(),false);
  }
  return new ModelResourceImpl(parent,resource.getName());
}",0.8328611898016998
102377,"/** 
 * Change the worspace by adding or removing items from it.
 * @param notification Notification for adding and removing items to workspace
 * @throws CoreException
 */
private boolean changeWorkspace(final ModelWorkspaceNotification notification) throws CoreException {
  final IResource resource=(IResource)notification.getNotifier();
  final IProject iProject=resource.getProject();
  if (iProject.exists())   if (iProject.isOpen() && !ModelerCore.hasModelNature(iProject))   return false;
  if (resource.getType() == IResource.FILE) {
    if (!ModelUtil.isModelFile(resource,false) && !ModelUtil.isVdbArchiveFile(resource))     return false;
    this.setIndexType(ModelResource.NOT_INDEXED);
  }
 else   if (resource.getType() != IResource.PROJECT && resource.getType() != IResource.FOLDER)   return false;
  ModelProjectImpl project=(ModelProjectImpl)this.modelWorkspace.findModelProject(resource);
  final int eventType=((ModelWorkspaceNotificationImpl)notification).getEventType();
switch (eventType) {
case Notification.ADD:
    add(resource,project);
  break;
case Notification.REMOVE:
try {
  TransactionUtil.executeNonUndoable(new IOperation(){
    public void execute() throws CoreException {
      remove(resource);
    }
  }
,this);
}
 catch (final CoreException err) {
  throw err;
}
catch (final Exception err) {
  ModelerCore.Util.log(err);
}
break;
case Notification.MOVE:
break;
case Notification.SET:
final IPath oldPath=notification.getDelta().getMovedFromPath();
final ModelWorkspaceItem oldItem=this.modelWorkspace.getWorkspaceItem(oldPath,resource.getType());
if (oldItem != null && oldItem.getResource() != null) {
remove(oldItem.getResource());
add(resource,project);
}
break;
case ModelWorkspaceNotification.CHANGE:
if (resource.getType() == IResource.FILE) {
final ModelWorkspaceItem resourceItem=this.modelWorkspace.getWorkspaceItem(resource.getFullPath(),resource.getType());
if (resourceItem != null && resourceItem instanceof ModelResourceImpl) {
final ModelResourceImpl model=(ModelResourceImpl)resourceItem;
return model.processContentsChange(notification);
}
}
break;
case ModelWorkspaceNotification.OPEN:
if (resource instanceof IProject) {
if (project == null) {
project=new ModelProjectImpl((IProject)resource,this.modelWorkspace);
final ModelWorkspaceItemInfo parentInfo=(ModelWorkspaceItemInfo)getInfo(this.modelWorkspace);
if (parentInfo != null) parentInfo.addChild(project);
}
project.open(null);
}
break;
default :
throw new ModelerCoreException(ModelerCore.Util.getString(""String_Node_Str"") + eventType);
}
return false;
}","/** 
 * Change the worspace by adding or removing items from it.
 * @param notification Notification for adding and removing items to workspace
 * @throws CoreException
 */
private boolean changeWorkspace(final ModelWorkspaceNotification notification) throws CoreException {
  final IResource resource=(IResource)notification.getNotifier();
  final IProject iProject=resource.getProject();
  if (iProject.exists())   if (iProject.isOpen() && !ModelerCore.hasModelNature(iProject))   return false;
  if (resource.getType() == IResource.FILE) {
    if (!ModelUtil.isModelFile(resource,false) && !ModelUtil.isVdbArchiveFile(resource))     return false;
    this.setIndexType(ModelResource.NOT_INDEXED);
  }
 else   if (resource.getType() != IResource.PROJECT && resource.getType() != IResource.FOLDER)   return false;
  ModelProjectImpl project=(ModelProjectImpl)this.modelWorkspace.findModelProject(resource);
  final int eventType=((ModelWorkspaceNotificationImpl)notification).getEventType();
switch (eventType) {
case Notification.ADD:
    add(resource,project);
  break;
case Notification.REMOVE:
try {
  TransactionUtil.executeNonUndoable(new IOperation(){
    public void execute() throws CoreException {
      remove(resource);
    }
  }
,this);
}
 catch (final CoreException err) {
  throw err;
}
catch (final Exception err) {
  ModelerCore.Util.log(err);
}
break;
case Notification.MOVE:
break;
case Notification.SET:
final IPath oldPath=notification.getDelta().getMovedFromPath();
final ModelWorkspaceItem oldItem=this.modelWorkspace.getWorkspaceItem(oldPath,resource.getType());
if (oldItem != null && oldItem.getResource() != null) {
remove(oldItem.getResource());
add(resource,project);
}
break;
case ModelWorkspaceNotification.CHANGE:
if (resource.getType() == IResource.FILE) {
final ModelWorkspaceItem resourceItem=this.modelWorkspace.getWorkspaceItem(resource.getFullPath(),resource.getType());
if (resourceItem != null && resourceItem instanceof ModelResourceImpl && !ModelUtil.isVdbArchiveFile(resourceItem.getCorrespondingResource())) {
final ModelResourceImpl model=(ModelResourceImpl)resourceItem;
return model.processContentsChange(notification);
}
}
break;
case ModelWorkspaceNotification.OPEN:
if (resource instanceof IProject) {
if (project == null) {
project=new ModelProjectImpl((IProject)resource,this.modelWorkspace);
final ModelWorkspaceItemInfo parentInfo=(ModelWorkspaceItemInfo)getInfo(this.modelWorkspace);
if (parentInfo != null) parentInfo.addChild(project);
}
project.open(null);
}
break;
default :
throw new ModelerCoreException(ModelerCore.Util.getString(""String_Node_Str"") + eventType);
}
return false;
}",0.9861910241657076
102378,"/** 
 * @since 4.0
 */
public void update(){
  if (pageControl.isDisposed())   return;
  final Vdb vdb=this.editor.getVdb();
  Severity severity=null;
  for (  VdbModelEntry entry : vdb.getModelEntries()) {
    if (!entry.getErrors().isEmpty()) {
      severity=Severity.ERROR_LITERAL;
      break;
    }
    if (severity == null && !entry.getWarnings().isEmpty())     severity=Severity.WARNING_LITERAL;
  }
  String statusText=severity.getName();
  if (severity.getValue() == Severity.ERROR) {
    statusText=statusText + ' ' + STATUS_ERROR_MESSAGE;
  }
  this.statusLabel.setText(statusText);
  this.statusLabel.setImage(VdbEditor.getStatusImage(severity));
  reloadingDescription=true;
  String description=editor.getVdb().getDescription();
  if (description == null) {
    description=""String_Node_Str"";
  }
  if (!description.equals(this.textEditor.getText())) {
    this.textEditor.setText(description);
  }
  reloadingDescription=false;
  setEnabledState();
}","/** 
 * @since 4.0
 */
public void update(){
  if (pageControl.isDisposed())   return;
  final Vdb vdb=this.editor.getVdb();
  Severity severity=Severity.OK_LITERAL;
  for (  VdbModelEntry entry : vdb.getModelEntries()) {
    if (!entry.getErrors().isEmpty()) {
      severity=Severity.ERROR_LITERAL;
      break;
    }
    if (severity == null && !entry.getWarnings().isEmpty())     severity=Severity.WARNING_LITERAL;
  }
  String statusText=severity.getName();
  if (severity.getValue() == Severity.ERROR) {
    statusText=statusText + ' ' + STATUS_ERROR_MESSAGE;
  }
  this.statusLabel.setText(statusText);
  this.statusLabel.setImage(VdbEditor.getStatusImage(severity));
  reloadingDescription=true;
  String description=editor.getVdb().getDescription();
  if (description == null) {
    description=""String_Node_Str"";
  }
  if (!description.equals(this.textEditor.getText())) {
    this.textEditor.setText(description);
  }
  reloadingDescription=false;
  setEnabledState();
}",0.9881869542886492
102379,"private void clean(){
  errors.clear();
  warnings.clear();
  for (  final VdbModelEntry entry : dependsUpon) {
    entry.dependentOf.remove(this);
    if (entry.isBuiltIn())     entry.dispose();
  }
  dependsUpon.clear();
}","private void clean(){
  if (this.errors == null) {
    this.errors=new HashSet<Diagnostic>();
  }
  errors.clear();
  if (this.warnings == null) {
    this.warnings=new HashSet<Diagnostic>();
  }
  warnings.clear();
  if (dependsUpon == null) {
    dependsUpon=new CopyOnWriteArraySet<VdbModelEntry>();
  }
  if (dependentOf == null) {
    dependentOf=new CopyOnWriteArraySet<VdbModelEntry>();
  }
  for (  final VdbModelEntry entry : dependsUpon) {
    entry.dependentOf.remove(this);
    if (entry.isBuiltIn())     entry.dispose();
  }
  dependsUpon.clear();
}",0.465648854961832
102380,"public String getText(Connector binding){
  if (binding == null) {
    if (this.vdbContext.isReadOnly()) {
      return getString(""String_Node_Str"");
    }
    return getString(""String_Node_Str"");
  }
  return binding.getName() + ""String_Node_Str"" + binding.getComponentTypeID().getName();
}","public String getText(Connector binding){
  if (binding == null) {
    if (this.vdbContext.isReadOnly()) {
      return getString(""String_Node_Str"");
    }
    return getString(""String_Node_Str"");
  }
  return binding.getName();
}",0.8829174664107485
102381,"/** 
 * @param name the property name
 * @param value the proposed new value
 * @return <code>true</code> if the property exists and the proposed value is valid
 * @since 7.0
 */
public boolean isValidPropertyValue(String name,String value){
  PropertyDefinition definition=this.type.getPropertyDefinition(name);
  if (definition == null)   return false;
  String type=definition.getPropertyTypeClassName();
  if (""String_Node_Str"".equals(type)) {
    if (value == null) {
      return false;
    }
    if (!value.equalsIgnoreCase(Boolean.TRUE.toString()) && !value.equalsIgnoreCase(Boolean.FALSE.toString())) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    if ((value != null) && (value.length() > 1)) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Byte.parseByte(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Short.parseShort(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Integer.parseInt(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Long.parseLong(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Float.parseFloat(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(type)) {
    try {
      Double.parseDouble(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
  if (definition.isConstrainedToAllowedValues()) {
    Collection values=definition.getAllowedValues();
    assert((values != null) && !values.isEmpty());
    for (    Object allowedValue : values) {
      if (allowedValue.equals(value)) {
        return true;
      }
    }
    return false;
  }
  return true;
}","/** 
 * @param name the property name
 * @param value the proposed new value
 * @return <code>true</code> if the property exists and the proposed value is valid
 * @since 7.0
 */
public boolean isValidPropertyValue(String name,String value){
  if (value == null) {
    return false;
  }
  PropertyDefinition definition=this.type.getPropertyDefinition(name);
  if (definition == null)   return false;
  String type=definition.getPropertyTypeClassName();
  if (Boolean.class.getName().equals(type)) {
    if (!value.equalsIgnoreCase(Boolean.TRUE.toString()) && !value.equalsIgnoreCase(Boolean.FALSE.toString())) {
      return false;
    }
  }
 else   if (Character.class.getName().equals(type)) {
    if (value.length() != 1) {
      return false;
    }
  }
 else   if (Byte.class.getName().equals(type)) {
    try {
      Byte.parseByte(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (Short.class.getName().equals(type)) {
    try {
      Short.parseShort(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (Integer.class.getName().equals(type)) {
    try {
      Integer.parseInt(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (Long.class.getName().equals(type)) {
    try {
      Long.parseLong(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (Float.class.getName().equals(type)) {
    try {
      Float.parseFloat(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (Double.class.getName().equals(type)) {
    try {
      Double.parseDouble(value);
    }
 catch (    Exception e) {
      return false;
    }
  }
  if (definition.isConstrainedToAllowedValues()) {
    Collection values=definition.getAllowedValues();
    assert((values != null) && !values.isEmpty());
    for (    Object allowedValue : values) {
      if (allowedValue.equals(value)) {
        return true;
      }
    }
    return false;
  }
  return true;
}",0.8069468915177448
102382,"/** 
 * @param changedProperties the list of properties that are being changed (never <code>null</code> or empty)
 * @throws Exception if there is a problem changing the properties
 * @since 7.0
 */
public void setProperties(Properties changedProperties) throws Exception {
  ArgCheck.isNotEmpty(changedProperties.entrySet(),""String_Node_Str"");
  this.type.getAdmin().setProperties(this,changedProperties);
  Properties props=getProperties();
  for (  String name : changedProperties.stringPropertyNames()) {
    props.setProperty(name,changedProperties.getProperty(name));
  }
}","/** 
 * @param changedProperties the list of properties that are being changed (never <code>null</code> or empty)
 * @throws Exception if there is a problem changing the properties
 * @since 7.0
 */
public void setProperties(Properties changedProperties) throws Exception {
  ArgCheck.isNotNull(changedProperties,""String_Node_Str"");
  Set<Entry<Object,Object>> entrySet=changedProperties.entrySet();
  ArgCheck.isNotEmpty(entrySet,""String_Node_Str"");
  this.type.getAdmin().setProperties(this,changedProperties);
  Properties props=getProperties();
  for (  Entry<Object,Object> entry : entrySet) {
    props.setProperty((String)entry.getKey(),(String)entry.getValue());
  }
}",0.7378486055776893
102383,"/** 
 * Close the text widget and reset the editorText field.
 */
void disposeTextWidget(){
  if (textActionHandler != null)   textActionHandler.removeText(textEditor);
  if (textEditorParent != null) {
    textEditorParent.dispose();
    textEditorParent=null;
    textEditor=null;
    treeEditor.setEditor(null,null);
  }
}","/** 
 * Close the text widget and reset the editorText field.
 */
void disposeTextWidget(){
  if (textActionHandler != null)   textActionHandler.removeText(textEditor);
  if (textEditorParent != null) {
    textEditorParent.dispose();
    textEditorParent=null;
    textEditor=null;
    treeEditor.setEditor(null,null);
  }
  insureOpenEditor();
}",0.9672619047619048
102384,"/** 
 * This method is called in the run() method of AbstractAction to give the actions a hook into canceling the run at the last minute. This overrides the AbstractAction preRun() method.
 */
@Override protected boolean preRun(){
  if (requiresEditorForRun()) {
    List allSelectedEObjects=SelectionUtilities.getSelectedEObjects(getSelection());
    if (allSelectedEObjects != null && !allSelectedEObjects.isEmpty()) {
      EObject eObject=(EObject)allSelectedEObjects.get(0);
      ModelResource mr=ModelUtilities.getModelResourceForModelObject(eObject);
      if (mr != null) {
        ModelEditorManager.open(eObject,true,UiConstants.ObjectEditor.REFRESH_EDITOR_IF_OPEN);
      }
    }
  }
  return true;
}","/** 
 * This method is called in the run() method of AbstractAction to give the actions a hook into canceling the run at the last minute. This overrides the AbstractAction preRun() method.
 */
@Override protected boolean preRun(){
  if (requiresEditorForRun()) {
    List allSelectedEObjects=SelectionUtilities.getSelectedEObjects(getSelection());
    if (allSelectedEObjects != null && !allSelectedEObjects.isEmpty()) {
      EObject eObject=(EObject)allSelectedEObjects.get(0);
      ModelResource mr=ModelUtilities.getModelResourceForModelObject(eObject);
      if (mr != null) {
        if (!ModelEditorManager.isOpen(eObject)) {
          ModelEditorManager.activate(mr,true);
        }
      }
    }
  }
  return true;
}",0.9221140472878998
102385,"/** 
 * Overridden to allow calling setSelection from outside the table package, this method converts the selection from EObjects to ModelRowElements and set it on the table.
 * @see org.eclipse.jface.viewers.ISelectionProvider#setSelection(org.eclipse.jface.viewers.ISelection)
 * @since 5.0.2
 */
@Override public void setSelection(final ISelection selection){
  if (this.viewer != null && SelectionUtilities.isSingleSelection(selection) && SelectionUtilities.isAllEObjects(selection)) {
    EObject eObj=SelectionUtilities.getSelectedEObject(selection);
    if (eObj != null && (eObj instanceof Operation || eObj instanceof Interface)) {
      this.viewer.setSelection(new StructuredSelection(eObj),true);
    }
  }
}","/** 
 * Overridden to allow calling setSelection from outside the table package, this method converts the selection from EObjects to ModelRowElements and set it on the table.
 * @see org.eclipse.jface.viewers.ISelectionProvider#setSelection(org.eclipse.jface.viewers.ISelection)
 * @since 5.0.2
 */
@Override public void setSelection(final ISelection selection){
}",0.6715867158671587
102386,"/** 
 * @return the <code>modeler.dqp</code> plugin's runtime workspace path or the test runtime path
 * @throws IOException if an error occurs obtaining the path
 * @since 6.0.0
 */
public static IPath getRuntimePath(){
  if (runtimePath == null) {
    if (testRuntimeDir == null) {
      runtimePath=Platform.getStateLocation(DqpPlugin.getInstance().getBundle());
    }
 else {
      runtimePath=new Path(testRuntimeDir);
    }
  }
  return (IPath)runtimePath.clone();
}","/** 
 * @return the <code>modeler.dqp</code> plugin's runtime workspace path or the test runtime path
 * @throws IOException if an error occurs obtaining the path
 * @since 6.0.0
 */
public static IPath getRuntimePath(){
  if (runtimePath == null) {
    if (testRuntimeDir == null) {
      runtimePath=DqpPlugin.getInstance().getStateLocation();
    }
 else {
      runtimePath=new Path(testRuntimeDir);
    }
  }
  return (IPath)runtimePath.clone();
}",0.948051948051948
102387,"private IPath getRuntimePath(){
  if (this.runtimePath == null) {
    if (this.testRuntimePath == null) {
      this.runtimePath=Platform.getStateLocation(TransformationPlugin.getDefault().getBundle());
    }
 else {
      this.runtimePath=new Path(this.testRuntimePath);
    }
  }
  return (IPath)this.runtimePath.clone();
}","private IPath getRuntimePath(){
  if (this.runtimePath == null) {
    if (this.testRuntimePath == null) {
      this.runtimePath=TransformationPlugin.getDefault().getStateLocation();
    }
 else {
      this.runtimePath=new Path(this.testRuntimePath);
    }
  }
  return (IPath)this.runtimePath.clone();
}",0.873015873015873
102388,"@Override public void setActivePage(IEditorPart thePart){
  if (Util.isTraceEnabled(this)) {
    Util.printEntered(this,new StringBuffer().append(""String_Node_Str"").append(thePart).append(""String_Node_Str"").append(activeEditor).toString());
  }
  AbstractModelEditorPageActionBarContributor contributor=null;
  IEditorPart part=thePart;
  if (thePart instanceof ModelEditor) {
    part=((ModelEditor)thePart).getCurrentPage();
  }
  if (this.partContributorMap != null) {
    Iterator itrContributor=this.partContributorMap.values().iterator();
    while (itrContributor.hasNext()) {
      IEditorActionBarContributor pageContributor=(IEditorActionBarContributor)itrContributor.next();
      if (pageContributor != null) {
        pageContributor.setActiveEditor(part);
      }
    }
  }
  contributor=getActionContributor(part);
  if (contributor != null) {
    contributor.setActiveEditor(part);
  }
  ModelerGlobalActionsMap globalActions=(contributor == null) ? (ModelerGlobalActionsMap)defaultActionsMap : (ModelerGlobalActionsMap)contributor.getGlobalActions();
  if (globalActions == null) {
    globalActions=new ModelerGlobalActionsMap();
  }
  IWorkbenchWindow window=getPage().getWorkbenchWindow();
  ActionService actionService=(contributor == null) ? UiPlugin.getDefault().getActionService(window.getActivePage()) : contributor.getActionService();
  Iterator itr=globalActions.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    String actionId=(String)entry.getKey();
    IAction action=(globalActions.isDefaultAction(actionId)) ? actionService.getDefaultAction(actionId) : (IAction)entry.getValue();
    if (action == null) {
      action=GlobalActionsMap.UNSUPPORTED_ACTION;
    }
    getActionBars().setGlobalActionHandler(actionId,action);
    IHandlerService svc=(IHandlerService)part.getSite().getService(IHandlerService.class);
    svc.activateHandler(actionId,new ActionHandler(action));
  }
  getActionBars().updateActionBars();
  activeEditor=part;
  if (Util.isTraceEnabled(this)) {
    Util.printExited(this,""String_Node_Str"");
  }
}","@Override public void setActivePage(IEditorPart thePart){
  if (Util.isTraceEnabled(this)) {
    Util.printEntered(this,new StringBuffer().append(""String_Node_Str"").append(thePart).append(""String_Node_Str"").append(activeEditor).toString());
  }
  AbstractModelEditorPageActionBarContributor contributor=null;
  IEditorPart part=thePart;
  if (thePart instanceof ModelEditor) {
    part=((ModelEditor)thePart).getCurrentPage();
  }
  if (this.partContributorMap != null) {
    Iterator itrContributor=this.partContributorMap.values().iterator();
    while (itrContributor.hasNext()) {
      IEditorActionBarContributor pageContributor=(IEditorActionBarContributor)itrContributor.next();
      if (pageContributor != null) {
        pageContributor.setActiveEditor(part);
      }
    }
  }
  contributor=getActionContributor(part);
  if (contributor != null) {
    contributor.setActiveEditor(part);
  }
  ModelerGlobalActionsMap globalActions=(contributor == null) ? (ModelerGlobalActionsMap)defaultActionsMap : (ModelerGlobalActionsMap)contributor.getGlobalActions();
  if (globalActions == null) {
    globalActions=new ModelerGlobalActionsMap();
  }
  IWorkbenchWindow window=getPage().getWorkbenchWindow();
  ActionService actionService=(contributor == null) ? UiPlugin.getDefault().getActionService(window.getActivePage()) : contributor.getActionService();
  IHandlerService svc=(IHandlerService)part.getSite().getService(IHandlerService.class);
  Iterator itr=globalActions.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    String actionId=(String)entry.getKey();
    IAction action=(globalActions.isDefaultAction(actionId)) ? actionService.getDefaultAction(actionId) : (IAction)entry.getValue();
    if (action == null) {
      action=GlobalActionsMap.UNSUPPORTED_ACTION;
    }
    getActionBars().setGlobalActionHandler(actionId,action);
    if (this.actionHandlerMap.containsKey(actionId)) {
      svc.deactivateHandler(this.actionHandlerMap.get(actionId));
    }
    this.actionHandlerMap.put(actionId,svc.activateHandler(actionId,new ActionHandler(action)));
  }
  getActionBars().updateActionBars();
  activeEditor=part;
  if (Util.isTraceEnabled(this)) {
    Util.printExited(this,""String_Node_Str"");
  }
}",0.9054270666361346
102389,"public ModelEditorActionContributor(){
  super();
  Util.trace(this,new StringBuffer().append(""String_Node_Str"").append(System.identityHashCode(this)).toString());
}","public ModelEditorActionContributor(){
  super();
  Util.trace(this,new StringBuffer().append(""String_Node_Str"").append(System.identityHashCode(this)).toString());
  this.actionHandlerMap=new HashMap<String,IHandlerActivation>(ModelerGlobalActionsMap.ALL_GLOBAL_ACTIONS.length);
}",0.7415730337078652
102390,"private boolean migrate(MigrationResult migrationResult) throws Exception {
  ListAccess<Space> allSpacesListAccess=spaceService.getAllSpacesWithListAccess();
  int spacesCount=allSpacesListAccess.getSize();
  if (spacesCount == 0) {
    return true;
  }
  List<Space> allSpaces=getAllSpaces(allSpacesListAccess,spacesCount);
  spacesCount=allSpaces.size();
  int numberOfThreads=spacesCount >= THREAD ? THREAD : spacesCount;
  int numberOfSpacesPerThreads=(int)Math.ceil((double)spacesCount / (double)numberOfThreads);
  migrationResult.setSpacesCount(spacesCount);
  List<Future<Boolean>> futures=new ArrayList<>();
  for (int i=0; i < numberOfThreads; i++) {
    int fromIndex=numberOfSpacesPerThreads * i;
    int toIndex=fromIndex + numberOfSpacesPerThreads;
    toIndex=toIndex > spacesCount ? spacesCount : toIndex;
    List<Space> spaces=allSpaces.subList(fromIndex,toIndex);
    Future<Boolean> future=executorService.submit(new SpaceMigrationCallable(spaces,migrationResult));
    futures.add(future);
  }
  boolean migrationCompletedSuccessfully=true;
  for (  Future<Boolean> future : futures) {
    migrationCompletedSuccessfully=migrationCompletedSuccessfully && future.get();
  }
  return migrationCompletedSuccessfully;
}","private boolean migrate(MigrationResult migrationResult) throws Exception {
  ListAccess<Space> allSpacesListAccess=spaceService.getAllSpacesWithListAccess();
  int spacesCount=allSpacesListAccess.getSize();
  if (spacesCount == 0) {
    return true;
  }
  List<Space> allSpaces=getAllSpaces(allSpacesListAccess,spacesCount);
  spacesCount=allSpaces.size();
  int numberOfThreads=spacesCount >= THREAD ? THREAD : spacesCount;
  int numberOfSpacesPerThreads=(int)Math.ceil((double)spacesCount / (double)numberOfThreads);
  migrationResult.setSpacesCount(spacesCount);
  List<Future<Boolean>> futures=new ArrayList<>();
  for (int i=0; i < numberOfThreads; i++) {
    int fromIndex=numberOfSpacesPerThreads * i;
    if (fromIndex > spacesCount) {
      break;
    }
    int toIndex=fromIndex + numberOfSpacesPerThreads;
    toIndex=toIndex > spacesCount ? spacesCount : toIndex;
    List<Space> spaces=allSpaces.subList(fromIndex,toIndex);
    Future<Boolean> future=executorService.submit(new SpaceMigrationCallable(spaces,migrationResult));
    futures.add(future);
  }
  boolean migrationCompletedSuccessfully=true;
  for (  Future<Boolean> future : futures) {
    migrationCompletedSuccessfully=migrationCompletedSuccessfully && future.get();
  }
  return migrationCompletedSuccessfully;
}",0.9786392405063292
102391,"@Override public void execute(Event<BaseUIActivity> event) throws Exception {
  WebuiRequestContext requestContext=event.getRequestContext();
  String[] likeStatus=requestContext.getRequestParameter(OBJECTID).split(""String_Node_Str"");
  BaseUIActivity uiActivity=event.getSource();
  uiActivity.setLikeComment(Boolean.parseBoolean(likeStatus[0]),likeStatus[1]);
  requestContext.addUIComponentToUpdateByAjax(uiActivity);
  Utils.initUserProfilePopup(uiActivity.getId());
  Utils.resizeHomePage();
}","@Override public void execute(Event<BaseUIActivity> event) throws Exception {
  WebuiRequestContext requestContext=event.getRequestContext();
  String[] likeStatus=requestContext.getRequestParameter(OBJECTID).split(""String_Node_Str"");
  BaseUIActivity uiActivity=event.getSource();
  uiActivity.setLikeComment(Boolean.parseBoolean(likeStatus[0]),likeStatus[1]);
  requestContext.addUIComponentToUpdateByAjax(uiActivity);
  Utils.initUserProfilePopup(uiActivity.getId());
}",0.9731958762886598
102392,"/** 
 * Gets list of existing users in a space
 * @return list of existing users
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getExistingUsers(){
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] memberUsers=space.getMembers();
    if (memberUsers == null || memberUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorExistingUsers.getCurrentPage();
    Set<String> users=new HashSet<String>(Arrays.asList(memberUsers));
    users.addAll(SpaceUtils.findMembershipUsersByGroupAndTypes(space.getGroupId(),MembershipTypeHandler.ANY_MEMBERSHIP_TYPE));
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(new ArrayList<String>(users)),MEMBERS_PER_PAGE);
    iteratorExistingUsers.setPageList(pageList);
    if (this.isNewSearch()) {
      iteratorExistingUsers.setCurrentPage(FIRST_PAGE);
    }
 else {
      iteratorExistingUsers.setCurrentPage(currentPage);
    }
    this.setNewSearch(false);
    return iteratorExistingUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_MEMBERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}","/** 
 * Gets list of existing users in a space
 * @return list of existing users
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getExistingUsers(){
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] memberUsers=space.getMembers();
    if (memberUsers == null || memberUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorExistingUsers.getCurrentPage();
    Set<String> users=new HashSet<String>(Arrays.asList(memberUsers));
    users.addAll(SpaceUtils.findMembershipUsersByGroupAndTypes(space.getGroupId(),MembershipTypeHandler.ANY_MEMBERSHIP_TYPE));
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(new ArrayList<String>(users)),MEMBERS_PER_PAGE);
    iteratorExistingUsers.setPageList(pageList);
    if (this.isNewSearch()) {
      iteratorExistingUsers.setCurrentPage(FIRST_PAGE);
    }
 else {
      iteratorExistingUsers.setCurrentPage(currentPage);
    }
    this.setNewSearch(false);
    return iteratorExistingUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_MEMBERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}",0.9931751706207343
102393,"/** 
 * Gets list of invited users in a space
 * @return lists of invited users
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getInvitedUsers(){
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] invitedUsers=space.getInvitedUsers();
    if (invitedUsers == null || invitedUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorInvitedUsers.getCurrentPage();
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(Arrays.asList(invitedUsers)),INVITATION_PER_PAGE);
    iteratorInvitedUsers.setPageList(pageList);
    int pageCount=iteratorInvitedUsers.getAvailablePage();
    if (pageCount >= currentPage) {
      iteratorInvitedUsers.setCurrentPage(currentPage);
    }
 else     if (pageCount < currentPage) {
      iteratorInvitedUsers.setCurrentPage(currentPage - 1);
    }
    return iteratorInvitedUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_INVITED_USERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}","/** 
 * Gets list of invited users in a space
 * @return lists of invited users
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getInvitedUsers(){
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] invitedUsers=space.getInvitedUsers();
    if (invitedUsers == null || invitedUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorInvitedUsers.getCurrentPage();
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(Arrays.asList(invitedUsers)),INVITATION_PER_PAGE);
    iteratorInvitedUsers.setPageList(pageList);
    int pageCount=iteratorInvitedUsers.getAvailablePage();
    if (pageCount >= currentPage) {
      iteratorInvitedUsers.setCurrentPage(currentPage);
    }
 else     if (pageCount < currentPage) {
      iteratorInvitedUsers.setCurrentPage(currentPage - 1);
    }
    return iteratorInvitedUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_INVITED_USERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}",0.9926186291739896
102394,"/** 
 * Gets list of pending users in a space
 * @return list of pending users
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getPendingUsers() throws Exception {
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] pendingUsers=space.getPendingUsers();
    if (pendingUsers == null || pendingUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorPendingUsers.getCurrentPage();
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(Arrays.asList(pendingUsers)),PENDING_PER_PAGE);
    iteratorPendingUsers.setPageList(pageList);
    int pageCount=iteratorPendingUsers.getAvailablePage();
    if (pageCount >= currentPage) {
      iteratorPendingUsers.setCurrentPage(currentPage);
    }
 else     if (pageCount < currentPage) {
      iteratorPendingUsers.setCurrentPage(currentPage - 1);
    }
    return iteratorPendingUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_PENDING_USERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}","/** 
 * Gets list of pending users in a space
 * @return list of pending users
 */
@SuppressWarnings(""String_Node_Str"") public List<String> getPendingUsers() throws Exception {
  SpaceService spaceService=getSpaceService();
  Space space=spaceService.getSpaceById(spaceId);
  try {
    if (space == null) {
      throw new Exception(""String_Node_Str"" + spaceId);
    }
    String[] pendingUsers=space.getPendingUsers();
    if (pendingUsers == null || pendingUsers.length == 0) {
      return new ArrayList<String>();
    }
    int currentPage=iteratorPendingUsers.getCurrentPage();
    LazyPageList<String> pageList=new LazyPageList<String>(new StringListAccess(Arrays.asList(pendingUsers)),PENDING_PER_PAGE);
    iteratorPendingUsers.setPageList(pageList);
    int pageCount=iteratorPendingUsers.getAvailablePage();
    if (pageCount >= currentPage) {
      iteratorPendingUsers.setCurrentPage(currentPage);
    }
 else     if (pageCount < currentPage) {
      iteratorPendingUsers.setCurrentPage(currentPage - 1);
    }
    return iteratorPendingUsers.getCurrentPageData();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(MSG_ERROR_PENDING_USERS_LOADING,null,ApplicationMessage.ERROR));
  }
  return new ArrayList<>();
}",0.9926905673512008
102395,"/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public Space createSpace(Space space,String creator,String invitedGroupId){
  String[] managers=space.getManagers();
  String[] members=space.getMembers();
  managers=(String[])ArrayUtils.add(managers,creator);
  members=(String[])ArrayUtils.add(members,creator);
  space.setManagers(managers);
  space.setMembers(members);
  String groupId=null;
  try {
    groupId=SpaceUtils.createGroup(space.getDisplayName(),space.getPrettyName(),creator);
  }
 catch (  SpaceException e) {
    throw new RuntimeException(""String_Node_Str"" + space.getPrettyName(),e);
  }
  List<String> inviteds=new ArrayList<String>();
  if (invitedGroupId != null) {
    OrganizationService org=getOrgService();
    try {
      PageList<User> groupMembersAccess=org.getUserHandler().findUsersByGroup(invitedGroupId);
      List<User> users=groupMembersAccess.getAll();
      for (      User user : users) {
        String userId=user.getUserName();
        if (!userId.equals(creator)) {
          String[] invitedUsers=space.getInvitedUsers();
          if (userId.equals(getUserACL().getSuperUser())) {
            members=space.getMembers();
            if (!ArrayUtils.contains(members,userId)) {
              members=(String[])ArrayUtils.add(members,userId);
              space.setMembers(members);
            }
          }
 else           if (!ArrayUtils.contains(invitedUsers,userId)) {
            invitedUsers=(String[])ArrayUtils.add(invitedUsers,userId);
            inviteds.add(userId);
            space.setInvitedUsers(invitedUsers);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + invitedGroupId,e);
    }
  }
  String prettyName=groupId.split(""String_Node_Str"")[2];
  if (!prettyName.equals(space.getPrettyName())) {
    space.setPrettyName(groupId.split(""String_Node_Str"")[2]);
  }
  space.setGroupId(groupId);
  space.setUrl(space.getPrettyName());
  try {
    SpaceApplicationHandler spaceApplicationHandler=getSpaceApplicationHandler(space);
    spaceApplicationHandler.initApps(space,getSpaceApplicationConfigPlugin());
    for (    SpaceApplication spaceApplication : getSpaceApplicationConfigPlugin().getSpaceApplicationList()) {
      setApp(space,spaceApplication.getPortletName(),spaceApplication.getAppTitle(),spaceApplication.isRemovable(),Space.ACTIVE_STATUS);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + space.getPrettyName(),e);
  }
  saveSpace(space,true);
  spaceLifeCycle.spaceCreated(space,creator);
  for (  String invited : inviteds) {
    spaceLifeCycle.addInvitedUser(space,invited);
  }
  return space;
}","/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public Space createSpace(Space space,String creator,String invitedGroupId){
  String[] managers=space.getManagers();
  String[] members=space.getMembers();
  managers=(String[])ArrayUtils.add(managers,creator);
  members=(String[])ArrayUtils.add(members,creator);
  space.setManagers(managers);
  space.setMembers(members);
  String groupId=null;
  try {
    groupId=SpaceUtils.createGroup(space.getDisplayName(),space.getPrettyName(),creator);
  }
 catch (  SpaceException e) {
    throw new RuntimeException(""String_Node_Str"" + space.getPrettyName(),e);
  }
  List<String> inviteds=new ArrayList<String>();
  if (invitedGroupId != null) {
    OrganizationService org=getOrgService();
    try {
      ListAccess<User> groupMembersAccess=org.getUserHandler().findUsersByGroupId(invitedGroupId);
      User[] users=groupMembersAccess.load(0,groupMembersAccess.getSize());
      for (      User user : users) {
        String userId=user.getUserName();
        if (!userId.equals(creator)) {
          String[] invitedUsers=space.getInvitedUsers();
          if (userId.equals(getUserACL().getSuperUser())) {
            members=space.getMembers();
            if (!ArrayUtils.contains(members,userId)) {
              members=(String[])ArrayUtils.add(members,userId);
              space.setMembers(members);
            }
          }
 else           if (!ArrayUtils.contains(invitedUsers,userId)) {
            invitedUsers=(String[])ArrayUtils.add(invitedUsers,userId);
            inviteds.add(userId);
            space.setInvitedUsers(invitedUsers);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + invitedGroupId,e);
    }
  }
  String prettyName=groupId.split(""String_Node_Str"")[2];
  if (!prettyName.equals(space.getPrettyName())) {
    space.setPrettyName(groupId.split(""String_Node_Str"")[2]);
  }
  space.setGroupId(groupId);
  space.setUrl(space.getPrettyName());
  try {
    SpaceApplicationHandler spaceApplicationHandler=getSpaceApplicationHandler(space);
    spaceApplicationHandler.initApps(space,getSpaceApplicationConfigPlugin());
    for (    SpaceApplication spaceApplication : getSpaceApplicationConfigPlugin().getSpaceApplicationList()) {
      setApp(space,spaceApplication.getPortletName(),spaceApplication.getAppTitle(),spaceApplication.isRemovable(),Space.ACTIVE_STATUS);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + space.getPrettyName(),e);
  }
  saveSpace(space,true);
  spaceLifeCycle.spaceCreated(space,creator);
  for (  String invited : inviteds) {
    spaceLifeCycle.addInvitedUser(space,invited);
  }
  return space;
}",0.9885566629752676
102396,"/** 
 * {@inheritDoc}
 */
public void deleteSpace(final String id) throws SpaceStorageException {
  storage.deleteSpace(id);
  exoSpaceCache.remove(new SpaceKey(id));
  clearSpaceCache();
  cleanRef(space);
  getCachedActivityStorage().clearCache();
}","/** 
 * {@inheritDoc}
 */
public void deleteSpace(final String id) throws SpaceStorageException {
  Space space=getSpaceById(id);
  storage.deleteSpace(id);
  exoSpaceCache.remove(new SpaceKey(id));
  clearSpaceCache();
  cleanRef(space);
  getCachedActivityStorage().clearCache();
}",0.9400749063670412
102397,"public void execute(Event<UIUserActivitiesDisplay> event) throws Exception {
  UIUserActivitiesDisplay uiUserActivities=event.getSource();
  uiUserActivities.init();
  event.getRequestContext().getJavascriptManager().require(""String_Node_Str"",""String_Node_Str"").addScripts(""String_Node_Str"" + uiUserActivities.getAncestorOfType(UIPortletApplication.class).getId() + ""String_Node_Str"");
  event.getRequestContext().addUIComponentToUpdateByAjax(uiUserActivities);
  Utils.resizeHomePage();
}","public void execute(Event<UIUserActivitiesDisplay> event) throws Exception {
  UIUserActivitiesDisplay uiUserActivities=event.getSource();
  uiUserActivities.init();
  event.getRequestContext().addUIComponentToUpdateByAjax(uiUserActivities);
  Utils.resizeHomePage();
}",0.7097625329815304
102398,"/** 
 * Counts the number of identities
 * @param identityId Id of Identity.
 * @return Number of identities.
 * @throws Exception
 * @since 4.4.0
 */
int countIdentitiesWithRelationships(String id) throws Exception ;","/** 
 * Counts the number of identities
 * @param identityId Id of Identity.
 * @return Number of identities.
 * @throws Exception
 * @since 4.4.0
 */
int countIdentitiesWithRelationships(String identityId) throws Exception ;",0.9819004524886876
102399,"/** 
 * {@inheritDoc}
 */
@Override public int countIdentitiesWithRelationships(String id) throws Exception {
  return storage.countIdentitiesWithRelationships(id);
}","/** 
 * {@inheritDoc}
 */
@Override public int countIdentitiesWithRelationships(String identityId) throws Exception {
  return storage.countIdentitiesWithRelationships(identityId);
}",0.9540229885057472
102400,"/** 
 * @param receiversMap
 * @param templateContext
 * @return
 */
public static String getMessageByIds(Map<String,List<String>> receiversMap,TemplateContext templateContext,String type){
  StringBuilder sb=new StringBuilder();
  for (  Entry<String,List<String>> entry : receiversMap.entrySet()) {
    sb.append(""String_Node_Str"");
    String targetId=entry.getKey();
    List<String> values=entry.getValue();
    int count=values.size();
    String[] keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    if (""String_Node_Str"".equals(type)) {
      keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
    String key=""String_Node_Str"";
    StringBuilder value=new StringBuilder();
    for (int i=0; i < count && i < 3; i++) {
      String name=""String_Node_Str"";
      if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
        Identity identity=Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,values.get(i),true);
        name=identity.getProfile().getFullName();
      }
 else {
        Space space=Utils.getSpaceService().getSpaceById(values.get(i));
        name=space.getDisplayName();
      }
      if (i > 1 && count == 3) {
        key=keys[i - 1];
      }
 else {
        key=keys[i];
      }
      value.append(SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"".equals(type) ? ""String_Node_Str"" : type,values.get(i),name));
      if (count > (i + 1) && i < 2) {
        value.append(""String_Node_Str"");
      }
    }
    templateContext.put(key,value.toString());
    if (count > 3) {
      if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
        templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",targetId));
      }
 else       if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
      }
 else       if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",""String_Node_Str"",String.valueOf((count - 3))));
      }
 else {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
      }
    }
 else {
      if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",targetId));
      }
    }
    String digester=TemplateUtils.processDigest(templateContext.digestType(count));
    sb.append(digester);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * @param receiversMap
 * @param templateContext
 * @param type
 * @return
 */
public static String getMessageByIds(Map<String,List<String>> receiversMap,TemplateContext templateContext,String type){
  StringBuilder sb=new StringBuilder();
  for (  Entry<String,List<String>> entry : receiversMap.entrySet()) {
    sb.append(""String_Node_Str"");
    String targetId=entry.getKey();
    List<String> values=entry.getValue();
    int count=values.size();
    String[] keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    if (""String_Node_Str"".equals(type)) {
      keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    }
    String key=""String_Node_Str"";
    StringBuilder value=new StringBuilder();
    for (int i=0; i < count && i < 3; i++) {
      String name=""String_Node_Str"";
      if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
        Identity identity=Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,values.get(i),true);
        name=identity.getProfile().getFullName();
      }
 else {
        Space space=Utils.getSpaceService().getSpaceById(values.get(i));
        name=space.getDisplayName();
      }
      if (i > 1 && count == 3) {
        key=keys[i - 1];
      }
 else {
        key=keys[i];
      }
      value.append(SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"".equals(type) ? ""String_Node_Str"" : type,values.get(i),name));
      if (count > (i + 1) && i < 2) {
        value.append(""String_Node_Str"");
      }
    }
    templateContext.put(key,value.toString());
    if (count > 3) {
      if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
        templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",targetId));
      }
 else       if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
      }
 else       if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",""String_Node_Str"",String.valueOf((count - 3))));
      }
 else {
        templateContext.put(""String_Node_Str"",SocialNotificationUtils.buildRedirecUrl(""String_Node_Str"",targetId,String.valueOf((count - 3))));
      }
    }
 else {
      if (""String_Node_Str"".equals(type)) {
        templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",targetId));
      }
    }
    String digester=TemplateUtils.processDigest(templateContext.digestType(count));
    sb.append(digester);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9973989942777874
102401,"/** 
 * Get the open link for each type of notification
 * @param activity The activity of the notification
 * @return The link to open the related resource (file, event, wiki page, ...)
 */
public static String getOpenLink(ExoSocialActivity activity){
  String activityType=activity.getType();
  if (activityType != null) {
    try {
      Map<String,String> templateParams=activity.getTemplateParams();
      if (activityType.equals(ActivityPluginType.WIKI.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.equals(ActivityPluginType.FORUM.getName())) {
        if (activity.isComment()) {
          if (!activity.getTitleId().equals(""String_Node_Str"")) {
            if (activity.getTitleId().equals(""String_Node_Str"")) {
              return getOpenLink(Utils.getActivityManager().getParentActivity(activity));
            }
 else {
              return templateParams.get(""String_Node_Str"");
            }
          }
        }
 else {
          return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.CALENDAR.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.contains(ActivityPluginType.ANSWER.getName())) {
        if (activity.isComment()) {
          return CommonsUtils.getCurrentDomain() + Utils.getActivityManager().getParentActivity(activity).getTemplateParams().get(""String_Node_Str"");
        }
 else {
          return templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.POLL.getName())) {
        try {
          return CommonsUtils.getCurrentDomain() + CommonsUtils.getService(ForumService.class).getTopicByPath(templateParams.get(""String_Node_Str""),false).getLink();
        }
 catch (        Exception e) {
          LOG.error(e.getMessage(),e);
        }
      }
 else       if (activityType.equals(ActivityPluginType.FILE.getName()) || activityType.equals(ActivityPluginType.CONTENT.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + activity.getId() + ""String_Node_Str""+ e.getMessage(),e);
      return null;
    }
  }
  return null;
}","/** 
 * Get the open link for each type of notification
 * @param activity The activity of the notification
 * @return The link to open the related resource (file, event, wiki page, ...)
 */
public static String getOpenLink(ExoSocialActivity activity){
  String activityType=activity.getType();
  if (activityType != null) {
    try {
      Map<String,String> templateParams=activity.getTemplateParams();
      if (activityType.equals(ActivityPluginType.WIKI.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.equals(ActivityPluginType.FORUM.getName())) {
        if (activity.isComment()) {
          if (!activity.getTitleId().equals(""String_Node_Str"")) {
            if (activity.getTitleId().equals(""String_Node_Str"")) {
              return getOpenLink(Utils.getActivityManager().getParentActivity(activity));
            }
 else {
              return templateParams.get(""String_Node_Str"");
            }
          }
        }
 else {
          return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.CALENDAR.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.contains(ActivityPluginType.ANSWER.getName())) {
        if (activity.isComment()) {
          return CommonsUtils.getCurrentDomain() + Utils.getActivityManager().getParentActivity(activity).getTemplateParams().get(""String_Node_Str"");
        }
 else {
          return templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.POLL.getName())) {
        try {
          return CommonsUtils.getCurrentDomain() + CommonsUtils.getService(ForumService.class).getTopicByPath(templateParams.get(""String_Node_Str""),false).getLink();
        }
 catch (        Exception e) {
          LOG.error(e.getMessage(),e);
        }
      }
 else       if (activityType.equals(ActivityPluginType.FILE.getName()) || activityType.equals(ActivityPluginType.CONTENT.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activity.isComment()) {
        return getOpenLink(Utils.getActivityManager().getParentActivity(activity));
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + activity.getId() + ""String_Node_Str""+ e.getMessage(),e);
      return null;
    }
  }
  return null;
}",0.9734620024125452
102402,"/** 
 * Get the open link for each type of notification
 * @param activity The activity of the notification
 * @return The link to open the related resource (file, event, wiki page, ...)
 */
public static String getOpenLink(ExoSocialActivity activity){
  String activityType=activity.getType();
  if (activityType != null) {
    try {
      Map<String,String> templateParams=activity.getTemplateParams();
      if (activityType.equals(ActivityPluginType.WIKI.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.equals(ActivityPluginType.FORUM.getName())) {
        if (activity.isComment()) {
          if (!activity.getTitleId().equals(""String_Node_Str"")) {
            return templateParams.get(""String_Node_Str"");
          }
        }
 else {
          return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.CALENDAR.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.contains(ActivityPluginType.ANSWER.getName())) {
        if (activity.isComment()) {
          return CommonsUtils.getCurrentDomain() + Utils.getActivityManager().getParentActivity(activity).getTemplateParams().get(""String_Node_Str"");
        }
 else {
          return templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.POLL.getName())) {
        try {
          return CommonsUtils.getCurrentDomain() + CommonsUtils.getService(ForumService.class).getTopicByPath(templateParams.get(""String_Node_Str""),false).getLink();
        }
 catch (        Exception e) {
          LOG.error(e.getMessage(),e);
        }
      }
 else       if (activityType.equals(ActivityPluginType.FILE.getName()) || activityType.equals(ActivityPluginType.CONTENT.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + activity.getId() + ""String_Node_Str""+ e.getMessage(),e);
      return null;
    }
  }
  return null;
}","/** 
 * Get the open link for each type of notification
 * @param activity The activity of the notification
 * @return The link to open the related resource (file, event, wiki page, ...)
 */
public static String getOpenLink(ExoSocialActivity activity){
  String activityType=activity.getType();
  if (activityType != null) {
    try {
      Map<String,String> templateParams=activity.getTemplateParams();
      if (activityType.equals(ActivityPluginType.WIKI.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.equals(ActivityPluginType.FORUM.getName())) {
        if (activity.isComment()) {
          if (!activity.getTitleId().equals(""String_Node_Str"")) {
            if (activity.getTitleId().equals(""String_Node_Str"")) {
              return getOpenLink(Utils.getActivityManager().getParentActivity(activity));
            }
 else {
              return templateParams.get(""String_Node_Str"");
            }
          }
        }
 else {
          return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.CALENDAR.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
 else       if (activityType.contains(ActivityPluginType.ANSWER.getName())) {
        if (activity.isComment()) {
          return CommonsUtils.getCurrentDomain() + Utils.getActivityManager().getParentActivity(activity).getTemplateParams().get(""String_Node_Str"");
        }
 else {
          return templateParams.get(""String_Node_Str"");
        }
      }
 else       if (activityType.equals(ActivityPluginType.POLL.getName())) {
        try {
          return CommonsUtils.getCurrentDomain() + CommonsUtils.getService(ForumService.class).getTopicByPath(templateParams.get(""String_Node_Str""),false).getLink();
        }
 catch (        Exception e) {
          LOG.error(e.getMessage(),e);
        }
      }
 else       if (activityType.equals(ActivityPluginType.FILE.getName()) || activityType.equals(ActivityPluginType.CONTENT.getName())) {
        return CommonsUtils.getCurrentDomain() + templateParams.get(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + activity.getId() + ""String_Node_Str""+ e.getMessage(),e);
      return null;
    }
  }
  return null;
}",0.9472778136432106
102403,"/** 
 * Gets the number of updated elements based on the of multi-value since time.
 * @param sinceTime the postedTime
 * @return number of newer elements if any
 */
int getNumberOfMultiUpdated(Map<String,Long> sinceTimes);","/** 
 * Gets the number of updated elements based on the of multi-value since time.
 * @param sinceTime the postedTime
 * @return number of newer elements if any
 */
int getNumberOfMultiUpdated(Map<String,Long> sinceTime);",0.997752808988764
102404,"/** 
 * With single quote in resource bundle, MessageFormat will be escape single quote then it needs to replace single quote by double single quotes Sample: I'm connected with {0} => I''m connected with {0}
 * @param message given message replacement
 * @return add double single quotes.
 */
public static String processSingleQuote(String message){
  String temp=message;
  while (true) {
    if (temp.indexOf(""String_Node_Str"") < 0) {
      break;
    }
    temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * With single quote in resource bundle, MessageFormat will be escape single quote then it needs to replace single quote by double single quotes Sample:  {@literal} I'm connected with 0} => I''m connected with {0}}
 * @param message given message replacement
 * @return add double single quotes.
 */
public static String processSingleQuote(String message){
  String temp=message;
  while (true) {
    if (temp.indexOf(""String_Node_Str"") < 0) {
      break;
    }
    temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.988135593220339
102405,"/** 
 * Removes the query parameter.
 * @param param
 * @return
 */
FilterLiteral<P> remove(OrderByOption<P> orderBy);","/** 
 * Removes the query parameter.
 * @param orderBy
 * @return
 */
FilterLiteral<P> remove(OrderByOption<P> orderBy);",0.957983193277311
102406,"/** 
 * plug a filter in FilterLiteral
 * @param filter
 * @return
 */
OrderByOption<P> with(OrderByOption<P> orderBy);","/** 
 * plug a filter in FilterLiteral
 * @param orderBy
 * @return
 */
OrderByOption<P> with(OrderByOption<P> orderBy);",0.9623430962343096
102407,"/** 
 * Append the orderBy option.
 * @param param
 * @return
 */
FilterLiteral<P> append(OrderByOption<P> orderBy);","/** 
 * Append the orderBy option.
 * @param orderBy
 * @return
 */
FilterLiteral<P> append(OrderByOption<P> orderBy);",0.9572649572649572
102408,"/** 
 * Generates ActionBuilder base on the action name and arguments list. Example: invokes reverse(""show.topic"", new HashMap<String, Object>{topicId, ""topicId321""}) method. 
 * @param action
 * @param args
 * @return
 */
public static ActionBuilder reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      ExoMatcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.ParamArg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value != null) {
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",value.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else             if (value != null) {
              try {
                queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                queryString.append(""String_Node_Str"");
                if (value.toString().startsWith(""String_Node_Str"")) {
                  queryString.append(value.toString());
                }
 else {
                  queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                }
                queryString.append(""String_Node_Str"");
              }
 catch (              UnsupportedEncodingException ex) {
                LOG.debug(""String_Node_Str"" + ex);
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionBuilder actionDefinition=new ActionBuilder();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          return actionDefinition;
        }
      }
    }
  }
  return null;
}","/** 
 * Generates ActionBuilder base on the action name and arguments list. Example: invokes   {@code} reverse(""show.topic"", new HashMap<String, Object>topicId, ""topicId321""})} method.
 * @param action
 * @param args
 * @return
 */
public static ActionBuilder reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      ExoMatcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.ParamArg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value != null) {
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",value.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else             if (value != null) {
              try {
                queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                queryString.append(""String_Node_Str"");
                if (value.toString().startsWith(""String_Node_Str"")) {
                  queryString.append(value.toString());
                }
 else {
                  queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                }
                queryString.append(""String_Node_Str"");
              }
 catch (              UnsupportedEncodingException ex) {
                LOG.debug(""String_Node_Str"" + ex);
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionBuilder actionDefinition=new ActionBuilder();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          return actionDefinition;
        }
      }
    }
  }
  return null;
}",0.9979055904623813
102409,"/** 
 * Base on defined Pattern, when provided URI path,  this method will extract all of parameters path value  in given path which reflects in defined Pattern Example:  defined Pattern = ""/{pageID}/topic/{topicID}"" invokes:: matches(""1256/topic/topic544343""); result: Map<String, String> = {""pageID"" -> ""1256""}, {""topicID"" -> ""topic544343""}
 * @param path : given URI path
 * @return
 */
public Map<String,String> matches(String path){
  ExoMatcher matcher=pattern.matcher(path);
  if (matcher.matches()) {
    Map<String,String> localArgs=new HashMap<String,String>();
    for (    ParamArg arg : args) {
      if (arg.defaultValue == null) {
        localArgs.put(arg.name,matcher.group(arg.name));
      }
    }
    return localArgs;
  }
  return null;
}","/** 
 * Base on defined Pattern, when provided URI path,  this method will extract all of parameters path value  in given path which reflects in defined Pattern Example:  defined Pattern = ""/{pageID}/topic/{topicID}"" invokes:: matches(""1256/topic/topic544343""); result:   {@code} Map<String, String> = ""pageID"" -> ""1256""}, {""topicID"" -> ""topic544343""}}
 * @param path : given URI path
 * @return
 */
public Map<String,String> matches(String path){
  ExoMatcher matcher=pattern.matcher(path);
  if (matcher.matches()) {
    Map<String,String> localArgs=new HashMap<String,String>();
    for (    ParamArg arg : args) {
      if (arg.defaultValue == null) {
        localArgs.put(arg.name,matcher.group(arg.name));
      }
    }
    return localArgs;
  }
  return null;
}",0.9921465968586388
102410,"/** 
 * Add new route which loaded from route configuration file.
 * @param path /{pageID}/ForumService
 * @param action /{pageID}/ForumService
 * @param params the action which appends to patch after ""ForumService"" stringex: /{pageID}/{ForumService|}/{action} =>/{pageID}/ForumService/{}
 */
public static void addRoute(String path,String action,String params){
  appendRoute(path,action,params);
}","/** 
 * Add new route which loaded from route configuration file.
 * @param path /{pageID}/ForumService
 * @param action /{pageID}/ForumService
 * @param params the action which appends to patch after ""ForumService"" stringex:  {@literal} /pageID}/{ForumService|}/{action} =>/{pageID}/ForumService/{}}
 */
public static void addRoute(String path,String action,String params){
  appendRoute(path,action,params);
}",0.980246913580247
102411,"/** 
 * This method is invoked once the proccessor is done. <p/> If an exception occurred while processing the exchange, the exception field of the  {@Service} being processed will hold the caused exception.
 * @param processContext 
 */
void done(ProcessContext processContext);","/** 
 * This method is invoked once the proccessor is done. <br> If an exception occurred while processing the exchange, the exception field of the Service being processed will hold the caused exception.
 * @param processContext 
 */
void done(ProcessContext processContext);",0.9855595667870036
102412,"/** 
 * Creates a new thread pool using the default thread pool profile.
 * @param source the source object, usually it should be <tt>this</tt> passed in as parameter
 * @param name   name which is appended to the thread name
 * @return the created thread pool
 */
ExecutorService newDefaultThreadPool(String name);","/** 
 * Creates a new thread pool using the default thread pool profile.
 * @param name   name which is appended to the thread name
 * @return the created thread pool
 */
ExecutorService newDefaultThreadPool(String name);",0.8246268656716418
102413,"/** 
 * Sets the thread name pattern used for creating the full thread name. <p/>
 * @param pattern the pattern
 * @throws IllegalArgumentException if the pattern is invalid.
 */
void setThreadNamePattern(String pattern) throws IllegalArgumentException ;","/** 
 * Sets the thread name pattern used for creating the full thread name. <br>
 * @param pattern the pattern
 * @throws IllegalArgumentException if the pattern is invalid.
 */
void setThreadNamePattern(String pattern) throws IllegalArgumentException ;",0.9921259842519684
102414,"/** 
 * Adds the given lifecycle services to be used.
 * @param lifecycleServices the service
 */
void addLifecycleService(LifecycleService lifecycleService);","/** 
 * Adds the given lifecycle services to be used.
 * @param lifecycleService the service
 */
void addLifecycleService(LifecycleService lifecycleService);",0.9968253968253968
102415,"/** 
 * Sets the maximum number of tasks in the work queue. <p/> Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue
 * @param maxQueueSize the max queue size
 */
public void setMaxQueueSize(Integer maxQueueSize){
  this.maxQueueSize=maxQueueSize;
}","/** 
 * Sets the maximum number of tasks in the work queue. <br> Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue
 * @param maxQueueSize the max queue size
 */
public void setMaxQueueSize(Integer maxQueueSize){
  this.maxQueueSize=maxQueueSize;
}",0.9924812030075189
102416,"/** 
 * Gets the maximum number of tasks in the work queue. <p/> Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue
 * @return the max queue size
 */
public Integer getMaxQueueSize(){
  return maxQueueSize;
}","/** 
 * Gets the maximum number of tasks in the work queue. <br> Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue
 * @return the max queue size
 */
public Integer getMaxQueueSize(){
  return maxQueueSize;
}",0.991150442477876
102417,"/** 
 * Creates a new cached thread pool <p/> The cached thread pool is a term from the JDK from the method   {@link java.util.concurrent.Executors#newCachedThreadPool()}. Typically it will have no size limit (this is why it is handled separately
 * @param threadFactory factory for creating threads
 * @return the created thread pool
 */
ExecutorService newCachedThreadPool(ThreadFactory threadFactory);","/** 
 * Creates a new cached thread pool <br> The cached thread pool is a term from the JDK from the method   {@link java.util.concurrent.Executors#newCachedThreadPool()}. Typically it will have no size limit (this is why it is handled separately
 * @param threadFactory factory for creating threads
 * @return the created thread pool
 */
ExecutorService newCachedThreadPool(ThreadFactory threadFactory);",0.995049504950495
102418,"/** 
 * Calls the async of the processor's process method and waits for it to complete before returning. This can be used by   {@link AsyncProcessor}objects to implement their sync version of the process method.
 * @param processor the processor
 * @param exchange  the exchange
 * @throws Exception can be thrown if waiting is interrupted
 */
public static void process(final AsyncProcessor processor,final ProcessContext processContext) throws Exception {
  processor.start(processContext);
  processor.process(processContext,new AsyncCallback(){
    public void done(    ProcessContext processContext){
    }
    @Override public String toString(){
      return ""String_Node_Str"" + processor;
    }
  }
);
  processor.end(processContext);
}","/** 
 * Calls the async of the processor's process method and waits for it to complete before returning. This can be used by   {@link AsyncProcessor}objects to implement their sync version of the process method.
 * @param processor the processor
 * @param processContext  the context
 * @throws Exception can be thrown if waiting is interrupted
 */
public static void process(final AsyncProcessor processor,final ProcessContext processContext) throws Exception {
  processor.start(processContext);
  processor.process(processContext,new AsyncCallback(){
    public void done(    ProcessContext processContext){
    }
    @Override public String toString(){
      return ""String_Node_Str"" + processor;
    }
  }
);
  processor.end(processContext);
}",0.9671361502347418
102419,"/** 
 * Retrieves the given exception type from the exception. <p/> Is used to get the caused exception that typically have been wrapped in some sort of Camel wrapper exception <p/> The strategy is to look in the exception hierarchy to find the first given cause that matches the type. Will start from the bottom (the real cause) and walk upwards.
 * @param type the exception type wanted to retrieve
 * @param exception the caused exception
 * @return the exception found (or <tt>null</tt> if not found in the exception hierarchy)
 */
public static <T>T getException(Class<T> type,Throwable exception){
  if (exception == null) {
    return null;
  }
  Iterator<Throwable> it=createExceptionIterator(exception);
  while (it.hasNext()) {
    Throwable e=it.next();
    if (type.isInstance(e)) {
      return type.cast(e);
    }
  }
  return null;
}","/** 
 * Retrieves the given exception type from the exception. <br> Is used to get the caused exception that typically have been wrapped in some sort of Camel wrapper exception <br> The strategy is to look in the exception hierarchy to find the first given cause that matches the type. Will start from the bottom (the real cause) and walk upwards.
 * @param type the exception type wanted to retrieve
 * @param exception the caused exception
 * @return the exception found (or <tt>null</tt> if not found in the exception hierarchy)
 */
public static <T>T getException(Class<T> type,Throwable exception){
  if (exception == null) {
    return null;
  }
  Iterator<Throwable> it=createExceptionIterator(exception);
  while (it.hasNext()) {
    Throwable e=it.next();
    if (type.isInstance(e)) {
      return type.cast(e);
    }
  }
  return null;
}",0.9952830188679244
102420,"/** 
 * Creates a new thread name with the given pattern <p/>
 * @param pattern the pattern
 * @param name    the name
 * @return the thread name, which is unique
 */
public static String resolveThreadName(String pattern,String name){
  if (pattern == null) {
    pattern=DEFAULT_PATTERN;
  }
  String longName=name;
  String shortName=name;
  shortName=Matcher.quoteReplacement(shortName);
  longName=Matcher.quoteReplacement(longName);
  String answer=pattern.replaceFirst(""String_Node_Str"",""String_Node_Str"" + nextThreadCounter());
  answer=answer.replaceFirst(""String_Node_Str"",longName);
  answer=answer.replaceFirst(""String_Node_Str"",shortName);
  if (INVALID_PATTERN.matcher(answer).matches()) {
    throw new IllegalArgumentException(""String_Node_Str"" + pattern);
  }
  return answer;
}","/** 
 * Creates a new thread name with the given pattern <br>
 * @param pattern the pattern
 * @param name    the name
 * @return the thread name, which is unique
 */
public static String resolveThreadName(String pattern,String name){
  if (pattern == null) {
    pattern=DEFAULT_PATTERN;
  }
  String longName=name;
  String shortName=name;
  shortName=Matcher.quoteReplacement(shortName);
  longName=Matcher.quoteReplacement(longName);
  String answer=pattern.replaceFirst(""String_Node_Str"",""String_Node_Str"" + nextThreadCounter());
  answer=answer.replaceFirst(""String_Node_Str"",longName);
  answer=answer.replaceFirst(""String_Node_Str"",shortName);
  if (INVALID_PATTERN.matcher(answer).matches()) {
    throw new IllegalArgumentException(""String_Node_Str"" + pattern);
  }
  return answer;
}",0.9974811083123426
102421,"/** 
 * Splits tag of XML String to an arrayList
 * @param html
 * @return List<String> which each item is a token of HTML tag
 */
public static List<String> tokenize(String html){
  ArrayList<String> tokens=new ArrayList<String>();
  int pos=0;
  String token=""String_Node_Str"";
  int len=html.length();
  while (pos < len) {
    char c=html.charAt(pos);
    String ahead=html.substring(pos,pos > len - 4 ? len : pos + 4);
    if (""String_Node_Str"".equals(ahead)) {
      if (token.length() > 0) {
        tokens.add(token);
      }
      token=""String_Node_Str"";
      int end=moveToMarkerEnd(pos,""String_Node_Str"",html);
      tokens.add(html.substring(pos,end));
      pos=end;
    }
 else     if ('<' == c) {
      if (token.length() > 0) {
        tokens.add(token);
      }
      token=""String_Node_Str"";
      int end=moveToMarkerEnd(pos,""String_Node_Str"",html);
      tokens.add(html.substring(pos,end));
      pos=end;
    }
 else {
      token=token + c;
      pos++;
    }
  }
  if (token.length() > 0) {
    tokens.add(token);
  }
  return tokens;
}","/** 
 * Splits tag of XML String to an arrayList
 * @param html
 * @return list of HTML tags
 */
public static List<String> tokenize(String html){
  ArrayList<String> tokens=new ArrayList<String>();
  int pos=0;
  String token=""String_Node_Str"";
  int len=html.length();
  while (pos < len) {
    char c=html.charAt(pos);
    String ahead=html.substring(pos,pos > len - 4 ? len : pos + 4);
    if (""String_Node_Str"".equals(ahead)) {
      if (token.length() > 0) {
        tokens.add(token);
      }
      token=""String_Node_Str"";
      int end=moveToMarkerEnd(pos,""String_Node_Str"",html);
      tokens.add(html.substring(pos,end));
      pos=end;
    }
 else     if ('<' == c) {
      if (token.length() > 0) {
        tokens.add(token);
      }
      token=""String_Node_Str"";
      int end=moveToMarkerEnd(pos,""String_Node_Str"",html);
      tokens.add(html.substring(pos,end));
      pos=end;
    }
 else {
      token=token + c;
      pos++;
    }
  }
  if (token.length() > 0) {
    tokens.add(token);
  }
  return tokens;
}",0.9789473684210528
102422,"/** 
 * Constructor with InitParams from container, if url.length > UrlMaxLength then the url display will be shorten.
 * @param urlMaxLength
 */
public URLConverterFilterPlugin(InitParams params){
  try {
    urlMaxLength=Integer.valueOf(params.getValueParam(""String_Node_Str"").getValue());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + getClass());
  }
}","/** 
 * Constructor with InitParams from container, if   {@literal url.length > UrlMaxLength} then the url display will be shorten.
 * @param params
 */
public URLConverterFilterPlugin(InitParams params){
  try {
    urlMaxLength=Integer.valueOf(params.getValueParam(""String_Node_Str"").getValue());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + getClass());
  }
}",0.9587217043941412
102423,"/** 
 * Sets max length of URL, if url.length > urlMaxLength and urlMaxLength >= 3 then the url display will be shorten.
 * @param urlMaxLength
 */
public void setUrlMaxLength(int urlMaxLength){
  this.urlMaxLength=urlMaxLength;
}","/** 
 * Sets max length of URL, if   {@literal url.length > urlMaxLength and urlMaxLength >= 3} then the url display will be shorten.
 * @param urlMaxLength
 */
public void setUrlMaxLength(int urlMaxLength){
  this.urlMaxLength=urlMaxLength;
}",0.9725158562367864
102424,"/** 
 * Gets max length of URL, if url.length > urlMaxLength and urlMaxLength >= 3 then the url display will be shorten
 * @return
 */
public int getUrlMaxLength(){
  return urlMaxLength;
}","/** 
 * Gets max length of URL, if   {@literal url.length > urlMaxLength and urlMaxLength >= 3} then the url display will be shorten
 * @return
 */
public int getUrlMaxLength(){
  return urlMaxLength;
}",0.9667519181585678
102425,"/** 
 * Gets the KeySet iterator of attributes
 * @return Iterator<String>
 */
public Iterator<String> getKeyIterator(){
  return attributes.keySet().iterator();
}","/** 
 * Gets the KeySet iterator of attributes
 * @return iterator of keys
 */
public Iterator<String> getKeyIterator(){
  return attributes.keySet().iterator();
}",0.9447852760736196
102426,"/** 
 * Constructor with offset and limit
 * @param offset
 * @param limit
 * @param totalSize total size of nodes matched filter.
 */
public ActivityCounter(){
  ids=new String[0];
  gotList=new ArrayList<ExoSocialActivity>();
}","/** 
 * Constructor with offset and limit
 */
public ActivityCounter(){
  ids=new String[0];
  gotList=new ArrayList<ExoSocialActivity>();
}",0.7588075880758808
102427,"/** 
 * Gets the link to the UI endpoint of the stream in portal. <p/> A string specifying the stream's URL
 * @return the permanent link for this activity stream
 */
String getPermaLink();","/** 
 * Gets the link to the UI endpoint of the stream in portal. <br> A string specifying the stream's URL
 * @return the permanent link for this activity stream
 */
String getPermaLink();",0.9894179894179894
102428,"/** 
 * Sets the link to the UI endpoint of the stream in portal. <p/> A string specifying the stream's URL
 * @param permaLink the permanent link for this activity stream
 */
void setPermaLink(String permaLink);","/** 
 * Sets the link to the UI endpoint of the stream in portal. <br> A string specifying the stream's URL
 * @param permaLink the permanent link for this activity stream
 */
void setPermaLink(String permaLink);",0.9905660377358492
102429,"protected String getLoadActivityUrl() throws Exception {
  return event(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + OBJECTID + ""String_Node_Str"");
}","protected String getLoadActivityUrl() throws Exception {
  return event(""String_Node_Str"").replace(""String_Node_Str"",StringUtils.EMPTY).replace(""String_Node_Str"",""String_Node_Str"" + OBJECTID + ""String_Node_Str"");
}",0.9205607476635514
102430,"/** 
 * Initializes ui component child
 * @throws Exception
 */
private void init() throws Exception {
  while (getChild(UIActivityLoader.class) != null) {
    removeChild(UIActivityLoader.class);
  }
  if (activityIdList == null) {
    return;
  }
  ActivityManager activityManager=getApplicationComponent(ActivityManager.class);
  for (  String activityId : activityIdList) {
    UIActivityLoader uiActivityLoader=addChild(UIActivityLoader.class,null,""String_Node_Str"" + activityId);
    if (isRenderFull()) {
      UIActivityFactory factory=CommonsUtils.getService(UIActivityFactory.class);
      factory.addChild(activityManager.getActivity(activityId),uiActivityLoader);
    }
  }
}","/** 
 * Initializes ui component child
 * @throws Exception
 */
private void init() throws Exception {
  while (getChild(UIActivityLoader.class) != null) {
    removeChild(UIActivityLoader.class);
  }
  if (activityIdList == null) {
    return;
  }
  ActivityManager activityManager=getApplicationComponent(ActivityManager.class);
  for (  String activityId : activityIdList) {
    UIActivityLoader uiActivityLoader=addChild(UIActivityLoader.class,null,UIActivityLoader.buildComponentId(activityId));
    if (isRenderFull()) {
      UIActivityFactory factory=CommonsUtils.getService(UIActivityFactory.class);
      factory.addChild(activityManager.getActivity(activityId),uiActivityLoader);
    }
  }
}",0.9460043196544276
102431,"@Override public void execute(Event<UIActivitiesContainer> event) throws Exception {
  UIActivitiesContainer uiActivitiesContainer=event.getSource();
  String uiActivityId=event.getRequestContext().getRequestParameter(OBJECTID);
  if (uiActivityId == null || uiActivityId.isEmpty()) {
    ((PortalRequestContext)event.getRequestContext().getParentAppRequestContext()).ignoreAJAXUpdateOnPortlets(true);
  }
  String activityId=uiActivityId.replace(""String_Node_Str"",""String_Node_Str"");
  ExoSocialActivity activity=CommonsUtils.getService(ActivityManager.class).getActivity(activityId);
  UIActivityLoader uiActivityLoader=uiActivitiesContainer.getChildById(uiActivityId);
  if (activity != null) {
    if (uiActivityLoader == null) {
      uiActivityLoader=uiActivitiesContainer.addChild(UIActivityLoader.class,null,""String_Node_Str"" + activityId);
    }
 else     if (uiActivityLoader.getChildren().size() > 0) {
      uiActivityLoader.removeChild(BaseUIActivity.class);
    }
    UIActivityFactory factory=CommonsUtils.getService(UIActivityFactory.class);
    factory.addChild(activity,uiActivityLoader);
    event.getRequestContext().addUIComponentToUpdateByAjax(uiActivityLoader);
  }
 else {
    if (uiActivityLoader != null) {
      uiActivitiesContainer.removeChildById(uiActivityLoader.getId());
      activity=new ExoSocialActivityImpl();
      activity.setId(activityId);
      uiActivitiesContainer.removeActivity(activity);
    }
    event.getRequestContext().addUIComponentToUpdateByAjax(uiActivitiesContainer.getParent());
  }
}","@Override public void execute(Event<UIActivitiesContainer> event) throws Exception {
  UIActivitiesContainer uiActivitiesContainer=event.getSource();
  String uiActivityId=event.getRequestContext().getRequestParameter(OBJECTID);
  if (uiActivityId == null || uiActivityId.isEmpty()) {
    ((PortalRequestContext)event.getRequestContext().getParentAppRequestContext()).ignoreAJAXUpdateOnPortlets(true);
  }
  String activityId=uiActivityId.replace(UIActivityLoader.COMPONENT_ID,StringUtils.EMPTY);
  ExoSocialActivity activity=CommonsUtils.getService(ActivityManager.class).getActivity(activityId);
  UIActivityLoader uiActivityLoader=uiActivitiesContainer.getChildById(uiActivityId);
  if (uiActivityLoader != null) {
    uiActivitiesContainer.removeChildById(uiActivityId);
  }
  if (activity != null) {
    uiActivityLoader=uiActivitiesContainer.addChild(UIActivityLoader.class,null,UIActivityLoader.buildComponentId(activityId));
    UIActivityFactory factory=CommonsUtils.getService(UIActivityFactory.class);
    factory.addChild(activity,uiActivityLoader);
    event.getRequestContext().addUIComponentToUpdateByAjax(uiActivityLoader);
  }
 else {
    activity=new ExoSocialActivityImpl();
    activity.setId(activityId);
    uiActivitiesContainer.removeActivity(activity);
    event.getRequestContext().addUIComponentToUpdateByAjax(uiActivitiesContainer.getParent());
  }
}",0.7780821917808219
102432,"@Override public void processRender(WebuiRequestContext context) throws Exception {
  super.processRender(context);
  if (getId().equals(""String_Node_Str"")) {
    getAncestorOfType(AbstractActivitiesDisplay.class).setRenderFull(false);
  }
}","@Override public void processRender(WebuiRequestContext context) throws Exception {
  super.processRender(context);
  if (getParent() instanceof AbstractActivitiesDisplay) {
    ((AbstractActivitiesDisplay)getParent()).setRenderFull(false);
  }
}",0.5749486652977412
102433,"@Override public void execute(Event<UIComposer> event) throws Exception {
  UIComposer uiComposer=event.getSource();
  UIActivityComposerManager activityComposerManager=uiComposer.getActivityComposerManager();
  PostContext postContext=uiComposer.getPostContext();
  UIActivityComposer activityComposer=activityComposerManager.getCurrentActivityComposer();
  if (activityComposer.isDisplayed() && !activityComposer.isReadyForPostingActivity()) {
    activityComposerManager.setDefaultActivityComposer();
  }
  activityComposer=activityComposerManager.getCurrentActivityComposer();
  UIFormTextAreaInput textAreaInput=uiComposer.getUIFormTextAreaInput(COMPOSER_TEXT_AREA_INPUT);
  String message=textAreaInput.getValue();
  textAreaInput.setValue(""String_Node_Str"");
  message=(message == null || uiComposer.getLabel(""String_Node_Str"").equals(message) || uiComposer.getLabel(""String_Node_Str"").equals(message)) ? ""String_Node_Str"" : message;
  ExoSocialActivity activity=activityComposer.postActivity(postContext,message);
  Utils.clearUserProfilePopup();
  Utils.initUserProfilePopup(uiComposer.getId());
  Utils.resizeHomePage();
  if (activity != null) {
    WebuiRequestContext context=event.getRequestContext();
    UIPortletApplication uiPortlet=uiComposer.getAncestorOfType(UIPortletApplication.class);
    if (uiPortlet.findFirstComponentOfType(BaseUIActivity.class) == null) {
      context.addUIComponentToUpdateByAjax(uiPortlet);
    }
 else {
      UIActivitiesContainer uiActivitiesContainer=uiPortlet.findFirstComponentOfType(UIActivitiesContainer.class);
      uiActivitiesContainer.addFirstActivityId(activity.getId());
      UIActivityLoader uiActivityLoader=uiActivitiesContainer.addChild(UIActivityLoader.class,null,""String_Node_Str"" + activity.getId());
      context.getJavascriptManager().getRequireJS().require(""String_Node_Str"",""String_Node_Str"").addScripts(""String_Node_Str"" + uiActivityLoader.getId() + ""String_Node_Str"");
      context.addUIComponentToUpdateByAjax(uiComposer);
    }
  }
}","@Override public void execute(Event<UIComposer> event) throws Exception {
  UIComposer uiComposer=event.getSource();
  UIActivityComposerManager activityComposerManager=uiComposer.getActivityComposerManager();
  PostContext postContext=uiComposer.getPostContext();
  UIActivityComposer activityComposer=activityComposerManager.getCurrentActivityComposer();
  if (activityComposer.isDisplayed() && !activityComposer.isReadyForPostingActivity()) {
    activityComposerManager.setDefaultActivityComposer();
  }
  activityComposer=activityComposerManager.getCurrentActivityComposer();
  UIFormTextAreaInput textAreaInput=uiComposer.getUIFormTextAreaInput(COMPOSER_TEXT_AREA_INPUT);
  String message=textAreaInput.getValue();
  textAreaInput.setValue(""String_Node_Str"");
  message=(message == null || uiComposer.getLabel(""String_Node_Str"").equals(message) || uiComposer.getLabel(""String_Node_Str"").equals(message)) ? ""String_Node_Str"" : message;
  ExoSocialActivity activity=activityComposer.postActivity(postContext,message);
  Utils.clearUserProfilePopup();
  Utils.initUserProfilePopup(uiComposer.getId());
  Utils.resizeHomePage();
  if (activity != null) {
    WebuiRequestContext context=event.getRequestContext();
    UIPortletApplication uiPortlet=uiComposer.getAncestorOfType(UIPortletApplication.class);
    if (uiPortlet.findFirstComponentOfType(BaseUIActivity.class) == null) {
      context.addUIComponentToUpdateByAjax(uiPortlet);
    }
 else {
      UIActivitiesContainer uiActivitiesContainer=uiPortlet.findFirstComponentOfType(UIActivitiesContainer.class);
      uiActivitiesContainer.addFirstActivityId(activity.getId());
      UIActivityLoader uiActivityLoader=uiActivitiesContainer.addChild(UIActivityLoader.class,null,UIActivityLoader.buildComponentId(activity.getId()));
      context.getJavascriptManager().getRequireJS().require(""String_Node_Str"",""String_Node_Str"").addScripts(""String_Node_Str"" + uiActivityLoader.getId() + ""String_Node_Str"");
      context.addUIComponentToUpdateByAjax(uiComposer);
    }
  }
}",0.9789864029666254
102434,"/** 
 * {@inheritDoc}
 */
public void saveComment(ExoSocialActivity existingActivity,ExoSocialActivity newComment) throws ActivityStorageException {
  activityStorage.saveComment(existingActivity,newComment);
  activityLifeCycle.saveComment(activityStorage.getActivity(newComment.getId()));
}","/** 
 * {@inheritDoc}
 */
public void saveComment(ExoSocialActivity existingActivity,ExoSocialActivity newComment) throws ActivityStorageException {
  activityStorage.saveComment(existingActivity,newComment);
  activityLifeCycle.saveComment(activityStorage.getComment(newComment.getId()));
}",0.9742710120068612
102435,"@DELETE @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response deleteLike(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String username,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  if (authenticatedUser.equals(username)) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  ExoSocialActivity activity=activityManager.getActivity(id);
  if (activity == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  List<String> likerIds=Arrays.asList(activity.getLikeIdentityIds());
  if (likerIds.contains(currentUser.getId())) {
    likerIds.remove(currentUser.getId());
    String[] identityIds=new String[likerIds.size()];
    activity.setLikeIdentityIds(likerIds.toArray(identityIds));
    activityManager.updateActivity(activity);
  }
  return EntityBuilder.getResponse(EntityBuilder.buildEntityFromActivity(activityManager.getActivity(id),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@DELETE @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response deleteLike(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String username,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  if (!authenticatedUser.equals(username)) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  ExoSocialActivity activity=activityManager.getActivity(id);
  if (activity == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  List<String> likerIds=new ArrayList<String>(Arrays.asList(activity.getLikeIdentityIds()));
  if (likerIds.contains(currentUser.getId())) {
    likerIds.remove(currentUser.getId());
    String[] identityIds=new String[likerIds.size()];
    activity.setLikeIdentityIds(likerIds.toArray(identityIds));
    activityManager.updateActivity(activity);
  }
  return EntityBuilder.getResponse(EntityBuilder.buildEntityFromActivity(activityManager.getActivity(id),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9813902572523262
102436,"/** 
 * Get the activityStream's information related to the activity.
 * @param authentiatedUsed the viewer
 * @param activity
 * @param target the owner of the stream that we want to display
 * @return activityStream object, null if the viewer has no permission to view activity
 */
public static DataEntity getActivityStream(ExoSocialActivity activity,Identity authentiatedUsed){
  DataEntity as=new DataEntity();
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity owner=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getStreamOwner(),true);
  if (owner != null) {
    Relationship relationship=CommonsUtils.getService(RelationshipManager.class).get(authentiatedUsed,owner);
    if (!authentiatedUsed.getId().equals(activity.getPosterId()) && !authentiatedUsed.getRemoteId().equals(activity.getStreamOwner()) && (relationship == null || !relationship.getStatus().equals(Relationship.Type.CONFIRMED))&& !RestUtils.isMemberOfAdminGroup()) {
      return null;
    }
    as.put(RestProperties.TYPE,USER_ACTIVITY_TYPE);
  }
 else {
    SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
    owner=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
    Space space=spaceService.getSpaceByPrettyName(owner.getRemoteId());
    if (!spaceService.isMember(space,authentiatedUsed.getRemoteId())) {
      return null;
    }
    as.put(RestProperties.TYPE,SPACE_ACTIVITY_TYPE);
  }
  as.put(RestProperties.ID,owner.getRemoteId());
  return as;
}","/** 
 * Get the activityStream's information related to the activity.
 * @param authentiatedUsed the viewer
 * @param activity
 * @param target the owner of the stream that we want to display
 * @return activityStream object, null if the viewer has no permission to view activity
 */
public static DataEntity getActivityStream(ExoSocialActivity activity,Identity authentiatedUsed){
  DataEntity as=new DataEntity();
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity owner=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getStreamOwner(),true);
  if (owner != null) {
    Relationship relationship=CommonsUtils.getService(RelationshipManager.class).get(authentiatedUsed,owner);
    if (!authentiatedUsed.getId().equals(activity.getPosterId()) && !authentiatedUsed.getRemoteId().equals(activity.getStreamOwner()) && (relationship == null || !relationship.getStatus().equals(Relationship.Type.CONFIRMED))&& !RestUtils.isMemberOfAdminGroup()) {
      return null;
    }
    as.put(RestProperties.TYPE,USER_ACTIVITY_TYPE);
  }
 else {
    SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
    owner=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
    Space space=spaceService.getSpaceByPrettyName(owner.getRemoteId());
    if (space == null || !spaceService.isMember(space,authentiatedUsed.getRemoteId())) {
      return null;
    }
    as.put(RestProperties.TYPE,SPACE_ACTIVITY_TYPE);
  }
  as.put(RestProperties.ID,owner.getRemoteId());
  return as;
}",0.9946287519747236
102437,"/** 
 * Process to return a space by id
 * @param uriInfo
 * @return
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public abstract Response getSpaceActivitiesById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") long before,@QueryParam(""String_Node_Str"") long after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception ;","/** 
 * Process to return a space by id
 * @param uriInfo
 * @return
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public abstract Response getSpaceActivitiesById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String before,@QueryParam(""String_Node_Str"") String after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception ;",0.9905808477237048
102438,"@GET @Path(""String_Node_Str"") public abstract Response getActivitiesOfUser(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") long before,@QueryParam(""String_Node_Str"") long after,@QueryParam(""String_Node_Str"") boolean returnSize,@QueryParam(""String_Node_Str"") String expand) throws Exception ;","@GET @Path(""String_Node_Str"") public abstract Response getActivitiesOfUser(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") int offset,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String before,@QueryParam(""String_Node_Str"") String after,@QueryParam(""String_Node_Str"") boolean returnSize,@QueryParam(""String_Node_Str"") String expand) throws Exception ;",0.9858490566037736
102439,"@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getActivitiesOfCurrentUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  RealtimeListAccess<ExoSocialActivity> listAccess=activityManager.getActivitiesWithListAccess(currentUser);
  List<ExoSocialActivity> activities=listAccess.loadAsList(offset,limit);
  List<DataEntity> activityEntities=new ArrayList<DataEntity>();
  for (  ExoSocialActivity activity : activities) {
    DataEntity as=EntityBuilder.getActivityStream(activity,currentUser);
    if (as == null)     continue;
    ActivityEntity activityEntity=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
    activityEntity.setActivityStream(as);
    activityEntities.add(activityEntity.getDataEntity());
  }
  CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionActivity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getActivitiesOfCurrentUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  RealtimeListAccess<ExoSocialActivity> listAccess=activityManager.getActivityFeedWithListAccess(currentUser);
  List<ExoSocialActivity> activities=listAccess.loadAsList(offset,limit);
  List<DataEntity> activityEntities=new ArrayList<DataEntity>();
  for (  ExoSocialActivity activity : activities) {
    DataEntity as=EntityBuilder.getActivityStream(activity,currentUser);
    if (as == null)     continue;
    ActivityEntity activityEntity=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
    activityEntity.setActivityStream(as);
    activityEntities.add(activityEntity.getDataEntity());
  }
  CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionActivity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.998109640831758
102440,"/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getRelationshipsOfIdentity(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String with,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getIdentity(id,true);
  if (identity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  RelationshipManager relationshipManager=CommonsUtils.getService(RelationshipManager.class);
  if (with != null && with.length() > 0) {
    Identity withUser=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,with,true);
    if (withUser == null) {
      throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    }
    Relationship relationship=relationshipManager.get(identity,withUser);
    if (relationship == null) {
      throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    }
    return EntityBuilder.getResponse(EntityBuilder.buildEntityRelationship(relationship,uriInfo.getPath(),expand,false),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
  }
  List<Relationship> relationships=relationshipManager.getRelationshipsByStatus(identity,Relationship.Type.ALL,offset,limit);
  List<DataEntity> relationshipEntities=EntityBuilder.buildRelationshipEntities(relationships,uriInfo);
  CollectionEntity collectionRelationship=new CollectionEntity(relationshipEntities,RestProperties.RELATIONSHIPS,offset,limit);
  if (returnSize) {
    collectionRelationship.setSize(relationshipManager.getRelationshipsCountByStatus(identity,Relationship.Type.ALL));
  }
  return EntityBuilder.getResponse(collectionRelationship,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getRelationshipsOfIdentity(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String with,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getIdentity(id,true);
  if (identity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  RelationshipManager relationshipManager=CommonsUtils.getService(RelationshipManager.class);
  if (with != null && with.length() > 0) {
    Identity withUser=identityManager.getIdentity(with,true);
    if (withUser == null) {
      throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    }
    Relationship relationship=relationshipManager.get(identity,withUser);
    if (relationship == null) {
      throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    }
    return EntityBuilder.getResponse(EntityBuilder.buildEntityRelationship(relationship,uriInfo.getPath(),expand,false),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
  }
  List<Relationship> relationships=relationshipManager.getRelationshipsByStatus(identity,Relationship.Type.ALL,offset,limit);
  List<DataEntity> relationshipEntities=EntityBuilder.buildRelationshipEntities(relationships,uriInfo);
  CollectionEntity collectionRelationship=new CollectionEntity(relationshipEntities,RestProperties.RELATIONSHIPS,offset,limit);
  if (returnSize) {
    collectionRelationship.setSize(relationshipManager.getRelationshipsCountByStatus(identity,Relationship.Type.ALL));
  }
  return EntityBuilder.getResponse(collectionRelationship,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9920152091254753
102441,"/** 
 * {@inheritDoc}
 */
@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getIdentities(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String type,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  String providerId=(type != null && type.equals(""String_Node_Str"")) ? SpaceIdentityProvider.NAME : OrganizationIdentityProvider.NAME;
  ListAccess<Identity> listAccess=identityManager.getIdentitiesByProfileFilter(providerId,new ProfileFilter(),true);
  Identity[] identities=listAccess.load(offset,limit);
  List<DataEntity> identityEntities=new ArrayList<DataEntity>();
  for (  Identity identity : identities) {
    identityEntities.add(EntityBuilder.buildEntityIdentity(identity,uriInfo.getPath(),expand).getDataEntity());
  }
  CollectionEntity collectionIdentity=new CollectionEntity(identityEntities,EntityBuilder.IDENTITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionIdentity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionIdentity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","/** 
 * {@inheritDoc}
 */
@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getIdentities(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") String type,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  String providerId=(type != null && type.equals(""String_Node_Str"")) ? SpaceIdentityProvider.NAME : OrganizationIdentityProvider.NAME;
  ListAccess<Identity> listAccess=identityManager.getIdentitiesByProfileFilter(providerId,new ProfileFilter(),true);
  Identity[] identities=listAccess.load(offset,limit);
  List<DataEntity> identityEntities=new ArrayList<DataEntity>();
  for (  Identity identity : identities) {
    identityEntities.add(EntityBuilder.buildEntityIdentity(identity,uriInfo.getPath(),expand).getDataEntity());
  }
  CollectionEntity collectionIdentity=new CollectionEntity(identityEntities,EntityBuilder.IDENTITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionIdentity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionIdentity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9919038913554452
102442,"/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getSpaceActivitiesById(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") long before,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") long after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  Space space=spaceService.getSpaceById(id);
  if (space == null || !spaceService.isMember(space,authenticatedUser)) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Identity spaceIdentity=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName(),false);
  RealtimeListAccess<ExoSocialActivity> listAccess=CommonsUtils.getService(ActivityManager.class).getActivitiesOfSpaceWithListAccess(spaceIdentity);
  List<ExoSocialActivity> activities=null;
  if (after > 0) {
    activities=listAccess.loadNewer(after,limit);
  }
 else   if (before > 0) {
    activities=listAccess.loadOlder(before,limit);
  }
 else {
    activities=listAccess.loadAsList(offset,limit);
  }
  List<DataEntity> activityEntities=new ArrayList<DataEntity>();
  BaseEntity as=new BaseEntity(spaceIdentity.getRemoteId());
  as.setProperty(RestProperties.TYPE,EntityBuilder.SPACE_ACTIVITY_TYPE);
  for (  ExoSocialActivity activity : activities) {
    ActivityEntity activityInfo=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
    activityInfo.setActivityStream(as.getDataEntity());
    activityEntities.add(activityInfo.getDataEntity());
  }
  CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionActivity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getSpaceActivitiesById(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String before,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  Space space=spaceService.getSpaceById(id);
  if (space == null || !spaceService.isMember(space,authenticatedUser)) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Identity spaceIdentity=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName(),false);
  RealtimeListAccess<ExoSocialActivity> listAccess=CommonsUtils.getService(ActivityManager.class).getActivitiesOfSpaceWithListAccess(spaceIdentity);
  List<ExoSocialActivity> activities=null;
  if (after != null && RestUtils.getBaseTime(after) > 0) {
    activities=listAccess.loadNewer(RestUtils.getBaseTime(after),limit);
  }
 else   if (before != null && RestUtils.getBaseTime(before) > 0) {
    activities=listAccess.loadOlder(RestUtils.getBaseTime(before),limit);
  }
 else {
    activities=listAccess.loadAsList(offset,limit);
  }
  List<DataEntity> activityEntities=new ArrayList<DataEntity>();
  BaseEntity as=new BaseEntity(spaceIdentity.getRemoteId());
  as.setProperty(RestProperties.TYPE,EntityBuilder.SPACE_ACTIVITY_TYPE);
  for (  ExoSocialActivity activity : activities) {
    ActivityEntity activityInfo=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
    activityInfo.setActivityStream(as.getDataEntity());
    activityEntities.add(activityInfo.getDataEntity());
  }
  CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
  if (returnSize) {
    collectionActivity.setSize(listAccess.getSize());
  }
  return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9747329150415466
102443,"/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getSpaceMembers(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") String role,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  Space space=spaceService.getSpaceById(id);
  if (space == null || (!spaceService.isMember(space,authenticatedUser) && !RestUtils.isMemberOfAdminGroup())) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String[] users=(role != null && role.equals(""String_Node_Str"")) ? space.getManagers() : space.getMembers();
  int size=users.length;
  users=Arrays.copyOfRange(users,offset > size - 1 ? size - 1 : offset,(offset + limit > size) ? size : (offset + limit));
  List<DataEntity> profileInfos=EntityBuilder.buildEntityProfiles(users,uriInfo.getPath(),expand);
  CollectionEntity collectionUser=new CollectionEntity(profileInfos,EntityBuilder.USERS_TYPE,offset,limit);
  if (returnSize) {
    collectionUser.setSize(size);
  }
  return EntityBuilder.getResponse(collectionUser,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","/** 
 * {@inheritDoc}
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getSpaceMembers(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") String role,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  Space space=spaceService.getSpaceById(id);
  if (space == null || (!spaceService.isMember(space,authenticatedUser) && !RestUtils.isMemberOfAdminGroup())) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String[] users=(role != null && role.equals(""String_Node_Str"")) ? space.getManagers() : space.getMembers();
  int size=users.length;
  if (limit > 0) {
    users=Arrays.copyOfRange(users,offset > size - 1 ? size - 1 : offset,(offset + limit > size) ? size : (offset + limit));
  }
  List<DataEntity> profileInfos=EntityBuilder.buildEntityProfiles(users,uriInfo.getPath(),expand);
  CollectionEntity collectionUser=new CollectionEntity(profileInfos,EntityBuilder.USERS_TYPE,offset,limit);
  if (returnSize) {
    collectionUser.setSize(size);
  }
  return EntityBuilder.getResponse(collectionUser,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9941981898352286
102444,"@POST @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response addSpacesMemberships(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"",required=true) SpaceMembershipEntity model) throws Exception {
  if (model == null || model.getUser() == null || model.getSpace() == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String user=model.getUser();
  String space=model.getSpace();
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  if (space == null || spaceService.getSpaceByDisplayName(space) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Space givenSpace=spaceService.getSpaceByDisplayName(space);
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  if (user == null || identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user,true) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (RestUtils.isMemberOfAdminGroup() || spaceService.isManager(givenSpace,authenticatedUser) || (authenticatedUser.equals(user) && givenSpace.getRegistration().equals(Space.OPEN))) {
    spaceService.addMember(givenSpace,user);
    if (""String_Node_Str"".equals(model.getRole())) {
      spaceService.setManager(givenSpace,user,true);
    }
  }
 else {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  SpaceMembershipEntity membershipEntity=EntityBuilder.buildEntityFromSpaceMembership(givenSpace,user,""String_Node_Str"",uriInfo.getPath(),expand);
  return EntityBuilder.getResponse(membershipEntity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@POST @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response addSpacesMemberships(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",required=true) SpaceMembershipEntity model) throws Exception {
  if (model == null || model.getUser() == null || model.getSpace() == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String user=model.getUser();
  String space=model.getSpace();
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  SpaceService spaceService=CommonsUtils.getService(SpaceService.class);
  if (space == null || spaceService.getSpaceByDisplayName(space) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  Space givenSpace=spaceService.getSpaceByDisplayName(space);
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  if (user == null || identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user,true) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (RestUtils.isMemberOfAdminGroup() || spaceService.isManager(givenSpace,authenticatedUser) || (authenticatedUser.equals(user) && givenSpace.getRegistration().equals(Space.OPEN))) {
    spaceService.addMember(givenSpace,user);
    if (""String_Node_Str"".equals(model.getRole())) {
      spaceService.setManager(givenSpace,user,true);
    }
  }
 else {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  SpaceMembershipEntity membershipEntity=EntityBuilder.buildEntityFromSpaceMembership(givenSpace,user,""String_Node_Str"",uriInfo.getPath(),expand);
  return EntityBuilder.getResponse(membershipEntity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9819109461966604
102445,"@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") public Response getActivitiesOfUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") long before,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") long after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity target=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,id,true);
  if (target == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  String type=RestUtils.getQueryParam(uriInfo,""String_Node_Str"");
  ACTIVITY_STREAM_TYPE streamType;
  try {
    streamType=ACTIVITY_STREAM_TYPE.valueOf(type);
  }
 catch (  Exception e) {
    streamType=ACTIVITY_STREAM_TYPE.all;
  }
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  RealtimeListAccess<ExoSocialActivity> listAccess=null;
  List<ExoSocialActivity> activities=null;
switch (streamType) {
case all:
{
      listAccess=activityManager.getActivityFeedWithListAccess(target);
      break;
    }
case owner:
{
    listAccess=activityManager.getActivitiesWithListAccess(target);
    break;
  }
case connections:
{
  listAccess=activityManager.getActivitiesOfConnectionsWithListAccess(target);
  break;
}
case spaces:
{
listAccess=activityManager.getActivitiesOfUserSpacesWithListAccess(target);
break;
}
default :
break;
}
if (after > 0) {
activities=listAccess.loadNewer(after,limit);
}
 else if (before > 0) {
activities=listAccess.loadOlder(before,limit);
}
 else {
activities=listAccess.loadAsList(offset,limit);
}
Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
List<DataEntity> activityEntities=new ArrayList<DataEntity>();
for (ExoSocialActivity activity : activities) {
DataEntity as=EntityBuilder.getActivityStream(activity,currentUser);
if (as == null) continue;
ActivityEntity activityEntity=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
activityEntity.setActivityStream(as);
activityEntities.add(activityEntity.getDataEntity());
}
CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
if (returnSize) {
collectionActivity.setSize(listAccess.getSize());
}
return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") public Response getActivitiesOfUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String before,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String after,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity target=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,id,true);
  if (target == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  String type=RestUtils.getQueryParam(uriInfo,""String_Node_Str"");
  ACTIVITY_STREAM_TYPE streamType;
  try {
    streamType=ACTIVITY_STREAM_TYPE.valueOf(type);
  }
 catch (  Exception e) {
    streamType=ACTIVITY_STREAM_TYPE.all;
  }
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  RealtimeListAccess<ExoSocialActivity> listAccess=null;
  List<ExoSocialActivity> activities=null;
switch (streamType) {
case all:
{
      listAccess=activityManager.getActivityFeedWithListAccess(target);
      break;
    }
case owner:
{
    listAccess=activityManager.getActivitiesWithListAccess(target);
    break;
  }
case connections:
{
  listAccess=activityManager.getActivitiesOfConnectionsWithListAccess(target);
  break;
}
case spaces:
{
listAccess=activityManager.getActivitiesOfUserSpacesWithListAccess(target);
break;
}
default :
break;
}
if (after != null && RestUtils.getBaseTime(after) > 0) {
activities=listAccess.loadNewer(RestUtils.getBaseTime(after),limit);
}
 else if (before != null && RestUtils.getBaseTime(before) > 0) {
activities=listAccess.loadOlder(RestUtils.getBaseTime(before),limit);
}
 else {
activities=listAccess.loadAsList(offset,limit);
}
Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
List<DataEntity> activityEntities=new ArrayList<DataEntity>();
for (ExoSocialActivity activity : activities) {
DataEntity as=EntityBuilder.getActivityStream(activity,currentUser);
if (as == null) continue;
ActivityEntity activityEntity=EntityBuilder.buildEntityFromActivity(activity,uriInfo.getPath(),expand);
activityEntity.setActivityStream(as);
activityEntities.add(activityEntity.getDataEntity());
}
CollectionEntity collectionActivity=new CollectionEntity(activityEntities,EntityBuilder.ACTIVITIES_TYPE,offset,limit);
if (returnSize) {
collectionActivity.setSize(listAccess.getSize());
}
return EntityBuilder.getResponse(collectionActivity,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9772831224271992
102446,"@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getUsers(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String q,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  ProfileFilter filter=new ProfileFilter();
  filter.setName(q == null || q.isEmpty() ? ""String_Node_Str"" : q);
  ListAccess<Identity> list=CommonsUtils.getService(IdentityManager.class).getIdentitiesByProfileFilter(OrganizationIdentityProvider.NAME,filter,false);
  Identity[] identities=list.load(offset,limit);
  List<DataEntity> profileInfos=new ArrayList<DataEntity>();
  for (  Identity identity : identities) {
    UserEntity profileInfo=EntityBuilder.buildEntityProfile(identity.getProfile(),uriInfo.getPath(),expand);
    profileInfos.add(profileInfo.getDataEntity());
  }
  CollectionEntity collectionUser=new CollectionEntity(profileInfos,EntityBuilder.USERS_TYPE,offset,limit);
  if (returnSize) {
    collectionUser.setSize(list.getSize());
  }
  return EntityBuilder.getResponse(collectionUser,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@GET @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response getUsers(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String q,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int offset,@ApiParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@ApiParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") @QueryParam(""String_Node_Str"") boolean returnSize,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  ProfileFilter filter=new ProfileFilter();
  filter.setName(q == null || q.isEmpty() ? ""String_Node_Str"" : q);
  ListAccess<Identity> list=CommonsUtils.getService(IdentityManager.class).getIdentitiesByProfileFilter(OrganizationIdentityProvider.NAME,filter,false);
  Identity[] identities=list.load(offset,limit);
  List<DataEntity> profileInfos=new ArrayList<DataEntity>();
  for (  Identity identity : identities) {
    UserEntity profileInfo=EntityBuilder.buildEntityProfile(identity.getProfile(),uriInfo.getPath(),expand);
    profileInfos.add(profileInfo.getDataEntity());
  }
  CollectionEntity collectionUser=new CollectionEntity(profileInfos,EntityBuilder.USERS_TYPE,offset,limit);
  if (returnSize) {
    collectionUser.setSize(list.getSize());
  }
  return EntityBuilder.getResponse(collectionUser,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9981137159795204
102447,"@POST @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response addUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"",required=true) UserEntity model) throws Exception {
  if (model.isNotValid()) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  Identity identity=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,model.getUsername(),true);
  if (identity != null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  UserHandler userHandler=CommonsUtils.getService(OrganizationService.class).getUserHandler();
  User user=userHandler.createUserInstance(model.getUsername());
  user.setFirstName(model.getFirstname());
  user.setLastName(model.getLastname());
  user.setEmail(model.getEmail());
  user.setPassword(model.getPassword() == null || model.getPassword().isEmpty() ? ""String_Node_Str"" : model.getPassword());
  userHandler.createUser(user,true);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityProfile(model.getUsername(),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@POST @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response addUser(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",required=true) UserEntity model) throws Exception {
  if (model.isNotValid()) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  Identity identity=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,model.getUsername(),true);
  if (identity != null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  UserHandler userHandler=CommonsUtils.getService(OrganizationService.class).getUserHandler();
  User user=userHandler.createUserInstance(model.getUsername());
  user.setFirstName(model.getFirstname());
  user.setLastName(model.getLastname());
  user.setEmail(model.getEmail());
  user.setPassword(model.getPassword() == null || model.getPassword().isEmpty() ? ""String_Node_Str"" : model.getPassword());
  userHandler.createUser(user,true);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityProfile(model.getUsername(),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9708796157310116
102448,"/** 
 * {@inheritDoc}
 */
@POST @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response createIdentities(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String remoteId,@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String providerId,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if ((!providerId.equals(SpaceIdentityProvider.NAME) && !providerId.equals(OrganizationIdentityProvider.NAME))) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getOrCreateIdentity(providerId,remoteId,true);
  if (identity.isDeleted()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  IdentityEntity identityInfo=EntityBuilder.buildEntityIdentity(identity,uriInfo.getPath(),expand);
  return EntityBuilder.getResponse(identityInfo,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","/** 
 * {@inheritDoc}
 */
@POST @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response createIdentities(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String remoteId,@ApiParam(value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String providerId,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if ((!providerId.equals(SpaceIdentityProvider.NAME) && !providerId.equals(OrganizationIdentityProvider.NAME))) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getOrCreateIdentity(providerId,remoteId,true);
  if (identity == null) {
    identity=new Identity(providerId,remoteId);
    identityManager.saveIdentity(identity);
  }
 else   if (identity.isDeleted()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  IdentityEntity identityInfo=EntityBuilder.buildEntityIdentity(identity,uriInfo.getPath(),expand);
  return EntityBuilder.getResponse(identityInfo,uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9588953114964676
102449,"@DELETE @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") public Response deleteUserById(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,id,true);
  if (identity == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  identityManager.hardDeleteIdentity(identity);
  identity.setDeleted(true);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityProfile(identity.getProfile(),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@DELETE @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") public Response deleteUserById(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand) throws Exception {
  if (!RestUtils.isMemberOfAdminGroup()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  IdentityManager identityManager=CommonsUtils.getService(IdentityManager.class);
  Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,id,true);
  if (identity == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  identityManager.hardDeleteIdentity(identity);
  identity.setDeleted(true);
  UserHandler userHandler=CommonsUtils.getService(OrganizationService.class).getUserHandler();
  userHandler.removeUser(id,false);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityProfile(identity.getProfile(),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9431670281995662
102450,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response postComment(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"",required=true) CommentEntity model) throws Exception {
  if (model == null || model.getBody() == null || model.getBody().length() == 0) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  ExoSocialActivity activity=activityManager.getActivity(id);
  if (activity == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (EntityBuilder.getActivityStream(activity,currentUser) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  ExoSocialActivity comment=new ExoSocialActivityImpl();
  comment.setTitle(model.getBody());
  comment.setBody(model.getBody());
  comment.setUserId(currentUser.getId());
  activityManager.saveComment(activity,comment);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityFromActivity(activityManager.getActivity(comment.getId()),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(""String_Node_Str"") @ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"",response=Response.class,notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str""),@ApiResponse(code=500,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str"")}) public Response postComment(@Context UriInfo uriInfo,@ApiParam(value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String id,@ApiParam(value=""String_Node_Str"",required=false) @QueryParam(""String_Node_Str"") String expand,@ApiParam(value=""String_Node_Str"",required=true) CommentEntity model) throws Exception {
  if (model == null || model.getTitle() == null || model.getTitle().length() == 0) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  String authenticatedUser=ConversationState.getCurrent().getIdentity().getUserId();
  Identity currentUser=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(OrganizationIdentityProvider.NAME,authenticatedUser,true);
  ActivityManager activityManager=CommonsUtils.getService(ActivityManager.class);
  ExoSocialActivity activity=activityManager.getActivity(id);
  if (activity == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  if (EntityBuilder.getActivityStream(activity,currentUser) == null) {
    throw new WebApplicationException(Response.Status.UNAUTHORIZED);
  }
  ExoSocialActivity comment=new ExoSocialActivityImpl();
  comment.setTitle(model.getTitle());
  comment.setUserId(currentUser.getId());
  activityManager.saveComment(activity,comment);
  return EntityBuilder.getResponse(EntityBuilder.buildEntityFromActivity(activityManager.getActivity(comment.getId()),uriInfo.getPath(),expand),uriInfo,RestUtils.getJsonMediaType(),Response.Status.OK);
}",0.9834079536476166
102451,"public UIEditUserProfileForm() throws Exception {
  if (getId() == null) {
    setId(""String_Node_Str"");
  }
  UIInputSection aboutSection=new UIInputSection(FIELD_ABOUT_SECTION,Profile.ABOUT_ME);
  aboutSection.useGroupControl(false).addUIFormInput(new UIFormTextAreaInput(Profile.ABOUT_ME,Profile.ABOUT_ME,null).addValidator(StringLengthValidator.class,1500));
  UIInputSection baseSection=new UIInputSection(FIELD_BASE_SECTION,""String_Node_Str"");
  baseSection.addUIFormInput(createUIFormStringInput(Profile.FIRST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.LAST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.EMAIL,true).addValidator(EmailAddressValidator.class).addValidator(StringLengthValidator.class,100));
  UIChangeAvatarContainer avatarContainer=createUIComponent(UIChangeAvatarContainer.class,null,""String_Node_Str"");
  baseSection.addUIFormInput(avatarContainer);
  baseSection.addUIFormInput(createUIFormStringInput(Profile.POSITION,false).addValidator(StringLengthValidator.class,100));
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(""String_Node_Str"",""String_Node_Str""));
  options.add(new SelectItemOption<String>(getLabel(OPTION_MALE),OPTION_MALE));
  options.add(new SelectItemOption<String>(getLabel(OPTION_FEMALE),OPTION_FEMALE));
  UIFormSelectBox genderSelectBox=new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options);
  genderSelectBox.setLabel(Profile.GENDER);
  baseSection.addUIFormInput(genderSelectBox);
  UIMultiValueSelection phoneSelection=new UIMultiValueSelection(Profile.CONTACT_PHONES,getId(),Arrays.asList(PHONE_TYPES));
  baseSection.addUIFormInput(phoneSelection.addValidator(ExpressionValidator.class,PHONE_REGEX_EXPRESSION,""String_Node_Str""));
  UIMultiValueSelection imsSelection=new UIMultiValueSelection(Profile.CONTACT_IMS,getId(),Arrays.asList(IM_TYPES));
  baseSection.addUIFormInput(imsSelection.addValidator(StringLengthValidator.class,100));
  UIFormMultiValueInputSet urlMultiValueInput=new UIFormMultiValueInputSet(Profile.CONTACT_URLS,Profile.CONTACT_URLS);
  urlMultiValueInput.addValidator(ExpressionValidator.class,URL_REGEX_EXPRESSION,""String_Node_Str"");
  urlMultiValueInput.addValidator(StringLengthValidator.class,100);
  urlMultiValueInput.setType(UIFormStringInput.class);
  urlMultiValueInput.setValue(Arrays.asList(""String_Node_Str""));
  urlMultiValueInput.setLabel(Profile.CONTACT_URLS);
  baseSection.addUIFormInput(urlMultiValueInput);
  addUIFormInput(aboutSection);
  addUIFormInput(baseSection);
}","public UIEditUserProfileForm() throws Exception {
  if (getId() == null) {
    setId(""String_Node_Str"");
  }
  UIInputSection aboutSection=new UIInputSection(FIELD_ABOUT_SECTION,Profile.ABOUT_ME);
  aboutSection.useGroupControl(false).addUIFormInput(new UIFormTextAreaInput(Profile.ABOUT_ME,Profile.ABOUT_ME,null).addValidator(StringLengthValidator.class,1500));
  UIInputSection baseSection=new UIInputSection(FIELD_BASE_SECTION,""String_Node_Str"");
  baseSection.addUIFormInput(createUIFormStringInput(Profile.FIRST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.LAST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.EMAIL,true).addValidator(EmailAddressValidator.class).addValidator(StringLengthValidator.class,100));
  UIChangeAvatarContainer avatarContainer=createUIComponent(UIChangeAvatarContainer.class,null,""String_Node_Str"");
  baseSection.addUIFormInput(avatarContainer);
  baseSection.addUIFormInput(createUIFormStringInput(Profile.POSITION,false).addValidator(StringLengthValidator.class,100));
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(""String_Node_Str"",""String_Node_Str""));
  options.add(new SelectItemOption<String>(getLabel(OPTION_MALE),Profile.MALE));
  options.add(new SelectItemOption<String>(getLabel(OPTION_FEMALE),Profile.FEMALE));
  UIFormSelectBox genderSelectBox=new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options);
  genderSelectBox.setLabel(Profile.GENDER);
  baseSection.addUIFormInput(genderSelectBox);
  UIMultiValueSelection phoneSelection=new UIMultiValueSelection(Profile.CONTACT_PHONES,getId(),Arrays.asList(PHONE_TYPES));
  baseSection.addUIFormInput(phoneSelection.addValidator(ExpressionValidator.class,PHONE_REGEX_EXPRESSION,""String_Node_Str""));
  UIMultiValueSelection imsSelection=new UIMultiValueSelection(Profile.CONTACT_IMS,getId(),Arrays.asList(IM_TYPES));
  baseSection.addUIFormInput(imsSelection.addValidator(StringLengthValidator.class,100));
  UIFormMultiValueInputSet urlMultiValueInput=new UIFormMultiValueInputSet(Profile.CONTACT_URLS,Profile.CONTACT_URLS);
  urlMultiValueInput.addValidator(ExpressionValidator.class,URL_REGEX_EXPRESSION,""String_Node_Str"");
  urlMultiValueInput.addValidator(StringLengthValidator.class,100);
  urlMultiValueInput.setType(UIFormStringInput.class);
  urlMultiValueInput.setValue(Arrays.asList(""String_Node_Str""));
  urlMultiValueInput.setLabel(Profile.CONTACT_URLS);
  baseSection.addUIFormInput(urlMultiValueInput);
  addUIFormInput(aboutSection);
  addUIFormInput(baseSection);
}",0.9946101329500538
102452,"protected void setValueBasicInfo() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setValue(getStringValueProfile(Profile.ABOUT_ME));
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  baseSection.getUIStringInput(Profile.FIRST_NAME).setValue(getStringValueProfile(Profile.FIRST_NAME));
  baseSection.getUIStringInput(Profile.LAST_NAME).setValue(getStringValueProfile(Profile.LAST_NAME));
  baseSection.getUIStringInput(Profile.EMAIL).setValue(getStringValueProfile(Profile.EMAIL));
  baseSection.getUIStringInput(Profile.POSITION).setValue(getStringValueProfile(Profile.POSITION));
  baseSection.getUIFormSelectBox(Profile.GENDER).setValue(getStringValueProfile(Profile.GENDER));
  List<Map<String,String>> phones=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_PHONES);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_PHONES).setValues(phones);
  List<Map<String,String>> ims=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_IMS);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_IMS).setValues(ims);
  baseSection.getUIFormMultiValueInputSet(Profile.CONTACT_URLS).setValue(UserProfileHelper.getURLValues(currentProfile));
  List<Map<String,String>> experiences=UserProfileHelper.getDisplayExperience(currentProfile);
  if (!experiences.isEmpty()) {
    int i=0;
    String experienId;
    removeChildById(FIELD_EMPTY_EXPERIENCE_SECTION);
    int experienCurrentSize=experiens.size();
    for (    Map<String,String> experience : experiences) {
      if (i < experienCurrentSize) {
        experienId=experiens.get(i);
        ++i;
      }
 else {
        experienId=FIELD_EXPERIENCE_SECTION + index;
      }
      setValueExperienceSection(experienId,experience);
    }
    resetActionFileds();
  }
 else   if (experiens.isEmpty()) {
    addEmpryExperienceSection();
  }
}","protected void setValueBasicInfo() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setValue(getStringValueProfile(Profile.ABOUT_ME));
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  baseSection.getUIStringInput(Profile.FIRST_NAME).setValue(getStringValueProfile(Profile.FIRST_NAME));
  baseSection.getUIStringInput(Profile.LAST_NAME).setValue(getStringValueProfile(Profile.LAST_NAME));
  baseSection.getUIStringInput(Profile.EMAIL).setValue(getStringValueProfile(Profile.EMAIL));
  baseSection.getUIStringInput(Profile.POSITION).setValue(getStringValueProfile(Profile.POSITION));
  baseSection.getUIFormSelectBox(Profile.GENDER).setValue(getStringValueProfile(Profile.GENDER));
  baseSection.getUIFormSelectBox(Profile.GENDER).setSelectedValues(new String[]{getStringValueProfile(Profile.GENDER)});
  List<Map<String,String>> phones=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_PHONES);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_PHONES).setValues(phones);
  List<Map<String,String>> ims=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_IMS);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_IMS).setValues(ims);
  baseSection.getUIFormMultiValueInputSet(Profile.CONTACT_URLS).setValue(UserProfileHelper.getURLValues(currentProfile));
  List<Map<String,String>> experiences=UserProfileHelper.getDisplayExperience(currentProfile);
  if (!experiences.isEmpty()) {
    int i=0;
    String experienId;
    removeChildById(FIELD_EMPTY_EXPERIENCE_SECTION);
    int experienCurrentSize=experiens.size();
    for (    Map<String,String> experience : experiences) {
      if (i < experienCurrentSize) {
        experienId=experiens.get(i);
        ++i;
      }
 else {
        experienId=FIELD_EXPERIENCE_SECTION + index;
      }
      setValueExperienceSection(experienId,experience);
    }
    resetActionFileds();
  }
 else   if (experiens.isEmpty()) {
    addEmpryExperienceSection();
  }
}",0.9689982065078144
102453,"protected void initProfilePopup() throws Exception {
  JSONObject object=new JSONObject();
  WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
  object.put(""String_Node_Str"",UserProfileHelper.getLabel(context,""String_Node_Str""));
  String[] keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    object.put(keys[i],UserProfileHelper.getLabel(context,""String_Node_Str"" + keys[i]));
  }
  context.getJavascriptManager().getRequireJS().require(""String_Node_Str"",""String_Node_Str"").addScripts(""String_Node_Str"" + getId() + ""String_Node_Str""+ object.toString()+ ""String_Node_Str"");
}","protected void initProfilePopup() throws Exception {
  JSONObject object=new JSONObject();
  WebuiRequestContext context=WebuiRequestContext.getCurrentInstance();
  object.put(""String_Node_Str"",UserProfileHelper.getLabel(context,""String_Node_Str""));
  String[] keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    object.put(keys[i],UserProfileHelper.getLabel(context,""String_Node_Str"" + keys[i]));
  }
  context.getJavascriptManager().getRequireJS().require(""String_Node_Str"",""String_Node_Str"" + getId()).addScripts(""String_Node_Str"" + getId() + ""String_Node_Str""+ getId()+ ""String_Node_Str""+ object.toString()+ ""String_Node_Str"");
}",0.973463687150838
102454,"@Override public void processRender(WebuiRequestContext context) throws Exception {
  Identity viewerIdentity=Utils.getViewerIdentity();
  Identity ownerIdentity=Utils.getOwnerIdentity();
  Writer writer=context.getWriter();
  writer.append(""String_Node_Str"").append(getId()).append(""String_Node_Str"");
  writer.append(""String_Node_Str"").append(ownerIdentity.getRemoteId()).append(""String_Node_Str"");
  if (isRenderedActions && !ownerIdentity.equals(viewerIdentity)) {
    Relationship relationship=Utils.getRelationshipManager().get(viewerIdentity,ownerIdentity);
    Type status=(relationship != null) ? relationship.getStatus() : null;
    if (status == null) {
      writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
    }
 else     if (status == Type.PENDING) {
      if (relationship.getSender().equals(viewerIdentity)) {
        writer.append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      }
 else {
        writer.append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      }
    }
 else     if (status == Type.CONFIRMED) {
      writer.append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
    }
    writer.append(""String_Node_Str"");
    writer.append(""String_Node_Str"");
  }
 else {
    super.processRender(context);
  }
}","@Override public void processRender(WebuiRequestContext context) throws Exception {
  Identity viewerIdentity=Utils.getViewerIdentity();
  Identity ownerIdentity=Utils.getOwnerIdentity();
  Writer writer=context.getWriter();
  writer.append(""String_Node_Str"").append(getId()).append(""String_Node_Str"");
  writer.append(""String_Node_Str"").append(ownerIdentity.getRemoteId()).append(""String_Node_Str"");
  if (isRenderedActions && !ownerIdentity.equals(viewerIdentity)) {
    Relationship relationship=Utils.getRelationshipManager().get(viewerIdentity,ownerIdentity);
    Type status=(relationship != null) ? relationship.getStatus() : null;
    if (status == null) {
      writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
    }
 else     if (status == Type.PENDING) {
      if (relationship.getSender().equals(viewerIdentity)) {
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      }
 else {
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
        writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      }
    }
 else     if (status == Type.CONFIRMED) {
      writer.append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
      writer.append(""String_Node_Str"").append(event(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(UserProfileHelper.getLabel(context,""String_Node_Str"")).append(""String_Node_Str"");
    }
    writer.append(""String_Node_Str"");
    writer.append(""String_Node_Str"");
  }
 else {
    super.processRender(context);
  }
}",0.9138592750533048
102455,"private List<ActionData> createExperienceActions(String experienId,boolean hasAdd){
  List<ActionData> actions=new ArrayList<UIInputSection.ActionData>();
  if (experiens.size() > 1) {
    ActionData removeAction=new ActionData();
    removeAction.setAction(""String_Node_Str"").setIcon(""String_Node_Str"").setTooltip(""String_Node_Str"").setObjectId(experienId);
    actions.add(removeAction);
  }
  if (hasAdd) {
    ActionData addAction=new ActionData();
    addAction.setAction(""String_Node_Str"").setIcon(""String_Node_Str"").setTooltip(""String_Node_Str"").setObjectId(experienId);
    actions.add(addAction);
  }
  return actions;
}","private List<ActionData> createExperienceActions(String experienId,boolean hasAdd){
  List<ActionData> actions=new ArrayList<UIInputSection.ActionData>();
  ActionData removeAction=new ActionData();
  removeAction.setAction(""String_Node_Str"").setIcon(""String_Node_Str"").setTooltip(UserProfileHelper.getLabel(null,""String_Node_Str"")).setObjectId(experienId);
  actions.add(removeAction);
  if (hasAdd) {
    ActionData addAction=new ActionData();
    addAction.setAction(""String_Node_Str"").setIcon(""String_Node_Str"").setTooltip(UserProfileHelper.getLabel(null,""String_Node_Str"")).setObjectId(experienId);
    actions.add(addAction);
  }
  return actions;
}",0.7274143302180686
102456,"public UIEditUserProfileForm() throws Exception {
  if (getId() == null) {
    setId(""String_Node_Str"");
  }
  UIInputSection aboutSection=new UIInputSection(FIELD_ABOUT_SECTION,""String_Node_Str"");
  aboutSection.useGroupControl(false).addUIFormInput(new UIFormTextAreaInput(Profile.ABOUT_ME,Profile.ABOUT_ME,null));
  UIInputSection baseSection=new UIInputSection(FIELD_BASE_SECTION,""String_Node_Str"");
  baseSection.addUIFormInput(createUIFormStringInput(Profile.FIRST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,1,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.LAST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,1,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.EMAIL,true).addValidator(EmailAddressValidator.class));
  UIChangeAvatarContainer avatarContainer=createUIComponent(UIChangeAvatarContainer.class,null,""String_Node_Str"");
  baseSection.addUIFormInput(avatarContainer);
  baseSection.addUIFormInput(createUIFormStringInput(Profile.POSITION,false));
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(getLabel(OPTION_MALE),OPTION_MALE));
  options.add(new SelectItemOption<String>(getLabel(OPTION_FEMALE),OPTION_FEMALE));
  UIFormSelectBox genderSelectBox=new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options);
  genderSelectBox.setLabel(Profile.GENDER);
  baseSection.addUIFormInput(genderSelectBox);
  UIMultiValueSelection phoneSelection=new UIMultiValueSelection(Profile.CONTACT_PHONES,getId(),Arrays.asList(PHONE_TYPES));
  baseSection.addUIFormInput(phoneSelection);
  UIMultiValueSelection imsSelection=new UIMultiValueSelection(Profile.CONTACT_IMS,getId(),Arrays.asList(IM_TYPES));
  baseSection.addUIFormInput(imsSelection);
  UIFormMultiValueInputSet urlMultiValueInput=new UIFormMultiValueInputSet(Profile.CONTACT_URLS,Profile.CONTACT_URLS);
  urlMultiValueInput.setType(UIFormStringInput.class);
  urlMultiValueInput.setValue(Arrays.asList(""String_Node_Str""));
  urlMultiValueInput.setLabel(Profile.CONTACT_URLS);
  baseSection.addUIFormInput(urlMultiValueInput);
  addUIFormInput(aboutSection);
  addUIFormInput(baseSection);
}","public UIEditUserProfileForm() throws Exception {
  if (getId() == null) {
    setId(""String_Node_Str"");
  }
  UIInputSection aboutSection=new UIInputSection(FIELD_ABOUT_SECTION,""String_Node_Str"");
  aboutSection.useGroupControl(false).addUIFormInput(new UIFormTextAreaInput(Profile.ABOUT_ME,Profile.ABOUT_ME,null));
  UIInputSection baseSection=new UIInputSection(FIELD_BASE_SECTION,""String_Node_Str"");
  baseSection.addUIFormInput(createUIFormStringInput(Profile.FIRST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,1,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.LAST_NAME,true).addValidator(PersonalNameValidator.class).addValidator(StringLengthValidator.class,1,45));
  baseSection.addUIFormInput(createUIFormStringInput(Profile.EMAIL,true).addValidator(EmailAddressValidator.class));
  UIChangeAvatarContainer avatarContainer=createUIComponent(UIChangeAvatarContainer.class,null,""String_Node_Str"");
  baseSection.addUIFormInput(avatarContainer);
  baseSection.addUIFormInput(createUIFormStringInput(Profile.POSITION,false));
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(getLabel(OPTION_MALE),OPTION_MALE));
  options.add(new SelectItemOption<String>(getLabel(OPTION_FEMALE),OPTION_FEMALE));
  UIFormSelectBox genderSelectBox=new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options);
  genderSelectBox.setLabel(Profile.GENDER);
  baseSection.addUIFormInput(genderSelectBox);
  UIMultiValueSelection phoneSelection=new UIMultiValueSelection(Profile.CONTACT_PHONES,getId(),Arrays.asList(PHONE_TYPES));
  baseSection.addUIFormInput(phoneSelection.addValidator(StringLengthValidator.class,1,20));
  UIMultiValueSelection imsSelection=new UIMultiValueSelection(Profile.CONTACT_IMS,getId(),Arrays.asList(IM_TYPES));
  baseSection.addUIFormInput(imsSelection.addValidator(StringLengthValidator.class,1,60));
  UIFormMultiValueInputSet urlMultiValueInput=new UIFormMultiValueInputSet(Profile.CONTACT_URLS,Profile.CONTACT_URLS);
  urlMultiValueInput.setType(UIFormStringInput.class);
  urlMultiValueInput.setValue(Arrays.asList(""String_Node_Str""));
  urlMultiValueInput.setLabel(Profile.CONTACT_URLS);
  baseSection.addUIFormInput(urlMultiValueInput.addValidator(URLValidator.class));
  addUIFormInput(aboutSection);
  addUIFormInput(baseSection);
}",0.9727876580244268
102457,"protected void setValueBasicInfo() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setValue(getStringValueProfile(Profile.ABOUT_ME));
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  baseSection.getUIStringInput(Profile.FIRST_NAME).setValue(getStringValueProfile(Profile.FIRST_NAME));
  baseSection.getUIStringInput(Profile.LAST_NAME).setValue(getStringValueProfile(Profile.LAST_NAME));
  baseSection.getUIStringInput(Profile.EMAIL).setValue(getStringValueProfile(Profile.EMAIL));
  baseSection.getUIStringInput(Profile.POSITION).setValue(getStringValueProfile(Profile.POSITION));
  baseSection.getUIFormSelectBox(Profile.GENDER).setValue(getStringValueProfile(Profile.GENDER));
  List<Map<String,String>> phones=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_PHONES);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_PHONES).setValues(phones);
  List<Map<String,String>> ims=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_IMS);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_IMS).setValues(ims);
  baseSection.getUIFormMultiValueInputSet(Profile.CONTACT_URLS).setValue(UserProfileHelper.getURLValues(currentProfile));
  List<Map<String,String>> experiences=UserProfileHelper.getDisplayExperience(currentProfile);
  if (experiences.size() > 0) {
    int i=0;
    String experienId;
    for (    Map<String,String> experience : experiences) {
      if (i < experiens.size()) {
        experienId=experiens.get(i);
      }
 else {
        experienId=FIELD_EXPERIENCE_SECTION + index;
      }
      setValueExperienceSection(experienId,experience);
    }
    resetActionFileds();
  }
 else   if (experiens.size() == 0) {
    String experienId=FIELD_EXPERIENCE_SECTION + index;
    getOrCreateExperienceSection(experienId).setActionField(Profile.EXPERIENCES_COMPANY + experienId,createExperienceActions(experienId,true));
  }
}","protected void setValueBasicInfo() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setValue(getStringValueProfile(Profile.ABOUT_ME));
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  baseSection.getUIStringInput(Profile.FIRST_NAME).setValue(getStringValueProfile(Profile.FIRST_NAME));
  baseSection.getUIStringInput(Profile.LAST_NAME).setValue(getStringValueProfile(Profile.LAST_NAME));
  baseSection.getUIStringInput(Profile.EMAIL).setValue(getStringValueProfile(Profile.EMAIL));
  baseSection.getUIStringInput(Profile.POSITION).setValue(getStringValueProfile(Profile.POSITION));
  baseSection.getUIFormSelectBox(Profile.GENDER).setValue(getStringValueProfile(Profile.GENDER));
  List<Map<String,String>> phones=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_PHONES);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_PHONES).setValues(phones);
  List<Map<String,String>> ims=UserProfileHelper.getMultiValues(currentProfile,Profile.CONTACT_IMS);
  baseSection.getUIMultiValueSelection(Profile.CONTACT_IMS).setValues(ims);
  baseSection.getUIFormMultiValueInputSet(Profile.CONTACT_URLS).setValue(UserProfileHelper.getURLValues(currentProfile));
  List<Map<String,String>> experiences=UserProfileHelper.getDisplayExperience(currentProfile);
  if (!experiences.isEmpty()) {
    int i=0;
    String experienId;
    removeChildById(FIELD_EMPTY_EXPERIENCE_SECTION);
    int experienCurrentSize=experiens.size();
    for (    Map<String,String> experience : experiences) {
      if (i < experienCurrentSize) {
        experienId=experiens.get(i);
        ++i;
      }
 else {
        experienId=FIELD_EXPERIENCE_SECTION + index;
      }
      setValueExperienceSection(experienId,experience);
    }
    resetActionFileds();
  }
 else   if (experiens.isEmpty()) {
    addEmpryExperienceSection();
  }
}",0.894681960375391
102458,"@Override public void execute(Event<UIEditUserProfileForm> event) throws Exception {
  UIEditUserProfileForm editUserProfile=event.getSource();
  String objectId=event.getRequestContext().getRequestParameter(OBJECTID);
  editUserProfile.removeChildById(objectId);
  editUserProfile.experiens.remove(objectId);
  editUserProfile.getExperienceSections().get(0).setTitle(""String_Node_Str"");
  editUserProfile.resetActionFileds();
  event.getRequestContext().addUIComponentToUpdateByAjax(editUserProfile);
}","@Override public void execute(Event<UIEditUserProfileForm> event) throws Exception {
  UIEditUserProfileForm editUserProfile=event.getSource();
  String objectId=event.getRequestContext().getRequestParameter(OBJECTID);
  editUserProfile.removeChildById(objectId);
  editUserProfile.experiens.remove(objectId);
  List<UIInputSection> experienceSections=editUserProfile.getExperienceSections();
  if (experienceSections.size() > 0) {
    experienceSections.get(0).setTitle(""String_Node_Str"");
  }
 else {
    editUserProfile.addEmpryExperienceSection();
  }
  editUserProfile.resetActionFileds();
  event.getRequestContext().addUIComponentToUpdateByAjax(editUserProfile);
}",0.7904599659284497
102459,"/** 
 */
private void resetActionFileds(){
  List<UIInputSection> experienceSections=getExperienceSections();
  int i=0;
  for (  UIInputSection uiInputSection : experienceSections) {
    boolean hasAdd=(i == experienceSections.size() - 1);
    String experienId=uiInputSection.getName();
    uiInputSection.setActionField(Profile.EXPERIENCES_COMPANY + experienId,createExperienceActions(uiInputSection.getName(),hasAdd));
    ++i;
  }
}","/** 
 * Reset actions on experience
 */
private void resetActionFileds(){
  List<UIInputSection> experienceSections=getExperienceSections();
  int i=1;
  int experienceSize=experienceSections.size();
  for (  UIInputSection uiInputSection : experienceSections) {
    boolean hasAdd=(i == experienceSize);
    String experienId=uiInputSection.getName();
    uiInputSection.setActionField(Profile.EXPERIENCES_COMPANY + experienId,createExperienceActions(uiInputSection.getName(),hasAdd));
    ++i;
  }
}",0.8976545842217484
102460,"/** 
 * @throws Exception
 */
private void initPlaceholder() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setHTMLAttribute(PLACEHOLDER_KEY,""String_Node_Str"");
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  UIFormMultiValueInputSet urlMulti=baseSection.getChildById(Profile.CONTACT_URLS);
  List<UIComponent> children=urlMulti.getChildren();
  for (  UIComponent uiComponent : children) {
    if (uiComponent instanceof UIFormInputBase) {
      ((UIFormInputBase<?>)uiComponent).setHTMLAttribute(PLACEHOLDER_KEY,""String_Node_Str"");
    }
  }
  List<UIInputSection> experienceSections=getExperienceSections();
  for (  UIInputSection uiInputSection : experienceSections) {
    List<UIFormDateTimeInput> dateInputs=new ArrayList<UIFormDateTimeInput>();
    uiInputSection.findComponentOfType(dateInputs,UIFormDateTimeInput.class);
    for (    UIFormDateTimeInput uiFormDateTimeInput : dateInputs) {
      uiFormDateTimeInput.setHTMLAttribute(PLACEHOLDER_KEY,DATE_FORMAT_MMDDYYYY);
    }
  }
}","/** 
 * @throws Exception
 */
private void initPlaceholder() throws Exception {
  getUIInputSection(FIELD_ABOUT_SECTION).getUIFormTextAreaInput(Profile.ABOUT_ME).setHTMLAttribute(PLACEHOLDER_KEY,""String_Node_Str"");
  UIInputSection baseSection=getUIInputSection(FIELD_BASE_SECTION);
  UIFormMultiValueInputSet urlMulti=baseSection.getChildById(Profile.CONTACT_URLS);
  List<UIComponent> children=urlMulti.getChildren();
  for (  UIComponent uiComponent : children) {
    if (uiComponent instanceof UIFormInputBase) {
      ((UIFormInputBase<?>)uiComponent).setHTMLAttribute(PLACEHOLDER_KEY,getLabel(""String_Node_Str""));
    }
  }
  List<UIInputSection> experienceSections=getExperienceSections();
  for (  UIInputSection uiInputSection : experienceSections) {
    List<UIFormDateTimeInput> dateInputs=new ArrayList<UIFormDateTimeInput>();
    uiInputSection.findComponentOfType(dateInputs,UIFormDateTimeInput.class);
    for (    UIFormDateTimeInput uiFormDateTimeInput : dateInputs) {
      uiFormDateTimeInput.setHTMLAttribute(PLACEHOLDER_KEY,DATE_FORMAT_MMDDYYYY);
    }
  }
}",0.9953445065176908
102461,"private void addInput(int indexId,String selected,String value){
  int index=indexId;
  if (indexs.contains(Integer.valueOf(indexId))) {
    index=indexs.indexOf(indexId) + 1;
    indexId=index * 10;
  }
  ((LinkedList<Integer>)indexs).add(index,indexId);
  addUIFormInput(new UIFormSelectBox(getSelectId(indexId),getSelectId(indexId),getOptions()).setValue(selected));
  UIFormStringInput stringInput=new UIFormStringInput(getInputId(indexId),getInputId(indexId),value);
  stringInput.setHTMLAttribute(""String_Node_Str"",""String_Node_Str"");
  addUIFormInput(stringInput);
}","private void addInput(int indexId,String selected,String value) throws Exception {
  int index=indexId;
  if (indexs.contains(Integer.valueOf(indexId))) {
    index=indexs.indexOf(indexId) + 1;
    indexId=index * 10;
  }
  ((LinkedList<Integer>)indexs).add(index,indexId);
  addUIFormInput(new UIFormSelectBox(getSelectId(indexId),getSelectId(indexId),getOptions()).setValue(selected));
  UIFormStringInput stringInput=new UIFormStringInput(getInputId(indexId),getInputId(indexId),value);
  stringInput.setHTMLAttribute(""String_Node_Str"",""String_Node_Str"");
  if (validators != null && !validators.isEmpty()) {
    stringInput.addValidator(SpecialCharacterValidator.class);
    List<Validator> validators_=stringInput.getValidators();
    validators_.clear();
    validators_.addAll(validators);
  }
  addUIFormInput(stringInput);
}",0.8150782361308677
102462,"protected List<String> getNotifications() throws Exception {
  WebNotificationFilter filter=new WebNotificationFilter(currentUser);
  List<String> notificationContents=webNotifService.get(filter,offset * currentPage,ITEMS_LOADED_NUM);
  if (notificationContents.size() > ITEMS_PER_PAGE) {
    notificationContents=notificationContents.subList(0,ITEMS_PER_PAGE);
    hasMore=true;
  }
  return notificationContents;
}","protected List<String> getNotifications() throws Exception {
  WebNotificationFilter filter=new WebNotificationFilter(currentUser);
  if (hasMore) {
    offset=ITEMS_PER_PAGE;
  }
 else {
    offset=0;
    currentPage=0;
  }
  List<String> notificationContents=webNotifService.get(filter,offset * currentPage,ITEMS_LOADED_NUM);
  if (notificationContents.size() > ITEMS_PER_PAGE) {
    hasMore=true;
    return notificationContents.subList(0,ITEMS_PER_PAGE);
  }
 else {
    hasMore=false;
  }
  return notificationContents;
}",0.832271762208068
102463,"@Override public void processRender(WebuiApplication app,WebuiRequestContext context) throws Exception {
  this.currentUser=context.getRemoteUser();
  this.currentPage=1;
  super.processRender(app,context);
}","@Override public void processRender(WebuiApplication app,WebuiRequestContext context) throws Exception {
  this.currentUser=context.getRemoteUser();
  super.processRender(app,context);
}",0.9441624365482234
102464,"@Ajax @POST @Resource public Response saveSetting(String params){
  JSON data=new JSON();
  try {
    Map<String,String> datas=parserParams(params);
    Set<String> paramsName=datas.keySet();
    Set<String> channels=new HashSet<String>();
    UserSetting setting=userSettingService.get(getRemoteUser());
    for (    String channel : paramsName) {
      if (channel.startsWith(CHANNEL_PREFIX) && ""String_Node_Str"".equals((String)datas.get(channel))) {
        String channelId=channel.replaceFirst(CHANNEL_PREFIX,""String_Node_Str"");
        channels.add(channelId);
        setting.setChannelActive(channelId);
      }
    }
    for (    String pluginId : paramsName) {
      if (pluginId.indexOf(SELECT_BOX_PREFIX) > 0) {
        String value=datas.get(pluginId);
        pluginId=pluginId.replaceFirst(SELECT_BOX_PREFIX,""String_Node_Str"");
        if (WEEKLY.equals(value)) {
          setting.addPlugin(pluginId,FREQUENCY.WEEKLY);
        }
        if (DAILY.equals(value)) {
          setting.addPlugin(pluginId,FREQUENCY.DAILY);
        }
      }
 else       if (!pluginId.startsWith(CHANNEL_PREFIX)) {
        for (        String channelId : channels) {
          if (pluginId.startsWith(channelId)) {
            if (UserSetting.EMAIL_CHANNEL.equals(channelId)) {
              setting.addPlugin(pluginId.replaceFirst(UserSetting.EMAIL_CHANNEL,""String_Node_Str""),FREQUENCY.INSTANTLY);
            }
 else {
              setting.addChannelPlugin(channelId,pluginId.replaceFirst(channelId,""String_Node_Str""));
            }
          }
        }
      }
    }
    userSettingService.save(setting);
    data.set(""String_Node_Str"",""String_Node_Str"");
    data.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    data.set(""String_Node_Str"",""String_Node_Str"");
    data.set(""String_Node_Str"",e.toString());
  }
  return Response.ok(data.toString()).withMimeType(""String_Node_Str"");
}","@Ajax @POST @Resource public Response saveSetting(String params){
  JSON data=new JSON();
  try {
    Map<String,String> datas=parserParams(params);
    Set<String> paramsName=datas.keySet();
    Set<String> channels=new HashSet<String>();
    UserSetting setting=userSettingService.get(getRemoteUser());
    for (    String channel : paramsName) {
      if (channel.startsWith(CHANNEL_PREFIX) && ""String_Node_Str"".equals((String)datas.get(channel))) {
        String channelId=channel.replaceFirst(CHANNEL_PREFIX,""String_Node_Str"");
        channels.add(channelId);
        setting.setChannelActive(channelId);
      }
    }
    for (    String pluginId : paramsName) {
      if (pluginId.indexOf(SELECT_BOX_PREFIX) > 0) {
        String value=datas.get(pluginId);
        pluginId=pluginId.replaceFirst(SELECT_BOX_PREFIX,""String_Node_Str"");
        if (WEEKLY.equals(value)) {
          setting.addPlugin(pluginId.replaceFirst(UserSetting.EMAIL_CHANNEL,""String_Node_Str""),FREQUENCY.WEEKLY);
        }
        if (DAILY.equals(value)) {
          setting.addPlugin(pluginId.replaceFirst(UserSetting.EMAIL_CHANNEL,""String_Node_Str""),FREQUENCY.DAILY);
        }
      }
 else       if (!pluginId.startsWith(CHANNEL_PREFIX)) {
        for (        String channelId : channels) {
          if (pluginId.startsWith(channelId)) {
            if (UserSetting.EMAIL_CHANNEL.equals(channelId)) {
              setting.addPlugin(pluginId.replaceFirst(UserSetting.EMAIL_CHANNEL,""String_Node_Str""),FREQUENCY.INSTANTLY);
            }
 else {
              setting.addChannelPlugin(channelId,pluginId.replaceFirst(channelId,""String_Node_Str""));
            }
          }
        }
      }
    }
    userSettingService.save(setting);
    data.set(""String_Node_Str"",""String_Node_Str"");
    data.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    data.set(""String_Node_Str"",""String_Node_Str"");
    data.set(""String_Node_Str"",e.toString());
  }
  return Response.ok(data.toString()).withMimeType(""String_Node_Str"");
}",0.9710434348477284
102465,"private String getChannelContainer(UserSetting setting,String pluginId){
  List<String> channels=getChannels();
  Map<String,Object> parameters=new HashMap<String,Object>();
  Context context=new Context(bundle);
  parameters.put(""String_Node_Str"",context);
  Map<String,String> options=buildOptions(context);
  Map<String,Boolean> channelStatus=new HashMap<String,Boolean>();
  Map<String,CheckBoxInput> channelCheckBoxList=new HashMap<String,CheckBoxInput>();
  parameters.put(""String_Node_Str"",null);
  for (  String channelId : channels) {
    boolean isChannelActive=setting.isChannelActive(channelId);
    channelStatus.put(channelId,isChannelActive);
    channelCheckBoxList.put(channelId,new CheckBoxInput(channelId,pluginId,setting.isActive(channelId,pluginId),isChannelActive));
    if (UserSetting.EMAIL_CHANNEL.equals(channelId)) {
      parameters.put(""String_Node_Str"",new SelectBoxInput(channelId + pluginId,options,getValue(setting,pluginId),isChannelActive));
    }
  }
  parameters.put(""String_Node_Str"",channels);
  parameters.put(""String_Node_Str"",channelCheckBoxList);
  parameters.put(""String_Node_Str"",channelStatus);
  parameters.put(""String_Node_Str"",UserSetting.EMAIL_CHANNEL);
  parameters.put(""String_Node_Str"",pluginId);
  StringBuilder buffer=new StringBuilder();
  channelContainer.renderTo(new AppendableStream(Tools.UTF_8,buffer),parameters);
  return buffer.toString();
}","private String getChannelContainer(UserSetting setting,String pluginId){
  List<String> channels=getChannels();
  Map<String,Object> parameters=new HashMap<String,Object>();
  Context context=new Context(bundle);
  parameters.put(""String_Node_Str"",context);
  Map<String,String> options=buildOptions(context);
  Map<String,Boolean> channelStatus=new HashMap<String,Boolean>();
  Map<String,CheckBoxInput> channelCheckBoxList=new HashMap<String,CheckBoxInput>();
  parameters.put(""String_Node_Str"",null);
  for (  String channelId : channels) {
    if (pluginSettingService.isActive(channelId,pluginId)) {
      boolean isChannelActive=setting.isChannelActive(channelId);
      channelStatus.put(channelId,isChannelActive);
      channelCheckBoxList.put(channelId,new CheckBoxInput(channelId,pluginId,setting.isActive(channelId,pluginId),isChannelActive));
      if (UserSetting.EMAIL_CHANNEL.equals(channelId)) {
        parameters.put(""String_Node_Str"",new SelectBoxInput(channelId + pluginId,options,getValue(setting,pluginId),isChannelActive));
      }
    }
  }
  parameters.put(""String_Node_Str"",channels);
  parameters.put(""String_Node_Str"",channelCheckBoxList);
  parameters.put(""String_Node_Str"",channelStatus);
  parameters.put(""String_Node_Str"",UserSetting.EMAIL_CHANNEL);
  parameters.put(""String_Node_Str"",pluginId);
  StringBuilder buffer=new StringBuilder();
  channelContainer.renderTo(new AppendableStream(Tools.UTF_8,buffer),parameters);
  return buffer.toString();
}",0.9726548978885428
102466,"/** 
 * Gets a set of information of the target user. The returned information of the user includes full name, position avatar, link to profile and relationship status with the current user who sends request.
 * @param uriInfo The requested URI information.
 * @param securityContext The security context of the system.
 * @param userId The Id of a specific user.
 * @param format The format of the returned result, for example, JSON, or XML.
 * @param currentUserName The current user name who sends request.
 * @param updatedType The type of connection action shown on the pop-up.
 * @return The detailed information of a user.
 * @throws Exception
 * @LevelAPI Platform
 * @anchor PeopleRestService.getPeopleInfo
 */
@GET @Path(""String_Node_Str"") public Response getPeopleInfo(@Context UriInfo uriInfo,@Context SecurityContext securityContext,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String currentUserName,@QueryParam(""String_Node_Str"") String updatedType) throws Exception {
  if (format.indexOf('.') > 0) {
    userId=new StringBuffer(userId).append(""String_Node_Str"").append(format.substring(0,format.lastIndexOf('.'))).toString();
    format=format.substring(format.lastIndexOf('.') + 1);
  }
  String[] mediaTypes=new String[]{""String_Node_Str"",""String_Node_Str""};
  format=ArrayUtils.contains(mediaTypes,format) ? format : mediaTypes[0];
  if (currentUserName == null || currentUserName.trim().isEmpty()) {
    currentUserName=getUserId(securityContext,uriInfo);
  }
  MediaType mediaType=Util.getMediaType(format,mediaTypes);
  PeopleInfo peopleInfo=new PeopleInfo(NO_INFO);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,false);
  Identity currentIdentity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,currentUserName,false);
  if (identity != null) {
    peopleInfo.setFullName(identity.getProfile().getFullName());
    peopleInfo.setPosition(StringEscapeUtils.unescapeHtml(identity.getProfile().getPosition()));
    peopleInfo.setDeleted(identity.isDeleted());
    Profile userProfile=identity.getProfile();
    String avatarURL=userProfile.getAvatarUrl();
    if (avatarURL == null) {
      avatarURL=LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
    }
    peopleInfo.setAvatarURL(avatarURL);
    String userType=ConversationState.getCurrent().getIdentity().getUserId();
    boolean isAnonymous=IdentityConstants.ANONIM.equals(userType) || securityContext.getUserPrincipal() == null;
    if (!isAnonymous) {
      peopleInfo.setProfileUrl(LinkProvider.getUserActivityUri(identity.getRemoteId()));
      peopleInfo.setRelationshipType(NO_ACTION);
      String relationshipType=null;
      if (currentUserName != null && !userId.equals(currentUserName)) {
        Relationship relationship=getRelationshipManager().get(currentIdentity,identity);
        if (currentIdentity != null) {
          if (updatedType != null) {
            if (currentIdentity != null) {
              if (ACCEPT_ACTION.equals(updatedType)) {
                getRelationshipManager().confirm(currentIdentity,identity);
              }
 else               if (DENY_ACTION.equals(updatedType)) {
                getRelationshipManager().deny(currentIdentity,identity);
              }
 else               if (REVOKE_ACTION.equals(updatedType)) {
                getRelationshipManager().deny(currentIdentity,identity);
              }
 else               if (INVITE_ACTION.equals(updatedType)) {
                getRelationshipManager().inviteToConnect(currentIdentity,identity);
              }
 else               if (REMOVE_ACTION.equals(updatedType)) {
                getRelationshipManager().delete(getRelationshipManager().get(currentIdentity,identity));
              }
            }
          }
          relationshipType=getRelationshipType(relationship,currentIdentity);
          peopleInfo.setRelationshipType(relationshipType);
        }
      }
      if (CONFIRMED_STATUS.equals(relationshipType)) {
        String activityTitle=getLatestActivityTitle(identity,currentIdentity);
        if (activityTitle != null) {
          peopleInfo.setActivityTitle(StringEscapeUtils.unescapeHtml(activityTitle));
        }
      }
    }
  }
  return Util.getResponse(peopleInfo,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Gets a set of information of the target user. The returned information of the user includes full name, position avatar, link to profile and relationship status with the current user who sends request.
 * @param uriInfo The requested URI information.
 * @param securityContext The security context of the system.
 * @param userId The Id of a specific user.
 * @param format The format of the returned result, for example, JSON, or XML.
 * @param currentUserName The current user name who sends request.
 * @param updatedType The type of connection action shown on the pop-up.
 * @return The detailed information of a user.
 * @throws Exception
 * @LevelAPI Platform
 * @anchor PeopleRestService.getPeopleInfo
 */
@GET @Path(""String_Node_Str"") public Response getPeopleInfo(@Context UriInfo uriInfo,@Context SecurityContext securityContext,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String currentUserName,@QueryParam(""String_Node_Str"") String updatedType) throws Exception {
  if (format.indexOf('.') > 0) {
    userId=new StringBuffer(userId).append(""String_Node_Str"").append(format.substring(0,format.lastIndexOf('.'))).toString();
    format=format.substring(format.lastIndexOf('.') + 1);
  }
  String[] mediaTypes=new String[]{""String_Node_Str"",""String_Node_Str""};
  format=ArrayUtils.contains(mediaTypes,format) ? format : mediaTypes[0];
  if (currentUserName == null || currentUserName.trim().isEmpty()) {
    currentUserName=getUserId(securityContext,uriInfo);
  }
  MediaType mediaType=Util.getMediaType(format,mediaTypes);
  PeopleInfo peopleInfo=new PeopleInfo(NO_INFO);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,false);
  Identity currentIdentity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,currentUserName,false);
  if (identity != null) {
    peopleInfo.setFullName(identity.getProfile().getFullName());
    peopleInfo.setPosition(StringEscapeUtils.unescapeHtml(identity.getProfile().getPosition()));
    peopleInfo.setDeleted(identity.isDeleted());
    Profile userProfile=identity.getProfile();
    String avatarURL=userProfile.getAvatarUrl();
    if (avatarURL == null) {
      avatarURL=LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
    }
    peopleInfo.setAvatarURL(avatarURL);
    String userType=ConversationState.getCurrent().getIdentity().getUserId();
    boolean isAnonymous=IdentityConstants.ANONIM.equals(userType) || securityContext.getUserPrincipal() == null || !userType.equals(currentIdentity.getRemoteId());
    if (!isAnonymous) {
      peopleInfo.setProfileUrl(LinkProvider.getUserActivityUri(identity.getRemoteId()));
      peopleInfo.setRelationshipType(NO_ACTION);
      String relationshipType=null;
      if (currentUserName != null && !userId.equals(currentUserName)) {
        Relationship relationship=getRelationshipManager().get(currentIdentity,identity);
        if (currentIdentity != null) {
          if (updatedType != null) {
            if (currentIdentity != null) {
              if (ACCEPT_ACTION.equals(updatedType)) {
                getRelationshipManager().confirm(currentIdentity,identity);
              }
 else               if (DENY_ACTION.equals(updatedType)) {
                getRelationshipManager().deny(currentIdentity,identity);
              }
 else               if (REVOKE_ACTION.equals(updatedType)) {
                getRelationshipManager().deny(currentIdentity,identity);
              }
 else               if (INVITE_ACTION.equals(updatedType)) {
                getRelationshipManager().inviteToConnect(currentIdentity,identity);
              }
 else               if (REMOVE_ACTION.equals(updatedType)) {
                getRelationshipManager().delete(getRelationshipManager().get(currentIdentity,identity));
              }
            }
          }
          relationshipType=getRelationshipType(relationship,currentIdentity);
          peopleInfo.setRelationshipType(relationshipType);
        }
      }
      if (CONFIRMED_STATUS.equals(relationshipType)) {
        String activityTitle=getLatestActivityTitle(identity,currentIdentity);
        if (activityTitle != null) {
          peopleInfo.setActivityTitle(StringEscapeUtils.unescapeHtml(activityTitle));
        }
      }
    }
  }
  return Util.getResponse(peopleInfo,uriInfo,mediaType,Response.Status.OK);
}",0.9941946499715424
102467,"@Override public MessageInfo makeMessage(NotificationContext ctx){
  MessageInfo messageInfo=new MessageInfo();
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  ExoSocialActivity parentActivity=Utils.getActivityManager().getParentActivity(activity);
  Identity identity=Utils.getIdentityManager().getIdentity(activity.getPosterId(),true);
  TemplateContext templateContext=new TemplateContext(notification.getKey().getId(),language);
  templateContext.put(""String_Node_Str"",identity.getProfile().getFullName());
  String subject=TemplateUtils.processSubject(templateContext);
  SocialNotificationUtils.addFooterAndFirstName(notification.getTo(),templateContext);
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",identity.getRemoteId()));
  templateContext.put(""String_Node_Str"",activity.getTitle());
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",parentActivity.getId() + ""String_Node_Str"" + activity.getId()));
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",parentActivity.getId() + ""String_Node_Str"" + activity.getId()));
  String body=SocialNotificationUtils.getBody(ctx,templateContext,parentActivity);
  return messageInfo.subject(subject).body(body).end();
}","@Override public MessageInfo makeMessage(NotificationContext ctx){
  MessageInfo messageInfo=new MessageInfo();
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  ExoSocialActivity parentActivity=Utils.getActivityManager().getParentActivity(activity);
  Identity identity=Utils.getIdentityManager().getIdentity(activity.getPosterId(),true);
  TemplateContext templateContext=new TemplateContext(notification.getKey().getId(),language);
  templateContext.put(""String_Node_Str"",identity.getProfile().getFullName());
  String subject=TemplateUtils.processSubject(templateContext);
  SocialNotificationUtils.addFooterAndFirstName(notification.getTo(),templateContext);
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",identity.getRemoteId()));
  templateContext.put(""String_Node_Str"",NotificationUtils.processLinkTitle(activity.getTitle()));
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",parentActivity.getId() + ""String_Node_Str"" + activity.getId()));
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",parentActivity.getId() + ""String_Node_Str"" + activity.getId()));
  String body=SocialNotificationUtils.getBody(ctx,templateContext,parentActivity);
  return messageInfo.subject(subject).body(body).end();
}",0.9806825499034127
102468,"@Override public MessageInfo makeMessage(NotificationContext ctx){
  MessageInfo messageInfo=new MessageInfo();
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  TemplateContext templateContext=new TemplateContext(notification.getKey().getId(),language);
  SocialNotificationUtils.addFooterAndFirstName(notification.getTo(),templateContext);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  Identity identity=Utils.getIdentityManager().getIdentity(activity.getPosterId(),true);
  templateContext.put(""String_Node_Str"",identity.getProfile().getFullName());
  String subject=TemplateUtils.processSubject(templateContext);
  if (activity.isComment()) {
    ExoSocialActivity parentActivity=Utils.getActivityManager().getParentActivity(activity);
    activityId=parentActivity.getId();
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId + ""String_Node_Str"" + activity.getId()));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId + ""String_Node_Str"" + activity.getId()));
  }
 else {
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId));
  }
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getUserAvatarUrl(identity.getProfile()));
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",identity.getRemoteId()));
  templateContext.put(""String_Node_Str"",Utils.processMentions(activity.getTitle()));
  String body=TemplateUtils.processGroovy(templateContext);
  return messageInfo.subject(subject).body(body).end();
}","@Override public MessageInfo makeMessage(NotificationContext ctx){
  MessageInfo messageInfo=new MessageInfo();
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  TemplateContext templateContext=new TemplateContext(notification.getKey().getId(),language);
  SocialNotificationUtils.addFooterAndFirstName(notification.getTo(),templateContext);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  Identity identity=Utils.getIdentityManager().getIdentity(activity.getPosterId(),true);
  templateContext.put(""String_Node_Str"",identity.getProfile().getFullName());
  String subject=TemplateUtils.processSubject(templateContext);
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getUserAvatarUrl(identity.getProfile()));
  templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",identity.getRemoteId()));
  String body=""String_Node_Str"";
  if (activity.isComment()) {
    ExoSocialActivity parentActivity=Utils.getActivityManager().getParentActivity(activity);
    activityId=parentActivity.getId();
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId + ""String_Node_Str"" + activity.getId()));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId + ""String_Node_Str"" + activity.getId()));
    templateContext.put(""String_Node_Str"",NotificationUtils.processLinkTitle(activity.getTitle()));
    body=TemplateUtils.processGroovy(templateContext);
  }
 else {
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(""String_Node_Str"",activityId));
    body=SocialNotificationUtils.getBody(ctx,templateContext,activity);
  }
  return messageInfo.subject(subject).body(body).end();
}",0.787433493792754
102469,"@Override public String makeContent(NotificationContext ctx){
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  TemplateContext templateContext=new TemplateContext(ID,language);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  templateContext.put(""String_Node_Str"",activity.getTitle());
  String content=TemplateUtils.processGroovy(templateContext);
  return content;
}","@Override public String makeContent(NotificationContext ctx){
  NotificationInfo notification=ctx.getNotificationInfo();
  String language=getLanguage(notification);
  TemplateContext templateContext=new TemplateContext(ID,language);
  String activityId=notification.getValueOwnerParameter(SocialNotificationUtils.ACTIVITY_ID.getKey());
  ExoSocialActivity activity=Utils.getActivityManager().getActivity(activityId);
  if (activity.isComment()) {
    activity=Utils.getActivityManager().getParentActivity(activity);
  }
  templateContext.put(""String_Node_Str"",NotificationUtils.processLinkTitle(activity.getTitle()));
  String content=TemplateUtils.processGroovy(templateContext);
  return content;
}",0.8709422011084719
102470,"@Override public String makeContent(NotificationContext ctx){
  try {
    ActivityManager activityM=CommonsUtils.getService(ActivityManager.class);
    NotificationInfo notification=ctx.getNotificationInfo();
    String language=getLanguage(notification);
    String activityId=notification.getValueOwnerParameter(ACTIVITY_ID.getKey());
    activity=activityM.getActivity(activityId);
    if (activity.isComment()) {
      activity=activityM.getParentActivity(activity);
    }
    TemplateContext templateContext=new TemplateContext(ID,language);
    String url=activity.getTemplateParams().get(LINK_PARAM);
    templateContext.put(""String_Node_Str"",activity.getTemplateParams().get(COMMENT_PARAM));
    templateContext.put(""String_Node_Str"",activity.getTemplateParams().get(TITLE_PARAM));
    templateContext.put(""String_Node_Str"",url);
    templateContext.put(""String_Node_Str"",getImageUrl(url));
    templateContext.put(""String_Node_Str"",isEmbedLink());
    templateContext.put(""String_Node_Str"",Utils.formatContent(activity.getTemplateParams().get(DESCRIPTION_PARAM)));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(VIEW_FULL_ACTIVITY,activity.getId()));
    String content=TemplateUtils.processGroovy(templateContext);
    return content;
  }
 catch (  Exception e) {
    return (activity != null) ? activity.getTitle() : ""String_Node_Str"";
  }
}","@Override public String makeContent(NotificationContext ctx){
  try {
    ActivityManager activityM=CommonsUtils.getService(ActivityManager.class);
    NotificationInfo notification=ctx.getNotificationInfo();
    String language=getLanguage(notification);
    String activityId=notification.getValueOwnerParameter(ACTIVITY_ID.getKey());
    activity=activityM.getActivity(activityId);
    if (activity.isComment()) {
      activity=activityM.getParentActivity(activity);
    }
    TemplateContext templateContext=new TemplateContext(ID,language);
    String url=activity.getTemplateParams().get(LINK_PARAM);
    templateContext.put(""String_Node_Str"",NotificationUtils.processLinkTitle(activity.getTemplateParams().get(COMMENT_PARAM)));
    templateContext.put(""String_Node_Str"",NotificationUtils.processLinkTitle(activity.getTemplateParams().get(TITLE_PARAM)));
    templateContext.put(""String_Node_Str"",url);
    templateContext.put(""String_Node_Str"",getImageUrl(url));
    templateContext.put(""String_Node_Str"",isEmbedLink());
    templateContext.put(""String_Node_Str"",Utils.formatContent(activity.getTemplateParams().get(DESCRIPTION_PARAM)));
    templateContext.put(""String_Node_Str"",LinkProviderUtils.getRedirectUrl(VIEW_FULL_ACTIVITY,activity.getId()));
    String content=TemplateUtils.processGroovy(templateContext);
    return content;
  }
 catch (  Exception e) {
    return (activity != null) ? activity.getTitle() : ""String_Node_Str"";
  }
}",0.9745762711864406
102471,"private boolean severIsStarting(JobDataMap dataMap){
  rampup=(Integer)dataMap.get(""String_Node_Str"");
  if (rampup == null) {
    rampup=2;
  }
  if (rampup > 1) {
    dataMap.put(""String_Node_Str"",--rampup);
    LOG.debug(""String_Node_Str"" + rampup);
    return true;
  }
  return false;
}","private boolean severIsStarting(JobDataMap dataMap){
  if (rampup > 1) {
    --rampup;
    LOG.debug(""String_Node_Str"" + rampup);
    return true;
  }
  return false;
}",0.7320261437908496
102472,"public Object invokeNext() throws InvocationException {
  try {
    filterChain.doFilter(request,response);
  }
 catch (  Throwable t) {
    throw new InvocationException(t.getCause());
  }
  return null;
}","public Object invokeNext() throws InvocationException {
  try {
    filterChain.doFilter(request,response);
  }
 catch (  Exception e) {
    throw new InvocationException(e.getCause());
  }
  return null;
}",0.883495145631068
102473,"/** 
 * Generates ActionBuilder base on the action name and arguments list. Example: invokes reverse(""show.topic"", new HashMap<String, Object>{topicId, ""topicId321""}) method. 
 * @param action
 * @param args
 * @return
 */
public static ActionBuilder reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      ExoMatcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.ParamArg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value != null) {
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",value.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else             if (value != null) {
              try {
                queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                queryString.append(""String_Node_Str"");
                if (value.toString().startsWith(""String_Node_Str"")) {
                  queryString.append(value.toString());
                }
 else {
                  queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                }
                queryString.append(""String_Node_Str"");
              }
 catch (              UnsupportedEncodingException ex) {
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionBuilder actionDefinition=new ActionBuilder();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          return actionDefinition;
        }
      }
    }
  }
  return null;
}","/** 
 * Generates ActionBuilder base on the action name and arguments list. Example: invokes reverse(""show.topic"", new HashMap<String, Object>{topicId, ""topicId321""}) method. 
 * @param action
 * @param args
 * @return
 */
public static ActionBuilder reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      ExoMatcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.ParamArg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value != null) {
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",value.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else             if (value != null) {
              try {
                queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                queryString.append(""String_Node_Str"");
                if (value.toString().startsWith(""String_Node_Str"")) {
                  queryString.append(value.toString());
                }
 else {
                  queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                }
                queryString.append(""String_Node_Str"");
              }
 catch (              UnsupportedEncodingException ex) {
                LOG.debug(""String_Node_Str"" + ex);
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionBuilder actionDefinition=new ActionBuilder();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          return actionDefinition;
        }
      }
    }
  }
  return null;
}",0.99170326988775
102474,"/** 
 * Updates profile in Position section
 * @throws Exception
 */
private void updatePosition() throws Exception {
  String position=(String)updatedProfile.getProperty(Profile.POSITION);
  UserProfile foundUserProfile=organizationService.getUserProfileHandler().findUserProfileByName(userName);
  if (foundUserProfile == null) {
    return;
  }
  String uPosition=foundUserProfile.getAttribute(UserProfile.PERSONAL_INFO_KEYS[7]);
  if (position != null && uPosition != position) {
    foundUserProfile.setAttribute(UserProfile.PERSONAL_INFO_KEYS[7],position);
    organizationService.getUserProfileHandler().saveUserProfile(foundUserProfile,false);
  }
}","/** 
 * Updates profile in Position section
 * @throws Exception
 */
private void updatePosition() throws Exception {
  String position=(String)updatedProfile.getProperty(Profile.POSITION);
  UserProfile foundUserProfile=organizationService.getUserProfileHandler().findUserProfileByName(userName);
  if (foundUserProfile == null) {
    return;
  }
  String uPosition=foundUserProfile.getAttribute(UserProfile.PERSONAL_INFO_KEYS[7]);
  if (position != null && !position.equals(uPosition)) {
    foundUserProfile.setAttribute(UserProfile.PERSONAL_INFO_KEYS[7],position);
    organizationService.getUserProfileHandler().saveUserProfile(foundUserProfile,false);
  }
}",0.9651515151515152
102475,"/** 
 * Updates profile in Contact section
 * @throws Exception
 */
private void updateContact() throws Exception {
  String gender=(String)updatedProfile.getProperty(Profile.GENDER);
  UserProfile foundUserProfile=organizationService.getUserProfileHandler().findUserProfileByName(userName);
  if (foundUserProfile == null) {
    return;
  }
  String uGender=foundUserProfile.getAttribute(UserProfile.PERSONAL_INFO_KEYS[4]);
  if (gender != null && uGender != gender) {
    foundUserProfile.setAttribute(UserProfile.PERSONAL_INFO_KEYS[4],gender);
    organizationService.getUserProfileHandler().saveUserProfile(foundUserProfile,false);
  }
}","/** 
 * Updates profile in Contact section
 * @throws Exception
 */
private void updateContact() throws Exception {
  String gender=(String)updatedProfile.getProperty(Profile.GENDER);
  UserProfile foundUserProfile=organizationService.getUserProfileHandler().findUserProfileByName(userName);
  if (foundUserProfile == null) {
    return;
  }
  String uGender=foundUserProfile.getAttribute(UserProfile.PERSONAL_INFO_KEYS[4]);
  if (gender != null && !gender.equals(uGender)) {
    foundUserProfile.setAttribute(UserProfile.PERSONAL_INFO_KEYS[4],gender);
    organizationService.getUserProfileHandler().saveUserProfile(foundUserProfile,false);
  }
}",0.9798136645962732
102476,"@Override public void preDelete(final User user) throws Exception {
  RequestLifeCycle.begin(PortalContainer.getInstance());
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  IdentityManager idm=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
  Identity identity=idm.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user.getUserName(),true);
  try {
    idm.hardDeleteIdentity(identity);
  }
 catch (  Exception e) {
  }
  StorageUtils.clearUsersPlatformGroup();
  RequestLifeCycle.end();
}","@Override public void preDelete(final User user) throws Exception {
  RequestLifeCycle.begin(PortalContainer.getInstance());
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  IdentityManager idm=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
  Identity identity=idm.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user.getUserName(),true);
  try {
    idm.hardDeleteIdentity(identity);
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
  StorageUtils.clearUsersPlatformGroup();
  RequestLifeCycle.end();
}",0.9697508896797152
102477,"/** 
 * Gets the type.
 * @param fieldName the field name
 * @param propertyName the property name
 * @return the type
 */
public String getType(String fieldName,String propertyName){
  if (this.storage == null) {
    ExoContainer container=ExoContainerContext.getCurrentContainer();
    IdentityManager im=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
    this.storage=im.getIdentityStorage();
  }
  try {
    String type=storage.getType(fieldName,propertyName);
    if (type != null)     return type;
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}","/** 
 * Gets the type.
 * @param fieldName the field name
 * @param propertyName the property name
 * @return the type
 */
public String getType(String fieldName,String propertyName){
  if (this.storage == null) {
    ExoContainer container=ExoContainerContext.getCurrentContainer();
    IdentityManager im=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
    this.storage=im.getIdentityStorage();
  }
  try {
    String type=storage.getType(fieldName,propertyName);
    if (type != null)     return type;
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
  return ""String_Node_Str"";
}",0.972312703583062
102478,"public Future<Void> createActivity(UserId userId,GroupId groupId,String appId,Set<String> fields,Activity activity,SecurityToken token) throws ProtocolException {
  try {
    activity.setAppId(appId);
    ExoSocialActivity exoActivity=convertFromOSActivity(activity,fields);
    if (token instanceof AnonymousSecurityToken) {
      throw new ProtocolException(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
    PortalContainer pc=getPortalContainer(token);
    ActivityManager am=(ActivityManager)pc.getComponentInstanceOfType(ActivityManager.class);
    IdentityManager identityManager=(IdentityManager)pc.getComponentInstanceOfType(IdentityManager.class);
    String user=userId.getUserId(token);
    if (user.contains(""String_Node_Str"")) {
      user=user.split(""String_Node_Str"")[1];
    }
    Identity userIdentity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user,false);
    Identity targetStream=userIdentity;
    if (groupId.getType() == GroupId.Type.groupId) {
      String group=groupId.getGroupId();
      if (group.contains(""String_Node_Str"")) {
        group=group.split(""String_Node_Str"")[1];
      }
      targetStream=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,group,false);
    }
    if (targetStream == null) {
      throw new ProtocolException(HttpServletResponse.SC_FORBIDDEN,user + ""String_Node_Str"");
    }
    String activityUser=exoActivity.getUserId();
    if (activityUser == null) {
      exoActivity.setUserId(userIdentity.getId());
    }
 else {
      Identity activityUserIdentity=identityManager.getIdentity(activityUser);
      if (activityUserIdentity == null) {
        throw new ProtocolException(HttpServletResponse.SC_FORBIDDEN,activityUser + ""String_Node_Str"");
      }
    }
    am.saveActivityNoReturn(targetStream,exoActivity);
    return ImmediateFuture.newInstance(null);
  }
 catch (  Throwable e) {
    if (e instanceof ProtocolException) {
      throw (ProtocolException)e;
    }
    throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage(),e);
  }
}","public Future<Void> createActivity(UserId userId,GroupId groupId,String appId,Set<String> fields,Activity activity,SecurityToken token) throws ProtocolException {
  try {
    activity.setAppId(appId);
    ExoSocialActivity exoActivity=convertFromOSActivity(activity,fields);
    if (token instanceof AnonymousSecurityToken) {
      throw new ProtocolException(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
    PortalContainer pc=getPortalContainer(token);
    ActivityManager am=(ActivityManager)pc.getComponentInstanceOfType(ActivityManager.class);
    IdentityManager identityManager=(IdentityManager)pc.getComponentInstanceOfType(IdentityManager.class);
    String user=userId.getUserId(token);
    if (user.contains(""String_Node_Str"")) {
      user=user.split(""String_Node_Str"")[1];
    }
    Identity userIdentity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,user,false);
    Identity targetStream=userIdentity;
    if (groupId.getType() == GroupId.Type.groupId) {
      String group=groupId.getGroupId();
      if (group.contains(""String_Node_Str"")) {
        group=group.split(""String_Node_Str"")[1];
      }
      targetStream=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,group,false);
    }
    if (targetStream == null) {
      throw new ProtocolException(HttpServletResponse.SC_FORBIDDEN,user + ""String_Node_Str"");
    }
    String activityUser=exoActivity.getUserId();
    if (activityUser == null) {
      exoActivity.setUserId(userIdentity.getId());
    }
 else {
      Identity activityUserIdentity=identityManager.getIdentity(activityUser);
      if (activityUserIdentity == null) {
        throw new ProtocolException(HttpServletResponse.SC_FORBIDDEN,activityUser + ""String_Node_Str"");
      }
    }
    am.saveActivityNoReturn(targetStream,exoActivity);
    return ImmediateFuture.newInstance(null);
  }
 catch (  Exception e) {
    if (e instanceof ProtocolException) {
      throw (ProtocolException)e;
    }
    throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage(),e);
  }
}",0.9956896551724138
102479,"/** 
 * Get the uri people.
 * @param portalContainer
 * @param remoteId
 * @return
 * @throws Exception
 */
private String getURIForPeople(PortalContainer portalContainer,String remoteId) throws Exception {
  UserPortalConfigService userPortalConfigSer=(UserPortalConfigService)portalContainer.getComponentInstanceOfType(UserPortalConfigService.class);
  UserPortalContext NULL_CONTEXT=new UserPortalContext(){
    public ResourceBundle getBundle(    UserNavigation navigation){
      return null;
    }
    public Locale getUserLocale(){
      return Locale.ENGLISH;
    }
  }
;
  StringBuffer stringBuffer=new StringBuffer();
  try {
    RequestLifeCycle.begin(portalContainer);
    UserPortalConfig userPortalCfg=userPortalConfigSer.getUserPortalConfig(userPortalConfigSer.getDefaultPortal(),remoteId,NULL_CONTEXT);
    UserPortal userPortal=userPortalCfg.getUserPortal();
    SiteKey siteKey=SiteKey.portal(userPortalConfigSer.getDefaultPortal());
    UserNavigation userNav=userPortal.getNavigation(siteKey);
    UserNode rootNode=userPortal.getNode(userNav,Scope.ALL,null,null);
    UserNode peopleNode=rootNode.getChild(""String_Node_Str"");
    UserNode iteratorNode=peopleNode;
    if (iteratorNode != null) {
      while (iteratorNode != null && iteratorNode.getParent() != null) {
        stringBuffer.insert(0,iteratorNode.getName());
        stringBuffer.insert(0,""String_Node_Str"");
        iteratorNode=iteratorNode.getParent();
      }
      stringBuffer.insert(0,userPortalConfigSer.getDefaultPortal());
      stringBuffer.insert(0,""String_Node_Str"");
      stringBuffer.insert(0,portalContainer.getName());
      stringBuffer.insert(0,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
  RequestLifeCycle.end();
  return stringBuffer.toString();
}","/** 
 * Get the uri people.
 * @param portalContainer
 * @param remoteId
 * @return
 * @throws Exception
 */
private String getURIForPeople(PortalContainer portalContainer,String remoteId) throws Exception {
  UserPortalConfigService userPortalConfigSer=(UserPortalConfigService)portalContainer.getComponentInstanceOfType(UserPortalConfigService.class);
  UserPortalContext NULL_CONTEXT=new UserPortalContext(){
    public ResourceBundle getBundle(    UserNavigation navigation){
      return null;
    }
    public Locale getUserLocale(){
      return Locale.ENGLISH;
    }
  }
;
  StringBuffer stringBuffer=new StringBuffer();
  try {
    RequestLifeCycle.begin(portalContainer);
    UserPortalConfig userPortalCfg=userPortalConfigSer.getUserPortalConfig(userPortalConfigSer.getDefaultPortal(),remoteId,NULL_CONTEXT);
    UserPortal userPortal=userPortalCfg.getUserPortal();
    SiteKey siteKey=SiteKey.portal(userPortalConfigSer.getDefaultPortal());
    UserNavigation userNav=userPortal.getNavigation(siteKey);
    UserNode rootNode=userPortal.getNode(userNav,Scope.ALL,null,null);
    UserNode peopleNode=rootNode.getChild(""String_Node_Str"");
    UserNode iteratorNode=peopleNode;
    if (iteratorNode != null) {
      while (iteratorNode != null && iteratorNode.getParent() != null) {
        stringBuffer.insert(0,iteratorNode.getName());
        stringBuffer.insert(0,""String_Node_Str"");
        iteratorNode=iteratorNode.getParent();
      }
      stringBuffer.insert(0,userPortalConfigSer.getDefaultPortal());
      stringBuffer.insert(0,""String_Node_Str"");
      stringBuffer.insert(0,portalContainer.getName());
      stringBuffer.insert(0,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
  RequestLifeCycle.end();
  return stringBuffer.toString();
}",0.990497484628284
102480,"/** 
 * Gets absolute link from the provided link
 * @param base
 * @param link
 * @return absolute link
 */
private String getAbsLink(String link){
  if (link.startsWith(""String_Node_Str""))   return link;
  URL url=null;
  try {
    url=new URL(this.link);
  }
 catch (  MalformedURLException e) {
  }
  String protocol=url.getProtocol();
  String host=url.getHost();
  String base=protocol + ""String_Node_Str"" + host;
  if (link.startsWith(""String_Node_Str"")) {
    return base + link;
  }
 else   if (link.startsWith(""String_Node_Str"")) {
    if (this.link.endsWith(""String_Node_Str"")) {
      this.link=this.link.substring(0,this.link.length() - 1);
    }
    link=link.substring(1,link.length());
    return this.link + link;
  }
 else   if (link.startsWith(""String_Node_Str"")) {
    String regex=""String_Node_Str"";
    Pattern partern=Pattern.compile(regex);
    Matcher matcher=partern.matcher(link);
    int level=0;
    while (matcher.find()) {
      level++;
    }
    String secondPath=link.replace(""String_Node_Str"",""String_Node_Str"");
    String[] str=this.link.split(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    level=(str.length - 1) - level;
    for (int i=0; i < level; i++) {
      sb.append(str[i]);
    }
    sb.append(secondPath);
    return sb.toString();
  }
 else {
    if (this.link.endsWith(""String_Node_Str"")) {
      return this.link + link;
    }
 else {
      return this.link + ""String_Node_Str"" + link;
    }
  }
}","/** 
 * Gets absolute link from the provided link
 * @param base
 * @param link
 * @return absolute link
 */
private String getAbsLink(String link){
  if (link.startsWith(""String_Node_Str""))   return link;
  URL url=null;
  try {
    url=new URL(this.link);
  }
 catch (  MalformedURLException e) {
    LOG.debug(""String_Node_Str"");
  }
  String protocol=url.getProtocol();
  String host=url.getHost();
  String base=protocol + ""String_Node_Str"" + host;
  if (link.startsWith(""String_Node_Str"")) {
    return base + link;
  }
 else   if (link.startsWith(""String_Node_Str"")) {
    if (this.link.endsWith(""String_Node_Str"")) {
      this.link=this.link.substring(0,this.link.length() - 1);
    }
    link=link.substring(1,link.length());
    return this.link + link;
  }
 else   if (link.startsWith(""String_Node_Str"")) {
    String regex=""String_Node_Str"";
    Pattern partern=Pattern.compile(regex);
    Matcher matcher=partern.matcher(link);
    int level=0;
    while (matcher.find()) {
      level++;
    }
    String secondPath=link.replace(""String_Node_Str"",""String_Node_Str"");
    String[] str=this.link.split(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    level=(str.length - 1) - level;
    for (int i=0; i < level; i++) {
      sb.append(str[i]);
    }
    sb.append(secondPath);
    return sb.toString();
  }
 else {
    if (this.link.endsWith(""String_Node_Str"")) {
      return this.link + link;
    }
 else {
      return this.link + ""String_Node_Str"" + link;
    }
  }
}",0.9885290148448044
102481,"private String getUserId(SecurityContext securityContext,UriInfo uriInfo){
  String userId=StringUtils.EMPTY;
  try {
    userId=ConversationState.getCurrent().getIdentity().getUserId();
  }
 catch (  Exception e) {
  }
  if (userId == null || userId.isEmpty() || IdentityConstants.ANONIM.equals(userId)) {
    if (securityContext != null && securityContext.getUserPrincipal() != null) {
      return securityContext.getUserPrincipal().getName();
    }
 else     if (uriInfo != null) {
      return Util.getViewerId(uriInfo);
    }
  }
  return userId;
}","private String getUserId(SecurityContext securityContext,UriInfo uriInfo){
  String userId=StringUtils.EMPTY;
  try {
    userId=ConversationState.getCurrent().getIdentity().getUserId();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
  if (userId == null || userId.isEmpty() || IdentityConstants.ANONIM.equals(userId)) {
    if (securityContext != null && securityContext.getUserPrincipal() != null) {
      return securityContext.getUserPrincipal().getName();
    }
 else     if (uriInfo != null) {
      return Util.getViewerId(uriInfo);
    }
  }
  return userId;
}",0.9702276707530648
102482,"public void invokeGetBindingBean(Object bean) throws Exception {
  super.invokeGetBindingBean(bean);
  TreeNode pageNode=(TreeNode)bean;
  String icon=pageNode.getIcon();
  if (icon == null || icon.length() < 0)   icon=""String_Node_Str"";
  getChild(UIFormInputIconSelector.class).setSelectedIcon(icon);
  getUIStringInput(LABEL).setValue(pageNode.getLabel());
  Map<Locale,Described.State> i18nizedLabels=pageNode.getI18nizedLabels();
  if (i18nizedLabels != null) {
    for (    Locale key : i18nizedLabels.keySet()) {
      String locale=key.getCountry() != ""String_Node_Str"" ? key.getLanguage() + ""String_Node_Str"" + key.getCountry() : key.getLanguage();
      cachedLabels.put(locale,i18nizedLabels.get(key));
    }
  }
  if (cachedLabels.get(selectedLocale) != null) {
    getUIStringInput(I18N_LABEL).setValue(cachedLabels.get(selectedLocale).getName());
  }
  if (pageNode.getVisibility() == Visibility.SYSTEM) {
    UIFormInputSet uiSettingSet=getChildById(""String_Node_Str"");
    uiSettingSet.removeChildById(VISIBLE);
    uiSettingSet.removeChildById(SHOW_PUBLICATION_DATE);
    uiSettingSet.removeChildById(START_PUBLICATION_DATE);
    uiSettingSet.removeChildById(END_PUBLICATION_DATE);
  }
 else {
    Visibility visibility=pageNode.getVisibility();
    boolean isVisible=visibility == null || EnumSet.of(Visibility.DISPLAYED,Visibility.TEMPORAL).contains(visibility);
    getUICheckBoxInput(VISIBLE).setChecked(isVisible);
    getUICheckBoxInput(SHOW_PUBLICATION_DATE).setChecked(Visibility.TEMPORAL.equals(visibility));
    setShowCheckPublicationDate(isVisible);
    Calendar cal=Calendar.getInstance();
    if (pageNode.getStartPublicationTime() != -1) {
      cal.setTime(new Date(pageNode.getStartPublicationTime()));
      getUIFormDateTimeInput(START_PUBLICATION_DATE).setCalendar(cal);
    }
 else     getUIFormDateTimeInput(START_PUBLICATION_DATE).setValue(null);
    if (pageNode.getEndPublicationTime() != -1) {
      cal.setTime(new Date(pageNode.getEndPublicationTime()));
      getUIFormDateTimeInput(END_PUBLICATION_DATE).setCalendar(cal);
    }
 else     getUIFormDateTimeInput(END_PUBLICATION_DATE).setValue(null);
  }
  boolean isExtendedMode=true;
  if (pageNode.getNode().getLabel() != null && pageNode.getNode().getLabel().trim().length() > 0) {
    isExtendedMode=false;
  }
  getUICheckBoxInput(SWITCH_MODE).setChecked(isExtendedMode);
  this.switchLabelMode(isExtendedMode);
}","public void invokeGetBindingBean(Object bean) throws Exception {
  super.invokeGetBindingBean(bean);
  TreeNode pageNode=(TreeNode)bean;
  String icon=pageNode.getIcon();
  if (icon == null || icon.length() < 0)   icon=""String_Node_Str"";
  getChild(UIFormInputIconSelector.class).setSelectedIcon(icon);
  getUIStringInput(LABEL).setValue(pageNode.getLabel());
  Map<Locale,Described.State> i18nizedLabels=pageNode.getI18nizedLabels();
  if (i18nizedLabels != null) {
    for (    Locale key : i18nizedLabels.keySet()) {
      String locale=!(""String_Node_Str"".equals(key.getCountry())) ? key.getLanguage() + ""String_Node_Str"" + key.getCountry() : key.getLanguage();
      cachedLabels.put(locale,i18nizedLabels.get(key));
    }
  }
  if (cachedLabels.get(selectedLocale) != null) {
    getUIStringInput(I18N_LABEL).setValue(cachedLabels.get(selectedLocale).getName());
  }
  if (pageNode.getVisibility() == Visibility.SYSTEM) {
    UIFormInputSet uiSettingSet=getChildById(""String_Node_Str"");
    uiSettingSet.removeChildById(VISIBLE);
    uiSettingSet.removeChildById(SHOW_PUBLICATION_DATE);
    uiSettingSet.removeChildById(START_PUBLICATION_DATE);
    uiSettingSet.removeChildById(END_PUBLICATION_DATE);
  }
 else {
    Visibility visibility=pageNode.getVisibility();
    boolean isVisible=visibility == null || EnumSet.of(Visibility.DISPLAYED,Visibility.TEMPORAL).contains(visibility);
    getUICheckBoxInput(VISIBLE).setChecked(isVisible);
    getUICheckBoxInput(SHOW_PUBLICATION_DATE).setChecked(Visibility.TEMPORAL.equals(visibility));
    setShowCheckPublicationDate(isVisible);
    Calendar cal=Calendar.getInstance();
    if (pageNode.getStartPublicationTime() != -1) {
      cal.setTime(new Date(pageNode.getStartPublicationTime()));
      getUIFormDateTimeInput(START_PUBLICATION_DATE).setCalendar(cal);
    }
 else     getUIFormDateTimeInput(START_PUBLICATION_DATE).setValue(null);
    if (pageNode.getEndPublicationTime() != -1) {
      cal.setTime(new Date(pageNode.getEndPublicationTime()));
      getUIFormDateTimeInput(END_PUBLICATION_DATE).setCalendar(cal);
    }
 else     getUIFormDateTimeInput(END_PUBLICATION_DATE).setValue(null);
  }
  boolean isExtendedMode=true;
  if (pageNode.getNode().getLabel() != null && pageNode.getNode().getLabel().trim().length() > 0) {
    isExtendedMode=false;
  }
  getUICheckBoxInput(SWITCH_MODE).setChecked(isExtendedMode);
  this.switchLabelMode(isExtendedMode);
}",0.9896608767576508
102483,"private void initLanguageSelectBox(UIFormSelectBox langSelectBox){
  List<SelectItemOption<String>> lang=new ArrayList<SelectItemOption<String>>();
  LocaleConfigService localeService=getApplicationComponent(LocaleConfigService.class);
  Locale currentLocale=((PortletRequestContext)WebuiRequestContext.getCurrentInstance()).getLocale();
  Iterator<LocaleConfig> i=localeService.getLocalConfigs().iterator();
  String displayName=null;
  String language=null;
  String country=null;
  String defaultValue=null;
  SelectItemOption<String> option;
  while (i.hasNext()) {
    LocaleConfig config=i.next();
    Locale locale=config.getLocale();
    language=locale.getLanguage();
    country=locale.getCountry();
    if (country != null && country.length() > 0) {
      language=language + ""String_Node_Str"" + country;
    }
    ResourceBundle localeResourceBundle;
    displayName=null;
    try {
      localeResourceBundle=getResourceBundle(currentLocale);
      String key=""String_Node_Str"" + language;
      String translation=localeResourceBundle.getString(key);
      displayName=translation;
    }
 catch (    MissingResourceException e) {
      displayName=capitalizeFirstLetter(locale.getDisplayName(currentLocale));
    }
catch (    Exception e) {
    }
    option=new SelectItemOption<String>(displayName,language);
    if (locale.getDisplayName().equals(currentLocale.getDisplayName())) {
      option.setSelected(true);
      defaultValue=language;
    }
    lang.add(option);
  }
  Collections.sort(lang,new LanguagesComparator());
  langSelectBox.setOptions(lang);
  langSelectBox.setValue(defaultValue);
}","private void initLanguageSelectBox(UIFormSelectBox langSelectBox){
  List<SelectItemOption<String>> lang=new ArrayList<SelectItemOption<String>>();
  LocaleConfigService localeService=getApplicationComponent(LocaleConfigService.class);
  Locale currentLocale=((PortletRequestContext)WebuiRequestContext.getCurrentInstance()).getLocale();
  Iterator<LocaleConfig> i=localeService.getLocalConfigs().iterator();
  String displayName=null;
  String language=null;
  String country=null;
  String defaultValue=null;
  SelectItemOption<String> option;
  while (i.hasNext()) {
    LocaleConfig config=i.next();
    Locale locale=config.getLocale();
    language=locale.getLanguage();
    country=locale.getCountry();
    if (country != null && country.length() > 0) {
      language=language + ""String_Node_Str"" + country;
    }
    ResourceBundle localeResourceBundle;
    displayName=null;
    try {
      localeResourceBundle=getResourceBundle(currentLocale);
      String key=""String_Node_Str"" + language;
      String translation=localeResourceBundle.getString(key);
      displayName=translation;
    }
 catch (    MissingResourceException e) {
      displayName=capitalizeFirstLetter(locale.getDisplayName(currentLocale));
    }
catch (    Exception e) {
      LOG.debug(""String_Node_Str"");
    }
    option=new SelectItemOption<String>(displayName,language);
    if (locale.getDisplayName().equals(currentLocale.getDisplayName())) {
      option.setSelected(true);
      defaultValue=language;
    }
    lang.add(option);
  }
  Collections.sort(lang,new LanguagesComparator());
  langSelectBox.setOptions(lang);
  langSelectBox.setValue(defaultValue);
}",0.988997555012225
102484,"public static String getRestUrl(String type,String objectId1,String objectId2){
  String baseUrl=getBaseRestUrl();
  return new StringBuffer(baseUrl).append(""String_Node_Str"").append(type).append(""String_Node_Str"").append(objectId1).append(""String_Node_Str"").append(objectId2).toString();
}","/** 
 * Gets full rest url
 * @param type
 * @param objectId1
 * @param objectId2
 * @return
 */
public static String getRestUrl(String type,String objectId1,String objectId2){
  String baseUrl=getBaseRestUrl();
  return new StringBuffer(baseUrl).append(""String_Node_Str"").append(type).append(""String_Node_Str"").append(objectId1).append(""String_Node_Str"").append(objectId2).toString();
}",0.8567208271787297
102485,"@Override public MessageInfo buildMessageInfo(NotificationMessage message){
  MessageInfo messageInfo=new MessageInfo();
  messageInfo.setFrom(getFrom(message)).setTo(getTo(message));
  ProviderData provider=providerService.getProvider(message.getProviderType());
  String language=getLanguage(message);
  String body=getTemplate(provider,language);
  String subject=getSubject(provider,language);
  PROVIDER_TYPE type=PROVIDER_TYPE.valueOf(message.getProviderType());
  try {
switch (type) {
case ActivityMentionProvider:
{
        String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
        ExoSocialActivity activity=activityManager.getActivity(activityId);
        Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
        messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
        break;
      }
case ActivityCommentProvider:
{
      String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
      ExoSocialActivity activity=activityManager.getActivity(activityId);
      ExoSocialActivity parentActivity=activityManager.getParentActivity(activity);
      Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
      messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",parentActivity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
      break;
    }
case ActivityLikeProvider:
{
    String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
    ExoSocialActivity activity=activityManager.getActivity(activityId);
    Identity identity=identityManager.getIdentity(message.getFrom(),true);
    messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
    break;
  }
case ActivityPostProvider:
{
  String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
  ExoSocialActivity activity=activityManager.getActivity(activityId);
  Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
  messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
  break;
}
case ActivityPostSpaceProvider:
{
String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
ExoSocialActivity activity=activityManager.getActivity(activityId);
Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
break;
}
case InvitedJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",space.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getAcceptInvitationToJoinSpaceUrl(space.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToJoinSpaceUrl(space.getId(),message.getSendToUserIds().get(0))));
break;
}
case RequestJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,message.getFrom(),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getValidateRequestToJoinSpaceUrl(space.getId(),identity.getRemoteId())));
break;
}
case NewUserJoinSocialIntranet:
{
break;
}
case ReceiceConnectionRequest:
{
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,message.getFrom(),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getConfirmInvitationToConnectUrl(message.getFrom(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToConnectUrl(message.getFrom(),message.getSendToUserIds().get(0))));
break;
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + provider.getType(),e);
return null;
}
return messageInfo;
}","@Override public MessageInfo buildMessageInfo(NotificationMessage message){
  MessageInfo messageInfo=new MessageInfo();
  messageInfo.setFrom(getFrom(message)).setTo(getTo(message));
  ProviderData provider=providerService.getProvider(message.getProviderType());
  String language=getLanguage(message);
  String body=getTemplate(provider,language);
  String subject=getSubject(provider,language);
  PROVIDER_TYPE type=PROVIDER_TYPE.valueOf(message.getProviderType());
  try {
switch (type) {
case ActivityMentionProvider:
{
        String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
        ExoSocialActivity activity=activityManager.getActivity(activityId);
        Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
        messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
        break;
      }
case ActivityCommentProvider:
{
      String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
      ExoSocialActivity activity=activityManager.getActivity(activityId);
      ExoSocialActivity parentActivity=activityManager.getParentActivity(activity);
      Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
      messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",parentActivity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
      break;
    }
case ActivityLikeProvider:
{
    String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
    ExoSocialActivity activity=activityManager.getActivity(activityId);
    Identity identity=identityManager.getIdentity(message.getFrom(),true);
    messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
    break;
  }
case ActivityPostProvider:
{
  String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
  ExoSocialActivity activity=activityManager.getActivity(activityId);
  Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
  messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
  break;
}
case ActivityPostSpaceProvider:
{
String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
ExoSocialActivity activity=activityManager.getActivity(activityId);
Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),message.getSendToUserIds().get(0))));
break;
}
case InvitedJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",LinkProviderUtils.getSpaceAvatarUrl(space)).replace(""String_Node_Str"",LinkProviderUtils.getAcceptInvitationToJoinSpaceUrl(space.getId(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToJoinSpaceUrl(space.getId(),message.getSendToUserIds().get(0))));
break;
}
case RequestJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,message.getFrom(),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getUserAvatarUrl(userProfile)).replace(""String_Node_Str"",LinkProviderUtils.getValidateRequestToJoinSpaceUrl(space.getId(),identity.getRemoteId())));
break;
}
case NewUserJoinSocialIntranet:
{
break;
}
case ReceiceConnectionRequest:
{
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,message.getFrom(),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getUserAvatarUrl(userProfile)).replace(""String_Node_Str"",LinkProviderUtils.getConfirmInvitationToConnectUrl(message.getFrom(),message.getSendToUserIds().get(0))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToConnectUrl(message.getFrom(),message.getSendToUserIds().get(0))));
break;
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + provider.getType(),e);
return null;
}
return messageInfo;
}",0.9896876401135856
102486,"@Override public boolean isValid(NotificationContext ctx){
  ExoSocialActivity activity=ctx.value(ACTIVITY);
  Identity id=Utils.getIdentityManager().getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),false);
  return id != null;
}","@Override public boolean isValid(NotificationContext ctx){
  ExoSocialActivity activity=ctx.value(ACTIVITY);
  if (!Utils.isSpaceActivity(activity))   return false;
  Identity id=Utils.getIdentityManager().getIdentity(activity.getPosterId(),true);
  return !id.getRemoteId().equals(activity.getStreamOwner());
}",0.6524822695035462
102487,"@Override public NotificationMessage execute(NotificationContext ctx){
  try {
    ExoSocialActivity activity=ctx.value(ACTIVITY);
    Identity id=Utils.getIdentityManager().getIdentity(activity.getStreamOwner(),false);
    Space space=Utils.getSpaceService().getSpaceByPrettyName(id.getRemoteId());
    return NotificationMessage.getInstance().setProviderType(PROVIDER_TYPE).setFrom(Utils.getUserId(activity.getPosterId())).addOwnerParameter(""String_Node_Str"",activity.getId()).setSendToUserIds(Arrays.asList(space.getMembers()));
  }
 catch (  Exception e) {
    return null;
  }
}","@Override public NotificationMessage execute(NotificationContext ctx){
  try {
    ExoSocialActivity activity=ctx.value(ACTIVITY);
    Identity id=Utils.getIdentityManager().getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),false);
    Space space=Utils.getSpaceService().getSpaceByPrettyName(id.getRemoteId());
    return NotificationMessage.getInstance().setProviderType(PROVIDER_TYPE).setFrom(Utils.getUserId(activity.getPosterId())).addOwnerParameter(""String_Node_Str"",activity.getId()).setSendToUserIds(Utils.getDestinataires(activity,space));
  }
 catch (  Exception e) {
    return null;
  }
}",0.8988391376451078
102488,"public void testSaveComment() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  ExoSocialActivity comment=new ExoSocialActivityImpl();
  comment.setTitle(""String_Node_Str"");
  comment.setUserId(demoIdentity.getId());
  activityManager.saveComment(activity,comment);
  Collection<NotificationMessage> messages=Utils.getSocialEmailStorage().emails();
  assertEquals(2,messages.size());
  NotificationMessage message=messages.iterator().next();
  MessageInfo info=buildMessageInfo(message.setTo(""String_Node_Str""));
  assertEquals(""String_Node_Str"" + demoIdentity.getProfile().getFullName(),info.getSubject());
  assertEquals(""String_Node_Str"" + activity.getTitle(),info.getBody());
}","public void testSaveComment() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activity.setUserId(demoIdentity.getId());
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  ExoSocialActivity comment=new ExoSocialActivityImpl();
  comment.setTitle(""String_Node_Str"");
  comment.setUserId(demoIdentity.getId());
  activityManager.saveComment(activity,comment);
  Collection<NotificationMessage> messages=Utils.getSocialEmailStorage().emails();
  assertEquals(2,messages.size());
  NotificationMessage message=messages.iterator().next();
  MessageInfo info=buildMessageInfo(message.setTo(""String_Node_Str""));
  assertEquals(""String_Node_Str"" + demoIdentity.getProfile().getFullName(),info.getSubject());
  assertEquals(""String_Node_Str"" + activity.getTitle(),info.getBody());
}",0.9745664739884392
102489,"public void testSaveActivity() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  assertNotNull(activity.getId());
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
  ExoSocialActivity got=activityManager.getActivity(activity.getId());
  assertEquals(activity.getId(),got.getId());
  assertEquals(activity.getTitle(),got.getTitle());
  ExoSocialActivity act=new ExoSocialActivityImpl();
  act.setTitle(""String_Node_Str"");
  activityManager.saveActivity(rootIdentity,act);
  tearDownActivityList.add(act);
  assertNotNull(act.getId());
  assertEquals(2,Utils.getSocialEmailStorage().emails().size());
}","public void testSaveActivity() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activity.setUserId(demoIdentity.getId());
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  assertNotNull(activity.getId());
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
  ExoSocialActivity got=activityManager.getActivity(activity.getId());
  assertEquals(activity.getId(),got.getId());
  assertEquals(activity.getTitle(),got.getTitle());
  ExoSocialActivity act=new ExoSocialActivityImpl();
  act.setTitle(""String_Node_Str"");
  act.setUserId(maryIdentity.getId());
  activityManager.saveActivity(rootIdentity,act);
  tearDownActivityList.add(act);
  assertNotNull(act.getId());
  assertEquals(2,Utils.getSocialEmailStorage().emails().size());
  Space space=getSpaceInstance(1);
  Identity spaceIdentity=CommonsUtils.getService(IdentityManager.class).getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName(),false);
  ExoSocialActivity spaceActivity=new ExoSocialActivityImpl();
  spaceActivity.setTitle(""String_Node_Str"");
  spaceActivity.setUserId(demoIdentity.getId());
  activityManager.saveActivity(spaceIdentity,spaceActivity);
  tearDownActivityList.add(spaceActivity);
  Collection<NotificationMessage> messages=Utils.getSocialEmailStorage().emails();
  assertEquals(1,messages.size());
  assertEquals(1,messages.iterator().next().getSendToUserIds().size());
  space.setMembers(new String[]{""String_Node_Str"",""String_Node_Str""});
  spaceService.saveSpace(space,false);
  ExoSocialActivity spaceActivity2=new ExoSocialActivityImpl();
  spaceActivity2.setTitle(""String_Node_Str"");
  spaceActivity2.setUserId(demoIdentity.getId());
  activityManager.saveActivity(spaceIdentity,spaceActivity2);
  tearDownActivityList.add(spaceActivity2);
  messages=Utils.getSocialEmailStorage().emails();
  assertEquals(1,messages.size());
  assertEquals(3,messages.iterator().next().getSendToUserIds().size());
  spaceService.deleteSpace(space);
}",0.5469904963041182
102490,"public void testLikeActivity() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
  activityManager.saveLike(activity,demoIdentity);
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
}","public void testLikeActivity() throws Exception {
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(""String_Node_Str"");
  activity.setUserId(demoIdentity.getId());
  activityManager.saveActivity(rootIdentity,activity);
  tearDownActivityList.add(activity);
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
  activityManager.saveLike(activity,demoIdentity);
  assertEquals(1,Utils.getSocialEmailStorage().emails().size());
}",0.950561797752809
102491,"@GET @Path(""String_Node_Str"") public Response ignoreInvitationToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  getRelationshipManager().deny(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserConnectionsYoursUri(receiver.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response ignoreInvitationToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  if (sender == null || receiver == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getRelationshipManager().deny(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserConnectionsYoursUri(receiver.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9211956521739132
102492,"@GET @Path(""String_Node_Str"") public Response viewFullDiscussion(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String activityId) throws Exception {
  checkAuthenticatedRequest();
  ExoSocialActivity activity=getActivityManager().getActivity(activityId);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,true);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(identity.getRemoteId()) + ACTIVITY_ID_PREFIX+ activity.getId();
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response viewFullDiscussion(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String activityId) throws Exception {
  checkAuthenticatedRequest();
  ExoSocialActivity activity=getActivityManager().getActivity(activityId);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,true);
  if (identity == null || activity == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(identity.getRemoteId()) + ACTIVITY_ID_PREFIX+ activity.getId();
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9120715350223548
102493,"@GET @Path(""String_Node_Str"") public Response confirmInvitationToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  getRelationshipManager().confirm(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(sender.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response confirmInvitationToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  if (sender == null || receiver == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getRelationshipManager().confirm(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(sender.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9205479452054794
102494,"@GET @Path(""String_Node_Str"") public Response inviteToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  getRelationshipManager().inviteToConnect(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserProfileUri(receiver.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response inviteToConnect(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String senderId,@PathParam(""String_Node_Str"") String receiverId) throws Exception {
  checkAuthenticatedRequest();
  Identity sender=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,senderId,true);
  Identity receiver=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,receiverId,true);
  if (sender == null || receiver == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getRelationshipManager().inviteToConnect(sender,receiver);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserProfileUri(receiver.getRemoteId());
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9203296703296704
102495,"@GET @Path(""String_Node_Str"") public Response ignoreInvitationToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  getSpaceService().removeInvitedUser(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName());
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response ignoreInvitationToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  if (space == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getSpaceService().removeInvitedUser(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName());
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9230769230769232
102496,"@GET @Path(""String_Node_Str"") public Response replyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String activityId) throws Exception {
  checkAuthenticatedRequest();
  ExoSocialActivity activity=getActivityManager().getActivity(activityId);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,true);
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(identity.getRemoteId()) + ACTIVITY_ID_PREFIX+ activity.getId();
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response replyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String activityId) throws Exception {
  checkAuthenticatedRequest();
  ExoSocialActivity activity=getActivityManager().getActivity(activityId);
  Identity identity=getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME,userId,true);
  if (identity == null || activity == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  String targetURL=Util.getBaseUrl() + LinkProvider.getUserActivityUri(identity.getRemoteId()) + ACTIVITY_ID_PREFIX+ activity.getId();
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9114114114114116
102497,"@GET @Path(""String_Node_Str"") public Response validateRequestToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  getSpaceService().addMember(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName()) + ""String_Node_Str"";
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response validateRequestToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  if (space == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getSpaceService().addMember(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName()) + ""String_Node_Str"";
  return Response.seeOther(URI.create(targetURL)).build();
}",0.92442322991249
102498,"@GET @Path(""String_Node_Str"") public Response acceptInvitationToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  getSpaceService().addMember(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName());
  return Response.seeOther(URI.create(targetURL)).build();
}","@GET @Path(""String_Node_Str"") public Response acceptInvitationToJoinSpace(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String spaceId,@PathParam(""String_Node_Str"") String userId) throws Exception {
  checkAuthenticatedRequest();
  Space space=getSpaceService().getSpaceById(spaceId);
  if (space == null) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  getSpaceService().addMember(space,userId);
  String targetURL=Util.getBaseUrl() + LinkProvider.getActivityUriForSpace(space.getGroupId().replace(""String_Node_Str"",""String_Node_Str""),space.getPrettyName());
  return Response.seeOther(URI.create(targetURL)).build();
}",0.9220672682526662
102499,"public void initSettingForm(){
  activeProviders=CommonsUtils.getService(ProviderSettingService.class).getActiveProviderIds(isAdmin());
  String checkBoxId;
  for (  String providerId : activeProviders) {
    for (int i=0; i < frequencies.length; ++i) {
      checkBoxId=getCheckBoxId(providerId,frequencies[i].getName());
      addUIFormInput(new UICheckBoxInput(checkBoxId,checkBoxId,false));
    }
  }
}","public void initSettingForm(){
  UserNotificationSetting notificationSetting=getUserNotificationService().getUserNotificationSetting(Utils.getOwnerRemoteId());
  activeProviders=CommonsUtils.getService(ProviderSettingService.class).getActiveProviderIds(isAdmin());
  String checkBoxId;
  for (  String providerId : activeProviders) {
    for (int i=0; i < frequencies.length; ++i) {
      checkBoxId=getCheckBoxId(providerId,frequencies[i].getName());
      addUIFormInput(new UICheckBoxInput(checkBoxId,checkBoxId,isCheckAcitve(notificationSetting,frequencies[i].getName(),providerId)));
    }
  }
}",0.7972166998011928
102500,"/** 
 * Records an activity based on space lifecyle event and the activity object.
 * @param event the space lifecyle event
 * @param activityMessage the message of activity object
 * @param titleId the title of activity (comment)
 * @param templateParams 
 */
private void recordActivity(SpaceLifeCycleEvent event,String activityMessage,String titleId,Map<String,String> templateParams){
  Space space=event.getSpace();
  Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName(),false);
  Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,event.getTarget(),false);
  String activityId=getStorage().getProfileActivityId(spaceIdentity.getProfile(),Profile.AttachedActivityType.SPACE);
  if (activityId != null) {
    try {
      if (!""String_Node_Str"".equals(activityMessage)) {
        ExoSocialActivity comment=createComment(activityMessage,titleId,null,SPACE_APP_ID,identity,templateParams);
        ExoSocialActivity activity=(ExoSocialActivityImpl)activityManager.getActivity(activityId);
        activity.setTitle(space.getMembers().length + ""String_Node_Str"");
        activityManager.updateActivity(activity);
        activityManager.saveComment(activity,comment);
      }
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"");
      activityId=null;
    }
  }
  if (activityId == null) {
    ExoSocialActivity activity=new ExoSocialActivityImpl();
    activity.setType(SPACE_PROFILE_ACTIVITY);
    activity.setTitle(""String_Node_Str"");
    if (Space.HIDDEN.equals(space.getVisibility())) {
      activity.isHidden(true);
    }
    activityManager.saveActivityNoReturn(spaceIdentity,activity);
    getStorage().updateProfileActivityId(spaceIdentity,activity.getId(),Profile.AttachedActivityType.SPACE);
    if (SPACE_CREATED_TITLE_ID.equals(titleId))     titleId=USER_JOINED_TITLE_ID;
    ExoSocialActivity comment=createComment(activityMessage,titleId,null,SPACE_APP_ID,identity,templateParams);
    activityManager.saveComment(activity,comment);
  }
}","/** 
 * Records an activity based on space lifecyle event and the activity object.
 * @param event the space lifecyle event
 * @param activityMessage the message of activity object
 * @param titleId the title of activity (comment)
 * @param templateParams 
 */
private void recordActivity(SpaceLifeCycleEvent event,String activityMessage,String titleId,Map<String,String> templateParams){
  Space space=event.getSpace();
  Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName(),false);
  Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,event.getTarget(),false);
  String activityId=getStorage().getProfileActivityId(spaceIdentity.getProfile(),Profile.AttachedActivityType.SPACE);
  if (activityId != null) {
    try {
      if (!""String_Node_Str"".equals(activityMessage)) {
        ExoSocialActivity comment=createComment(activityMessage,titleId,null,SPACE_APP_ID,identity,templateParams);
        ExoSocialActivity activity=(ExoSocialActivityImpl)activityManager.getActivity(activityId);
        activityManager.saveComment(activity,comment);
      }
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"");
      activityId=null;
    }
  }
  if (activityId == null) {
    ExoSocialActivity activity=new ExoSocialActivityImpl();
    activity.setType(SPACE_PROFILE_ACTIVITY);
    activity.setTitle(""String_Node_Str"");
    if (Space.HIDDEN.equals(space.getVisibility())) {
      activity.isHidden(true);
    }
    activityManager.saveActivityNoReturn(spaceIdentity,activity);
    getStorage().updateProfileActivityId(spaceIdentity,activity.getId(),Profile.AttachedActivityType.SPACE);
    if (SPACE_CREATED_TITLE_ID.equals(titleId))     titleId=USER_JOINED_TITLE_ID;
    ExoSocialActivity comment=createComment(activityMessage,titleId,null,SPACE_APP_ID,identity,templateParams);
    activityManager.saveComment(activity,comment);
  }
}",0.9690154922538732
102501,"/** 
 * @throws Exception
 */
public void testSpaceCreation() throws Exception {
  Identity rootIdentity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,""String_Node_Str"");
  Space space=new Space();
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setGroupId(""String_Node_Str"");
  space.setVisibility(Space.PRIVATE);
  spaceService.saveSpace(space,true);
  assertNotNull(""String_Node_Str"",space.getId());
  SpaceLifeCycleEvent event=new SpaceLifeCycleEvent(space,rootIdentity.getRemoteId(),SpaceLifeCycleEvent.Type.SPACE_CREATED);
  spaceActivityPublisher.spaceCreated(event);
  Thread.sleep(3000);
  Identity identity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName());
  List<ExoSocialActivity> activities=activityManager.getActivities(identity);
  assertEquals(1,activities.size());
  tearDownActivityList.add(activities.get(0));
  assertTrue(activities.get(0).getTitle().contains(space.getDisplayName()));
  assertTrue(activities.get(0).getTitle().contains(""String_Node_Str""));
  ActivityStream activityStream=activities.get(0).getActivityStream();
  assertNotNull(""String_Node_Str"",activityStream.getId());
  assertEquals(""String_Node_Str"" + space.getPrettyName(),space.getPrettyName(),activityStream.getPrettyId());
  assertEquals(ActivityStream.Type.SPACE,activityStream.getType());
  assertEquals(SpaceIdentityProvider.NAME,activityStream.getType().toString());
  spaceService.deleteSpace(space);
  identityManager.deleteIdentity(rootIdentity);
}","/** 
 * @throws Exception
 */
public void testSpaceCreation() throws Exception {
  Identity rootIdentity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,""String_Node_Str"");
  Space space=new Space();
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setGroupId(""String_Node_Str"");
  space.setVisibility(Space.PRIVATE);
  spaceService.saveSpace(space,true);
  assertNotNull(""String_Node_Str"",space.getId());
  SpaceLifeCycleEvent event=new SpaceLifeCycleEvent(space,rootIdentity.getRemoteId(),SpaceLifeCycleEvent.Type.SPACE_CREATED);
  spaceActivityPublisher.spaceCreated(event);
  Thread.sleep(3000);
  Identity identity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,space.getPrettyName());
  List<ExoSocialActivity> activities=activityManager.getActivities(identity);
  assertEquals(1,activities.size());
  tearDownActivityList.add(activities.get(0));
  ActivityStream activityStream=activities.get(0).getActivityStream();
  assertNotNull(""String_Node_Str"",activityStream.getId());
  assertEquals(""String_Node_Str"" + space.getPrettyName(),space.getPrettyName(),activityStream.getPrettyId());
  assertEquals(ActivityStream.Type.SPACE,activityStream.getType());
  assertEquals(SpaceIdentityProvider.NAME,activityStream.getType().toString());
  spaceService.deleteSpace(space);
  identityManager.deleteIdentity(rootIdentity);
}",0.9498822737975108
102502,"public SpaceFilterKey(String userId,SpaceFilter filter,SpaceType type){
  this.userId=userId;
  if (filter != null) {
    this.firstCharacterOfSpaceName=filter.getFirstCharacterOfSpaceName();
    this.spaceNameSearchCondition=filter.getSpaceNameSearchCondition();
  }
  this.type=type;
  this.sorting=filter.getSorting();
}","public SpaceFilterKey(String userId,SpaceFilter filter,SpaceType type){
  this.userId=userId;
  if (filter != null) {
    this.firstCharacterOfSpaceName=filter.getFirstCharacterOfSpaceName();
    this.spaceNameSearchCondition=filter.getSpaceNameSearchCondition();
    this.sorting=filter.getSorting();
  }
  this.type=type;
}",0.8858024691358025
102503,"/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilter(String,ProfileFilter,int,int,boolean)}
 */
@MaxQueryNumber(600) public void testFindManyIdentitiesByProfileFilter() throws Exception {
  String providerId=""String_Node_Str"";
  int total=10;
  for (int i=0; i < total; i++) {
    String remoteId=""String_Node_Str"" + i;
    Identity identity=new Identity(providerId,remoteId);
    identityStorage.saveIdentity(identity);
    Profile profile=new Profile(identity);
    profile.setProperty(Profile.FIRST_NAME,""String_Node_Str"" + i);
    profile.setProperty(Profile.LAST_NAME,""String_Node_Str"");
    profile.setProperty(Profile.FULL_NAME,""String_Node_Str"" + i + ""String_Node_Str""+ ""String_Node_Str""+ i);
    profile.setProperty(Profile.POSITION,""String_Node_Str"");
    profile.setProperty(Profile.GENDER,""String_Node_Str"");
    identity.setProfile(profile);
    tearDownIdentityList.add(identity);
    identityStorage.saveProfile(profile);
  }
  final ProfileFilter filter=new ProfileFilter();
  filter.setPosition(""String_Node_Str"");
  filter.setName(""String_Node_Str"");
  final List<Identity> result=identityStorage.getIdentitiesByProfileFilter(providerId,filter,0,total,false);
  assertEquals(total,result.size());
}","/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilter(String,ProfileFilter,int,int,boolean)}
 */
@MaxQueryNumber(630) public void testFindManyIdentitiesByProfileFilter() throws Exception {
  String providerId=""String_Node_Str"";
  int total=10;
  for (int i=0; i < total; i++) {
    String remoteId=""String_Node_Str"" + i;
    Identity identity=new Identity(providerId,remoteId);
    identityStorage.saveIdentity(identity);
    Profile profile=new Profile(identity);
    profile.setProperty(Profile.FIRST_NAME,""String_Node_Str"" + i);
    profile.setProperty(Profile.LAST_NAME,""String_Node_Str"");
    profile.setProperty(Profile.FULL_NAME,""String_Node_Str"" + i + ""String_Node_Str""+ ""String_Node_Str""+ i);
    profile.setProperty(Profile.POSITION,""String_Node_Str"");
    profile.setProperty(Profile.GENDER,""String_Node_Str"");
    identity.setProfile(profile);
    tearDownIdentityList.add(identity);
    identityStorage.saveProfile(profile);
  }
  final ProfileFilter filter=new ProfileFilter();
  filter.setPosition(""String_Node_Str"");
  filter.setName(""String_Node_Str"");
  final List<Identity> result=identityStorage.getIdentitiesByProfileFilter(providerId,filter,0,total,false);
  assertEquals(total,result.size());
}",0.9991869918699188
102504,"/** 
 * Tests   {@link IdenityStorage#getIdentitiesByFirstCharaterOfNameCount(String,char)}
 */
@MaxQueryNumber(550) public void testGetIdentitiesByFirstCharacterOfNameCount() throws Exception {
  populateData();
  final ProfileFilter filter=new ProfileFilter();
  filter.setFirstCharacterOfName('F');
  int idsCount=identityStorage.getIdentitiesByFirstCharacterOfNameCount(""String_Node_Str"",filter);
  assertEquals(""String_Node_Str"" + idsCount,0,idsCount);
  filter.setFirstCharacterOfName('L');
  idsCount=identityStorage.getIdentitiesByFirstCharacterOfNameCount(""String_Node_Str"",filter);
  assertEquals(""String_Node_Str"" + idsCount,10,idsCount);
}","/** 
 * Tests   {@link IdenityStorage#getIdentitiesByFirstCharaterOfNameCount(String,char)}
 */
@MaxQueryNumber(570) public void testGetIdentitiesByFirstCharacterOfNameCount() throws Exception {
  populateData();
  final ProfileFilter filter=new ProfileFilter();
  filter.setFirstCharacterOfName('F');
  int idsCount=identityStorage.getIdentitiesByFirstCharacterOfNameCount(""String_Node_Str"",filter);
  assertEquals(""String_Node_Str"" + idsCount,0,idsCount);
  filter.setFirstCharacterOfName('L');
  idsCount=identityStorage.getIdentitiesByFirstCharacterOfNameCount(""String_Node_Str"",filter);
  assertEquals(""String_Node_Str"" + idsCount,10,idsCount);
}",0.998463901689708
102505,"@MaxQueryNumber(600) public void testGetSpaceMemberByProfileFilter() throws Exception {
  populateData();
  Space space=new Space();
  space.setApp(""String_Node_Str"");
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setRegistration(Space.OPEN);
  space.setDescription(""String_Node_Str"");
  space.setType(DefaultSpaceApplicationHandler.NAME);
  space.setVisibility(Space.PUBLIC);
  space.setPriority(Space.INTERMEDIATE_PRIORITY);
  space.setGroupId(""String_Node_Str"");
  space.setUrl(space.getPrettyName());
  String[] managers=new String[]{};
  String[] members=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] invitedUsers=new String[]{};
  String[] pendingUsers=new String[]{};
  space.setInvitedUsers(invitedUsers);
  space.setPendingUsers(pendingUsers);
  space.setManagers(managers);
  space.setMembers(members);
  spaceStorage.saveSpace(space,true);
  tearDownSpaceList.add(space);
  ProfileFilter profileFilter=new ProfileFilter();
  List<Identity> identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(2,identities.size());
  profileFilter.setName(""String_Node_Str"");
  identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(0,identities.size());
  profileFilter.setName(""String_Node_Str"");
  identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(1,identities.size());
}","@MaxQueryNumber(610) public void testGetSpaceMemberByProfileFilter() throws Exception {
  populateData();
  Space space=new Space();
  space.setApp(""String_Node_Str"");
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setRegistration(Space.OPEN);
  space.setDescription(""String_Node_Str"");
  space.setType(DefaultSpaceApplicationHandler.NAME);
  space.setVisibility(Space.PUBLIC);
  space.setPriority(Space.INTERMEDIATE_PRIORITY);
  space.setGroupId(""String_Node_Str"");
  space.setUrl(space.getPrettyName());
  String[] managers=new String[]{};
  String[] members=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] invitedUsers=new String[]{};
  String[] pendingUsers=new String[]{};
  space.setInvitedUsers(invitedUsers);
  space.setPendingUsers(pendingUsers);
  space.setManagers(managers);
  space.setMembers(members);
  spaceStorage.saveSpace(space,true);
  tearDownSpaceList.add(space);
  ProfileFilter profileFilter=new ProfileFilter();
  List<Identity> identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(2,identities.size());
  profileFilter.setName(""String_Node_Str"");
  identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(0,identities.size());
  profileFilter.setName(""String_Node_Str"");
  identities=identityStorage.getSpaceMemberIdentitiesByProfileFilter(space,profileFilter,Type.MEMBER,0,2);
  assertEquals(1,identities.size());
}",0.9993573264781492
102506,"/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilterCount(String,ProfileFilter)}
 */
@MaxQueryNumber(550) public void testGetIdentitiesByProfileFilterCount() throws Exception {
  populateData();
  ProfileFilter pf=new ProfileFilter();
  int idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
  pf.setName(""String_Node_Str"");
  idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
}","/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilterCount(String,ProfileFilter)}
 */
@MaxQueryNumber(570) public void testGetIdentitiesByProfileFilterCount() throws Exception {
  populateData();
  ProfileFilter pf=new ProfileFilter();
  int idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
  pf.setName(""String_Node_Str"");
  idsCount=identityStorage.getIdentitiesByProfileFilterCount(""String_Node_Str"",pf);
  assertEquals(10,idsCount);
}",0.9985632183908046
102507,"/** 
 * Tests   {@link IdenityStorage#getIdentitiesCount(String)}
 */
@MaxQueryNumber(550) public void testGetIdentitiesCount() throws Exception {
  populateData();
  int identitiesCount=identityStorage.getIdentitiesCount(OrganizationIdentityProvider.NAME);
  assertEquals(""String_Node_Str"" + identitiesCount,10,identitiesCount);
}","/** 
 * Tests   {@link IdenityStorage#getIdentitiesCount(String)}
 */
@MaxQueryNumber(570) public void testGetIdentitiesCount() throws Exception {
  populateData();
  int identitiesCount=identityStorage.getIdentitiesCount(OrganizationIdentityProvider.NAME);
  assertEquals(""String_Node_Str"" + identitiesCount,10,identitiesCount);
}",0.9969788519637462
102508,"/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilterCount(String,ProfileFilter,int,int,boolean)}
 */
@MaxQueryNumber(600) public void testGetIdentitiesByProfileFilterAccessList() throws Exception {
}","/** 
 * Tests   {@link IdenityStorage#getIdentitiesByProfileFilterCount(String,ProfileFilter,int,int,boolean)}
 */
@MaxQueryNumber(630) public void testGetIdentitiesByProfileFilterAccessList() throws Exception {
}",0.9953051643192488
102509,"@MaxQueryNumber(50) public void testLoadProfileByReloadCreatedProfileNode() throws Exception {
  String providerId=""String_Node_Str"";
  String remoteId=""String_Node_Str"";
  Identity identity=new Identity(providerId,remoteId);
  identityStorage.saveIdentity(identity);
  String profileId;
{
    Profile profile=new Profile(identity);
    assertFalse(profile.hasChanged());
    profile=identityStorage.loadProfile(profile);
    assertFalse(profile.hasChanged());
    profileId=profile.getId();
  }
{
    Profile profile=new Profile(identity);
    assertFalse(profile.hasChanged());
    profile=identityStorage.loadProfile(profile);
    assertFalse(profile.hasChanged());
    assertEquals(profileId,profile.getId());
  }
  tearDownIdentityList.add(identityStorage.findIdentity(OrganizationIdentityProvider.NAME,remoteId));
}","@MaxQueryNumber(60) public void testLoadProfileByReloadCreatedProfileNode() throws Exception {
  String providerId=""String_Node_Str"";
  String remoteId=""String_Node_Str"";
  Identity identity=new Identity(providerId,remoteId);
  identityStorage.saveIdentity(identity);
  String profileId;
{
    Profile profile=new Profile(identity);
    assertFalse(profile.hasChanged());
    profile=identityStorage.loadProfile(profile);
    assertFalse(profile.hasChanged());
    profileId=profile.getId();
  }
{
    Profile profile=new Profile(identity);
    assertFalse(profile.hasChanged());
    profile=identityStorage.loadProfile(profile);
    assertFalse(profile.hasChanged());
    assertEquals(profileId,profile.getId());
  }
  tearDownIdentityList.add(identityStorage.findIdentity(OrganizationIdentityProvider.NAME,remoteId));
}",0.9987819732034104
102510,"@MaxQueryNumber(50) public void testFindIdentityByNotExistName() throws Exception {
  String providerId=""String_Node_Str"";
  String remoteId=""String_Node_Str"";
  Identity identity=new Identity(providerId,remoteId);
  identityStorage.saveIdentity(identity);
  Profile profile=new Profile(identity);
  profile.setProperty(Profile.FIRST_NAME,""String_Node_Str"");
  profile.setProperty(Profile.LAST_NAME,""String_Node_Str"");
  profile.setProperty(Profile.FULL_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  identityStorage.saveProfile(profile);
  identity.setProfile(profile);
  tearDownIdentityList.add(identity);
  final ProfileFilter filter=new ProfileFilter();
  filter.setName(""String_Node_Str"");
  final List<Identity> result=identityStorage.getIdentitiesByProfileFilter(providerId,filter,0,1,false);
  assertEquals(0,result.size());
}","@MaxQueryNumber(60) public void testFindIdentityByNotExistName() throws Exception {
  String providerId=""String_Node_Str"";
  String remoteId=""String_Node_Str"";
  Identity identity=new Identity(providerId,remoteId);
  identityStorage.saveIdentity(identity);
  Profile profile=new Profile(identity);
  profile.setProperty(Profile.FIRST_NAME,""String_Node_Str"");
  profile.setProperty(Profile.LAST_NAME,""String_Node_Str"");
  profile.setProperty(Profile.FULL_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  identityStorage.saveProfile(profile);
  identity.setProfile(profile);
  tearDownIdentityList.add(identity);
  final ProfileFilter filter=new ProfileFilter();
  filter.setName(""String_Node_Str"");
  final List<Identity> result=identityStorage.getIdentitiesByProfileFilter(providerId,filter,0,1,false);
  assertEquals(0,result.size());
}",0.9988304093567252
102511,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.2
 */
@MaxQueryNumber(700) public void testGetConnectionsCountByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.CONFIRMED);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getConnectionsCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getConnectionsCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.2
 */
@MaxQueryNumber(710) public void testGetConnectionsCountByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.CONFIRMED);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getConnectionsCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getConnectionsCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}",0.9987562189054726
102512,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsByFilter(providerId,Identity,ProfileFilter)}in case Identity had no connection yet
 * @throws Exception
 */
@MaxQueryNumber(550) public void testGetConnectionsByFilterEmpty() throws Exception {
  populateData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),0,identities.size());
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsByFilter(providerId,Identity,ProfileFilter)}in case Identity had no connection yet
 * @throws Exception
 */
@MaxQueryNumber(570) public void testGetConnectionsByFilterEmpty() throws Exception {
  populateData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),0,identities.size());
}",0.9982847341337908
102513,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingRelationshipsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(60) public void testGetIncomingRelationshipsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.PENDING);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship maryToJohnRelationship=new Relationship(maryIdentity,johnIdentity,Type.PENDING);
  maryToJohnRelationship=relationshipStorage.saveRelationship(maryToJohnRelationship);
  assertNotNull(""String_Node_Str"",maryToJohnRelationship.getId());
  Relationship demoToJohnRelationship=new Relationship(demoIdentity,johnIdentity,Type.CONFIRMED);
  demoToJohnRelationship=relationshipStorage.saveRelationship(demoToJohnRelationship);
  assertNotNull(""String_Node_Str"",demoToJohnRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getIncomingRelationships(johnIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getIncomingRelationshipsCount(johnIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(maryToJohnRelationship);
  tearDownRelationshipList.add(demoToJohnRelationship);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingRelationshipsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(70) public void testGetIncomingRelationshipsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.PENDING);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship maryToJohnRelationship=new Relationship(maryIdentity,johnIdentity,Type.PENDING);
  maryToJohnRelationship=relationshipStorage.saveRelationship(maryToJohnRelationship);
  assertNotNull(""String_Node_Str"",maryToJohnRelationship.getId());
  Relationship demoToJohnRelationship=new Relationship(demoIdentity,johnIdentity,Type.CONFIRMED);
  demoToJohnRelationship=relationshipStorage.saveRelationship(demoToJohnRelationship);
  assertNotNull(""String_Node_Str"",demoToJohnRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getIncomingRelationships(johnIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getIncomingRelationshipsCount(johnIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(maryToJohnRelationship);
  tearDownRelationshipList.add(demoToJohnRelationship);
}",0.9993355481727576
102514,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(700) public void testGetOutgoingCountByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.PENDING);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getOutgoingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getOutgoingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(710) public void testGetOutgoingCountByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.PENDING);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getOutgoingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getOutgoingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}",0.99873417721519
102515,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(700) public void testGetIncomingByFilter() throws Exception {
  populateData();
  populateRelationshipIncommingData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getIncomingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getIncomingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),1,identities.size());
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(710) public void testGetIncomingByFilter() throws Exception {
  populateData();
  populateRelationshipIncommingData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getIncomingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getIncomingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),1,identities.size());
}",0.9987834549878344
102516,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(700) public void testGetIncomingCountByFilter() throws Exception {
  populateData();
  populateRelationshipIncommingData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getIncomingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getIncomingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getIncomingCountByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(710) public void testGetIncomingCountByFilter() throws Exception {
  populateData();
  populateRelationshipIncommingData();
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  int countIdentities=relationshipStorage.getIncomingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",8,countIdentities);
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  countIdentities=relationshipStorage.getIncomingCountByFilter(tearDownIdentityList.get(0),pf);
  assertEquals(""String_Node_Str"",1,countIdentities);
}",0.9987293519695044
102517,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingRelationshipsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(60) public void testGetOutgoingRelationshipsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.PENDING);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship rootToMaryRelationship=new Relationship(rootIdentity,maryIdentity,Type.PENDING);
  rootToMaryRelationship=relationshipStorage.saveRelationship(rootToMaryRelationship);
  assertNotNull(""String_Node_Str"",rootToMaryRelationship.getId());
  Relationship rootToDemoRelationship=new Relationship(rootIdentity,demoIdentity,Type.IGNORED);
  rootToDemoRelationship=relationshipStorage.saveRelationship(rootToDemoRelationship);
  assertNotNull(""String_Node_Str"",rootToDemoRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getOutgoingRelationships(rootIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getOutgoingRelationshipsCount(rootIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(rootToMaryRelationship);
  tearDownRelationshipList.add(rootToDemoRelationship);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingRelationshipsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(70) public void testGetOutgoingRelationshipsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.PENDING);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship rootToMaryRelationship=new Relationship(rootIdentity,maryIdentity,Type.PENDING);
  rootToMaryRelationship=relationshipStorage.saveRelationship(rootToMaryRelationship);
  assertNotNull(""String_Node_Str"",rootToMaryRelationship.getId());
  Relationship rootToDemoRelationship=new Relationship(rootIdentity,demoIdentity,Type.IGNORED);
  rootToDemoRelationship=relationshipStorage.saveRelationship(rootToDemoRelationship);
  assertNotNull(""String_Node_Str"",rootToDemoRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getOutgoingRelationships(rootIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getOutgoingRelationshipsCount(rootIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(rootToMaryRelationship);
  tearDownRelationshipList.add(rootToDemoRelationship);
}",0.9993346640053228
102518,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(700) public void testGetConnectionsByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.CONFIRMED);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),1,identities.size());
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(710) public void testGetConnectionsByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.CONFIRMED);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getConnectionsByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"" + identities.size(),1,identities.size());
}",0.99880810488677
102519,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(60) public void testGetConnectionsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.CONFIRMED);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship maryToRootRelationship=new Relationship(maryIdentity,rootIdentity,Type.CONFIRMED);
  maryToRootRelationship=relationshipStorage.saveRelationship(maryToRootRelationship);
  assertNotNull(""String_Node_Str"",maryToRootRelationship.getId());
  Relationship rootToDemoRelationship=new Relationship(rootIdentity,demoIdentity,Type.PENDING);
  rootToDemoRelationship=relationshipStorage.saveRelationship(rootToDemoRelationship);
  assertNotNull(""String_Node_Str"",rootToDemoRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getConnections(rootIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getConnectionsCount(rootIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(maryToRootRelationship);
  tearDownRelationshipList.add(rootToDemoRelationship);
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getConnectionsCount(Identity)}
 * @throws Exception
 * @since 1.2.0-Beta3
 */
@MaxQueryNumber(70) public void testGetConnectionsCount() throws Exception {
  Relationship rootToJohnRelationship=new Relationship(rootIdentity,johnIdentity,Type.CONFIRMED);
  rootToJohnRelationship=relationshipStorage.saveRelationship(rootToJohnRelationship);
  assertNotNull(""String_Node_Str"",rootToJohnRelationship.getId());
  Relationship maryToRootRelationship=new Relationship(maryIdentity,rootIdentity,Type.CONFIRMED);
  maryToRootRelationship=relationshipStorage.saveRelationship(maryToRootRelationship);
  assertNotNull(""String_Node_Str"",maryToRootRelationship.getId());
  Relationship rootToDemoRelationship=new Relationship(rootIdentity,demoIdentity,Type.PENDING);
  rootToDemoRelationship=relationshipStorage.saveRelationship(rootToDemoRelationship);
  assertNotNull(""String_Node_Str"",rootToDemoRelationship.getId());
  List<Identity> listIdentities=relationshipStorage.getConnections(rootIdentity,0,10);
  assertNotNull(""String_Node_Str"",listIdentities);
  assertEquals(""String_Node_Str"",2,listIdentities.size());
  int count=relationshipStorage.getConnectionsCount(rootIdentity);
  assertEquals(""String_Node_Str"",2,count);
  tearDownRelationshipList.add(rootToJohnRelationship);
  tearDownRelationshipList.add(maryToRootRelationship);
  tearDownRelationshipList.add(rootToDemoRelationship);
}",0.9993183367416496
102520,"/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(700) public void testGetOutgoingByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.PENDING);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getOutgoingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"",8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getOutgoingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"",1,identities.size());
}","/** 
 * Test   {@link org.exoplatform.social.core.storage.api.RelationshipStorage#getOutgoingByFilter(providerId,Identity,ProfileFilter)}
 * @throws Exception
 * @since 1.2.3
 */
@MaxQueryNumber(710) public void testGetOutgoingByFilter() throws Exception {
  populateData();
  populateRelationshipData(Type.PENDING);
  ProfileFilter pf=new ProfileFilter();
  pf=buildProfileFilterWithExcludeIdentities(pf);
  List<Identity> identities=relationshipStorage.getOutgoingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"",8,identities.size());
  pf.setPosition(""String_Node_Str"");
  pf.setName(""String_Node_Str"");
  identities=relationshipStorage.getOutgoingByFilter(tearDownIdentityList.get(0),pf,0,20);
  assertEquals(""String_Node_Str"",1,identities.size());
}",0.9987261146496816
102521,"@MaxQueryNumber(500) public void testFindIdentityByFirstChar() throws Exception {
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Identity b2=addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Profile profile=storage.loadProfile(new Profile(b2));
  Map<String,String> xp=new HashMap<String,String>();
  List<Map<String,String>> xps=new ArrayList<Map<String,String>>();
  xp.put(Profile.EXPERIENCES_SKILLS,""String_Node_Str"");
  xps.add(xp);
  profile.setProperty(Profile.EXPERIENCES,xps);
  storage.saveProfile(profile);
  ProfileFilter filterA=createFilter('a',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterB=createFilter('b',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterC=createFilter('c',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterZ=createFilter('z',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterB2=createFilter('b',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",b2);
  ProfileFilter filterB2Skills=new ProfileFilter();
  filterB2Skills.setSkills(""String_Node_Str"");
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,-1,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,4,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,4,false).size());
  assertEquals(3,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,3,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,10,false).size());
  assertEquals(3,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB,0,10,false).size());
  assertEquals(0,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterC,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterZ,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2Skills,0,10,false).size());
  assertEquals(""String_Node_Str"",storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2Skills,0,10,false).get(0).getRemoteId());
}","@MaxQueryNumber(510) public void testFindIdentityByFirstChar() throws Exception {
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Identity b2=addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Profile profile=storage.loadProfile(new Profile(b2));
  Map<String,String> xp=new HashMap<String,String>();
  List<Map<String,String>> xps=new ArrayList<Map<String,String>>();
  xp.put(Profile.EXPERIENCES_SKILLS,""String_Node_Str"");
  xps.add(xp);
  profile.setProperty(Profile.EXPERIENCES,xps);
  storage.saveProfile(profile);
  ProfileFilter filterA=createFilter('a',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterB=createFilter('b',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterC=createFilter('c',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterZ=createFilter('z',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter filterB2=createFilter('b',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",b2);
  ProfileFilter filterB2Skills=new ProfileFilter();
  filterB2Skills.setSkills(""String_Node_Str"");
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,-1,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,4,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,4,false).size());
  assertEquals(3,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,3,false).size());
  assertEquals(4,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterA,0,10,false).size());
  assertEquals(3,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB,0,10,false).size());
  assertEquals(0,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterC,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterZ,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2Skills,0,10,false).size());
  assertEquals(""String_Node_Str"",storage.getIdentitiesByFirstCharacterOfName(""String_Node_Str"",filterB2Skills,0,10,false).get(0).getRemoteId());
}",0.9996628455832772
102522,"@MaxQueryNumber(350) public void testHardDeleteSpace() throws Exception {
  Identity user1=new Identity(""String_Node_Str"",""String_Node_Str"");
  Identity user2=new Identity(""String_Node_Str"",""String_Node_Str"");
  storage._createIdentity(user1);
  storage._createIdentity(user2);
  Space space=new Space();
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setMembers(new String[]{user1.getRemoteId()});
  space.setManagers(new String[]{user1.getRemoteId(),user2.getRemoteId()});
  space.setPendingUsers(new String[]{user1.getRemoteId()});
  space.setInvitedUsers(new String[]{user1.getRemoteId()});
  spaceStorage.saveSpace(space,true);
  storage._hardDeleteIdentity(user1);
  Identity got=storage._findIdentity(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,got.isDeleted());
  assertEquals(1,spaceStorage.getSpaceById(space.getId()).getMembers().length);
  assertEquals(user2.getRemoteId(),spaceStorage.getSpaceById(space.getId()).getMembers()[0]);
  assertEquals(1,spaceStorage.getSpaceById(space.getId()).getManagers().length);
  assertEquals(user2.getRemoteId(),spaceStorage.getSpaceById(space.getId()).getManagers()[0]);
  assertEquals(0,spaceStorage.getSpaceById(space.getId()).getPendingUsers().length);
  assertEquals(0,spaceStorage.getSpaceById(space.getId()).getInvitedUsers().length);
  spaceStorage.deleteSpace(space.getId());
  tearDownIdentityList.add(user1.getId());
  tearDownIdentityList.add(user2.getId());
}","@MaxQueryNumber(360) public void testHardDeleteSpace() throws Exception {
  Identity user1=new Identity(""String_Node_Str"",""String_Node_Str"");
  Identity user2=new Identity(""String_Node_Str"",""String_Node_Str"");
  storage._createIdentity(user1);
  storage._createIdentity(user2);
  Space space=new Space();
  space.setDisplayName(""String_Node_Str"");
  space.setPrettyName(space.getDisplayName());
  space.setMembers(new String[]{user1.getRemoteId()});
  space.setManagers(new String[]{user1.getRemoteId(),user2.getRemoteId()});
  space.setPendingUsers(new String[]{user1.getRemoteId()});
  space.setInvitedUsers(new String[]{user1.getRemoteId()});
  spaceStorage.saveSpace(space,true);
  storage._hardDeleteIdentity(user1);
  Identity got=storage._findIdentity(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,got.isDeleted());
  assertEquals(1,spaceStorage.getSpaceById(space.getId()).getMembers().length);
  assertEquals(user2.getRemoteId(),spaceStorage.getSpaceById(space.getId()).getMembers()[0]);
  assertEquals(1,spaceStorage.getSpaceById(space.getId()).getManagers().length);
  assertEquals(user2.getRemoteId(),spaceStorage.getSpaceById(space.getId()).getManagers()[0]);
  assertEquals(0,spaceStorage.getSpaceById(space.getId()).getPendingUsers().length);
  assertEquals(0,spaceStorage.getSpaceById(space.getId()).getInvitedUsers().length);
  spaceStorage.deleteSpace(space.getId());
  tearDownIdentityList.add(user1.getId());
  tearDownIdentityList.add(user2.getId());
}",0.9993265993265992
102523,"@MaxQueryNumber(210) public void testFindIdentityWithFilter() throws Exception {
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Identity itotota=addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Profile profile=storage.loadProfile(new Profile(itotota));
  Map<String,String> xp=new HashMap<String,String>();
  List<Map<String,String>> xps=new ArrayList<Map<String,String>>();
  xp.put(Profile.EXPERIENCES_SKILLS,""String_Node_Str"");
  xps.add(xp);
  profile.setProperty(Profile.EXPERIENCES,xps);
  storage.saveProfile(profile);
  ProfileFilter t=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter to=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter toto=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter totota=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter unknown=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter cadre=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter dev=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter t2=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",itotota);
  ProfileFilter filterB2Skills=new ProfileFilter();
  filterB2Skills.setSkills(""String_Node_Str"");
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,10,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,3,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,1,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,0,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,-1,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",to,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",toto,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",totota,0,10,false).size());
  assertEquals(0,storage.getIdentitiesByProfileFilter(""String_Node_Str"",unknown,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",cadre,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",dev,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t2,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",filterB2Skills,0,10,false).size());
  assertEquals(""String_Node_Str"",storage.getIdentitiesByProfileFilter(""String_Node_Str"",filterB2Skills,0,10,false).get(0).getRemoteId());
}","@MaxQueryNumber(220) public void testFindIdentityWithFilter() throws Exception {
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Identity itotota=addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addIdentity(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Profile profile=storage.loadProfile(new Profile(itotota));
  Map<String,String> xp=new HashMap<String,String>();
  List<Map<String,String>> xps=new ArrayList<Map<String,String>>();
  xp.put(Profile.EXPERIENCES_SKILLS,""String_Node_Str"");
  xps.add(xp);
  profile.setProperty(Profile.EXPERIENCES,xps);
  storage.saveProfile(profile);
  ProfileFilter t=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter to=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter toto=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter totota=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter unknown=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter cadre=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter dev=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  ProfileFilter t2=createFilter('\u0000',""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",itotota);
  ProfileFilter filterB2Skills=new ProfileFilter();
  filterB2Skills.setSkills(""String_Node_Str"");
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,10,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,3,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,1,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,0,false).size());
  assertEquals(3,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t,0,-1,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",to,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",toto,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",totota,0,10,false).size());
  assertEquals(0,storage.getIdentitiesByProfileFilter(""String_Node_Str"",unknown,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",cadre,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",dev,0,10,false).size());
  assertEquals(2,storage.getIdentitiesByProfileFilter(""String_Node_Str"",t2,0,10,false).size());
  assertEquals(1,storage.getIdentitiesByProfileFilter(""String_Node_Str"",filterB2Skills,0,10,false).size());
  assertEquals(""String_Node_Str"",storage.getIdentitiesByProfileFilter(""String_Node_Str"",filterB2Skills,0,10,false).get(0).getRemoteId());
}",0.9996704021094264
102524,"@MaxQueryNumber(100) public void testFindRelationship() throws Exception {
  Identity tmp1=new Identity(""String_Node_Str"",""String_Node_Str"");
  Identity tmp2=new Identity(""String_Node_Str"",""String_Node_Str"");
  identityStorage.saveIdentity(tmp1);
  identityStorage.saveIdentity(tmp2);
  Relationship newRelationship=new Relationship(tmp1,tmp2,Relationship.Type.PENDING);
  storage._createRelationship(newRelationship);
  assertNotNull(newRelationship.getId());
  assertEquals(tmp1.getId(),newRelationship.getSender().getId());
  assertEquals(tmp2.getId(),newRelationship.getReceiver().getId());
  assertEquals(Relationship.Type.PENDING,newRelationship.getStatus());
  Relationship got=storage._getRelationship(newRelationship.getId());
  assertNotNull(got);
  assertEquals(tmp1.getId(),got.getSender().getId());
  assertEquals(tmp2.getId(),got.getReceiver().getId());
  assertEquals(Relationship.Type.PENDING,got.getStatus());
  tearDownIdentityList.add(tmp1.getId());
  tearDownIdentityList.add(tmp2.getId());
}","@MaxQueryNumber(110) public void testFindRelationship() throws Exception {
  Identity tmp1=new Identity(""String_Node_Str"",""String_Node_Str"");
  Identity tmp2=new Identity(""String_Node_Str"",""String_Node_Str"");
  identityStorage.saveIdentity(tmp1);
  identityStorage.saveIdentity(tmp2);
  Relationship newRelationship=new Relationship(tmp1,tmp2,Relationship.Type.PENDING);
  storage._createRelationship(newRelationship);
  assertNotNull(newRelationship.getId());
  assertEquals(tmp1.getId(),newRelationship.getSender().getId());
  assertEquals(tmp2.getId(),newRelationship.getReceiver().getId());
  assertEquals(Relationship.Type.PENDING,newRelationship.getStatus());
  Relationship got=storage._getRelationship(newRelationship.getId());
  assertNotNull(got);
  assertEquals(tmp1.getId(),got.getSender().getId());
  assertEquals(tmp2.getId(),got.getReceiver().getId());
  assertEquals(Relationship.Type.PENDING,got.getStatus());
  tearDownIdentityList.add(tmp1.getId());
  tearDownIdentityList.add(tmp2.getId());
}",0.99901185770751
102525,"/** 
 * Gets and sort all uicomponents.<br>
 * @return All children in order.
 */
public final List<UIComponent> getChilds(){
  List<UIComponent> listChild=getChildren();
  return sort(listChild);
}","/** 
 * Gets and sort all uicomponents.<br>
 * @return All children in order.
 */
public final List<UIComponent> getChilds(){
  List<UIComponent> listChild=new ArrayList<UIComponent>();
  for (  UIComponent ui : getChildren()) {
    listChild.add(ui);
  }
  return sort(listChild);
}",0.8232848232848233
102526,"/** 
 * constructor
 * @throws Exception 
 */
public UIUserActivitiesDisplay() throws Exception {
  ResourceBundle resourceBundle=WebuiRequestContext.getCurrentInstance().getApplicationResourceBundle();
  List<SelectItemOption<String>> displayModes=new ArrayList<SelectItemOption<String>>(4);
  displayModes.add(new SelectItemOption<String>(resourceBundle.getString(""String_Node_Str""),DisplayMode.ALL_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(resourceBundle.getString(""String_Node_Str""),DisplayMode.NETWORK_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(resourceBundle.getString(""String_Node_Str""),DisplayMode.SPACE_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(resourceBundle.getString(""String_Node_Str""),DisplayMode.MY_STATUS.toString()));
  UIDropDownControl uiDropDownControl=addChild(UIDropDownControl.class,""String_Node_Str"",null);
  uiDropDownControl.setOptions(displayModes);
  setSelectedMode(uiDropDownControl);
  addChild(uiDropDownControl);
}","/** 
 * constructor
 * @throws Exception 
 */
public UIUserActivitiesDisplay() throws Exception {
  List<SelectItemOption<String>> displayModes=new ArrayList<SelectItemOption<String>>(4);
  displayModes.add(new SelectItemOption<String>(""String_Node_Str"",DisplayMode.ALL_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(""String_Node_Str"",DisplayMode.NETWORK_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(""String_Node_Str"",DisplayMode.SPACE_UPDATES.toString()));
  displayModes.add(new SelectItemOption<String>(""String_Node_Str"",DisplayMode.MY_STATUS.toString()));
  UIDropDownControl uiDropDownControl=addChild(UIDropDownControl.class,""String_Node_Str"",null);
  uiDropDownControl.setOptions(displayModes);
  setSelectedMode(uiDropDownControl);
  addChild(uiDropDownControl);
}",0.8869659275283938
102527,"@Override public void execute(Event<UILinkActivityComposer> event) throws Exception {
  WebuiRequestContext requestContext=event.getRequestContext();
  UILinkActivityComposer uiComposerLinkExtension=event.getSource();
  Map<String,String> tempParams=new LinkedHashMap<String,String>();
  tempParams.put(LINK_PARAM,requestContext.getRequestParameter(LINK_PARAM));
  tempParams.put(IMAGE_PARAM,requestContext.getRequestParameter(IMAGE_PARAM));
  tempParams.put(TITLE_PARAM,requestContext.getRequestParameter(TITLE_PARAM));
  tempParams.put(DESCRIPTION_PARAM,requestContext.getRequestParameter(DESCRIPTION_PARAM));
  uiComposerLinkExtension.setTemplateParams(tempParams);
  uiComposerLinkExtension.setLinkInfoDisplayed(true);
  requestContext.addUIComponentToUpdateByAjax(uiComposerLinkExtension);
  UIComponent uiParent=uiComposerLinkExtension.getParent();
  if (uiParent != null) {
    uiParent.broadcast(event,event.getExecutionPhase());
  }
}","@Override public void execute(Event<UILinkActivityComposer> event) throws Exception {
  UILinkActivityComposer uiComposerLinkExtension=event.getSource();
  uiComposerLinkExtension.clearLinkShare();
  uiComposerLinkExtension.setLinkInfoDisplayed(false);
  uiComposerLinkExtension.setDisplayed(false);
  uiComposerLinkExtension.setReadyForPostingActivity(false);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiComposerLinkExtension);
}",0.3342939481268011
102528,"/** 
 * Constructor: add 3 UI component to this UIFormTabPane: <p/> <pre>  {@link UISpaceSettings}{@link UISpaceVisibility}{@link UISpaceGroupBound}</pre>
 * @throws Exception
 */
public UISpaceAddForm() throws Exception {
  super(""String_Node_Str"");
  UIFormInputSet uiSpaceSettings=new UISpaceSettings(SPACE_SETTINGS);
  UIFormSelectBox uiSelectBox=uiSpaceSettings.getChild(UIFormSelectBox.class);
  uiSelectBox.setOnChange(CHANGE_PRIORITY);
  addChild(uiSpaceSettings);
  UIFormInputSet uiSpaceVisibility=new UISpaceVisibility(SPACE_VISIBILITY);
  addChild(uiSpaceVisibility);
  addChild(UISpaceGroupBound.class,null,null);
  setActions(new String[]{""String_Node_Str""});
  setSelectedTab(1);
}","/** 
 * Constructor: add 3 UI component to this UIFormTabPane: <p/> <pre>  {@link UISpaceSettings}{@link UISpaceVisibility}{@link UISpaceGroupBound}</pre>
 * @throws Exception
 */
public UISpaceAddForm() throws Exception {
  super(""String_Node_Str"");
  UIFormInputSet uiSpaceSettings=new UISpaceSettings(SPACE_SETTINGS);
  addChild(uiSpaceSettings);
  UIFormInputSet uiSpaceVisibility=new UISpaceVisibility(SPACE_VISIBILITY);
  addChild(uiSpaceVisibility);
  addChild(UISpaceGroupBound.class,null,null);
  setActions(new String[]{""String_Node_Str""});
  setSelectedTab(1);
}",0.9030732860520094
102529,"/** 
 * constructor
 * @throws Exception
 */
public UISpaceInfo() throws Exception {
  WebuiRequestContext requestContext=WebuiRequestContext.getCurrentInstance();
  ResourceBundle resourceBundle=requestContext.getApplicationResourceBundle();
  UIFormStringInput spaceId=new UIFormStringInput(SPACE_ID,SPACE_ID,null);
  spaceId.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput((UIFormStringInput)spaceId.setRendered(false));
  UIFormStringInput spaceDisplayNameInput=new UIFormStringInput(SPACE_DISPLAY_NAME,SPACE_DISPLAY_NAME,null);
  addUIFormInput(spaceDisplayNameInput.addValidator(MandatoryValidator.class).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str"").addValidator(StringLengthValidator.class,3,30));
  addUIFormInput(new UIFormTextAreaInput(SPACE_DESCRIPTION,SPACE_DESCRIPTION,null).addValidator(StringLengthValidator.class,0,255));
  List<SelectItemOption<String>> priorityList=new ArrayList<SelectItemOption<String>>(3);
  SelectItemOption<String> pHigh=new SelectItemOption<String>(PRIORITY_HIGH,Space.HIGH_PRIORITY);
  SelectItemOption<String> pImmediate=new SelectItemOption<String>(PRIORITY_IMMEDIATE,Space.INTERMEDIATE_PRIORITY);
  SelectItemOption<String> pLow=new SelectItemOption<String>(PRIORITY_LOW,Space.LOW_PRIORITY);
  priorityList.add(pHigh);
  priorityList.add(pImmediate);
  priorityList.add(pLow);
  UIFormSelectBox selectPriority=new UIFormSelectBox(SPACE_PRIORITY,SPACE_PRIORITY,priorityList);
  addUIFormInput(selectPriority);
  UIFormStringInput tag=new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null);
  tag.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput((UIFormStringInput)tag.setRendered(false));
  UIPopupWindow uiPopup=createUIComponent(UIPopupWindow.class,null,POPUP_AVATAR_UPLOADER);
  uiPopup.setWindowSize(500,0);
  addChild(uiPopup);
}","/** 
 * constructor
 * @throws Exception
 */
public UISpaceInfo() throws Exception {
  WebuiRequestContext requestContext=WebuiRequestContext.getCurrentInstance();
  ResourceBundle resourceBundle=requestContext.getApplicationResourceBundle();
  UIFormStringInput spaceId=new UIFormStringInput(SPACE_ID,SPACE_ID,null);
  spaceId.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput((UIFormStringInput)spaceId.setRendered(false));
  UIFormStringInput spaceDisplayNameInput=new UIFormStringInput(SPACE_DISPLAY_NAME,SPACE_DISPLAY_NAME,null);
  addUIFormInput(spaceDisplayNameInput.addValidator(MandatoryValidator.class).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str"").addValidator(StringLengthValidator.class,3,30));
  addUIFormInput(new UIFormTextAreaInput(SPACE_DESCRIPTION,SPACE_DESCRIPTION,null).addValidator(StringLengthValidator.class,0,255));
  UIFormStringInput tag=new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null);
  tag.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput((UIFormStringInput)tag.setRendered(false));
  UIPopupWindow uiPopup=createUIComponent(UIPopupWindow.class,null,POPUP_AVATAR_UPLOADER);
  uiPopup.setWindowSize(500,0);
  addChild(uiPopup);
}",0.8092879256965945
102530,"/** 
 * constructor
 * @param name
 * @throws Exception
 */
public UISpaceSettings(String name) throws Exception {
  super(name);
  WebuiRequestContext requestContext=WebuiRequestContext.getCurrentInstance();
  ResourceBundle resourceBundle=requestContext.getApplicationResourceBundle();
  UIFormStringInput spaceDisplayName=new UIFormStringInput(SPACE_DISPLAY_NAME,SPACE_DISPLAY_NAME,null);
  spaceDisplayName.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput(spaceDisplayName.addValidator(MandatoryValidator.class).addValidator(ExpressionValidator.class,""String_Node_Str"",MSG_INVALID_SPACE_NAME).addValidator(StringLengthValidator.class,3,30));
  List<SelectItemOption<String>> priorityList=new ArrayList<SelectItemOption<String>>(3);
  SelectItemOption<String> pHight=new SelectItemOption<String>(PRIORITY_HIGH,Space.HIGH_PRIORITY);
  SelectItemOption<String> pImmediate=new SelectItemOption<String>(PRIORITY_INTERMEDIATE,Space.INTERMEDIATE_PRIORITY);
  SelectItemOption<String> pLow=new SelectItemOption<String>(PRIORITY_LOW,Space.LOW_PRIORITY);
  priorityList.add(pHight);
  priorityList.add(pImmediate);
  priorityList.add(pLow);
  pImmediate.setSelected(true);
  UIFormSelectBox selectPriority=new UIFormSelectBox(SPACE_PRIORITY,SPACE_PRIORITY,priorityList);
  addUIFormInput(selectPriority);
  UIFormInputInfo priorityInfo=new UIFormInputInfo(""String_Node_Str"",null,null);
  WebuiRequestContext webReqCtx=WebuiRequestContext.getCurrentInstance();
  ResourceBundle resApp=webReqCtx.getApplicationResourceBundle();
  String interMePrio=resApp.getString(""String_Node_Str"");
  priorityInfo.setValue(interMePrio);
  addUIFormInput(priorityInfo);
  UIFormTextAreaInput description=new UIFormTextAreaInput(SPACE_DESCRIPTION,SPACE_DESCRIPTION,null);
  description.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput(description.addValidator(StringLengthValidator.class,0,255));
}","/** 
 * constructor
 * @param name
 * @throws Exception
 */
public UISpaceSettings(String name) throws Exception {
  super(name);
  WebuiRequestContext requestContext=WebuiRequestContext.getCurrentInstance();
  ResourceBundle resourceBundle=requestContext.getApplicationResourceBundle();
  UIFormStringInput spaceDisplayName=new UIFormStringInput(SPACE_DISPLAY_NAME,SPACE_DISPLAY_NAME,null);
  spaceDisplayName.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput(spaceDisplayName.addValidator(MandatoryValidator.class).addValidator(ExpressionValidator.class,""String_Node_Str"",MSG_INVALID_SPACE_NAME).addValidator(StringLengthValidator.class,3,30));
  UIFormTextAreaInput description=new UIFormTextAreaInput(SPACE_DESCRIPTION,SPACE_DESCRIPTION,null);
  description.setHTMLAttribute(HTML_ATTRIBUTE_TITLE,resourceBundle.getString(""String_Node_Str""));
  addUIFormInput(description.addValidator(StringLengthValidator.class,0,255));
}",0.6610284167794317
102531,"@Action public Response requestToJoin(String spacePrettyName){
  String remoteId=Utils.getOwnerRemoteId();
  Space space=spaceService.getSpaceByPrettyName(spacePrettyName);
  spaceService.addPendingUser(space,remoteId);
  return Controller_.requestedSuccessful(spacePrettyName);
}","@Action public Response.Redirect requestToJoin(String spacePrettyName){
  String remoteId=Utils.getOwnerRemoteId();
  Space space=spaceService.getSpaceByPrettyName(spacePrettyName);
  spaceService.addPendingUser(space,remoteId);
  return Response.redirect(Utils.getSpaceHomeURL(space));
}",0.823943661971831
102532,"/** 
 * Destroy like by identityId and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param identityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=destroyLike(activityId,identityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Destroy like by identityId and return the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param identityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=destroyLike(activityId,identityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.9730113636363636
102533,"/** 
 * Show list of like by activityId and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showLikes(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=showLikes(activityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Show list of like by activityId and return the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showLikes(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=showLikes(activityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.9710610932475884
102534,"/** 
 * destroys comments and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param commentId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String commentId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=destroyComment(activityId,commentId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Destroy comments and return the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param commentId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String commentId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=destroyComment(activityId,commentId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}",0.945583038869258
102535,"/** 
 * Updates comment by json/xml format.
 * @param uriInfo
 * @param activityId
 * @param format
 * @param comment
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,ExoSocialActivityImpl comment) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=updateComment(activityId,comment,uriInfo,portalName);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Update comment by the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param format
 * @param comment
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,ExoSocialActivityImpl comment) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=updateComment(activityId,comment,uriInfo,portalName);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}",0.9874917709019092
102536,"/** 
 * Destroy activity and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  ExoSocialActivity activity=destroyActivity(activityId);
  return Util.getResponse(activity,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Destroy activity and return the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  ExoSocialActivity activity=destroyActivity(activityId);
  return Util.getResponse(activity,uriInfo,mediaType,Response.Status.OK);
}",0.9576547231270358
102537,"/** 
 * Get an activity by its ID.
 * @param uriInfo The uri request info
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ActivityRestOut model=new ActivityRestOut();
  model.setId(activity.getId());
  model.setTitle(activity.getTitle());
  model.setPriority(activity.getPriority());
  model.setAppId(activity.getAppId());
  model.setType(activity.getType());
  model.setPostedTime(activity.getPostedTime());
  model.setCreatedAt(Util.convertTimestampToTimeString(activity.getPostedTime()));
  model.setTitleId(activity.getTitleId());
  model.setTemplateParams(activity.getTemplateParams());
  if (activity.getLikeIdentityIds() != null) {
    model.setTotalNumberOfLikes(activity.getLikeIdentityIds().length);
  }
 else {
    model.setTotalNumberOfLikes(null);
  }
  if (Util.isLikedByIdentity(identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),true).getId(),activity)) {
    model.setLiked(true);
  }
 else {
    model.setLiked(false);
  }
  RealtimeListAccess<ExoSocialActivity> commentRealtimeListAccess=Util.getActivityManager(portalContainerName).getCommentsWithListAccess(activity);
  model.setTotalNumberOfComments(commentRealtimeListAccess.getSize());
  Identity streamOwnerIdentity=Util.getOwnerIdentityIdFromActivity(portalContainerName,activity);
  if (streamOwnerIdentity != null) {
    model.put(Field.IDENTITY_ID.toString(),streamOwnerIdentity.getId());
  }
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get an activity by its ID.
 * @param uriInfo The URI request information.
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ActivityRestOut model=new ActivityRestOut();
  model.setId(activity.getId());
  model.setTitle(activity.getTitle());
  model.setPriority(activity.getPriority());
  model.setAppId(activity.getAppId());
  model.setType(activity.getType());
  model.setPostedTime(activity.getPostedTime());
  model.setCreatedAt(Util.convertTimestampToTimeString(activity.getPostedTime()));
  model.setTitleId(activity.getTitleId());
  model.setTemplateParams(activity.getTemplateParams());
  if (activity.getLikeIdentityIds() != null) {
    model.setTotalNumberOfLikes(activity.getLikeIdentityIds().length);
  }
 else {
    model.setTotalNumberOfLikes(null);
  }
  if (Util.isLikedByIdentity(identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),true).getId(),activity)) {
    model.setLiked(true);
  }
 else {
    model.setLiked(false);
  }
  RealtimeListAccess<ExoSocialActivity> commentRealtimeListAccess=Util.getActivityManager(portalContainerName).getCommentsWithListAccess(activity);
  model.setTotalNumberOfComments(commentRealtimeListAccess.getSize());
  Identity streamOwnerIdentity=Util.getOwnerIdentityIdFromActivity(portalContainerName,activity);
  if (streamOwnerIdentity != null) {
    model.put(Field.IDENTITY_ID.toString(),streamOwnerIdentity.getId());
  }
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}",0.9979129397734048
102538,"/** 
 * updates like by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @param like
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Like like) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=updateLike(activityId,like);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Update like by the JSON/XML format.
 * @param uriInfo
 * @param activityId
 * @param format
 * @param like
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Like like) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=updateLike(activityId,like);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.9659763313609468
102539,"/** 
 * Show comment list by json/xml format with limit and offset.
 * @param uriInfo
 * @param activityId
 * @param format
 * @param offset
 * @param limit
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showComments(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") Integer offset,@QueryParam(""String_Node_Str"") Integer limit) throws Exception {
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalName);
  if (offset == null || limit == null) {
    offset=0;
    limit=10;
  }
  if (offset < 0 || limit < 0) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    int total;
    List<CommentRestOut> commentWrapers=null;
    ListAccess<ExoSocialActivity> comments=activityManager.getCommentsWithListAccess(activity);
    if (offset > comments.getSize()) {
      offset=0;
      limit=0;
    }
 else     if (offset + limit > comments.getSize()) {
      limit=comments.getSize() - offset;
    }
    total=limit;
    ExoSocialActivity[] commentsLimited=comments.load(offset,total + offset);
    commentWrapers=new ArrayList<CommentRestOut>(total);
    for (int i=0; i < total; i++) {
      CommentRestOut commentRestOut=new CommentRestOut(commentsLimited[i],portalName);
      commentRestOut.setPosterIdentity(commentsLimited[i],portalName);
      commentWrapers.add(commentRestOut);
    }
    HashMap<String,Object> resultJson=new HashMap<String,Object>();
    resultJson.put(""String_Node_Str"",commentWrapers.size());
    resultJson.put(""String_Node_Str"",commentWrapers);
    return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
}","/** 
 * Show comment list by the JSON/XML format with limit and offset.
 * @param uriInfo
 * @param activityId
 * @param format
 * @param offset
 * @param limit
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showComments(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") Integer offset,@QueryParam(""String_Node_Str"") Integer limit) throws Exception {
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalName);
  if (offset == null || limit == null) {
    offset=0;
    limit=10;
  }
  if (offset < 0 || limit < 0) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    int total;
    List<CommentRestOut> commentWrapers=null;
    ListAccess<ExoSocialActivity> comments=activityManager.getCommentsWithListAccess(activity);
    if (offset > comments.getSize()) {
      offset=0;
      limit=0;
    }
 else     if (offset + limit > comments.getSize()) {
      limit=comments.getSize() - offset;
    }
    total=limit;
    ExoSocialActivity[] commentsLimited=comments.load(offset,total + offset);
    commentWrapers=new ArrayList<CommentRestOut>(total);
    for (int i=0; i < total; i++) {
      CommentRestOut commentRestOut=new CommentRestOut(commentsLimited[i],portalName);
      commentRestOut.setPosterIdentity(commentsLimited[i],portalName);
      commentWrapers.add(commentRestOut);
    }
    HashMap<String,Object> resultJson=new HashMap<String,Object>();
    resultJson.put(""String_Node_Str"",commentWrapers.size());
    resultJson.put(""String_Node_Str"",commentWrapers);
    return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
}",0.9963985594237696
102540,"/** 
 * Get the activity stream feed of the authenticated user identity who makes this request.
 * @param uriInfo             The uri info
 * @param portalContainerName The portal container name
 * @param format              The response format type, for example: json, xml...
 * @param limit               Specify the number of activities to retrieve. It must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Feed.Getlastest
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/feed.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityFeedOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity sourceIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity newerActivity=null;
  ExoSocialActivity olderActivity=null;
  try {
    if (sinceId != null && !sinceId.trim().equals(""String_Node_Str"")) {
      newerActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null && !maxId.trim().equals(""String_Node_Str"")) {
      olderActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException e) {
    if (e.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> listAccess=null;
  List<ExoSocialActivity> activities=null;
  try {
    listAccess=activityManager.getActivityFeedWithListAccess(sourceIdentity);
    if (newerActivity != null) {
      activities=listAccess.loadNewer(newerActivity,maxLimit);
    }
 else     if (olderActivity != null) {
      activities=listAccess.loadOlder(olderActivity,maxLimit);
    }
 else {
      activities=listAccess.loadAsList(0,maxLimit);
    }
  }
 catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
  ActivityRestListOut activityRestListOut=new ActivityRestListOut(activities,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(activityRestListOut,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get the activity stream feed of the authenticated user identity who makes this request.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               Specify the number of activities to retrieve. It must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp.
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead.
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Feed.Getlastest
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/feed.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityFeedOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity sourceIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity newerActivity=null;
  ExoSocialActivity olderActivity=null;
  try {
    if (sinceId != null && !sinceId.trim().equals(""String_Node_Str"")) {
      newerActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null && !maxId.trim().equals(""String_Node_Str"")) {
      olderActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException e) {
    if (e.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> listAccess=null;
  List<ExoSocialActivity> activities=null;
  try {
    listAccess=activityManager.getActivityFeedWithListAccess(sourceIdentity);
    if (newerActivity != null) {
      activities=listAccess.loadNewer(newerActivity,maxLimit);
    }
 else     if (olderActivity != null) {
      activities=listAccess.loadOlder(olderActivity,maxLimit);
    }
 else {
      activities=listAccess.loadAsList(0,maxLimit);
    }
  }
 catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
  ActivityRestListOut activityRestListOut=new ActivityRestListOut(activities,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(activityRestListOut,uriInfo,mediaType,Response.Status.OK);
}",0.9962303980699638
102541,"/** 
 * Get activities of connections of a specified identity.
 * @param uriInfo             The uri info
 * @param portalContainerName The portal container name.
 * @param format              The response format type, for example: json, xml...
 * @param limit               Specify the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp.
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead.
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResources.Connection.default
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/connections.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityConnectionsOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  RestChecker.checkAuthenticatedRequest();
  RestChecker.checkValidPortalContainerName(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> realtimeListAccess=null;
  realtimeListAccess=activityManager.getActivitiesOfConnectionsWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  if (getOlder) {
    activityList=realtimeListAccess.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=realtimeListAccess.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=realtimeListAccess.loadAsList(0,maxLimit);
  }
  ActivityRestListOut activityRestListOut=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(activityRestListOut,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get activities of connections of a specified identity.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               Specify the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp.
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended you use ""activity/:activityId/comments.format"" instead.
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResources.Connection.default
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/connections.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityConnectionsOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  RestChecker.checkAuthenticatedRequest();
  RestChecker.checkValidPortalContainerName(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> realtimeListAccess=null;
  realtimeListAccess=activityManager.getActivitiesOfConnectionsWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  if (getOlder) {
    activityList=realtimeListAccess.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=realtimeListAccess.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=realtimeListAccess.loadAsList(0,maxLimit);
  }
  ActivityRestListOut activityRestListOut=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(activityRestListOut,uriInfo,mediaType,Response.Status.OK);
}",0.9813098548038308
102542,"/** 
 * Get activities of a defined identity which can be a user identity, a space identity, or any type of identities. There is one special _identityId_ called ""me"" which stands for the authenticated user who makes this request.
 * @param uriInfo             The uri info
 * @param portalContainerName the portal container name
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: json, xml...
 * @param limit               The number of activities retrieved with the default value of 100. This input value mustbe less than or equal to its default value (100). The number of the returned results is actually less than or equal to the *limit* value. If no specified, 100 will be the default value.
 * @param sinceId             Returns the activities having the created timestamps greater than the specified*since\_id*_'s created timestamp.
 * @param maxId               Return the activities having the created timestamps less than the specified *max\_id*'screated timestamp. Note that *since\_id* and *max\_id* must not be defined in one request, if they are, the *since\_id* query param is chosen.
 * @param numberOfComments    Specify the number of latest comments to be displayed along with each activity.By default, *number\_of\_comments=0*. If *number\_of\_comments* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use _activity/\:activityId/comments.format_ instead.
 * @param numberOfLikes       Specify the number of latest detailed likes to be returned along with this activity.By default, *number\_of\_likes=0*. If *number\_of\_likes* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Identity.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/f92cd6f0c0a80137102696ac26430766.json?limit=30&since_id=12345&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"": """", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity;
  if (""String_Node_Str"".equals(identityId)) {
    targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  }
 else {
    targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  }
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,Util.getAuthenticatedUserIdentity(portalContainerName),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get activities of a defined identity which can be a user identity, a space identity, or any type of identities. There is one special _identityId_ called ""me"" which stands for the authenticated user who makes this request.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               The number of activities retrieved with the default value of 100. This input value mustbe less than or equal to its default value (100). The number of the returned results is actually less than or equal to the *limit* value. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater than the specified*since\_id*_'s created timestamp.
 * @param maxId               Return the activities having the created timestamps less than the specified *max\_id*'screated timestamp. Note that *since\_id* and *max\_id* must not be defined in one request, if they are, the *since\_id* query param is chosen.
 * @param numberOfComments    Specify the number of latest comments to be displayed along with each activity.By default, *number\_of\_comments=0*. If *number\_of\_comments* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use _activity/\:activityId/comments.format_ instead.
 * @param numberOfLikes       Specify the number of latest detailed likes to be returned along with this activity.By default, *number\_of\_likes=0*. If *number\_of\_likes* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Identity.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/f92cd6f0c0a80137102696ac26430766.json?limit=30&since_id=12345&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"": """", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity;
  if (""String_Node_Str"".equals(identityId)) {
    targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  }
 else {
    targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  }
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,Util.getAuthenticatedUserIdentity(portalContainerName),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}",0.9931775894149266
102543,"/** 
 * Get activities of spaces in which the authenticated user identity is space member that makes this request.
 * @param uriInfo             The uri info
 * @param portalContainerName The portal container name.
 * @param format              The response format type, for example: json, xml...
 * @param limit               Specify the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResources.Spaces.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/spaces.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivitySpacesOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  int maxLimit=limit == 0 ? MAX_LIMIT : limit;
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesOfUserSpacesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get activities of spaces in which the authenticated user identity is space member that makes this request.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               Specify the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater thanthe specified sinceId's created timestamp.
 * @param maxId               Return the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specify the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead.
 * @param numberOfLikes       Specify the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResources.Spaces.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/spaces.json?limit=30&since_id=12345&number_of_comments=5&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivitySpacesOfAuthenticated(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  int maxLimit=limit == 0 ? MAX_LIMIT : limit;
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesOfUserSpacesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}",0.9843097059055428
102544,"/** 
 * Get the identity and its associated profile by the activity ID.
 * @param uriInfo the uri request uri
 * @param portalContainerName The associated portal container name.
 * @param identityId The specified  ID of identity.
 * @param format The expected returned format.
 * @anchor SOCref.DevRef.RestService_APIs_v1alpha3.IdentityResources.Notes.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/identity/123456789.json {code}
 * @response {code:json} { ""id"" : ""123456789"", ""providerId"": ""organization"", ""remoteId"": ""demo"", ""profile"": { ""fullName"": ""Demo Gtn"", ""avatarUrl"": ""http://cloud-workspaces.com/profile/avatar/demo.jpg"" } } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getIdentityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  RestChecker.checkValidPortalContainerName(portalContainerName);
  if (identityId == null || identityId.equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  try {
    Identity identity=identityManager.getIdentity(identityId,true);
    IdentityRestOut resultIdentity=new IdentityRestOut(identity);
    Util.buildAbsoluteAvatarURL(resultIdentity);
    return Util.getResponse(resultIdentity,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof IdentityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
}","/** 
 * Get the identity and its associated profile by the activity ID.
 * @param uriInfo The uri request uri.
 * @param portalContainerName The associated portal container name.
 * @param identityId The specified  ID of identity.
 * @param format The expected returned format.
 * @anchor SOCref.DevRef.RestService_APIs_v1alpha3.IdentityResources.Notes.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/identity/123456789.json {code}
 * @response {code:json} { ""id"" : ""123456789"", ""providerId"": ""organization"", ""remoteId"": ""demo"", ""profile"": { ""fullName"": ""Demo Gtn"", ""avatarUrl"": ""http://cloud-workspaces.com/profile/avatar/demo.jpg"" } } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getIdentityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  RestChecker.checkValidPortalContainerName(portalContainerName);
  if (identityId == null || identityId.equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  try {
    Identity identity=identityManager.getIdentity(identityId,true);
    IdentityRestOut resultIdentity=new IdentityRestOut(identity);
    Util.buildAbsoluteAvatarURL(resultIdentity);
    return Util.getResponse(resultIdentity,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof IdentityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
}",0.9992966002344664
102545,"/** 
 * Get eXo Social REST service versions that are supported. This is for backward compatibility. If a client application is using an older eXo Social REST APIs version, all APIs of the version still can work. The array MUST have the latest to oldest order. For example, {{{[v2, v1, v1-beta3]}}}, but not {{{[v1, v2, v1-beta3]}}}.
 * @param uriInfo the uri info
 * @param format  The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.VersionResources.Get
 * @request {code} GET: http://cloud-workspaces.com/rest/api/social/version/supported.json or GET: http://cloud-workspaces.com/rest/api/social/version/supported.xml {code}
 * @response {code:json} {""versions"": [""v1-alpha3""]} {code} or {code:xml} <versions> <version>v1-alpha3</version> </versions> {code}
 * @return response of the request, the type bases on the format param
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getSupportedVersions(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String format){
  final String[] supportedFormat=new String[]{""String_Node_Str"",""String_Node_Str""};
  Versions entity=new Versions();
  entity.getVersions().addAll(SUPPORTED_VERSIONS);
  return Util.getResponse(entity,uriInfo,Util.getMediaType(format,supportedFormat),Status.OK);
}","/** 
 * Get eXo Social REST service versions that are supported. This is for backward compatibility. If a client application is using an older eXo Social REST APIs version, all APIs of the version still can work. The array MUST have the latest to oldest order. For example, {{{[v2, v1, v1-beta3]}}}, but not {{{[v1, v2, v1-beta3]}}}.
 * @param uriInfo The URI information.
 * @param format  The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.VersionResources.Get
 * @request {code} GET: http://cloud-workspaces.com/rest/api/social/version/supported.json or GET: http://cloud-workspaces.com/rest/api/social/version/supported.xml {code}
 * @response {code:json} {""versions"": [""v1-alpha3""]} {code} or {code:xml} <versions> <version>v1-alpha3</version> </versions> {code}
 * @return response of the request, the type bases on the format param
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getSupportedVersions(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String format){
  final String[] supportedFormat=new String[]{""String_Node_Str"",""String_Node_Str""};
  Versions entity=new Versions();
  entity.getVersions().addAll(SUPPORTED_VERSIONS);
  return Util.getResponse(entity,uriInfo,Util.getMediaType(format,supportedFormat),Status.OK);
}",0.9881656804733728
102546,"/** 
 * Get the latest eXo Social REST API version. This version number should be used as the latest and stable version that is considered to include all new features and updates of eXo Social REST services.
 * @param uriInfo the uri info
 * @param format  The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.VersionResources.Versionlastest.Get
 * @request {code} GET: http://cloud-workspaces.com/rest/api/social/version/latest.json or GET: http://cloud-workspaces.com/rest/api/social/version/latest.xml {code}
 * @response {code:json} {""version"": ""v1-alpha3""} {code} or {code:xml} <version>v1-alpha3</version> {code}
 * @return response of the request, the type bases on the format param
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getLatestVersion(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String format){
  final String[] supportedFormat=new String[]{""String_Node_Str""};
  MediaType mediaType=Util.getMediaType(format,supportedFormat);
  Version entity=new Version();
  entity.setVersion(LATEST_VERSION);
  return Util.getResponse(entity,uriInfo,mediaType,Status.OK);
}","/** 
 * Get the latest eXo Social REST API version. This version number should be used as the latest and stable version that is considered to include all new features and updates of eXo Social REST services.
 * @param uriInfo The URI information.
 * @param format  The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.VersionResources.Versionlastest.Get
 * @request {code} GET: http://cloud-workspaces.com/rest/api/social/version/latest.json or GET: http://cloud-workspaces.com/rest/api/social/version/latest.xml {code}
 * @response {code:json} {""version"": ""v1-alpha3""} {code} or {code:xml} <version>v1-alpha3</version> {code}
 * @return response of the request, the type bases on the format param
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getLatestVersion(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String format){
  final String[] supportedFormat=new String[]{""String_Node_Str""};
  MediaType mediaType=Util.getMediaType(format,supportedFormat);
  Version entity=new Version();
  entity.setVersion(LATEST_VERSION);
  return Util.getResponse(entity,uriInfo,mediaType,Status.OK);
}",0.9867109634551496
102547,"/** 
 * Comment an existing activity from a specified activity ID. Just returns the created comment.
 * @param uriInfo The uri request uri
 * @param portalName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @param text The content of comment.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response createCommentActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String text){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalName);
  if (text == null || text.trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  Identity currentIdentity=Util.getIdentityManager(portalName).getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),false);
  ActivityManager activityManager=Util.getActivityManager(portalName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  ExoSocialActivity commentActivity=new ExoSocialActivityImpl();
  commentActivity.setTitle(text);
  commentActivity.setUserId(currentIdentity.getId());
  activityManager.saveComment(activity,commentActivity);
  CommentRestOut commentOut=new CommentRestOut(commentActivity,portalName);
  return Util.getResponse(commentOut,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Comment an existing activity from a specified activity Id. Just returns the created comment.
 * @param uriInfo The uri request uri
 * @param portalName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @param text The content of comment.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response createCommentActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String text){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalName);
  if (text == null || text.trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  Identity currentIdentity=Util.getIdentityManager(portalName).getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),false);
  ActivityManager activityManager=Util.getActivityManager(portalName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  ExoSocialActivity commentActivity=new ExoSocialActivityImpl();
  commentActivity.setTitle(text);
  commentActivity.setUserId(currentIdentity.getId());
  activityManager.saveComment(activity,commentActivity);
  CommentRestOut commentOut=new CommentRestOut(commentActivity,portalName);
  return Util.getResponse(commentOut,uriInfo,mediaType,Response.Status.OK);
}",0.9989914271306102
102548,"/** 
 * Get an activity by its ID.
 * @param uriInfo The URI request information.
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ActivityRestOut model=new ActivityRestOut();
  model.setId(activity.getId());
  model.setTitle(activity.getTitle());
  model.setPriority(activity.getPriority());
  model.setAppId(activity.getAppId());
  model.setType(activity.getType());
  model.setPostedTime(activity.getPostedTime());
  model.setCreatedAt(Util.convertTimestampToTimeString(activity.getPostedTime()));
  model.setTitleId(activity.getTitleId());
  model.setTemplateParams(activity.getTemplateParams());
  if (activity.getLikeIdentityIds() != null) {
    model.setTotalNumberOfLikes(activity.getLikeIdentityIds().length);
  }
 else {
    model.setTotalNumberOfLikes(null);
  }
  if (Util.isLikedByIdentity(identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),true).getId(),activity)) {
    model.setLiked(true);
  }
 else {
    model.setLiked(false);
  }
  RealtimeListAccess<ExoSocialActivity> commentRealtimeListAccess=Util.getActivityManager(portalContainerName).getCommentsWithListAccess(activity);
  model.setTotalNumberOfComments(commentRealtimeListAccess.getSize());
  Identity streamOwnerIdentity=Util.getOwnerIdentityIdFromActivity(portalContainerName,activity);
  if (streamOwnerIdentity != null) {
    model.put(Field.IDENTITY_ID.toString(),streamOwnerIdentity.getId());
  }
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get an activity by its Id.
 * @param uriInfo The URI request information.
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @return a response object
 */
@GET @Path(""String_Node_Str"") public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,new String[]{""String_Node_Str""});
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ActivityRestOut model=new ActivityRestOut();
  model.setId(activity.getId());
  model.setTitle(activity.getTitle());
  model.setPriority(activity.getPriority());
  model.setAppId(activity.getAppId());
  model.setType(activity.getType());
  model.setPostedTime(activity.getPostedTime());
  model.setCreatedAt(Util.convertTimestampToTimeString(activity.getPostedTime()));
  model.setTitleId(activity.getTitleId());
  model.setTemplateParams(activity.getTemplateParams());
  if (activity.getLikeIdentityIds() != null) {
    model.setTotalNumberOfLikes(activity.getLikeIdentityIds().length);
  }
 else {
    model.setTotalNumberOfLikes(null);
  }
  if (Util.isLikedByIdentity(identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,Util.getViewerId(uriInfo),true).getId(),activity)) {
    model.setLiked(true);
  }
 else {
    model.setLiked(false);
  }
  RealtimeListAccess<ExoSocialActivity> commentRealtimeListAccess=Util.getActivityManager(portalContainerName).getCommentsWithListAccess(activity);
  model.setTotalNumberOfComments(commentRealtimeListAccess.getSize());
  Identity streamOwnerIdentity=Util.getOwnerIdentityIdFromActivity(portalContainerName,activity);
  if (streamOwnerIdentity != null) {
    model.put(Field.IDENTITY_ID.toString(),streamOwnerIdentity.getId());
  }
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}",0.9994044073853484
102549,"/** 
 * Create an activity to an identity's activity stream. If no identity_id is specified, the activity will be created to the authenticated identity's activity stream.
 * @param uriInfo the uri request info
 * @param portalContainerName The associated portal container name.
 * @param format The expected returned format.
 * @param identityIdStream The optional identity stream to post this new activity to.
 * @param newActivity A new activity instance.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity.json BODY: {""title"": ""Hello World!!!""} {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"" //the identity id of the user who created this activity } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createNewActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String identityIdStream,ActivityRestIn newActivity){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  if (newActivity == null || newActivity.getTitle() == null || newActivity.getTitle().trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity postToIdentity;
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  if (identityIdStream != null && !identityIdStream.equals(""String_Node_Str"")) {
    postToIdentity=identityManager.getIdentity(identityIdStream,false);
    if (postToIdentity == null) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
  }
 else {
    postToIdentity=authenticatedUserIdentity;
  }
  if (!SecurityManager.canPostActivity(portalContainer,authenticatedUserIdentity,postToIdentity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(newActivity.getTitle());
  activity.setType(newActivity.getType());
  activity.setPriority(newActivity.getPriority());
  activity.setTitleId(newActivity.getTitleId());
  activity.setTemplateParams(newActivity.getTemplateParams());
  activity.setUserId(authenticatedUserIdentity.getId());
  activityManager.saveActivityNoReturn(postToIdentity,activity);
  ActivityRestOut model=new ActivityRestOut(activity,portalContainerName);
  model.setIdentityId(postToIdentity.getId());
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Create an activity to an identity's activity stream. If no identity\_id is specified, the activity will be created to the authenticated identity's activity stream.
 * @param uriInfo the uri request info
 * @param portalContainerName The associated portal container name.
 * @param format The expected returned format.
 * @param identityIdStream The optional identity stream to post this new activity to.
 * @param newActivity A new activity instance.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity.json BODY: {""title"": ""Hello World!!!""} {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"" //the identity id of the user who created this activity } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createNewActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String identityIdStream,ActivityRestIn newActivity){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  if (newActivity == null || newActivity.getTitle() == null || newActivity.getTitle().trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity postToIdentity;
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  if (identityIdStream != null && !identityIdStream.equals(""String_Node_Str"")) {
    postToIdentity=identityManager.getIdentity(identityIdStream,false);
    if (postToIdentity == null) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
  }
 else {
    postToIdentity=authenticatedUserIdentity;
  }
  if (!SecurityManager.canPostActivity(portalContainer,authenticatedUserIdentity,postToIdentity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ExoSocialActivity activity=new ExoSocialActivityImpl();
  activity.setTitle(newActivity.getTitle());
  activity.setType(newActivity.getType());
  activity.setPriority(newActivity.getPriority());
  activity.setTitleId(newActivity.getTitleId());
  activity.setTemplateParams(newActivity.getTemplateParams());
  activity.setUserId(authenticatedUserIdentity.getId());
  activityManager.saveActivityNoReturn(postToIdentity,activity);
  ActivityRestOut model=new ActivityRestOut(activity,portalContainerName);
  model.setIdentityId(postToIdentity.getId());
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}",0.9998483699772556
102550,"/** 
 * Get all the identities who like an existing activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLikes.GET
 * @authenticated
 * @request {code} GET: http://localhost:8080/rest-socialdemo/private/api/social/v1-alpha3/socialdemo/activity/1a2b3c4d5e/likes.json {code}
 * @response {code:json} { totalNumberOfLikes: 2, likesByIdentities: [ { ""id"":1234567, ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"": { ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, { ""id"":23456, ""providerId"":""organization"", ""remoteId"":""root"", ""profile"": { ""fullName"":""Root GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/root/avatar.jpg?u=12345"" } }, ] } {code}
 * @return
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getLikesFromIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canAccessActivity(portalContainer,authenticatedIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  HashMap<String,Object> hashmapResult=new HashMap<String,Object>();
  if (activity.getLikeIdentityIds() != null && activity.getLikeIdentityIds().length > 0) {
    int numberOfLikeLimited=Math.min(MAX_NUMBER_OF_LIKE,activity.getLikeIdentityIds().length);
    List<IdentityRestOut> likedIdentitiesLimited=null;
    String[] getLikeIdentityIds=activity.getLikeIdentityIds();
    likedIdentitiesLimited=new ArrayList<IdentityRestOut>(numberOfLikeLimited);
    for (int i=0; i < numberOfLikeLimited; i++) {
      likedIdentitiesLimited.add(new IdentityRestOut(getLikeIdentityIds[getLikeIdentityIds.length - i - 1],portalContainerName));
    }
    hashmapResult.put(""String_Node_Str"",activity.getLikeIdentityIds().length);
    hashmapResult.put(""String_Node_Str"",likedIdentitiesLimited);
  }
 else {
    hashmapResult.put(""String_Node_Str"",0);
    hashmapResult.put(""String_Node_Str"",new ArrayList<IdentityRestOut>());
  }
  return Util.getResponse(hashmapResult,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get all the identities who like an existing activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLikes.GET
 * @authenticated
 * @request {code} GET: http://localhost:8080/rest-socialdemo/private/api/social/v1-alpha3/socialdemo/activity/1a2b3c4d5e/likes.json {code}
 * @response {code:json} { totalNumberOfLikes: 2, likesByIdentities: [ { ""id"":1234567, ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"": { ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, { ""id"":23456, ""providerId"":""organization"", ""remoteId"":""root"", ""profile"": { ""fullName"":""Root GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/root/avatar.jpg?u=12345"" } }, ] } {code}
 * @return
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getLikesFromIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canAccessActivity(portalContainer,authenticatedIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  HashMap<String,Object> hashmapResult=new HashMap<String,Object>();
  if (activity.getLikeIdentityIds() != null && activity.getLikeIdentityIds().length > 0) {
    int numberOfLikeLimited=Math.min(MAX_NUMBER_OF_LIKE,activity.getLikeIdentityIds().length);
    List<IdentityRestOut> likedIdentitiesLimited=null;
    String[] getLikeIdentityIds=activity.getLikeIdentityIds();
    likedIdentitiesLimited=new ArrayList<IdentityRestOut>(numberOfLikeLimited);
    for (int i=0; i < numberOfLikeLimited; i++) {
      likedIdentitiesLimited.add(new IdentityRestOut(getLikeIdentityIds[getLikeIdentityIds.length - i - 1],portalContainerName));
    }
    hashmapResult.put(""String_Node_Str"",activity.getLikeIdentityIds().length);
    hashmapResult.put(""String_Node_Str"",likedIdentitiesLimited);
  }
 else {
    hashmapResult.put(""String_Node_Str"",0);
    hashmapResult.put(""String_Node_Str"",new ArrayList<IdentityRestOut>());
  }
  return Util.getResponse(hashmapResult,uriInfo,mediaType,Response.Status.OK);
}",0.9996904982977406
102551,"/** 
 * Delete an existing activity by its Id using the DELETE method. The deleted activity information will be returned in the JSON format.
 * @param uriInfo the uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Delete
 * @authentication
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, //if comments is required, the total number of comments ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteExistingActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity existingActivity=null;
  try {
    existingActivity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canDeleteActivity(portalContainer,authenticatedUserIdentity,existingActivity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteActivity(existingActivity);
  HashMap<String,String> resultJson=new HashMap<String,String>();
  resultJson.put(""String_Node_Str"",existingActivity.getId());
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Delete an existing activity by its Id using the DELETE method. The deleted activity information will be returned in the JSON format.
 * @param uriInfo the uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Delete
 * @authentication
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, //if comments is required, the total number of comments ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteExistingActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity existingActivity=null;
  try {
    existingActivity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canDeleteActivity(portalContainer,authenticatedUserIdentity,existingActivity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteActivity(existingActivity);
  HashMap<String,String> resultJson=new HashMap<String,String>();
  resultJson.put(""String_Node_Str"",existingActivity.getId());
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}",0.9996858309770656
102552,"/** 
 * Post a new comment on an existing activity. The poster of this comment is an authenticated identity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment.json BODY: {""text"": ""My comment here!!!""} {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createCommentActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,CommentRestIn comment){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  if (comment == null || comment.getText() == null || comment.getText().trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ExoSocialActivity commentActivity=new ExoSocialActivityImpl();
  commentActivity.setTitle(comment.getText());
  commentActivity.setUserId(authenticatedIdentity.getId());
  activityManager.saveComment(activity,commentActivity);
  CommentRestOut commentOut=new CommentRestOut(commentActivity,portalContainerName);
  return Util.getResponse(commentOut,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Post a new comment on an existing activity. The poster of this comment is an authenticated identity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment.json BODY: {""text"": ""My comment here!!!""} {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createCommentActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,CommentRestIn comment){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  if (comment == null || comment.getText() == null || comment.getText().trim().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ExoSocialActivity commentActivity=new ExoSocialActivityImpl();
  commentActivity.setTitle(comment.getText());
  commentActivity.setUserId(authenticatedIdentity.getId());
  activityManager.saveComment(activity,commentActivity);
  CommentRestOut commentOut=new CommentRestOut(commentActivity,portalContainerName);
  return Util.getResponse(commentOut,uriInfo,mediaType,Response.Status.OK);
}",0.9996274217585692
102553,"/** 
 * Delete an existing activity by its Id using the POST method. The deleted activity information will be returned in the JSON format. It is recommended to use the DELETE method, except the case that clients cannot make request via this method.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.PostDelete
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/destroy/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, //if comments is required, the total number of comments ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postToDeleteActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  return deleteExistingActivityById(uriInfo,portalContainerName,activityId,format);
}","/** 
 * Delete an existing activity by its Id using the POST method. The deleted activity information will be returned in the JSON format. It is recommended to use the DELETE method, except the case that clients cannot make request via this method.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.PostDelete
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/destroy/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, //if comments is required, the total number of comments ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postToDeleteActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  return deleteExistingActivityById(uriInfo,portalContainerName,activityId,format);
}",0.9995258416311048
102554,"/** 
 * Allow an authenticated identity to do the ""like"" action on an existing activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like.json {code}
 * @response {code:json} { ""liked"": true } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedUserIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.saveLike(activity,authenticatedUserIdentity);
  HashMap resultJson=new HashMap();
  resultJson.put(""String_Node_Str"",true);
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Allow an authenticated identity to do the ""like"" action on an existing activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Post
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like.json {code}
 * @response {code:json} { ""liked"": true } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedUserIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.saveLike(activity,authenticatedUserIdentity);
  HashMap resultJson=new HashMap();
  resultJson.put(""String_Node_Str"",true);
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}",0.9995285242809996
102555,"/** 
 * Delete an existing comment by its ID.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Delete
 * @authenticated
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment/123456.json {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteCommentById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@PathParam(""String_Node_Str"") String commentId){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity commentActivity=null;
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    commentActivity=activityManager.getActivity(commentId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!commentActivity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (!SecurityManager.canDeleteActivity(portalContainer,authenticatedIdentity,commentActivity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteComment(activity,commentActivity);
  HashMap<String,Object> resultHashmap=new HashMap<String,Object>();
  resultHashmap.put(""String_Node_Str"",commentActivity.getId());
  return Util.getResponse(resultHashmap,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Delete an existing comment by its Id.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Delete
 * @authenticated
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment/123456.json {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteCommentById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@PathParam(""String_Node_Str"") String commentId){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity commentActivity=null;
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    commentActivity=activityManager.getActivity(commentId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!commentActivity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (!SecurityManager.canDeleteActivity(portalContainer,authenticatedIdentity,commentActivity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteComment(activity,commentActivity);
  HashMap<String,Object> resultHashmap=new HashMap<String,Object>();
  resultHashmap.put(""String_Node_Str"",commentActivity.getId());
  return Util.getResponse(resultHashmap,uriInfo,mediaType,Response.Status.OK);
}",0.9992088607594936
102556,"/** 
 * Delete an existing comment by its ID using the POST method. The deleted activity information will be returned in the JSON format. It is recommended to use the POST method, except the case that clients cannot make request via this method.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param commentId The specified comment ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.PostDelete
 * @authenticated
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment/destroy/123456.json {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postDeleteCommentById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@PathParam(""String_Node_Str"") String commentId){
  return deleteCommentById(uriInfo,portalContainerName,activityId,format,commentId);
}","/** 
 * Delete an existing comment by its Id using the POST method. The deleted activity information will be returned in the JSON format. It is recommended to use the POST method, except the case that clients cannot make request via this method.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param commentId The specified comment Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.PostDelete
 * @authenticated
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comment/destroy/123456.json {code}
 * @response {code:json} { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""My comment here!!!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postDeleteCommentById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@PathParam(""String_Node_Str"") String commentId){
  return deleteCommentById(uriInfo,portalContainerName,activityId,format,commentId);
}",0.997855611150822
102557,"/** 
 * Get an activity object from a specified activity ID.
 * @param uriInfo The uri request info.
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @param showPosterIdentity When this parameter is set to true, t or 1, the returned activity will provide moreinformation for the user who posted this activity.
 * @param numberOfComments Specify the number of comments to be displayed along with this activity. By default,number_of_comments=0. If number_of_comments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use activity/:id/comments.format instead.
 * @param numberOfLikes Specify the number of latest detailed likes to be returned along with this activity. Bydefault, *number\_of\_likes=0*. If *number\_of\_likes* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @param showActivityStream When this parameter is set to true, t or 1, the returned activity will provide moreinformation for the activity stream that this activity belongs to.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (!SecurityManager.canAccessActivity(portalContainer,ConversationState.getCurrent().getIdentity().getUserId(),activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ActivityRestOut model=new ActivityRestOut(activity,portalContainerName);
  model.setNumberOfLikes(numberOfLikes,activity,portalContainerName);
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get an activity object from a specified activity Id.
 * @param uriInfo The uri request info.
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @param showPosterIdentity When this parameter is set to true, t or 1, the returned activity will provide moreinformation for the user who posted this activity.
 * @param numberOfComments Specify the number of comments to be displayed along with this activity. By default,number_of_comments=0. If number_of_comments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use activity/:id/comments.format instead.
 * @param numberOfLikes Specify the number of latest detailed likes to be returned along with this activity. Bydefault, number\_of\_likes=0. If number\_of\_likes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @param showActivityStream When this parameter is set to true, t or 1, the returned activity will provide moreinformation for the activity stream that this activity belongs to.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activity.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e6f7g8h9i.json {code}
 * @response {code:json} { ""id"": ""1a2b3c4d5e6f7g8h9j"", ""title"": ""Hello World!!!"", ""appId"": """", ""type"": ""exosocial:core"", ""postedTime"": 123456789, //timestamp ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"", //The Date follows ISO 8601 ""priority"": 0.5, //between 0.0 and 1.0, higher value => higher priority. ""templateParams"": {}, ""titleId"": """", ""identityId"": ""123456789abcdefghi"", //the identity id of the user who created this activity ""liked"": true, //is liked (favorites) by this authenticated identity ""likedByIdentities"": [""identityId1"", ""identityId2""], ""posterIdentity"": {}, //optional ""comments"": [{}, {}, {}], //optional ""totalNumberOfComments"": 1234, ""activityStream"": { ""type"": ""user"", // or ""space"" ""prettyId"": ""root"", // or space_abcde ""faviconURL"": ""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"": ""Activity Stream of Root Root"", ""permaLink"": ""http://cloud-workspaces.com/profile/root"" } //optional } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") String showPosterIdentity,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") String showActivityStream,@QueryParam(""String_Node_Str"") int numberOfLikes){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  IdentityManager identityManager=Util.getIdentityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (activity.isComment()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (!SecurityManager.canAccessActivity(portalContainer,ConversationState.getCurrent().getIdentity().getUserId(),activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  ActivityRestOut model=new ActivityRestOut(activity,portalContainerName);
  model.setNumberOfLikes(numberOfLikes,activity,portalContainerName);
  if (isPassed(showPosterIdentity)) {
    model.setPosterIdentity(new IdentityRestOut(identityManager.getIdentity(activity.getUserId(),false)));
  }
  if (isPassed(showActivityStream)) {
    model.setActivityStream(new ActivityStreamRestOut(activity.getActivityStream(),portalContainerName));
  }
  model.setNumberOfComments(numberOfComments,activity,portalContainerName);
  return Util.getResponse(model,uriInfo,mediaType,Response.Status.OK);
}",0.9992155324573446
102558,"/** 
 * Get the comments on an activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comments.json {code}
 * @response {code:json} { total: 10, comments: [ { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""Comment there!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" }, { ""id"" : ""234567"" ""identityId"": ""12345abcde"", ""text"": ""Comment there 2!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } ] } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getCommentsByActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    if (!SecurityManager.canAccessActivity(portalContainer,authenticatedIdentity,activity)) {
      throw new WebApplicationException(Response.Status.FORBIDDEN);
    }
    int total;
    List<CommentRestOut> commentWrapers=null;
    ListAccess<ExoSocialActivity> comments=activityManager.getCommentsWithListAccess(activity);
    total=comments.getSize();
    ExoSocialActivity[] commentsLimited=comments.load(0,total);
    commentWrapers=new ArrayList<CommentRestOut>(total);
    for (int i=0; i < total; i++) {
      CommentRestOut commentRestOut=new CommentRestOut(commentsLimited[i],portalContainerName);
      commentRestOut.setPosterIdentity(commentsLimited[i],portalContainerName);
      commentWrapers.add(commentRestOut);
    }
    HashMap<String,Object> resultJson=new HashMap<String,Object>();
    resultJson.put(""String_Node_Str"",commentWrapers.size());
    resultJson.put(""String_Node_Str"",commentWrapers);
    return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
}","/** 
 * Get the comments on an activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.Activitycomments.Get
 * @authentication
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/comments.json {code}
 * @response {code:json} { total: 10, comments: [ { ""id"": ""123456"" ""identityId"": ""12345abcde"", ""text"": ""Comment there!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" }, { ""id"" : ""234567"" ""identityId"": ""12345abcde"", ""text"": ""Comment there 2!"", ""postedTime"": 123456789, ""createdAt"": ""Fri Jun 17 06:42:26 +0000 2011"" } ] } {code}
 * @return a response object
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getCommentsByActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
    if (!SecurityManager.canAccessActivity(portalContainer,authenticatedIdentity,activity)) {
      throw new WebApplicationException(Response.Status.FORBIDDEN);
    }
    int total;
    List<CommentRestOut> commentWrapers=null;
    ListAccess<ExoSocialActivity> comments=activityManager.getCommentsWithListAccess(activity);
    total=comments.getSize();
    ExoSocialActivity[] commentsLimited=comments.load(0,total);
    commentWrapers=new ArrayList<CommentRestOut>(total);
    for (int i=0; i < total; i++) {
      CommentRestOut commentRestOut=new CommentRestOut(commentsLimited[i],portalContainerName);
      commentRestOut.setPosterIdentity(commentsLimited[i],portalContainerName);
      commentWrapers.add(commentRestOut);
    }
    HashMap<String,Object> resultJson=new HashMap<String,Object>();
    resultJson.put(""String_Node_Str"",commentWrapers.size());
    resultJson.put(""String_Node_Str"",commentWrapers);
    return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
catch (  Exception e) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
}",0.9996770025839792
102559,"/** 
 * Allow an identity to remove his ""like"" action on an activity. It is recommended to use the DELETE method, except the case that clients cannot make request via this method.
 * @param uriInfo the uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Postdestroy
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like/destroy.json {code}
 * @response {code:json} { ""liked"": false } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postDeleteLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  return deleteLikeActivityById(uriInfo,portalContainerName,activityId,format);
}","/** 
 * Allow an identity to remove his ""like"" action on an activity. It is recommended to use the DELETE method, except the case that clients cannot make request via this method.
 * @param uriInfo the uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Postdestroy
 * @authentication
 * @request {code} POST: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like/destroy.json {code}
 * @response {code:json} { ""liked"": false } {code}
 * @return a response object
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response postDeleteLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  return deleteLikeActivityById(uriInfo,portalContainerName,activityId,format);
}",0.9990900818926296
102560,"/** 
 * Allow an identity to remove his ""like"" action on an activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity ID.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Delete
 * @authentication
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like.json {code}
 * @response {code:json} { ""liked"": false } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedUserIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteLike(activity,authenticatedUserIdentity);
  HashMap resultJson=new HashMap();
  resultJson.put(""String_Node_Str"",false);
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Allow an identity to remove his ""like"" action on an activity.
 * @param uriInfo The uri request uri
 * @param portalContainerName The associated portal container name.
 * @param activityId The specified activity Id.
 * @param format The expected returned format.
 * @anchor SOCref.DevelopersReferences.RestService_APIs_v1alpha3.ActivityResource.ActivityLike.Delete
 * @authentication
 * @request {code} DELETE: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/portal/activity/1a2b3c4d5e/like.json {code}
 * @response {code:json} { ""liked"": false } {code}
 * @return a response object
 */
@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response deleteLikeActivityById(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format){
  RestChecker.checkAuthenticatedRequest();
  PortalContainer portalContainer=RestChecker.checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=RestChecker.checkSupportedFormat(format,SUPPORTED_FORMAT);
  Identity authenticatedUserIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  ExoSocialActivity activity=null;
  try {
    activity=activityManager.getActivity(activityId);
  }
 catch (  UndeclaredThrowableException undeclaredThrowableException) {
    if (undeclaredThrowableException.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  if (!SecurityManager.canCommentToActivity(portalContainer,authenticatedUserIdentity,activity)) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  activityManager.deleteLike(activity,authenticatedUserIdentity);
  HashMap resultJson=new HashMap();
  resultJson.put(""String_Node_Str"",false);
  return Util.getResponse(resultJson,uriInfo,mediaType,Response.Status.OK);
}",0.9995265151515152
102561,"/** 
 * Get activities of a defined identity which can be a user identity, a space identity, or any type of identities. There is one special _identityId_ called ""me"" which stands for the authenticated user who makes this request.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               The number of activities retrieved with the default value of 100. This input value mustbe less than or equal to its default value (100). The number of the returned results is actually less than or equal to the *limit* value. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater than the specified*since\_id*_'s created timestamp.
 * @param maxId               Return the activities having the created timestamps less than the specified *max\_id*'screated timestamp. Note that *since\_id* and *max\_id* must not be defined in one request, if they are, the *since\_id* query param is chosen.
 * @param numberOfComments    Specify the number of latest comments to be displayed along with each activity.By default, *number\_of\_comments=0*. If *number\_of\_comments* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use _activity/\:activityId/comments.format_ instead.
 * @param numberOfLikes       Specify the number of latest detailed likes to be returned along with this activity.By default, *number\_of\_likes=0*. If *number\_of\_likes* is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Identity.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/f92cd6f0c0a80137102696ac26430766.json?limit=30&since_id=12345&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"": """", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity;
  if (""String_Node_Str"".equals(identityId)) {
    targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  }
 else {
    targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  }
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,Util.getAuthenticatedUserIdentity(portalContainerName),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Get activities of a defined identity which can be a user identity, a space identity, or any type of identities. There is one special _identityId_ called ""me"" which stands for the authenticated user who makes this request.
 * @param uriInfo             The URI information.
 * @param portalContainerName The portal container name.
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: JSON, or XML.
 * @param limit               The number of activities retrieved with the default value of 100. This input value mustbe less than or equal to its default value (100). The number of the returned results is actually less than or equal to the _limit_ value. If no specified, 100 will be the default value.
 * @param sinceId             Return the activities having the created timestamps greater than the specified_since\_id_'s created timestamp.
 * @param maxId               Return the activities having the created timestamps less than the specified _max\_id_'screated timestamp. Note that _since\_id_ and _max\_id_ must not be defined in one request, if they are, the _since\_id_ query param is chosen.
 * @param numberOfComments    Specify the number of latest comments to be displayed along with each activity.By default, _number\_of\_comments=0_. If _number\_of\_comments_ is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it is recommended to use _activity/\:activityId/comments.format_ instead.
 * @param numberOfLikes       Specify the number of latest detailed likes to be returned along with this activity.By default, _number\_of\_likes=0_. If _number\_of\_likes_ is a positive number, this number is considered as a limit number that must be equal or less than 100. If the total number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it is recommended to use _activity/\:activityId/likes.format_ instead.
 * @anchor SOCref.DevRef.V1alpha3.ActivityStreamResource.Identity.GetDefault
 * @authenticated
 * @request {code} GET: http://cloud-workspaces.com/rest/private/api/social/v1-alpha3/socialdemo/activity_stream/f92cd6f0c0a80137102696ac26430766.json?limit=30&since_id=12345&number_of_likes=5 {code}
 * @response {code:json} { ""activities"":[ { ""id"":""1a2b3c4d5e6f7g8h9j"", ""title"":""Hello World!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 17 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"": """", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } }, { ""id"":""1a210983123f7g8h9j"", ""title"":""Hello World 1!!!"", ""appId"":"""", ""type"":""DEFAULT_ACTIVITY"", ""postedTime"":123456789, ""createdAt"":""Fri Jun 19 06:42:26 +0000 2011"", ""priority"":0.5, ""templateParams"":{ }, ""titleId"":"""", ""body"": """", ""identityId"":""123456789abcdefghi"", ""liked"":true, ""likedByIdentities"":[ { ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } } ], ""totalNumberOfLikes"":20, ""posterIdentity"":{ ""id"":""123456313efghi"", ""providerId"":""organization"", ""remoteId"":""demo"", ""profile"":{ ""fullName"":""Demo GTN"", ""avatarUrl"":""http://localhost:8080/profile/u/demo/avatar.jpg?u=12345"" } }, ""comments"":[ { } ], ""totalNumberOfComments"":1234, ""activityStream"":{ ""type"":""user"", ""prettyId"":""root"", ""fullName"": ""Root Root"", ""faviconUrl"":""http://demo3.exoplatform.org/favicons/exo-default.jpg"", ""title"":""Activity Stream of Root Root"", ""permaLink"":""http://localhost:8080/profile/root"" } } ] } {code}
 * @return the response
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity;
  if (""String_Node_Str"".equals(identityId)) {
    targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  }
 else {
    targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  }
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,Util.getAuthenticatedUserIdentity(portalContainerName),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}",0.995936359253392
102562,"private ExoSocialMedia jsonToExoSocialMedia(JSONObject jsonObject){
  ExoSocialMedia mediaObject=new ExoSocialMedia();
  try {
    mediaObject.setTitle(jsonObject.getString(EMBED_TITLE));
    mediaObject.setHtml(jsonObject.getString(EMBED_HTML));
    mediaObject.setType(jsonObject.getString(EMBED_TYPE));
    mediaObject.setProvider(jsonObject.getString(EMBED_PROVIDER));
    mediaObject.setDescription(jsonObject.has(EMBED_DESC) ? jsonObject.getString(EMBED_DESC) : ""String_Node_Str"");
    mediaObject.setUrl(jsonObject.has(EMBED_URL) ? jsonObject.getString(EMBED_URL) : ""String_Node_Str"");
    return mediaObject;
  }
 catch (  JSONException e) {
    log.warn(""String_Node_Str"",e);
    return null;
  }
}","private ExoSocialMedia jsonToExoSocialMedia(JSONObject jsonObject){
  ExoSocialMedia mediaObject=new ExoSocialMedia();
  try {
    mediaObject.setTitle(jsonObject.getString(EMBED_TITLE));
    mediaObject.setHtml(jsonObject.getString(EMBED_HTML));
    mediaObject.setType(jsonObject.getString(EMBED_TYPE));
    mediaObject.setProvider(jsonObject.getString(EMBED_PROVIDER));
    mediaObject.setDescription(jsonObject.has(EMBED_DESC) ? jsonObject.getString(EMBED_DESC) : ""String_Node_Str"");
    mediaObject.setUrl(jsonObject.has(EMBED_URL) ? jsonObject.getString(EMBED_URL) : ""String_Node_Str"");
    return mediaObject;
  }
 catch (  JSONException e) {
    LOG.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9957567185289956
102563,"private JSONObject getOembedData(URL url){
  BufferedReader bufferedReader;
  try {
    bufferedReader=new BufferedReader(new InputStreamReader(url.openStream()));
    StringBuffer stringBuffer=new StringBuffer();
    String eachLine=null;
    while ((eachLine=bufferedReader.readLine()) != null) {
      stringBuffer.append(eachLine);
    }
    bufferedReader.close();
    return new JSONObject(stringBuffer.toString());
  }
 catch (  JSONException e) {
    log.warn(""String_Node_Str"",e);
    return null;
  }
catch (  IOException e) {
    log.warn(""String_Node_Str"",e);
    return null;
  }
}","private JSONObject getOembedData(URL url){
  BufferedReader bufferedReader;
  try {
    bufferedReader=new BufferedReader(new InputStreamReader(url.openStream()));
    StringBuffer stringBuffer=new StringBuffer();
    String eachLine=null;
    while ((eachLine=bufferedReader.readLine()) != null) {
      stringBuffer.append(eachLine);
    }
    bufferedReader.close();
    return new JSONObject(stringBuffer.toString());
  }
 catch (  JSONException e) {
    LOG.warn(""String_Node_Str"",e);
    return null;
  }
catch (  IOException e) {
    LOG.warn(""String_Node_Str"",e);
    return null;
  }
catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9274447949526814
102564,"private URL getOembedUrl(String url){
  try {
    for (    Pattern pattern : schemeEndpointMap.keySet()) {
      Matcher matcher=pattern.matcher(url);
      if (matcher.find()) {
        String endpoint=schemeEndpointMap.get(pattern);
        return new URL(String.format(endpoint,url));
      }
    }
    return null;
  }
 catch (  MalformedURLException e) {
    log.warn(""String_Node_Str"",e);
    return null;
  }
}","private URL getOembedUrl(String url){
  try {
    for (    Pattern pattern : schemeEndpointMap.keySet()) {
      Matcher matcher=pattern.matcher(url);
      if (matcher.find()) {
        String endpoint=schemeEndpointMap.get(pattern);
        return new URL(String.format(endpoint,url));
      }
    }
    return null;
  }
 catch (  MalformedURLException e) {
    LOG.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9928057553956836
102565,"/** 
 * test slideshare link
 */
public void testSlideShare(){
  ExoSocialMedia slideObj=embedder.getExoSocialMedia(""String_Node_Str"");
  assertEquals(""String_Node_Str"",slideObj.getProvider());
}","/** 
 * test slideshare link
 */
public void testSlideShare(){
  ExoSocialMedia slideObj=embedder.getExoSocialMedia(""String_Node_Str"");
  if (slideObj == null) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    assertEquals(""String_Node_Str"",slideObj.getProvider());
  }
}",0.8351177730192719
102566,"/** 
 * Test youtube link
 */
public void testYoutube(){
  ExoSocialMedia videoObj=embedder.getExoSocialMedia(""String_Node_Str"");
  assertEquals(""String_Node_Str"",videoObj.getProvider());
}","/** 
 * Test youtube link
 */
public void testYoutube(){
  ExoSocialMedia videoObj=embedder.getExoSocialMedia(""String_Node_Str"");
  if (videoObj == null) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    assertEquals(""String_Node_Str"",videoObj.getProvider());
  }
}",0.8307692307692308
102567,"/** 
 * gets linkShare
 * @param link
 * @param lang
 * @return linkShare
 */
private LinkShare getLinkShare(String link,String lang) throws Exception {
  if (link == null || link.length() == 0) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  LinkShare ls;
  try {
    if (lang != null) {
      ls=LinkShare.getInstance(link,lang);
    }
 else {
      ls=LinkShare.getInstance(link);
    }
  }
 catch (  Exception ex) {
    throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
  }
  return ls;
}","/** 
 * gets linkShare
 * @param link
 * @param lang
 * @return linkShare
 */
private LinkShare getLinkShare(String link,String lang) throws Exception {
  if (link == null || link.length() == 0) {
    throw new WebApplicationException(Response.Status.BAD_REQUEST);
  }
  LinkShare ls;
  try {
    if (lang != null) {
      ls=LinkShare.getInstance(link,lang);
    }
 else {
      ls=LinkShare.getInstance(link);
    }
  }
 catch (  Exception ex) {
    throw new WebApplicationException(ex,Response.Status.INTERNAL_SERVER_ERROR);
  }
  return ls;
}",0.997250229147571
102568,"/** 
 * Gets activity link of the space.
 * @param providerId
 * @param remoteId
 * @param groupId
 * @return
 * @since 1.2.8
 */
public static String getActivityUriForSpace(final String providerId,final String remoteId,final String groupId){
  return String.format(""String_Node_Str"",getPortalName(null),groupId,remoteId);
}","/** 
 * Gets activity link of the space.
 * @param remoteId
 * @param groupId
 * @return
 * @since 1.2.8
 */
public static String getActivityUriForSpace(final String remoteId,final String groupId){
  return String.format(""String_Node_Str"",getPortalName(null),groupId,remoteId);
}",0.9253731343283582
102569,"/** 
 * Builds pretty name base on the basic name in case create more than one space with the same name.
 * @param groupId
 * @return
 */
public static String buildGroupId(String groupId){
  String checkedGroupId=groupId;
  String mainPatternGroupId=null;
  String numberPattern=NUMBER_REG_PATTERN;
  if (checkedGroupId.substring(checkedGroupId.lastIndexOf(UNDER_SCORE_STR) + 1).matches(numberPattern)) {
    mainPatternGroupId=checkedGroupId.substring(0,checkedGroupId.lastIndexOf(UNDER_SCORE_STR));
  }
 else {
    mainPatternGroupId=checkedGroupId;
  }
  boolean hasNext=true;
  int extendPattern=0;
  while (hasNext) {
    ++extendPattern;
    checkedGroupId=cleanString(mainPatternGroupId + SPACE_STR + extendPattern);
    ExoContainer container=ExoContainerContext.getCurrentContainer();
    IdentityManager idm=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
    Identity identity=idm.getOrCreateIdentity(SpaceIdentityProvider.NAME,checkedGroupId,true);
    if (identity == null) {
      hasNext=false;
    }
  }
  return checkedGroupId;
}","/** 
 * Builds pretty name base on the basic name in case create more than one space with the same name.
 * @param prettyName
 * @param parentGroupId
 * @return
 * @since 1.2.8
 */
public static String buildGroupId(String prettyName,String parentGroupId){
  String checkedGroupId=prettyName;
  String mainPatternGroupId=null;
  String numberPattern=NUMBER_REG_PATTERN;
  if (checkedGroupId.substring(checkedGroupId.lastIndexOf(UNDER_SCORE_STR) + 1).matches(numberPattern)) {
    mainPatternGroupId=checkedGroupId.substring(0,checkedGroupId.lastIndexOf(UNDER_SCORE_STR));
  }
 else {
    mainPatternGroupId=checkedGroupId;
  }
  boolean hasNext=true;
  int extendPattern=0;
  while (hasNext) {
    ++extendPattern;
    checkedGroupId=cleanString(mainPatternGroupId + SPACE_STR + extendPattern);
    ExoContainer container=ExoContainerContext.getCurrentContainer();
    SpaceService spaceService=(SpaceService)container.getComponentInstanceOfType(SpaceService.class);
    if (spaceService.getSpaceByGroupId(parentGroupId + ""String_Node_Str"" + checkedGroupId) != null) {
      continue;
    }
    IdentityManager idm=(IdentityManager)container.getComponentInstanceOfType(IdentityManager.class);
    Identity identity=idm.getOrCreateIdentity(SpaceIdentityProvider.NAME,checkedGroupId,true);
    if (identity == null) {
      hasNext=false;
    }
  }
  return checkedGroupId;
}",0.8619281045751634
102570,"/** 
 * Creates new group in /Spaces node and return groupId
 * @param spaceName String
 * @param creator   String
 * @return groupId String
 * @throws SpaceException
 */
public static String createGroup(String spaceName,String creator) throws SpaceException {
  OrganizationService organizationService=getOrganizationService();
  GroupHandler groupHandler=organizationService.getGroupHandler();
  Group parentGroup;
  Group newGroup;
  String groupId;
  String shortName;
  try {
    parentGroup=groupHandler.findGroupById(SPACE_GROUP);
    newGroup=groupHandler.createGroupInstance();
    shortName=SpaceUtils.cleanString(spaceName);
    groupId=parentGroup.getId() + ""String_Node_Str"" + shortName;
    PortalContainer portalContainer=PortalContainer.getInstance();
    SpaceService spaceService=(SpaceService)portalContainer.getComponentInstanceOfType(SpaceService.class);
    if (spaceService.getSpaceByGroupId(groupId) != null) {
      shortName=buildGroupId(shortName);
      groupId=parentGroup.getId() + ""String_Node_Str"" + shortName;
    }
    if (isSpaceNameExisted(spaceName)) {
      throw new SpaceException(SpaceException.Code.SPACE_ALREADY_EXIST);
    }
    newGroup.setGroupName(shortName);
    newGroup.setLabel(spaceName);
    newGroup.setDescription(""String_Node_Str"" + parentGroup.getId() + ""String_Node_Str""+ shortName+ ""String_Node_Str"");
    groupHandler.addChild(parentGroup,newGroup,true);
  }
 catch (  Exception e) {
    if (e instanceof SpaceException) {
      throw (SpaceException)e;
    }
    throw new SpaceException(SpaceException.Code.UNABLE_TO_CREATE_GROUP,e);
  }
  try {
    addCreatorToGroup(creator,groupId);
  }
 catch (  Exception e) {
    throw new SpaceException(SpaceException.Code.UNABLE_TO_ADD_CREATOR,e);
  }
  return groupId;
}","/** 
 * Creates new group in /Spaces node and return groupId
 * @param spaceName String
 * @param creator   String
 * @return groupId String
 * @throws SpaceException
 */
public static String createGroup(String spaceName,String creator) throws SpaceException {
  OrganizationService organizationService=getOrganizationService();
  GroupHandler groupHandler=organizationService.getGroupHandler();
  Group parentGroup;
  Group newGroup;
  String groupId;
  String shortName;
  try {
    parentGroup=groupHandler.findGroupById(SPACE_GROUP);
    newGroup=groupHandler.createGroupInstance();
    shortName=SpaceUtils.cleanString(spaceName);
    groupId=parentGroup.getId() + ""String_Node_Str"" + shortName;
    PortalContainer portalContainer=PortalContainer.getInstance();
    SpaceService spaceService=(SpaceService)portalContainer.getComponentInstanceOfType(SpaceService.class);
    if (spaceService.getSpaceByGroupId(groupId) != null) {
      shortName=buildGroupId(shortName,parentGroup.getId());
      groupId=parentGroup.getId() + ""String_Node_Str"" + shortName;
    }
    if (isSpaceNameExisted(spaceName)) {
      throw new SpaceException(SpaceException.Code.SPACE_ALREADY_EXIST);
    }
    newGroup.setGroupName(shortName);
    newGroup.setLabel(spaceName);
    newGroup.setDescription(""String_Node_Str"" + parentGroup.getId() + ""String_Node_Str""+ shortName+ ""String_Node_Str"");
    groupHandler.addChild(parentGroup,newGroup,true);
  }
 catch (  Exception e) {
    if (e instanceof SpaceException) {
      throw (SpaceException)e;
    }
    throw new SpaceException(SpaceException.Code.UNABLE_TO_CREATE_GROUP,e);
  }
  try {
    addCreatorToGroup(creator,groupId);
  }
 catch (  Exception e) {
    throw new SpaceException(SpaceException.Code.UNABLE_TO_ADD_CREATOR,e);
  }
  return groupId;
}",0.9943977591036416
102571,"private void fillStream(ActivityEntity activityEntity,ExoSocialActivity activity){
  ActivityStream stream=new ActivityStreamImpl();
  IdentityEntity identityEntity=activityEntity.getIdentity();
  stream.setId(identityEntity.getId());
  stream.setPrettyId(identityEntity.getRemoteId());
  stream.setType(identityEntity.getProviderId());
  if (identityEntity != null && SpaceIdentityProvider.NAME.equals(identityEntity.getProviderId())) {
    Space space=spaceStorage.getSpaceByPrettyName(identityEntity.getRemoteId());
    if (space != null) {
      String groupId=space.getGroupId().split(""String_Node_Str"")[2];
      stream.setPermaLink(LinkProvider.getActivityUriForSpace(identityEntity.getProviderId(),identityEntity.getRemoteId(),groupId));
    }
  }
 else {
    stream.setPermaLink(LinkProvider.getActivityUri(identityEntity.getProviderId(),identityEntity.getRemoteId()));
  }
  activity.setActivityStream(stream);
  activity.setStreamId(stream.getId());
  activity.setStreamOwner(stream.getPrettyId());
}","private void fillStream(ActivityEntity activityEntity,ExoSocialActivity activity){
  ActivityStream stream=new ActivityStreamImpl();
  IdentityEntity identityEntity=activityEntity.getIdentity();
  stream.setId(identityEntity.getId());
  stream.setPrettyId(identityEntity.getRemoteId());
  stream.setType(identityEntity.getProviderId());
  if (identityEntity != null && SpaceIdentityProvider.NAME.equals(identityEntity.getProviderId())) {
    Space space=spaceStorage.getSpaceByPrettyName(identityEntity.getRemoteId());
    if (space != null) {
      String groupId=space.getGroupId().split(""String_Node_Str"")[2];
      stream.setPermaLink(LinkProvider.getActivityUriForSpace(identityEntity.getRemoteId(),groupId));
    }
  }
 else {
    stream.setPermaLink(LinkProvider.getActivityUri(identityEntity.getProviderId(),identityEntity.getRemoteId()));
  }
  activity.setActivityStream(stream);
  activity.setStreamId(stream.getId());
  activity.setStreamOwner(stream.getPrettyId());
}",0.9844299347061778
102572,"/** 
 * {@inheritDoc}
 */
public void deleteSpace(final String id) throws SpaceStorageException {
  storage.deleteSpace(id);
  SpaceData removed=exoSpaceCache.remove(new SpaceKey(id));
  exoSpacesCountCache.clearCache();
  exoSpacesCache.clearCache();
  if (removed != null) {
    cleanRef(removed);
  }
}","/** 
 * {@inheritDoc}
 */
public void deleteSpace(final String id) throws SpaceStorageException {
  storage.deleteSpace(id);
  SpaceData removed=exoSpaceCache.remove(new SpaceKey(id));
  exoSpacesCountCache.clearCache();
  exoSpacesCache.clearCache();
  if (removed != null) {
    cleanRef(removed);
  }
  getCachedActivityStorage().invalidate();
}",0.9341500765696784
102573,"/** 
 * Gets base url (host + post) from a context uriInfo. <p/> For example: http://localhost:8080
 * @return the base url (host + port)
 * @author <a href=""http://hoatle"">hoatle (hoatlevan at gmail dot com)</a>
 * @since  1.2.3
 */
public static final String getBaseUrl(){
  HttpServletRequest currentServletRequest=getCurrentServletRequest();
  String port=""String_Node_Str"";
  if (currentServletRequest.getRemotePort() != -1) {
    port=""String_Node_Str"" + currentServletRequest.getRemotePort();
  }
  return currentServletRequest.getScheme() + ""String_Node_Str"" + currentServletRequest.getRemoteHost()+ port;
}","/** 
 * Gets base url (host + post) from a context uriInfo. <p/> For example: http://localhost:8080
 * @return the base url (host + port)
 * @author <a href=""http://hoatle"">hoatle (hoatlevan at gmail dot com)</a>
 * @since  1.2.3
 */
public static final String getBaseUrl(){
  HttpServletRequest currentServletRequest=getCurrentServletRequest();
  return currentServletRequest.getScheme() + ""String_Node_Str"" + currentServletRequest.getServerName()+ ""String_Node_Str""+ currentServletRequest.getServerPort();
}",0.7900355871886121
102574,"private void setFakeCurrentEnvironmentContext(String urlRequest){
  EnvironmentContext envctx=new EnvironmentContext();
  HttpServletRequest httpRequest=new FakeHttpServletRequest(urlRequest);
  envctx.put(HttpServletRequest.class,httpRequest);
  EnvironmentContext.setCurrent(envctx);
}","private void setFakeCurrentEnvironmentContext(String urlRequest){
  EnvironmentContext envctx=new EnvironmentContext();
  HttpServletRequest httpRequest=new MockHttpServletRequest(urlRequest,null,0,""String_Node_Str"",null);
  envctx.put(HttpServletRequest.class,httpRequest);
  EnvironmentContext.setCurrent(envctx);
}",0.5794701986754967
102575,"/** 
 * Gets activity stream of a specified identity, could be user identity, space identity or any type of identities.
 * @param uriInfo             The uri info
 * @param portalContainerName the portal container name
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: json, xml...
 * @param limit               Specifies the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Returns the activities having the created timestamps greater thanthe specified sinceId's created timestamp
 * @param maxId               Returns the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specifies the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead
 * @param numberOfLikes       Specifies the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @return the response
 */
@GET @Path(""String_Node_Str"") public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,SecurityManager.getAuthenticatedUserIdentity(),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit == 0 ? MAX_LIMIT : limit;
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * Gets activity stream of a specified identity, could be user identity, space identity or any type of identities.
 * @param uriInfo             The uri info
 * @param portalContainerName the portal container name
 * @param identityId          The identity id.There is one special identityId: ""me"" standing for the authenticated user who make this request.
 * @param format              The response format type, for example: json, xml...
 * @param limit               Specifies the number of activities to retrieve. Must be less than or equal to 100.The value you pass as limit is a maximum number of activities to be returned. The actual number of activities you receive maybe less than limit. If no specified, 100 will be the default value.
 * @param sinceId             Returns the activities having the created timestamps greater thanthe specified sinceId's created timestamp
 * @param maxId               Returns the activities having the created timestamp less than the specified maxId's createdtimestamp. Note that sinceId and maxId must not be defined in one request, if they are, the sinceId query param is chosen.
 * @param numberOfComments    Specifies the latest number of comments to be displayed along with each activity.By default, numberOfComments=0. If numberOfComments is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of comments is less than the provided positive number, the number of actual comments must be returned. If the total number of comments is more than 100, it's recommended to use: ""activity/:activityId/comments.format"" instead
 * @param numberOfLikes       Specifies the latest number of detailed likes to be returned along with this activity.By default, numberOfLikes=0. If numberOfLikes is a positive number, this number is considered as a limit number that must be equal or less than 100. If the actual number of likes is less than the provided positive number, the number of actual likes must be returned. If the total number of likes is more than 100, it's recommended to use: ""activity/:activityId/likes.format"" instead.
 * @return the response
 */
@GET @Path(""String_Node_Str"") public Response getActivityStreamByIdentityId(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalContainerName,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format,@QueryParam(""String_Node_Str"") int limit,@QueryParam(""String_Node_Str"") String sinceId,@QueryParam(""String_Node_Str"") String maxId,@QueryParam(""String_Node_Str"") int numberOfComments,@QueryParam(""String_Node_Str"") int numberOfLikes){
  checkAuthenticatedRequest();
  PortalContainer portalContainer=checkValidPortalContainerName(portalContainerName);
  MediaType mediaType=checkSupportedFormat(format,SUPPORTED_FORMATS);
  Identity targetIdentity;
  if (""String_Node_Str"".equals(identityId)) {
    targetIdentity=Util.getAuthenticatedUserIdentity(portalContainerName);
  }
 else {
    targetIdentity=Util.getIdentityManager(portalContainerName).getIdentity(identityId,false);
  }
  if (targetIdentity == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  boolean canAccess=SecurityManager.canAccessActivityStream(portalContainer,Util.getAuthenticatedUserIdentity(portalContainerName),targetIdentity);
  if (!canAccess) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  int maxLimit=limit <= 0 ? MAX_LIMIT : Math.min(limit,MAX_LIMIT);
  ExoSocialActivity baseActivity=null;
  boolean getOlder=false;
  ActivityManager activityManager=Util.getActivityManager(portalContainerName);
  try {
    if (sinceId != null) {
      baseActivity=activityManager.getActivity(sinceId);
    }
 else     if (maxId != null) {
      getOlder=true;
      baseActivity=activityManager.getActivity(maxId);
    }
  }
 catch (  UndeclaredThrowableException udte) {
    if (udte.getCause() instanceof ActivityStorageException) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
 else {
      throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
    }
  }
  RealtimeListAccess<ExoSocialActivity> rala=activityManager.getActivitiesWithListAccess(targetIdentity);
  List<ExoSocialActivity> activityList;
  if (getOlder) {
    activityList=rala.loadOlder(baseActivity,maxLimit);
  }
 else   if (sinceId != null) {
    activityList=rala.loadNewer(baseActivity,maxLimit);
  }
 else {
    activityList=rala.loadAsList(0,maxLimit);
  }
  ActivityRestListOut arlo=new ActivityRestListOut(activityList,numberOfComments,numberOfLikes,portalContainerName);
  return Util.getResponse(arlo,uriInfo,mediaType,Response.Status.OK);
}",0.965674066053059
102576,"/** 
 * Constructors to set the list of activities and the number of comments, the number of likes.
 * @param activityList     the activity list
 * @param numberOfComments the number of comments
 * @param numberOfLikes    the number of likes
 */
public ActivityRestListOut(List<ExoSocialActivity> activityList,int numberOfComments,int numberOfLikes,String portalContainerName){
  if (activityList == null || activityList.size() == 0) {
    initialize();
    return;
  }
 else   if (activityList.size() > MAX_LIMIT) {
    activityList=activityList.subList(0,MAX_LIMIT - 1);
  }
  numberOfComments=Math.min(numberOfComments,MAX_NUMBER_OF_COMMENTS);
  numberOfLikes=Math.min(numberOfLikes,MAX_NUMBER_OF_LIKES);
  initialize(activityList,numberOfComments,numberOfLikes,portalContainerName);
}","/** 
 * Constructors to set the list of activities and the number of comments, the number of likes.
 * @param activityList     the activity list
 * @param numberOfComments the number of comments
 * @param numberOfLikes    the number of likes
 */
public ActivityRestListOut(List<ExoSocialActivity> activityList,int numberOfComments,int numberOfLikes,String portalContainerName){
  if (activityList == null || activityList.size() == 0) {
    initialize();
    return;
  }
 else   if (activityList.size() > MAX_LIMIT) {
    activityList=activityList.subList(0,MAX_LIMIT - 1);
  }
  numberOfComments=numberOfComments >= 0 ? numberOfComments : 0;
  numberOfComments=Math.min(numberOfComments,MAX_NUMBER_OF_COMMENTS);
  numberOfLikes=numberOfLikes >= 0 ? numberOfLikes : 0;
  numberOfLikes=Math.min(numberOfLikes,MAX_NUMBER_OF_LIKES);
  initialize(activityList,numberOfComments,numberOfLikes,portalContainerName);
}",0.928697701826753
102577,"private void setFakeCurrentEnvironmentContext(String urlRequest){
  EnvironmentContext envctx=new EnvironmentContext();
  HttpServletRequest httpRequest=new MockHttpServletRequest(urlRequest,null,0,""String_Node_Str"",null);
  envctx.put(HttpServletRequest.class,httpRequest);
  EnvironmentContext.setCurrent(envctx);
}","private void setFakeCurrentEnvironmentContext(String urlRequest){
  EnvironmentContext envctx=new EnvironmentContext();
  HttpServletRequest httpRequest=new SocialMockHttpServletRequest(urlRequest,null,0,""String_Node_Str"",null);
  envctx.put(HttpServletRequest.class,httpRequest);
  EnvironmentContext.setCurrent(envctx);
}",0.990625
102578,"/** 
 * Initializes all components for the first time.
 * @throws Exception
 */
public UIDisplayProfileList() throws Exception {
  iterator=addChild(UIPageIterator.class,null,ITERATOR_ID);
  uiProfileUserSearchPeople=createUIComponent(UIProfileUserSearch.class,null,""String_Node_Str"");
  addChild(uiProfileUserSearchPeople);
  this.identityList=new ArrayList<Identity>();
}","/** 
 * Constructor to initialize iterator.
 * @throws Exception
 */
public UIDisplayProfileList() throws Exception {
  uiProfileUserSearch=addChild(UIProfileUserSearch.class,null,null);
  uiProfileUserSearch.setHasPeopleTab(false);
  init();
}",0.4213938411669368
102579,"@Override public void execute(Event<UIDisplayProfileList> event) throws Exception {
  UIDisplayProfileList uiMyRelation=event.getSource();
  UIProfileUserSearch uiProfileUserSearch=uiMyRelation.getChild(UIProfileUserSearch.class);
  List<Identity> identityList=uiProfileUserSearch.getIdentityList();
  uiMyRelation.setIdentityList(identityList);
  uiMyRelation.setSearched(true);
}","@Override public void execute(Event<UIDisplayProfileList> event) throws Exception {
  UIDisplayProfileList uiAllPeople=event.getSource();
  uiAllPeople.loadSearch();
  uiAllPeople.setLoadAtEnd(false);
}",0.4665523156089194
102580,"/** 
 * Initializes user search form fields. Initials and adds components as children to search form.
 * @throws Exception
 */
public UIProfileUserSearch() throws Exception {
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(GENDER_DEFAULT));
  options.add(new SelectItemOption<String>(MALE));
  options.add(new SelectItemOption<String>(FEMALE));
  addUIFormInput(new UIFormStringInput(SEARCH,USER_CONTACT,USER_CONTACT));
  addUIFormInput(new UIFormStringInput(Profile.POSITION,Profile.POSITION,Profile.POSITION));
  addUIFormInput(new UIFormStringInput(Profile.EXPERIENCES_SKILLS,Profile.EXPERIENCES_SKILLS,Profile.EXPERIENCES_SKILLS));
  addUIFormInput(new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options));
  profileFilter=new ProfileFilter();
  setHasPeopleTab(false);
  setSelectedChar(ALL_FILTER);
}","/** 
 * Initializes user search form fields. Initials and adds components as children to search form.
 * @throws Exception
 */
public UIProfileUserSearch() throws Exception {
  ResourceBundle resourceBudle=PortalRequestContext.getCurrentInstance().getApplicationResourceBundle();
  String defaultName=resourceBudle.getString(""String_Node_Str"");
  String defaultPos=resourceBudle.getString(""String_Node_Str"");
  String defaultSkills=resourceBudle.getString(""String_Node_Str"");
  String defaultGender=resourceBudle.getString(""String_Node_Str"");
  String defaultMale=resourceBudle.getString(""String_Node_Str"");
  String defaultFeMale=resourceBudle.getString(""String_Node_Str"");
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(defaultGender));
  options.add(new SelectItemOption<String>(defaultMale));
  options.add(new SelectItemOption<String>(defaultFeMale));
  addUIFormInput(new UIFormStringInput(SEARCH,USER_CONTACT,defaultName));
  addUIFormInput(new UIFormStringInput(Profile.POSITION,Profile.POSITION,defaultPos));
  addUIFormInput(new UIFormStringInput(Profile.EXPERIENCES_SKILLS,Profile.EXPERIENCES_SKILLS,defaultSkills));
  addUIFormInput(new UIFormSelectBox(Profile.GENDER,Profile.GENDER,options)).setId(""String_Node_Str"");
  profileFilter=new ProfileFilter();
  setHasPeopleTab(false);
  setSelectedChar(ALL_FILTER);
}",0.5658238884045336
102581,"/** 
 * Gets page node list for displaying as application links.
 * @return page node list
 * @throws Exception
 */
public List<PageNode> getApps() throws Exception {
  String spaceUrl=SpaceUtils.getSpaceUrl();
  SpaceService spaceSrc=getApplicationComponent(SpaceService.class);
  space=spaceSrc.getSpaceByUrl(spaceUrl);
  if (space == null) {
    return new ArrayList<PageNode>(0);
  }
  DataStorage dataStorage=getApplicationComponent(DataStorage.class);
  PageNavigation pageNav=dataStorage.getPageNavigation(PortalConfig.GROUP_TYPE,space.getGroupId());
  PageNode homeNode=SpaceUtils.getHomeNode(pageNav,space.getUrl());
  if (homeNode == null) {
    throw new Exception(""String_Node_Str"");
  }
  List<PageNode> list=homeNode.getNodes();
  PageNode pageNode=null;
  for (  PageNode node : list) {
    if (node.getName().contains(SPACE_SETTING_PORTLET)) {
      pageNode=node;
      break;
    }
  }
  if (!isLeader() && (pageNode != null)) {
    list.remove(pageNode);
  }
  Collections.sort(list,new ApplicationComparator());
  return list;
}","/** 
 * Gets page node list for displaying as application links.
 * @return page node list
 * @throws Exception
 */
public List<PageNode> getApps() throws Exception {
  String spaceUrl=SpaceUtils.getSpaceUrl();
  SpaceService spaceSrc=getApplicationComponent(SpaceService.class);
  space=spaceSrc.getSpaceByUrl(spaceUrl);
  if (space == null) {
    return new ArrayList<PageNode>(0);
  }
  DataStorage dataStorage=getApplicationComponent(DataStorage.class);
  PageNavigation pageNav=dataStorage.getPageNavigation(PortalConfig.GROUP_TYPE,space.getGroupId());
  PageNode homeNode=SpaceUtils.getHomeNode(pageNav,space.getUrl());
  if (homeNode == null) {
    throw new Exception(""String_Node_Str"");
  }
  List<PageNode> list=homeNode.getNodes();
  PageNode pageNode=null;
  for (  PageNode node : list) {
    if (SPACE_SETTINGS.equals(node.getName())) {
      pageNode=node;
      break;
    }
  }
  if (!hasSettingPermission() && (pageNode != null)) {
    list.remove(pageNode);
  }
  Collections.sort(list,new ApplicationComparator());
  return list;
}",0.9604573606479276
102582,"public boolean isRender(PageNode spaceNode,PageNode applicationNode) throws SpaceException {
  SpaceService spaceSrv=getSpaceService();
  String remoteUser=getUserId();
  String spaceUrl=spaceNode.getUri();
  if (spaceUrl.contains(""String_Node_Str"")) {
    spaceUrl=spaceUrl.split(""String_Node_Str"")[0];
  }
  Space space=spaceSrv.getSpaceByUrl(spaceUrl);
  if (space == null) {
    return false;
  }
  if (spaceSrv.hasSettingPermission(space,remoteUser)) {
    return true;
  }
  String appName=applicationNode.getName();
  if (!appName.contains(SPACE_SETTING_PORTLET)) {
    return true;
  }
  return false;
}","public boolean isRender(PageNode spaceNode,PageNode applicationNode) throws SpaceException {
  SpaceService spaceSrv=getSpaceService();
  String remoteUser=getUserId();
  String spaceUrl=spaceNode.getUri();
  if (spaceUrl.contains(""String_Node_Str"")) {
    spaceUrl=spaceUrl.split(""String_Node_Str"")[0];
  }
  Space space=spaceSrv.getSpaceByUrl(spaceUrl);
  if (space == null) {
    return false;
  }
  if (spaceSrv.hasSettingPermission(space,remoteUser)) {
    return true;
  }
  if (SPACE_SETTINGS.equals(applicationNode.getName())) {
    return false;
  }
  return true;
}",0.9005059021922428
102583,"/** 
 * {@inheritDoc}
 */
@Override public Identity getIdentity(String identityId,boolean forceLoadOrReloadProfile){
  Identity cachedIdentity=identityCacheById.get(identityId);
  if (cachedIdentity != null) {
    return cachedIdentity;
  }
  Identity foundIdentity=super.getIdentity(identityId,forceLoadOrReloadProfile);
  if (foundIdentity != null) {
    identityCacheById.put(identityId,foundIdentity);
    cachedIdentity=foundIdentity;
  }
  return cachedIdentity;
}","/** 
 * {@inheritDoc}
 */
@Override public Identity getIdentity(String identityId,boolean forceLoadOrReloadProfile){
  Identity cachedIdentity=identityCacheById.get(identityId);
  if (cachedIdentity != null && !forceLoadOrReloadProfile) {
    return cachedIdentity;
  }
  Identity foundIdentity=super.getIdentity(identityId,forceLoadOrReloadProfile);
  if (foundIdentity != null) {
    identityCacheById.put(identityId,foundIdentity);
    cachedIdentity=foundIdentity;
  }
  return cachedIdentity;
}",0.9700722394220846
102584,"public void setActivity(ExoSocialActivity activity){
  this.activity=activity;
  setOwnerIdentity(Utils.getIdentityManager().getIdentity(activity.getUserId()));
  addChild(new UIFormTextAreaInput(""String_Node_Str"" + activity.getId(),""String_Node_Str"",null));
  try {
    refresh();
  }
 catch (  ActivityStorageException e) {
    LOG.error(e.getMessage(),e);
  }
}","public void setActivity(ExoSocialActivity activity){
  this.activity=activity;
  setOwnerIdentity(Utils.getIdentityManager().getIdentity(activity.getUserId(),true));
  addChild(new UIFormTextAreaInput(""String_Node_Str"" + activity.getId(),""String_Node_Str"",null));
  try {
    refresh();
  }
 catch (  ActivityStorageException e) {
    LOG.error(e.getMessage(),e);
  }
}",0.9931787175989086
102585,"/** 
 * Checks if a node is a selected node
 * @param node
 * @return true or false
 */
public boolean isSelectedNode(PageNode node){
  if (selectedNode_ != null && node.getUri().equals(selectedNode_.getUri())) {
    return true;
  }
  if (selectedParent_ != null || selectedParent_ instanceof PageNode) {
    return node.getUri().equals(((PageNode)selectedParent_).getUri());
  }
  return false;
}","/** 
 * Checks if a node is a selected node
 * @param node
 * @return true or false
 */
public boolean isSelectedNode(PageNode node){
  if (selectedNode_ != null && node.getUri().equals(selectedNode_.getUri())) {
    return true;
  }
  if (selectedParent_ != null && selectedParent_ instanceof PageNode) {
    return node.getUri().equals(((PageNode)selectedParent_).getUri());
  }
  return false;
}",0.9949748743718592
102586,"public GlobalId getGlobalId(){
  return GlobalId.create(providerId,remoteId);
}","/** 
 * @return global id of identity
 */
public GlobalId getGlobalId(){
  if (globalId == null)   globalId=GlobalId.create(providerId,remoteId);
  return globalId;
}",0.6040816326530613
102587,"public String toString(){
  return providerId + ""String_Node_Str"" + remoteId;
}","/** 
 * @return the global id string of identity
 */
@Override public String toString(){
  return getGlobalId().toString();
}",0.4607843137254901
102588,"/** 
 * Adds component when add buttons clicked.<br>
 * @throws Exception
 */
private void addUIFormInput() throws Exception {
  expIdx+=1;
  addUIFormInput(new UIFormStringInput(COMPANY + expIdx,null,null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,90));
  addUIFormInput(new UIFormStringInput(POSITION + expIdx,null,null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,90));
  addUIFormInput(new UIFormTextAreaInput(DESCRIPTION + expIdx,null,null));
  UIFormTextAreaInput uiDespcription=getChildById(DESCRIPTION + expIdx);
  uiDespcription.setColumns(23);
  uiDespcription.setRows(3);
  addUIFormInput(new UIFormTextAreaInput(SKILLS + expIdx,null,null));
  UIFormTextAreaInput uiFormTextAreaInput=getChildById(SKILLS + expIdx);
  uiFormTextAreaInput.setColumns(23);
  uiFormTextAreaInput.setRows(3);
  addUIFormInput(new UIFormDateTimeInput(START_DATE + expIdx,null,null,false).addValidator(DateTimeValidator.class).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormDateTimeInput(END_DATE + expIdx,null,null,false).addValidator(MandatoryValidator.class).addValidator(DateTimeValidator.class));
  UIFormCheckBoxInput<Boolean> uiDateInputCheck=new UIFormCheckBoxInput<Boolean>(Integer.toString(expIdx),null,false);
  uiDateInputCheck.setComponentConfig(UIFormCheckBoxInput.class,""String_Node_Str"");
  uiDateInputCheck.setOnChange(""String_Node_Str"",uiDateInputCheck.getId());
  addUIFormInput(uiDateInputCheck);
}","/** 
 * Adds component when add buttons clicked.<br>
 * @throws Exception
 */
private void addUIFormInput() throws Exception {
  expIdx+=1;
  addUIFormInput(new UIFormStringInput(COMPANY + expIdx,null,null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,90));
  addUIFormInput(new UIFormStringInput(POSITION + expIdx,null,null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,90));
  addUIFormInput(new UIFormTextAreaInput(DESCRIPTION + expIdx,null,null));
  UIFormTextAreaInput uiDespcription=getChildById(DESCRIPTION + expIdx);
  uiDespcription.setColumns(28);
  uiDespcription.setRows(3);
  addUIFormInput(new UIFormTextAreaInput(SKILLS + expIdx,null,null));
  UIFormTextAreaInput uiFormTextAreaInput=getChildById(SKILLS + expIdx);
  uiFormTextAreaInput.setColumns(28);
  uiFormTextAreaInput.setRows(3);
  addUIFormInput(new UIFormDateTimeInput(START_DATE + expIdx,null,null,false).addValidator(DateTimeValidator.class).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormDateTimeInput(END_DATE + expIdx,null,null,false).addValidator(MandatoryValidator.class).addValidator(DateTimeValidator.class));
  UIFormCheckBoxInput<Boolean> uiDateInputCheck=new UIFormCheckBoxInput<Boolean>(Integer.toString(expIdx),null,false);
  uiDateInputCheck.setComponentConfig(UIFormCheckBoxInput.class,""String_Node_Str"");
  uiDateInputCheck.setOnChange(""String_Node_Str"",uiDateInputCheck.getId());
  addUIFormInput(uiDateInputCheck);
}",0.9986702127659576
102589,"/** 
 * Activates classic application type in a space
 * @param space
 * @param appId
 * @throws SpaceException
 */
private void activateApplicationClassic(Space space,String appId,String appName) throws SpaceException {
  PageNavigation nav=SpaceUtils.createGroupNavigation(space.getGroupId());
  PageNode pageNode=createPageNodeFromApplication(space,appId,appName,false);
  UIPortal uiPortal=Util.getUIPortal();
  PageNode selectedNode=null;
  try {
    selectedNode=uiPortal.getSelectedNode();
  }
 catch (  Exception e2) {
    e2.printStackTrace();
  }
  UIPortalApplication uiPortalApp=Util.getUIPortalApplication();
  UserPortalConfig userPortalConfig=uiPortalApp.getUserPortalConfig();
  List<PageNavigation> navigations=userPortalConfig.getNavigations();
  for (  PageNavigation navi : navigations) {
    if ((navi.getOwner()).equals(nav.getOwner())) {
      nav=navi;
      break;
    }
  }
  try {
    PageNode homeNode=SpaceUtils.getHomeNode(nav,space.getUrl());
    if (homeNode == null) {
      throw new Exception(""String_Node_Str"");
    }
    List<PageNode> childNodes=homeNode.getChildren();
    if (childNodes == null)     childNodes=new ArrayList<PageNode>();
    childNodes.add(pageNode);
    dataStorage.save(nav);
    if (""String_Node_Str"".equals(appId))     changeDashBoardColumn(pageNode);
    uiPortal.setSelectedNode(selectedNode);
    uiPortal.setSelectedNavigation(nav);
    SpaceUtils.setNavigation(nav);
  }
 catch (  Exception e) {
    try {
    }
 catch (    Exception e1) {
    }
    throw new SpaceException(SpaceException.Code.UNABLE_TO_ADD_APPLICATION,e);
  }
}","/** 
 * Activates classic application type in a space
 * @param space
 * @param appId
 * @throws SpaceException
 */
private void activateApplicationClassic(Space space,String appId,String appName) throws SpaceException {
  PageNavigation nav=SpaceUtils.createGroupNavigation(space.getGroupId());
  PageNode pageNode=createPageNodeFromApplication(space,appId,appName,false);
  UIPortal uiPortal=Util.getUIPortal();
  PageNode selectedNode=null;
  try {
    selectedNode=uiPortal.getSelectedNode();
  }
 catch (  Exception e2) {
    e2.printStackTrace();
  }
  UIPortalApplication uiPortalApp=Util.getUIPortalApplication();
  UserPortalConfig userPortalConfig=uiPortalApp.getUserPortalConfig();
  List<PageNavigation> navigations=userPortalConfig.getNavigations();
  for (  PageNavigation navi : navigations) {
    if ((navi.getOwner()).equals(nav.getOwner())) {
      nav=navi;
      break;
    }
  }
  try {
    PageNode homeNode=SpaceUtils.getHomeNode(nav,space.getUrl());
    if (homeNode == null) {
      throw new Exception(""String_Node_Str"");
    }
    List<PageNode> childNodes=homeNode.getChildren();
    if (childNodes == null)     childNodes=new ArrayList<PageNode>();
    childNodes.add(pageNode);
    dataStorage.save(nav);
    uiPortal.setSelectedNode(selectedNode);
    uiPortal.setSelectedNavigation(nav);
    SpaceUtils.setNavigation(nav);
  }
 catch (  Exception e) {
    try {
    }
 catch (    Exception e1) {
    }
    throw new SpaceException(SpaceException.Code.UNABLE_TO_ADD_APPLICATION,e);
  }
}",0.97495183044316
102590,"/** 
 * Inits the app.
 * @param space the space
 * @param homeNodeApp the home node app
 * @param apps the apps
 * @throws SpaceException the space exception {@inheritDoc}
 */
public void initApp(Space space,String homeNodeApp,List<String> apps) throws SpaceException {
  try {
    PageNavigation spaceNav=SpaceUtils.createGroupNavigation(space.getGroupId());
    PageNode homeNode=createPageNodeFromApplication(space,homeNodeApp,null,true);
    List<PageNode> childNodes=homeNode.getChildren();
    if (childNodes == null)     childNodes=new ArrayList<PageNode>();
    PageNode dashBoardPageNode=null;
    for (    String app : apps) {
      app=(app.trim()).split(""String_Node_Str"")[0];
      PageNode appNode=createPageNodeFromApplication(space,app,null,false);
      if (""String_Node_Str"".equals(app))       dashBoardPageNode=appNode;
      childNodes.add(appNode);
    }
    spaceNav.addNode(homeNode);
    dataStorage.save(spaceNav);
    changeDashBoardColumn(dashBoardPageNode);
    SpaceUtils.setNavigation(spaceNav);
    PortalConfig portalConfig=dataStorage.getPortalConfig(PortalConfig.GROUP_TYPE,space.getGroupId());
    LOG.info(""String_Node_Str"" + portalConfig);
  }
 catch (  Exception e) {
    throw new SpaceException(SpaceException.Code.UNABLE_TO_INIT_APP,e);
  }
}","/** 
 * Inits the app.
 * @param space the space
 * @param homeNodeApp the home node app
 * @param apps the apps
 * @throws SpaceException the space exception {@inheritDoc}
 */
public void initApp(Space space,String homeNodeApp,List<String> apps) throws SpaceException {
  try {
    PageNavigation spaceNav=SpaceUtils.createGroupNavigation(space.getGroupId());
    PageNode homeNode=createPageNodeFromApplication(space,homeNodeApp,null,true);
    List<PageNode> childNodes=homeNode.getChildren();
    if (childNodes == null)     childNodes=new ArrayList<PageNode>();
    for (    String app : apps) {
      app=(app.trim()).split(""String_Node_Str"")[0];
      PageNode appNode=createPageNodeFromApplication(space,app,null,false);
      childNodes.add(appNode);
    }
    spaceNav.addNode(homeNode);
    dataStorage.save(spaceNav);
    SpaceUtils.setNavigation(spaceNav);
    PortalConfig portalConfig=dataStorage.getPortalConfig(PortalConfig.GROUP_TYPE,space.getGroupId());
    LOG.info(""String_Node_Str"" + portalConfig);
  }
 catch (  Exception e) {
    throw new SpaceException(SpaceException.Code.UNABLE_TO_INIT_APP,e);
  }
}",0.93488179178764
102591,"/** 
 * destroys like by identityId and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param identityId
 * @param format 
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=destroyLike(activityId,identityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * destroys like by identityId and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param identityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String identityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=destroyLike(activityId,identityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.9992912827781716
102592,"/** 
 * shows list of like by activityId and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param format 
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showLikes(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=showLikes(activityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * shows list of like by activityId and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showLikes(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=showLikes(activityId);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.999195494770716
102593,"/** 
 * destroys comments and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param commentId
 * @param format 
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String commentId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=destroyComment(activityId,commentId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * destroys comments and returns json/xml format
 * @param uriInfo
 * @param activityId
 * @param commentId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String commentId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=destroyComment(activityId,commentId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}",0.9992922859164898
102594,"/** 
 * updates comment by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format 
 * @param comment
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Activity comment) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=updateComment(activityId,comment);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * updates comment by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @param comment
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateComment(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Activity comment) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=updateComment(activityId,comment);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}",0.9993108201240524
102595,"/** 
 * destroys activity and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param format 
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  Activity activity=destroyActivity(activityId);
  return Util.getResponse(activity,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * destroys activity and gets json/xml return format
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") public Response destroyActivity(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  Activity activity=destroyActivity(activityId);
  return Util.getResponse(activity,uriInfo,mediaType,Response.Status.OK);
}",0.9991755976916736
102596,"/** 
 * updates like by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format 
 * @param like
 * @return response
 * @throws Exception 
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Like like) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=updateLike(activityId,like);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * updates like by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @param like
 * @return response
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateLike(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format,Like like) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  LikeList likeList=null;
  likeList=updateLike(activityId,like);
  return Util.getResponse(likeList,uriInfo,mediaType,Response.Status.OK);
}",0.9985549132947976
102597,"/** 
 * shows comment list by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format 
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showComments(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=showComments(activityId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}","/** 
 * shows comment list by json/xml format
 * @param uriInfo
 * @param activityId
 * @param format
 * @return response
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") public Response showComments(@Context UriInfo uriInfo,@PathParam(""String_Node_Str"") String portalName,@PathParam(""String_Node_Str"") String activityId,@PathParam(""String_Node_Str"") String format) throws Exception {
  MediaType mediaType=Util.getMediaType(format);
  portalName_=portalName;
  CommentList commentList=null;
  commentList=showComments(activityId);
  return Util.getResponse(commentList,uriInfo,mediaType,Response.Status.OK);
}",0.9991889699918896
102598,"/** 
 * Sets space to work with
 * @param space
 * @throws Exception 
 */
public void setSpace(Space space) throws Exception {
  space_=space;
  init();
}","/** 
 * Sets space to work with
 * @param space
 * @throws Exception
 */
public void setSpace(Space space) throws Exception {
  space_=space;
  init();
}",0.996742671009772
102599,"/** 
 * initialize
 * @throws Exception
 */
private void init() throws Exception {
  if (space_ == null) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  setChildren(null);
  Identity spaceIdentity=getIdentityManager().getOrCreateIdentity(SpaceIdentityProvider.NAME,space_.getId());
  activityList_=getActivityManager().getActivities(spaceIdentity);
  if (activityList_ != null)   Collections.reverse(activityList_);
  addChild(UIActivitiesContainer.class,null,null).setActivityList(activityList_).setIndex(0);
}","/** 
 * initialize
 * @throws Exception
 */
private void init() throws Exception {
  if (space_ == null) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  setChildren(null);
  Identity spaceIdentity=getIdentityManager().getOrCreateIdentity(SpaceIdentityProvider.NAME,space_.getId());
  activityList_=getActivityManager().getActivities(spaceIdentity);
  addChild(UIActivitiesContainer.class,null,null).setActivityList(activityList_).setIndex(0);
}",0.9305699481865284
102600,"@Override public Status3 call() throws XfsException {
  Status3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(idcService,CimInfoCommand.STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=IdcFactory.create(idcService.getXfsVersion(),wfsResult.getResults(),Status3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public Status3 call() throws XfsException {
  Status3 result;
  XfsInfoCommand<IdcInfoCommand> command=new XfsInfoCommand<IdcInfoCommand>(idcService,IdcInfoCommand.STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=IdcFactory.create(idcService.getXfsVersion(),wfsResult.getResults(),Status3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.912885662431942
102601,"/** 
 * Retrieves the data for the value with the specified name, within the specified open key.
 */
public String wfmQueryValue(final HKEY hKey,final String valueName) throws XfsException {
  final ZSTR data=new ZSTR(SIZE_LIMIT,true);
  final DWORD cchData=new DWORD(0L);
  final int errorCode=wfmQueryValue0(hKey,new ZSTR(valueName),data,cchData);
  XfsException.throwFor(errorCode);
  return data.toString();
}","/** 
 * Retrieves the data for the value with the specified name, within the specified open key.
 */
public String wfmQueryValue(final HKEY hKey,final String valueName) throws XfsException {
  final ZSTR data=new ZSTR(SIZE_LIMIT,true);
  final DWORD cchData=new DWORD(data.getSize());
  final int errorCode=wfmQueryValue0(hKey,new ZSTR(valueName),data,cchData);
  XfsException.throwFor(errorCode);
  return data.toString();
}",0.9809069212410502
102602,"@Override protected void execute(){
  final String method=""String_Node_Str"";
  try {
    final WFSPTRCAPS caps=new PTRCapabilitiesCallable(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + caps);
    }
    table=new Table(getClass(),""String_Node_Str"",""String_Node_Str"");
    addRow(""String_Node_Str"",caps.getServiceClass());
    addRow(""String_Node_Str"",caps.getType());
    addRow(""String_Node_Str"",caps.isCompound());
    addRow(""String_Node_Str"",caps.getResolution());
    addRow(""String_Node_Str"",caps.getReadForm());
    addRow(""String_Node_Str"",caps.getWriteForm());
    addRow(""String_Node_Str"",caps.getExtents());
    addRow(""String_Node_Str"",caps.getControl());
    addRow(""String_Node_Str"",caps.getMaxMediaOnStacker());
    addRow(""String_Node_Str"",caps.isAcceptMedia());
    addRow(""String_Node_Str"",caps.isMultiPage());
    addRow(""String_Node_Str"",caps.getPaperSources());
    addRow(""String_Node_Str"",caps.isMediaTaken());
    addRow(""String_Node_Str"",caps.getMaxRetracts());
    addRow(""String_Node_Str"",caps.getImageType());
    addRow(""String_Node_Str"",caps.getFrontImageColorFormat());
    addRow(""String_Node_Str"",caps.getBackImageColorFormat());
    addRow(""String_Node_Str"",caps.getCodelineFormat());
    addRow(""String_Node_Str"",caps.getImageSource());
    addRow(""String_Node_Str"",caps.getCharSupport());
    addRow(""String_Node_Str"",caps.isDispensePaper());
    addRow(""String_Node_Str"",caps.getExtra());
    addRow(""String_Node_Str"",caps.getGuidLights());
    addRow(""String_Node_Str"",caps.getWindowsPrinter());
    addRow(""String_Node_Str"",caps.isMediaPresented());
    addRow(""String_Node_Str"",caps.getAutoRetractPeriod());
    addRow(""String_Node_Str"",caps.isRetractToTransport());
    addRow(""String_Node_Str"",caps.isPowerSaveControl());
    addRow(""String_Node_Str"",caps.getCoercivityType());
    addRow(""String_Node_Str"",caps.getControlPassbook());
    getContent().setUIElement(table);
  }
 catch (  final XfsException e) {
    showException(e);
  }
}","@Override protected void execute(){
  final String method=""String_Node_Str"";
  try {
    final PtrCapabilities3 caps=new PTRCapabilitiesCallable(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + caps);
    }
    table=new Table(getClass(),""String_Node_Str"",""String_Node_Str"");
    addRow(""String_Node_Str"",caps.getServiceClass());
    addRow(""String_Node_Str"",caps.getTypes());
    addRow(""String_Node_Str"",caps.isCompound());
    addRow(""String_Node_Str"",caps.getResolutions());
    addRow(""String_Node_Str"",caps.getReadForms());
    addRow(""String_Node_Str"",caps.getWriteForms());
    addRow(""String_Node_Str"",caps.getExtents());
    addRow(""String_Node_Str"",caps.getControls());
    addRow(""String_Node_Str"",caps.getMaxMediaOnStacker());
    addRow(""String_Node_Str"",caps.isAcceptMedia());
    addRow(""String_Node_Str"",caps.isMultiPage());
    addRow(""String_Node_Str"",caps.getPaperSources());
    addRow(""String_Node_Str"",caps.isMediaTaken());
    addRow(""String_Node_Str"",caps.getImageTypes());
    addRow(""String_Node_Str"",caps.getFrontImageColorFormats());
    addRow(""String_Node_Str"",caps.getBackImageColorFormats());
    addRow(""String_Node_Str"",caps.getCodelineFormats());
    addRow(""String_Node_Str"",caps.getImageSources());
    addRow(""String_Node_Str"",caps.getCharSupport());
    addRow(""String_Node_Str"",caps.isDispensePaper());
    addRow(""String_Node_Str"",caps.getExtra());
    getContent().setUIElement(table);
  }
 catch (  final XfsException e) {
    showException(e);
  }
}",0.8495227400336889
102603,"@Override protected void execute(){
  final WFSPTRRAWDATA rawData=new WFSPTRRAWDATA();
  rawData.allocate();
  rawData.setData(new byte[]{27,64,'A'});
  WFSResult wfsResult=null;
  try {
    wfsResult=new PTRRawDataCallable(service,rawData).call();
    System.out.println(wfsResult);
  }
 catch (  final XfsException e) {
    showException(e);
  }
 finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}","@Override protected void execute(){
  final RawData3 rawData=new RawData3.Builder(new byte[]{27,64,'A'}).build();
  WFSResult wfsResult=null;
  try {
    wfsResult=new PTRRawDataCallable(service,rawData).call();
    System.out.println(wfsResult);
  }
 catch (  final XfsException e) {
    showException(e);
  }
 finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}",0.8886337543053962
102604,"@Override protected void execute(){
  table=new Table(getClass(),""String_Node_Str"",""String_Node_Str"");
  try {
    final WFSPTRSTATUS status=new PTRStatusCallable(service).call();
    addRow(""String_Node_Str"",status.getDevice());
    addRow(""String_Node_Str"",status.getMedia());
    addPaperSupplyStates(status.getPaper());
    addRow(""String_Node_Str"",status.getToner());
    addRow(""String_Node_Str"",status.getInk());
    addRow(""String_Node_Str"",status.getLamp());
    addRow(""String_Node_Str"",status.getRetractBins());
    addRow(""String_Node_Str"",status.getMediaOnStacker());
    addRow(""String_Node_Str"",status.getExtra());
    addRow(""String_Node_Str"",status.getGuidLights());
    addRow(""String_Node_Str"",status.getDevicePosition());
    addRow(""String_Node_Str"",status.getPowerSaveRecoveryTime());
    addRow(""String_Node_Str"",status.getPaperType());
    addRow(""String_Node_Str"",status.getAntiFraudModule());
    getContent().setUIElement(table);
  }
 catch (  final XfsException e) {
    showException(e);
  }
}","@Override protected void execute(){
  table=new Table(getClass(),""String_Node_Str"",""String_Node_Str"");
  try {
    final PtrStatus3 status=new PTRStatusCallable(service).call();
    addRow(""String_Node_Str"",status.getDevice());
    addRow(""String_Node_Str"",status.getMedia());
    addPaperSupplyStates(status.getPaper());
    addRow(""String_Node_Str"",status.getToner());
    addRow(""String_Node_Str"",status.getInk());
    addRow(""String_Node_Str"",status.getLamp());
    addRow(""String_Node_Str"",status.getRetractBins());
    addRow(""String_Node_Str"",status.getMediaOnStacker());
    addRow(""String_Node_Str"",status.getExtra());
    if (status instanceof PtrStatus310) {
      PtrStatus310 status310=(PtrStatus310)status;
      addRow(""String_Node_Str"",status310.getGuidLights());
      addRow(""String_Node_Str"",status310.getDevicePosition());
      addRow(""String_Node_Str"",status310.getPowerSaveRecoveryTime());
    }
    if (status instanceof PtrStatus320) {
      PtrStatus320 status320=(PtrStatus320)status;
      addRow(""String_Node_Str"",status320.getPaperTypes());
      addRow(""String_Node_Str"",status320.getAntiFraudModule());
    }
    getContent().setUIElement(table);
  }
 catch (  final XfsException e) {
    showException(e);
  }
}",0.736098852603707
102605,"private void addPaperSupplyStates(final PTRPaper[] paperStates){
  for (int i=0; i < paperStates.length; i++) {
    if (PTRPaper.NOTSUPP.equals(paperStates[i])) {
      continue;
    }
    addRow(""String_Node_Str"" + i,paperStates[i]);
  }
}","private void addPaperSupplyStates(final PaperStatus[] paperStates){
  for (int i=0; i < paperStates.length; i++) {
    if (PaperStatus.NOTSUPP.equals(paperStates[i])) {
      continue;
    }
    addRow(""String_Node_Str"" + i,paperStates[i]);
  }
}",0.9300411522633744
102606,"private void addPTRService(final PTRService service){
  try {
    WFSPTRSTATUS status=new PTRStatusCallable(service).call();
    table.addRowWithCommand(new ExecuteSubTaskCommand(taskManager,new PTRStatusTask(service)),service,status.getDevice());
  }
 catch (  XfsException e) {
    table.addRow(service,e.getError());
  }
}","private void addPTRService(final PTRService service){
  try {
    PtrStatus3 status=new PTRStatusCallable(service).call();
    table.addRowWithCommand(new ExecuteSubTaskCommand(taskManager,new PTRStatusTask(service)),service,status.getDevice());
  }
 catch (  XfsException e) {
    table.addRow(service,e.getError());
  }
}",0.9660493827160492
102607,"@Override public WFSPTRCAPS call() throws XfsException {
  final String method=""String_Node_Str"";
  final XfsInfoCommand infoCommand=new XfsInfoCommand(ptrService,PTRInfoCommand.CAPABILITIES);
  final WFSResult wfsResult=infoCommand.call();
  try {
    final WFSPTRCAPS caps=new WFSPTRCAPS(wfsResult.getResults(),ptrService.getXfsVersion());
    if (LOG.isInfoEnabled()) {
      LOG.info(method,""String_Node_Str"" + caps);
    }
    return new WFSPTRCAPS(caps,ptrService.getXfsVersion());
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}","@Override public PtrCapabilities3 call() throws XfsException {
  final String method=""String_Node_Str"";
  final XfsInfoCommand<PtrInfoCommand> infoCommand=new XfsInfoCommand<>(ptrService,PtrInfoCommand.CAPABILITIES);
  final WFSResult wfsResult=infoCommand.call();
  try {
    final PtrCapabilities3 result=PtrFactory.create(ptrService.getXfsVersion(),wfsResult.getResults(),PtrCapabilities3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(method,""String_Node_Str"" + result);
    }
    return result;
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}",0.7576006573541495
102608,"@Override public WFSResult call() throws XfsException {
  final XfsExecuteCommand rawDataCommand=new XfsExecuteCommand(ptrService,PTRExecuteCommand.RAW_DATA,rawData);
  return rawDataCommand.call();
}","@Override public WFSResult call() throws XfsException {
  final XfsExecuteCommand<PtrExecuteCommand> rawDataCommand=new XfsExecuteCommand<>(ptrService,PtrExecuteCommand.RAW_DATA,rawData);
  return rawDataCommand.call();
}",0.9406175771971496
102609,"public PTRRawDataCallable(final PTRService ptrService,final WFSPTRRAWDATA rawData){
  this.ptrService=ptrService;
  this.rawData=rawData;
}","public PTRRawDataCallable(final PTRService ptrService,final RawData3 rawData){
  this.ptrService=ptrService;
  this.rawData=rawData;
}",0.9377289377289376
102610,"@Override public WFSPTRSTATUS call() throws XfsException {
  final XfsCommand infoCommand=new XfsInfoCommand(ptrService,PTRInfoCommand.STATUS);
  final WFSResult wfsResult=infoCommand.call();
  try {
    final WFSPTRSTATUS status=new WFSPTRSTATUS(ptrService.getXfsVersion(),wfsResult.getResults());
    if (LOG.isInfoEnabled()) {
      final String method=""String_Node_Str"";
      LOG.info(method,""String_Node_Str"" + status);
    }
    return new WFSPTRSTATUS(ptrService.getXfsVersion(),status);
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}","@Override public PtrStatus3 call() throws XfsException {
  final XfsCommand infoCommand=new XfsInfoCommand<>(ptrService,PtrInfoCommand.STATUS);
  final WFSResult wfsResult=infoCommand.call();
  try {
    final PtrStatus3 result=PtrFactory.create(ptrService.getXfsVersion(),wfsResult.getResults(),PtrStatus3.class);
    if (LOG.isInfoEnabled()) {
      final String method=""String_Node_Str"";
      LOG.info(method,""String_Node_Str"" + result);
    }
    return result;
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}",0.4810126582278481
102611,"/** 
 * Retrieves the data for the value with the specified name, within the specified open key.
 */
public String wfmQueryValue(final HKEY hKey,final String valueName) throws XfsException {
  final ZSTR data=new ZSTR(SIZE_LIMIT,true);
  final DWORD cchData=new DWORD(0L);
  final int errorCode=wfmQueryValue0(hKey,new ZSTR(valueName),data,cchData);
  XfsException.throwFor(errorCode);
  return data.toString();
}","/** 
 * Retrieves the data for the value with the specified name, within the specified open key.
 */
public String wfmQueryValue(final HKEY hKey,final String valueName) throws XfsException {
  final ZSTR data=new ZSTR(SIZE_LIMIT,true);
  final DWORD cchData=new DWORD(data.getSize());
  final int errorCode=wfmQueryValue0(hKey,new ZSTR(valueName),data,cchData);
  XfsException.throwFor(errorCode);
  return data.toString();
}",0.9809069212410502
102612,"public ULongArray(Pointer pointer,int length){
  this(length);
  assignBuffer(pointer);
}","public ULongArray(Pointer pointer,int length){
  this(length);
  if (length != 0) {
    assignBuffer(pointer);
  }
}",0.8682926829268293
102613,"public UShortArray(final Pointer p,final int length){
  this(length);
  assignBuffer(p);
}","public UShortArray(final Pointer p,final int length){
  this(length);
  if (length != 0) {
    assignBuffer(p);
  }
}",0.8695652173913043
102614,"public XfsUIntArray(Pointer pointer,int length){
  super(new UINT[length]);
  for (int i=0; i < array.length; i++) {
    array[i]=new UINT();
  }
  assignBuffer(pointer);
}","public XfsUIntArray(Pointer pointer,int length){
  super(new UINT[length]);
  for (int i=0; i < array.length; i++) {
    array[i]=new UINT();
  }
  if (length != 0) {
    assignBuffer(pointer);
  }
}",0.9272237196765498
102615,"public PositionInfo310(PositionInfo310 copy){
  this();
  allocate();
  set(copy);
}","private PositionInfo310(Builder builder){
  this();
  allocate();
  position.set(builder.position);
  additionalBunches.set(builder.additionalBunches);
  bunchesRemaining.set(builder.bunchesRemaining);
}",0.1672473867595819
102616,"public AdditionalBunches getAdditionalBunches(){
  return additionalBunches.get();
}","public Optional<AdditionalBunches> getAdditionalBunches(){
  return additionalBunches.get();
}",0.9438202247191012
102617,"public void execute(final Task task){
  final String method=""String_Node_Str"";
  if (LOG.isDebugEnabled()) {
    LOG.debug(method,""String_Node_Str"" + task + ""String_Node_Str""+ taskPath);
  }
  for (int i=0; i < taskPath.size(); i++) {
    Task activeTask=taskPath.remove(i);
    activeTask.getCommands().removeCommandsChangedListener(this);
    activeTask.getContent().removeUIContentListener(this);
  }
  internalExecute(task);
}","public void execute(final Task task){
  final String method=""String_Node_Str"";
  if (LOG.isDebugEnabled()) {
    LOG.debug(method,""String_Node_Str"" + task + ""String_Node_Str""+ taskPath);
  }
  for (int i=taskPath.size() - 1; i >= 0; i--) {
    Task activeTask=taskPath.remove(i);
    activeTask.getCommands().removeCommandsChangedListener(this);
    activeTask.getContent().removeUIContentListener(this);
  }
  internalExecute(task);
}",0.9410404624277456
102618,"private void checkRequests(){
  final String method=""String_Node_Str"";
  final long currentTime=System.currentTimeMillis();
  for (int i=0; i < requests.size(); i++) {
    Request request=requests.get(i);
    if (request.getTimeoutTime() > currentTime) {
      continue;
    }
    long activeTime=request.getTimeoutTime() - request.startTime;
    if (request.cancelled) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str"");
      }
      requests.remove(i);
      requestQueue.terminateRequest(request.requestId);
    }
 else {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str""+ activeTime+ ""String_Node_Str"");
      }
      request.cancelled=true;
      requestQueue.cancelRequest(request.requestId);
    }
  }
}","private void checkRequests(){
  final String method=""String_Node_Str"";
  final long currentTime=System.currentTimeMillis();
  for (Iterator<Request> i=requests.iterator(); i.hasNext(); ) {
    Request request=i.next();
    if (request.getTimeoutTime() > currentTime) {
      continue;
    }
    long activeTime=request.getTimeoutTime() - request.startTime;
    if (request.cancelled) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str"");
      }
      i.remove();
      requestQueue.terminateRequest(request.requestId);
    }
 else {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str""+ activeTime+ ""String_Node_Str"");
      }
      request.cancelled=true;
      requestQueue.cancelRequest(request.requestId);
    }
  }
}",0.933806146572104
102619,"public void execute(final Task task){
  final String method=""String_Node_Str"";
  if (LOG.isDebugEnabled()) {
    LOG.debug(method,""String_Node_Str"" + task + ""String_Node_Str""+ taskPath);
  }
  for (int i=0; i < taskPath.size(); i++) {
    Task activeTask=taskPath.remove(i);
    activeTask.getCommands().removeCommandsChangedListener(this);
    activeTask.getContent().removeUIContentListener(this);
  }
  internalExecute(task);
}","public void execute(final Task task){
  final String method=""String_Node_Str"";
  if (LOG.isDebugEnabled()) {
    LOG.debug(method,""String_Node_Str"" + task + ""String_Node_Str""+ taskPath);
  }
  for (int i=taskPath.size() - 1; i >= 0; i--) {
    Task activeTask=taskPath.remove(i);
    activeTask.getCommands().removeCommandsChangedListener(this);
    activeTask.getContent().removeUIContentListener(this);
  }
  internalExecute(task);
}",0.9410404624277456
102620,"private void checkRequests(){
  final String method=""String_Node_Str"";
  final long currentTime=System.currentTimeMillis();
  for (int i=0; i < requests.size(); i++) {
    Request request=requests.get(i);
    if (request.getTimeoutTime() > currentTime) {
      continue;
    }
    long activeTime=request.getTimeoutTime() - request.startTime;
    if (request.cancelled) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str"");
      }
      requests.remove(i);
      requestQueue.terminateRequest(request.requestId);
    }
 else {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str""+ activeTime+ ""String_Node_Str"");
      }
      request.cancelled=true;
      requestQueue.cancelRequest(request.requestId);
    }
  }
}","private void checkRequests(){
  final String method=""String_Node_Str"";
  final long currentTime=System.currentTimeMillis();
  for (Iterator<Request> i=requests.iterator(); i.hasNext(); ) {
    Request request=i.next();
    if (request.getTimeoutTime() > currentTime) {
      continue;
    }
    long activeTime=request.getTimeoutTime() - request.startTime;
    if (request.cancelled) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str"");
      }
      i.remove();
      requestQueue.terminateRequest(request.requestId);
    }
 else {
      if (LOG.isWarnEnabled()) {
        LOG.warn(method,""String_Node_Str"" + request.requestId + ""String_Node_Str""+ activeTime+ ""String_Node_Str"");
      }
      request.cancelled=true;
      requestQueue.cancelRequest(request.requestId);
    }
  }
}",0.933806146572104
102621,"@Override public boolean equals(Object obj){
  if (obj instanceof Capabilities3_10) {
    Capabilities3_10 capabilities3_10=(Capabilities3_10)obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(getDIPMode(),capabilities3_10.getDIPMode()).append(getMemoryChipProtocols(),capabilities3_10.getMemoryChipProtocols()).append(getGuidLights(),capabilities3_10.getGuidLights()).append(getEjectPosition(),capabilities3_10.getEjectPosition()).append(isPowerSaveControl(),capabilities3_10.isPowerSaveControl()).isEquals();
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj instanceof Capabilities3_10) {
    Capabilities3_10 capabilities3_10=(Capabilities3_10)obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(getDIPMode(),capabilities3_10.getDIPMode()).append(getMemoryChipProtocols().orElse(null),capabilities3_10.getMemoryChipProtocols().orElse(null)).append(getGuidLights(),capabilities3_10.getGuidLights()).append(getEjectPosition(),capabilities3_10.getEjectPosition()).append(isPowerSaveControl(),capabilities3_10.isPowerSaveControl()).isEquals();
  }
  return false;
}",0.977112676056338
102622,"public WORD getDayOfWeek(){
  return dayOfWeek;
}","public int getDayOfWeek(){
  return dayOfWeek.intValue();
}",0.8333333333333334
102623,"public WORD getYear(){
  return year;
}","public int getYear(){
  return year.intValue();
}",0.7954545454545454
102624,"public WORD getMinute(){
  return minute;
}","public int getMinute(){
  return minute.intValue();
}",0.8125
102625,"public WORD getSecond(){
  return second;
}","public int getSecond(){
  return second.intValue();
}",0.8125
102626,"public WORD getHour(){
  return hour;
}","public int getHour(){
  return hour.intValue();
}",0.7954545454545454
102627,"public WORD getMonth(){
  return month;
}","public int getMonth(){
  return month.intValue();
}",0.8043478260869565
102628,"public WORD getDay(){
  return day;
}","public int getDay(){
  return day.intValue();
}",0.7857142857142857
102629,"public WORD getMilliseconds(){
  return milliseconds;
}","public int getMilliseconds(){
  return milliseconds.intValue();
}",0.85
102630,"@Override public String toString(){
  String result=new String(getBytes(),US_ASCII);
  if (result.indexOf(NUL) != -1) {
    result=result.substring(0,result.indexOf(NUL));
  }
  return result;
}","@Override public String toString(){
  String result=new String(getBytes(),StandardCharsets.US_ASCII);
  if (result.indexOf(NUL) != -1) {
    result=result.substring(0,result.indexOf(NUL));
  }
  return result;
}",0.9580246913580248
102631,"public ZSTR(final String s){
  this(s.length() + 1,true);
  put((s + NUL).getBytes(US_ASCII));
}","public ZSTR(final String s){
  this(s.length() + 1,true);
  put((s + NUL).getBytes(StandardCharsets.US_ASCII));
}",0.9186602870813396
102632,"@Override public NoteTypeList3 call() throws XfsException {
  NoteTypeList3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.BANKNOTE_TYPES);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),NoteTypeList3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public NoteTypeList3 call() throws XfsException {
  NoteTypeList3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.BANKNOTE_TYPES);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),NoteTypeList3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9735269000853972
102633,"@Override public CashInStatus3 call() throws XfsException {
  CashInStatus3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.BANKNOTE_TYPES);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashInStatus3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public CashInStatus3 call() throws XfsException {
  CashInStatus3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.BANKNOTE_TYPES);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashInStatus3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9735269000853972
102634,"@Override public CashUnitCapabilities3_20 call() throws XfsException {
  CashUnitCapabilities3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CASH_UNIT_CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashUnitCapabilities3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public CashUnitCapabilities3_20 call() throws XfsException {
  CashUnitCapabilities3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CASH_UNIT_CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashUnitCapabilities3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9752593774940144
102635,"@Override public CashInfo3 call() throws XfsException {
  CashInfo3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CASH_UNIT_INFO);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashInfo3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public CashInfo3 call() throws XfsException {
  CashInfo3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CASH_UNIT_INFO);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CashInfo3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.972972972972973
102636,"@Override public Capabilities3 call() throws XfsException {
  Capabilities3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Capabilities3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public Capabilities3 call() throws XfsException {
  Capabilities3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Capabilities3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9734361610968296
102637,"@Override public Status3 call() throws XfsException {
  Status3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Status3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public Status3 call() throws XfsException {
  Status3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Status3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.972296693476318
102638,"@Override public CurrencyExp3 call() throws XfsException {
  CurrencyExp3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CURRENCY_EXP);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CurrencyExp3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public CurrencyExp3 call() throws XfsException {
  CurrencyExp3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.CURRENCY_EXP);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),CurrencyExp3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9732988802756244
102639,"@Override public List<DepleteInfoResult3_30> call() throws XfsException {
  List<DepleteInfoResult3_30> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.DEPLETE_SOURCE,depleteInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),DepleteInfoResult3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public List<DepleteInfoResult3_30> call() throws XfsException {
  List<DepleteInfoResult3_30> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.DEPLETE_SOURCE,depleteInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),DepleteInfoResult3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9761721752498078
102640,"@Override public DeviceLockStatus3_20 call() throws XfsException {
  DeviceLockStatus3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.DEVICELOCK_STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),DeviceLockStatus3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public DeviceLockStatus3_20 call() throws XfsException {
  DeviceLockStatus3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.DEVICELOCK_STATUS);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),DeviceLockStatus3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.974569319114028
102641,"@Override public AllItemsInfo3_30 call() throws XfsException {
  AllItemsInfo3_30 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_ALL_ITEMS_INFO,getAllItemsInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),AllItemsInfo3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public AllItemsInfo3_30 call() throws XfsException {
  AllItemsInfo3_30 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_ALL_ITEMS_INFO,getAllItemsInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),AllItemsInfo3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9747762408462164
102642,"@Override public Blacklist3_30 call() throws XfsException {
  Blacklist3_30 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_BLACKLIST);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Blacklist3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public Blacklist3_30 call() throws XfsException {
  Blacklist3_30 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_BLACKLIST);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),Blacklist3_30.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9734816082121472
102643,"@Override public ItemInfo3_10 call() throws XfsException {
  ItemInfo3_10 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_ITEM_INFO,itemInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),ItemInfo3_10.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public ItemInfo3_10 call() throws XfsException {
  ItemInfo3_10 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_ITEM_INFO,itemInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),ItemInfo3_10.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9737510584250636
102644,"@Override public List<P6Info3> call() throws XfsException {
  List<P6Info3> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_P6_INFO);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),P6Info3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public List<P6Info3> call() throws XfsException {
  List<P6Info3> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_P6_INFO);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),P6Info3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9738837405223252
102645,"@Override public P6Signature3 call() throws XfsException {
  P6Signature3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_P6_SIGNATURE,getP6Signature);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),P6Signature3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public P6Signature3 call() throws XfsException {
  P6Signature3 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.GET_P6_SIGNATURE,getP6Signature);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),P6Signature3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9741451209341118
102646,"@Override public PositionCapabilities3_10 call() throws XfsException {
  PositionCapabilities3_10 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.POSITION_CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),PositionCapabilities3_10.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public PositionCapabilities3_10 call() throws XfsException {
  PositionCapabilities3_10 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.POSITION_CAPABILITIES);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),PositionCapabilities3_10.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9752198241406874
102647,"@Override public ReplenishInfoResult3_20 call() throws XfsException {
  ReplenishInfoResult3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.REPLENISH_TARGET,replenishInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),ReplenishInfoResult3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public ReplenishInfoResult3_20 call() throws XfsException {
  ReplenishInfoResult3_20 result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.REPLENISH_TARGET,replenishInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.create(cimService.getXfsVersion(),wfsResult.getResults(),ReplenishInfoResult3_20.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9754552652414884
102648,"@Override public List<TellerDetails3> call() throws XfsException {
  List<TellerDetails3> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.TELLER_INFO,tellerInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=new XfsCallable(command).call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),TellerDetails3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}","@Override public List<TellerDetails3> call() throws XfsException {
  List<TellerDetails3> result;
  XfsInfoCommand<CimInfoCommand> command=new XfsInfoCommand<CimInfoCommand>(cimService,CimInfoCommand.TELLER_INFO,tellerInfo);
  WFSResult wfsResult=null;
  try {
    wfsResult=command.call();
    result=CimFactory.fromNullTerminatedArray(cimService.getXfsVersion(),wfsResult.getResults(),TellerDetails3.class);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"",result);
    }
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
  return result;
}",0.9752198241406874
102649,"@Override protected void execute(){
  String method=""String_Node_Str"";
  try {
    this.service=service;
    stopUIXfsInputDevice();
    pressedKeys=new ArrayList<VirtualKey>();
    textInput=new TextInput();
    final WFSPINFUNCKEYDETAIL funcKeyDetail=new PINFunctionKeysCommand(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + funcKeyDetail);
    }
    final WfsPINGetData pinGetData=new WfsPINGetData();
    pinGetData.allocate();
    pinGetData.setActiveKeys(funcKeyDetail.getFunctionKeys());
    final Set<PINFDK> activeFDKs=EnumSet.noneOf(PINFDK.class);
    for (    final WFSPINFDK pinFDK : funcKeyDetail.getFDKs()) {
      activeFDKs.add(pinFDK.getFDK());
    }
    pinGetData.setActiveFDKs(activeFDKs);
    pinGetData.setMaxLen(0);
    pinGetData.setAutoEnd(false);
    getDataCommand=new PINGetDataCommand(service,pinGetData);
    getDataCommand.addCommandListener(this);
    getDataCommand.execute();
    final long timeOut=TaskConfig.getConfig(this).getLong(KEY_INPUT_TIMEOUT);
    startCancelTimer(timeOut);
    getContent().setUIElement(textInput);
    getCommands().setNextCommand(new CancelCommand(getClass(),getDataCommand));
  }
 catch (  final XfsException e) {
    showException(e);
    startFailed();
  }
}","@Override protected void execute(){
  String method=""String_Node_Str"";
  try {
    stopUIXfsInputDevice();
    pressedKeys=new ArrayList<VirtualKey>();
    textInput=new TextInput();
    final WFSPINFUNCKEYDETAIL funcKeyDetail=new PINFunctionKeysCommand(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + funcKeyDetail);
    }
    final WfsPINGetData pinGetData=new WfsPINGetData();
    pinGetData.allocate();
    pinGetData.setActiveKeys(funcKeyDetail.getFunctionKeys());
    final Set<PINFDK> activeFDKs=EnumSet.noneOf(PINFDK.class);
    for (    final WFSPINFDK pinFDK : funcKeyDetail.getFDKs()) {
      activeFDKs.add(pinFDK.getFDK());
    }
    pinGetData.setActiveFDKs(activeFDKs);
    pinGetData.setMaxLen(0);
    pinGetData.setAutoEnd(false);
    getDataCommand=new PINGetDataCommand(service,pinGetData);
    getDataCommand.addCommandListener(this);
    getDataCommand.execute();
    final long timeOut=TaskConfig.getConfig(this).getLong(KEY_INPUT_TIMEOUT);
    startCancelTimer(timeOut);
    getContent().setUIElement(textInput);
    getCommands().setNextCommand(new CancelCommand(getClass(),getDataCommand));
  }
 catch (  final XfsException e) {
    showException(e);
    startFailed();
  }
}",0.9896579156722356
102650,"protected void set(CamCaps caps){
  serviceClass.set(caps.serviceClass);
  type.set(caps.type);
  cameras.set(caps.cameras);
  maxPictures.set(caps.maxPictures);
  camData.set(caps.camData);
  maxDataLength.set(caps.maxDataLength);
  charSupport.set(caps.charSupport);
  extra.set(caps.extra);
}","protected void set(CamCaps caps){
  serviceClass.set(caps.serviceClass);
  type.set(caps.type);
  cameras.set(caps.cameras);
  maxPictures.set(caps.maxPictures);
  camData.set(caps.camData.get());
  maxDataLength.set(caps.maxDataLength);
  charSupport.set(caps.charSupport.get());
  extra.set(caps.extra);
}",0.9800664451827242
102651,"public XfsDWordBitmask(Class<T> aType){
  super(UINT.SIZE,aType);
}","public XfsDWordBitmask(Class<T> aType,Set<T> value){
  this(aType);
  allocate();
  set(value);
}",0.6463414634146342
102652,"public XfsWordBitmask(Class<T> aType){
  super(2,aType);
}","public XfsWordBitmask(Class<T> aType,Set<T> value){
  this(aType);
  allocate();
  set(value);
}",0.6753246753246753
102653,"@Override public int intValue(){
  return Bits.getInt(getBytes());
}","@Override public int intValue(){
  return Bits.getShort(getBytes()) & USHORT.MAX_VALUE;
}",0.8407643312101911
102654,"@Test public final void test(){
}","@Test public void test(){
  XfsDWordBitmask<MockEnum> bitmask=new XfsDWordBitmask<>(MockEnum.class,EnumSet.allOf(MockEnum.class));
  assertTrue(bitmask.get().containsAll(EnumSet.allOf(MockEnum.class)));
}",0.2278481012658227
102655,"/** 
 * Lets this Pointer point to the specified   {@link Type}.
 * @param aReference the Type this Pointer should point to
 */
public void pointTo(final Type aReference){
  if (this == NULL) {
    throw new NullPointerException(""String_Node_Str"");
  }
  reference=aReference;
  put(reference.getBuffer().getAddress());
}","/** 
 * Lets this Pointer point to the specified   {@link Type}.
 * @param aReference the Type this Pointer should point to
 */
public void pointTo(final Type aReference){
  if (this == NULL) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (aReference == NULL) {
    put(NULL.getBuffer().get());
  }
 else {
    reference=aReference;
    put(reference.getBuffer().getAddress());
  }
}",0.7791495198902606
102656,"@Override public void set(Map<String,String> value){
  pointTo(new ByteArray(encode(value)));
}","@Override public void set(Map<String,String> value){
  if (value.isEmpty()) {
    pointTo(NULL);
  }
 else {
    pointTo(new ByteArray(encode(value)));
  }
}",0.753968253968254
102657,"@Override protected void doExecute(IDCService service){
  final String method=""String_Node_Str"";
  this.service=service;
  command=new ReadCardCommand(service);
  WFSIDCCAPS caps;
  try {
    caps=new IDCCapabilitiesCommand(service).call();
  }
 catch (  final XfsException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(method,""String_Node_Str"",e);
    }
    showException(e);
    setCloseCommand();
    return;
  }
  for (  final IDCTrack track : caps.getReadTracks()) {
    command.addReadData(track);
  }
  if (!caps.getChipProtocols().isEmpty()) {
    command.addReadData(IDCTrack.CHIP);
  }
  if (!IDCSecType.WFS_IDC_SECNOTSUPP.equals(caps.getSecType())) {
    command.addReadData(IDCTrack.SECURITY);
  }
  command.addCommandListener(this);
  command.execute();
  getCommands().addCommand(new CancelCommand(getClass(),command));
  showMessage(""String_Node_Str"");
}","@Override protected void doExecute(IDCService service){
  final String method=""String_Node_Str"";
  this.service=service;
  command=new ReadCardCommand(service);
  WFSIDCCAPS caps;
  try {
    caps=new IDCCapabilitiesCommand(service).call();
  }
 catch (  final XfsException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(method,""String_Node_Str"",e);
    }
    showException(e);
    setCloseCommand();
    return;
  }
  for (  final IDCTrack track : caps.getReadTracks()) {
    command.addReadData(track);
  }
  if (!caps.getChipProtocols().isEmpty()) {
    command.addReadData(IDCTrack.CHIP);
  }
  if (!IDCSecType.NOTSUPP.equals(caps.getSecType())) {
    command.addReadData(IDCTrack.SECURITY);
  }
  command.addCommandListener(this);
  command.execute();
  getCommands().addCommand(new CancelCommand(getClass(),command));
  showMessage(""String_Node_Str"");
}",0.9936817920735208
102658,"private boolean isCardPresent(){
  final String method=""String_Node_Str"";
  try {
    final WfsIDCStatus status=new IDCStatusCommand(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + status);
    }
switch (status.getMedia()) {
case WFS_IDC_MEDIAJAMMED:
case WFS_IDC_MEDIAPRESENT:
      return true;
default :
    return false;
}
}
 catch (final XfsException e) {
LOG.error(method,""String_Node_Str"",e);
}
return false;
}","private boolean isCardPresent(){
  final String method=""String_Node_Str"";
  try {
    final WfsIDCStatus status=new IDCStatusCommand(service).call();
    if (LOG.isDebugEnabled()) {
      LOG.debug(method,""String_Node_Str"" + status);
    }
switch (status.getMedia()) {
case JAMMED:
case PRESENT:
      return true;
default :
    return false;
}
}
 catch (final XfsException e) {
LOG.error(method,""String_Node_Str"",e);
}
return false;
}",0.9709821428571428
102659,"@Test public void funcKeyDetail() throws Exception {
  for (  final PINService pinService : xfsServiceManager.getServices(PINService.class)) {
    final ULONG fdkMask=new ULONG();
    fdkMask.put(0xFFFFFFFFL);
    XfsCommand xfsCommand=new XfsInfoCommand(pinService,PINInfoCommand.FUNCKEY_DETAIL,fdkMask);
    WFSResult wfsResult=null;
    try {
      wfsResult=xfsCommand.call();
      WFSPINFUNCKEYDETAIL funcKeyDetail=new WFSPINFUNCKEYDETAIL(wfsResult.getResults());
      System.out.println(funcKeyDetail);
    }
  finally {
      if (wfsResult != null) {
        xfsServiceManager.free(wfsResult);
      }
    }
  }
}","@Test public void funcKeyDetail() throws Exception {
  for (  final PINService pinService : xfsServiceManager.getServices(PINService.class)) {
    final ULONG fdkMask=new ULONG();
    fdkMask.set(0xFFFFFFFFL);
    XfsCommand xfsCommand=new XfsInfoCommand(pinService,PINInfoCommand.FUNCKEY_DETAIL,fdkMask);
    WFSResult wfsResult=null;
    try {
      wfsResult=xfsCommand.call();
      WFSPINFUNCKEYDETAIL funcKeyDetail=new WFSPINFUNCKEYDETAIL(wfsResult.getResults());
      System.out.println(funcKeyDetail);
    }
  finally {
      if (wfsResult != null) {
        xfsServiceManager.free(wfsResult);
      }
    }
  }
}",0.9967845659163987
102660,"private void checkRecoveredData() throws IssuerPublicKeyException {
  checkDataTrailer();
  checkDataHeader();
  checkCertificateFormat();
  byte[] remainder=getIssuerPublicKeyRemainder();
  byte[] exponent=issuerPublicKeyCertificate.getExponent();
  checkHashResult(remainder,exponent);
  checkIssuerIdentifier();
  checkExpirationDate();
  checkIssuerPublicKeyAlgorithmIndicator();
  byte[] modulus=Bytes.concat(issuerData.get(ISSUER_PUBLIC_KEY),remainder);
  issuerPublicKey=new PublicKey(issuerData.get(ISSUER_PUBLIC_KEY_ALGORITHM_INDICATOR),modulus,exponent);
}","private void checkRecoveredData() throws IssuerPublicKeyException {
  checkDataTrailer();
  checkDataHeader();
  checkCertificateFormat();
  byte[] remainder=getIssuerPublicKeyRemainder();
  byte[] exponent=issuerPublicKeyCertificate.getExponent();
  checkHashResult(remainder,exponent);
  checkIssuerIdentifier();
  checkExpirationDate();
  checkIssuerPublicKeyAlgorithmIndicator();
  int nCA=caPublicKey.getModulus().length;
  int nI=Bytes.toInt(issuerData.get(ISSUER_PUBLIC_KEY_LENGTH)[0]);
  byte[] modulus;
  if (nI <= nCA - 36) {
    modulus=Bytes.left(issuerData.get(ISSUER_PUBLIC_KEY),nI);
  }
 else {
    modulus=Bytes.concat(issuerData.get(ISSUER_PUBLIC_KEY),remainder);
  }
  issuerPublicKey=new PublicKey(issuerData.get(ISSUER_PUBLIC_KEY_ALGORITHM_INDICATOR),modulus,exponent);
}",0.7899778924097274
102661,"private byte[] getIssuerPublicKeyRemainder() throws IssuerPublicKeyRemainderNotPresentException {
  int nCA=caPublicKey.getModulus().length;
  int issuerPublicKeyLength=Bytes.toInt(issuerData.get(ISSUER_PUBLIC_KEY_LENGTH)[0]);
  if (issuerPublicKeyLength > (nCA - 36)) {
    byte[] remainder=issuerPublicKeyCertificate.getRemainder();
    if (remainder.length == 0) {
      throw new IssuerPublicKeyRemainderNotPresentException();
    }
    return remainder;
  }
  return Bytes.EMPTY;
}","private byte[] getIssuerPublicKeyRemainder() throws IssuerPublicKeyRemainderNotPresentException {
  int nCA=caPublicKey.getModulus().length;
  int issuerPublicKeyLength=Bytes.toInt(issuerData.get(ISSUER_PUBLIC_KEY_LENGTH)[0]);
  if (issuerPublicKeyLength > nCA - 36) {
    byte[] remainder=issuerPublicKeyCertificate.getRemainder();
    if (remainder.length == 0) {
      throw new IssuerPublicKeyRemainderNotPresentException();
    }
    return remainder;
  }
  return Bytes.EMPTY;
}",0.9979381443298968
102662,"/** 
 * {@link #data}
 */
public byte[] getData(){
  byte[] result=null;
  if (!Pointer.NULL.equals(data)) {
    data.buffer(getLength()).get();
  }
  return result;
}","/** 
 * {@link #data}
 */
public byte[] getData(){
  byte[] result=null;
  if (!Pointer.NULL.equals(data)) {
    result=data.buffer(getLength()).get();
  }
  return result;
}",0.9794721407624634
102663,"private byte[] internalAuthenticate() throws DDAFailedException, TerminateSessionException {
  try {
    CAPDU command=new InternalAuthenticate(authenticationData);
    RAPDU response=transaction.getICReader().transmit(command);
    new ProcessingState(response.getSW()).assertSuccessful();
    return new Template(TLV.parse(response.getData())).getMandatoryValue(EMVTag.SIGNED_DYNAMIC_APPLICATION_DATA);
  }
 catch (  IOException e) {
    throw new DDAFailedException(e);
  }
catch (  ProcessingStateException e) {
    throw new DDAFailedException(e);
  }
catch (  TLVConstraintViolationException e) {
    throw new TerminateSessionException(e);
  }
}","private byte[] internalAuthenticate() throws DDAFailedException, TerminateSessionException {
  try {
    CAPDU command=new InternalAuthenticate(authenticationData);
    RAPDU response=transaction.getICReader().transmit(command);
    new ProcessingState(response.getSW()).assertSuccessful();
    TLV tlv=TLV.parse(response.getData());
    if (EMVTag.RESPONSE_MESSAGE_TEMPLATE_FORMAT_1.getTag().equals(tlv.getTag())) {
      return tlv.getValue();
    }
    return new Template(TLV.parse(response.getData())).getMandatoryValue(EMVTag.SIGNED_DYNAMIC_APPLICATION_DATA);
  }
 catch (  IOException e) {
    throw new DDAFailedException(e);
  }
catch (  ProcessingStateException e) {
    throw new DDAFailedException(e);
  }
catch (  TLVConstraintViolationException e) {
    throw new TerminateSessionException(e);
  }
}",0.8901023890784983
102664,"public IDCCapabilities(final IDCService idcService){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.idcService=idcService;
}","public IDCCapabilities(final IDCService idcService){
  if (idcService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.idcService=idcService;
}",0.8866666666666667
102665,"public IDCResetCountTask(final IDCService idcService){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.idcService=idcService;
}","public IDCResetCountTask(final IDCService idcService){
  if (idcService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.idcService=idcService;
}",0.8881578947368421
102666,"public IDCResetTask(final IDCService idcService){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.idcService=idcService;
}","public IDCResetTask(final IDCService idcService){
  if (idcService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.idcService=idcService;
}",0.8843537414965986
102667,"public PINCapabilitiesTask(final PINService pinService){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.pinService=pinService;
}","public PINCapabilitiesTask(final PINService pinService){
  if (pinService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.pinService=pinService;
}",0.8896103896103896
102668,"@Override protected void executeInternal(){
  final String method=""String_Node_Str"";
synchronized (this) {
    if (resetCommand != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    createResetCommand();
    WFSResult wfsResult=null;
    try {
      wfsResult=resetCommand.call();
      notifyCommandSuccessful();
    }
 catch (    final XfsException e) {
      if (LOG.isErrorEnabled()) {
        LOG.error(method,""String_Node_Str"" + resetCommand,e);
      }
      notifyCommandFailed(e);
    }
 finally {
      if (wfsResult != null) {
        XfsServiceManager.getInstance().free(wfsResult);
      }
    }
    resetCommand=null;
  }
}","@Override protected void executeInternal(){
  final String method=""String_Node_Str"";
synchronized (this) {
    if (resetCommand != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    createResetCommand();
    WFSResult wfsResult=null;
    try {
      wfsResult=resetCommand.call();
      notifyCommandSuccessful();
    }
 catch (    final Exception e) {
      if (LOG.isErrorEnabled()) {
        LOG.error(method,""String_Node_Str"" + resetCommand,e);
      }
      notifyCommandFailed(e);
    }
 finally {
      if (wfsResult != null) {
        XfsServiceManager.getInstance().free(wfsResult);
      }
    }
    resetCommand=null;
  }
}",0.9977289931869796
102669,"public IDCResetCommand(final IDCService idcService){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.idcService=idcService;
}","public IDCResetCommand(final IDCService idcService){
  if (idcService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.idcService=idcService;
}",0.8866666666666667
102670,"public ChipIOCommand(final IDCService idcService,final WFSIDCCHIPIO chipIoIn){
  ExceptionUtil.nullArgument(""String_Node_Str"");
  this.idcService=idcService;
  this.chipIoIn=chipIoIn;
}","public ChipIOCommand(final IDCService idcService,final WFSIDCCHIPIO chipIoIn){
  if (idcService == null) {
    ExceptionUtil.nullArgument(""String_Node_Str"");
  }
  this.idcService=idcService;
  this.chipIoIn=chipIoIn;
}",0.915841584158416
102671,"@Override public WFSIDCCHIPIO execute() throws XfsException {
  XfsCommand xfsCommand=new XfsExecuteCommand(idcService,IDCExecuteCommand.WFS_CMD_IDC_CHIP_IO,chipIoIn);
  WFSResult wfsResult=null;
  try {
    wfsResult=xfsCommand.call();
    final WFSIDCCHIPIO chipIoOut=new WFSIDCCHIPIO(wfsResult.getBuffer());
    return new WFSIDCCHIPIO(chipIoOut);
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}","@Override public WFSIDCCHIPIO execute() throws InterruptedException, XfsException {
  XfsCommand xfsCommand=new XfsExecuteCommand(idcService,IDCExecuteCommand.WFS_CMD_IDC_CHIP_IO,chipIoIn);
  WFSResult wfsResult=null;
  try {
    wfsResult=xfsCommand.call();
    final WFSIDCCHIPIO chipIoOut=new WFSIDCCHIPIO(wfsResult.getBuffer());
    return new WFSIDCCHIPIO(chipIoOut);
  }
  finally {
    if (wfsResult != null) {
      XfsServiceManager.getInstance().free(wfsResult);
    }
  }
}",0.9767441860465116
102672,"@Override public int compareTo(AuctionMessage other){
  if (other.value.equals(value)) {
    return vertexId.hashCode() - other.vertexId.hashCode();
  }
  return other.value.subtract(value).intValue();
}","@Override public int compareTo(AuctionMessage other){
  int cmp=other.value.compareTo(value);
  if (cmp == 0) {
    return vertexId.hashCode() - other.vertexId.hashCode();
  }
  return cmp;
}",0.8071065989847716
102673,"private AuctionMessage getMax(List<AuctionMessage> values,Text currentMatchId){
  Collections.sort(values);
  if (currentMatchId == null || currentMatchId.toString().isEmpty()) {
    return values.get(0);
  }
 else {
    AuctionMessage max=values.get(0);
    if (max.getVertexId().equals(currentMatchId)) {
      return max;
    }
 else {
      AuctionMessage currentValue=null;
      for (int i=1; i < values.size(); i++) {
        if (values.get(i).getVertexId().equals(currentMatchId)) {
          currentValue=values.get(i);
          break;
        }
      }
      if (currentValue != null && currentValue.getValue() == max.getValue()) {
        return currentValue;
      }
      return max;
    }
  }
}","private AuctionMessage getMax(List<AuctionMessage> values,Text currentMatchId){
  Collections.sort(values);
  if (currentMatchId == null || currentMatchId.toString().isEmpty()) {
    return values.get(0);
  }
 else {
    AuctionMessage max=values.get(0);
    if (max.getVertexId().equals(currentMatchId)) {
      return max;
    }
 else {
      AuctionMessage currentValue=null;
      for (int i=1; i < values.size(); i++) {
        if (values.get(i).getVertexId().equals(currentMatchId)) {
          currentValue=values.get(i);
          break;
        }
      }
      if (currentValue != null && currentValue.getValue().equals(max.getValue())) {
        return currentValue;
      }
      return max;
    }
  }
}",0.9908643710470836
102674,"public void mouseEvent(MouseEvent e){
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    if (isMouseOver(e.getX(),e.getY())) {
      wasClicked=true;
    }
  }
 else   if (e.getID() == MouseEvent.MOUSE_RELEASED) {
    if (wasClicked && isMouseOver(e.getX(),e.getY())) {
      if (selected) {
        fireEventNotification(this,""String_Node_Str"");
        selected=false;
      }
 else {
        fireEventNotification(this,""String_Node_Str"");
        selected=true;
      }
      wasClicked=false;
    }
  }
}","public void mouseEvent(MouseEvent e){
  if (e.getID() == MouseEvent.MOUSE_PRESSED) {
    if (isMouseOver(e.getX(),e.getY())) {
      wasClicked=true;
    }
  }
 else   if (e.getID() == MouseEvent.MOUSE_RELEASED) {
    if (wasClicked && isMouseOver(e.getX(),e.getY())) {
      if (selected) {
        selected=false;
        fireEventNotification(this,""String_Node_Str"");
      }
 else {
        selected=true;
        fireEventNotification(this,""String_Node_Str"");
      }
      wasClicked=false;
    }
  }
}",0.8346456692913385
102675,"public void keyEvent(KeyEvent e){
  if (e.getID() == KeyEvent.KEY_TYPED && e.getKeyChar() == ' ') {
    fireEventNotification(this,""String_Node_Str"");
    if (selected) {
      fireEventNotification(this,""String_Node_Str"");
      selected=false;
    }
 else {
      fireEventNotification(this,""String_Node_Str"");
      selected=true;
    }
  }
}","public void keyEvent(KeyEvent e){
  if (e.getID() == KeyEvent.KEY_TYPED && e.getKeyChar() == ' ') {
    fireEventNotification(this,""String_Node_Str"");
    if (selected) {
      selected=false;
      fireEventNotification(this,""String_Node_Str"");
    }
 else {
      selected=true;
      fireEventNotification(this,""String_Node_Str"");
    }
  }
}",0.8753623188405797
102676,"public IFLookAndFeel(PApplet parent,char type){
  defaultGraphicsState=new IFPGraphicsState();
  if (type == DEFAULT) {
    IFPGraphicsState temp=new IFPGraphicsState(parent);
    parent.colorMode(PApplet.RGB,255);
    baseColor=parent.color(153,153,204);
    highlightColor=parent.color(102,102,204);
    activeColor=parent.color(255,153,51);
    selectionColor=parent.color(255,255,0);
    borderColor=parent.color(255);
    textColor=parent.color(0);
    lightGrayColor=parent.color(100);
    darkGrayColor=parent.color(50);
    PFont tempFont=parent.loadFont(""String_Node_Str"");
    parent.textFont(tempFont,13);
    parent.textAlign(PApplet.LEFT);
    parent.rectMode(PApplet.CORNER);
    parent.ellipseMode(PApplet.CORNER);
    parent.strokeWeight(1);
    parent.colorMode(PApplet.RGB,255);
    parent.smooth();
    defaultGraphicsState.saveSettingsForApplet(parent);
    temp.restoreSettingsToApplet(parent);
  }
}","public IFLookAndFeel(PApplet parent,char type){
  defaultGraphicsState=new IFPGraphicsState();
  if (type == DEFAULT) {
    IFPGraphicsState temp=new IFPGraphicsState(parent);
    parent.colorMode(PApplet.RGB,255);
    baseColor=parent.color(153,153,204);
    highlightColor=parent.color(102,102,204);
    activeColor=parent.color(255,153,51);
    selectionColor=parent.color(255,255,0);
    borderColor=parent.color(255);
    textColor=parent.color(0);
    lightGrayColor=parent.color(100);
    darkGrayColor=parent.color(50);
    System.out.println(""String_Node_Str"" + parent.g.textAlign + ""String_Node_Str""+ parent.g.rectMode+ ""String_Node_Str""+ parent.g.ellipseMode+ ""String_Node_Str""+ parent.g.colorMode+ ""String_Node_Str""+ parent.g.colorModeX+ ""String_Node_Str""+ parent.g.smooth);
    PFont tempFont=parent.loadFont(""String_Node_Str"");
    parent.textFont(tempFont,13);
    parent.textAlign(PApplet.LEFT);
    parent.rectMode(PApplet.CORNER);
    parent.ellipseMode(PApplet.CORNER);
    parent.strokeWeight(1);
    parent.colorMode(PApplet.RGB,255);
    try {
      parent.smooth();
    }
 catch (    RuntimeException e) {
    }
    System.out.println(""String_Node_Str"" + parent.g.textAlign + ""String_Node_Str""+ parent.g.rectMode+ ""String_Node_Str""+ parent.g.ellipseMode+ ""String_Node_Str""+ parent.g.colorMode+ ""String_Node_Str""+ parent.g.colorModeX+ ""String_Node_Str""+ parent.g.smooth);
    defaultGraphicsState.saveSettingsForApplet(parent);
    System.out.println(""String_Node_Str"" + parent.g.getClass() + ""String_Node_Str"");
    temp.restoreSettingsToApplet(parent);
  }
}",0.7359168997203356
102677,"public void draw(){
  if (visible) {
    userState.saveSettingsForApplet(parent);
    lookAndFeel.defaultGraphicsState.restoreSettingsToApplet(parent);
    for (int i=0; i < contents.length; i++) {
      if (contents[i] != null) {
        contents[i].draw();
      }
    }
    userState.restoreSettingsToApplet(parent);
  }
}","public void draw(){
  if (visible) {
    userState.saveSettingsForApplet(parent);
    lookAndFeel.defaultGraphicsState.restoreSettingsToApplet(parent);
    parent.fill(parent.color(0));
    parent.rect(getX(),getY(),getWidth(),getHeight());
    for (int i=0; i < contents.length; i++) {
      if (contents[i] != null) {
        contents[i].draw();
      }
    }
    userState.restoreSettingsToApplet(parent);
  }
}",0.8795669824086604
102678,"public void remove(GUIComponent component){
  int componentIndex=-1;
  for (int i=0; i < numItems; i++) {
    if (component == contents[i]) {
      componentIndex=i;
      break;
    }
  }
  if (componentIndex != -1) {
    contents[componentIndex]=null;
    if (componentIndex < numItems - 1) {
      System.arraycopy(contents,componentIndex + 1,contents,componentIndex,numItems);
    }
    numItems--;
  }
}","public void remove(GUIComponent component){
  int componentIndex=-1;
  for (int i=0; i < numItems; i++) {
    if (component == contents[i]) {
      componentIndex=i;
      break;
    }
  }
  if (componentIndex != -1) {
    contents[componentIndex]=null;
    if (componentIndex < numItems - 1) {
      System.arraycopy(contents,componentIndex + 1,contents,componentIndex,numItems - (componentIndex + 1));
    }
    numItems--;
  }
}",0.9725864123957092
102679,"public void setY(int newY){
  if (newY > 0)   y=newY;
}","public void setY(int newY){
  if (newY >= 0)   y=newY;
}",0.990990990990991
102680,"public void setX(int newX){
  if (newX > 0)   x=newX;
}","public void setX(int newX){
  if (newX >= 0)   x=newX;
}",0.990990990990991
102681,"public void fireEventNotification(GUIComponent argComponent,String argMessage){
  if (listener == null)   return;
  try {
    GUIEvent e=new GUIEvent(argComponent,argMessage);
    Method m=listener.getClass().getDeclaredMethod(""String_Node_Str"",new Class[]{e.getClass()});
    try {
      m.invoke(listener,new Object[]{e});
    }
 catch (    InvocationTargetException ex) {
      System.out.println(ex.getCause().getMessage());
    }
catch (    IllegalAccessException ex) {
    }
  }
 catch (  NoSuchMethodException ex) {
    System.out.println(""String_Node_Str"");
  }
}","public void fireEventNotification(GUIComponent argComponent,String argMessage){
  if (listener == null)   return;
  GUIEvent e=new GUIEvent(argComponent,argMessage);
  IFDelegation.callDelegate(listener,""String_Node_Str"",new Object[]{e});
}",0.4981504315659679
102682,"public void setPosition(int newX,int newY){
  if (newX > 0 && newY > 0) {
    x=newX;
    y=newY;
  }
}","public void setPosition(int newX,int newY){
  if (newX >= 0 && newY >= 0) {
    x=newX;
    y=newY;
  }
}",0.9903846153846154
102683,"/** 
 * restores the saved graphics state to the specified PApplet
 * @param applet the PApplet instance whose state we're restoring
 */
public void restoreSettingsToApplet(PApplet applet){
  if (smooth)   applet.smooth();
 else   applet.noSmooth();
  applet.rectMode(rectMode);
  applet.ellipseMode(ellipseMode);
  if (textFont != null) {
    applet.textFont(textFont);
    applet.textSize(textSize);
  }
  applet.textAlign(textAlign);
  applet.textMode(textMode);
  if (tint)   applet.tint(tintColor);
 else   applet.noTint();
  if (fill)   applet.fill(fillColor);
 else   applet.noFill();
  if (stroke)   applet.stroke(strokeColor);
 else   applet.noStroke();
  applet.strokeWeight(strokeWeight);
  applet.colorMode(cMode,cModeX,cModeY,cModeZ,cModeA);
}","/** 
 * restores the saved graphics state to the specified PApplet
 * @param applet the PApplet instance whose state we're restoring
 */
public void restoreSettingsToApplet(PApplet applet){
  try {
    if (smooth == true) {
      applet.smooth();
    }
 else {
      applet.noSmooth();
    }
  }
 catch (  RuntimeException e) {
  }
  applet.rectMode(rectMode);
  applet.ellipseMode(ellipseMode);
  if (textFont != null) {
    applet.textFont(textFont);
    applet.textSize(textSize);
  }
  applet.textAlign(textAlign);
  applet.textMode(textMode);
  if (tint)   applet.tint(tintColor);
 else   applet.noTint();
  if (fill)   applet.fill(fillColor);
 else   applet.noFill();
  if (stroke)   applet.stroke(strokeColor);
 else   applet.noStroke();
  applet.strokeWeight(strokeWeight);
  applet.colorMode(cMode,cModeX,cModeY,cModeZ,cModeA);
}",0.9422835633626098
102684,"public TPCLog(String logPath,KeyServer<K,V> keyServer){
  this.logPath=logPath;
  entries=null;
}","public TPCLog(String logPath,KeyServer<K,V> keyServer){
  this.logPath=logPath;
  entries=null;
  this.keyServer=keyServer;
}",0.8738738738738738
102685,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  if (args.length != 3) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  slaveID=UUID.fromString(args[0]);
  masterHostName=args[1];
  masterPort=Integer.parseInt(args[2]);
  if (args.length == 4) {
    registrationPort=Integer.parseInt(args[4]);
  }
  System.out.println(""String_Node_Str"");
  keyServer=new KeyServer<String,String>(1000);
  server=new SocketServer(InetAddress.getLocalHost().getHostAddress());
  TPCMasterHandler<String,String> handler=new TPCMasterHandler<String,String>(keyServer);
  server.addHandler(handler);
  server.connect();
  System.out.println(""String_Node_Str"" + server.getHostname() + ""String_Node_Str""+ server.getPort());
  server.run();
  logPath=server.getHostname() + ""String_Node_Str"" + server.getPort();
  tpcLog=new TPCLog<String,String>(logPath,keyServer);
  tpcLog.rebuildKeyServer();
  handler.setTPCLog(tpcLog);
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  if (args.length < 3) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  slaveID=UUID.fromString(args[0]);
  masterHostName=args[1];
  masterPort=Integer.parseInt(args[2]);
  if (args.length == 4) {
    registrationPort=Integer.parseInt(args[3]);
  }
  System.out.println(""String_Node_Str"");
  keyServer=new KeyServer<String,String>(1000);
  server=new SocketServer(InetAddress.getLocalHost().getHostAddress());
  TPCMasterHandler<String,String> handler=new TPCMasterHandler<String,String>(keyServer);
  server.addHandler(handler);
  server.connect();
  System.out.println(""String_Node_Str"" + server.getHostname() + ""String_Node_Str""+ server.getPort());
  server.run();
  logPath=server.getHostname() + ""String_Node_Str"" + server.getPort();
  tpcLog=new TPCLog<String,String>(logPath,keyServer);
  tpcLog.rebuildKeyServer();
  handler.setTPCLog(tpcLog);
}",0.9973917579551382
102686,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  if (args.length < 3) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  slaveID=UUID.fromString(args[0]);
  masterHostName=args[1];
  masterPort=Integer.parseInt(args[2]);
  if (args.length == 4) {
    registrationPort=Integer.parseInt(args[3]);
  }
  System.out.println(""String_Node_Str"");
  keyServer=new KeyServer<String,String>(1000);
  server=new SocketServer(InetAddress.getLocalHost().getHostAddress());
  TPCMasterHandler<String,String> handler=new TPCMasterHandler<String,String>(keyServer);
  server.addHandler(handler);
  server.connect();
  System.out.println(""String_Node_Str"" + server.getHostname() + ""String_Node_Str""+ server.getPort());
  server.run();
  logPath=server.getHostname() + ""String_Node_Str"" + server.getPort();
  tpcLog=new TPCLog<String,String>(logPath,keyServer);
  tpcLog.rebuildKeyServer();
  handler.setTPCLog(tpcLog);
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  if (args.length != 4) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  slaveID=UUID.fromString(args[0]);
  masterHostName=args[1];
  masterPort=Integer.parseInt(args[2]);
  registrationPort=Integer.parseInt(args[3]);
  System.out.println(""String_Node_Str"");
  keyServer=new KeyServer<String,String>(1000);
  server=new SocketServer(InetAddress.getLocalHost().getHostAddress());
  TPCMasterHandler<String,String> handler=new TPCMasterHandler<String,String>(keyServer);
  server.addHandler(handler);
  server.connect();
  System.out.println(""String_Node_Str"" + server.getHostname() + ""String_Node_Str""+ server.getPort());
  server.run();
  logPath=server.getHostname() + ""String_Node_Str"" + server.getPort();
  tpcLog=new TPCLog<String,String>(logPath,keyServer);
  tpcLog.rebuildKeyServer();
  handler.setTPCLog(tpcLog);
}",0.9793103448275862
102687,"protected JXFrame resolveParentFrame(){
  ApplicationWindow activeWindow=getApplicationConfig().windowManager().getActiveWindow();
  if (activeWindow == null)   return null;
  return activeWindow.getControl();
}","protected JFrame resolveParentFrame(){
  ApplicationWindow activeWindow=getApplicationConfig().windowManager().getActiveWindow();
  if (activeWindow == null)   return null;
  return activeWindow.getControl();
}",0.997624703087886
102688,"/** 
 * Returns the   {@link javax.swing.JFrame} of the application window that this command belongs to.
 * @return The control component of the application window, never null.
 */
protected JXFrame getParentWindowControl(){
  final ApplicationWindow applicationWindow=getApplicationWindow();
  if (applicationWindow == null) {
    return ValkyrieRepository.getInstance().getApplicationConfig().windowManager().getActiveWindow().getControl();
  }
  return applicationWindow.getControl();
}","/** 
 * Returns the   {@link javax.swing.JFrame} of the application window that this command belongs to.
 * @return The control component of the application window, never null.
 */
protected JFrame getParentWindowControl(){
  final ApplicationWindow applicationWindow=getApplicationWindow();
  if (applicationWindow == null) {
    return ValkyrieRepository.getInstance().getApplicationConfig().windowManager().getActiveWindow().getControl();
  }
  return applicationWindow.getControl();
}",0.9989764585465712
102689,"@Override protected void doExecuteCommand(){
  try {
    UIManager.setLookAndFeel(lookAndFeelClass);
    for (    ApplicationWindow appWindow : ValkyrieRepository.getInstance().getApplicationConfig().windowManager().getWindows()) {
      JXFrame control=appWindow.getControl();
      SwingUtilities.updateComponentTreeUI(control);
      for (      Window window : control.getOwnedWindows()) {
        updateWindow(window);
      }
    }
  }
 catch (  Exception e) {
    throw new ApplicationException(""String_Node_Str"");
  }
}","@Override protected void doExecuteCommand(){
  try {
    UIManager.setLookAndFeel(lookAndFeelClass);
    for (    ApplicationWindow appWindow : ValkyrieRepository.getInstance().getApplicationConfig().windowManager().getWindows()) {
      JFrame control=appWindow.getControl();
      SwingUtilities.updateComponentTreeUI(control);
      for (      Window window : control.getOwnedWindows()) {
        updateWindow(window);
      }
    }
  }
 catch (  Exception e) {
    throw new ApplicationException(""String_Node_Str"");
  }
}",0.9990485252140818
102690,"public boolean contains(AbstractCommand command){
  for (int i=0; i < members.size(); i++) {
    GroupMember member=(GroupMember)members.get(i);
    if (member.managesCommand(command.getId())) {
      return true;
    }
  }
  return false;
}","public boolean contains(AbstractCommand command){
  for (  GroupMember member : members) {
    if (member.managesCommand(command.getId())) {
      return true;
    }
  }
  return false;
}",0.8504672897196262
102691,"public void setContainersVisible(boolean visible){
  Iterator it=builders.values().iterator();
  while (it.hasNext()) {
    GroupMemberContainerManager gcm=(GroupMemberContainerManager)it.next();
    gcm.setVisible(visible);
  }
}","public void setContainersVisible(boolean visible){
  for (  GroupMemberContainerManager gcm : builders.values()) {
    gcm.setVisible(visible);
  }
}",0.6965699208443272
102692,"protected void rebuildControls(){
  Iterator iter=builders.values().iterator();
  while (iter.hasNext()) {
    GroupMemberContainerManager builder=(GroupMemberContainerManager)iter.next();
    if (builder != null) {
      builder.rebuildControlsFor(members);
    }
  }
}","protected void rebuildControls(){
  for (  GroupMemberContainerManager builder : builders.values()) {
    if (builder != null) {
      builder.rebuildControlsFor(members);
    }
  }
}",0.7328918322295805
102693,"private String buildMessage(String objectName,Object rejectedValue,Constraint constraint){
  StringBuffer buf=new StringBuffer(255);
  MessageSourceResolvable[] args=resolveArguments(constraint);
  if (logger.isDebugEnabled()) {
    logger.debug(StylerUtils.style(args));
  }
  if (objectName != null) {
    buf.append(resolveObjectName(objectName));
    buf.append(' ');
  }
  for (int i=0; i < args.length - 1; i++) {
    MessageSourceResolvable arg=args[i];
    buf.append(messages.getMessage(arg,locale));
    buf.append(' ');
  }
  buf.append(messages.getMessage(args[args.length - 1],locale));
  buf.append(""String_Node_Str"");
  return buf.toString();
}","protected String buildMessage(String objectName,Object rejectedValue,Constraint constraint){
  StringBuffer buf=new StringBuffer(255);
  MessageSourceResolvable[] args=resolveArguments(constraint);
  if (logger.isDebugEnabled()) {
    logger.debug(StylerUtils.style(args));
  }
  if (objectName != null) {
    buf.append(resolveObjectName(objectName));
    buf.append(' ');
  }
  for (int i=0; i < args.length - 1; i++) {
    MessageSourceResolvable arg=args[i];
    buf.append(messages.getMessage(arg,locale));
    buf.append(' ');
  }
  buf.append(messages.getMessage(args[args.length - 1],locale));
  buf.append(""String_Node_Str"");
  return buf.toString();
}",0.990909090909091
102694,"void visit(Constraint constraint){
  if (constraint instanceof Range) {
    this.args.add(handleRange((Range)constraint));
  }
 else   if (constraint instanceof ParameterizedBinaryConstraint) {
    this.args.add(handleParameterizedBinaryPredicate((ParameterizedBinaryConstraint)constraint));
  }
 else {
    add(getMessageCode(constraint),null,constraint.toString());
  }
}","protected void visit(Constraint constraint){
  if (constraint instanceof Range) {
    this.args.add(handleRange((Range)constraint));
  }
 else   if (constraint instanceof ParameterizedBinaryConstraint) {
    this.args.add(handleParameterizedBinaryPredicate((ParameterizedBinaryConstraint)constraint));
  }
 else {
    add(getMessageCode(constraint),null,constraint.toString());
  }
}",0.9867724867724867
102695,"/** 
 * {@inheritDoc}If allwaysRefresh is set, this method will trigger refresh() each time it is executed.
 */
public Object getValue(){
  if (alwaysRefresh) {
    refresh();
  }
  return super.getValue();
}","/** 
 * {@inheritDoc}If allwaysRefresh is set, this method will trigger refresh() each time it is executed.
 */
public Object getValue(){
  if (alwaysRefresh || !initialized) {
    refresh();
    initialized=true;
  }
  return super.getValue();
}",0.9162995594713657
102696,"/** 
 * Constructor supplying a refresh <code>Closure</code> that allways has to be triggered when reading the value. Additionally a refresh is triggered on construction.
 */
public RefreshableValueHolder(Closure refreshFunction,boolean alwaysRefresh,boolean lazyInit){
  super();
  Assert.notNull(refreshFunction,""String_Node_Str"");
  this.refreshFunction=refreshFunction;
  this.alwaysRefresh=alwaysRefresh;
  if (!lazyInit) {
    refresh();
  }
}","/** 
 * Constructor supplying a refresh <code>Closure</code> that allways has to be triggered when reading the value. Additionally a refresh is triggered on construction.
 * @deprecated lazy initialization is always done
 */
@Deprecated public RefreshableValueHolder(Closure refreshFunction,boolean alwaysRefresh,boolean lazyInit){
  super();
  Assert.notNull(refreshFunction,""String_Node_Str"");
  this.refreshFunction=refreshFunction;
  this.alwaysRefresh=alwaysRefresh;
}",0.8915401301518439
102697,"@Override public AnnotationConfigApplicationContext getObject() throws Exception {
  CommandBarApplicationContext context=new CommandBarApplicationContext();
  context.setParent(parent);
  context.register(configClass);
  context.refresh();
  return context;
}","@Override public AnnotationConfigApplicationContext getObject() throws Exception {
  AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
  context.setParent(parent);
  context.register(configClass);
  AnnotationConfigUtils.registerAnnotationConfigProcessors(context);
  context.getBeanFactory().addBeanPostProcessor(new ApplicationWindowSetter(getOpeningWindow()));
  context.refresh();
  return context;
}",0.3891273247496423
102698,"protected TableWidget getTable(){
  if (table == null) {
    if (useOriginalSortOrder)     this.table=new GlazedListTableWidget(null,getTableDescription(),null);
 else     this.table=new GlazedListTableWidget(null,getTableDescription());
  }
  return this.table;
}","protected TableWidget getTable(){
  if (table == null) {
    if (useOriginalSortOrder) {
      this.table=new GlazedListTableWidget(null,getTableDescription(),null,isFilteringSupported());
    }
 else     this.table=new GlazedListTableWidget(null,getTableDescription(),isFilteringSupported());
  }
  return this.table;
}",0.9041095890410958
102699,"public JComponent getComponent(){
  createComponent();
  return this.tableScroller;
}","public JComponent getComponent(){
  return this.tableScroller;
}",0.8590604026845637
102700,"/** 
 * Locates the given element on the page, and returns the actual Selenium WebElement implementation of it
 */
public WebElement findElement(By by){
  return getDriver().findElement(by);
}","/** 
 * Locates the given element on the page, and returns the actual Selenium WebElement implementation of it
 * @param by 
 * @return 
 */
public WebElement findElement(By by){
  return getDriver().findElement(by);
}",0.9365853658536586
102701,"/** 
 * Navigates to the given URL
 */
public void get(String url){
  driver.get(url);
}","/** 
 * Navigates to the given URL
 * @param url 
 */
public void get(String url){
  driver.get(url);
}",0.9214659685863874
102702,"/** 
 * Returns the Root site, to which all URLs will be appended
 */
public String getSiteRoot(){
  return siteURL;
}","/** 
 * Returns the Root site, to which all URLs will be appended
 * @return 
 */
public String getSiteRoot(){
  return siteURL;
}",0.9516129032258064
102703,"/** 
 * Injector for the presentationLayer field
 * @param files
 */
public void setPresentationLayer(IPresentationLayerInfo presentationLayer){
  this.presentationLayer=presentationLayer;
}","/** 
 * Injector for the presentationLayer field
 * @param presentationLayer 
 * @param files
 */
public void setPresentationLayer(IPresentationLayerInfo presentationLayer){
  this.presentationLayer=presentationLayer;
}",0.9290953545232272
102704,"/** 
 * Sets the member variable pageContents by reading the file contents
 * @param path
 */
public void setPageContents(String pageContents){
  this.pageContents=pageContents;
}","/** 
 * Sets the member variable pageContents by reading the file contents
 * @param pageContents 
 * @param path
 */
public void setPageContents(String pageContents){
  this.pageContents=pageContents;
}",0.93717277486911
102705,"/** 
 * Return the value currently reflected in the UI
 */
T getWebValue();","/** 
 * Return the value currently reflected in the UI
 * @return 
 */
T getWebValue();",0.925925925925926
102706,"/** 
 * Set the ""stored value"" in this element, but NOT in the browser
 */
void setValue(T value);","/** 
 * Set the ""stored value"" in this element, but NOT in the browser
 * @param value 
 */
void setValue(T value);",0.92018779342723
102707,void initPageContents();,"/** 
 * Brings the page ""online"" by opening it, analyzing the contents, and getting it ready to deliver its contents
 */
void initPageContents();",0.2840236686390532
102708,"private void generateDerivedPageFile(PageInfo page){
  Map<String,Object> pageContext=new LinkedHashMap<String,Object>();
  String pageName=getDerivedPageClassName(page);
  pageContext.put(""String_Node_Str"",pageName);
  pageContext.put(""String_Node_Str"",page.getPackage());
  pageContext.put(""String_Node_Str"",getBasePageClassName(page));
  try {
    String pagePath=getDerivedPagePath(page);
    log.debug(String.format(""String_Node_Str"",pageName,pagePath));
    generateFile(pageContext,getCodegenTemplatePath() + ""String_Node_Str"",pagePath);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void generateDerivedPageFile(PageInfo page){
  Map<String,Object> pageContext=new LinkedHashMap<String,Object>();
  String pageName=getDerivedPageClassName(page);
  pageContext.put(""String_Node_Str"",pageName);
  pageContext.put(""String_Node_Str"",page.getPackage());
  pageContext.put(""String_Node_Str"",getBasePageClassName(page));
  try {
    String pagePath=getDerivedPagePath(page);
    File file=new File(pagePath);
    if (!file.exists()) {
      log.debug(String.format(""String_Node_Str"",pageName,pagePath));
      generateFile(pageContext,getCodegenTemplatePath() + ""String_Node_Str"",pagePath);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.945226917057903
102709,"private Object invokeLoadBalanced(RemoteMethodInfo remoteMethodInfo,Object[] args) throws Throwable {
  Callable callable=remoteMethodInvocationFactory.create(serviceContextName,remoteInterfaceInfo.targetInterface.getSimpleName(),remoteMethodInfo.method.getName(),args,remoteMethodInfo.argTypes,null);
  Member targetMember=remoteMethodInfo.loadBalancer.getNext();
  DistributedTask<String> task=new DistributedTask<String>(callable,targetMember);
  Future future=executorService.submit(task);
  try {
    return future.get(remoteMethodInfo.timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause == null) {
      cause=new MemberLeftException();
    }
    throw cause;
  }
catch (  TimeoutException e) {
    throw new RemoteMethodTimeoutException(format(""String_Node_Str"",remoteMethodInfo.method.toString(),remoteMethodInfo.timeoutMs),e);
  }
}","private Object invokeLoadBalanced(RemoteMethodInfo remoteMethodInfo,Object[] args) throws Throwable {
  Callable callable=remoteMethodInvocationFactory.create(serviceContextName,remoteInterfaceInfo.targetInterface.getSimpleName(),remoteMethodInfo.method.getName(),args,remoteMethodInfo.argTypes,null);
  Member targetMember=remoteMethodInfo.loadBalancer.getNext();
  DistributedTask<String> task=new DistributedTask<String>(callable,targetMember);
  Future future=executorService.submit(task);
  try {
    return future.get(remoteMethodInfo.timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  MemberLeftException e) {
    throw e;
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause == null) {
      cause=new MemberLeftException();
    }
 else {
      StackTraceElement[] clientSideStackTrace=Thread.currentThread().getStackTrace();
      fixStrackTrace(cause,clientSideStackTrace);
    }
    throw cause;
  }
catch (  TimeoutException e) {
    throw new RemoteMethodTimeoutException(format(""String_Node_Str"",remoteMethodInfo.method.toString(),remoteMethodInfo.timeoutMs),e);
  }
}",0.8930693069306931
102710,"private Object invokePartitioned(RemoteMethodInfo remoteMethodInfo,Object[] args) throws Throwable {
  Object partitionKey=getPartitionKey(remoteMethodInfo,args);
  Callable callable=remoteMethodInvocationFactory.create(serviceContextName,remoteInterfaceInfo.targetInterface.getSimpleName(),remoteMethodInfo.method.getName(),args,remoteMethodInfo.argTypes,partitionKey);
  Future future=executorService.submit(callable);
  try {
    return future.get(remoteMethodInfo.timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  ExecutionException e) {
    throw e.getCause();
  }
catch (  TimeoutException e) {
    throw new RemoteMethodTimeoutException(format(""String_Node_Str"",remoteMethodInfo.method.toString(),remoteMethodInfo.timeoutMs),e);
  }
}","private Object invokePartitioned(RemoteMethodInfo remoteMethodInfo,Object[] args) throws Throwable {
  Object partitionKey=getPartitionKey(remoteMethodInfo,args);
  Callable callable=remoteMethodInvocationFactory.create(serviceContextName,remoteInterfaceInfo.targetInterface.getSimpleName(),remoteMethodInfo.method.getName(),args,remoteMethodInfo.argTypes,partitionKey);
  Future future=executorService.submit(callable);
  try {
    return future.get(remoteMethodInfo.timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  MemberLeftException e) {
    throw e;
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause == null) {
      cause=new MemberLeftException();
    }
 else {
      StackTraceElement[] clientSideStackTrace=Thread.currentThread().getStackTrace();
      fixStrackTrace(cause,clientSideStackTrace);
    }
    throw cause;
  }
catch (  TimeoutException e) {
    throw new RemoteMethodTimeoutException(format(""String_Node_Str"",remoteMethodInfo.method.toString(),remoteMethodInfo.timeoutMs),e);
  }
}",0.7371975239167136
102711,"@Test public void exceptionUnwrapping(){
  TestService proxy=proxyProvider.getProxy(TestService.class);
  String arg=""String_Node_Str"";
  when(testServiceMock.singleArg(arg)).thenThrow(new MyRuntimeException());
  try {
    proxy.singleArg(arg);
    fail();
  }
 catch (  MyRuntimeException expected) {
    expected.printStackTrace();
  }
}","@Test public void exceptionUnwrapping(){
  TestService proxy=proxyProvider.getProxy(TestService.class);
  String arg=""String_Node_Str"";
  when(testServiceMock.singleArg(arg)).thenThrow(new MyRuntimeException());
  try {
    proxy.singleArg(arg);
    fail();
  }
 catch (  MyRuntimeException expected) {
    System.err.println(""String_Node_Str"");
    expected.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
}",0.8877284595300261
102712,"@Test public void exceptionUnwrapping(){
  TestService proxy=proxyProvider.getProxy(TestService.class);
  String arg=""String_Node_Str"";
  when(testServiceMock.singleArg(arg)).thenThrow(new MyRuntimeException());
  try {
    proxy.singleArg(arg);
    fail();
  }
 catch (  MyRuntimeException expected) {
  }
}","@Test public void exceptionUnwrapping(){
  TestService proxy=proxyProvider.getProxy(TestService.class);
  String arg=""String_Node_Str"";
  when(testServiceMock.singleArg(arg)).thenThrow(new MyRuntimeException());
  try {
    proxy.singleArg(arg);
    fail();
  }
 catch (  MyRuntimeException expected) {
    System.err.println(""String_Node_Str"");
    expected.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
}",0.8392370572207084
102713,"@Test public void test() throws Throwable {
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(null);
  PojoServiceContextFactory factory=new PojoServiceContextFactory(Pojo.class);
  PojoServiceContext context1=factory.create();
  PojoServiceContext context2=factory.create();
  PojoServiceContext context3=factory.create();
  SomeServiceImpl service1=(SomeServiceImpl)context1.getService(""String_Node_Str"");
  SomeServiceImpl service2=(SomeServiceImpl)context2.getService(""String_Node_Str"");
  SomeServiceImpl service3=(SomeServiceImpl)context3.getService(""String_Node_Str"");
  ServiceContextServer server1=build(context1,instance1,""String_Node_Str"");
  ServiceContextServer server2=build(context2,instance2,""String_Node_Str"");
  ServiceContextServer server3=build(context3,instance3,""String_Node_Str"");
  HazelcastInstance clientInstance=TestUtils.newLiteInstance();
  ProxyProvider proxyProvider=new DefaultProxyProvider(""String_Node_Str"",clientInstance);
  SomeService someService=proxyProvider.getProxy(SomeService.class);
  for (int k=0; k < 3 * 5; k++) {
    someService.someMethod(0);
  }
  assertEquals(5,service1.count);
  assertEquals(5,service2.count);
  assertEquals(5,service3.count);
  server1.shutdown();
  server2.shutdown();
  server3.shutdown();
}","@Test public void test() throws Throwable {
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(null);
  PojoServiceContextFactory factory=new PojoServiceContextFactory(Pojo.class);
  PojoServiceContext context1=factory.create();
  PojoServiceContext context2=factory.create();
  PojoServiceContext context3=factory.create();
  SomeServiceImpl service1=(SomeServiceImpl)context1.getService(""String_Node_Str"");
  SomeServiceImpl service2=(SomeServiceImpl)context2.getService(""String_Node_Str"");
  SomeServiceImpl service3=(SomeServiceImpl)context3.getService(""String_Node_Str"");
  ServiceContextServer server1=build(context1,instance1,""String_Node_Str"");
  ServiceContextServer server2=build(context2,instance2,""String_Node_Str"");
  ServiceContextServer server3=build(context3,instance3,""String_Node_Str"");
  HazelcastInstance clientInstance=TestUtils.newLiteInstance();
  ProxyProvider proxyProvider=new DefaultProxyProvider(""String_Node_Str"",clientInstance);
  SomeService someService=proxyProvider.getProxy(SomeService.class);
  for (int k=0; k < 3 * 5; k++) {
    someService.someMethod();
  }
  assertEquals(5,service1.count);
  assertEquals(5,service2.count);
  assertEquals(5,service3.count);
  server1.shutdown();
  server2.shutdown();
  server3.shutdown();
}",0.9996457669146298
102714,"public void someMethod(int x){
  count++;
}","public void someMethod(){
  count++;
}",0.9382716049382716
102715,@Partitioned Order get(CustomerOrderId customerOrderId);,@Partitioned Order get(@PartitionKey CustomerOrderId customerOrderId);,0.8888888888888888
102716,"@Partitioned void addOrderLine(CustomerOrderId customerOrderId,String articleId,int quantity);","@Partitioned void addOrderLine(@PartitionKey CustomerOrderId customerOrderId,String articleId,int quantity);",0.9306930693069309
102717,"public Object executeMethod(String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  notNull(""String_Node_Str"",args);
  if (partitionKey != null) {
    Partition partition=partitionService.getPartition(partitionKey);
    int partitionId=partition.getPartitionId();
    if (!managedPartitions.contains(partitionId)) {
      throw new PartitionMovedException(format(""String_Node_Str"",partitionId,self));
    }
  }
  Object service=serviceContext.getService(serviceName);
  Class serviceClass=service.getClass();
  Method[] methods=serviceClass.getMethods();
  Method foundMethod=null;
  for (  Method method : methods) {
    if (PojoUtils.matches(method,methodName,argTypes)) {
      foundMethod=method;
      break;
    }
  }
  if (foundMethod == null) {
    throw new IllegalStateException();
  }
  try {
    return foundMethod.invoke(service,args);
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}","public Object executeMethod(String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  if (partitionKey != null) {
    Partition partition=partitionService.getPartition(partitionKey);
    int partitionId=partition.getPartitionId();
    if (!managedPartitions.contains(partitionId)) {
      throw new PartitionMovedException(format(""String_Node_Str"",partitionId,self));
    }
  }
  Object service=serviceContext.getService(serviceName);
  Class serviceClass=service.getClass();
  Method[] methods=serviceClass.getMethods();
  Method foundMethod=null;
  for (  Method method : methods) {
    if (PojoUtils.matches(method,methodName,argTypes)) {
      foundMethod=method;
      break;
    }
  }
  if (foundMethod == null) {
    throw new IllegalStateException();
  }
  try {
    return foundMethod.invoke(service,args);
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}",0.984126984126984
102718,"/** 
 * Executes a method. <p/> This is the call that is executed by ProxyProvider once the task is deserialized and executed on the target machine.
 * @param serviceContextName
 * @param serviceName
 * @param methodName
 * @param args
 * @return
 * @throws Exception
 * @throws IllegalArgumentException if serviceContextName is not pointing to a an existing ServiceContext.
 * @throws NullPointerException     if serviceContextName
 */
public static Object executeMethod(HazelcastInstance hazelcastInstance,String serviceContextName,String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",hazelcastInstance);
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  notNull(""String_Node_Str"",args);
  ServiceContextContainer container=getContainer(hazelcastInstance,serviceContextName);
  return container.executeMethod(serviceName,methodName,argTypes,args,partitionKey);
}","/** 
 * Executes a method. <p/> This is the call that is executed by ProxyProvider once the task is deserialized and executed on the target machine.
 * @param serviceContextName
 * @param serviceName
 * @param methodName
 * @param args
 * @return
 * @throws Exception
 * @throws IllegalArgumentException if serviceContextName is not pointing to a an existing ServiceContext.
 * @throws NullPointerException     if serviceContextName
 */
public static Object executeMethod(HazelcastInstance hazelcastInstance,String serviceContextName,String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",hazelcastInstance);
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  ServiceContextContainer container=getContainer(hazelcastInstance,serviceContextName);
  return container.executeMethod(serviceName,methodName,argTypes,args,partitionKey);
}",0.9827501232134056
102719,"@Test public void test() throws Throwable {
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(null);
  PojoServiceContextFactory factory=new PojoServiceContextFactory(Pojo.class);
  PojoServiceContext context1=factory.create();
  PojoServiceContext context2=factory.create();
  PojoServiceContext context3=factory.create();
  SomeServiceImpl service1=(SomeServiceImpl)context1.getService(""String_Node_Str"");
  SomeServiceImpl service2=(SomeServiceImpl)context2.getService(""String_Node_Str"");
  SomeServiceImpl service3=(SomeServiceImpl)context3.getService(""String_Node_Str"");
  ServiceContextServer server1=build(context1,instance1,""String_Node_Str"");
  ServiceContextServer server2=build(context2,instance2,""String_Node_Str"");
  ServiceContextServer server3=build(context3,instance3,""String_Node_Str"");
  HazelcastInstance clientInstance=TestUtils.newLiteInstance();
  ProxyProvider proxyProvider=new DefaultProxyProvider(""String_Node_Str"",clientInstance);
  SomeService someService=proxyProvider.getProxy(SomeService.class);
  for (int k=0; k < 3 * 5; k++) {
    someService.someMethod(0);
  }
  assertEquals(5,service1.count);
  assertEquals(5,service2.count);
  assertEquals(5,service3.count);
  server1.shutdown();
  server2.shutdown();
  server3.shutdown();
}","@Test public void test() throws Throwable {
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(null);
  PojoServiceContextFactory factory=new PojoServiceContextFactory(Pojo.class);
  PojoServiceContext context1=factory.create();
  PojoServiceContext context2=factory.create();
  PojoServiceContext context3=factory.create();
  SomeServiceImpl service1=(SomeServiceImpl)context1.getService(""String_Node_Str"");
  SomeServiceImpl service2=(SomeServiceImpl)context2.getService(""String_Node_Str"");
  SomeServiceImpl service3=(SomeServiceImpl)context3.getService(""String_Node_Str"");
  ServiceContextServer server1=build(context1,instance1,""String_Node_Str"");
  ServiceContextServer server2=build(context2,instance2,""String_Node_Str"");
  ServiceContextServer server3=build(context3,instance3,""String_Node_Str"");
  HazelcastInstance clientInstance=TestUtils.newLiteInstance();
  ProxyProvider proxyProvider=new DefaultProxyProvider(""String_Node_Str"",clientInstance);
  SomeService someService=proxyProvider.getProxy(SomeService.class);
  for (int k=0; k < 3 * 5; k++) {
    someService.someMethod();
  }
  assertEquals(5,service1.count);
  assertEquals(5,service2.count);
  assertEquals(5,service3.count);
  server1.shutdown();
  server2.shutdown();
  server3.shutdown();
}",0.9996457669146298
102720,"public void someMethod(int x){
  count++;
}","public void someMethod(){
  count++;
}",0.9382716049382716
102721,@LoadBalanced String singleArg(@PartitionKey String arg);,@LoadBalanced String singleArg(String arg);,0.86
102722,"@LoadBalanced String multipleArgs(@PartitionKey String arg,String arg2);","@LoadBalanced String multipleArgs(String arg,String arg2);",0.8923076923076924
102723,"public Object executeMethod(String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  notNull(""String_Node_Str"",args);
  if (partitionKey != null) {
    Partition partition=partitionService.getPartition(partitionKey);
    int partitionId=partition.getPartitionId();
    if (!managedPartitions.contains(partitionId)) {
      throw new PartitionMovedException(format(""String_Node_Str"",partitionId,self));
    }
  }
  Object service=serviceContext.getService(serviceName);
  Class serviceClass=service.getClass();
  Method[] methods=serviceClass.getMethods();
  Method foundMethod=null;
  for (  Method method : methods) {
    if (PojoUtils.matches(method,methodName,argTypes)) {
      foundMethod=method;
      break;
    }
  }
  if (foundMethod == null) {
    throw new IllegalStateException();
  }
  try {
    return foundMethod.invoke(service,args);
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}","public Object executeMethod(String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  if (partitionKey != null) {
    Partition partition=partitionService.getPartition(partitionKey);
    int partitionId=partition.getPartitionId();
    if (!managedPartitions.contains(partitionId)) {
      throw new PartitionMovedException(format(""String_Node_Str"",partitionId,self));
    }
  }
  Object service=serviceContext.getService(serviceName);
  Class serviceClass=service.getClass();
  Method[] methods=serviceClass.getMethods();
  Method foundMethod=null;
  for (  Method method : methods) {
    if (PojoUtils.matches(method,methodName,argTypes)) {
      foundMethod=method;
      break;
    }
  }
  if (foundMethod == null) {
    throw new IllegalStateException();
  }
  try {
    return foundMethod.invoke(service,args);
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}",0.984126984126984
102724,"/** 
 * Executes a method. <p/> This is the call that is executed by ProxyProvider once the task is deserialized and executed on the target machine.
 * @param serviceContextName
 * @param serviceName
 * @param methodName
 * @param args
 * @return
 * @throws Exception
 * @throws IllegalArgumentException if serviceContextName is not pointing to a an existing ServiceContext.
 * @throws NullPointerException     if serviceContextName
 */
public static Object executeMethod(HazelcastInstance hazelcastInstance,String serviceContextName,String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",hazelcastInstance);
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  notNull(""String_Node_Str"",args);
  ServiceContextContainer container=getContainer(hazelcastInstance,serviceContextName);
  return container.executeMethod(serviceName,methodName,argTypes,args,partitionKey);
}","/** 
 * Executes a method. <p/> This is the call that is executed by ProxyProvider once the task is deserialized and executed on the target machine.
 * @param serviceContextName
 * @param serviceName
 * @param methodName
 * @param args
 * @return
 * @throws Exception
 * @throws IllegalArgumentException if serviceContextName is not pointing to a an existing ServiceContext.
 * @throws NullPointerException     if serviceContextName
 */
public static Object executeMethod(HazelcastInstance hazelcastInstance,String serviceContextName,String serviceName,String methodName,String[] argTypes,Object[] args,Object partitionKey) throws Throwable {
  notNull(""String_Node_Str"",hazelcastInstance);
  notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",serviceName);
  notNull(""String_Node_Str"",methodName);
  ServiceContextContainer container=getContainer(hazelcastInstance,serviceContextName);
  return container.executeMethod(serviceName,methodName,argTypes,args,partitionKey);
}",0.9827501232134056
102725,@LoadBalanced String singleArg(@PartitionKey String arg);,@LoadBalanced String singleArg(String arg);,0.86
102726,"@LoadBalanced String multipleArgs(@PartitionKey String arg,String arg2);","@LoadBalanced String multipleArgs(String arg,String arg2);",0.8923076923076924
102727,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  RemoteMethodInfo methodInfo=remoteInterfaceInfo.methodInfoMap.get(method);
  if (methodInfo == null) {
    return invokeNonProxied(proxy,method,args);
  }
  long startTimeNs=0;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"" + method);
    startTimeNs=System.nanoTime();
  }
  Object result;
switch (methodInfo.methodType) {
case FORK_JOIN:
    result=invokeForkJoin(methodInfo,args);
  break;
case PARTITIONED:
result=invokePartitioned(methodInfo,args);
break;
case LOAD_BALANCED:
result=invokeLoadBalancer(methodInfo,args);
break;
default :
throw new RuntimeException(""String_Node_Str"" + methodInfo.methodType);
}
if (logger.isLoggable(Level.FINE)) {
long delayNs=System.nanoTime() - startTimeNs;
logger.log(Level.FINE,""String_Node_Str"" + method + ""String_Node_Str""+ (delayNs / 1000)+ ""String_Node_Str"");
}
return result;
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  RemoteMethodInfo methodInfo=remoteInterfaceInfo.methodInfoMap.get(method);
  if (methodInfo == null) {
    return invokeNonProxied(proxy,method,args);
  }
  long startTimeNs=0;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"" + method);
    startTimeNs=System.nanoTime();
  }
  while (true) {
    try {
      Object result;
switch (methodInfo.methodType) {
case FORK_JOIN:
        result=invokeForkJoin(methodInfo,args);
      break;
case PARTITIONED:
    result=invokePartitioned(methodInfo,args);
  break;
case LOAD_BALANCED:
result=invokeLoadBalancer(methodInfo,args);
break;
default :
throw new RuntimeException(""String_Node_Str"" + methodInfo.methodType);
}
if (logger.isLoggable(Level.FINE)) {
long delayNs=System.nanoTime() - startTimeNs;
logger.log(Level.FINE,""String_Node_Str"" + method + ""String_Node_Str""+ (delayNs / 1000)+ ""String_Node_Str"");
}
return result;
}
 catch (PartitionMovedException e) {
logger.log(Level.INFO,""String_Node_Str"");
Thread.sleep(100);
}
}
}",0.9268532155130094
102728,"public Object call() throws Exception {
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName));
  }
  try {
    while (true) {
      try {
        Object result=ServiceContextServer.executeMethod(serviceContext,serviceName,methodName,argTypes,args,partitionKey);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName));
        }
        return result;
      }
 catch (      PartitionMovedException e) {
        logger.log(Level.INFO,""String_Node_Str"");
        Thread.sleep(100);
      }
    }
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName),e);
    }
    throw e;
  }
catch (  Throwable e) {
    if (logger.isLoggable(Level.SEVERE)) {
      logger.log(Level.SEVERE,format(""String_Node_Str"",serviceName,methodName,serviceName),e);
    }
    throw new RuntimeException(e);
  }
}","public Object call() throws Exception {
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName));
  }
  try {
    Object result=ServiceContextServer.executeMethod(serviceContext,serviceName,methodName,argTypes,args,partitionKey);
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName));
    }
    return result;
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,format(""String_Node_Str"",serviceName,methodName,serviceName),e);
    }
    throw e;
  }
catch (  Throwable e) {
    if (logger.isLoggable(Level.SEVERE)) {
      logger.log(Level.SEVERE,format(""String_Node_Str"",serviceName,methodName,serviceName),e);
    }
    throw new RuntimeException(e);
  }
}",0.8981530343007915
102729,"/** 
 * Executes a scanForPartitionChanges; so checks the partition table to see if there are change. <p/> This method should be called by some kind of Scheduler.   It is not threadsafe, and should always be called by the same thread (because locks are used and they need to be unlocked by the same thread that acquired the lock).
 */
public void scanForPartitionChanges(){
  long startMs=System.currentTimeMillis();
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,format(""String_Node_Str"",serviceContextName));
  }
  boolean changeDetected=false;
  for (  Partition partition : partitionService.getPartitions()) {
    int partitionId=partition.getPartitionId();
    if (self.equals(partition.getOwner())) {
      boolean startManagingPartition=!managedPartitions.contains(partitionId);
      if (startManagingPartition) {
        if (addPartition(partitionId)) {
          changeDetected=true;
        }
      }
    }
 else {
      boolean stopManagingPartition=managedPartitions.contains(partitionId);
      if (stopManagingPartition) {
        removePartition(partitionId);
        changeDetected=true;
      }
    }
  }
  if (changeDetected && logger.isLoggable(Level.INFO)) {
    long durationMs=System.currentTimeMillis() - startMs;
    logger.log(Level.INFO,format(""String_Node_Str"",serviceContextName,managedPartitions.size(),durationMs));
  }
}","/** 
 * Executes a scanForPartitionChanges; so checks the partition table to see if there are change. <p/> This method should be called by some kind of Scheduler.   It is not threadsafe, and should always be called by the same thread (because locks are used and they need to be unlocked by the same thread that acquired the lock).
 */
public void scanForPartitionChanges(){
  long startMs=System.currentTimeMillis();
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,format(""String_Node_Str"",serviceContextName));
  }
  boolean changeDetected=false;
  for (  Partition partition : partitions) {
    int partitionId=partition.getPartitionId();
    if (self.equals(partition.getOwner())) {
      boolean startManagingPartition=!managedPartitions.contains(partitionId);
      if (startManagingPartition) {
        if (addPartition(partitionId)) {
          changeDetected=true;
        }
      }
    }
 else {
      boolean stopManagingPartition=managedPartitions.contains(partitionId);
      if (stopManagingPartition) {
        removePartition(partitionId);
        changeDetected=true;
      }
    }
  }
  if (changeDetected && logger.isLoggable(Level.INFO)) {
    long durationMs=System.currentTimeMillis() - startMs;
    logger.log(Level.INFO,format(""String_Node_Str"",serviceContextName,managedPartitions.size(),durationMs));
  }
}",0.9911958914159942
102730,"/** 
 * Creates a new ServiceContextContainer with the given ServiceContext.
 * @param serviceContext     the ServiceContext contained in this ServiceContextContainer.
 * @param serviceContextName the name of the ServiceContext
 * @throws NullPointerException if serviceContext or serviceContextName is null.
 */
public ServiceContextContainer(ServiceContext serviceContext,String serviceContextName,HazelcastInstance hazelcastInstance){
  this.serviceContext=notNull(""String_Node_Str"",serviceContext);
  this.serviceContextName=notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",hazelcastInstance);
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,format(""String_Node_Str"",serviceContext));
  }
  self=hazelcastInstance.getCluster().getLocalMember();
  partitionService=hazelcastInstance.getPartitionService();
  for (  Partition partition : partitionService.getPartitions()) {
    int partitionId=partition.getPartitionId();
    ILock lock=hazelcastInstance.getLock(""String_Node_Str"" + partitionId);
    partitionLockMap.put(partitionId,lock);
  }
  logger.log(Level.INFO,""String_Node_Str"" + partitionLockMap.size());
}","/** 
 * Creates a new ServiceContextContainer with the given ServiceContext.
 * @param serviceContext     the ServiceContext contained in this ServiceContextContainer.
 * @param serviceContextName the name of the ServiceContext
 * @throws NullPointerException if serviceContext or serviceContextName is null.
 */
public ServiceContextContainer(ServiceContext serviceContext,String serviceContextName,HazelcastInstance hazelcastInstance){
  this.serviceContext=notNull(""String_Node_Str"",serviceContext);
  this.serviceContextName=notNull(""String_Node_Str"",serviceContextName);
  notNull(""String_Node_Str"",hazelcastInstance);
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,format(""String_Node_Str"",serviceContext));
  }
  self=hazelcastInstance.getCluster().getLocalMember();
  partitionService=hazelcastInstance.getPartitionService();
  for (  Partition partition : partitionService.getPartitions()) {
    int partitionId=partition.getPartitionId();
    ILock lock=hazelcastInstance.getLock(""String_Node_Str"" + partitionId);
    partitionLockMap.put(partitionId,lock);
    partitions.add(partition);
  }
}",0.955759964958388
102731,"public TreeNode getChildByName(String name) throws RepositoryException {
  for (  TreeNode child : children_) {
    if (child.getName().equals(name))     return child;
  }
  Node tempNode=this.getNode().getNode(name);
  if (tempNode == null)   return null;
  TreeNode tempTreeNode=new TreeNode(tempNode);
  children_.add(tempTreeNode);
  return tempTreeNode;
}","public TreeNode getChildByName(String name) throws RepositoryException {
  for (  TreeNode child : children_) {
    if (child.getName().equals(name))     return child;
  }
  return null;
}",0.6861313868613139
102732,"@Override protected String getFileType(ResultNode node) throws Exception {
  return org.exoplatform.services.cms.impl.Utils.getNodeTypeIcon(node,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","@Override protected String getFileType(ResultNode node) throws Exception {
  return org.exoplatform.services.cms.impl.Utils.getFileType(node);
}",0.5755102040816327
102733,"/** 
 * Creates the file element for connector response looks like that <File name="""" fileType="""" dateCreated="""" dateModified="""" creator="""" size="""" url="""" />.
 * @param document the document
 * @param child the child
 * @param fileType the file type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public Element createFileElement(Document document,Node child,String fileType) throws Exception {
  Element file=document.createElement(""String_Node_Str"");
  file.setAttribute(""String_Node_Str"",child.getName());
  SimpleDateFormat formatter=new SimpleDateFormat(ISO8601.SIMPLE_DATETIME_FORMAT);
  file.setAttribute(""String_Node_Str"",formatter.format(child.getProperty(""String_Node_Str"").getDate().getTime()));
  file.setAttribute(""String_Node_Str"",formatter.format(child.getProperty(""String_Node_Str"").getDate().getTime()));
  file.setAttribute(""String_Node_Str"",child.getProperty(""String_Node_Str"").getString());
  file.setAttribute(""String_Node_Str"",fileType);
  file.setAttribute(""String_Node_Str"",getFileURL(child));
  if (child.isNodeType(FCKUtils.NT_FILE)) {
    long size=child.getNode(""String_Node_Str"").getProperty(""String_Node_Str"").getLength();
    file.setAttribute(""String_Node_Str"",""String_Node_Str"" + size / 1000);
  }
 else {
    file.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return file;
}","/** 
 * Creates the file element for connector response looks like that   {@code <Filename="""" fileType="""" dateCreated="""" dateModified="""" creator="""" size="""" url="""" />}.
 * @param document the document
 * @param child the child
 * @param fileType the file type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public Element createFileElement(Document document,Node child,String fileType) throws Exception {
  Element file=document.createElement(""String_Node_Str"");
  file.setAttribute(""String_Node_Str"",child.getName());
  SimpleDateFormat formatter=new SimpleDateFormat(ISO8601.SIMPLE_DATETIME_FORMAT);
  file.setAttribute(""String_Node_Str"",formatter.format(child.getProperty(""String_Node_Str"").getDate().getTime()));
  file.setAttribute(""String_Node_Str"",formatter.format(child.getProperty(""String_Node_Str"").getDate().getTime()));
  file.setAttribute(""String_Node_Str"",child.getProperty(""String_Node_Str"").getString());
  file.setAttribute(""String_Node_Str"",fileType);
  file.setAttribute(""String_Node_Str"",getFileURL(child));
  if (child.isNodeType(FCKUtils.NT_FILE)) {
    long size=child.getNode(""String_Node_Str"").getProperty(""String_Node_Str"").getLength();
    file.setAttribute(""String_Node_Str"",""String_Node_Str"" + size / 1000);
  }
 else {
    file.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return file;
}",0.9959514170040484
102734,"/** 
 * Creates the folder element for connector response look like <folder name="""" url="""" folderType="""" />
 * @param document the document
 * @param child the child
 * @param folderType the folder type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public Element createFolderElement(Document document,Node child,String folderType) throws Exception {
  Element folder=document.createElement(""String_Node_Str"");
  folder.setAttribute(""String_Node_Str"",child.getName());
  folder.setAttribute(""String_Node_Str"",getFolderURL(child));
  folder.setAttribute(""String_Node_Str"",folderType);
  return folder;
}","/** 
 * Creates the folder element for connector response look like   {@code <folder name=""""url="""" folderType="""" />}
 * @param document the document
 * @param child the child
 * @param folderType the folder type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public Element createFolderElement(Document document,Node child,String folderType) throws Exception {
  Element folder=document.createElement(""String_Node_Str"");
  folder.setAttribute(""String_Node_Str"",child.getName());
  folder.setAttribute(""String_Node_Str"",getFolderURL(child));
  folder.setAttribute(""String_Node_Str"",folderType);
  return folder;
}",0.9914396887159532
102735,"/** 
 * Creates the root element for connector response. The full connector response looks like: <Connector command=""GetFolders"" resourceType=""""> <CurrentFolder folderType="""" name="""" path="""" url=""""/> </CurrentFolder> </Connector>
 * @param command the command
 * @param node the node
 * @param folderType the folder type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public static Element createRootElement(String command,Node node,String folderType) throws Exception {
  Document doc=null;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  doc=builder.newDocument();
  StringBuffer currentPath=new StringBuffer(node.getPath());
  if (!currentPath.toString().endsWith(""String_Node_Str"")) {
    currentPath.append(""String_Node_Str"");
  }
  Element rootElement=doc.createElement(""String_Node_Str"");
  doc.appendChild(rootElement);
  rootElement.setAttribute(""String_Node_Str"",command);
  rootElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Element currentFolderElement=doc.createElement(""String_Node_Str"");
  currentFolderElement.setAttribute(""String_Node_Str"",node.getName());
  currentFolderElement.setAttribute(""String_Node_Str"",folderType);
  currentFolderElement.setAttribute(""String_Node_Str"",currentPath.toString());
  currentFolderElement.setAttribute(""String_Node_Str"",createWebdavURL(node));
  rootElement.appendChild(currentFolderElement);
  return rootElement;
}","/** 
 * Creates the root element for connector response. The full connector response looks like:  {@code <Connector command=""GetFolders"" resourceType=""""> <CurrentFolder folderType="""" name="""" path="""" url=""""/> </CurrentFolder> </Connector>}
 * @param command the command
 * @param node the node
 * @param folderType the folder type
 * @return the org.w3c.dom.Element element
 * @throws Exception the exception
 */
public static Element createRootElement(String command,Node node,String folderType) throws Exception {
  Document doc=null;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  doc=builder.newDocument();
  StringBuffer currentPath=new StringBuffer(node.getPath());
  if (!currentPath.toString().endsWith(""String_Node_Str"")) {
    currentPath.append(""String_Node_Str"");
  }
  Element rootElement=doc.createElement(""String_Node_Str"");
  doc.appendChild(rootElement);
  rootElement.setAttribute(""String_Node_Str"",command);
  rootElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Element currentFolderElement=doc.createElement(""String_Node_Str"");
  currentFolderElement.setAttribute(""String_Node_Str"",node.getName());
  currentFolderElement.setAttribute(""String_Node_Str"",folderType);
  currentFolderElement.setAttribute(""String_Node_Str"",currentPath.toString());
  currentFolderElement.setAttribute(""String_Node_Str"",createWebdavURL(node));
  rootElement.appendChild(currentFolderElement);
  return rootElement;
}",0.9970089730807578
102736,"/** 
 * Deletes a folder/file.
 * @param driveName The drive name.
 * @param workspaceName The workspace name.
 * @param itemPath The path to the folder/file.
 * @return {@link Response} Returns the status of an item which has been deleted.
 * @throws Exception The exception
 * @anchor ManageDocumentService.deleteFolderOrFile
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Response deleteFolderOrFile(@QueryParam(""String_Node_Str"") String driveName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String itemPath){
  try {
    Node node=getNode(driveName,workspaceName,itemPath);
    Node parent=node.getParent();
    node.remove();
    parent.save();
    return Response.ok().cacheControl(cc).build();
  }
 catch (  AccessDeniedException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.UNAUTHORIZED).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  PathNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.NOT_FOUND).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  RepositoryException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.serverError().entity(e.getMessage()).cacheControl(cc).build();
  }
}","/** 
 * Deletes a folder/file.
 * @param driveName The drive name.
 * @param workspaceName The workspace name.
 * @param itemPath The path to the folder/file.
 * @return {@link Response} Returns the status of an item which has been deleted.
 * @anchor ManageDocumentService.deleteFolderOrFile
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Response deleteFolderOrFile(@QueryParam(""String_Node_Str"") String driveName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String itemPath){
  try {
    Node node=getNode(driveName,workspaceName,itemPath);
    Node parent=node.getParent();
    node.remove();
    parent.save();
    return Response.ok().cacheControl(cc).build();
  }
 catch (  AccessDeniedException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.UNAUTHORIZED).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  PathNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.NOT_FOUND).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  RepositoryException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.serverError().entity(e.getMessage()).cacheControl(cc).build();
  }
}",0.9889485317335016
102737,"/** 
 * Gets all folders and files which can be viewed by the current user.
 * @param driveName The drive name.
 * @param workspaceName The workspace name.
 * @param currentFolder The path to the folder to achieve its folders and files.
 * @param showHidden Shows the hidden items or not. The default value is false.
 * @return {@link Document} which contains the folders and files.
 * @throws Exception The exception
 * @anchor ManageDocumentService.getFoldersAndFiles
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Response getFoldersAndFiles(@QueryParam(""String_Node_Str"") String driveName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String currentFolder,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String showHidden){
  try {
    Node node=getNode(driveName,workspaceName,currentFolder);
    return buildXMLResponseForChildren(node,driveName,currentFolder,Boolean.valueOf(showHidden));
  }
 catch (  AccessDeniedException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.UNAUTHORIZED).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  PathNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.NOT_FOUND).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  RepositoryException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.serverError().entity(e.getMessage()).cacheControl(cc).build();
  }
}","/** 
 * Gets all folders and files which can be viewed by the current user.
 * @param driveName The drive name.
 * @param workspaceName The workspace name.
 * @param currentFolder The path to the folder to achieve its folders and files.
 * @param showHidden Shows the hidden items or not. The default value is false.
 * @return {@link Document} which contains the folders and files.
 * @anchor ManageDocumentService.getFoldersAndFiles
 */
@GET @Path(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Response getFoldersAndFiles(@QueryParam(""String_Node_Str"") String driveName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String currentFolder,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String showHidden){
  try {
    Node node=getNode(driveName,workspaceName,currentFolder);
    return buildXMLResponseForChildren(node,driveName,currentFolder,Boolean.valueOf(showHidden));
  }
 catch (  AccessDeniedException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.UNAUTHORIZED).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  PathNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",e);
    }
    return Response.status(Status.NOT_FOUND).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  RepositoryException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).cacheControl(cc).build();
  }
catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    return Response.serverError().entity(e.getMessage()).cacheControl(cc).build();
  }
}",0.99023709902371
102738,"/** 
 * Instantiates a new base connector.
 * @param container the container
 */
public BaseConnector(){
  livePortalManagerService=WCMCoreUtils.getService(LivePortalManagerService.class);
  repositoryService=WCMCoreUtils.getService(RepositoryService.class);
  webSchemaConfigService=WCMCoreUtils.getService(WebSchemaConfigService.class);
  votingService=WCMCoreUtils.getService(VotingService.class);
  linkManager=WCMCoreUtils.getService(LinkManager.class);
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  folderHandler=new FCKFolderHandler(container);
  fileHandler=new FCKFileHandler(container);
  fileUploadHandler=new FileUploadHandler();
}","/** 
 * Instantiates a new base connector.
 */
public BaseConnector(){
  livePortalManagerService=WCMCoreUtils.getService(LivePortalManagerService.class);
  repositoryService=WCMCoreUtils.getService(RepositoryService.class);
  webSchemaConfigService=WCMCoreUtils.getService(WebSchemaConfigService.class);
  votingService=WCMCoreUtils.getService(VotingService.class);
  linkManager=WCMCoreUtils.getService(LinkManager.class);
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  folderHandler=new FCKFolderHandler(container);
  fileHandler=new FCKFileHandler(container);
  fileUploadHandler=new FileUploadHandler();
}",0.9738461538461538
102739,"/** 
 * SERVICE: Edit title of document.
 * @param newTitle the new title of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 * @throws Exception the exception
 */
@POST @Path(""String_Node_Str"") public Response editTitle(@FormParam(""String_Node_Str"") String newTitle,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_TITLE,newTitle,repositoryName,workspaceName,nodeUIID,siteName,language);
}","/** 
 * SERVICE: Edit title of document.
 * @param newTitle the new title of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 */
@POST @Path(""String_Node_Str"") public Response editTitle(@FormParam(""String_Node_Str"") String newTitle,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_TITLE,newTitle,repositoryName,workspaceName,nodeUIID,siteName,language);
}",0.9763991908294
102740,"/** 
 * SERVICE: Edit summary of document.
 * @param newValue the new summary of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 * @throws Exception the exception
 */
@POST @Path(""String_Node_Str"") public Response editText(@FormParam(""String_Node_Str"") String newValue,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_TEXT,newValue,repositoryName,workspaceName,nodeUIID,siteName,language);
}","/** 
 * SERVICE: Edit summary of document.
 * @param newValue the new summary of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 */
@POST @Path(""String_Node_Str"") public Response editText(@FormParam(""String_Node_Str"") String newValue,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_TEXT,newValue,repositoryName,workspaceName,nodeUIID,siteName,language);
}",0.976462676529926
102741,"/** 
 * Edit generic property of document.
 * @param propertyName property that need to edit
 * @param newValue the new 'requested property' of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 * @throws Exception the exception
 */
public Response modifyProperty(String propertyName,String newValue,String repositoryName,String workspaceName,String nodeUIID,String siteName,String language){
  ResourceBundle resourceBundle=null;
  String messageKey=""String_Node_Str"";
  String message=""String_Node_Str"";
  Document document=null;
  Element localeMsg=null;
  try {
    Locale locale=new Locale(language);
    ResourceBundleService resourceBundleService=WCMCoreUtils.getService(ResourceBundleService.class);
    resourceBundle=resourceBundleService.getResourceBundle(localeFile,locale);
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  CacheControl cacheControl=new CacheControl();
  cacheControl.setNoCache(true);
  cacheControl.setNoStore(true);
  try {
    SessionProvider sessionProvider=WCMCoreUtils.getUserSessionProvider();
    RepositoryService repositoryService=WCMCoreUtils.getService(RepositoryService.class);
    ManageableRepository manageableRepository=repositoryService.getCurrentRepository();
    Session session=sessionProvider.getSession(workspaceName,manageableRepository);
    try {
      localeMsg=document.createElement(""String_Node_Str"");
      Node node=session.getNodeByUUID(nodeUIID);
      node=(Node)session.getItem(node.getPath());
      if (canSetProperty(node)) {
        if (!sameValue(newValue,node,propertyName)) {
          if (newValue.length() > 0) {
            newValue=Text.unescapeIllegalJcrChars(newValue.trim());
            PortalContainerInfo containerInfo=WCMCoreUtils.getService(PortalContainerInfo.class);
            String containerName=containerInfo.getContainerName();
            ListenerService listenerService=WCMCoreUtils.getService(ListenerService.class,containerName);
            if (propertyName.equals(EXO_TITLE)) {
              if (!node.hasProperty(EXO_TITLE))               node.addMixin(EXO_RSS_ENABLE);
            }
            if (!propertyName.contains(""String_Node_Str"")) {
              if (node.hasProperty(propertyName) && node.getProperty(propertyName).getDefinition().isMultiple()) {
                Value[] currentValue=node.getProperty(propertyName).getValues();
                if (currentValue == null)                 currentValue=new Value[1];
                currentValue[0]=session.getValueFactory().createValue(newValue);
                node.setProperty(propertyName,currentValue);
              }
 else {
                node.setProperty(propertyName,newValue);
              }
            }
 else {
              int iSlash=propertyName.lastIndexOf(""String_Node_Str"");
              String subnodePath=propertyName.substring(0,iSlash);
              String subnodeProperty=propertyName.substring(iSlash + 1);
              Node subnode=node.getNode(subnodePath);
              if (subnode.hasProperty(subnodeProperty) && subnode.getProperty(subnodeProperty).getDefinition().isMultiple()) {
                Value[] currentValue=subnode.getProperty(subnodeProperty).getValues();
                if (currentValue == null)                 currentValue=new Value[1];
                currentValue[0]=session.getValueFactory().createValue(newValue);
                subnode.setProperty(subnodeProperty,currentValue);
              }
 else {
                subnode.setProperty(subnodeProperty,newValue);
              }
            }
            ConversationState conversationState=ConversationState.getCurrent();
            conversationState.setAttribute(""String_Node_Str"",siteName);
            listenerService.broadcast(POST_EDIT_CONTENT_EVENT,null,node);
            session.save();
          }
        }
      }
 else {
        messageKey=""String_Node_Str"";
        message=resourceBundle.getString(messageKey);
        localeMsg.setAttribute(""String_Node_Str"",message);
        document.appendChild(localeMsg);
        return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
      }
    }
 catch (    AccessDeniedException ace) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",ace);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
catch (    FileNotFoundException fie) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",fie);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
catch (    LockException lockex) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",lockex);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
  }
 catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    messageKey=""String_Node_Str"";
    message=resourceBundle.getString(messageKey);
    localeMsg.setAttribute(""String_Node_Str"",message);
    document.appendChild(localeMsg);
    return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
  }
  localeMsg.setAttribute(""String_Node_Str"",""String_Node_Str"");
  document.appendChild(localeMsg);
  return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
}","/** 
 * Edit generic property of document.
 * @param propertyName property that need to edit
 * @param newValue the new 'requested property' of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 */
public Response modifyProperty(String propertyName,String newValue,String repositoryName,String workspaceName,String nodeUIID,String siteName,String language){
  ResourceBundle resourceBundle=null;
  String messageKey=""String_Node_Str"";
  String message=""String_Node_Str"";
  Document document=null;
  Element localeMsg=null;
  try {
    Locale locale=new Locale(language);
    ResourceBundleService resourceBundleService=WCMCoreUtils.getService(ResourceBundleService.class);
    resourceBundle=resourceBundleService.getResourceBundle(localeFile,locale);
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  CacheControl cacheControl=new CacheControl();
  cacheControl.setNoCache(true);
  cacheControl.setNoStore(true);
  try {
    SessionProvider sessionProvider=WCMCoreUtils.getUserSessionProvider();
    RepositoryService repositoryService=WCMCoreUtils.getService(RepositoryService.class);
    ManageableRepository manageableRepository=repositoryService.getCurrentRepository();
    Session session=sessionProvider.getSession(workspaceName,manageableRepository);
    try {
      localeMsg=document.createElement(""String_Node_Str"");
      Node node=session.getNodeByUUID(nodeUIID);
      node=(Node)session.getItem(node.getPath());
      if (canSetProperty(node)) {
        if (!sameValue(newValue,node,propertyName)) {
          if (newValue.length() > 0) {
            newValue=Text.unescapeIllegalJcrChars(newValue.trim());
            PortalContainerInfo containerInfo=WCMCoreUtils.getService(PortalContainerInfo.class);
            String containerName=containerInfo.getContainerName();
            ListenerService listenerService=WCMCoreUtils.getService(ListenerService.class,containerName);
            if (propertyName.equals(EXO_TITLE)) {
              if (!node.hasProperty(EXO_TITLE))               node.addMixin(EXO_RSS_ENABLE);
            }
            if (!propertyName.contains(""String_Node_Str"")) {
              if (node.hasProperty(propertyName) && node.getProperty(propertyName).getDefinition().isMultiple()) {
                Value[] currentValue=node.getProperty(propertyName).getValues();
                if (currentValue == null)                 currentValue=new Value[1];
                currentValue[0]=session.getValueFactory().createValue(newValue);
                node.setProperty(propertyName,currentValue);
              }
 else {
                node.setProperty(propertyName,newValue);
              }
            }
 else {
              int iSlash=propertyName.lastIndexOf(""String_Node_Str"");
              String subnodePath=propertyName.substring(0,iSlash);
              String subnodeProperty=propertyName.substring(iSlash + 1);
              Node subnode=node.getNode(subnodePath);
              if (subnode.hasProperty(subnodeProperty) && subnode.getProperty(subnodeProperty).getDefinition().isMultiple()) {
                Value[] currentValue=subnode.getProperty(subnodeProperty).getValues();
                if (currentValue == null)                 currentValue=new Value[1];
                currentValue[0]=session.getValueFactory().createValue(newValue);
                subnode.setProperty(subnodeProperty,currentValue);
              }
 else {
                subnode.setProperty(subnodeProperty,newValue);
              }
            }
            ConversationState conversationState=ConversationState.getCurrent();
            conversationState.setAttribute(""String_Node_Str"",siteName);
            listenerService.broadcast(POST_EDIT_CONTENT_EVENT,null,node);
            session.save();
          }
        }
      }
 else {
        messageKey=""String_Node_Str"";
        message=resourceBundle.getString(messageKey);
        localeMsg.setAttribute(""String_Node_Str"",message);
        document.appendChild(localeMsg);
        return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
      }
    }
 catch (    AccessDeniedException ace) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",ace);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
catch (    FileNotFoundException fie) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",fie);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
catch (    LockException lockex) {
      if (LOG.isErrorEnabled()) {
        LOG.error(""String_Node_Str"",lockex);
      }
      messageKey=""String_Node_Str"";
      message=resourceBundle.getString(messageKey);
      localeMsg.setAttribute(""String_Node_Str"",message);
      document.appendChild(localeMsg);
      return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
    }
  }
 catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
    messageKey=""String_Node_Str"";
    message=resourceBundle.getString(messageKey);
    localeMsg.setAttribute(""String_Node_Str"",message);
    document.appendChild(localeMsg);
    return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
  }
  localeMsg.setAttribute(""String_Node_Str"",""String_Node_Str"");
  document.appendChild(localeMsg);
  return Response.ok(new DOMSource(document),MediaType.TEXT_XML).cacheControl(cacheControl).build();
}",0.9972464794272676
102742,"/** 
 * SERVICE: Edit summary of document.
 * @param newSummary the new summary of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 * @throws Exception the exception
 */
@POST @Path(""String_Node_Str"") public Response editSummary(@FormParam(""String_Node_Str"") String newSummary,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_SUMMARY,newSummary,repositoryName,workspaceName,nodeUIID,siteName,language);
}","/** 
 * SERVICE: Edit summary of document.
 * @param newSummary the new summary of document
 * @param repositoryName the repository name
 * @param workspaceName the workspace name
 * @param nodeUIID the UIID of node
 * @param siteName the site name
 * @return the response
 */
@POST @Path(""String_Node_Str"") public Response editSummary(@FormParam(""String_Node_Str"") String newSummary,@QueryParam(""String_Node_Str"") String repositoryName,@QueryParam(""String_Node_Str"") String workspaceName,@QueryParam(""String_Node_Str"") String nodeUIID,@QueryParam(""String_Node_Str"") String siteName,@QueryParam(""String_Node_Str"") String language){
  return modifyProperty(EXO_SUMMARY,newSummary,repositoryName,workspaceName,nodeUIID,siteName,language);
}",0.9768365320979484
102743,"/** 
 * Gets the list of public tags of a given document.
 * @param jcrPath The path of the document, e.g. /portal/collaboration/test/document1, in which ""portal"" is the repository, ""collaboration"" is the workspace.
 * @request GET: http://localhost:8080/rest/private/contents/tag/public?jcrPath=/portal/collaboration/test/document1
 * @format XML
 * @response The tag names in XML format.<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no"" ?> <tags> <tag name=""gold"" /> <tag name=""silver"" /> </tags>
 * @anchor TagConnector.getPublicTags
 */
@GET @Path(""String_Node_Str"") public Response getPublicTags(@QueryParam(""String_Node_Str"") String jcrPath) throws Exception {
  if (jcrPath.contains(""String_Node_Str""))   jcrPath=URLDecoder.decode(jcrPath,""String_Node_Str"");
  String[] path=jcrPath.split(""String_Node_Str"");
  String repositoryName=path[1];
  String workspaceName=path[2];
  jcrPath=jcrPath.substring(repositoryName.length() + workspaceName.length() + 2);
  if (jcrPath.charAt(1) == '/')   jcrPath.substring(1);
  try {
    Node content=getContent(workspaceName,jcrPath,null,false);
    List<Node> tags=tagService.getLinkedTagsOfDocumentByScope(NewFolksonomyService.PUBLIC,""String_Node_Str"",content,workspaceName);
    Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    Element tagsElt=document.createElement(""String_Node_Str"");
    for (    Node tag : tags) {
      Element element=document.createElement(""String_Node_Str"");
      element.setAttribute(""String_Node_Str"",tag.getName());
      tagsElt.appendChild(element);
    }
    document.appendChild(tagsElt);
    DateFormat dateFormat=new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
    return Response.ok(new DOMSource(document),MediaType.TEXT_XML).header(LAST_MODIFIED_PROPERTY,dateFormat.format(new Date())).build();
  }
 catch (  Exception e) {
    Response.serverError().build();
  }
  DateFormat dateFormat=new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
  return Response.ok().header(LAST_MODIFIED_PROPERTY,dateFormat.format(new Date())).build();
}","/** 
 * Gets the list of public tags of a given document.
 * @param jcrPath The path of the document, e.g. /portal/collaboration/test/document1, in which ""portal"" is the repository, ""collaboration"" is the workspace.
 * @request GET: http://localhost:8080/rest/private/contents/tag/public?jcrPath=/portal/collaboration/test/document1
 * @format XML
 * @response The tag names in XML format.{@code <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no"" ?> <tags> <tag name=""gold"" /> <tag name=""silver"" /> </tags>}
 * @anchor TagConnector.getPublicTags
 */
@GET @Path(""String_Node_Str"") public Response getPublicTags(@QueryParam(""String_Node_Str"") String jcrPath) throws Exception {
  if (jcrPath.contains(""String_Node_Str""))   jcrPath=URLDecoder.decode(jcrPath,""String_Node_Str"");
  String[] path=jcrPath.split(""String_Node_Str"");
  String repositoryName=path[1];
  String workspaceName=path[2];
  jcrPath=jcrPath.substring(repositoryName.length() + workspaceName.length() + 2);
  if (jcrPath.charAt(1) == '/')   jcrPath.substring(1);
  try {
    Node content=getContent(workspaceName,jcrPath,null,false);
    List<Node> tags=tagService.getLinkedTagsOfDocumentByScope(NewFolksonomyService.PUBLIC,""String_Node_Str"",content,workspaceName);
    Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    Element tagsElt=document.createElement(""String_Node_Str"");
    for (    Node tag : tags) {
      Element element=document.createElement(""String_Node_Str"");
      element.setAttribute(""String_Node_Str"",tag.getName());
      tagsElt.appendChild(element);
    }
    document.appendChild(tagsElt);
    DateFormat dateFormat=new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
    return Response.ok(new DOMSource(document),MediaType.TEXT_XML).header(LAST_MODIFIED_PROPERTY,dateFormat.format(new Date())).build();
  }
 catch (  Exception e) {
    Response.serverError().build();
  }
  DateFormat dateFormat=new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
  return Response.ok().header(LAST_MODIFIED_PROPERTY,dateFormat.format(new Date())).build();
}",0.998075998075998
102744,"/** 
 * Checks if is dMS document.(not including free layout webcontent & media & article)
 * @param node the node
 * @return true, if is dMS document
 * @throws Exception the exception
 */
private boolean isDMSDocument(Node node) throws Exception {
  TemplateService templateService=WCMCoreUtils.getService(TemplateService.class);
  List<String> dmsDocumentListTmp=templateService.getDocumentTemplates();
  List<String> dmsDocumentList=new ArrayList<String>();
  dmsDocumentList.addAll(dmsDocumentListTmp);
  dmsDocumentList.remove(NodetypeConstant.EXO_WEBCONTENT);
  for (  String documentType : dmsDocumentList) {
    if (node.getPrimaryNodeType().isNodeType(documentType) && !isMediaType(node) && !node.isNodeType(NodetypeConstant.EXO_WEBCONTENT)) {
      return true;
    }
  }
  return false;
}","/** 
 * Checks if is dMS document.(not including free layout webcontent and media and article)
 * @param node the node
 * @return true, if is dMS document
 * @throws Exception the exception
 */
private boolean isDMSDocument(Node node) throws Exception {
  TemplateService templateService=WCMCoreUtils.getService(TemplateService.class);
  List<String> dmsDocumentListTmp=templateService.getDocumentTemplates();
  List<String> dmsDocumentList=new ArrayList<String>();
  dmsDocumentList.addAll(dmsDocumentListTmp);
  dmsDocumentList.remove(NodetypeConstant.EXO_WEBCONTENT);
  for (  String documentType : dmsDocumentList) {
    if (node.getPrimaryNodeType().isNodeType(documentType) && !isMediaType(node) && !node.isNodeType(NodetypeConstant.EXO_WEBCONTENT)) {
      return true;
    }
  }
  return false;
}",0.986284289276808
102745,"/** 
 * Sets the page node.
 * @param pageNode the new page node
 */
public void setUserNode(UserNode userNode){
  this.userNode=userNode;
  if (userNode.getChildren() == null) {
    children=null;
  }
}","/** 
 * Sets the page node.
 * @param userNode the new user node
 */
public void setUserNode(UserNode userNode){
  this.userNode=userNode;
  if (userNode.getChildren() == null) {
    children=null;
  }
}",0.9605911330049262
102746,"/** 
 * Sets the children by page nodes.
 * @param pagesNodes the new children by page nodes
 * @throws Exception the exception
 */
public void setChildrenByUserNodes(Collection<UserNode> userNodes) throws Exception {
  if (userNodes == null)   return;
  List<TreeNode> list=new ArrayList<TreeNode>();
  UserPortalConfigService userPortalConfigService=WCMCoreUtils.getService(UserPortalConfigService.class);
  for (  UserNode pNode : userNodes) {
    if (pNode.getPageRef() == null)     continue;
    PageContext page=userPortalConfigService.getPage(pNode.getPageRef());
    if (page == null)     continue;
    TreeNode treeNode=new TreeNode(portalName,navigation,resourceBundle,true);
    treeNode.setUserNode(pNode);
    treeNode.setChildrenByUserNodes(pNode.getChildren());
    list.add(treeNode);
  }
  setTreeNodeChildren(list);
}","/** 
 * Sets the children by page nodes.
 * @param userNodes the new children by user nodes
 * @throws Exception the exception
 */
public void setChildrenByUserNodes(Collection<UserNode> userNodes) throws Exception {
  if (userNodes == null)   return;
  List<TreeNode> list=new ArrayList<TreeNode>();
  UserPortalConfigService userPortalConfigService=WCMCoreUtils.getService(UserPortalConfigService.class);
  for (  UserNode pNode : userNodes) {
    if (pNode.getPageRef() == null)     continue;
    PageContext page=userPortalConfigService.getPage(pNode.getPageRef());
    if (page == null)     continue;
    TreeNode treeNode=new TreeNode(portalName,navigation,resourceBundle,true);
    treeNode.setUserNode(pNode);
    treeNode.setChildrenByUserNodes(pNode.getChildren());
    list.add(treeNode);
  }
  setTreeNodeChildren(list);
}",0.9898142600359496
102747,"/** 
 * Instantiates a new tree node.
 * @param portalName the portal name
 * @param navigation the navigation
 * @param res the res
 * @param isPageNode the is page node
 */
public TreeNode(String portalName,final UserNavigation navigation,final ResourceBundle res,boolean isUserNode){
  this.portalName=portalName;
  this.navigation=navigation;
  this.resourceBundle=res;
  this.isUserNode=isUserNode;
}","/** 
 * Instantiates a new tree node.
 * @param portalName the portal name
 * @param navigation the navigation
 * @param res the res
 * @param isUserNode the is user node
 */
public TreeNode(String portalName,final UserNavigation navigation,final ResourceBundle res,boolean isUserNode){
  this.portalName=portalName;
  this.navigation=navigation;
  this.resourceBundle=res;
  this.isUserNode=isUserNode;
}",0.9506172839506172
102748,"public boolean createPowerPointDocument(String content,String fileName){
  try {
    SlideShow ppt=new SlideShow();
    Slide s1=ppt.createSlide();
    TextBox txt=new TextBox();
    txt.setText(content);
    s1.addShape(txt);
    FileOutputStream out=new FileOutputStream(fileName);
    ppt.write(out);
    out.close();
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}","public boolean createPowerPointDocument(String content,String fileName){
  try {
    SlideShow ppt=new HSLFSlideShow();
    Slide s1=ppt.createSlide();
    HSLFTextBox txt=new HSLFTextBox();
    txt.setText(content);
    s1.addShape(txt);
    FileOutputStream out=new FileOutputStream(fileName);
    ppt.write(out);
    out.close();
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}",0.9848866498740554
102749,"@Test public void whenAppendToFileUsingFileWriter_thenCorrect() throws IOException {
  String fileName=""String_Node_Str"";
  FileWriter fw=new FileWriter(fileName,true);
  BufferedWriter bw=new BufferedWriter(fw);
  bw.write(""String_Node_Str"");
  bw.newLine();
  bw.close();
  assertThat(StreamUtils.getStringFromInputStream(new FileInputStream(fileName))).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void whenAppendToFileUsingFileWriter_thenCorrect() throws IOException {
  FileWriter fw=new FileWriter(fileName,true);
  BufferedWriter bw=new BufferedWriter(fw);
  bw.write(""String_Node_Str"");
  bw.newLine();
  bw.close();
  assertThat(StreamUtils.getStringFromInputStream(new FileInputStream(fileName))).isEqualTo(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}",0.9567251461988304
102750,"@Test @Ignore public void givenConnection_thenFetchDbData(){
  List<Employee> employees=HikariCPDemo.fetchData();
  assertEquals(4,employees.size());
}","@Test @Ignore public void givenConnection_thenFetchDbData() throws SQLException {
  List<Employee> employees=HikariCPDemo.fetchData();
  assertEquals(4,employees.size());
}",0.934984520123839
102751,"public void serialize(Distance distance,JsonGenerator generator,SerializerProvider provider) throws IOException, JsonProcessingException {
  generator.writeStartObject();
  generator.writeFieldName(""String_Node_Str"");
  generator.writeNumber(distance.name());
  generator.writeFieldName(""String_Node_Str"");
  generator.writeString(distance.getUnit());
  generator.writeFieldName(""String_Node_Str"");
  generator.writeNumber(distance.getMeters());
  generator.writeEndObject();
}","public void serialize(Distance distance,JsonGenerator generator,SerializerProvider provider) throws IOException, JsonProcessingException {
  generator.writeStartObject();
  generator.writeFieldName(""String_Node_Str"");
  generator.writeString(distance.name());
  generator.writeFieldName(""String_Node_Str"");
  generator.writeString(distance.getUnit());
  generator.writeFieldName(""String_Node_Str"");
  generator.writeNumber(distance.getMeters());
  generator.writeEndObject();
}",0.6205450733752621
102752,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int decision=in.nextInt();
switch (decision) {
case 1:
    System.out.println(""String_Node_Str"" + SimulatedAnnealing.simulateAnnealing(10,10000,0.9995));
  break;
case 2:
SlopeOne.slopeOne(3);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
in.close();
}","public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int decision=in.nextInt();
switch (decision) {
case 1:
    System.out.println(""String_Node_Str"" + SimulatedAnnealing.simulateAnnealing(10,10000,0.9995));
  break;
case 2:
SlopeOne.slopeOne(3);
break;
case 3:
SimpleGeneticAlgorithm.runAlgorithm(50,""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"");
break;
}
in.close();
}",0.8916116870876531
102753,"@Test public void givenSrcAndDestWithDifferentFieldTypes_whenAbleToCustomConvert_thenCorrect(){
  String dateTime=""String_Node_Str"";
  long timestamp=new Long(""String_Node_Str"");
  Person3 person=new Person3(""String_Node_Str"",dateTime);
  mapper.setMappingFiles(Arrays.asList(new String[]{""String_Node_Str""}));
  Personne3 person0=mapper.map(person,Personne3.class);
  assertEquals(timestamp,person0.getDtob());
}","@Test public void givenSrcAndDestWithDifferentFieldTypes_whenAbleToCustomConvert_thenCorrect(){
  String dateTime=""String_Node_Str"";
  long timestamp=new Long(""String_Node_Str"");
  Person3 person=new Person3(""String_Node_Str"",dateTime);
  mapper.setMappingFiles(Arrays.asList(new String[]{""String_Node_Str""}));
  Personne3 person0=mapper.map(person,Personne3.class);
  long timestampToTest=person0.getDtob();
  assertTrue(timestampToTest == timestamp || timestampToTest >= timestamp - GMT_DIFFERENCE || timestampToTest <= timestamp + GMT_DIFFERENCE);
}",0.8082901554404145
102754,"@Test public void givenSrcAndDestWithDifferentFieldTypes_whenAbleToCustomConvertBidirectionally_thenCorrect(){
  String dateTime=""String_Node_Str"";
  long timestamp=new Long(""String_Node_Str"");
  Personne3 person=new Personne3(""String_Node_Str"",timestamp);
  mapper.setMappingFiles(Arrays.asList(new String[]{""String_Node_Str""}));
  Person3 person0=mapper.map(person,Person3.class);
  assertEquals(dateTime,person0.getDtob());
}","@Test public void givenSrcAndDestWithDifferentFieldTypes_whenAbleToCustomConvertBidirectionally_thenCorrect(){
  String dateTime=""String_Node_Str"";
  long timestamp=new Long(""String_Node_Str"");
  Personne3 person=new Personne3(""String_Node_Str"",timestamp);
  mapper.setMappingFiles(Arrays.asList(new String[]{""String_Node_Str""}));
  Person3 person0=mapper.map(person,Person3.class);
  String timestampTest=person0.getDtob();
  assertTrue(timestampTest.charAt(10) == 'T' && timestampTest.charAt(19) == 'Z');
}",0.8354700854700855
102755,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102756,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102757,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102758,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102759,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102760,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102761,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102762,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102763,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102764,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102765,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102766,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102767,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102768,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102769,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102770,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102771,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102772,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102773,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102774,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102775,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102776,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102777,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102778,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102779,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102780,"@Override public int hashCode(){
  int result=imdbID != null ? imdbID.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=imdbId != null ? imdbId.hashCode() : 0;
  result=31 * result + (title != null ? title.hashCode() : 0);
  return result;
}",0.9880239520958084
102781,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbID != null ? !imdbID.equals(movie.imdbID) : movie.imdbID != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Movie movie=(Movie)o;
  if (imdbId != null ? !imdbId.equals(movie.imdbId) : movie.imdbId != null)   return false;
  return title != null ? title.equals(movie.title) : movie.title == null;
}",0.9878419452887538
102782,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbID+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + actors + '\''+ ""String_Node_Str""+ awards+ '\''+ ""String_Node_Str""+ country+ '\''+ ""String_Node_Str""+ director+ '\''+ ""String_Node_Str""+ genre+ '\''+ ""String_Node_Str""+ imdbId+ '\''+ ""String_Node_Str""+ imdbRating+ '\''+ ""String_Node_Str""+ imdbVotes+ '\''+ ""String_Node_Str""+ language+ '\''+ ""String_Node_Str""+ metascore+ '\''+ ""String_Node_Str""+ poster+ '\''+ ""String_Node_Str""+ rated+ '\''+ ""String_Node_Str""+ released+ '\''+ ""String_Node_Str""+ response+ '\''+ ""String_Node_Str""+ runtime+ '\''+ ""String_Node_Str""+ title+ '\''+ ""String_Node_Str""+ type+ '\''+ ""String_Node_Str""+ writer+ '\''+ ""String_Node_Str""+ year+ '\''+ '}';
}",0.9985974754558204
102783,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.OK).build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response updateMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null == inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.OK).build();
}",0.995260663507109
102784,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbID())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbID(),movie);
  return Response.status(Response.Status.CREATED).build();
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response addMovie(Movie movie){
  System.out.println(""String_Node_Str"");
  if (null != inventory.get(movie.getImdbId())) {
    return Response.status(Response.Status.NOT_MODIFIED).entity(""String_Node_Str"").build();
  }
  inventory.put(movie.getImdbId(),movie);
  return Response.status(Response.Status.CREATED).build();
}",0.9952941176470588
102785,"/** 
 * Recupera il valore della propriet� imdbRating.
 * @return possible object is {@link String }
 */
public String getImdbRating(){
  return imdbRating;
}","public String getImdbRating(){
  return imdbRating;
}",0.5023696682464455
102786,"/** 
 * Imposta il valore della propriet� released.
 * @param value allowed object is {@link String }
 */
public void setReleased(String value){
  this.released=value;
}","public void setReleased(String value){
  this.released=value;
}",0.5431034482758621
102787,"/** 
 * Imposta il valore della propriet� response.
 * @param value allowed object is {@link String }
 */
public void setResponse(String value){
  this.response=value;
}","public void setResponse(String value){
  this.response=value;
}",0.5431034482758621
102788,"/** 
 * Recupera il valore della propriet� poster.
 * @return possible object is {@link String }
 */
public String getPoster(){
  return poster;
}","public String getPoster(){
  return poster;
}",0.4712041884816754
102789,"/** 
 * Recupera il valore della propriet� released.
 * @return possible object is {@link String }
 */
public String getReleased(){
  return released;
}","public String getReleased(){
  return released;
}",0.4875621890547263
102790,"/** 
 * Recupera il valore della propriet� title.
 * @return possible object is {@link String }
 */
public String getTitle(){
  return title;
}","public String getTitle(){
  return title;
}",0.4623655913978494
102791,"/** 
 * Recupera il valore della propriet� plot.
 * @return possible object is {@link String }
 */
public String getPlot(){
  return plot;
}","public String getPlot(){
  return plot;
}",0.4530386740331492
102792,"/** 
 * Imposta il valore della propriet� imdbRating.
 * @param value allowed object is {@link String }
 */
public void setImdbRating(String value){
  this.imdbRating=value;
}","public void setImdbRating(String value){
  this.imdbRating=value;
}",0.5537190082644629
102793,"/** 
 * Recupera il valore della propriet� runtime.
 * @return possible object is {@link String }
 */
public String getRuntime(){
  return runtime;
}","public String getRuntime(){
  return runtime;
}",0.4795918367346938
102794,"/** 
 * Recupera il valore della propriet� rated.
 * @return possible object is {@link String }
 */
public String getRated(){
  return rated;
}","public String getRated(){
  return rated;
}",0.4623655913978494
102795,"/** 
 * Recupera il valore della propriet� imdbId.
 * @return possible object is {@link String }
 */
public String getImdbId(){
  return imdbId;
}","public String getImdbId(){
  return imdbId;
}",0.4712041884816754
102796,"/** 
 * Imposta il valore della propriet� writer.
 * @param value allowed object is {@link String }
 */
public void setWriter(String value){
  this.writer=value;
}","public void setWriter(String value){
  this.writer=value;
}",0.5315315315315315
102797,"/** 
 * Imposta il valore della propriet� imdbVotes.
 * @param value allowed object is {@link String }
 */
public String getLanguage(){
  return language;
}","public String getLanguage(){
  return language;
}",0.4780487804878048
102798,"/** 
 * Imposta il valore della propriet� rated.
 * @param value allowed object is {@link String }
 */
public void setRated(String value){
  this.rated=value;
}","public void setRated(String value){
  this.rated=value;
}",0.5253456221198156
102799,"/** 
 * Recupera il valore della propriet� response.
 * @return possible object is {@link String }
 */
public String getResponse(){
  return response;
}","public String getResponse(){
  return response;
}",0.4875621890547263
102800,"/** 
 * Imposta il valore della propriet� runtime.
 * @param value allowed object is {@link String }
 */
public void setRuntime(String value){
  this.runtime=value;
}","public void setRuntime(String value){
  this.runtime=value;
}",0.5374449339207048
102801,"/** 
 * Recupera il valore della propriet� imdbVotes.
 * @return possible object is {@link String }
 */
public String getImdbVotes(){
  return imdbVotes;
}","public String getImdbVotes(){
  return imdbVotes;
}",0.4951456310679611
102802,"/** 
 * Imposta il valore della propriet� title.
 * @param value allowed object is {@link String }
 */
public void setTitle(String value){
  this.title=value;
}","public void setTitle(String value){
  this.title=value;
}",0.5253456221198156
102803,"/** 
 * Imposta il valore della propriet� type.
 * @param value allowed object is {@link String }
 */
public void setType(String value){
  this.type=value;
}","public void setType(String value){
  this.type=value;
}",0.5188679245283019
102804,"/** 
 * Imposta il valore della propriet� plot.
 * @param value allowed object is {@link String }
 */
public void setPlot(String value){
  this.plot=value;
}","public void setPlot(String value){
  this.plot=value;
}",0.5188679245283019
102805,"/** 
 * Imposta il valore della propriet� year.
 * @param value allowed object is {@link String }
 */
public void setYear(String value){
  this.year=value;
}","public void setYear(String value){
  this.year=value;
}",0.5188679245283019
102806,"/** 
 * Imposta il valore della propriet� poster.
 * @param value allowed object is {@link String }
 */
public void setPoster(String value){
  this.poster=value;
}","public void setPoster(String value){
  this.poster=value;
}",0.5315315315315315
102807,"/** 
 * Recupera il valore della propriet� metascore.
 * @return possible object is {@link String }
 */
public String getMetascore(){
  return metascore;
}","public String getMetascore(){
  return metascore;
}",0.4951456310679611
102808,"/** 
 * Recupera il valore della propriet� year.
 * @return possible object is {@link String }
 */
public String getYear(){
  return year;
}","public String getYear(){
  return year;
}",0.4530386740331492
102809,"/** 
 * Recupera il valore della propriet� type.
 * @return possible object is {@link String }
 */
public String getType(){
  return type;
}","public String getType(){
  return type;
}",0.4530386740331492
102810,"/** 
 * Recupera il valore della propriet� writer.
 * @return possible object is {@link String }
 */
public String getWriter(){
  return writer;
}","public String getWriter(){
  return writer;
}",0.4712041884816754
102811,"/** 
 * Imposta il valore della propriet� imdbId.
 * @param value allowed object is {@link String }
 */
public void setImdbId(String value){
  this.imdbId=value;
}","public void setImdbId(String value){
  this.imdbId=value;
}",0.5315315315315315
102812,"/** 
 * Imposta il valore della propriet� metascore.
 * @param value allowed object is {@link String }
 */
public void setMetascore(String value){
  this.metascore=value;
}","public void setMetascore(String value){
  this.metascore=value;
}",0.5485232067510548
102813,"/** 
 * Imposta il valore della propriet� language.
 * @param value allowed object is {@link String }
 */
public void setLanguage(String value){
  this.language=value;
}","public void setLanguage(String value){
  this.language=value;
}",0.5431034482758621
102814,"@Override protected void configure(final HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}","@Override protected void configure(final HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).failureHandler(authenticationFailureHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}",0.9794614331355546
102815,"@Override protected void configure(final HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}","@Override protected void configure(final HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).failureHandler(authenticationFailureHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}",0.9794614331355546
102816,"public Integer getYearOfBirth(){
  return Calendar.getInstance().get(Calendar.YEAR) - age;
}","public Integer getYearOfBirth(){
  return yearOfBirth;
}",0.6621621621621622
102817,"@Test public void whenSavingUser_thenYearOfBirthIsCalculated(){
  final User user=new User();
  user.setName(""String_Node_Str"");
  mongoTemplate.insert(user);
  assertThat(mongoTemplate.findOne(Query.query(Criteria.where(""String_Node_Str"").is(""String_Node_Str"")),User.class).getYearOfBirth(),is(2015));
}","@Test public void whenSavingUser_thenYearOfBirthIsCalculated(){
  final User user=new User();
  user.setName(""String_Node_Str"");
  user.setYearOfBirth(1985);
  mongoTemplate.insert(user);
  assertThat(user.getYearOfBirth(),is(1985));
}",0.6753246753246753
102818,"@Bean public DaoAuthenticationProvider authProvider(){
  DaoAuthenticationProvider authProvider=new DaoAuthenticationProvider();
  authProvider.setUserDetailsService(userDetailsService);
  authProvider.setPasswordEncoder(encoder());
  return authProvider;
}","@Bean public DaoAuthenticationProvider authProvider(){
  final DaoAuthenticationProvider authProvider=new DaoAuthenticationProvider();
  authProvider.setUserDetailsService(userDetailsService);
  authProvider.setPasswordEncoder(encoder());
  return authProvider;
}",0.9884615384615384
102819,"@Override protected void configure(HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}","@Override protected void configure(final HttpSecurity http) throws Exception {
  http.csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").anonymous().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").loginProcessingUrl(""String_Node_Str"").defaultSuccessUrl(""String_Node_Str"").failureUrl(""String_Node_Str"").successHandler(myAuthenticationSuccessHandler).usernameParameter(""String_Node_Str"").passwordParameter(""String_Node_Str"").permitAll().and().sessionManagement().invalidSessionUrl(""String_Node_Str"").sessionFixation().none().and().logout().invalidateHttpSession(false).logoutUrl(""String_Node_Str"").logoutSuccessUrl(""String_Node_Str"").deleteCookies(""String_Node_Str"").permitAll();
}",0.9886899151743638
102820,"private final void addUser(final String name,final OAuth2AccessToken token){
  User user=userReopsitory.findByUsername(name);
  if (user == null) {
    user=new User();
    user.setUsername(name);
    user.setAccessToken(token.getValue());
    user.setRefreshToken(token.getRefreshToken().getValue());
    user.setTokenExpiration(token.getExpiration());
  }
  final String needsCaptchaResult=needsCaptcha();
  if (needsCaptchaResult.equalsIgnoreCase(""String_Node_Str"")) {
    user.setNeedCaptcha(true);
  }
 else {
    user.setNeedCaptcha(false);
  }
  userReopsitory.save(user);
}","private final void addUser(final String name,final OAuth2AccessToken token){
  User user=userReopsitory.findByUsername(name);
  if (user == null) {
    user=new User();
    user.setUsername(name);
    user.setAccessToken(token.getValue());
    user.setRefreshToken(token.getRefreshToken().getValue());
    user.setTokenExpiration(token.getExpiration());
  }
  final String needsCaptchaResult=needsCaptcha();
  if (needsCaptchaResult.equalsIgnoreCase(""String_Node_Str"")) {
    user.setNeedCaptcha(true);
  }
 else {
    user.setNeedCaptcha(false);
  }
  user.setAccessToken(token.getValue());
  user.setRefreshToken(token.getRefreshToken().getValue());
  userReopsitory.save(user);
}",0.9200316706254948
102821,"@ExceptionHandler({Exception.class}) public ResponseEntity<Object> handleInternal(final RuntimeException ex,final WebRequest request,final HttpServletResponse response){
  logger.info(response.getHeader(""String_Node_Str""));
  logger.error(""String_Node_Str"",ex);
  final String message=""String_Node_Str"" + ex.getMessage();
  return handleExceptionInternal(ex,message,new HttpHeaders(),HttpStatus.INTERNAL_SERVER_ERROR,request);
}","@ExceptionHandler({Exception.class}) public ModelAndView handleInternal(final RuntimeException ex,final WebRequest request,final HttpServletResponse response){
  logger.info(response.getHeader(""String_Node_Str""));
  logger.error(""String_Node_Str"",ex);
  final String message=""String_Node_Str"" + ex.getLocalizedMessage();
  final ModelAndView model=new ModelAndView(""String_Node_Str"");
  model.addObject(""String_Node_Str"",message);
  return model;
}",0.1301369863013698
102822,"@ExceptionHandler({OAuth2AccessDeniedException.class}) public ResponseEntity<Object> handleOAuth2AccessDeniedException(final OAuth2AccessDeniedException ex,final WebRequest request){
  logger.error(""String_Node_Str"",ex);
  final String response=""String_Node_Str"" + ex.getMessage();
  return handleExceptionInternal(ex,response,new HttpHeaders(),HttpStatus.FORBIDDEN,request);
}","@ExceptionHandler({OAuth2AccessDeniedException.class}) public ModelAndView handleOAuth2AccessDeniedException(final OAuth2AccessDeniedException ex,final WebRequest request){
  logger.error(""String_Node_Str"",ex);
  final String response=""String_Node_Str"" + ex.getMessage();
  final ModelAndView model=new ModelAndView(""String_Node_Str"");
  model.addObject(""String_Node_Str"",response);
  return model;
}",0.2033462033462033
102823,"@ExceptionHandler({HttpClientErrorException.class}) public ResponseEntity<Object> handleHttpClientErrorException(final HttpClientErrorException ex,final WebRequest request){
  logger.error(""String_Node_Str"",ex);
  final String response=""String_Node_Str"" + ex.getMessage();
  return handleExceptionInternal(ex,response,new HttpHeaders(),HttpStatus.TOO_MANY_REQUESTS,request);
}","@ExceptionHandler({HttpClientErrorException.class}) public ModelAndView handleHttpClientErrorException(final HttpClientErrorException ex,final WebRequest request){
  logger.error(""String_Node_Str"",ex);
  final String response=""String_Node_Str"" + ex.getMessage();
  final ModelAndView model=new ModelAndView(""String_Node_Str"");
  model.addObject(""String_Node_Str"",response);
  return model;
}",0.1877444589308996
102824,"private void onDownloadSuccess(Request request,Page page){
  onSuccess(request);
  if (site.getAcceptStatCode().contains(page.getStatusCode())) {
    pageProcessor.process(page);
    extractAndAddRequests(page,spawnUrl);
    if (!page.getResultItems().isSkip()) {
      for (      Pipeline pipeline : pipelines) {
        pipeline.process(page.getResultItems(),this);
      }
    }
  }
  sleep(site.getSleepTime());
  return;
}","private void onDownloadSuccess(Request request,Page page){
  if (site.getAcceptStatCode().contains(page.getStatusCode())) {
    pageProcessor.process(page);
    extractAndAddRequests(page,spawnUrl);
    if (!page.getResultItems().isSkip()) {
      for (      Pipeline pipeline : pipelines) {
        pipeline.process(page.getResultItems(),this);
      }
    }
  }
  sleep(site.getSleepTime());
  return;
}",0.9735576923076924
102825,"private void onDownloaderFail(Request request){
  if (site.getCycleRetryTimes() == 0) {
    sleep(site.getSleepTime());
  }
 else {
    doCycleRetry(request);
  }
  onError(request);
}","private void onDownloaderFail(Request request){
  if (site.getCycleRetryTimes() == 0) {
    sleep(site.getSleepTime());
  }
 else {
    doCycleRetry(request);
  }
}",0.942528735632184
102826,"/** 
 * start with more than one threads
 * @param executorService executorService to run the spider
 * @param threadNum threadNum
 * @return this
 */
public Spider thread(ExecutorService executorService,int threadNum){
  checkIfRunning();
  this.threadNum=threadNum;
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return this;
}","/** 
 * start with more than one threads
 * @param executorService executorService to run the spider
 * @param threadNum threadNum
 * @return this
 */
public Spider thread(ExecutorService executorService,int threadNum){
  checkIfRunning();
  this.threadNum=threadNum;
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.executorService=executorService;
  return this;
}",0.9207161125319692
102827,"protected void registerMBean(SpiderStatusMXBean spiderStatus) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectName objName=new ObjectName(jmxServerName + ""String_Node_Str"" + spiderStatus.getName());
  mbeanServer.registerMBean(spiderStatus,objName);
}","protected void registerMBean(SpiderStatusMXBean spiderStatus) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectName objName=new ObjectName(jmxServerName + ""String_Node_Str"" + UrlUtils.removePort(spiderStatus.getName()));
  mbeanServer.registerMBean(spiderStatus,objName);
}",0.9697841726618706
102828,"@Test(expected=NullPointerException) public void testNthNodesGet(){
  Html html=new Html(""String_Node_Str"");
  assertThat(html.xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
  Selectable selectable=html.xpath(""String_Node_Str"").nodes().get(0);
  assertThat(selectable.xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
}","@Test(expected=NullPointerException.class) public void testNthNodesGet(){
  Html html=new Html(""String_Node_Str"");
  assertThat(html.xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
  Selectable selectable=html.xpath(""String_Node_Str"").nodes().get(0);
  assertThat(selectable.xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
}",0.991404011461318
102829,"@Override public void process(GithubRepo o,Task task){
  Assert.assertEquals(86,o.getStar());
  Assert.assertEquals(70,o.getFork());
}","@Override public void process(GithubRepo o,Task task){
  assertThat(o.getStar()).isEqualTo(86);
  assertThat(o.getFork()).isEqualTo(70);
}",0.7647058823529411
102830,"@Test public void test(){
  OOSpider.create(Site.me().addStartUrl(""String_Node_Str"").setSleepTime(0),new PageModelPipeline<GithubRepo>(){
    @Override public void process(    GithubRepo o,    Task task){
      Assert.assertEquals(86,o.getStar());
      Assert.assertEquals(70,o.getFork());
    }
  }
,GithubRepo.class).setDownloader(new MockGithubDownloader()).test(""String_Node_Str"");
}","@Test public void test(){
  OOSpider.create(Site.me().setSleepTime(0),new PageModelPipeline<GithubRepo>(){
    @Override public void process(    GithubRepo o,    Task task){
      assertThat(o.getStar()).isEqualTo(86);
      assertThat(o.getFork()).isEqualTo(70);
    }
  }
,GithubRepo.class).addUrl(""String_Node_Str"").setDownloader(new MockGithubDownloader()).test(""String_Node_Str"");
}",0.7870967741935484
102831,"protected void processRequest(Request request){
  Page page=downloader.download(request,this);
  if (page == null) {
    sleep(site.getSleepTime());
    onError(request);
    return;
  }
  if (page.isNeedCycleRetry()) {
    extractAndAddRequests(page,true);
    sleep(site.getSleepTime());
    return;
  }
  pageProcessor.process(page);
  extractAndAddRequests(page,spawnUrl);
  if (!page.getResultItems().isSkip()) {
    for (    Pipeline pipeline : pipelines) {
      pipeline.process(page.getResultItems(),this);
    }
  }
  sleep(site.getSleepTime());
}","protected void processRequest(Request request){
  Page page=downloader.download(request,this);
  if (page == null) {
    sleep(site.getSleepTime());
    onError(request);
    return;
  }
  if (page.isNeedCycleRetry()) {
    extractAndAddRequests(page,true);
    sleep(site.getSleepTime());
    return;
  }
  pageProcessor.process(page);
  extractAndAddRequests(page,spawnUrl);
  if (!page.getResultItems().isSkip()) {
    for (    Pipeline pipeline : pipelines) {
      pipeline.process(page.getResultItems(),this);
    }
  }
  request.putExtra(Request.STATUS_CODE,page.getStatusCode());
  sleep(site.getSleepTime());
}",0.9166666666666666
102832,"@Override public long getDelay(TimeUnit unit){
  return unit.convert(canReuseTime - System.nanoTime(),unit.NANOSECONDS);
}","@Override public long getDelay(TimeUnit unit){
  return unit.convert(canReuseTime - System.nanoTime(),TimeUnit.NANOSECONDS);
}",0.9758064516129032
102833,"private void readProxyList(){
  try {
    ObjectInputStream is=new ObjectInputStream(new FileInputStream(proxyFile));
    addProxy((Map<String,Proxy>)is.readObject());
    is.close();
  }
 catch (  FileNotFoundException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","private void readProxyList(){
  try {
    ObjectInputStream is=new ObjectInputStream(new FileInputStream(fBase.getFile(proxyFilePath)));
    addProxy((Map<String,Proxy>)is.readObject());
    is.close();
  }
 catch (  FileNotFoundException e) {
    logger.info(""String_Node_Str"",e);
  }
catch (  IOException e) {
  }
catch (  ClassNotFoundException e) {
  }
}",0.8636363636363636
102834,"public void returnProxy(HttpHost host,int statusCode){
  Proxy p=allProxy.get(host.getAddress().getHostAddress());
  if (p == null) {
    return;
  }
switch (statusCode) {
case Proxy.SUCCESS:
    p.setReuseTimeInterval(reuseInterval);
  p.setFailedNum(0);
p.setFailedErrorType(new ArrayList<Integer>());
p.recordResponse();
p.successNumIncrement(1);
break;
case Proxy.ERROR_403:
p.fail(Proxy.ERROR_403);
p.setReuseTimeInterval(reuseInterval * p.getFailedNum());
logger.info(host + ""String_Node_Str"" + p.getReuseTimeInterval() / 1000.0);
break;
case Proxy.ERROR_BANNED:
p.fail(Proxy.ERROR_BANNED);
p.setReuseTimeInterval(10 * 60 * 1000* p.getFailedNum());
logger.warn(""String_Node_Str"" + p.getHttpHost());
logger.info(host + ""String_Node_Str"" + p.getReuseTimeInterval() / 1000.0);
break;
case Proxy.ERROR_404:
break;
default :
p.fail(statusCode);
break;
}
if (p.getFailedNum() > 20) {
p.setReuseTimeInterval(reviveTime);
logger.error(""String_Node_Str"" + host + ""String_Node_Str""+ p.getFailedType()+ ""String_Node_Str""+ proxyQueue.size());
return;
}
if (p.getFailedNum() % 5 == 0) {
if (!ProxyUtil.validateProxy(host)) {
p.setReuseTimeInterval(reviveTime);
logger.error(""String_Node_Str"" + host + ""String_Node_Str""+ p.getFailedType()+ ""String_Node_Str""+ proxyQueue.size());
return;
}
}
try {
proxyQueue.put(p);
}
 catch (InterruptedException e) {
logger.warn(""String_Node_Str"",e);
}
}","public void returnProxy(HttpHost host,int statusCode){
  Proxy p=allProxy.get(host.getAddress().getHostAddress());
  if (p == null) {
    return;
  }
switch (statusCode) {
case Proxy.SUCCESS:
    p.setReuseTimeInterval(reuseInterval);
  p.setFailedNum(0);
p.setFailedErrorType(new ArrayList<Integer>());
p.recordResponse();
p.successNumIncrement(1);
break;
case Proxy.ERROR_403:
p.fail(Proxy.ERROR_403);
p.setReuseTimeInterval(reuseInterval * p.getFailedNum());
logger.info(host + ""String_Node_Str"" + p.getReuseTimeInterval() / 1000.0);
break;
case Proxy.ERROR_BANNED:
p.fail(Proxy.ERROR_BANNED);
p.setReuseTimeInterval(10 * 60 * 1000* p.getFailedNum());
logger.warn(""String_Node_Str"" + p.getHttpHost());
logger.info(host + ""String_Node_Str"" + p.getReuseTimeInterval() / 1000.0);
break;
case Proxy.ERROR_404:
break;
default :
p.fail(statusCode);
break;
}
if (p.getFailedNum() > 20) {
p.setReuseTimeInterval(reviveTime);
logger.error(""String_Node_Str"" + host + ""String_Node_Str""+ p.getFailedType()+ ""String_Node_Str""+ proxyQueue.size());
return;
}
if (p.getFailedNum() > 0 && p.getFailedNum() % 5 == 0) {
if (!ProxyUtils.validateProxy(host)) {
p.setReuseTimeInterval(reviveTime);
logger.error(""String_Node_Str"" + host + ""String_Node_Str""+ p.getFailedType()+ ""String_Node_Str""+ proxyQueue.size());
return;
}
}
try {
proxyQueue.put(p);
}
 catch (InterruptedException e) {
logger.warn(""String_Node_Str"",e);
}
}",0.9910297811266596
102835,"public void addProxy(String[]... httpProxyList){
  isEnable=true;
  for (  String[] s : httpProxyList) {
    try {
      if (allProxy.containsKey(s[0])) {
        continue;
      }
      HttpHost item=new HttpHost(InetAddress.getByName(s[0]),Integer.valueOf(s[1]));
      if (!validateWhenInit || ProxyUtil.validateProxy(item)) {
        Proxy p=new Proxy(item,reuseInterval);
        proxyQueue.add(p);
        allProxy.put(s[0],p);
      }
    }
 catch (    NumberFormatException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    UnknownHostException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  logger.info(""String_Node_Str"" + allProxy.size());
}","public void addProxy(String[]... httpProxyList){
  isEnable=true;
  for (  String[] s : httpProxyList) {
    try {
      if (allProxy.containsKey(s[0])) {
        continue;
      }
      HttpHost item=new HttpHost(InetAddress.getByName(s[0]),Integer.valueOf(s[1]));
      if (!validateWhenInit || ProxyUtils.validateProxy(item)) {
        Proxy p=new Proxy(item,reuseInterval);
        proxyQueue.add(p);
        allProxy.put(s[0],p);
      }
    }
 catch (    NumberFormatException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    UnknownHostException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  logger.info(""String_Node_Str"" + allProxy.size());
}",0.999259807549963
102836,"private void saveProxyList(){
  if (allProxy.size() == 0) {
    return;
  }
  try {
    ObjectOutputStream os=new ObjectOutputStream(new FileOutputStream(proxyFile));
    os.writeObject(prepareForSaving());
    os.close();
    logger.info(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void saveProxyList(){
  if (allProxy.size() == 0) {
    return;
  }
  try {
    ObjectOutputStream os=new ObjectOutputStream(new FileOutputStream(fBase.getFile(proxyFilePath)));
    os.writeObject(prepareForSaving());
    os.close();
    logger.info(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9767441860465116
102837,"public ProxyPool(List<String[]> httpProxyList){
  readProxyList();
  addProxy(httpProxyList.toArray(new String[httpProxyList.size()][]));
  timer.schedule(saveProxyTask,10 * 60 * 1000L,10 * 60 * 1000);
}","public ProxyPool(List<String[]> httpProxyList,boolean isUseLastProxy){
  if (httpProxyList != null) {
    addProxy(httpProxyList.toArray(new String[httpProxyList.size()][]));
  }
  if (isUseLastProxy) {
    if (!new File(proxyFilePath).exists()) {
      setFilePath();
    }
    setFilePath();
    readProxyList();
    timer.schedule(saveProxyTask,0,saveProxyInterval);
  }
}",0.5363321799307958
102838,"private void handleObject(Iterator<Map.Entry<String,Object>> iterator){
  Map.Entry<String,Object> objectEntry=iterator.next();
  Object o=objectEntry.getValue();
  if (o instanceof MultiPageModel) {
    MultiPageModel multiPageModel=(MultiPageModel)o;
    pageMap.put(multiPageModel.getPageKey(),multiPageModel.getPage(),Boolean.TRUE);
    if (multiPageModel.getOtherPages() != null) {
      for (      String otherPage : multiPageModel.getOtherPages()) {
        Boolean aBoolean=pageMap.get(multiPageModel.getPageKey(),otherPage);
        if (aBoolean == null) {
          pageMap.put(multiPageModel.getPageKey(),otherPage,Boolean.FALSE);
        }
      }
    }
    Map<String,Boolean> booleanMap=pageMap.get(multiPageModel.getPageKey());
    objectMap.put(multiPageModel.getPageKey(),multiPageModel.getPage(),multiPageModel);
    if (booleanMap == null) {
      return;
    }
    for (    Map.Entry<String,Boolean> stringBooleanEntry : booleanMap.entrySet()) {
      if (!stringBooleanEntry.getValue()) {
        iterator.remove();
        return;
      }
    }
    List<Map.Entry<String,MultiPageModel>> entryList=new ArrayList<Map.Entry<String,MultiPageModel>>();
    entryList.addAll(objectMap.get(multiPageModel.getPageKey()).entrySet());
    if (entryList.size() != 0) {
      Collections.sort(entryList,new Comparator<Map.Entry<String,MultiPageModel>>(){
        @Override public int compare(        Map.Entry<String,MultiPageModel> o1,        Map.Entry<String,MultiPageModel> o2){
          try {
            int i1=Integer.parseInt(o1.getKey());
            int i2=Integer.parseInt(o2.getKey());
            return i1 - i2;
          }
 catch (          NumberFormatException e) {
            return o1.getKey().compareTo(o2.getKey());
          }
        }
      }
);
      MultiPageModel value=entryList.get(0).getValue();
      for (int i=1; i < entryList.size(); i++) {
        value=value.combine(entryList.get(i).getValue());
      }
      objectEntry.setValue(value);
    }
  }
}","private void handleObject(Iterator<Map.Entry<String,Object>> iterator){
  Map.Entry<String,Object> objectEntry=iterator.next();
  Object o=objectEntry.getValue();
  if (o instanceof MultiPageModel) {
    MultiPageModel multiPageModel=(MultiPageModel)o;
    pageMap.put(multiPageModel.getPageKey(),multiPageModel.getPage(),Boolean.FALSE);
synchronized (pageMap.get(multiPageModel.getPageKey())) {
      pageMap.put(multiPageModel.getPageKey(),multiPageModel.getPage(),Boolean.TRUE);
      if (multiPageModel.getOtherPages() != null) {
        for (        String otherPage : multiPageModel.getOtherPages()) {
          Boolean aBoolean=pageMap.get(multiPageModel.getPageKey(),otherPage);
          if (aBoolean == null) {
            pageMap.put(multiPageModel.getPageKey(),otherPage,Boolean.FALSE);
          }
        }
      }
      Map<String,Boolean> booleanMap=pageMap.get(multiPageModel.getPageKey());
      objectMap.put(multiPageModel.getPageKey(),multiPageModel.getPage(),multiPageModel);
      if (booleanMap == null) {
        return;
      }
      for (      Map.Entry<String,Boolean> stringBooleanEntry : booleanMap.entrySet()) {
        if (!stringBooleanEntry.getValue()) {
          iterator.remove();
          return;
        }
      }
      List<Map.Entry<String,MultiPageModel>> entryList=new ArrayList<Map.Entry<String,MultiPageModel>>();
      entryList.addAll(objectMap.get(multiPageModel.getPageKey()).entrySet());
      if (entryList.size() != 0) {
        Collections.sort(entryList,new Comparator<Map.Entry<String,MultiPageModel>>(){
          @Override public int compare(          Map.Entry<String,MultiPageModel> o1,          Map.Entry<String,MultiPageModel> o2){
            try {
              int i1=Integer.parseInt(o1.getKey());
              int i2=Integer.parseInt(o2.getKey());
              return i1 - i2;
            }
 catch (            NumberFormatException e) {
              return o1.getKey().compareTo(o2.getKey());
            }
          }
        }
);
        MultiPageModel value=entryList.get(0).getValue();
        for (int i=1; i < entryList.size(); i++) {
          value=value.combine(entryList.get(i).getValue());
        }
        objectEntry.setValue(value);
      }
    }
  }
}",0.7925418928487137
102839,"/** 
 * @param key1
 * @param key2
 * @param value
 * @return value
 */
public V put(K1 key1,K2 key2,V value){
  if (map.get(key1) == null) {
    map.put(key1,this.<K2,V>newMap());
  }
  return get(key1).put(key2,value);
}","/** 
 * @param key1
 * @param key2
 * @param value
 * @return value
 */
public synchronized V put(K1 key1,K2 key2,V value){
  if (map.get(key1) == null) {
    map.put(key1,this.<K2,V>newMap());
  }
  return get(key1).put(key2,value);
}",0.9715536105032824
102840,"@Override public List<Selectable> nodes(){
  ArrayList<Selectable> selectables=new ArrayList<Selectable>();
  selectables.add(this);
  return selectables;
}","@Override public List<Selectable> nodes(){
  List<Selectable> selectables=new ArrayList<Selectable>();
  for (  Element element : getElements()) {
    List<Element> childElements=new ArrayList<Element>(1);
    childElements.add(element);
    selectables.add(new HtmlNode(childElements));
  }
  return selectables;
}",0.4840764331210191
102841,"@Override public List<String> selectList(String text){
  List<String> list=new ArrayList<String>();
  Object object=jsonPath.read(text);
  if (object == null) {
    return list;
  }
  if (object instanceof List) {
    return (List<String>)object;
  }
 else {
    list.add(object.toString());
  }
  return list;
}","@Override public List<String> selectList(String text){
  List<String> list=new ArrayList<String>();
  Object object=jsonPath.read(text);
  if (object == null) {
    return list;
  }
  if (object instanceof List) {
    List<Object> items=(List<Object>)object;
    for (    Object item : items) {
      list.add(String.valueOf(item));
    }
  }
 else {
    list.add(String.valueOf(object));
  }
  return list;
}",0.7600554785020804
102842,"@Test public void testCombo(){
  Assert.assertEquals(""String_Node_Str"",and($(""String_Node_Str""),regex(""String_Node_Str"")).select(html2));
  OrSelector or=or($(""String_Node_Str"",""String_Node_Str""),xpath(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",or.select(html));
  Assert.assertEquals(""String_Node_Str"",or.select(html2));
}","@Test public void testCombo(){
  assertThat(and($(""String_Node_Str""),regex(""String_Node_Str"")).select(html2)).isEqualTo(""String_Node_Str"");
  OrSelector or=or($(""String_Node_Str"",""String_Node_Str""),xpath(""String_Node_Str""));
  assertThat(or.select(html)).isEqualTo(""String_Node_Str"");
  assertThat(or.select(html2)).isEqualTo(""String_Node_Str"");
}",0.4534883720930232
102843,"@Test public void testEach(){
  Assert.assertEquals(""String_Node_Str"",$(""String_Node_Str"").select(html));
  Assert.assertEquals(""String_Node_Str"",$(""String_Node_Str"",""String_Node_Str"").select(html));
  Assert.assertEquals(""String_Node_Str"",$(""String_Node_Str"",""String_Node_Str"").select(html));
  Assert.assertEquals(""String_Node_Str"",xpath(""String_Node_Str"").select(html));
  Assert.assertEquals(""String_Node_Str"",regex(""String_Node_Str"").select(html));
  Assert.assertEquals(""String_Node_Str"",regex(""String_Node_Str"",2).select(html));
}","@Test public void testEach(){
  assertThat($(""String_Node_Str"").select(html)).isEqualTo(""String_Node_Str"");
  assertThat($(""String_Node_Str"",""String_Node_Str"").select(html)).isEqualTo(""String_Node_Str"");
  assertThat($(""String_Node_Str"",""String_Node_Str"").select(html)).isEqualTo(""String_Node_Str"");
  assertThat(xpath(""String_Node_Str"").select(html)).isEqualTo(""String_Node_Str"");
  assertThat(regex(""String_Node_Str"").select(html)).isEqualTo(""String_Node_Str"");
  assertThat(regex(""String_Node_Str"",2).select(html)).isEqualTo(""String_Node_Str"");
}",0.3480662983425414
102844,"@Test public void testRegexWithLeftBracketQuoted(){
  String regex=""String_Node_Str"";
  String source=""String_Node_Str"";
  RegexSelector regexSelector=new RegexSelector(regex);
  String select=regexSelector.select(source);
  Assert.assertEquals(source,select);
}","@Test public void testRegexWithLeftBracketQuoted(){
  String regex=""String_Node_Str"";
  String source=""String_Node_Str"";
  RegexSelector regexSelector=new RegexSelector(regex);
  String select=regexSelector.select(source);
  Assertions.assertThat(select).isEqualTo(source);
}",0.9199255121042832
102845,"/** 
 * select elements
 * @param elementSelector
 * @return
 */
protected Selectable selectElements(BaseElementSelector elementSelector){
  if (!elementSelector.hasAttribute()) {
    List<Element> resultElements=new ArrayList<Element>();
    for (    Element element : getElements()) {
      List<Element> selectElements=elementSelector.selectElements(element);
      resultElements.addAll(selectElements);
    }
    return new HtmlNode(resultElements);
  }
 else {
    List<String> resultStrings=new ArrayList<String>();
    for (    Element element : getElements()) {
      List<String> selectList=elementSelector.selectList(element);
      resultStrings.addAll(selectList);
    }
    return new PlainText(resultStrings);
  }
}","/** 
 * select elements
 * @param elementSelector
 * @return
 */
protected Selectable selectElements(BaseElementSelector elementSelector){
  ListIterator<Element> elementIterator=getElements().listIterator();
  if (!elementSelector.hasAttribute()) {
    List<Element> resultElements=new ArrayList<Element>();
    while (elementIterator.hasNext()) {
      Element element=checkElementAndConvert(elementIterator);
      List<Element> selectElements=elementSelector.selectElements(element);
      resultElements.addAll(selectElements);
    }
    return new HtmlNode(resultElements);
  }
 else {
    List<String> resultStrings=new ArrayList<String>();
    while (elementIterator.hasNext()) {
      Element element=checkElementAndConvert(elementIterator);
      List<String> selectList=elementSelector.selectList(element);
      resultStrings.addAll(selectList);
    }
    return new PlainText(resultStrings);
  }
}",0.7975609756097561
102846,"@Test public void testNodes() throws Exception {
  Html selectable=new Html(html);
  List<Selectable> links=selectable.xpath(""String_Node_Str"").nodes();
  assertThat(links.get(0).xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
  assertThat(links.get(1).xpath(""String_Node_Str"").get()).isEqualTo(""String_Node_Str"");
}","@Test public void testNodes() throws Exception {
  Html selectable=new Html(html);
  List<Selectable> links=selectable.xpath(""String_Node_Str"").nodes();
  assertThat(links.get(0).links().get()).isEqualTo(""String_Node_Str"");
}",0.7891891891891892
102847,"@Override public void push(Request request,Task task){
  logger.trace(""String_Node_Str"",request.getUrl());
  if (isDuplicate(request,task) || shouldReserved(request)) {
    logger.debug(""String_Node_Str"",request.getUrl());
    pushWhenNoDuplicate(request,task);
  }
}","@Override public void push(Request request,Task task){
  logger.trace(""String_Node_Str"",request.getUrl());
  if (!isDuplicate(request,task) || shouldReserved(request)) {
    logger.debug(""String_Node_Str"",request.getUrl());
    pushWhenNoDuplicate(request,task);
  }
}",0.9981308411214952
102848,"@Override protected boolean isDuplicate(Request request,Task task){
  return urls.add(request.getUrl());
}","@Override protected boolean isDuplicate(Request request,Task task){
  return !urls.add(request.getUrl());
}",0.9953051643192488
102849,"@Override protected boolean isDuplicate(Request request,Task task){
  Jedis jedis=pool.getResource();
  try {
    boolean isDuplicate=!jedis.sismember(getSetKey(task),request.getUrl());
    if (!isDuplicate) {
      jedis.sadd(getSetKey(task),request.getUrl());
    }
    return isDuplicate;
  }
  finally {
    pool.returnResource(jedis);
  }
}","@Override protected boolean isDuplicate(Request request,Task task){
  Jedis jedis=pool.getResource();
  try {
    boolean isDuplicate=jedis.sismember(getSetKey(task),request.getUrl());
    if (!isDuplicate) {
      jedis.sadd(getSetKey(task),request.getUrl());
    }
    return isDuplicate;
  }
  finally {
    pool.returnResource(jedis);
  }
}",0.9985486211901308
102850,"public static void main(String[] args){
  Spider.create(new OschinaBlogPageProcesser()).run();
}","public static void main(String[] args){
  Spider.create(new OschinaBlogPageProcesser()).setScheduler(new RedisScheduler(""String_Node_Str"")).run();
}",0.7868852459016393
102851,"public int getThreadAlive(){
  return threadAlive;
}","public int getThreadAlive(){
  return threadAlive.get();
}",0.9454545454545454
102852,"public void execute(Runnable runnable){
  try {
    reentrantLock.lock();
    while (threadAlive >= threadNum) {
      try {
        condition.await();
      }
 catch (      InterruptedException e) {
      }
    }
    threadAlive++;
    System.out.println(threadAlive);
    executorService.execute(runnable);
  }
  finally {
    threadAlive--;
    condition.signal();
    reentrantLock.unlock();
  }
}","public void execute(final Runnable runnable){
  try {
    if (threadAlive.get() >= threadNum) {
      reentrantLock.lock();
      while (threadAlive.get() >= threadNum) {
        try {
          condition.await();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    threadAlive.incrementAndGet();
    executorService.execute(new Runnable(){
      @Override public void run(){
        try {
          runnable.run();
        }
  finally {
          try {
            reentrantLock.lock();
            threadAlive.decrementAndGet();
            condition.signal();
          }
  finally {
            reentrantLock.unlock();
          }
        }
      }
    }
);
  }
  finally {
    if (reentrantLock.isLocked()) {
      reentrantLock.unlock();
    }
  }
}",0.4341216216216216
102853,"private void init(Class clazz){
}","private void init(Class clazz){
  this.clazz=clazz;
  initClassExtractors();
  fieldExtractors=new ArrayList<FieldExtractor>();
  for (  Field field : ClassUtils.getFieldsIncludeSuperClass(clazz)) {
    field.setAccessible(true);
    FieldExtractor fieldExtractor=getAnnotationExtractBy(clazz,field);
    FieldExtractor fieldExtractorTmp=getAnnotationExtractCombo(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    fieldExtractorTmp=getAnnotationExtractByUrl(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    if (fieldExtractor != null) {
      checkFormat(field,fieldExtractor);
      fieldExtractors.add(fieldExtractor);
    }
  }
}",0.0607734806629834
102854,"private void checkFormat(Field field,FieldExtractor fieldExtractor){
  if (!fieldExtractor.isMulti() && !String.class.isAssignableFrom(field.getType())) {
    Class<?> fieldClazz=BasicTypeFormatter.detectBasicClass(field.getType());
    ObjectFormatter objectFormatter=getObjectFormatter(field,fieldClazz);
    if (objectFormatter == null) {
      throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ fieldClazz);
    }
 else {
      fieldExtractor.setObjectFormatter(objectFormatter);
    }
  }
 else   if (fieldExtractor.isMulti()) {
    if (!List.class.isAssignableFrom(field.getType())) {
      throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
    }
    Formatter formatter=field.getAnnotation(Formatter.class);
    if (formatter != null) {
      if (!formatter.subClazz().equals(Void.class)) {
        ObjectFormatter objectFormatter=getObjectFormatter(field,formatter.subClazz());
        if (objectFormatter == null) {
          throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ formatter.subClazz());
        }
 else {
          fieldExtractor.setObjectFormatter(objectFormatter);
        }
      }
    }
  }
}","private void checkFormat(Field field,FieldExtractor fieldExtractor){
  Formatter formatter=field.getAnnotation(Formatter.class);
  if (formatter != null && !formatter.formatter().equals(ObjectFormatter.class)) {
    if (formatter != null) {
      if (!formatter.formatter().equals(ObjectFormatter.class)) {
        ObjectFormatter objectFormatter=initFormatter(formatter.formatter());
        objectFormatter.initParam(formatter.value());
        fieldExtractor.setObjectFormatter(objectFormatter);
        return;
      }
    }
  }
  if (!fieldExtractor.isMulti() && !String.class.isAssignableFrom(field.getType())) {
    Class<?> fieldClazz=BasicTypeFormatter.detectBasicClass(field.getType());
    ObjectFormatter objectFormatter=getObjectFormatter(field,fieldClazz,formatter);
    if (objectFormatter == null) {
      throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ fieldClazz);
    }
 else {
      fieldExtractor.setObjectFormatter(objectFormatter);
    }
  }
 else   if (fieldExtractor.isMulti()) {
    if (!List.class.isAssignableFrom(field.getType())) {
      throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
    }
    if (formatter != null) {
      if (!formatter.subClazz().equals(Void.class)) {
        ObjectFormatter objectFormatter=getObjectFormatter(field,formatter.subClazz(),formatter);
        if (objectFormatter == null) {
          throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ formatter.subClazz());
        }
 else {
          fieldExtractor.setObjectFormatter(objectFormatter);
        }
      }
    }
  }
}",0.8110726643598616
102855,"private ObjectFormatter getObjectFormatter(Field field,Class<?> fieldClazz){
  Formatter formatter=field.getAnnotation(Formatter.class);
  if (formatter != null) {
    if (!formatter.formatter().equals(ObjectFormatter.class)) {
      ObjectFormatter objectFormatter=initFormatter(formatter.formatter());
      objectFormatter.initParam(formatter.value());
    }
  }
  return initFormatter(ObjectFormatters.get(fieldClazz));
}","private ObjectFormatter getObjectFormatter(Field field,Class<?> fieldClazz,Formatter formatter){
  return initFormatter(ObjectFormatters.get(fieldClazz));
}",0.5335628227194492
102856,"/** 
 * set scheduler for Spider
 * @param scheduler
 * @return this
 * @see Scheduler
 * @since 0.2.1
 */
public Spider setScheduler(Scheduler scheduler){
  checkIfRunning();
  this.scheduler=scheduler;
  return this;
}","/** 
 * set scheduler for Spider
 * @param scheduler
 * @return this
 * @see Scheduler
 * @since 0.2.1
 */
public Spider setScheduler(Scheduler scheduler){
  checkIfRunning();
  Scheduler oldScheduler=this.scheduler;
  this.scheduler=scheduler;
  Request request;
  while ((request=oldScheduler.poll(this)) != null) {
    this.scheduler.push(request,this);
  }
  return this;
}",0.6298157453936348
102857,"/** 
 * add urls to fetch
 * @param requests
 */
public void addTargetRequests(List<String> requests,long priority){
synchronized (targetRequests) {
    for (    String s : requests) {
      if (StringUtils.isBlank(s) || s.equals(""String_Node_Str"") || s.startsWith(""String_Node_Str"")) {
        break;
      }
      s=UrlUtils.canonicalizeUrl(s,url.toString());
      targetRequests.add(new Request(s).setPriority(priority));
    }
  }
}","/** 
 * add urls to fetch
 * @param requests
 */
public void addTargetRequests(List<String> requests,long priority){
synchronized (targetRequests) {
    for (    String s : requests) {
      if (StringUtils.isBlank(s) || s.equals(""String_Node_Str"") || s.startsWith(""String_Node_Str"")) {
        continue;
      }
      s=UrlUtils.canonicalizeUrl(s,url.toString());
      targetRequests.add(new Request(s).setPriority(priority));
    }
  }
}",0.9851767388825542
102858,"protected Selectable select(Selector selector,List<String> strings){
  List<String> results=new ArrayList<String>();
  for (  String string : strings) {
    String result=selector.select(string);
    if (result != null) {
      results.add(result);
    }
  }
  return new PlainText(results);
}","@Override public Selectable select(Selector selector){
  return select(selector,strings);
}",0.3072916666666667
102859,"protected Selectable selectList(Selector selector,List<String> strings){
  List<String> results=new ArrayList<String>();
  for (  String string : strings) {
    List<String> result=selector.selectList(string);
    results.addAll(result);
  }
  return new PlainText(results);
}","@Override public Selectable selectList(Selector selector){
  return selectList(selector,strings);
}",0.3946666666666666
102860,"private void extractLinks(Page page,Selector urlRegionSelector,List<Pattern> urlPatterns){
  List<String> links;
  if (urlRegionSelector == null) {
    links=page.getHtml().links().all();
  }
 else {
    links=urlRegionSelector.selectList(page.getHtml().toString());
  }
  for (  String link : links) {
    for (    Pattern targetUrlPattern : urlPatterns) {
      Matcher matcher=targetUrlPattern.matcher(link);
      if (matcher.find()) {
        page.addTargetRequest(new Request(matcher.group(1)));
      }
    }
  }
}","private void extractLinks(Page page,Selector urlRegionSelector,List<Pattern> urlPatterns){
  List<String> links;
  if (urlRegionSelector == null) {
    links=page.getHtml().links().all();
  }
 else {
    links=page.getHtml().selectList(urlRegionSelector).links().all();
  }
  for (  String link : links) {
    for (    Pattern targetUrlPattern : urlPatterns) {
      Matcher matcher=targetUrlPattern.matcher(link);
      if (matcher.find()) {
        page.addTargetRequest(new Request(matcher.group(1)));
      }
    }
  }
}",0.9263157894736842
102861,"@Override public void process(Page page){
  for (  PageModelExtractor pageModelExtractor : pageModelExtractorList) {
    extractLinks(page,pageModelExtractor.getHelpUrlRegionSelector(),pageModelExtractor.getHelpUrlPatterns());
    extractLinks(page,pageModelExtractor.getTargetUrlRegionSelector(),pageModelExtractor.getTargetUrlPatterns());
    Object process=pageModelExtractor.process(page);
    if (process == null || (process instanceof List && ((List)process).size() == 0)) {
      page.getResultItems().setSkip(true);
    }
    postProcessPageModel(pageModelExtractor.getClazz(),process);
    page.putField(pageModelExtractor.getClazz().getCanonicalName(),process);
  }
}","@Override public void process(Page page){
  for (  PageModelExtractor pageModelExtractor : pageModelExtractorList) {
    extractLinks(page,pageModelExtractor.getHelpUrlRegionSelector(),pageModelExtractor.getHelpUrlPatterns());
    extractLinks(page,pageModelExtractor.getTargetUrlRegionSelector(),pageModelExtractor.getTargetUrlPatterns());
    Object process=pageModelExtractor.process(page);
    if (process == null || (process instanceof List && ((List)process).size() == 0)) {
      continue;
    }
    postProcessPageModel(pageModelExtractor.getClazz(),process);
    page.putField(pageModelExtractor.getClazz().getCanonicalName(),process);
  }
  if (page.getResultItems().getAll().size() == 0) {
    page.getResultItems().setSkip(true);
  }
}",0.7429775280898876
102862,"/** 
 * Exit when complete. <br/> True: exit when all url of the site is downloaded. <br/> False: not exit until call stop manually.<br/>
 * @param exitWhenComplete
 * @return
 */
public Spider setExitWhenComplete(boolean exitWhenComplete){
  this.exitWhenComplete=exitWhenComplete;
  return this;
}","/** 
 * Exit when complete. <br/> True: exit when all url of the site is downloaded. <br/> False: not exit until call stop() manually.<br/>
 * @param exitWhenComplete
 * @return
 */
public Spider setExitWhenComplete(boolean exitWhenComplete){
  this.exitWhenComplete=exitWhenComplete;
  return this;
}",0.9966666666666668
102863,"@Override public Page download(Request request,Task task){
  Site site=null;
  if (task != null) {
    site=task.getSite();
  }
  int retryTimes=0;
  Set<Integer> acceptStatCode;
  String charset=null;
  Map<String,String> headers=null;
  if (site != null) {
    retryTimes=site.getRetryTimes();
    acceptStatCode=site.getAcceptStatCode();
    charset=site.getCharset();
    headers=site.getHeaders();
  }
 else {
    acceptStatCode=new HashSet<Integer>();
    acceptStatCode.add(200);
  }
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=getHttpClientPool().getClient(site);
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    if (headers != null) {
      for (      Map.Entry<String,String> headerEntry : headers.entrySet()) {
        httpGet.addHeader(headerEntry.getKey(),headerEntry.getValue());
      }
    }
    HttpResponse httpResponse=null;
    int tried=0;
    boolean retry;
    do {
      try {
        httpResponse=httpClient.execute(httpGet);
        retry=false;
      }
 catch (      IOException e) {
        tried++;
        if (tried > retryTimes) {
          logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
          if (site.getCycleRetryTimes() > 0) {
            Page page=new Page();
            Object cycleTriedTimesObject=request.getExtra(Request.CYCLE_TRIED_TIMES);
            if (cycleTriedTimesObject == null) {
              page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES,1));
            }
 else {
              int cycleTriedTimes=(Integer)cycleTriedTimesObject;
              cycleTriedTimes++;
              if (cycleTriedTimes >= site.getCycleRetryTimes()) {
                return null;
              }
              page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES,1));
            }
            return page;
          }
          return null;
        }
        logger.info(""String_Node_Str"" + request.getUrl() + ""String_Node_Str""+ tried+ ""String_Node_Str"");
        retry=true;
      }
    }
 while (retry);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (acceptStatCode.contains(statusCode)) {
      handleGzip(httpResponse);
      if (charset == null) {
        String value=httpResponse.getEntity().getContentType().getValue();
        charset=UrlUtils.getCharset(value);
      }
      return handleResponse(request,charset,httpResponse,task);
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode + ""String_Node_Str""+ request.getUrl());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}","@Override public Page download(Request request,Task task){
  Site site=null;
  if (task != null) {
    site=task.getSite();
  }
  int retryTimes=0;
  Set<Integer> acceptStatCode;
  String charset=null;
  Map<String,String> headers=null;
  if (site != null) {
    retryTimes=site.getRetryTimes();
    acceptStatCode=site.getAcceptStatCode();
    charset=site.getCharset();
    headers=site.getHeaders();
  }
 else {
    acceptStatCode=new HashSet<Integer>();
    acceptStatCode.add(200);
  }
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=getHttpClientPool().getClient(site);
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    if (headers != null) {
      for (      Map.Entry<String,String> headerEntry : headers.entrySet()) {
        httpGet.addHeader(headerEntry.getKey(),headerEntry.getValue());
      }
    }
    if (!httpGet.containsHeader(""String_Node_Str"")) {
      httpGet.addHeader(""String_Node_Str"",""String_Node_Str"");
    }
    HttpResponse httpResponse=null;
    int tried=0;
    boolean retry;
    do {
      try {
        httpResponse=httpClient.execute(httpGet);
        retry=false;
      }
 catch (      IOException e) {
        tried++;
        if (tried > retryTimes) {
          logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
          if (site.getCycleRetryTimes() > 0) {
            Page page=new Page();
            Object cycleTriedTimesObject=request.getExtra(Request.CYCLE_TRIED_TIMES);
            if (cycleTriedTimesObject == null) {
              page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES,1));
            }
 else {
              int cycleTriedTimes=(Integer)cycleTriedTimesObject;
              cycleTriedTimes++;
              if (cycleTriedTimes >= site.getCycleRetryTimes()) {
                return null;
              }
              page.addTargetRequest(request.setPriority(0).putExtra(Request.CYCLE_TRIED_TIMES,1));
            }
            return page;
          }
          return null;
        }
        logger.info(""String_Node_Str"" + request.getUrl() + ""String_Node_Str""+ tried+ ""String_Node_Str"");
        retry=true;
      }
    }
 while (retry);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (acceptStatCode.contains(statusCode)) {
      handleGzip(httpResponse);
      if (charset == null) {
        String value=httpResponse.getEntity().getContentType().getValue();
        charset=UrlUtils.getCharset(value);
      }
      return handleResponse(request,charset,httpResponse,task);
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode + ""String_Node_Str""+ request.getUrl());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}",0.9777128242601388
102864,"/** 
 * Add a url to start url.<br>
 * @param startUrl
 * @return this
 */
public Site addStartUrl(String startUrl){
  this.startUrls.add(startUrl);
  return this;
}","/** 
 * Add a url to start url.<br>
 * @param startUrl
 * @return this
 */
public Site addStartUrl(String startUrl){
  this.startUrls.add(startUrl);
  if (domain == null) {
    if (startUrls.size() > 0) {
      domain=UrlUtils.getDomain(startUrls.get(0));
    }
  }
  return this;
}",0.738255033557047
102865,"/** 
 * get domain
 * @return get domain
 */
public String getDomain(){
  if (domain == null) {
    if (startUrls.size() > 0) {
      domain=UrlUtils.getDomain(startUrls.get(0));
    }
  }
  return domain;
}","/** 
 * get domain
 * @return get domain
 */
public String getDomain(){
  return domain;
}",0.6060606060606061
102866,"public static String getCharset(String contentType){
  Matcher matcher=patternForCharset.matcher(contentType);
  if (matcher.find()) {
    return matcher.group(1);
  }
 else {
    return null;
  }
}","public static String getCharset(String contentType){
  Matcher matcher=patternForCharset.matcher(contentType);
  if (matcher.find()) {
    String charset=matcher.group(1);
    if (Charset.isSupported(charset)) {
      return charset;
    }
  }
  return null;
}",0.777292576419214
102867,"@Ignore(""String_Node_Str"") @Test public void testDownload(){
  String s=new HttpClientDownloader().download(""String_Node_Str"",""String_Node_Str"").smartContent().text().toString();
  Assert.assertNotNull(text);
}","@Ignore(""String_Node_Str"") @Test public void testDownload(){
  String s=new HttpClientDownloader().download(""String_Node_Str"",""String_Node_Str"").smartContent().text().toString();
  Assert.assertNotNull(s);
}",0.988009592326139
102868,"private FieldExtractor getAnnotationExtractBy(Class clazz,Field field){
  FieldExtractor fieldExtractor=null;
  ExtractBy extractBy=field.getAnnotation(ExtractBy.class);
  if (extractBy != null) {
    Selector selector=ExtractorUtils.getSelector(extractBy);
    fieldExtractor=new FieldExtractor(field,selector,FieldExtractor.Source.Html,extractBy.notNull(),extractBy.multi());
    Method setterMethod=getSetterMethod(clazz,field);
    if (setterMethod != null) {
      fieldExtractor.setSetterMethod(setterMethod);
    }
  }
  return fieldExtractor;
}","private FieldExtractor getAnnotationExtractBy(Class clazz,Field field){
  FieldExtractor fieldExtractor=null;
  ExtractBy extractBy=field.getAnnotation(ExtractBy.class);
  if (extractBy != null) {
    Selector selector=ExtractorUtils.getSelector(extractBy);
    fieldExtractor=new FieldExtractor(field,selector,extractBy.source() == ExtractBy.Source.RawHtml ? FieldExtractor.Source.RawHtml : FieldExtractor.Source.Html,extractBy.notNull(),extractBy.multi());
    Method setterMethod=getSetterMethod(clazz,field);
    if (setterMethod != null) {
      fieldExtractor.setSetterMethod(setterMethod);
    }
  }
  return fieldExtractor;
}",0.9316455696202532
102869,"private FieldExtractor getAnnotationExtractCombo(Class clazz,Field field){
  FieldExtractor fieldExtractor=null;
  ComboExtract comboExtract=field.getAnnotation(ComboExtract.class);
  if (comboExtract != null) {
    ExtractBy[] extractBies=comboExtract.value();
    Selector selector;
switch (comboExtract.op()) {
case And:
      selector=new AndSelector(ExtractorUtils.getSelectors(extractBies));
    break;
case Or:
  selector=new OrSelector(ExtractorUtils.getSelectors(extractBies));
break;
default :
selector=new AndSelector(ExtractorUtils.getSelectors(extractBies));
}
fieldExtractor=new FieldExtractor(field,selector,FieldExtractor.Source.Html,comboExtract.notNull(),comboExtract.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
}
return fieldExtractor;
}","private FieldExtractor getAnnotationExtractCombo(Class clazz,Field field){
  FieldExtractor fieldExtractor=null;
  ComboExtract comboExtract=field.getAnnotation(ComboExtract.class);
  if (comboExtract != null) {
    ExtractBy[] extractBies=comboExtract.value();
    Selector selector;
switch (comboExtract.op()) {
case And:
      selector=new AndSelector(ExtractorUtils.getSelectors(extractBies));
    break;
case Or:
  selector=new OrSelector(ExtractorUtils.getSelectors(extractBies));
break;
default :
selector=new AndSelector(ExtractorUtils.getSelectors(extractBies));
}
fieldExtractor=new FieldExtractor(field,selector,comboExtract.source() == ComboExtract.Source.RawHtml ? FieldExtractor.Source.RawHtml : FieldExtractor.Source.Html,comboExtract.notNull(),comboExtract.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
}
return fieldExtractor;
}",0.9512058328659564
102870,"/** 
 * 新建一个FilePipeline
 * @param path 文件保存路径
 */
public FilePipeline(String path){
  this.path=path;
}","/** 
 * 新建一个FilePipeline
 * @param path 文件保存路径
 */
public FilePipeline(String path){
  if (!path.endsWith(""String_Node_Str"") && !path.endsWith(""String_Node_Str"")) {
    path+=""String_Node_Str"";
  }
  this.path=path;
}",0.6479750778816199
102871,"public FileDownloader(String path,Downloader downloaderWhenFileMiss){
  this.path=path;
  this.downloaderWhenFileMiss=downloaderWhenFileMiss;
}","public FileDownloader(String path,Downloader downloaderWhenFileMiss){
  if (!path.endsWith(""String_Node_Str"") && !path.endsWith(""String_Node_Str"")) {
    path+=""String_Node_Str"";
  }
  this.path=path;
  this.downloaderWhenFileMiss=downloaderWhenFileMiss;
}",0.6516290726817042
102872,"/** 
 * 新建一个FilePipeline
 * @param path 文件保存路径
 */
public JsonFilePipeline(String path){
  this.path=path;
}","/** 
 * 新建一个FilePipeline
 * @param path 文件保存路径
 */
public JsonFilePipeline(String path){
  if (!path.endsWith(""String_Node_Str"") && !path.endsWith(""String_Node_Str"")) {
    path+=""String_Node_Str"";
  }
  this.path=path;
}",0.5835866261398176
102873,"public FileCacheQueueScheduler(String filePath){
  this.filePath=filePath;
}","public FileCacheQueueScheduler(String filePath){
  if (!filePath.endsWith(""String_Node_Str"") && !filePath.endsWith(""String_Node_Str"")) {
    filePath+=""String_Node_Str"";
  }
  this.filePath=filePath;
}",0.5487364620938628
102874,"/** 
 * 获取已设置的domain
 * @return 已设置的domain
 */
public String getDomain(){
  return domain;
}","/** 
 * 获取已设置的domain
 * @return 已设置的domain
 */
public String getDomain(){
  if (domain == null) {
    if (startUrls.size() > 0) {
      domain=UrlUtils.getDomain(startUrls.get(0));
    }
  }
  return domain;
}",0.5249169435215947
102875,"public static void main(String[] args){
  OOSpider.create(Site.me().addStartUrl(""String_Node_Str""),OschinaBlog.class).run();
}","public static void main(String[] args){
  OOSpider.create(Site.me().addStartUrl(""String_Node_Str""),OschinaBlog.class).pipeline(new ConsolePipeline()).pipeline(new JsonFilePipeline()).run();
}",0.7949526813880127
102876,"private void init(Class clazz){
  this.clazz=clazz;
  initTargetUrlPatterns();
  fieldExtractors=new ArrayList<FieldExtractor>();
  if (clazz.isAssignableFrom(AfterExtractor.class)) {
    try {
      afterExtractor=(AfterExtractor)clazz.newInstance();
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(e);
    }
  }
  for (  Field field : clazz.getDeclaredFields()) {
    field.setAccessible(true);
    ExtractBy extractBy=field.getAnnotation(ExtractBy.class);
    if (extractBy != null) {
      if (!extractBy.multi() && !field.getType().isAssignableFrom(String.class)) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
 else       if (extractBy.multi() && !field.getType().isAssignableFrom(List.class)) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
      String value=extractBy.value();
      Selector selector;
switch (extractBy.type()) {
case Css:
        selector=new CssSelector(value);
      break;
case Regex:
    selector=new RegexSelector(value);
  break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
FieldExtractor fieldExtractor=new FieldExtractor(field,selector,FieldExtractor.Source.Html,extractBy.notNull(),extractBy.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
fieldExtractors.add(fieldExtractor);
}
ExtractByUrl extractByUrl=field.getAnnotation(ExtractByUrl.class);
if (extractByUrl != null) {
if (!extractByUrl.multi() && !field.getType().isAssignableFrom(String.class)) {
throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
}
 else if (extractByUrl.multi() && !field.getType().isAssignableFrom(List.class)) {
throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
}
String regexPattern=extractByUrl.value();
if (regexPattern.trim().equals(""String_Node_Str"")) {
regexPattern=""String_Node_Str"";
}
FieldExtractor fieldExtractor=new FieldExtractor(field,new RegexSelector(regexPattern),FieldExtractor.Source.Url,extractByUrl.notNull(),extractByUrl.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
fieldExtractors.add(fieldExtractor);
}
}
}","private void init(Class clazz){
  this.clazz=clazz;
  initTargetUrlPatterns();
  fieldExtractors=new ArrayList<FieldExtractor>();
  if (AfterExtractor.class.isAssignableFrom(clazz)) {
    try {
      afterExtractor=(AfterExtractor)clazz.newInstance();
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(e);
    }
  }
  for (  Field field : clazz.getDeclaredFields()) {
    field.setAccessible(true);
    ExtractBy extractBy=field.getAnnotation(ExtractBy.class);
    if (extractBy != null) {
      if (!extractBy.multi() && !String.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
 else       if (extractBy.multi() && !List.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
      String value=extractBy.value();
      Selector selector;
switch (extractBy.type()) {
case Css:
        selector=new CssSelector(value);
      break;
case Regex:
    selector=new RegexSelector(value);
  break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
FieldExtractor fieldExtractor=new FieldExtractor(field,selector,FieldExtractor.Source.Html,extractBy.notNull(),extractBy.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
fieldExtractors.add(fieldExtractor);
}
ExtractByUrl extractByUrl=field.getAnnotation(ExtractByUrl.class);
if (extractByUrl != null) {
if (!extractByUrl.multi() && !String.class.isAssignableFrom(field.getType())) {
throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
}
 else if (extractByUrl.multi() && !List.class.isAssignableFrom(field.getType())) {
throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
}
String regexPattern=extractByUrl.value();
if (regexPattern.trim().equals(""String_Node_Str"")) {
regexPattern=""String_Node_Str"";
}
FieldExtractor fieldExtractor=new FieldExtractor(field,new RegexSelector(regexPattern),FieldExtractor.Source.Url,extractByUrl.notNull(),extractByUrl.multi());
Method setterMethod=getSetterMethod(clazz,field);
if (setterMethod != null) {
fieldExtractor.setSetterMethod(setterMethod);
}
fieldExtractors.add(fieldExtractor);
}
}
}",0.9374492282696996
102877,"@Test public void test(){
  OOSpider.create(Site.me().addStartUrl(""String_Node_Str""),OschinaBlog.class).run();
}","@Ignore(""String_Node_Str"") @Test public void test(){
  System.out.println(List.class.isAssignableFrom(ArrayList.class));
  OOSpider.create(Site.me().addStartUrl(""String_Node_Str""),OschinaBlog.class).run();
}",0.7021943573667712
102878,"@Override public List<String> selectList(String text){
  List<String> results=new ArrayList<String>();
  try {
    HtmlCleaner htmlCleaner=new HtmlCleaner();
    TagNode tagNode=htmlCleaner.clean(text);
    Document document=new DomSerializer(new CleanerProperties()).createDOM(tagNode);
    Object result;
    try {
      result=xPathExpression.evaluate(document,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      result=xPathExpression.evaluate(document,XPathConstants.STRING);
    }
    if (result instanceof NodeList) {
      NodeList nodeList=(NodeList)result;
      Transformer transformer=TransformerFactory.newInstance().newTransformer();
      StreamResult xmlOutput=new StreamResult();
      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
      for (int i=0; i < nodeList.getLength(); i++) {
        xmlOutput.setWriter(new StringWriter());
        transformer.transform(new DOMSource(nodeList.item(i)),xmlOutput);
        results.add(xmlOutput.getWriter().toString());
      }
    }
 else {
      results.add(result.toString());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + xpathStr,e);
  }
  return results;
}","@Override public List<String> selectList(String text){
  List<String> results=new ArrayList<String>();
  try {
    HtmlCleaner htmlCleaner=new HtmlCleaner();
    TagNode tagNode=htmlCleaner.clean(text);
    Document document=new DomSerializer(new CleanerProperties()).createDOM(tagNode);
    Object result;
    try {
      result=xPathExpression.evaluate(document,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      result=xPathExpression.evaluate(document,XPathConstants.STRING);
    }
    if (result instanceof NodeList) {
      NodeList nodeList=(NodeList)result;
      Transformer transformer=TransformerFactory.newInstance().newTransformer();
      StreamResult xmlOutput=new StreamResult();
      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
      for (int i=0; i < nodeList.getLength(); i++) {
        Node item=nodeList.item(i);
        if (item.getNodeType() == Node.ATTRIBUTE_NODE || item.getNodeType() == Node.TEXT_NODE) {
          results.add(item.getTextContent());
        }
 else {
          xmlOutput.setWriter(new StringWriter());
          transformer.transform(new DOMSource(item),xmlOutput);
          results.add(xmlOutput.getWriter().toString());
        }
      }
    }
 else {
      results.add(result.toString());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + xpathStr,e);
  }
  return results;
}",0.9111704155547083
102879,"@Override public String select(String text){
  try {
    HtmlCleaner htmlCleaner=new HtmlCleaner();
    TagNode tagNode=htmlCleaner.clean(text);
    Document document=new DomSerializer(new CleanerProperties()).createDOM(tagNode);
    Object result;
    try {
      result=xPathExpression.evaluate(document,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      result=xPathExpression.evaluate(document,XPathConstants.STRING);
    }
    if (result instanceof NodeList) {
      StreamResult xmlOutput=new StreamResult(new StringWriter());
      Transformer transformer=TransformerFactory.newInstance().newTransformer();
      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
      NodeList nodeList=(NodeList)result;
      if (nodeList.getLength() == 0) {
        return null;
      }
      transformer.transform(new DOMSource(nodeList.item(0)),xmlOutput);
      return xmlOutput.getWriter().toString();
    }
    return result.toString();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + xpathStr,e);
  }
  return null;
}","@Override public String select(String text){
  try {
    HtmlCleaner htmlCleaner=new HtmlCleaner();
    TagNode tagNode=htmlCleaner.clean(text);
    Document document=new DomSerializer(new CleanerProperties()).createDOM(tagNode);
    Object result;
    try {
      result=xPathExpression.evaluate(document,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      result=xPathExpression.evaluate(document,XPathConstants.STRING);
    }
    if (result instanceof NodeList) {
      NodeList nodeList=(NodeList)result;
      if (nodeList.getLength() == 0) {
        return null;
      }
      Node item=nodeList.item(0);
      if (item.getNodeType() == Node.ATTRIBUTE_NODE || item.getNodeType() == Node.TEXT_NODE) {
        return item.getTextContent();
      }
 else {
        StreamResult xmlOutput=new StreamResult(new StringWriter());
        Transformer transformer=TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
        transformer.transform(new DOMSource(item),xmlOutput);
        return xmlOutput.getWriter().toString();
      }
    }
    return result.toString();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + xpathStr,e);
  }
  return null;
}",0.6285233487589399
102880,"@Override public void afterProcess(Page page){
  content=null;
}","@Override public void afterProcess(Page page){
  System.out.println(""String_Node_Str"" + title);
  System.out.println(""String_Node_Str"" + content);
  System.out.println(""String_Node_Str"" + tags);
}",0.4692307692307692
102881,"private void init(Class clazz){
  this.clazz=clazz;
  initClassExtractors();
  fieldExtractors=new ArrayList<FieldExtractor>();
  for (  Field field : clazz.getDeclaredFields()) {
    field.setAccessible(true);
    FieldExtractor fieldExtractor=getAnnotationExtractBy(clazz,field);
    FieldExtractor fieldExtractorTmp=getAnnotationExtractByRaw(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    addAnnotationExtractBy2(clazz,fieldExtractor);
    addAnnotationExtractBy3(clazz,fieldExtractor);
    fieldExtractorTmp=getAnnotationExtractByUrl(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    if (fieldExtractor != null) {
      if (!fieldExtractor.isMulti() && !String.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
 else       if (fieldExtractor.isMulti() && !List.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
    }
  }
}","private void init(Class clazz){
  this.clazz=clazz;
  initClassExtractors();
  fieldExtractors=new ArrayList<FieldExtractor>();
  for (  Field field : clazz.getDeclaredFields()) {
    field.setAccessible(true);
    FieldExtractor fieldExtractor=getAnnotationExtractBy(clazz,field);
    FieldExtractor fieldExtractorTmp=getAnnotationExtractByRaw(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    if (fieldExtractor != null) {
      addAnnotationExtractBy2(fieldExtractor);
      addAnnotationExtractBy3(fieldExtractor);
    }
    fieldExtractorTmp=getAnnotationExtractByUrl(clazz,field);
    if (fieldExtractor != null && fieldExtractorTmp != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (fieldExtractor == null && fieldExtractorTmp != null) {
      fieldExtractor=fieldExtractorTmp;
    }
    if (fieldExtractor != null) {
      if (!fieldExtractor.isMulti() && !String.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
 else       if (fieldExtractor.isMulti() && !List.class.isAssignableFrom(field.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
      }
      fieldExtractors.add(fieldExtractor);
    }
  }
}",0.9666554395419332
102882,"private void addAnnotationExtractBy3(Class clazz,FieldExtractor fieldExtractor){
  ExtractBy3 extractBy=fieldExtractor.getField().getAnnotation(ExtractBy3.class);
  if (extractBy != null) {
    String value=extractBy.value();
    Selector selector;
switch (extractBy.type()) {
case Css:
      selector=new CssSelector(value);
    break;
case Regex:
  selector=new RegexSelector(value);
break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
fieldExtractor.setSelector(new AndSelector(fieldExtractor.getSelector(),selector));
}
}","private void addAnnotationExtractBy3(FieldExtractor fieldExtractor){
  ExtractBy3 extractBy=fieldExtractor.getField().getAnnotation(ExtractBy3.class);
  if (extractBy != null) {
    String value=extractBy.value();
    Selector selector;
switch (extractBy.type()) {
case Css:
      selector=new CssSelector(value);
    break;
case Regex:
  selector=new RegexSelector(value);
break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
fieldExtractor.setSelector(new AndSelector(fieldExtractor.getSelector(),selector));
}
}",0.990506329113924
102883,"private void addAnnotationExtractBy2(Class clazz,FieldExtractor fieldExtractor){
  ExtractBy2 extractBy=fieldExtractor.getField().getAnnotation(ExtractBy2.class);
  if (extractBy != null) {
    String value=extractBy.value();
    Selector selector;
switch (extractBy.type()) {
case Css:
      selector=new CssSelector(value);
    break;
case Regex:
  selector=new RegexSelector(value);
break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
fieldExtractor.setSelector(new AndSelector(fieldExtractor.getSelector(),selector));
}
}","private void addAnnotationExtractBy2(FieldExtractor fieldExtractor){
  ExtractBy2 extractBy=fieldExtractor.getField().getAnnotation(ExtractBy2.class);
  if (extractBy != null) {
    String value=extractBy.value();
    Selector selector;
switch (extractBy.type()) {
case Css:
      selector=new CssSelector(value);
    break;
case Regex:
  selector=new RegexSelector(value);
break;
case XPath:
selector=new XpathSelector(value);
break;
case XPath2:
selector=new Xpath2Selector(value);
break;
default :
selector=new Xpath2Selector(value);
}
fieldExtractor.setSelector(new AndSelector(fieldExtractor.getSelector(),selector));
}
}",0.990506329113924
102884,"private void handleObject(Iterator<Map.Entry<String,Object>> iterator){
  Map.Entry<String,Object> objectEntry=iterator.next();
  Object o=objectEntry.getValue();
  if (o instanceof PagedModel) {
    PagedModel pagedModel=(PagedModel)o;
    for (    String otherPage : pagedModel.getOtherPages()) {
      Boolean aBoolean=pageMap.get(pagedModel.getPageKey(),otherPage);
      if (aBoolean == null) {
        pageMap.put(pagedModel.getPageKey(),otherPage,Boolean.FALSE);
      }
    }
    Map<String,Boolean> booleanMap=pageMap.get(pagedModel.getPageKey());
    objectMap.put(pagedModel.getPageKey(),pagedModel.getPage(),pagedModel);
    if (booleanMap == null) {
      return;
    }
    for (    Map.Entry<String,Boolean> stringBooleanEntry : booleanMap.entrySet()) {
      if (!stringBooleanEntry.getValue()) {
        iterator.remove();
        return;
      }
    }
    List<Map.Entry<String,PagedModel>> entryList=new ArrayList<Map.Entry<String,PagedModel>>();
    entryList.addAll(objectMap.get(pagedModel.getPageKey()).entrySet());
    if (entryList.size() != 0) {
      Collections.sort(entryList,new Comparator<Map.Entry<String,PagedModel>>(){
        @Override public int compare(        Map.Entry<String,PagedModel> o1,        Map.Entry<String,PagedModel> o2){
          try {
            int i1=Integer.parseInt(o1.getKey());
            int i2=Integer.parseInt(o2.getKey());
            return i1 - i2;
          }
 catch (          NumberFormatException e) {
            return o1.getKey().compareTo(o2.getKey());
          }
        }
      }
);
      PagedModel value=entryList.get(0).getValue();
      for (int i=1; i < entryList.size(); i++) {
        value=value.combine(entryList.get(i).getValue());
      }
      objectEntry.setValue(value);
    }
  }
}","private void handleObject(Iterator<Map.Entry<String,Object>> iterator){
  Map.Entry<String,Object> objectEntry=iterator.next();
  Object o=objectEntry.getValue();
  if (o instanceof PagedModel) {
    PagedModel pagedModel=(PagedModel)o;
    pageMap.put(pagedModel.getPageKey(),pagedModel.getPage(),Boolean.TRUE);
    if (pagedModel.getOtherPages() != null) {
      for (      String otherPage : pagedModel.getOtherPages()) {
        Boolean aBoolean=pageMap.get(pagedModel.getPageKey(),otherPage);
        if (aBoolean == null) {
          pageMap.put(pagedModel.getPageKey(),otherPage,Boolean.FALSE);
        }
      }
    }
    Map<String,Boolean> booleanMap=pageMap.get(pagedModel.getPageKey());
    objectMap.put(pagedModel.getPageKey(),pagedModel.getPage(),pagedModel);
    if (booleanMap == null) {
      return;
    }
    for (    Map.Entry<String,Boolean> stringBooleanEntry : booleanMap.entrySet()) {
      if (!stringBooleanEntry.getValue()) {
        iterator.remove();
        return;
      }
    }
    List<Map.Entry<String,PagedModel>> entryList=new ArrayList<Map.Entry<String,PagedModel>>();
    entryList.addAll(objectMap.get(pagedModel.getPageKey()).entrySet());
    if (entryList.size() != 0) {
      Collections.sort(entryList,new Comparator<Map.Entry<String,PagedModel>>(){
        @Override public int compare(        Map.Entry<String,PagedModel> o1,        Map.Entry<String,PagedModel> o2){
          try {
            int i1=Integer.parseInt(o1.getKey());
            int i2=Integer.parseInt(o2.getKey());
            return i1 - i2;
          }
 catch (          NumberFormatException e) {
            return o1.getKey().compareTo(o2.getKey());
          }
        }
      }
);
      PagedModel value=entryList.get(0).getValue();
      for (int i=1; i < entryList.size(); i++) {
        value=value.combine(entryList.get(i).getValue());
      }
      objectEntry.setValue(value);
    }
  }
}",0.9593275488069414
102885,"@Override public PagedModel combine(PagedModel pagedModel){
  News163 news163=new News163();
  News163 pagedModel1=(News163)pagedModel;
  news163.content=this.content + pagedModel1.content;
  return news163;
}","@Override public PagedModel combine(PagedModel pagedModel){
  News163 news163=new News163();
  news163.title=this.title;
  News163 pagedModel1=(News163)pagedModel;
  news163.content=this.content + pagedModel1.content;
  return news163;
}",0.937219730941704
102886,"/** 
 * 建立多个线程下载
 * @param threadNum 线程数
 * @return this
 */
public Spider thread(int threadNum){
  checkIfNotRunning();
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  downloader=new HttpClientDownloader(threadNum);
  if (threadNum == 1) {
    return this;
  }
synchronized (this) {
    this.executorService=ThreadUtils.newFixedThreadPool(threadNum);
  }
  return this;
}","/** 
 * 建立多个线程下载
 * @param threadNum 线程数
 * @return this
 */
public Spider thread(int threadNum){
  checkIfNotRunning();
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (downloader == null || downloader instanceof HttpClientDownloader) {
    downloader=new HttpClientDownloader(threadNum);
  }
  if (threadNum == 1) {
    return this;
  }
synchronized (this) {
    this.executorService=ThreadUtils.newFixedThreadPool(threadNum);
  }
  return this;
}",0.8543046357615894
102887,"@Override public String select(String text){
  Document doc=Jsoup.parse(text);
  Elements elements=doc.select(selectorText);
  if (CollectionUtils.isNotEmpty(elements)) {
    return null;
  }
  return elements.get(0).outerHtml();
}","@Override public String select(String text){
  Document doc=Jsoup.parse(text);
  Elements elements=doc.select(selectorText);
  if (CollectionUtils.isEmpty(elements)) {
    return null;
  }
  return elements.get(0).outerHtml();
}",0.9934640522875816
102888,"/** 
 * 建立多个线程下载
 * @param threadNum 线程数
 * @return this
 */
public Spider thread(int threadNum){
  checkIfNotRunning();
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (threadNum == 1) {
    return this;
  }
synchronized (this) {
    this.executorService=ThreadUtils.newFixedThreadPool(threadNum);
  }
  return this;
}","/** 
 * 建立多个线程下载
 * @param threadNum 线程数
 * @return this
 */
public Spider thread(int threadNum){
  checkIfNotRunning();
  if (threadNum <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  downloader=new HttpClientDownloader(threadNum);
  if (threadNum == 1) {
    return this;
  }
synchronized (this) {
    this.executorService=ThreadUtils.newFixedThreadPool(threadNum);
  }
  return this;
}",0.9355670103092784
102889,"@Override public Page download(Request request,Task task){
  Site site=task.getSite();
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=HttpClientPool.getInstance().getClient(site);
  String charset=site.getCharset();
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    HttpResponse httpResponse=null;
    int tried=0;
    boolean retry;
    do {
      try {
        httpResponse=httpClient.execute(httpGet);
        retry=false;
      }
 catch (      IOException e) {
        tried++;
        if (tried > site.getRetryTimes()) {
          logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
          return null;
        }
        logger.info(""String_Node_Str"" + request.getUrl() + ""String_Node_Str""+ tried+ ""String_Node_Str"");
        retry=true;
      }
    }
 while (retry);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (site.getAcceptStatCode().contains(statusCode)) {
      if (charset == null) {
        String value=httpResponse.getEntity().getContentType().getValue();
        charset=UrlUtils.getCharset(value);
      }
      handleGzip(httpResponse);
      String content=IOUtils.toString(httpResponse.getEntity().getContent(),charset);
      Page page=new Page();
      page.setHtml(new Html(UrlUtils.fixAllRelativeHrefs(content,request.getUrl())));
      page.setUrl(new PlainText(request.getUrl()));
      page.setRequest(request);
      return page;
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode + ""String_Node_Str""+ request.getUrl());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}","@Override public Page download(Request request,Task task){
  Site site=task.getSite();
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=HttpClientPool.getInstance(poolSize).getClient(site);
  String charset=site.getCharset();
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    HttpResponse httpResponse=null;
    int tried=0;
    boolean retry;
    do {
      try {
        httpResponse=httpClient.execute(httpGet);
        retry=false;
      }
 catch (      IOException e) {
        tried++;
        if (tried > site.getRetryTimes()) {
          logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
          return null;
        }
        logger.info(""String_Node_Str"" + request.getUrl() + ""String_Node_Str""+ tried+ ""String_Node_Str"");
        retry=true;
      }
    }
 while (retry);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (site.getAcceptStatCode().contains(statusCode)) {
      if (charset == null) {
        String value=httpResponse.getEntity().getContentType().getValue();
        charset=UrlUtils.getCharset(value);
      }
      handleGzip(httpResponse);
      String content=IOUtils.toString(httpResponse.getEntity().getContent(),charset);
      Page page=new Page();
      page.setHtml(new Html(UrlUtils.fixAllRelativeHrefs(content,request.getUrl())));
      page.setUrl(new PlainText(request.getUrl()));
      page.setRequest(request);
      return page;
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode + ""String_Node_Str""+ request.getUrl());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}",0.9976359338061466
102890,"private HttpClient generateClient(Site site){
  HttpParams params=new BasicHttpParams();
  params.setParameter(CoreProtocolPNames.USER_AGENT,site.getUserAgent());
  params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT,1000);
  params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,2000);
  HttpProtocolParamBean paramsBean=new HttpProtocolParamBean(params);
  paramsBean.setVersion(HttpVersion.HTTP_1_1);
  paramsBean.setContentCharset(""String_Node_Str"");
  paramsBean.setUseExpectContinue(false);
  SchemeRegistry schemeRegistry=new SchemeRegistry();
  schemeRegistry.register(new Scheme(""String_Node_Str"",80,PlainSocketFactory.getSocketFactory()));
  PoolingClientConnectionManager connectionManager=new PoolingClientConnectionManager(schemeRegistry);
  connectionManager.setMaxTotal(poolSize);
  connectionManager.setDefaultMaxPerRoute(100);
  DefaultHttpClient httpClient=new DefaultHttpClient(connectionManager,params);
  generateCookie(httpClient,site);
  httpClient.getParams().setIntParameter(""String_Node_Str"",60000);
  httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BEST_MATCH);
  return httpClient;
}","private HttpClient generateClient(Site site){
  HttpParams params=new BasicHttpParams();
  params.setParameter(CoreProtocolPNames.USER_AGENT,site.getUserAgent());
  params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT,1000);
  params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,2000);
  HttpProtocolParamBean paramsBean=new HttpProtocolParamBean(params);
  paramsBean.setVersion(HttpVersion.HTTP_1_1);
  paramsBean.setContentCharset(site.getCharset());
  paramsBean.setUseExpectContinue(false);
  SchemeRegistry schemeRegistry=new SchemeRegistry();
  schemeRegistry.register(new Scheme(""String_Node_Str"",80,PlainSocketFactory.getSocketFactory()));
  PoolingClientConnectionManager connectionManager=new PoolingClientConnectionManager(schemeRegistry);
  connectionManager.setMaxTotal(poolSize);
  connectionManager.setDefaultMaxPerRoute(100);
  DefaultHttpClient httpClient=new DefaultHttpClient(connectionManager,params);
  generateCookie(httpClient,site);
  httpClient.getParams().setIntParameter(""String_Node_Str"",60000);
  httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BEST_MATCH);
  return httpClient;
}",0.9852302345786272
102891,"public static HttpClientPool getInstance(){
  return INSTANCE;
}","public static HttpClientPool getInstance(int poolSize){
  if (INSTANCE == null) {
synchronized (HttpClientPool.class) {
      if (INSTANCE == null) {
        INSTANCE=new HttpClientPool(poolSize);
      }
    }
  }
  return INSTANCE;
}",0.3745819397993311
102892,"@Override public Site getSite(){
  if (site == null) {
    site=Site.me().setDomain(""String_Node_Str"").addStartUrl(""String_Node_Str"").addStartUrl(""String_Node_Str"").addStartUrl(""String_Node_Str"").setUserAgent(""String_Node_Str"");
  }
  return site;
}","@Override public Site getSite(){
  if (site == null) {
    site=Site.me().setDomain(""String_Node_Str"").setSleepTime(0).addStartUrl(""String_Node_Str"").addStartUrl(""String_Node_Str"").addStartUrl(""String_Node_Str"").setUserAgent(""String_Node_Str"");
  }
  return site;
}",0.9688715953307392
102893,"@Override public synchronized Request poll(Task task){
  Jedis jedis=pool.getResource();
  String url=jedis.lpop(QUEUE_PREFIX + task.getUUID());
  pool.returnResource(jedis);
  return new Request(url);
}","@Override public synchronized Request poll(Task task){
  Jedis jedis=pool.getResource();
  String url=jedis.lpop(QUEUE_PREFIX + task.getUUID());
  if (url == null) {
    try {
      lock.lock();
      while (url == null) {
        try {
          condition.await();
          url=jedis.lpop(QUEUE_PREFIX + task.getUUID());
        }
 catch (        InterruptedException e) {
        }
      }
    }
  finally {
      lock.unlock();
    }
  }
  pool.returnResource(jedis);
  return new Request(url);
}",0.5462304409672831
102894,"@Override public synchronized void push(Request request,Task task){
  Jedis jedis=pool.getResource();
  if (jedis.zrank(SET_PREFIX + task.getUUID(),request.getUrl()) == null) {
    jedis.rpush(QUEUE_PREFIX + task.getUUID(),request.getUrl());
    jedis.zadd(SET_PREFIX + task.getUUID(),System.currentTimeMillis(),request.getUrl());
  }
  pool.returnResource(jedis);
}","@Override public synchronized void push(Request request,Task task){
  Jedis jedis=pool.getResource();
  if (jedis.zrank(SET_PREFIX + task.getUUID(),request.getUrl()) == null) {
    try {
      lock.lock();
      jedis.rpush(QUEUE_PREFIX + task.getUUID(),request.getUrl());
      jedis.zadd(SET_PREFIX + task.getUUID(),System.currentTimeMillis(),request.getUrl());
      condition.signal();
    }
  finally {
      lock.unlock();
    }
  }
  pool.returnResource(jedis);
}",0.8755980861244019
102895,"@Ignore(""String_Node_Str"") @Test public void testSelenium(){
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  WebDriver webDriver=new ChromeDriver();
  webDriver.get(""String_Node_Str"");
  WebElement webElement=webDriver.findElement(By.xpath(""String_Node_Str""));
  System.out.println(webElement.getAttribute(""String_Node_Str""));
  webDriver.close();
}","@Ignore(""String_Node_Str"") @Test public void testSelenium(){
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> contentSettings=new HashMap<String,Object>();
  contentSettings.put(""String_Node_Str"",2);
  Map<String,Object> preferences=new HashMap<String,Object>();
  preferences.put(""String_Node_Str"",contentSettings);
  DesiredCapabilities caps=DesiredCapabilities.chrome();
  caps.setCapability(""String_Node_Str"",preferences);
  caps.setCapability(""String_Node_Str"",Arrays.asList(""String_Node_Str""));
  WebDriver webDriver=new ChromeDriver(caps);
  webDriver.get(""String_Node_Str"");
  WebElement webElement=webDriver.findElement(By.xpath(""String_Node_Str""));
  System.out.println(webElement.getAttribute(""String_Node_Str""));
  webDriver.close();
}",0.6450511945392492
102896,"@Ignore @Test public void testGlobalSpider(){
  SimplePageProcessor pageProcessor2=new SimplePageProcessor(""String_Node_Str"",""String_Node_Str"");
  System.out.println(pageProcessor2.getSite().getEncoding());
  pageProcessor2.getSite().setSleepTime(500);
  Spider.create(pageProcessor2).pipeline(new FilePipeline()).schedular(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}","@Ignore @Test public void testGlobalSpider(){
  SimplePageProcessor pageProcessor2=new SimplePageProcessor(""String_Node_Str"",""String_Node_Str"");
  System.out.println(pageProcessor2.getSite().getEncoding());
  pageProcessor2.getSite().setSleepTime(500);
  Spider.create(pageProcessor2).pipeline(new FilePipeline()).scheduler(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}",0.9973684210526316
102897,"@Ignore @Test public void test() throws IOException {
  DiandianBlogProcessor diaoyuwengProcessor=new DiandianBlogProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(diaoyuwengProcessor).pipeline(new ConsolePipeline()).pipeline(pipeline).schedular(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}","@Ignore @Test public void test() throws IOException {
  DiandianBlogProcessor diaoyuwengProcessor=new DiandianBlogProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(diaoyuwengProcessor).pipeline(new ConsolePipeline()).pipeline(pipeline).scheduler(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}",0.9971751412429378
102898,"@Ignore @Test public void test() throws IOException {
  DiaoyuwengProcessor diaoyuwengProcessor=new DiaoyuwengProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(diaoyuwengProcessor).pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}","@Ignore @Test public void test() throws IOException {
  DiaoyuwengProcessor diaoyuwengProcessor=new DiaoyuwengProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(diaoyuwengProcessor).pipeline(new FilePipeline()).pipeline(pipeline).scheduler(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}",0.9971181556195964
102899,"@Ignore @Test public void test() throws IOException {
  SinaBlogProcesser sinaBlogProcesser=new SinaBlogProcesser();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(sinaBlogProcesser).pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}","@Ignore @Test public void test() throws IOException {
  SinaBlogProcesser sinaBlogProcesser=new SinaBlogProcesser();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.create(sinaBlogProcesser).pipeline(new FilePipeline()).pipeline(pipeline).scheduler(new FileCacheQueueScheduler(""String_Node_Str"")).run();
}",0.9970501474926252
102900,"@Override public void process(Page page,Site site){
  String domain=site.getDomain();
  domain=UrlUtils.getDomain(domain);
  String path=this.path + ""String_Node_Str"" + domain+ ""String_Node_Str"";
  try {
    PrintWriter printWriter=new PrintWriter(new FileWriter(path + DigestUtils.md5Hex(page.getUrl().toString()) + ""String_Node_Str""));
    template.process(page.getFields(),printWriter);
    printWriter.close();
  }
 catch (  TemplateException e) {
  }
catch (  IOException e) {
  }
}","@Override public void process(Page page,Site site){
  String domain=site.getDomain();
  domain=UrlUtils.getDomain(domain);
  String path=this.path + ""String_Node_Str"" + domain+ ""String_Node_Str"";
  File file=new File(path);
  if (!file.exists()) {
    file.mkdir();
  }
  try {
    PrintWriter printWriter=new PrintWriter(new FileWriter(path + DigestUtils.md5Hex(page.getUrl().toString()) + ""String_Node_Str""));
    template.process(page.getFields(),printWriter);
    printWriter.close();
  }
 catch (  TemplateException e) {
  }
catch (  IOException e) {
  }
}",0.9293893129770991
102901,"@Override public void process(Page page){
  page.addTargetRequests(page.getHtml().rs(""String_Node_Str"").toStrings());
  page.putField(""String_Node_Str"",page.getHtml().x(""String_Node_Str""));
  page.putField(""String_Node_Str"",page.getHtml().sc());
  page.putField(""String_Node_Str"",page.getHtml().x(""String_Node_Str"").r(""String_Node_Str""));
  page.putField(""String_Node_Str"",page.getHtml().xs(""String_Node_Str""));
}","@Override public void process(Page page){
  page.addTargetRequests(page.getHtml().as().rs(""String_Node_Str"").toStrings());
  page.putField(""String_Node_Str"",page.getHtml().x(""String_Node_Str""));
  page.putField(""String_Node_Str"",page.getHtml().x(""String_Node_Str""));
  page.putField(""String_Node_Str"",page.getUrl().r(""String_Node_Str""));
  page.putField(""String_Node_Str"",page.getHtml().x(""String_Node_Str"").r(""String_Node_Str""));
}",0.7976331360946746
102902,"@Override public Site getSite(){
  return Site.me().setDomain(""String_Node_Str"").setStartUrl(""String_Node_Str"").setUserAgent(""String_Node_Str"");
}","@Override public Site getSite(){
  if (site == null) {
    site=Site.me().setDomain(""String_Node_Str"").setStartUrl(""String_Node_Str"").setSleepTime(3000).setUserAgent(""String_Node_Str"");
  }
  return site;
}",0.7954545454545454
102903,"private void init(){
  File file=new File(filePath);
  if (!file.exists()) {
    file.mkdirs();
  }
  readFile();
  initWriter();
  initFlushThread();
  inited.set(true);
  logger.info(""String_Node_Str"");
}","private void init(Task task){
  this.task=task;
  File file=new File(filePath);
  if (!file.exists()) {
    file.mkdirs();
  }
  readFile();
  initWriter();
  initFlushThread();
  inited.set(true);
  logger.info(""String_Node_Str"");
}",0.938496583143508
102904,"public FileCacheQueueSchedular(Task task,String filePath){
  this.filePath=filePath;
  this.task=task;
}","public FileCacheQueueSchedular(String filePath){
  this.filePath=filePath;
}",0.8444444444444444
102905,"@Override public synchronized Request poll(Task task){
  if (!inited.get()) {
    init();
  }
  fileCursorWriter.println(cursor.incrementAndGet());
  return queue.poll();
}","@Override public synchronized Request poll(Task task){
  if (!inited.get()) {
    init(task);
  }
  fileCursorWriter.println(cursor.incrementAndGet());
  return queue.poll();
}",0.9885057471264368
102906,"@Override public synchronized void push(Request request,Task task){
  if (!inited.get()) {
    init();
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + request.getUrl());
  }
  if (urls.add(request.getUrl())) {
    queue.add(request);
    fileUrlWriter.println(request.getUrl());
  }
}","@Override public synchronized void push(Request request,Task task){
  if (!inited.get()) {
    init(task);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + request.getUrl());
  }
  if (urls.add(request.getUrl())) {
    queue.add(request);
    fileUrlWriter.println(request.getUrl());
  }
}",0.9935897435897436
102907,"@Override public void process(Page page,Site site){
  String domain=site.getDomain();
  domain=UrlUtils.getDomain(domain);
  String path=this.path + ""String_Node_Str"" + domain+ ""String_Node_Str"";
  File file=new File(path);
  if (!file.exists()) {
    file.mkdirs();
  }
  try {
    PrintWriter printWriter=new PrintWriter(new FileWriter(path + DigestUtils.md5Hex(page.getUrl().toString()) + ""String_Node_Str""));
    template.process(page.getFields(),printWriter);
    printWriter.close();
  }
 catch (  TemplateException e) {
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void process(Page page,Task task){
  String path=this.path + ""String_Node_Str"" + task.getUUID()+ ""String_Node_Str"";
  File file=new File(path);
  if (!file.exists()) {
    file.mkdirs();
  }
  try {
    PrintWriter printWriter=new PrintWriter(new FileWriter(path + DigestUtils.md5Hex(page.getUrl().toString()) + ""String_Node_Str""));
    template.process(page.getFields(),printWriter);
    printWriter.close();
  }
 catch (  TemplateException e) {
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.901890189018902
102908,"@Ignore @Test public void testGlobalSpider(){
  SimplePageProcessor pageProcessor2=new SimplePageProcessor(""String_Node_Str"",""String_Node_Str"");
  System.out.println(pageProcessor2.getSite().getEncoding());
  pageProcessor2.getSite().setSleepTime(500);
  Spider.me().pipeline(new FilePipeline()).schedular(new FileCacheQueueSchedular(pageProcessor2.getSite(),""String_Node_Str"")).processor(pageProcessor2).run();
}","@Ignore @Test public void testGlobalSpider(){
  SimplePageProcessor pageProcessor2=new SimplePageProcessor(""String_Node_Str"",""String_Node_Str"");
  System.out.println(pageProcessor2.getSite().getEncoding());
  pageProcessor2.getSite().setSleepTime(500);
  Spider.me().pipeline(new FilePipeline()).schedular(new FileCacheQueueSchedular(""String_Node_Str"")).processor(pageProcessor2).run();
}",0.8938826466916354
102909,"@Ignore @Test public void test() throws IOException {
  DiandianBlogProcessor diaoyuwengProcessor=new DiandianBlogProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new ConsolePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(diaoyuwengProcessor.getSite(),""String_Node_Str"")).processor(diaoyuwengProcessor).run();
}","@Ignore @Test public void test() throws IOException {
  DiandianBlogProcessor diaoyuwengProcessor=new DiandianBlogProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new ConsolePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(""String_Node_Str"")).processor(diaoyuwengProcessor).run();
}",0.960212201591512
102910,"@Test public void test() throws IOException {
  DiaoyuwengProcessor diaoyuwengProcessor=new DiaoyuwengProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(diaoyuwengProcessor.getSite(),""String_Node_Str"")).processor(diaoyuwengProcessor).run();
}","@Ignore @Test public void test() throws IOException {
  DiaoyuwengProcessor diaoyuwengProcessor=new DiaoyuwengProcessor();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(""String_Node_Str"")).processor(diaoyuwengProcessor).run();
}",0.9480874316939892
102911,"@Ignore @Test public void test() throws IOException {
  SinaBlogProcesser sinaBlogProcesser=new SinaBlogProcesser();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(sinaBlogProcesser.getSite(),""String_Node_Str"")).processor(sinaBlogProcesser).run();
}","@Ignore @Test public void test() throws IOException {
  SinaBlogProcesser sinaBlogProcesser=new SinaBlogProcesser();
  FreemarkerPipeline pipeline=new FreemarkerPipeline(""String_Node_Str"");
  Spider.me().pipeline(new FilePipeline()).pipeline(pipeline).schedular(new FileCacheQueueSchedular(""String_Node_Str"")).processor(sinaBlogProcesser).run();
}",0.961218836565097
102912,"@Override public Page download(Request request,Site site){
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=HttpClientPool.getInstance().getClient(site);
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    HttpResponse httpResponse=httpClient.execute(httpGet);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (site.getAcceptStatCode().contains(statusCode)) {
      String content=IOUtils.toString(httpResponse.getEntity().getContent(),site.getEncoding() == null ? httpResponse.getEntity().getContentType().getValue() : site.getEncoding());
      Page page=new Page();
      page.setHtml(new Html(UrlUtils.fixAllRelativeHrefs(content,request.getUrl())));
      page.setUrl(new PlainText(request.getUrl()));
      page.setRequest(request);
      return page;
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}","@Override public Page download(Request request,Site site){
  logger.info(""String_Node_Str"" + request.getUrl());
  HttpClient httpClient=HttpClientPool.getInstance().getClient(site);
  try {
    HttpGet httpGet=new HttpGet(request.getUrl());
    HttpResponse httpResponse=httpClient.execute(httpGet);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (site.getAcceptStatCode().contains(statusCode)) {
      if (site.getEncoding() == null) {
        String value=httpResponse.getEntity().getContentType().getValue();
        site.setEncoding(new PlainText(value).r(""String_Node_Str"").toString());
      }
      String content=IOUtils.toString(httpResponse.getEntity().getContent(),site.getEncoding());
      Page page=new Page();
      page.setHtml(new Html(UrlUtils.fixAllRelativeHrefs(content,request.getUrl())));
      page.setUrl(new PlainText(request.getUrl()));
      page.setRequest(request);
      return page;
    }
 else {
      logger.warn(""String_Node_Str"" + statusCode);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + request.getUrl() + ""String_Node_Str"",e);
  }
  return null;
}",0.866697631212262
102913,"/** 
 * Emits an event with an acknowledge.
 * @param event an event name
 * @param args data to send.
 * @param ack the acknowledgement to be called
 * @return a reference to this object.
 */
public Emitter emit(final String event,final Object[] args,final Ack ack){
  EventThread.exec(new Runnable(){
    @Override public void run(){
      List<Object> _args=new ArrayList<Object>(){
{
          add(event);
          addAll(Arrays.asList(args));
        }
      }
;
      Packet packet=new Packet(Parser.EVENT,toJsonArray(_args));
      logger.fine(String.format(""String_Node_Str"",ids));
      Socket.this.acks.put(ids,ack);
      packet.id=ids++;
      Socket.this.packet(packet);
    }
  }
);
  return this;
}","/** 
 * Emits an event with an acknowledge.
 * @param event an event name
 * @param args data to send.
 * @param ack the acknowledgement to be called
 * @return a reference to this object.
 */
public Emitter emit(final String event,final Object[] args,final Ack ack){
  EventThread.exec(new Runnable(){
    @Override public void run(){
      List<Object> _args=new ArrayList<Object>(){
{
          add(event);
          if (args != null) {
            addAll(Arrays.asList(args));
          }
        }
      }
;
      Packet packet=new Packet(Parser.EVENT,toJsonArray(_args));
      logger.fine(String.format(""String_Node_Str"",ids));
      Socket.this.acks.put(ids,ack);
      packet.id=ids++;
      Socket.this.packet(packet);
    }
  }
);
  return this;
}",0.970108695652174
102914,"@Override public void call(Object... args){
  System.out.println(String.format(""String_Node_Str"",args));
  events.offer(args);
}","@Override public void call(Object... args){
  System.out.println(""String_Node_Str"" + args);
  events.offer(args);
}",0.9218106995884774
102915,"/** 
 * Returns the tool tip opened on mouse over.
 * @return the tool tip opened on mouse over
 */
@Override public ExtendedTooltip getToolTip(){
  ExtendedTooltip tip=new ExtendedTooltip(true);
  byte[] avatarImage=sourceContact.getImage();
  if (avatarImage != null && avatarImage.length > 0)   tip.setImage(new ImageIcon(avatarImage));
  tip.setTitle(sourceContact.getDisplayName());
  String displayDetails=getDisplayDetails();
  if (displayDetails != null)   tip.addLine(new JLabel[]{new JLabel(getDisplayDetails())});
  try {
    List<ContactDetail> details=sourceContact.getContactDetails(ContactDetail.Category.Phone);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
    details=sourceContact.getContactDetails(ContactDetail.Category.Email);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
    details=sourceContact.getContactDetails(ContactDetail.Category.InstantMessaging);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
  }
 catch (  OperationNotSupportedException e) {
    List<ContactDetail> telDetails=sourceContact.getContactDetails(OperationSetBasicTelephony.class);
    if (telDetails == null || telDetails.isEmpty())     return tip;
    List<ContactDetail> allDetails=sourceContact.getContactDetails();
    addDetailsToToolTip(allDetails,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
  }
  return tip;
}","/** 
 * Returns the tool tip opened on mouse over.
 * @return the tool tip opened on mouse over
 */
@Override public ExtendedTooltip getToolTip(){
  ExtendedTooltip tip=new ExtendedTooltip(true);
  tip.setImage(getScaledAvatar(false,30,30));
  tip.setTitle(sourceContact.getDisplayName());
  String displayDetails=getDisplayDetails();
  if (displayDetails != null)   tip.addLine(new JLabel[]{new JLabel(getDisplayDetails())});
  try {
    List<ContactDetail> details=sourceContact.getContactDetails(ContactDetail.Category.Phone);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
    details=sourceContact.getContactDetails(ContactDetail.Category.Email);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
    details=sourceContact.getContactDetails(ContactDetail.Category.InstantMessaging);
    if (details != null && details.size() > 0)     addDetailsToToolTip(details,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
  }
 catch (  OperationNotSupportedException e) {
    List<ContactDetail> telDetails=sourceContact.getContactDetails(OperationSetBasicTelephony.class);
    if (telDetails == null || telDetails.isEmpty())     return tip;
    List<ContactDetail> allDetails=sourceContact.getContactDetails();
    addDetailsToToolTip(allDetails,GuiActivator.getResources().getI18NString(""String_Node_Str""),tip);
  }
  return tip;
}",0.948395217117684
102916,"/** 
 * Dispatches the given mouse <tt>event</tt> to the underlying buttons.
 * @param event the <tt>MouseEvent</tt> to dispatch
 */
private void dispatchEventToButtons(MouseEvent event){
  TreePath mousePath=getPathForLocation(event.getX(),event.getY());
  if (mousePath == null)   return;
  ContactListTreeCellRenderer renderer=(ContactListTreeCellRenderer)getCellRenderer().getTreeCellRendererComponent(this,mousePath.getLastPathComponent(),true,true,true,getRowForPath(mousePath),true);
  if (!mousePath.equals(getSelectionPath())) {
    renderer.resetRolloverState();
    this.repaint();
    return;
  }
  Rectangle r=this.getPathBounds(mousePath);
  int translatedX=event.getX() - r.x;
  int translatedY=event.getY() - r.y;
  Component mouseComponent=renderer.findComponentAt(translatedX,translatedY);
  if (logger.isDebugEnabled() && mouseComponent != null)   logger.debug(""String_Node_Str"" + mouseComponent.getClass().getName() + ""String_Node_Str""+ mouseComponent.getBounds()+ ""String_Node_Str""+ translatedX+ ""String_Node_Str""+ translatedY);
  if (mouseComponent instanceof SIPCommButton) {
    MouseEvent evt=new MouseEvent(mouseComponent,event.getID(),event.getWhen(),event.getModifiers(),5,5,event.getClickCount(),event.isPopupTrigger());
    ((SIPCommButton)mouseComponent).getModel().setRollover(event.getID() == MouseEvent.MOUSE_MOVED);
    if (event.getID() == MouseEvent.MOUSE_RELEASED && event.getClickCount() < 2 && previouslySelectedNode instanceof GroupNode) {
      previouslySelectedNode=null;
    }
    renderer.resetRolloverState(mouseComponent);
    mouseComponent.dispatchEvent(evt);
  }
 else {
    renderer.resetRolloverState();
  }
  this.repaint();
}","/** 
 * Dispatches the given mouse <tt>event</tt> to the underlying buttons.
 * @param event the <tt>MouseEvent</tt> to dispatch
 */
private void dispatchEventToButtons(MouseEvent event){
  TreePath mousePath=getPathForLocation(event.getX(),event.getY());
  if (mousePath == null)   return;
  ContactListTreeCellRenderer renderer=(ContactListTreeCellRenderer)getCellRenderer().getTreeCellRendererComponent(this,mousePath.getLastPathComponent(),getLastSelectedPathComponent() == mousePath.getLastPathComponent(),true,true,getRowForPath(mousePath),true);
  if (!mousePath.equals(getSelectionPath())) {
    renderer.resetRolloverState();
    this.repaint();
    return;
  }
  Rectangle r=this.getPathBounds(mousePath);
  int translatedX=event.getX() - r.x;
  int translatedY=event.getY() - r.y;
  Component mouseComponent=renderer.findComponentAt(translatedX,translatedY);
  if (logger.isDebugEnabled() && mouseComponent != null)   logger.debug(""String_Node_Str"" + mouseComponent.getClass().getName() + ""String_Node_Str""+ mouseComponent.getBounds()+ ""String_Node_Str""+ translatedX+ ""String_Node_Str""+ translatedY);
  if (mouseComponent instanceof SIPCommButton) {
    MouseEvent evt=new MouseEvent(mouseComponent,event.getID(),event.getWhen(),event.getModifiers(),5,5,event.getClickCount(),event.isPopupTrigger());
    ((SIPCommButton)mouseComponent).getModel().setRollover(event.getID() == MouseEvent.MOUSE_MOVED);
    if (event.getID() == MouseEvent.MOUSE_RELEASED && event.getClickCount() < 2 && previouslySelectedNode instanceof GroupNode) {
      previouslySelectedNode=null;
    }
    renderer.resetRolloverState(mouseComponent);
    mouseComponent.dispatchEvent(evt);
  }
 else {
    renderer.resetRolloverState();
  }
  this.repaint();
}",0.9795441262419636
102917,"/** 
 * Returns the tool tip opened on mouse over.
 * @return the tool tip opened on mouse over
 */
@Override public ExtendedTooltip getToolTip(){
  ExtendedTooltip tip=new ExtendedTooltip(true);
  byte[] avatarImage=metaContact.getAvatar();
  if (avatarImage != null && avatarImage.length > 0)   tip.setImage(new ImageIcon(avatarImage));
  tip.setTitle(metaContact.getDisplayName());
  loadTooltip(tip);
  return tip;
}","/** 
 * Returns the tool tip opened on mouse over.
 * @return the tool tip opened on mouse over
 */
@Override public ExtendedTooltip getToolTip(){
  ExtendedTooltip tip=new ExtendedTooltip(true);
  tip.setImage(getScaledAvatar(false,30,30));
  tip.setTitle(metaContact.getDisplayName());
  loadTooltip(tip);
  return tip;
}",0.7240915208613729
102918,"/** 
 * Adds next payload type information update request to  {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.
 * @param map the map of content name to RTP description packet extension.
 * @param localChannelsInfo {@link ColibriConferenceIQ} holding info aboutColibri channels to be updated.
 * @return <tt>true</tt> if the request yields any changes in Colibrichannels state on the bridge or <tt>false</tt> otherwise. In general when <tt>false</tt> is returned for all combined requests it makes no sense to send it.
 */
public boolean addRtpDescription(Map<String,RtpDescriptionPacketExtension> map,ColibriConferenceIQ localChannelsInfo){
  Objects.requireNonNull(map,""String_Node_Str"");
  Objects.requireNonNull(localChannelsInfo,""String_Node_Str"");
  if (conferenceState == null || StringUtils.isNullOrEmpty(conferenceState.getID())) {
    return false;
  }
  assertRequestType(RequestType.CHANNEL_INFO_UPDATE);
  request.setType(IQ.Type.SET);
  boolean anyUpdates=false;
  for (  Map.Entry<String,RtpDescriptionPacketExtension> e : map.entrySet()) {
    String contentName=e.getKey();
    ColibriConferenceIQ.ChannelCommon channel=getColibriChannel(localChannelsInfo,contentName);
    if (channel != null && channel instanceof ColibriConferenceIQ.Channel) {
      RtpDescriptionPacketExtension rtpPE=e.getValue();
      if (rtpPE == null) {
        continue;
      }
      List<PayloadTypePacketExtension> pts=rtpPE.getPayloadTypes();
      if (pts == null || pts.isEmpty()) {
        continue;
      }
      anyUpdates=true;
      ColibriConferenceIQ.Channel channelRequest=request.getOrCreateContent(contentName).getChannel(channel.getID());
      if (channelRequest == null) {
        channelRequest=new ColibriConferenceIQ.Channel();
        channelRequest.setID(channel.getID());
      }
      for (      PayloadTypePacketExtension ptPE : pts) {
        channelRequest.addPayloadType(ptPE);
      }
    }
  }
  return anyUpdates;
}","/** 
 * Adds next payload type information update request to  {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.
 * @param map the map of content name to RTP description packet extension.
 * @param localChannelsInfo {@link ColibriConferenceIQ} holding info aboutColibri channels to be updated.
 * @return <tt>true</tt> if the request yields any changes in Colibrichannels state on the bridge or <tt>false</tt> otherwise. In general when <tt>false</tt> is returned for all combined requests it makes no sense to send it.
 */
public boolean addRtpDescription(Map<String,RtpDescriptionPacketExtension> map,ColibriConferenceIQ localChannelsInfo){
  Objects.requireNonNull(map,""String_Node_Str"");
  Objects.requireNonNull(localChannelsInfo,""String_Node_Str"");
  if (conferenceState == null || StringUtils.isNullOrEmpty(conferenceState.getID())) {
    return false;
  }
  assertRequestType(RequestType.CHANNEL_INFO_UPDATE);
  request.setType(IQ.Type.SET);
  boolean anyUpdates=false;
  for (  Map.Entry<String,RtpDescriptionPacketExtension> e : map.entrySet()) {
    String contentName=e.getKey();
    ColibriConferenceIQ.ChannelCommon channel=getColibriChannel(localChannelsInfo,contentName);
    if (channel != null && channel instanceof ColibriConferenceIQ.Channel) {
      RtpDescriptionPacketExtension rtpPE=e.getValue();
      if (rtpPE == null) {
        continue;
      }
      List<PayloadTypePacketExtension> pts=rtpPE.getPayloadTypes();
      if (pts == null || pts.isEmpty()) {
        continue;
      }
      anyUpdates=true;
      ColibriConferenceIQ.Channel channelRequest=(ColibriConferenceIQ.Channel)getRequestChannel(request.getOrCreateContent(contentName),channel);
      if (channelRequest == null) {
        channelRequest=new ColibriConferenceIQ.Channel();
        channelRequest.setID(channel.getID());
      }
      for (      PayloadTypePacketExtension ptPE : pts) {
        channelRequest.addPayloadType(ptPE);
      }
    }
  }
  return anyUpdates;
}",0.9129113924050632
102919,"/** 
 * {@inheritDoc}
 */
@Override public IQ parseIQ(XmlPullParser parser) throws Exception {
  String namespace=parser.getNamespace();
  if (!JibriIq.NAMESPACE.equals(namespace)) {
    return null;
  }
  String rootElement=parser.getName();
  JibriIq iq;
  if (JibriIq.ELEMENT_NAME.equals(rootElement)) {
    iq=new JibriIq();
    String action=parser.getAttributeValue(""String_Node_Str"",JibriIq.ACTION_ATTR_NAME);
    iq.setAction(JibriIq.Action.parse(action));
    String status=parser.getAttributeValue(""String_Node_Str"",JibriIq.STATUS_ATTR_NAME);
    iq.setStatus(JibriIq.Status.parse(status));
    String url=parser.getAttributeValue(""String_Node_Str"",JibriIq.URL_ATTR_NAME);
    if (!StringUtils.isNullOrEmpty(url))     iq.setUrl(url);
    String streamId=parser.getAttributeValue(""String_Node_Str"",JibriIq.STREAM_ID_ATTR_NAME);
    if (!StringUtils.isNullOrEmpty(streamId))     iq.setStreamId(streamId);
    String followEntity=parser.getAttributeValue(""String_Node_Str"",JibriIq.FOLLOW_ENTITY_ATTR_NAME);
    if (!StringUtils.isNullOrEmpty(followEntity))     iq.setFollowEntity(followEntity);
  }
 else {
    return null;
  }
  boolean done=false;
  while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
        String name=parser.getName();
        if (rootElement.equals(name)) {
          done=true;
        }
        break;
      }
  }
}
return iq;
}","/** 
 * {@inheritDoc}
 */
@Override public IQ parseIQ(XmlPullParser parser) throws Exception {
  String namespace=parser.getNamespace();
  if (!JibriIq.NAMESPACE.equals(namespace)) {
    return null;
  }
  String rootElement=parser.getName();
  JibriIq iq;
  if (JibriIq.ELEMENT_NAME.equals(rootElement)) {
    iq=new JibriIq();
    String action=parser.getAttributeValue(""String_Node_Str"",JibriIq.ACTION_ATTR_NAME);
    iq.setAction(JibriIq.Action.parse(action));
    String status=parser.getAttributeValue(""String_Node_Str"",JibriIq.STATUS_ATTR_NAME);
    iq.setStatus(JibriIq.Status.parse(status));
    String url=parser.getAttributeValue(""String_Node_Str"",JibriIq.URL_ATTR_NAME);
    if (!StringUtils.isNullOrEmpty(url))     iq.setUrl(url);
    String streamId=parser.getAttributeValue(""String_Node_Str"",JibriIq.STREAM_ID_ATTR_NAME);
    if (!StringUtils.isNullOrEmpty(streamId))     iq.setStreamId(streamId);
  }
 else {
    return null;
  }
  boolean done=false;
  while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
        String name=parser.getName();
        if (rootElement.equals(name)) {
          done=true;
        }
        break;
      }
  }
}
return iq;
}",0.926487747957993
102920,"/** 
 * Removes from the specified list of candidates providers connected to a registrar that does not match the IP address that we are receiving a request from.
 * @param candidates the list of providers we've like to filter.
 * @param request the request that we are currently dispatching
 */
private void filterByAddress(List<ProtocolProviderServiceSipImpl> candidates,Request request){
  Iterator<ProtocolProviderServiceSipImpl> iterPP=candidates.iterator();
  while (iterPP.hasNext()) {
    ProtocolProviderServiceSipImpl candidate=iterPP.next();
    if (candidate.getAccountID().getAccountPropertyBoolean(ProtocolProviderFactory.FORCE_PROXY_BYPASS,false)) {
      continue;
    }
    if (candidate.getRegistrarConnection() == null) {
      continue;
    }
    if (!candidate.getRegistrarConnection().isRegistrarless() && !candidate.getRegistrarConnection().isRequestFromSameConnection(request)) {
      iterPP.remove();
    }
  }
}","/** 
 * Removes from the specified list of candidates providers connected to a registrar that does not match the IP address that we are receiving a request from.
 * @param candidates the list of providers we've like to filter.
 * @param request the request that we are currently dispatching
 */
private void filterByAddress(List<ProtocolProviderServiceSipImpl> candidates,Request request){
  Iterator<ProtocolProviderServiceSipImpl> iterPP=candidates.iterator();
  while (iterPP.hasNext()) {
    ProtocolProviderServiceSipImpl candidate=iterPP.next();
    boolean forceProxyBypass=candidate.getAccountID().getAccountPropertyBoolean(ProtocolProviderFactory.FORCE_PROXY_BYPASS,false);
    if (forceProxyBypass) {
      continue;
    }
    if (candidate.getRegistrarConnection() == null) {
      continue;
    }
    if (!candidate.getRegistrarConnection().isRegistrarless() && !candidate.getRegistrarConnection().isRequestFromSameConnection(request)) {
      iterPP.remove();
    }
  }
}",0.9713690786048932
102921,"/** 
 * Indicates if the proxy force bypass-configure is enabled. * @return <tt>true</tt> if the proxy force bypass-configuration is enabled, <tt>false</tt> - otherwise
 */
boolean isProxyForceBypassConfigureEnabled(){
  return proxyAutoCheckBox.isSelected();
}","/** 
 * Indicates if the proxy force bypass-configure is enabled. * @return <tt>true</tt> if the proxy force bypass-configuration is enabled, <tt>false</tt> - otherwise
 */
boolean isProxyForceBypassConfigureEnabled(){
  return proxyForceBypassCheckBox.isSelected();
}",0.9716446124763704
102922,"/** 
 * Loads given account registration object.
 * @param sipAccReg the account registration object to load.
 */
public void loadAccount(SIPAccountRegistration sipAccReg){
  String password=sipAccReg.getPassword();
  String serverAddress=sipAccReg.getServerAddress();
  String displayName=sipAccReg.getAccountPropertyString(ProtocolProviderFactory.DISPLAY_NAME);
  String authName=sipAccReg.getAuthorizationName();
  String serverPort=sipAccReg.getServerPort();
  String proxyAddress=sipAccReg.getProxy();
  String proxyPort=sipAccReg.getProxyPort();
  String preferredTransport=sipAccReg.getPreferredTransport();
  boolean enablePresence=sipAccReg.isEnablePresence();
  boolean forceP2P=sipAccReg.isForceP2PMode();
  String clientTlsCertificateId=sipAccReg.getTlsClientCertificate();
  boolean proxyAutoConfigureEnabled=sipAccReg.isProxyAutoConfigure();
  boolean proxyForceBypassConfigureEnabled=sipAccReg.isProxyForceBypassConfigure();
  String pollingPeriod=sipAccReg.getPollingPeriod();
  String subscriptionPeriod=sipAccReg.getSubscriptionExpiration();
  String keepAliveMethod=sipAccReg.getKeepAliveMethod();
  String keepAliveInterval=sipAccReg.getKeepAliveInterval();
  String dtmfMethod=sipAccReg.getDTMFMethod();
  String dtmfMinimalToneDuration=sipAccReg.getDtmfMinimalToneDuration();
  String voicemailURI=sipAccReg.getVoicemailURI();
  String voicemailCheckURI=sipAccReg.getVoicemailCheckURI();
  boolean xCapEnable=sipAccReg.isXCapEnable();
  boolean xivoEnable=sipAccReg.isXiVOEnable();
  boolean isServerOverridden=sipAccReg.isServerOverridden();
  connectionPanel.setServerOverridden(isServerOverridden);
  accountPanel.setUserIDEnabled(false);
  accountPanel.setUserID(sipAccReg.getId());
  if (password != null) {
    accountPanel.setPassword(password);
    accountPanel.setRememberPassword(true);
  }
 else {
    accountPanel.setPassword(""String_Node_Str"");
    accountPanel.setRememberPassword(false);
  }
  connectionPanel.setServerAddress(serverAddress);
  connectionPanel.setServerEnabled(isServerOverridden);
  accountPanel.setDisplayName(displayName);
  if (authName != null && authName.length() > 0)   connectionPanel.setAuthenticationName(authName);
  connectionPanel.setCertificateId(clientTlsCertificateId);
  connectionPanel.enablesProxyAutoConfigure(proxyAutoConfigureEnabled);
  connectionPanel.setServerPort(serverPort);
  connectionPanel.setProxy(proxyAddress);
  connectionPanel.setSelectedTransport(preferredTransport);
  connectionPanel.setProxyPort(proxyPort);
  securityPanel.loadAccount(sipAccReg.getSecurityRegistration());
  presencePanel.reinit();
  presencePanel.setPresenceEnabled(enablePresence);
  presencePanel.setForcePeerToPeerMode(forceP2P);
  presencePanel.setPollPeriod(pollingPeriod);
  presencePanel.setSubscriptionExpiration(subscriptionPeriod);
  if (!enablePresence) {
    presencePanel.setPresenceOptionsEnabled(enablePresence);
  }
  connectionPanel.setKeepAliveMethod(keepAliveMethod);
  connectionPanel.setKeepAliveInterval(keepAliveInterval);
  connectionPanel.setDTMFMethod(dtmfMethod);
  connectionPanel.setDtmfMinimalToneDuration(dtmfMinimalToneDuration);
  boolean mwiEnabled=sipAccReg.isMessageWaitingIndicationsEnabled();
  connectionPanel.setMessageWaitingIndications(mwiEnabled);
  if (!StringUtils.isNullOrEmpty(voicemailURI))   connectionPanel.setVoicemailURI(voicemailURI);
  if (!StringUtils.isNullOrEmpty(voicemailCheckURI))   connectionPanel.setVoicemailCheckURI(voicemailCheckURI);
  if (xCapEnable) {
    presencePanel.setXCapEnable(xCapEnable);
    presencePanel.setClistOptionEnableEnabled(xCapEnable);
  }
 else   if (xivoEnable) {
    presencePanel.setXiVOEnable(xivoEnable);
    presencePanel.setClistOptionEnableEnabled(xivoEnable);
  }
  boolean clistUseSipCredentials=sipAccReg.isClistOptionUseSipCredentials();
  presencePanel.setClistOptionUseSipCredentials(clistUseSipCredentials);
  presencePanel.setClistOptionUseSipCredentialsEnabled(clistUseSipCredentials);
  presencePanel.setClistOptionServerUri(sipAccReg.getClistOptionServerUri());
  presencePanel.setClistOptionUser(sipAccReg.getClistOptionUser());
  presencePanel.setClistOptionPassword(sipAccReg.getClistOptionPassword());
  encodingsPanel.loadAccount(sipAccReg.getEncodingsRegistration());
}","/** 
 * Loads given account registration object.
 * @param sipAccReg the account registration object to load.
 */
public void loadAccount(SIPAccountRegistration sipAccReg){
  String password=sipAccReg.getPassword();
  String serverAddress=sipAccReg.getServerAddress();
  String displayName=sipAccReg.getAccountPropertyString(ProtocolProviderFactory.DISPLAY_NAME);
  String authName=sipAccReg.getAuthorizationName();
  String serverPort=sipAccReg.getServerPort();
  String proxyAddress=sipAccReg.getProxy();
  String proxyPort=sipAccReg.getProxyPort();
  String preferredTransport=sipAccReg.getPreferredTransport();
  boolean enablePresence=sipAccReg.isEnablePresence();
  boolean forceP2P=sipAccReg.isForceP2PMode();
  String clientTlsCertificateId=sipAccReg.getTlsClientCertificate();
  boolean proxyAutoConfigureEnabled=sipAccReg.isProxyAutoConfigure();
  boolean proxyForceBypassConfigureEnabled=sipAccReg.isProxyForceBypassConfigure();
  String pollingPeriod=sipAccReg.getPollingPeriod();
  String subscriptionPeriod=sipAccReg.getSubscriptionExpiration();
  String keepAliveMethod=sipAccReg.getKeepAliveMethod();
  String keepAliveInterval=sipAccReg.getKeepAliveInterval();
  String dtmfMethod=sipAccReg.getDTMFMethod();
  String dtmfMinimalToneDuration=sipAccReg.getDtmfMinimalToneDuration();
  String voicemailURI=sipAccReg.getVoicemailURI();
  String voicemailCheckURI=sipAccReg.getVoicemailCheckURI();
  boolean xCapEnable=sipAccReg.isXCapEnable();
  boolean xivoEnable=sipAccReg.isXiVOEnable();
  boolean isServerOverridden=sipAccReg.isServerOverridden();
  connectionPanel.setServerOverridden(isServerOverridden);
  accountPanel.setUserIDEnabled(false);
  accountPanel.setUserID(sipAccReg.getId());
  if (password != null) {
    accountPanel.setPassword(password);
    accountPanel.setRememberPassword(true);
  }
 else {
    accountPanel.setPassword(""String_Node_Str"");
    accountPanel.setRememberPassword(false);
  }
  connectionPanel.setServerAddress(serverAddress);
  connectionPanel.setServerEnabled(isServerOverridden);
  accountPanel.setDisplayName(displayName);
  if (authName != null && authName.length() > 0)   connectionPanel.setAuthenticationName(authName);
  connectionPanel.setCertificateId(clientTlsCertificateId);
  connectionPanel.enablesProxyAutoConfigure(proxyAutoConfigureEnabled);
  connectionPanel.enablesProxyForceBypassConfigure(proxyForceBypassConfigureEnabled);
  connectionPanel.setServerPort(serverPort);
  connectionPanel.setProxy(proxyAddress);
  connectionPanel.setSelectedTransport(preferredTransport);
  connectionPanel.setProxyPort(proxyPort);
  securityPanel.loadAccount(sipAccReg.getSecurityRegistration());
  presencePanel.reinit();
  presencePanel.setPresenceEnabled(enablePresence);
  presencePanel.setForcePeerToPeerMode(forceP2P);
  presencePanel.setPollPeriod(pollingPeriod);
  presencePanel.setSubscriptionExpiration(subscriptionPeriod);
  if (!enablePresence) {
    presencePanel.setPresenceOptionsEnabled(enablePresence);
  }
  connectionPanel.setKeepAliveMethod(keepAliveMethod);
  connectionPanel.setKeepAliveInterval(keepAliveInterval);
  connectionPanel.setDTMFMethod(dtmfMethod);
  connectionPanel.setDtmfMinimalToneDuration(dtmfMinimalToneDuration);
  boolean mwiEnabled=sipAccReg.isMessageWaitingIndicationsEnabled();
  connectionPanel.setMessageWaitingIndications(mwiEnabled);
  if (!StringUtils.isNullOrEmpty(voicemailURI))   connectionPanel.setVoicemailURI(voicemailURI);
  if (!StringUtils.isNullOrEmpty(voicemailCheckURI))   connectionPanel.setVoicemailCheckURI(voicemailCheckURI);
  if (xCapEnable) {
    presencePanel.setXCapEnable(xCapEnable);
    presencePanel.setClistOptionEnableEnabled(xCapEnable);
  }
 else   if (xivoEnable) {
    presencePanel.setXiVOEnable(xivoEnable);
    presencePanel.setClistOptionEnableEnabled(xivoEnable);
  }
  boolean clistUseSipCredentials=sipAccReg.isClistOptionUseSipCredentials();
  presencePanel.setClistOptionUseSipCredentials(clistUseSipCredentials);
  presencePanel.setClistOptionUseSipCredentialsEnabled(clistUseSipCredentials);
  presencePanel.setClistOptionServerUri(sipAccReg.getClistOptionServerUri());
  presencePanel.setClistOptionUser(sipAccReg.getClistOptionUser());
  presencePanel.setClistOptionPassword(sipAccReg.getClistOptionPassword());
  encodingsPanel.loadAccount(sipAccReg.getEncodingsRegistration());
}",0.9899743529960364
102923,"/** 
 * Connects xmpp connection and login. Returning the state whether is it final - Abort due to certificate cancel or keep trying cause only current address has failed or stop trying cause we succeeded.
 * @param address the address to connect to
 * @param serviceName the service name to use
 * @param userName the username to use
 * @param resource and the resource.
 * @param loginStrategy the login strategy to use
 * @return return the state how to continue the connect process.
 * @throws XMPPException if we cannot connect for some reason
 */
private ConnectState connectAndLogin(InetSocketAddress address,String serviceName,String userName,String resource,JabberLoginStrategy loginStrategy) throws XMPPException {
  ConnectionConfiguration confConn=new ConnectionConfiguration(address.getAddress().getHostAddress(),address.getPort(),serviceName,proxy);
  if (getOperationSet(OperationSetPersistentPresence.class) != null)   confConn.setSendPresence(false);
  confConn.setReconnectionAllowed(false);
  boolean tlsRequired=loginStrategy.isTlsRequired();
  confConn.setSecurityMode(tlsRequired ? ConnectionConfiguration.SecurityMode.required : ConnectionConfiguration.SecurityMode.enabled);
  TLSUtils.setTLSOnly(confConn);
  if (connection != null) {
    logger.error(""String_Node_Str"" + connection.isConnected(),new Exception(""String_Node_Str"" + getAccountID().getAccountAddress()));
    disconnectAndCleanConnection();
  }
  connection=new XMPPConnection(confConn);
  this.address=address;
  try {
    CertificateService cvs=getCertificateVerificationService();
    if (cvs != null) {
      SSLContext sslContext=loginStrategy.createSslContext(cvs,getTrustManager(cvs,serviceName));
      if (logger.isDebugEnabled()) {
        final StringBuilder buff=new StringBuilder();
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getProtocols()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getProtocols()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getCipherSuites()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getCipherSuites()));
        logger.debug(buff.toString());
      }
      confConn.setCustomSSLContext(sslContext);
    }
 else     if (tlsRequired)     throw new XMPPException(""String_Node_Str"" + ""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    logger.error(""String_Node_Str"",e);
    throw new XMPPException(""String_Node_Str"",e);
  }
  if (debugger == null)   debugger=new SmackPacketDebugger();
  debugger.setConnection(connection);
  connection.addPacketListener(debugger,null);
  connection.addPacketInterceptor(debugger,null);
  connection.connect();
  setTrafficClass();
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  registerServiceDiscoveryManager();
  if (connectionListener == null) {
    connectionListener=new JabberConnectionListener();
  }
  if (!connection.isSecureConnection() && tlsRequired) {
    throw new XMPPException(""String_Node_Str"");
  }
  if (!connection.isConnected()) {
    disconnectAndCleanConnection();
    logger.error(""String_Node_Str"");
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,null);
    return ConnectState.ABORT_CONNECTING;
  }
 else {
    if (connection.getSocket() instanceof SSLSocket) {
      final SSLSocket sslSocket=(SSLSocket)connection.getSocket();
      StringBuilder buff=new StringBuilder();
      buff.append(""String_Node_Str"").append(""String_Node_Str"").append(sslSocket.getSession().getProtocol()).append(""String_Node_Str"").append(""String_Node_Str"").append(sslSocket.getSession().getCipherSuite());
      logger.info(buff.toString());
      if (logger.isDebugEnabled()) {
        buff=new StringBuilder();
        buff.append(""String_Node_Str"");
        try {
          buff.append(Arrays.toString(sslSocket.getSession().getPeerCertificates()));
        }
 catch (        SSLPeerUnverifiedException ex) {
          buff.append(""String_Node_Str"").append(ex.getLocalizedMessage()).append(""String_Node_Str"");
        }
        logger.debug(buff.toString());
      }
    }
    connection.addConnectionListener(connectionListener);
  }
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERING,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
  if (!loginStrategy.login(connection,userName,resource)) {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,loginStrategy.getClass().getName() + ""String_Node_Str"");
    return ConnectState.ABORT_CONNECTING;
  }
  if (connection.isAuthenticated()) {
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.STOP_TRYING;
  }
 else {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.CONTINUE_TRYING;
  }
}","/** 
 * Connects xmpp connection and login. Returning the state whether is it final - Abort due to certificate cancel or keep trying cause only current address has failed or stop trying cause we succeeded.
 * @param address the address to connect to
 * @param serviceName the service name to use
 * @param userName the username to use
 * @param resource and the resource.
 * @param loginStrategy the login strategy to use
 * @return return the state how to continue the connect process.
 * @throws XMPPException if we cannot connect for some reason
 */
private ConnectState connectAndLogin(InetSocketAddress address,String serviceName,String userName,String resource,JabberLoginStrategy loginStrategy) throws XMPPException {
  ConnectionConfiguration confConn=new ConnectionConfiguration(address.getAddress().getHostAddress(),address.getPort(),serviceName,proxy);
  if (getOperationSet(OperationSetPersistentPresence.class) != null)   confConn.setSendPresence(false);
  confConn.setReconnectionAllowed(false);
  boolean tlsRequired=loginStrategy.isTlsRequired();
  confConn.setSecurityMode(tlsRequired ? ConnectionConfiguration.SecurityMode.required : ConnectionConfiguration.SecurityMode.enabled);
  TLSUtils.setTLSOnly(confConn);
  if (connection != null) {
    logger.error(""String_Node_Str"" + connection.isConnected(),new Exception(""String_Node_Str"" + getAccountID().getAccountAddress()));
    disconnectAndCleanConnection();
  }
  connection=new XMPPConnection(confConn);
  this.address=address;
  try {
    CertificateService cvs=getCertificateVerificationService();
    if (cvs != null) {
      SSLContext sslContext=loginStrategy.createSslContext(cvs,getTrustManager(cvs,serviceName));
      if (logger.isDebugEnabled() && sslContext != null) {
        final StringBuilder buff=new StringBuilder();
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getProtocols()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getProtocols()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getCipherSuites()));
        buff.append(""String_Node_Str"");
        buff.append(""String_Node_Str"");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getCipherSuites()));
        logger.debug(buff.toString());
      }
      confConn.setCustomSSLContext(sslContext);
    }
 else     if (tlsRequired)     throw new XMPPException(""String_Node_Str"" + ""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    logger.error(""String_Node_Str"",e);
    throw new XMPPException(""String_Node_Str"",e);
  }
  if (debugger == null)   debugger=new SmackPacketDebugger();
  debugger.setConnection(connection);
  connection.addPacketListener(debugger,null);
  connection.addPacketInterceptor(debugger,null);
  connection.connect();
  setTrafficClass();
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  registerServiceDiscoveryManager();
  if (connectionListener == null) {
    connectionListener=new JabberConnectionListener();
  }
  if (!connection.isSecureConnection() && tlsRequired) {
    throw new XMPPException(""String_Node_Str"");
  }
  if (!connection.isConnected()) {
    disconnectAndCleanConnection();
    logger.error(""String_Node_Str"");
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,null);
    return ConnectState.ABORT_CONNECTING;
  }
 else {
    if (connection.getSocket() instanceof SSLSocket) {
      final SSLSocket sslSocket=(SSLSocket)connection.getSocket();
      StringBuilder buff=new StringBuilder();
      buff.append(""String_Node_Str"").append(""String_Node_Str"").append(sslSocket.getSession().getProtocol()).append(""String_Node_Str"").append(""String_Node_Str"").append(sslSocket.getSession().getCipherSuite());
      logger.info(buff.toString());
      if (logger.isDebugEnabled()) {
        buff=new StringBuilder();
        buff.append(""String_Node_Str"");
        try {
          buff.append(Arrays.toString(sslSocket.getSession().getPeerCertificates()));
        }
 catch (        SSLPeerUnverifiedException ex) {
          buff.append(""String_Node_Str"").append(ex.getLocalizedMessage()).append(""String_Node_Str"");
        }
        logger.debug(buff.toString());
      }
    }
    connection.addConnectionListener(connectionListener);
  }
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERING,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
  if (!loginStrategy.login(connection,userName,resource)) {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,loginStrategy.getClass().getName() + ""String_Node_Str"");
    return ConnectState.ABORT_CONNECTING;
  }
  if (connection.isAuthenticated()) {
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.STOP_TRYING;
  }
 else {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.CONTINUE_TRYING;
  }
}",0.998119658119658
102924,"/** 
 * @param name the name to set
 */
public void setName(String name){
  this.name=name;
}","/** 
 * @param name the name to set
 */
public void setName(String name){
  setAttribute(NAME_ATTR_NAME,name);
}",0.8292682926829268
102925,"/** 
 * @return the value
 */
public Object getValue(){
  return value;
}","/** 
 * @return the value
 */
public Object getValue(){
  return getAttribute(VALUE_ATTR_NAME);
}",0.8235294117647058
102926,"/** 
 * @return the name
 */
public String getName(){
  return name;
}","/** 
 * @return the name
 */
public String getName(){
  return getAttributeAsString(NAME_ATTR_NAME);
}",0.7790697674418605
102927,"/** 
 * @param value the value to set
 */
public void setValue(Object value){
  this.value=value;
}","/** 
 * @param value the value to set
 */
public void setValue(Object value){
  setAttribute(VALUE_ATTR_NAME,value);
}",0.8294930875576036
102928,"/** 
 * Starts the configuration service
 * @param bundleContext the <tt>BundleContext</tt> as provided by the OSGiframework.
 * @throws Exception if anything goes wrong
 */
public void start(BundleContext bundleContext) throws Exception {
  FileAccessService fas=ServiceUtils.getService(bundleContext,FileAccessService.class);
  if (fas != null) {
    File useDatabaseConfig;
    try {
      useDatabaseConfig=fas.getPrivatePersistentFile(""String_Node_Str"",FileCategory.PROFILE);
    }
 catch (    IllegalStateException ise) {
      useDatabaseConfig=null;
    }
    if ((useDatabaseConfig != null) && useDatabaseConfig.exists()) {
      logger.info(""String_Node_Str"");
      this.cs=new JdbcConfigService(fas);
    }
  }
  if (this.cs == null)   this.cs=LibJitsi.getConfigurationService();
  bundleContext.registerService(ConfigurationService.class.getName(),this.cs,null);
  fixPermissions(this.cs);
}","/** 
 * Starts the configuration service
 * @param bundleContext the <tt>BundleContext</tt> as provided by the OSGiframework.
 * @throws Exception if anything goes wrong
 */
public void start(BundleContext bundleContext) throws Exception {
  FileAccessService fas=ServiceUtils.getService(bundleContext,FileAccessService.class);
  if (fas != null) {
    File useDatabaseConfig;
    try {
      useDatabaseConfig=fas.getPrivatePersistentFile(""String_Node_Str"",FileCategory.PROFILE);
    }
 catch (    Exception ise) {
      useDatabaseConfig=null;
    }
    if ((useDatabaseConfig != null) && useDatabaseConfig.exists()) {
      logger.info(""String_Node_Str"");
      this.cs=new JdbcConfigService(fas);
    }
  }
  if (this.cs == null)   this.cs=LibJitsi.getConfigurationService();
  bundleContext.registerService(ConfigurationService.class.getName(),this.cs,null);
  fixPermissions(this.cs);
}",0.9933184855233852
102929,"/** 
 * Send instant message.
 * @param to contact to send message to
 * @param original message to send
 * @throws IllegalStateException in case of bad internal state
 * @throws IllegalArgumentException in case invalid arguments have beenpassed
 */
@Override public void sendInstantMessage(final Contact to,final Message original) throws IllegalStateException, IllegalArgumentException {
  if (!(original instanceof MessageIrcImpl)) {
    LOGGER.error(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  final MessageDeliveredEvent[] msgDeliveryPendingEvts=messageDeliveryPendingTransform(new MessageDeliveredEvent(original,to));
  try {
    for (    MessageDeliveredEvent event : msgDeliveryPendingEvts) {
      if (event == null) {
        continue;
      }
      String transformedContent=event.getSourceMessage().getContent();
      MessageIrcImpl message=this.createMessage(transformedContent,original.getContentType(),original.getEncoding(),""String_Node_Str"");
      final IrcConnection connection=this.provider.getIrcStack().getConnection();
      if (connection == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      try {
        if (!event.isMessageEncrypted() && message.isCommand()) {
          try {
            connection.getMessageManager().command(to,message);
            MessageReceivedEvent systemEvent=new MessageReceivedEvent(message,to,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            fireMessageEvent(systemEvent);
          }
 catch (          final UnsupportedCommandException e) {
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.UNSUPPORTED_OPERATION);
          }
catch (          BadCommandException e) {
            LOGGER.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",e);
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.INTERNAL_ERROR);
          }
catch (          BadCommandInvocationException e) {
            MessageIrcImpl helpMessage=new MessageIrcImpl(e.getHelp(),OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE,OperationSetBasicInstantMessaging.DEFAULT_MIME_ENCODING,""String_Node_Str"");
            MessageReceivedEvent helpEvent=new MessageReceivedEvent(helpMessage,to,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            fireMessageEvent(helpEvent);
          }
        }
 else {
          connection.getMessageManager().message(to,message);
          fireMessageDelivered(original,to);
        }
      }
 catch (      RuntimeException e) {
        LOGGER.debug(""String_Node_Str"" + message);
        throw e;
      }
    }
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"" + original,e);
    fireMessageDeliveryFailed(original,to,MessageDeliveryFailedEvent.NETWORK_FAILURE);
  }
}","/** 
 * Send instant message.
 * @param to contact to send message to
 * @param original message to send
 * @throws IllegalStateException in case of bad internal state
 * @throws IllegalArgumentException in case invalid arguments have beenpassed
 */
@Override public void sendInstantMessage(final Contact to,final Message original) throws IllegalStateException, IllegalArgumentException {
  if (!(original instanceof MessageIrcImpl)) {
    LOGGER.error(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  final IrcConnection connection=this.provider.getIrcStack().getConnection();
  if (connection == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final MessageDeliveredEvent[] msgDeliveryPendingEvts=messageDeliveryPendingTransform(new MessageDeliveredEvent(original,to));
  if (msgDeliveryPendingEvts.length == 0) {
    LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  try {
    for (    MessageDeliveredEvent event : msgDeliveryPendingEvts) {
      if (event == null) {
        continue;
      }
      String transformedContent=event.getSourceMessage().getContent();
      MessageIrcImpl message=this.createMessage(transformedContent,original.getContentType(),original.getEncoding(),""String_Node_Str"");
      try {
        if (!event.isMessageEncrypted() && message.isCommand()) {
          try {
            connection.getMessageManager().command(to,message);
          }
 catch (          final UnsupportedCommandException e) {
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.UNSUPPORTED_OPERATION);
          }
catch (          BadCommandException e) {
            LOGGER.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",e);
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.INTERNAL_ERROR);
          }
catch (          BadCommandInvocationException e) {
            MessageIrcImpl helpMessage=new MessageIrcImpl(e.getHelp(),OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE,OperationSetBasicInstantMessaging.DEFAULT_MIME_ENCODING,""String_Node_Str"");
            MessageReceivedEvent helpEvent=new MessageReceivedEvent(helpMessage,to,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            fireMessageEvent(helpEvent);
          }
        }
 else {
          connection.getMessageManager().message(to,message);
        }
      }
 catch (      RuntimeException e) {
        LOGGER.debug(""String_Node_Str"" + message);
        throw e;
      }
    }
    fireMessageDelivered(original,to);
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"" + original,e);
    fireMessageDeliveryFailed(original,to,MessageDeliveryFailedEvent.NETWORK_FAILURE);
  }
}",0.8428519461622408
102930,"/** 
 * Returns an InetAddress instance that represents the localhost, and that a socket can bind upon or distribute to peers as a contact address.
 * @param intendedDestination the destination that we'd like to use thelocalhost address with.
 * @return an InetAddress instance representing the local host, and thata socket can bind upon or distribute to peers as a contact address.
 */
public synchronized InetAddress getLocalHost(InetAddress intendedDestination){
  InetAddress localHost=null;
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + ""String_Node_Str"" + intendedDestination + ""String_Node_Str"");
  }
  String osVersion;
  if (OSUtils.IS_WINDOWS && !(osVersion=System.getProperty(""String_Node_Str"")).startsWith(""String_Node_Str"") && !osVersion.startsWith(""String_Node_Str"")) {
    byte[] src=Win32LocalhostRetriever.getSourceForDestination(intendedDestination.getAddress());
    if (src == null) {
      logger.warn(""String_Node_Str"");
    }
 else {
      try {
        localHost=InetAddress.getByAddress(src);
      }
 catch (      UnknownHostException uhe) {
        logger.warn(""String_Node_Str"",uhe);
      }
    }
  }
 else {
    localHostFinderSocket.connect(intendedDestination,RANDOM_ADDR_DISC_PORT);
    localHost=localHostFinderSocket.getLocalAddress();
    localHostFinderSocket.disconnect();
  }
  if (localHost == null) {
    try {
      localHost=InetAddress.getLocalHost();
    }
 catch (    UnknownHostException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  if (localHost.isAnyLocalAddress()) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + ""String_Node_Str"");
    }
    try {
      if (intendedDestination instanceof Inet6Address) {
        boolean done=false;
        Enumeration<NetworkInterface> ifaces=NetworkInterface.getNetworkInterfaces();
        while (!done && ifaces.hasMoreElements()) {
          Enumeration<InetAddress> addresses=ifaces.nextElement().getInetAddresses();
          while (addresses.hasMoreElements()) {
            InetAddress address=addresses.nextElement();
            if ((address instanceof Inet6Address) && !address.isAnyLocalAddress() && !address.isLinkLocalAddress()&& !address.isLoopbackAddress()&& !address.isSiteLocalAddress()) {
              localHost=address;
              done=true;
              break;
            }
          }
        }
      }
 else {
        localHost=InetAddress.getLocalHost();
        if (!(localHost instanceof Inet4Address)) {
          boolean done=false;
          Enumeration<NetworkInterface> ifaces=NetworkInterface.getNetworkInterfaces();
          while (!done && ifaces.hasMoreElements()) {
            Enumeration<InetAddress> addresses=ifaces.nextElement().getInetAddresses();
            while (addresses.hasMoreElements()) {
              InetAddress address=addresses.nextElement();
              if ((address instanceof Inet4Address) && !address.isLoopbackAddress()) {
                localHost=address;
                done=true;
                break;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + localHost + ""String_Node_Str"");
  return localHost;
}","/** 
 * Returns an InetAddress instance that represents the localhost, and that a socket can bind upon or distribute to peers as a contact address.
 * @param intendedDestination the destination that we'd like to use thelocalhost address with.
 * @return an InetAddress instance representing the local host, and thata socket can bind upon or distribute to peers as a contact address.
 */
public synchronized InetAddress getLocalHost(InetAddress intendedDestination){
  InetAddress localHost=null;
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + ""String_Node_Str"" + intendedDestination + ""String_Node_Str"");
  }
  String osVersion;
  if (OSUtils.IS_WINDOWS && !(osVersion=System.getProperty(""String_Node_Str"")).startsWith(""String_Node_Str"") && !osVersion.startsWith(""String_Node_Str"")) {
    byte[] src=Win32LocalhostRetriever.getSourceForDestination(intendedDestination.getAddress());
    if (src == null) {
      logger.warn(""String_Node_Str"");
    }
 else {
      try {
        localHost=InetAddress.getByAddress(src);
      }
 catch (      UnknownHostException uhe) {
        logger.warn(""String_Node_Str"",uhe);
      }
    }
  }
 else {
    localHostFinderSocket.connect(intendedDestination,RANDOM_ADDR_DISC_PORT);
    localHost=localHostFinderSocket.getLocalAddress();
    localHostFinderSocket.disconnect();
  }
  if (localHost == null) {
    try {
      localHost=InetAddress.getLocalHost();
    }
 catch (    UnknownHostException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  if (localHost.isAnyLocalAddress()) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + ""String_Node_Str"");
    }
    try {
      if (intendedDestination instanceof Inet6Address) {
        boolean done=false;
        Enumeration<NetworkInterface> ifaces=NetworkInterface.getNetworkInterfaces();
        while (!done && ifaces.hasMoreElements()) {
          Enumeration<InetAddress> addresses=ifaces.nextElement().getInetAddresses();
          while (addresses.hasMoreElements()) {
            InetAddress address=addresses.nextElement();
            if ((address instanceof Inet6Address) && !address.isAnyLocalAddress() && !address.isLinkLocalAddress()&& !address.isLoopbackAddress()&& !address.isSiteLocalAddress()) {
              localHost=address;
              done=true;
              break;
            }
          }
        }
      }
 else {
        if (intendedDestination instanceof Inet4Address) {
          boolean done=false;
          Enumeration<NetworkInterface> ifaces=NetworkInterface.getNetworkInterfaces();
          while (!done && ifaces.hasMoreElements()) {
            Enumeration<InetAddress> addresses=ifaces.nextElement().getInetAddresses();
            while (addresses.hasMoreElements()) {
              InetAddress address=addresses.nextElement();
              if ((address instanceof Inet4Address) && !address.isLoopbackAddress()) {
                localHost=address;
                done=true;
                break;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + localHost + ""String_Node_Str"");
  return localHost;
}",0.9882280996789482
102931,"/** 
 * Issue a command representing a command interaction with IRC server.
 * @param source Source contact or chat room from which the message is sent.
 * @param message Command message
 */
private void command(final String source,final String message) throws UnsupportedCommandException {
  final String msg=message.toLowerCase();
  final int end=msg.indexOf(' ');
  final String command;
  if (end == -1) {
    command=msg;
  }
 else {
    command=message.substring(1,end);
  }
  final Command cmd=this.commandFactory.createCommand(command);
  cmd.execute(source,msg);
}","/** 
 * Issue a command representing a command interaction with IRC server.
 * @param source Source contact or chat room from which the message is sent.
 * @param message Command message
 */
private void command(final String source,final String message) throws UnsupportedCommandException {
  final String msg=message.toLowerCase();
  final int end=msg.indexOf(' ');
  final String command;
  if (end == -1) {
    command=msg.substring(START_OF_COMMAND_INDEX);
  }
 else {
    command=message.substring(START_OF_COMMAND_INDEX,end);
  }
  final Command cmd=this.commandFactory.createCommand(command);
  cmd.execute(source,msg);
}",0.9525395503746876
102932,"/** 
 * Handles newly added providers.
 * @param pps
 */
void handleProviderAdded(ProtocolProviderService pps){
  pps.addRegistrationStateChangeListener(this);
  if (pps.isRegistered()) {
    handleProviderRegistered(pps);
  }
}","/** 
 * Handles newly added providers.
 * @param pps
 */
void handleProviderAdded(ProtocolProviderService pps){
  pps.addRegistrationStateChangeListener(this);
  if (pps.isRegistered()) {
    handleProviderRegistered(pps,false);
  }
}",0.987012987012987
102933,"/** 
 * Handles registered providers. If provider has a stored last status publish that status, otherwise we just publish that they are Online/Available/
 * @param pps the provider
 */
private void handleProviderRegistered(ProtocolProviderService pps){
  PresenceStatus status=getLastPresenceStatus(pps);
  if (status == null) {
    status=AccountStatusUtils.getOnlineStatus(pps);
  }
  if (status != null && status.getStatus() >= PresenceStatus.ONLINE_THRESHOLD) {
    publishStatus(pps,status);
  }
}","/** 
 * Handles registered providers. If provider has a stored last status publish that status, otherwise we just publish that they are Online/Available/
 * @param pps the provider
 */
private void handleProviderRegistered(ProtocolProviderService pps,boolean dueToRegistrationStateChanged){
  PresenceStatus status=getLastPresenceStatus(pps);
  if (status == null) {
    status=AccountStatusUtils.getOnlineStatus(pps);
  }
  if (status != null && status.getStatus() >= PresenceStatus.ONLINE_THRESHOLD) {
    publishStatusInternal(pps,status,dueToRegistrationStateChanged);
  }
}",0.9296296296296296
102934,"/** 
 * Waits for providers to register and then checks for its last status saved if any and used it to restore its status.
 * @param evt a <tt>RegistrationStateChangeEvent</tt> which describes the
 */
@Override public void registrationStateChanged(RegistrationStateChangeEvent evt){
  if (!evt.getNewState().equals(RegistrationState.REGISTERED))   return;
  handleProviderRegistered(evt.getProvider());
}","/** 
 * Waits for providers to register and then checks for its last status saved if any and used it to restore its status.
 * @param evt a <tt>RegistrationStateChangeEvent</tt> which describes the
 */
@Override public void registrationStateChanged(RegistrationStateChangeEvent evt){
  if (!evt.getNewState().equals(RegistrationState.REGISTERED))   return;
  handleProviderRegistered(evt.getProvider(),true);
}",0.9938650306748468
102935,"/** 
 * Creates an instance of this peer and scans <tt>bundleContext</tt> for all existing <tt>UriHandler</tt>
 * @param bundleContext a reference to a currently valid instance of abundle context.
 */
public ArgDelegationPeerImpl(BundleContext bundleContext){
  Collection<ServiceReference<UriHandler>> uriHandlerRefs;
  try {
    uriHandlerRefs=bundleContext.getServiceReferences(UriHandler.class,null);
  }
 catch (  InvalidSyntaxException ex) {
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"",ex);
    }
    return;
  }
  if ((uriHandlerRefs == null) || uriHandlerRefs.isEmpty()) {
    return;
  }
synchronized (uriHandlers) {
    for (    ServiceReference<UriHandler> uriHandlerRef : uriHandlerRefs) {
      UriHandler uriHandler=bundleContext.getService(uriHandlerRef);
      uriHandlers.put(uriHandler.getProtocol(),uriHandler);
    }
  }
}","/** 
 * Creates an instance of this peer and scans <tt>bundleContext</tt> for all existing <tt>UriHandler</tt>
 * @param bundleContext a reference to a currently valid instance of abundle context.
 */
public ArgDelegationPeerImpl(BundleContext bundleContext){
  Collection<ServiceReference<UriHandler>> uriHandlerRefs=ServiceUtils.getServiceReferences(bundleContext,UriHandler.class);
  if (!uriHandlerRefs.isEmpty()) {
synchronized (uriHandlers) {
      for (      ServiceReference<UriHandler> uriHandlerRef : uriHandlerRefs) {
        UriHandler uriHandler=bundleContext.getService(uriHandlerRef);
        uriHandlers.put(uriHandler.getProtocol(),uriHandler);
      }
    }
  }
}",0.8121368624919303
102936,"/** 
 * Returns all <tt>ProtocolProviderFactory</tt>s obtained from the bundle context.
 * @return all <tt>ProtocolProviderFactory</tt>s obtained from the bundlecontext
 */
public static Map<Object,ProtocolProviderFactory> getProtocolProviderFactories(){
  Collection<ServiceReference<ProtocolProviderFactory>> serRefs;
  try {
    serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class,null);
  }
 catch (  InvalidSyntaxException e) {
    serRefs=null;
    logger.error(""String_Node_Str"" + e);
  }
  if (serRefs != null) {
    for (    ServiceReference<ProtocolProviderFactory> serRef : serRefs) {
      ProtocolProviderFactory providerFactory=bundleContext.getService(serRef);
      providerFactoriesMap.put(serRef.getProperty(ProtocolProviderFactory.PROTOCOL),providerFactory);
    }
  }
  return providerFactoriesMap;
}","/** 
 * Returns all <tt>ProtocolProviderFactory</tt>s obtained from the bundle context.
 * @return all <tt>ProtocolProviderFactory</tt>s obtained from the bundlecontext
 */
public static Map<Object,ProtocolProviderFactory> getProtocolProviderFactories(){
  Collection<ServiceReference<ProtocolProviderFactory>> serRefs=ServiceUtils.getServiceReferences(bundleContext,ProtocolProviderFactory.class);
  if (!serRefs.isEmpty()) {
    for (    ServiceReference<ProtocolProviderFactory> serRef : serRefs) {
      ProtocolProviderFactory providerFactory=bundleContext.getService(serRef);
      providerFactoriesMap.put(serRef.getProperty(ProtocolProviderFactory.PROTOCOL),providerFactory);
    }
  }
  return providerFactoriesMap;
}",0.8704530950861519
102937,"/** 
 * starts the service. Check the current registerd protocol providers which supports BasicTelephony and adds calls listener to them
 * @param bc BundleContext
 */
public void start(BundleContext bc){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  this.bundleContext=bc;
  bc.addServiceListener(this);
  Collection<ServiceReference<ProtocolProviderService>> ppsRefs;
  try {
    ppsRefs=bc.getServiceReferences(ProtocolProviderService.class,null);
  }
 catch (  InvalidSyntaxException ex) {
    ppsRefs=null;
    logger.error(""String_Node_Str"",ex);
  }
  if (ppsRefs != null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ppsRefs.size() + ""String_Node_Str"");
    }
    for (    ServiceReference<ProtocolProviderService> ppsRef : ppsRefs) {
      ProtocolProviderService pps=bc.getService(ppsRef);
      this.handleProviderAdded(pps);
    }
  }
}","/** 
 * starts the service. Check the current registerd protocol providers which supports BasicTelephony and adds calls listener to them
 * @param bc BundleContext
 */
public void start(BundleContext bc){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  this.bundleContext=bc;
  bc.addServiceListener(this);
  Collection<ServiceReference<ProtocolProviderService>> ppsRefs=ServiceUtils.getServiceReferences(bc,ProtocolProviderService.class);
  if (!ppsRefs.isEmpty()) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ppsRefs.size() + ""String_Node_Str"");
    }
    for (    ServiceReference<ProtocolProviderService> ppsRef : ppsRefs) {
      ProtocolProviderService pps=bc.getService(ppsRef);
      handleProviderAdded(pps);
    }
  }
}",0.75
102938,"/** 
 * stops the service.
 * @param bc BundleContext
 */
public void stop(BundleContext bc){
  bc.removeServiceListener(this);
  Collection<ServiceReference<ProtocolProviderService>> ppsRefs;
  try {
    ppsRefs=bc.getServiceReferences(ProtocolProviderService.class,null);
  }
 catch (  InvalidSyntaxException ex) {
    ppsRefs=null;
    logger.error(""String_Node_Str"",ex);
  }
  if (ppsRefs != null) {
    for (    ServiceReference<ProtocolProviderService> ppsRef : ppsRefs) {
      ProtocolProviderService pps=bc.getService(ppsRef);
      this.handleProviderRemoved(pps);
    }
  }
}","/** 
 * stops the service.
 * @param bc BundleContext
 */
public void stop(BundleContext bc){
  bc.removeServiceListener(this);
  Collection<ServiceReference<ProtocolProviderService>> ppsRefs=ServiceUtils.getServiceReferences(bc,ProtocolProviderService.class);
  if (!ppsRefs.isEmpty()) {
    for (    ServiceReference<ProtocolProviderService> ppsRef : ppsRefs) {
      ProtocolProviderService pps=bc.getService(ppsRef);
      handleProviderRemoved(pps);
    }
  }
}",0.4980988593155893
102939,"/** 
 * Initializes the storage manager and makes it do initial load and parsing of the contact list file.
 * @param bc a reference to the currently valid OSGI <tt>BundleContext</tt>
 * @param mclServImpl a reference to the currently valid instance of the<tt>MetaContactListServiceImpl</tt> that we could use to pass parsed contacts and contact groups.
 * @throws IOException if the contact list file specified file does notexist and could not be created.
 * @throws XMLException if there is a problem with the file syntax.
 */
void start(BundleContext bc,MetaContactListServiceImpl mclServImpl) throws IOException, XMLException {
  bundleContext=bc;
  ServiceReference faServiceReference=bundleContext.getServiceReference(FileAccessService.class.getName());
  faService=(FileAccessService)bundleContext.getService(faServiceReference);
  ServiceReference confServiceRefs=bundleContext.getServiceReference(ConfigurationService.class.getName());
  ConfigurationService configurationService=(ConfigurationService)bundleContext.getService(confServiceRefs);
  String fileName=configurationService.getString(FILE_NAME_PROPERTY);
  if (fileName == null) {
    fileName=System.getProperty(FILE_NAME_PROPERTY);
    if (fileName == null)     fileName=DEFAULT_FILE_NAME;
  }
  try {
    contactlistFile=faService.getPrivatePersistentFile(fileName,FileCategory.PROFILE);
    if (!contactlistFile.exists() && !contactlistFile.createNewFile())     throw new IOException(""String_Node_Str"" + contactlistFile.getAbsolutePath());
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + fileName + ""String_Node_Str""+ ex.getMessage());
  }
  multiTenantMode=configurationService.getBoolean(MULTI_TENANT_MODE_PROP,multiTenantMode);
  try {
    contactlistTrans=faService.createFailSafeTransaction(this.contactlistFile);
    contactlistTrans.restoreFile();
  }
 catch (  NullPointerException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IllegalStateException e) {
    logger.error(""String_Node_Str"",e);
  }
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    if (contactlistFile.length() == 0) {
      contactListDocument=builder.newDocument();
      initVirginDocument(mclServImpl,contactListDocument);
      storeContactList0();
    }
 else {
      try {
        contactListDocument=builder.parse(contactlistFile);
      }
 catch (      Throwable ex) {
        logger.error(""String_Node_Str"",ex);
        logger.error(""String_Node_Str"");
        contactlistFile.delete();
        contactlistFile.createNewFile();
        contactListDocument=builder.newDocument();
        initVirginDocument(mclServImpl,contactListDocument);
        storeContactList0();
      }
    }
  }
 catch (  ParserConfigurationException ex) {
    logger.error(""String_Node_Str"",ex);
  }
  mclServImpl.addMetaContactListListener(this);
  this.mclServiceImpl=mclServImpl;
  started=true;
  this.launchStorageThread();
}","/** 
 * Initializes the storage manager and makes it do initial load and parsing of the contact list file.
 * @param bc a reference to the currently valid OSGI <tt>BundleContext</tt>
 * @param mclServImpl a reference to the currently valid instance of the<tt>MetaContactListServiceImpl</tt> that we could use to pass parsed contacts and contact groups.
 * @throws IOException if the contact list file specified file does notexist and could not be created.
 * @throws XMLException if there is a problem with the file syntax.
 */
void start(BundleContext bc,MetaContactListServiceImpl mclServImpl) throws IOException, XMLException {
  bundleContext=bc;
  faService=ServiceUtils.getService(bundleContext,FileAccessService.class);
  ConfigurationService configurationService=ServiceUtils.getService(bundleContext,ConfigurationService.class);
  String fileName=configurationService.getString(FILE_NAME_PROPERTY);
  if (fileName == null) {
    fileName=System.getProperty(FILE_NAME_PROPERTY);
    if (fileName == null)     fileName=DEFAULT_FILE_NAME;
  }
  try {
    contactlistFile=faService.getPrivatePersistentFile(fileName,FileCategory.PROFILE);
    if (!contactlistFile.exists() && !contactlistFile.createNewFile()) {
      throw new IOException(""String_Node_Str"" + contactlistFile.getAbsolutePath());
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + fileName + ""String_Node_Str""+ ex.getMessage());
  }
  multiTenantMode=configurationService.getBoolean(MULTI_TENANT_MODE_PROP,multiTenantMode);
  try {
    contactlistTrans=faService.createFailSafeTransaction(this.contactlistFile);
    contactlistTrans.restoreFile();
  }
 catch (  NullPointerException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IllegalStateException e) {
    logger.error(""String_Node_Str"",e);
  }
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    if (contactlistFile.length() == 0) {
      contactListDocument=builder.newDocument();
      initVirginDocument(mclServImpl,contactListDocument);
      storeContactList0();
    }
 else {
      try {
        contactListDocument=builder.parse(contactlistFile);
      }
 catch (      Throwable ex) {
        logger.error(""String_Node_Str"",ex);
        logger.error(""String_Node_Str"");
        contactlistFile.delete();
        contactlistFile.createNewFile();
        contactListDocument=builder.newDocument();
        initVirginDocument(mclServImpl,contactListDocument);
        storeContactList0();
      }
    }
  }
 catch (  ParserConfigurationException ex) {
    logger.error(""String_Node_Str"",ex);
  }
  mclServImpl.addMetaContactListListener(this);
  this.mclServiceImpl=mclServImpl;
  started=true;
  this.launchStorageThread();
}",0.9130950364221584
102940,"/** 
 * Implements the <tt>ServiceListener</tt> method. Verifies whether the passed event concerns a <tt>ProtocolProviderService</tt> and modifies the list of registered protocol providers accordingly.
 * @param event The <tt>ServiceEvent</tt> object.
 */
public void serviceChanged(ServiceEvent event){
  Object sService=bundleContext.getService(event.getServiceReference());
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + sService.getClass().getName());
  if (!(sService instanceof ProtocolProviderService)) {
    return;
  }
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  ProtocolProviderService provider=(ProtocolProviderService)sService;
  ProtocolProviderFactory sourceFactory=null;
  ServiceReference[] allBundleServices=event.getServiceReference().getBundle().getRegisteredServices();
  for (  ServiceReference bundleServiceRef : allBundleServices) {
    Object service=bundleContext.getService(bundleServiceRef);
    if (service instanceof ProtocolProviderFactory) {
      sourceFactory=(ProtocolProviderFactory)service;
      break;
    }
  }
  if (event.getType() == ServiceEvent.REGISTERED) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    String providerMask=System.getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
    if (providerMask != null && providerMask.trim().length() > 0) {
      String servRefMask=(String)event.getServiceReference().getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
      if (servRefMask == null || !servRefMask.equals(providerMask)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + provider.getAccountID());
        return;
      }
    }
    if (sourceFactory != null && currentlyInstalledProviders.containsKey(provider.getAccountID().getAccountUniqueID())) {
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + provider.getAccountID() + ""String_Node_Str"");
    }
    this.handleProviderAdded((ProtocolProviderService)sService);
  }
 else   if (event.getType() == ServiceEvent.UNREGISTERING) {
    if (sourceFactory == null) {
      return;
    }
    AccountID accountID=provider.getAccountID();
    if (ContactlistActivator.getAccountManager().getStoredAccounts().contains(accountID)) {
synchronized (this) {
        this.removeMetaContactListListener(storageManager);
        this.handleProviderRemoved((ProtocolProviderService)sService);
        this.addMetaContactListListener(storageManager);
      }
      return;
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + provider.getAccountID() + ""String_Node_Str""+ ""String_Node_Str"");
    this.handleProviderRemoved((ProtocolProviderService)sService);
  }
}","/** 
 * Implements the <tt>ServiceListener</tt> method. Verifies whether the passed event concerns a <tt>ProtocolProviderService</tt> and modifies the list of registered protocol providers accordingly.
 * @param event The <tt>ServiceEvent</tt> object.
 */
public void serviceChanged(ServiceEvent event){
  Object sService=bundleContext.getService(event.getServiceReference());
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + sService.getClass().getName());
  if (!(sService instanceof ProtocolProviderService)) {
    return;
  }
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  ProtocolProviderService provider=(ProtocolProviderService)sService;
  ProtocolProviderFactory sourceFactory=null;
  ServiceReference<?>[] allBundleServices=event.getServiceReference().getBundle().getRegisteredServices();
  for (  ServiceReference<?> bundleServiceRef : allBundleServices) {
    Object service=bundleContext.getService(bundleServiceRef);
    if (service instanceof ProtocolProviderFactory) {
      sourceFactory=(ProtocolProviderFactory)service;
      break;
    }
  }
  if (event.getType() == ServiceEvent.REGISTERED) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    String providerMask=System.getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
    if (providerMask != null && providerMask.trim().length() > 0) {
      String servRefMask=(String)event.getServiceReference().getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
      if (servRefMask == null || !servRefMask.equals(providerMask)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + provider.getAccountID());
        return;
      }
    }
    if (sourceFactory != null && currentlyInstalledProviders.containsKey(provider.getAccountID().getAccountUniqueID())) {
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + provider.getAccountID() + ""String_Node_Str"");
    }
    this.handleProviderAdded((ProtocolProviderService)sService);
  }
 else   if (event.getType() == ServiceEvent.UNREGISTERING) {
    if (sourceFactory == null) {
      return;
    }
    AccountID accountID=provider.getAccountID();
    if (ContactlistActivator.getAccountManager().getStoredAccounts().contains(accountID)) {
synchronized (this) {
        this.removeMetaContactListListener(storageManager);
        this.handleProviderRemoved((ProtocolProviderService)sService);
        this.addMetaContactListListener(storageManager);
      }
      return;
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + provider.getAccountID() + ""String_Node_Str""+ ""String_Node_Str"");
    this.handleProviderRemoved((ProtocolProviderService)sService);
  }
}",0.9988966531813168
102941,"/** 
 * Starts this implementation of the MetaContactListService. The implementation would first restore a default contact list from what has been stored in a file. It would then connect to OSGI and retrieve any existing protocol providers and if <br> 1) They provide implementations of OperationSetPersistentPresence, it would synchronize their contact lists with the local one (adding subscriptions for contacts that do not exist in the server stored contact list and adding locally contacts that were found on the server but not in the local file). <p> 2) The only provide non persistent implementations of OperationSetPresence, the meta contact list impl would create subscriptions for all local contacts in the corresponding protocol provider. <p> This implementation would also start listening for any newly registered protocol provider implementations and perform the same algorithm with them. <p>
 * @param bc the currently valid OSGI bundle context.
 */
public void start(BundleContext bc){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  this.bundleContext=bc;
  try {
    storageManager.start(bundleContext,this);
  }
 catch (  Exception exc) {
    logger.error(""String_Node_Str"",exc);
  }
  bc.addServiceListener(this);
  ServiceReference[] protocolProviderRefs=null;
  try {
    protocolProviderRefs=bc.getServiceReferences(ProtocolProviderService.class.getName(),null);
  }
 catch (  InvalidSyntaxException ex) {
    logger.error(""String_Node_Str"",ex);
    return;
  }
  if (protocolProviderRefs != null) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + protocolProviderRefs.length + ""String_Node_Str"");
    for (    ServiceReference providerRef : protocolProviderRefs) {
      ProtocolProviderService provider=(ProtocolProviderService)bc.getService(providerRef);
      this.handleProviderAdded(provider);
    }
  }
}","/** 
 * Starts this implementation of the MetaContactListService. The implementation would first restore a default contact list from what has been stored in a file. It would then connect to OSGI and retrieve any existing protocol providers and if <br> 1) They provide implementations of OperationSetPersistentPresence, it would synchronize their contact lists with the local one (adding subscriptions for contacts that do not exist in the server stored contact list and adding locally contacts that were found on the server but not in the local file). <p> 2) The only provide non persistent implementations of OperationSetPresence, the meta contact list impl would create subscriptions for all local contacts in the corresponding protocol provider. <p> This implementation would also start listening for any newly registered protocol provider implementations and perform the same algorithm with them. <p>
 * @param bc the currently valid OSGI bundle context.
 */
public void start(BundleContext bc){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"");
  this.bundleContext=bc;
  try {
    storageManager.start(bundleContext,this);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
  bc.addServiceListener(this);
  Collection<ServiceReference<ProtocolProviderService>> ppsRefs=ServiceUtils.getServiceReferences(bc,ProtocolProviderService.class);
  if (!ppsRefs.isEmpty()) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ppsRefs.size() + ""String_Node_Str"");
    }
    for (    ServiceReference<ProtocolProviderService> ppsRef : ppsRefs) {
      ProtocolProviderService pps=bc.getService(ppsRef);
      handleProviderAdded(pps);
    }
  }
}",0.7665641599105396
102942,"/** 
 * Join a particular chat room. Issue a join channel IRC operation and wait for the join operation to complete (either successfully or failing).
 * @param chatroom The chatroom to join.
 * @param password Optionally, a password that may be required for somechannels.
 * @throws OperationFailedException failed to join the chat room
 */
public void join(final ChatRoomIrcImpl chatroom,final String password) throws OperationFailedException {
  if (!isConnected())   throw new IllegalStateException(""String_Node_Str"");
  if (chatroom == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (password == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (this.joined.containsKey(chatroom.getIdentifier()) || chatroom.isPrivate()) {
    return;
  }
  LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier());
  final Result<Object,Exception> joinSignal=new Result<Object,Exception>();
synchronized (joinSignal) {
    LOGGER.trace(""String_Node_Str"");
    this.irc.joinChannel(chatroom.getIdentifier(),password,new Callback<IRCChannel>(){
      @Override public void onSuccess(      IRCChannel channel){
        LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
        ChatRoomIrcImpl actualChatRoom=chatroom;
synchronized (joinSignal) {
          try {
            if (!channel.getName().equals(actualChatRoom.getIdentifier())) {
              actualChatRoom=new ChatRoomIrcImpl(channel.getName(),IrcStack.this.provider);
              MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + channel.getName(),""String_Node_Str"",""String_Node_Str"",null);
              IrcStack.this.provider.getMUC().registerChatRoomInstance(actualChatRoom);
              chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            }
            IrcStack.this.joined.put(actualChatRoom.getIdentifier(),actualChatRoom);
            IrcStack.this.irc.addListener(new ChatRoomListener(actualChatRoom));
            IRCTopic topic=channel.getTopic();
            actualChatRoom.updateSubject(topic.getValue());
            for (            IRCUser user : channel.getUsers()) {
              ChatRoomMemberRole role=ChatRoomMemberRole.SILENT_MEMBER;
              Set<IRCUserStatus> statuses=channel.getStatusesForUser(user);
              for (              IRCUserStatus status : statuses) {
                role=convertMemberMode(status.getChanModeType().charValue());
              }
              if (IrcStack.this.getNick().equals(user.getNick())) {
                actualChatRoom.prepUserRole(role);
              }
 else {
                ChatRoomMemberIrcImpl member=new ChatRoomMemberIrcImpl(IrcStack.this.provider,actualChatRoom,user.getNick(),role);
                actualChatRoom.addChatRoomMember(member.getContactAddress(),member);
              }
            }
          }
  finally {
            IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(actualChatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
            LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
            joinSignal.setDone();
            joinSignal.notifyAll();
          }
        }
      }
      @Override public void onFailure(      Exception e){
        LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
synchronized (joinSignal) {
          try {
            MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
            chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
          }
  finally {
            LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
            joinSignal.setDone(e);
            joinSignal.notifyAll();
          }
        }
      }
    }
);
    try {
      while (!joinSignal.isDone()) {
        LOGGER.trace(""String_Node_Str"");
        joinSignal.wait();
      }
      LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
      Exception e=joinSignal.getException();
      if (e != null) {
        throw new OperationFailedException(e.getMessage(),OperationFailedException.CHAT_ROOM_NOT_JOINED,e);
      }
    }
 catch (    InterruptedException e) {
      throw new OperationFailedException(e.getMessage(),OperationFailedException.INTERNAL_ERROR,e);
    }
  }
}","/** 
 * Join a particular chat room. Issue a join channel IRC operation and wait for the join operation to complete (either successfully or failing).
 * @param chatroom The chatroom to join.
 * @param password Optionally, a password that may be required for somechannels.
 * @throws OperationFailedException failed to join the chat room
 */
public void join(final ChatRoomIrcImpl chatroom,final String password) throws OperationFailedException {
  if (!isConnected())   throw new IllegalStateException(""String_Node_Str"");
  if (chatroom == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (password == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (this.joined.containsKey(chatroom.getIdentifier()) || chatroom.isPrivate()) {
    return;
  }
  LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier());
  final Result<Object,Exception> joinSignal=new Result<Object,Exception>();
synchronized (joinSignal) {
    LOGGER.trace(""String_Node_Str"");
    this.irc.joinChannel(chatroom.getIdentifier(),password,new Callback<IRCChannel>(){
      @Override public void onSuccess(      IRCChannel channel){
        LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
        ChatRoomIrcImpl actualChatRoom=chatroom;
synchronized (joinSignal) {
          try {
            if (!channel.getName().equalsIgnoreCase(actualChatRoom.getIdentifier())) {
              actualChatRoom=new ChatRoomIrcImpl(channel.getName(),IrcStack.this.provider);
              MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + channel.getName(),""String_Node_Str"",""String_Node_Str"",null);
              IrcStack.this.provider.getMUC().registerChatRoomInstance(actualChatRoom);
              chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            }
            IrcStack.this.joined.put(actualChatRoom.getIdentifier(),actualChatRoom);
            IrcStack.this.irc.addListener(new ChatRoomListener(actualChatRoom));
            IRCTopic topic=channel.getTopic();
            actualChatRoom.updateSubject(topic.getValue());
            for (            IRCUser user : channel.getUsers()) {
              ChatRoomMemberRole role=ChatRoomMemberRole.SILENT_MEMBER;
              Set<IRCUserStatus> statuses=channel.getStatusesForUser(user);
              for (              IRCUserStatus status : statuses) {
                role=convertMemberMode(status.getChanModeType().charValue());
              }
              if (IrcStack.this.getNick().equals(user.getNick())) {
                actualChatRoom.prepUserRole(role);
              }
 else {
                ChatRoomMemberIrcImpl member=new ChatRoomMemberIrcImpl(IrcStack.this.provider,actualChatRoom,user.getNick(),role);
                actualChatRoom.addChatRoomMember(member.getContactAddress(),member);
              }
            }
          }
  finally {
            IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(actualChatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
            LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
            joinSignal.setDone();
            joinSignal.notifyAll();
          }
        }
      }
      @Override public void onFailure(      Exception e){
        LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
synchronized (joinSignal) {
          try {
            MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
            chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
          }
  finally {
            LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
            joinSignal.setDone(e);
            joinSignal.notifyAll();
          }
        }
      }
    }
);
    try {
      while (!joinSignal.isDone()) {
        LOGGER.trace(""String_Node_Str"");
        joinSignal.wait();
      }
      LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
      Exception e=joinSignal.getException();
      if (e != null) {
        throw new OperationFailedException(e.getMessage(),OperationFailedException.CHAT_ROOM_NOT_JOINED,e);
      }
    }
 catch (    InterruptedException e) {
      throw new OperationFailedException(e.getMessage(),OperationFailedException.INTERNAL_ERROR,e);
    }
  }
}",0.9989139878366636
102943,"/** 
 * Test whether this listener corresponds to the chat room.
 * @param chatRoomName chat room name
 * @return returns true if this listener applies, false otherwise
 */
private boolean isThisChatRoom(String chatRoomName){
  return this.chatroom.getIdentifier().equals(chatRoomName);
}","/** 
 * Test whether this listener corresponds to the chat room.
 * @param chatRoomName chat room name
 * @return returns true if this listener applies, false otherwise
 */
private boolean isThisChatRoom(String chatRoomName){
  return this.chatroom.getIdentifier().equalsIgnoreCase(chatRoomName);
}",0.9829351535836176
102944,"@Override public void onSuccess(IRCChannel channel){
  LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
  ChatRoomIrcImpl actualChatRoom=chatroom;
synchronized (joinSignal) {
    try {
      if (!channel.getName().equals(actualChatRoom.getIdentifier())) {
        actualChatRoom=new ChatRoomIrcImpl(channel.getName(),IrcStack.this.provider);
        MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + channel.getName(),""String_Node_Str"",""String_Node_Str"",null);
        IrcStack.this.provider.getMUC().registerChatRoomInstance(actualChatRoom);
        chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
      }
      IrcStack.this.joined.put(actualChatRoom.getIdentifier(),actualChatRoom);
      IrcStack.this.irc.addListener(new ChatRoomListener(actualChatRoom));
      IRCTopic topic=channel.getTopic();
      actualChatRoom.updateSubject(topic.getValue());
      for (      IRCUser user : channel.getUsers()) {
        ChatRoomMemberRole role=ChatRoomMemberRole.SILENT_MEMBER;
        Set<IRCUserStatus> statuses=channel.getStatusesForUser(user);
        for (        IRCUserStatus status : statuses) {
          role=convertMemberMode(status.getChanModeType().charValue());
        }
        if (IrcStack.this.getNick().equals(user.getNick())) {
          actualChatRoom.prepUserRole(role);
        }
 else {
          ChatRoomMemberIrcImpl member=new ChatRoomMemberIrcImpl(IrcStack.this.provider,actualChatRoom,user.getNick(),role);
          actualChatRoom.addChatRoomMember(member.getContactAddress(),member);
        }
      }
    }
  finally {
      IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(actualChatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
      LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
      joinSignal.setDone();
      joinSignal.notifyAll();
    }
  }
}","@Override public void onSuccess(IRCChannel channel){
  LOGGER.trace(""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
  ChatRoomIrcImpl actualChatRoom=chatroom;
synchronized (joinSignal) {
    try {
      if (!channel.getName().equalsIgnoreCase(actualChatRoom.getIdentifier())) {
        actualChatRoom=new ChatRoomIrcImpl(channel.getName(),IrcStack.this.provider);
        MessageIrcImpl message=new MessageIrcImpl(""String_Node_Str"" + channel.getName(),""String_Node_Str"",""String_Node_Str"",null);
        IrcStack.this.provider.getMUC().registerChatRoomInstance(actualChatRoom);
        chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
      }
      IrcStack.this.joined.put(actualChatRoom.getIdentifier(),actualChatRoom);
      IrcStack.this.irc.addListener(new ChatRoomListener(actualChatRoom));
      IRCTopic topic=channel.getTopic();
      actualChatRoom.updateSubject(topic.getValue());
      for (      IRCUser user : channel.getUsers()) {
        ChatRoomMemberRole role=ChatRoomMemberRole.SILENT_MEMBER;
        Set<IRCUserStatus> statuses=channel.getStatusesForUser(user);
        for (        IRCUserStatus status : statuses) {
          role=convertMemberMode(status.getChanModeType().charValue());
        }
        if (IrcStack.this.getNick().equals(user.getNick())) {
          actualChatRoom.prepUserRole(role);
        }
 else {
          ChatRoomMemberIrcImpl member=new ChatRoomMemberIrcImpl(IrcStack.this.provider,actualChatRoom,user.getNick(),role);
          actualChatRoom.addChatRoomMember(member.getContactAddress(),member);
        }
      }
    }
  finally {
      IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(actualChatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
      LOGGER.trace(""String_Node_Str"" + ""String_Node_Str"" + chatroom.getIdentifier() + ""String_Node_Str"");
      joinSignal.setDone();
      joinSignal.notifyAll();
    }
  }
}",0.9974632166412988
102945,"/** 
 * Returns a reference to an open chat with the specified <tt>jid</tt> if one exists or creates a new one otherwise.
 * @param toAddress the address without the resource, we used to puta reference in jids table.
 * @param jid the Jabber ID that we'd like to obtain a chat instance for.
 * @return a reference to an open chat with the specified<tt>jid</tt> if one exists or creates a new one otherwise.
 */
public Chat obtainChatInstance(String toAddress,String jid){
  XMPPConnection jabberConnection=jabberProvider.getConnection();
  TargetAddress ta=getJidForAddress(toAddress);
  if (ta != null && ta.chat != null && ta.jid.equals(jid)) {
    return ta.chat;
  }
  org.jivesoftware.smack.MessageListener msgListener=new org.jivesoftware.smack.MessageListener(){
    public void processMessage(    Chat chat,    org.jivesoftware.smack.packet.Message message){
    }
  }
;
  Chat chat=jabberConnection.getChatManager().createChat(jid,msgListener);
  return chat;
}","/** 
 * Returns a reference to an open chat with the specified <tt>jid</tt> if one exists or creates a new one otherwise.
 * @param toAddress the address without the resource, we used to puta reference in jids table.
 * @param jid the Jabber ID that we'd like to obtain a chat instance for.
 * @return a reference to an open chat with the specified<tt>jid</tt> if one exists or creates a new one otherwise.
 */
public Chat obtainChatInstance(String toAddress,String jid){
  XMPPConnection jabberConnection=jabberProvider.getConnection();
  TargetAddress ta=getJidForAddress(toAddress);
  if (ta != null && ta.chat != null && ta.jid.equals(jid) && ta.chat.getParticipant().equals(jid)) {
    return ta.chat;
  }
  org.jivesoftware.smack.MessageListener msgListener=new org.jivesoftware.smack.MessageListener(){
    public void processMessage(    Chat chat,    org.jivesoftware.smack.packet.Message message){
    }
  }
;
  Chat chat=jabberConnection.getChatManager().createChat(jid,msgListener);
  return chat;
}",0.9797979797979798
102946,"/** 
 * Creates a new call and sends a RINGING response.
 * @param jainSipProvider the provider containing<tt>sourceTransaction</tt>.
 * @param serverTran the transaction containing the received request.
 * @return CallPeerSipImpl the newly created call peer (the one that sentthe INVITE).
 */
public CallPeerSipImpl processInvite(SipProvider jainSipProvider,ServerTransaction serverTran){
  Request invite=serverTran.getRequest();
  final CallPeerSipImpl peer=createCallPeerFor(serverTran,jainSipProvider);
  CallInfoHeader infoHeader=(CallInfoHeader)invite.getHeader(CallInfoHeader.NAME);
  String alternativeIMPPAddress=null;
  if (infoHeader != null && infoHeader.getParameter(""String_Node_Str"") != null && infoHeader.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
    alternativeIMPPAddress=infoHeader.getInfo().toString();
  }
  if (alternativeIMPPAddress != null)   peer.setAlternativeIMPPAddress(alternativeIMPPAddress);
  Response response=null;
  try {
    if (logger.isTraceEnabled())     logger.trace(""String_Node_Str"");
    response=messageFactory.createResponse(Response.RINGING,invite);
    serverTran.sendResponse(response);
    if (serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable()) {
      final Timer timer=new Timer();
      CallPeerAdapter stateListener=new CallPeerAdapter(){
        @Override public void peerStateChanged(        CallPeerChangeEvent evt){
          if (!evt.getNewValue().equals(CallPeerState.INCOMING_CALL)) {
            timer.cancel();
            peer.removeCallPeerListener(this);
          }
        }
      }
;
      int interval=retransmitsRingingInterval;
      int delay=0;
      for (int i=0; i < MAX_RETRANSMISSIONS; i++) {
        delay+=interval;
        timer.schedule(new RingingResponseTask(response,serverTran,peer,timer,stateListener),delay);
        interval*=2;
      }
      peer.addCallPeerListener(stateListener);
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + response);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
    peer.setState(CallPeerState.FAILED,""String_Node_Str"" + ex.getMessage());
    return peer;
  }
  return peer;
}","/** 
 * Creates a new call and sends a RINGING response.
 * @param jainSipProvider the provider containing<tt>sourceTransaction</tt>.
 * @param serverTran the transaction containing the received request.
 * @return CallPeerSipImpl the newly created call peer (the one that sentthe INVITE).
 */
public CallPeerSipImpl processInvite(SipProvider jainSipProvider,ServerTransaction serverTran){
  Request invite=serverTran.getRequest();
  final CallPeerSipImpl peer=createCallPeerFor(serverTran,jainSipProvider);
  CallInfoHeader infoHeader=(CallInfoHeader)invite.getHeader(CallInfoHeader.NAME);
  String alternativeIMPPAddress=null;
  if (infoHeader != null && infoHeader.getParameter(""String_Node_Str"") != null && infoHeader.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
    alternativeIMPPAddress=infoHeader.getInfo().toString();
  }
  if (alternativeIMPPAddress != null)   peer.setAlternativeIMPPAddress(alternativeIMPPAddress);
  Response response=null;
  try {
    if (logger.isTraceEnabled())     logger.trace(""String_Node_Str"");
    response=messageFactory.createResponse(Response.RINGING,invite);
    serverTran.sendResponse(response);
    if (serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable() && peer.getState().equals(CallPeerState.INCOMING_CALL)) {
      final Timer timer=new Timer();
      CallPeerAdapter stateListener=new CallPeerAdapter(){
        @Override public void peerStateChanged(        CallPeerChangeEvent evt){
          if (!evt.getNewValue().equals(CallPeerState.INCOMING_CALL)) {
            timer.cancel();
            peer.removeCallPeerListener(this);
          }
        }
      }
;
      int interval=retransmitsRingingInterval;
      int delay=0;
      for (int i=0; i < MAX_RETRANSMISSIONS; i++) {
        delay+=interval;
        timer.schedule(new RingingResponseTask(response,serverTran,peer,timer,stateListener),delay);
        interval*=2;
      }
      peer.addCallPeerListener(stateListener);
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + response);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
    peer.setState(CallPeerState.FAILED,""String_Node_Str"" + ex.getMessage());
    return peer;
  }
  return peer;
}",0.9876321115358668
102947,"/** 
 * Creates an instance of <tt>SelectScreenDialog</tt> by specifying the list of possible desktop devices to choose from.
 * @param desktopDevices the list of possible desktop devices to choosefrom
 */
public SelectScreenDialog(List<MediaDevice> desktopDevices){
  setModal(true);
  setPreferredSize(new Dimension(400,300));
  Container contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  deviceComboBox=new JComboBox(desktopDevices.toArray());
  contentPane.add(deviceComboBox,BorderLayout.NORTH);
  deviceComboBox.setRenderer(new ComboRenderer());
  contentPane.add(createPreview(deviceComboBox));
  contentPane.add(createButtonsPanel(),BorderLayout.SOUTH);
}","/** 
 * Creates an instance of <tt>SelectScreenDialog</tt> by specifying the list of possible desktop devices to choose from.
 * @param desktopDevices the list of possible desktop devices to choosefrom
 */
public SelectScreenDialog(List<MediaDevice> desktopDevices){
  setModal(true);
  setPreferredSize(new Dimension(400,300));
  Container contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  deviceComboBox=new DeviceComboBoxField(contentPane,desktopDevices);
  contentPane.add(createPreview(deviceComboBox));
  contentPane.add(createButtonsPanel(),BorderLayout.SOUTH);
}",0.8904428904428905
102948,"public void actionPerformed(ActionEvent event){
  MediaDevice device=(MediaDevice)comboBox.getSelectedItem();
  if ((device != null) && device.equals(videoDeviceInPreview))   return;
  Exception exception;
  try {
    createPreview(device,preview);
    exception=null;
  }
 catch (  IOException ex) {
    exception=ex;
  }
catch (  MediaException ex) {
    exception=ex;
  }
  if (exception != null) {
    logger.error(""String_Node_Str"" + device,exception);
    device=null;
  }
  videoDeviceInPreview=device;
}","public void actionPerformed(ActionEvent e){
  selectedDevice=null;
  dispose();
}",0.2466216216216216
102949,"public void hierarchyChanged(HierarchyEvent event){
  if (((event.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) && comboBox.isDisplayable()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        comboBoxListener.actionPerformed(null);
      }
    }
);
  }
 else {
    if (!comboBox.isDisplayable())     videoDeviceInPreview=null;
  }
}","public void hierarchyChanged(HierarchyEvent event){
  if (((event.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) && comboBox.getComponent().isDisplayable()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        comboBoxListener.onAction();
      }
    }
);
  }
 else {
    if (!comboBox.getComponent().isDisplayable())     videoDeviceInPreview=null;
  }
}",0.8092189500640204
102950,"public void run(){
  comboBoxListener.actionPerformed(null);
}","public void run(){
  comboBoxListener.onAction();
}",0.8495575221238938
102951,"/** 
 * Joins this chat room with the nickname of the local user so that the user would start receiving events and messages for it.
 * @throws OperationFailedException with the corresponding code if anerror occurs while joining the room.
 */
public void join() throws OperationFailedException {
  joinAs(getOurDisplayName());
}","/** 
 * Joins this chat room with the nickname of the local user so that the user would start receiving events and messages for it.
 * @throws OperationFailedException with the corresponding code if anerror occurs while joining the room.
 */
public void join() throws OperationFailedException {
  joinAs(JabberActivator.getGlobalDisplayDetailsService().getDisplayName(getParentProvider()));
}",0.8929068150208623
102952,"/** 
 * Creates a room with the named <tt>roomName</tt> and according to the specified <tt>roomProperties</tt> on the server that this protocol provider is currently connected to.
 * @param roomName the name of the <tt>ChatRoom</tt> to create.
 * @param roomProperties properties specifying how the room should becreated.
 * @throws OperationFailedException if the room couldn't be created forsome reason (e.g. room already exists; user already joined to an existent room or user has no permissions to create a chat room).
 * @throws OperationNotSupportedException if chat room creation is notsupported by this server
 * @return ChatRoom the chat room that we've just created.
 */
public ChatRoom createChatRoom(String roomName,Map<String,Object> roomProperties) throws OperationFailedException, OperationNotSupportedException {
  assertSupportedAndConnected();
  ChatRoom room=null;
  if (roomName == null)   roomName=""String_Node_Str"" + StringUtils.randomString(4);
 else   room=findRoom(roomName);
  if (room == null) {
    if (logger.isInfoEnabled())     logger.info(""String_Node_Str"");
    if (getXmppConnection().getHost().toLowerCase().contains(""String_Node_Str"")) {
      roomName=""String_Node_Str"" + UUID.randomUUID().toString() + ""String_Node_Str"";
    }
    MultiUserChat muc=null;
    try {
      muc=new MultiUserChat(getXmppConnection(),getCanonicalRoomName(roomName));
      muc.create(StringUtils.parseName(getXmppConnection().getUser()));
    }
 catch (    XMPPException ex) {
      logger.error(""String_Node_Str"",ex);
      throw new OperationFailedException(""String_Node_Str"",ex.getXMPPError().getCode(),ex.getCause());
    }
    boolean isPrivate=false;
    if (roomProperties != null) {
      Object isPrivateObject=roomProperties.get(""String_Node_Str"");
      if (isPrivateObject != null) {
        isPrivate=isPrivateObject.equals(true);
      }
    }
    try {
      Form form;
      if (isPrivate) {
        Form initForm=muc.getConfigurationForm();
        form=initForm.createAnswerForm();
        Iterator<FormField> fieldIterator=initForm.getFields();
        while (fieldIterator.hasNext()) {
          FormField initField=fieldIterator.next();
          if (initField == null || initField.getVariable() == null || initField.getType() == FormField.TYPE_FIXED || initField.getType() == FormField.TYPE_HIDDEN)           continue;
          FormField submitField=form.getField(initField.getVariable());
          if (submitField == null)           continue;
          Iterator<String> value=initField.getValues();
          while (value.hasNext())           submitField.addValue(value.next());
        }
        String[] fields={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        Boolean[] values={true,true,false};
        for (int i=0; i < fields.length; i++) {
          FormField field=new FormField(fields[i]);
          field.setType(""String_Node_Str"");
          form.addField(field);
          form.setAnswer(fields[i],values[i]);
        }
      }
 else {
        form=new Form(Form.TYPE_SUBMIT);
      }
      muc.sendConfigurationForm(form);
    }
 catch (    XMPPException e) {
      logger.error(""String_Node_Str"",e);
    }
    room=createLocalChatRoomInstance(muc);
    room.setLocalUserRole(ChatRoomMemberRole.OWNER);
  }
  return room;
}","/** 
 * Creates a room with the named <tt>roomName</tt> and according to the specified <tt>roomProperties</tt> on the server that this protocol provider is currently connected to.
 * @param roomName the name of the <tt>ChatRoom</tt> to create.
 * @param roomProperties properties specifying how the room should becreated.
 * @throws OperationFailedException if the room couldn't be created forsome reason (e.g. room already exists; user already joined to an existent room or user has no permissions to create a chat room).
 * @throws OperationNotSupportedException if chat room creation is notsupported by this server
 * @return ChatRoom the chat room that we've just created.
 */
public ChatRoom createChatRoom(String roomName,Map<String,Object> roomProperties) throws OperationFailedException, OperationNotSupportedException {
  assertSupportedAndConnected();
  ChatRoom room=null;
  if (roomName == null)   roomName=""String_Node_Str"" + StringUtils.randomString(4);
 else   room=findRoom(roomName);
  if (room == null) {
    if (logger.isInfoEnabled())     logger.info(""String_Node_Str"");
    if (getXmppConnection().getHost().toLowerCase().contains(""String_Node_Str"")) {
      roomName=""String_Node_Str"" + UUID.randomUUID().toString() + ""String_Node_Str"";
    }
    MultiUserChat muc=null;
    try {
      muc=new MultiUserChat(getXmppConnection(),getCanonicalRoomName(roomName));
      muc.create(JabberActivator.getGlobalDisplayDetailsService().getDisplayName(jabberProvider));
    }
 catch (    XMPPException ex) {
      logger.error(""String_Node_Str"",ex);
      throw new OperationFailedException(""String_Node_Str"",ex.getXMPPError().getCode(),ex.getCause());
    }
    boolean isPrivate=false;
    if (roomProperties != null) {
      Object isPrivateObject=roomProperties.get(""String_Node_Str"");
      if (isPrivateObject != null) {
        isPrivate=isPrivateObject.equals(true);
      }
    }
    try {
      Form form;
      if (isPrivate) {
        Form initForm=muc.getConfigurationForm();
        form=initForm.createAnswerForm();
        Iterator<FormField> fieldIterator=initForm.getFields();
        while (fieldIterator.hasNext()) {
          FormField initField=fieldIterator.next();
          if (initField == null || initField.getVariable() == null || initField.getType() == FormField.TYPE_FIXED || initField.getType() == FormField.TYPE_HIDDEN)           continue;
          FormField submitField=form.getField(initField.getVariable());
          if (submitField == null)           continue;
          Iterator<String> value=initField.getValues();
          while (value.hasNext())           submitField.addValue(value.next());
        }
        String[] fields={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        Boolean[] values={true,true,false};
        for (int i=0; i < fields.length; i++) {
          FormField field=new FormField(fields[i]);
          field.setType(""String_Node_Str"");
          form.addField(field);
          form.setAnswer(fields[i],values[i]);
        }
      }
 else {
        form=new Form(Form.TYPE_SUBMIT);
      }
      muc.sendConfigurationForm(form);
    }
 catch (    XMPPException e) {
      logger.error(""String_Node_Str"",e);
    }
    room=createLocalChatRoomInstance(muc);
    room.setLocalUserRole(ChatRoomMemberRole.OWNER);
  }
  return room;
}",0.9820051413881749
102953,"/** 
 * Checks if the contact address is associated with private messaging  contact or not.
 * @return <tt>true</tt> if the contact address is associated with privatemessaging contact and <tt>false</tt> if not.
 */
public boolean isPrivateMessagingContact(String contactAddress){
  return opSetPersPresence.isPrivateMessagingContact(contactAddress);
}","/** 
 * Checks if the contact address is associated with private messaging contact or not.
 * @return <tt>true</tt> if the contact address is associated with privatemessaging contact and <tt>false</tt> if not.
 */
public boolean isPrivateMessagingContact(String contactAddress){
  return opSetPersPresence.isPrivateMessagingContact(contactAddress);
}",0.9985734664764622
102954,"/** 
 * Returns a reference to a chatRoom named <tt>roomName</tt>. If the room  doesn't exists in the cache it creates it.
 * @param roomName the name of the <tt>ChatRoom</tt> that we're lookingfor.
 * @return the <tt>ChatRoom</tt> named <tt>roomName</tt>
 * @throws OperationFailedException if an error occurs while trying todiscover the room on the server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
public synchronized ChatRoom findRoom(String roomName) throws OperationFailedException, OperationNotSupportedException {
  assertSupportedAndConnected();
  String canonicalRoomName=getCanonicalRoomName(roomName);
  ChatRoom room=chatRoomCache.get(canonicalRoomName);
  if (room != null)   return room;
  MultiUserChat muc=new MultiUserChat(getXmppConnection(),canonicalRoomName);
  room=new ChatRoomJabberImpl(muc,jabberProvider);
  chatRoomCache.put(canonicalRoomName,room);
  return room;
}","/** 
 * Returns a reference to a chatRoom named <tt>roomName</tt>. If the room doesn't exists in the cache it creates it.
 * @param roomName the name of the <tt>ChatRoom</tt> that we're lookingfor.
 * @return the <tt>ChatRoom</tt> named <tt>roomName</tt>
 * @throws OperationFailedException if an error occurs while trying todiscover the room on the server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
public synchronized ChatRoom findRoom(String roomName) throws OperationFailedException, OperationNotSupportedException {
  assertSupportedAndConnected();
  String canonicalRoomName=getCanonicalRoomName(roomName);
  ChatRoom room=chatRoomCache.get(canonicalRoomName);
  if (room != null)   return room;
  MultiUserChat muc=new MultiUserChat(getXmppConnection(),canonicalRoomName);
  room=new ChatRoomJabberImpl(muc,jabberProvider);
  chatRoomCache.put(canonicalRoomName,room);
  return room;
}",0.99946949602122
102955,"/** 
 * Processes a Request received on a SipProvider upon which this SipListener is registered. <p>
 * @param requestEvent requestEvent fired from the SipProvider to the<tt>SipListener</tt> representing a Request received from the network.
 * @return <tt>true</tt> if the specified event has been handled by thisprocessor and shouldn't be offered to other processors registered for the same method; <tt>false</tt>, otherwise
 */
public boolean processRequest(RequestEvent requestEvent){
  ServerTransaction serverTransaction=requestEvent.getServerTransaction();
  SipProvider jainSipProvider=(SipProvider)requestEvent.getSource();
  Request request=requestEvent.getRequest();
  String requestMethod=request.getMethod();
  if (serverTransaction == null) {
    try {
      serverTransaction=SipStackSharing.getOrCreateServerTransaction(requestEvent);
    }
 catch (    TransactionAlreadyExistsException ex) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ex);
      return false;
    }
catch (    TransactionUnavailableException ex) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ex);
      return false;
    }
  }
  boolean processed=false;
  if (requestMethod.equals(Request.INVITE)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    DialogState dialogState=serverTransaction.getDialog().getState();
    if ((dialogState == null) || dialogState.equals(DialogState.CONFIRMED)) {
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + dialogState);
      processInvite(jainSipProvider,serverTransaction);
      processed=true;
    }
 else {
      logger.error(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else   if (requestMethod.equals(Request.ACK)) {
    processAck(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.BYE)) {
    processBye(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.CANCEL)) {
    processCancel(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.REFER)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    processRefer(serverTransaction,request,jainSipProvider);
    processed=true;
  }
 else   if (requestMethod.equals(Request.NOTIFY)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    processed=processNotify(serverTransaction,request);
  }
  return processed;
}","/** 
 * Processes a Request received on a SipProvider upon which this SipListener is registered. <p>
 * @param requestEvent requestEvent fired from the SipProvider to the<tt>SipListener</tt> representing a Request received from the network.
 * @return <tt>true</tt> if the specified event has been handled by thisprocessor and shouldn't be offered to other processors registered for the same method; <tt>false</tt>, otherwise
 */
public boolean processRequest(RequestEvent requestEvent){
  ServerTransaction serverTransaction=requestEvent.getServerTransaction();
  SipProvider jainSipProvider=(SipProvider)requestEvent.getSource();
  Request request=requestEvent.getRequest();
  String requestMethod=request.getMethod();
  if (serverTransaction == null) {
    try {
      serverTransaction=SipStackSharing.getOrCreateServerTransaction(requestEvent);
    }
 catch (    TransactionAlreadyExistsException ex) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ex);
      return false;
    }
catch (    TransactionUnavailableException ex) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ex);
      return false;
    }
  }
  boolean processed=false;
  if (requestMethod.equals(Request.INVITE)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    DialogState dialogState=serverTransaction.getDialog().getState();
    if ((dialogState == null) || dialogState.equals(DialogState.CONFIRMED)) {
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + dialogState);
      processInvite(jainSipProvider,serverTransaction);
      processed=true;
    }
 else {
      if (dialogState.equals(DialogState.TERMINATED)) {
        processStrayInvite(serverTransaction);
      }
 else {
        logger.error(""String_Node_Str"" + ""String_Node_Str"");
      }
      processed=true;
    }
  }
 else   if (requestMethod.equals(Request.ACK)) {
    processAck(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.BYE)) {
    processBye(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.CANCEL)) {
    processCancel(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.REFER)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    processRefer(serverTransaction,request,jainSipProvider);
    processed=true;
  }
 else   if (requestMethod.equals(Request.NOTIFY)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    processed=processNotify(serverTransaction,request);
  }
  return processed;
}",0.9704558794756408
102956,"/** 
 * request the full info for the given uin waits and return this details
 * @param contact Contact
 * @return Iterator
 */
public Iterator<GenericDetail> getAllDetailsForContact(Contact contact){
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  if (details == null)   return new LinkedList<GenericDetail>().iterator();
 else   return new LinkedList<GenericDetail>(details).iterator();
}","/** 
 * request the full info for the given uin waits and return this details
 * @param contact Contact
 * @return Iterator
 */
public Iterator<GenericDetail> getAllDetailsForContact(Contact contact){
  if (isPrivateMessagingContact(contact))   return new LinkedList<GenericDetail>().iterator();
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  if (details == null)   return new LinkedList<GenericDetail>().iterator();
 else   return new LinkedList<GenericDetail>(details).iterator();
}",0.9003147953830011
102957,"/** 
 * returns the user details from the specified class or its descendants the class is one from the net.java.sip.communicator.service.protocol.ServerStoredDetails or implemented one in the operation set for the user info
 * @param contact Contact
 * @param detailClass Class
 * @return Iterator
 */
public <T extends GenericDetail>Iterator<T> getDetailsAndDescendants(Contact contact,Class<T> detailClass){
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  List<T> result=new LinkedList<T>();
  if (details == null)   return result.iterator();
  for (  GenericDetail item : details)   if (detailClass.isInstance(item)) {
    @SuppressWarnings(""String_Node_Str"") T t=(T)item;
    result.add(t);
  }
  return result.iterator();
}","/** 
 * returns the user details from the specified class or its descendants the class is one from the net.java.sip.communicator.service.protocol.ServerStoredDetails or implemented one in the operation set for the user info
 * @param contact Contact
 * @param detailClass Class
 * @return Iterator
 */
public <T extends GenericDetail>Iterator<T> getDetailsAndDescendants(Contact contact,Class<T> detailClass){
  if (isPrivateMessagingContact(contact))   return new LinkedList<T>().iterator();
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  List<T> result=new LinkedList<T>();
  if (details == null)   return result.iterator();
  for (  GenericDetail item : details)   if (detailClass.isInstance(item)) {
    @SuppressWarnings(""String_Node_Str"") T t=(T)item;
    result.add(t);
  }
  return result.iterator();
}",0.8249845392702535
102958,"/** 
 * returns the user details from the specified class exactly that class not its descendants
 * @param contact Contact
 * @param detailClass Class
 * @return Iterator
 */
public Iterator<GenericDetail> getDetails(Contact contact,Class<? extends GenericDetail> detailClass){
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  List<GenericDetail> result=new LinkedList<GenericDetail>();
  if (details == null)   return result.iterator();
  for (  GenericDetail item : details)   if (detailClass.equals(item.getClass()))   result.add(item);
  return result.iterator();
}","/** 
 * returns the user details from the specified class exactly that class not its descendants
 * @param contact Contact
 * @param detailClass Class
 * @return Iterator
 */
public Iterator<GenericDetail> getDetails(Contact contact,Class<? extends GenericDetail> detailClass){
  if (isPrivateMessagingContact(contact))   return new LinkedList<GenericDetail>().iterator();
  List<GenericDetail> details=infoRetreiver.getContactDetails(contact.getAddress());
  List<GenericDetail> result=new LinkedList<GenericDetail>();
  if (details == null)   return result.iterator();
  for (  GenericDetail item : details)   if (detailClass.equals(item.getClass()))   result.add(item);
  return result.iterator();
}",0.9274255156608098
102959,"/** 
 * Called by smack when the state of a chat changes.
 * @param chat the chat that is concerned by this event.
 * @param state the new state of the chat.
 * @param message the message containing the new chat state
 */
public void stateChanged(Chat chat,ChatState state,org.jivesoftware.smack.packet.Message message){
  if (logger.isTraceEnabled())   logger.trace(chat.getParticipant() + ""String_Node_Str"" + state.name()+ ""String_Node_Str"");
  String fromID=StringUtils.parseBareAddress(chat.getParticipant());
  List<ChatRoom> chatRooms=parentProvider.getOperationSet(OperationSetMultiUserChat.class).getCurrentlyJoinedChatRooms();
  boolean isPrivateMessagingAddress=false;
  for (  ChatRoom chatRoom : chatRooms) {
    if (chatRoom.getName().equals(fromID)) {
      isPrivateMessagingAddress=true;
      break;
    }
  }
  Contact sourceContact=opSetPersPresence.findContactByID((isPrivateMessagingAddress ? message.getFrom() : fromID));
  if (sourceContact == null) {
    sourceContact=opSetPersPresence.createVolatileContact(chat.getParticipant(),isPrivateMessagingAddress);
  }
  int evtCode=STATE_UNKNOWN;
  if (ChatState.composing.equals(state)) {
    evtCode=STATE_TYPING;
  }
 else   if (ChatState.paused.equals(state) || ChatState.active.equals(state)) {
    evtCode=STATE_PAUSED;
  }
 else   if (ChatState.inactive.equals(state) || ChatState.gone.equals(state)) {
    evtCode=STATE_STOPPED;
  }
  if (message.getError() != null)   fireTypingNotificationsDeliveryFailedEvent(sourceContact,evtCode);
 else   if (evtCode != STATE_UNKNOWN)   fireTypingNotificationsEvent(sourceContact,evtCode);
 else   logger.warn(""String_Node_Str"");
}","/** 
 * Called by smack when the state of a chat changes.
 * @param chat the chat that is concerned by this event.
 * @param state the new state of the chat.
 * @param message the message containing the new chat state
 */
public void stateChanged(Chat chat,ChatState state,org.jivesoftware.smack.packet.Message message){
  if (logger.isTraceEnabled())   logger.trace(chat.getParticipant() + ""String_Node_Str"" + state.name()+ ""String_Node_Str"");
  String fromID=StringUtils.parseBareAddress(chat.getParticipant());
  List<ChatRoom> chatRooms=parentProvider.getOperationSet(OperationSetMultiUserChat.class).getCurrentlyJoinedChatRooms();
  boolean isPrivateMessagingAddress=false;
  for (  ChatRoom chatRoom : chatRooms) {
    if (chatRoom.getName().equals(fromID)) {
      isPrivateMessagingAddress=true;
      break;
    }
  }
  Contact sourceContact=opSetPersPresence.findContactByID((isPrivateMessagingAddress ? message.getFrom() : fromID));
  if (sourceContact == null) {
    if (message.getError() != null)     sourceContact=opSetPersPresence.findContactByID(message.getFrom());
    if (sourceContact == null) {
      sourceContact=opSetPersPresence.createVolatileContact(chat.getParticipant(),isPrivateMessagingAddress);
    }
  }
  int evtCode=STATE_UNKNOWN;
  if (ChatState.composing.equals(state)) {
    evtCode=STATE_TYPING;
  }
 else   if (ChatState.paused.equals(state) || ChatState.active.equals(state)) {
    evtCode=STATE_PAUSED;
  }
 else   if (ChatState.inactive.equals(state) || ChatState.gone.equals(state)) {
    evtCode=STATE_STOPPED;
  }
  if (message.getError() != null)   fireTypingNotificationsDeliveryFailedEvent(sourceContact,evtCode);
 else   if (evtCode != STATE_UNKNOWN)   fireTypingNotificationsEvent(sourceContact,evtCode);
 else   logger.warn(""String_Node_Str"");
}",0.9491722335172814
102960,"/** 
 * when there is no image for contact we must retrieve it add contacts for image update
 * @param c ContactJabberImpl
 */
protected void addContactForImageUpdate(ContactJabberImpl c){
  if (imageRetriever == null) {
    imageRetriever=new ImageRetriever();
    imageRetriever.start();
  }
  imageRetriever.addContact(c);
}","/** 
 * when there is no image for contact we must retrieve it add contacts for image update
 * @param contact ContactJabberImpl
 */
protected void addContactForImageUpdate(ContactJabberImpl contact){
  if (contact instanceof VolatileContactJabberImpl && ((VolatileContactJabberImpl)contact).isPrivateMessagingContact())   return;
  if (imageRetriever == null) {
    imageRetriever=new ImageRetriever();
    imageRetriever.start();
  }
  imageRetriever.addContact(contact);
}",0.8154613466334164
102961,"/** 
 * Handles the un-registration of a <tt>ProtocolProviderService</tt>. Removes the given <tt>protocolProvider</tt> from the list of queried providers.
 * @param protocolProvider the <tt>ProtocolProviderService</tt> to remove
 */
private static void handleProviderRemoved(ProtocolProviderService protocolProvider){
  if (phoneProviders.contains(protocolProvider))   phoneProviders.remove(protocolProvider);
}","/** 
 * Handles the un-registration of a <tt>ProtocolProviderService</tt>. Removes the given <tt>protocolProvider</tt> from the list of queried providers.
 * @param protocolProvider the <tt>ProtocolProviderService</tt> to remove
 */
private static void handleProviderRemoved(ProtocolProviderService protocolProvider){
  if (phoneProviders.contains(protocolProvider))   phoneProviders.remove(protocolProvider);
  protocolProvider.removeRegistrationStateChangeListener(ppRegListener);
}",0.9184357541899442
102962,"/** 
 * Handles the registration of a new <tt>ProtocolProviderService</tt>. Adds the given <tt>protocolProvider</tt> to the list of queried providers.
 * @param protocolProvider the <tt>ProtocolProviderService</tt> to add
 */
private static void handleProviderAdded(ProtocolProviderService protocolProvider){
  if (protocolProvider.getOperationSet(OperationSetServerStoredContactInfo.class) != null && protocolProvider.isRegistered() && !phoneProviders.contains(protocolProvider)) {
    phoneProviders.add(protocolProvider);
  }
}","/** 
 * Handles the registration of a new <tt>ProtocolProviderService</tt>. Adds the given <tt>protocolProvider</tt> to the list of queried providers.
 * @param protocolProvider the <tt>ProtocolProviderService</tt> to add
 */
private static void handleProviderAdded(ProtocolProviderService protocolProvider){
  if (protocolProvider.getOperationSet(OperationSetServerStoredContactInfo.class) != null && !phoneProviders.contains(protocolProvider)) {
    if (protocolProvider.isRegistered()) {
      phoneProviders.add(protocolProvider);
    }
 else {
      protocolProvider.addRegistrationStateChangeListener(ppRegListener);
    }
  }
}",0.8316151202749141
102963,"/** 
 * Returns a list of all currently registered server stored contact info providers.
 * @return a list of all currently registered server stored contact infoproviders
 */
public static List<ProtocolProviderService> getPhoneNumberProviders(){
  if (phoneProviders != null)   return phoneProviders;
  phoneProviders=new LinkedList<ProtocolProviderService>();
  bundleContext.addServiceListener(new ProtocolProviderRegListener());
  ServiceReference[] serRefs=null;
  try {
    serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
    logger.error(""String_Node_Str"" + e);
  }
  if (serRefs != null) {
    for (    ServiceReference serRef : serRefs) {
      ProtocolProviderFactory providerFactory=(ProtocolProviderFactory)bundleContext.getService(serRef);
      ProtocolProviderService protocolProvider;
      for (      AccountID accountID : providerFactory.getRegisteredAccounts()) {
        serRef=providerFactory.getProviderForAccount(accountID);
        protocolProvider=(ProtocolProviderService)bundleContext.getService(serRef);
        handleProviderAdded(protocolProvider);
      }
    }
  }
  return phoneProviders;
}","/** 
 * Returns a list of all currently registered server stored contact info providers.
 * @return a list of all currently registered server stored contact infoproviders
 */
public static List<ProtocolProviderService> getPhoneNumberProviders(){
  if (phoneProviders != null)   return phoneProviders;
  phoneProviders=new LinkedList<ProtocolProviderService>();
  ppRegListener=new ProtocolProviderRegistrationListener();
  bundleContext.addServiceListener(new ProtocolProviderServiceRegListener());
  ServiceReference[] serRefs=null;
  try {
    serRefs=bundleContext.getServiceReferences(ProtocolProviderFactory.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
    logger.error(""String_Node_Str"" + e);
  }
  if (serRefs != null) {
    for (    ServiceReference serRef : serRefs) {
      ProtocolProviderFactory providerFactory=(ProtocolProviderFactory)bundleContext.getService(serRef);
      ProtocolProviderService protocolProvider;
      for (      AccountID accountID : providerFactory.getRegisteredAccounts()) {
        serRef=providerFactory.getProviderForAccount(accountID);
        protocolProvider=(ProtocolProviderService)bundleContext.getService(serRef);
        handleProviderAdded(protocolProvider);
      }
    }
  }
  return phoneProviders;
}",0.972972972972973
102964,"public void run(){
  deviceComboBoxActionListener.actionPerformed(null);
}","public void run(){
  deviceComboBoxActionListener.onAction();
}",0.8759124087591241
102965,"public void hierarchyChanged(HierarchyEvent event){
  if ((event.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        deviceComboBoxActionListener.actionPerformed(null);
      }
    }
);
  }
}","public void hierarchyChanged(HierarchyEvent event){
  if ((event.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        deviceComboBoxActionListener.onAction();
      }
    }
);
  }
}",0.946788990825688
102966,"/** 
 * Initializes a new <tt>Component</tt> which.is to preview and/or allow detailed configuration of an audio or video <tt>DeviceSystem</tt>.
 * @param type either {@link DeviceConfigurationComboBoxModel#AUDIO} or{@link DeviceConfigurationComboBoxModel#VIDEO}
 * @param comboBox the <tt>JComboBox</tt> which lists the availablealternatives and the selection which is to be previewed. May be <tt>null</tt> in the case of audio in which case it is assumed that the user is not allowed to set the <tt>AudioSystem</tt> to be used and the selection is determined by the <tt>DeviceConfiguration</tt> of the <tt>MediaService</tt>.
 * @param prefSize the preferred size to be applied to the preview
 * @return a new <tt>Component</tt> which is to preview and/or allowdetailed configuration of the <tt>DeviceSystem</tt> identified by <tt>type</tt> and <tt>comboBox</tt>
 */
private Component createPreview(int type,JComboBox comboBox,Dimension prefSize){
  JComponent preview=null;
  if (type == DeviceConfigurationComboBoxModel.AUDIO) {
    AudioSystem audioSystem=null;
    if ((comboBox == null) || !comboBox.isEnabled()) {
      audioSystem=mediaService.getDeviceConfiguration().getAudioSystem();
    }
 else {
      Object selectedItem=comboBox.getSelectedItem();
      if (selectedItem instanceof AudioSystem) {
        audioSystem=(AudioSystem)selectedItem;
        AudioSystem mediaServiceDeviceConfigurationAudioSystem=mediaService.getDeviceConfiguration().getAudioSystem();
        if (audioSystem != mediaServiceDeviceConfigurationAudioSystem) {
          logger.warn(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
    if ((audioSystem != null) && !NoneAudioSystem.LOCATOR_PROTOCOL.equalsIgnoreCase(audioSystem.getLocatorProtocol())) {
      preview=new TransparentPanel(new GridBagLayout());
      createAudioSystemControls(audioSystem,preview);
    }
 else {
      AudioSystem[] audioSystems=AudioSystem.getAudioSystems();
      if ((audioSystems != null) && (audioSystems.length != 1)) {
        AudioSystem[] availableAudioSystems=mediaService.getDeviceConfiguration().getAvailableAudioSystems();
        if ((availableAudioSystems != null) && (availableAudioSystems.length == 1)) {
          String noAvailableAudioDevice=NeomediaActivator.getResources().getI18NString(""String_Node_Str"" + ""String_Node_Str"");
          preview=new TransparentPanel(new GridBagLayout());
          preview.add(new JLabel(noAvailableAudioDevice));
        }
      }
    }
  }
 else   if (type == DeviceConfigurationComboBoxModel.VIDEO) {
    JLabel noPreview=new JLabel(NeomediaActivator.getResources().getI18NString(""String_Node_Str""));
    noPreview.setHorizontalAlignment(SwingConstants.CENTER);
    noPreview.setVerticalAlignment(SwingConstants.CENTER);
    preview=createVideoContainer(noPreview);
    preview.setPreferredSize(prefSize);
    Object selectedItem=comboBox.getSelectedItem();
    CaptureDeviceInfo device=null;
    if (selectedItem instanceof DeviceConfigurationComboBoxModel.CaptureDevice)     device=((DeviceConfigurationComboBoxModel.CaptureDevice)selectedItem).info;
    Exception exception;
    try {
      createVideoPreview(device,preview);
      exception=null;
    }
 catch (    IOException ex) {
      exception=ex;
    }
catch (    MediaException ex) {
      exception=ex;
    }
    if (exception != null) {
      logger.error(""String_Node_Str"" + device,exception);
    }
  }
  return preview;
}","/** 
 * Initializes a new <tt>Component</tt> which.is to preview and/or allow detailed configuration of an audio or video <tt>DeviceSystem</tt>.
 * @param type either {@link DeviceConfigurationComboBoxModel#AUDIO} or{@link DeviceConfigurationComboBoxModel#VIDEO}
 * @param comboBox the <tt>JComboBox</tt> which lists the availablealternatives and the selection which is to be previewed. May be <tt>null</tt> in the case of audio in which case it is assumed that the user is not allowed to set the <tt>AudioSystem</tt> to be used and the selection is determined by the <tt>DeviceConfiguration</tt> of the <tt>MediaService</tt>.
 * @param prefSize the preferred size to be applied to the preview
 * @return a new <tt>Component</tt> which is to preview and/or allowdetailed configuration of the <tt>DeviceSystem</tt> identified by <tt>type</tt> and <tt>comboBox</tt>
 */
private Component createPreview(int type,DeviceComboBoxField comboBox,Dimension prefSize){
  JComponent preview=null;
  if (type == DeviceConfigurationComboBoxModel.AUDIO) {
    AudioSystem audioSystem=null;
    if ((comboBox == null) || !comboBox.getComponent().isEnabled()) {
      audioSystem=mediaService.getDeviceConfiguration().getAudioSystem();
    }
 else {
      Object selectedItem=comboBox.getSelectedItem();
      if (selectedItem instanceof AudioSystem) {
        audioSystem=(AudioSystem)selectedItem;
        AudioSystem mediaServiceDeviceConfigurationAudioSystem=mediaService.getDeviceConfiguration().getAudioSystem();
        if (audioSystem != mediaServiceDeviceConfigurationAudioSystem) {
          logger.warn(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
    if ((audioSystem != null) && !NoneAudioSystem.LOCATOR_PROTOCOL.equalsIgnoreCase(audioSystem.getLocatorProtocol())) {
      preview=new TransparentPanel(new GridBagLayout());
      createAudioSystemControls(audioSystem,preview);
    }
 else {
      AudioSystem[] audioSystems=AudioSystem.getAudioSystems();
      if ((audioSystems != null) && (audioSystems.length != 1)) {
        AudioSystem[] availableAudioSystems=mediaService.getDeviceConfiguration().getAvailableAudioSystems();
        if ((availableAudioSystems != null) && (availableAudioSystems.length == 1)) {
          String noAvailableAudioDevice=NeomediaActivator.getResources().getI18NString(""String_Node_Str"" + ""String_Node_Str"");
          preview=new TransparentPanel(new GridBagLayout());
          preview.add(new JLabel(noAvailableAudioDevice));
        }
      }
    }
  }
 else   if (type == DeviceConfigurationComboBoxModel.VIDEO) {
    JLabel noPreview=new JLabel(NeomediaActivator.getResources().getI18NString(""String_Node_Str""));
    noPreview.setHorizontalAlignment(SwingConstants.CENTER);
    noPreview.setVerticalAlignment(SwingConstants.CENTER);
    preview=createVideoContainer(noPreview);
    preview.setPreferredSize(prefSize);
    Object selectedItem=comboBox.getSelectedItem();
    CaptureDeviceInfo device=null;
    if (selectedItem instanceof DeviceConfigurationComboBoxModel.CaptureDevice)     device=((DeviceConfigurationComboBoxModel.CaptureDevice)selectedItem).info;
    Exception exception;
    try {
      createVideoPreview(device,preview);
      exception=null;
    }
 catch (    IOException ex) {
      exception=ex;
    }
catch (    MediaException ex) {
      exception=ex;
    }
    if (exception != null) {
      logger.error(""String_Node_Str"" + device,exception);
    }
  }
  return preview;
}",0.9960818458859382
102967,"/** 
 * Creates basic controls for a type (AUDIO or VIDEO).
 * @param type the type.
 * @return the build Component.
 */
private Component createBasicControls(final int type){
  final boolean setAudioSystemIsDisabled=(type == DeviceConfigurationComboBoxModel.AUDIO) && NeomediaActivator.getConfigurationService().getBoolean(MediaServiceImpl.DISABLE_SET_AUDIO_SYSTEM_PNAME,false);
  final JComboBox deviceComboBox;
  final Container devicePanel;
  if (setAudioSystemIsDisabled) {
    deviceComboBox=null;
    devicePanel=null;
  }
 else {
    deviceComboBox=new JComboBox();
    deviceComboBox.setEditable(false);
    deviceComboBox.setModel(new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),type));
    JLabel deviceLabel=new JLabel(getLabelText(type));
    deviceLabel.setDisplayedMnemonic(getDisplayedMnemonic(type));
    deviceLabel.setLabelFor(deviceComboBox);
    devicePanel=new TransparentPanel(new FlowLayout(FlowLayout.CENTER));
    devicePanel.setMaximumSize(new Dimension(WIDTH,25));
    devicePanel.add(deviceLabel);
    devicePanel.add(deviceComboBox);
  }
  final JPanel deviceAndPreviewPanel=new TransparentPanel(new BorderLayout());
  int preferredDeviceAndPreviewPanelHeight;
switch (type) {
case DeviceConfigurationComboBoxModel.AUDIO:
    preferredDeviceAndPreviewPanelHeight=(devicePanel == null) ? 200 : 245;
  break;
case DeviceConfigurationComboBoxModel.VIDEO:
preferredDeviceAndPreviewPanelHeight=305;
break;
default :
preferredDeviceAndPreviewPanelHeight=0;
break;
}
if (preferredDeviceAndPreviewPanelHeight > 0) {
deviceAndPreviewPanel.setPreferredSize(new Dimension(WIDTH,preferredDeviceAndPreviewPanelHeight));
}
if (devicePanel != null) deviceAndPreviewPanel.add(devicePanel,BorderLayout.NORTH);
final ActionListener deviceComboBoxActionListener=new ActionListener(){
public void actionPerformed(ActionEvent ev){
boolean revalidateAndRepaint=false;
for (int i=deviceAndPreviewPanel.getComponentCount() - 1; i >= 0; i--) {
Component c=deviceAndPreviewPanel.getComponent(i);
if (c != devicePanel) {
deviceAndPreviewPanel.remove(i);
revalidateAndRepaint=true;
}
}
Component preview=null;
if ((deviceComboBox == null) || ((deviceComboBox.getSelectedItem() != null) && deviceComboBox.isShowing())) {
preview=createPreview(type,deviceComboBox,deviceAndPreviewPanel.getPreferredSize());
}
if (preview != null) {
deviceAndPreviewPanel.add(preview,BorderLayout.CENTER);
revalidateAndRepaint=true;
}
if (revalidateAndRepaint) {
deviceAndPreviewPanel.revalidate();
deviceAndPreviewPanel.repaint();
}
}
}
;
if (deviceComboBox != null) deviceComboBox.addActionListener(deviceComboBoxActionListener);
deviceAndPreviewPanel.addHierarchyListener(new HierarchyListener(){
public void hierarchyChanged(HierarchyEvent event){
if ((event.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
SwingUtilities.invokeLater(new Runnable(){
public void run(){
deviceComboBoxActionListener.actionPerformed(null);
}
}
);
}
}
}
);
return deviceAndPreviewPanel;
}","/** 
 * Creates basic controls for a type (AUDIO or VIDEO).
 * @param type the type.
 * @return the build Component.
 */
private Component createBasicControls(final int type){
  final boolean setAudioSystemIsDisabled=(type == DeviceConfigurationComboBoxModel.AUDIO) && NeomediaActivator.getConfigurationService().getBoolean(MediaServiceImpl.DISABLE_SET_AUDIO_SYSTEM_PNAME,false);
  final DeviceComboBoxField deviceComboBox;
  final Container devicePanel;
  if (setAudioSystemIsDisabled) {
    deviceComboBox=null;
    devicePanel=null;
  }
 else {
    JLabel deviceLabel=new JLabel(getLabelText(type));
    deviceLabel.setDisplayedMnemonic(getDisplayedMnemonic(type));
    devicePanel=new TransparentPanel(new FlowLayout(FlowLayout.CENTER));
    devicePanel.setMaximumSize(new Dimension(WIDTH,25));
    devicePanel.add(deviceLabel);
    deviceComboBox=new DeviceComboBoxField(type,devicePanel);
    deviceLabel.setLabelFor(deviceComboBox.getComponent());
  }
  final JPanel deviceAndPreviewPanel=new TransparentPanel(new BorderLayout());
  int preferredDeviceAndPreviewPanelHeight;
switch (type) {
case DeviceConfigurationComboBoxModel.AUDIO:
    preferredDeviceAndPreviewPanelHeight=(devicePanel == null) ? 200 : 245;
  break;
case DeviceConfigurationComboBoxModel.VIDEO:
preferredDeviceAndPreviewPanelHeight=305;
break;
default :
preferredDeviceAndPreviewPanelHeight=0;
break;
}
if (preferredDeviceAndPreviewPanelHeight > 0) {
deviceAndPreviewPanel.setPreferredSize(new Dimension(WIDTH,preferredDeviceAndPreviewPanelHeight));
}
if (devicePanel != null) deviceAndPreviewPanel.add(devicePanel,BorderLayout.NORTH);
final DeviceComboBoxField.Listener deviceComboBoxActionListener=new DeviceComboBoxField.Listener(){
public void onAction(){
boolean revalidateAndRepaint=false;
for (int i=deviceAndPreviewPanel.getComponentCount() - 1; i >= 0; i--) {
Component c=deviceAndPreviewPanel.getComponent(i);
if (c != devicePanel) {
deviceAndPreviewPanel.remove(i);
revalidateAndRepaint=true;
}
}
Component preview=null;
if ((deviceComboBox == null) || ((deviceComboBox.getSelectedItem() != null) && deviceComboBox.getComponent().isShowing())) {
preview=createPreview(type,deviceComboBox,deviceAndPreviewPanel.getPreferredSize());
}
if (preview != null) {
deviceAndPreviewPanel.add(preview,BorderLayout.CENTER);
revalidateAndRepaint=true;
}
if (revalidateAndRepaint) {
deviceAndPreviewPanel.revalidate();
deviceAndPreviewPanel.repaint();
}
}
}
;
if (deviceComboBox != null) deviceComboBox.addListener(deviceComboBoxActionListener);
deviceAndPreviewPanel.addHierarchyListener(new HierarchyListener(){
public void hierarchyChanged(HierarchyEvent event){
if ((event.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
SwingUtilities.invokeLater(new Runnable(){
public void run(){
deviceComboBoxActionListener.onAction();
}
}
);
}
}
}
);
return deviceAndPreviewPanel;
}",0.9144028703229112
102968,"/** 
 * (Re)Sets the all the port allocators to reflect current values specified in the <tt>ConfigurationService</tt>. Calling this method may very well result in creating new port allocators or destroying existing ones.
 */
protected static void initializePortNumbers(){
  ConfigurationService cfg=ProtocolMediaActivator.getConfigurationService();
  String minPortNumberStr=cfg.getString(OperationSetBasicTelephony.MIN_MEDIA_PORT_NUMBER_PROPERTY_NAME);
  String maxPortNumberStr=cfg.getString(OperationSetBasicTelephony.MAX_MEDIA_PORT_NUMBER_PROPERTY_NAME);
  defaultPortTracker.tryRange(minPortNumberStr,maxPortNumberStr);
  minPortNumberStr=cfg.getString(OperationSetBasicTelephony.MIN_VIDEO_PORT_NUMBER_PROPERTY_NAME);
  maxPortNumberStr=cfg.getString(OperationSetBasicTelephony.MAX_VIDEO_PORT_NUMBER_PROPERTY_NAME);
  videoPortTracker=PortTracker.createTracker(minPortNumberStr,maxPortNumberStr);
  minPortNumberStr=cfg.getString(OperationSetBasicTelephony.MIN_AUDIO_PORT_NUMBER_PROPERTY_NAME);
  maxPortNumberStr=cfg.getString(OperationSetBasicTelephony.MAX_AUDIO_PORT_NUMBER_PROPERTY_NAME);
  audioPortTracker=PortTracker.createTracker(minPortNumberStr,maxPortNumberStr);
  minPortNumberStr=cfg.getString(OperationSetBasicTelephony.MIN_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);
  maxPortNumberStr=cfg.getString(OperationSetBasicTelephony.MAX_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);
  dataChannelPortTracker=PortTracker.createTracker(minPortNumberStr,maxPortNumberStr);
}","/** 
 * Tries to set the ranges of the <tt>PortTracker</tt>s (e.g. default, audio, video, data channel) to the values specified in the <tt>ConfigurationService</tt>.
 */
protected synchronized static void initializePortNumbers(){
  ConfigurationService cfg=ProtocolMediaActivator.getConfigurationService();
  String minPort=cfg.getString(OperationSetBasicTelephony.MIN_MEDIA_PORT_NUMBER_PROPERTY_NAME);
  String maxPort=cfg.getString(OperationSetBasicTelephony.MAX_MEDIA_PORT_NUMBER_PROPERTY_NAME);
  defaultPortTracker.tryRange(minPort,maxPort);
  minPort=cfg.getString(OperationSetBasicTelephony.MIN_VIDEO_PORT_NUMBER_PROPERTY_NAME);
  maxPort=cfg.getString(OperationSetBasicTelephony.MAX_VIDEO_PORT_NUMBER_PROPERTY_NAME);
  if (videoPortTracker == null)   videoPortTracker=PortTracker.createTracker(minPort,maxPort);
 else   videoPortTracker.tryRange(minPort,maxPort);
  minPort=cfg.getString(OperationSetBasicTelephony.MIN_AUDIO_PORT_NUMBER_PROPERTY_NAME);
  maxPort=cfg.getString(OperationSetBasicTelephony.MAX_AUDIO_PORT_NUMBER_PROPERTY_NAME);
  if (audioPortTracker == null)   audioPortTracker=PortTracker.createTracker(minPort,maxPort);
 else   audioPortTracker.tryRange(minPort,maxPort);
  minPort=cfg.getString(OperationSetBasicTelephony.MIN_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);
  maxPort=cfg.getString(OperationSetBasicTelephony.MAX_DATA_CHANNEL_PORT_NUMBER_PROPERTY_NAME);
  if (dataPortTracker == null)   dataPortTracker=PortTracker.createTracker(minPort,maxPort);
 else   dataPortTracker.tryRange(minPort,maxPort);
}",0.7034207904350714
102969,"/** 
 * Constructs <tt>DeviceComboBoxField</tt> instance. 
 * @param type the type of the configuration panel
 * @param devicePanel the container of the field.
 */
public DeviceComboBoxField(final int type,Container devicePanel){
  model=new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),type);
  if (!OSUtils.IS_WINDOWS || type != DeviceConfigurationComboBoxModel.VIDEO) {
    deviceComboBox=new JComboBox();
    deviceComboBox.setEditable(false);
    deviceComboBox.setModel(model);
    devicePanel.add(deviceComboBox);
    deviceComponent=deviceComboBox;
  }
 else {
    deviceList=new JList<CaptureDevice>();
    deviceList.setModel(model);
    JScrollPane listScroller=new JScrollPane(deviceComboBox);
    listScroller.setPreferredSize(new Dimension(200,38));
    deviceList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    deviceList.setLayoutOrientation(JList.VERTICAL);
    deviceList.setVisibleRowCount(-1);
    deviceList.setSelectedValue(model.getSelectedItem(),true);
    devicePanel.add(deviceList);
    deviceComponent=deviceList;
  }
}","/** 
 * Constructs <tt>DeviceComboBoxField</tt> instance.
 * @param type the type of the configuration panel
 * @param devicePanel the container of the field.
 */
public DeviceComboBoxField(final int type,Container devicePanel){
  model=new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),type);
  if (!OSUtils.IS_WINDOWS || type != DeviceConfigurationComboBoxModel.VIDEO) {
    deviceComboBox=new JComboBox();
    deviceComboBox.setEditable(false);
    deviceComboBox.setModel(model);
    devicePanel.add(deviceComboBox);
    deviceComponent=deviceComboBox;
  }
 else {
    deviceList=new JList();
    deviceList.setModel(model);
    JScrollPane listScroller=new JScrollPane(deviceComboBox);
    listScroller.setPreferredSize(new Dimension(200,38));
    deviceList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    deviceList.setLayoutOrientation(JList.VERTICAL);
    deviceList.setVisibleRowCount(-1);
    deviceList.setSelectedValue(model.getSelectedItem(),true);
    devicePanel.add(deviceList);
    deviceComponent=deviceList;
  }
}",0.992633517495396
102970,"/** 
 * Starts the address book service.
 */
static void startService(){
  String cssClassName;
  ConfigurationService configService=getConfigService();
  if (OSUtils.IS_WINDOWS && configService.getBoolean(PNAME_ENABLE_MICROSOFT_OUTLOOK_SEARCH,true)) {
    cssClassName=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (OSUtils.IS_MAC && configService.getBoolean(PNAME_ENABLE_MACOSX_ADDRESS_BOOK_SEARCH,true)) {
    cssClassName=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   return;
  if (OSUtils.IS_WINDOWS && configService.getBoolean(PNAME_ENABLE_DEFAULT_IM_APPLICATION_CHANGE,true)) {
    String isDefaultIMAppString=configService.getString(PNAME_MAKE_JITSI_DEFAULT_IM_APPLICATION);
    if (isDefaultIMAppString == null) {
      configService.setProperty(PNAME_MAKE_JITSI_DEFAULT_IM_APPLICATION,DefaultIMApp.isJitsiDefaultIMApp());
    }
 else {
      boolean isDefaultIMApp=Boolean.parseBoolean(isDefaultIMAppString);
      if (DefaultIMApp.isJitsiDefaultIMApp() != isDefaultIMApp) {
        if (isDefaultIMApp) {
          setAsDefaultIMApplication();
        }
 else {
          unsetDefaultIMApplication();
        }
      }
    }
  }
  try {
    css=(ContactSourceService)Class.forName(cssClassName).newInstance();
    if (css.equals(""String_Node_Str"" + ""String_Node_Str"")) {
      MsOutlookAddrBookContactSourceService contactSource=((MsOutlookAddrBookContactSourceService)css);
      MsOutlookAddrBookContactSourceService.initMAPI(contactSource.createNotificationDelegate());
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + cssClassName + ""String_Node_Str""+ ex.getMessage();
    logger.error(msg);
    if (logger.isDebugEnabled())     logger.debug(msg,ex);
    return;
  }
  try {
    cssServiceRegistration=bundleContext.registerService(ContactSourceService.class.getName(),css,null);
  }
  finally {
    if (cssServiceRegistration == null) {
      if (css instanceof AsyncContactSourceService)       ((AsyncContactSourceService)css).stop();
      css=null;
    }
 else {
      if (logger.isInfoEnabled())       logger.info(""String_Node_Str"" + css.getDisplayName() + ""String_Node_Str"");
    }
  }
}","/** 
 * Starts the address book service.
 */
static void startService(){
  String cssClassName;
  ConfigurationService configService=getConfigService();
  if (OSUtils.IS_WINDOWS && configService.getBoolean(PNAME_ENABLE_MICROSOFT_OUTLOOK_SEARCH,true)) {
    cssClassName=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (OSUtils.IS_MAC && configService.getBoolean(PNAME_ENABLE_MACOSX_ADDRESS_BOOK_SEARCH,true)) {
    cssClassName=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   return;
  if (OSUtils.IS_WINDOWS && configService.getBoolean(PNAME_ENABLE_DEFAULT_IM_APPLICATION_CHANGE,true)) {
    String isDefaultIMAppString=configService.getString(PNAME_MAKE_JITSI_DEFAULT_IM_APPLICATION);
    if (isDefaultIMAppString == null) {
      configService.setProperty(PNAME_MAKE_JITSI_DEFAULT_IM_APPLICATION,DefaultIMApp.isJitsiDefaultIMApp());
    }
 else {
      boolean isDefaultIMApp=Boolean.parseBoolean(isDefaultIMAppString);
      if (DefaultIMApp.isJitsiDefaultIMApp() != isDefaultIMApp) {
        if (isDefaultIMApp) {
          setAsDefaultIMApplication();
        }
 else {
          unsetDefaultIMApplication();
        }
      }
    }
  }
  try {
    css=(ContactSourceService)Class.forName(cssClassName).newInstance();
    if (cssClassName.equals(""String_Node_Str"" + ""String_Node_Str"")) {
      MsOutlookAddrBookContactSourceService contactSource=((MsOutlookAddrBookContactSourceService)css);
      MsOutlookAddrBookContactSourceService.initMAPI(contactSource.createNotificationDelegate());
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + cssClassName + ""String_Node_Str""+ ex.getMessage();
    logger.error(msg);
    if (logger.isDebugEnabled())     logger.debug(msg,ex);
    return;
  }
  try {
    cssServiceRegistration=bundleContext.registerService(ContactSourceService.class.getName(),css,null);
  }
  finally {
    if (cssServiceRegistration == null) {
      if (css instanceof AsyncContactSourceService)       ((AsyncContactSourceService)css).stop();
      css=null;
    }
 else {
      if (logger.isInfoEnabled())       logger.info(""String_Node_Str"" + css.getDisplayName() + ""String_Node_Str"");
    }
  }
}",0.9979035639412998
102971,"/** 
 * Creates an <tt>AboutWindow</tt> by specifying the parent frame owner.
 * @param owner the parent owner
 */
public AboutWindow(Frame owner){
  super(owner);
  ResourceManagementService resources=BrandingActivator.getResources();
  String applicationName=resources.getSettingsString(""String_Node_Str"");
  this.setTitle(resources.getI18NString(""String_Node_Str"",new String[]{applicationName}));
  setModal(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  JPanel mainPanel=new WindowBackground();
  mainPanel.setLayout(new BorderLayout());
  JPanel textPanel=new JPanel();
  textPanel.setPreferredSize(new Dimension(470,280));
  textPanel.setLayout(new BoxLayout(textPanel,BoxLayout.Y_AXIS));
  textPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  textPanel.setOpaque(false);
  JLabel titleLabel=null;
  if (isApplicationNameShown()) {
    titleLabel=new JLabel(applicationName);
    titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD,28));
    titleLabel.setForeground(Constants.TITLE_COLOR);
    titleLabel.setAlignmentX(Component.RIGHT_ALIGNMENT);
  }
  versionLabel=new JTextField(""String_Node_Str"" + System.getProperty(""String_Node_Str"")){
    /** 
 * Returns the name of the L&F class that renders this component.
 * @return the string ""TreeUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
    @Override public String getUIClassID(){
      return uiClassID;
    }
  }
;
  versionLabel.setBorder(null);
  versionLabel.setOpaque(false);
  versionLabel.setEditable(false);
  versionLabel.setFont(versionLabel.getFont().deriveFont(Font.BOLD,18));
  versionLabel.setForeground(Constants.TITLE_COLOR);
  versionLabel.setAlignmentX(Component.RIGHT_ALIGNMENT);
  versionLabel.setHorizontalAlignment(JTextField.RIGHT);
  int logoAreaFontSize=resources.getSettingsInt(""String_Node_Str"");
  JTextArea logoArea=new JTextArea(resources.getI18NString(""String_Node_Str""));
  logoArea.setFont(logoArea.getFont().deriveFont(Font.BOLD,logoAreaFontSize));
  logoArea.setForeground(Constants.TITLE_COLOR);
  logoArea.setOpaque(false);
  logoArea.setLineWrap(true);
  logoArea.setWrapStyleWord(true);
  logoArea.setEditable(false);
  logoArea.setPreferredSize(new Dimension(100,20));
  logoArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  logoArea.setBorder(BorderFactory.createEmptyBorder(30,DEFAULT_TEXT_INDENT,0,0));
  StyledHTMLEditorPane rightsArea=new StyledHTMLEditorPane();
  rightsArea.setContentType(""String_Node_Str"");
  rightsArea.appendToEnd(resources.getI18NString(""String_Node_Str"",new String[]{Constants.TEXT_COLOR}));
  rightsArea.setPreferredSize(new Dimension(50,20));
  rightsArea.setBorder(BorderFactory.createEmptyBorder(0,DEFAULT_TEXT_INDENT,0,0));
  rightsArea.setOpaque(false);
  rightsArea.setEditable(false);
  rightsArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  rightsArea.addHyperlinkListener(this);
  StyledHTMLEditorPane licenseArea=new StyledHTMLEditorPane();
  licenseArea.setContentType(""String_Node_Str"");
  licenseArea.appendToEnd(resources.getI18NString(""String_Node_Str"",new String[]{Constants.TEXT_COLOR}));
  licenseArea.setPreferredSize(new Dimension(50,20));
  licenseArea.setBorder(BorderFactory.createEmptyBorder(resources.getSettingsInt(""String_Node_Str""),DEFAULT_TEXT_INDENT,0,0));
  licenseArea.setOpaque(false);
  licenseArea.setEditable(false);
  licenseArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  licenseArea.addHyperlinkListener(this);
  if (titleLabel != null)   textPanel.add(titleLabel);
  textPanel.add(versionLabel);
  textPanel.add(logoArea);
  textPanel.add(rightsArea);
  textPanel.add(licenseArea);
  JButton okButton=new JButton(resources.getI18NString(""String_Node_Str""));
  this.getRootPane().setDefaultButton(okButton);
  okButton.setMnemonic(resources.getI18nMnemonic(""String_Node_Str""));
  okButton.addActionListener(this);
  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  buttonPanel.add(okButton);
  buttonPanel.setOpaque(false);
  mainPanel.add(textPanel,BorderLayout.CENTER);
  mainPanel.add(buttonPanel,BorderLayout.SOUTH);
  this.getContentPane().add(mainPanel);
  this.pack();
  this.setResizable(false);
  setLocationRelativeTo(getParent());
  this.getRootPane().getActionMap().put(""String_Node_Str"",new CloseAction());
  InputMap imap=this.getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),""String_Node_Str"");
  if (OSUtils.IS_MAC) {
    imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.META_DOWN_MASK),""String_Node_Str"");
    imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_DOWN_MASK),""String_Node_Str"");
  }
  WindowUtils.addWindow(this);
}","/** 
 * Creates an <tt>AboutWindow</tt> by specifying the parent frame owner.
 * @param owner the parent owner
 */
public AboutWindow(Frame owner){
  super(owner);
  ResourceManagementService resources=BrandingActivator.getResources();
  String applicationName=resources.getSettingsString(""String_Node_Str"");
  this.setTitle(resources.getI18NString(""String_Node_Str"",new String[]{applicationName}));
  setModal(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setResizable(false);
  JPanel mainPanel=new WindowBackground();
  mainPanel.setLayout(new BorderLayout());
  JPanel textPanel=new JPanel();
  textPanel.setPreferredSize(new Dimension(470,280));
  textPanel.setLayout(new BoxLayout(textPanel,BoxLayout.Y_AXIS));
  textPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  textPanel.setOpaque(false);
  JLabel titleLabel=null;
  if (isApplicationNameShown()) {
    titleLabel=new JLabel(applicationName);
    titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD,28));
    titleLabel.setForeground(Constants.TITLE_COLOR);
    titleLabel.setAlignmentX(Component.RIGHT_ALIGNMENT);
  }
  versionLabel=new JTextField(""String_Node_Str"" + System.getProperty(""String_Node_Str"")){
    /** 
 * Returns the name of the L&F class that renders this component.
 * @return the string ""TreeUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
    @Override public String getUIClassID(){
      return uiClassID;
    }
  }
;
  versionLabel.setBorder(null);
  versionLabel.setOpaque(false);
  versionLabel.setEditable(false);
  versionLabel.setFont(versionLabel.getFont().deriveFont(Font.BOLD,18));
  versionLabel.setForeground(Constants.TITLE_COLOR);
  versionLabel.setAlignmentX(Component.RIGHT_ALIGNMENT);
  versionLabel.setHorizontalAlignment(JTextField.RIGHT);
  int logoAreaFontSize=resources.getSettingsInt(""String_Node_Str"");
  JTextArea logoArea=new JTextArea(resources.getI18NString(""String_Node_Str""));
  logoArea.setFont(logoArea.getFont().deriveFont(Font.BOLD,logoAreaFontSize));
  logoArea.setForeground(Constants.TITLE_COLOR);
  logoArea.setOpaque(false);
  logoArea.setLineWrap(true);
  logoArea.setWrapStyleWord(true);
  logoArea.setEditable(false);
  logoArea.setPreferredSize(new Dimension(100,20));
  logoArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  logoArea.setBorder(BorderFactory.createEmptyBorder(30,DEFAULT_TEXT_INDENT,0,0));
  StyledHTMLEditorPane rightsArea=new StyledHTMLEditorPane();
  rightsArea.setContentType(""String_Node_Str"");
  rightsArea.appendToEnd(resources.getI18NString(""String_Node_Str"",new String[]{Constants.TEXT_COLOR}));
  rightsArea.setPreferredSize(new Dimension(50,20));
  rightsArea.setBorder(BorderFactory.createEmptyBorder(0,DEFAULT_TEXT_INDENT,0,0));
  rightsArea.setOpaque(false);
  rightsArea.setEditable(false);
  rightsArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  rightsArea.addHyperlinkListener(this);
  StyledHTMLEditorPane licenseArea=new StyledHTMLEditorPane();
  licenseArea.setContentType(""String_Node_Str"");
  licenseArea.appendToEnd(resources.getI18NString(""String_Node_Str"",new String[]{Constants.TEXT_COLOR}));
  licenseArea.setPreferredSize(new Dimension(50,20));
  licenseArea.setBorder(BorderFactory.createEmptyBorder(resources.getSettingsInt(""String_Node_Str""),DEFAULT_TEXT_INDENT,0,0));
  licenseArea.setOpaque(false);
  licenseArea.setEditable(false);
  licenseArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  licenseArea.addHyperlinkListener(this);
  if (titleLabel != null)   textPanel.add(titleLabel);
  textPanel.add(versionLabel);
  textPanel.add(logoArea);
  textPanel.add(rightsArea);
  textPanel.add(licenseArea);
  JButton okButton=new JButton(resources.getI18NString(""String_Node_Str""));
  this.getRootPane().setDefaultButton(okButton);
  okButton.setMnemonic(resources.getI18nMnemonic(""String_Node_Str""));
  okButton.addActionListener(this);
  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  buttonPanel.add(okButton);
  buttonPanel.setOpaque(false);
  mainPanel.add(textPanel,BorderLayout.CENTER);
  mainPanel.add(buttonPanel,BorderLayout.SOUTH);
  this.getContentPane().add(mainPanel);
  this.pack();
  setLocationRelativeTo(getParent());
  this.getRootPane().getActionMap().put(""String_Node_Str"",new CloseAction());
  InputMap imap=this.getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),""String_Node_Str"");
  if (OSUtils.IS_MAC) {
    imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.META_DOWN_MASK),""String_Node_Str"");
    imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_DOWN_MASK),""String_Node_Str"");
  }
  WindowUtils.addWindow(this);
}",0.994554191137213
102972,"/** 
 * {@inheritDoc}If this telephony conference switches from being a conference focus to not being such, disposes of the mixers used by this instance when it was a conference focus
 */
@Override protected void conferenceFocusChanged(boolean oldValue,boolean newValue){
  if (oldValue && !newValue) {
    Arrays.fill(mixers,null);
    if (videoRTPTranslator != null) {
      videoRTPTranslator.dispose();
      videoRTPTranslator=null;
    }
  }
  super.conferenceFocusChanged(oldValue,newValue);
}","/** 
 * {@inheritDoc}If this telephony conference switches from being a conference focus to not being such, disposes of the mixers used by this instance when it was a conference focus
 */
@Override protected void conferenceFocusChanged(boolean oldValue,boolean newValue){
  if (oldValue && !newValue) {
    Arrays.fill(mixers,null);
  }
  super.conferenceFocusChanged(oldValue,newValue);
}",0.7649043869516311
102973,"/** 
 * Dispatches the given <tt>KeyEvent</tt>.
 * @param e the <tt>KeyEvent</tt> to dispatch
 * @return <tt>true</tt> if the KeyboardFocusManager should take nofurther action with regard to the KeyEvent; <tt>false</tt> otherwise
 */
public boolean dispatchKeyEvent(KeyEvent e){
  if (!contactListContainer.isFocused())   return false;
  int id=e.getID();
  if (id != KeyEvent.KEY_PRESSED && id != KeyEvent.KEY_TYPED)   return false;
  SingleWindowContainer singleWindowContainer=GuiActivator.getUIService().getSingleWindowContainer();
  if ((singleWindowContainer != null) && singleWindowContainer.containsFocusOwner())   return false;
  Component focusOwner=keyManager.getFocusOwner();
  if (focusOwner != null && !searchField.isFocusOwner() && focusOwner instanceof JTextComponent)   return false;
  if (contactListContainer.isMenuSelected())   return false;
  int keyCode=e.getKeyCode();
  if (keyCode == KeyEvent.VK_ENTER && (e.isControlDown() || e.isMetaDown())) {
    contactListContainer.ctrlEnterKeyTyped();
    return false;
  }
 else   if (keyCode == KeyEvent.VK_ENTER && focusOwner.equals(keyManager.getPermanentFocusOwner())) {
    contactListContainer.enterKeyTyped();
    return false;
  }
  if (searchField.isFocusOwner() && (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_PAGE_UP || keyCode == KeyEvent.VK_PAGE_DOWN)) {
    contactList.selectFirstContact();
    contactList.getComponent().requestFocus();
    return false;
  }
  if (contactList.getComponent().isFocusOwner() && keyCode == KeyEvent.VK_ESCAPE) {
    contactList.removeSelection();
    if (searchField.getText() != null)     searchField.requestFocus();
    return false;
  }
  char keyChar=e.getKeyChar();
  UIGroup selectedGroup=contactList.getSelectedGroup();
  if (keyChar == KeyEvent.CHAR_UNDEFINED || keyCode == KeyEvent.VK_ENTER || keyCode == KeyEvent.VK_DELETE || keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_TAB || e.getKeyChar() == '\t' || keyCode == KeyEvent.VK_SPACE || (selectedGroup != null && (keyChar == '+' || keyChar == '-'))) {
    return false;
  }
  boolean singleWindowRule=singleWindowContainer == null || contactList.getComponent().isFocusOwner();
  if (!searchField.isFocusOwner() && focusOwner != null && singleWindowRule && focusOwner.equals(keyManager.getPermanentFocusOwner())) {
    searchField.requestFocusInWindow();
    keyManager.redispatchEvent(searchField,e);
    return true;
  }
  return false;
}","/** 
 * Dispatches the given <tt>KeyEvent</tt>.
 * @param e the <tt>KeyEvent</tt> to dispatch
 * @return <tt>true</tt> if the KeyboardFocusManager should take nofurther action with regard to the KeyEvent; <tt>false</tt> otherwise
 */
public boolean dispatchKeyEvent(KeyEvent e){
  if (!contactListContainer.isFocused())   return false;
  int id=e.getID();
  if (id != KeyEvent.KEY_PRESSED && id != KeyEvent.KEY_TYPED)   return false;
  SingleWindowContainer singleWindowContainer=GuiActivator.getUIService().getSingleWindowContainer();
  if ((singleWindowContainer != null) && singleWindowContainer.containsFocusOwner())   return false;
  Component focusOwner=keyManager.getFocusOwner();
  if (focusOwner != null && !searchField.isFocusOwner() && focusOwner instanceof JTextComponent)   return false;
  if (contactListContainer.isMenuSelected())   return false;
  int keyCode=e.getKeyCode();
  if (keyCode == KeyEvent.VK_ENTER && (e.isControlDown() || e.isMetaDown())) {
    contactListContainer.ctrlEnterKeyTyped();
    return false;
  }
 else   if (keyCode == KeyEvent.VK_ENTER && focusOwner.equals(keyManager.getPermanentFocusOwner())) {
    contactListContainer.enterKeyTyped();
    return false;
  }
  if (searchField.isFocusOwner() && (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_PAGE_UP || keyCode == KeyEvent.VK_PAGE_DOWN)) {
    contactList.selectFirstContact();
    if (contactList instanceof TreeContactList) {
      ((TreeContactList)contactList).setAutoSectionAllowed(false);
    }
    contactList.getComponent().requestFocus();
    return false;
  }
  if (contactList.getComponent().isFocusOwner() && keyCode == KeyEvent.VK_ESCAPE) {
    contactList.removeSelection();
    if (contactList instanceof TreeContactList) {
      ((TreeContactList)contactList).setAutoSectionAllowed(false);
    }
    if (searchField.getText() != null)     searchField.requestFocus();
    return false;
  }
  char keyChar=e.getKeyChar();
  UIGroup selectedGroup=contactList.getSelectedGroup();
  if (keyChar == KeyEvent.CHAR_UNDEFINED || keyCode == KeyEvent.VK_ENTER || keyCode == KeyEvent.VK_DELETE || keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_TAB || e.getKeyChar() == '\t' || keyCode == KeyEvent.VK_SPACE || (selectedGroup != null && (keyChar == '+' || keyChar == '-'))) {
    return false;
  }
  boolean singleWindowRule=singleWindowContainer == null || contactList.getComponent().isFocusOwner();
  if (!searchField.isFocusOwner() && focusOwner != null && singleWindowRule && focusOwner.equals(keyManager.getPermanentFocusOwner())) {
    searchField.requestFocusInWindow();
    keyManager.redispatchEvent(searchField,e);
    return true;
  }
  return false;
}",0.9524729520865534
102974,"/** 
 * Manages a mouse click over the contact list. When the left mouse button is clicked on a contact cell different things may happen depending on the contained component under the mouse. If the mouse is double clicked on the ""contact name"" the chat window is opened, configured to use the default protocol contact for the selected MetaContact. If the mouse is clicked on one of the protocol icons, the chat window is opened, configured to use the protocol contact corresponding to the given icon. When the right mouse button is clicked on a contact cell, the cell is selected and the <tt>ContactRightButtonMenu</tt> is opened. When the right mouse button is clicked on a group cell, the cell is selected and the <tt>GroupRightButtonMenu</tt> is opened. When the middle mouse button is clicked on a cell, the cell is selected.
 * @param e the <tt>MouseEvent</tt> that notified us of the click
 */
public void mouseClicked(MouseEvent e){
  TreePath path=this.getPathForLocation(e.getX(),e.getY());
  if (path == null)   return;
  Object lastComponent=path.getLastPathComponent();
  if (!(lastComponent instanceof TreeNode))   return;
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) == 0)   return;
  if (lastComponent instanceof ContactNode) {
    fireContactListEvent(((ContactNode)lastComponent).getContactDescriptor(),ContactListEvent.CONTACT_CLICKED,e.getClickCount());
    setAutoSectionAllowed(false);
  }
 else   if (lastComponent instanceof GroupNode) {
    fireContactListEvent(((GroupNode)lastComponent).getGroupDescriptor(),ContactListEvent.GROUP_CLICKED,e.getClickCount());
  }
}","/** 
 * Manages a mouse click over the contact list. When the left mouse button is clicked on a contact cell different things may happen depending on the contained component under the mouse. If the mouse is double clicked on the ""contact name"" the chat window is opened, configured to use the default protocol contact for the selected MetaContact. If the mouse is clicked on one of the protocol icons, the chat window is opened, configured to use the protocol contact corresponding to the given icon. When the right mouse button is clicked on a contact cell, the cell is selected and the <tt>ContactRightButtonMenu</tt> is opened. When the right mouse button is clicked on a group cell, the cell is selected and the <tt>GroupRightButtonMenu</tt> is opened. When the middle mouse button is clicked on a cell, the cell is selected.
 * @param e the <tt>MouseEvent</tt> that notified us of the click
 */
public void mouseClicked(MouseEvent e){
  TreePath path=this.getPathForLocation(e.getX(),e.getY());
  if (path == null)   return;
  Object lastComponent=path.getLastPathComponent();
  if (!(lastComponent instanceof TreeNode))   return;
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) == 0)   return;
  if (lastComponent instanceof ContactNode) {
    fireContactListEvent(((ContactNode)lastComponent).getContactDescriptor(),ContactListEvent.CONTACT_CLICKED,e.getClickCount());
    setAutoSectionAllowed(false);
  }
 else   if (lastComponent instanceof GroupNode) {
    fireContactListEvent(((GroupNode)lastComponent).getGroupDescriptor(),ContactListEvent.GROUP_CLICKED,e.getClickCount());
    setAutoSectionAllowed(false);
  }
}",0.9894606323620584
102975,"/** 
 * Returns -1 to indicate that this group doesn't have a source index.
 * @return -1
 */
@Override public int getSourceIndex(){
  if (contactSourceIndex >= 0)   return contactSourceIndex * MAX_GROUPS;
  if (contactSource.getType() == ContactSourceService.HISTORY_TYPE)   return Integer.MAX_VALUE;
  return Integer.MAX_VALUE - 1;
}","/** 
 * Returns -1 to indicate that this group doesn't have a source index.
 * @return -1
 */
@Override public int getSourceIndex(){
  if (contactSourceIndex >= 0)   return contactSourceIndex * MAX_GROUPS;
  if (contactSource.getType() == ContactSourceService.HISTORY_TYPE)   return Integer.MAX_VALUE - MAX_GROUPS;
  return Integer.MAX_VALUE - MAX_GROUPS - 1;
}",0.9626436781609196
102976,"/** 
 * Indicates if the given <tt>ContactActionMenuItem</tt> should be visible  for the given <tt>SourceContact</tt>.
 * @param contactAction the <tt>ContactActionMenuItem</tt> to verifyif the given action should be visible
 * @return <tt>true</tt> if the given <tt>ContactActionMenuItem</tt> is visible for the given <tt>SourceContact</tt>, <tt>false</tt> - otherwise
 */
private static boolean isContactActionVisible(ContactActionMenuItem<SourceContact> contactAction,SourceContact contact){
  if (contactAction.isVisible(contact))   return true;
  return false;
}","/** 
 * Indicates if the given <tt>ContactActionMenuItem</tt> should be visible for the given <tt>SourceContact</tt>.
 * @param contactAction the <tt>ContactActionMenuItem</tt> to verifyif the given action should be visible
 * @return <tt>true</tt> if the given <tt>ContactActionMenuItem</tt> isvisible for the given <tt>SourceContact</tt>, <tt>false</tt> - otherwise
 */
private static boolean isContactActionVisible(ContactActionMenuItem<SourceContact> contactAction,SourceContact contact){
  if (contactAction.isVisible(contact))   return true;
  return false;
}",0.9982332155477032
102977,"public void run(){
  if (logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  bundleContext.registerService(UIService.class.getName(),uiService,null);
  if (logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  bundleContext.registerService(ShutdownService.class.getName(),uiService,null);
}","@Override public void run(){
  if (logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  bundleContext.registerService(UIService.class.getName(),uiService,null);
  if (logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  bundleContext.registerService(ShutdownService.class.getName(),uiService,null);
}",0.9838187702265372
102978,"/** 
 * Called when this bundle is started.
 * @param bContext The execution context of the bundle being started.
 * @throws Exception if the bundle is not correctly started
 */
public void start(BundleContext bContext) throws Exception {
  isStarted=true;
  GuiActivator.bundleContext=bContext;
  ConfigurationUtils.loadGuiConfigurations();
  try {
    alertUIService=new AlertUIServiceImpl();
    bundleContext.registerService(AlertUIService.class.getName(),alertUIService,null);
    bundleContext.registerService(ImageLoaderService.class.getName(),new ImageLoaderServiceImpl(),null);
    uiService=new UIServiceImpl();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        uiService.loadApplicationGui();
        GuiActivator.getConfigurationService().addPropertyChangeListener(uiService);
        bundleContext.addServiceListener(uiService);
        new Thread(new Runnable(){
          public void run(){
            if (logger.isInfoEnabled())             logger.info(""String_Node_Str"");
            bundleContext.registerService(UIService.class.getName(),uiService,null);
            if (logger.isInfoEnabled())             logger.info(""String_Node_Str"");
            bundleContext.registerService(ShutdownService.class.getName(),uiService,null);
          }
        }
).start();
      }
    }
);
    logger.logEntry();
  }
  finally {
    logger.logExit();
  }
}","/** 
 * Called when this bundle is started.
 * @param bContext The execution context of the bundle being started.
 * @throws Exception if the bundle is not correctly started
 */
public void start(BundleContext bContext) throws Exception {
  isStarted=true;
  GuiActivator.bundleContext=bContext;
  ConfigurationUtils.loadGuiConfigurations();
  try {
    alertUIService=new AlertUIServiceImpl();
    bundleContext.registerService(AlertUIService.class.getName(),alertUIService,null);
    bundleContext.registerService(ImageLoaderService.class.getName(),new ImageLoaderServiceImpl(),null);
    uiService=new UIServiceImpl();
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        uiService.loadApplicationGui();
        GuiActivator.getConfigurationService().addPropertyChangeListener(uiService);
        bundleContext.addServiceListener(uiService);
        new Thread(){
          @Override public void run(){
            if (logger.isInfoEnabled())             logger.info(""String_Node_Str"");
            bundleContext.registerService(UIService.class.getName(),uiService,null);
            if (logger.isInfoEnabled())             logger.info(""String_Node_Str"");
            bundleContext.registerService(ShutdownService.class.getName(),uiService,null);
          }
        }
.start();
      }
    }
);
    logger.logEntry();
  }
  finally {
    logger.logExit();
  }
}",0.9878484631879916
102979,"/** 
 * Make the parent persistent presence operation set dispatch a subscription moved event.
 * @param oldParentGroup the group where the source contact was locatedbefore being moved
 * @param newParentGroup the group that the source contact is currently in.
 * @param contact the contact that was added
 */
private void fireContactMoved(ContactGroup oldParentGroup,ContactGroupJabberImpl newParentGroup,ContactJabberImpl contact){
  if (parentOperationSet == null) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return;
  }
  parentOperationSet.fireSubscriptionMovedEvent(contact,oldParentGroup,newParentGroup);
}","/** 
 * Make the parent persistent presence operation set dispatch a subscription moved event.
 * @param oldParentGroup the group where the source contact was locatedbefore being moved
 * @param newParentGroup the group that the source contact is currently in.
 * @param contact the contact that was added
 */
private void fireContactMoved(ContactGroup oldParentGroup,ContactGroup newParentGroup,ContactJabberImpl contact){
  if (parentOperationSet == null) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return;
  }
  parentOperationSet.fireSubscriptionMovedEvent(contact,oldParentGroup,newParentGroup);
}",0.9921875
102980,"/** 
 * When the protocol is online this method is used to fill or resolve the current contact list
 */
private void initRoster(){
  if (roster.getUnfiledEntryCount() > 0) {
    for (    RosterEntry item : roster.getUnfiledEntries()) {
      ContactJabberImpl contact=findContactById(item.getUser());
      if (!isEntryDisplayable(item)) {
        if (contact != null) {
          ContactGroup parent=contact.getParentContactGroup();
          if (parent instanceof RootContactGroupJabberImpl)           ((RootContactGroupJabberImpl)parent).removeContact(contact);
 else           ((ContactGroupJabberImpl)parent).removeContact(contact);
          fireContactRemoved(parent,contact);
        }
        continue;
      }
      if (contact == null) {
        contact=new ContactJabberImpl(item,this,true,true);
        rootGroup.addContact(contact);
        fireContactAdded(rootGroup,contact);
      }
 else {
        contact.setResolved(item);
        fireContactResolved(rootGroup,contact);
      }
      try {
        parentOperationSet.firePresenceStatusChanged(roster.getPresence(item.getUser()));
      }
 catch (      Throwable t) {
        logger.error(""String_Node_Str"",t);
      }
    }
  }
  Iterator<Contact> iter=rootGroup.contacts();
  List<ContactJabberImpl> contactsToRemove=new ArrayList<ContactJabberImpl>();
  while (iter.hasNext()) {
    ContactJabberImpl contact=(ContactJabberImpl)iter.next();
    if (!contact.isResolved()) {
      contactsToRemove.add(contact);
    }
  }
  for (  ContactJabberImpl contact : contactsToRemove) {
    rootGroup.removeContact(contact);
    fireContactRemoved(rootGroup,contact);
  }
  contactsToRemove.clear();
  for (  RosterGroup item : roster.getGroups()) {
    ContactGroupJabberImpl group=findContactGroup(item.getName());
    if (group == null) {
      ContactGroupJabberImpl newGroup=new ContactGroupJabberImpl(item,item.getEntries().iterator(),this,true);
      rootGroup.addSubGroup(newGroup);
      fireGroupEvent(newGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
      if (roster != null) {
        Iterator<Contact> cIter=newGroup.contacts();
        while (cIter.hasNext()) {
          parentOperationSet.firePresenceStatusChanged(roster.getPresence(cIter.next().getAddress()));
        }
      }
    }
 else {
      group.setResolved(item);
      fireGroupEvent(group,ServerStoredGroupEvent.GROUP_RESOLVED_EVENT);
    }
  }
  Iterator<ContactGroup> iterGroups=rootGroup.subgroups();
  List<ContactGroupJabberImpl> groupsToRemove=new ArrayList<ContactGroupJabberImpl>();
  while (iterGroups.hasNext()) {
    ContactGroupJabberImpl group=(ContactGroupJabberImpl)iterGroups.next();
    if (!group.isResolved()) {
      groupsToRemove.add(group);
    }
    Iterator<Contact> iterContacts=group.contacts();
    while (iterContacts.hasNext()) {
      ContactJabberImpl contact=(ContactJabberImpl)iterContacts.next();
      if (!contact.isResolved()) {
        contactsToRemove.add(contact);
      }
    }
    for (    ContactJabberImpl contact : contactsToRemove) {
      group.removeContact(contact);
      fireContactRemoved(group,contact);
    }
    contactsToRemove.clear();
  }
  for (  ContactGroupJabberImpl group : groupsToRemove) {
    rootGroup.removeSubGroup(group);
    fireGroupEvent(group,ServerStoredGroupEvent.GROUP_REMOVED_EVENT);
  }
}","/** 
 * When the protocol is online this method is used to fill or resolve the current contact list
 */
private void initRoster(){
  if (roster.getUnfiledEntryCount() > 0) {
    for (    RosterEntry item : roster.getUnfiledEntries()) {
      ContactJabberImpl contact=findContactById(item.getUser());
      if (!isEntryDisplayable(item)) {
        if (contact != null) {
          ContactGroup parent=contact.getParentContactGroup();
          if (parent instanceof RootContactGroupJabberImpl)           ((RootContactGroupJabberImpl)parent).removeContact(contact);
 else           ((ContactGroupJabberImpl)parent).removeContact(contact);
          fireContactRemoved(parent,contact);
        }
        continue;
      }
      if (contact == null) {
        contact=new ContactJabberImpl(item,this,true,true);
        rootGroup.addContact(contact);
        fireContactAdded(rootGroup,contact);
      }
 else {
        ContactGroup group=contact.getParentContactGroup();
        if (!rootGroup.equals(group)) {
          contactMoved(group,rootGroup,contact);
        }
        contact.setResolved(item);
        fireContactResolved(rootGroup,contact);
      }
      try {
        parentOperationSet.firePresenceStatusChanged(roster.getPresence(item.getUser()));
      }
 catch (      Throwable t) {
        logger.error(""String_Node_Str"",t);
      }
    }
  }
  Iterator<Contact> iter=rootGroup.contacts();
  List<ContactJabberImpl> contactsToRemove=new ArrayList<ContactJabberImpl>();
  while (iter.hasNext()) {
    ContactJabberImpl contact=(ContactJabberImpl)iter.next();
    if (!contact.isResolved()) {
      contactsToRemove.add(contact);
    }
  }
  for (  ContactJabberImpl contact : contactsToRemove) {
    rootGroup.removeContact(contact);
    fireContactRemoved(rootGroup,contact);
  }
  contactsToRemove.clear();
  for (  RosterGroup item : roster.getGroups()) {
    ContactGroupJabberImpl group=findContactGroup(item.getName());
    if (group != null) {
      group.setResolved(item);
      fireGroupEvent(group,ServerStoredGroupEvent.GROUP_RESOLVED_EVENT);
    }
  }
  Iterator<ContactGroup> iterGroups=rootGroup.subgroups();
  List<ContactGroupJabberImpl> groupsToRemove=new ArrayList<ContactGroupJabberImpl>();
  while (iterGroups.hasNext()) {
    ContactGroupJabberImpl group=(ContactGroupJabberImpl)iterGroups.next();
    if (!group.isResolved()) {
      groupsToRemove.add(group);
    }
    Iterator<Contact> iterContacts=group.contacts();
    while (iterContacts.hasNext()) {
      ContactJabberImpl contact=(ContactJabberImpl)iterContacts.next();
      if (!contact.isResolved()) {
        contactsToRemove.add(contact);
      }
    }
    for (    ContactJabberImpl contact : contactsToRemove) {
      group.removeContact(contact);
      fireContactRemoved(group,contact);
    }
    contactsToRemove.clear();
  }
  for (  ContactGroupJabberImpl group : groupsToRemove) {
    rootGroup.removeSubGroup(group);
    fireGroupEvent(group,ServerStoredGroupEvent.GROUP_REMOVED_EVENT);
  }
  for (  RosterGroup item : roster.getGroups()) {
    ContactGroupJabberImpl group=findContactGroup(item.getName());
    if (group == null) {
      ContactGroupJabberImpl newGroup=new ContactGroupJabberImpl(item,item.getEntries().iterator(),this,true);
      rootGroup.addSubGroup(newGroup);
      fireGroupEvent(newGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
      if (roster != null) {
        Iterator<Contact> cIter=newGroup.contacts();
        while (cIter.hasNext()) {
          String address=cIter.next().getAddress();
          parentOperationSet.firePresenceStatusChanged(roster.getPresence(address));
        }
      }
    }
  }
}",0.8161859664227292
102981,"/** 
 * Creates a non persistent contact for the specified address. This would also create (if necessary) a group for volatile contacts that would not be added to the server stored contact list. This method would have no effect on the server stored contact list.
 * @param id the address of the contact to create.
 * @param isPrivateMessagingContact indicates if the contact should be private messaging contact or not.
 * @return the newly created volatile <tt>ContactImpl</tt>
 */
ContactJabberImpl createVolatileContact(String id,boolean isPrivateMessagingContact){
  VolatileContactJabberImpl newVolatileContact=new VolatileContactJabberImpl(id,this,isPrivateMessagingContact);
  ContactGroupJabberImpl theVolatileGroup=getNonPersistentGroup();
  if (theVolatileGroup == null) {
    theVolatileGroup=new VolatileContactGroupJabberImpl(JabberActivator.getResources().getI18NString(""String_Node_Str""),this);
    theVolatileGroup.addContact(newVolatileContact);
    this.rootGroup.addSubGroup(theVolatileGroup);
    fireGroupEvent(theVolatileGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
  }
 else {
    theVolatileGroup.addContact(newVolatileContact);
    fireContactAdded(theVolatileGroup,newVolatileContact);
  }
  return newVolatileContact;
}","/** 
 * Creates a non persistent contact for the specified address. This would also create (if necessary) a group for volatile contacts that would not be added to the server stored contact list. This method would have no effect on the server stored contact list.
 * @param id the address of the contact to create.
 * @param isPrivateMessagingContact indicates if the contact should beprivate messaging contact or not.
 * @return the newly created volatile <tt>ContactImpl</tt>
 */
ContactJabberImpl createVolatileContact(String id,boolean isPrivateMessagingContact){
  VolatileContactJabberImpl newVolatileContact=new VolatileContactJabberImpl(id,this,isPrivateMessagingContact);
  ContactGroupJabberImpl theVolatileGroup=getNonPersistentGroup();
  if (theVolatileGroup == null) {
    theVolatileGroup=new VolatileContactGroupJabberImpl(JabberActivator.getResources().getI18NString(""String_Node_Str""),this);
    theVolatileGroup.addContact(newVolatileContact);
    this.rootGroup.addSubGroup(theVolatileGroup);
    fireGroupEvent(theVolatileGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
  }
 else {
    theVolatileGroup.addContact(newVolatileContact);
    fireContactAdded(theVolatileGroup,newVolatileContact);
  }
  return newVolatileContact;
}",0.9996001599360256
102982,"/** 
 * Event when an entry is updated. Something for the entry data or have been added to a new group or removed from one
 * @param addresses Collection
 */
public void entriesUpdated(Collection<String> addresses){
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + addresses);
  for (  String contactID : addresses) {
    RosterEntry entry=roster.getEntry(contactID);
    ContactJabberImpl contact=addEntryToContactList(contactID);
    if (entry.getGroups().size() == 0) {
      checkForRename(entry.getName(),contact);
    }
    for (    RosterGroup gr : entry.getGroups()) {
      ContactGroup cgr=findContactGroup(gr.getName());
      if (cgr == null) {
        ContactGroupJabberImpl group=findContactGroupByNameCopy(gr.getName());
        if (group != null) {
          group.setSourceGroup(gr);
          fireGroupEvent(group,ServerStoredGroupEvent.GROUP_RENAMED_EVENT);
        }
 else {
          ContactGroup currentParentGroup=contact.getParentContactGroup();
          if (currentParentGroup.countContacts() > 1) {
            cgr=currentParentGroup;
          }
 else {
            boolean present=false;
            for (            RosterGroup entryGr : entry.getGroups()) {
              if (entryGr.getName().equals(currentParentGroup.getGroupName())) {
                present=true;
                break;
              }
            }
            if (!present && currentParentGroup instanceof ContactGroupJabberImpl) {
              ContactGroupJabberImpl currentGroup=(ContactGroupJabberImpl)currentParentGroup;
              currentGroup.setSourceGroup(gr);
              fireGroupEvent(currentGroup,ServerStoredGroupEvent.GROUP_RENAMED_EVENT);
            }
          }
        }
      }
      if (cgr != null) {
        ContactGroup contactGroup=contact.getParentContactGroup();
        if (!gr.getName().equals(contactGroup.getGroupName())) {
          if (contactGroup instanceof ContactGroupJabberImpl)           ((ContactGroupJabberImpl)contactGroup).removeContact(contact);
 else           if (contactGroup instanceof RootContactGroupJabberImpl)           ((RootContactGroupJabberImpl)contactGroup).removeContact(contact);
          ContactGroupJabberImpl newParentGroup=findContactGroup(gr.getName());
          if (newParentGroup == null) {
            newParentGroup=new ContactGroupJabberImpl(gr,new ArrayList<RosterEntry>().iterator(),ServerStoredContactListJabberImpl.this,true);
            rootGroup.addSubGroup(newParentGroup);
            fireGroupEvent(newParentGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
          }
          newParentGroup.addContact(contact);
          fireContactMoved(contactGroup,newParentGroup,contact);
          if (contactGroup instanceof ContactGroupJabberImpl && contactGroup.countContacts() == 0) {
            rootGroup.removeSubGroup((ContactGroupJabberImpl)contactGroup);
            fireGroupEvent((ContactGroupJabberImpl)contactGroup,ServerStoredGroupEvent.GROUP_REMOVED_EVENT);
          }
        }
 else {
          checkForRename(entry.getName(),contact);
        }
      }
    }
  }
}","/** 
 * Event when an entry is updated. Something for the entry data or have been added to a new group or removed from one
 * @param addresses Collection
 */
public void entriesUpdated(Collection<String> addresses){
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"" + addresses);
  for (  String contactID : addresses) {
    RosterEntry entry=roster.getEntry(contactID);
    ContactJabberImpl contact=addEntryToContactList(contactID);
    if (entry.getGroups().size() == 0) {
      checkForRename(entry.getName(),contact);
      ContactGroup contactGroup=contact.getParentContactGroup();
      if (!rootGroup.equals(contactGroup)) {
        contactMoved(contactGroup,rootGroup,contact);
      }
    }
    for (    RosterGroup gr : entry.getGroups()) {
      ContactGroup cgr=findContactGroup(gr.getName());
      if (cgr == null) {
        ContactGroupJabberImpl group=findContactGroupByNameCopy(gr.getName());
        if (group != null) {
          group.setSourceGroup(gr);
          fireGroupEvent(group,ServerStoredGroupEvent.GROUP_RENAMED_EVENT);
        }
 else {
          ContactGroup currentParentGroup=contact.getParentContactGroup();
          if (currentParentGroup.countContacts() > 1) {
            cgr=currentParentGroup;
          }
 else {
            boolean present=false;
            for (            RosterGroup entryGr : entry.getGroups()) {
              if (entryGr.getName().equals(currentParentGroup.getGroupName())) {
                present=true;
                break;
              }
            }
            if (!present && currentParentGroup instanceof ContactGroupJabberImpl) {
              ContactGroupJabberImpl currentGroup=(ContactGroupJabberImpl)currentParentGroup;
              currentGroup.setSourceGroup(gr);
              fireGroupEvent(currentGroup,ServerStoredGroupEvent.GROUP_RENAMED_EVENT);
            }
          }
        }
      }
      if (cgr != null) {
        ContactGroup contactGroup=contact.getParentContactGroup();
        if (!gr.getName().equals(contactGroup.getGroupName())) {
          ContactGroupJabberImpl newParentGroup=findContactGroup(gr.getName());
          if (newParentGroup == null) {
            newParentGroup=new ContactGroupJabberImpl(gr,new ArrayList<RosterEntry>().iterator(),ServerStoredContactListJabberImpl.this,true);
            rootGroup.addSubGroup(newParentGroup);
            fireGroupEvent(newParentGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
          }
          contactMoved(contactGroup,newParentGroup,contact);
        }
 else {
          checkForRename(entry.getName(),contact);
        }
      }
    }
  }
}",0.8498424921246063
102983,"/** 
 * Checks if the contact address is associated with private messaging  contact or not.
 * @param contactAddress the address of the contact.
 * @return <tt>true</tt> the contact address is associated with private messaging contact and <tt>false</tt> if not.
 */
public boolean isPrivateMessagingContact(String contactAddress){
  ContactGroupJabberImpl theVolatileGroup=getNonPersistentGroup();
  if (theVolatileGroup == null)   return false;
  ContactJabberImpl contact=theVolatileGroup.findContact(contactAddress);
  if (contact == null || !(contact instanceof VolatileContactJabberImpl))   return false;
  return ((VolatileContactJabberImpl)contact).isPrivateMessagingContact();
}","/** 
 * Checks if the contact address is associated with private messaging contact or not.
 * @param contactAddress the address of the contact.
 * @return <tt>true</tt> the contact address is associated with privatemessaging contact and <tt>false</tt> if not.
 */
public boolean isPrivateMessagingContact(String contactAddress){
  ContactGroupJabberImpl theVolatileGroup=getNonPersistentGroup();
  if (theVolatileGroup == null)   return false;
  ContactJabberImpl contact=theVolatileGroup.findContact(contactAddress);
  if (contact == null || !(contact instanceof VolatileContactJabberImpl))   return false;
  return ((VolatileContactJabberImpl)contact).isPrivateMessagingContact();
}",0.9985401459854014
102984,"/** 
 * Delivers the specified event to all registered message listeners.
 * @param evt the <tt>EventObject</tt> that we'd like delivered to allregistered message listeners.
 */
private void fireMessageEvent(EventObject evt){
  Iterable<ChatRoomMessageListener> listeners;
synchronized (messageListeners) {
    listeners=new ArrayList<ChatRoomMessageListener>(messageListeners);
  }
  for (  ChatRoomMessageListener listener : listeners) {
    try {
      if (evt instanceof ChatRoomMessageDeliveredEvent) {
        listener.messageDelivered((ChatRoomMessageDeliveredEvent)evt);
      }
 else       if (evt instanceof ChatRoomMessageReceivedEvent) {
        listener.messageReceived((ChatRoomMessageReceivedEvent)evt);
      }
 else       if (evt instanceof ChatRoomMessageDeliveryFailedEvent) {
        listener.messageDeliveryFailed((ChatRoomMessageDeliveryFailedEvent)evt);
      }
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"" + listener,e);
    }
  }
}","/** 
 * Delivers the specified event to all registered message listeners.
 * @param evt the <tt>EventObject</tt> that we'd like delivered to allregistered message listeners.
 */
void fireMessageEvent(EventObject evt){
  Iterable<ChatRoomMessageListener> listeners;
synchronized (messageListeners) {
    listeners=new ArrayList<ChatRoomMessageListener>(messageListeners);
  }
  for (  ChatRoomMessageListener listener : listeners) {
    try {
      if (evt instanceof ChatRoomMessageDeliveredEvent) {
        listener.messageDelivered((ChatRoomMessageDeliveredEvent)evt);
      }
 else       if (evt instanceof ChatRoomMessageReceivedEvent) {
        listener.messageReceived((ChatRoomMessageReceivedEvent)evt);
      }
 else       if (evt instanceof ChatRoomMessageDeliveryFailedEvent) {
        listener.messageDeliveryFailed((ChatRoomMessageDeliveryFailedEvent)evt);
      }
    }
 catch (    Throwable e) {
      logger.error(""String_Node_Str"" + listener,e);
    }
  }
}",0.9959058341862844
102985,"/** 
 * Removes the specified group from the list of groups in this list.
 * @param group the <tt>MetaContactGroup</tt> to remove.
 * @return true if the group has been successfully removed and falseotherwise.
 */
boolean removeSubgroup(MetaContactGroup group){
  return subgroups.remove(group);
}","/** 
 * Removes the specified group from the list of groups in this list.
 * @param group the <tt>MetaContactGroup</tt> to remove.
 * @return true if the group has been successfully removed and falseotherwise.
 */
boolean removeSubgroup(MetaContactGroup group){
  if (subgroups.contains(group)) {
    removeSubgroup(subgroupsOrderedCopy.indexOf(group));
    return true;
  }
 else {
    return false;
  }
}",0.8108108108108109
102986,"/** 
 * Indicates that a new plugin component has been added. Adds it to this container if it belongs to it.
 * @param event the <tt>PluginComponentEvent</tt> that notified us
 */
public void pluginComponentAdded(PluginComponentEvent event){
  PluginComponentFactory factory=event.getPluginComponentFactory();
  if (!factory.getContainer().equals(net.java.sip.communicator.service.gui.Container.CONTAINER_CHAT_WRITE_PANEL))   return;
  PluginComponent component=factory.getPluginComponentInstance(this);
  ChatSession chatSession=chatPanel.getChatSession();
  if (chatSession != null) {
    ChatTransport currentTransport=chatSession.getCurrentChatTransport();
    Object currentDescriptor=currentTransport.getDescriptor();
    if (currentDescriptor instanceof Contact) {
      Contact contact=(Contact)currentDescriptor;
      component.setCurrentContact(contact,currentTransport.getResourceName());
    }
  }
  centerPanel.add((Component)component.getComponent());
  this.centerPanel.repaint();
}","/** 
 * Indicates that a new plugin component has been added. Adds it to this container if it belongs to it.
 * @param event the <tt>PluginComponentEvent</tt> that notified us
 */
public void pluginComponentAdded(PluginComponentEvent event){
  PluginComponentFactory factory=event.getPluginComponentFactory();
  if (!factory.getContainer().equals(net.java.sip.communicator.service.gui.Container.CONTAINER_CHAT_WRITE_PANEL))   return;
  PluginComponent component=factory.getPluginComponentInstance(this);
  ChatSession chatSession=chatPanel.getChatSession();
  if (chatSession != null) {
    ChatTransport currentTransport=chatSession.getCurrentChatTransport();
    Object currentDescriptor=currentTransport.getDescriptor();
    if (currentDescriptor instanceof Contact) {
      Contact contact=(Contact)currentDescriptor;
      component.setCurrentContact(contact,currentTransport.getResourceName());
    }
  }
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.anchor=GridBagConstraints.NORTHEAST;
  constraints.fill=GridBagConstraints.NONE;
  constraints.gridy=0;
  constraints.gridheight=1;
  constraints.weightx=0f;
  constraints.weighty=0f;
  constraints.insets=new Insets(0,3,0,0);
  centerPanel.add((Component)component.getComponent(),constraints);
  this.centerPanel.repaint();
}",0.8651928912006935
102987,"/** 
 * Initializes plug-in components for this container.
 */
void initPluginComponents(){
  ServiceReference[] serRefs=null;
  String osgiFilter=""String_Node_Str"" + net.java.sip.communicator.service.gui.Container.CONTAINER_ID + ""String_Node_Str""+ net.java.sip.communicator.service.gui.Container.CONTAINER_CHAT_WRITE_PANEL.getID()+ ""String_Node_Str"";
  try {
    serRefs=GuiActivator.bundleContext.getServiceReferences(PluginComponentFactory.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException exc) {
    logger.error(""String_Node_Str"",exc);
  }
  if (serRefs != null) {
    for (int i=0; i < serRefs.length; i++) {
      PluginComponentFactory factory=(PluginComponentFactory)GuiActivator.bundleContext.getService(serRefs[i]);
      PluginComponent component=factory.getPluginComponentInstance(this);
      ChatSession chatSession=chatPanel.getChatSession();
      if (chatSession != null) {
        ChatTransport currentTransport=chatSession.getCurrentChatTransport();
        Object currentDescriptor=currentTransport.getDescriptor();
        if (currentDescriptor instanceof Contact) {
          Contact contact=(Contact)currentDescriptor;
          component.setCurrentContact(contact,currentTransport.getResourceName());
        }
      }
      if (component.getComponent() == null)       continue;
      centerPanel.add((Component)component.getComponent());
    }
  }
  GuiActivator.getUIService().addPluginComponentListener(this);
  this.centerPanel.repaint();
}","/** 
 * Initializes plug-in components for this container.
 */
void initPluginComponents(){
  ServiceReference[] serRefs=null;
  String osgiFilter=""String_Node_Str"" + net.java.sip.communicator.service.gui.Container.CONTAINER_ID + ""String_Node_Str""+ net.java.sip.communicator.service.gui.Container.CONTAINER_CHAT_WRITE_PANEL.getID()+ ""String_Node_Str"";
  try {
    serRefs=GuiActivator.bundleContext.getServiceReferences(PluginComponentFactory.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException exc) {
    logger.error(""String_Node_Str"",exc);
  }
  if (serRefs != null) {
    for (int i=0; i < serRefs.length; i++) {
      PluginComponentFactory factory=(PluginComponentFactory)GuiActivator.bundleContext.getService(serRefs[i]);
      PluginComponent component=factory.getPluginComponentInstance(this);
      ChatSession chatSession=chatPanel.getChatSession();
      if (chatSession != null) {
        ChatTransport currentTransport=chatSession.getCurrentChatTransport();
        Object currentDescriptor=currentTransport.getDescriptor();
        if (currentDescriptor instanceof Contact) {
          Contact contact=(Contact)currentDescriptor;
          component.setCurrentContact(contact,currentTransport.getResourceName());
        }
      }
      if (component.getComponent() == null)       continue;
      GridBagConstraints constraints=new GridBagConstraints();
      constraints.anchor=GridBagConstraints.NORTHEAST;
      constraints.fill=GridBagConstraints.NONE;
      constraints.gridy=0;
      constraints.gridheight=1;
      constraints.weightx=0f;
      constraints.weighty=0f;
      constraints.insets=new Insets(0,3,0,0);
      centerPanel.add((Component)component.getComponent(),constraints);
    }
  }
  GuiActivator.getUIService().addPluginComponentListener(this);
  this.centerPanel.repaint();
}",0.896468457591307
102988,"/** 
 * The OtrContactMenu constructor.
 * @param otrContact the OtrContact this menu refers to.
 * @param inMacOSXScreenMenuBar <tt>true</tt> if the new menu is to bedisplayed in the Mac OS X screen menu bar; <tt>false</tt>, otherwise
 * @param menu the parent menu
 */
public OtrContactMenu(OtrContact otrContact,boolean inMacOSXScreenMenuBar,JMenu menu,boolean isSeparateMenu){
  this.contact=otrContact;
  this.inMacOSXScreenMenuBar=inMacOSXScreenMenuBar;
  this.parentMenu=menu;
  String resourceName=otrContact.resource != null ? ""String_Node_Str"" + otrContact.resource.getResourceName() : ""String_Node_Str"";
  separateMenu=isSeparateMenu ? new SIPCommMenu(otrContact.contact.getDisplayName() + resourceName) : null;
  new OtrWeakListener<OtrContactMenu>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  setSessionStatus(OtrActivator.scOtrEngine.getSessionStatus(this.contact));
  setOtrPolicy(OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact));
  OtrPolicy policy=OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact);
  if (policy.getAllowV1() && policy.getAllowV2())   policy.setAllowV3(true);
 else   policy.setAllowV3(false);
  OtrActivator.scOtrEngine.setContactPolicy(contact.contact,policy);
  policy=OtrActivator.scOtrEngine.getGlobalPolicy();
  if (policy.getAllowV1() && policy.getAllowV2())   policy.setAllowV3(true);
 else   policy.setAllowV3(false);
  OtrActivator.scOtrEngine.setGlobalPolicy(policy);
  buildMenu();
}","/** 
 * The OtrContactMenu constructor.
 * @param otrContact the OtrContact this menu refers to.
 * @param inMacOSXScreenMenuBar <tt>true</tt> if the new menu is to bedisplayed in the Mac OS X screen menu bar; <tt>false</tt>, otherwise
 * @param menu the parent menu
 */
public OtrContactMenu(OtrContact otrContact,boolean inMacOSXScreenMenuBar,JMenu menu,boolean isSeparateMenu){
  this.contact=otrContact;
  this.inMacOSXScreenMenuBar=inMacOSXScreenMenuBar;
  this.parentMenu=menu;
  String resourceName=otrContact.resource != null ? ""String_Node_Str"" + otrContact.resource.getResourceName() : ""String_Node_Str"";
  separateMenu=isSeparateMenu ? new SIPCommMenu(otrContact.contact.getDisplayName() + resourceName) : null;
  new OtrWeakListener<OtrContactMenu>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  setSessionStatus(OtrActivator.scOtrEngine.getSessionStatus(this.contact));
  setOtrPolicy(OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact));
  OtrPolicy policy=OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact);
  if (policy.getAllowV1() && policy.getAllowV2() && !policy.getAllowV3()) {
    policy.setAllowV3(true);
    OtrActivator.scOtrEngine.setContactPolicy(contact.contact,policy);
  }
  policy=OtrActivator.scOtrEngine.getGlobalPolicy();
  if (policy.getAllowV1() && policy.getAllowV2() && !policy.getAllowV3()) {
    policy.setAllowV3(true);
    OtrActivator.scOtrEngine.setGlobalPolicy(policy);
  }
  buildMenu();
}",0.9565217391304348
102989,"/** 
 * The OTRv3OutgoingSessionSwitcher constructor
 */
public OTRv3OutgoingSessionSwitcher(Container container,PluginComponentFactory parentFactory){
  this.parentFactory=parentFactory;
  setPreferredSize(new Dimension(30,28));
  setMaximumSize(new Dimension(30,28));
  setMinimumSize(new Dimension(30,28));
  this.menu.setPreferredSize(new Dimension(30,45));
  this.menu.setMaximumSize(new Dimension(30,45));
  this.add(menu);
  this.setBorder(null);
  this.menu.setBorder(null);
  this.menu.setOpaque(false);
  this.setOpaque(false);
  this.menu.setVisible(false);
  buildMenu(contact);
  new OtrWeakListener<OTRv3OutgoingSessionSwitcher>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  try {
    finishedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    verifiedLockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    unverifiedLockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    unlockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
  }
 catch (  IOException e) {
    logger.debug(""String_Node_Str"");
  }
}","/** 
 * The OTRv3OutgoingSessionSwitcher constructor
 */
public OTRv3OutgoingSessionSwitcher(Container container,PluginComponentFactory parentFactory){
  this.parentFactory=parentFactory;
  setPreferredSize(new Dimension(30,28));
  setMaximumSize(new Dimension(30,28));
  setMinimumSize(new Dimension(30,28));
  this.menu.setPreferredSize(new Dimension(30,45));
  this.menu.setMaximumSize(new Dimension(30,45));
  this.add(menu);
  this.setBorder(null);
  this.menu.setBorder(null);
  this.menu.setOpaque(false);
  this.setOpaque(false);
  this.menu.setVisible(false);
  new OtrWeakListener<OTRv3OutgoingSessionSwitcher>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  try {
    finishedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    verifiedLockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    unverifiedLockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
    unlockedPadlockImage=new ImageIcon(ImageIO.read(OtrActivator.resourceService.getImageURL(""String_Node_Str"")));
  }
 catch (  IOException e) {
    logger.debug(""String_Node_Str"");
  }
  buildMenu(contact);
}",0.982525814138205
102990,"/** 
 * Shows chat room open automatically configuration dialog.
 * @param chatRoomId the chat room id of the chat room associated with the dialog 
 * @param pps the protocol provider service of the chat room
 */
public void showChatRoomAutoOpenConfigDialog(ProtocolProviderService pps,String chatRoomId){
  new ChatRoomAutoOpenConfigDialog(pps,chatRoomId);
}","/** 
 * Shows chat room open automatically configuration dialog.
 * @param chatRoomId the chat room id of the chat room associated with the dialog 
 * @param pps the protocol provider service of the chat room
 */
public void showChatRoomAutoOpenConfigDialog(ProtocolProviderService pps,String chatRoomId){
  ChatRoomAutoOpenConfigDialog.showChatRoomAutoOpenConfigDialog(pps,chatRoomId);
}",0.9531459170013388
102991,"@Override public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source instanceof JButton) {
    if (source.equals(okButton)) {
      MUCService.setChatRoomAutoOpenOption(pps,chatRoomId,value);
    }
    this.dispose();
  }
 else   if (source instanceof JRadioButton) {
    if (source.equals(openOnActivity)) {
      value=MUCService.OPEN_ON_ACTIVITY;
    }
 else     if (source.equals(openOnImportantMessage)) {
      value=MUCService.OPEN_ON_IMPORTANT_MESSAGE;
    }
 else {
      value=MUCService.OPEN_ON_MESSAGE;
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source instanceof JButton) {
    if (source.equals(okButton)) {
      MUCService.setChatRoomAutoOpenOption(pps,chatRoomId,value);
    }
    this.dispose();
  }
 else   if (source instanceof JRadioButton) {
    if (source.equals(openOnActivity)) {
      value=MUCService.OPEN_ON_ACTIVITY;
    }
 else     if (source.equals(openOnMessage)) {
      value=MUCService.OPEN_ON_MESSAGE;
    }
 else {
      value=MUCService.OPEN_ON_IMPORTANT_MESSAGE;
    }
  }
}",0.8864668483197093
102992,"@Override public void dispose(){
  GuiActivator.getConfigurationService().removePropertyChangeListener(MessageHistoryService.PNAME_IS_MESSAGE_HISTORY_ENABLED,propertyListener);
  GuiActivator.getConfigurationService().removePropertyChangeListener(MessageHistoryService.PNAME_IS_MESSAGE_HISTORY_PER_CONTACT_ENABLED_PREFIX + ""String_Node_Str"" + chatRoomId,propertyListener);
  super.dispose();
}","@Override public void dispose(){
  clearListeners();
  super.dispose();
}",0.3004291845493562
102993,"/** 
 * Constructs new <tt>ChatRoomAutoOpenConfigDialog</tt> instance.
 * @param chatRoomId the chat room id of the chat room associated with the dialog 
 * @param pps the protocol provider service of the chat room
 */
public ChatRoomAutoOpenConfigDialog(ProtocolProviderService pps,final String chatRoomId){
  this.pps=pps;
  this.chatRoomId=chatRoomId;
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  value=MUCService.getChatRoomAutoOpenOption(pps,chatRoomId);
  GuiActivator.getConfigurationService().addPropertyChangeListener(MessageHistoryService.PNAME_IS_MESSAGE_HISTORY_ENABLED,propertyListener);
  GuiActivator.getConfigurationService().addPropertyChangeListener(MessageHistoryService.PNAME_IS_MESSAGE_HISTORY_PER_CONTACT_ENABLED_PREFIX + ""String_Node_Str"" + chatRoomId,propertyListener);
  if (value == null)   value=MUCService.OPEN_ON_MESSAGE;
  if (value.equals(MUCService.OPEN_ON_ACTIVITY)) {
    openOnActivity.setSelected(true);
  }
 else   if (value.equals(MUCService.OPEN_ON_IMPORTANT_MESSAGE)) {
    openOnImportantMessage.setSelected(true);
  }
 else {
    openOnMessage.setSelected(true);
  }
  JPanel choicePanel=new TransparentPanel();
  choicePanel.setLayout(new BoxLayout(choicePanel,BoxLayout.Y_AXIS));
  openOnActivity.addActionListener(this);
  openOnMessage.addActionListener(this);
  openOnImportantMessage.addActionListener(this);
  setTitle(GuiActivator.getResources().getI18NString(""String_Node_Str""));
  openOnActivity.setOpaque(false);
  openOnMessage.setOpaque(false);
  openOnImportantMessage.setOpaque(false);
  ButtonGroup buttonGroup=new ButtonGroup();
  buttonGroup.add(openOnActivity);
  buttonGroup.add(openOnMessage);
  buttonGroup.add(openOnImportantMessage);
  choicePanel.add(openOnActivity);
  choicePanel.add(openOnMessage);
  choicePanel.add(openOnImportantMessage);
  JPanel buttonPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  updateView();
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  buttonPanel.add(okButton);
  buttonPanel.add(cancelButton);
  add(choicePanel,BorderLayout.CENTER);
  add(buttonPanel,BorderLayout.SOUTH);
  setPreferredSize(new Dimension(300,140));
  setVisible(true);
}","/** 
 * Constructs new <tt>ChatRoomAutoOpenConfigDialog</tt> instance.
 * @param chatRoomId the chat room id of the chat room associated with the dialog 
 * @param pps the protocol provider service of the chat room
 */
private ChatRoomAutoOpenConfigDialog(ProtocolProviderService pps,final String chatRoomId){
  this.pps=pps;
  this.chatRoomId=chatRoomId;
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  refreshValue();
  JPanel choicePanel=new TransparentPanel();
  choicePanel.setLayout(new BoxLayout(choicePanel,BoxLayout.Y_AXIS));
  choicePanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  openOnActivity.addActionListener(this);
  openOnMessage.addActionListener(this);
  openOnImportantMessage.addActionListener(this);
  setTitle(GuiActivator.getResources().getI18NString(""String_Node_Str""));
  openOnActivity.setOpaque(false);
  openOnMessage.setOpaque(false);
  openOnImportantMessage.setOpaque(false);
  ButtonGroup buttonGroup=new ButtonGroup();
  buttonGroup.add(openOnActivity);
  buttonGroup.add(openOnMessage);
  buttonGroup.add(openOnImportantMessage);
  choicePanel.add(openOnActivity);
  choicePanel.add(openOnMessage);
  choicePanel.add(openOnImportantMessage);
  JPanel buttonPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  updateView();
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  buttonPanel.add(okButton);
  buttonPanel.add(cancelButton);
  add(choicePanel,BorderLayout.CENTER);
  add(buttonPanel,BorderLayout.SOUTH);
  setVisible(true);
  setPreferredSize(new Dimension(320,150));
  pack();
}",0.7767503302509907
102994,"@Override public String getText(SourceContact actionSource){
  if (!name.equals(""String_Node_Str""))   return text;
  String openAutomaticallyValue=MUCService.getChatRoomAutoOpenOption(((ChatRoomSourceContact)actionSource).getProvider(),((ChatRoomSourceContact)actionSource).getChatRoomID());
  if (openAutomaticallyValue == null)   openAutomaticallyValue=MUCService.OPEN_ON_MESSAGE;
  String openAutomaticallyKey=MUCService.autoOpenConfigValuesTexts.get(openAutomaticallyValue);
  return text + ""String_Node_Str"" + resources.getI18NString(openAutomaticallyKey)+ ""String_Node_Str"";
}","@Override public String getText(SourceContact actionSource){
  if (!name.equals(""String_Node_Str""))   return text;
  String openAutomaticallyValue=MUCService.getChatRoomAutoOpenOption(((ChatRoomSourceContact)actionSource).getProvider(),((ChatRoomSourceContact)actionSource).getChatRoomID());
  if (openAutomaticallyValue == null)   openAutomaticallyValue=MUCService.OPEN_ON_IMPORTANT_MESSAGE;
  String openAutomaticallyKey=MUCService.autoOpenConfigValuesTexts.get(openAutomaticallyValue);
  return ""String_Node_Str"" + text + ""String_Node_Str""+ resources.getI18NString(openAutomaticallyKey)+ ""String_Node_Str"";
}",0.9740150880134116
102995,"/** 
 * The OtrContactMenu constructor.
 * @param otrContact the OtrContact this menu refers to.
 * @param inMacOSXScreenMenuBar <tt>true</tt> if the new menu is to bedisplayed in the Mac OS X screen menu bar; <tt>false</tt>, otherwise
 * @param menu the parent menu
 */
public OtrContactMenu(OtrContact otrContact,boolean inMacOSXScreenMenuBar,JMenu menu,boolean isSeparateMenu){
  this.contact=otrContact;
  this.inMacOSXScreenMenuBar=inMacOSXScreenMenuBar;
  this.parentMenu=menu;
  String resourceName=otrContact.resource != null ? ""String_Node_Str"" + otrContact.resource.getResourceName() : ""String_Node_Str"";
  separateMenu=isSeparateMenu ? new SIPCommMenu(otrContact.contact.getDisplayName() + resourceName) : null;
  new OtrWeakListener<OtrContactMenu>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  setSessionStatus(OtrActivator.scOtrEngine.getSessionStatus(this.contact));
  setOtrPolicy(OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact));
  OtrPolicy policy=OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact);
  if (policy.getAllowV1() && policy.getAllowV2() && !policy.getAllowV3()) {
    policy.setAllowV3(true);
    OtrActivator.scOtrEngine.setContactPolicy(contact.contact,policy);
  }
  policy=OtrActivator.scOtrEngine.getGlobalPolicy();
  if (policy.getAllowV1() && policy.getAllowV2() && !policy.getAllowV3()) {
    policy.setAllowV3(true);
    OtrActivator.scOtrEngine.setGlobalPolicy(policy);
  }
  buildMenu();
}","/** 
 * The OtrContactMenu constructor.
 * @param otrContact the OtrContact this menu refers to.
 * @param inMacOSXScreenMenuBar <tt>true</tt> if the new menu is to bedisplayed in the Mac OS X screen menu bar; <tt>false</tt>, otherwise
 * @param menu the parent menu
 */
public OtrContactMenu(OtrContact otrContact,boolean inMacOSXScreenMenuBar,JMenu menu,boolean isSeparateMenu){
  this.contact=otrContact;
  this.inMacOSXScreenMenuBar=inMacOSXScreenMenuBar;
  this.parentMenu=menu;
  String resourceName=otrContact.resource != null ? ""String_Node_Str"" + otrContact.resource.getResourceName() : ""String_Node_Str"";
  separateMenu=isSeparateMenu ? new SIPCommMenu(otrContact.contact.getDisplayName() + resourceName) : null;
  new OtrWeakListener<OtrContactMenu>(this,OtrActivator.scOtrEngine,OtrActivator.scOtrKeyManager);
  setSessionStatus(OtrActivator.scOtrEngine.getSessionStatus(this.contact));
  setOtrPolicy(OtrActivator.scOtrEngine.getContactPolicy(otrContact.contact));
  updateOldOtrPoliciesIfNeeded(otrContact);
  buildMenu();
}",0.8047808764940239
102996,"/** 
 * Sends <tt>message</tt> as a message correction through this transport, specifying the mime type (html or plain text) and the id of the message to replace.
 * @param message The message to send.
 * @param mimeType The mime type of the message to send: text/html ortext/plain.
 * @param correctedMessageUID The ID of the message being corrected bythis message.
 */
public void correctInstantMessage(String message,String mimeType,String correctedMessageUID){
  if (!allowsMessageCorrections()) {
    return;
  }
  OperationSetMessageCorrection mcOpSet=contact.getProtocolProvider().getOperationSet(OperationSetMessageCorrection.class);
  Message msg;
  if (mimeType.equals(OperationSetBasicInstantMessaging.HTML_MIME_TYPE) && mcOpSet.isContentTypeSupported(OperationSetBasicInstantMessaging.HTML_MIME_TYPE)) {
    msg=mcOpSet.createMessage(message,OperationSetBasicInstantMessaging.HTML_MIME_TYPE,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    msg=mcOpSet.createMessage(message);
  }
  mcOpSet.correctMessage(contact,msg,correctedMessageUID);
}","/** 
 * Sends <tt>message</tt> as a message correction through this transport, specifying the mime type (html or plain text) and the id of the message to replace.
 * @param message The message to send.
 * @param mimeType The mime type of the message to send: text/html ortext/plain.
 * @param correctedMessageUID The ID of the message being corrected bythis message.
 */
public void correctInstantMessage(String message,String mimeType,String correctedMessageUID){
  if (!allowsMessageCorrections()) {
    return;
  }
  OperationSetMessageCorrection mcOpSet=contact.getProtocolProvider().getOperationSet(OperationSetMessageCorrection.class);
  Message msg;
  if (mimeType.equals(OperationSetBasicInstantMessaging.HTML_MIME_TYPE) && mcOpSet.isContentTypeSupported(OperationSetBasicInstantMessaging.HTML_MIME_TYPE)) {
    msg=mcOpSet.createMessage(message,OperationSetBasicInstantMessaging.HTML_MIME_TYPE,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    msg=mcOpSet.createMessage(message);
  }
  mcOpSet.correctMessage(contact,contactResource,msg,correctedMessageUID);
}",0.9924882629107982
102997,"/** 
 * Replaces the message with ID <tt>correctedMessageUID</tt> sent to the contact <tt>to</tt> with the message <tt>message</tt>
 * @param to The contact to send the message to.
 * @param message The new message.
 * @param correctedMessageUID The ID of the message being replaced.
 */
public void correctMessage(Contact to,Message message,String correctedMessageUID){
  PacketExtension[] exts=new PacketExtension[1];
  exts[0]=new MessageCorrectionExtension(correctedMessageUID);
  MessageDeliveredEvent msgDelivered=sendMessage(to,null,message,exts);
  msgDelivered.setCorrectedMessageUID(correctedMessageUID);
  fireMessageEvent(msgDelivered);
}","/** 
 * Replaces the message with ID <tt>correctedMessageUID</tt> sent to the contact <tt>to</tt> with the message <tt>message</tt>
 * @param to The contact to send the message to.
 * @param message The new message.
 * @param correctedMessageUID The ID of the message being replaced.
 */
public void correctMessage(Contact to,ContactResource resource,Message message,String correctedMessageUID){
  PacketExtension[] exts=new PacketExtension[1];
  exts[0]=new MessageCorrectionExtension(correctedMessageUID);
  MessageDeliveredEvent msgDelivered=sendMessage(to,resource,message,exts);
  msgDelivered.setCorrectedMessageUID(correctedMessageUID);
  fireMessageEvent(msgDelivered);
}",0.9736644093303236
102998,"/** 
 * Replaces the message with ID <tt>correctedMessageUID</tt> sent to the contact <tt>to</tt> with the message <tt>message</tt>
 * @param to The contact to send the message to.
 * @param message The new message.
 * @param correctedMessageUID The ID of the message being replaced.
 */
public void correctMessage(Contact to,Message message,String correctedMessageUID);","/** 
 * Replaces the message with ID <tt>correctedMessageUID</tt> sent to the contact <tt>to</tt> with the message <tt>message</tt>
 * @param to The contact to send the message to.
 * @param resource The ContactResource to send the message to.
 * @param message The new message.
 * @param correctedMessageUID The ID of the message being replaced.
 */
public void correctMessage(Contact to,ContactResource resource,Message message,String correctedMessageUID);",0.893719806763285
102999,"@Override public void localUserRoleChanged(ChatRoomLocalUserRoleChangeEvent evt){
  ChatRoom sourceChatRoom=evt.getSourceChatRoom();
  ChatRoomWrapper chatRoomWrapper=GuiActivator.getMUCService().findChatRoomWrapperFromChatRoom(sourceChatRoom);
  ChatWindowManager chatWindowManager=GuiActivator.getUIService().getChatWindowManager();
  ChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper,true);
  chatWindowManager.openChat(chatPanel,true);
}","@Override public void localUserRoleChanged(ChatRoomLocalUserRoleChangeEvent evt){
  if (evt.isInitial())   return;
  ChatRoom sourceChatRoom=evt.getSourceChatRoom();
  ChatRoomWrapper chatRoomWrapper=GuiActivator.getMUCService().findChatRoomWrapperFromChatRoom(sourceChatRoom);
  ChatWindowManager chatWindowManager=GuiActivator.getUIService().getChatWindowManager();
  ChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper,true);
  chatWindowManager.openChat(chatPanel,true);
}",0.96522655426765
103000,"/** 
 * Processes a <tt>Presence</tt> packet addressed to our own occupant JID.
 * @param presence the packet to process.
 */
private void processOwnPresence(Presence presence){
  MUCUser mucUser=getMUCUserExtension(presence);
  if (mucUser != null) {
    String affiliation=mucUser.getItem().getAffiliation();
    String role=mucUser.getItem().getRole();
    if (mucUser.getStatus() != null && ""String_Node_Str"".equals(mucUser.getStatus().getCode())) {
      try {
        multiUserChat.sendConfigurationForm(new Form(Form.TYPE_SUBMIT));
      }
 catch (      XMPPException e) {
        logger.error(""String_Node_Str"",e);
      }
      opSetMuc.addSmackInvitationRejectionListener(multiUserChat,chatRoom);
      if (affiliation.equalsIgnoreCase(ChatRoomMemberRole.OWNER.getRoleName().toLowerCase())) {
        setLocalUserRole(ChatRoomMemberRole.OWNER);
      }
 else       setLocalUserRole(ChatRoomMemberRole.MODERATOR);
    }
 else {
      ChatRoomMemberRole jitsiRole=ChatRoomJabberImpl.smackRoleToScRole(role,affiliation);
      if (jitsiRole == ChatRoomMemberRole.MODERATOR || jitsiRole == ChatRoomMemberRole.OWNER || jitsiRole == ChatRoomMemberRole.ADMINISTRATOR) {
        setLocalUserRole(jitsiRole);
      }
    }
  }
}","/** 
 * Processes a <tt>Presence</tt> packet addressed to our own occupant JID.
 * @param presence the packet to process.
 */
private void processOwnPresence(Presence presence){
  MUCUser mucUser=getMUCUserExtension(presence);
  if (mucUser != null) {
    String affiliation=mucUser.getItem().getAffiliation();
    String role=mucUser.getItem().getRole();
    if (mucUser.getStatus() != null && ""String_Node_Str"".equals(mucUser.getStatus().getCode())) {
      try {
        multiUserChat.sendConfigurationForm(new Form(Form.TYPE_SUBMIT));
      }
 catch (      XMPPException e) {
        logger.error(""String_Node_Str"",e);
      }
      opSetMuc.addSmackInvitationRejectionListener(multiUserChat,chatRoom);
      if (affiliation.equalsIgnoreCase(ChatRoomMemberRole.OWNER.getRoleName().toLowerCase())) {
        setLocalUserRole(ChatRoomMemberRole.OWNER,true);
      }
 else       setLocalUserRole(ChatRoomMemberRole.MODERATOR,true);
    }
 else {
      ChatRoomMemberRole jitsiRole=ChatRoomJabberImpl.smackRoleToScRole(role,affiliation);
      if (jitsiRole == ChatRoomMemberRole.MODERATOR || jitsiRole == ChatRoomMemberRole.OWNER || jitsiRole == ChatRoomMemberRole.ADMINISTRATOR) {
        setLocalUserRole(jitsiRole,true);
      }
    }
  }
}",0.9939344925192074
